
18.RTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087f8  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08008a98  08008a98  00009a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008b68  08008b68  00009b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008b70  08008b70  00009b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08008b74  08008b74  00009b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  24000000  08008b78  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000228  2400006c  08008be4  0000a06c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000294  08008be4  0000a294  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000a06c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00015fc5  00000000  00000000  0000a09a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003128  00000000  00000000  0002005f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000f68  00000000  00000000  00023188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000bb6  00000000  00000000  000240f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003994d  00000000  00000000  00024ca6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001aa81  00000000  00000000  0005e5f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00162ee3  00000000  00000000  00079074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001dbf57  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004538  00000000  00000000  001dbf9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005a  00000000  00000000  001e04d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400006c 	.word	0x2400006c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008a80 	.word	0x08008a80

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000070 	.word	0x24000070
 80002dc:	08008a80 	.word	0x08008a80

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <MX_BEEP_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_BEEP_GPIO_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b086      	sub	sp, #24
 80006b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006c0:	4b12      	ldr	r3, [pc, #72]	@ (800070c <MX_BEEP_GPIO_Init+0x60>)
 80006c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006c6:	4a11      	ldr	r2, [pc, #68]	@ (800070c <MX_BEEP_GPIO_Init+0x60>)
 80006c8:	f043 0310 	orr.w	r3, r3, #16
 80006cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006d0:	4b0e      	ldr	r3, [pc, #56]	@ (800070c <MX_BEEP_GPIO_Init+0x60>)
 80006d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006d6:	f003 0310 	and.w	r3, r3, #16
 80006da:	603b      	str	r3, [r7, #0]
 80006dc:	683b      	ldr	r3, [r7, #0]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BEEP_GPIO_Port, BEEP_Pin, GPIO_PIN_RESET);
 80006de:	2200      	movs	r2, #0
 80006e0:	2110      	movs	r1, #16
 80006e2:	480b      	ldr	r0, [pc, #44]	@ (8000710 <MX_BEEP_GPIO_Init+0x64>)
 80006e4:	f002 f83c 	bl	8002760 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BEEP_Pin */
  GPIO_InitStruct.Pin = BEEP_Pin;
 80006e8:	2310      	movs	r3, #16
 80006ea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ec:	2301      	movs	r3, #1
 80006ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f0:	2300      	movs	r3, #0
 80006f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f4:	2300      	movs	r3, #0
 80006f6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006f8:	1d3b      	adds	r3, r7, #4
 80006fa:	4619      	mov	r1, r3
 80006fc:	4804      	ldr	r0, [pc, #16]	@ (8000710 <MX_BEEP_GPIO_Init+0x64>)
 80006fe:	f001 fe7f 	bl	8002400 <HAL_GPIO_Init>
}
 8000702:	bf00      	nop
 8000704:	3718      	adds	r7, #24
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	58024400 	.word	0x58024400
 8000710:	58021000 	.word	0x58021000

08000714 <MX_KEY_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_KEY_GPIO_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b086      	sub	sp, #24
 8000718:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000728:	4b14      	ldr	r3, [pc, #80]	@ (800077c <MX_KEY_GPIO_Init+0x68>)
 800072a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800072e:	4a13      	ldr	r2, [pc, #76]	@ (800077c <MX_KEY_GPIO_Init+0x68>)
 8000730:	f043 0301 	orr.w	r3, r3, #1
 8000734:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000738:	4b10      	ldr	r3, [pc, #64]	@ (800077c <MX_KEY_GPIO_Init+0x68>)
 800073a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	603b      	str	r3, [r7, #0]
 8000744:	683b      	ldr	r3, [r7, #0]
  /*Configure GPIO pin : WK_UP_Pin */
  GPIO_InitStruct.Pin = WK_UP_Pin;
 8000746:	2301      	movs	r3, #1
 8000748:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800074a:	2300      	movs	r3, #0
 800074c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800074e:	2302      	movs	r3, #2
 8000750:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(WK_UP_GPIO_Port, &GPIO_InitStruct);
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	4619      	mov	r1, r3
 8000756:	480a      	ldr	r0, [pc, #40]	@ (8000780 <MX_KEY_GPIO_Init+0x6c>)
 8000758:	f001 fe52 	bl	8002400 <HAL_GPIO_Init>
  /*Configure GPIO pins : KEY0_Pin KEY1_Pin */
  GPIO_InitStruct.Pin = KEY0_Pin|KEY1_Pin;
 800075c:	f248 0302 	movw	r3, #32770	@ 0x8002
 8000760:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000762:	2300      	movs	r3, #0
 8000764:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000766:	2301      	movs	r3, #1
 8000768:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800076a:	1d3b      	adds	r3, r7, #4
 800076c:	4619      	mov	r1, r3
 800076e:	4804      	ldr	r0, [pc, #16]	@ (8000780 <MX_KEY_GPIO_Init+0x6c>)
 8000770:	f001 fe46 	bl	8002400 <HAL_GPIO_Init>
}
 8000774:	bf00      	nop
 8000776:	3718      	adds	r7, #24
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	58024400 	.word	0x58024400
 8000780:	58020000 	.word	0x58020000

08000784 <MX_LED_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_LED_GPIO_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b088      	sub	sp, #32
 8000788:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078a:	f107 030c 	add.w	r3, r7, #12
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
 8000798:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800079a:	4b24      	ldr	r3, [pc, #144]	@ (800082c <MX_LED_GPIO_Init+0xa8>)
 800079c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007a0:	4a22      	ldr	r2, [pc, #136]	@ (800082c <MX_LED_GPIO_Init+0xa8>)
 80007a2:	f043 0310 	orr.w	r3, r3, #16
 80007a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007aa:	4b20      	ldr	r3, [pc, #128]	@ (800082c <MX_LED_GPIO_Init+0xa8>)
 80007ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007b0:	f003 0310 	and.w	r3, r3, #16
 80007b4:	60bb      	str	r3, [r7, #8]
 80007b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b8:	4b1c      	ldr	r3, [pc, #112]	@ (800082c <MX_LED_GPIO_Init+0xa8>)
 80007ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007be:	4a1b      	ldr	r2, [pc, #108]	@ (800082c <MX_LED_GPIO_Init+0xa8>)
 80007c0:	f043 0302 	orr.w	r3, r3, #2
 80007c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007c8:	4b18      	ldr	r3, [pc, #96]	@ (800082c <MX_LED_GPIO_Init+0xa8>)
 80007ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007ce:	f003 0302 	and.w	r3, r3, #2
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_Pin|LED2_Pin, GPIO_PIN_SET);
 80007d6:	2201      	movs	r2, #1
 80007d8:	2160      	movs	r1, #96	@ 0x60
 80007da:	4815      	ldr	r0, [pc, #84]	@ (8000830 <MX_LED_GPIO_Init+0xac>)
 80007dc:	f001 ffc0 	bl	8002760 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 80007e0:	2201      	movs	r2, #1
 80007e2:	2110      	movs	r1, #16
 80007e4:	4813      	ldr	r0, [pc, #76]	@ (8000834 <MX_LED_GPIO_Init+0xb0>)
 80007e6:	f001 ffbb 	bl	8002760 <HAL_GPIO_WritePin>
  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 80007ea:	2360      	movs	r3, #96	@ 0x60
 80007ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ee:	2301      	movs	r3, #1
 80007f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f6:	2300      	movs	r3, #0
 80007f8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007fa:	f107 030c 	add.w	r3, r7, #12
 80007fe:	4619      	mov	r1, r3
 8000800:	480b      	ldr	r0, [pc, #44]	@ (8000830 <MX_LED_GPIO_Init+0xac>)
 8000802:	f001 fdfd 	bl	8002400 <HAL_GPIO_Init>
  /*Configure GPIO pin : LED0_Pin */
  GPIO_InitStruct.Pin = LED0_Pin;
 8000806:	2310      	movs	r3, #16
 8000808:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080a:	2301      	movs	r3, #1
 800080c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000812:	2300      	movs	r3, #0
 8000814:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8000816:	f107 030c 	add.w	r3, r7, #12
 800081a:	4619      	mov	r1, r3
 800081c:	4805      	ldr	r0, [pc, #20]	@ (8000834 <MX_LED_GPIO_Init+0xb0>)
 800081e:	f001 fdef 	bl	8002400 <HAL_GPIO_Init>
}
 8000822:	bf00      	nop
 8000824:	3720      	adds	r7, #32
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	58024400 	.word	0x58024400
 8000830:	58021000 	.word	0x58021000
 8000834:	58020400 	.word	0x58020400

08000838 <bsp_init>:
#include "bsp_init.h"

void bsp_init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
	MX_LED_GPIO_Init();
 800083c:	f7ff ffa2 	bl	8000784 <MX_LED_GPIO_Init>
	MX_BEEP_GPIO_Init();
 8000840:	f7ff ff34 	bl	80006ac <MX_BEEP_GPIO_Init>
	MX_KEY_GPIO_Init();
 8000844:	f7ff ff66 	bl	8000714 <MX_KEY_GPIO_Init>
	// MX_EXTI_GPIO_Init();
	MX_USART1_UART_Init();
 8000848:	f000 fd30 	bl	80012ac <MX_USART1_UART_Init>
}
 800084c:	bf00      	nop
 800084e:	bd80      	pop	{r7, pc}

08000850 <main>:

void SystemClock_Config(void);
static void MPU_Config(void);

int main(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b086      	sub	sp, #24
 8000854:	af02      	add	r7, sp, #8
  uint8_t hour, min, sec, ampm;
  uint8_t year, month, date, week;
  uint8_t i = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	73fb      	strb	r3, [r7, #15]
  MPU_Config();
 800085a:	f000 f8e9 	bl	8000a30 <MPU_Config>
  HAL_Init();
 800085e:	f000 fe21 	bl	80014a4 <HAL_Init>
  SystemClock_Config();
 8000862:	f000 f869 	bl	8000938 <SystemClock_Config>
  bsp_init();
 8000866:	f7ff ffe7 	bl	8000838 <bsp_init>
  MX_RTC_Init();
 800086a:	f000 f997 	bl	8000b9c <MX_RTC_Init>
  rtc_set_wakeup(RTC_WAKEUPCLOCK_CK_SPRE_16BITS, 0); // 每隔1秒钟唤醒一次
 800086e:	2100      	movs	r1, #0
 8000870:	2004      	movs	r0, #4
 8000872:	f000 fb09 	bl	8000e88 <rtc_set_wakeup>
  rtc_set_time(12, 12, 12, RTC_HOURFORMAT12_AM); // 设置时间 上午12:12:12
 8000876:	2300      	movs	r3, #0
 8000878:	220c      	movs	r2, #12
 800087a:	210c      	movs	r1, #12
 800087c:	200c      	movs	r0, #12
 800087e:	f000 f92b 	bl	8000ad8 <rtc_set_time>
  rtc_set_date(23, 3, 1, 3); // 设置日期 2023年3月1日 星期三
 8000882:	2303      	movs	r3, #3
 8000884:	2201      	movs	r2, #1
 8000886:	2103      	movs	r1, #3
 8000888:	2017      	movs	r0, #23
 800088a:	f000 f95b 	bl	8000b44 <rtc_set_date>
  rtc_set_alarma(3, 12, 12, 50); // 设置闹钟 星期三 12:12:50
 800088e:	2332      	movs	r3, #50	@ 0x32
 8000890:	220c      	movs	r2, #12
 8000892:	210c      	movs	r1, #12
 8000894:	2003      	movs	r0, #3
 8000896:	f000 fabb 	bl	8000e10 <rtc_set_alarma>
  while (1)
  {
    i++;
 800089a:	7bfb      	ldrb	r3, [r7, #15]
 800089c:	3301      	adds	r3, #1
 800089e:	73fb      	strb	r3, [r7, #15]
    if((i % 10) == 0)
 80008a0:	7bfa      	ldrb	r2, [r7, #15]
 80008a2:	4b20      	ldr	r3, [pc, #128]	@ (8000924 <main+0xd4>)
 80008a4:	fba3 1302 	umull	r1, r3, r3, r2
 80008a8:	08d9      	lsrs	r1, r3, #3
 80008aa:	460b      	mov	r3, r1
 80008ac:	009b      	lsls	r3, r3, #2
 80008ae:	440b      	add	r3, r1
 80008b0:	005b      	lsls	r3, r3, #1
 80008b2:	1ad3      	subs	r3, r2, r3
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d12f      	bne.n	800091a <main+0xca>
    {
      rtc_get_time(&hour, &min, &sec, &ampm);
 80008ba:	f107 030b 	add.w	r3, r7, #11
 80008be:	f107 020c 	add.w	r2, r7, #12
 80008c2:	f107 010d 	add.w	r1, r7, #13
 80008c6:	f107 000e 	add.w	r0, r7, #14
 80008ca:	f000 fa57 	bl	8000d7c <rtc_get_time>
      printf("Time: %02d:%02d:%02d %s, ", hour, min, sec, (ampm == RTC_HOURFORMAT12_AM) ? "AM" : "PM");
 80008ce:	7bbb      	ldrb	r3, [r7, #14]
 80008d0:	4619      	mov	r1, r3
 80008d2:	7b7b      	ldrb	r3, [r7, #13]
 80008d4:	461a      	mov	r2, r3
 80008d6:	7b3b      	ldrb	r3, [r7, #12]
 80008d8:	4618      	mov	r0, r3
 80008da:	7afb      	ldrb	r3, [r7, #11]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d101      	bne.n	80008e4 <main+0x94>
 80008e0:	4b11      	ldr	r3, [pc, #68]	@ (8000928 <main+0xd8>)
 80008e2:	e000      	b.n	80008e6 <main+0x96>
 80008e4:	4b11      	ldr	r3, [pc, #68]	@ (800092c <main+0xdc>)
 80008e6:	9300      	str	r3, [sp, #0]
 80008e8:	4603      	mov	r3, r0
 80008ea:	4811      	ldr	r0, [pc, #68]	@ (8000930 <main+0xe0>)
 80008ec:	f007 f9fe 	bl	8007cec <iprintf>
      rtc_get_date(&year, &month, &date, &week);
 80008f0:	1dfb      	adds	r3, r7, #7
 80008f2:	f107 0208 	add.w	r2, r7, #8
 80008f6:	f107 0109 	add.w	r1, r7, #9
 80008fa:	f107 000a 	add.w	r0, r7, #10
 80008fe:	f000 fa65 	bl	8000dcc <rtc_get_date>
      printf("Date: 20%02d-%02d-%02d, Weekday: %d\r\n", year, month, date, week);
 8000902:	7abb      	ldrb	r3, [r7, #10]
 8000904:	4619      	mov	r1, r3
 8000906:	7a7b      	ldrb	r3, [r7, #9]
 8000908:	461a      	mov	r2, r3
 800090a:	7a3b      	ldrb	r3, [r7, #8]
 800090c:	4618      	mov	r0, r3
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	9300      	str	r3, [sp, #0]
 8000912:	4603      	mov	r3, r0
 8000914:	4807      	ldr	r0, [pc, #28]	@ (8000934 <main+0xe4>)
 8000916:	f007 f9e9 	bl	8007cec <iprintf>
    }
    HAL_Delay(100);
 800091a:	2064      	movs	r0, #100	@ 0x64
 800091c:	f000 fe54 	bl	80015c8 <HAL_Delay>
    i++;
 8000920:	e7bb      	b.n	800089a <main+0x4a>
 8000922:	bf00      	nop
 8000924:	cccccccd 	.word	0xcccccccd
 8000928:	08008a98 	.word	0x08008a98
 800092c:	08008a9c 	.word	0x08008a9c
 8000930:	08008aa0 	.word	0x08008aa0
 8000934:	08008abc 	.word	0x08008abc

08000938 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b09c      	sub	sp, #112	@ 0x70
 800093c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800093e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000942:	224c      	movs	r2, #76	@ 0x4c
 8000944:	2100      	movs	r1, #0
 8000946:	4618      	mov	r0, r3
 8000948:	f007 fb18 	bl	8007f7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800094c:	1d3b      	adds	r3, r7, #4
 800094e:	2220      	movs	r2, #32
 8000950:	2100      	movs	r1, #0
 8000952:	4618      	mov	r0, r3
 8000954:	f007 fb12 	bl	8007f7c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000958:	2002      	movs	r0, #2
 800095a:	f001 ff69 	bl	8002830 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800095e:	2300      	movs	r3, #0
 8000960:	603b      	str	r3, [r7, #0]
 8000962:	4b31      	ldr	r3, [pc, #196]	@ (8000a28 <SystemClock_Config+0xf0>)
 8000964:	699b      	ldr	r3, [r3, #24]
 8000966:	4a30      	ldr	r2, [pc, #192]	@ (8000a28 <SystemClock_Config+0xf0>)
 8000968:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800096c:	6193      	str	r3, [r2, #24]
 800096e:	4b2e      	ldr	r3, [pc, #184]	@ (8000a28 <SystemClock_Config+0xf0>)
 8000970:	699b      	ldr	r3, [r3, #24]
 8000972:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000976:	603b      	str	r3, [r7, #0]
 8000978:	4b2c      	ldr	r3, [pc, #176]	@ (8000a2c <SystemClock_Config+0xf4>)
 800097a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800097c:	4a2b      	ldr	r2, [pc, #172]	@ (8000a2c <SystemClock_Config+0xf4>)
 800097e:	f043 0301 	orr.w	r3, r3, #1
 8000982:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000984:	4b29      	ldr	r3, [pc, #164]	@ (8000a2c <SystemClock_Config+0xf4>)
 8000986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000988:	f003 0301 	and.w	r3, r3, #1
 800098c:	603b      	str	r3, [r7, #0]
 800098e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000990:	bf00      	nop
 8000992:	4b25      	ldr	r3, [pc, #148]	@ (8000a28 <SystemClock_Config+0xf0>)
 8000994:	699b      	ldr	r3, [r3, #24]
 8000996:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800099a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800099e:	d1f8      	bne.n	8000992 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80009a0:	2309      	movs	r3, #9
 80009a2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80009aa:	2301      	movs	r3, #1
 80009ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ae:	2302      	movs	r3, #2
 80009b0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009b2:	2302      	movs	r3, #2
 80009b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80009b6:	2302      	movs	r3, #2
 80009b8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 80009ba:	23f0      	movs	r3, #240	@ 0xf0
 80009bc:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009be:	2302      	movs	r3, #2
 80009c0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009c2:	2302      	movs	r3, #2
 80009c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009c6:	2302      	movs	r3, #2
 80009c8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80009ca:	2308      	movs	r3, #8
 80009cc:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009ce:	2300      	movs	r3, #0
 80009d0:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009d2:	2300      	movs	r3, #0
 80009d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009da:	4618      	mov	r0, r3
 80009dc:	f001 ff62 	bl	80028a4 <HAL_RCC_OscConfig>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80009e6:	f000 f84f 	bl	8000a88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ea:	233f      	movs	r3, #63	@ 0x3f
 80009ec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ee:	2303      	movs	r3, #3
 80009f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009f2:	2300      	movs	r3, #0
 80009f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80009f6:	2308      	movs	r3, #8
 80009f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80009fa:	2340      	movs	r3, #64	@ 0x40
 80009fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009fe:	2340      	movs	r3, #64	@ 0x40
 8000a00:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a06:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a08:	2340      	movs	r3, #64	@ 0x40
 8000a0a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a0c:	1d3b      	adds	r3, r7, #4
 8000a0e:	2104      	movs	r1, #4
 8000a10:	4618      	mov	r0, r3
 8000a12:	f002 fba1 	bl	8003158 <HAL_RCC_ClockConfig>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000a1c:	f000 f834 	bl	8000a88 <Error_Handler>
  }
}
 8000a20:	bf00      	nop
 8000a22:	3770      	adds	r7, #112	@ 0x70
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	58024800 	.word	0x58024800
 8000a2c:	58000400 	.word	0x58000400

08000a30 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000a36:	463b      	mov	r3, r7
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000a42:	f000 ff01 	bl	8001848 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000a46:	2301      	movs	r3, #1
 8000a48:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000a52:	231f      	movs	r3, #31
 8000a54:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000a56:	2387      	movs	r3, #135	@ 0x87
 8000a58:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000a62:	2301      	movs	r3, #1
 8000a64:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000a66:	2301      	movs	r3, #1
 8000a68:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a72:	463b      	mov	r3, r7
 8000a74:	4618      	mov	r0, r3
 8000a76:	f000 ff1f 	bl	80018b8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000a7a:	2004      	movs	r0, #4
 8000a7c:	f000 fefc 	bl	8001878 <HAL_MPU_Enable>

}
 8000a80:	bf00      	nop
 8000a82:	3710      	adds	r7, #16
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a8c:	b672      	cpsid	i
}
 8000a8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a90:	bf00      	nop
 8000a92:	e7fd      	b.n	8000a90 <Error_Handler+0x8>

08000a94 <rtc_write_bkr>:
/* 月修正数据表 */
uint8_t const table_week[12] = {0, 3, 3, 6, 1, 4, 6, 2, 5, 0, 3, 5};

// 写入后备域SRAM
void rtc_write_bkr(uint32_t bkrx, uint32_t data)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
 8000a9c:	6039      	str	r1, [r7, #0]
	HAL_PWR_EnableBkUpAccess(); // 使能后备寄存器访问
 8000a9e:	f001 feb7 	bl	8002810 <HAL_PWR_EnableBkUpAccess>
	HAL_RTCEx_BKUPWrite(&hrtc, bkrx, data); // 写入数据
 8000aa2:	683a      	ldr	r2, [r7, #0]
 8000aa4:	6879      	ldr	r1, [r7, #4]
 8000aa6:	4803      	ldr	r0, [pc, #12]	@ (8000ab4 <rtc_write_bkr+0x20>)
 8000aa8:	f005 fa6c 	bl	8005f84 <HAL_RTCEx_BKUPWrite>
}
 8000aac:	bf00      	nop
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	24000088 	.word	0x24000088

08000ab8 <rtc_read_bkr>:

// 读取后备域SRAM
uint32_t rtc_read_bkr(uint32_t bkrx)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
	uint32_t data;
	data = HAL_RTCEx_BKUPRead(&hrtc, bkrx); // 读取数据
 8000ac0:	6879      	ldr	r1, [r7, #4]
 8000ac2:	4804      	ldr	r0, [pc, #16]	@ (8000ad4 <rtc_read_bkr+0x1c>)
 8000ac4:	f005 fa76 	bl	8005fb4 <HAL_RTCEx_BKUPRead>
 8000ac8:	60f8      	str	r0, [r7, #12]
	return data;
 8000aca:	68fb      	ldr	r3, [r7, #12]
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3710      	adds	r7, #16
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	24000088 	.word	0x24000088

08000ad8 <rtc_set_time>:

// 设置时间
void rtc_set_time(uint8_t hour, uint8_t min, uint8_t sec, uint8_t ampm)
{
 8000ad8:	b590      	push	{r4, r7, lr}
 8000ada:	b089      	sub	sp, #36	@ 0x24
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4604      	mov	r4, r0
 8000ae0:	4608      	mov	r0, r1
 8000ae2:	4611      	mov	r1, r2
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	4623      	mov	r3, r4
 8000ae8:	71fb      	strb	r3, [r7, #7]
 8000aea:	4603      	mov	r3, r0
 8000aec:	71bb      	strb	r3, [r7, #6]
 8000aee:	460b      	mov	r3, r1
 8000af0:	717b      	strb	r3, [r7, #5]
 8000af2:	4613      	mov	r3, r2
 8000af4:	713b      	strb	r3, [r7, #4]
	RTC_TimeTypeDef sTime = {0};
 8000af6:	f107 030c 	add.w	r3, r7, #12
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	605a      	str	r2, [r3, #4]
 8000b00:	609a      	str	r2, [r3, #8]
 8000b02:	60da      	str	r2, [r3, #12]
 8000b04:	611a      	str	r2, [r3, #16]
	sTime.Hours = hour;
 8000b06:	79fb      	ldrb	r3, [r7, #7]
 8000b08:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = min;
 8000b0a:	79bb      	ldrb	r3, [r7, #6]
 8000b0c:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = sec;
 8000b0e:	797b      	ldrb	r3, [r7, #5]
 8000b10:	73bb      	strb	r3, [r7, #14]
	sTime.TimeFormat = ampm;
 8000b12:	793b      	ldrb	r3, [r7, #4]
 8000b14:	73fb      	strb	r3, [r7, #15]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000b16:	2300      	movs	r3, #0
 8000b18:	61bb      	str	r3, [r7, #24]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61fb      	str	r3, [r7, #28]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000b1e:	f107 030c 	add.w	r3, r7, #12
 8000b22:	2201      	movs	r2, #1
 8000b24:	4619      	mov	r1, r3
 8000b26:	4806      	ldr	r0, [pc, #24]	@ (8000b40 <rtc_set_time+0x68>)
 8000b28:	f004 fd50 	bl	80055cc <HAL_RTC_SetTime>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <rtc_set_time+0x5e>
	{
		Error_Handler();
 8000b32:	f7ff ffa9 	bl	8000a88 <Error_Handler>
	}
}
 8000b36:	bf00      	nop
 8000b38:	3724      	adds	r7, #36	@ 0x24
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd90      	pop	{r4, r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	24000088 	.word	0x24000088

08000b44 <rtc_set_date>:

// 设置日期
void rtc_set_date(uint8_t year, uint8_t month, uint8_t date, uint8_t week)
{
 8000b44:	b590      	push	{r4, r7, lr}
 8000b46:	b085      	sub	sp, #20
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4604      	mov	r4, r0
 8000b4c:	4608      	mov	r0, r1
 8000b4e:	4611      	mov	r1, r2
 8000b50:	461a      	mov	r2, r3
 8000b52:	4623      	mov	r3, r4
 8000b54:	71fb      	strb	r3, [r7, #7]
 8000b56:	4603      	mov	r3, r0
 8000b58:	71bb      	strb	r3, [r7, #6]
 8000b5a:	460b      	mov	r3, r1
 8000b5c:	717b      	strb	r3, [r7, #5]
 8000b5e:	4613      	mov	r3, r2
 8000b60:	713b      	strb	r3, [r7, #4]
	RTC_DateTypeDef sDate = {0};
 8000b62:	2300      	movs	r3, #0
 8000b64:	60fb      	str	r3, [r7, #12]
	sDate.Year = year;
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	73fb      	strb	r3, [r7, #15]
	sDate.Month = month;
 8000b6a:	79bb      	ldrb	r3, [r7, #6]
 8000b6c:	737b      	strb	r3, [r7, #13]
	sDate.Date = date;
 8000b6e:	797b      	ldrb	r3, [r7, #5]
 8000b70:	73bb      	strb	r3, [r7, #14]
	sDate.WeekDay = week;
 8000b72:	793b      	ldrb	r3, [r7, #4]
 8000b74:	733b      	strb	r3, [r7, #12]
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000b76:	f107 030c 	add.w	r3, r7, #12
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4806      	ldr	r0, [pc, #24]	@ (8000b98 <rtc_set_date+0x54>)
 8000b80:	f004 fe1e 	bl	80057c0 <HAL_RTC_SetDate>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <rtc_set_date+0x4a>
	{
		Error_Handler();
 8000b8a:	f7ff ff7d 	bl	8000a88 <Error_Handler>
	}
}
 8000b8e:	bf00      	nop
 8000b90:	3714      	adds	r7, #20
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd90      	pop	{r4, r7, pc}
 8000b96:	bf00      	nop
 8000b98:	24000088 	.word	0x24000088

08000b9c <MX_RTC_Init>:


/* RTC init function */
uint8_t MX_RTC_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
  uint16_t bkp_flag = 0; // 检查是不是第一次配置时钟
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	80fb      	strh	r3, [r7, #6]
  // RTC 初始化
  hrtc.Instance = RTC;
 8000ba6:	4b21      	ldr	r3, [pc, #132]	@ (8000c2c <MX_RTC_Init+0x90>)
 8000ba8:	4a21      	ldr	r2, [pc, #132]	@ (8000c30 <MX_RTC_Init+0x94>)
 8000baa:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24; // 24小时制
 8000bac:	4b1f      	ldr	r3, [pc, #124]	@ (8000c2c <MX_RTC_Init+0x90>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 0x7F; // 异步分频系数
 8000bb2:	4b1e      	ldr	r3, [pc, #120]	@ (8000c2c <MX_RTC_Init+0x90>)
 8000bb4:	227f      	movs	r2, #127	@ 0x7f
 8000bb6:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 0xFF;  // 同步分频系数
 8000bb8:	4b1c      	ldr	r3, [pc, #112]	@ (8000c2c <MX_RTC_Init+0x90>)
 8000bba:	22ff      	movs	r2, #255	@ 0xff
 8000bbc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE; // 不输出信号
 8000bbe:	4b1b      	ldr	r3, [pc, #108]	@ (8000c2c <MX_RTC_Init+0x90>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH; // 输出极性
 8000bc4:	4b19      	ldr	r3, [pc, #100]	@ (8000c2c <MX_RTC_Init+0x90>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN; // 输出类型
 8000bca:	4b18      	ldr	r3, [pc, #96]	@ (8000c2c <MX_RTC_Init+0x90>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000bd0:	4b16      	ldr	r3, [pc, #88]	@ (8000c2c <MX_RTC_Init+0x90>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	615a      	str	r2, [r3, #20]
  bkp_flag = rtc_read_bkr(0); // 读取后备寄存器0的值
 8000bd6:	2000      	movs	r0, #0
 8000bd8:	f7ff ff6e 	bl	8000ab8 <rtc_read_bkr>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	80fb      	strh	r3, [r7, #6]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000be0:	4812      	ldr	r0, [pc, #72]	@ (8000c2c <MX_RTC_Init+0x90>)
 8000be2:	f004 fc71 	bl	80054c8 <HAL_RTC_Init>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d003      	beq.n	8000bf4 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000bec:	f7ff ff4c 	bl	8000a88 <Error_Handler>
    return 1;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	e016      	b.n	8000c22 <MX_RTC_Init+0x86>
  }
  if((bkp_flag != 0x5050) && (bkp_flag != 0x5051))
 8000bf4:	88fb      	ldrh	r3, [r7, #6]
 8000bf6:	f245 0250 	movw	r2, #20560	@ 0x5050
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d010      	beq.n	8000c20 <MX_RTC_Init+0x84>
 8000bfe:	88fb      	ldrh	r3, [r7, #6]
 8000c00:	f245 0251 	movw	r2, #20561	@ 0x5051
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d00b      	beq.n	8000c20 <MX_RTC_Init+0x84>
  {
	  // 第一次配置RTC，手动设置初值
	  rtc_set_time(12, 12, 12, RTC_HOURFORMAT12_AM); // 设置时间 上午12:12:12
 8000c08:	2300      	movs	r3, #0
 8000c0a:	220c      	movs	r2, #12
 8000c0c:	210c      	movs	r1, #12
 8000c0e:	200c      	movs	r0, #12
 8000c10:	f7ff ff62 	bl	8000ad8 <rtc_set_time>
	  rtc_set_date(23, 3, 1, 3); // 设置日期 2023年3月1日 星期三
 8000c14:	2303      	movs	r3, #3
 8000c16:	2201      	movs	r2, #1
 8000c18:	2103      	movs	r1, #3
 8000c1a:	2017      	movs	r0, #23
 8000c1c:	f7ff ff92 	bl	8000b44 <rtc_set_date>
  }
  return 0;
 8000c20:	2300      	movs	r3, #0
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	24000088 	.word	0x24000088
 8000c30:	58004000 	.word	0x58004000

08000c34 <HAL_RTC_MspInit>:
 * @param       hrtc:RTC句柄
 * @note        此函数会被HAL_RTC_Init()调用
 * @retval      无
 */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b0c8      	sub	sp, #288	@ 0x120
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000c3e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000c42:	6018      	str	r0, [r3, #0]
    uint16_t retry = 200;
 8000c44:	23c8      	movs	r3, #200	@ 0xc8
 8000c46:	f8a7 311e 	strh.w	r3, [r7, #286]	@ 0x11e

    RCC_OscInitTypeDef rcc_osc_init;
    RCC_PeriphCLKInitTypeDef rcc_periphclk_init;

    __HAL_RCC_RTC_CLK_ENABLE();     /* 使能RTC时钟 */
 8000c4a:	4b4b      	ldr	r3, [pc, #300]	@ (8000d78 <HAL_RTC_MspInit+0x144>)
 8000c4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c50:	4a49      	ldr	r2, [pc, #292]	@ (8000d78 <HAL_RTC_MspInit+0x144>)
 8000c52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c56:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000c5a:	4b47      	ldr	r3, [pc, #284]	@ (8000d78 <HAL_RTC_MspInit+0x144>)
 8000c5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c60:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8000c64:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000c68:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000c72:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000c76:	681b      	ldr	r3, [r3, #0]
    HAL_PWR_EnableBkUpAccess();     /* 取消备份区域写保护 */
 8000c78:	f001 fdca 	bl	8002810 <HAL_PWR_EnableBkUpAccess>
    __HAL_RCC_RTC_ENABLE();         /* RTC时钟使能 */
 8000c7c:	4b3e      	ldr	r3, [pc, #248]	@ (8000d78 <HAL_RTC_MspInit+0x144>)
 8000c7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000c80:	4a3d      	ldr	r2, [pc, #244]	@ (8000d78 <HAL_RTC_MspInit+0x144>)
 8000c82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c86:	6713      	str	r3, [r2, #112]	@ 0x70

    /* 使用寄存器的方式去检测LSE是否可以正常工作 */
    RCC->BDCR |= 1 << 0;    /* 开启外部低速振荡器LSE */
 8000c88:	4b3b      	ldr	r3, [pc, #236]	@ (8000d78 <HAL_RTC_MspInit+0x144>)
 8000c8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000c8c:	4a3a      	ldr	r2, [pc, #232]	@ (8000d78 <HAL_RTC_MspInit+0x144>)
 8000c8e:	f043 0301 	orr.w	r3, r3, #1
 8000c92:	6713      	str	r3, [r2, #112]	@ 0x70

    while (retry && ((RCC->BDCR & 0X02) == 0))  /* 等待LSE准备好 */
 8000c94:	e007      	b.n	8000ca6 <HAL_RTC_MspInit+0x72>
    {
        retry--;
 8000c96:	f8b7 311e 	ldrh.w	r3, [r7, #286]	@ 0x11e
 8000c9a:	3b01      	subs	r3, #1
 8000c9c:	f8a7 311e 	strh.w	r3, [r7, #286]	@ 0x11e
        HAL_Delay(5);
 8000ca0:	2005      	movs	r0, #5
 8000ca2:	f000 fc91 	bl	80015c8 <HAL_Delay>
    while (retry && ((RCC->BDCR & 0X02) == 0))  /* 等待LSE准备好 */
 8000ca6:	f8b7 311e 	ldrh.w	r3, [r7, #286]	@ 0x11e
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d005      	beq.n	8000cba <HAL_RTC_MspInit+0x86>
 8000cae:	4b32      	ldr	r3, [pc, #200]	@ (8000d78 <HAL_RTC_MspInit+0x144>)
 8000cb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000cb2:	f003 0302 	and.w	r3, r3, #2
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d0ed      	beq.n	8000c96 <HAL_RTC_MspInit+0x62>
    }
    if (retry == 0)     /* LSE起振失败，使用LSI */
 8000cba:	f8b7 311e 	ldrh.w	r3, [r7, #286]	@ 0x11e
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d12a      	bne.n	8000d18 <HAL_RTC_MspInit+0xe4>
    {
        rcc_osc_init.OscillatorType = RCC_OSCILLATORTYPE_LSI;           /* 选择要配置的振荡器 */
 8000cc2:	2308      	movs	r3, #8
 8000cc4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
        rcc_osc_init.LSEState = RCC_LSI_ON;                             /* LSI状态：开启 */
 8000cc8:	2301      	movs	r3, #1
 8000cca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
        rcc_osc_init.PLL.PLLState = RCC_PLL_NONE;                       /* PLL无配置 */
 8000cce:	2300      	movs	r3, #0
 8000cd0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
        HAL_RCC_OscConfig(&rcc_osc_init);                               /* 配置设置的rcc_oscinitstruct */
 8000cd4:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f001 fde3 	bl	80028a4 <HAL_RCC_OscConfig>

        rcc_periphclk_init.PeriphClockSelection = RCC_PERIPHCLK_RTC;    /* 选择要配置的外设 RTC */
 8000cde:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000ce2:	f5a3 7188 	sub.w	r1, r3, #272	@ 0x110
 8000ce6:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000cea:	f04f 0300 	mov.w	r3, #0
 8000cee:	e9c1 2300 	strd	r2, r3, [r1]
        rcc_periphclk_init.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;    /* RTC时钟源选择 LSI */
 8000cf2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000cf6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000cfa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000cfe:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        HAL_RCCEx_PeriphCLKConfig(&rcc_periphclk_init);                 /* 配置设置的rcc_periphClkInitStruct */
 8000d02:	f107 0310 	add.w	r3, r7, #16
 8000d06:	4618      	mov	r0, r3
 8000d08:	f002 fdb2 	bl	8003870 <HAL_RCCEx_PeriphCLKConfig>
        rtc_write_bkr(0, 0X5051);
 8000d0c:	f245 0151 	movw	r1, #20561	@ 0x5051
 8000d10:	2000      	movs	r0, #0
 8000d12:	f7ff febf 	bl	8000a94 <rtc_write_bkr>
        rcc_periphclk_init.PeriphClockSelection = RCC_PERIPHCLK_RTC;    /* 选择要配置外设 RTC */
        rcc_periphclk_init.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;    /* RTC时钟源为LSE */
        HAL_RCCEx_PeriphCLKConfig(&rcc_periphclk_init);                 /* 配置设置的rcc_periphclkinitstruct */
        rtc_write_bkr(0, 0X5050);
    }
}
 8000d16:	e029      	b.n	8000d6c <HAL_RTC_MspInit+0x138>
        rcc_osc_init.OscillatorType = RCC_OSCILLATORTYPE_LSE;           /* 选择要配置的振荡器 */
 8000d18:	2304      	movs	r3, #4
 8000d1a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
        rcc_osc_init.PLL.PLLState = RCC_PLL_NONE;                       /* PLL不配置 */
 8000d1e:	2300      	movs	r3, #0
 8000d20:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
        rcc_osc_init.LSEState = RCC_LSE_ON;                             /* LSE状态：开启 */
 8000d24:	2301      	movs	r3, #1
 8000d26:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
        HAL_RCC_OscConfig(&rcc_osc_init);                               /* 配置设置的rcc_oscinitstruct */
 8000d2a:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f001 fdb8 	bl	80028a4 <HAL_RCC_OscConfig>
        rcc_periphclk_init.PeriphClockSelection = RCC_PERIPHCLK_RTC;    /* 选择要配置外设 RTC */
 8000d34:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000d38:	f5a3 7188 	sub.w	r1, r3, #272	@ 0x110
 8000d3c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000d40:	f04f 0300 	mov.w	r3, #0
 8000d44:	e9c1 2300 	strd	r2, r3, [r1]
        rcc_periphclk_init.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;    /* RTC时钟源为LSE */
 8000d48:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000d4c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000d50:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d54:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        HAL_RCCEx_PeriphCLKConfig(&rcc_periphclk_init);                 /* 配置设置的rcc_periphclkinitstruct */
 8000d58:	f107 0310 	add.w	r3, r7, #16
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f002 fd87 	bl	8003870 <HAL_RCCEx_PeriphCLKConfig>
        rtc_write_bkr(0, 0X5050);
 8000d62:	f245 0150 	movw	r1, #20560	@ 0x5050
 8000d66:	2000      	movs	r0, #0
 8000d68:	f7ff fe94 	bl	8000a94 <rtc_write_bkr>
}
 8000d6c:	bf00      	nop
 8000d6e:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	58024400 	.word	0x58024400

08000d7c <rtc_get_time>:
  }
}

// 获取RTC时间
void rtc_get_time(uint8_t* hour, uint8_t* min, uint8_t* sec, uint8_t* ampm)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b08a      	sub	sp, #40	@ 0x28
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	60b9      	str	r1, [r7, #8]
 8000d86:	607a      	str	r2, [r7, #4]
 8000d88:	603b      	str	r3, [r7, #0]
	RTC_TimeTypeDef sTime = {0};
 8000d8a:	f107 0314 	add.w	r3, r7, #20
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	605a      	str	r2, [r3, #4]
 8000d94:	609a      	str	r2, [r3, #8]
 8000d96:	60da      	str	r2, [r3, #12]
 8000d98:	611a      	str	r2, [r3, #16]
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000d9a:	f107 0314 	add.w	r3, r7, #20
 8000d9e:	2200      	movs	r2, #0
 8000da0:	4619      	mov	r1, r3
 8000da2:	4809      	ldr	r0, [pc, #36]	@ (8000dc8 <rtc_get_time+0x4c>)
 8000da4:	f004 fcb0 	bl	8005708 <HAL_RTC_GetTime>
	*hour = sTime.Hours;
 8000da8:	7d3a      	ldrb	r2, [r7, #20]
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	701a      	strb	r2, [r3, #0]
	*min = sTime.Minutes;
 8000dae:	7d7a      	ldrb	r2, [r7, #21]
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	701a      	strb	r2, [r3, #0]
	*sec = sTime.Seconds;
 8000db4:	7dba      	ldrb	r2, [r7, #22]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	701a      	strb	r2, [r3, #0]
	*ampm = sTime.TimeFormat;
 8000dba:	7dfa      	ldrb	r2, [r7, #23]
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	701a      	strb	r2, [r3, #0]
}
 8000dc0:	bf00      	nop
 8000dc2:	3728      	adds	r7, #40	@ 0x28
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	24000088 	.word	0x24000088

08000dcc <rtc_get_date>:

// 获取RTC日期
void rtc_get_date(uint8_t* year, uint8_t* month, uint8_t* date, uint8_t* week)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	607a      	str	r2, [r7, #4]
 8000dd8:	603b      	str	r3, [r7, #0]
	RTC_DateTypeDef sDate = {0};
 8000dda:	2300      	movs	r3, #0
 8000ddc:	617b      	str	r3, [r7, #20]
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000dde:	f107 0314 	add.w	r3, r7, #20
 8000de2:	2200      	movs	r2, #0
 8000de4:	4619      	mov	r1, r3
 8000de6:	4809      	ldr	r0, [pc, #36]	@ (8000e0c <rtc_get_date+0x40>)
 8000de8:	f004 fd72 	bl	80058d0 <HAL_RTC_GetDate>
	*year = sDate.Year;
 8000dec:	7dfa      	ldrb	r2, [r7, #23]
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	701a      	strb	r2, [r3, #0]
	*month = sDate.Month;
 8000df2:	7d7a      	ldrb	r2, [r7, #21]
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	701a      	strb	r2, [r3, #0]
	*date = sDate.Date;
 8000df8:	7dba      	ldrb	r2, [r7, #22]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	701a      	strb	r2, [r3, #0]
	*week = sDate.WeekDay;
 8000dfe:	7d3a      	ldrb	r2, [r7, #20]
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	701a      	strb	r2, [r3, #0]
}
 8000e04:	bf00      	nop
 8000e06:	3718      	adds	r7, #24
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	24000088 	.word	0x24000088

08000e10 <rtc_set_alarma>:
 * @param       week        : 星期几(1~7)
 * @param       hour,min,sec: 小时,分钟,秒钟
 * @retval      无
 */
void rtc_set_alarma(uint8_t week, uint8_t hour, uint8_t min, uint8_t sec)
{
 8000e10:	b590      	push	{r4, r7, lr}
 8000e12:	b08d      	sub	sp, #52	@ 0x34
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4604      	mov	r4, r0
 8000e18:	4608      	mov	r0, r1
 8000e1a:	4611      	mov	r1, r2
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	4623      	mov	r3, r4
 8000e20:	71fb      	strb	r3, [r7, #7]
 8000e22:	4603      	mov	r3, r0
 8000e24:	71bb      	strb	r3, [r7, #6]
 8000e26:	460b      	mov	r3, r1
 8000e28:	717b      	strb	r3, [r7, #5]
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	713b      	strb	r3, [r7, #4]
    RTC_AlarmTypeDef rtc_alarm;

    rtc_alarm.AlarmTime.Hours = hour;                                /* 小时 */
 8000e2e:	79bb      	ldrb	r3, [r7, #6]
 8000e30:	723b      	strb	r3, [r7, #8]
    rtc_alarm.AlarmTime.Minutes = min;                               /* 分钟 */
 8000e32:	797b      	ldrb	r3, [r7, #5]
 8000e34:	727b      	strb	r3, [r7, #9]
    rtc_alarm.AlarmTime.Seconds = sec;                               /* 秒 */
 8000e36:	793b      	ldrb	r3, [r7, #4]
 8000e38:	72bb      	strb	r3, [r7, #10]
    rtc_alarm.AlarmTime.SubSeconds = 0;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60fb      	str	r3, [r7, #12]
    rtc_alarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	72fb      	strb	r3, [r7, #11]

    rtc_alarm.AlarmMask = RTC_ALARMMASK_NONE;                        /* 精确匹配星期，时分秒 */
 8000e42:	2300      	movs	r3, #0
 8000e44:	61fb      	str	r3, [r7, #28]
    rtc_alarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_NONE;
 8000e46:	f04f 6370 	mov.w	r3, #251658240	@ 0xf000000
 8000e4a:	623b      	str	r3, [r7, #32]
    rtc_alarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY; /* 按星期 */
 8000e4c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e50:	627b      	str	r3, [r7, #36]	@ 0x24
    rtc_alarm.AlarmDateWeekDay = week;                               /* 星期 */
 8000e52:	79fb      	ldrb	r3, [r7, #7]
 8000e54:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    rtc_alarm.Alarm = RTC_ALARM_A;                                   /* 闹钟A */
 8000e58:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_RTC_SetAlarm_IT(&hrtc, &rtc_alarm, RTC_FORMAT_BIN);
 8000e5e:	f107 0308 	add.w	r3, r7, #8
 8000e62:	2200      	movs	r2, #0
 8000e64:	4619      	mov	r1, r3
 8000e66:	4807      	ldr	r0, [pc, #28]	@ (8000e84 <rtc_set_alarma+0x74>)
 8000e68:	f004 fd80 	bl	800596c <HAL_RTC_SetAlarm_IT>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 1, 2);   /* 抢占优先级1,子优先级2 */
 8000e6c:	2202      	movs	r2, #2
 8000e6e:	2101      	movs	r1, #1
 8000e70:	2029      	movs	r0, #41	@ 0x29
 8000e72:	f000 fcb4 	bl	80017de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000e76:	2029      	movs	r0, #41	@ 0x29
 8000e78:	f000 fccb 	bl	8001812 <HAL_NVIC_EnableIRQ>
}
 8000e7c:	bf00      	nop
 8000e7e:	3734      	adds	r7, #52	@ 0x34
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd90      	pop	{r4, r7, pc}
 8000e84:	24000088 	.word	0x24000088

08000e88 <rtc_set_wakeup>:
 * @note        注意:RTC就是RTC的时钟频率,即RTCCLK!
 * @param       cnt: 自动重装载值.减到0,产生中断.
 * @retval      无
 */
void rtc_set_wakeup(uint8_t wksel, uint16_t cnt)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	460a      	mov	r2, r1
 8000e92:	71fb      	strb	r3, [r7, #7]
 8000e94:	4613      	mov	r3, r2
 8000e96:	80bb      	strh	r3, [r7, #4]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);  /* 清除RTC WAKE UP的标志 */
 8000e98:	4b0d      	ldr	r3, [pc, #52]	@ (8000ed0 <rtc_set_wakeup+0x48>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	68db      	ldr	r3, [r3, #12]
 8000e9e:	b2da      	uxtb	r2, r3
 8000ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed0 <rtc_set_wakeup+0x48>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8000ea8:	60da      	str	r2, [r3, #12]

    HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, cnt, wksel);          /* 设置重装载值和时钟 */
 8000eaa:	88bb      	ldrh	r3, [r7, #4]
 8000eac:	79fa      	ldrb	r2, [r7, #7]
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4807      	ldr	r0, [pc, #28]	@ (8000ed0 <rtc_set_wakeup+0x48>)
 8000eb2:	f004 ffaf 	bl	8005e14 <HAL_RTCEx_SetWakeUpTimer_IT>

    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 2, 2);                       /* 抢占优先级2,子优先级2 */
 8000eb6:	2202      	movs	r2, #2
 8000eb8:	2102      	movs	r1, #2
 8000eba:	2003      	movs	r0, #3
 8000ebc:	f000 fc8f 	bl	80017de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8000ec0:	2003      	movs	r0, #3
 8000ec2:	f000 fca6 	bl	8001812 <HAL_NVIC_EnableIRQ>
}
 8000ec6:	bf00      	nop
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	24000088 	.word	0x24000088

08000ed4 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms (A and B) interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000ed8:	4802      	ldr	r0, [pc, #8]	@ (8000ee4 <RTC_Alarm_IRQHandler+0x10>)
 8000eda:	f004 fe85 	bl	8005be8 <HAL_RTC_AlarmIRQHandler>
}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	24000088 	.word	0x24000088

08000ee8 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
	printf("AlarmA Wakeup\r\n");
 8000ef0:	4803      	ldr	r0, [pc, #12]	@ (8000f00 <HAL_RTC_AlarmAEventCallback+0x18>)
 8000ef2:	f006 ff63 	bl	8007dbc <puts>
}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	08008ae4 	.word	0x08008ae4

08000f04 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0

  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8000f08:	4802      	ldr	r0, [pc, #8]	@ (8000f14 <RTC_WKUP_IRQHandler+0x10>)
 8000f0a:	f005 f815 	bl	8005f38 <HAL_RTCEx_WakeUpTimerIRQHandler>
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	24000088 	.word	0x24000088

08000f18 <HAL_RTCEx_WakeUpTimerEventCallback>:

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LED_RED_Port, LED_RED_Pin);
 8000f20:	2140      	movs	r1, #64	@ 0x40
 8000f22:	4805      	ldr	r0, [pc, #20]	@ (8000f38 <HAL_RTCEx_WakeUpTimerEventCallback+0x20>)
 8000f24:	f001 fc35 	bl	8002792 <HAL_GPIO_TogglePin>
	printf("Wakeup\r\n");
 8000f28:	4804      	ldr	r0, [pc, #16]	@ (8000f3c <HAL_RTCEx_WakeUpTimerEventCallback+0x24>)
 8000f2a:	f006 ff47 	bl	8007dbc <puts>
}
 8000f2e:	bf00      	nop
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	58021000 	.word	0x58021000
 8000f3c:	08008af4 	.word	0x08008af4

08000f40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f46:	4b0a      	ldr	r3, [pc, #40]	@ (8000f70 <HAL_MspInit+0x30>)
 8000f48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f4c:	4a08      	ldr	r2, [pc, #32]	@ (8000f70 <HAL_MspInit+0x30>)
 8000f4e:	f043 0302 	orr.w	r3, r3, #2
 8000f52:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000f56:	4b06      	ldr	r3, [pc, #24]	@ (8000f70 <HAL_MspInit+0x30>)
 8000f58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f5c:	f003 0302 	and.w	r3, r3, #2
 8000f60:	607b      	str	r3, [r7, #4]
 8000f62:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	58024400 	.word	0x58024400

08000f74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f78:	bf00      	nop
 8000f7a:	e7fd      	b.n	8000f78 <NMI_Handler+0x4>

08000f7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f80:	bf00      	nop
 8000f82:	e7fd      	b.n	8000f80 <HardFault_Handler+0x4>

08000f84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f88:	bf00      	nop
 8000f8a:	e7fd      	b.n	8000f88 <MemManage_Handler+0x4>

08000f8c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f90:	bf00      	nop
 8000f92:	e7fd      	b.n	8000f90 <BusFault_Handler+0x4>

08000f94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f98:	bf00      	nop
 8000f9a:	e7fd      	b.n	8000f98 <UsageFault_Handler+0x4>

08000f9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr

08000faa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr

08000fc6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fca:	f000 fadd 	bl	8001588 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI_KEY1_Pin);
 8000fd6:	2002      	movs	r0, #2
 8000fd8:	f001 fbf5 	bl	80027c6 <HAL_GPIO_EXTI_IRQHandler>
  //if(HAL_GPIO_ReadPin(EXTI_KEY1_GPIO_Port, EXTI_KEY1_Pin) == GPIO_PIN_RESET)
  //{
	//	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
  //}
  /* USER CODE END EXTI1_IRQn 1 */
}
 8000fdc:	bf00      	nop
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000fe4:	4802      	ldr	r0, [pc, #8]	@ (8000ff0 <USART1_IRQHandler+0x10>)
 8000fe6:	f005 f8e3 	bl	80061b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	240000b0 	.word	0x240000b0

08000ff4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]
 8001004:	e00a      	b.n	800101c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001006:	f3af 8000 	nop.w
 800100a:	4601      	mov	r1, r0
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	1c5a      	adds	r2, r3, #1
 8001010:	60ba      	str	r2, [r7, #8]
 8001012:	b2ca      	uxtb	r2, r1
 8001014:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	3301      	adds	r3, #1
 800101a:	617b      	str	r3, [r7, #20]
 800101c:	697a      	ldr	r2, [r7, #20]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	429a      	cmp	r2, r3
 8001022:	dbf0      	blt.n	8001006 <_read+0x12>
  }

  return len;
 8001024:	687b      	ldr	r3, [r7, #4]
}
 8001026:	4618      	mov	r0, r3
 8001028:	3718      	adds	r7, #24
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b086      	sub	sp, #24
 8001032:	af00      	add	r7, sp, #0
 8001034:	60f8      	str	r0, [r7, #12]
 8001036:	60b9      	str	r1, [r7, #8]
 8001038:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800103a:	2300      	movs	r3, #0
 800103c:	617b      	str	r3, [r7, #20]
 800103e:	e009      	b.n	8001054 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	1c5a      	adds	r2, r3, #1
 8001044:	60ba      	str	r2, [r7, #8]
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	4618      	mov	r0, r3
 800104a:	f000 f9ed 	bl	8001428 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	3301      	adds	r3, #1
 8001052:	617b      	str	r3, [r7, #20]
 8001054:	697a      	ldr	r2, [r7, #20]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	429a      	cmp	r2, r3
 800105a:	dbf1      	blt.n	8001040 <_write+0x12>
  }
  return len;
 800105c:	687b      	ldr	r3, [r7, #4]
}
 800105e:	4618      	mov	r0, r3
 8001060:	3718      	adds	r7, #24
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <_close>:

int _close(int file)
{
 8001066:	b480      	push	{r7}
 8001068:	b083      	sub	sp, #12
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800106e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001072:	4618      	mov	r0, r3
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr

0800107e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800107e:	b480      	push	{r7}
 8001080:	b083      	sub	sp, #12
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
 8001086:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800108e:	605a      	str	r2, [r3, #4]
  return 0;
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <_isatty>:

int _isatty(int file)
{
 800109e:	b480      	push	{r7}
 80010a0:	b083      	sub	sp, #12
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010a6:	2301      	movs	r3, #1
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010c0:	2300      	movs	r3, #0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3714      	adds	r7, #20
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
	...

080010d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010d8:	4a14      	ldr	r2, [pc, #80]	@ (800112c <_sbrk+0x5c>)
 80010da:	4b15      	ldr	r3, [pc, #84]	@ (8001130 <_sbrk+0x60>)
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010e4:	4b13      	ldr	r3, [pc, #76]	@ (8001134 <_sbrk+0x64>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d102      	bne.n	80010f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010ec:	4b11      	ldr	r3, [pc, #68]	@ (8001134 <_sbrk+0x64>)
 80010ee:	4a12      	ldr	r2, [pc, #72]	@ (8001138 <_sbrk+0x68>)
 80010f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010f2:	4b10      	ldr	r3, [pc, #64]	@ (8001134 <_sbrk+0x64>)
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4413      	add	r3, r2
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d207      	bcs.n	8001110 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001100:	f006 ff8a 	bl	8008018 <__errno>
 8001104:	4603      	mov	r3, r0
 8001106:	220c      	movs	r2, #12
 8001108:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800110a:	f04f 33ff 	mov.w	r3, #4294967295
 800110e:	e009      	b.n	8001124 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001110:	4b08      	ldr	r3, [pc, #32]	@ (8001134 <_sbrk+0x64>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001116:	4b07      	ldr	r3, [pc, #28]	@ (8001134 <_sbrk+0x64>)
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4413      	add	r3, r2
 800111e:	4a05      	ldr	r2, [pc, #20]	@ (8001134 <_sbrk+0x64>)
 8001120:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001122:	68fb      	ldr	r3, [r7, #12]
}
 8001124:	4618      	mov	r0, r3
 8001126:	3718      	adds	r7, #24
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	24080000 	.word	0x24080000
 8001130:	00000400 	.word	0x00000400
 8001134:	240000ac 	.word	0x240000ac
 8001138:	24000298 	.word	0x24000298

0800113c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001140:	4b43      	ldr	r3, [pc, #268]	@ (8001250 <SystemInit+0x114>)
 8001142:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001146:	4a42      	ldr	r2, [pc, #264]	@ (8001250 <SystemInit+0x114>)
 8001148:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800114c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001150:	4b40      	ldr	r3, [pc, #256]	@ (8001254 <SystemInit+0x118>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f003 030f 	and.w	r3, r3, #15
 8001158:	2b06      	cmp	r3, #6
 800115a:	d807      	bhi.n	800116c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800115c:	4b3d      	ldr	r3, [pc, #244]	@ (8001254 <SystemInit+0x118>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f023 030f 	bic.w	r3, r3, #15
 8001164:	4a3b      	ldr	r2, [pc, #236]	@ (8001254 <SystemInit+0x118>)
 8001166:	f043 0307 	orr.w	r3, r3, #7
 800116a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800116c:	4b3a      	ldr	r3, [pc, #232]	@ (8001258 <SystemInit+0x11c>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a39      	ldr	r2, [pc, #228]	@ (8001258 <SystemInit+0x11c>)
 8001172:	f043 0301 	orr.w	r3, r3, #1
 8001176:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001178:	4b37      	ldr	r3, [pc, #220]	@ (8001258 <SystemInit+0x11c>)
 800117a:	2200      	movs	r2, #0
 800117c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800117e:	4b36      	ldr	r3, [pc, #216]	@ (8001258 <SystemInit+0x11c>)
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	4935      	ldr	r1, [pc, #212]	@ (8001258 <SystemInit+0x11c>)
 8001184:	4b35      	ldr	r3, [pc, #212]	@ (800125c <SystemInit+0x120>)
 8001186:	4013      	ands	r3, r2
 8001188:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800118a:	4b32      	ldr	r3, [pc, #200]	@ (8001254 <SystemInit+0x118>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 0308 	and.w	r3, r3, #8
 8001192:	2b00      	cmp	r3, #0
 8001194:	d007      	beq.n	80011a6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001196:	4b2f      	ldr	r3, [pc, #188]	@ (8001254 <SystemInit+0x118>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f023 030f 	bic.w	r3, r3, #15
 800119e:	4a2d      	ldr	r2, [pc, #180]	@ (8001254 <SystemInit+0x118>)
 80011a0:	f043 0307 	orr.w	r3, r3, #7
 80011a4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80011a6:	4b2c      	ldr	r3, [pc, #176]	@ (8001258 <SystemInit+0x11c>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80011ac:	4b2a      	ldr	r3, [pc, #168]	@ (8001258 <SystemInit+0x11c>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80011b2:	4b29      	ldr	r3, [pc, #164]	@ (8001258 <SystemInit+0x11c>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80011b8:	4b27      	ldr	r3, [pc, #156]	@ (8001258 <SystemInit+0x11c>)
 80011ba:	4a29      	ldr	r2, [pc, #164]	@ (8001260 <SystemInit+0x124>)
 80011bc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80011be:	4b26      	ldr	r3, [pc, #152]	@ (8001258 <SystemInit+0x11c>)
 80011c0:	4a28      	ldr	r2, [pc, #160]	@ (8001264 <SystemInit+0x128>)
 80011c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80011c4:	4b24      	ldr	r3, [pc, #144]	@ (8001258 <SystemInit+0x11c>)
 80011c6:	4a28      	ldr	r2, [pc, #160]	@ (8001268 <SystemInit+0x12c>)
 80011c8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80011ca:	4b23      	ldr	r3, [pc, #140]	@ (8001258 <SystemInit+0x11c>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80011d0:	4b21      	ldr	r3, [pc, #132]	@ (8001258 <SystemInit+0x11c>)
 80011d2:	4a25      	ldr	r2, [pc, #148]	@ (8001268 <SystemInit+0x12c>)
 80011d4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80011d6:	4b20      	ldr	r3, [pc, #128]	@ (8001258 <SystemInit+0x11c>)
 80011d8:	2200      	movs	r2, #0
 80011da:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80011dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001258 <SystemInit+0x11c>)
 80011de:	4a22      	ldr	r2, [pc, #136]	@ (8001268 <SystemInit+0x12c>)
 80011e0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80011e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001258 <SystemInit+0x11c>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001258 <SystemInit+0x11c>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a1a      	ldr	r2, [pc, #104]	@ (8001258 <SystemInit+0x11c>)
 80011ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011f2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80011f4:	4b18      	ldr	r3, [pc, #96]	@ (8001258 <SystemInit+0x11c>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80011fa:	4b1c      	ldr	r3, [pc, #112]	@ (800126c <SystemInit+0x130>)
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001270 <SystemInit+0x134>)
 8001200:	4013      	ands	r3, r2
 8001202:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001206:	d202      	bcs.n	800120e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001208:	4b1a      	ldr	r3, [pc, #104]	@ (8001274 <SystemInit+0x138>)
 800120a:	2201      	movs	r2, #1
 800120c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800120e:	4b12      	ldr	r3, [pc, #72]	@ (8001258 <SystemInit+0x11c>)
 8001210:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001214:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d113      	bne.n	8001244 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800121c:	4b0e      	ldr	r3, [pc, #56]	@ (8001258 <SystemInit+0x11c>)
 800121e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001222:	4a0d      	ldr	r2, [pc, #52]	@ (8001258 <SystemInit+0x11c>)
 8001224:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001228:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800122c:	4b12      	ldr	r3, [pc, #72]	@ (8001278 <SystemInit+0x13c>)
 800122e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001232:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001234:	4b08      	ldr	r3, [pc, #32]	@ (8001258 <SystemInit+0x11c>)
 8001236:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800123a:	4a07      	ldr	r2, [pc, #28]	@ (8001258 <SystemInit+0x11c>)
 800123c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001240:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001244:	bf00      	nop
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	e000ed00 	.word	0xe000ed00
 8001254:	52002000 	.word	0x52002000
 8001258:	58024400 	.word	0x58024400
 800125c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001260:	02020200 	.word	0x02020200
 8001264:	01ff0000 	.word	0x01ff0000
 8001268:	01010280 	.word	0x01010280
 800126c:	5c001000 	.word	0x5c001000
 8001270:	ffff0000 	.word	0xffff0000
 8001274:	51008108 	.word	0x51008108
 8001278:	52004000 	.word	0x52004000

0800127c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001280:	4b09      	ldr	r3, [pc, #36]	@ (80012a8 <ExitRun0Mode+0x2c>)
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	4a08      	ldr	r2, [pc, #32]	@ (80012a8 <ExitRun0Mode+0x2c>)
 8001286:	f043 0302 	orr.w	r3, r3, #2
 800128a:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 800128c:	bf00      	nop
 800128e:	4b06      	ldr	r3, [pc, #24]	@ (80012a8 <ExitRun0Mode+0x2c>)
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d0f9      	beq.n	800128e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800129a:	bf00      	nop
 800129c:	bf00      	nop
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	58024800 	.word	0x58024800

080012ac <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012b0:	4b22      	ldr	r3, [pc, #136]	@ (800133c <MX_USART1_UART_Init+0x90>)
 80012b2:	4a23      	ldr	r2, [pc, #140]	@ (8001340 <MX_USART1_UART_Init+0x94>)
 80012b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012b6:	4b21      	ldr	r3, [pc, #132]	@ (800133c <MX_USART1_UART_Init+0x90>)
 80012b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012be:	4b1f      	ldr	r3, [pc, #124]	@ (800133c <MX_USART1_UART_Init+0x90>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012c4:	4b1d      	ldr	r3, [pc, #116]	@ (800133c <MX_USART1_UART_Init+0x90>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012ca:	4b1c      	ldr	r3, [pc, #112]	@ (800133c <MX_USART1_UART_Init+0x90>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012d0:	4b1a      	ldr	r3, [pc, #104]	@ (800133c <MX_USART1_UART_Init+0x90>)
 80012d2:	220c      	movs	r2, #12
 80012d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012d6:	4b19      	ldr	r3, [pc, #100]	@ (800133c <MX_USART1_UART_Init+0x90>)
 80012d8:	2200      	movs	r2, #0
 80012da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012dc:	4b17      	ldr	r3, [pc, #92]	@ (800133c <MX_USART1_UART_Init+0x90>)
 80012de:	2200      	movs	r2, #0
 80012e0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012e2:	4b16      	ldr	r3, [pc, #88]	@ (800133c <MX_USART1_UART_Init+0x90>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012e8:	4b14      	ldr	r3, [pc, #80]	@ (800133c <MX_USART1_UART_Init+0x90>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012ee:	4b13      	ldr	r3, [pc, #76]	@ (800133c <MX_USART1_UART_Init+0x90>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012f4:	4811      	ldr	r0, [pc, #68]	@ (800133c <MX_USART1_UART_Init+0x90>)
 80012f6:	f004 fe7d 	bl	8005ff4 <HAL_UART_Init>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001300:	f7ff fbc2 	bl	8000a88 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001304:	2100      	movs	r1, #0
 8001306:	480d      	ldr	r0, [pc, #52]	@ (800133c <MX_USART1_UART_Init+0x90>)
 8001308:	f006 fb64 	bl	80079d4 <HAL_UARTEx_SetTxFifoThreshold>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001312:	f7ff fbb9 	bl	8000a88 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001316:	2100      	movs	r1, #0
 8001318:	4808      	ldr	r0, [pc, #32]	@ (800133c <MX_USART1_UART_Init+0x90>)
 800131a:	f006 fb99 	bl	8007a50 <HAL_UARTEx_SetRxFifoThreshold>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001324:	f7ff fbb0 	bl	8000a88 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001328:	4804      	ldr	r0, [pc, #16]	@ (800133c <MX_USART1_UART_Init+0x90>)
 800132a:	f006 fb1a 	bl	8007962 <HAL_UARTEx_DisableFifoMode>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001334:	f7ff fba8 	bl	8000a88 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001338:	bf00      	nop
 800133a:	bd80      	pop	{r7, pc}
 800133c:	240000b0 	.word	0x240000b0
 8001340:	40011000 	.word	0x40011000

08001344 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b0ba      	sub	sp, #232	@ 0xe8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
 800135a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800135c:	f107 0310 	add.w	r3, r7, #16
 8001360:	22c0      	movs	r2, #192	@ 0xc0
 8001362:	2100      	movs	r1, #0
 8001364:	4618      	mov	r0, r3
 8001366:	f006 fe09 	bl	8007f7c <memset>
  if(uartHandle->Instance==USART1)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a2b      	ldr	r2, [pc, #172]	@ (800141c <HAL_UART_MspInit+0xd8>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d14e      	bne.n	8001412 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001374:	f04f 0201 	mov.w	r2, #1
 8001378:	f04f 0300 	mov.w	r3, #0
 800137c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001380:	2300      	movs	r3, #0
 8001382:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001386:	f107 0310 	add.w	r3, r7, #16
 800138a:	4618      	mov	r0, r3
 800138c:	f002 fa70 	bl	8003870 <HAL_RCCEx_PeriphCLKConfig>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001396:	f7ff fb77 	bl	8000a88 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800139a:	4b21      	ldr	r3, [pc, #132]	@ (8001420 <HAL_UART_MspInit+0xdc>)
 800139c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80013a0:	4a1f      	ldr	r2, [pc, #124]	@ (8001420 <HAL_UART_MspInit+0xdc>)
 80013a2:	f043 0310 	orr.w	r3, r3, #16
 80013a6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80013aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001420 <HAL_UART_MspInit+0xdc>)
 80013ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80013b0:	f003 0310 	and.w	r3, r3, #16
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b8:	4b19      	ldr	r3, [pc, #100]	@ (8001420 <HAL_UART_MspInit+0xdc>)
 80013ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013be:	4a18      	ldr	r2, [pc, #96]	@ (8001420 <HAL_UART_MspInit+0xdc>)
 80013c0:	f043 0301 	orr.w	r3, r3, #1
 80013c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013c8:	4b15      	ldr	r3, [pc, #84]	@ (8001420 <HAL_UART_MspInit+0xdc>)
 80013ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	60bb      	str	r3, [r7, #8]
 80013d4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80013d6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80013da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013de:	2302      	movs	r3, #2
 80013e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013e4:	2301      	movs	r3, #1
 80013e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013ea:	2302      	movs	r3, #2
 80013ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013f0:	2307      	movs	r3, #7
 80013f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80013fa:	4619      	mov	r1, r3
 80013fc:	4809      	ldr	r0, [pc, #36]	@ (8001424 <HAL_UART_MspInit+0xe0>)
 80013fe:	f000 ffff 	bl	8002400 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001402:	2200      	movs	r2, #0
 8001404:	2100      	movs	r1, #0
 8001406:	2025      	movs	r0, #37	@ 0x25
 8001408:	f000 f9e9 	bl	80017de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800140c:	2025      	movs	r0, #37	@ 0x25
 800140e:	f000 fa00 	bl	8001812 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001412:	bf00      	nop
 8001414:	37e8      	adds	r7, #232	@ 0xe8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40011000 	.word	0x40011000
 8001420:	58024400 	.word	0x58024400
 8001424:	58020000 	.word	0x58020000

08001428 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

/* printf重定向 */
PUTCHAR_PROTOTYPE
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001430:	1d39      	adds	r1, r7, #4
 8001432:	f04f 33ff 	mov.w	r3, #4294967295
 8001436:	2201      	movs	r2, #1
 8001438:	4803      	ldr	r0, [pc, #12]	@ (8001448 <__io_putchar+0x20>)
 800143a:	f004 fe2b 	bl	8006094 <HAL_UART_Transmit>
    return ch;
 800143e:	687b      	ldr	r3, [r7, #4]
}
 8001440:	4618      	mov	r0, r3
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	240000b0 	.word	0x240000b0

0800144c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800144c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001488 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001450:	f7ff ff14 	bl	800127c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001454:	f7ff fe72 	bl	800113c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001458:	480c      	ldr	r0, [pc, #48]	@ (800148c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800145a:	490d      	ldr	r1, [pc, #52]	@ (8001490 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800145c:	4a0d      	ldr	r2, [pc, #52]	@ (8001494 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800145e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001460:	e002      	b.n	8001468 <LoopCopyDataInit>

08001462 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001462:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001464:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001466:	3304      	adds	r3, #4

08001468 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001468:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800146a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800146c:	d3f9      	bcc.n	8001462 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800146e:	4a0a      	ldr	r2, [pc, #40]	@ (8001498 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001470:	4c0a      	ldr	r4, [pc, #40]	@ (800149c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001472:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001474:	e001      	b.n	800147a <LoopFillZerobss>

08001476 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001476:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001478:	3204      	adds	r2, #4

0800147a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800147a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800147c:	d3fb      	bcc.n	8001476 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800147e:	f006 fdd1 	bl	8008024 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001482:	f7ff f9e5 	bl	8000850 <main>
  bx  lr
 8001486:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001488:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800148c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001490:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8001494:	08008b78 	.word	0x08008b78
  ldr r2, =_sbss
 8001498:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 800149c:	24000294 	.word	0x24000294

080014a0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014a0:	e7fe      	b.n	80014a0 <ADC3_IRQHandler>
	...

080014a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014aa:	2003      	movs	r0, #3
 80014ac:	f000 f98c 	bl	80017c8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80014b0:	f002 f808 	bl	80034c4 <HAL_RCC_GetSysClockFreq>
 80014b4:	4602      	mov	r2, r0
 80014b6:	4b15      	ldr	r3, [pc, #84]	@ (800150c <HAL_Init+0x68>)
 80014b8:	699b      	ldr	r3, [r3, #24]
 80014ba:	0a1b      	lsrs	r3, r3, #8
 80014bc:	f003 030f 	and.w	r3, r3, #15
 80014c0:	4913      	ldr	r1, [pc, #76]	@ (8001510 <HAL_Init+0x6c>)
 80014c2:	5ccb      	ldrb	r3, [r1, r3]
 80014c4:	f003 031f 	and.w	r3, r3, #31
 80014c8:	fa22 f303 	lsr.w	r3, r2, r3
 80014cc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80014ce:	4b0f      	ldr	r3, [pc, #60]	@ (800150c <HAL_Init+0x68>)
 80014d0:	699b      	ldr	r3, [r3, #24]
 80014d2:	f003 030f 	and.w	r3, r3, #15
 80014d6:	4a0e      	ldr	r2, [pc, #56]	@ (8001510 <HAL_Init+0x6c>)
 80014d8:	5cd3      	ldrb	r3, [r2, r3]
 80014da:	f003 031f 	and.w	r3, r3, #31
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	fa22 f303 	lsr.w	r3, r2, r3
 80014e4:	4a0b      	ldr	r2, [pc, #44]	@ (8001514 <HAL_Init+0x70>)
 80014e6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80014e8:	4a0b      	ldr	r2, [pc, #44]	@ (8001518 <HAL_Init+0x74>)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014ee:	200f      	movs	r0, #15
 80014f0:	f000 f814 	bl	800151c <HAL_InitTick>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e002      	b.n	8001504 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80014fe:	f7ff fd1f 	bl	8000f40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001502:	2300      	movs	r3, #0
}
 8001504:	4618      	mov	r0, r3
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	58024400 	.word	0x58024400
 8001510:	08008afc 	.word	0x08008afc
 8001514:	24000004 	.word	0x24000004
 8001518:	24000000 	.word	0x24000000

0800151c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001524:	4b15      	ldr	r3, [pc, #84]	@ (800157c <HAL_InitTick+0x60>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d101      	bne.n	8001530 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e021      	b.n	8001574 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001530:	4b13      	ldr	r3, [pc, #76]	@ (8001580 <HAL_InitTick+0x64>)
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	4b11      	ldr	r3, [pc, #68]	@ (800157c <HAL_InitTick+0x60>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	4619      	mov	r1, r3
 800153a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800153e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001542:	fbb2 f3f3 	udiv	r3, r2, r3
 8001546:	4618      	mov	r0, r3
 8001548:	f000 f971 	bl	800182e <HAL_SYSTICK_Config>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e00e      	b.n	8001574 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2b0f      	cmp	r3, #15
 800155a:	d80a      	bhi.n	8001572 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800155c:	2200      	movs	r2, #0
 800155e:	6879      	ldr	r1, [r7, #4]
 8001560:	f04f 30ff 	mov.w	r0, #4294967295
 8001564:	f000 f93b 	bl	80017de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001568:	4a06      	ldr	r2, [pc, #24]	@ (8001584 <HAL_InitTick+0x68>)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800156e:	2300      	movs	r3, #0
 8001570:	e000      	b.n	8001574 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
}
 8001574:	4618      	mov	r0, r3
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	2400000c 	.word	0x2400000c
 8001580:	24000000 	.word	0x24000000
 8001584:	24000008 	.word	0x24000008

08001588 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800158c:	4b06      	ldr	r3, [pc, #24]	@ (80015a8 <HAL_IncTick+0x20>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	461a      	mov	r2, r3
 8001592:	4b06      	ldr	r3, [pc, #24]	@ (80015ac <HAL_IncTick+0x24>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4413      	add	r3, r2
 8001598:	4a04      	ldr	r2, [pc, #16]	@ (80015ac <HAL_IncTick+0x24>)
 800159a:	6013      	str	r3, [r2, #0]
}
 800159c:	bf00      	nop
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	2400000c 	.word	0x2400000c
 80015ac:	24000144 	.word	0x24000144

080015b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  return uwTick;
 80015b4:	4b03      	ldr	r3, [pc, #12]	@ (80015c4 <HAL_GetTick+0x14>)
 80015b6:	681b      	ldr	r3, [r3, #0]
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	24000144 	.word	0x24000144

080015c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015d0:	f7ff ffee 	bl	80015b0 <HAL_GetTick>
 80015d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015e0:	d005      	beq.n	80015ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015e2:	4b0a      	ldr	r3, [pc, #40]	@ (800160c <HAL_Delay+0x44>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	461a      	mov	r2, r3
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	4413      	add	r3, r2
 80015ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015ee:	bf00      	nop
 80015f0:	f7ff ffde 	bl	80015b0 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	68fa      	ldr	r2, [r7, #12]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d8f7      	bhi.n	80015f0 <HAL_Delay+0x28>
  {
  }
}
 8001600:	bf00      	nop
 8001602:	bf00      	nop
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	2400000c 	.word	0x2400000c

08001610 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001614:	4b03      	ldr	r3, [pc, #12]	@ (8001624 <HAL_GetREVID+0x14>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	0c1b      	lsrs	r3, r3, #16
}
 800161a:	4618      	mov	r0, r3
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	5c001000 	.word	0x5c001000

08001628 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001628:	b480      	push	{r7}
 800162a:	b085      	sub	sp, #20
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f003 0307 	and.w	r3, r3, #7
 8001636:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001638:	4b0b      	ldr	r3, [pc, #44]	@ (8001668 <__NVIC_SetPriorityGrouping+0x40>)
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800163e:	68ba      	ldr	r2, [r7, #8]
 8001640:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001644:	4013      	ands	r3, r2
 8001646:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001650:	4b06      	ldr	r3, [pc, #24]	@ (800166c <__NVIC_SetPriorityGrouping+0x44>)
 8001652:	4313      	orrs	r3, r2
 8001654:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001656:	4a04      	ldr	r2, [pc, #16]	@ (8001668 <__NVIC_SetPriorityGrouping+0x40>)
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	60d3      	str	r3, [r2, #12]
}
 800165c:	bf00      	nop
 800165e:	3714      	adds	r7, #20
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	e000ed00 	.word	0xe000ed00
 800166c:	05fa0000 	.word	0x05fa0000

08001670 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001674:	4b04      	ldr	r3, [pc, #16]	@ (8001688 <__NVIC_GetPriorityGrouping+0x18>)
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	0a1b      	lsrs	r3, r3, #8
 800167a:	f003 0307 	and.w	r3, r3, #7
}
 800167e:	4618      	mov	r0, r3
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	e000ed00 	.word	0xe000ed00

0800168c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	4603      	mov	r3, r0
 8001694:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001696:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800169a:	2b00      	cmp	r3, #0
 800169c:	db0b      	blt.n	80016b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800169e:	88fb      	ldrh	r3, [r7, #6]
 80016a0:	f003 021f 	and.w	r2, r3, #31
 80016a4:	4907      	ldr	r1, [pc, #28]	@ (80016c4 <__NVIC_EnableIRQ+0x38>)
 80016a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016aa:	095b      	lsrs	r3, r3, #5
 80016ac:	2001      	movs	r0, #1
 80016ae:	fa00 f202 	lsl.w	r2, r0, r2
 80016b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016b6:	bf00      	nop
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	e000e100 	.word	0xe000e100

080016c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4603      	mov	r3, r0
 80016d0:	6039      	str	r1, [r7, #0]
 80016d2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80016d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	db0a      	blt.n	80016f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	b2da      	uxtb	r2, r3
 80016e0:	490c      	ldr	r1, [pc, #48]	@ (8001714 <__NVIC_SetPriority+0x4c>)
 80016e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016e6:	0112      	lsls	r2, r2, #4
 80016e8:	b2d2      	uxtb	r2, r2
 80016ea:	440b      	add	r3, r1
 80016ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016f0:	e00a      	b.n	8001708 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	b2da      	uxtb	r2, r3
 80016f6:	4908      	ldr	r1, [pc, #32]	@ (8001718 <__NVIC_SetPriority+0x50>)
 80016f8:	88fb      	ldrh	r3, [r7, #6]
 80016fa:	f003 030f 	and.w	r3, r3, #15
 80016fe:	3b04      	subs	r3, #4
 8001700:	0112      	lsls	r2, r2, #4
 8001702:	b2d2      	uxtb	r2, r2
 8001704:	440b      	add	r3, r1
 8001706:	761a      	strb	r2, [r3, #24]
}
 8001708:	bf00      	nop
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	e000e100 	.word	0xe000e100
 8001718:	e000ed00 	.word	0xe000ed00

0800171c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800171c:	b480      	push	{r7}
 800171e:	b089      	sub	sp, #36	@ 0x24
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	60b9      	str	r1, [r7, #8]
 8001726:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f003 0307 	and.w	r3, r3, #7
 800172e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	f1c3 0307 	rsb	r3, r3, #7
 8001736:	2b04      	cmp	r3, #4
 8001738:	bf28      	it	cs
 800173a:	2304      	movcs	r3, #4
 800173c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	3304      	adds	r3, #4
 8001742:	2b06      	cmp	r3, #6
 8001744:	d902      	bls.n	800174c <NVIC_EncodePriority+0x30>
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	3b03      	subs	r3, #3
 800174a:	e000      	b.n	800174e <NVIC_EncodePriority+0x32>
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001750:	f04f 32ff 	mov.w	r2, #4294967295
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	43da      	mvns	r2, r3
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	401a      	ands	r2, r3
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001764:	f04f 31ff 	mov.w	r1, #4294967295
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	fa01 f303 	lsl.w	r3, r1, r3
 800176e:	43d9      	mvns	r1, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001774:	4313      	orrs	r3, r2
         );
}
 8001776:	4618      	mov	r0, r3
 8001778:	3724      	adds	r7, #36	@ 0x24
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
	...

08001784 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	3b01      	subs	r3, #1
 8001790:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001794:	d301      	bcc.n	800179a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001796:	2301      	movs	r3, #1
 8001798:	e00f      	b.n	80017ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800179a:	4a0a      	ldr	r2, [pc, #40]	@ (80017c4 <SysTick_Config+0x40>)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	3b01      	subs	r3, #1
 80017a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017a2:	210f      	movs	r1, #15
 80017a4:	f04f 30ff 	mov.w	r0, #4294967295
 80017a8:	f7ff ff8e 	bl	80016c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017ac:	4b05      	ldr	r3, [pc, #20]	@ (80017c4 <SysTick_Config+0x40>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017b2:	4b04      	ldr	r3, [pc, #16]	@ (80017c4 <SysTick_Config+0x40>)
 80017b4:	2207      	movs	r2, #7
 80017b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	e000e010 	.word	0xe000e010

080017c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f7ff ff29 	bl	8001628 <__NVIC_SetPriorityGrouping>
}
 80017d6:	bf00      	nop
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b086      	sub	sp, #24
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	4603      	mov	r3, r0
 80017e6:	60b9      	str	r1, [r7, #8]
 80017e8:	607a      	str	r2, [r7, #4]
 80017ea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017ec:	f7ff ff40 	bl	8001670 <__NVIC_GetPriorityGrouping>
 80017f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	68b9      	ldr	r1, [r7, #8]
 80017f6:	6978      	ldr	r0, [r7, #20]
 80017f8:	f7ff ff90 	bl	800171c <NVIC_EncodePriority>
 80017fc:	4602      	mov	r2, r0
 80017fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001802:	4611      	mov	r1, r2
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff ff5f 	bl	80016c8 <__NVIC_SetPriority>
}
 800180a:	bf00      	nop
 800180c:	3718      	adds	r7, #24
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b082      	sub	sp, #8
 8001816:	af00      	add	r7, sp, #0
 8001818:	4603      	mov	r3, r0
 800181a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800181c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff ff33 	bl	800168c <__NVIC_EnableIRQ>
}
 8001826:	bf00      	nop
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	b082      	sub	sp, #8
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f7ff ffa4 	bl	8001784 <SysTick_Config>
 800183c:	4603      	mov	r3, r0
}
 800183e:	4618      	mov	r0, r3
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
	...

08001848 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800184c:	f3bf 8f5f 	dmb	sy
}
 8001850:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001852:	4b07      	ldr	r3, [pc, #28]	@ (8001870 <HAL_MPU_Disable+0x28>)
 8001854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001856:	4a06      	ldr	r2, [pc, #24]	@ (8001870 <HAL_MPU_Disable+0x28>)
 8001858:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800185c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800185e:	4b05      	ldr	r3, [pc, #20]	@ (8001874 <HAL_MPU_Disable+0x2c>)
 8001860:	2200      	movs	r2, #0
 8001862:	605a      	str	r2, [r3, #4]
}
 8001864:	bf00      	nop
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	e000ed00 	.word	0xe000ed00
 8001874:	e000ed90 	.word	0xe000ed90

08001878 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001880:	4a0b      	ldr	r2, [pc, #44]	@ (80018b0 <HAL_MPU_Enable+0x38>)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f043 0301 	orr.w	r3, r3, #1
 8001888:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800188a:	4b0a      	ldr	r3, [pc, #40]	@ (80018b4 <HAL_MPU_Enable+0x3c>)
 800188c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800188e:	4a09      	ldr	r2, [pc, #36]	@ (80018b4 <HAL_MPU_Enable+0x3c>)
 8001890:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001894:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001896:	f3bf 8f4f 	dsb	sy
}
 800189a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800189c:	f3bf 8f6f 	isb	sy
}
 80018a0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80018a2:	bf00      	nop
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	e000ed90 	.word	0xe000ed90
 80018b4:	e000ed00 	.word	0xe000ed00

080018b8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	785a      	ldrb	r2, [r3, #1]
 80018c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001934 <HAL_MPU_ConfigRegion+0x7c>)
 80018c6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80018c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001934 <HAL_MPU_ConfigRegion+0x7c>)
 80018ca:	691b      	ldr	r3, [r3, #16]
 80018cc:	4a19      	ldr	r2, [pc, #100]	@ (8001934 <HAL_MPU_ConfigRegion+0x7c>)
 80018ce:	f023 0301 	bic.w	r3, r3, #1
 80018d2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80018d4:	4a17      	ldr	r2, [pc, #92]	@ (8001934 <HAL_MPU_ConfigRegion+0x7c>)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	7b1b      	ldrb	r3, [r3, #12]
 80018e0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	7adb      	ldrb	r3, [r3, #11]
 80018e6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80018e8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	7a9b      	ldrb	r3, [r3, #10]
 80018ee:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80018f0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	7b5b      	ldrb	r3, [r3, #13]
 80018f6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80018f8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	7b9b      	ldrb	r3, [r3, #14]
 80018fe:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001900:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	7bdb      	ldrb	r3, [r3, #15]
 8001906:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001908:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	7a5b      	ldrb	r3, [r3, #9]
 800190e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001910:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	7a1b      	ldrb	r3, [r3, #8]
 8001916:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001918:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	7812      	ldrb	r2, [r2, #0]
 800191e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001920:	4a04      	ldr	r2, [pc, #16]	@ (8001934 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001922:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001924:	6113      	str	r3, [r2, #16]
}
 8001926:	bf00      	nop
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	e000ed90 	.word	0xe000ed90

08001938 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001940:	f7ff fe36 	bl	80015b0 <HAL_GetTick>
 8001944:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d101      	bne.n	8001950 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e2dc      	b.n	8001f0a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001956:	b2db      	uxtb	r3, r3
 8001958:	2b02      	cmp	r3, #2
 800195a:	d008      	beq.n	800196e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2280      	movs	r2, #128	@ 0x80
 8001960:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e2cd      	b.n	8001f0a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a76      	ldr	r2, [pc, #472]	@ (8001b4c <HAL_DMA_Abort+0x214>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d04a      	beq.n	8001a0e <HAL_DMA_Abort+0xd6>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a74      	ldr	r2, [pc, #464]	@ (8001b50 <HAL_DMA_Abort+0x218>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d045      	beq.n	8001a0e <HAL_DMA_Abort+0xd6>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a73      	ldr	r2, [pc, #460]	@ (8001b54 <HAL_DMA_Abort+0x21c>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d040      	beq.n	8001a0e <HAL_DMA_Abort+0xd6>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a71      	ldr	r2, [pc, #452]	@ (8001b58 <HAL_DMA_Abort+0x220>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d03b      	beq.n	8001a0e <HAL_DMA_Abort+0xd6>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a70      	ldr	r2, [pc, #448]	@ (8001b5c <HAL_DMA_Abort+0x224>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d036      	beq.n	8001a0e <HAL_DMA_Abort+0xd6>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a6e      	ldr	r2, [pc, #440]	@ (8001b60 <HAL_DMA_Abort+0x228>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d031      	beq.n	8001a0e <HAL_DMA_Abort+0xd6>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a6d      	ldr	r2, [pc, #436]	@ (8001b64 <HAL_DMA_Abort+0x22c>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d02c      	beq.n	8001a0e <HAL_DMA_Abort+0xd6>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a6b      	ldr	r2, [pc, #428]	@ (8001b68 <HAL_DMA_Abort+0x230>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d027      	beq.n	8001a0e <HAL_DMA_Abort+0xd6>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a6a      	ldr	r2, [pc, #424]	@ (8001b6c <HAL_DMA_Abort+0x234>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d022      	beq.n	8001a0e <HAL_DMA_Abort+0xd6>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a68      	ldr	r2, [pc, #416]	@ (8001b70 <HAL_DMA_Abort+0x238>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d01d      	beq.n	8001a0e <HAL_DMA_Abort+0xd6>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a67      	ldr	r2, [pc, #412]	@ (8001b74 <HAL_DMA_Abort+0x23c>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d018      	beq.n	8001a0e <HAL_DMA_Abort+0xd6>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a65      	ldr	r2, [pc, #404]	@ (8001b78 <HAL_DMA_Abort+0x240>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d013      	beq.n	8001a0e <HAL_DMA_Abort+0xd6>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a64      	ldr	r2, [pc, #400]	@ (8001b7c <HAL_DMA_Abort+0x244>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d00e      	beq.n	8001a0e <HAL_DMA_Abort+0xd6>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a62      	ldr	r2, [pc, #392]	@ (8001b80 <HAL_DMA_Abort+0x248>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d009      	beq.n	8001a0e <HAL_DMA_Abort+0xd6>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a61      	ldr	r2, [pc, #388]	@ (8001b84 <HAL_DMA_Abort+0x24c>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d004      	beq.n	8001a0e <HAL_DMA_Abort+0xd6>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a5f      	ldr	r2, [pc, #380]	@ (8001b88 <HAL_DMA_Abort+0x250>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d101      	bne.n	8001a12 <HAL_DMA_Abort+0xda>
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e000      	b.n	8001a14 <HAL_DMA_Abort+0xdc>
 8001a12:	2300      	movs	r3, #0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d013      	beq.n	8001a40 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f022 021e 	bic.w	r2, r2, #30
 8001a26:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	695a      	ldr	r2, [r3, #20]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001a36:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	617b      	str	r3, [r7, #20]
 8001a3e:	e00a      	b.n	8001a56 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f022 020e 	bic.w	r2, r2, #14
 8001a4e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a3c      	ldr	r2, [pc, #240]	@ (8001b4c <HAL_DMA_Abort+0x214>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d072      	beq.n	8001b46 <HAL_DMA_Abort+0x20e>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a3a      	ldr	r2, [pc, #232]	@ (8001b50 <HAL_DMA_Abort+0x218>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d06d      	beq.n	8001b46 <HAL_DMA_Abort+0x20e>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a39      	ldr	r2, [pc, #228]	@ (8001b54 <HAL_DMA_Abort+0x21c>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d068      	beq.n	8001b46 <HAL_DMA_Abort+0x20e>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a37      	ldr	r2, [pc, #220]	@ (8001b58 <HAL_DMA_Abort+0x220>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d063      	beq.n	8001b46 <HAL_DMA_Abort+0x20e>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a36      	ldr	r2, [pc, #216]	@ (8001b5c <HAL_DMA_Abort+0x224>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d05e      	beq.n	8001b46 <HAL_DMA_Abort+0x20e>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a34      	ldr	r2, [pc, #208]	@ (8001b60 <HAL_DMA_Abort+0x228>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d059      	beq.n	8001b46 <HAL_DMA_Abort+0x20e>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a33      	ldr	r2, [pc, #204]	@ (8001b64 <HAL_DMA_Abort+0x22c>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d054      	beq.n	8001b46 <HAL_DMA_Abort+0x20e>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a31      	ldr	r2, [pc, #196]	@ (8001b68 <HAL_DMA_Abort+0x230>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d04f      	beq.n	8001b46 <HAL_DMA_Abort+0x20e>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a30      	ldr	r2, [pc, #192]	@ (8001b6c <HAL_DMA_Abort+0x234>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d04a      	beq.n	8001b46 <HAL_DMA_Abort+0x20e>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a2e      	ldr	r2, [pc, #184]	@ (8001b70 <HAL_DMA_Abort+0x238>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d045      	beq.n	8001b46 <HAL_DMA_Abort+0x20e>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a2d      	ldr	r2, [pc, #180]	@ (8001b74 <HAL_DMA_Abort+0x23c>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d040      	beq.n	8001b46 <HAL_DMA_Abort+0x20e>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a2b      	ldr	r2, [pc, #172]	@ (8001b78 <HAL_DMA_Abort+0x240>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d03b      	beq.n	8001b46 <HAL_DMA_Abort+0x20e>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a2a      	ldr	r2, [pc, #168]	@ (8001b7c <HAL_DMA_Abort+0x244>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d036      	beq.n	8001b46 <HAL_DMA_Abort+0x20e>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a28      	ldr	r2, [pc, #160]	@ (8001b80 <HAL_DMA_Abort+0x248>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d031      	beq.n	8001b46 <HAL_DMA_Abort+0x20e>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a27      	ldr	r2, [pc, #156]	@ (8001b84 <HAL_DMA_Abort+0x24c>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d02c      	beq.n	8001b46 <HAL_DMA_Abort+0x20e>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a25      	ldr	r2, [pc, #148]	@ (8001b88 <HAL_DMA_Abort+0x250>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d027      	beq.n	8001b46 <HAL_DMA_Abort+0x20e>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a24      	ldr	r2, [pc, #144]	@ (8001b8c <HAL_DMA_Abort+0x254>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d022      	beq.n	8001b46 <HAL_DMA_Abort+0x20e>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a22      	ldr	r2, [pc, #136]	@ (8001b90 <HAL_DMA_Abort+0x258>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d01d      	beq.n	8001b46 <HAL_DMA_Abort+0x20e>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a21      	ldr	r2, [pc, #132]	@ (8001b94 <HAL_DMA_Abort+0x25c>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d018      	beq.n	8001b46 <HAL_DMA_Abort+0x20e>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a1f      	ldr	r2, [pc, #124]	@ (8001b98 <HAL_DMA_Abort+0x260>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d013      	beq.n	8001b46 <HAL_DMA_Abort+0x20e>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a1e      	ldr	r2, [pc, #120]	@ (8001b9c <HAL_DMA_Abort+0x264>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d00e      	beq.n	8001b46 <HAL_DMA_Abort+0x20e>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a1c      	ldr	r2, [pc, #112]	@ (8001ba0 <HAL_DMA_Abort+0x268>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d009      	beq.n	8001b46 <HAL_DMA_Abort+0x20e>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a1b      	ldr	r2, [pc, #108]	@ (8001ba4 <HAL_DMA_Abort+0x26c>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d004      	beq.n	8001b46 <HAL_DMA_Abort+0x20e>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a19      	ldr	r2, [pc, #100]	@ (8001ba8 <HAL_DMA_Abort+0x270>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d132      	bne.n	8001bac <HAL_DMA_Abort+0x274>
 8001b46:	2301      	movs	r3, #1
 8001b48:	e031      	b.n	8001bae <HAL_DMA_Abort+0x276>
 8001b4a:	bf00      	nop
 8001b4c:	40020010 	.word	0x40020010
 8001b50:	40020028 	.word	0x40020028
 8001b54:	40020040 	.word	0x40020040
 8001b58:	40020058 	.word	0x40020058
 8001b5c:	40020070 	.word	0x40020070
 8001b60:	40020088 	.word	0x40020088
 8001b64:	400200a0 	.word	0x400200a0
 8001b68:	400200b8 	.word	0x400200b8
 8001b6c:	40020410 	.word	0x40020410
 8001b70:	40020428 	.word	0x40020428
 8001b74:	40020440 	.word	0x40020440
 8001b78:	40020458 	.word	0x40020458
 8001b7c:	40020470 	.word	0x40020470
 8001b80:	40020488 	.word	0x40020488
 8001b84:	400204a0 	.word	0x400204a0
 8001b88:	400204b8 	.word	0x400204b8
 8001b8c:	58025408 	.word	0x58025408
 8001b90:	5802541c 	.word	0x5802541c
 8001b94:	58025430 	.word	0x58025430
 8001b98:	58025444 	.word	0x58025444
 8001b9c:	58025458 	.word	0x58025458
 8001ba0:	5802546c 	.word	0x5802546c
 8001ba4:	58025480 	.word	0x58025480
 8001ba8:	58025494 	.word	0x58025494
 8001bac:	2300      	movs	r3, #0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d007      	beq.n	8001bc2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bbc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001bc0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a6d      	ldr	r2, [pc, #436]	@ (8001d7c <HAL_DMA_Abort+0x444>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d04a      	beq.n	8001c62 <HAL_DMA_Abort+0x32a>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a6b      	ldr	r2, [pc, #428]	@ (8001d80 <HAL_DMA_Abort+0x448>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d045      	beq.n	8001c62 <HAL_DMA_Abort+0x32a>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a6a      	ldr	r2, [pc, #424]	@ (8001d84 <HAL_DMA_Abort+0x44c>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d040      	beq.n	8001c62 <HAL_DMA_Abort+0x32a>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a68      	ldr	r2, [pc, #416]	@ (8001d88 <HAL_DMA_Abort+0x450>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d03b      	beq.n	8001c62 <HAL_DMA_Abort+0x32a>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a67      	ldr	r2, [pc, #412]	@ (8001d8c <HAL_DMA_Abort+0x454>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d036      	beq.n	8001c62 <HAL_DMA_Abort+0x32a>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a65      	ldr	r2, [pc, #404]	@ (8001d90 <HAL_DMA_Abort+0x458>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d031      	beq.n	8001c62 <HAL_DMA_Abort+0x32a>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a64      	ldr	r2, [pc, #400]	@ (8001d94 <HAL_DMA_Abort+0x45c>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d02c      	beq.n	8001c62 <HAL_DMA_Abort+0x32a>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a62      	ldr	r2, [pc, #392]	@ (8001d98 <HAL_DMA_Abort+0x460>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d027      	beq.n	8001c62 <HAL_DMA_Abort+0x32a>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a61      	ldr	r2, [pc, #388]	@ (8001d9c <HAL_DMA_Abort+0x464>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d022      	beq.n	8001c62 <HAL_DMA_Abort+0x32a>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a5f      	ldr	r2, [pc, #380]	@ (8001da0 <HAL_DMA_Abort+0x468>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d01d      	beq.n	8001c62 <HAL_DMA_Abort+0x32a>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a5e      	ldr	r2, [pc, #376]	@ (8001da4 <HAL_DMA_Abort+0x46c>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d018      	beq.n	8001c62 <HAL_DMA_Abort+0x32a>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a5c      	ldr	r2, [pc, #368]	@ (8001da8 <HAL_DMA_Abort+0x470>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d013      	beq.n	8001c62 <HAL_DMA_Abort+0x32a>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a5b      	ldr	r2, [pc, #364]	@ (8001dac <HAL_DMA_Abort+0x474>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d00e      	beq.n	8001c62 <HAL_DMA_Abort+0x32a>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a59      	ldr	r2, [pc, #356]	@ (8001db0 <HAL_DMA_Abort+0x478>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d009      	beq.n	8001c62 <HAL_DMA_Abort+0x32a>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a58      	ldr	r2, [pc, #352]	@ (8001db4 <HAL_DMA_Abort+0x47c>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d004      	beq.n	8001c62 <HAL_DMA_Abort+0x32a>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a56      	ldr	r2, [pc, #344]	@ (8001db8 <HAL_DMA_Abort+0x480>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d108      	bne.n	8001c74 <HAL_DMA_Abort+0x33c>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f022 0201 	bic.w	r2, r2, #1
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	e007      	b.n	8001c84 <HAL_DMA_Abort+0x34c>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f022 0201 	bic.w	r2, r2, #1
 8001c82:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001c84:	e013      	b.n	8001cae <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c86:	f7ff fc93 	bl	80015b0 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	2b05      	cmp	r3, #5
 8001c92:	d90c      	bls.n	8001cae <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2220      	movs	r2, #32
 8001c98:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2203      	movs	r2, #3
 8001c9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e12d      	b.n	8001f0a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1e5      	bne.n	8001c86 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a2f      	ldr	r2, [pc, #188]	@ (8001d7c <HAL_DMA_Abort+0x444>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d04a      	beq.n	8001d5a <HAL_DMA_Abort+0x422>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a2d      	ldr	r2, [pc, #180]	@ (8001d80 <HAL_DMA_Abort+0x448>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d045      	beq.n	8001d5a <HAL_DMA_Abort+0x422>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a2c      	ldr	r2, [pc, #176]	@ (8001d84 <HAL_DMA_Abort+0x44c>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d040      	beq.n	8001d5a <HAL_DMA_Abort+0x422>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a2a      	ldr	r2, [pc, #168]	@ (8001d88 <HAL_DMA_Abort+0x450>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d03b      	beq.n	8001d5a <HAL_DMA_Abort+0x422>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a29      	ldr	r2, [pc, #164]	@ (8001d8c <HAL_DMA_Abort+0x454>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d036      	beq.n	8001d5a <HAL_DMA_Abort+0x422>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a27      	ldr	r2, [pc, #156]	@ (8001d90 <HAL_DMA_Abort+0x458>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d031      	beq.n	8001d5a <HAL_DMA_Abort+0x422>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a26      	ldr	r2, [pc, #152]	@ (8001d94 <HAL_DMA_Abort+0x45c>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d02c      	beq.n	8001d5a <HAL_DMA_Abort+0x422>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a24      	ldr	r2, [pc, #144]	@ (8001d98 <HAL_DMA_Abort+0x460>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d027      	beq.n	8001d5a <HAL_DMA_Abort+0x422>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a23      	ldr	r2, [pc, #140]	@ (8001d9c <HAL_DMA_Abort+0x464>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d022      	beq.n	8001d5a <HAL_DMA_Abort+0x422>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a21      	ldr	r2, [pc, #132]	@ (8001da0 <HAL_DMA_Abort+0x468>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d01d      	beq.n	8001d5a <HAL_DMA_Abort+0x422>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a20      	ldr	r2, [pc, #128]	@ (8001da4 <HAL_DMA_Abort+0x46c>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d018      	beq.n	8001d5a <HAL_DMA_Abort+0x422>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a1e      	ldr	r2, [pc, #120]	@ (8001da8 <HAL_DMA_Abort+0x470>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d013      	beq.n	8001d5a <HAL_DMA_Abort+0x422>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a1d      	ldr	r2, [pc, #116]	@ (8001dac <HAL_DMA_Abort+0x474>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d00e      	beq.n	8001d5a <HAL_DMA_Abort+0x422>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a1b      	ldr	r2, [pc, #108]	@ (8001db0 <HAL_DMA_Abort+0x478>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d009      	beq.n	8001d5a <HAL_DMA_Abort+0x422>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a1a      	ldr	r2, [pc, #104]	@ (8001db4 <HAL_DMA_Abort+0x47c>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d004      	beq.n	8001d5a <HAL_DMA_Abort+0x422>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a18      	ldr	r2, [pc, #96]	@ (8001db8 <HAL_DMA_Abort+0x480>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d101      	bne.n	8001d5e <HAL_DMA_Abort+0x426>
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e000      	b.n	8001d60 <HAL_DMA_Abort+0x428>
 8001d5e:	2300      	movs	r3, #0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d02b      	beq.n	8001dbc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d68:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d6e:	f003 031f 	and.w	r3, r3, #31
 8001d72:	223f      	movs	r2, #63	@ 0x3f
 8001d74:	409a      	lsls	r2, r3
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	609a      	str	r2, [r3, #8]
 8001d7a:	e02a      	b.n	8001dd2 <HAL_DMA_Abort+0x49a>
 8001d7c:	40020010 	.word	0x40020010
 8001d80:	40020028 	.word	0x40020028
 8001d84:	40020040 	.word	0x40020040
 8001d88:	40020058 	.word	0x40020058
 8001d8c:	40020070 	.word	0x40020070
 8001d90:	40020088 	.word	0x40020088
 8001d94:	400200a0 	.word	0x400200a0
 8001d98:	400200b8 	.word	0x400200b8
 8001d9c:	40020410 	.word	0x40020410
 8001da0:	40020428 	.word	0x40020428
 8001da4:	40020440 	.word	0x40020440
 8001da8:	40020458 	.word	0x40020458
 8001dac:	40020470 	.word	0x40020470
 8001db0:	40020488 	.word	0x40020488
 8001db4:	400204a0 	.word	0x400204a0
 8001db8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dc0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dc6:	f003 031f 	and.w	r3, r3, #31
 8001dca:	2201      	movs	r2, #1
 8001dcc:	409a      	lsls	r2, r3
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a4f      	ldr	r2, [pc, #316]	@ (8001f14 <HAL_DMA_Abort+0x5dc>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d072      	beq.n	8001ec2 <HAL_DMA_Abort+0x58a>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a4d      	ldr	r2, [pc, #308]	@ (8001f18 <HAL_DMA_Abort+0x5e0>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d06d      	beq.n	8001ec2 <HAL_DMA_Abort+0x58a>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a4c      	ldr	r2, [pc, #304]	@ (8001f1c <HAL_DMA_Abort+0x5e4>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d068      	beq.n	8001ec2 <HAL_DMA_Abort+0x58a>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a4a      	ldr	r2, [pc, #296]	@ (8001f20 <HAL_DMA_Abort+0x5e8>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d063      	beq.n	8001ec2 <HAL_DMA_Abort+0x58a>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a49      	ldr	r2, [pc, #292]	@ (8001f24 <HAL_DMA_Abort+0x5ec>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d05e      	beq.n	8001ec2 <HAL_DMA_Abort+0x58a>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a47      	ldr	r2, [pc, #284]	@ (8001f28 <HAL_DMA_Abort+0x5f0>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d059      	beq.n	8001ec2 <HAL_DMA_Abort+0x58a>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a46      	ldr	r2, [pc, #280]	@ (8001f2c <HAL_DMA_Abort+0x5f4>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d054      	beq.n	8001ec2 <HAL_DMA_Abort+0x58a>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a44      	ldr	r2, [pc, #272]	@ (8001f30 <HAL_DMA_Abort+0x5f8>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d04f      	beq.n	8001ec2 <HAL_DMA_Abort+0x58a>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a43      	ldr	r2, [pc, #268]	@ (8001f34 <HAL_DMA_Abort+0x5fc>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d04a      	beq.n	8001ec2 <HAL_DMA_Abort+0x58a>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a41      	ldr	r2, [pc, #260]	@ (8001f38 <HAL_DMA_Abort+0x600>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d045      	beq.n	8001ec2 <HAL_DMA_Abort+0x58a>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a40      	ldr	r2, [pc, #256]	@ (8001f3c <HAL_DMA_Abort+0x604>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d040      	beq.n	8001ec2 <HAL_DMA_Abort+0x58a>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a3e      	ldr	r2, [pc, #248]	@ (8001f40 <HAL_DMA_Abort+0x608>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d03b      	beq.n	8001ec2 <HAL_DMA_Abort+0x58a>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a3d      	ldr	r2, [pc, #244]	@ (8001f44 <HAL_DMA_Abort+0x60c>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d036      	beq.n	8001ec2 <HAL_DMA_Abort+0x58a>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a3b      	ldr	r2, [pc, #236]	@ (8001f48 <HAL_DMA_Abort+0x610>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d031      	beq.n	8001ec2 <HAL_DMA_Abort+0x58a>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a3a      	ldr	r2, [pc, #232]	@ (8001f4c <HAL_DMA_Abort+0x614>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d02c      	beq.n	8001ec2 <HAL_DMA_Abort+0x58a>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a38      	ldr	r2, [pc, #224]	@ (8001f50 <HAL_DMA_Abort+0x618>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d027      	beq.n	8001ec2 <HAL_DMA_Abort+0x58a>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a37      	ldr	r2, [pc, #220]	@ (8001f54 <HAL_DMA_Abort+0x61c>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d022      	beq.n	8001ec2 <HAL_DMA_Abort+0x58a>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a35      	ldr	r2, [pc, #212]	@ (8001f58 <HAL_DMA_Abort+0x620>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d01d      	beq.n	8001ec2 <HAL_DMA_Abort+0x58a>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a34      	ldr	r2, [pc, #208]	@ (8001f5c <HAL_DMA_Abort+0x624>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d018      	beq.n	8001ec2 <HAL_DMA_Abort+0x58a>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a32      	ldr	r2, [pc, #200]	@ (8001f60 <HAL_DMA_Abort+0x628>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d013      	beq.n	8001ec2 <HAL_DMA_Abort+0x58a>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a31      	ldr	r2, [pc, #196]	@ (8001f64 <HAL_DMA_Abort+0x62c>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d00e      	beq.n	8001ec2 <HAL_DMA_Abort+0x58a>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a2f      	ldr	r2, [pc, #188]	@ (8001f68 <HAL_DMA_Abort+0x630>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d009      	beq.n	8001ec2 <HAL_DMA_Abort+0x58a>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a2e      	ldr	r2, [pc, #184]	@ (8001f6c <HAL_DMA_Abort+0x634>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d004      	beq.n	8001ec2 <HAL_DMA_Abort+0x58a>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a2c      	ldr	r2, [pc, #176]	@ (8001f70 <HAL_DMA_Abort+0x638>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d101      	bne.n	8001ec6 <HAL_DMA_Abort+0x58e>
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e000      	b.n	8001ec8 <HAL_DMA_Abort+0x590>
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d015      	beq.n	8001ef8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001ed4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d00c      	beq.n	8001ef8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ee8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001eec:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001ef6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3718      	adds	r7, #24
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	40020010 	.word	0x40020010
 8001f18:	40020028 	.word	0x40020028
 8001f1c:	40020040 	.word	0x40020040
 8001f20:	40020058 	.word	0x40020058
 8001f24:	40020070 	.word	0x40020070
 8001f28:	40020088 	.word	0x40020088
 8001f2c:	400200a0 	.word	0x400200a0
 8001f30:	400200b8 	.word	0x400200b8
 8001f34:	40020410 	.word	0x40020410
 8001f38:	40020428 	.word	0x40020428
 8001f3c:	40020440 	.word	0x40020440
 8001f40:	40020458 	.word	0x40020458
 8001f44:	40020470 	.word	0x40020470
 8001f48:	40020488 	.word	0x40020488
 8001f4c:	400204a0 	.word	0x400204a0
 8001f50:	400204b8 	.word	0x400204b8
 8001f54:	58025408 	.word	0x58025408
 8001f58:	5802541c 	.word	0x5802541c
 8001f5c:	58025430 	.word	0x58025430
 8001f60:	58025444 	.word	0x58025444
 8001f64:	58025458 	.word	0x58025458
 8001f68:	5802546c 	.word	0x5802546c
 8001f6c:	58025480 	.word	0x58025480
 8001f70:	58025494 	.word	0x58025494

08001f74 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e237      	b.n	80023f6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d004      	beq.n	8001f9c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2280      	movs	r2, #128	@ 0x80
 8001f96:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e22c      	b.n	80023f6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a5c      	ldr	r2, [pc, #368]	@ (8002114 <HAL_DMA_Abort_IT+0x1a0>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d04a      	beq.n	800203c <HAL_DMA_Abort_IT+0xc8>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a5b      	ldr	r2, [pc, #364]	@ (8002118 <HAL_DMA_Abort_IT+0x1a4>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d045      	beq.n	800203c <HAL_DMA_Abort_IT+0xc8>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a59      	ldr	r2, [pc, #356]	@ (800211c <HAL_DMA_Abort_IT+0x1a8>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d040      	beq.n	800203c <HAL_DMA_Abort_IT+0xc8>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a58      	ldr	r2, [pc, #352]	@ (8002120 <HAL_DMA_Abort_IT+0x1ac>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d03b      	beq.n	800203c <HAL_DMA_Abort_IT+0xc8>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a56      	ldr	r2, [pc, #344]	@ (8002124 <HAL_DMA_Abort_IT+0x1b0>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d036      	beq.n	800203c <HAL_DMA_Abort_IT+0xc8>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a55      	ldr	r2, [pc, #340]	@ (8002128 <HAL_DMA_Abort_IT+0x1b4>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d031      	beq.n	800203c <HAL_DMA_Abort_IT+0xc8>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a53      	ldr	r2, [pc, #332]	@ (800212c <HAL_DMA_Abort_IT+0x1b8>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d02c      	beq.n	800203c <HAL_DMA_Abort_IT+0xc8>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a52      	ldr	r2, [pc, #328]	@ (8002130 <HAL_DMA_Abort_IT+0x1bc>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d027      	beq.n	800203c <HAL_DMA_Abort_IT+0xc8>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a50      	ldr	r2, [pc, #320]	@ (8002134 <HAL_DMA_Abort_IT+0x1c0>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d022      	beq.n	800203c <HAL_DMA_Abort_IT+0xc8>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a4f      	ldr	r2, [pc, #316]	@ (8002138 <HAL_DMA_Abort_IT+0x1c4>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d01d      	beq.n	800203c <HAL_DMA_Abort_IT+0xc8>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a4d      	ldr	r2, [pc, #308]	@ (800213c <HAL_DMA_Abort_IT+0x1c8>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d018      	beq.n	800203c <HAL_DMA_Abort_IT+0xc8>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a4c      	ldr	r2, [pc, #304]	@ (8002140 <HAL_DMA_Abort_IT+0x1cc>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d013      	beq.n	800203c <HAL_DMA_Abort_IT+0xc8>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a4a      	ldr	r2, [pc, #296]	@ (8002144 <HAL_DMA_Abort_IT+0x1d0>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d00e      	beq.n	800203c <HAL_DMA_Abort_IT+0xc8>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a49      	ldr	r2, [pc, #292]	@ (8002148 <HAL_DMA_Abort_IT+0x1d4>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d009      	beq.n	800203c <HAL_DMA_Abort_IT+0xc8>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a47      	ldr	r2, [pc, #284]	@ (800214c <HAL_DMA_Abort_IT+0x1d8>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d004      	beq.n	800203c <HAL_DMA_Abort_IT+0xc8>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a46      	ldr	r2, [pc, #280]	@ (8002150 <HAL_DMA_Abort_IT+0x1dc>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d101      	bne.n	8002040 <HAL_DMA_Abort_IT+0xcc>
 800203c:	2301      	movs	r3, #1
 800203e:	e000      	b.n	8002042 <HAL_DMA_Abort_IT+0xce>
 8002040:	2300      	movs	r3, #0
 8002042:	2b00      	cmp	r3, #0
 8002044:	f000 8086 	beq.w	8002154 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2204      	movs	r2, #4
 800204c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a2f      	ldr	r2, [pc, #188]	@ (8002114 <HAL_DMA_Abort_IT+0x1a0>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d04a      	beq.n	80020f0 <HAL_DMA_Abort_IT+0x17c>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a2e      	ldr	r2, [pc, #184]	@ (8002118 <HAL_DMA_Abort_IT+0x1a4>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d045      	beq.n	80020f0 <HAL_DMA_Abort_IT+0x17c>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a2c      	ldr	r2, [pc, #176]	@ (800211c <HAL_DMA_Abort_IT+0x1a8>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d040      	beq.n	80020f0 <HAL_DMA_Abort_IT+0x17c>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a2b      	ldr	r2, [pc, #172]	@ (8002120 <HAL_DMA_Abort_IT+0x1ac>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d03b      	beq.n	80020f0 <HAL_DMA_Abort_IT+0x17c>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a29      	ldr	r2, [pc, #164]	@ (8002124 <HAL_DMA_Abort_IT+0x1b0>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d036      	beq.n	80020f0 <HAL_DMA_Abort_IT+0x17c>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a28      	ldr	r2, [pc, #160]	@ (8002128 <HAL_DMA_Abort_IT+0x1b4>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d031      	beq.n	80020f0 <HAL_DMA_Abort_IT+0x17c>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a26      	ldr	r2, [pc, #152]	@ (800212c <HAL_DMA_Abort_IT+0x1b8>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d02c      	beq.n	80020f0 <HAL_DMA_Abort_IT+0x17c>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a25      	ldr	r2, [pc, #148]	@ (8002130 <HAL_DMA_Abort_IT+0x1bc>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d027      	beq.n	80020f0 <HAL_DMA_Abort_IT+0x17c>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a23      	ldr	r2, [pc, #140]	@ (8002134 <HAL_DMA_Abort_IT+0x1c0>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d022      	beq.n	80020f0 <HAL_DMA_Abort_IT+0x17c>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a22      	ldr	r2, [pc, #136]	@ (8002138 <HAL_DMA_Abort_IT+0x1c4>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d01d      	beq.n	80020f0 <HAL_DMA_Abort_IT+0x17c>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a20      	ldr	r2, [pc, #128]	@ (800213c <HAL_DMA_Abort_IT+0x1c8>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d018      	beq.n	80020f0 <HAL_DMA_Abort_IT+0x17c>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a1f      	ldr	r2, [pc, #124]	@ (8002140 <HAL_DMA_Abort_IT+0x1cc>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d013      	beq.n	80020f0 <HAL_DMA_Abort_IT+0x17c>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a1d      	ldr	r2, [pc, #116]	@ (8002144 <HAL_DMA_Abort_IT+0x1d0>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d00e      	beq.n	80020f0 <HAL_DMA_Abort_IT+0x17c>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a1c      	ldr	r2, [pc, #112]	@ (8002148 <HAL_DMA_Abort_IT+0x1d4>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d009      	beq.n	80020f0 <HAL_DMA_Abort_IT+0x17c>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a1a      	ldr	r2, [pc, #104]	@ (800214c <HAL_DMA_Abort_IT+0x1d8>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d004      	beq.n	80020f0 <HAL_DMA_Abort_IT+0x17c>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a19      	ldr	r2, [pc, #100]	@ (8002150 <HAL_DMA_Abort_IT+0x1dc>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d108      	bne.n	8002102 <HAL_DMA_Abort_IT+0x18e>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f022 0201 	bic.w	r2, r2, #1
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	e178      	b.n	80023f4 <HAL_DMA_Abort_IT+0x480>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f022 0201 	bic.w	r2, r2, #1
 8002110:	601a      	str	r2, [r3, #0]
 8002112:	e16f      	b.n	80023f4 <HAL_DMA_Abort_IT+0x480>
 8002114:	40020010 	.word	0x40020010
 8002118:	40020028 	.word	0x40020028
 800211c:	40020040 	.word	0x40020040
 8002120:	40020058 	.word	0x40020058
 8002124:	40020070 	.word	0x40020070
 8002128:	40020088 	.word	0x40020088
 800212c:	400200a0 	.word	0x400200a0
 8002130:	400200b8 	.word	0x400200b8
 8002134:	40020410 	.word	0x40020410
 8002138:	40020428 	.word	0x40020428
 800213c:	40020440 	.word	0x40020440
 8002140:	40020458 	.word	0x40020458
 8002144:	40020470 	.word	0x40020470
 8002148:	40020488 	.word	0x40020488
 800214c:	400204a0 	.word	0x400204a0
 8002150:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f022 020e 	bic.w	r2, r2, #14
 8002162:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a6c      	ldr	r2, [pc, #432]	@ (800231c <HAL_DMA_Abort_IT+0x3a8>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d04a      	beq.n	8002204 <HAL_DMA_Abort_IT+0x290>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a6b      	ldr	r2, [pc, #428]	@ (8002320 <HAL_DMA_Abort_IT+0x3ac>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d045      	beq.n	8002204 <HAL_DMA_Abort_IT+0x290>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a69      	ldr	r2, [pc, #420]	@ (8002324 <HAL_DMA_Abort_IT+0x3b0>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d040      	beq.n	8002204 <HAL_DMA_Abort_IT+0x290>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a68      	ldr	r2, [pc, #416]	@ (8002328 <HAL_DMA_Abort_IT+0x3b4>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d03b      	beq.n	8002204 <HAL_DMA_Abort_IT+0x290>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a66      	ldr	r2, [pc, #408]	@ (800232c <HAL_DMA_Abort_IT+0x3b8>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d036      	beq.n	8002204 <HAL_DMA_Abort_IT+0x290>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a65      	ldr	r2, [pc, #404]	@ (8002330 <HAL_DMA_Abort_IT+0x3bc>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d031      	beq.n	8002204 <HAL_DMA_Abort_IT+0x290>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a63      	ldr	r2, [pc, #396]	@ (8002334 <HAL_DMA_Abort_IT+0x3c0>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d02c      	beq.n	8002204 <HAL_DMA_Abort_IT+0x290>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a62      	ldr	r2, [pc, #392]	@ (8002338 <HAL_DMA_Abort_IT+0x3c4>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d027      	beq.n	8002204 <HAL_DMA_Abort_IT+0x290>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a60      	ldr	r2, [pc, #384]	@ (800233c <HAL_DMA_Abort_IT+0x3c8>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d022      	beq.n	8002204 <HAL_DMA_Abort_IT+0x290>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a5f      	ldr	r2, [pc, #380]	@ (8002340 <HAL_DMA_Abort_IT+0x3cc>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d01d      	beq.n	8002204 <HAL_DMA_Abort_IT+0x290>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a5d      	ldr	r2, [pc, #372]	@ (8002344 <HAL_DMA_Abort_IT+0x3d0>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d018      	beq.n	8002204 <HAL_DMA_Abort_IT+0x290>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a5c      	ldr	r2, [pc, #368]	@ (8002348 <HAL_DMA_Abort_IT+0x3d4>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d013      	beq.n	8002204 <HAL_DMA_Abort_IT+0x290>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a5a      	ldr	r2, [pc, #360]	@ (800234c <HAL_DMA_Abort_IT+0x3d8>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d00e      	beq.n	8002204 <HAL_DMA_Abort_IT+0x290>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a59      	ldr	r2, [pc, #356]	@ (8002350 <HAL_DMA_Abort_IT+0x3dc>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d009      	beq.n	8002204 <HAL_DMA_Abort_IT+0x290>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a57      	ldr	r2, [pc, #348]	@ (8002354 <HAL_DMA_Abort_IT+0x3e0>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d004      	beq.n	8002204 <HAL_DMA_Abort_IT+0x290>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a56      	ldr	r2, [pc, #344]	@ (8002358 <HAL_DMA_Abort_IT+0x3e4>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d108      	bne.n	8002216 <HAL_DMA_Abort_IT+0x2a2>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f022 0201 	bic.w	r2, r2, #1
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	e007      	b.n	8002226 <HAL_DMA_Abort_IT+0x2b2>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f022 0201 	bic.w	r2, r2, #1
 8002224:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a3c      	ldr	r2, [pc, #240]	@ (800231c <HAL_DMA_Abort_IT+0x3a8>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d072      	beq.n	8002316 <HAL_DMA_Abort_IT+0x3a2>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a3a      	ldr	r2, [pc, #232]	@ (8002320 <HAL_DMA_Abort_IT+0x3ac>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d06d      	beq.n	8002316 <HAL_DMA_Abort_IT+0x3a2>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a39      	ldr	r2, [pc, #228]	@ (8002324 <HAL_DMA_Abort_IT+0x3b0>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d068      	beq.n	8002316 <HAL_DMA_Abort_IT+0x3a2>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a37      	ldr	r2, [pc, #220]	@ (8002328 <HAL_DMA_Abort_IT+0x3b4>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d063      	beq.n	8002316 <HAL_DMA_Abort_IT+0x3a2>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a36      	ldr	r2, [pc, #216]	@ (800232c <HAL_DMA_Abort_IT+0x3b8>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d05e      	beq.n	8002316 <HAL_DMA_Abort_IT+0x3a2>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a34      	ldr	r2, [pc, #208]	@ (8002330 <HAL_DMA_Abort_IT+0x3bc>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d059      	beq.n	8002316 <HAL_DMA_Abort_IT+0x3a2>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a33      	ldr	r2, [pc, #204]	@ (8002334 <HAL_DMA_Abort_IT+0x3c0>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d054      	beq.n	8002316 <HAL_DMA_Abort_IT+0x3a2>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a31      	ldr	r2, [pc, #196]	@ (8002338 <HAL_DMA_Abort_IT+0x3c4>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d04f      	beq.n	8002316 <HAL_DMA_Abort_IT+0x3a2>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a30      	ldr	r2, [pc, #192]	@ (800233c <HAL_DMA_Abort_IT+0x3c8>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d04a      	beq.n	8002316 <HAL_DMA_Abort_IT+0x3a2>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a2e      	ldr	r2, [pc, #184]	@ (8002340 <HAL_DMA_Abort_IT+0x3cc>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d045      	beq.n	8002316 <HAL_DMA_Abort_IT+0x3a2>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a2d      	ldr	r2, [pc, #180]	@ (8002344 <HAL_DMA_Abort_IT+0x3d0>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d040      	beq.n	8002316 <HAL_DMA_Abort_IT+0x3a2>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a2b      	ldr	r2, [pc, #172]	@ (8002348 <HAL_DMA_Abort_IT+0x3d4>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d03b      	beq.n	8002316 <HAL_DMA_Abort_IT+0x3a2>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a2a      	ldr	r2, [pc, #168]	@ (800234c <HAL_DMA_Abort_IT+0x3d8>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d036      	beq.n	8002316 <HAL_DMA_Abort_IT+0x3a2>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a28      	ldr	r2, [pc, #160]	@ (8002350 <HAL_DMA_Abort_IT+0x3dc>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d031      	beq.n	8002316 <HAL_DMA_Abort_IT+0x3a2>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a27      	ldr	r2, [pc, #156]	@ (8002354 <HAL_DMA_Abort_IT+0x3e0>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d02c      	beq.n	8002316 <HAL_DMA_Abort_IT+0x3a2>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a25      	ldr	r2, [pc, #148]	@ (8002358 <HAL_DMA_Abort_IT+0x3e4>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d027      	beq.n	8002316 <HAL_DMA_Abort_IT+0x3a2>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a24      	ldr	r2, [pc, #144]	@ (800235c <HAL_DMA_Abort_IT+0x3e8>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d022      	beq.n	8002316 <HAL_DMA_Abort_IT+0x3a2>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a22      	ldr	r2, [pc, #136]	@ (8002360 <HAL_DMA_Abort_IT+0x3ec>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d01d      	beq.n	8002316 <HAL_DMA_Abort_IT+0x3a2>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a21      	ldr	r2, [pc, #132]	@ (8002364 <HAL_DMA_Abort_IT+0x3f0>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d018      	beq.n	8002316 <HAL_DMA_Abort_IT+0x3a2>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a1f      	ldr	r2, [pc, #124]	@ (8002368 <HAL_DMA_Abort_IT+0x3f4>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d013      	beq.n	8002316 <HAL_DMA_Abort_IT+0x3a2>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a1e      	ldr	r2, [pc, #120]	@ (800236c <HAL_DMA_Abort_IT+0x3f8>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d00e      	beq.n	8002316 <HAL_DMA_Abort_IT+0x3a2>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a1c      	ldr	r2, [pc, #112]	@ (8002370 <HAL_DMA_Abort_IT+0x3fc>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d009      	beq.n	8002316 <HAL_DMA_Abort_IT+0x3a2>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a1b      	ldr	r2, [pc, #108]	@ (8002374 <HAL_DMA_Abort_IT+0x400>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d004      	beq.n	8002316 <HAL_DMA_Abort_IT+0x3a2>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a19      	ldr	r2, [pc, #100]	@ (8002378 <HAL_DMA_Abort_IT+0x404>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d132      	bne.n	800237c <HAL_DMA_Abort_IT+0x408>
 8002316:	2301      	movs	r3, #1
 8002318:	e031      	b.n	800237e <HAL_DMA_Abort_IT+0x40a>
 800231a:	bf00      	nop
 800231c:	40020010 	.word	0x40020010
 8002320:	40020028 	.word	0x40020028
 8002324:	40020040 	.word	0x40020040
 8002328:	40020058 	.word	0x40020058
 800232c:	40020070 	.word	0x40020070
 8002330:	40020088 	.word	0x40020088
 8002334:	400200a0 	.word	0x400200a0
 8002338:	400200b8 	.word	0x400200b8
 800233c:	40020410 	.word	0x40020410
 8002340:	40020428 	.word	0x40020428
 8002344:	40020440 	.word	0x40020440
 8002348:	40020458 	.word	0x40020458
 800234c:	40020470 	.word	0x40020470
 8002350:	40020488 	.word	0x40020488
 8002354:	400204a0 	.word	0x400204a0
 8002358:	400204b8 	.word	0x400204b8
 800235c:	58025408 	.word	0x58025408
 8002360:	5802541c 	.word	0x5802541c
 8002364:	58025430 	.word	0x58025430
 8002368:	58025444 	.word	0x58025444
 800236c:	58025458 	.word	0x58025458
 8002370:	5802546c 	.word	0x5802546c
 8002374:	58025480 	.word	0x58025480
 8002378:	58025494 	.word	0x58025494
 800237c:	2300      	movs	r3, #0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d028      	beq.n	80023d4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800238c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002390:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002396:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800239c:	f003 031f 	and.w	r3, r3, #31
 80023a0:	2201      	movs	r2, #1
 80023a2:	409a      	lsls	r2, r3
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80023b0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d00c      	beq.n	80023d4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80023c8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80023d2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d003      	beq.n	80023f4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop

08002400 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8002400:	b480      	push	{r7}
 8002402:	b089      	sub	sp, #36	@ 0x24
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800240a:	2300      	movs	r3, #0
 800240c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800240e:	4b89      	ldr	r3, [pc, #548]	@ (8002634 <HAL_GPIO_Init+0x234>)
 8002410:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002412:	e194      	b.n	800273e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	2101      	movs	r1, #1
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	fa01 f303 	lsl.w	r3, r1, r3
 8002420:	4013      	ands	r3, r2
 8002422:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	2b00      	cmp	r3, #0
 8002428:	f000 8186 	beq.w	8002738 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f003 0303 	and.w	r3, r3, #3
 8002434:	2b01      	cmp	r3, #1
 8002436:	d005      	beq.n	8002444 <HAL_GPIO_Init+0x44>
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f003 0303 	and.w	r3, r3, #3
 8002440:	2b02      	cmp	r3, #2
 8002442:	d130      	bne.n	80024a6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	2203      	movs	r2, #3
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	43db      	mvns	r3, r3
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	4013      	ands	r3, r2
 800245a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	68da      	ldr	r2, [r3, #12]
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	4313      	orrs	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800247a:	2201      	movs	r2, #1
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	43db      	mvns	r3, r3
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	4013      	ands	r3, r2
 8002488:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	091b      	lsrs	r3, r3, #4
 8002490:	f003 0201 	and.w	r2, r3, #1
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	4313      	orrs	r3, r2
 800249e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f003 0303 	and.w	r3, r3, #3
 80024ae:	2b03      	cmp	r3, #3
 80024b0:	d017      	beq.n	80024e2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	2203      	movs	r2, #3
 80024be:	fa02 f303 	lsl.w	r3, r2, r3
 80024c2:	43db      	mvns	r3, r3
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	4013      	ands	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	689a      	ldr	r2, [r3, #8]
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	fa02 f303 	lsl.w	r3, r2, r3
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	4313      	orrs	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f003 0303 	and.w	r3, r3, #3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d123      	bne.n	8002536 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	08da      	lsrs	r2, r3, #3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	3208      	adds	r2, #8
 80024f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	f003 0307 	and.w	r3, r3, #7
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	220f      	movs	r2, #15
 8002506:	fa02 f303 	lsl.w	r3, r2, r3
 800250a:	43db      	mvns	r3, r3
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	4013      	ands	r3, r2
 8002510:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	691a      	ldr	r2, [r3, #16]
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	f003 0307 	and.w	r3, r3, #7
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	fa02 f303 	lsl.w	r3, r2, r3
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	4313      	orrs	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	08da      	lsrs	r2, r3, #3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	3208      	adds	r2, #8
 8002530:	69b9      	ldr	r1, [r7, #24]
 8002532:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	2203      	movs	r2, #3
 8002542:	fa02 f303 	lsl.w	r3, r2, r3
 8002546:	43db      	mvns	r3, r3
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	4013      	ands	r3, r2
 800254c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f003 0203 	and.w	r2, r3, #3
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	fa02 f303 	lsl.w	r3, r2, r3
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	4313      	orrs	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002572:	2b00      	cmp	r3, #0
 8002574:	f000 80e0 	beq.w	8002738 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002578:	4b2f      	ldr	r3, [pc, #188]	@ (8002638 <HAL_GPIO_Init+0x238>)
 800257a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800257e:	4a2e      	ldr	r2, [pc, #184]	@ (8002638 <HAL_GPIO_Init+0x238>)
 8002580:	f043 0302 	orr.w	r3, r3, #2
 8002584:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002588:	4b2b      	ldr	r3, [pc, #172]	@ (8002638 <HAL_GPIO_Init+0x238>)
 800258a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	60fb      	str	r3, [r7, #12]
 8002594:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002596:	4a29      	ldr	r2, [pc, #164]	@ (800263c <HAL_GPIO_Init+0x23c>)
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	089b      	lsrs	r3, r3, #2
 800259c:	3302      	adds	r3, #2
 800259e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	f003 0303 	and.w	r3, r3, #3
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	220f      	movs	r2, #15
 80025ae:	fa02 f303 	lsl.w	r3, r2, r3
 80025b2:	43db      	mvns	r3, r3
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	4013      	ands	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a20      	ldr	r2, [pc, #128]	@ (8002640 <HAL_GPIO_Init+0x240>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d052      	beq.n	8002668 <HAL_GPIO_Init+0x268>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a1f      	ldr	r2, [pc, #124]	@ (8002644 <HAL_GPIO_Init+0x244>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d031      	beq.n	800262e <HAL_GPIO_Init+0x22e>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a1e      	ldr	r2, [pc, #120]	@ (8002648 <HAL_GPIO_Init+0x248>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d02b      	beq.n	800262a <HAL_GPIO_Init+0x22a>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a1d      	ldr	r2, [pc, #116]	@ (800264c <HAL_GPIO_Init+0x24c>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d025      	beq.n	8002626 <HAL_GPIO_Init+0x226>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a1c      	ldr	r2, [pc, #112]	@ (8002650 <HAL_GPIO_Init+0x250>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d01f      	beq.n	8002622 <HAL_GPIO_Init+0x222>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a1b      	ldr	r2, [pc, #108]	@ (8002654 <HAL_GPIO_Init+0x254>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d019      	beq.n	800261e <HAL_GPIO_Init+0x21e>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a1a      	ldr	r2, [pc, #104]	@ (8002658 <HAL_GPIO_Init+0x258>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d013      	beq.n	800261a <HAL_GPIO_Init+0x21a>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a19      	ldr	r2, [pc, #100]	@ (800265c <HAL_GPIO_Init+0x25c>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d00d      	beq.n	8002616 <HAL_GPIO_Init+0x216>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a18      	ldr	r2, [pc, #96]	@ (8002660 <HAL_GPIO_Init+0x260>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d007      	beq.n	8002612 <HAL_GPIO_Init+0x212>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a17      	ldr	r2, [pc, #92]	@ (8002664 <HAL_GPIO_Init+0x264>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d101      	bne.n	800260e <HAL_GPIO_Init+0x20e>
 800260a:	2309      	movs	r3, #9
 800260c:	e02d      	b.n	800266a <HAL_GPIO_Init+0x26a>
 800260e:	230a      	movs	r3, #10
 8002610:	e02b      	b.n	800266a <HAL_GPIO_Init+0x26a>
 8002612:	2308      	movs	r3, #8
 8002614:	e029      	b.n	800266a <HAL_GPIO_Init+0x26a>
 8002616:	2307      	movs	r3, #7
 8002618:	e027      	b.n	800266a <HAL_GPIO_Init+0x26a>
 800261a:	2306      	movs	r3, #6
 800261c:	e025      	b.n	800266a <HAL_GPIO_Init+0x26a>
 800261e:	2305      	movs	r3, #5
 8002620:	e023      	b.n	800266a <HAL_GPIO_Init+0x26a>
 8002622:	2304      	movs	r3, #4
 8002624:	e021      	b.n	800266a <HAL_GPIO_Init+0x26a>
 8002626:	2303      	movs	r3, #3
 8002628:	e01f      	b.n	800266a <HAL_GPIO_Init+0x26a>
 800262a:	2302      	movs	r3, #2
 800262c:	e01d      	b.n	800266a <HAL_GPIO_Init+0x26a>
 800262e:	2301      	movs	r3, #1
 8002630:	e01b      	b.n	800266a <HAL_GPIO_Init+0x26a>
 8002632:	bf00      	nop
 8002634:	58000080 	.word	0x58000080
 8002638:	58024400 	.word	0x58024400
 800263c:	58000400 	.word	0x58000400
 8002640:	58020000 	.word	0x58020000
 8002644:	58020400 	.word	0x58020400
 8002648:	58020800 	.word	0x58020800
 800264c:	58020c00 	.word	0x58020c00
 8002650:	58021000 	.word	0x58021000
 8002654:	58021400 	.word	0x58021400
 8002658:	58021800 	.word	0x58021800
 800265c:	58021c00 	.word	0x58021c00
 8002660:	58022000 	.word	0x58022000
 8002664:	58022400 	.word	0x58022400
 8002668:	2300      	movs	r3, #0
 800266a:	69fa      	ldr	r2, [r7, #28]
 800266c:	f002 0203 	and.w	r2, r2, #3
 8002670:	0092      	lsls	r2, r2, #2
 8002672:	4093      	lsls	r3, r2
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	4313      	orrs	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800267a:	4938      	ldr	r1, [pc, #224]	@ (800275c <HAL_GPIO_Init+0x35c>)
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	089b      	lsrs	r3, r3, #2
 8002680:	3302      	adds	r3, #2
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002688:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	43db      	mvns	r3, r3
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	4013      	ands	r3, r2
 8002698:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d003      	beq.n	80026ae <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80026ae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80026b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	43db      	mvns	r3, r3
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	4013      	ands	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d003      	beq.n	80026dc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	4313      	orrs	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80026dc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	43db      	mvns	r3, r3
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	4013      	ands	r3, r2
 80026f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d003      	beq.n	8002708 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	4313      	orrs	r3, r2
 8002706:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	43db      	mvns	r3, r3
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	4013      	ands	r3, r2
 800271c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d003      	beq.n	8002732 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	4313      	orrs	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	3301      	adds	r3, #1
 800273c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	fa22 f303 	lsr.w	r3, r2, r3
 8002748:	2b00      	cmp	r3, #0
 800274a:	f47f ae63 	bne.w	8002414 <HAL_GPIO_Init+0x14>
  }
}
 800274e:	bf00      	nop
 8002750:	bf00      	nop
 8002752:	3724      	adds	r7, #36	@ 0x24
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr
 800275c:	58000400 	.word	0x58000400

08002760 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	460b      	mov	r3, r1
 800276a:	807b      	strh	r3, [r7, #2]
 800276c:	4613      	mov	r3, r2
 800276e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002770:	787b      	ldrb	r3, [r7, #1]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d003      	beq.n	800277e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002776:	887a      	ldrh	r2, [r7, #2]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800277c:	e003      	b.n	8002786 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800277e:	887b      	ldrh	r3, [r7, #2]
 8002780:	041a      	lsls	r2, r3, #16
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	619a      	str	r2, [r3, #24]
}
 8002786:	bf00      	nop
 8002788:	370c      	adds	r7, #12
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr

08002792 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002792:	b480      	push	{r7}
 8002794:	b085      	sub	sp, #20
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
 800279a:	460b      	mov	r3, r1
 800279c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80027a4:	887a      	ldrh	r2, [r7, #2]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	4013      	ands	r3, r2
 80027aa:	041a      	lsls	r2, r3, #16
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	43d9      	mvns	r1, r3
 80027b0:	887b      	ldrh	r3, [r7, #2]
 80027b2:	400b      	ands	r3, r1
 80027b4:	431a      	orrs	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	619a      	str	r2, [r3, #24]
}
 80027ba:	bf00      	nop
 80027bc:	3714      	adds	r7, #20
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr

080027c6 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b082      	sub	sp, #8
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	4603      	mov	r3, r0
 80027ce:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80027d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027d4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80027d8:	88fb      	ldrh	r3, [r7, #6]
 80027da:	4013      	ands	r3, r2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d008      	beq.n	80027f2 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027e0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80027e4:	88fb      	ldrh	r3, [r7, #6]
 80027e6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80027ea:	88fb      	ldrh	r3, [r7, #6]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f000 f804 	bl	80027fa <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80027f2:	bf00      	nop
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80027fa:	b480      	push	{r7}
 80027fc:	b083      	sub	sp, #12
 80027fe:	af00      	add	r7, sp, #0
 8002800:	4603      	mov	r3, r0
 8002802:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002804:	bf00      	nop
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8002814:	4b05      	ldr	r3, [pc, #20]	@ (800282c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a04      	ldr	r2, [pc, #16]	@ (800282c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800281a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800281e:	6013      	str	r3, [r2, #0]
}
 8002820:	bf00      	nop
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	58024800 	.word	0x58024800

08002830 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002838:	4b19      	ldr	r3, [pc, #100]	@ (80028a0 <HAL_PWREx_ConfigSupply+0x70>)
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	f003 0304 	and.w	r3, r3, #4
 8002840:	2b04      	cmp	r3, #4
 8002842:	d00a      	beq.n	800285a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002844:	4b16      	ldr	r3, [pc, #88]	@ (80028a0 <HAL_PWREx_ConfigSupply+0x70>)
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	f003 0307 	and.w	r3, r3, #7
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	429a      	cmp	r2, r3
 8002850:	d001      	beq.n	8002856 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e01f      	b.n	8002896 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002856:	2300      	movs	r3, #0
 8002858:	e01d      	b.n	8002896 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800285a:	4b11      	ldr	r3, [pc, #68]	@ (80028a0 <HAL_PWREx_ConfigSupply+0x70>)
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	f023 0207 	bic.w	r2, r3, #7
 8002862:	490f      	ldr	r1, [pc, #60]	@ (80028a0 <HAL_PWREx_ConfigSupply+0x70>)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4313      	orrs	r3, r2
 8002868:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800286a:	f7fe fea1 	bl	80015b0 <HAL_GetTick>
 800286e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002870:	e009      	b.n	8002886 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002872:	f7fe fe9d 	bl	80015b0 <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002880:	d901      	bls.n	8002886 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e007      	b.n	8002896 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002886:	4b06      	ldr	r3, [pc, #24]	@ (80028a0 <HAL_PWREx_ConfigSupply+0x70>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800288e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002892:	d1ee      	bne.n	8002872 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3710      	adds	r7, #16
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	58024800 	.word	0x58024800

080028a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b08c      	sub	sp, #48	@ 0x30
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d102      	bne.n	80028b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	f000 bc48 	b.w	8003148 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0301 	and.w	r3, r3, #1
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f000 8088 	beq.w	80029d6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028c6:	4b99      	ldr	r3, [pc, #612]	@ (8002b2c <HAL_RCC_OscConfig+0x288>)
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80028ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80028d0:	4b96      	ldr	r3, [pc, #600]	@ (8002b2c <HAL_RCC_OscConfig+0x288>)
 80028d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80028d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028d8:	2b10      	cmp	r3, #16
 80028da:	d007      	beq.n	80028ec <HAL_RCC_OscConfig+0x48>
 80028dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028de:	2b18      	cmp	r3, #24
 80028e0:	d111      	bne.n	8002906 <HAL_RCC_OscConfig+0x62>
 80028e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028e4:	f003 0303 	and.w	r3, r3, #3
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d10c      	bne.n	8002906 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028ec:	4b8f      	ldr	r3, [pc, #572]	@ (8002b2c <HAL_RCC_OscConfig+0x288>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d06d      	beq.n	80029d4 <HAL_RCC_OscConfig+0x130>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d169      	bne.n	80029d4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	f000 bc21 	b.w	8003148 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800290e:	d106      	bne.n	800291e <HAL_RCC_OscConfig+0x7a>
 8002910:	4b86      	ldr	r3, [pc, #536]	@ (8002b2c <HAL_RCC_OscConfig+0x288>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a85      	ldr	r2, [pc, #532]	@ (8002b2c <HAL_RCC_OscConfig+0x288>)
 8002916:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800291a:	6013      	str	r3, [r2, #0]
 800291c:	e02e      	b.n	800297c <HAL_RCC_OscConfig+0xd8>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d10c      	bne.n	8002940 <HAL_RCC_OscConfig+0x9c>
 8002926:	4b81      	ldr	r3, [pc, #516]	@ (8002b2c <HAL_RCC_OscConfig+0x288>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a80      	ldr	r2, [pc, #512]	@ (8002b2c <HAL_RCC_OscConfig+0x288>)
 800292c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002930:	6013      	str	r3, [r2, #0]
 8002932:	4b7e      	ldr	r3, [pc, #504]	@ (8002b2c <HAL_RCC_OscConfig+0x288>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a7d      	ldr	r2, [pc, #500]	@ (8002b2c <HAL_RCC_OscConfig+0x288>)
 8002938:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800293c:	6013      	str	r3, [r2, #0]
 800293e:	e01d      	b.n	800297c <HAL_RCC_OscConfig+0xd8>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002948:	d10c      	bne.n	8002964 <HAL_RCC_OscConfig+0xc0>
 800294a:	4b78      	ldr	r3, [pc, #480]	@ (8002b2c <HAL_RCC_OscConfig+0x288>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a77      	ldr	r2, [pc, #476]	@ (8002b2c <HAL_RCC_OscConfig+0x288>)
 8002950:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002954:	6013      	str	r3, [r2, #0]
 8002956:	4b75      	ldr	r3, [pc, #468]	@ (8002b2c <HAL_RCC_OscConfig+0x288>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a74      	ldr	r2, [pc, #464]	@ (8002b2c <HAL_RCC_OscConfig+0x288>)
 800295c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002960:	6013      	str	r3, [r2, #0]
 8002962:	e00b      	b.n	800297c <HAL_RCC_OscConfig+0xd8>
 8002964:	4b71      	ldr	r3, [pc, #452]	@ (8002b2c <HAL_RCC_OscConfig+0x288>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a70      	ldr	r2, [pc, #448]	@ (8002b2c <HAL_RCC_OscConfig+0x288>)
 800296a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800296e:	6013      	str	r3, [r2, #0]
 8002970:	4b6e      	ldr	r3, [pc, #440]	@ (8002b2c <HAL_RCC_OscConfig+0x288>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a6d      	ldr	r2, [pc, #436]	@ (8002b2c <HAL_RCC_OscConfig+0x288>)
 8002976:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800297a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d013      	beq.n	80029ac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002984:	f7fe fe14 	bl	80015b0 <HAL_GetTick>
 8002988:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800298a:	e008      	b.n	800299e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800298c:	f7fe fe10 	bl	80015b0 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	2b64      	cmp	r3, #100	@ 0x64
 8002998:	d901      	bls.n	800299e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e3d4      	b.n	8003148 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800299e:	4b63      	ldr	r3, [pc, #396]	@ (8002b2c <HAL_RCC_OscConfig+0x288>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d0f0      	beq.n	800298c <HAL_RCC_OscConfig+0xe8>
 80029aa:	e014      	b.n	80029d6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ac:	f7fe fe00 	bl	80015b0 <HAL_GetTick>
 80029b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80029b2:	e008      	b.n	80029c6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029b4:	f7fe fdfc 	bl	80015b0 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b64      	cmp	r3, #100	@ 0x64
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e3c0      	b.n	8003148 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80029c6:	4b59      	ldr	r3, [pc, #356]	@ (8002b2c <HAL_RCC_OscConfig+0x288>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d1f0      	bne.n	80029b4 <HAL_RCC_OscConfig+0x110>
 80029d2:	e000      	b.n	80029d6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	f000 80ca 	beq.w	8002b78 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029e4:	4b51      	ldr	r3, [pc, #324]	@ (8002b2c <HAL_RCC_OscConfig+0x288>)
 80029e6:	691b      	ldr	r3, [r3, #16]
 80029e8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80029ec:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80029ee:	4b4f      	ldr	r3, [pc, #316]	@ (8002b2c <HAL_RCC_OscConfig+0x288>)
 80029f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029f2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80029f4:	6a3b      	ldr	r3, [r7, #32]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d007      	beq.n	8002a0a <HAL_RCC_OscConfig+0x166>
 80029fa:	6a3b      	ldr	r3, [r7, #32]
 80029fc:	2b18      	cmp	r3, #24
 80029fe:	d156      	bne.n	8002aae <HAL_RCC_OscConfig+0x20a>
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	f003 0303 	and.w	r3, r3, #3
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d151      	bne.n	8002aae <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a0a:	4b48      	ldr	r3, [pc, #288]	@ (8002b2c <HAL_RCC_OscConfig+0x288>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0304 	and.w	r3, r3, #4
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d005      	beq.n	8002a22 <HAL_RCC_OscConfig+0x17e>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e392      	b.n	8003148 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002a22:	4b42      	ldr	r3, [pc, #264]	@ (8002b2c <HAL_RCC_OscConfig+0x288>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f023 0219 	bic.w	r2, r3, #25
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	493f      	ldr	r1, [pc, #252]	@ (8002b2c <HAL_RCC_OscConfig+0x288>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a34:	f7fe fdbc 	bl	80015b0 <HAL_GetTick>
 8002a38:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a3c:	f7fe fdb8 	bl	80015b0 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e37c      	b.n	8003148 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a4e:	4b37      	ldr	r3, [pc, #220]	@ (8002b2c <HAL_RCC_OscConfig+0x288>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0304 	and.w	r3, r3, #4
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d0f0      	beq.n	8002a3c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a5a:	f7fe fdd9 	bl	8001610 <HAL_GetREVID>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d817      	bhi.n	8002a98 <HAL_RCC_OscConfig+0x1f4>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	691b      	ldr	r3, [r3, #16]
 8002a6c:	2b40      	cmp	r3, #64	@ 0x40
 8002a6e:	d108      	bne.n	8002a82 <HAL_RCC_OscConfig+0x1de>
 8002a70:	4b2e      	ldr	r3, [pc, #184]	@ (8002b2c <HAL_RCC_OscConfig+0x288>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002a78:	4a2c      	ldr	r2, [pc, #176]	@ (8002b2c <HAL_RCC_OscConfig+0x288>)
 8002a7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a7e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a80:	e07a      	b.n	8002b78 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a82:	4b2a      	ldr	r3, [pc, #168]	@ (8002b2c <HAL_RCC_OscConfig+0x288>)
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	031b      	lsls	r3, r3, #12
 8002a90:	4926      	ldr	r1, [pc, #152]	@ (8002b2c <HAL_RCC_OscConfig+0x288>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a96:	e06f      	b.n	8002b78 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a98:	4b24      	ldr	r3, [pc, #144]	@ (8002b2c <HAL_RCC_OscConfig+0x288>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	691b      	ldr	r3, [r3, #16]
 8002aa4:	061b      	lsls	r3, r3, #24
 8002aa6:	4921      	ldr	r1, [pc, #132]	@ (8002b2c <HAL_RCC_OscConfig+0x288>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002aac:	e064      	b.n	8002b78 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d047      	beq.n	8002b46 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002ab6:	4b1d      	ldr	r3, [pc, #116]	@ (8002b2c <HAL_RCC_OscConfig+0x288>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f023 0219 	bic.w	r2, r3, #25
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	491a      	ldr	r1, [pc, #104]	@ (8002b2c <HAL_RCC_OscConfig+0x288>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac8:	f7fe fd72 	bl	80015b0 <HAL_GetTick>
 8002acc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ace:	e008      	b.n	8002ae2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ad0:	f7fe fd6e 	bl	80015b0 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e332      	b.n	8003148 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ae2:	4b12      	ldr	r3, [pc, #72]	@ (8002b2c <HAL_RCC_OscConfig+0x288>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0304 	and.w	r3, r3, #4
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d0f0      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aee:	f7fe fd8f 	bl	8001610 <HAL_GetREVID>
 8002af2:	4603      	mov	r3, r0
 8002af4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d819      	bhi.n	8002b30 <HAL_RCC_OscConfig+0x28c>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	691b      	ldr	r3, [r3, #16]
 8002b00:	2b40      	cmp	r3, #64	@ 0x40
 8002b02:	d108      	bne.n	8002b16 <HAL_RCC_OscConfig+0x272>
 8002b04:	4b09      	ldr	r3, [pc, #36]	@ (8002b2c <HAL_RCC_OscConfig+0x288>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002b0c:	4a07      	ldr	r2, [pc, #28]	@ (8002b2c <HAL_RCC_OscConfig+0x288>)
 8002b0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b12:	6053      	str	r3, [r2, #4]
 8002b14:	e030      	b.n	8002b78 <HAL_RCC_OscConfig+0x2d4>
 8002b16:	4b05      	ldr	r3, [pc, #20]	@ (8002b2c <HAL_RCC_OscConfig+0x288>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	031b      	lsls	r3, r3, #12
 8002b24:	4901      	ldr	r1, [pc, #4]	@ (8002b2c <HAL_RCC_OscConfig+0x288>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	604b      	str	r3, [r1, #4]
 8002b2a:	e025      	b.n	8002b78 <HAL_RCC_OscConfig+0x2d4>
 8002b2c:	58024400 	.word	0x58024400
 8002b30:	4b9a      	ldr	r3, [pc, #616]	@ (8002d9c <HAL_RCC_OscConfig+0x4f8>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	691b      	ldr	r3, [r3, #16]
 8002b3c:	061b      	lsls	r3, r3, #24
 8002b3e:	4997      	ldr	r1, [pc, #604]	@ (8002d9c <HAL_RCC_OscConfig+0x4f8>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	604b      	str	r3, [r1, #4]
 8002b44:	e018      	b.n	8002b78 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b46:	4b95      	ldr	r3, [pc, #596]	@ (8002d9c <HAL_RCC_OscConfig+0x4f8>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a94      	ldr	r2, [pc, #592]	@ (8002d9c <HAL_RCC_OscConfig+0x4f8>)
 8002b4c:	f023 0301 	bic.w	r3, r3, #1
 8002b50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b52:	f7fe fd2d 	bl	80015b0 <HAL_GetTick>
 8002b56:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002b58:	e008      	b.n	8002b6c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b5a:	f7fe fd29 	bl	80015b0 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d901      	bls.n	8002b6c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e2ed      	b.n	8003148 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002b6c:	4b8b      	ldr	r3, [pc, #556]	@ (8002d9c <HAL_RCC_OscConfig+0x4f8>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0304 	and.w	r3, r3, #4
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d1f0      	bne.n	8002b5a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0310 	and.w	r3, r3, #16
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	f000 80a9 	beq.w	8002cd8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b86:	4b85      	ldr	r3, [pc, #532]	@ (8002d9c <HAL_RCC_OscConfig+0x4f8>)
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002b8e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002b90:	4b82      	ldr	r3, [pc, #520]	@ (8002d9c <HAL_RCC_OscConfig+0x4f8>)
 8002b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b94:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	2b08      	cmp	r3, #8
 8002b9a:	d007      	beq.n	8002bac <HAL_RCC_OscConfig+0x308>
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	2b18      	cmp	r3, #24
 8002ba0:	d13a      	bne.n	8002c18 <HAL_RCC_OscConfig+0x374>
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	f003 0303 	and.w	r3, r3, #3
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d135      	bne.n	8002c18 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002bac:	4b7b      	ldr	r3, [pc, #492]	@ (8002d9c <HAL_RCC_OscConfig+0x4f8>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d005      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x320>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	69db      	ldr	r3, [r3, #28]
 8002bbc:	2b80      	cmp	r3, #128	@ 0x80
 8002bbe:	d001      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e2c1      	b.n	8003148 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002bc4:	f7fe fd24 	bl	8001610 <HAL_GetREVID>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d817      	bhi.n	8002c02 <HAL_RCC_OscConfig+0x35e>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a1b      	ldr	r3, [r3, #32]
 8002bd6:	2b20      	cmp	r3, #32
 8002bd8:	d108      	bne.n	8002bec <HAL_RCC_OscConfig+0x348>
 8002bda:	4b70      	ldr	r3, [pc, #448]	@ (8002d9c <HAL_RCC_OscConfig+0x4f8>)
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002be2:	4a6e      	ldr	r2, [pc, #440]	@ (8002d9c <HAL_RCC_OscConfig+0x4f8>)
 8002be4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002be8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002bea:	e075      	b.n	8002cd8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002bec:	4b6b      	ldr	r3, [pc, #428]	@ (8002d9c <HAL_RCC_OscConfig+0x4f8>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a1b      	ldr	r3, [r3, #32]
 8002bf8:	069b      	lsls	r3, r3, #26
 8002bfa:	4968      	ldr	r1, [pc, #416]	@ (8002d9c <HAL_RCC_OscConfig+0x4f8>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c00:	e06a      	b.n	8002cd8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c02:	4b66      	ldr	r3, [pc, #408]	@ (8002d9c <HAL_RCC_OscConfig+0x4f8>)
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a1b      	ldr	r3, [r3, #32]
 8002c0e:	061b      	lsls	r3, r3, #24
 8002c10:	4962      	ldr	r1, [pc, #392]	@ (8002d9c <HAL_RCC_OscConfig+0x4f8>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c16:	e05f      	b.n	8002cd8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	69db      	ldr	r3, [r3, #28]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d042      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002c20:	4b5e      	ldr	r3, [pc, #376]	@ (8002d9c <HAL_RCC_OscConfig+0x4f8>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a5d      	ldr	r2, [pc, #372]	@ (8002d9c <HAL_RCC_OscConfig+0x4f8>)
 8002c26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c2c:	f7fe fcc0 	bl	80015b0 <HAL_GetTick>
 8002c30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c32:	e008      	b.n	8002c46 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002c34:	f7fe fcbc 	bl	80015b0 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e280      	b.n	8003148 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c46:	4b55      	ldr	r3, [pc, #340]	@ (8002d9c <HAL_RCC_OscConfig+0x4f8>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d0f0      	beq.n	8002c34 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c52:	f7fe fcdd 	bl	8001610 <HAL_GetREVID>
 8002c56:	4603      	mov	r3, r0
 8002c58:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d817      	bhi.n	8002c90 <HAL_RCC_OscConfig+0x3ec>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a1b      	ldr	r3, [r3, #32]
 8002c64:	2b20      	cmp	r3, #32
 8002c66:	d108      	bne.n	8002c7a <HAL_RCC_OscConfig+0x3d6>
 8002c68:	4b4c      	ldr	r3, [pc, #304]	@ (8002d9c <HAL_RCC_OscConfig+0x4f8>)
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002c70:	4a4a      	ldr	r2, [pc, #296]	@ (8002d9c <HAL_RCC_OscConfig+0x4f8>)
 8002c72:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002c76:	6053      	str	r3, [r2, #4]
 8002c78:	e02e      	b.n	8002cd8 <HAL_RCC_OscConfig+0x434>
 8002c7a:	4b48      	ldr	r3, [pc, #288]	@ (8002d9c <HAL_RCC_OscConfig+0x4f8>)
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a1b      	ldr	r3, [r3, #32]
 8002c86:	069b      	lsls	r3, r3, #26
 8002c88:	4944      	ldr	r1, [pc, #272]	@ (8002d9c <HAL_RCC_OscConfig+0x4f8>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	604b      	str	r3, [r1, #4]
 8002c8e:	e023      	b.n	8002cd8 <HAL_RCC_OscConfig+0x434>
 8002c90:	4b42      	ldr	r3, [pc, #264]	@ (8002d9c <HAL_RCC_OscConfig+0x4f8>)
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a1b      	ldr	r3, [r3, #32]
 8002c9c:	061b      	lsls	r3, r3, #24
 8002c9e:	493f      	ldr	r1, [pc, #252]	@ (8002d9c <HAL_RCC_OscConfig+0x4f8>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	60cb      	str	r3, [r1, #12]
 8002ca4:	e018      	b.n	8002cd8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002ca6:	4b3d      	ldr	r3, [pc, #244]	@ (8002d9c <HAL_RCC_OscConfig+0x4f8>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a3c      	ldr	r2, [pc, #240]	@ (8002d9c <HAL_RCC_OscConfig+0x4f8>)
 8002cac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002cb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb2:	f7fe fc7d 	bl	80015b0 <HAL_GetTick>
 8002cb6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002cb8:	e008      	b.n	8002ccc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002cba:	f7fe fc79 	bl	80015b0 <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d901      	bls.n	8002ccc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e23d      	b.n	8003148 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002ccc:	4b33      	ldr	r3, [pc, #204]	@ (8002d9c <HAL_RCC_OscConfig+0x4f8>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d1f0      	bne.n	8002cba <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0308 	and.w	r3, r3, #8
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d036      	beq.n	8002d52 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	695b      	ldr	r3, [r3, #20]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d019      	beq.n	8002d20 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cec:	4b2b      	ldr	r3, [pc, #172]	@ (8002d9c <HAL_RCC_OscConfig+0x4f8>)
 8002cee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cf0:	4a2a      	ldr	r2, [pc, #168]	@ (8002d9c <HAL_RCC_OscConfig+0x4f8>)
 8002cf2:	f043 0301 	orr.w	r3, r3, #1
 8002cf6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cf8:	f7fe fc5a 	bl	80015b0 <HAL_GetTick>
 8002cfc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002cfe:	e008      	b.n	8002d12 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d00:	f7fe fc56 	bl	80015b0 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e21a      	b.n	8003148 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d12:	4b22      	ldr	r3, [pc, #136]	@ (8002d9c <HAL_RCC_OscConfig+0x4f8>)
 8002d14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d0f0      	beq.n	8002d00 <HAL_RCC_OscConfig+0x45c>
 8002d1e:	e018      	b.n	8002d52 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d20:	4b1e      	ldr	r3, [pc, #120]	@ (8002d9c <HAL_RCC_OscConfig+0x4f8>)
 8002d22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d24:	4a1d      	ldr	r2, [pc, #116]	@ (8002d9c <HAL_RCC_OscConfig+0x4f8>)
 8002d26:	f023 0301 	bic.w	r3, r3, #1
 8002d2a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d2c:	f7fe fc40 	bl	80015b0 <HAL_GetTick>
 8002d30:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d32:	e008      	b.n	8002d46 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d34:	f7fe fc3c 	bl	80015b0 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e200      	b.n	8003148 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d46:	4b15      	ldr	r3, [pc, #84]	@ (8002d9c <HAL_RCC_OscConfig+0x4f8>)
 8002d48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1f0      	bne.n	8002d34 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0320 	and.w	r3, r3, #32
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d039      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d01c      	beq.n	8002da0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d66:	4b0d      	ldr	r3, [pc, #52]	@ (8002d9c <HAL_RCC_OscConfig+0x4f8>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a0c      	ldr	r2, [pc, #48]	@ (8002d9c <HAL_RCC_OscConfig+0x4f8>)
 8002d6c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002d70:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002d72:	f7fe fc1d 	bl	80015b0 <HAL_GetTick>
 8002d76:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002d78:	e008      	b.n	8002d8c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d7a:	f7fe fc19 	bl	80015b0 <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d901      	bls.n	8002d8c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e1dd      	b.n	8003148 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002d8c:	4b03      	ldr	r3, [pc, #12]	@ (8002d9c <HAL_RCC_OscConfig+0x4f8>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d0f0      	beq.n	8002d7a <HAL_RCC_OscConfig+0x4d6>
 8002d98:	e01b      	b.n	8002dd2 <HAL_RCC_OscConfig+0x52e>
 8002d9a:	bf00      	nop
 8002d9c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002da0:	4b9b      	ldr	r3, [pc, #620]	@ (8003010 <HAL_RCC_OscConfig+0x76c>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a9a      	ldr	r2, [pc, #616]	@ (8003010 <HAL_RCC_OscConfig+0x76c>)
 8002da6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002daa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002dac:	f7fe fc00 	bl	80015b0 <HAL_GetTick>
 8002db0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002db2:	e008      	b.n	8002dc6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002db4:	f7fe fbfc 	bl	80015b0 <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e1c0      	b.n	8003148 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002dc6:	4b92      	ldr	r3, [pc, #584]	@ (8003010 <HAL_RCC_OscConfig+0x76c>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1f0      	bne.n	8002db4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0304 	and.w	r3, r3, #4
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	f000 8081 	beq.w	8002ee2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002de0:	4b8c      	ldr	r3, [pc, #560]	@ (8003014 <HAL_RCC_OscConfig+0x770>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a8b      	ldr	r2, [pc, #556]	@ (8003014 <HAL_RCC_OscConfig+0x770>)
 8002de6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002dec:	f7fe fbe0 	bl	80015b0 <HAL_GetTick>
 8002df0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002df2:	e008      	b.n	8002e06 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002df4:	f7fe fbdc 	bl	80015b0 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b64      	cmp	r3, #100	@ 0x64
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e1a0      	b.n	8003148 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e06:	4b83      	ldr	r3, [pc, #524]	@ (8003014 <HAL_RCC_OscConfig+0x770>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d0f0      	beq.n	8002df4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d106      	bne.n	8002e28 <HAL_RCC_OscConfig+0x584>
 8002e1a:	4b7d      	ldr	r3, [pc, #500]	@ (8003010 <HAL_RCC_OscConfig+0x76c>)
 8002e1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e1e:	4a7c      	ldr	r2, [pc, #496]	@ (8003010 <HAL_RCC_OscConfig+0x76c>)
 8002e20:	f043 0301 	orr.w	r3, r3, #1
 8002e24:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e26:	e02d      	b.n	8002e84 <HAL_RCC_OscConfig+0x5e0>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d10c      	bne.n	8002e4a <HAL_RCC_OscConfig+0x5a6>
 8002e30:	4b77      	ldr	r3, [pc, #476]	@ (8003010 <HAL_RCC_OscConfig+0x76c>)
 8002e32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e34:	4a76      	ldr	r2, [pc, #472]	@ (8003010 <HAL_RCC_OscConfig+0x76c>)
 8002e36:	f023 0301 	bic.w	r3, r3, #1
 8002e3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e3c:	4b74      	ldr	r3, [pc, #464]	@ (8003010 <HAL_RCC_OscConfig+0x76c>)
 8002e3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e40:	4a73      	ldr	r2, [pc, #460]	@ (8003010 <HAL_RCC_OscConfig+0x76c>)
 8002e42:	f023 0304 	bic.w	r3, r3, #4
 8002e46:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e48:	e01c      	b.n	8002e84 <HAL_RCC_OscConfig+0x5e0>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	2b05      	cmp	r3, #5
 8002e50:	d10c      	bne.n	8002e6c <HAL_RCC_OscConfig+0x5c8>
 8002e52:	4b6f      	ldr	r3, [pc, #444]	@ (8003010 <HAL_RCC_OscConfig+0x76c>)
 8002e54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e56:	4a6e      	ldr	r2, [pc, #440]	@ (8003010 <HAL_RCC_OscConfig+0x76c>)
 8002e58:	f043 0304 	orr.w	r3, r3, #4
 8002e5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e5e:	4b6c      	ldr	r3, [pc, #432]	@ (8003010 <HAL_RCC_OscConfig+0x76c>)
 8002e60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e62:	4a6b      	ldr	r2, [pc, #428]	@ (8003010 <HAL_RCC_OscConfig+0x76c>)
 8002e64:	f043 0301 	orr.w	r3, r3, #1
 8002e68:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e6a:	e00b      	b.n	8002e84 <HAL_RCC_OscConfig+0x5e0>
 8002e6c:	4b68      	ldr	r3, [pc, #416]	@ (8003010 <HAL_RCC_OscConfig+0x76c>)
 8002e6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e70:	4a67      	ldr	r2, [pc, #412]	@ (8003010 <HAL_RCC_OscConfig+0x76c>)
 8002e72:	f023 0301 	bic.w	r3, r3, #1
 8002e76:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e78:	4b65      	ldr	r3, [pc, #404]	@ (8003010 <HAL_RCC_OscConfig+0x76c>)
 8002e7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e7c:	4a64      	ldr	r2, [pc, #400]	@ (8003010 <HAL_RCC_OscConfig+0x76c>)
 8002e7e:	f023 0304 	bic.w	r3, r3, #4
 8002e82:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d015      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e8c:	f7fe fb90 	bl	80015b0 <HAL_GetTick>
 8002e90:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e92:	e00a      	b.n	8002eaa <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e94:	f7fe fb8c 	bl	80015b0 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e14e      	b.n	8003148 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002eaa:	4b59      	ldr	r3, [pc, #356]	@ (8003010 <HAL_RCC_OscConfig+0x76c>)
 8002eac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d0ee      	beq.n	8002e94 <HAL_RCC_OscConfig+0x5f0>
 8002eb6:	e014      	b.n	8002ee2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb8:	f7fe fb7a 	bl	80015b0 <HAL_GetTick>
 8002ebc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ebe:	e00a      	b.n	8002ed6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ec0:	f7fe fb76 	bl	80015b0 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e138      	b.n	8003148 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ed6:	4b4e      	ldr	r3, [pc, #312]	@ (8003010 <HAL_RCC_OscConfig+0x76c>)
 8002ed8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1ee      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	f000 812d 	beq.w	8003146 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002eec:	4b48      	ldr	r3, [pc, #288]	@ (8003010 <HAL_RCC_OscConfig+0x76c>)
 8002eee:	691b      	ldr	r3, [r3, #16]
 8002ef0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002ef4:	2b18      	cmp	r3, #24
 8002ef6:	f000 80bd 	beq.w	8003074 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	f040 809e 	bne.w	8003040 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f04:	4b42      	ldr	r3, [pc, #264]	@ (8003010 <HAL_RCC_OscConfig+0x76c>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a41      	ldr	r2, [pc, #260]	@ (8003010 <HAL_RCC_OscConfig+0x76c>)
 8002f0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f10:	f7fe fb4e 	bl	80015b0 <HAL_GetTick>
 8002f14:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f16:	e008      	b.n	8002f2a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f18:	f7fe fb4a 	bl	80015b0 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e10e      	b.n	8003148 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f2a:	4b39      	ldr	r3, [pc, #228]	@ (8003010 <HAL_RCC_OscConfig+0x76c>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d1f0      	bne.n	8002f18 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f36:	4b36      	ldr	r3, [pc, #216]	@ (8003010 <HAL_RCC_OscConfig+0x76c>)
 8002f38:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002f3a:	4b37      	ldr	r3, [pc, #220]	@ (8003018 <HAL_RCC_OscConfig+0x774>)
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002f46:	0112      	lsls	r2, r2, #4
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	4931      	ldr	r1, [pc, #196]	@ (8003010 <HAL_RCC_OscConfig+0x76c>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	628b      	str	r3, [r1, #40]	@ 0x28
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f54:	3b01      	subs	r3, #1
 8002f56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	025b      	lsls	r3, r3, #9
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	431a      	orrs	r2, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	041b      	lsls	r3, r3, #16
 8002f6e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002f72:	431a      	orrs	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f78:	3b01      	subs	r3, #1
 8002f7a:	061b      	lsls	r3, r3, #24
 8002f7c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002f80:	4923      	ldr	r1, [pc, #140]	@ (8003010 <HAL_RCC_OscConfig+0x76c>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002f86:	4b22      	ldr	r3, [pc, #136]	@ (8003010 <HAL_RCC_OscConfig+0x76c>)
 8002f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f8a:	4a21      	ldr	r2, [pc, #132]	@ (8003010 <HAL_RCC_OscConfig+0x76c>)
 8002f8c:	f023 0301 	bic.w	r3, r3, #1
 8002f90:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002f92:	4b1f      	ldr	r3, [pc, #124]	@ (8003010 <HAL_RCC_OscConfig+0x76c>)
 8002f94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f96:	4b21      	ldr	r3, [pc, #132]	@ (800301c <HAL_RCC_OscConfig+0x778>)
 8002f98:	4013      	ands	r3, r2
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002f9e:	00d2      	lsls	r2, r2, #3
 8002fa0:	491b      	ldr	r1, [pc, #108]	@ (8003010 <HAL_RCC_OscConfig+0x76c>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002fa6:	4b1a      	ldr	r3, [pc, #104]	@ (8003010 <HAL_RCC_OscConfig+0x76c>)
 8002fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002faa:	f023 020c 	bic.w	r2, r3, #12
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb2:	4917      	ldr	r1, [pc, #92]	@ (8003010 <HAL_RCC_OscConfig+0x76c>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002fb8:	4b15      	ldr	r3, [pc, #84]	@ (8003010 <HAL_RCC_OscConfig+0x76c>)
 8002fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fbc:	f023 0202 	bic.w	r2, r3, #2
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fc4:	4912      	ldr	r1, [pc, #72]	@ (8003010 <HAL_RCC_OscConfig+0x76c>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002fca:	4b11      	ldr	r3, [pc, #68]	@ (8003010 <HAL_RCC_OscConfig+0x76c>)
 8002fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fce:	4a10      	ldr	r2, [pc, #64]	@ (8003010 <HAL_RCC_OscConfig+0x76c>)
 8002fd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fd4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fd6:	4b0e      	ldr	r3, [pc, #56]	@ (8003010 <HAL_RCC_OscConfig+0x76c>)
 8002fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fda:	4a0d      	ldr	r2, [pc, #52]	@ (8003010 <HAL_RCC_OscConfig+0x76c>)
 8002fdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fe0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002fe2:	4b0b      	ldr	r3, [pc, #44]	@ (8003010 <HAL_RCC_OscConfig+0x76c>)
 8002fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fe6:	4a0a      	ldr	r2, [pc, #40]	@ (8003010 <HAL_RCC_OscConfig+0x76c>)
 8002fe8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002fec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002fee:	4b08      	ldr	r3, [pc, #32]	@ (8003010 <HAL_RCC_OscConfig+0x76c>)
 8002ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ff2:	4a07      	ldr	r2, [pc, #28]	@ (8003010 <HAL_RCC_OscConfig+0x76c>)
 8002ff4:	f043 0301 	orr.w	r3, r3, #1
 8002ff8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ffa:	4b05      	ldr	r3, [pc, #20]	@ (8003010 <HAL_RCC_OscConfig+0x76c>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a04      	ldr	r2, [pc, #16]	@ (8003010 <HAL_RCC_OscConfig+0x76c>)
 8003000:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003004:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003006:	f7fe fad3 	bl	80015b0 <HAL_GetTick>
 800300a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800300c:	e011      	b.n	8003032 <HAL_RCC_OscConfig+0x78e>
 800300e:	bf00      	nop
 8003010:	58024400 	.word	0x58024400
 8003014:	58024800 	.word	0x58024800
 8003018:	fffffc0c 	.word	0xfffffc0c
 800301c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003020:	f7fe fac6 	bl	80015b0 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b02      	cmp	r3, #2
 800302c:	d901      	bls.n	8003032 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e08a      	b.n	8003148 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003032:	4b47      	ldr	r3, [pc, #284]	@ (8003150 <HAL_RCC_OscConfig+0x8ac>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d0f0      	beq.n	8003020 <HAL_RCC_OscConfig+0x77c>
 800303e:	e082      	b.n	8003146 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003040:	4b43      	ldr	r3, [pc, #268]	@ (8003150 <HAL_RCC_OscConfig+0x8ac>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a42      	ldr	r2, [pc, #264]	@ (8003150 <HAL_RCC_OscConfig+0x8ac>)
 8003046:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800304a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800304c:	f7fe fab0 	bl	80015b0 <HAL_GetTick>
 8003050:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003052:	e008      	b.n	8003066 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003054:	f7fe faac 	bl	80015b0 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b02      	cmp	r3, #2
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e070      	b.n	8003148 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003066:	4b3a      	ldr	r3, [pc, #232]	@ (8003150 <HAL_RCC_OscConfig+0x8ac>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d1f0      	bne.n	8003054 <HAL_RCC_OscConfig+0x7b0>
 8003072:	e068      	b.n	8003146 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003074:	4b36      	ldr	r3, [pc, #216]	@ (8003150 <HAL_RCC_OscConfig+0x8ac>)
 8003076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003078:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800307a:	4b35      	ldr	r3, [pc, #212]	@ (8003150 <HAL_RCC_OscConfig+0x8ac>)
 800307c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800307e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003084:	2b01      	cmp	r3, #1
 8003086:	d031      	beq.n	80030ec <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	f003 0203 	and.w	r2, r3, #3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003092:	429a      	cmp	r2, r3
 8003094:	d12a      	bne.n	80030ec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	091b      	lsrs	r3, r3, #4
 800309a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d122      	bne.n	80030ec <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030b0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d11a      	bne.n	80030ec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	0a5b      	lsrs	r3, r3, #9
 80030ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030c2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d111      	bne.n	80030ec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	0c1b      	lsrs	r3, r3, #16
 80030cc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030d4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d108      	bne.n	80030ec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	0e1b      	lsrs	r3, r3, #24
 80030de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030e6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d001      	beq.n	80030f0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e02b      	b.n	8003148 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80030f0:	4b17      	ldr	r3, [pc, #92]	@ (8003150 <HAL_RCC_OscConfig+0x8ac>)
 80030f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030f4:	08db      	lsrs	r3, r3, #3
 80030f6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80030fa:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003100:	693a      	ldr	r2, [r7, #16]
 8003102:	429a      	cmp	r2, r3
 8003104:	d01f      	beq.n	8003146 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003106:	4b12      	ldr	r3, [pc, #72]	@ (8003150 <HAL_RCC_OscConfig+0x8ac>)
 8003108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800310a:	4a11      	ldr	r2, [pc, #68]	@ (8003150 <HAL_RCC_OscConfig+0x8ac>)
 800310c:	f023 0301 	bic.w	r3, r3, #1
 8003110:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003112:	f7fe fa4d 	bl	80015b0 <HAL_GetTick>
 8003116:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003118:	bf00      	nop
 800311a:	f7fe fa49 	bl	80015b0 <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003122:	4293      	cmp	r3, r2
 8003124:	d0f9      	beq.n	800311a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003126:	4b0a      	ldr	r3, [pc, #40]	@ (8003150 <HAL_RCC_OscConfig+0x8ac>)
 8003128:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800312a:	4b0a      	ldr	r3, [pc, #40]	@ (8003154 <HAL_RCC_OscConfig+0x8b0>)
 800312c:	4013      	ands	r3, r2
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003132:	00d2      	lsls	r2, r2, #3
 8003134:	4906      	ldr	r1, [pc, #24]	@ (8003150 <HAL_RCC_OscConfig+0x8ac>)
 8003136:	4313      	orrs	r3, r2
 8003138:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800313a:	4b05      	ldr	r3, [pc, #20]	@ (8003150 <HAL_RCC_OscConfig+0x8ac>)
 800313c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800313e:	4a04      	ldr	r2, [pc, #16]	@ (8003150 <HAL_RCC_OscConfig+0x8ac>)
 8003140:	f043 0301 	orr.w	r3, r3, #1
 8003144:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	3730      	adds	r7, #48	@ 0x30
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	58024400 	.word	0x58024400
 8003154:	ffff0007 	.word	0xffff0007

08003158 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d101      	bne.n	800316c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e19c      	b.n	80034a6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800316c:	4b8a      	ldr	r3, [pc, #552]	@ (8003398 <HAL_RCC_ClockConfig+0x240>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 030f 	and.w	r3, r3, #15
 8003174:	683a      	ldr	r2, [r7, #0]
 8003176:	429a      	cmp	r2, r3
 8003178:	d910      	bls.n	800319c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800317a:	4b87      	ldr	r3, [pc, #540]	@ (8003398 <HAL_RCC_ClockConfig+0x240>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f023 020f 	bic.w	r2, r3, #15
 8003182:	4985      	ldr	r1, [pc, #532]	@ (8003398 <HAL_RCC_ClockConfig+0x240>)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	4313      	orrs	r3, r2
 8003188:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800318a:	4b83      	ldr	r3, [pc, #524]	@ (8003398 <HAL_RCC_ClockConfig+0x240>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 030f 	and.w	r3, r3, #15
 8003192:	683a      	ldr	r2, [r7, #0]
 8003194:	429a      	cmp	r2, r3
 8003196:	d001      	beq.n	800319c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e184      	b.n	80034a6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0304 	and.w	r3, r3, #4
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d010      	beq.n	80031ca <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	691a      	ldr	r2, [r3, #16]
 80031ac:	4b7b      	ldr	r3, [pc, #492]	@ (800339c <HAL_RCC_ClockConfig+0x244>)
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d908      	bls.n	80031ca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80031b8:	4b78      	ldr	r3, [pc, #480]	@ (800339c <HAL_RCC_ClockConfig+0x244>)
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	691b      	ldr	r3, [r3, #16]
 80031c4:	4975      	ldr	r1, [pc, #468]	@ (800339c <HAL_RCC_ClockConfig+0x244>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0308 	and.w	r3, r3, #8
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d010      	beq.n	80031f8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	695a      	ldr	r2, [r3, #20]
 80031da:	4b70      	ldr	r3, [pc, #448]	@ (800339c <HAL_RCC_ClockConfig+0x244>)
 80031dc:	69db      	ldr	r3, [r3, #28]
 80031de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d908      	bls.n	80031f8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80031e6:	4b6d      	ldr	r3, [pc, #436]	@ (800339c <HAL_RCC_ClockConfig+0x244>)
 80031e8:	69db      	ldr	r3, [r3, #28]
 80031ea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	496a      	ldr	r1, [pc, #424]	@ (800339c <HAL_RCC_ClockConfig+0x244>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0310 	and.w	r3, r3, #16
 8003200:	2b00      	cmp	r3, #0
 8003202:	d010      	beq.n	8003226 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	699a      	ldr	r2, [r3, #24]
 8003208:	4b64      	ldr	r3, [pc, #400]	@ (800339c <HAL_RCC_ClockConfig+0x244>)
 800320a:	69db      	ldr	r3, [r3, #28]
 800320c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003210:	429a      	cmp	r2, r3
 8003212:	d908      	bls.n	8003226 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003214:	4b61      	ldr	r3, [pc, #388]	@ (800339c <HAL_RCC_ClockConfig+0x244>)
 8003216:	69db      	ldr	r3, [r3, #28]
 8003218:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	495e      	ldr	r1, [pc, #376]	@ (800339c <HAL_RCC_ClockConfig+0x244>)
 8003222:	4313      	orrs	r3, r2
 8003224:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0320 	and.w	r3, r3, #32
 800322e:	2b00      	cmp	r3, #0
 8003230:	d010      	beq.n	8003254 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	69da      	ldr	r2, [r3, #28]
 8003236:	4b59      	ldr	r3, [pc, #356]	@ (800339c <HAL_RCC_ClockConfig+0x244>)
 8003238:	6a1b      	ldr	r3, [r3, #32]
 800323a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800323e:	429a      	cmp	r2, r3
 8003240:	d908      	bls.n	8003254 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003242:	4b56      	ldr	r3, [pc, #344]	@ (800339c <HAL_RCC_ClockConfig+0x244>)
 8003244:	6a1b      	ldr	r3, [r3, #32]
 8003246:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	69db      	ldr	r3, [r3, #28]
 800324e:	4953      	ldr	r1, [pc, #332]	@ (800339c <HAL_RCC_ClockConfig+0x244>)
 8003250:	4313      	orrs	r3, r2
 8003252:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d010      	beq.n	8003282 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	68da      	ldr	r2, [r3, #12]
 8003264:	4b4d      	ldr	r3, [pc, #308]	@ (800339c <HAL_RCC_ClockConfig+0x244>)
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	f003 030f 	and.w	r3, r3, #15
 800326c:	429a      	cmp	r2, r3
 800326e:	d908      	bls.n	8003282 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003270:	4b4a      	ldr	r3, [pc, #296]	@ (800339c <HAL_RCC_ClockConfig+0x244>)
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	f023 020f 	bic.w	r2, r3, #15
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	4947      	ldr	r1, [pc, #284]	@ (800339c <HAL_RCC_ClockConfig+0x244>)
 800327e:	4313      	orrs	r3, r2
 8003280:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	2b00      	cmp	r3, #0
 800328c:	d055      	beq.n	800333a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800328e:	4b43      	ldr	r3, [pc, #268]	@ (800339c <HAL_RCC_ClockConfig+0x244>)
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	4940      	ldr	r1, [pc, #256]	@ (800339c <HAL_RCC_ClockConfig+0x244>)
 800329c:	4313      	orrs	r3, r2
 800329e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d107      	bne.n	80032b8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80032a8:	4b3c      	ldr	r3, [pc, #240]	@ (800339c <HAL_RCC_ClockConfig+0x244>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d121      	bne.n	80032f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e0f6      	b.n	80034a6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	2b03      	cmp	r3, #3
 80032be:	d107      	bne.n	80032d0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80032c0:	4b36      	ldr	r3, [pc, #216]	@ (800339c <HAL_RCC_ClockConfig+0x244>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d115      	bne.n	80032f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e0ea      	b.n	80034a6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d107      	bne.n	80032e8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80032d8:	4b30      	ldr	r3, [pc, #192]	@ (800339c <HAL_RCC_ClockConfig+0x244>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d109      	bne.n	80032f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e0de      	b.n	80034a6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80032e8:	4b2c      	ldr	r3, [pc, #176]	@ (800339c <HAL_RCC_ClockConfig+0x244>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0304 	and.w	r3, r3, #4
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d101      	bne.n	80032f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e0d6      	b.n	80034a6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032f8:	4b28      	ldr	r3, [pc, #160]	@ (800339c <HAL_RCC_ClockConfig+0x244>)
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	f023 0207 	bic.w	r2, r3, #7
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	4925      	ldr	r1, [pc, #148]	@ (800339c <HAL_RCC_ClockConfig+0x244>)
 8003306:	4313      	orrs	r3, r2
 8003308:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800330a:	f7fe f951 	bl	80015b0 <HAL_GetTick>
 800330e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003310:	e00a      	b.n	8003328 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003312:	f7fe f94d 	bl	80015b0 <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003320:	4293      	cmp	r3, r2
 8003322:	d901      	bls.n	8003328 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e0be      	b.n	80034a6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003328:	4b1c      	ldr	r3, [pc, #112]	@ (800339c <HAL_RCC_ClockConfig+0x244>)
 800332a:	691b      	ldr	r3, [r3, #16]
 800332c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	00db      	lsls	r3, r3, #3
 8003336:	429a      	cmp	r2, r3
 8003338:	d1eb      	bne.n	8003312 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0302 	and.w	r3, r3, #2
 8003342:	2b00      	cmp	r3, #0
 8003344:	d010      	beq.n	8003368 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	68da      	ldr	r2, [r3, #12]
 800334a:	4b14      	ldr	r3, [pc, #80]	@ (800339c <HAL_RCC_ClockConfig+0x244>)
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	f003 030f 	and.w	r3, r3, #15
 8003352:	429a      	cmp	r2, r3
 8003354:	d208      	bcs.n	8003368 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003356:	4b11      	ldr	r3, [pc, #68]	@ (800339c <HAL_RCC_ClockConfig+0x244>)
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	f023 020f 	bic.w	r2, r3, #15
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	490e      	ldr	r1, [pc, #56]	@ (800339c <HAL_RCC_ClockConfig+0x244>)
 8003364:	4313      	orrs	r3, r2
 8003366:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003368:	4b0b      	ldr	r3, [pc, #44]	@ (8003398 <HAL_RCC_ClockConfig+0x240>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 030f 	and.w	r3, r3, #15
 8003370:	683a      	ldr	r2, [r7, #0]
 8003372:	429a      	cmp	r2, r3
 8003374:	d214      	bcs.n	80033a0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003376:	4b08      	ldr	r3, [pc, #32]	@ (8003398 <HAL_RCC_ClockConfig+0x240>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f023 020f 	bic.w	r2, r3, #15
 800337e:	4906      	ldr	r1, [pc, #24]	@ (8003398 <HAL_RCC_ClockConfig+0x240>)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	4313      	orrs	r3, r2
 8003384:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003386:	4b04      	ldr	r3, [pc, #16]	@ (8003398 <HAL_RCC_ClockConfig+0x240>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 030f 	and.w	r3, r3, #15
 800338e:	683a      	ldr	r2, [r7, #0]
 8003390:	429a      	cmp	r2, r3
 8003392:	d005      	beq.n	80033a0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e086      	b.n	80034a6 <HAL_RCC_ClockConfig+0x34e>
 8003398:	52002000 	.word	0x52002000
 800339c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0304 	and.w	r3, r3, #4
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d010      	beq.n	80033ce <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	691a      	ldr	r2, [r3, #16]
 80033b0:	4b3f      	ldr	r3, [pc, #252]	@ (80034b0 <HAL_RCC_ClockConfig+0x358>)
 80033b2:	699b      	ldr	r3, [r3, #24]
 80033b4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d208      	bcs.n	80033ce <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80033bc:	4b3c      	ldr	r3, [pc, #240]	@ (80034b0 <HAL_RCC_ClockConfig+0x358>)
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	691b      	ldr	r3, [r3, #16]
 80033c8:	4939      	ldr	r1, [pc, #228]	@ (80034b0 <HAL_RCC_ClockConfig+0x358>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0308 	and.w	r3, r3, #8
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d010      	beq.n	80033fc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	695a      	ldr	r2, [r3, #20]
 80033de:	4b34      	ldr	r3, [pc, #208]	@ (80034b0 <HAL_RCC_ClockConfig+0x358>)
 80033e0:	69db      	ldr	r3, [r3, #28]
 80033e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d208      	bcs.n	80033fc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80033ea:	4b31      	ldr	r3, [pc, #196]	@ (80034b0 <HAL_RCC_ClockConfig+0x358>)
 80033ec:	69db      	ldr	r3, [r3, #28]
 80033ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	492e      	ldr	r1, [pc, #184]	@ (80034b0 <HAL_RCC_ClockConfig+0x358>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0310 	and.w	r3, r3, #16
 8003404:	2b00      	cmp	r3, #0
 8003406:	d010      	beq.n	800342a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	699a      	ldr	r2, [r3, #24]
 800340c:	4b28      	ldr	r3, [pc, #160]	@ (80034b0 <HAL_RCC_ClockConfig+0x358>)
 800340e:	69db      	ldr	r3, [r3, #28]
 8003410:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003414:	429a      	cmp	r2, r3
 8003416:	d208      	bcs.n	800342a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003418:	4b25      	ldr	r3, [pc, #148]	@ (80034b0 <HAL_RCC_ClockConfig+0x358>)
 800341a:	69db      	ldr	r3, [r3, #28]
 800341c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	4922      	ldr	r1, [pc, #136]	@ (80034b0 <HAL_RCC_ClockConfig+0x358>)
 8003426:	4313      	orrs	r3, r2
 8003428:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0320 	and.w	r3, r3, #32
 8003432:	2b00      	cmp	r3, #0
 8003434:	d010      	beq.n	8003458 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	69da      	ldr	r2, [r3, #28]
 800343a:	4b1d      	ldr	r3, [pc, #116]	@ (80034b0 <HAL_RCC_ClockConfig+0x358>)
 800343c:	6a1b      	ldr	r3, [r3, #32]
 800343e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003442:	429a      	cmp	r2, r3
 8003444:	d208      	bcs.n	8003458 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003446:	4b1a      	ldr	r3, [pc, #104]	@ (80034b0 <HAL_RCC_ClockConfig+0x358>)
 8003448:	6a1b      	ldr	r3, [r3, #32]
 800344a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	69db      	ldr	r3, [r3, #28]
 8003452:	4917      	ldr	r1, [pc, #92]	@ (80034b0 <HAL_RCC_ClockConfig+0x358>)
 8003454:	4313      	orrs	r3, r2
 8003456:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003458:	f000 f834 	bl	80034c4 <HAL_RCC_GetSysClockFreq>
 800345c:	4602      	mov	r2, r0
 800345e:	4b14      	ldr	r3, [pc, #80]	@ (80034b0 <HAL_RCC_ClockConfig+0x358>)
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	0a1b      	lsrs	r3, r3, #8
 8003464:	f003 030f 	and.w	r3, r3, #15
 8003468:	4912      	ldr	r1, [pc, #72]	@ (80034b4 <HAL_RCC_ClockConfig+0x35c>)
 800346a:	5ccb      	ldrb	r3, [r1, r3]
 800346c:	f003 031f 	and.w	r3, r3, #31
 8003470:	fa22 f303 	lsr.w	r3, r2, r3
 8003474:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003476:	4b0e      	ldr	r3, [pc, #56]	@ (80034b0 <HAL_RCC_ClockConfig+0x358>)
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	f003 030f 	and.w	r3, r3, #15
 800347e:	4a0d      	ldr	r2, [pc, #52]	@ (80034b4 <HAL_RCC_ClockConfig+0x35c>)
 8003480:	5cd3      	ldrb	r3, [r2, r3]
 8003482:	f003 031f 	and.w	r3, r3, #31
 8003486:	693a      	ldr	r2, [r7, #16]
 8003488:	fa22 f303 	lsr.w	r3, r2, r3
 800348c:	4a0a      	ldr	r2, [pc, #40]	@ (80034b8 <HAL_RCC_ClockConfig+0x360>)
 800348e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003490:	4a0a      	ldr	r2, [pc, #40]	@ (80034bc <HAL_RCC_ClockConfig+0x364>)
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003496:	4b0a      	ldr	r3, [pc, #40]	@ (80034c0 <HAL_RCC_ClockConfig+0x368>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4618      	mov	r0, r3
 800349c:	f7fe f83e 	bl	800151c <HAL_InitTick>
 80034a0:	4603      	mov	r3, r0
 80034a2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80034a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3718      	adds	r7, #24
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	58024400 	.word	0x58024400
 80034b4:	08008afc 	.word	0x08008afc
 80034b8:	24000004 	.word	0x24000004
 80034bc:	24000000 	.word	0x24000000
 80034c0:	24000008 	.word	0x24000008

080034c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b089      	sub	sp, #36	@ 0x24
 80034c8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034ca:	4bb3      	ldr	r3, [pc, #716]	@ (8003798 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80034d2:	2b18      	cmp	r3, #24
 80034d4:	f200 8155 	bhi.w	8003782 <HAL_RCC_GetSysClockFreq+0x2be>
 80034d8:	a201      	add	r2, pc, #4	@ (adr r2, 80034e0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80034da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034de:	bf00      	nop
 80034e0:	08003545 	.word	0x08003545
 80034e4:	08003783 	.word	0x08003783
 80034e8:	08003783 	.word	0x08003783
 80034ec:	08003783 	.word	0x08003783
 80034f0:	08003783 	.word	0x08003783
 80034f4:	08003783 	.word	0x08003783
 80034f8:	08003783 	.word	0x08003783
 80034fc:	08003783 	.word	0x08003783
 8003500:	0800356b 	.word	0x0800356b
 8003504:	08003783 	.word	0x08003783
 8003508:	08003783 	.word	0x08003783
 800350c:	08003783 	.word	0x08003783
 8003510:	08003783 	.word	0x08003783
 8003514:	08003783 	.word	0x08003783
 8003518:	08003783 	.word	0x08003783
 800351c:	08003783 	.word	0x08003783
 8003520:	08003571 	.word	0x08003571
 8003524:	08003783 	.word	0x08003783
 8003528:	08003783 	.word	0x08003783
 800352c:	08003783 	.word	0x08003783
 8003530:	08003783 	.word	0x08003783
 8003534:	08003783 	.word	0x08003783
 8003538:	08003783 	.word	0x08003783
 800353c:	08003783 	.word	0x08003783
 8003540:	08003577 	.word	0x08003577
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003544:	4b94      	ldr	r3, [pc, #592]	@ (8003798 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0320 	and.w	r3, r3, #32
 800354c:	2b00      	cmp	r3, #0
 800354e:	d009      	beq.n	8003564 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003550:	4b91      	ldr	r3, [pc, #580]	@ (8003798 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	08db      	lsrs	r3, r3, #3
 8003556:	f003 0303 	and.w	r3, r3, #3
 800355a:	4a90      	ldr	r2, [pc, #576]	@ (800379c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800355c:	fa22 f303 	lsr.w	r3, r2, r3
 8003560:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003562:	e111      	b.n	8003788 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003564:	4b8d      	ldr	r3, [pc, #564]	@ (800379c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003566:	61bb      	str	r3, [r7, #24]
      break;
 8003568:	e10e      	b.n	8003788 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800356a:	4b8d      	ldr	r3, [pc, #564]	@ (80037a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800356c:	61bb      	str	r3, [r7, #24]
      break;
 800356e:	e10b      	b.n	8003788 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003570:	4b8c      	ldr	r3, [pc, #560]	@ (80037a4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003572:	61bb      	str	r3, [r7, #24]
      break;
 8003574:	e108      	b.n	8003788 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003576:	4b88      	ldr	r3, [pc, #544]	@ (8003798 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800357a:	f003 0303 	and.w	r3, r3, #3
 800357e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003580:	4b85      	ldr	r3, [pc, #532]	@ (8003798 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003584:	091b      	lsrs	r3, r3, #4
 8003586:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800358a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800358c:	4b82      	ldr	r3, [pc, #520]	@ (8003798 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800358e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003590:	f003 0301 	and.w	r3, r3, #1
 8003594:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003596:	4b80      	ldr	r3, [pc, #512]	@ (8003798 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003598:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800359a:	08db      	lsrs	r3, r3, #3
 800359c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80035a0:	68fa      	ldr	r2, [r7, #12]
 80035a2:	fb02 f303 	mul.w	r3, r2, r3
 80035a6:	ee07 3a90 	vmov	s15, r3
 80035aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035ae:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	f000 80e1 	beq.w	800377c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	2b02      	cmp	r3, #2
 80035be:	f000 8083 	beq.w	80036c8 <HAL_RCC_GetSysClockFreq+0x204>
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	f200 80a1 	bhi.w	800370c <HAL_RCC_GetSysClockFreq+0x248>
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d003      	beq.n	80035d8 <HAL_RCC_GetSysClockFreq+0x114>
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d056      	beq.n	8003684 <HAL_RCC_GetSysClockFreq+0x1c0>
 80035d6:	e099      	b.n	800370c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80035d8:	4b6f      	ldr	r3, [pc, #444]	@ (8003798 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0320 	and.w	r3, r3, #32
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d02d      	beq.n	8003640 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80035e4:	4b6c      	ldr	r3, [pc, #432]	@ (8003798 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	08db      	lsrs	r3, r3, #3
 80035ea:	f003 0303 	and.w	r3, r3, #3
 80035ee:	4a6b      	ldr	r2, [pc, #428]	@ (800379c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80035f0:	fa22 f303 	lsr.w	r3, r2, r3
 80035f4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	ee07 3a90 	vmov	s15, r3
 80035fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	ee07 3a90 	vmov	s15, r3
 8003606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800360a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800360e:	4b62      	ldr	r3, [pc, #392]	@ (8003798 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003612:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003616:	ee07 3a90 	vmov	s15, r3
 800361a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800361e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003622:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80037a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003626:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800362a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800362e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003632:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003636:	ee67 7a27 	vmul.f32	s15, s14, s15
 800363a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800363e:	e087      	b.n	8003750 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	ee07 3a90 	vmov	s15, r3
 8003646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800364a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80037ac <HAL_RCC_GetSysClockFreq+0x2e8>
 800364e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003652:	4b51      	ldr	r3, [pc, #324]	@ (8003798 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003656:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800365a:	ee07 3a90 	vmov	s15, r3
 800365e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003662:	ed97 6a02 	vldr	s12, [r7, #8]
 8003666:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80037a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800366a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800366e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003672:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003676:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800367a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800367e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003682:	e065      	b.n	8003750 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	ee07 3a90 	vmov	s15, r3
 800368a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800368e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80037b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003692:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003696:	4b40      	ldr	r3, [pc, #256]	@ (8003798 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800369a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800369e:	ee07 3a90 	vmov	s15, r3
 80036a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80036aa:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80037a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80036ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80036ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80036c6:	e043      	b.n	8003750 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	ee07 3a90 	vmov	s15, r3
 80036ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036d2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80037b4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80036d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036da:	4b2f      	ldr	r3, [pc, #188]	@ (8003798 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036e2:	ee07 3a90 	vmov	s15, r3
 80036e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80036ee:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80037a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80036f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80036fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003702:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003706:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800370a:	e021      	b.n	8003750 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	ee07 3a90 	vmov	s15, r3
 8003712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003716:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80037b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800371a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800371e:	4b1e      	ldr	r3, [pc, #120]	@ (8003798 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003722:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003726:	ee07 3a90 	vmov	s15, r3
 800372a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800372e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003732:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80037a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003736:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800373a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800373e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003742:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800374a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800374e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003750:	4b11      	ldr	r3, [pc, #68]	@ (8003798 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003754:	0a5b      	lsrs	r3, r3, #9
 8003756:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800375a:	3301      	adds	r3, #1
 800375c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	ee07 3a90 	vmov	s15, r3
 8003764:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003768:	edd7 6a07 	vldr	s13, [r7, #28]
 800376c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003770:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003774:	ee17 3a90 	vmov	r3, s15
 8003778:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800377a:	e005      	b.n	8003788 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800377c:	2300      	movs	r3, #0
 800377e:	61bb      	str	r3, [r7, #24]
      break;
 8003780:	e002      	b.n	8003788 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003782:	4b07      	ldr	r3, [pc, #28]	@ (80037a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003784:	61bb      	str	r3, [r7, #24]
      break;
 8003786:	bf00      	nop
  }

  return sysclockfreq;
 8003788:	69bb      	ldr	r3, [r7, #24]
}
 800378a:	4618      	mov	r0, r3
 800378c:	3724      	adds	r7, #36	@ 0x24
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	58024400 	.word	0x58024400
 800379c:	03d09000 	.word	0x03d09000
 80037a0:	003d0900 	.word	0x003d0900
 80037a4:	007a1200 	.word	0x007a1200
 80037a8:	46000000 	.word	0x46000000
 80037ac:	4c742400 	.word	0x4c742400
 80037b0:	4a742400 	.word	0x4a742400
 80037b4:	4af42400 	.word	0x4af42400

080037b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80037be:	f7ff fe81 	bl	80034c4 <HAL_RCC_GetSysClockFreq>
 80037c2:	4602      	mov	r2, r0
 80037c4:	4b10      	ldr	r3, [pc, #64]	@ (8003808 <HAL_RCC_GetHCLKFreq+0x50>)
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	0a1b      	lsrs	r3, r3, #8
 80037ca:	f003 030f 	and.w	r3, r3, #15
 80037ce:	490f      	ldr	r1, [pc, #60]	@ (800380c <HAL_RCC_GetHCLKFreq+0x54>)
 80037d0:	5ccb      	ldrb	r3, [r1, r3]
 80037d2:	f003 031f 	and.w	r3, r3, #31
 80037d6:	fa22 f303 	lsr.w	r3, r2, r3
 80037da:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80037dc:	4b0a      	ldr	r3, [pc, #40]	@ (8003808 <HAL_RCC_GetHCLKFreq+0x50>)
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	f003 030f 	and.w	r3, r3, #15
 80037e4:	4a09      	ldr	r2, [pc, #36]	@ (800380c <HAL_RCC_GetHCLKFreq+0x54>)
 80037e6:	5cd3      	ldrb	r3, [r2, r3]
 80037e8:	f003 031f 	and.w	r3, r3, #31
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	fa22 f303 	lsr.w	r3, r2, r3
 80037f2:	4a07      	ldr	r2, [pc, #28]	@ (8003810 <HAL_RCC_GetHCLKFreq+0x58>)
 80037f4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80037f6:	4a07      	ldr	r2, [pc, #28]	@ (8003814 <HAL_RCC_GetHCLKFreq+0x5c>)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80037fc:	4b04      	ldr	r3, [pc, #16]	@ (8003810 <HAL_RCC_GetHCLKFreq+0x58>)
 80037fe:	681b      	ldr	r3, [r3, #0]
}
 8003800:	4618      	mov	r0, r3
 8003802:	3708      	adds	r7, #8
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	58024400 	.word	0x58024400
 800380c:	08008afc 	.word	0x08008afc
 8003810:	24000004 	.word	0x24000004
 8003814:	24000000 	.word	0x24000000

08003818 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800381c:	f7ff ffcc 	bl	80037b8 <HAL_RCC_GetHCLKFreq>
 8003820:	4602      	mov	r2, r0
 8003822:	4b06      	ldr	r3, [pc, #24]	@ (800383c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003824:	69db      	ldr	r3, [r3, #28]
 8003826:	091b      	lsrs	r3, r3, #4
 8003828:	f003 0307 	and.w	r3, r3, #7
 800382c:	4904      	ldr	r1, [pc, #16]	@ (8003840 <HAL_RCC_GetPCLK1Freq+0x28>)
 800382e:	5ccb      	ldrb	r3, [r1, r3]
 8003830:	f003 031f 	and.w	r3, r3, #31
 8003834:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003838:	4618      	mov	r0, r3
 800383a:	bd80      	pop	{r7, pc}
 800383c:	58024400 	.word	0x58024400
 8003840:	08008afc 	.word	0x08008afc

08003844 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003848:	f7ff ffb6 	bl	80037b8 <HAL_RCC_GetHCLKFreq>
 800384c:	4602      	mov	r2, r0
 800384e:	4b06      	ldr	r3, [pc, #24]	@ (8003868 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003850:	69db      	ldr	r3, [r3, #28]
 8003852:	0a1b      	lsrs	r3, r3, #8
 8003854:	f003 0307 	and.w	r3, r3, #7
 8003858:	4904      	ldr	r1, [pc, #16]	@ (800386c <HAL_RCC_GetPCLK2Freq+0x28>)
 800385a:	5ccb      	ldrb	r3, [r1, r3]
 800385c:	f003 031f 	and.w	r3, r3, #31
 8003860:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003864:	4618      	mov	r0, r3
 8003866:	bd80      	pop	{r7, pc}
 8003868:	58024400 	.word	0x58024400
 800386c:	08008afc 	.word	0x08008afc

08003870 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003870:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003874:	b0ca      	sub	sp, #296	@ 0x128
 8003876:	af00      	add	r7, sp, #0
 8003878:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800387c:	2300      	movs	r3, #0
 800387e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003882:	2300      	movs	r3, #0
 8003884:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003888:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800388c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003890:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003894:	2500      	movs	r5, #0
 8003896:	ea54 0305 	orrs.w	r3, r4, r5
 800389a:	d049      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800389c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038a2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80038a6:	d02f      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80038a8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80038ac:	d828      	bhi.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80038ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80038b2:	d01a      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80038b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80038b8:	d822      	bhi.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d003      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80038be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80038c2:	d007      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80038c4:	e01c      	b.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038c6:	4bb8      	ldr	r3, [pc, #736]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ca:	4ab7      	ldr	r2, [pc, #732]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80038d2:	e01a      	b.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80038d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038d8:	3308      	adds	r3, #8
 80038da:	2102      	movs	r1, #2
 80038dc:	4618      	mov	r0, r3
 80038de:	f001 fc8f 	bl	8005200 <RCCEx_PLL2_Config>
 80038e2:	4603      	mov	r3, r0
 80038e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80038e8:	e00f      	b.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80038ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038ee:	3328      	adds	r3, #40	@ 0x28
 80038f0:	2102      	movs	r1, #2
 80038f2:	4618      	mov	r0, r3
 80038f4:	f001 fd36 	bl	8005364 <RCCEx_PLL3_Config>
 80038f8:	4603      	mov	r3, r0
 80038fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80038fe:	e004      	b.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003906:	e000      	b.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003908:	bf00      	nop
    }

    if (ret == HAL_OK)
 800390a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800390e:	2b00      	cmp	r3, #0
 8003910:	d10a      	bne.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003912:	4ba5      	ldr	r3, [pc, #660]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003914:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003916:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800391a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800391e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003920:	4aa1      	ldr	r2, [pc, #644]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003922:	430b      	orrs	r3, r1
 8003924:	6513      	str	r3, [r2, #80]	@ 0x50
 8003926:	e003      	b.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003928:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800392c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003930:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003938:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800393c:	f04f 0900 	mov.w	r9, #0
 8003940:	ea58 0309 	orrs.w	r3, r8, r9
 8003944:	d047      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800394a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800394c:	2b04      	cmp	r3, #4
 800394e:	d82a      	bhi.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003950:	a201      	add	r2, pc, #4	@ (adr r2, 8003958 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003956:	bf00      	nop
 8003958:	0800396d 	.word	0x0800396d
 800395c:	0800397b 	.word	0x0800397b
 8003960:	08003991 	.word	0x08003991
 8003964:	080039af 	.word	0x080039af
 8003968:	080039af 	.word	0x080039af
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800396c:	4b8e      	ldr	r3, [pc, #568]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800396e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003970:	4a8d      	ldr	r2, [pc, #564]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003972:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003976:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003978:	e01a      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800397a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800397e:	3308      	adds	r3, #8
 8003980:	2100      	movs	r1, #0
 8003982:	4618      	mov	r0, r3
 8003984:	f001 fc3c 	bl	8005200 <RCCEx_PLL2_Config>
 8003988:	4603      	mov	r3, r0
 800398a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800398e:	e00f      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003990:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003994:	3328      	adds	r3, #40	@ 0x28
 8003996:	2100      	movs	r1, #0
 8003998:	4618      	mov	r0, r3
 800399a:	f001 fce3 	bl	8005364 <RCCEx_PLL3_Config>
 800399e:	4603      	mov	r3, r0
 80039a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80039a4:	e004      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80039ac:	e000      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80039ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d10a      	bne.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039b8:	4b7b      	ldr	r3, [pc, #492]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039bc:	f023 0107 	bic.w	r1, r3, #7
 80039c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039c6:	4a78      	ldr	r2, [pc, #480]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039c8:	430b      	orrs	r3, r1
 80039ca:	6513      	str	r3, [r2, #80]	@ 0x50
 80039cc:	e003      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80039d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039de:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80039e2:	f04f 0b00 	mov.w	fp, #0
 80039e6:	ea5a 030b 	orrs.w	r3, sl, fp
 80039ea:	d04c      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80039ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039f6:	d030      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80039f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039fc:	d829      	bhi.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80039fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8003a00:	d02d      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003a02:	2bc0      	cmp	r3, #192	@ 0xc0
 8003a04:	d825      	bhi.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003a06:	2b80      	cmp	r3, #128	@ 0x80
 8003a08:	d018      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003a0a:	2b80      	cmp	r3, #128	@ 0x80
 8003a0c:	d821      	bhi.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d002      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003a12:	2b40      	cmp	r3, #64	@ 0x40
 8003a14:	d007      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003a16:	e01c      	b.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a18:	4b63      	ldr	r3, [pc, #396]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a1c:	4a62      	ldr	r2, [pc, #392]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003a24:	e01c      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a2a:	3308      	adds	r3, #8
 8003a2c:	2100      	movs	r1, #0
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f001 fbe6 	bl	8005200 <RCCEx_PLL2_Config>
 8003a34:	4603      	mov	r3, r0
 8003a36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003a3a:	e011      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a40:	3328      	adds	r3, #40	@ 0x28
 8003a42:	2100      	movs	r1, #0
 8003a44:	4618      	mov	r0, r3
 8003a46:	f001 fc8d 	bl	8005364 <RCCEx_PLL3_Config>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003a50:	e006      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a58:	e002      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003a5a:	bf00      	nop
 8003a5c:	e000      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003a5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d10a      	bne.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003a68:	4b4f      	ldr	r3, [pc, #316]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a6c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003a70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a76:	4a4c      	ldr	r2, [pc, #304]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a78:	430b      	orrs	r3, r1
 8003a7a:	6513      	str	r3, [r2, #80]	@ 0x50
 8003a7c:	e003      	b.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a82:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a8e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003a92:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003a96:	2300      	movs	r3, #0
 8003a98:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003a9c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	d053      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aaa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003aae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003ab2:	d035      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003ab4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003ab8:	d82e      	bhi.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003aba:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003abe:	d031      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003ac0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003ac4:	d828      	bhi.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003ac6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003aca:	d01a      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003acc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ad0:	d822      	bhi.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d003      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003ad6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003ada:	d007      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003adc:	e01c      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ade:	4b32      	ldr	r3, [pc, #200]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ae2:	4a31      	ldr	r2, [pc, #196]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ae4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ae8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003aea:	e01c      	b.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003af0:	3308      	adds	r3, #8
 8003af2:	2100      	movs	r1, #0
 8003af4:	4618      	mov	r0, r3
 8003af6:	f001 fb83 	bl	8005200 <RCCEx_PLL2_Config>
 8003afa:	4603      	mov	r3, r0
 8003afc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003b00:	e011      	b.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b06:	3328      	adds	r3, #40	@ 0x28
 8003b08:	2100      	movs	r1, #0
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f001 fc2a 	bl	8005364 <RCCEx_PLL3_Config>
 8003b10:	4603      	mov	r3, r0
 8003b12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003b16:	e006      	b.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b1e:	e002      	b.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003b20:	bf00      	nop
 8003b22:	e000      	b.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003b24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d10b      	bne.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003b2e:	4b1e      	ldr	r3, [pc, #120]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b32:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b3a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003b3e:	4a1a      	ldr	r2, [pc, #104]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b40:	430b      	orrs	r3, r1
 8003b42:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b44:	e003      	b.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b56:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003b5a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003b5e:	2300      	movs	r3, #0
 8003b60:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003b64:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003b68:	460b      	mov	r3, r1
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	d056      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b72:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003b76:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003b7a:	d038      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003b7c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003b80:	d831      	bhi.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003b82:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003b86:	d034      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003b88:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003b8c:	d82b      	bhi.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003b8e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003b92:	d01d      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003b94:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003b98:	d825      	bhi.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d006      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003b9e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ba2:	d00a      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003ba4:	e01f      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003ba6:	bf00      	nop
 8003ba8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bac:	4ba2      	ldr	r3, [pc, #648]	@ (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bb0:	4aa1      	ldr	r2, [pc, #644]	@ (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bb6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003bb8:	e01c      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bbe:	3308      	adds	r3, #8
 8003bc0:	2100      	movs	r1, #0
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f001 fb1c 	bl	8005200 <RCCEx_PLL2_Config>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003bce:	e011      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bd4:	3328      	adds	r3, #40	@ 0x28
 8003bd6:	2100      	movs	r1, #0
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f001 fbc3 	bl	8005364 <RCCEx_PLL3_Config>
 8003bde:	4603      	mov	r3, r0
 8003be0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003be4:	e006      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003bec:	e002      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003bee:	bf00      	nop
 8003bf0:	e000      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003bf2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bf4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d10b      	bne.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003bfc:	4b8e      	ldr	r3, [pc, #568]	@ (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c00:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c08:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003c0c:	4a8a      	ldr	r2, [pc, #552]	@ (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c0e:	430b      	orrs	r3, r1
 8003c10:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c12:	e003      	b.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c24:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003c28:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003c32:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003c36:	460b      	mov	r3, r1
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	d03a      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c42:	2b30      	cmp	r3, #48	@ 0x30
 8003c44:	d01f      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003c46:	2b30      	cmp	r3, #48	@ 0x30
 8003c48:	d819      	bhi.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003c4a:	2b20      	cmp	r3, #32
 8003c4c:	d00c      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003c4e:	2b20      	cmp	r3, #32
 8003c50:	d815      	bhi.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d019      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003c56:	2b10      	cmp	r3, #16
 8003c58:	d111      	bne.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c5a:	4b77      	ldr	r3, [pc, #476]	@ (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c5e:	4a76      	ldr	r2, [pc, #472]	@ (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c64:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003c66:	e011      	b.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c6c:	3308      	adds	r3, #8
 8003c6e:	2102      	movs	r1, #2
 8003c70:	4618      	mov	r0, r3
 8003c72:	f001 fac5 	bl	8005200 <RCCEx_PLL2_Config>
 8003c76:	4603      	mov	r3, r0
 8003c78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003c7c:	e006      	b.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c84:	e002      	b.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003c86:	bf00      	nop
 8003c88:	e000      	b.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003c8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d10a      	bne.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003c94:	4b68      	ldr	r3, [pc, #416]	@ (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c98:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003c9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ca0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ca2:	4a65      	ldr	r2, [pc, #404]	@ (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ca4:	430b      	orrs	r3, r1
 8003ca6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ca8:	e003      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003caa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cba:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003cbe:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003cc8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003ccc:	460b      	mov	r3, r1
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	d051      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cd8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003cdc:	d035      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003cde:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ce2:	d82e      	bhi.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003ce4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003ce8:	d031      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003cea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003cee:	d828      	bhi.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003cf0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cf4:	d01a      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003cf6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cfa:	d822      	bhi.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d003      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003d00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d04:	d007      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003d06:	e01c      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d08:	4b4b      	ldr	r3, [pc, #300]	@ (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d0c:	4a4a      	ldr	r2, [pc, #296]	@ (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003d14:	e01c      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d1a:	3308      	adds	r3, #8
 8003d1c:	2100      	movs	r1, #0
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f001 fa6e 	bl	8005200 <RCCEx_PLL2_Config>
 8003d24:	4603      	mov	r3, r0
 8003d26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003d2a:	e011      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003d2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d30:	3328      	adds	r3, #40	@ 0x28
 8003d32:	2100      	movs	r1, #0
 8003d34:	4618      	mov	r0, r3
 8003d36:	f001 fb15 	bl	8005364 <RCCEx_PLL3_Config>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003d40:	e006      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d48:	e002      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003d4a:	bf00      	nop
 8003d4c:	e000      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003d4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d10a      	bne.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003d58:	4b37      	ldr	r3, [pc, #220]	@ (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d5c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d66:	4a34      	ldr	r2, [pc, #208]	@ (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d68:	430b      	orrs	r3, r1
 8003d6a:	6513      	str	r3, [r2, #80]	@ 0x50
 8003d6c:	e003      	b.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d72:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d7e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003d82:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003d86:	2300      	movs	r3, #0
 8003d88:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003d8c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003d90:	460b      	mov	r3, r1
 8003d92:	4313      	orrs	r3, r2
 8003d94:	d056      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003da0:	d033      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003da2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003da6:	d82c      	bhi.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003da8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003dac:	d02f      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003dae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003db2:	d826      	bhi.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003db4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003db8:	d02b      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003dba:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003dbe:	d820      	bhi.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003dc0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003dc4:	d012      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003dc6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003dca:	d81a      	bhi.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d022      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003dd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003dd4:	d115      	bne.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dda:	3308      	adds	r3, #8
 8003ddc:	2101      	movs	r1, #1
 8003dde:	4618      	mov	r0, r3
 8003de0:	f001 fa0e 	bl	8005200 <RCCEx_PLL2_Config>
 8003de4:	4603      	mov	r3, r0
 8003de6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003dea:	e015      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003df0:	3328      	adds	r3, #40	@ 0x28
 8003df2:	2101      	movs	r1, #1
 8003df4:	4618      	mov	r0, r3
 8003df6:	f001 fab5 	bl	8005364 <RCCEx_PLL3_Config>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003e00:	e00a      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e08:	e006      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003e0a:	bf00      	nop
 8003e0c:	e004      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003e0e:	bf00      	nop
 8003e10:	e002      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003e12:	bf00      	nop
 8003e14:	e000      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003e16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d10d      	bne.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003e20:	4b05      	ldr	r3, [pc, #20]	@ (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e24:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e2e:	4a02      	ldr	r2, [pc, #8]	@ (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e30:	430b      	orrs	r3, r1
 8003e32:	6513      	str	r3, [r2, #80]	@ 0x50
 8003e34:	e006      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003e36:	bf00      	nop
 8003e38:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e40:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e4c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003e50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003e54:	2300      	movs	r3, #0
 8003e56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003e5a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003e5e:	460b      	mov	r3, r1
 8003e60:	4313      	orrs	r3, r2
 8003e62:	d055      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003e64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e68:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003e6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e70:	d033      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003e72:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e76:	d82c      	bhi.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003e78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e7c:	d02f      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e82:	d826      	bhi.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003e84:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003e88:	d02b      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003e8a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003e8e:	d820      	bhi.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003e90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e94:	d012      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003e96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e9a:	d81a      	bhi.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d022      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003ea0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003ea4:	d115      	bne.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eaa:	3308      	adds	r3, #8
 8003eac:	2101      	movs	r1, #1
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f001 f9a6 	bl	8005200 <RCCEx_PLL2_Config>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003eba:	e015      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ec0:	3328      	adds	r3, #40	@ 0x28
 8003ec2:	2101      	movs	r1, #1
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f001 fa4d 	bl	8005364 <RCCEx_PLL3_Config>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003ed0:	e00a      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ed8:	e006      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003eda:	bf00      	nop
 8003edc:	e004      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003ede:	bf00      	nop
 8003ee0:	e002      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003ee2:	bf00      	nop
 8003ee4:	e000      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003ee6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ee8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d10b      	bne.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003ef0:	4ba3      	ldr	r3, [pc, #652]	@ (8004180 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ef2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ef4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003efc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003f00:	4a9f      	ldr	r2, [pc, #636]	@ (8004180 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f02:	430b      	orrs	r3, r1
 8003f04:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f06:	e003      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f18:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003f1c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003f20:	2300      	movs	r3, #0
 8003f22:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003f26:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003f2a:	460b      	mov	r3, r1
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	d037      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003f30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f3a:	d00e      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003f3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f40:	d816      	bhi.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d018      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003f46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f4a:	d111      	bne.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f4c:	4b8c      	ldr	r3, [pc, #560]	@ (8004180 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f50:	4a8b      	ldr	r2, [pc, #556]	@ (8004180 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003f58:	e00f      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f5e:	3308      	adds	r3, #8
 8003f60:	2101      	movs	r1, #1
 8003f62:	4618      	mov	r0, r3
 8003f64:	f001 f94c 	bl	8005200 <RCCEx_PLL2_Config>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003f6e:	e004      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f76:	e000      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003f78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d10a      	bne.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003f82:	4b7f      	ldr	r3, [pc, #508]	@ (8004180 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f86:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f90:	4a7b      	ldr	r2, [pc, #492]	@ (8004180 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f92:	430b      	orrs	r3, r1
 8003f94:	6513      	str	r3, [r2, #80]	@ 0x50
 8003f96:	e003      	b.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f9c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003fac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003fb6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003fba:	460b      	mov	r3, r1
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	d039      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fc6:	2b03      	cmp	r3, #3
 8003fc8:	d81c      	bhi.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003fca:	a201      	add	r2, pc, #4	@ (adr r2, 8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd0:	0800400d 	.word	0x0800400d
 8003fd4:	08003fe1 	.word	0x08003fe1
 8003fd8:	08003fef 	.word	0x08003fef
 8003fdc:	0800400d 	.word	0x0800400d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fe0:	4b67      	ldr	r3, [pc, #412]	@ (8004180 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fe4:	4a66      	ldr	r2, [pc, #408]	@ (8004180 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fe6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003fec:	e00f      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ff2:	3308      	adds	r3, #8
 8003ff4:	2102      	movs	r1, #2
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f001 f902 	bl	8005200 <RCCEx_PLL2_Config>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004002:	e004      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800400a:	e000      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800400c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800400e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004012:	2b00      	cmp	r3, #0
 8004014:	d10a      	bne.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004016:	4b5a      	ldr	r3, [pc, #360]	@ (8004180 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800401a:	f023 0103 	bic.w	r1, r3, #3
 800401e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004022:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004024:	4a56      	ldr	r2, [pc, #344]	@ (8004180 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004026:	430b      	orrs	r3, r1
 8004028:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800402a:	e003      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800402c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004030:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004034:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800403c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004040:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004044:	2300      	movs	r3, #0
 8004046:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800404a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800404e:	460b      	mov	r3, r1
 8004050:	4313      	orrs	r3, r2
 8004052:	f000 809f 	beq.w	8004194 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004056:	4b4b      	ldr	r3, [pc, #300]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a4a      	ldr	r2, [pc, #296]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800405c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004060:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004062:	f7fd faa5 	bl	80015b0 <HAL_GetTick>
 8004066:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800406a:	e00b      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800406c:	f7fd faa0 	bl	80015b0 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	2b64      	cmp	r3, #100	@ 0x64
 800407a:	d903      	bls.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004082:	e005      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004084:	4b3f      	ldr	r3, [pc, #252]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800408c:	2b00      	cmp	r3, #0
 800408e:	d0ed      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004090:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004094:	2b00      	cmp	r3, #0
 8004096:	d179      	bne.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004098:	4b39      	ldr	r3, [pc, #228]	@ (8004180 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800409a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800409c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040a0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80040a4:	4053      	eors	r3, r2
 80040a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d015      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040ae:	4b34      	ldr	r3, [pc, #208]	@ (8004180 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040b6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80040ba:	4b31      	ldr	r3, [pc, #196]	@ (8004180 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040be:	4a30      	ldr	r2, [pc, #192]	@ (8004180 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040c4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040c6:	4b2e      	ldr	r3, [pc, #184]	@ (8004180 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040ca:	4a2d      	ldr	r2, [pc, #180]	@ (8004180 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040d0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80040d2:	4a2b      	ldr	r2, [pc, #172]	@ (8004180 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80040d8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80040da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80040e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040e6:	d118      	bne.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e8:	f7fd fa62 	bl	80015b0 <HAL_GetTick>
 80040ec:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80040f0:	e00d      	b.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040f2:	f7fd fa5d 	bl	80015b0 <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80040fc:	1ad2      	subs	r2, r2, r3
 80040fe:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004102:	429a      	cmp	r2, r3
 8004104:	d903      	bls.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800410c:	e005      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800410e:	4b1c      	ldr	r3, [pc, #112]	@ (8004180 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004110:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004112:	f003 0302 	and.w	r3, r3, #2
 8004116:	2b00      	cmp	r3, #0
 8004118:	d0eb      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800411a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800411e:	2b00      	cmp	r3, #0
 8004120:	d129      	bne.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004122:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004126:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800412a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800412e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004132:	d10e      	bne.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004134:	4b12      	ldr	r3, [pc, #72]	@ (8004180 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004136:	691b      	ldr	r3, [r3, #16]
 8004138:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800413c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004140:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004144:	091a      	lsrs	r2, r3, #4
 8004146:	4b10      	ldr	r3, [pc, #64]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004148:	4013      	ands	r3, r2
 800414a:	4a0d      	ldr	r2, [pc, #52]	@ (8004180 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800414c:	430b      	orrs	r3, r1
 800414e:	6113      	str	r3, [r2, #16]
 8004150:	e005      	b.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004152:	4b0b      	ldr	r3, [pc, #44]	@ (8004180 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	4a0a      	ldr	r2, [pc, #40]	@ (8004180 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004158:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800415c:	6113      	str	r3, [r2, #16]
 800415e:	4b08      	ldr	r3, [pc, #32]	@ (8004180 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004160:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004162:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004166:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800416a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800416e:	4a04      	ldr	r2, [pc, #16]	@ (8004180 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004170:	430b      	orrs	r3, r1
 8004172:	6713      	str	r3, [r2, #112]	@ 0x70
 8004174:	e00e      	b.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004176:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800417a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800417e:	e009      	b.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004180:	58024400 	.word	0x58024400
 8004184:	58024800 	.word	0x58024800
 8004188:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800418c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004190:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004194:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800419c:	f002 0301 	and.w	r3, r2, #1
 80041a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80041a4:	2300      	movs	r3, #0
 80041a6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80041aa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80041ae:	460b      	mov	r3, r1
 80041b0:	4313      	orrs	r3, r2
 80041b2:	f000 8089 	beq.w	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80041b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80041bc:	2b28      	cmp	r3, #40	@ 0x28
 80041be:	d86b      	bhi.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80041c0:	a201      	add	r2, pc, #4	@ (adr r2, 80041c8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80041c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c6:	bf00      	nop
 80041c8:	080042a1 	.word	0x080042a1
 80041cc:	08004299 	.word	0x08004299
 80041d0:	08004299 	.word	0x08004299
 80041d4:	08004299 	.word	0x08004299
 80041d8:	08004299 	.word	0x08004299
 80041dc:	08004299 	.word	0x08004299
 80041e0:	08004299 	.word	0x08004299
 80041e4:	08004299 	.word	0x08004299
 80041e8:	0800426d 	.word	0x0800426d
 80041ec:	08004299 	.word	0x08004299
 80041f0:	08004299 	.word	0x08004299
 80041f4:	08004299 	.word	0x08004299
 80041f8:	08004299 	.word	0x08004299
 80041fc:	08004299 	.word	0x08004299
 8004200:	08004299 	.word	0x08004299
 8004204:	08004299 	.word	0x08004299
 8004208:	08004283 	.word	0x08004283
 800420c:	08004299 	.word	0x08004299
 8004210:	08004299 	.word	0x08004299
 8004214:	08004299 	.word	0x08004299
 8004218:	08004299 	.word	0x08004299
 800421c:	08004299 	.word	0x08004299
 8004220:	08004299 	.word	0x08004299
 8004224:	08004299 	.word	0x08004299
 8004228:	080042a1 	.word	0x080042a1
 800422c:	08004299 	.word	0x08004299
 8004230:	08004299 	.word	0x08004299
 8004234:	08004299 	.word	0x08004299
 8004238:	08004299 	.word	0x08004299
 800423c:	08004299 	.word	0x08004299
 8004240:	08004299 	.word	0x08004299
 8004244:	08004299 	.word	0x08004299
 8004248:	080042a1 	.word	0x080042a1
 800424c:	08004299 	.word	0x08004299
 8004250:	08004299 	.word	0x08004299
 8004254:	08004299 	.word	0x08004299
 8004258:	08004299 	.word	0x08004299
 800425c:	08004299 	.word	0x08004299
 8004260:	08004299 	.word	0x08004299
 8004264:	08004299 	.word	0x08004299
 8004268:	080042a1 	.word	0x080042a1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800426c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004270:	3308      	adds	r3, #8
 8004272:	2101      	movs	r1, #1
 8004274:	4618      	mov	r0, r3
 8004276:	f000 ffc3 	bl	8005200 <RCCEx_PLL2_Config>
 800427a:	4603      	mov	r3, r0
 800427c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004280:	e00f      	b.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004282:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004286:	3328      	adds	r3, #40	@ 0x28
 8004288:	2101      	movs	r1, #1
 800428a:	4618      	mov	r0, r3
 800428c:	f001 f86a 	bl	8005364 <RCCEx_PLL3_Config>
 8004290:	4603      	mov	r3, r0
 8004292:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004296:	e004      	b.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800429e:	e000      	b.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80042a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d10a      	bne.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80042aa:	4bbf      	ldr	r3, [pc, #764]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80042ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042ae:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80042b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80042b8:	4abb      	ldr	r2, [pc, #748]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80042ba:	430b      	orrs	r3, r1
 80042bc:	6553      	str	r3, [r2, #84]	@ 0x54
 80042be:	e003      	b.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80042c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d0:	f002 0302 	and.w	r3, r2, #2
 80042d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80042d8:	2300      	movs	r3, #0
 80042da:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80042de:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80042e2:	460b      	mov	r3, r1
 80042e4:	4313      	orrs	r3, r2
 80042e6:	d041      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80042e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80042ee:	2b05      	cmp	r3, #5
 80042f0:	d824      	bhi.n	800433c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80042f2:	a201      	add	r2, pc, #4	@ (adr r2, 80042f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80042f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042f8:	08004345 	.word	0x08004345
 80042fc:	08004311 	.word	0x08004311
 8004300:	08004327 	.word	0x08004327
 8004304:	08004345 	.word	0x08004345
 8004308:	08004345 	.word	0x08004345
 800430c:	08004345 	.word	0x08004345
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004310:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004314:	3308      	adds	r3, #8
 8004316:	2101      	movs	r1, #1
 8004318:	4618      	mov	r0, r3
 800431a:	f000 ff71 	bl	8005200 <RCCEx_PLL2_Config>
 800431e:	4603      	mov	r3, r0
 8004320:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004324:	e00f      	b.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004326:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800432a:	3328      	adds	r3, #40	@ 0x28
 800432c:	2101      	movs	r1, #1
 800432e:	4618      	mov	r0, r3
 8004330:	f001 f818 	bl	8005364 <RCCEx_PLL3_Config>
 8004334:	4603      	mov	r3, r0
 8004336:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800433a:	e004      	b.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004342:	e000      	b.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004344:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004346:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800434a:	2b00      	cmp	r3, #0
 800434c:	d10a      	bne.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800434e:	4b96      	ldr	r3, [pc, #600]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004350:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004352:	f023 0107 	bic.w	r1, r3, #7
 8004356:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800435a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800435c:	4a92      	ldr	r2, [pc, #584]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800435e:	430b      	orrs	r3, r1
 8004360:	6553      	str	r3, [r2, #84]	@ 0x54
 8004362:	e003      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004364:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004368:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800436c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004374:	f002 0304 	and.w	r3, r2, #4
 8004378:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800437c:	2300      	movs	r3, #0
 800437e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004382:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004386:	460b      	mov	r3, r1
 8004388:	4313      	orrs	r3, r2
 800438a:	d044      	beq.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800438c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004390:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004394:	2b05      	cmp	r3, #5
 8004396:	d825      	bhi.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004398:	a201      	add	r2, pc, #4	@ (adr r2, 80043a0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800439a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800439e:	bf00      	nop
 80043a0:	080043ed 	.word	0x080043ed
 80043a4:	080043b9 	.word	0x080043b9
 80043a8:	080043cf 	.word	0x080043cf
 80043ac:	080043ed 	.word	0x080043ed
 80043b0:	080043ed 	.word	0x080043ed
 80043b4:	080043ed 	.word	0x080043ed
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80043b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043bc:	3308      	adds	r3, #8
 80043be:	2101      	movs	r1, #1
 80043c0:	4618      	mov	r0, r3
 80043c2:	f000 ff1d 	bl	8005200 <RCCEx_PLL2_Config>
 80043c6:	4603      	mov	r3, r0
 80043c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80043cc:	e00f      	b.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80043ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043d2:	3328      	adds	r3, #40	@ 0x28
 80043d4:	2101      	movs	r1, #1
 80043d6:	4618      	mov	r0, r3
 80043d8:	f000 ffc4 	bl	8005364 <RCCEx_PLL3_Config>
 80043dc:	4603      	mov	r3, r0
 80043de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80043e2:	e004      	b.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80043ea:	e000      	b.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80043ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d10b      	bne.n	800440e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80043f6:	4b6c      	ldr	r3, [pc, #432]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80043f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043fa:	f023 0107 	bic.w	r1, r3, #7
 80043fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004402:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004406:	4a68      	ldr	r2, [pc, #416]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004408:	430b      	orrs	r3, r1
 800440a:	6593      	str	r3, [r2, #88]	@ 0x58
 800440c:	e003      	b.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800440e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004412:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004416:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800441a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800441e:	f002 0320 	and.w	r3, r2, #32
 8004422:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004426:	2300      	movs	r3, #0
 8004428:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800442c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004430:	460b      	mov	r3, r1
 8004432:	4313      	orrs	r3, r2
 8004434:	d055      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004436:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800443a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800443e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004442:	d033      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004444:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004448:	d82c      	bhi.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800444a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800444e:	d02f      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004450:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004454:	d826      	bhi.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004456:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800445a:	d02b      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800445c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004460:	d820      	bhi.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004462:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004466:	d012      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004468:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800446c:	d81a      	bhi.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800446e:	2b00      	cmp	r3, #0
 8004470:	d022      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004472:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004476:	d115      	bne.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004478:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800447c:	3308      	adds	r3, #8
 800447e:	2100      	movs	r1, #0
 8004480:	4618      	mov	r0, r3
 8004482:	f000 febd 	bl	8005200 <RCCEx_PLL2_Config>
 8004486:	4603      	mov	r3, r0
 8004488:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800448c:	e015      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800448e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004492:	3328      	adds	r3, #40	@ 0x28
 8004494:	2102      	movs	r1, #2
 8004496:	4618      	mov	r0, r3
 8004498:	f000 ff64 	bl	8005364 <RCCEx_PLL3_Config>
 800449c:	4603      	mov	r3, r0
 800449e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80044a2:	e00a      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80044aa:	e006      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80044ac:	bf00      	nop
 80044ae:	e004      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80044b0:	bf00      	nop
 80044b2:	e002      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80044b4:	bf00      	nop
 80044b6:	e000      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80044b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d10b      	bne.n	80044da <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044c2:	4b39      	ldr	r3, [pc, #228]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80044c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044c6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80044ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044d2:	4a35      	ldr	r2, [pc, #212]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80044d4:	430b      	orrs	r3, r1
 80044d6:	6553      	str	r3, [r2, #84]	@ 0x54
 80044d8:	e003      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80044e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ea:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80044ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80044f2:	2300      	movs	r3, #0
 80044f4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80044f8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80044fc:	460b      	mov	r3, r1
 80044fe:	4313      	orrs	r3, r2
 8004500:	d058      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004502:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004506:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800450a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800450e:	d033      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004510:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004514:	d82c      	bhi.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004516:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800451a:	d02f      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800451c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004520:	d826      	bhi.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004522:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004526:	d02b      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004528:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800452c:	d820      	bhi.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800452e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004532:	d012      	beq.n	800455a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004534:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004538:	d81a      	bhi.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800453a:	2b00      	cmp	r3, #0
 800453c:	d022      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800453e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004542:	d115      	bne.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004544:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004548:	3308      	adds	r3, #8
 800454a:	2100      	movs	r1, #0
 800454c:	4618      	mov	r0, r3
 800454e:	f000 fe57 	bl	8005200 <RCCEx_PLL2_Config>
 8004552:	4603      	mov	r3, r0
 8004554:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004558:	e015      	b.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800455a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800455e:	3328      	adds	r3, #40	@ 0x28
 8004560:	2102      	movs	r1, #2
 8004562:	4618      	mov	r0, r3
 8004564:	f000 fefe 	bl	8005364 <RCCEx_PLL3_Config>
 8004568:	4603      	mov	r3, r0
 800456a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800456e:	e00a      	b.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004576:	e006      	b.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004578:	bf00      	nop
 800457a:	e004      	b.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800457c:	bf00      	nop
 800457e:	e002      	b.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004580:	bf00      	nop
 8004582:	e000      	b.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004584:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004586:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800458a:	2b00      	cmp	r3, #0
 800458c:	d10e      	bne.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800458e:	4b06      	ldr	r3, [pc, #24]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004590:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004592:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004596:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800459a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800459e:	4a02      	ldr	r2, [pc, #8]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80045a0:	430b      	orrs	r3, r1
 80045a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80045a4:	e006      	b.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80045a6:	bf00      	nop
 80045a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80045b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045bc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80045c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80045c4:	2300      	movs	r3, #0
 80045c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80045ca:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80045ce:	460b      	mov	r3, r1
 80045d0:	4313      	orrs	r3, r2
 80045d2:	d055      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80045d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80045dc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80045e0:	d033      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80045e2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80045e6:	d82c      	bhi.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80045e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045ec:	d02f      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80045ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045f2:	d826      	bhi.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80045f4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80045f8:	d02b      	beq.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80045fa:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80045fe:	d820      	bhi.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004600:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004604:	d012      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004606:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800460a:	d81a      	bhi.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800460c:	2b00      	cmp	r3, #0
 800460e:	d022      	beq.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004610:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004614:	d115      	bne.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004616:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800461a:	3308      	adds	r3, #8
 800461c:	2100      	movs	r1, #0
 800461e:	4618      	mov	r0, r3
 8004620:	f000 fdee 	bl	8005200 <RCCEx_PLL2_Config>
 8004624:	4603      	mov	r3, r0
 8004626:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800462a:	e015      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800462c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004630:	3328      	adds	r3, #40	@ 0x28
 8004632:	2102      	movs	r1, #2
 8004634:	4618      	mov	r0, r3
 8004636:	f000 fe95 	bl	8005364 <RCCEx_PLL3_Config>
 800463a:	4603      	mov	r3, r0
 800463c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004640:	e00a      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004648:	e006      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800464a:	bf00      	nop
 800464c:	e004      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800464e:	bf00      	nop
 8004650:	e002      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004652:	bf00      	nop
 8004654:	e000      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004656:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004658:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800465c:	2b00      	cmp	r3, #0
 800465e:	d10b      	bne.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004660:	4ba1      	ldr	r3, [pc, #644]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004662:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004664:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004668:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800466c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004670:	4a9d      	ldr	r2, [pc, #628]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004672:	430b      	orrs	r3, r1
 8004674:	6593      	str	r3, [r2, #88]	@ 0x58
 8004676:	e003      	b.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004678:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800467c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004680:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004688:	f002 0308 	and.w	r3, r2, #8
 800468c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004690:	2300      	movs	r3, #0
 8004692:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004696:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800469a:	460b      	mov	r3, r1
 800469c:	4313      	orrs	r3, r2
 800469e:	d01e      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80046a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80046a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046ac:	d10c      	bne.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80046ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046b2:	3328      	adds	r3, #40	@ 0x28
 80046b4:	2102      	movs	r1, #2
 80046b6:	4618      	mov	r0, r3
 80046b8:	f000 fe54 	bl	8005364 <RCCEx_PLL3_Config>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d002      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80046c8:	4b87      	ldr	r3, [pc, #540]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046cc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80046d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80046d8:	4a83      	ldr	r2, [pc, #524]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046da:	430b      	orrs	r3, r1
 80046dc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80046de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e6:	f002 0310 	and.w	r3, r2, #16
 80046ea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80046ee:	2300      	movs	r3, #0
 80046f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80046f4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80046f8:	460b      	mov	r3, r1
 80046fa:	4313      	orrs	r3, r2
 80046fc:	d01e      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80046fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004702:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004706:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800470a:	d10c      	bne.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800470c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004710:	3328      	adds	r3, #40	@ 0x28
 8004712:	2102      	movs	r1, #2
 8004714:	4618      	mov	r0, r3
 8004716:	f000 fe25 	bl	8005364 <RCCEx_PLL3_Config>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d002      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004726:	4b70      	ldr	r3, [pc, #448]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004728:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800472a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800472e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004732:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004736:	4a6c      	ldr	r2, [pc, #432]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004738:	430b      	orrs	r3, r1
 800473a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800473c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004744:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004748:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800474c:	2300      	movs	r3, #0
 800474e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004752:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004756:	460b      	mov	r3, r1
 8004758:	4313      	orrs	r3, r2
 800475a:	d03e      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800475c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004760:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004764:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004768:	d022      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800476a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800476e:	d81b      	bhi.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004770:	2b00      	cmp	r3, #0
 8004772:	d003      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004774:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004778:	d00b      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800477a:	e015      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800477c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004780:	3308      	adds	r3, #8
 8004782:	2100      	movs	r1, #0
 8004784:	4618      	mov	r0, r3
 8004786:	f000 fd3b 	bl	8005200 <RCCEx_PLL2_Config>
 800478a:	4603      	mov	r3, r0
 800478c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004790:	e00f      	b.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004792:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004796:	3328      	adds	r3, #40	@ 0x28
 8004798:	2102      	movs	r1, #2
 800479a:	4618      	mov	r0, r3
 800479c:	f000 fde2 	bl	8005364 <RCCEx_PLL3_Config>
 80047a0:	4603      	mov	r3, r0
 80047a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80047a6:	e004      	b.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80047ae:	e000      	b.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80047b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d10b      	bne.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80047ba:	4b4b      	ldr	r3, [pc, #300]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047be:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80047c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80047ca:	4a47      	ldr	r2, [pc, #284]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047cc:	430b      	orrs	r3, r1
 80047ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80047d0:	e003      	b.n	80047da <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80047da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80047e6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80047e8:	2300      	movs	r3, #0
 80047ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80047ec:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80047f0:	460b      	mov	r3, r1
 80047f2:	4313      	orrs	r3, r2
 80047f4:	d03b      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80047f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047fe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004802:	d01f      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004804:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004808:	d818      	bhi.n	800483c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800480a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800480e:	d003      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004810:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004814:	d007      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004816:	e011      	b.n	800483c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004818:	4b33      	ldr	r3, [pc, #204]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800481a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800481c:	4a32      	ldr	r2, [pc, #200]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800481e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004822:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004824:	e00f      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004826:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800482a:	3328      	adds	r3, #40	@ 0x28
 800482c:	2101      	movs	r1, #1
 800482e:	4618      	mov	r0, r3
 8004830:	f000 fd98 	bl	8005364 <RCCEx_PLL3_Config>
 8004834:	4603      	mov	r3, r0
 8004836:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800483a:	e004      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004842:	e000      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004844:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004846:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800484a:	2b00      	cmp	r3, #0
 800484c:	d10b      	bne.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800484e:	4b26      	ldr	r3, [pc, #152]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004850:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004852:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004856:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800485a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800485e:	4a22      	ldr	r2, [pc, #136]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004860:	430b      	orrs	r3, r1
 8004862:	6553      	str	r3, [r2, #84]	@ 0x54
 8004864:	e003      	b.n	800486e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004866:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800486a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800486e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004876:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800487a:	673b      	str	r3, [r7, #112]	@ 0x70
 800487c:	2300      	movs	r3, #0
 800487e:	677b      	str	r3, [r7, #116]	@ 0x74
 8004880:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004884:	460b      	mov	r3, r1
 8004886:	4313      	orrs	r3, r2
 8004888:	d034      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800488a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800488e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004890:	2b00      	cmp	r3, #0
 8004892:	d003      	beq.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004894:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004898:	d007      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800489a:	e011      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800489c:	4b12      	ldr	r3, [pc, #72]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800489e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048a0:	4a11      	ldr	r2, [pc, #68]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80048a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80048a8:	e00e      	b.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80048aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ae:	3308      	adds	r3, #8
 80048b0:	2102      	movs	r1, #2
 80048b2:	4618      	mov	r0, r3
 80048b4:	f000 fca4 	bl	8005200 <RCCEx_PLL2_Config>
 80048b8:	4603      	mov	r3, r0
 80048ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80048be:	e003      	b.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80048c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d10d      	bne.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80048d0:	4b05      	ldr	r3, [pc, #20]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80048d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048d4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80048d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048de:	4a02      	ldr	r2, [pc, #8]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80048e0:	430b      	orrs	r3, r1
 80048e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80048e4:	e006      	b.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80048e6:	bf00      	nop
 80048e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80048f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048fc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004900:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004902:	2300      	movs	r3, #0
 8004904:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004906:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800490a:	460b      	mov	r3, r1
 800490c:	4313      	orrs	r3, r2
 800490e:	d00c      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004910:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004914:	3328      	adds	r3, #40	@ 0x28
 8004916:	2102      	movs	r1, #2
 8004918:	4618      	mov	r0, r3
 800491a:	f000 fd23 	bl	8005364 <RCCEx_PLL3_Config>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d002      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800492a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800492e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004932:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004936:	663b      	str	r3, [r7, #96]	@ 0x60
 8004938:	2300      	movs	r3, #0
 800493a:	667b      	str	r3, [r7, #100]	@ 0x64
 800493c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004940:	460b      	mov	r3, r1
 8004942:	4313      	orrs	r3, r2
 8004944:	d038      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800494a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800494e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004952:	d018      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004954:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004958:	d811      	bhi.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800495a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800495e:	d014      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004960:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004964:	d80b      	bhi.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004966:	2b00      	cmp	r3, #0
 8004968:	d011      	beq.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800496a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800496e:	d106      	bne.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004970:	4bc3      	ldr	r3, [pc, #780]	@ (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004974:	4ac2      	ldr	r2, [pc, #776]	@ (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004976:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800497a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800497c:	e008      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004984:	e004      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004986:	bf00      	nop
 8004988:	e002      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800498a:	bf00      	nop
 800498c:	e000      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800498e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004990:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004994:	2b00      	cmp	r3, #0
 8004996:	d10b      	bne.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004998:	4bb9      	ldr	r3, [pc, #740]	@ (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800499a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800499c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80049a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049a8:	4ab5      	ldr	r2, [pc, #724]	@ (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049aa:	430b      	orrs	r3, r1
 80049ac:	6553      	str	r3, [r2, #84]	@ 0x54
 80049ae:	e003      	b.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80049b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80049c4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80049c6:	2300      	movs	r3, #0
 80049c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80049ca:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80049ce:	460b      	mov	r3, r1
 80049d0:	4313      	orrs	r3, r2
 80049d2:	d009      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80049d4:	4baa      	ldr	r3, [pc, #680]	@ (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049d8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80049dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049e2:	4aa7      	ldr	r2, [pc, #668]	@ (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049e4:	430b      	orrs	r3, r1
 80049e6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80049e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80049f4:	653b      	str	r3, [r7, #80]	@ 0x50
 80049f6:	2300      	movs	r3, #0
 80049f8:	657b      	str	r3, [r7, #84]	@ 0x54
 80049fa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80049fe:	460b      	mov	r3, r1
 8004a00:	4313      	orrs	r3, r2
 8004a02:	d00a      	beq.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004a04:	4b9e      	ldr	r3, [pc, #632]	@ (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a06:	691b      	ldr	r3, [r3, #16]
 8004a08:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a10:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004a14:	4a9a      	ldr	r2, [pc, #616]	@ (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a16:	430b      	orrs	r3, r1
 8004a18:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a22:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004a26:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a28:	2300      	movs	r3, #0
 8004a2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a2c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004a30:	460b      	mov	r3, r1
 8004a32:	4313      	orrs	r3, r2
 8004a34:	d009      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a36:	4b92      	ldr	r3, [pc, #584]	@ (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a3a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a44:	4a8e      	ldr	r2, [pc, #568]	@ (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a46:	430b      	orrs	r3, r1
 8004a48:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a52:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004a56:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a58:	2300      	movs	r3, #0
 8004a5a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a5c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004a60:	460b      	mov	r3, r1
 8004a62:	4313      	orrs	r3, r2
 8004a64:	d00e      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004a66:	4b86      	ldr	r3, [pc, #536]	@ (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	4a85      	ldr	r2, [pc, #532]	@ (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a6c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004a70:	6113      	str	r3, [r2, #16]
 8004a72:	4b83      	ldr	r3, [pc, #524]	@ (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a74:	6919      	ldr	r1, [r3, #16]
 8004a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a7a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004a7e:	4a80      	ldr	r2, [pc, #512]	@ (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a80:	430b      	orrs	r3, r1
 8004a82:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a8c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004a90:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a92:	2300      	movs	r3, #0
 8004a94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a96:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004a9a:	460b      	mov	r3, r1
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	d009      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004aa0:	4b77      	ldr	r3, [pc, #476]	@ (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004aa2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004aa4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004aae:	4a74      	ldr	r2, [pc, #464]	@ (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ab0:	430b      	orrs	r3, r1
 8004ab2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004ab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004abc:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004ac0:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ac6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004aca:	460b      	mov	r3, r1
 8004acc:	4313      	orrs	r3, r2
 8004ace:	d00a      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004ad0:	4b6b      	ldr	r3, [pc, #428]	@ (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ad2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ad4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004adc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ae0:	4a67      	ldr	r2, [pc, #412]	@ (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ae2:	430b      	orrs	r3, r1
 8004ae4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aee:	2100      	movs	r1, #0
 8004af0:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004af2:	f003 0301 	and.w	r3, r3, #1
 8004af6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004af8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004afc:	460b      	mov	r3, r1
 8004afe:	4313      	orrs	r3, r2
 8004b00:	d011      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b06:	3308      	adds	r3, #8
 8004b08:	2100      	movs	r1, #0
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f000 fb78 	bl	8005200 <RCCEx_PLL2_Config>
 8004b10:	4603      	mov	r3, r0
 8004b12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004b16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d003      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b2e:	2100      	movs	r1, #0
 8004b30:	6239      	str	r1, [r7, #32]
 8004b32:	f003 0302 	and.w	r3, r3, #2
 8004b36:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b38:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	d011      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b46:	3308      	adds	r3, #8
 8004b48:	2101      	movs	r1, #1
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f000 fb58 	bl	8005200 <RCCEx_PLL2_Config>
 8004b50:	4603      	mov	r3, r0
 8004b52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004b56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d003      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b6e:	2100      	movs	r1, #0
 8004b70:	61b9      	str	r1, [r7, #24]
 8004b72:	f003 0304 	and.w	r3, r3, #4
 8004b76:	61fb      	str	r3, [r7, #28]
 8004b78:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	d011      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b86:	3308      	adds	r3, #8
 8004b88:	2102      	movs	r1, #2
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f000 fb38 	bl	8005200 <RCCEx_PLL2_Config>
 8004b90:	4603      	mov	r3, r0
 8004b92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004b96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d003      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ba2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004ba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bae:	2100      	movs	r1, #0
 8004bb0:	6139      	str	r1, [r7, #16]
 8004bb2:	f003 0308 	and.w	r3, r3, #8
 8004bb6:	617b      	str	r3, [r7, #20]
 8004bb8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	d011      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bc6:	3328      	adds	r3, #40	@ 0x28
 8004bc8:	2100      	movs	r1, #0
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f000 fbca 	bl	8005364 <RCCEx_PLL3_Config>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004bd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d003      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004be2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004be6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bee:	2100      	movs	r1, #0
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	f003 0310 	and.w	r3, r3, #16
 8004bf6:	60fb      	str	r3, [r7, #12]
 8004bf8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	d011      	beq.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c06:	3328      	adds	r3, #40	@ 0x28
 8004c08:	2101      	movs	r1, #1
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f000 fbaa 	bl	8005364 <RCCEx_PLL3_Config>
 8004c10:	4603      	mov	r3, r0
 8004c12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004c16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d003      	beq.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c2e:	2100      	movs	r1, #0
 8004c30:	6039      	str	r1, [r7, #0]
 8004c32:	f003 0320 	and.w	r3, r3, #32
 8004c36:	607b      	str	r3, [r7, #4]
 8004c38:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	d011      	beq.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c46:	3328      	adds	r3, #40	@ 0x28
 8004c48:	2102      	movs	r1, #2
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f000 fb8a 	bl	8005364 <RCCEx_PLL3_Config>
 8004c50:	4603      	mov	r3, r0
 8004c52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004c56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d003      	beq.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004c66:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d101      	bne.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	e000      	b.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c80:	58024400 	.word	0x58024400

08004c84 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004c88:	f7fe fd96 	bl	80037b8 <HAL_RCC_GetHCLKFreq>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	4b06      	ldr	r3, [pc, #24]	@ (8004ca8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004c90:	6a1b      	ldr	r3, [r3, #32]
 8004c92:	091b      	lsrs	r3, r3, #4
 8004c94:	f003 0307 	and.w	r3, r3, #7
 8004c98:	4904      	ldr	r1, [pc, #16]	@ (8004cac <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004c9a:	5ccb      	ldrb	r3, [r1, r3]
 8004c9c:	f003 031f 	and.w	r3, r3, #31
 8004ca0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	58024400 	.word	0x58024400
 8004cac:	08008afc 	.word	0x08008afc

08004cb0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b089      	sub	sp, #36	@ 0x24
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004cb8:	4ba1      	ldr	r3, [pc, #644]	@ (8004f40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cbc:	f003 0303 	and.w	r3, r3, #3
 8004cc0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004cc2:	4b9f      	ldr	r3, [pc, #636]	@ (8004f40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cc6:	0b1b      	lsrs	r3, r3, #12
 8004cc8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ccc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004cce:	4b9c      	ldr	r3, [pc, #624]	@ (8004f40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cd2:	091b      	lsrs	r3, r3, #4
 8004cd4:	f003 0301 	and.w	r3, r3, #1
 8004cd8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004cda:	4b99      	ldr	r3, [pc, #612]	@ (8004f40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cde:	08db      	lsrs	r3, r3, #3
 8004ce0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ce4:	693a      	ldr	r2, [r7, #16]
 8004ce6:	fb02 f303 	mul.w	r3, r2, r3
 8004cea:	ee07 3a90 	vmov	s15, r3
 8004cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cf2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	f000 8111 	beq.w	8004f20 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	f000 8083 	beq.w	8004e0c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	2b02      	cmp	r3, #2
 8004d0a:	f200 80a1 	bhi.w	8004e50 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d003      	beq.n	8004d1c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004d14:	69bb      	ldr	r3, [r7, #24]
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d056      	beq.n	8004dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004d1a:	e099      	b.n	8004e50 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d1c:	4b88      	ldr	r3, [pc, #544]	@ (8004f40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0320 	and.w	r3, r3, #32
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d02d      	beq.n	8004d84 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004d28:	4b85      	ldr	r3, [pc, #532]	@ (8004f40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	08db      	lsrs	r3, r3, #3
 8004d2e:	f003 0303 	and.w	r3, r3, #3
 8004d32:	4a84      	ldr	r2, [pc, #528]	@ (8004f44 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004d34:	fa22 f303 	lsr.w	r3, r2, r3
 8004d38:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	ee07 3a90 	vmov	s15, r3
 8004d40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	ee07 3a90 	vmov	s15, r3
 8004d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d52:	4b7b      	ldr	r3, [pc, #492]	@ (8004f40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d5a:	ee07 3a90 	vmov	s15, r3
 8004d5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d62:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d66:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004f48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004d6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d7e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004d82:	e087      	b.n	8004e94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	ee07 3a90 	vmov	s15, r3
 8004d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d8e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004f4c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004d92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d96:	4b6a      	ldr	r3, [pc, #424]	@ (8004f40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d9e:	ee07 3a90 	vmov	s15, r3
 8004da2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004da6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004daa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004f48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004dae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004db2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004db6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004dba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004dc6:	e065      	b.n	8004e94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	ee07 3a90 	vmov	s15, r3
 8004dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dd2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004f50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004dd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dda:	4b59      	ldr	r3, [pc, #356]	@ (8004f40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ddc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004de2:	ee07 3a90 	vmov	s15, r3
 8004de6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dea:	ed97 6a03 	vldr	s12, [r7, #12]
 8004dee:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004f48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004df2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004df6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dfa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004dfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e0a:	e043      	b.n	8004e94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	ee07 3a90 	vmov	s15, r3
 8004e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e16:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004f54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004e1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e1e:	4b48      	ldr	r3, [pc, #288]	@ (8004f40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e26:	ee07 3a90 	vmov	s15, r3
 8004e2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e32:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004f48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e4e:	e021      	b.n	8004e94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	ee07 3a90 	vmov	s15, r3
 8004e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e5a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004f50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004e5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e62:	4b37      	ldr	r3, [pc, #220]	@ (8004f40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e6a:	ee07 3a90 	vmov	s15, r3
 8004e6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e72:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e76:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004f48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e92:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004e94:	4b2a      	ldr	r3, [pc, #168]	@ (8004f40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e98:	0a5b      	lsrs	r3, r3, #9
 8004e9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e9e:	ee07 3a90 	vmov	s15, r3
 8004ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ea6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004eaa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004eae:	edd7 6a07 	vldr	s13, [r7, #28]
 8004eb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004eb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004eba:	ee17 2a90 	vmov	r2, s15
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004ec2:	4b1f      	ldr	r3, [pc, #124]	@ (8004f40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ec4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ec6:	0c1b      	lsrs	r3, r3, #16
 8004ec8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ecc:	ee07 3a90 	vmov	s15, r3
 8004ed0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ed4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004ed8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004edc:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ee0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ee4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ee8:	ee17 2a90 	vmov	r2, s15
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004ef0:	4b13      	ldr	r3, [pc, #76]	@ (8004f40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ef4:	0e1b      	lsrs	r3, r3, #24
 8004ef6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004efa:	ee07 3a90 	vmov	s15, r3
 8004efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f02:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004f06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f16:	ee17 2a90 	vmov	r2, s15
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004f1e:	e008      	b.n	8004f32 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	609a      	str	r2, [r3, #8]
}
 8004f32:	bf00      	nop
 8004f34:	3724      	adds	r7, #36	@ 0x24
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr
 8004f3e:	bf00      	nop
 8004f40:	58024400 	.word	0x58024400
 8004f44:	03d09000 	.word	0x03d09000
 8004f48:	46000000 	.word	0x46000000
 8004f4c:	4c742400 	.word	0x4c742400
 8004f50:	4a742400 	.word	0x4a742400
 8004f54:	4af42400 	.word	0x4af42400

08004f58 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b089      	sub	sp, #36	@ 0x24
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004f60:	4ba1      	ldr	r3, [pc, #644]	@ (80051e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f64:	f003 0303 	and.w	r3, r3, #3
 8004f68:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004f6a:	4b9f      	ldr	r3, [pc, #636]	@ (80051e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f6e:	0d1b      	lsrs	r3, r3, #20
 8004f70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f74:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004f76:	4b9c      	ldr	r3, [pc, #624]	@ (80051e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f7a:	0a1b      	lsrs	r3, r3, #8
 8004f7c:	f003 0301 	and.w	r3, r3, #1
 8004f80:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004f82:	4b99      	ldr	r3, [pc, #612]	@ (80051e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f86:	08db      	lsrs	r3, r3, #3
 8004f88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004f8c:	693a      	ldr	r2, [r7, #16]
 8004f8e:	fb02 f303 	mul.w	r3, r2, r3
 8004f92:	ee07 3a90 	vmov	s15, r3
 8004f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f9a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	f000 8111 	beq.w	80051c8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004fa6:	69bb      	ldr	r3, [r7, #24]
 8004fa8:	2b02      	cmp	r3, #2
 8004faa:	f000 8083 	beq.w	80050b4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004fae:	69bb      	ldr	r3, [r7, #24]
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	f200 80a1 	bhi.w	80050f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d003      	beq.n	8004fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d056      	beq.n	8005070 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004fc2:	e099      	b.n	80050f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004fc4:	4b88      	ldr	r3, [pc, #544]	@ (80051e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0320 	and.w	r3, r3, #32
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d02d      	beq.n	800502c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004fd0:	4b85      	ldr	r3, [pc, #532]	@ (80051e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	08db      	lsrs	r3, r3, #3
 8004fd6:	f003 0303 	and.w	r3, r3, #3
 8004fda:	4a84      	ldr	r2, [pc, #528]	@ (80051ec <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004fdc:	fa22 f303 	lsr.w	r3, r2, r3
 8004fe0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	ee07 3a90 	vmov	s15, r3
 8004fe8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	ee07 3a90 	vmov	s15, r3
 8004ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ff6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ffa:	4b7b      	ldr	r3, [pc, #492]	@ (80051e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ffe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005002:	ee07 3a90 	vmov	s15, r3
 8005006:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800500a:	ed97 6a03 	vldr	s12, [r7, #12]
 800500e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80051f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005012:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005016:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800501a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800501e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005022:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005026:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800502a:	e087      	b.n	800513c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	ee07 3a90 	vmov	s15, r3
 8005032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005036:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80051f4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800503a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800503e:	4b6a      	ldr	r3, [pc, #424]	@ (80051e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005042:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005046:	ee07 3a90 	vmov	s15, r3
 800504a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800504e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005052:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80051f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005056:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800505a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800505e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005062:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800506a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800506e:	e065      	b.n	800513c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	ee07 3a90 	vmov	s15, r3
 8005076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800507a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80051f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800507e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005082:	4b59      	ldr	r3, [pc, #356]	@ (80051e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005086:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800508a:	ee07 3a90 	vmov	s15, r3
 800508e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005092:	ed97 6a03 	vldr	s12, [r7, #12]
 8005096:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80051f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800509a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800509e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80050b2:	e043      	b.n	800513c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	ee07 3a90 	vmov	s15, r3
 80050ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050be:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80051fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80050c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050c6:	4b48      	ldr	r3, [pc, #288]	@ (80051e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050ce:	ee07 3a90 	vmov	s15, r3
 80050d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80050da:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80051f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80050de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80050f6:	e021      	b.n	800513c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	ee07 3a90 	vmov	s15, r3
 80050fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005102:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80051f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005106:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800510a:	4b37      	ldr	r3, [pc, #220]	@ (80051e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800510c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800510e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005112:	ee07 3a90 	vmov	s15, r3
 8005116:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800511a:	ed97 6a03 	vldr	s12, [r7, #12]
 800511e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80051f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005122:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005126:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800512a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800512e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005132:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005136:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800513a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800513c:	4b2a      	ldr	r3, [pc, #168]	@ (80051e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800513e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005140:	0a5b      	lsrs	r3, r3, #9
 8005142:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005146:	ee07 3a90 	vmov	s15, r3
 800514a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800514e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005152:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005156:	edd7 6a07 	vldr	s13, [r7, #28]
 800515a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800515e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005162:	ee17 2a90 	vmov	r2, s15
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800516a:	4b1f      	ldr	r3, [pc, #124]	@ (80051e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800516c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800516e:	0c1b      	lsrs	r3, r3, #16
 8005170:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005174:	ee07 3a90 	vmov	s15, r3
 8005178:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800517c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005180:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005184:	edd7 6a07 	vldr	s13, [r7, #28]
 8005188:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800518c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005190:	ee17 2a90 	vmov	r2, s15
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005198:	4b13      	ldr	r3, [pc, #76]	@ (80051e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800519a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800519c:	0e1b      	lsrs	r3, r3, #24
 800519e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80051a2:	ee07 3a90 	vmov	s15, r3
 80051a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80051ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80051b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80051b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051be:	ee17 2a90 	vmov	r2, s15
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80051c6:	e008      	b.n	80051da <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	609a      	str	r2, [r3, #8]
}
 80051da:	bf00      	nop
 80051dc:	3724      	adds	r7, #36	@ 0x24
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop
 80051e8:	58024400 	.word	0x58024400
 80051ec:	03d09000 	.word	0x03d09000
 80051f0:	46000000 	.word	0x46000000
 80051f4:	4c742400 	.word	0x4c742400
 80051f8:	4a742400 	.word	0x4a742400
 80051fc:	4af42400 	.word	0x4af42400

08005200 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800520a:	2300      	movs	r3, #0
 800520c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800520e:	4b53      	ldr	r3, [pc, #332]	@ (800535c <RCCEx_PLL2_Config+0x15c>)
 8005210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005212:	f003 0303 	and.w	r3, r3, #3
 8005216:	2b03      	cmp	r3, #3
 8005218:	d101      	bne.n	800521e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e099      	b.n	8005352 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800521e:	4b4f      	ldr	r3, [pc, #316]	@ (800535c <RCCEx_PLL2_Config+0x15c>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a4e      	ldr	r2, [pc, #312]	@ (800535c <RCCEx_PLL2_Config+0x15c>)
 8005224:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005228:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800522a:	f7fc f9c1 	bl	80015b0 <HAL_GetTick>
 800522e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005230:	e008      	b.n	8005244 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005232:	f7fc f9bd 	bl	80015b0 <HAL_GetTick>
 8005236:	4602      	mov	r2, r0
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	1ad3      	subs	r3, r2, r3
 800523c:	2b02      	cmp	r3, #2
 800523e:	d901      	bls.n	8005244 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005240:	2303      	movs	r3, #3
 8005242:	e086      	b.n	8005352 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005244:	4b45      	ldr	r3, [pc, #276]	@ (800535c <RCCEx_PLL2_Config+0x15c>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800524c:	2b00      	cmp	r3, #0
 800524e:	d1f0      	bne.n	8005232 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005250:	4b42      	ldr	r3, [pc, #264]	@ (800535c <RCCEx_PLL2_Config+0x15c>)
 8005252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005254:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	031b      	lsls	r3, r3, #12
 800525e:	493f      	ldr	r1, [pc, #252]	@ (800535c <RCCEx_PLL2_Config+0x15c>)
 8005260:	4313      	orrs	r3, r2
 8005262:	628b      	str	r3, [r1, #40]	@ 0x28
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	3b01      	subs	r3, #1
 800526a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	3b01      	subs	r3, #1
 8005274:	025b      	lsls	r3, r3, #9
 8005276:	b29b      	uxth	r3, r3
 8005278:	431a      	orrs	r2, r3
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	3b01      	subs	r3, #1
 8005280:	041b      	lsls	r3, r3, #16
 8005282:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005286:	431a      	orrs	r2, r3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	691b      	ldr	r3, [r3, #16]
 800528c:	3b01      	subs	r3, #1
 800528e:	061b      	lsls	r3, r3, #24
 8005290:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005294:	4931      	ldr	r1, [pc, #196]	@ (800535c <RCCEx_PLL2_Config+0x15c>)
 8005296:	4313      	orrs	r3, r2
 8005298:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800529a:	4b30      	ldr	r3, [pc, #192]	@ (800535c <RCCEx_PLL2_Config+0x15c>)
 800529c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800529e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	695b      	ldr	r3, [r3, #20]
 80052a6:	492d      	ldr	r1, [pc, #180]	@ (800535c <RCCEx_PLL2_Config+0x15c>)
 80052a8:	4313      	orrs	r3, r2
 80052aa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80052ac:	4b2b      	ldr	r3, [pc, #172]	@ (800535c <RCCEx_PLL2_Config+0x15c>)
 80052ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052b0:	f023 0220 	bic.w	r2, r3, #32
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	699b      	ldr	r3, [r3, #24]
 80052b8:	4928      	ldr	r1, [pc, #160]	@ (800535c <RCCEx_PLL2_Config+0x15c>)
 80052ba:	4313      	orrs	r3, r2
 80052bc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80052be:	4b27      	ldr	r3, [pc, #156]	@ (800535c <RCCEx_PLL2_Config+0x15c>)
 80052c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052c2:	4a26      	ldr	r2, [pc, #152]	@ (800535c <RCCEx_PLL2_Config+0x15c>)
 80052c4:	f023 0310 	bic.w	r3, r3, #16
 80052c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80052ca:	4b24      	ldr	r3, [pc, #144]	@ (800535c <RCCEx_PLL2_Config+0x15c>)
 80052cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80052ce:	4b24      	ldr	r3, [pc, #144]	@ (8005360 <RCCEx_PLL2_Config+0x160>)
 80052d0:	4013      	ands	r3, r2
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	69d2      	ldr	r2, [r2, #28]
 80052d6:	00d2      	lsls	r2, r2, #3
 80052d8:	4920      	ldr	r1, [pc, #128]	@ (800535c <RCCEx_PLL2_Config+0x15c>)
 80052da:	4313      	orrs	r3, r2
 80052dc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80052de:	4b1f      	ldr	r3, [pc, #124]	@ (800535c <RCCEx_PLL2_Config+0x15c>)
 80052e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052e2:	4a1e      	ldr	r2, [pc, #120]	@ (800535c <RCCEx_PLL2_Config+0x15c>)
 80052e4:	f043 0310 	orr.w	r3, r3, #16
 80052e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d106      	bne.n	80052fe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80052f0:	4b1a      	ldr	r3, [pc, #104]	@ (800535c <RCCEx_PLL2_Config+0x15c>)
 80052f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052f4:	4a19      	ldr	r2, [pc, #100]	@ (800535c <RCCEx_PLL2_Config+0x15c>)
 80052f6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80052fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80052fc:	e00f      	b.n	800531e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	2b01      	cmp	r3, #1
 8005302:	d106      	bne.n	8005312 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005304:	4b15      	ldr	r3, [pc, #84]	@ (800535c <RCCEx_PLL2_Config+0x15c>)
 8005306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005308:	4a14      	ldr	r2, [pc, #80]	@ (800535c <RCCEx_PLL2_Config+0x15c>)
 800530a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800530e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005310:	e005      	b.n	800531e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005312:	4b12      	ldr	r3, [pc, #72]	@ (800535c <RCCEx_PLL2_Config+0x15c>)
 8005314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005316:	4a11      	ldr	r2, [pc, #68]	@ (800535c <RCCEx_PLL2_Config+0x15c>)
 8005318:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800531c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800531e:	4b0f      	ldr	r3, [pc, #60]	@ (800535c <RCCEx_PLL2_Config+0x15c>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a0e      	ldr	r2, [pc, #56]	@ (800535c <RCCEx_PLL2_Config+0x15c>)
 8005324:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005328:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800532a:	f7fc f941 	bl	80015b0 <HAL_GetTick>
 800532e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005330:	e008      	b.n	8005344 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005332:	f7fc f93d 	bl	80015b0 <HAL_GetTick>
 8005336:	4602      	mov	r2, r0
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	1ad3      	subs	r3, r2, r3
 800533c:	2b02      	cmp	r3, #2
 800533e:	d901      	bls.n	8005344 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005340:	2303      	movs	r3, #3
 8005342:	e006      	b.n	8005352 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005344:	4b05      	ldr	r3, [pc, #20]	@ (800535c <RCCEx_PLL2_Config+0x15c>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800534c:	2b00      	cmp	r3, #0
 800534e:	d0f0      	beq.n	8005332 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005350:	7bfb      	ldrb	r3, [r7, #15]
}
 8005352:	4618      	mov	r0, r3
 8005354:	3710      	adds	r7, #16
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
 800535a:	bf00      	nop
 800535c:	58024400 	.word	0x58024400
 8005360:	ffff0007 	.word	0xffff0007

08005364 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800536e:	2300      	movs	r3, #0
 8005370:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005372:	4b53      	ldr	r3, [pc, #332]	@ (80054c0 <RCCEx_PLL3_Config+0x15c>)
 8005374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005376:	f003 0303 	and.w	r3, r3, #3
 800537a:	2b03      	cmp	r3, #3
 800537c:	d101      	bne.n	8005382 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e099      	b.n	80054b6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005382:	4b4f      	ldr	r3, [pc, #316]	@ (80054c0 <RCCEx_PLL3_Config+0x15c>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a4e      	ldr	r2, [pc, #312]	@ (80054c0 <RCCEx_PLL3_Config+0x15c>)
 8005388:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800538c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800538e:	f7fc f90f 	bl	80015b0 <HAL_GetTick>
 8005392:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005394:	e008      	b.n	80053a8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005396:	f7fc f90b 	bl	80015b0 <HAL_GetTick>
 800539a:	4602      	mov	r2, r0
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	2b02      	cmp	r3, #2
 80053a2:	d901      	bls.n	80053a8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80053a4:	2303      	movs	r3, #3
 80053a6:	e086      	b.n	80054b6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80053a8:	4b45      	ldr	r3, [pc, #276]	@ (80054c0 <RCCEx_PLL3_Config+0x15c>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d1f0      	bne.n	8005396 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80053b4:	4b42      	ldr	r3, [pc, #264]	@ (80054c0 <RCCEx_PLL3_Config+0x15c>)
 80053b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053b8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	051b      	lsls	r3, r3, #20
 80053c2:	493f      	ldr	r1, [pc, #252]	@ (80054c0 <RCCEx_PLL3_Config+0x15c>)
 80053c4:	4313      	orrs	r3, r2
 80053c6:	628b      	str	r3, [r1, #40]	@ 0x28
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	3b01      	subs	r3, #1
 80053ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	3b01      	subs	r3, #1
 80053d8:	025b      	lsls	r3, r3, #9
 80053da:	b29b      	uxth	r3, r3
 80053dc:	431a      	orrs	r2, r3
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	3b01      	subs	r3, #1
 80053e4:	041b      	lsls	r3, r3, #16
 80053e6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80053ea:	431a      	orrs	r2, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	3b01      	subs	r3, #1
 80053f2:	061b      	lsls	r3, r3, #24
 80053f4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80053f8:	4931      	ldr	r1, [pc, #196]	@ (80054c0 <RCCEx_PLL3_Config+0x15c>)
 80053fa:	4313      	orrs	r3, r2
 80053fc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80053fe:	4b30      	ldr	r3, [pc, #192]	@ (80054c0 <RCCEx_PLL3_Config+0x15c>)
 8005400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005402:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	695b      	ldr	r3, [r3, #20]
 800540a:	492d      	ldr	r1, [pc, #180]	@ (80054c0 <RCCEx_PLL3_Config+0x15c>)
 800540c:	4313      	orrs	r3, r2
 800540e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005410:	4b2b      	ldr	r3, [pc, #172]	@ (80054c0 <RCCEx_PLL3_Config+0x15c>)
 8005412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005414:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	699b      	ldr	r3, [r3, #24]
 800541c:	4928      	ldr	r1, [pc, #160]	@ (80054c0 <RCCEx_PLL3_Config+0x15c>)
 800541e:	4313      	orrs	r3, r2
 8005420:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005422:	4b27      	ldr	r3, [pc, #156]	@ (80054c0 <RCCEx_PLL3_Config+0x15c>)
 8005424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005426:	4a26      	ldr	r2, [pc, #152]	@ (80054c0 <RCCEx_PLL3_Config+0x15c>)
 8005428:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800542c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800542e:	4b24      	ldr	r3, [pc, #144]	@ (80054c0 <RCCEx_PLL3_Config+0x15c>)
 8005430:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005432:	4b24      	ldr	r3, [pc, #144]	@ (80054c4 <RCCEx_PLL3_Config+0x160>)
 8005434:	4013      	ands	r3, r2
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	69d2      	ldr	r2, [r2, #28]
 800543a:	00d2      	lsls	r2, r2, #3
 800543c:	4920      	ldr	r1, [pc, #128]	@ (80054c0 <RCCEx_PLL3_Config+0x15c>)
 800543e:	4313      	orrs	r3, r2
 8005440:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005442:	4b1f      	ldr	r3, [pc, #124]	@ (80054c0 <RCCEx_PLL3_Config+0x15c>)
 8005444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005446:	4a1e      	ldr	r2, [pc, #120]	@ (80054c0 <RCCEx_PLL3_Config+0x15c>)
 8005448:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800544c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d106      	bne.n	8005462 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005454:	4b1a      	ldr	r3, [pc, #104]	@ (80054c0 <RCCEx_PLL3_Config+0x15c>)
 8005456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005458:	4a19      	ldr	r2, [pc, #100]	@ (80054c0 <RCCEx_PLL3_Config+0x15c>)
 800545a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800545e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005460:	e00f      	b.n	8005482 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	2b01      	cmp	r3, #1
 8005466:	d106      	bne.n	8005476 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005468:	4b15      	ldr	r3, [pc, #84]	@ (80054c0 <RCCEx_PLL3_Config+0x15c>)
 800546a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800546c:	4a14      	ldr	r2, [pc, #80]	@ (80054c0 <RCCEx_PLL3_Config+0x15c>)
 800546e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005472:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005474:	e005      	b.n	8005482 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005476:	4b12      	ldr	r3, [pc, #72]	@ (80054c0 <RCCEx_PLL3_Config+0x15c>)
 8005478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800547a:	4a11      	ldr	r2, [pc, #68]	@ (80054c0 <RCCEx_PLL3_Config+0x15c>)
 800547c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005480:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005482:	4b0f      	ldr	r3, [pc, #60]	@ (80054c0 <RCCEx_PLL3_Config+0x15c>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a0e      	ldr	r2, [pc, #56]	@ (80054c0 <RCCEx_PLL3_Config+0x15c>)
 8005488:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800548c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800548e:	f7fc f88f 	bl	80015b0 <HAL_GetTick>
 8005492:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005494:	e008      	b.n	80054a8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005496:	f7fc f88b 	bl	80015b0 <HAL_GetTick>
 800549a:	4602      	mov	r2, r0
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	1ad3      	subs	r3, r2, r3
 80054a0:	2b02      	cmp	r3, #2
 80054a2:	d901      	bls.n	80054a8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80054a4:	2303      	movs	r3, #3
 80054a6:	e006      	b.n	80054b6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80054a8:	4b05      	ldr	r3, [pc, #20]	@ (80054c0 <RCCEx_PLL3_Config+0x15c>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d0f0      	beq.n	8005496 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80054b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3710      	adds	r7, #16
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	bf00      	nop
 80054c0:	58024400 	.word	0x58024400
 80054c4:	ffff0007 	.word	0xffff0007

080054c8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d071      	beq.n	80055be <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d106      	bne.n	80054f4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f7fb fba0 	bl	8000c34 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2202      	movs	r2, #2
 80054f8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	f003 0310 	and.w	r3, r3, #16
 8005506:	2b10      	cmp	r3, #16
 8005508:	d050      	beq.n	80055ac <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	22ca      	movs	r2, #202	@ 0xca
 8005510:	625a      	str	r2, [r3, #36]	@ 0x24
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	2253      	movs	r2, #83	@ 0x53
 8005518:	625a      	str	r2, [r3, #36]	@ 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 fbce 	bl	8005cbc <RTC_EnterInitMode>
 8005520:	4603      	mov	r3, r0
 8005522:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8005524:	7bfb      	ldrb	r3, [r7, #15]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d124      	bne.n	8005574 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	6899      	ldr	r1, [r3, #8]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	4b24      	ldr	r3, [pc, #144]	@ (80055c8 <HAL_RTC_Init+0x100>)
 8005536:	400b      	ands	r3, r1
 8005538:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	6899      	ldr	r1, [r3, #8]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	685a      	ldr	r2, [r3, #4]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	691b      	ldr	r3, [r3, #16]
 8005548:	431a      	orrs	r2, r3
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	699b      	ldr	r3, [r3, #24]
 800554e:	431a      	orrs	r2, r3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	430a      	orrs	r2, r1
 8005556:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	0419      	lsls	r1, r3, #16
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	68da      	ldr	r2, [r3, #12]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	430a      	orrs	r2, r1
 8005568:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 fbda 	bl	8005d24 <RTC_ExitInitMode>
 8005570:	4603      	mov	r3, r0
 8005572:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 8005574:	7bfb      	ldrb	r3, [r7, #15]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d113      	bne.n	80055a2 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f022 0203 	bic.w	r2, r2, #3
 8005588:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	69da      	ldr	r2, [r3, #28]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	695b      	ldr	r3, [r3, #20]
 8005598:	431a      	orrs	r2, r3
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	430a      	orrs	r2, r1
 80055a0:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	22ff      	movs	r2, #255	@ 0xff
 80055a8:	625a      	str	r2, [r3, #36]	@ 0x24
 80055aa:	e001      	b.n	80055b0 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80055ac:	2300      	movs	r3, #0
 80055ae:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80055b0:	7bfb      	ldrb	r3, [r7, #15]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d103      	bne.n	80055be <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2201      	movs	r2, #1
 80055ba:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  /* return status */
  return status;
 80055be:	7bfb      	ldrb	r3, [r7, #15]
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3710      	adds	r7, #16
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	ff8fffbf 	.word	0xff8fffbf

080055cc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80055cc:	b590      	push	{r4, r7, lr}
 80055ce:	b087      	sub	sp, #28
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	60b9      	str	r1, [r7, #8]
 80055d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d101      	bne.n	80055e6 <HAL_RTC_SetTime+0x1a>
 80055e2:	2302      	movs	r3, #2
 80055e4:	e089      	b.n	80056fa <HAL_RTC_SetTime+0x12e>
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2201      	movs	r2, #1
 80055ea:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2202      	movs	r2, #2
 80055f2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	22ca      	movs	r2, #202	@ 0xca
 80055fc:	625a      	str	r2, [r3, #36]	@ 0x24
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2253      	movs	r2, #83	@ 0x53
 8005604:	625a      	str	r2, [r3, #36]	@ 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005606:	68f8      	ldr	r0, [r7, #12]
 8005608:	f000 fb58 	bl	8005cbc <RTC_EnterInitMode>
 800560c:	4603      	mov	r3, r0
 800560e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005610:	7cfb      	ldrb	r3, [r7, #19]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d161      	bne.n	80056da <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d126      	bne.n	800566a <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005626:	2b00      	cmp	r3, #0
 8005628:	d102      	bne.n	8005630 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	2200      	movs	r2, #0
 800562e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	4618      	mov	r0, r3
 8005636:	f000 fbb3 	bl	8005da0 <RTC_ByteToBcd2>
 800563a:	4603      	mov	r3, r0
 800563c:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	785b      	ldrb	r3, [r3, #1]
 8005642:	4618      	mov	r0, r3
 8005644:	f000 fbac 	bl	8005da0 <RTC_ByteToBcd2>
 8005648:	4603      	mov	r3, r0
 800564a:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800564c:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	789b      	ldrb	r3, [r3, #2]
 8005652:	4618      	mov	r0, r3
 8005654:	f000 fba4 	bl	8005da0 <RTC_ByteToBcd2>
 8005658:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800565a:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	78db      	ldrb	r3, [r3, #3]
 8005662:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005664:	4313      	orrs	r3, r2
 8005666:	617b      	str	r3, [r7, #20]
 8005668:	e018      	b.n	800569c <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005674:	2b00      	cmp	r3, #0
 8005676:	d102      	bne.n	800567e <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	2200      	movs	r2, #0
 800567c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	785b      	ldrb	r3, [r3, #1]
 8005688:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800568a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800568c:	68ba      	ldr	r2, [r7, #8]
 800568e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005690:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	78db      	ldrb	r3, [r3, #3]
 8005696:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005698:	4313      	orrs	r3, r2
 800569a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	6979      	ldr	r1, [r7, #20]
 80056a2:	4b18      	ldr	r3, [pc, #96]	@ (8005704 <HAL_RTC_SetTime+0x138>)
 80056a4:	400b      	ands	r3, r1
 80056a6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	689a      	ldr	r2, [r3, #8]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80056b6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	6899      	ldr	r1, [r3, #8]
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	68da      	ldr	r2, [r3, #12]
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	431a      	orrs	r2, r3
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	430a      	orrs	r2, r1
 80056ce:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80056d0:	68f8      	ldr	r0, [r7, #12]
 80056d2:	f000 fb27 	bl	8005d24 <RTC_ExitInitMode>
 80056d6:	4603      	mov	r3, r0
 80056d8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	22ff      	movs	r2, #255	@ 0xff
 80056e0:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 80056e2:	7cfb      	ldrb	r3, [r7, #19]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d103      	bne.n	80056f0 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80056f8:	7cfb      	ldrb	r3, [r7, #19]
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	371c      	adds	r7, #28
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd90      	pop	{r4, r7, pc}
 8005702:	bf00      	nop
 8005704:	007f7f7f 	.word	0x007f7f7f

08005708 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(const RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b086      	sub	sp, #24
 800570c:	af00      	add	r7, sp, #0
 800570e:	60f8      	str	r0, [r7, #12]
 8005710:	60b9      	str	r1, [r7, #8]
 8005712:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	691b      	ldr	r3, [r3, #16]
 8005724:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	4b22      	ldr	r3, [pc, #136]	@ (80057bc <HAL_RTC_GetTime+0xb4>)
 8005734:	4013      	ands	r3, r2
 8005736:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	0c1b      	lsrs	r3, r3, #16
 800573c:	b2db      	uxtb	r3, r3
 800573e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005742:	b2da      	uxtb	r2, r3
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	0a1b      	lsrs	r3, r3, #8
 800574c:	b2db      	uxtb	r3, r3
 800574e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005752:	b2da      	uxtb	r2, r3
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	b2db      	uxtb	r3, r3
 800575c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005760:	b2da      	uxtb	r2, r3
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	0d9b      	lsrs	r3, r3, #22
 800576a:	b2db      	uxtb	r3, r3
 800576c:	f003 0301 	and.w	r3, r3, #1
 8005770:	b2da      	uxtb	r2, r3
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d11a      	bne.n	80057b2 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	4618      	mov	r0, r3
 8005782:	f000 fb2d 	bl	8005de0 <RTC_Bcd2ToByte>
 8005786:	4603      	mov	r3, r0
 8005788:	461a      	mov	r2, r3
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	785b      	ldrb	r3, [r3, #1]
 8005792:	4618      	mov	r0, r3
 8005794:	f000 fb24 	bl	8005de0 <RTC_Bcd2ToByte>
 8005798:	4603      	mov	r3, r0
 800579a:	461a      	mov	r2, r3
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	789b      	ldrb	r3, [r3, #2]
 80057a4:	4618      	mov	r0, r3
 80057a6:	f000 fb1b 	bl	8005de0 <RTC_Bcd2ToByte>
 80057aa:	4603      	mov	r3, r0
 80057ac:	461a      	mov	r2, r3
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80057b2:	2300      	movs	r3, #0
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3718      	adds	r7, #24
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	007f7f7f 	.word	0x007f7f7f

080057c0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80057c0:	b590      	push	{r4, r7, lr}
 80057c2:	b087      	sub	sp, #28
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d101      	bne.n	80057da <HAL_RTC_SetDate+0x1a>
 80057d6:	2302      	movs	r3, #2
 80057d8:	e073      	b.n	80058c2 <HAL_RTC_SetDate+0x102>
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2201      	movs	r2, #1
 80057de:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2202      	movs	r2, #2
 80057e6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d10e      	bne.n	800580e <HAL_RTC_SetDate+0x4e>
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	785b      	ldrb	r3, [r3, #1]
 80057f4:	f003 0310 	and.w	r3, r3, #16
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d008      	beq.n	800580e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	785b      	ldrb	r3, [r3, #1]
 8005800:	f023 0310 	bic.w	r3, r3, #16
 8005804:	b2db      	uxtb	r3, r3
 8005806:	330a      	adds	r3, #10
 8005808:	b2da      	uxtb	r2, r3
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d11c      	bne.n	800584e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	78db      	ldrb	r3, [r3, #3]
 8005818:	4618      	mov	r0, r3
 800581a:	f000 fac1 	bl	8005da0 <RTC_ByteToBcd2>
 800581e:	4603      	mov	r3, r0
 8005820:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	785b      	ldrb	r3, [r3, #1]
 8005826:	4618      	mov	r0, r3
 8005828:	f000 faba 	bl	8005da0 <RTC_ByteToBcd2>
 800582c:	4603      	mov	r3, r0
 800582e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005830:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	789b      	ldrb	r3, [r3, #2]
 8005836:	4618      	mov	r0, r3
 8005838:	f000 fab2 	bl	8005da0 <RTC_ByteToBcd2>
 800583c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800583e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005848:	4313      	orrs	r3, r2
 800584a:	617b      	str	r3, [r7, #20]
 800584c:	e00e      	b.n	800586c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	78db      	ldrb	r3, [r3, #3]
 8005852:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	785b      	ldrb	r3, [r3, #1]
 8005858:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800585a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800585c:	68ba      	ldr	r2, [r7, #8]
 800585e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005860:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005868:	4313      	orrs	r3, r2
 800586a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	22ca      	movs	r2, #202	@ 0xca
 8005872:	625a      	str	r2, [r3, #36]	@ 0x24
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	2253      	movs	r2, #83	@ 0x53
 800587a:	625a      	str	r2, [r3, #36]	@ 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800587c:	68f8      	ldr	r0, [r7, #12]
 800587e:	f000 fa1d 	bl	8005cbc <RTC_EnterInitMode>
 8005882:	4603      	mov	r3, r0
 8005884:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005886:	7cfb      	ldrb	r3, [r7, #19]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d10a      	bne.n	80058a2 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	6979      	ldr	r1, [r7, #20]
 8005892:	4b0e      	ldr	r3, [pc, #56]	@ (80058cc <HAL_RTC_SetDate+0x10c>)
 8005894:	400b      	ands	r3, r1
 8005896:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005898:	68f8      	ldr	r0, [r7, #12]
 800589a:	f000 fa43 	bl	8005d24 <RTC_ExitInitMode>
 800589e:	4603      	mov	r3, r0
 80058a0:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	22ff      	movs	r2, #255	@ 0xff
 80058a8:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 80058aa:	7cfb      	ldrb	r3, [r7, #19]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d103      	bne.n	80058b8 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2200      	movs	r2, #0
 80058bc:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80058c0:	7cfb      	ldrb	r3, [r7, #19]


}
 80058c2:	4618      	mov	r0, r3
 80058c4:	371c      	adds	r7, #28
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd90      	pop	{r4, r7, pc}
 80058ca:	bf00      	nop
 80058cc:	00ffff3f 	.word	0x00ffff3f

080058d0 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(const RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b086      	sub	sp, #24
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	685a      	ldr	r2, [r3, #4]
 80058e2:	4b21      	ldr	r3, [pc, #132]	@ (8005968 <HAL_RTC_GetDate+0x98>)
 80058e4:	4013      	ands	r3, r2
 80058e6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	0c1b      	lsrs	r3, r3, #16
 80058ec:	b2da      	uxtb	r2, r3
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	0a1b      	lsrs	r3, r3, #8
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	f003 031f 	and.w	r3, r3, #31
 80058fc:	b2da      	uxtb	r2, r3
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	b2db      	uxtb	r3, r3
 8005906:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800590a:	b2da      	uxtb	r2, r3
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	0b5b      	lsrs	r3, r3, #13
 8005914:	b2db      	uxtb	r3, r3
 8005916:	f003 0307 	and.w	r3, r3, #7
 800591a:	b2da      	uxtb	r2, r3
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d11a      	bne.n	800595c <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	78db      	ldrb	r3, [r3, #3]
 800592a:	4618      	mov	r0, r3
 800592c:	f000 fa58 	bl	8005de0 <RTC_Bcd2ToByte>
 8005930:	4603      	mov	r3, r0
 8005932:	461a      	mov	r2, r3
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	785b      	ldrb	r3, [r3, #1]
 800593c:	4618      	mov	r0, r3
 800593e:	f000 fa4f 	bl	8005de0 <RTC_Bcd2ToByte>
 8005942:	4603      	mov	r3, r0
 8005944:	461a      	mov	r2, r3
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	789b      	ldrb	r3, [r3, #2]
 800594e:	4618      	mov	r0, r3
 8005950:	f000 fa46 	bl	8005de0 <RTC_Bcd2ToByte>
 8005954:	4603      	mov	r3, r0
 8005956:	461a      	mov	r2, r3
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800595c:	2300      	movs	r3, #0
}
 800595e:	4618      	mov	r0, r3
 8005960:	3718      	adds	r7, #24
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	00ffff3f 	.word	0x00ffff3f

0800596c <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800596c:	b590      	push	{r4, r7, lr}
 800596e:	b089      	sub	sp, #36	@ 0x24
 8005970:	af00      	add	r7, sp, #0
 8005972:	60f8      	str	r0, [r7, #12]
 8005974:	60b9      	str	r1, [r7, #8]
 8005976:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800597e:	2b01      	cmp	r3, #1
 8005980:	d101      	bne.n	8005986 <HAL_RTC_SetAlarm_IT+0x1a>
 8005982:	2302      	movs	r3, #2
 8005984:	e129      	b.n	8005bda <HAL_RTC_SetAlarm_IT+0x26e>
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2201      	movs	r2, #1
 800598a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2202      	movs	r2, #2
 8005992:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if(Format == RTC_FORMAT_BIN)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d137      	bne.n	8005a0c <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d102      	bne.n	80059b0 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	2200      	movs	r2, #0
 80059ae:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	4618      	mov	r0, r3
 80059b6:	f000 f9f3 	bl	8005da0 <RTC_ByteToBcd2>
 80059ba:	4603      	mov	r3, r0
 80059bc:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	785b      	ldrb	r3, [r3, #1]
 80059c2:	4618      	mov	r0, r3
 80059c4:	f000 f9ec 	bl	8005da0 <RTC_ByteToBcd2>
 80059c8:	4603      	mov	r3, r0
 80059ca:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80059cc:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos)  | \
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	789b      	ldrb	r3, [r3, #2]
 80059d2:	4618      	mov	r0, r3
 80059d4:	f000 f9e4 	bl	8005da0 <RTC_ByteToBcd2>
 80059d8:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80059da:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmTime.TimeFormat              << RTC_ALRMAR_PM_Pos)  | \
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	78db      	ldrb	r3, [r3, #3]
 80059e2:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos)  | \
 80059e4:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80059ee:	4618      	mov	r0, r3
 80059f0:	f000 f9d6 	bl	8005da0 <RTC_ByteToBcd2>
 80059f4:	4603      	mov	r3, r0
 80059f6:	061b      	lsls	r3, r3, #24
              ((uint32_t)sAlarm->AlarmTime.TimeFormat              << RTC_ALRMAR_PM_Pos)  | \
 80059f8:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8005a00:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005a06:	4313      	orrs	r3, r2
 8005a08:	61fb      	str	r3, [r7, #28]
 8005a0a:	e023      	b.n	8005a54 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d102      	bne.n	8005a20 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	041a      	lsls	r2, r3, #16
              ((uint32_t)sAlarm->AlarmTime.Minutes     << RTC_ALRMAR_MNU_Pos) | \
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	785b      	ldrb	r3, [r3, #1]
 8005a2a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 8005a2c:	4313      	orrs	r3, r2
              ((uint32_t)sAlarm->AlarmTime.Seconds     << RTC_ALRMAR_SU_Pos)  | \
 8005a2e:	68ba      	ldr	r2, [r7, #8]
 8005a30:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)sAlarm->AlarmTime.Minutes     << RTC_ALRMAR_MNU_Pos) | \
 8005a32:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmTime.TimeFormat  << RTC_ALRMAR_PM_Pos)  | \
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	78db      	ldrb	r3, [r3, #3]
 8005a38:	059b      	lsls	r3, r3, #22
              ((uint32_t)sAlarm->AlarmTime.Seconds     << RTC_ALRMAR_SU_Pos)  | \
 8005a3a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDay      << RTC_ALRMAR_DU_Pos)  | \
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a42:	061b      	lsls	r3, r3, #24
              ((uint32_t)sAlarm->AlarmTime.TimeFormat  << RTC_ALRMAR_PM_Pos)  | \
 8005a44:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                         | \
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)sAlarm->AlarmDateWeekDay      << RTC_ALRMAR_DU_Pos)  | \
 8005a4a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 8005a50:	4313      	orrs	r3, r2
 8005a52:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	685a      	ldr	r2, [r3, #4]
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	699b      	ldr	r3, [r3, #24]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	22ca      	movs	r2, #202	@ 0xca
 8005a66:	625a      	str	r2, [r3, #36]	@ 0x24
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	2253      	movs	r2, #83	@ 0x53
 8005a6e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a78:	d14a      	bne.n	8005b10 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	689a      	ldr	r2, [r3, #8]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005a88:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	b2da      	uxtb	r2, r3
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8005a9a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005a9c:	f7fb fd88 	bl	80015b0 <HAL_GetTick>
 8005aa0:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
#if defined(TAMP)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRAWF) == 0U)
#else
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005aa2:	e015      	b.n	8005ad0 <HAL_RTC_SetAlarm_IT+0x164>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005aa4:	f7fb fd84 	bl	80015b0 <HAL_GetTick>
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	1ad3      	subs	r3, r2, r3
 8005aae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005ab2:	d90d      	bls.n	8005ad0 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	22ff      	movs	r2, #255	@ 0xff
 8005aba:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2203      	movs	r2, #3
 8005ac0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8005acc:	2303      	movs	r3, #3
 8005ace:	e084      	b.n	8005bda <HAL_RTC_SetAlarm_IT+0x26e>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	f003 0301 	and.w	r3, r3, #1
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d0e2      	beq.n	8005aa4 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	69fa      	ldr	r2, [r7, #28]
 8005ae4:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	69ba      	ldr	r2, [r7, #24]
 8005aec:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	689a      	ldr	r2, [r3, #8]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005afc:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	689a      	ldr	r2, [r3, #8]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005b0c:	609a      	str	r2, [r3, #8]
 8005b0e:	e049      	b.n	8005ba4 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	689a      	ldr	r2, [r3, #8]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005b1e:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	68db      	ldr	r3, [r3, #12]
 8005b26:	b2da      	uxtb	r2, r3
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8005b30:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005b32:	f7fb fd3d 	bl	80015b0 <HAL_GetTick>
 8005b36:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
#if defined(TAMP)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRBWF) == 0U)
#else
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005b38:	e015      	b.n	8005b66 <HAL_RTC_SetAlarm_IT+0x1fa>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005b3a:	f7fb fd39 	bl	80015b0 <HAL_GetTick>
 8005b3e:	4602      	mov	r2, r0
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	1ad3      	subs	r3, r2, r3
 8005b44:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005b48:	d90d      	bls.n	8005b66 <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	22ff      	movs	r2, #255	@ 0xff
 8005b50:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2203      	movs	r2, #3
 8005b56:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8005b62:	2303      	movs	r3, #3
 8005b64:	e039      	b.n	8005bda <HAL_RTC_SetAlarm_IT+0x26e>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	f003 0302 	and.w	r3, r3, #2
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d0e2      	beq.n	8005b3a <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	69fa      	ldr	r2, [r7, #28]
 8005b7a:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	69ba      	ldr	r2, [r7, #24]
 8005b82:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	689a      	ldr	r2, [r3, #8]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b92:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	689a      	ldr	r2, [r3, #8]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005ba2:	609a      	str	r2, [r3, #8]
  else
  {
    __HAL_RTC_ALARM_EXTID2_ENABLE_IT();
  }
#else  /* SINGLE_CORE */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005ba4:	4b0f      	ldr	r3, [pc, #60]	@ (8005be4 <HAL_RTC_SetAlarm_IT+0x278>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a0e      	ldr	r2, [pc, #56]	@ (8005be4 <HAL_RTC_SetAlarm_IT+0x278>)
 8005baa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bae:	6013      	str	r3, [r2, #0]
#endif

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8005bb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005bba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bbe:	6013      	str	r3, [r2, #0]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	22ff      	movs	r2, #255	@ 0xff
 8005bc6:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005bd8:	2300      	movs	r3, #0
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3724      	adds	r7, #36	@ 0x24
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd90      	pop	{r4, r7, pc}
 8005be2:	bf00      	nop
 8005be4:	58000080 	.word	0x58000080

08005be8 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b082      	sub	sp, #8
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  else
  {
    __HAL_RTC_ALARM_EXTID2_CLEAR_FLAG();
  }
#else  /* SINGLE_CORE */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8005bf0:	4b1f      	ldr	r3, [pc, #124]	@ (8005c70 <HAL_RTC_AlarmIRQHandler+0x88>)
 8005bf2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005bf6:	609a      	str	r2, [r3, #8]
    HAL_RTCEx_AlarmBEventCallback(hrtc);
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
  }
#else
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d012      	beq.n	8005c2c <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d00b      	beq.n	8005c2c <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	b2da      	uxtb	r2, r3
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8005c24:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else  /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f7fb f95e 	bl	8000ee8 <HAL_RTC_AlarmAEventCallback>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d012      	beq.n	8005c60 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d00b      	beq.n	8005c60 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	68db      	ldr	r3, [r3, #12]
 8005c4e:	b2da      	uxtb	r2, r3
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8005c58:	60da      	str	r2, [r3, #12]

      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else  /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 f9c0 	bl	8005fe0 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* TAMP */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 8005c68:	bf00      	nop
 8005c6a:	3708      	adds	r7, #8
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}
 8005c70:	58000080 	.word	0x58000080

08005c74 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a0d      	ldr	r2, [pc, #52]	@ (8005cb8 <HAL_RTC_WaitForSynchro+0x44>)
 8005c82:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8005c84:	f7fb fc94 	bl	80015b0 <HAL_GetTick>
 8005c88:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005c8a:	e009      	b.n	8005ca0 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005c8c:	f7fb fc90 	bl	80015b0 <HAL_GetTick>
 8005c90:	4602      	mov	r2, r0
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	1ad3      	subs	r3, r2, r3
 8005c96:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005c9a:	d901      	bls.n	8005ca0 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	e007      	b.n	8005cb0 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	f003 0320 	and.w	r3, r3, #32
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d0ee      	beq.n	8005c8c <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 8005cae:	2300      	movs	r3, #0
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3710      	adds	r7, #16
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}
 8005cb8:	0003ff5f 	.word	0x0003ff5f

08005cbc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b084      	sub	sp, #16
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d120      	bne.n	8005d18 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f04f 32ff 	mov.w	r2, #4294967295
 8005cde:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005ce0:	f7fb fc66 	bl	80015b0 <HAL_GetTick>
 8005ce4:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005ce6:	e00d      	b.n	8005d04 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005ce8:	f7fb fc62 	bl	80015b0 <HAL_GetTick>
 8005cec:	4602      	mov	r2, r0
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	1ad3      	subs	r3, r2, r3
 8005cf2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005cf6:	d905      	bls.n	8005d04 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8005cf8:	2303      	movs	r3, #3
 8005cfa:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2203      	movs	r2, #3
 8005d00:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d102      	bne.n	8005d18 <RTC_EnterInitMode+0x5c>
 8005d12:	7bfb      	ldrb	r3, [r7, #15]
 8005d14:	2b03      	cmp	r3, #3
 8005d16:	d1e7      	bne.n	8005ce8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8005d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3710      	adds	r7, #16
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
	...

08005d24 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b084      	sub	sp, #16
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8005d30:	4b1a      	ldr	r3, [pc, #104]	@ (8005d9c <RTC_ExitInitMode+0x78>)
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	4a19      	ldr	r2, [pc, #100]	@ (8005d9c <RTC_ExitInitMode+0x78>)
 8005d36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d3a:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005d3c:	4b17      	ldr	r3, [pc, #92]	@ (8005d9c <RTC_ExitInitMode+0x78>)
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	f003 0320 	and.w	r3, r3, #32
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d10c      	bne.n	8005d62 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f7ff ff93 	bl	8005c74 <HAL_RTC_WaitForSynchro>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d01e      	beq.n	8005d92 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2203      	movs	r2, #3
 8005d58:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8005d5c:	2303      	movs	r3, #3
 8005d5e:	73fb      	strb	r3, [r7, #15]
 8005d60:	e017      	b.n	8005d92 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005d62:	4b0e      	ldr	r3, [pc, #56]	@ (8005d9c <RTC_ExitInitMode+0x78>)
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	4a0d      	ldr	r2, [pc, #52]	@ (8005d9c <RTC_ExitInitMode+0x78>)
 8005d68:	f023 0320 	bic.w	r3, r3, #32
 8005d6c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f7ff ff80 	bl	8005c74 <HAL_RTC_WaitForSynchro>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d005      	beq.n	8005d86 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2203      	movs	r2, #3
 8005d7e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8005d82:	2303      	movs	r3, #3
 8005d84:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005d86:	4b05      	ldr	r3, [pc, #20]	@ (8005d9c <RTC_ExitInitMode+0x78>)
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	4a04      	ldr	r2, [pc, #16]	@ (8005d9c <RTC_ExitInitMode+0x78>)
 8005d8c:	f043 0320 	orr.w	r3, r3, #32
 8005d90:	6093      	str	r3, [r2, #8]
  }

  return status;
 8005d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3710      	adds	r7, #16
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	58004000 	.word	0x58004000

08005da0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b085      	sub	sp, #20
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	4603      	mov	r3, r0
 8005da8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005daa:	2300      	movs	r3, #0
 8005dac:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 8005dae:	79fb      	ldrb	r3, [r7, #7]
 8005db0:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 8005db2:	e005      	b.n	8005dc0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	3301      	adds	r3, #1
 8005db8:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 8005dba:	7afb      	ldrb	r3, [r7, #11]
 8005dbc:	3b0a      	subs	r3, #10
 8005dbe:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8005dc0:	7afb      	ldrb	r3, [r7, #11]
 8005dc2:	2b09      	cmp	r3, #9
 8005dc4:	d8f6      	bhi.n	8005db4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	011b      	lsls	r3, r3, #4
 8005dcc:	b2da      	uxtb	r2, r3
 8005dce:	7afb      	ldrb	r3, [r7, #11]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	b2db      	uxtb	r3, r3
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3714      	adds	r7, #20
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr

08005de0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b085      	sub	sp, #20
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	4603      	mov	r3, r0
 8005de8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8005dea:	79fb      	ldrb	r3, [r7, #7]
 8005dec:	091b      	lsrs	r3, r3, #4
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	461a      	mov	r2, r3
 8005df2:	0092      	lsls	r2, r2, #2
 8005df4:	4413      	add	r3, r2
 8005df6:	005b      	lsls	r3, r3, #1
 8005df8:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8005dfa:	79fb      	ldrb	r3, [r7, #7]
 8005dfc:	f003 030f 	and.w	r3, r3, #15
 8005e00:	b2da      	uxtb	r2, r3
 8005e02:	7bfb      	ldrb	r3, [r7, #15]
 8005e04:	4413      	add	r3, r2
 8005e06:	b2db      	uxtb	r3, r3
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3714      	adds	r7, #20
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr

08005e14 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b086      	sub	sp, #24
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	60f8      	str	r0, [r7, #12]
 8005e1c:	60b9      	str	r1, [r7, #8]
 8005e1e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d101      	bne.n	8005e2e <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8005e2a:	2302      	movs	r3, #2
 8005e2c:	e07b      	b.n	8005f26 <HAL_RTCEx_SetWakeUpTimer_IT+0x112>
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2201      	movs	r2, #1
 8005e32:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2202      	movs	r2, #2
 8005e3a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	22ca      	movs	r2, #202	@ 0xca
 8005e44:	625a      	str	r2, [r3, #36]	@ 0x24
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	2253      	movs	r2, #83	@ 0x53
 8005e4c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(RTC->CR, RTC_CR_WUTE);
 8005e4e:	4b38      	ldr	r3, [pc, #224]	@ (8005f30 <HAL_RTCEx_SetWakeUpTimer_IT+0x11c>)
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	4a37      	ldr	r2, [pc, #220]	@ (8005f30 <HAL_RTCEx_SetWakeUpTimer_IT+0x11c>)
 8005e54:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005e58:	6093      	str	r3, [r2, #8]
  {
    tickstart = HAL_GetTick();

    while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_WUTWF) == 0U)
#else
  if (READ_BIT(RTC->ISR, RTC_ISR_INITF) == 0U)
 8005e5a:	4b35      	ldr	r3, [pc, #212]	@ (8005f30 <HAL_RTCEx_SetWakeUpTimer_IT+0x11c>)
 8005e5c:	68db      	ldr	r3, [r3, #12]
 8005e5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d120      	bne.n	8005ea8 <HAL_RTCEx_SetWakeUpTimer_IT+0x94>
  {
    tickstart = HAL_GetTick();
 8005e66:	f7fb fba3 	bl	80015b0 <HAL_GetTick>
 8005e6a:	6178      	str	r0, [r7, #20]

    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005e6c:	e015      	b.n	8005e9a <HAL_RTCEx_SetWakeUpTimer_IT+0x86>
#endif /* TAMP */
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005e6e:	f7fb fb9f 	bl	80015b0 <HAL_GetTick>
 8005e72:	4602      	mov	r2, r0
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	1ad3      	subs	r3, r2, r3
 8005e78:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005e7c:	d90d      	bls.n	8005e9a <HAL_RTCEx_SetWakeUpTimer_IT+0x86>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	22ff      	movs	r2, #255	@ 0xff
 8005e84:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2203      	movs	r2, #3
 8005e8a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2200      	movs	r2, #0
 8005e92:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8005e96:	2303      	movs	r3, #3
 8005e98:	e045      	b.n	8005f26 <HAL_RTCEx_SetWakeUpTimer_IT+0x112>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	68db      	ldr	r3, [r3, #12]
 8005ea0:	f003 0304 	and.w	r3, r3, #4
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d0e2      	beq.n	8005e6e <HAL_RTCEx_SetWakeUpTimer_IT+0x5a>
      }
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	68ba      	ldr	r2, [r7, #8]
 8005eae:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits and configure the clock source in CR register */
  {
    uint32_t CR_tmp = hrtc->Instance->CR;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	613b      	str	r3, [r7, #16]
    CR_tmp &= (uint32_t)~RTC_CR_WUCKSEL;
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	f023 0307 	bic.w	r3, r3, #7
 8005ebe:	613b      	str	r3, [r7, #16]
    CR_tmp |= (uint32_t)WakeUpClock;
 8005ec0:	693a      	ldr	r2, [r7, #16]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	613b      	str	r3, [r7, #16]
    hrtc->Instance->CR = CR_tmp;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	693a      	ldr	r2, [r7, #16]
 8005ece:	609a      	str	r2, [r3, #8]
  else
  {
    __HAL_RTC_WAKEUPTIMER_EXTID2_ENABLE_IT();
  }
#else /* SINGLE_CORE */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8005ed0:	4b18      	ldr	r3, [pc, #96]	@ (8005f34 <HAL_RTCEx_SetWakeUpTimer_IT+0x120>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a17      	ldr	r2, [pc, #92]	@ (8005f34 <HAL_RTCEx_SetWakeUpTimer_IT+0x120>)
 8005ed6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005eda:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8005edc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005ee6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005eea:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	689a      	ldr	r2, [r3, #8]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005efa:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	689a      	ldr	r2, [r3, #8]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005f0a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	22ff      	movs	r2, #255	@ 0xff
 8005f12:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005f24:	2300      	movs	r3, #0
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3718      	adds	r7, #24
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	58004000 	.word	0x58004000
 8005f34:	58000080 	.word	0x58000080

08005f38 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b082      	sub	sp, #8
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  else
  {
    __HAL_RTC_WAKEUPTIMER_EXTID2_CLEAR_FLAG();
  }
#else /* SINGLE_CORE */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8005f40:	4b0f      	ldr	r3, [pc, #60]	@ (8005f80 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8005f42:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8005f46:	609a      	str	r2, [r3, #8]
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
  #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d00b      	beq.n	8005f6e <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	b2da      	uxtb	r2, r3
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8005f66:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
  #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
  #else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f7fa ffd5 	bl	8000f18 <HAL_RTCEx_WakeUpTimerEventCallback>
  #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }
#endif /* TAMP */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2201      	movs	r2, #1
 8005f72:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 8005f76:	bf00      	nop
 8005f78:	3708      	adds	r7, #8
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	bf00      	nop
 8005f80:	58000080 	.word	0x58000080

08005f84 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(const RTC_HandleTypeDef * hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b087      	sub	sp, #28
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	607a      	str	r2, [r7, #4]

  /* Point on address of first backup register */
#if defined(TAMP)
  tmp = (uint32_t) &(((TAMP_TypeDef *)((uint32_t)hrtc->Instance + TAMP_OFFSET))->BKP0R);
#else
  tmp = (uint32_t) &(hrtc->Instance->BKP0R);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	3350      	adds	r3, #80	@ 0x50
 8005f96:	617b      	str	r3, [r7, #20]
#endif /* TAMP */

  tmp += (BackupRegister * 4U);
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	697a      	ldr	r2, [r7, #20]
 8005f9e:	4413      	add	r3, r2
 8005fa0:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	687a      	ldr	r2, [r7, #4]
 8005fa6:	601a      	str	r2, [r3, #0]
}
 8005fa8:	bf00      	nop
 8005faa:	371c      	adds	r7, #28
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr

08005fb4 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 31 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(const RTC_HandleTypeDef * hrtc, uint32_t BackupRegister)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b085      	sub	sp, #20
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	6039      	str	r1, [r7, #0]

  /* Point on address of first backup register */
#if defined(TAMP)
  tmp = (uint32_t) &(((TAMP_TypeDef *)((uint32_t)hrtc->Instance + TAMP_OFFSET))->BKP0R);
#else
  tmp = (uint32_t) &(hrtc->Instance->BKP0R);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	3350      	adds	r3, #80	@ 0x50
 8005fc4:	60fb      	str	r3, [r7, #12]
#endif /* TAMP */

  tmp += (BackupRegister * 4U);
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	68fa      	ldr	r2, [r7, #12]
 8005fcc:	4413      	add	r3, r2
 8005fce:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3714      	adds	r7, #20
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef * hrtc)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8005fe8:	bf00      	nop
 8005fea:	370c      	adds	r7, #12
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr

08005ff4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b082      	sub	sp, #8
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d101      	bne.n	8006006 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	e042      	b.n	800608c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800600c:	2b00      	cmp	r3, #0
 800600e:	d106      	bne.n	800601e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f7fb f993 	bl	8001344 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2224      	movs	r2, #36	@ 0x24
 8006022:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f022 0201 	bic.w	r2, r2, #1
 8006034:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800603a:	2b00      	cmp	r3, #0
 800603c:	d002      	beq.n	8006044 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f001 fa14 	bl	800746c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f000 fca9 	bl	800699c <UART_SetConfig>
 800604a:	4603      	mov	r3, r0
 800604c:	2b01      	cmp	r3, #1
 800604e:	d101      	bne.n	8006054 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	e01b      	b.n	800608c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	685a      	ldr	r2, [r3, #4]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006062:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	689a      	ldr	r2, [r3, #8]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006072:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f042 0201 	orr.w	r2, r2, #1
 8006082:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f001 fa93 	bl	80075b0 <UART_CheckIdleState>
 800608a:	4603      	mov	r3, r0
}
 800608c:	4618      	mov	r0, r3
 800608e:	3708      	adds	r7, #8
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}

08006094 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b08a      	sub	sp, #40	@ 0x28
 8006098:	af02      	add	r7, sp, #8
 800609a:	60f8      	str	r0, [r7, #12]
 800609c:	60b9      	str	r1, [r7, #8]
 800609e:	603b      	str	r3, [r7, #0]
 80060a0:	4613      	mov	r3, r2
 80060a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060aa:	2b20      	cmp	r3, #32
 80060ac:	d17b      	bne.n	80061a6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d002      	beq.n	80060ba <HAL_UART_Transmit+0x26>
 80060b4:	88fb      	ldrh	r3, [r7, #6]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d101      	bne.n	80060be <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e074      	b.n	80061a8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2200      	movs	r2, #0
 80060c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2221      	movs	r2, #33	@ 0x21
 80060ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80060ce:	f7fb fa6f 	bl	80015b0 <HAL_GetTick>
 80060d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	88fa      	ldrh	r2, [r7, #6]
 80060d8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	88fa      	ldrh	r2, [r7, #6]
 80060e0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060ec:	d108      	bne.n	8006100 <HAL_UART_Transmit+0x6c>
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d104      	bne.n	8006100 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80060f6:	2300      	movs	r3, #0
 80060f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	61bb      	str	r3, [r7, #24]
 80060fe:	e003      	b.n	8006108 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006104:	2300      	movs	r3, #0
 8006106:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006108:	e030      	b.n	800616c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	9300      	str	r3, [sp, #0]
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	2200      	movs	r2, #0
 8006112:	2180      	movs	r1, #128	@ 0x80
 8006114:	68f8      	ldr	r0, [r7, #12]
 8006116:	f001 faf5 	bl	8007704 <UART_WaitOnFlagUntilTimeout>
 800611a:	4603      	mov	r3, r0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d005      	beq.n	800612c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2220      	movs	r2, #32
 8006124:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006128:	2303      	movs	r3, #3
 800612a:	e03d      	b.n	80061a8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d10b      	bne.n	800614a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	881b      	ldrh	r3, [r3, #0]
 8006136:	461a      	mov	r2, r3
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006140:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006142:	69bb      	ldr	r3, [r7, #24]
 8006144:	3302      	adds	r3, #2
 8006146:	61bb      	str	r3, [r7, #24]
 8006148:	e007      	b.n	800615a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800614a:	69fb      	ldr	r3, [r7, #28]
 800614c:	781a      	ldrb	r2, [r3, #0]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	3301      	adds	r3, #1
 8006158:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006160:	b29b      	uxth	r3, r3
 8006162:	3b01      	subs	r3, #1
 8006164:	b29a      	uxth	r2, r3
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006172:	b29b      	uxth	r3, r3
 8006174:	2b00      	cmp	r3, #0
 8006176:	d1c8      	bne.n	800610a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	9300      	str	r3, [sp, #0]
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	2200      	movs	r2, #0
 8006180:	2140      	movs	r1, #64	@ 0x40
 8006182:	68f8      	ldr	r0, [r7, #12]
 8006184:	f001 fabe 	bl	8007704 <UART_WaitOnFlagUntilTimeout>
 8006188:	4603      	mov	r3, r0
 800618a:	2b00      	cmp	r3, #0
 800618c:	d005      	beq.n	800619a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2220      	movs	r2, #32
 8006192:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006196:	2303      	movs	r3, #3
 8006198:	e006      	b.n	80061a8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2220      	movs	r2, #32
 800619e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80061a2:	2300      	movs	r3, #0
 80061a4:	e000      	b.n	80061a8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80061a6:	2302      	movs	r3, #2
  }
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3720      	adds	r7, #32
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b0ba      	sub	sp, #232	@ 0xe8
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	69db      	ldr	r3, [r3, #28]
 80061be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80061d6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80061da:	f640 030f 	movw	r3, #2063	@ 0x80f
 80061de:	4013      	ands	r3, r2
 80061e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80061e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d11b      	bne.n	8006224 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80061ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061f0:	f003 0320 	and.w	r3, r3, #32
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d015      	beq.n	8006224 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80061f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061fc:	f003 0320 	and.w	r3, r3, #32
 8006200:	2b00      	cmp	r3, #0
 8006202:	d105      	bne.n	8006210 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006204:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006208:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800620c:	2b00      	cmp	r3, #0
 800620e:	d009      	beq.n	8006224 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006214:	2b00      	cmp	r3, #0
 8006216:	f000 8393 	beq.w	8006940 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	4798      	blx	r3
      }
      return;
 8006222:	e38d      	b.n	8006940 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006224:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006228:	2b00      	cmp	r3, #0
 800622a:	f000 8123 	beq.w	8006474 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800622e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006232:	4b8d      	ldr	r3, [pc, #564]	@ (8006468 <HAL_UART_IRQHandler+0x2b8>)
 8006234:	4013      	ands	r3, r2
 8006236:	2b00      	cmp	r3, #0
 8006238:	d106      	bne.n	8006248 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800623a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800623e:	4b8b      	ldr	r3, [pc, #556]	@ (800646c <HAL_UART_IRQHandler+0x2bc>)
 8006240:	4013      	ands	r3, r2
 8006242:	2b00      	cmp	r3, #0
 8006244:	f000 8116 	beq.w	8006474 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800624c:	f003 0301 	and.w	r3, r3, #1
 8006250:	2b00      	cmp	r3, #0
 8006252:	d011      	beq.n	8006278 <HAL_UART_IRQHandler+0xc8>
 8006254:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006258:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800625c:	2b00      	cmp	r3, #0
 800625e:	d00b      	beq.n	8006278 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2201      	movs	r2, #1
 8006266:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800626e:	f043 0201 	orr.w	r2, r3, #1
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006278:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800627c:	f003 0302 	and.w	r3, r3, #2
 8006280:	2b00      	cmp	r3, #0
 8006282:	d011      	beq.n	80062a8 <HAL_UART_IRQHandler+0xf8>
 8006284:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006288:	f003 0301 	and.w	r3, r3, #1
 800628c:	2b00      	cmp	r3, #0
 800628e:	d00b      	beq.n	80062a8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	2202      	movs	r2, #2
 8006296:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800629e:	f043 0204 	orr.w	r2, r3, #4
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80062a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062ac:	f003 0304 	and.w	r3, r3, #4
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d011      	beq.n	80062d8 <HAL_UART_IRQHandler+0x128>
 80062b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80062b8:	f003 0301 	and.w	r3, r3, #1
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d00b      	beq.n	80062d8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	2204      	movs	r2, #4
 80062c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062ce:	f043 0202 	orr.w	r2, r3, #2
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80062d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062dc:	f003 0308 	and.w	r3, r3, #8
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d017      	beq.n	8006314 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80062e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062e8:	f003 0320 	and.w	r3, r3, #32
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d105      	bne.n	80062fc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80062f0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80062f4:	4b5c      	ldr	r3, [pc, #368]	@ (8006468 <HAL_UART_IRQHandler+0x2b8>)
 80062f6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d00b      	beq.n	8006314 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	2208      	movs	r2, #8
 8006302:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800630a:	f043 0208 	orr.w	r2, r3, #8
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006314:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006318:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800631c:	2b00      	cmp	r3, #0
 800631e:	d012      	beq.n	8006346 <HAL_UART_IRQHandler+0x196>
 8006320:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006324:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006328:	2b00      	cmp	r3, #0
 800632a:	d00c      	beq.n	8006346 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006334:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800633c:	f043 0220 	orr.w	r2, r3, #32
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800634c:	2b00      	cmp	r3, #0
 800634e:	f000 82f9 	beq.w	8006944 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006356:	f003 0320 	and.w	r3, r3, #32
 800635a:	2b00      	cmp	r3, #0
 800635c:	d013      	beq.n	8006386 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800635e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006362:	f003 0320 	and.w	r3, r3, #32
 8006366:	2b00      	cmp	r3, #0
 8006368:	d105      	bne.n	8006376 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800636a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800636e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006372:	2b00      	cmp	r3, #0
 8006374:	d007      	beq.n	8006386 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800637a:	2b00      	cmp	r3, #0
 800637c:	d003      	beq.n	8006386 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800638c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800639a:	2b40      	cmp	r3, #64	@ 0x40
 800639c:	d005      	beq.n	80063aa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800639e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80063a2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d054      	beq.n	8006454 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f001 fa18 	bl	80077e0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063ba:	2b40      	cmp	r3, #64	@ 0x40
 80063bc:	d146      	bne.n	800644c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	3308      	adds	r3, #8
 80063c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80063cc:	e853 3f00 	ldrex	r3, [r3]
 80063d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80063d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80063d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	3308      	adds	r3, #8
 80063e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80063ea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80063ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80063f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80063fa:	e841 2300 	strex	r3, r2, [r1]
 80063fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006402:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006406:	2b00      	cmp	r3, #0
 8006408:	d1d9      	bne.n	80063be <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006410:	2b00      	cmp	r3, #0
 8006412:	d017      	beq.n	8006444 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800641a:	4a15      	ldr	r2, [pc, #84]	@ (8006470 <HAL_UART_IRQHandler+0x2c0>)
 800641c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006424:	4618      	mov	r0, r3
 8006426:	f7fb fda5 	bl	8001f74 <HAL_DMA_Abort_IT>
 800642a:	4603      	mov	r3, r0
 800642c:	2b00      	cmp	r3, #0
 800642e:	d019      	beq.n	8006464 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006436:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800643e:	4610      	mov	r0, r2
 8006440:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006442:	e00f      	b.n	8006464 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f000 fa93 	bl	8006970 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800644a:	e00b      	b.n	8006464 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f000 fa8f 	bl	8006970 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006452:	e007      	b.n	8006464 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f000 fa8b 	bl	8006970 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2200      	movs	r2, #0
 800645e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006462:	e26f      	b.n	8006944 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006464:	bf00      	nop
    return;
 8006466:	e26d      	b.n	8006944 <HAL_UART_IRQHandler+0x794>
 8006468:	10000001 	.word	0x10000001
 800646c:	04000120 	.word	0x04000120
 8006470:	080078ad 	.word	0x080078ad

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006478:	2b01      	cmp	r3, #1
 800647a:	f040 8203 	bne.w	8006884 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800647e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006482:	f003 0310 	and.w	r3, r3, #16
 8006486:	2b00      	cmp	r3, #0
 8006488:	f000 81fc 	beq.w	8006884 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800648c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006490:	f003 0310 	and.w	r3, r3, #16
 8006494:	2b00      	cmp	r3, #0
 8006496:	f000 81f5 	beq.w	8006884 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	2210      	movs	r2, #16
 80064a0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064ac:	2b40      	cmp	r3, #64	@ 0x40
 80064ae:	f040 816d 	bne.w	800678c <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4aa4      	ldr	r2, [pc, #656]	@ (800674c <HAL_UART_IRQHandler+0x59c>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d068      	beq.n	8006592 <HAL_UART_IRQHandler+0x3e2>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4aa1      	ldr	r2, [pc, #644]	@ (8006750 <HAL_UART_IRQHandler+0x5a0>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d061      	beq.n	8006592 <HAL_UART_IRQHandler+0x3e2>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a9f      	ldr	r2, [pc, #636]	@ (8006754 <HAL_UART_IRQHandler+0x5a4>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d05a      	beq.n	8006592 <HAL_UART_IRQHandler+0x3e2>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a9c      	ldr	r2, [pc, #624]	@ (8006758 <HAL_UART_IRQHandler+0x5a8>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d053      	beq.n	8006592 <HAL_UART_IRQHandler+0x3e2>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a9a      	ldr	r2, [pc, #616]	@ (800675c <HAL_UART_IRQHandler+0x5ac>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d04c      	beq.n	8006592 <HAL_UART_IRQHandler+0x3e2>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a97      	ldr	r2, [pc, #604]	@ (8006760 <HAL_UART_IRQHandler+0x5b0>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d045      	beq.n	8006592 <HAL_UART_IRQHandler+0x3e2>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a95      	ldr	r2, [pc, #596]	@ (8006764 <HAL_UART_IRQHandler+0x5b4>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d03e      	beq.n	8006592 <HAL_UART_IRQHandler+0x3e2>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a92      	ldr	r2, [pc, #584]	@ (8006768 <HAL_UART_IRQHandler+0x5b8>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d037      	beq.n	8006592 <HAL_UART_IRQHandler+0x3e2>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a90      	ldr	r2, [pc, #576]	@ (800676c <HAL_UART_IRQHandler+0x5bc>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d030      	beq.n	8006592 <HAL_UART_IRQHandler+0x3e2>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a8d      	ldr	r2, [pc, #564]	@ (8006770 <HAL_UART_IRQHandler+0x5c0>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d029      	beq.n	8006592 <HAL_UART_IRQHandler+0x3e2>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a8b      	ldr	r2, [pc, #556]	@ (8006774 <HAL_UART_IRQHandler+0x5c4>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d022      	beq.n	8006592 <HAL_UART_IRQHandler+0x3e2>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a88      	ldr	r2, [pc, #544]	@ (8006778 <HAL_UART_IRQHandler+0x5c8>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d01b      	beq.n	8006592 <HAL_UART_IRQHandler+0x3e2>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a86      	ldr	r2, [pc, #536]	@ (800677c <HAL_UART_IRQHandler+0x5cc>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d014      	beq.n	8006592 <HAL_UART_IRQHandler+0x3e2>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a83      	ldr	r2, [pc, #524]	@ (8006780 <HAL_UART_IRQHandler+0x5d0>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d00d      	beq.n	8006592 <HAL_UART_IRQHandler+0x3e2>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a81      	ldr	r2, [pc, #516]	@ (8006784 <HAL_UART_IRQHandler+0x5d4>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d006      	beq.n	8006592 <HAL_UART_IRQHandler+0x3e2>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a7e      	ldr	r2, [pc, #504]	@ (8006788 <HAL_UART_IRQHandler+0x5d8>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d106      	bne.n	80065a0 <HAL_UART_IRQHandler+0x3f0>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	b29b      	uxth	r3, r3
 800659e:	e005      	b.n	80065ac <HAL_UART_IRQHandler+0x3fc>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80065b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	f000 80ad 	beq.w	8006714 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80065c0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80065c4:	429a      	cmp	r2, r3
 80065c6:	f080 80a5 	bcs.w	8006714 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80065d0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065da:	69db      	ldr	r3, [r3, #28]
 80065dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065e0:	f000 8087 	beq.w	80066f2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80065f0:	e853 3f00 	ldrex	r3, [r3]
 80065f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80065f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80065fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006600:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	461a      	mov	r2, r3
 800660a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800660e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006612:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006616:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800661a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800661e:	e841 2300 	strex	r3, r2, [r1]
 8006622:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006626:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800662a:	2b00      	cmp	r3, #0
 800662c:	d1da      	bne.n	80065e4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	3308      	adds	r3, #8
 8006634:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006636:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006638:	e853 3f00 	ldrex	r3, [r3]
 800663c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800663e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006640:	f023 0301 	bic.w	r3, r3, #1
 8006644:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	3308      	adds	r3, #8
 800664e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006652:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006656:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006658:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800665a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800665e:	e841 2300 	strex	r3, r2, [r1]
 8006662:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006664:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006666:	2b00      	cmp	r3, #0
 8006668:	d1e1      	bne.n	800662e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	3308      	adds	r3, #8
 8006670:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006672:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006674:	e853 3f00 	ldrex	r3, [r3]
 8006678:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800667a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800667c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006680:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	3308      	adds	r3, #8
 800668a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800668e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006690:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006692:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006694:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006696:	e841 2300 	strex	r3, r2, [r1]
 800669a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800669c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d1e3      	bne.n	800666a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2220      	movs	r2, #32
 80066a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066b8:	e853 3f00 	ldrex	r3, [r3]
 80066bc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80066be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80066c0:	f023 0310 	bic.w	r3, r3, #16
 80066c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	461a      	mov	r2, r3
 80066ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80066d2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80066d4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80066d8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80066da:	e841 2300 	strex	r3, r2, [r1]
 80066de:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80066e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d1e4      	bne.n	80066b0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066ec:	4618      	mov	r0, r3
 80066ee:	f7fb f923 	bl	8001938 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2202      	movs	r2, #2
 80066f6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006704:	b29b      	uxth	r3, r3
 8006706:	1ad3      	subs	r3, r2, r3
 8006708:	b29b      	uxth	r3, r3
 800670a:	4619      	mov	r1, r3
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f000 f939 	bl	8006984 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006712:	e119      	b.n	8006948 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800671a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800671e:	429a      	cmp	r2, r3
 8006720:	f040 8112 	bne.w	8006948 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800672a:	69db      	ldr	r3, [r3, #28]
 800672c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006730:	f040 810a 	bne.w	8006948 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2202      	movs	r2, #2
 8006738:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006740:	4619      	mov	r1, r3
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f000 f91e 	bl	8006984 <HAL_UARTEx_RxEventCallback>
      return;
 8006748:	e0fe      	b.n	8006948 <HAL_UART_IRQHandler+0x798>
 800674a:	bf00      	nop
 800674c:	40020010 	.word	0x40020010
 8006750:	40020028 	.word	0x40020028
 8006754:	40020040 	.word	0x40020040
 8006758:	40020058 	.word	0x40020058
 800675c:	40020070 	.word	0x40020070
 8006760:	40020088 	.word	0x40020088
 8006764:	400200a0 	.word	0x400200a0
 8006768:	400200b8 	.word	0x400200b8
 800676c:	40020410 	.word	0x40020410
 8006770:	40020428 	.word	0x40020428
 8006774:	40020440 	.word	0x40020440
 8006778:	40020458 	.word	0x40020458
 800677c:	40020470 	.word	0x40020470
 8006780:	40020488 	.word	0x40020488
 8006784:	400204a0 	.word	0x400204a0
 8006788:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006798:	b29b      	uxth	r3, r3
 800679a:	1ad3      	subs	r3, r2, r3
 800679c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	f000 80cf 	beq.w	800694c <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 80067ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	f000 80ca 	beq.w	800694c <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067c0:	e853 3f00 	ldrex	r3, [r3]
 80067c4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80067c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80067cc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	461a      	mov	r2, r3
 80067d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80067da:	647b      	str	r3, [r7, #68]	@ 0x44
 80067dc:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067de:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80067e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80067e2:	e841 2300 	strex	r3, r2, [r1]
 80067e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80067e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d1e4      	bne.n	80067b8 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	3308      	adds	r3, #8
 80067f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f8:	e853 3f00 	ldrex	r3, [r3]
 80067fc:	623b      	str	r3, [r7, #32]
   return(result);
 80067fe:	6a3a      	ldr	r2, [r7, #32]
 8006800:	4b55      	ldr	r3, [pc, #340]	@ (8006958 <HAL_UART_IRQHandler+0x7a8>)
 8006802:	4013      	ands	r3, r2
 8006804:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	3308      	adds	r3, #8
 800680e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006812:	633a      	str	r2, [r7, #48]	@ 0x30
 8006814:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006816:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006818:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800681a:	e841 2300 	strex	r3, r2, [r1]
 800681e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006822:	2b00      	cmp	r3, #0
 8006824:	d1e3      	bne.n	80067ee <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2220      	movs	r2, #32
 800682a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	e853 3f00 	ldrex	r3, [r3]
 8006846:	60fb      	str	r3, [r7, #12]
   return(result);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f023 0310 	bic.w	r3, r3, #16
 800684e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	461a      	mov	r2, r3
 8006858:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800685c:	61fb      	str	r3, [r7, #28]
 800685e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006860:	69b9      	ldr	r1, [r7, #24]
 8006862:	69fa      	ldr	r2, [r7, #28]
 8006864:	e841 2300 	strex	r3, r2, [r1]
 8006868:	617b      	str	r3, [r7, #20]
   return(result);
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d1e4      	bne.n	800683a <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2202      	movs	r2, #2
 8006874:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006876:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800687a:	4619      	mov	r1, r3
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f000 f881 	bl	8006984 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006882:	e063      	b.n	800694c <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006884:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006888:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800688c:	2b00      	cmp	r3, #0
 800688e:	d00e      	beq.n	80068ae <HAL_UART_IRQHandler+0x6fe>
 8006890:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006894:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006898:	2b00      	cmp	r3, #0
 800689a:	d008      	beq.n	80068ae <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80068a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f001 f83d 	bl	8007926 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80068ac:	e051      	b.n	8006952 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80068ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d014      	beq.n	80068e4 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80068ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d105      	bne.n	80068d2 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80068c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d008      	beq.n	80068e4 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d03a      	beq.n	8006950 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	4798      	blx	r3
    }
    return;
 80068e2:	e035      	b.n	8006950 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80068e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d009      	beq.n	8006904 <HAL_UART_IRQHandler+0x754>
 80068f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d003      	beq.n	8006904 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 ffe7 	bl	80078d0 <UART_EndTransmit_IT>
    return;
 8006902:	e026      	b.n	8006952 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006904:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006908:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800690c:	2b00      	cmp	r3, #0
 800690e:	d009      	beq.n	8006924 <HAL_UART_IRQHandler+0x774>
 8006910:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006914:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006918:	2b00      	cmp	r3, #0
 800691a:	d003      	beq.n	8006924 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f001 f816 	bl	800794e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006922:	e016      	b.n	8006952 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006924:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006928:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800692c:	2b00      	cmp	r3, #0
 800692e:	d010      	beq.n	8006952 <HAL_UART_IRQHandler+0x7a2>
 8006930:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006934:	2b00      	cmp	r3, #0
 8006936:	da0c      	bge.n	8006952 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f000 fffe 	bl	800793a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800693e:	e008      	b.n	8006952 <HAL_UART_IRQHandler+0x7a2>
      return;
 8006940:	bf00      	nop
 8006942:	e006      	b.n	8006952 <HAL_UART_IRQHandler+0x7a2>
    return;
 8006944:	bf00      	nop
 8006946:	e004      	b.n	8006952 <HAL_UART_IRQHandler+0x7a2>
      return;
 8006948:	bf00      	nop
 800694a:	e002      	b.n	8006952 <HAL_UART_IRQHandler+0x7a2>
      return;
 800694c:	bf00      	nop
 800694e:	e000      	b.n	8006952 <HAL_UART_IRQHandler+0x7a2>
    return;
 8006950:	bf00      	nop
  }
}
 8006952:	37e8      	adds	r7, #232	@ 0xe8
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}
 8006958:	effffffe 	.word	0xeffffffe

0800695c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800695c:	b480      	push	{r7}
 800695e:	b083      	sub	sp, #12
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006964:	bf00      	nop
 8006966:	370c      	adds	r7, #12
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr

08006970 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006978:	bf00      	nop
 800697a:	370c      	adds	r7, #12
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	460b      	mov	r3, r1
 800698e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006990:	bf00      	nop
 8006992:	370c      	adds	r7, #12
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr

0800699c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800699c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069a0:	b092      	sub	sp, #72	@ 0x48
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80069a6:	2300      	movs	r3, #0
 80069a8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	689a      	ldr	r2, [r3, #8]
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	691b      	ldr	r3, [r3, #16]
 80069b4:	431a      	orrs	r2, r3
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	695b      	ldr	r3, [r3, #20]
 80069ba:	431a      	orrs	r2, r3
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	69db      	ldr	r3, [r3, #28]
 80069c0:	4313      	orrs	r3, r2
 80069c2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	4bbe      	ldr	r3, [pc, #760]	@ (8006cc4 <UART_SetConfig+0x328>)
 80069cc:	4013      	ands	r3, r2
 80069ce:	697a      	ldr	r2, [r7, #20]
 80069d0:	6812      	ldr	r2, [r2, #0]
 80069d2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80069d4:	430b      	orrs	r3, r1
 80069d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	68da      	ldr	r2, [r3, #12]
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	430a      	orrs	r2, r1
 80069ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	699b      	ldr	r3, [r3, #24]
 80069f2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4ab3      	ldr	r2, [pc, #716]	@ (8006cc8 <UART_SetConfig+0x32c>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d004      	beq.n	8006a08 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	6a1b      	ldr	r3, [r3, #32]
 8006a02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a04:	4313      	orrs	r3, r2
 8006a06:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	689a      	ldr	r2, [r3, #8]
 8006a0e:	4baf      	ldr	r3, [pc, #700]	@ (8006ccc <UART_SetConfig+0x330>)
 8006a10:	4013      	ands	r3, r2
 8006a12:	697a      	ldr	r2, [r7, #20]
 8006a14:	6812      	ldr	r2, [r2, #0]
 8006a16:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006a18:	430b      	orrs	r3, r1
 8006a1a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a22:	f023 010f 	bic.w	r1, r3, #15
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	430a      	orrs	r2, r1
 8006a30:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4aa6      	ldr	r2, [pc, #664]	@ (8006cd0 <UART_SetConfig+0x334>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d177      	bne.n	8006b2c <UART_SetConfig+0x190>
 8006a3c:	4ba5      	ldr	r3, [pc, #660]	@ (8006cd4 <UART_SetConfig+0x338>)
 8006a3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a40:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006a44:	2b28      	cmp	r3, #40	@ 0x28
 8006a46:	d86d      	bhi.n	8006b24 <UART_SetConfig+0x188>
 8006a48:	a201      	add	r2, pc, #4	@ (adr r2, 8006a50 <UART_SetConfig+0xb4>)
 8006a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a4e:	bf00      	nop
 8006a50:	08006af5 	.word	0x08006af5
 8006a54:	08006b25 	.word	0x08006b25
 8006a58:	08006b25 	.word	0x08006b25
 8006a5c:	08006b25 	.word	0x08006b25
 8006a60:	08006b25 	.word	0x08006b25
 8006a64:	08006b25 	.word	0x08006b25
 8006a68:	08006b25 	.word	0x08006b25
 8006a6c:	08006b25 	.word	0x08006b25
 8006a70:	08006afd 	.word	0x08006afd
 8006a74:	08006b25 	.word	0x08006b25
 8006a78:	08006b25 	.word	0x08006b25
 8006a7c:	08006b25 	.word	0x08006b25
 8006a80:	08006b25 	.word	0x08006b25
 8006a84:	08006b25 	.word	0x08006b25
 8006a88:	08006b25 	.word	0x08006b25
 8006a8c:	08006b25 	.word	0x08006b25
 8006a90:	08006b05 	.word	0x08006b05
 8006a94:	08006b25 	.word	0x08006b25
 8006a98:	08006b25 	.word	0x08006b25
 8006a9c:	08006b25 	.word	0x08006b25
 8006aa0:	08006b25 	.word	0x08006b25
 8006aa4:	08006b25 	.word	0x08006b25
 8006aa8:	08006b25 	.word	0x08006b25
 8006aac:	08006b25 	.word	0x08006b25
 8006ab0:	08006b0d 	.word	0x08006b0d
 8006ab4:	08006b25 	.word	0x08006b25
 8006ab8:	08006b25 	.word	0x08006b25
 8006abc:	08006b25 	.word	0x08006b25
 8006ac0:	08006b25 	.word	0x08006b25
 8006ac4:	08006b25 	.word	0x08006b25
 8006ac8:	08006b25 	.word	0x08006b25
 8006acc:	08006b25 	.word	0x08006b25
 8006ad0:	08006b15 	.word	0x08006b15
 8006ad4:	08006b25 	.word	0x08006b25
 8006ad8:	08006b25 	.word	0x08006b25
 8006adc:	08006b25 	.word	0x08006b25
 8006ae0:	08006b25 	.word	0x08006b25
 8006ae4:	08006b25 	.word	0x08006b25
 8006ae8:	08006b25 	.word	0x08006b25
 8006aec:	08006b25 	.word	0x08006b25
 8006af0:	08006b1d 	.word	0x08006b1d
 8006af4:	2301      	movs	r3, #1
 8006af6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006afa:	e222      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006afc:	2304      	movs	r3, #4
 8006afe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b02:	e21e      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006b04:	2308      	movs	r3, #8
 8006b06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b0a:	e21a      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006b0c:	2310      	movs	r3, #16
 8006b0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b12:	e216      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006b14:	2320      	movs	r3, #32
 8006b16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b1a:	e212      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006b1c:	2340      	movs	r3, #64	@ 0x40
 8006b1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b22:	e20e      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006b24:	2380      	movs	r3, #128	@ 0x80
 8006b26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b2a:	e20a      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a69      	ldr	r2, [pc, #420]	@ (8006cd8 <UART_SetConfig+0x33c>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d130      	bne.n	8006b98 <UART_SetConfig+0x1fc>
 8006b36:	4b67      	ldr	r3, [pc, #412]	@ (8006cd4 <UART_SetConfig+0x338>)
 8006b38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b3a:	f003 0307 	and.w	r3, r3, #7
 8006b3e:	2b05      	cmp	r3, #5
 8006b40:	d826      	bhi.n	8006b90 <UART_SetConfig+0x1f4>
 8006b42:	a201      	add	r2, pc, #4	@ (adr r2, 8006b48 <UART_SetConfig+0x1ac>)
 8006b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b48:	08006b61 	.word	0x08006b61
 8006b4c:	08006b69 	.word	0x08006b69
 8006b50:	08006b71 	.word	0x08006b71
 8006b54:	08006b79 	.word	0x08006b79
 8006b58:	08006b81 	.word	0x08006b81
 8006b5c:	08006b89 	.word	0x08006b89
 8006b60:	2300      	movs	r3, #0
 8006b62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b66:	e1ec      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006b68:	2304      	movs	r3, #4
 8006b6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b6e:	e1e8      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006b70:	2308      	movs	r3, #8
 8006b72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b76:	e1e4      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006b78:	2310      	movs	r3, #16
 8006b7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b7e:	e1e0      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006b80:	2320      	movs	r3, #32
 8006b82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b86:	e1dc      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006b88:	2340      	movs	r3, #64	@ 0x40
 8006b8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b8e:	e1d8      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006b90:	2380      	movs	r3, #128	@ 0x80
 8006b92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b96:	e1d4      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a4f      	ldr	r2, [pc, #316]	@ (8006cdc <UART_SetConfig+0x340>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d130      	bne.n	8006c04 <UART_SetConfig+0x268>
 8006ba2:	4b4c      	ldr	r3, [pc, #304]	@ (8006cd4 <UART_SetConfig+0x338>)
 8006ba4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ba6:	f003 0307 	and.w	r3, r3, #7
 8006baa:	2b05      	cmp	r3, #5
 8006bac:	d826      	bhi.n	8006bfc <UART_SetConfig+0x260>
 8006bae:	a201      	add	r2, pc, #4	@ (adr r2, 8006bb4 <UART_SetConfig+0x218>)
 8006bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bb4:	08006bcd 	.word	0x08006bcd
 8006bb8:	08006bd5 	.word	0x08006bd5
 8006bbc:	08006bdd 	.word	0x08006bdd
 8006bc0:	08006be5 	.word	0x08006be5
 8006bc4:	08006bed 	.word	0x08006bed
 8006bc8:	08006bf5 	.word	0x08006bf5
 8006bcc:	2300      	movs	r3, #0
 8006bce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bd2:	e1b6      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006bd4:	2304      	movs	r3, #4
 8006bd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bda:	e1b2      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006bdc:	2308      	movs	r3, #8
 8006bde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006be2:	e1ae      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006be4:	2310      	movs	r3, #16
 8006be6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bea:	e1aa      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006bec:	2320      	movs	r3, #32
 8006bee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bf2:	e1a6      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006bf4:	2340      	movs	r3, #64	@ 0x40
 8006bf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bfa:	e1a2      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006bfc:	2380      	movs	r3, #128	@ 0x80
 8006bfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c02:	e19e      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a35      	ldr	r2, [pc, #212]	@ (8006ce0 <UART_SetConfig+0x344>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d130      	bne.n	8006c70 <UART_SetConfig+0x2d4>
 8006c0e:	4b31      	ldr	r3, [pc, #196]	@ (8006cd4 <UART_SetConfig+0x338>)
 8006c10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c12:	f003 0307 	and.w	r3, r3, #7
 8006c16:	2b05      	cmp	r3, #5
 8006c18:	d826      	bhi.n	8006c68 <UART_SetConfig+0x2cc>
 8006c1a:	a201      	add	r2, pc, #4	@ (adr r2, 8006c20 <UART_SetConfig+0x284>)
 8006c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c20:	08006c39 	.word	0x08006c39
 8006c24:	08006c41 	.word	0x08006c41
 8006c28:	08006c49 	.word	0x08006c49
 8006c2c:	08006c51 	.word	0x08006c51
 8006c30:	08006c59 	.word	0x08006c59
 8006c34:	08006c61 	.word	0x08006c61
 8006c38:	2300      	movs	r3, #0
 8006c3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c3e:	e180      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006c40:	2304      	movs	r3, #4
 8006c42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c46:	e17c      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006c48:	2308      	movs	r3, #8
 8006c4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c4e:	e178      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006c50:	2310      	movs	r3, #16
 8006c52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c56:	e174      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006c58:	2320      	movs	r3, #32
 8006c5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c5e:	e170      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006c60:	2340      	movs	r3, #64	@ 0x40
 8006c62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c66:	e16c      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006c68:	2380      	movs	r3, #128	@ 0x80
 8006c6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c6e:	e168      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a1b      	ldr	r2, [pc, #108]	@ (8006ce4 <UART_SetConfig+0x348>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d142      	bne.n	8006d00 <UART_SetConfig+0x364>
 8006c7a:	4b16      	ldr	r3, [pc, #88]	@ (8006cd4 <UART_SetConfig+0x338>)
 8006c7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c7e:	f003 0307 	and.w	r3, r3, #7
 8006c82:	2b05      	cmp	r3, #5
 8006c84:	d838      	bhi.n	8006cf8 <UART_SetConfig+0x35c>
 8006c86:	a201      	add	r2, pc, #4	@ (adr r2, 8006c8c <UART_SetConfig+0x2f0>)
 8006c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c8c:	08006ca5 	.word	0x08006ca5
 8006c90:	08006cad 	.word	0x08006cad
 8006c94:	08006cb5 	.word	0x08006cb5
 8006c98:	08006cbd 	.word	0x08006cbd
 8006c9c:	08006ce9 	.word	0x08006ce9
 8006ca0:	08006cf1 	.word	0x08006cf1
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006caa:	e14a      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006cac:	2304      	movs	r3, #4
 8006cae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cb2:	e146      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006cb4:	2308      	movs	r3, #8
 8006cb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cba:	e142      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006cbc:	2310      	movs	r3, #16
 8006cbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cc2:	e13e      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006cc4:	cfff69f3 	.word	0xcfff69f3
 8006cc8:	58000c00 	.word	0x58000c00
 8006ccc:	11fff4ff 	.word	0x11fff4ff
 8006cd0:	40011000 	.word	0x40011000
 8006cd4:	58024400 	.word	0x58024400
 8006cd8:	40004400 	.word	0x40004400
 8006cdc:	40004800 	.word	0x40004800
 8006ce0:	40004c00 	.word	0x40004c00
 8006ce4:	40005000 	.word	0x40005000
 8006ce8:	2320      	movs	r3, #32
 8006cea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cee:	e128      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006cf0:	2340      	movs	r3, #64	@ 0x40
 8006cf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cf6:	e124      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006cf8:	2380      	movs	r3, #128	@ 0x80
 8006cfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cfe:	e120      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4acb      	ldr	r2, [pc, #812]	@ (8007034 <UART_SetConfig+0x698>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d176      	bne.n	8006df8 <UART_SetConfig+0x45c>
 8006d0a:	4bcb      	ldr	r3, [pc, #812]	@ (8007038 <UART_SetConfig+0x69c>)
 8006d0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d0e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006d12:	2b28      	cmp	r3, #40	@ 0x28
 8006d14:	d86c      	bhi.n	8006df0 <UART_SetConfig+0x454>
 8006d16:	a201      	add	r2, pc, #4	@ (adr r2, 8006d1c <UART_SetConfig+0x380>)
 8006d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d1c:	08006dc1 	.word	0x08006dc1
 8006d20:	08006df1 	.word	0x08006df1
 8006d24:	08006df1 	.word	0x08006df1
 8006d28:	08006df1 	.word	0x08006df1
 8006d2c:	08006df1 	.word	0x08006df1
 8006d30:	08006df1 	.word	0x08006df1
 8006d34:	08006df1 	.word	0x08006df1
 8006d38:	08006df1 	.word	0x08006df1
 8006d3c:	08006dc9 	.word	0x08006dc9
 8006d40:	08006df1 	.word	0x08006df1
 8006d44:	08006df1 	.word	0x08006df1
 8006d48:	08006df1 	.word	0x08006df1
 8006d4c:	08006df1 	.word	0x08006df1
 8006d50:	08006df1 	.word	0x08006df1
 8006d54:	08006df1 	.word	0x08006df1
 8006d58:	08006df1 	.word	0x08006df1
 8006d5c:	08006dd1 	.word	0x08006dd1
 8006d60:	08006df1 	.word	0x08006df1
 8006d64:	08006df1 	.word	0x08006df1
 8006d68:	08006df1 	.word	0x08006df1
 8006d6c:	08006df1 	.word	0x08006df1
 8006d70:	08006df1 	.word	0x08006df1
 8006d74:	08006df1 	.word	0x08006df1
 8006d78:	08006df1 	.word	0x08006df1
 8006d7c:	08006dd9 	.word	0x08006dd9
 8006d80:	08006df1 	.word	0x08006df1
 8006d84:	08006df1 	.word	0x08006df1
 8006d88:	08006df1 	.word	0x08006df1
 8006d8c:	08006df1 	.word	0x08006df1
 8006d90:	08006df1 	.word	0x08006df1
 8006d94:	08006df1 	.word	0x08006df1
 8006d98:	08006df1 	.word	0x08006df1
 8006d9c:	08006de1 	.word	0x08006de1
 8006da0:	08006df1 	.word	0x08006df1
 8006da4:	08006df1 	.word	0x08006df1
 8006da8:	08006df1 	.word	0x08006df1
 8006dac:	08006df1 	.word	0x08006df1
 8006db0:	08006df1 	.word	0x08006df1
 8006db4:	08006df1 	.word	0x08006df1
 8006db8:	08006df1 	.word	0x08006df1
 8006dbc:	08006de9 	.word	0x08006de9
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dc6:	e0bc      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006dc8:	2304      	movs	r3, #4
 8006dca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dce:	e0b8      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006dd0:	2308      	movs	r3, #8
 8006dd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dd6:	e0b4      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006dd8:	2310      	movs	r3, #16
 8006dda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dde:	e0b0      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006de0:	2320      	movs	r3, #32
 8006de2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006de6:	e0ac      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006de8:	2340      	movs	r3, #64	@ 0x40
 8006dea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dee:	e0a8      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006df0:	2380      	movs	r3, #128	@ 0x80
 8006df2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006df6:	e0a4      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a8f      	ldr	r2, [pc, #572]	@ (800703c <UART_SetConfig+0x6a0>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d130      	bne.n	8006e64 <UART_SetConfig+0x4c8>
 8006e02:	4b8d      	ldr	r3, [pc, #564]	@ (8007038 <UART_SetConfig+0x69c>)
 8006e04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e06:	f003 0307 	and.w	r3, r3, #7
 8006e0a:	2b05      	cmp	r3, #5
 8006e0c:	d826      	bhi.n	8006e5c <UART_SetConfig+0x4c0>
 8006e0e:	a201      	add	r2, pc, #4	@ (adr r2, 8006e14 <UART_SetConfig+0x478>)
 8006e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e14:	08006e2d 	.word	0x08006e2d
 8006e18:	08006e35 	.word	0x08006e35
 8006e1c:	08006e3d 	.word	0x08006e3d
 8006e20:	08006e45 	.word	0x08006e45
 8006e24:	08006e4d 	.word	0x08006e4d
 8006e28:	08006e55 	.word	0x08006e55
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e32:	e086      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006e34:	2304      	movs	r3, #4
 8006e36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e3a:	e082      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006e3c:	2308      	movs	r3, #8
 8006e3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e42:	e07e      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006e44:	2310      	movs	r3, #16
 8006e46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e4a:	e07a      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006e4c:	2320      	movs	r3, #32
 8006e4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e52:	e076      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006e54:	2340      	movs	r3, #64	@ 0x40
 8006e56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e5a:	e072      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006e5c:	2380      	movs	r3, #128	@ 0x80
 8006e5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e62:	e06e      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a75      	ldr	r2, [pc, #468]	@ (8007040 <UART_SetConfig+0x6a4>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d130      	bne.n	8006ed0 <UART_SetConfig+0x534>
 8006e6e:	4b72      	ldr	r3, [pc, #456]	@ (8007038 <UART_SetConfig+0x69c>)
 8006e70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e72:	f003 0307 	and.w	r3, r3, #7
 8006e76:	2b05      	cmp	r3, #5
 8006e78:	d826      	bhi.n	8006ec8 <UART_SetConfig+0x52c>
 8006e7a:	a201      	add	r2, pc, #4	@ (adr r2, 8006e80 <UART_SetConfig+0x4e4>)
 8006e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e80:	08006e99 	.word	0x08006e99
 8006e84:	08006ea1 	.word	0x08006ea1
 8006e88:	08006ea9 	.word	0x08006ea9
 8006e8c:	08006eb1 	.word	0x08006eb1
 8006e90:	08006eb9 	.word	0x08006eb9
 8006e94:	08006ec1 	.word	0x08006ec1
 8006e98:	2300      	movs	r3, #0
 8006e9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e9e:	e050      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006ea0:	2304      	movs	r3, #4
 8006ea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ea6:	e04c      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006ea8:	2308      	movs	r3, #8
 8006eaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006eae:	e048      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006eb0:	2310      	movs	r3, #16
 8006eb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006eb6:	e044      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006eb8:	2320      	movs	r3, #32
 8006eba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ebe:	e040      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006ec0:	2340      	movs	r3, #64	@ 0x40
 8006ec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ec6:	e03c      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006ec8:	2380      	movs	r3, #128	@ 0x80
 8006eca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ece:	e038      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a5b      	ldr	r2, [pc, #364]	@ (8007044 <UART_SetConfig+0x6a8>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d130      	bne.n	8006f3c <UART_SetConfig+0x5a0>
 8006eda:	4b57      	ldr	r3, [pc, #348]	@ (8007038 <UART_SetConfig+0x69c>)
 8006edc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ede:	f003 0307 	and.w	r3, r3, #7
 8006ee2:	2b05      	cmp	r3, #5
 8006ee4:	d826      	bhi.n	8006f34 <UART_SetConfig+0x598>
 8006ee6:	a201      	add	r2, pc, #4	@ (adr r2, 8006eec <UART_SetConfig+0x550>)
 8006ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eec:	08006f05 	.word	0x08006f05
 8006ef0:	08006f0d 	.word	0x08006f0d
 8006ef4:	08006f15 	.word	0x08006f15
 8006ef8:	08006f1d 	.word	0x08006f1d
 8006efc:	08006f25 	.word	0x08006f25
 8006f00:	08006f2d 	.word	0x08006f2d
 8006f04:	2302      	movs	r3, #2
 8006f06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f0a:	e01a      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006f0c:	2304      	movs	r3, #4
 8006f0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f12:	e016      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006f14:	2308      	movs	r3, #8
 8006f16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f1a:	e012      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006f1c:	2310      	movs	r3, #16
 8006f1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f22:	e00e      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006f24:	2320      	movs	r3, #32
 8006f26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f2a:	e00a      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006f2c:	2340      	movs	r3, #64	@ 0x40
 8006f2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f32:	e006      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006f34:	2380      	movs	r3, #128	@ 0x80
 8006f36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f3a:	e002      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006f3c:	2380      	movs	r3, #128	@ 0x80
 8006f3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a3f      	ldr	r2, [pc, #252]	@ (8007044 <UART_SetConfig+0x6a8>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	f040 80f8 	bne.w	800713e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006f4e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006f52:	2b20      	cmp	r3, #32
 8006f54:	dc46      	bgt.n	8006fe4 <UART_SetConfig+0x648>
 8006f56:	2b02      	cmp	r3, #2
 8006f58:	f2c0 8082 	blt.w	8007060 <UART_SetConfig+0x6c4>
 8006f5c:	3b02      	subs	r3, #2
 8006f5e:	2b1e      	cmp	r3, #30
 8006f60:	d87e      	bhi.n	8007060 <UART_SetConfig+0x6c4>
 8006f62:	a201      	add	r2, pc, #4	@ (adr r2, 8006f68 <UART_SetConfig+0x5cc>)
 8006f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f68:	08006feb 	.word	0x08006feb
 8006f6c:	08007061 	.word	0x08007061
 8006f70:	08006ff3 	.word	0x08006ff3
 8006f74:	08007061 	.word	0x08007061
 8006f78:	08007061 	.word	0x08007061
 8006f7c:	08007061 	.word	0x08007061
 8006f80:	08007003 	.word	0x08007003
 8006f84:	08007061 	.word	0x08007061
 8006f88:	08007061 	.word	0x08007061
 8006f8c:	08007061 	.word	0x08007061
 8006f90:	08007061 	.word	0x08007061
 8006f94:	08007061 	.word	0x08007061
 8006f98:	08007061 	.word	0x08007061
 8006f9c:	08007061 	.word	0x08007061
 8006fa0:	08007013 	.word	0x08007013
 8006fa4:	08007061 	.word	0x08007061
 8006fa8:	08007061 	.word	0x08007061
 8006fac:	08007061 	.word	0x08007061
 8006fb0:	08007061 	.word	0x08007061
 8006fb4:	08007061 	.word	0x08007061
 8006fb8:	08007061 	.word	0x08007061
 8006fbc:	08007061 	.word	0x08007061
 8006fc0:	08007061 	.word	0x08007061
 8006fc4:	08007061 	.word	0x08007061
 8006fc8:	08007061 	.word	0x08007061
 8006fcc:	08007061 	.word	0x08007061
 8006fd0:	08007061 	.word	0x08007061
 8006fd4:	08007061 	.word	0x08007061
 8006fd8:	08007061 	.word	0x08007061
 8006fdc:	08007061 	.word	0x08007061
 8006fe0:	08007053 	.word	0x08007053
 8006fe4:	2b40      	cmp	r3, #64	@ 0x40
 8006fe6:	d037      	beq.n	8007058 <UART_SetConfig+0x6bc>
 8006fe8:	e03a      	b.n	8007060 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006fea:	f7fd fe4b 	bl	8004c84 <HAL_RCCEx_GetD3PCLK1Freq>
 8006fee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006ff0:	e03c      	b.n	800706c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ff2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f7fd fe5a 	bl	8004cb0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006ffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ffe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007000:	e034      	b.n	800706c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007002:	f107 0318 	add.w	r3, r7, #24
 8007006:	4618      	mov	r0, r3
 8007008:	f7fd ffa6 	bl	8004f58 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800700c:	69fb      	ldr	r3, [r7, #28]
 800700e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007010:	e02c      	b.n	800706c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007012:	4b09      	ldr	r3, [pc, #36]	@ (8007038 <UART_SetConfig+0x69c>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f003 0320 	and.w	r3, r3, #32
 800701a:	2b00      	cmp	r3, #0
 800701c:	d016      	beq.n	800704c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800701e:	4b06      	ldr	r3, [pc, #24]	@ (8007038 <UART_SetConfig+0x69c>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	08db      	lsrs	r3, r3, #3
 8007024:	f003 0303 	and.w	r3, r3, #3
 8007028:	4a07      	ldr	r2, [pc, #28]	@ (8007048 <UART_SetConfig+0x6ac>)
 800702a:	fa22 f303 	lsr.w	r3, r2, r3
 800702e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007030:	e01c      	b.n	800706c <UART_SetConfig+0x6d0>
 8007032:	bf00      	nop
 8007034:	40011400 	.word	0x40011400
 8007038:	58024400 	.word	0x58024400
 800703c:	40007800 	.word	0x40007800
 8007040:	40007c00 	.word	0x40007c00
 8007044:	58000c00 	.word	0x58000c00
 8007048:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800704c:	4b9d      	ldr	r3, [pc, #628]	@ (80072c4 <UART_SetConfig+0x928>)
 800704e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007050:	e00c      	b.n	800706c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007052:	4b9d      	ldr	r3, [pc, #628]	@ (80072c8 <UART_SetConfig+0x92c>)
 8007054:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007056:	e009      	b.n	800706c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007058:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800705c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800705e:	e005      	b.n	800706c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007060:	2300      	movs	r3, #0
 8007062:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007064:	2301      	movs	r3, #1
 8007066:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800706a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800706c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800706e:	2b00      	cmp	r3, #0
 8007070:	f000 81de 	beq.w	8007430 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007078:	4a94      	ldr	r2, [pc, #592]	@ (80072cc <UART_SetConfig+0x930>)
 800707a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800707e:	461a      	mov	r2, r3
 8007080:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007082:	fbb3 f3f2 	udiv	r3, r3, r2
 8007086:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	685a      	ldr	r2, [r3, #4]
 800708c:	4613      	mov	r3, r2
 800708e:	005b      	lsls	r3, r3, #1
 8007090:	4413      	add	r3, r2
 8007092:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007094:	429a      	cmp	r2, r3
 8007096:	d305      	bcc.n	80070a4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800709e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d903      	bls.n	80070ac <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80070a4:	2301      	movs	r3, #1
 80070a6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80070aa:	e1c1      	b.n	8007430 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070ae:	2200      	movs	r2, #0
 80070b0:	60bb      	str	r3, [r7, #8]
 80070b2:	60fa      	str	r2, [r7, #12]
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070b8:	4a84      	ldr	r2, [pc, #528]	@ (80072cc <UART_SetConfig+0x930>)
 80070ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070be:	b29b      	uxth	r3, r3
 80070c0:	2200      	movs	r2, #0
 80070c2:	603b      	str	r3, [r7, #0]
 80070c4:	607a      	str	r2, [r7, #4]
 80070c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80070ce:	f7f9 f957 	bl	8000380 <__aeabi_uldivmod>
 80070d2:	4602      	mov	r2, r0
 80070d4:	460b      	mov	r3, r1
 80070d6:	4610      	mov	r0, r2
 80070d8:	4619      	mov	r1, r3
 80070da:	f04f 0200 	mov.w	r2, #0
 80070de:	f04f 0300 	mov.w	r3, #0
 80070e2:	020b      	lsls	r3, r1, #8
 80070e4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80070e8:	0202      	lsls	r2, r0, #8
 80070ea:	6979      	ldr	r1, [r7, #20]
 80070ec:	6849      	ldr	r1, [r1, #4]
 80070ee:	0849      	lsrs	r1, r1, #1
 80070f0:	2000      	movs	r0, #0
 80070f2:	460c      	mov	r4, r1
 80070f4:	4605      	mov	r5, r0
 80070f6:	eb12 0804 	adds.w	r8, r2, r4
 80070fa:	eb43 0905 	adc.w	r9, r3, r5
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	469a      	mov	sl, r3
 8007106:	4693      	mov	fp, r2
 8007108:	4652      	mov	r2, sl
 800710a:	465b      	mov	r3, fp
 800710c:	4640      	mov	r0, r8
 800710e:	4649      	mov	r1, r9
 8007110:	f7f9 f936 	bl	8000380 <__aeabi_uldivmod>
 8007114:	4602      	mov	r2, r0
 8007116:	460b      	mov	r3, r1
 8007118:	4613      	mov	r3, r2
 800711a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800711c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800711e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007122:	d308      	bcc.n	8007136 <UART_SetConfig+0x79a>
 8007124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007126:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800712a:	d204      	bcs.n	8007136 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007132:	60da      	str	r2, [r3, #12]
 8007134:	e17c      	b.n	8007430 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800713c:	e178      	b.n	8007430 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	69db      	ldr	r3, [r3, #28]
 8007142:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007146:	f040 80c5 	bne.w	80072d4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800714a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800714e:	2b20      	cmp	r3, #32
 8007150:	dc48      	bgt.n	80071e4 <UART_SetConfig+0x848>
 8007152:	2b00      	cmp	r3, #0
 8007154:	db7b      	blt.n	800724e <UART_SetConfig+0x8b2>
 8007156:	2b20      	cmp	r3, #32
 8007158:	d879      	bhi.n	800724e <UART_SetConfig+0x8b2>
 800715a:	a201      	add	r2, pc, #4	@ (adr r2, 8007160 <UART_SetConfig+0x7c4>)
 800715c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007160:	080071eb 	.word	0x080071eb
 8007164:	080071f3 	.word	0x080071f3
 8007168:	0800724f 	.word	0x0800724f
 800716c:	0800724f 	.word	0x0800724f
 8007170:	080071fb 	.word	0x080071fb
 8007174:	0800724f 	.word	0x0800724f
 8007178:	0800724f 	.word	0x0800724f
 800717c:	0800724f 	.word	0x0800724f
 8007180:	0800720b 	.word	0x0800720b
 8007184:	0800724f 	.word	0x0800724f
 8007188:	0800724f 	.word	0x0800724f
 800718c:	0800724f 	.word	0x0800724f
 8007190:	0800724f 	.word	0x0800724f
 8007194:	0800724f 	.word	0x0800724f
 8007198:	0800724f 	.word	0x0800724f
 800719c:	0800724f 	.word	0x0800724f
 80071a0:	0800721b 	.word	0x0800721b
 80071a4:	0800724f 	.word	0x0800724f
 80071a8:	0800724f 	.word	0x0800724f
 80071ac:	0800724f 	.word	0x0800724f
 80071b0:	0800724f 	.word	0x0800724f
 80071b4:	0800724f 	.word	0x0800724f
 80071b8:	0800724f 	.word	0x0800724f
 80071bc:	0800724f 	.word	0x0800724f
 80071c0:	0800724f 	.word	0x0800724f
 80071c4:	0800724f 	.word	0x0800724f
 80071c8:	0800724f 	.word	0x0800724f
 80071cc:	0800724f 	.word	0x0800724f
 80071d0:	0800724f 	.word	0x0800724f
 80071d4:	0800724f 	.word	0x0800724f
 80071d8:	0800724f 	.word	0x0800724f
 80071dc:	0800724f 	.word	0x0800724f
 80071e0:	08007241 	.word	0x08007241
 80071e4:	2b40      	cmp	r3, #64	@ 0x40
 80071e6:	d02e      	beq.n	8007246 <UART_SetConfig+0x8aa>
 80071e8:	e031      	b.n	800724e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071ea:	f7fc fb15 	bl	8003818 <HAL_RCC_GetPCLK1Freq>
 80071ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80071f0:	e033      	b.n	800725a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071f2:	f7fc fb27 	bl	8003844 <HAL_RCC_GetPCLK2Freq>
 80071f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80071f8:	e02f      	b.n	800725a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80071fe:	4618      	mov	r0, r3
 8007200:	f7fd fd56 	bl	8004cb0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007206:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007208:	e027      	b.n	800725a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800720a:	f107 0318 	add.w	r3, r7, #24
 800720e:	4618      	mov	r0, r3
 8007210:	f7fd fea2 	bl	8004f58 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007214:	69fb      	ldr	r3, [r7, #28]
 8007216:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007218:	e01f      	b.n	800725a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800721a:	4b2d      	ldr	r3, [pc, #180]	@ (80072d0 <UART_SetConfig+0x934>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f003 0320 	and.w	r3, r3, #32
 8007222:	2b00      	cmp	r3, #0
 8007224:	d009      	beq.n	800723a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007226:	4b2a      	ldr	r3, [pc, #168]	@ (80072d0 <UART_SetConfig+0x934>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	08db      	lsrs	r3, r3, #3
 800722c:	f003 0303 	and.w	r3, r3, #3
 8007230:	4a24      	ldr	r2, [pc, #144]	@ (80072c4 <UART_SetConfig+0x928>)
 8007232:	fa22 f303 	lsr.w	r3, r2, r3
 8007236:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007238:	e00f      	b.n	800725a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800723a:	4b22      	ldr	r3, [pc, #136]	@ (80072c4 <UART_SetConfig+0x928>)
 800723c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800723e:	e00c      	b.n	800725a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007240:	4b21      	ldr	r3, [pc, #132]	@ (80072c8 <UART_SetConfig+0x92c>)
 8007242:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007244:	e009      	b.n	800725a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007246:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800724a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800724c:	e005      	b.n	800725a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800724e:	2300      	movs	r3, #0
 8007250:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007252:	2301      	movs	r3, #1
 8007254:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007258:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800725a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800725c:	2b00      	cmp	r3, #0
 800725e:	f000 80e7 	beq.w	8007430 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007266:	4a19      	ldr	r2, [pc, #100]	@ (80072cc <UART_SetConfig+0x930>)
 8007268:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800726c:	461a      	mov	r2, r3
 800726e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007270:	fbb3 f3f2 	udiv	r3, r3, r2
 8007274:	005a      	lsls	r2, r3, #1
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	085b      	lsrs	r3, r3, #1
 800727c:	441a      	add	r2, r3
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	fbb2 f3f3 	udiv	r3, r2, r3
 8007286:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800728a:	2b0f      	cmp	r3, #15
 800728c:	d916      	bls.n	80072bc <UART_SetConfig+0x920>
 800728e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007290:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007294:	d212      	bcs.n	80072bc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007298:	b29b      	uxth	r3, r3
 800729a:	f023 030f 	bic.w	r3, r3, #15
 800729e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80072a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072a2:	085b      	lsrs	r3, r3, #1
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	f003 0307 	and.w	r3, r3, #7
 80072aa:	b29a      	uxth	r2, r3
 80072ac:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80072ae:	4313      	orrs	r3, r2
 80072b0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80072b8:	60da      	str	r2, [r3, #12]
 80072ba:	e0b9      	b.n	8007430 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80072bc:	2301      	movs	r3, #1
 80072be:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80072c2:	e0b5      	b.n	8007430 <UART_SetConfig+0xa94>
 80072c4:	03d09000 	.word	0x03d09000
 80072c8:	003d0900 	.word	0x003d0900
 80072cc:	08008b0c 	.word	0x08008b0c
 80072d0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80072d4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80072d8:	2b20      	cmp	r3, #32
 80072da:	dc49      	bgt.n	8007370 <UART_SetConfig+0x9d4>
 80072dc:	2b00      	cmp	r3, #0
 80072de:	db7c      	blt.n	80073da <UART_SetConfig+0xa3e>
 80072e0:	2b20      	cmp	r3, #32
 80072e2:	d87a      	bhi.n	80073da <UART_SetConfig+0xa3e>
 80072e4:	a201      	add	r2, pc, #4	@ (adr r2, 80072ec <UART_SetConfig+0x950>)
 80072e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ea:	bf00      	nop
 80072ec:	08007377 	.word	0x08007377
 80072f0:	0800737f 	.word	0x0800737f
 80072f4:	080073db 	.word	0x080073db
 80072f8:	080073db 	.word	0x080073db
 80072fc:	08007387 	.word	0x08007387
 8007300:	080073db 	.word	0x080073db
 8007304:	080073db 	.word	0x080073db
 8007308:	080073db 	.word	0x080073db
 800730c:	08007397 	.word	0x08007397
 8007310:	080073db 	.word	0x080073db
 8007314:	080073db 	.word	0x080073db
 8007318:	080073db 	.word	0x080073db
 800731c:	080073db 	.word	0x080073db
 8007320:	080073db 	.word	0x080073db
 8007324:	080073db 	.word	0x080073db
 8007328:	080073db 	.word	0x080073db
 800732c:	080073a7 	.word	0x080073a7
 8007330:	080073db 	.word	0x080073db
 8007334:	080073db 	.word	0x080073db
 8007338:	080073db 	.word	0x080073db
 800733c:	080073db 	.word	0x080073db
 8007340:	080073db 	.word	0x080073db
 8007344:	080073db 	.word	0x080073db
 8007348:	080073db 	.word	0x080073db
 800734c:	080073db 	.word	0x080073db
 8007350:	080073db 	.word	0x080073db
 8007354:	080073db 	.word	0x080073db
 8007358:	080073db 	.word	0x080073db
 800735c:	080073db 	.word	0x080073db
 8007360:	080073db 	.word	0x080073db
 8007364:	080073db 	.word	0x080073db
 8007368:	080073db 	.word	0x080073db
 800736c:	080073cd 	.word	0x080073cd
 8007370:	2b40      	cmp	r3, #64	@ 0x40
 8007372:	d02e      	beq.n	80073d2 <UART_SetConfig+0xa36>
 8007374:	e031      	b.n	80073da <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007376:	f7fc fa4f 	bl	8003818 <HAL_RCC_GetPCLK1Freq>
 800737a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800737c:	e033      	b.n	80073e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800737e:	f7fc fa61 	bl	8003844 <HAL_RCC_GetPCLK2Freq>
 8007382:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007384:	e02f      	b.n	80073e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007386:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800738a:	4618      	mov	r0, r3
 800738c:	f7fd fc90 	bl	8004cb0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007392:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007394:	e027      	b.n	80073e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007396:	f107 0318 	add.w	r3, r7, #24
 800739a:	4618      	mov	r0, r3
 800739c:	f7fd fddc 	bl	8004f58 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80073a0:	69fb      	ldr	r3, [r7, #28]
 80073a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073a4:	e01f      	b.n	80073e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073a6:	4b2d      	ldr	r3, [pc, #180]	@ (800745c <UART_SetConfig+0xac0>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f003 0320 	and.w	r3, r3, #32
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d009      	beq.n	80073c6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80073b2:	4b2a      	ldr	r3, [pc, #168]	@ (800745c <UART_SetConfig+0xac0>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	08db      	lsrs	r3, r3, #3
 80073b8:	f003 0303 	and.w	r3, r3, #3
 80073bc:	4a28      	ldr	r2, [pc, #160]	@ (8007460 <UART_SetConfig+0xac4>)
 80073be:	fa22 f303 	lsr.w	r3, r2, r3
 80073c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80073c4:	e00f      	b.n	80073e6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80073c6:	4b26      	ldr	r3, [pc, #152]	@ (8007460 <UART_SetConfig+0xac4>)
 80073c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073ca:	e00c      	b.n	80073e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80073cc:	4b25      	ldr	r3, [pc, #148]	@ (8007464 <UART_SetConfig+0xac8>)
 80073ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073d0:	e009      	b.n	80073e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80073d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073d8:	e005      	b.n	80073e6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80073da:	2300      	movs	r3, #0
 80073dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80073de:	2301      	movs	r3, #1
 80073e0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80073e4:	bf00      	nop
    }

    if (pclk != 0U)
 80073e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d021      	beq.n	8007430 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073f0:	4a1d      	ldr	r2, [pc, #116]	@ (8007468 <UART_SetConfig+0xacc>)
 80073f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073f6:	461a      	mov	r2, r3
 80073f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073fa:	fbb3 f2f2 	udiv	r2, r3, r2
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	085b      	lsrs	r3, r3, #1
 8007404:	441a      	add	r2, r3
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	fbb2 f3f3 	udiv	r3, r2, r3
 800740e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007412:	2b0f      	cmp	r3, #15
 8007414:	d909      	bls.n	800742a <UART_SetConfig+0xa8e>
 8007416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007418:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800741c:	d205      	bcs.n	800742a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800741e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007420:	b29a      	uxth	r2, r3
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	60da      	str	r2, [r3, #12]
 8007428:	e002      	b.n	8007430 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800742a:	2301      	movs	r3, #1
 800742c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	2201      	movs	r2, #1
 8007434:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	2201      	movs	r2, #1
 800743c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	2200      	movs	r2, #0
 8007444:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	2200      	movs	r2, #0
 800744a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800744c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8007450:	4618      	mov	r0, r3
 8007452:	3748      	adds	r7, #72	@ 0x48
 8007454:	46bd      	mov	sp, r7
 8007456:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800745a:	bf00      	nop
 800745c:	58024400 	.word	0x58024400
 8007460:	03d09000 	.word	0x03d09000
 8007464:	003d0900 	.word	0x003d0900
 8007468:	08008b0c 	.word	0x08008b0c

0800746c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800746c:	b480      	push	{r7}
 800746e:	b083      	sub	sp, #12
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007478:	f003 0308 	and.w	r3, r3, #8
 800747c:	2b00      	cmp	r3, #0
 800747e:	d00a      	beq.n	8007496 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	430a      	orrs	r2, r1
 8007494:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800749a:	f003 0301 	and.w	r3, r3, #1
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d00a      	beq.n	80074b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	430a      	orrs	r2, r1
 80074b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074bc:	f003 0302 	and.w	r3, r3, #2
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d00a      	beq.n	80074da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	430a      	orrs	r2, r1
 80074d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074de:	f003 0304 	and.w	r3, r3, #4
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d00a      	beq.n	80074fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	430a      	orrs	r2, r1
 80074fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007500:	f003 0310 	and.w	r3, r3, #16
 8007504:	2b00      	cmp	r3, #0
 8007506:	d00a      	beq.n	800751e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	430a      	orrs	r2, r1
 800751c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007522:	f003 0320 	and.w	r3, r3, #32
 8007526:	2b00      	cmp	r3, #0
 8007528:	d00a      	beq.n	8007540 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	689b      	ldr	r3, [r3, #8]
 8007530:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	430a      	orrs	r2, r1
 800753e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007544:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007548:	2b00      	cmp	r3, #0
 800754a:	d01a      	beq.n	8007582 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	430a      	orrs	r2, r1
 8007560:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007566:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800756a:	d10a      	bne.n	8007582 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	430a      	orrs	r2, r1
 8007580:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007586:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800758a:	2b00      	cmp	r3, #0
 800758c:	d00a      	beq.n	80075a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	430a      	orrs	r2, r1
 80075a2:	605a      	str	r2, [r3, #4]
  }
}
 80075a4:	bf00      	nop
 80075a6:	370c      	adds	r7, #12
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr

080075b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b098      	sub	sp, #96	@ 0x60
 80075b4:	af02      	add	r7, sp, #8
 80075b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2200      	movs	r2, #0
 80075bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80075c0:	f7f9 fff6 	bl	80015b0 <HAL_GetTick>
 80075c4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f003 0308 	and.w	r3, r3, #8
 80075d0:	2b08      	cmp	r3, #8
 80075d2:	d12f      	bne.n	8007634 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075d4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80075d8:	9300      	str	r3, [sp, #0]
 80075da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075dc:	2200      	movs	r2, #0
 80075de:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 f88e 	bl	8007704 <UART_WaitOnFlagUntilTimeout>
 80075e8:	4603      	mov	r3, r0
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d022      	beq.n	8007634 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075f6:	e853 3f00 	ldrex	r3, [r3]
 80075fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80075fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007602:	653b      	str	r3, [r7, #80]	@ 0x50
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	461a      	mov	r2, r3
 800760a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800760c:	647b      	str	r3, [r7, #68]	@ 0x44
 800760e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007610:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007612:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007614:	e841 2300 	strex	r3, r2, [r1]
 8007618:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800761a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800761c:	2b00      	cmp	r3, #0
 800761e:	d1e6      	bne.n	80075ee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2220      	movs	r2, #32
 8007624:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2200      	movs	r2, #0
 800762c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007630:	2303      	movs	r3, #3
 8007632:	e063      	b.n	80076fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f003 0304 	and.w	r3, r3, #4
 800763e:	2b04      	cmp	r3, #4
 8007640:	d149      	bne.n	80076d6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007642:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007646:	9300      	str	r3, [sp, #0]
 8007648:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800764a:	2200      	movs	r2, #0
 800764c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f000 f857 	bl	8007704 <UART_WaitOnFlagUntilTimeout>
 8007656:	4603      	mov	r3, r0
 8007658:	2b00      	cmp	r3, #0
 800765a:	d03c      	beq.n	80076d6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007664:	e853 3f00 	ldrex	r3, [r3]
 8007668:	623b      	str	r3, [r7, #32]
   return(result);
 800766a:	6a3b      	ldr	r3, [r7, #32]
 800766c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007670:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	461a      	mov	r2, r3
 8007678:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800767a:	633b      	str	r3, [r7, #48]	@ 0x30
 800767c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800767e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007680:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007682:	e841 2300 	strex	r3, r2, [r1]
 8007686:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800768a:	2b00      	cmp	r3, #0
 800768c:	d1e6      	bne.n	800765c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	3308      	adds	r3, #8
 8007694:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	e853 3f00 	ldrex	r3, [r3]
 800769c:	60fb      	str	r3, [r7, #12]
   return(result);
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	f023 0301 	bic.w	r3, r3, #1
 80076a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	3308      	adds	r3, #8
 80076ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80076ae:	61fa      	str	r2, [r7, #28]
 80076b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b2:	69b9      	ldr	r1, [r7, #24]
 80076b4:	69fa      	ldr	r2, [r7, #28]
 80076b6:	e841 2300 	strex	r3, r2, [r1]
 80076ba:	617b      	str	r3, [r7, #20]
   return(result);
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d1e5      	bne.n	800768e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2220      	movs	r2, #32
 80076c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2200      	movs	r2, #0
 80076ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076d2:	2303      	movs	r3, #3
 80076d4:	e012      	b.n	80076fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2220      	movs	r2, #32
 80076da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2220      	movs	r2, #32
 80076e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2200      	movs	r2, #0
 80076ea:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2200      	movs	r2, #0
 80076f0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2200      	movs	r2, #0
 80076f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80076fa:	2300      	movs	r3, #0
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3758      	adds	r7, #88	@ 0x58
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}

08007704 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b084      	sub	sp, #16
 8007708:	af00      	add	r7, sp, #0
 800770a:	60f8      	str	r0, [r7, #12]
 800770c:	60b9      	str	r1, [r7, #8]
 800770e:	603b      	str	r3, [r7, #0]
 8007710:	4613      	mov	r3, r2
 8007712:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007714:	e04f      	b.n	80077b6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007716:	69bb      	ldr	r3, [r7, #24]
 8007718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800771c:	d04b      	beq.n	80077b6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800771e:	f7f9 ff47 	bl	80015b0 <HAL_GetTick>
 8007722:	4602      	mov	r2, r0
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	1ad3      	subs	r3, r2, r3
 8007728:	69ba      	ldr	r2, [r7, #24]
 800772a:	429a      	cmp	r2, r3
 800772c:	d302      	bcc.n	8007734 <UART_WaitOnFlagUntilTimeout+0x30>
 800772e:	69bb      	ldr	r3, [r7, #24]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d101      	bne.n	8007738 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007734:	2303      	movs	r3, #3
 8007736:	e04e      	b.n	80077d6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f003 0304 	and.w	r3, r3, #4
 8007742:	2b00      	cmp	r3, #0
 8007744:	d037      	beq.n	80077b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	2b80      	cmp	r3, #128	@ 0x80
 800774a:	d034      	beq.n	80077b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	2b40      	cmp	r3, #64	@ 0x40
 8007750:	d031      	beq.n	80077b6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	69db      	ldr	r3, [r3, #28]
 8007758:	f003 0308 	and.w	r3, r3, #8
 800775c:	2b08      	cmp	r3, #8
 800775e:	d110      	bne.n	8007782 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	2208      	movs	r2, #8
 8007766:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007768:	68f8      	ldr	r0, [r7, #12]
 800776a:	f000 f839 	bl	80077e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2208      	movs	r2, #8
 8007772:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2200      	movs	r2, #0
 800777a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800777e:	2301      	movs	r3, #1
 8007780:	e029      	b.n	80077d6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	69db      	ldr	r3, [r3, #28]
 8007788:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800778c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007790:	d111      	bne.n	80077b6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800779a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800779c:	68f8      	ldr	r0, [r7, #12]
 800779e:	f000 f81f 	bl	80077e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2220      	movs	r2, #32
 80077a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2200      	movs	r2, #0
 80077ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80077b2:	2303      	movs	r3, #3
 80077b4:	e00f      	b.n	80077d6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	69da      	ldr	r2, [r3, #28]
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	4013      	ands	r3, r2
 80077c0:	68ba      	ldr	r2, [r7, #8]
 80077c2:	429a      	cmp	r2, r3
 80077c4:	bf0c      	ite	eq
 80077c6:	2301      	moveq	r3, #1
 80077c8:	2300      	movne	r3, #0
 80077ca:	b2db      	uxtb	r3, r3
 80077cc:	461a      	mov	r2, r3
 80077ce:	79fb      	ldrb	r3, [r7, #7]
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d0a0      	beq.n	8007716 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80077d4:	2300      	movs	r3, #0
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3710      	adds	r7, #16
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
	...

080077e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b095      	sub	sp, #84	@ 0x54
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077f0:	e853 3f00 	ldrex	r3, [r3]
 80077f4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80077f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80077fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	461a      	mov	r2, r3
 8007804:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007806:	643b      	str	r3, [r7, #64]	@ 0x40
 8007808:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800780a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800780c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800780e:	e841 2300 	strex	r3, r2, [r1]
 8007812:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007816:	2b00      	cmp	r3, #0
 8007818:	d1e6      	bne.n	80077e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	3308      	adds	r3, #8
 8007820:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007822:	6a3b      	ldr	r3, [r7, #32]
 8007824:	e853 3f00 	ldrex	r3, [r3]
 8007828:	61fb      	str	r3, [r7, #28]
   return(result);
 800782a:	69fa      	ldr	r2, [r7, #28]
 800782c:	4b1e      	ldr	r3, [pc, #120]	@ (80078a8 <UART_EndRxTransfer+0xc8>)
 800782e:	4013      	ands	r3, r2
 8007830:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	3308      	adds	r3, #8
 8007838:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800783a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800783c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800783e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007840:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007842:	e841 2300 	strex	r3, r2, [r1]
 8007846:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800784a:	2b00      	cmp	r3, #0
 800784c:	d1e5      	bne.n	800781a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007852:	2b01      	cmp	r3, #1
 8007854:	d118      	bne.n	8007888 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	e853 3f00 	ldrex	r3, [r3]
 8007862:	60bb      	str	r3, [r7, #8]
   return(result);
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	f023 0310 	bic.w	r3, r3, #16
 800786a:	647b      	str	r3, [r7, #68]	@ 0x44
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	461a      	mov	r2, r3
 8007872:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007874:	61bb      	str	r3, [r7, #24]
 8007876:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007878:	6979      	ldr	r1, [r7, #20]
 800787a:	69ba      	ldr	r2, [r7, #24]
 800787c:	e841 2300 	strex	r3, r2, [r1]
 8007880:	613b      	str	r3, [r7, #16]
   return(result);
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d1e6      	bne.n	8007856 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2220      	movs	r2, #32
 800788c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2200      	movs	r2, #0
 8007894:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2200      	movs	r2, #0
 800789a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800789c:	bf00      	nop
 800789e:	3754      	adds	r7, #84	@ 0x54
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr
 80078a8:	effffffe 	.word	0xeffffffe

080078ac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2200      	movs	r2, #0
 80078be:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80078c2:	68f8      	ldr	r0, [r7, #12]
 80078c4:	f7ff f854 	bl	8006970 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078c8:	bf00      	nop
 80078ca:	3710      	adds	r7, #16
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}

080078d0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b088      	sub	sp, #32
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	e853 3f00 	ldrex	r3, [r3]
 80078e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80078ec:	61fb      	str	r3, [r7, #28]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	461a      	mov	r2, r3
 80078f4:	69fb      	ldr	r3, [r7, #28]
 80078f6:	61bb      	str	r3, [r7, #24]
 80078f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078fa:	6979      	ldr	r1, [r7, #20]
 80078fc:	69ba      	ldr	r2, [r7, #24]
 80078fe:	e841 2300 	strex	r3, r2, [r1]
 8007902:	613b      	str	r3, [r7, #16]
   return(result);
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d1e6      	bne.n	80078d8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2220      	movs	r2, #32
 800790e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2200      	movs	r2, #0
 8007916:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f7ff f81f 	bl	800695c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800791e:	bf00      	nop
 8007920:	3720      	adds	r7, #32
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}

08007926 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007926:	b480      	push	{r7}
 8007928:	b083      	sub	sp, #12
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800792e:	bf00      	nop
 8007930:	370c      	adds	r7, #12
 8007932:	46bd      	mov	sp, r7
 8007934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007938:	4770      	bx	lr

0800793a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800793a:	b480      	push	{r7}
 800793c:	b083      	sub	sp, #12
 800793e:	af00      	add	r7, sp, #0
 8007940:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007942:	bf00      	nop
 8007944:	370c      	adds	r7, #12
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr

0800794e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800794e:	b480      	push	{r7}
 8007950:	b083      	sub	sp, #12
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007956:	bf00      	nop
 8007958:	370c      	adds	r7, #12
 800795a:	46bd      	mov	sp, r7
 800795c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007960:	4770      	bx	lr

08007962 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007962:	b480      	push	{r7}
 8007964:	b085      	sub	sp, #20
 8007966:	af00      	add	r7, sp, #0
 8007968:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007970:	2b01      	cmp	r3, #1
 8007972:	d101      	bne.n	8007978 <HAL_UARTEx_DisableFifoMode+0x16>
 8007974:	2302      	movs	r3, #2
 8007976:	e027      	b.n	80079c8 <HAL_UARTEx_DisableFifoMode+0x66>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2201      	movs	r2, #1
 800797c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2224      	movs	r2, #36	@ 0x24
 8007984:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f022 0201 	bic.w	r2, r2, #1
 800799e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80079a6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2200      	movs	r2, #0
 80079ac:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	68fa      	ldr	r2, [r7, #12]
 80079b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2220      	movs	r2, #32
 80079ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2200      	movs	r2, #0
 80079c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80079c6:	2300      	movs	r3, #0
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3714      	adds	r7, #20
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr

080079d4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b084      	sub	sp, #16
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d101      	bne.n	80079ec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80079e8:	2302      	movs	r3, #2
 80079ea:	e02d      	b.n	8007a48 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2201      	movs	r2, #1
 80079f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2224      	movs	r2, #36	@ 0x24
 80079f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	681a      	ldr	r2, [r3, #0]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f022 0201 	bic.w	r2, r2, #1
 8007a12:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	689b      	ldr	r3, [r3, #8]
 8007a1a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	683a      	ldr	r2, [r7, #0]
 8007a24:	430a      	orrs	r2, r1
 8007a26:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f000 f84f 	bl	8007acc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	68fa      	ldr	r2, [r7, #12]
 8007a34:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2220      	movs	r2, #32
 8007a3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2200      	movs	r2, #0
 8007a42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007a46:	2300      	movs	r3, #0
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3710      	adds	r7, #16
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}

08007a50 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b084      	sub	sp, #16
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d101      	bne.n	8007a68 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007a64:	2302      	movs	r3, #2
 8007a66:	e02d      	b.n	8007ac4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2224      	movs	r2, #36	@ 0x24
 8007a74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	681a      	ldr	r2, [r3, #0]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f022 0201 	bic.w	r2, r2, #1
 8007a8e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	689b      	ldr	r3, [r3, #8]
 8007a96:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	683a      	ldr	r2, [r7, #0]
 8007aa0:	430a      	orrs	r2, r1
 8007aa2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f000 f811 	bl	8007acc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	68fa      	ldr	r2, [r7, #12]
 8007ab0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2220      	movs	r2, #32
 8007ab6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2200      	movs	r2, #0
 8007abe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007ac2:	2300      	movs	r3, #0
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3710      	adds	r7, #16
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}

08007acc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b085      	sub	sp, #20
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d108      	bne.n	8007aee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2201      	movs	r2, #1
 8007ae0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007aec:	e031      	b.n	8007b52 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007aee:	2310      	movs	r3, #16
 8007af0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007af2:	2310      	movs	r3, #16
 8007af4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	689b      	ldr	r3, [r3, #8]
 8007afc:	0e5b      	lsrs	r3, r3, #25
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	f003 0307 	and.w	r3, r3, #7
 8007b04:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	689b      	ldr	r3, [r3, #8]
 8007b0c:	0f5b      	lsrs	r3, r3, #29
 8007b0e:	b2db      	uxtb	r3, r3
 8007b10:	f003 0307 	and.w	r3, r3, #7
 8007b14:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007b16:	7bbb      	ldrb	r3, [r7, #14]
 8007b18:	7b3a      	ldrb	r2, [r7, #12]
 8007b1a:	4911      	ldr	r1, [pc, #68]	@ (8007b60 <UARTEx_SetNbDataToProcess+0x94>)
 8007b1c:	5c8a      	ldrb	r2, [r1, r2]
 8007b1e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007b22:	7b3a      	ldrb	r2, [r7, #12]
 8007b24:	490f      	ldr	r1, [pc, #60]	@ (8007b64 <UARTEx_SetNbDataToProcess+0x98>)
 8007b26:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007b28:	fb93 f3f2 	sdiv	r3, r3, r2
 8007b2c:	b29a      	uxth	r2, r3
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007b34:	7bfb      	ldrb	r3, [r7, #15]
 8007b36:	7b7a      	ldrb	r2, [r7, #13]
 8007b38:	4909      	ldr	r1, [pc, #36]	@ (8007b60 <UARTEx_SetNbDataToProcess+0x94>)
 8007b3a:	5c8a      	ldrb	r2, [r1, r2]
 8007b3c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007b40:	7b7a      	ldrb	r2, [r7, #13]
 8007b42:	4908      	ldr	r1, [pc, #32]	@ (8007b64 <UARTEx_SetNbDataToProcess+0x98>)
 8007b44:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007b46:	fb93 f3f2 	sdiv	r3, r3, r2
 8007b4a:	b29a      	uxth	r2, r3
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007b52:	bf00      	nop
 8007b54:	3714      	adds	r7, #20
 8007b56:	46bd      	mov	sp, r7
 8007b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5c:	4770      	bx	lr
 8007b5e:	bf00      	nop
 8007b60:	08008b24 	.word	0x08008b24
 8007b64:	08008b2c 	.word	0x08008b2c

08007b68 <std>:
 8007b68:	2300      	movs	r3, #0
 8007b6a:	b510      	push	{r4, lr}
 8007b6c:	4604      	mov	r4, r0
 8007b6e:	e9c0 3300 	strd	r3, r3, [r0]
 8007b72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b76:	6083      	str	r3, [r0, #8]
 8007b78:	8181      	strh	r1, [r0, #12]
 8007b7a:	6643      	str	r3, [r0, #100]	@ 0x64
 8007b7c:	81c2      	strh	r2, [r0, #14]
 8007b7e:	6183      	str	r3, [r0, #24]
 8007b80:	4619      	mov	r1, r3
 8007b82:	2208      	movs	r2, #8
 8007b84:	305c      	adds	r0, #92	@ 0x5c
 8007b86:	f000 f9f9 	bl	8007f7c <memset>
 8007b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8007bc0 <std+0x58>)
 8007b8c:	6263      	str	r3, [r4, #36]	@ 0x24
 8007b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8007bc4 <std+0x5c>)
 8007b90:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007b92:	4b0d      	ldr	r3, [pc, #52]	@ (8007bc8 <std+0x60>)
 8007b94:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007b96:	4b0d      	ldr	r3, [pc, #52]	@ (8007bcc <std+0x64>)
 8007b98:	6323      	str	r3, [r4, #48]	@ 0x30
 8007b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8007bd0 <std+0x68>)
 8007b9c:	6224      	str	r4, [r4, #32]
 8007b9e:	429c      	cmp	r4, r3
 8007ba0:	d006      	beq.n	8007bb0 <std+0x48>
 8007ba2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007ba6:	4294      	cmp	r4, r2
 8007ba8:	d002      	beq.n	8007bb0 <std+0x48>
 8007baa:	33d0      	adds	r3, #208	@ 0xd0
 8007bac:	429c      	cmp	r4, r3
 8007bae:	d105      	bne.n	8007bbc <std+0x54>
 8007bb0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bb8:	f000 ba58 	b.w	800806c <__retarget_lock_init_recursive>
 8007bbc:	bd10      	pop	{r4, pc}
 8007bbe:	bf00      	nop
 8007bc0:	08007dcd 	.word	0x08007dcd
 8007bc4:	08007def 	.word	0x08007def
 8007bc8:	08007e27 	.word	0x08007e27
 8007bcc:	08007e4b 	.word	0x08007e4b
 8007bd0:	24000148 	.word	0x24000148

08007bd4 <stdio_exit_handler>:
 8007bd4:	4a02      	ldr	r2, [pc, #8]	@ (8007be0 <stdio_exit_handler+0xc>)
 8007bd6:	4903      	ldr	r1, [pc, #12]	@ (8007be4 <stdio_exit_handler+0x10>)
 8007bd8:	4803      	ldr	r0, [pc, #12]	@ (8007be8 <stdio_exit_handler+0x14>)
 8007bda:	f000 b869 	b.w	8007cb0 <_fwalk_sglue>
 8007bde:	bf00      	nop
 8007be0:	24000010 	.word	0x24000010
 8007be4:	08008909 	.word	0x08008909
 8007be8:	24000020 	.word	0x24000020

08007bec <cleanup_stdio>:
 8007bec:	6841      	ldr	r1, [r0, #4]
 8007bee:	4b0c      	ldr	r3, [pc, #48]	@ (8007c20 <cleanup_stdio+0x34>)
 8007bf0:	4299      	cmp	r1, r3
 8007bf2:	b510      	push	{r4, lr}
 8007bf4:	4604      	mov	r4, r0
 8007bf6:	d001      	beq.n	8007bfc <cleanup_stdio+0x10>
 8007bf8:	f000 fe86 	bl	8008908 <_fflush_r>
 8007bfc:	68a1      	ldr	r1, [r4, #8]
 8007bfe:	4b09      	ldr	r3, [pc, #36]	@ (8007c24 <cleanup_stdio+0x38>)
 8007c00:	4299      	cmp	r1, r3
 8007c02:	d002      	beq.n	8007c0a <cleanup_stdio+0x1e>
 8007c04:	4620      	mov	r0, r4
 8007c06:	f000 fe7f 	bl	8008908 <_fflush_r>
 8007c0a:	68e1      	ldr	r1, [r4, #12]
 8007c0c:	4b06      	ldr	r3, [pc, #24]	@ (8007c28 <cleanup_stdio+0x3c>)
 8007c0e:	4299      	cmp	r1, r3
 8007c10:	d004      	beq.n	8007c1c <cleanup_stdio+0x30>
 8007c12:	4620      	mov	r0, r4
 8007c14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c18:	f000 be76 	b.w	8008908 <_fflush_r>
 8007c1c:	bd10      	pop	{r4, pc}
 8007c1e:	bf00      	nop
 8007c20:	24000148 	.word	0x24000148
 8007c24:	240001b0 	.word	0x240001b0
 8007c28:	24000218 	.word	0x24000218

08007c2c <global_stdio_init.part.0>:
 8007c2c:	b510      	push	{r4, lr}
 8007c2e:	4b0b      	ldr	r3, [pc, #44]	@ (8007c5c <global_stdio_init.part.0+0x30>)
 8007c30:	4c0b      	ldr	r4, [pc, #44]	@ (8007c60 <global_stdio_init.part.0+0x34>)
 8007c32:	4a0c      	ldr	r2, [pc, #48]	@ (8007c64 <global_stdio_init.part.0+0x38>)
 8007c34:	601a      	str	r2, [r3, #0]
 8007c36:	4620      	mov	r0, r4
 8007c38:	2200      	movs	r2, #0
 8007c3a:	2104      	movs	r1, #4
 8007c3c:	f7ff ff94 	bl	8007b68 <std>
 8007c40:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007c44:	2201      	movs	r2, #1
 8007c46:	2109      	movs	r1, #9
 8007c48:	f7ff ff8e 	bl	8007b68 <std>
 8007c4c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007c50:	2202      	movs	r2, #2
 8007c52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c56:	2112      	movs	r1, #18
 8007c58:	f7ff bf86 	b.w	8007b68 <std>
 8007c5c:	24000280 	.word	0x24000280
 8007c60:	24000148 	.word	0x24000148
 8007c64:	08007bd5 	.word	0x08007bd5

08007c68 <__sfp_lock_acquire>:
 8007c68:	4801      	ldr	r0, [pc, #4]	@ (8007c70 <__sfp_lock_acquire+0x8>)
 8007c6a:	f000 ba00 	b.w	800806e <__retarget_lock_acquire_recursive>
 8007c6e:	bf00      	nop
 8007c70:	24000289 	.word	0x24000289

08007c74 <__sfp_lock_release>:
 8007c74:	4801      	ldr	r0, [pc, #4]	@ (8007c7c <__sfp_lock_release+0x8>)
 8007c76:	f000 b9fb 	b.w	8008070 <__retarget_lock_release_recursive>
 8007c7a:	bf00      	nop
 8007c7c:	24000289 	.word	0x24000289

08007c80 <__sinit>:
 8007c80:	b510      	push	{r4, lr}
 8007c82:	4604      	mov	r4, r0
 8007c84:	f7ff fff0 	bl	8007c68 <__sfp_lock_acquire>
 8007c88:	6a23      	ldr	r3, [r4, #32]
 8007c8a:	b11b      	cbz	r3, 8007c94 <__sinit+0x14>
 8007c8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c90:	f7ff bff0 	b.w	8007c74 <__sfp_lock_release>
 8007c94:	4b04      	ldr	r3, [pc, #16]	@ (8007ca8 <__sinit+0x28>)
 8007c96:	6223      	str	r3, [r4, #32]
 8007c98:	4b04      	ldr	r3, [pc, #16]	@ (8007cac <__sinit+0x2c>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d1f5      	bne.n	8007c8c <__sinit+0xc>
 8007ca0:	f7ff ffc4 	bl	8007c2c <global_stdio_init.part.0>
 8007ca4:	e7f2      	b.n	8007c8c <__sinit+0xc>
 8007ca6:	bf00      	nop
 8007ca8:	08007bed 	.word	0x08007bed
 8007cac:	24000280 	.word	0x24000280

08007cb0 <_fwalk_sglue>:
 8007cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cb4:	4607      	mov	r7, r0
 8007cb6:	4688      	mov	r8, r1
 8007cb8:	4614      	mov	r4, r2
 8007cba:	2600      	movs	r6, #0
 8007cbc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007cc0:	f1b9 0901 	subs.w	r9, r9, #1
 8007cc4:	d505      	bpl.n	8007cd2 <_fwalk_sglue+0x22>
 8007cc6:	6824      	ldr	r4, [r4, #0]
 8007cc8:	2c00      	cmp	r4, #0
 8007cca:	d1f7      	bne.n	8007cbc <_fwalk_sglue+0xc>
 8007ccc:	4630      	mov	r0, r6
 8007cce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cd2:	89ab      	ldrh	r3, [r5, #12]
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d907      	bls.n	8007ce8 <_fwalk_sglue+0x38>
 8007cd8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007cdc:	3301      	adds	r3, #1
 8007cde:	d003      	beq.n	8007ce8 <_fwalk_sglue+0x38>
 8007ce0:	4629      	mov	r1, r5
 8007ce2:	4638      	mov	r0, r7
 8007ce4:	47c0      	blx	r8
 8007ce6:	4306      	orrs	r6, r0
 8007ce8:	3568      	adds	r5, #104	@ 0x68
 8007cea:	e7e9      	b.n	8007cc0 <_fwalk_sglue+0x10>

08007cec <iprintf>:
 8007cec:	b40f      	push	{r0, r1, r2, r3}
 8007cee:	b507      	push	{r0, r1, r2, lr}
 8007cf0:	4906      	ldr	r1, [pc, #24]	@ (8007d0c <iprintf+0x20>)
 8007cf2:	ab04      	add	r3, sp, #16
 8007cf4:	6808      	ldr	r0, [r1, #0]
 8007cf6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cfa:	6881      	ldr	r1, [r0, #8]
 8007cfc:	9301      	str	r3, [sp, #4]
 8007cfe:	f000 fadb 	bl	80082b8 <_vfiprintf_r>
 8007d02:	b003      	add	sp, #12
 8007d04:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d08:	b004      	add	sp, #16
 8007d0a:	4770      	bx	lr
 8007d0c:	2400001c 	.word	0x2400001c

08007d10 <_puts_r>:
 8007d10:	6a03      	ldr	r3, [r0, #32]
 8007d12:	b570      	push	{r4, r5, r6, lr}
 8007d14:	6884      	ldr	r4, [r0, #8]
 8007d16:	4605      	mov	r5, r0
 8007d18:	460e      	mov	r6, r1
 8007d1a:	b90b      	cbnz	r3, 8007d20 <_puts_r+0x10>
 8007d1c:	f7ff ffb0 	bl	8007c80 <__sinit>
 8007d20:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007d22:	07db      	lsls	r3, r3, #31
 8007d24:	d405      	bmi.n	8007d32 <_puts_r+0x22>
 8007d26:	89a3      	ldrh	r3, [r4, #12]
 8007d28:	0598      	lsls	r0, r3, #22
 8007d2a:	d402      	bmi.n	8007d32 <_puts_r+0x22>
 8007d2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007d2e:	f000 f99e 	bl	800806e <__retarget_lock_acquire_recursive>
 8007d32:	89a3      	ldrh	r3, [r4, #12]
 8007d34:	0719      	lsls	r1, r3, #28
 8007d36:	d502      	bpl.n	8007d3e <_puts_r+0x2e>
 8007d38:	6923      	ldr	r3, [r4, #16]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d135      	bne.n	8007daa <_puts_r+0x9a>
 8007d3e:	4621      	mov	r1, r4
 8007d40:	4628      	mov	r0, r5
 8007d42:	f000 f8c5 	bl	8007ed0 <__swsetup_r>
 8007d46:	b380      	cbz	r0, 8007daa <_puts_r+0x9a>
 8007d48:	f04f 35ff 	mov.w	r5, #4294967295
 8007d4c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007d4e:	07da      	lsls	r2, r3, #31
 8007d50:	d405      	bmi.n	8007d5e <_puts_r+0x4e>
 8007d52:	89a3      	ldrh	r3, [r4, #12]
 8007d54:	059b      	lsls	r3, r3, #22
 8007d56:	d402      	bmi.n	8007d5e <_puts_r+0x4e>
 8007d58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007d5a:	f000 f989 	bl	8008070 <__retarget_lock_release_recursive>
 8007d5e:	4628      	mov	r0, r5
 8007d60:	bd70      	pop	{r4, r5, r6, pc}
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	da04      	bge.n	8007d70 <_puts_r+0x60>
 8007d66:	69a2      	ldr	r2, [r4, #24]
 8007d68:	429a      	cmp	r2, r3
 8007d6a:	dc17      	bgt.n	8007d9c <_puts_r+0x8c>
 8007d6c:	290a      	cmp	r1, #10
 8007d6e:	d015      	beq.n	8007d9c <_puts_r+0x8c>
 8007d70:	6823      	ldr	r3, [r4, #0]
 8007d72:	1c5a      	adds	r2, r3, #1
 8007d74:	6022      	str	r2, [r4, #0]
 8007d76:	7019      	strb	r1, [r3, #0]
 8007d78:	68a3      	ldr	r3, [r4, #8]
 8007d7a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007d7e:	3b01      	subs	r3, #1
 8007d80:	60a3      	str	r3, [r4, #8]
 8007d82:	2900      	cmp	r1, #0
 8007d84:	d1ed      	bne.n	8007d62 <_puts_r+0x52>
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	da11      	bge.n	8007dae <_puts_r+0x9e>
 8007d8a:	4622      	mov	r2, r4
 8007d8c:	210a      	movs	r1, #10
 8007d8e:	4628      	mov	r0, r5
 8007d90:	f000 f85f 	bl	8007e52 <__swbuf_r>
 8007d94:	3001      	adds	r0, #1
 8007d96:	d0d7      	beq.n	8007d48 <_puts_r+0x38>
 8007d98:	250a      	movs	r5, #10
 8007d9a:	e7d7      	b.n	8007d4c <_puts_r+0x3c>
 8007d9c:	4622      	mov	r2, r4
 8007d9e:	4628      	mov	r0, r5
 8007da0:	f000 f857 	bl	8007e52 <__swbuf_r>
 8007da4:	3001      	adds	r0, #1
 8007da6:	d1e7      	bne.n	8007d78 <_puts_r+0x68>
 8007da8:	e7ce      	b.n	8007d48 <_puts_r+0x38>
 8007daa:	3e01      	subs	r6, #1
 8007dac:	e7e4      	b.n	8007d78 <_puts_r+0x68>
 8007dae:	6823      	ldr	r3, [r4, #0]
 8007db0:	1c5a      	adds	r2, r3, #1
 8007db2:	6022      	str	r2, [r4, #0]
 8007db4:	220a      	movs	r2, #10
 8007db6:	701a      	strb	r2, [r3, #0]
 8007db8:	e7ee      	b.n	8007d98 <_puts_r+0x88>
	...

08007dbc <puts>:
 8007dbc:	4b02      	ldr	r3, [pc, #8]	@ (8007dc8 <puts+0xc>)
 8007dbe:	4601      	mov	r1, r0
 8007dc0:	6818      	ldr	r0, [r3, #0]
 8007dc2:	f7ff bfa5 	b.w	8007d10 <_puts_r>
 8007dc6:	bf00      	nop
 8007dc8:	2400001c 	.word	0x2400001c

08007dcc <__sread>:
 8007dcc:	b510      	push	{r4, lr}
 8007dce:	460c      	mov	r4, r1
 8007dd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dd4:	f000 f8fc 	bl	8007fd0 <_read_r>
 8007dd8:	2800      	cmp	r0, #0
 8007dda:	bfab      	itete	ge
 8007ddc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007dde:	89a3      	ldrhlt	r3, [r4, #12]
 8007de0:	181b      	addge	r3, r3, r0
 8007de2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007de6:	bfac      	ite	ge
 8007de8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007dea:	81a3      	strhlt	r3, [r4, #12]
 8007dec:	bd10      	pop	{r4, pc}

08007dee <__swrite>:
 8007dee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007df2:	461f      	mov	r7, r3
 8007df4:	898b      	ldrh	r3, [r1, #12]
 8007df6:	05db      	lsls	r3, r3, #23
 8007df8:	4605      	mov	r5, r0
 8007dfa:	460c      	mov	r4, r1
 8007dfc:	4616      	mov	r6, r2
 8007dfe:	d505      	bpl.n	8007e0c <__swrite+0x1e>
 8007e00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e04:	2302      	movs	r3, #2
 8007e06:	2200      	movs	r2, #0
 8007e08:	f000 f8d0 	bl	8007fac <_lseek_r>
 8007e0c:	89a3      	ldrh	r3, [r4, #12]
 8007e0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e12:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007e16:	81a3      	strh	r3, [r4, #12]
 8007e18:	4632      	mov	r2, r6
 8007e1a:	463b      	mov	r3, r7
 8007e1c:	4628      	mov	r0, r5
 8007e1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e22:	f000 b8e7 	b.w	8007ff4 <_write_r>

08007e26 <__sseek>:
 8007e26:	b510      	push	{r4, lr}
 8007e28:	460c      	mov	r4, r1
 8007e2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e2e:	f000 f8bd 	bl	8007fac <_lseek_r>
 8007e32:	1c43      	adds	r3, r0, #1
 8007e34:	89a3      	ldrh	r3, [r4, #12]
 8007e36:	bf15      	itete	ne
 8007e38:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007e3a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007e3e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007e42:	81a3      	strheq	r3, [r4, #12]
 8007e44:	bf18      	it	ne
 8007e46:	81a3      	strhne	r3, [r4, #12]
 8007e48:	bd10      	pop	{r4, pc}

08007e4a <__sclose>:
 8007e4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e4e:	f000 b89d 	b.w	8007f8c <_close_r>

08007e52 <__swbuf_r>:
 8007e52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e54:	460e      	mov	r6, r1
 8007e56:	4614      	mov	r4, r2
 8007e58:	4605      	mov	r5, r0
 8007e5a:	b118      	cbz	r0, 8007e64 <__swbuf_r+0x12>
 8007e5c:	6a03      	ldr	r3, [r0, #32]
 8007e5e:	b90b      	cbnz	r3, 8007e64 <__swbuf_r+0x12>
 8007e60:	f7ff ff0e 	bl	8007c80 <__sinit>
 8007e64:	69a3      	ldr	r3, [r4, #24]
 8007e66:	60a3      	str	r3, [r4, #8]
 8007e68:	89a3      	ldrh	r3, [r4, #12]
 8007e6a:	071a      	lsls	r2, r3, #28
 8007e6c:	d501      	bpl.n	8007e72 <__swbuf_r+0x20>
 8007e6e:	6923      	ldr	r3, [r4, #16]
 8007e70:	b943      	cbnz	r3, 8007e84 <__swbuf_r+0x32>
 8007e72:	4621      	mov	r1, r4
 8007e74:	4628      	mov	r0, r5
 8007e76:	f000 f82b 	bl	8007ed0 <__swsetup_r>
 8007e7a:	b118      	cbz	r0, 8007e84 <__swbuf_r+0x32>
 8007e7c:	f04f 37ff 	mov.w	r7, #4294967295
 8007e80:	4638      	mov	r0, r7
 8007e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e84:	6823      	ldr	r3, [r4, #0]
 8007e86:	6922      	ldr	r2, [r4, #16]
 8007e88:	1a98      	subs	r0, r3, r2
 8007e8a:	6963      	ldr	r3, [r4, #20]
 8007e8c:	b2f6      	uxtb	r6, r6
 8007e8e:	4283      	cmp	r3, r0
 8007e90:	4637      	mov	r7, r6
 8007e92:	dc05      	bgt.n	8007ea0 <__swbuf_r+0x4e>
 8007e94:	4621      	mov	r1, r4
 8007e96:	4628      	mov	r0, r5
 8007e98:	f000 fd36 	bl	8008908 <_fflush_r>
 8007e9c:	2800      	cmp	r0, #0
 8007e9e:	d1ed      	bne.n	8007e7c <__swbuf_r+0x2a>
 8007ea0:	68a3      	ldr	r3, [r4, #8]
 8007ea2:	3b01      	subs	r3, #1
 8007ea4:	60a3      	str	r3, [r4, #8]
 8007ea6:	6823      	ldr	r3, [r4, #0]
 8007ea8:	1c5a      	adds	r2, r3, #1
 8007eaa:	6022      	str	r2, [r4, #0]
 8007eac:	701e      	strb	r6, [r3, #0]
 8007eae:	6962      	ldr	r2, [r4, #20]
 8007eb0:	1c43      	adds	r3, r0, #1
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d004      	beq.n	8007ec0 <__swbuf_r+0x6e>
 8007eb6:	89a3      	ldrh	r3, [r4, #12]
 8007eb8:	07db      	lsls	r3, r3, #31
 8007eba:	d5e1      	bpl.n	8007e80 <__swbuf_r+0x2e>
 8007ebc:	2e0a      	cmp	r6, #10
 8007ebe:	d1df      	bne.n	8007e80 <__swbuf_r+0x2e>
 8007ec0:	4621      	mov	r1, r4
 8007ec2:	4628      	mov	r0, r5
 8007ec4:	f000 fd20 	bl	8008908 <_fflush_r>
 8007ec8:	2800      	cmp	r0, #0
 8007eca:	d0d9      	beq.n	8007e80 <__swbuf_r+0x2e>
 8007ecc:	e7d6      	b.n	8007e7c <__swbuf_r+0x2a>
	...

08007ed0 <__swsetup_r>:
 8007ed0:	b538      	push	{r3, r4, r5, lr}
 8007ed2:	4b29      	ldr	r3, [pc, #164]	@ (8007f78 <__swsetup_r+0xa8>)
 8007ed4:	4605      	mov	r5, r0
 8007ed6:	6818      	ldr	r0, [r3, #0]
 8007ed8:	460c      	mov	r4, r1
 8007eda:	b118      	cbz	r0, 8007ee4 <__swsetup_r+0x14>
 8007edc:	6a03      	ldr	r3, [r0, #32]
 8007ede:	b90b      	cbnz	r3, 8007ee4 <__swsetup_r+0x14>
 8007ee0:	f7ff fece 	bl	8007c80 <__sinit>
 8007ee4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ee8:	0719      	lsls	r1, r3, #28
 8007eea:	d422      	bmi.n	8007f32 <__swsetup_r+0x62>
 8007eec:	06da      	lsls	r2, r3, #27
 8007eee:	d407      	bmi.n	8007f00 <__swsetup_r+0x30>
 8007ef0:	2209      	movs	r2, #9
 8007ef2:	602a      	str	r2, [r5, #0]
 8007ef4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ef8:	81a3      	strh	r3, [r4, #12]
 8007efa:	f04f 30ff 	mov.w	r0, #4294967295
 8007efe:	e033      	b.n	8007f68 <__swsetup_r+0x98>
 8007f00:	0758      	lsls	r0, r3, #29
 8007f02:	d512      	bpl.n	8007f2a <__swsetup_r+0x5a>
 8007f04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007f06:	b141      	cbz	r1, 8007f1a <__swsetup_r+0x4a>
 8007f08:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007f0c:	4299      	cmp	r1, r3
 8007f0e:	d002      	beq.n	8007f16 <__swsetup_r+0x46>
 8007f10:	4628      	mov	r0, r5
 8007f12:	f000 f8af 	bl	8008074 <_free_r>
 8007f16:	2300      	movs	r3, #0
 8007f18:	6363      	str	r3, [r4, #52]	@ 0x34
 8007f1a:	89a3      	ldrh	r3, [r4, #12]
 8007f1c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007f20:	81a3      	strh	r3, [r4, #12]
 8007f22:	2300      	movs	r3, #0
 8007f24:	6063      	str	r3, [r4, #4]
 8007f26:	6923      	ldr	r3, [r4, #16]
 8007f28:	6023      	str	r3, [r4, #0]
 8007f2a:	89a3      	ldrh	r3, [r4, #12]
 8007f2c:	f043 0308 	orr.w	r3, r3, #8
 8007f30:	81a3      	strh	r3, [r4, #12]
 8007f32:	6923      	ldr	r3, [r4, #16]
 8007f34:	b94b      	cbnz	r3, 8007f4a <__swsetup_r+0x7a>
 8007f36:	89a3      	ldrh	r3, [r4, #12]
 8007f38:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007f3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f40:	d003      	beq.n	8007f4a <__swsetup_r+0x7a>
 8007f42:	4621      	mov	r1, r4
 8007f44:	4628      	mov	r0, r5
 8007f46:	f000 fd2d 	bl	80089a4 <__smakebuf_r>
 8007f4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f4e:	f013 0201 	ands.w	r2, r3, #1
 8007f52:	d00a      	beq.n	8007f6a <__swsetup_r+0x9a>
 8007f54:	2200      	movs	r2, #0
 8007f56:	60a2      	str	r2, [r4, #8]
 8007f58:	6962      	ldr	r2, [r4, #20]
 8007f5a:	4252      	negs	r2, r2
 8007f5c:	61a2      	str	r2, [r4, #24]
 8007f5e:	6922      	ldr	r2, [r4, #16]
 8007f60:	b942      	cbnz	r2, 8007f74 <__swsetup_r+0xa4>
 8007f62:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007f66:	d1c5      	bne.n	8007ef4 <__swsetup_r+0x24>
 8007f68:	bd38      	pop	{r3, r4, r5, pc}
 8007f6a:	0799      	lsls	r1, r3, #30
 8007f6c:	bf58      	it	pl
 8007f6e:	6962      	ldrpl	r2, [r4, #20]
 8007f70:	60a2      	str	r2, [r4, #8]
 8007f72:	e7f4      	b.n	8007f5e <__swsetup_r+0x8e>
 8007f74:	2000      	movs	r0, #0
 8007f76:	e7f7      	b.n	8007f68 <__swsetup_r+0x98>
 8007f78:	2400001c 	.word	0x2400001c

08007f7c <memset>:
 8007f7c:	4402      	add	r2, r0
 8007f7e:	4603      	mov	r3, r0
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d100      	bne.n	8007f86 <memset+0xa>
 8007f84:	4770      	bx	lr
 8007f86:	f803 1b01 	strb.w	r1, [r3], #1
 8007f8a:	e7f9      	b.n	8007f80 <memset+0x4>

08007f8c <_close_r>:
 8007f8c:	b538      	push	{r3, r4, r5, lr}
 8007f8e:	4d06      	ldr	r5, [pc, #24]	@ (8007fa8 <_close_r+0x1c>)
 8007f90:	2300      	movs	r3, #0
 8007f92:	4604      	mov	r4, r0
 8007f94:	4608      	mov	r0, r1
 8007f96:	602b      	str	r3, [r5, #0]
 8007f98:	f7f9 f865 	bl	8001066 <_close>
 8007f9c:	1c43      	adds	r3, r0, #1
 8007f9e:	d102      	bne.n	8007fa6 <_close_r+0x1a>
 8007fa0:	682b      	ldr	r3, [r5, #0]
 8007fa2:	b103      	cbz	r3, 8007fa6 <_close_r+0x1a>
 8007fa4:	6023      	str	r3, [r4, #0]
 8007fa6:	bd38      	pop	{r3, r4, r5, pc}
 8007fa8:	24000284 	.word	0x24000284

08007fac <_lseek_r>:
 8007fac:	b538      	push	{r3, r4, r5, lr}
 8007fae:	4d07      	ldr	r5, [pc, #28]	@ (8007fcc <_lseek_r+0x20>)
 8007fb0:	4604      	mov	r4, r0
 8007fb2:	4608      	mov	r0, r1
 8007fb4:	4611      	mov	r1, r2
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	602a      	str	r2, [r5, #0]
 8007fba:	461a      	mov	r2, r3
 8007fbc:	f7f9 f87a 	bl	80010b4 <_lseek>
 8007fc0:	1c43      	adds	r3, r0, #1
 8007fc2:	d102      	bne.n	8007fca <_lseek_r+0x1e>
 8007fc4:	682b      	ldr	r3, [r5, #0]
 8007fc6:	b103      	cbz	r3, 8007fca <_lseek_r+0x1e>
 8007fc8:	6023      	str	r3, [r4, #0]
 8007fca:	bd38      	pop	{r3, r4, r5, pc}
 8007fcc:	24000284 	.word	0x24000284

08007fd0 <_read_r>:
 8007fd0:	b538      	push	{r3, r4, r5, lr}
 8007fd2:	4d07      	ldr	r5, [pc, #28]	@ (8007ff0 <_read_r+0x20>)
 8007fd4:	4604      	mov	r4, r0
 8007fd6:	4608      	mov	r0, r1
 8007fd8:	4611      	mov	r1, r2
 8007fda:	2200      	movs	r2, #0
 8007fdc:	602a      	str	r2, [r5, #0]
 8007fde:	461a      	mov	r2, r3
 8007fe0:	f7f9 f808 	bl	8000ff4 <_read>
 8007fe4:	1c43      	adds	r3, r0, #1
 8007fe6:	d102      	bne.n	8007fee <_read_r+0x1e>
 8007fe8:	682b      	ldr	r3, [r5, #0]
 8007fea:	b103      	cbz	r3, 8007fee <_read_r+0x1e>
 8007fec:	6023      	str	r3, [r4, #0]
 8007fee:	bd38      	pop	{r3, r4, r5, pc}
 8007ff0:	24000284 	.word	0x24000284

08007ff4 <_write_r>:
 8007ff4:	b538      	push	{r3, r4, r5, lr}
 8007ff6:	4d07      	ldr	r5, [pc, #28]	@ (8008014 <_write_r+0x20>)
 8007ff8:	4604      	mov	r4, r0
 8007ffa:	4608      	mov	r0, r1
 8007ffc:	4611      	mov	r1, r2
 8007ffe:	2200      	movs	r2, #0
 8008000:	602a      	str	r2, [r5, #0]
 8008002:	461a      	mov	r2, r3
 8008004:	f7f9 f813 	bl	800102e <_write>
 8008008:	1c43      	adds	r3, r0, #1
 800800a:	d102      	bne.n	8008012 <_write_r+0x1e>
 800800c:	682b      	ldr	r3, [r5, #0]
 800800e:	b103      	cbz	r3, 8008012 <_write_r+0x1e>
 8008010:	6023      	str	r3, [r4, #0]
 8008012:	bd38      	pop	{r3, r4, r5, pc}
 8008014:	24000284 	.word	0x24000284

08008018 <__errno>:
 8008018:	4b01      	ldr	r3, [pc, #4]	@ (8008020 <__errno+0x8>)
 800801a:	6818      	ldr	r0, [r3, #0]
 800801c:	4770      	bx	lr
 800801e:	bf00      	nop
 8008020:	2400001c 	.word	0x2400001c

08008024 <__libc_init_array>:
 8008024:	b570      	push	{r4, r5, r6, lr}
 8008026:	4d0d      	ldr	r5, [pc, #52]	@ (800805c <__libc_init_array+0x38>)
 8008028:	4c0d      	ldr	r4, [pc, #52]	@ (8008060 <__libc_init_array+0x3c>)
 800802a:	1b64      	subs	r4, r4, r5
 800802c:	10a4      	asrs	r4, r4, #2
 800802e:	2600      	movs	r6, #0
 8008030:	42a6      	cmp	r6, r4
 8008032:	d109      	bne.n	8008048 <__libc_init_array+0x24>
 8008034:	4d0b      	ldr	r5, [pc, #44]	@ (8008064 <__libc_init_array+0x40>)
 8008036:	4c0c      	ldr	r4, [pc, #48]	@ (8008068 <__libc_init_array+0x44>)
 8008038:	f000 fd22 	bl	8008a80 <_init>
 800803c:	1b64      	subs	r4, r4, r5
 800803e:	10a4      	asrs	r4, r4, #2
 8008040:	2600      	movs	r6, #0
 8008042:	42a6      	cmp	r6, r4
 8008044:	d105      	bne.n	8008052 <__libc_init_array+0x2e>
 8008046:	bd70      	pop	{r4, r5, r6, pc}
 8008048:	f855 3b04 	ldr.w	r3, [r5], #4
 800804c:	4798      	blx	r3
 800804e:	3601      	adds	r6, #1
 8008050:	e7ee      	b.n	8008030 <__libc_init_array+0xc>
 8008052:	f855 3b04 	ldr.w	r3, [r5], #4
 8008056:	4798      	blx	r3
 8008058:	3601      	adds	r6, #1
 800805a:	e7f2      	b.n	8008042 <__libc_init_array+0x1e>
 800805c:	08008b70 	.word	0x08008b70
 8008060:	08008b70 	.word	0x08008b70
 8008064:	08008b70 	.word	0x08008b70
 8008068:	08008b74 	.word	0x08008b74

0800806c <__retarget_lock_init_recursive>:
 800806c:	4770      	bx	lr

0800806e <__retarget_lock_acquire_recursive>:
 800806e:	4770      	bx	lr

08008070 <__retarget_lock_release_recursive>:
 8008070:	4770      	bx	lr
	...

08008074 <_free_r>:
 8008074:	b538      	push	{r3, r4, r5, lr}
 8008076:	4605      	mov	r5, r0
 8008078:	2900      	cmp	r1, #0
 800807a:	d041      	beq.n	8008100 <_free_r+0x8c>
 800807c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008080:	1f0c      	subs	r4, r1, #4
 8008082:	2b00      	cmp	r3, #0
 8008084:	bfb8      	it	lt
 8008086:	18e4      	addlt	r4, r4, r3
 8008088:	f000 f8e0 	bl	800824c <__malloc_lock>
 800808c:	4a1d      	ldr	r2, [pc, #116]	@ (8008104 <_free_r+0x90>)
 800808e:	6813      	ldr	r3, [r2, #0]
 8008090:	b933      	cbnz	r3, 80080a0 <_free_r+0x2c>
 8008092:	6063      	str	r3, [r4, #4]
 8008094:	6014      	str	r4, [r2, #0]
 8008096:	4628      	mov	r0, r5
 8008098:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800809c:	f000 b8dc 	b.w	8008258 <__malloc_unlock>
 80080a0:	42a3      	cmp	r3, r4
 80080a2:	d908      	bls.n	80080b6 <_free_r+0x42>
 80080a4:	6820      	ldr	r0, [r4, #0]
 80080a6:	1821      	adds	r1, r4, r0
 80080a8:	428b      	cmp	r3, r1
 80080aa:	bf01      	itttt	eq
 80080ac:	6819      	ldreq	r1, [r3, #0]
 80080ae:	685b      	ldreq	r3, [r3, #4]
 80080b0:	1809      	addeq	r1, r1, r0
 80080b2:	6021      	streq	r1, [r4, #0]
 80080b4:	e7ed      	b.n	8008092 <_free_r+0x1e>
 80080b6:	461a      	mov	r2, r3
 80080b8:	685b      	ldr	r3, [r3, #4]
 80080ba:	b10b      	cbz	r3, 80080c0 <_free_r+0x4c>
 80080bc:	42a3      	cmp	r3, r4
 80080be:	d9fa      	bls.n	80080b6 <_free_r+0x42>
 80080c0:	6811      	ldr	r1, [r2, #0]
 80080c2:	1850      	adds	r0, r2, r1
 80080c4:	42a0      	cmp	r0, r4
 80080c6:	d10b      	bne.n	80080e0 <_free_r+0x6c>
 80080c8:	6820      	ldr	r0, [r4, #0]
 80080ca:	4401      	add	r1, r0
 80080cc:	1850      	adds	r0, r2, r1
 80080ce:	4283      	cmp	r3, r0
 80080d0:	6011      	str	r1, [r2, #0]
 80080d2:	d1e0      	bne.n	8008096 <_free_r+0x22>
 80080d4:	6818      	ldr	r0, [r3, #0]
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	6053      	str	r3, [r2, #4]
 80080da:	4408      	add	r0, r1
 80080dc:	6010      	str	r0, [r2, #0]
 80080de:	e7da      	b.n	8008096 <_free_r+0x22>
 80080e0:	d902      	bls.n	80080e8 <_free_r+0x74>
 80080e2:	230c      	movs	r3, #12
 80080e4:	602b      	str	r3, [r5, #0]
 80080e6:	e7d6      	b.n	8008096 <_free_r+0x22>
 80080e8:	6820      	ldr	r0, [r4, #0]
 80080ea:	1821      	adds	r1, r4, r0
 80080ec:	428b      	cmp	r3, r1
 80080ee:	bf04      	itt	eq
 80080f0:	6819      	ldreq	r1, [r3, #0]
 80080f2:	685b      	ldreq	r3, [r3, #4]
 80080f4:	6063      	str	r3, [r4, #4]
 80080f6:	bf04      	itt	eq
 80080f8:	1809      	addeq	r1, r1, r0
 80080fa:	6021      	streq	r1, [r4, #0]
 80080fc:	6054      	str	r4, [r2, #4]
 80080fe:	e7ca      	b.n	8008096 <_free_r+0x22>
 8008100:	bd38      	pop	{r3, r4, r5, pc}
 8008102:	bf00      	nop
 8008104:	24000290 	.word	0x24000290

08008108 <sbrk_aligned>:
 8008108:	b570      	push	{r4, r5, r6, lr}
 800810a:	4e0f      	ldr	r6, [pc, #60]	@ (8008148 <sbrk_aligned+0x40>)
 800810c:	460c      	mov	r4, r1
 800810e:	6831      	ldr	r1, [r6, #0]
 8008110:	4605      	mov	r5, r0
 8008112:	b911      	cbnz	r1, 800811a <sbrk_aligned+0x12>
 8008114:	f000 fca4 	bl	8008a60 <_sbrk_r>
 8008118:	6030      	str	r0, [r6, #0]
 800811a:	4621      	mov	r1, r4
 800811c:	4628      	mov	r0, r5
 800811e:	f000 fc9f 	bl	8008a60 <_sbrk_r>
 8008122:	1c43      	adds	r3, r0, #1
 8008124:	d103      	bne.n	800812e <sbrk_aligned+0x26>
 8008126:	f04f 34ff 	mov.w	r4, #4294967295
 800812a:	4620      	mov	r0, r4
 800812c:	bd70      	pop	{r4, r5, r6, pc}
 800812e:	1cc4      	adds	r4, r0, #3
 8008130:	f024 0403 	bic.w	r4, r4, #3
 8008134:	42a0      	cmp	r0, r4
 8008136:	d0f8      	beq.n	800812a <sbrk_aligned+0x22>
 8008138:	1a21      	subs	r1, r4, r0
 800813a:	4628      	mov	r0, r5
 800813c:	f000 fc90 	bl	8008a60 <_sbrk_r>
 8008140:	3001      	adds	r0, #1
 8008142:	d1f2      	bne.n	800812a <sbrk_aligned+0x22>
 8008144:	e7ef      	b.n	8008126 <sbrk_aligned+0x1e>
 8008146:	bf00      	nop
 8008148:	2400028c 	.word	0x2400028c

0800814c <_malloc_r>:
 800814c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008150:	1ccd      	adds	r5, r1, #3
 8008152:	f025 0503 	bic.w	r5, r5, #3
 8008156:	3508      	adds	r5, #8
 8008158:	2d0c      	cmp	r5, #12
 800815a:	bf38      	it	cc
 800815c:	250c      	movcc	r5, #12
 800815e:	2d00      	cmp	r5, #0
 8008160:	4606      	mov	r6, r0
 8008162:	db01      	blt.n	8008168 <_malloc_r+0x1c>
 8008164:	42a9      	cmp	r1, r5
 8008166:	d904      	bls.n	8008172 <_malloc_r+0x26>
 8008168:	230c      	movs	r3, #12
 800816a:	6033      	str	r3, [r6, #0]
 800816c:	2000      	movs	r0, #0
 800816e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008172:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008248 <_malloc_r+0xfc>
 8008176:	f000 f869 	bl	800824c <__malloc_lock>
 800817a:	f8d8 3000 	ldr.w	r3, [r8]
 800817e:	461c      	mov	r4, r3
 8008180:	bb44      	cbnz	r4, 80081d4 <_malloc_r+0x88>
 8008182:	4629      	mov	r1, r5
 8008184:	4630      	mov	r0, r6
 8008186:	f7ff ffbf 	bl	8008108 <sbrk_aligned>
 800818a:	1c43      	adds	r3, r0, #1
 800818c:	4604      	mov	r4, r0
 800818e:	d158      	bne.n	8008242 <_malloc_r+0xf6>
 8008190:	f8d8 4000 	ldr.w	r4, [r8]
 8008194:	4627      	mov	r7, r4
 8008196:	2f00      	cmp	r7, #0
 8008198:	d143      	bne.n	8008222 <_malloc_r+0xd6>
 800819a:	2c00      	cmp	r4, #0
 800819c:	d04b      	beq.n	8008236 <_malloc_r+0xea>
 800819e:	6823      	ldr	r3, [r4, #0]
 80081a0:	4639      	mov	r1, r7
 80081a2:	4630      	mov	r0, r6
 80081a4:	eb04 0903 	add.w	r9, r4, r3
 80081a8:	f000 fc5a 	bl	8008a60 <_sbrk_r>
 80081ac:	4581      	cmp	r9, r0
 80081ae:	d142      	bne.n	8008236 <_malloc_r+0xea>
 80081b0:	6821      	ldr	r1, [r4, #0]
 80081b2:	1a6d      	subs	r5, r5, r1
 80081b4:	4629      	mov	r1, r5
 80081b6:	4630      	mov	r0, r6
 80081b8:	f7ff ffa6 	bl	8008108 <sbrk_aligned>
 80081bc:	3001      	adds	r0, #1
 80081be:	d03a      	beq.n	8008236 <_malloc_r+0xea>
 80081c0:	6823      	ldr	r3, [r4, #0]
 80081c2:	442b      	add	r3, r5
 80081c4:	6023      	str	r3, [r4, #0]
 80081c6:	f8d8 3000 	ldr.w	r3, [r8]
 80081ca:	685a      	ldr	r2, [r3, #4]
 80081cc:	bb62      	cbnz	r2, 8008228 <_malloc_r+0xdc>
 80081ce:	f8c8 7000 	str.w	r7, [r8]
 80081d2:	e00f      	b.n	80081f4 <_malloc_r+0xa8>
 80081d4:	6822      	ldr	r2, [r4, #0]
 80081d6:	1b52      	subs	r2, r2, r5
 80081d8:	d420      	bmi.n	800821c <_malloc_r+0xd0>
 80081da:	2a0b      	cmp	r2, #11
 80081dc:	d917      	bls.n	800820e <_malloc_r+0xc2>
 80081de:	1961      	adds	r1, r4, r5
 80081e0:	42a3      	cmp	r3, r4
 80081e2:	6025      	str	r5, [r4, #0]
 80081e4:	bf18      	it	ne
 80081e6:	6059      	strne	r1, [r3, #4]
 80081e8:	6863      	ldr	r3, [r4, #4]
 80081ea:	bf08      	it	eq
 80081ec:	f8c8 1000 	streq.w	r1, [r8]
 80081f0:	5162      	str	r2, [r4, r5]
 80081f2:	604b      	str	r3, [r1, #4]
 80081f4:	4630      	mov	r0, r6
 80081f6:	f000 f82f 	bl	8008258 <__malloc_unlock>
 80081fa:	f104 000b 	add.w	r0, r4, #11
 80081fe:	1d23      	adds	r3, r4, #4
 8008200:	f020 0007 	bic.w	r0, r0, #7
 8008204:	1ac2      	subs	r2, r0, r3
 8008206:	bf1c      	itt	ne
 8008208:	1a1b      	subne	r3, r3, r0
 800820a:	50a3      	strne	r3, [r4, r2]
 800820c:	e7af      	b.n	800816e <_malloc_r+0x22>
 800820e:	6862      	ldr	r2, [r4, #4]
 8008210:	42a3      	cmp	r3, r4
 8008212:	bf0c      	ite	eq
 8008214:	f8c8 2000 	streq.w	r2, [r8]
 8008218:	605a      	strne	r2, [r3, #4]
 800821a:	e7eb      	b.n	80081f4 <_malloc_r+0xa8>
 800821c:	4623      	mov	r3, r4
 800821e:	6864      	ldr	r4, [r4, #4]
 8008220:	e7ae      	b.n	8008180 <_malloc_r+0x34>
 8008222:	463c      	mov	r4, r7
 8008224:	687f      	ldr	r7, [r7, #4]
 8008226:	e7b6      	b.n	8008196 <_malloc_r+0x4a>
 8008228:	461a      	mov	r2, r3
 800822a:	685b      	ldr	r3, [r3, #4]
 800822c:	42a3      	cmp	r3, r4
 800822e:	d1fb      	bne.n	8008228 <_malloc_r+0xdc>
 8008230:	2300      	movs	r3, #0
 8008232:	6053      	str	r3, [r2, #4]
 8008234:	e7de      	b.n	80081f4 <_malloc_r+0xa8>
 8008236:	230c      	movs	r3, #12
 8008238:	6033      	str	r3, [r6, #0]
 800823a:	4630      	mov	r0, r6
 800823c:	f000 f80c 	bl	8008258 <__malloc_unlock>
 8008240:	e794      	b.n	800816c <_malloc_r+0x20>
 8008242:	6005      	str	r5, [r0, #0]
 8008244:	e7d6      	b.n	80081f4 <_malloc_r+0xa8>
 8008246:	bf00      	nop
 8008248:	24000290 	.word	0x24000290

0800824c <__malloc_lock>:
 800824c:	4801      	ldr	r0, [pc, #4]	@ (8008254 <__malloc_lock+0x8>)
 800824e:	f7ff bf0e 	b.w	800806e <__retarget_lock_acquire_recursive>
 8008252:	bf00      	nop
 8008254:	24000288 	.word	0x24000288

08008258 <__malloc_unlock>:
 8008258:	4801      	ldr	r0, [pc, #4]	@ (8008260 <__malloc_unlock+0x8>)
 800825a:	f7ff bf09 	b.w	8008070 <__retarget_lock_release_recursive>
 800825e:	bf00      	nop
 8008260:	24000288 	.word	0x24000288

08008264 <__sfputc_r>:
 8008264:	6893      	ldr	r3, [r2, #8]
 8008266:	3b01      	subs	r3, #1
 8008268:	2b00      	cmp	r3, #0
 800826a:	b410      	push	{r4}
 800826c:	6093      	str	r3, [r2, #8]
 800826e:	da08      	bge.n	8008282 <__sfputc_r+0x1e>
 8008270:	6994      	ldr	r4, [r2, #24]
 8008272:	42a3      	cmp	r3, r4
 8008274:	db01      	blt.n	800827a <__sfputc_r+0x16>
 8008276:	290a      	cmp	r1, #10
 8008278:	d103      	bne.n	8008282 <__sfputc_r+0x1e>
 800827a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800827e:	f7ff bde8 	b.w	8007e52 <__swbuf_r>
 8008282:	6813      	ldr	r3, [r2, #0]
 8008284:	1c58      	adds	r0, r3, #1
 8008286:	6010      	str	r0, [r2, #0]
 8008288:	7019      	strb	r1, [r3, #0]
 800828a:	4608      	mov	r0, r1
 800828c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008290:	4770      	bx	lr

08008292 <__sfputs_r>:
 8008292:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008294:	4606      	mov	r6, r0
 8008296:	460f      	mov	r7, r1
 8008298:	4614      	mov	r4, r2
 800829a:	18d5      	adds	r5, r2, r3
 800829c:	42ac      	cmp	r4, r5
 800829e:	d101      	bne.n	80082a4 <__sfputs_r+0x12>
 80082a0:	2000      	movs	r0, #0
 80082a2:	e007      	b.n	80082b4 <__sfputs_r+0x22>
 80082a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082a8:	463a      	mov	r2, r7
 80082aa:	4630      	mov	r0, r6
 80082ac:	f7ff ffda 	bl	8008264 <__sfputc_r>
 80082b0:	1c43      	adds	r3, r0, #1
 80082b2:	d1f3      	bne.n	800829c <__sfputs_r+0xa>
 80082b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080082b8 <_vfiprintf_r>:
 80082b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082bc:	460d      	mov	r5, r1
 80082be:	b09d      	sub	sp, #116	@ 0x74
 80082c0:	4614      	mov	r4, r2
 80082c2:	4698      	mov	r8, r3
 80082c4:	4606      	mov	r6, r0
 80082c6:	b118      	cbz	r0, 80082d0 <_vfiprintf_r+0x18>
 80082c8:	6a03      	ldr	r3, [r0, #32]
 80082ca:	b90b      	cbnz	r3, 80082d0 <_vfiprintf_r+0x18>
 80082cc:	f7ff fcd8 	bl	8007c80 <__sinit>
 80082d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80082d2:	07d9      	lsls	r1, r3, #31
 80082d4:	d405      	bmi.n	80082e2 <_vfiprintf_r+0x2a>
 80082d6:	89ab      	ldrh	r3, [r5, #12]
 80082d8:	059a      	lsls	r2, r3, #22
 80082da:	d402      	bmi.n	80082e2 <_vfiprintf_r+0x2a>
 80082dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80082de:	f7ff fec6 	bl	800806e <__retarget_lock_acquire_recursive>
 80082e2:	89ab      	ldrh	r3, [r5, #12]
 80082e4:	071b      	lsls	r3, r3, #28
 80082e6:	d501      	bpl.n	80082ec <_vfiprintf_r+0x34>
 80082e8:	692b      	ldr	r3, [r5, #16]
 80082ea:	b99b      	cbnz	r3, 8008314 <_vfiprintf_r+0x5c>
 80082ec:	4629      	mov	r1, r5
 80082ee:	4630      	mov	r0, r6
 80082f0:	f7ff fdee 	bl	8007ed0 <__swsetup_r>
 80082f4:	b170      	cbz	r0, 8008314 <_vfiprintf_r+0x5c>
 80082f6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80082f8:	07dc      	lsls	r4, r3, #31
 80082fa:	d504      	bpl.n	8008306 <_vfiprintf_r+0x4e>
 80082fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008300:	b01d      	add	sp, #116	@ 0x74
 8008302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008306:	89ab      	ldrh	r3, [r5, #12]
 8008308:	0598      	lsls	r0, r3, #22
 800830a:	d4f7      	bmi.n	80082fc <_vfiprintf_r+0x44>
 800830c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800830e:	f7ff feaf 	bl	8008070 <__retarget_lock_release_recursive>
 8008312:	e7f3      	b.n	80082fc <_vfiprintf_r+0x44>
 8008314:	2300      	movs	r3, #0
 8008316:	9309      	str	r3, [sp, #36]	@ 0x24
 8008318:	2320      	movs	r3, #32
 800831a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800831e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008322:	2330      	movs	r3, #48	@ 0x30
 8008324:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80084d4 <_vfiprintf_r+0x21c>
 8008328:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800832c:	f04f 0901 	mov.w	r9, #1
 8008330:	4623      	mov	r3, r4
 8008332:	469a      	mov	sl, r3
 8008334:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008338:	b10a      	cbz	r2, 800833e <_vfiprintf_r+0x86>
 800833a:	2a25      	cmp	r2, #37	@ 0x25
 800833c:	d1f9      	bne.n	8008332 <_vfiprintf_r+0x7a>
 800833e:	ebba 0b04 	subs.w	fp, sl, r4
 8008342:	d00b      	beq.n	800835c <_vfiprintf_r+0xa4>
 8008344:	465b      	mov	r3, fp
 8008346:	4622      	mov	r2, r4
 8008348:	4629      	mov	r1, r5
 800834a:	4630      	mov	r0, r6
 800834c:	f7ff ffa1 	bl	8008292 <__sfputs_r>
 8008350:	3001      	adds	r0, #1
 8008352:	f000 80a7 	beq.w	80084a4 <_vfiprintf_r+0x1ec>
 8008356:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008358:	445a      	add	r2, fp
 800835a:	9209      	str	r2, [sp, #36]	@ 0x24
 800835c:	f89a 3000 	ldrb.w	r3, [sl]
 8008360:	2b00      	cmp	r3, #0
 8008362:	f000 809f 	beq.w	80084a4 <_vfiprintf_r+0x1ec>
 8008366:	2300      	movs	r3, #0
 8008368:	f04f 32ff 	mov.w	r2, #4294967295
 800836c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008370:	f10a 0a01 	add.w	sl, sl, #1
 8008374:	9304      	str	r3, [sp, #16]
 8008376:	9307      	str	r3, [sp, #28]
 8008378:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800837c:	931a      	str	r3, [sp, #104]	@ 0x68
 800837e:	4654      	mov	r4, sl
 8008380:	2205      	movs	r2, #5
 8008382:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008386:	4853      	ldr	r0, [pc, #332]	@ (80084d4 <_vfiprintf_r+0x21c>)
 8008388:	f7f7 ffaa 	bl	80002e0 <memchr>
 800838c:	9a04      	ldr	r2, [sp, #16]
 800838e:	b9d8      	cbnz	r0, 80083c8 <_vfiprintf_r+0x110>
 8008390:	06d1      	lsls	r1, r2, #27
 8008392:	bf44      	itt	mi
 8008394:	2320      	movmi	r3, #32
 8008396:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800839a:	0713      	lsls	r3, r2, #28
 800839c:	bf44      	itt	mi
 800839e:	232b      	movmi	r3, #43	@ 0x2b
 80083a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80083a4:	f89a 3000 	ldrb.w	r3, [sl]
 80083a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80083aa:	d015      	beq.n	80083d8 <_vfiprintf_r+0x120>
 80083ac:	9a07      	ldr	r2, [sp, #28]
 80083ae:	4654      	mov	r4, sl
 80083b0:	2000      	movs	r0, #0
 80083b2:	f04f 0c0a 	mov.w	ip, #10
 80083b6:	4621      	mov	r1, r4
 80083b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083bc:	3b30      	subs	r3, #48	@ 0x30
 80083be:	2b09      	cmp	r3, #9
 80083c0:	d94b      	bls.n	800845a <_vfiprintf_r+0x1a2>
 80083c2:	b1b0      	cbz	r0, 80083f2 <_vfiprintf_r+0x13a>
 80083c4:	9207      	str	r2, [sp, #28]
 80083c6:	e014      	b.n	80083f2 <_vfiprintf_r+0x13a>
 80083c8:	eba0 0308 	sub.w	r3, r0, r8
 80083cc:	fa09 f303 	lsl.w	r3, r9, r3
 80083d0:	4313      	orrs	r3, r2
 80083d2:	9304      	str	r3, [sp, #16]
 80083d4:	46a2      	mov	sl, r4
 80083d6:	e7d2      	b.n	800837e <_vfiprintf_r+0xc6>
 80083d8:	9b03      	ldr	r3, [sp, #12]
 80083da:	1d19      	adds	r1, r3, #4
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	9103      	str	r1, [sp, #12]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	bfbb      	ittet	lt
 80083e4:	425b      	neglt	r3, r3
 80083e6:	f042 0202 	orrlt.w	r2, r2, #2
 80083ea:	9307      	strge	r3, [sp, #28]
 80083ec:	9307      	strlt	r3, [sp, #28]
 80083ee:	bfb8      	it	lt
 80083f0:	9204      	strlt	r2, [sp, #16]
 80083f2:	7823      	ldrb	r3, [r4, #0]
 80083f4:	2b2e      	cmp	r3, #46	@ 0x2e
 80083f6:	d10a      	bne.n	800840e <_vfiprintf_r+0x156>
 80083f8:	7863      	ldrb	r3, [r4, #1]
 80083fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80083fc:	d132      	bne.n	8008464 <_vfiprintf_r+0x1ac>
 80083fe:	9b03      	ldr	r3, [sp, #12]
 8008400:	1d1a      	adds	r2, r3, #4
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	9203      	str	r2, [sp, #12]
 8008406:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800840a:	3402      	adds	r4, #2
 800840c:	9305      	str	r3, [sp, #20]
 800840e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80084e4 <_vfiprintf_r+0x22c>
 8008412:	7821      	ldrb	r1, [r4, #0]
 8008414:	2203      	movs	r2, #3
 8008416:	4650      	mov	r0, sl
 8008418:	f7f7 ff62 	bl	80002e0 <memchr>
 800841c:	b138      	cbz	r0, 800842e <_vfiprintf_r+0x176>
 800841e:	9b04      	ldr	r3, [sp, #16]
 8008420:	eba0 000a 	sub.w	r0, r0, sl
 8008424:	2240      	movs	r2, #64	@ 0x40
 8008426:	4082      	lsls	r2, r0
 8008428:	4313      	orrs	r3, r2
 800842a:	3401      	adds	r4, #1
 800842c:	9304      	str	r3, [sp, #16]
 800842e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008432:	4829      	ldr	r0, [pc, #164]	@ (80084d8 <_vfiprintf_r+0x220>)
 8008434:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008438:	2206      	movs	r2, #6
 800843a:	f7f7 ff51 	bl	80002e0 <memchr>
 800843e:	2800      	cmp	r0, #0
 8008440:	d03f      	beq.n	80084c2 <_vfiprintf_r+0x20a>
 8008442:	4b26      	ldr	r3, [pc, #152]	@ (80084dc <_vfiprintf_r+0x224>)
 8008444:	bb1b      	cbnz	r3, 800848e <_vfiprintf_r+0x1d6>
 8008446:	9b03      	ldr	r3, [sp, #12]
 8008448:	3307      	adds	r3, #7
 800844a:	f023 0307 	bic.w	r3, r3, #7
 800844e:	3308      	adds	r3, #8
 8008450:	9303      	str	r3, [sp, #12]
 8008452:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008454:	443b      	add	r3, r7
 8008456:	9309      	str	r3, [sp, #36]	@ 0x24
 8008458:	e76a      	b.n	8008330 <_vfiprintf_r+0x78>
 800845a:	fb0c 3202 	mla	r2, ip, r2, r3
 800845e:	460c      	mov	r4, r1
 8008460:	2001      	movs	r0, #1
 8008462:	e7a8      	b.n	80083b6 <_vfiprintf_r+0xfe>
 8008464:	2300      	movs	r3, #0
 8008466:	3401      	adds	r4, #1
 8008468:	9305      	str	r3, [sp, #20]
 800846a:	4619      	mov	r1, r3
 800846c:	f04f 0c0a 	mov.w	ip, #10
 8008470:	4620      	mov	r0, r4
 8008472:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008476:	3a30      	subs	r2, #48	@ 0x30
 8008478:	2a09      	cmp	r2, #9
 800847a:	d903      	bls.n	8008484 <_vfiprintf_r+0x1cc>
 800847c:	2b00      	cmp	r3, #0
 800847e:	d0c6      	beq.n	800840e <_vfiprintf_r+0x156>
 8008480:	9105      	str	r1, [sp, #20]
 8008482:	e7c4      	b.n	800840e <_vfiprintf_r+0x156>
 8008484:	fb0c 2101 	mla	r1, ip, r1, r2
 8008488:	4604      	mov	r4, r0
 800848a:	2301      	movs	r3, #1
 800848c:	e7f0      	b.n	8008470 <_vfiprintf_r+0x1b8>
 800848e:	ab03      	add	r3, sp, #12
 8008490:	9300      	str	r3, [sp, #0]
 8008492:	462a      	mov	r2, r5
 8008494:	4b12      	ldr	r3, [pc, #72]	@ (80084e0 <_vfiprintf_r+0x228>)
 8008496:	a904      	add	r1, sp, #16
 8008498:	4630      	mov	r0, r6
 800849a:	f3af 8000 	nop.w
 800849e:	4607      	mov	r7, r0
 80084a0:	1c78      	adds	r0, r7, #1
 80084a2:	d1d6      	bne.n	8008452 <_vfiprintf_r+0x19a>
 80084a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80084a6:	07d9      	lsls	r1, r3, #31
 80084a8:	d405      	bmi.n	80084b6 <_vfiprintf_r+0x1fe>
 80084aa:	89ab      	ldrh	r3, [r5, #12]
 80084ac:	059a      	lsls	r2, r3, #22
 80084ae:	d402      	bmi.n	80084b6 <_vfiprintf_r+0x1fe>
 80084b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80084b2:	f7ff fddd 	bl	8008070 <__retarget_lock_release_recursive>
 80084b6:	89ab      	ldrh	r3, [r5, #12]
 80084b8:	065b      	lsls	r3, r3, #25
 80084ba:	f53f af1f 	bmi.w	80082fc <_vfiprintf_r+0x44>
 80084be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80084c0:	e71e      	b.n	8008300 <_vfiprintf_r+0x48>
 80084c2:	ab03      	add	r3, sp, #12
 80084c4:	9300      	str	r3, [sp, #0]
 80084c6:	462a      	mov	r2, r5
 80084c8:	4b05      	ldr	r3, [pc, #20]	@ (80084e0 <_vfiprintf_r+0x228>)
 80084ca:	a904      	add	r1, sp, #16
 80084cc:	4630      	mov	r0, r6
 80084ce:	f000 f879 	bl	80085c4 <_printf_i>
 80084d2:	e7e4      	b.n	800849e <_vfiprintf_r+0x1e6>
 80084d4:	08008b34 	.word	0x08008b34
 80084d8:	08008b3e 	.word	0x08008b3e
 80084dc:	00000000 	.word	0x00000000
 80084e0:	08008293 	.word	0x08008293
 80084e4:	08008b3a 	.word	0x08008b3a

080084e8 <_printf_common>:
 80084e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084ec:	4616      	mov	r6, r2
 80084ee:	4698      	mov	r8, r3
 80084f0:	688a      	ldr	r2, [r1, #8]
 80084f2:	690b      	ldr	r3, [r1, #16]
 80084f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80084f8:	4293      	cmp	r3, r2
 80084fa:	bfb8      	it	lt
 80084fc:	4613      	movlt	r3, r2
 80084fe:	6033      	str	r3, [r6, #0]
 8008500:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008504:	4607      	mov	r7, r0
 8008506:	460c      	mov	r4, r1
 8008508:	b10a      	cbz	r2, 800850e <_printf_common+0x26>
 800850a:	3301      	adds	r3, #1
 800850c:	6033      	str	r3, [r6, #0]
 800850e:	6823      	ldr	r3, [r4, #0]
 8008510:	0699      	lsls	r1, r3, #26
 8008512:	bf42      	ittt	mi
 8008514:	6833      	ldrmi	r3, [r6, #0]
 8008516:	3302      	addmi	r3, #2
 8008518:	6033      	strmi	r3, [r6, #0]
 800851a:	6825      	ldr	r5, [r4, #0]
 800851c:	f015 0506 	ands.w	r5, r5, #6
 8008520:	d106      	bne.n	8008530 <_printf_common+0x48>
 8008522:	f104 0a19 	add.w	sl, r4, #25
 8008526:	68e3      	ldr	r3, [r4, #12]
 8008528:	6832      	ldr	r2, [r6, #0]
 800852a:	1a9b      	subs	r3, r3, r2
 800852c:	42ab      	cmp	r3, r5
 800852e:	dc26      	bgt.n	800857e <_printf_common+0x96>
 8008530:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008534:	6822      	ldr	r2, [r4, #0]
 8008536:	3b00      	subs	r3, #0
 8008538:	bf18      	it	ne
 800853a:	2301      	movne	r3, #1
 800853c:	0692      	lsls	r2, r2, #26
 800853e:	d42b      	bmi.n	8008598 <_printf_common+0xb0>
 8008540:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008544:	4641      	mov	r1, r8
 8008546:	4638      	mov	r0, r7
 8008548:	47c8      	blx	r9
 800854a:	3001      	adds	r0, #1
 800854c:	d01e      	beq.n	800858c <_printf_common+0xa4>
 800854e:	6823      	ldr	r3, [r4, #0]
 8008550:	6922      	ldr	r2, [r4, #16]
 8008552:	f003 0306 	and.w	r3, r3, #6
 8008556:	2b04      	cmp	r3, #4
 8008558:	bf02      	ittt	eq
 800855a:	68e5      	ldreq	r5, [r4, #12]
 800855c:	6833      	ldreq	r3, [r6, #0]
 800855e:	1aed      	subeq	r5, r5, r3
 8008560:	68a3      	ldr	r3, [r4, #8]
 8008562:	bf0c      	ite	eq
 8008564:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008568:	2500      	movne	r5, #0
 800856a:	4293      	cmp	r3, r2
 800856c:	bfc4      	itt	gt
 800856e:	1a9b      	subgt	r3, r3, r2
 8008570:	18ed      	addgt	r5, r5, r3
 8008572:	2600      	movs	r6, #0
 8008574:	341a      	adds	r4, #26
 8008576:	42b5      	cmp	r5, r6
 8008578:	d11a      	bne.n	80085b0 <_printf_common+0xc8>
 800857a:	2000      	movs	r0, #0
 800857c:	e008      	b.n	8008590 <_printf_common+0xa8>
 800857e:	2301      	movs	r3, #1
 8008580:	4652      	mov	r2, sl
 8008582:	4641      	mov	r1, r8
 8008584:	4638      	mov	r0, r7
 8008586:	47c8      	blx	r9
 8008588:	3001      	adds	r0, #1
 800858a:	d103      	bne.n	8008594 <_printf_common+0xac>
 800858c:	f04f 30ff 	mov.w	r0, #4294967295
 8008590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008594:	3501      	adds	r5, #1
 8008596:	e7c6      	b.n	8008526 <_printf_common+0x3e>
 8008598:	18e1      	adds	r1, r4, r3
 800859a:	1c5a      	adds	r2, r3, #1
 800859c:	2030      	movs	r0, #48	@ 0x30
 800859e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80085a2:	4422      	add	r2, r4
 80085a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80085a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80085ac:	3302      	adds	r3, #2
 80085ae:	e7c7      	b.n	8008540 <_printf_common+0x58>
 80085b0:	2301      	movs	r3, #1
 80085b2:	4622      	mov	r2, r4
 80085b4:	4641      	mov	r1, r8
 80085b6:	4638      	mov	r0, r7
 80085b8:	47c8      	blx	r9
 80085ba:	3001      	adds	r0, #1
 80085bc:	d0e6      	beq.n	800858c <_printf_common+0xa4>
 80085be:	3601      	adds	r6, #1
 80085c0:	e7d9      	b.n	8008576 <_printf_common+0x8e>
	...

080085c4 <_printf_i>:
 80085c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80085c8:	7e0f      	ldrb	r7, [r1, #24]
 80085ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80085cc:	2f78      	cmp	r7, #120	@ 0x78
 80085ce:	4691      	mov	r9, r2
 80085d0:	4680      	mov	r8, r0
 80085d2:	460c      	mov	r4, r1
 80085d4:	469a      	mov	sl, r3
 80085d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80085da:	d807      	bhi.n	80085ec <_printf_i+0x28>
 80085dc:	2f62      	cmp	r7, #98	@ 0x62
 80085de:	d80a      	bhi.n	80085f6 <_printf_i+0x32>
 80085e0:	2f00      	cmp	r7, #0
 80085e2:	f000 80d1 	beq.w	8008788 <_printf_i+0x1c4>
 80085e6:	2f58      	cmp	r7, #88	@ 0x58
 80085e8:	f000 80b8 	beq.w	800875c <_printf_i+0x198>
 80085ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80085f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80085f4:	e03a      	b.n	800866c <_printf_i+0xa8>
 80085f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80085fa:	2b15      	cmp	r3, #21
 80085fc:	d8f6      	bhi.n	80085ec <_printf_i+0x28>
 80085fe:	a101      	add	r1, pc, #4	@ (adr r1, 8008604 <_printf_i+0x40>)
 8008600:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008604:	0800865d 	.word	0x0800865d
 8008608:	08008671 	.word	0x08008671
 800860c:	080085ed 	.word	0x080085ed
 8008610:	080085ed 	.word	0x080085ed
 8008614:	080085ed 	.word	0x080085ed
 8008618:	080085ed 	.word	0x080085ed
 800861c:	08008671 	.word	0x08008671
 8008620:	080085ed 	.word	0x080085ed
 8008624:	080085ed 	.word	0x080085ed
 8008628:	080085ed 	.word	0x080085ed
 800862c:	080085ed 	.word	0x080085ed
 8008630:	0800876f 	.word	0x0800876f
 8008634:	0800869b 	.word	0x0800869b
 8008638:	08008729 	.word	0x08008729
 800863c:	080085ed 	.word	0x080085ed
 8008640:	080085ed 	.word	0x080085ed
 8008644:	08008791 	.word	0x08008791
 8008648:	080085ed 	.word	0x080085ed
 800864c:	0800869b 	.word	0x0800869b
 8008650:	080085ed 	.word	0x080085ed
 8008654:	080085ed 	.word	0x080085ed
 8008658:	08008731 	.word	0x08008731
 800865c:	6833      	ldr	r3, [r6, #0]
 800865e:	1d1a      	adds	r2, r3, #4
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	6032      	str	r2, [r6, #0]
 8008664:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008668:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800866c:	2301      	movs	r3, #1
 800866e:	e09c      	b.n	80087aa <_printf_i+0x1e6>
 8008670:	6833      	ldr	r3, [r6, #0]
 8008672:	6820      	ldr	r0, [r4, #0]
 8008674:	1d19      	adds	r1, r3, #4
 8008676:	6031      	str	r1, [r6, #0]
 8008678:	0606      	lsls	r6, r0, #24
 800867a:	d501      	bpl.n	8008680 <_printf_i+0xbc>
 800867c:	681d      	ldr	r5, [r3, #0]
 800867e:	e003      	b.n	8008688 <_printf_i+0xc4>
 8008680:	0645      	lsls	r5, r0, #25
 8008682:	d5fb      	bpl.n	800867c <_printf_i+0xb8>
 8008684:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008688:	2d00      	cmp	r5, #0
 800868a:	da03      	bge.n	8008694 <_printf_i+0xd0>
 800868c:	232d      	movs	r3, #45	@ 0x2d
 800868e:	426d      	negs	r5, r5
 8008690:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008694:	4858      	ldr	r0, [pc, #352]	@ (80087f8 <_printf_i+0x234>)
 8008696:	230a      	movs	r3, #10
 8008698:	e011      	b.n	80086be <_printf_i+0xfa>
 800869a:	6821      	ldr	r1, [r4, #0]
 800869c:	6833      	ldr	r3, [r6, #0]
 800869e:	0608      	lsls	r0, r1, #24
 80086a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80086a4:	d402      	bmi.n	80086ac <_printf_i+0xe8>
 80086a6:	0649      	lsls	r1, r1, #25
 80086a8:	bf48      	it	mi
 80086aa:	b2ad      	uxthmi	r5, r5
 80086ac:	2f6f      	cmp	r7, #111	@ 0x6f
 80086ae:	4852      	ldr	r0, [pc, #328]	@ (80087f8 <_printf_i+0x234>)
 80086b0:	6033      	str	r3, [r6, #0]
 80086b2:	bf14      	ite	ne
 80086b4:	230a      	movne	r3, #10
 80086b6:	2308      	moveq	r3, #8
 80086b8:	2100      	movs	r1, #0
 80086ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80086be:	6866      	ldr	r6, [r4, #4]
 80086c0:	60a6      	str	r6, [r4, #8]
 80086c2:	2e00      	cmp	r6, #0
 80086c4:	db05      	blt.n	80086d2 <_printf_i+0x10e>
 80086c6:	6821      	ldr	r1, [r4, #0]
 80086c8:	432e      	orrs	r6, r5
 80086ca:	f021 0104 	bic.w	r1, r1, #4
 80086ce:	6021      	str	r1, [r4, #0]
 80086d0:	d04b      	beq.n	800876a <_printf_i+0x1a6>
 80086d2:	4616      	mov	r6, r2
 80086d4:	fbb5 f1f3 	udiv	r1, r5, r3
 80086d8:	fb03 5711 	mls	r7, r3, r1, r5
 80086dc:	5dc7      	ldrb	r7, [r0, r7]
 80086de:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80086e2:	462f      	mov	r7, r5
 80086e4:	42bb      	cmp	r3, r7
 80086e6:	460d      	mov	r5, r1
 80086e8:	d9f4      	bls.n	80086d4 <_printf_i+0x110>
 80086ea:	2b08      	cmp	r3, #8
 80086ec:	d10b      	bne.n	8008706 <_printf_i+0x142>
 80086ee:	6823      	ldr	r3, [r4, #0]
 80086f0:	07df      	lsls	r7, r3, #31
 80086f2:	d508      	bpl.n	8008706 <_printf_i+0x142>
 80086f4:	6923      	ldr	r3, [r4, #16]
 80086f6:	6861      	ldr	r1, [r4, #4]
 80086f8:	4299      	cmp	r1, r3
 80086fa:	bfde      	ittt	le
 80086fc:	2330      	movle	r3, #48	@ 0x30
 80086fe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008702:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008706:	1b92      	subs	r2, r2, r6
 8008708:	6122      	str	r2, [r4, #16]
 800870a:	f8cd a000 	str.w	sl, [sp]
 800870e:	464b      	mov	r3, r9
 8008710:	aa03      	add	r2, sp, #12
 8008712:	4621      	mov	r1, r4
 8008714:	4640      	mov	r0, r8
 8008716:	f7ff fee7 	bl	80084e8 <_printf_common>
 800871a:	3001      	adds	r0, #1
 800871c:	d14a      	bne.n	80087b4 <_printf_i+0x1f0>
 800871e:	f04f 30ff 	mov.w	r0, #4294967295
 8008722:	b004      	add	sp, #16
 8008724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008728:	6823      	ldr	r3, [r4, #0]
 800872a:	f043 0320 	orr.w	r3, r3, #32
 800872e:	6023      	str	r3, [r4, #0]
 8008730:	4832      	ldr	r0, [pc, #200]	@ (80087fc <_printf_i+0x238>)
 8008732:	2778      	movs	r7, #120	@ 0x78
 8008734:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008738:	6823      	ldr	r3, [r4, #0]
 800873a:	6831      	ldr	r1, [r6, #0]
 800873c:	061f      	lsls	r7, r3, #24
 800873e:	f851 5b04 	ldr.w	r5, [r1], #4
 8008742:	d402      	bmi.n	800874a <_printf_i+0x186>
 8008744:	065f      	lsls	r7, r3, #25
 8008746:	bf48      	it	mi
 8008748:	b2ad      	uxthmi	r5, r5
 800874a:	6031      	str	r1, [r6, #0]
 800874c:	07d9      	lsls	r1, r3, #31
 800874e:	bf44      	itt	mi
 8008750:	f043 0320 	orrmi.w	r3, r3, #32
 8008754:	6023      	strmi	r3, [r4, #0]
 8008756:	b11d      	cbz	r5, 8008760 <_printf_i+0x19c>
 8008758:	2310      	movs	r3, #16
 800875a:	e7ad      	b.n	80086b8 <_printf_i+0xf4>
 800875c:	4826      	ldr	r0, [pc, #152]	@ (80087f8 <_printf_i+0x234>)
 800875e:	e7e9      	b.n	8008734 <_printf_i+0x170>
 8008760:	6823      	ldr	r3, [r4, #0]
 8008762:	f023 0320 	bic.w	r3, r3, #32
 8008766:	6023      	str	r3, [r4, #0]
 8008768:	e7f6      	b.n	8008758 <_printf_i+0x194>
 800876a:	4616      	mov	r6, r2
 800876c:	e7bd      	b.n	80086ea <_printf_i+0x126>
 800876e:	6833      	ldr	r3, [r6, #0]
 8008770:	6825      	ldr	r5, [r4, #0]
 8008772:	6961      	ldr	r1, [r4, #20]
 8008774:	1d18      	adds	r0, r3, #4
 8008776:	6030      	str	r0, [r6, #0]
 8008778:	062e      	lsls	r6, r5, #24
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	d501      	bpl.n	8008782 <_printf_i+0x1be>
 800877e:	6019      	str	r1, [r3, #0]
 8008780:	e002      	b.n	8008788 <_printf_i+0x1c4>
 8008782:	0668      	lsls	r0, r5, #25
 8008784:	d5fb      	bpl.n	800877e <_printf_i+0x1ba>
 8008786:	8019      	strh	r1, [r3, #0]
 8008788:	2300      	movs	r3, #0
 800878a:	6123      	str	r3, [r4, #16]
 800878c:	4616      	mov	r6, r2
 800878e:	e7bc      	b.n	800870a <_printf_i+0x146>
 8008790:	6833      	ldr	r3, [r6, #0]
 8008792:	1d1a      	adds	r2, r3, #4
 8008794:	6032      	str	r2, [r6, #0]
 8008796:	681e      	ldr	r6, [r3, #0]
 8008798:	6862      	ldr	r2, [r4, #4]
 800879a:	2100      	movs	r1, #0
 800879c:	4630      	mov	r0, r6
 800879e:	f7f7 fd9f 	bl	80002e0 <memchr>
 80087a2:	b108      	cbz	r0, 80087a8 <_printf_i+0x1e4>
 80087a4:	1b80      	subs	r0, r0, r6
 80087a6:	6060      	str	r0, [r4, #4]
 80087a8:	6863      	ldr	r3, [r4, #4]
 80087aa:	6123      	str	r3, [r4, #16]
 80087ac:	2300      	movs	r3, #0
 80087ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80087b2:	e7aa      	b.n	800870a <_printf_i+0x146>
 80087b4:	6923      	ldr	r3, [r4, #16]
 80087b6:	4632      	mov	r2, r6
 80087b8:	4649      	mov	r1, r9
 80087ba:	4640      	mov	r0, r8
 80087bc:	47d0      	blx	sl
 80087be:	3001      	adds	r0, #1
 80087c0:	d0ad      	beq.n	800871e <_printf_i+0x15a>
 80087c2:	6823      	ldr	r3, [r4, #0]
 80087c4:	079b      	lsls	r3, r3, #30
 80087c6:	d413      	bmi.n	80087f0 <_printf_i+0x22c>
 80087c8:	68e0      	ldr	r0, [r4, #12]
 80087ca:	9b03      	ldr	r3, [sp, #12]
 80087cc:	4298      	cmp	r0, r3
 80087ce:	bfb8      	it	lt
 80087d0:	4618      	movlt	r0, r3
 80087d2:	e7a6      	b.n	8008722 <_printf_i+0x15e>
 80087d4:	2301      	movs	r3, #1
 80087d6:	4632      	mov	r2, r6
 80087d8:	4649      	mov	r1, r9
 80087da:	4640      	mov	r0, r8
 80087dc:	47d0      	blx	sl
 80087de:	3001      	adds	r0, #1
 80087e0:	d09d      	beq.n	800871e <_printf_i+0x15a>
 80087e2:	3501      	adds	r5, #1
 80087e4:	68e3      	ldr	r3, [r4, #12]
 80087e6:	9903      	ldr	r1, [sp, #12]
 80087e8:	1a5b      	subs	r3, r3, r1
 80087ea:	42ab      	cmp	r3, r5
 80087ec:	dcf2      	bgt.n	80087d4 <_printf_i+0x210>
 80087ee:	e7eb      	b.n	80087c8 <_printf_i+0x204>
 80087f0:	2500      	movs	r5, #0
 80087f2:	f104 0619 	add.w	r6, r4, #25
 80087f6:	e7f5      	b.n	80087e4 <_printf_i+0x220>
 80087f8:	08008b45 	.word	0x08008b45
 80087fc:	08008b56 	.word	0x08008b56

08008800 <__sflush_r>:
 8008800:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008808:	0716      	lsls	r6, r2, #28
 800880a:	4605      	mov	r5, r0
 800880c:	460c      	mov	r4, r1
 800880e:	d454      	bmi.n	80088ba <__sflush_r+0xba>
 8008810:	684b      	ldr	r3, [r1, #4]
 8008812:	2b00      	cmp	r3, #0
 8008814:	dc02      	bgt.n	800881c <__sflush_r+0x1c>
 8008816:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008818:	2b00      	cmp	r3, #0
 800881a:	dd48      	ble.n	80088ae <__sflush_r+0xae>
 800881c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800881e:	2e00      	cmp	r6, #0
 8008820:	d045      	beq.n	80088ae <__sflush_r+0xae>
 8008822:	2300      	movs	r3, #0
 8008824:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008828:	682f      	ldr	r7, [r5, #0]
 800882a:	6a21      	ldr	r1, [r4, #32]
 800882c:	602b      	str	r3, [r5, #0]
 800882e:	d030      	beq.n	8008892 <__sflush_r+0x92>
 8008830:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008832:	89a3      	ldrh	r3, [r4, #12]
 8008834:	0759      	lsls	r1, r3, #29
 8008836:	d505      	bpl.n	8008844 <__sflush_r+0x44>
 8008838:	6863      	ldr	r3, [r4, #4]
 800883a:	1ad2      	subs	r2, r2, r3
 800883c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800883e:	b10b      	cbz	r3, 8008844 <__sflush_r+0x44>
 8008840:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008842:	1ad2      	subs	r2, r2, r3
 8008844:	2300      	movs	r3, #0
 8008846:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008848:	6a21      	ldr	r1, [r4, #32]
 800884a:	4628      	mov	r0, r5
 800884c:	47b0      	blx	r6
 800884e:	1c43      	adds	r3, r0, #1
 8008850:	89a3      	ldrh	r3, [r4, #12]
 8008852:	d106      	bne.n	8008862 <__sflush_r+0x62>
 8008854:	6829      	ldr	r1, [r5, #0]
 8008856:	291d      	cmp	r1, #29
 8008858:	d82b      	bhi.n	80088b2 <__sflush_r+0xb2>
 800885a:	4a2a      	ldr	r2, [pc, #168]	@ (8008904 <__sflush_r+0x104>)
 800885c:	40ca      	lsrs	r2, r1
 800885e:	07d6      	lsls	r6, r2, #31
 8008860:	d527      	bpl.n	80088b2 <__sflush_r+0xb2>
 8008862:	2200      	movs	r2, #0
 8008864:	6062      	str	r2, [r4, #4]
 8008866:	04d9      	lsls	r1, r3, #19
 8008868:	6922      	ldr	r2, [r4, #16]
 800886a:	6022      	str	r2, [r4, #0]
 800886c:	d504      	bpl.n	8008878 <__sflush_r+0x78>
 800886e:	1c42      	adds	r2, r0, #1
 8008870:	d101      	bne.n	8008876 <__sflush_r+0x76>
 8008872:	682b      	ldr	r3, [r5, #0]
 8008874:	b903      	cbnz	r3, 8008878 <__sflush_r+0x78>
 8008876:	6560      	str	r0, [r4, #84]	@ 0x54
 8008878:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800887a:	602f      	str	r7, [r5, #0]
 800887c:	b1b9      	cbz	r1, 80088ae <__sflush_r+0xae>
 800887e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008882:	4299      	cmp	r1, r3
 8008884:	d002      	beq.n	800888c <__sflush_r+0x8c>
 8008886:	4628      	mov	r0, r5
 8008888:	f7ff fbf4 	bl	8008074 <_free_r>
 800888c:	2300      	movs	r3, #0
 800888e:	6363      	str	r3, [r4, #52]	@ 0x34
 8008890:	e00d      	b.n	80088ae <__sflush_r+0xae>
 8008892:	2301      	movs	r3, #1
 8008894:	4628      	mov	r0, r5
 8008896:	47b0      	blx	r6
 8008898:	4602      	mov	r2, r0
 800889a:	1c50      	adds	r0, r2, #1
 800889c:	d1c9      	bne.n	8008832 <__sflush_r+0x32>
 800889e:	682b      	ldr	r3, [r5, #0]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d0c6      	beq.n	8008832 <__sflush_r+0x32>
 80088a4:	2b1d      	cmp	r3, #29
 80088a6:	d001      	beq.n	80088ac <__sflush_r+0xac>
 80088a8:	2b16      	cmp	r3, #22
 80088aa:	d11e      	bne.n	80088ea <__sflush_r+0xea>
 80088ac:	602f      	str	r7, [r5, #0]
 80088ae:	2000      	movs	r0, #0
 80088b0:	e022      	b.n	80088f8 <__sflush_r+0xf8>
 80088b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088b6:	b21b      	sxth	r3, r3
 80088b8:	e01b      	b.n	80088f2 <__sflush_r+0xf2>
 80088ba:	690f      	ldr	r7, [r1, #16]
 80088bc:	2f00      	cmp	r7, #0
 80088be:	d0f6      	beq.n	80088ae <__sflush_r+0xae>
 80088c0:	0793      	lsls	r3, r2, #30
 80088c2:	680e      	ldr	r6, [r1, #0]
 80088c4:	bf08      	it	eq
 80088c6:	694b      	ldreq	r3, [r1, #20]
 80088c8:	600f      	str	r7, [r1, #0]
 80088ca:	bf18      	it	ne
 80088cc:	2300      	movne	r3, #0
 80088ce:	eba6 0807 	sub.w	r8, r6, r7
 80088d2:	608b      	str	r3, [r1, #8]
 80088d4:	f1b8 0f00 	cmp.w	r8, #0
 80088d8:	dde9      	ble.n	80088ae <__sflush_r+0xae>
 80088da:	6a21      	ldr	r1, [r4, #32]
 80088dc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80088de:	4643      	mov	r3, r8
 80088e0:	463a      	mov	r2, r7
 80088e2:	4628      	mov	r0, r5
 80088e4:	47b0      	blx	r6
 80088e6:	2800      	cmp	r0, #0
 80088e8:	dc08      	bgt.n	80088fc <__sflush_r+0xfc>
 80088ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088f2:	81a3      	strh	r3, [r4, #12]
 80088f4:	f04f 30ff 	mov.w	r0, #4294967295
 80088f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088fc:	4407      	add	r7, r0
 80088fe:	eba8 0800 	sub.w	r8, r8, r0
 8008902:	e7e7      	b.n	80088d4 <__sflush_r+0xd4>
 8008904:	20400001 	.word	0x20400001

08008908 <_fflush_r>:
 8008908:	b538      	push	{r3, r4, r5, lr}
 800890a:	690b      	ldr	r3, [r1, #16]
 800890c:	4605      	mov	r5, r0
 800890e:	460c      	mov	r4, r1
 8008910:	b913      	cbnz	r3, 8008918 <_fflush_r+0x10>
 8008912:	2500      	movs	r5, #0
 8008914:	4628      	mov	r0, r5
 8008916:	bd38      	pop	{r3, r4, r5, pc}
 8008918:	b118      	cbz	r0, 8008922 <_fflush_r+0x1a>
 800891a:	6a03      	ldr	r3, [r0, #32]
 800891c:	b90b      	cbnz	r3, 8008922 <_fflush_r+0x1a>
 800891e:	f7ff f9af 	bl	8007c80 <__sinit>
 8008922:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d0f3      	beq.n	8008912 <_fflush_r+0xa>
 800892a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800892c:	07d0      	lsls	r0, r2, #31
 800892e:	d404      	bmi.n	800893a <_fflush_r+0x32>
 8008930:	0599      	lsls	r1, r3, #22
 8008932:	d402      	bmi.n	800893a <_fflush_r+0x32>
 8008934:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008936:	f7ff fb9a 	bl	800806e <__retarget_lock_acquire_recursive>
 800893a:	4628      	mov	r0, r5
 800893c:	4621      	mov	r1, r4
 800893e:	f7ff ff5f 	bl	8008800 <__sflush_r>
 8008942:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008944:	07da      	lsls	r2, r3, #31
 8008946:	4605      	mov	r5, r0
 8008948:	d4e4      	bmi.n	8008914 <_fflush_r+0xc>
 800894a:	89a3      	ldrh	r3, [r4, #12]
 800894c:	059b      	lsls	r3, r3, #22
 800894e:	d4e1      	bmi.n	8008914 <_fflush_r+0xc>
 8008950:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008952:	f7ff fb8d 	bl	8008070 <__retarget_lock_release_recursive>
 8008956:	e7dd      	b.n	8008914 <_fflush_r+0xc>

08008958 <__swhatbuf_r>:
 8008958:	b570      	push	{r4, r5, r6, lr}
 800895a:	460c      	mov	r4, r1
 800895c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008960:	2900      	cmp	r1, #0
 8008962:	b096      	sub	sp, #88	@ 0x58
 8008964:	4615      	mov	r5, r2
 8008966:	461e      	mov	r6, r3
 8008968:	da0d      	bge.n	8008986 <__swhatbuf_r+0x2e>
 800896a:	89a3      	ldrh	r3, [r4, #12]
 800896c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008970:	f04f 0100 	mov.w	r1, #0
 8008974:	bf14      	ite	ne
 8008976:	2340      	movne	r3, #64	@ 0x40
 8008978:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800897c:	2000      	movs	r0, #0
 800897e:	6031      	str	r1, [r6, #0]
 8008980:	602b      	str	r3, [r5, #0]
 8008982:	b016      	add	sp, #88	@ 0x58
 8008984:	bd70      	pop	{r4, r5, r6, pc}
 8008986:	466a      	mov	r2, sp
 8008988:	f000 f848 	bl	8008a1c <_fstat_r>
 800898c:	2800      	cmp	r0, #0
 800898e:	dbec      	blt.n	800896a <__swhatbuf_r+0x12>
 8008990:	9901      	ldr	r1, [sp, #4]
 8008992:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008996:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800899a:	4259      	negs	r1, r3
 800899c:	4159      	adcs	r1, r3
 800899e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80089a2:	e7eb      	b.n	800897c <__swhatbuf_r+0x24>

080089a4 <__smakebuf_r>:
 80089a4:	898b      	ldrh	r3, [r1, #12]
 80089a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80089a8:	079d      	lsls	r5, r3, #30
 80089aa:	4606      	mov	r6, r0
 80089ac:	460c      	mov	r4, r1
 80089ae:	d507      	bpl.n	80089c0 <__smakebuf_r+0x1c>
 80089b0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80089b4:	6023      	str	r3, [r4, #0]
 80089b6:	6123      	str	r3, [r4, #16]
 80089b8:	2301      	movs	r3, #1
 80089ba:	6163      	str	r3, [r4, #20]
 80089bc:	b003      	add	sp, #12
 80089be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089c0:	ab01      	add	r3, sp, #4
 80089c2:	466a      	mov	r2, sp
 80089c4:	f7ff ffc8 	bl	8008958 <__swhatbuf_r>
 80089c8:	9f00      	ldr	r7, [sp, #0]
 80089ca:	4605      	mov	r5, r0
 80089cc:	4639      	mov	r1, r7
 80089ce:	4630      	mov	r0, r6
 80089d0:	f7ff fbbc 	bl	800814c <_malloc_r>
 80089d4:	b948      	cbnz	r0, 80089ea <__smakebuf_r+0x46>
 80089d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089da:	059a      	lsls	r2, r3, #22
 80089dc:	d4ee      	bmi.n	80089bc <__smakebuf_r+0x18>
 80089de:	f023 0303 	bic.w	r3, r3, #3
 80089e2:	f043 0302 	orr.w	r3, r3, #2
 80089e6:	81a3      	strh	r3, [r4, #12]
 80089e8:	e7e2      	b.n	80089b0 <__smakebuf_r+0xc>
 80089ea:	89a3      	ldrh	r3, [r4, #12]
 80089ec:	6020      	str	r0, [r4, #0]
 80089ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089f2:	81a3      	strh	r3, [r4, #12]
 80089f4:	9b01      	ldr	r3, [sp, #4]
 80089f6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80089fa:	b15b      	cbz	r3, 8008a14 <__smakebuf_r+0x70>
 80089fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a00:	4630      	mov	r0, r6
 8008a02:	f000 f81d 	bl	8008a40 <_isatty_r>
 8008a06:	b128      	cbz	r0, 8008a14 <__smakebuf_r+0x70>
 8008a08:	89a3      	ldrh	r3, [r4, #12]
 8008a0a:	f023 0303 	bic.w	r3, r3, #3
 8008a0e:	f043 0301 	orr.w	r3, r3, #1
 8008a12:	81a3      	strh	r3, [r4, #12]
 8008a14:	89a3      	ldrh	r3, [r4, #12]
 8008a16:	431d      	orrs	r5, r3
 8008a18:	81a5      	strh	r5, [r4, #12]
 8008a1a:	e7cf      	b.n	80089bc <__smakebuf_r+0x18>

08008a1c <_fstat_r>:
 8008a1c:	b538      	push	{r3, r4, r5, lr}
 8008a1e:	4d07      	ldr	r5, [pc, #28]	@ (8008a3c <_fstat_r+0x20>)
 8008a20:	2300      	movs	r3, #0
 8008a22:	4604      	mov	r4, r0
 8008a24:	4608      	mov	r0, r1
 8008a26:	4611      	mov	r1, r2
 8008a28:	602b      	str	r3, [r5, #0]
 8008a2a:	f7f8 fb28 	bl	800107e <_fstat>
 8008a2e:	1c43      	adds	r3, r0, #1
 8008a30:	d102      	bne.n	8008a38 <_fstat_r+0x1c>
 8008a32:	682b      	ldr	r3, [r5, #0]
 8008a34:	b103      	cbz	r3, 8008a38 <_fstat_r+0x1c>
 8008a36:	6023      	str	r3, [r4, #0]
 8008a38:	bd38      	pop	{r3, r4, r5, pc}
 8008a3a:	bf00      	nop
 8008a3c:	24000284 	.word	0x24000284

08008a40 <_isatty_r>:
 8008a40:	b538      	push	{r3, r4, r5, lr}
 8008a42:	4d06      	ldr	r5, [pc, #24]	@ (8008a5c <_isatty_r+0x1c>)
 8008a44:	2300      	movs	r3, #0
 8008a46:	4604      	mov	r4, r0
 8008a48:	4608      	mov	r0, r1
 8008a4a:	602b      	str	r3, [r5, #0]
 8008a4c:	f7f8 fb27 	bl	800109e <_isatty>
 8008a50:	1c43      	adds	r3, r0, #1
 8008a52:	d102      	bne.n	8008a5a <_isatty_r+0x1a>
 8008a54:	682b      	ldr	r3, [r5, #0]
 8008a56:	b103      	cbz	r3, 8008a5a <_isatty_r+0x1a>
 8008a58:	6023      	str	r3, [r4, #0]
 8008a5a:	bd38      	pop	{r3, r4, r5, pc}
 8008a5c:	24000284 	.word	0x24000284

08008a60 <_sbrk_r>:
 8008a60:	b538      	push	{r3, r4, r5, lr}
 8008a62:	4d06      	ldr	r5, [pc, #24]	@ (8008a7c <_sbrk_r+0x1c>)
 8008a64:	2300      	movs	r3, #0
 8008a66:	4604      	mov	r4, r0
 8008a68:	4608      	mov	r0, r1
 8008a6a:	602b      	str	r3, [r5, #0]
 8008a6c:	f7f8 fb30 	bl	80010d0 <_sbrk>
 8008a70:	1c43      	adds	r3, r0, #1
 8008a72:	d102      	bne.n	8008a7a <_sbrk_r+0x1a>
 8008a74:	682b      	ldr	r3, [r5, #0]
 8008a76:	b103      	cbz	r3, 8008a7a <_sbrk_r+0x1a>
 8008a78:	6023      	str	r3, [r4, #0]
 8008a7a:	bd38      	pop	{r3, r4, r5, pc}
 8008a7c:	24000284 	.word	0x24000284

08008a80 <_init>:
 8008a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a82:	bf00      	nop
 8008a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a86:	bc08      	pop	{r3}
 8008a88:	469e      	mov	lr, r3
 8008a8a:	4770      	bx	lr

08008a8c <_fini>:
 8008a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a8e:	bf00      	nop
 8008a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a92:	bc08      	pop	{r3}
 8008a94:	469e      	mov	lr, r3
 8008a96:	4770      	bx	lr
