
6.WWDG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f10  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080061a8  080061a8  000071a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006208  08006208  00007208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006210  08006210  00007210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08006214  08006214  00007214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  24000000  08006218  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000218  2400006c  08006284  0000806c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000284  08006284  00008284  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000118bd  00000000  00000000  0000809a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000299a  00000000  00000000  00019957  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000c08  00000000  00000000  0001c2f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000090d  00000000  00000000  0001cf00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003874a  00000000  00000000  0001d80d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00015139  00000000  00000000  00055f57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015bc04  00000000  00000000  0006b090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001c6c94  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003510  00000000  00000000  001c6cd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005a  00000000  00000000  001ca1e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2400006c 	.word	0x2400006c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08006190 	.word	0x08006190

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000070 	.word	0x24000070
 80002d4:	08006190 	.word	0x08006190

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b988 	b.w	8000600 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	468e      	mov	lr, r1
 8000310:	4604      	mov	r4, r0
 8000312:	4688      	mov	r8, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d962      	bls.n	80003e4 <__udivmoddi4+0xdc>
 800031e:	fab2 f682 	clz	r6, r2
 8000322:	b14e      	cbz	r6, 8000338 <__udivmoddi4+0x30>
 8000324:	f1c6 0320 	rsb	r3, r6, #32
 8000328:	fa01 f806 	lsl.w	r8, r1, r6
 800032c:	fa20 f303 	lsr.w	r3, r0, r3
 8000330:	40b7      	lsls	r7, r6
 8000332:	ea43 0808 	orr.w	r8, r3, r8
 8000336:	40b4      	lsls	r4, r6
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	fbb8 f1fe 	udiv	r1, r8, lr
 8000344:	0c23      	lsrs	r3, r4, #16
 8000346:	fb0e 8811 	mls	r8, lr, r1, r8
 800034a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034e:	fb01 f20c 	mul.w	r2, r1, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d909      	bls.n	800036a <__udivmoddi4+0x62>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f101 30ff 	add.w	r0, r1, #4294967295
 800035c:	f080 80ea 	bcs.w	8000534 <__udivmoddi4+0x22c>
 8000360:	429a      	cmp	r2, r3
 8000362:	f240 80e7 	bls.w	8000534 <__udivmoddi4+0x22c>
 8000366:	3902      	subs	r1, #2
 8000368:	443b      	add	r3, r7
 800036a:	1a9a      	subs	r2, r3, r2
 800036c:	b2a3      	uxth	r3, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800037a:	fb00 fc0c 	mul.w	ip, r0, ip
 800037e:	459c      	cmp	ip, r3
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x8e>
 8000382:	18fb      	adds	r3, r7, r3
 8000384:	f100 32ff 	add.w	r2, r0, #4294967295
 8000388:	f080 80d6 	bcs.w	8000538 <__udivmoddi4+0x230>
 800038c:	459c      	cmp	ip, r3
 800038e:	f240 80d3 	bls.w	8000538 <__udivmoddi4+0x230>
 8000392:	443b      	add	r3, r7
 8000394:	3802      	subs	r0, #2
 8000396:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039a:	eba3 030c 	sub.w	r3, r3, ip
 800039e:	2100      	movs	r1, #0
 80003a0:	b11d      	cbz	r5, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40f3      	lsrs	r3, r6
 80003a4:	2200      	movs	r2, #0
 80003a6:	e9c5 3200 	strd	r3, r2, [r5]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d905      	bls.n	80003be <__udivmoddi4+0xb6>
 80003b2:	b10d      	cbz	r5, 80003b8 <__udivmoddi4+0xb0>
 80003b4:	e9c5 0100 	strd	r0, r1, [r5]
 80003b8:	2100      	movs	r1, #0
 80003ba:	4608      	mov	r0, r1
 80003bc:	e7f5      	b.n	80003aa <__udivmoddi4+0xa2>
 80003be:	fab3 f183 	clz	r1, r3
 80003c2:	2900      	cmp	r1, #0
 80003c4:	d146      	bne.n	8000454 <__udivmoddi4+0x14c>
 80003c6:	4573      	cmp	r3, lr
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xc8>
 80003ca:	4282      	cmp	r2, r0
 80003cc:	f200 8105 	bhi.w	80005da <__udivmoddi4+0x2d2>
 80003d0:	1a84      	subs	r4, r0, r2
 80003d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	4690      	mov	r8, r2
 80003da:	2d00      	cmp	r5, #0
 80003dc:	d0e5      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003de:	e9c5 4800 	strd	r4, r8, [r5]
 80003e2:	e7e2      	b.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	2a00      	cmp	r2, #0
 80003e6:	f000 8090 	beq.w	800050a <__udivmoddi4+0x202>
 80003ea:	fab2 f682 	clz	r6, r2
 80003ee:	2e00      	cmp	r6, #0
 80003f0:	f040 80a4 	bne.w	800053c <__udivmoddi4+0x234>
 80003f4:	1a8a      	subs	r2, r1, r2
 80003f6:	0c03      	lsrs	r3, r0, #16
 80003f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fc:	b280      	uxth	r0, r0
 80003fe:	b2bc      	uxth	r4, r7
 8000400:	2101      	movs	r1, #1
 8000402:	fbb2 fcfe 	udiv	ip, r2, lr
 8000406:	fb0e 221c 	mls	r2, lr, ip, r2
 800040a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800040e:	fb04 f20c 	mul.w	r2, r4, ip
 8000412:	429a      	cmp	r2, r3
 8000414:	d907      	bls.n	8000426 <__udivmoddi4+0x11e>
 8000416:	18fb      	adds	r3, r7, r3
 8000418:	f10c 38ff 	add.w	r8, ip, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x11c>
 800041e:	429a      	cmp	r2, r3
 8000420:	f200 80e0 	bhi.w	80005e4 <__udivmoddi4+0x2dc>
 8000424:	46c4      	mov	ip, r8
 8000426:	1a9b      	subs	r3, r3, r2
 8000428:	fbb3 f2fe 	udiv	r2, r3, lr
 800042c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000430:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000434:	fb02 f404 	mul.w	r4, r2, r4
 8000438:	429c      	cmp	r4, r3
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x144>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x142>
 8000444:	429c      	cmp	r4, r3
 8000446:	f200 80ca 	bhi.w	80005de <__udivmoddi4+0x2d6>
 800044a:	4602      	mov	r2, r0
 800044c:	1b1b      	subs	r3, r3, r4
 800044e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000452:	e7a5      	b.n	80003a0 <__udivmoddi4+0x98>
 8000454:	f1c1 0620 	rsb	r6, r1, #32
 8000458:	408b      	lsls	r3, r1
 800045a:	fa22 f706 	lsr.w	r7, r2, r6
 800045e:	431f      	orrs	r7, r3
 8000460:	fa0e f401 	lsl.w	r4, lr, r1
 8000464:	fa20 f306 	lsr.w	r3, r0, r6
 8000468:	fa2e fe06 	lsr.w	lr, lr, r6
 800046c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000470:	4323      	orrs	r3, r4
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	fa1f fc87 	uxth.w	ip, r7
 800047a:	fbbe f0f9 	udiv	r0, lr, r9
 800047e:	0c1c      	lsrs	r4, r3, #16
 8000480:	fb09 ee10 	mls	lr, r9, r0, lr
 8000484:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000488:	fb00 fe0c 	mul.w	lr, r0, ip
 800048c:	45a6      	cmp	lr, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	d909      	bls.n	80004a8 <__udivmoddi4+0x1a0>
 8000494:	193c      	adds	r4, r7, r4
 8000496:	f100 3aff 	add.w	sl, r0, #4294967295
 800049a:	f080 809c 	bcs.w	80005d6 <__udivmoddi4+0x2ce>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f240 8099 	bls.w	80005d6 <__udivmoddi4+0x2ce>
 80004a4:	3802      	subs	r0, #2
 80004a6:	443c      	add	r4, r7
 80004a8:	eba4 040e 	sub.w	r4, r4, lr
 80004ac:	fa1f fe83 	uxth.w	lr, r3
 80004b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b4:	fb09 4413 	mls	r4, r9, r3, r4
 80004b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c0:	45a4      	cmp	ip, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x1ce>
 80004c4:	193c      	adds	r4, r7, r4
 80004c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80004ca:	f080 8082 	bcs.w	80005d2 <__udivmoddi4+0x2ca>
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d97f      	bls.n	80005d2 <__udivmoddi4+0x2ca>
 80004d2:	3b02      	subs	r3, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	fba0 ec02 	umull	lr, ip, r0, r2
 80004e2:	4564      	cmp	r4, ip
 80004e4:	4673      	mov	r3, lr
 80004e6:	46e1      	mov	r9, ip
 80004e8:	d362      	bcc.n	80005b0 <__udivmoddi4+0x2a8>
 80004ea:	d05f      	beq.n	80005ac <__udivmoddi4+0x2a4>
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x1fe>
 80004ee:	ebb8 0203 	subs.w	r2, r8, r3
 80004f2:	eb64 0409 	sbc.w	r4, r4, r9
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	431e      	orrs	r6, r3
 8000500:	40cc      	lsrs	r4, r1
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e74f      	b.n	80003aa <__udivmoddi4+0xa2>
 800050a:	fbb1 fcf2 	udiv	ip, r1, r2
 800050e:	0c01      	lsrs	r1, r0, #16
 8000510:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000514:	b280      	uxth	r0, r0
 8000516:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800051a:	463b      	mov	r3, r7
 800051c:	4638      	mov	r0, r7
 800051e:	463c      	mov	r4, r7
 8000520:	46b8      	mov	r8, r7
 8000522:	46be      	mov	lr, r7
 8000524:	2620      	movs	r6, #32
 8000526:	fbb1 f1f7 	udiv	r1, r1, r7
 800052a:	eba2 0208 	sub.w	r2, r2, r8
 800052e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000532:	e766      	b.n	8000402 <__udivmoddi4+0xfa>
 8000534:	4601      	mov	r1, r0
 8000536:	e718      	b.n	800036a <__udivmoddi4+0x62>
 8000538:	4610      	mov	r0, r2
 800053a:	e72c      	b.n	8000396 <__udivmoddi4+0x8e>
 800053c:	f1c6 0220 	rsb	r2, r6, #32
 8000540:	fa2e f302 	lsr.w	r3, lr, r2
 8000544:	40b7      	lsls	r7, r6
 8000546:	40b1      	lsls	r1, r6
 8000548:	fa20 f202 	lsr.w	r2, r0, r2
 800054c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000550:	430a      	orrs	r2, r1
 8000552:	fbb3 f8fe 	udiv	r8, r3, lr
 8000556:	b2bc      	uxth	r4, r7
 8000558:	fb0e 3318 	mls	r3, lr, r8, r3
 800055c:	0c11      	lsrs	r1, r2, #16
 800055e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000562:	fb08 f904 	mul.w	r9, r8, r4
 8000566:	40b0      	lsls	r0, r6
 8000568:	4589      	cmp	r9, r1
 800056a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800056e:	b280      	uxth	r0, r0
 8000570:	d93e      	bls.n	80005f0 <__udivmoddi4+0x2e8>
 8000572:	1879      	adds	r1, r7, r1
 8000574:	f108 3cff 	add.w	ip, r8, #4294967295
 8000578:	d201      	bcs.n	800057e <__udivmoddi4+0x276>
 800057a:	4589      	cmp	r9, r1
 800057c:	d81f      	bhi.n	80005be <__udivmoddi4+0x2b6>
 800057e:	eba1 0109 	sub.w	r1, r1, r9
 8000582:	fbb1 f9fe 	udiv	r9, r1, lr
 8000586:	fb09 f804 	mul.w	r8, r9, r4
 800058a:	fb0e 1119 	mls	r1, lr, r9, r1
 800058e:	b292      	uxth	r2, r2
 8000590:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000594:	4542      	cmp	r2, r8
 8000596:	d229      	bcs.n	80005ec <__udivmoddi4+0x2e4>
 8000598:	18ba      	adds	r2, r7, r2
 800059a:	f109 31ff 	add.w	r1, r9, #4294967295
 800059e:	d2c4      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a0:	4542      	cmp	r2, r8
 80005a2:	d2c2      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a4:	f1a9 0102 	sub.w	r1, r9, #2
 80005a8:	443a      	add	r2, r7
 80005aa:	e7be      	b.n	800052a <__udivmoddi4+0x222>
 80005ac:	45f0      	cmp	r8, lr
 80005ae:	d29d      	bcs.n	80004ec <__udivmoddi4+0x1e4>
 80005b0:	ebbe 0302 	subs.w	r3, lr, r2
 80005b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005b8:	3801      	subs	r0, #1
 80005ba:	46e1      	mov	r9, ip
 80005bc:	e796      	b.n	80004ec <__udivmoddi4+0x1e4>
 80005be:	eba7 0909 	sub.w	r9, r7, r9
 80005c2:	4449      	add	r1, r9
 80005c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80005c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80005cc:	fb09 f804 	mul.w	r8, r9, r4
 80005d0:	e7db      	b.n	800058a <__udivmoddi4+0x282>
 80005d2:	4673      	mov	r3, lr
 80005d4:	e77f      	b.n	80004d6 <__udivmoddi4+0x1ce>
 80005d6:	4650      	mov	r0, sl
 80005d8:	e766      	b.n	80004a8 <__udivmoddi4+0x1a0>
 80005da:	4608      	mov	r0, r1
 80005dc:	e6fd      	b.n	80003da <__udivmoddi4+0xd2>
 80005de:	443b      	add	r3, r7
 80005e0:	3a02      	subs	r2, #2
 80005e2:	e733      	b.n	800044c <__udivmoddi4+0x144>
 80005e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e8:	443b      	add	r3, r7
 80005ea:	e71c      	b.n	8000426 <__udivmoddi4+0x11e>
 80005ec:	4649      	mov	r1, r9
 80005ee:	e79c      	b.n	800052a <__udivmoddi4+0x222>
 80005f0:	eba1 0109 	sub.w	r1, r1, r9
 80005f4:	46c4      	mov	ip, r8
 80005f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80005fa:	fb09 f804 	mul.w	r8, r9, r4
 80005fe:	e7c4      	b.n	800058a <__udivmoddi4+0x282>

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <MX_BEEP_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_BEEP_GPIO_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b086      	sub	sp, #24
 8000608:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
 8000616:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000618:	4b12      	ldr	r3, [pc, #72]	@ (8000664 <MX_BEEP_GPIO_Init+0x60>)
 800061a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800061e:	4a11      	ldr	r2, [pc, #68]	@ (8000664 <MX_BEEP_GPIO_Init+0x60>)
 8000620:	f043 0310 	orr.w	r3, r3, #16
 8000624:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000628:	4b0e      	ldr	r3, [pc, #56]	@ (8000664 <MX_BEEP_GPIO_Init+0x60>)
 800062a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800062e:	f003 0310 	and.w	r3, r3, #16
 8000632:	603b      	str	r3, [r7, #0]
 8000634:	683b      	ldr	r3, [r7, #0]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BEEP_GPIO_Port, BEEP_Pin, GPIO_PIN_RESET);
 8000636:	2200      	movs	r2, #0
 8000638:	2110      	movs	r1, #16
 800063a:	480b      	ldr	r0, [pc, #44]	@ (8000668 <MX_BEEP_GPIO_Init+0x64>)
 800063c:	f001 f8aa 	bl	8001794 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BEEP_Pin */
  GPIO_InitStruct.Pin = BEEP_Pin;
 8000640:	2310      	movs	r3, #16
 8000642:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000644:	2301      	movs	r3, #1
 8000646:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000648:	2300      	movs	r3, #0
 800064a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064c:	2300      	movs	r3, #0
 800064e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000650:	1d3b      	adds	r3, r7, #4
 8000652:	4619      	mov	r1, r3
 8000654:	4804      	ldr	r0, [pc, #16]	@ (8000668 <MX_BEEP_GPIO_Init+0x64>)
 8000656:	f000 feed 	bl	8001434 <HAL_GPIO_Init>
}
 800065a:	bf00      	nop
 800065c:	3718      	adds	r7, #24
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	58024400 	.word	0x58024400
 8000668:	58021000 	.word	0x58021000

0800066c <MX_KEY_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_KEY_GPIO_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b086      	sub	sp, #24
 8000670:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000672:	1d3b      	adds	r3, r7, #4
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000680:	4b14      	ldr	r3, [pc, #80]	@ (80006d4 <MX_KEY_GPIO_Init+0x68>)
 8000682:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000686:	4a13      	ldr	r2, [pc, #76]	@ (80006d4 <MX_KEY_GPIO_Init+0x68>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000690:	4b10      	ldr	r3, [pc, #64]	@ (80006d4 <MX_KEY_GPIO_Init+0x68>)
 8000692:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	603b      	str	r3, [r7, #0]
 800069c:	683b      	ldr	r3, [r7, #0]
  /*Configure GPIO pin : WK_UP_Pin */
  GPIO_InitStruct.Pin = WK_UP_Pin;
 800069e:	2301      	movs	r3, #1
 80006a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006a2:	2300      	movs	r3, #0
 80006a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006a6:	2302      	movs	r3, #2
 80006a8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(WK_UP_GPIO_Port, &GPIO_InitStruct);
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	4619      	mov	r1, r3
 80006ae:	480a      	ldr	r0, [pc, #40]	@ (80006d8 <MX_KEY_GPIO_Init+0x6c>)
 80006b0:	f000 fec0 	bl	8001434 <HAL_GPIO_Init>
  /*Configure GPIO pins : KEY0_Pin KEY1_Pin */
  GPIO_InitStruct.Pin = KEY0_Pin|KEY1_Pin;
 80006b4:	f248 0302 	movw	r3, #32770	@ 0x8002
 80006b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ba:	2300      	movs	r3, #0
 80006bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006be:	2301      	movs	r3, #1
 80006c0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	4619      	mov	r1, r3
 80006c6:	4804      	ldr	r0, [pc, #16]	@ (80006d8 <MX_KEY_GPIO_Init+0x6c>)
 80006c8:	f000 feb4 	bl	8001434 <HAL_GPIO_Init>
}
 80006cc:	bf00      	nop
 80006ce:	3718      	adds	r7, #24
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	58024400 	.word	0x58024400
 80006d8:	58020000 	.word	0x58020000

080006dc <MX_LED_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_LED_GPIO_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b088      	sub	sp, #32
 80006e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e2:	f107 030c 	add.w	r3, r7, #12
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
 80006f0:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006f2:	4b24      	ldr	r3, [pc, #144]	@ (8000784 <MX_LED_GPIO_Init+0xa8>)
 80006f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006f8:	4a22      	ldr	r2, [pc, #136]	@ (8000784 <MX_LED_GPIO_Init+0xa8>)
 80006fa:	f043 0310 	orr.w	r3, r3, #16
 80006fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000702:	4b20      	ldr	r3, [pc, #128]	@ (8000784 <MX_LED_GPIO_Init+0xa8>)
 8000704:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000708:	f003 0310 	and.w	r3, r3, #16
 800070c:	60bb      	str	r3, [r7, #8]
 800070e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000710:	4b1c      	ldr	r3, [pc, #112]	@ (8000784 <MX_LED_GPIO_Init+0xa8>)
 8000712:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000716:	4a1b      	ldr	r2, [pc, #108]	@ (8000784 <MX_LED_GPIO_Init+0xa8>)
 8000718:	f043 0302 	orr.w	r3, r3, #2
 800071c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000720:	4b18      	ldr	r3, [pc, #96]	@ (8000784 <MX_LED_GPIO_Init+0xa8>)
 8000722:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000726:	f003 0302 	and.w	r3, r3, #2
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_Pin|LED2_Pin, GPIO_PIN_SET);
 800072e:	2201      	movs	r2, #1
 8000730:	2160      	movs	r1, #96	@ 0x60
 8000732:	4815      	ldr	r0, [pc, #84]	@ (8000788 <MX_LED_GPIO_Init+0xac>)
 8000734:	f001 f82e 	bl	8001794 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 8000738:	2201      	movs	r2, #1
 800073a:	2110      	movs	r1, #16
 800073c:	4813      	ldr	r0, [pc, #76]	@ (800078c <MX_LED_GPIO_Init+0xb0>)
 800073e:	f001 f829 	bl	8001794 <HAL_GPIO_WritePin>
  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000742:	2360      	movs	r3, #96	@ 0x60
 8000744:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000746:	2301      	movs	r3, #1
 8000748:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074e:	2300      	movs	r3, #0
 8000750:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000752:	f107 030c 	add.w	r3, r7, #12
 8000756:	4619      	mov	r1, r3
 8000758:	480b      	ldr	r0, [pc, #44]	@ (8000788 <MX_LED_GPIO_Init+0xac>)
 800075a:	f000 fe6b 	bl	8001434 <HAL_GPIO_Init>
  /*Configure GPIO pin : LED0_Pin */
  GPIO_InitStruct.Pin = LED0_Pin;
 800075e:	2310      	movs	r3, #16
 8000760:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000762:	2301      	movs	r3, #1
 8000764:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076a:	2300      	movs	r3, #0
 800076c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 800076e:	f107 030c 	add.w	r3, r7, #12
 8000772:	4619      	mov	r1, r3
 8000774:	4805      	ldr	r0, [pc, #20]	@ (800078c <MX_LED_GPIO_Init+0xb0>)
 8000776:	f000 fe5d 	bl	8001434 <HAL_GPIO_Init>
}
 800077a:	bf00      	nop
 800077c:	3720      	adds	r7, #32
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	58024400 	.word	0x58024400
 8000788:	58021000 	.word	0x58021000
 800078c:	58020400 	.word	0x58020400

08000790 <bsp_init>:
#include "bsp_init.h"

void bsp_init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
	MX_LED_GPIO_Init();
 8000794:	f7ff ffa2 	bl	80006dc <MX_LED_GPIO_Init>
	MX_BEEP_GPIO_Init();
 8000798:	f7ff ff34 	bl	8000604 <MX_BEEP_GPIO_Init>
	MX_KEY_GPIO_Init();
 800079c:	f7ff ff66 	bl	800066c <MX_KEY_GPIO_Init>
	// MX_EXTI_GPIO_Init();
	MX_USART1_UART_Init();
 80007a0:	f000 faae 	bl	8000d00 <MX_USART1_UART_Init>
	// MX_IWDG1_Init(); // 溢出时间约1s
}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80007ac:	f000 f89a 	bl	80008e4 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b0:	f000 fbf6 	bl	8000fa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b4:	f000 f81a 	bl	80007ec <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  bsp_init();
 80007b8:	f7ff ffea 	bl	8000790 <bsp_init>
  // 点亮 LED0 延时 300ms，指示系统被复位
  HAL_GPIO_WritePin(LED_BLUE_Port, LED_BLUE_Pin, RESET);
 80007bc:	2200      	movs	r2, #0
 80007be:	2110      	movs	r1, #16
 80007c0:	4809      	ldr	r0, [pc, #36]	@ (80007e8 <main+0x40>)
 80007c2:	f000 ffe7 	bl	8001794 <HAL_GPIO_WritePin>
  HAL_Delay(300);
 80007c6:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80007ca:	f000 fc7b 	bl	80010c4 <HAL_Delay>
  MX_WWDG1_Init(0x7F, 0x5F, WWDG_PRESCALER_16); // 溢出时间约34.95ms
 80007ce:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80007d2:	215f      	movs	r1, #95	@ 0x5f
 80007d4:	207f      	movs	r0, #127	@ 0x7f
 80007d6:	f000 fb63 	bl	8000ea0 <MX_WWDG1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_WritePin(LED_BLUE_Port, LED_BLUE_Pin, SET); // 灭
 80007da:	2201      	movs	r2, #1
 80007dc:	2110      	movs	r1, #16
 80007de:	4802      	ldr	r0, [pc, #8]	@ (80007e8 <main+0x40>)
 80007e0:	f000 ffd8 	bl	8001794 <HAL_GPIO_WritePin>
 80007e4:	e7f9      	b.n	80007da <main+0x32>
 80007e6:	bf00      	nop
 80007e8:	58020400 	.word	0x58020400

080007ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b09c      	sub	sp, #112	@ 0x70
 80007f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007f6:	224c      	movs	r2, #76	@ 0x4c
 80007f8:	2100      	movs	r1, #0
 80007fa:	4618      	mov	r0, r3
 80007fc:	f005 fa14 	bl	8005c28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	2220      	movs	r2, #32
 8000804:	2100      	movs	r1, #0
 8000806:	4618      	mov	r0, r3
 8000808:	f005 fa0e 	bl	8005c28 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800080c:	2002      	movs	r0, #2
 800080e:	f000 fff5 	bl	80017fc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000812:	2300      	movs	r3, #0
 8000814:	603b      	str	r3, [r7, #0]
 8000816:	4b31      	ldr	r3, [pc, #196]	@ (80008dc <SystemClock_Config+0xf0>)
 8000818:	699b      	ldr	r3, [r3, #24]
 800081a:	4a30      	ldr	r2, [pc, #192]	@ (80008dc <SystemClock_Config+0xf0>)
 800081c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000820:	6193      	str	r3, [r2, #24]
 8000822:	4b2e      	ldr	r3, [pc, #184]	@ (80008dc <SystemClock_Config+0xf0>)
 8000824:	699b      	ldr	r3, [r3, #24]
 8000826:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800082a:	603b      	str	r3, [r7, #0]
 800082c:	4b2c      	ldr	r3, [pc, #176]	@ (80008e0 <SystemClock_Config+0xf4>)
 800082e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000830:	4a2b      	ldr	r2, [pc, #172]	@ (80008e0 <SystemClock_Config+0xf4>)
 8000832:	f043 0301 	orr.w	r3, r3, #1
 8000836:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000838:	4b29      	ldr	r3, [pc, #164]	@ (80008e0 <SystemClock_Config+0xf4>)
 800083a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800083c:	f003 0301 	and.w	r3, r3, #1
 8000840:	603b      	str	r3, [r7, #0]
 8000842:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000844:	bf00      	nop
 8000846:	4b25      	ldr	r3, [pc, #148]	@ (80008dc <SystemClock_Config+0xf0>)
 8000848:	699b      	ldr	r3, [r3, #24]
 800084a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800084e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000852:	d1f8      	bne.n	8000846 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000854:	2309      	movs	r3, #9
 8000856:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000858:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800085c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800085e:	2301      	movs	r3, #1
 8000860:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000862:	2302      	movs	r3, #2
 8000864:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000866:	2302      	movs	r3, #2
 8000868:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 800086a:	2302      	movs	r3, #2
 800086c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 800086e:	23f0      	movs	r3, #240	@ 0xf0
 8000870:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000872:	2302      	movs	r3, #2
 8000874:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000876:	2302      	movs	r3, #2
 8000878:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800087a:	2302      	movs	r3, #2
 800087c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800087e:	2308      	movs	r3, #8
 8000880:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000882:	2300      	movs	r3, #0
 8000884:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000886:	2300      	movs	r3, #0
 8000888:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800088a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800088e:	4618      	mov	r0, r3
 8000890:	f000 ffee 	bl	8001870 <HAL_RCC_OscConfig>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800089a:	f000 f84f 	bl	800093c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800089e:	233f      	movs	r3, #63	@ 0x3f
 80008a0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008a2:	2303      	movs	r3, #3
 80008a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008a6:	2300      	movs	r3, #0
 80008a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80008aa:	2308      	movs	r3, #8
 80008ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008ae:	2340      	movs	r3, #64	@ 0x40
 80008b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008b2:	2340      	movs	r3, #64	@ 0x40
 80008b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008ba:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008bc:	2340      	movs	r3, #64	@ 0x40
 80008be:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	2104      	movs	r1, #4
 80008c4:	4618      	mov	r0, r3
 80008c6:	f001 fc2d 	bl	8002124 <HAL_RCC_ClockConfig>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80008d0:	f000 f834 	bl	800093c <Error_Handler>
  }
}
 80008d4:	bf00      	nop
 80008d6:	3770      	adds	r7, #112	@ 0x70
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	58024800 	.word	0x58024800
 80008e0:	58000400 	.word	0x58000400

080008e4 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80008ea:	463b      	mov	r3, r7
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80008f6:	f000 fd25 	bl	8001344 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80008fa:	2301      	movs	r3, #1
 80008fc:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80008fe:	2300      	movs	r3, #0
 8000900:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000902:	2300      	movs	r3, #0
 8000904:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000906:	231f      	movs	r3, #31
 8000908:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800090a:	2387      	movs	r3, #135	@ 0x87
 800090c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800090e:	2300      	movs	r3, #0
 8000910:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000912:	2300      	movs	r3, #0
 8000914:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000916:	2301      	movs	r3, #1
 8000918:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800091a:	2301      	movs	r3, #1
 800091c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800091e:	2300      	movs	r3, #0
 8000920:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000922:	2300      	movs	r3, #0
 8000924:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000926:	463b      	mov	r3, r7
 8000928:	4618      	mov	r0, r3
 800092a:	f000 fd43 	bl	80013b4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800092e:	2004      	movs	r0, #4
 8000930:	f000 fd20 	bl	8001374 <HAL_MPU_Enable>

}
 8000934:	bf00      	nop
 8000936:	3710      	adds	r7, #16
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}

0800093c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000940:	b672      	cpsid	i
}
 8000942:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000944:	bf00      	nop
 8000946:	e7fd      	b.n	8000944 <Error_Handler+0x8>

08000948 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094e:	4b0a      	ldr	r3, [pc, #40]	@ (8000978 <HAL_MspInit+0x30>)
 8000950:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000954:	4a08      	ldr	r2, [pc, #32]	@ (8000978 <HAL_MspInit+0x30>)
 8000956:	f043 0302 	orr.w	r3, r3, #2
 800095a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800095e:	4b06      	ldr	r3, [pc, #24]	@ (8000978 <HAL_MspInit+0x30>)
 8000960:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000964:	f003 0302 	and.w	r3, r3, #2
 8000968:	607b      	str	r3, [r7, #4]
 800096a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800096c:	bf00      	nop
 800096e:	370c      	adds	r7, #12
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr
 8000978:	58024400 	.word	0x58024400

0800097c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000980:	bf00      	nop
 8000982:	e7fd      	b.n	8000980 <NMI_Handler+0x4>

08000984 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000988:	bf00      	nop
 800098a:	e7fd      	b.n	8000988 <HardFault_Handler+0x4>

0800098c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000990:	bf00      	nop
 8000992:	e7fd      	b.n	8000990 <MemManage_Handler+0x4>

08000994 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000998:	bf00      	nop
 800099a:	e7fd      	b.n	8000998 <BusFault_Handler+0x4>

0800099c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a0:	bf00      	nop
 80009a2:	e7fd      	b.n	80009a0 <UsageFault_Handler+0x4>

080009a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr

080009b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr

080009ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ce:	b580      	push	{r7, lr}
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009d2:	f000 fb57 	bl	8001084 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
	...

080009dc <WWDG_IRQHandler>:

/**
  * @brief This function handles Window watchdog interrupt.
  */
void WWDG_IRQHandler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN WWDG_IRQn 0 */

  /* USER CODE END WWDG_IRQn 0 */
  HAL_WWDG_IRQHandler(&hwwdg1);
 80009e0:	4802      	ldr	r0, [pc, #8]	@ (80009ec <WWDG_IRQHandler+0x10>)
 80009e2:	f004 ff09 	bl	80057f8 <HAL_WWDG_IRQHandler>
  /* USER CODE BEGIN WWDG_IRQn 1 */
  /* USER CODE END WWDG_IRQn 1 */
}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	24000120 	.word	0x24000120

080009f0 <HAL_WWDG_EarlyWakeupCallback>:

void HAL_WWDG_EarlyWakeupCallback(WWDG_HandleTypeDef *hwwdg)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  // 在此处添加喂狗代码
  if (hwwdg->Instance == WWDG1)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a08      	ldr	r2, [pc, #32]	@ (8000a20 <HAL_WWDG_EarlyWakeupCallback+0x30>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d109      	bne.n	8000a16 <HAL_WWDG_EarlyWakeupCallback+0x26>
  {
	// 喂狗
	HAL_WWDG_Refresh(hwwdg);
 8000a02:	6878      	ldr	r0, [r7, #4]
 8000a04:	f004 fee8 	bl	80057d8 <HAL_WWDG_Refresh>
	// 点亮 LED0，指示喂狗操作
	HAL_GPIO_TogglePin(LED_RED_Port, LED_RED_Pin);
 8000a08:	2140      	movs	r1, #64	@ 0x40
 8000a0a:	4806      	ldr	r0, [pc, #24]	@ (8000a24 <HAL_WWDG_EarlyWakeupCallback+0x34>)
 8000a0c:	f000 fedb 	bl	80017c6 <HAL_GPIO_TogglePin>
	printf("WWDG Early Wakeup Interrupt: Dog fed!\n");
 8000a10:	4805      	ldr	r0, [pc, #20]	@ (8000a28 <HAL_WWDG_EarlyWakeupCallback+0x38>)
 8000a12:	f005 f829 	bl	8005a68 <puts>
  }
}
 8000a16:	bf00      	nop
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	50003000 	.word	0x50003000
 8000a24:	58021000 	.word	0x58021000
 8000a28:	080061a8 	.word	0x080061a8

08000a2c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr

08000a3a <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	af00      	add	r7, sp, #0
}
 8000a3e:	bf00      	nop
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr

08000a48 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b086      	sub	sp, #24
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	60f8      	str	r0, [r7, #12]
 8000a50:	60b9      	str	r1, [r7, #8]
 8000a52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a54:	2300      	movs	r3, #0
 8000a56:	617b      	str	r3, [r7, #20]
 8000a58:	e00a      	b.n	8000a70 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a5a:	f3af 8000 	nop.w
 8000a5e:	4601      	mov	r1, r0
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	1c5a      	adds	r2, r3, #1
 8000a64:	60ba      	str	r2, [r7, #8]
 8000a66:	b2ca      	uxtb	r2, r1
 8000a68:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	617b      	str	r3, [r7, #20]
 8000a70:	697a      	ldr	r2, [r7, #20]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	429a      	cmp	r2, r3
 8000a76:	dbf0      	blt.n	8000a5a <_read+0x12>
  }

  return len;
 8000a78:	687b      	ldr	r3, [r7, #4]
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3718      	adds	r7, #24
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b086      	sub	sp, #24
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	60f8      	str	r0, [r7, #12]
 8000a8a:	60b9      	str	r1, [r7, #8]
 8000a8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a8e:	2300      	movs	r3, #0
 8000a90:	617b      	str	r3, [r7, #20]
 8000a92:	e009      	b.n	8000aa8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	1c5a      	adds	r2, r3, #1
 8000a98:	60ba      	str	r2, [r7, #8]
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f000 f9ed 	bl	8000e7c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	617b      	str	r3, [r7, #20]
 8000aa8:	697a      	ldr	r2, [r7, #20]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	429a      	cmp	r2, r3
 8000aae:	dbf1      	blt.n	8000a94 <_write+0x12>
  }
  return len;
 8000ab0:	687b      	ldr	r3, [r7, #4]
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3718      	adds	r7, #24
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <_close>:

int _close(int file)
{
 8000aba:	b480      	push	{r7}
 8000abc:	b083      	sub	sp, #12
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ac2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr

08000ad2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	b083      	sub	sp, #12
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	6078      	str	r0, [r7, #4]
 8000ada:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ae2:	605a      	str	r2, [r3, #4]
  return 0;
 8000ae4:	2300      	movs	r3, #0
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr

08000af2 <_isatty>:

int _isatty(int file)
{
 8000af2:	b480      	push	{r7}
 8000af4:	b083      	sub	sp, #12
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000afa:	2301      	movs	r3, #1
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr

08000b08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b085      	sub	sp, #20
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	60f8      	str	r0, [r7, #12]
 8000b10:	60b9      	str	r1, [r7, #8]
 8000b12:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b14:	2300      	movs	r3, #0
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3714      	adds	r7, #20
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
	...

08000b24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b086      	sub	sp, #24
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b2c:	4a14      	ldr	r2, [pc, #80]	@ (8000b80 <_sbrk+0x5c>)
 8000b2e:	4b15      	ldr	r3, [pc, #84]	@ (8000b84 <_sbrk+0x60>)
 8000b30:	1ad3      	subs	r3, r2, r3
 8000b32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b38:	4b13      	ldr	r3, [pc, #76]	@ (8000b88 <_sbrk+0x64>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d102      	bne.n	8000b46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b40:	4b11      	ldr	r3, [pc, #68]	@ (8000b88 <_sbrk+0x64>)
 8000b42:	4a12      	ldr	r2, [pc, #72]	@ (8000b8c <_sbrk+0x68>)
 8000b44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b46:	4b10      	ldr	r3, [pc, #64]	@ (8000b88 <_sbrk+0x64>)
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	d207      	bcs.n	8000b64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b54:	f005 f8b6 	bl	8005cc4 <__errno>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	220c      	movs	r2, #12
 8000b5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b62:	e009      	b.n	8000b78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b64:	4b08      	ldr	r3, [pc, #32]	@ (8000b88 <_sbrk+0x64>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b6a:	4b07      	ldr	r3, [pc, #28]	@ (8000b88 <_sbrk+0x64>)
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4413      	add	r3, r2
 8000b72:	4a05      	ldr	r2, [pc, #20]	@ (8000b88 <_sbrk+0x64>)
 8000b74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b76:	68fb      	ldr	r3, [r7, #12]
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3718      	adds	r7, #24
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	24080000 	.word	0x24080000
 8000b84:	00000400 	.word	0x00000400
 8000b88:	24000088 	.word	0x24000088
 8000b8c:	24000288 	.word	0x24000288

08000b90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b94:	4b43      	ldr	r3, [pc, #268]	@ (8000ca4 <SystemInit+0x114>)
 8000b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b9a:	4a42      	ldr	r2, [pc, #264]	@ (8000ca4 <SystemInit+0x114>)
 8000b9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ba0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ba4:	4b40      	ldr	r3, [pc, #256]	@ (8000ca8 <SystemInit+0x118>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f003 030f 	and.w	r3, r3, #15
 8000bac:	2b06      	cmp	r3, #6
 8000bae:	d807      	bhi.n	8000bc0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bb0:	4b3d      	ldr	r3, [pc, #244]	@ (8000ca8 <SystemInit+0x118>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f023 030f 	bic.w	r3, r3, #15
 8000bb8:	4a3b      	ldr	r2, [pc, #236]	@ (8000ca8 <SystemInit+0x118>)
 8000bba:	f043 0307 	orr.w	r3, r3, #7
 8000bbe:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000bc0:	4b3a      	ldr	r3, [pc, #232]	@ (8000cac <SystemInit+0x11c>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a39      	ldr	r2, [pc, #228]	@ (8000cac <SystemInit+0x11c>)
 8000bc6:	f043 0301 	orr.w	r3, r3, #1
 8000bca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000bcc:	4b37      	ldr	r3, [pc, #220]	@ (8000cac <SystemInit+0x11c>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000bd2:	4b36      	ldr	r3, [pc, #216]	@ (8000cac <SystemInit+0x11c>)
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	4935      	ldr	r1, [pc, #212]	@ (8000cac <SystemInit+0x11c>)
 8000bd8:	4b35      	ldr	r3, [pc, #212]	@ (8000cb0 <SystemInit+0x120>)
 8000bda:	4013      	ands	r3, r2
 8000bdc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bde:	4b32      	ldr	r3, [pc, #200]	@ (8000ca8 <SystemInit+0x118>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f003 0308 	and.w	r3, r3, #8
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d007      	beq.n	8000bfa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bea:	4b2f      	ldr	r3, [pc, #188]	@ (8000ca8 <SystemInit+0x118>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f023 030f 	bic.w	r3, r3, #15
 8000bf2:	4a2d      	ldr	r2, [pc, #180]	@ (8000ca8 <SystemInit+0x118>)
 8000bf4:	f043 0307 	orr.w	r3, r3, #7
 8000bf8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000bfa:	4b2c      	ldr	r3, [pc, #176]	@ (8000cac <SystemInit+0x11c>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000c00:	4b2a      	ldr	r3, [pc, #168]	@ (8000cac <SystemInit+0x11c>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000c06:	4b29      	ldr	r3, [pc, #164]	@ (8000cac <SystemInit+0x11c>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000c0c:	4b27      	ldr	r3, [pc, #156]	@ (8000cac <SystemInit+0x11c>)
 8000c0e:	4a29      	ldr	r2, [pc, #164]	@ (8000cb4 <SystemInit+0x124>)
 8000c10:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000c12:	4b26      	ldr	r3, [pc, #152]	@ (8000cac <SystemInit+0x11c>)
 8000c14:	4a28      	ldr	r2, [pc, #160]	@ (8000cb8 <SystemInit+0x128>)
 8000c16:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000c18:	4b24      	ldr	r3, [pc, #144]	@ (8000cac <SystemInit+0x11c>)
 8000c1a:	4a28      	ldr	r2, [pc, #160]	@ (8000cbc <SystemInit+0x12c>)
 8000c1c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000c1e:	4b23      	ldr	r3, [pc, #140]	@ (8000cac <SystemInit+0x11c>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000c24:	4b21      	ldr	r3, [pc, #132]	@ (8000cac <SystemInit+0x11c>)
 8000c26:	4a25      	ldr	r2, [pc, #148]	@ (8000cbc <SystemInit+0x12c>)
 8000c28:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000c2a:	4b20      	ldr	r3, [pc, #128]	@ (8000cac <SystemInit+0x11c>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c30:	4b1e      	ldr	r3, [pc, #120]	@ (8000cac <SystemInit+0x11c>)
 8000c32:	4a22      	ldr	r2, [pc, #136]	@ (8000cbc <SystemInit+0x12c>)
 8000c34:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c36:	4b1d      	ldr	r3, [pc, #116]	@ (8000cac <SystemInit+0x11c>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c3c:	4b1b      	ldr	r3, [pc, #108]	@ (8000cac <SystemInit+0x11c>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a1a      	ldr	r2, [pc, #104]	@ (8000cac <SystemInit+0x11c>)
 8000c42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c46:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c48:	4b18      	ldr	r3, [pc, #96]	@ (8000cac <SystemInit+0x11c>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000c4e:	4b1c      	ldr	r3, [pc, #112]	@ (8000cc0 <SystemInit+0x130>)
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	4b1c      	ldr	r3, [pc, #112]	@ (8000cc4 <SystemInit+0x134>)
 8000c54:	4013      	ands	r3, r2
 8000c56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000c5a:	d202      	bcs.n	8000c62 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000c5c:	4b1a      	ldr	r3, [pc, #104]	@ (8000cc8 <SystemInit+0x138>)
 8000c5e:	2201      	movs	r2, #1
 8000c60:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000c62:	4b12      	ldr	r3, [pc, #72]	@ (8000cac <SystemInit+0x11c>)
 8000c64:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000c68:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d113      	bne.n	8000c98 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000c70:	4b0e      	ldr	r3, [pc, #56]	@ (8000cac <SystemInit+0x11c>)
 8000c72:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000c76:	4a0d      	ldr	r2, [pc, #52]	@ (8000cac <SystemInit+0x11c>)
 8000c78:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c7c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000c80:	4b12      	ldr	r3, [pc, #72]	@ (8000ccc <SystemInit+0x13c>)
 8000c82:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000c86:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000c88:	4b08      	ldr	r3, [pc, #32]	@ (8000cac <SystemInit+0x11c>)
 8000c8a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000c8e:	4a07      	ldr	r2, [pc, #28]	@ (8000cac <SystemInit+0x11c>)
 8000c90:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000c94:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	e000ed00 	.word	0xe000ed00
 8000ca8:	52002000 	.word	0x52002000
 8000cac:	58024400 	.word	0x58024400
 8000cb0:	eaf6ed7f 	.word	0xeaf6ed7f
 8000cb4:	02020200 	.word	0x02020200
 8000cb8:	01ff0000 	.word	0x01ff0000
 8000cbc:	01010280 	.word	0x01010280
 8000cc0:	5c001000 	.word	0x5c001000
 8000cc4:	ffff0000 	.word	0xffff0000
 8000cc8:	51008108 	.word	0x51008108
 8000ccc:	52004000 	.word	0x52004000

08000cd0 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000cd4:	4b09      	ldr	r3, [pc, #36]	@ (8000cfc <ExitRun0Mode+0x2c>)
 8000cd6:	68db      	ldr	r3, [r3, #12]
 8000cd8:	4a08      	ldr	r2, [pc, #32]	@ (8000cfc <ExitRun0Mode+0x2c>)
 8000cda:	f043 0302 	orr.w	r3, r3, #2
 8000cde:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000ce0:	bf00      	nop
 8000ce2:	4b06      	ldr	r3, [pc, #24]	@ (8000cfc <ExitRun0Mode+0x2c>)
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d0f9      	beq.n	8000ce2 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000cee:	bf00      	nop
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	58024800 	.word	0x58024800

08000d00 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d04:	4b22      	ldr	r3, [pc, #136]	@ (8000d90 <MX_USART1_UART_Init+0x90>)
 8000d06:	4a23      	ldr	r2, [pc, #140]	@ (8000d94 <MX_USART1_UART_Init+0x94>)
 8000d08:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d0a:	4b21      	ldr	r3, [pc, #132]	@ (8000d90 <MX_USART1_UART_Init+0x90>)
 8000d0c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d10:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d12:	4b1f      	ldr	r3, [pc, #124]	@ (8000d90 <MX_USART1_UART_Init+0x90>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d18:	4b1d      	ldr	r3, [pc, #116]	@ (8000d90 <MX_USART1_UART_Init+0x90>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d1e:	4b1c      	ldr	r3, [pc, #112]	@ (8000d90 <MX_USART1_UART_Init+0x90>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d24:	4b1a      	ldr	r3, [pc, #104]	@ (8000d90 <MX_USART1_UART_Init+0x90>)
 8000d26:	220c      	movs	r2, #12
 8000d28:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d2a:	4b19      	ldr	r3, [pc, #100]	@ (8000d90 <MX_USART1_UART_Init+0x90>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d30:	4b17      	ldr	r3, [pc, #92]	@ (8000d90 <MX_USART1_UART_Init+0x90>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d36:	4b16      	ldr	r3, [pc, #88]	@ (8000d90 <MX_USART1_UART_Init+0x90>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d3c:	4b14      	ldr	r3, [pc, #80]	@ (8000d90 <MX_USART1_UART_Init+0x90>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d42:	4b13      	ldr	r3, [pc, #76]	@ (8000d90 <MX_USART1_UART_Init+0x90>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d48:	4811      	ldr	r0, [pc, #68]	@ (8000d90 <MX_USART1_UART_Init+0x90>)
 8000d4a:	f003 fbb7 	bl	80044bc <HAL_UART_Init>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000d54:	f7ff fdf2 	bl	800093c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d58:	2100      	movs	r1, #0
 8000d5a:	480d      	ldr	r0, [pc, #52]	@ (8000d90 <MX_USART1_UART_Init+0x90>)
 8000d5c:	f004 fc4d 	bl	80055fa <HAL_UARTEx_SetTxFifoThreshold>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000d66:	f7ff fde9 	bl	800093c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	4808      	ldr	r0, [pc, #32]	@ (8000d90 <MX_USART1_UART_Init+0x90>)
 8000d6e:	f004 fc82 	bl	8005676 <HAL_UARTEx_SetRxFifoThreshold>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000d78:	f7ff fde0 	bl	800093c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000d7c:	4804      	ldr	r0, [pc, #16]	@ (8000d90 <MX_USART1_UART_Init+0x90>)
 8000d7e:	f004 fc03 	bl	8005588 <HAL_UARTEx_DisableFifoMode>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000d88:	f7ff fdd8 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d8c:	bf00      	nop
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	2400008c 	.word	0x2400008c
 8000d94:	40011000 	.word	0x40011000

08000d98 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b0ba      	sub	sp, #232	@ 0xe8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
 8000dae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000db0:	f107 0310 	add.w	r3, r7, #16
 8000db4:	22c0      	movs	r2, #192	@ 0xc0
 8000db6:	2100      	movs	r1, #0
 8000db8:	4618      	mov	r0, r3
 8000dba:	f004 ff35 	bl	8005c28 <memset>
  if(uartHandle->Instance==USART1)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a2b      	ldr	r2, [pc, #172]	@ (8000e70 <HAL_UART_MspInit+0xd8>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d14e      	bne.n	8000e66 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000dc8:	f04f 0201 	mov.w	r2, #1
 8000dcc:	f04f 0300 	mov.w	r3, #0
 8000dd0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dda:	f107 0310 	add.w	r3, r7, #16
 8000dde:	4618      	mov	r0, r3
 8000de0:	f001 fd2c 	bl	800283c <HAL_RCCEx_PeriphCLKConfig>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000dea:	f7ff fda7 	bl	800093c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dee:	4b21      	ldr	r3, [pc, #132]	@ (8000e74 <HAL_UART_MspInit+0xdc>)
 8000df0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000df4:	4a1f      	ldr	r2, [pc, #124]	@ (8000e74 <HAL_UART_MspInit+0xdc>)
 8000df6:	f043 0310 	orr.w	r3, r3, #16
 8000dfa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000dfe:	4b1d      	ldr	r3, [pc, #116]	@ (8000e74 <HAL_UART_MspInit+0xdc>)
 8000e00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000e04:	f003 0310 	and.w	r3, r3, #16
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0c:	4b19      	ldr	r3, [pc, #100]	@ (8000e74 <HAL_UART_MspInit+0xdc>)
 8000e0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e12:	4a18      	ldr	r2, [pc, #96]	@ (8000e74 <HAL_UART_MspInit+0xdc>)
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e1c:	4b15      	ldr	r3, [pc, #84]	@ (8000e74 <HAL_UART_MspInit+0xdc>)
 8000e1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	60bb      	str	r3, [r7, #8]
 8000e28:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e2a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000e2e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e32:	2302      	movs	r3, #2
 8000e34:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e44:	2307      	movs	r3, #7
 8000e46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4809      	ldr	r0, [pc, #36]	@ (8000e78 <HAL_UART_MspInit+0xe0>)
 8000e52:	f000 faef 	bl	8001434 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e56:	2200      	movs	r2, #0
 8000e58:	2100      	movs	r1, #0
 8000e5a:	2025      	movs	r0, #37	@ 0x25
 8000e5c:	f000 fa3d 	bl	80012da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e60:	2025      	movs	r0, #37	@ 0x25
 8000e62:	f000 fa54 	bl	800130e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000e66:	bf00      	nop
 8000e68:	37e8      	adds	r7, #232	@ 0xe8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40011000 	.word	0x40011000
 8000e74:	58024400 	.word	0x58024400
 8000e78:	58020000 	.word	0x58020000

08000e7c <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

/* printf重定向 */
PUTCHAR_PROTOTYPE
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000e84:	1d39      	adds	r1, r7, #4
 8000e86:	f04f 33ff 	mov.w	r3, #4294967295
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	4803      	ldr	r0, [pc, #12]	@ (8000e9c <__io_putchar+0x20>)
 8000e8e:	f003 fb65 	bl	800455c <HAL_UART_Transmit>
    return ch;
 8000e92:	687b      	ldr	r3, [r7, #4]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	2400008c 	.word	0x2400008c

08000ea0 <MX_WWDG1_Init>:
* 假设 fprer=4,tr=7f,PCLK3=120Mhz
* 则溢出时间=4096*16*64/120Mhz=34.95ms
* @retval 无
*/
void MX_WWDG1_Init(uint8_t tr, uint8_t wr, uint32_t fprer)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	603a      	str	r2, [r7, #0]
 8000eaa:	71fb      	strb	r3, [r7, #7]
 8000eac:	460b      	mov	r3, r1
 8000eae:	71bb      	strb	r3, [r7, #6]
  /* USER CODE END WWDG1_Init 0 */

  /* USER CODE BEGIN WWDG1_Init 1 */

  /* USER CODE END WWDG1_Init 1 */
  hwwdg1.Instance = WWDG1;
 8000eb0:	4b0d      	ldr	r3, [pc, #52]	@ (8000ee8 <MX_WWDG1_Init+0x48>)
 8000eb2:	4a0e      	ldr	r2, [pc, #56]	@ (8000eec <MX_WWDG1_Init+0x4c>)
 8000eb4:	601a      	str	r2, [r3, #0]
  hwwdg1.Init.Prescaler = fprer;
 8000eb6:	4a0c      	ldr	r2, [pc, #48]	@ (8000ee8 <MX_WWDG1_Init+0x48>)
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	6053      	str	r3, [r2, #4]
  hwwdg1.Init.Window = wr;
 8000ebc:	79bb      	ldrb	r3, [r7, #6]
 8000ebe:	4a0a      	ldr	r2, [pc, #40]	@ (8000ee8 <MX_WWDG1_Init+0x48>)
 8000ec0:	6093      	str	r3, [r2, #8]
  hwwdg1.Init.Counter = tr;
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	4a08      	ldr	r2, [pc, #32]	@ (8000ee8 <MX_WWDG1_Init+0x48>)
 8000ec6:	60d3      	str	r3, [r2, #12]
  hwwdg1.Init.EWIMode = WWDG_EWI_ENABLE;
 8000ec8:	4b07      	ldr	r3, [pc, #28]	@ (8000ee8 <MX_WWDG1_Init+0x48>)
 8000eca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ece:	611a      	str	r2, [r3, #16]
  if (HAL_WWDG_Init(&hwwdg1) != HAL_OK)
 8000ed0:	4805      	ldr	r0, [pc, #20]	@ (8000ee8 <MX_WWDG1_Init+0x48>)
 8000ed2:	f004 fc5d 	bl	8005790 <HAL_WWDG_Init>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_WWDG1_Init+0x40>
  {
    Error_Handler();
 8000edc:	f7ff fd2e 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN WWDG1_Init 2 */

  /* USER CODE END WWDG1_Init 2 */

}
 8000ee0:	bf00      	nop
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	24000120 	.word	0x24000120
 8000eec:	50003000 	.word	0x50003000

08000ef0 <HAL_WWDG_MspInit>:

void HAL_WWDG_MspInit(WWDG_HandleTypeDef* wwdgHandle)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]

  if(wwdgHandle->Instance==WWDG1)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a10      	ldr	r2, [pc, #64]	@ (8000f40 <HAL_WWDG_MspInit+0x50>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d119      	bne.n	8000f36 <HAL_WWDG_MspInit+0x46>
  {
  /* USER CODE BEGIN WWDG1_MspInit 0 */

  /* USER CODE END WWDG1_MspInit 0 */
    /* WWDG1 clock enable */
    HAL_RCCEx_WWDGxSysResetConfig(RCC_WWDG1);
 8000f02:	2001      	movs	r0, #1
 8000f04:	f003 f962 	bl	80041cc <HAL_RCCEx_WWDGxSysResetConfig>
    __HAL_RCC_WWDG1_CLK_ENABLE();
 8000f08:	4b0e      	ldr	r3, [pc, #56]	@ (8000f44 <HAL_WWDG_MspInit+0x54>)
 8000f0a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000f0e:	4a0d      	ldr	r2, [pc, #52]	@ (8000f44 <HAL_WWDG_MspInit+0x54>)
 8000f10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f14:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8000f18:	4b0a      	ldr	r3, [pc, #40]	@ (8000f44 <HAL_WWDG_MspInit+0x54>)
 8000f1a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000f1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fb      	ldr	r3, [r7, #12]
    /* WWDG1 interrupt Init */
    HAL_NVIC_SetPriority(WWDG_IRQn, 2, 3);
 8000f26:	2203      	movs	r2, #3
 8000f28:	2102      	movs	r1, #2
 8000f2a:	2000      	movs	r0, #0
 8000f2c:	f000 f9d5 	bl	80012da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(WWDG_IRQn);
 8000f30:	2000      	movs	r0, #0
 8000f32:	f000 f9ec 	bl	800130e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN WWDG1_MspInit 1 */

  /* USER CODE END WWDG1_MspInit 1 */
  }
}
 8000f36:	bf00      	nop
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	50003000 	.word	0x50003000
 8000f44:	58024400 	.word	0x58024400

08000f48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000f48:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000f84 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000f4c:	f7ff fec0 	bl	8000cd0 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f50:	f7ff fe1e 	bl	8000b90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f54:	480c      	ldr	r0, [pc, #48]	@ (8000f88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f56:	490d      	ldr	r1, [pc, #52]	@ (8000f8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f58:	4a0d      	ldr	r2, [pc, #52]	@ (8000f90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f5c:	e002      	b.n	8000f64 <LoopCopyDataInit>

08000f5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f62:	3304      	adds	r3, #4

08000f64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f68:	d3f9      	bcc.n	8000f5e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f6c:	4c0a      	ldr	r4, [pc, #40]	@ (8000f98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f70:	e001      	b.n	8000f76 <LoopFillZerobss>

08000f72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f74:	3204      	adds	r2, #4

08000f76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f78:	d3fb      	bcc.n	8000f72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f7a:	f004 fea9 	bl	8005cd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f7e:	f7ff fc13 	bl	80007a8 <main>
  bx  lr
 8000f82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f84:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000f88:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f8c:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8000f90:	08006218 	.word	0x08006218
  ldr r2, =_sbss
 8000f94:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 8000f98:	24000284 	.word	0x24000284

08000f9c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f9c:	e7fe      	b.n	8000f9c <ADC3_IRQHandler>
	...

08000fa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa6:	2003      	movs	r0, #3
 8000fa8:	f000 f98c 	bl	80012c4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000fac:	f001 fa70 	bl	8002490 <HAL_RCC_GetSysClockFreq>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	4b15      	ldr	r3, [pc, #84]	@ (8001008 <HAL_Init+0x68>)
 8000fb4:	699b      	ldr	r3, [r3, #24]
 8000fb6:	0a1b      	lsrs	r3, r3, #8
 8000fb8:	f003 030f 	and.w	r3, r3, #15
 8000fbc:	4913      	ldr	r1, [pc, #76]	@ (800100c <HAL_Init+0x6c>)
 8000fbe:	5ccb      	ldrb	r3, [r1, r3]
 8000fc0:	f003 031f 	and.w	r3, r3, #31
 8000fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8000fc8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000fca:	4b0f      	ldr	r3, [pc, #60]	@ (8001008 <HAL_Init+0x68>)
 8000fcc:	699b      	ldr	r3, [r3, #24]
 8000fce:	f003 030f 	and.w	r3, r3, #15
 8000fd2:	4a0e      	ldr	r2, [pc, #56]	@ (800100c <HAL_Init+0x6c>)
 8000fd4:	5cd3      	ldrb	r3, [r2, r3]
 8000fd6:	f003 031f 	and.w	r3, r3, #31
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	fa22 f303 	lsr.w	r3, r2, r3
 8000fe0:	4a0b      	ldr	r2, [pc, #44]	@ (8001010 <HAL_Init+0x70>)
 8000fe2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000fe4:	4a0b      	ldr	r2, [pc, #44]	@ (8001014 <HAL_Init+0x74>)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fea:	200f      	movs	r0, #15
 8000fec:	f000 f814 	bl	8001018 <HAL_InitTick>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e002      	b.n	8001000 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000ffa:	f7ff fca5 	bl	8000948 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ffe:	2300      	movs	r3, #0
}
 8001000:	4618      	mov	r0, r3
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	58024400 	.word	0x58024400
 800100c:	080061d0 	.word	0x080061d0
 8001010:	24000004 	.word	0x24000004
 8001014:	24000000 	.word	0x24000000

08001018 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001020:	4b15      	ldr	r3, [pc, #84]	@ (8001078 <HAL_InitTick+0x60>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d101      	bne.n	800102c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001028:	2301      	movs	r3, #1
 800102a:	e021      	b.n	8001070 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800102c:	4b13      	ldr	r3, [pc, #76]	@ (800107c <HAL_InitTick+0x64>)
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	4b11      	ldr	r3, [pc, #68]	@ (8001078 <HAL_InitTick+0x60>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	4619      	mov	r1, r3
 8001036:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800103a:	fbb3 f3f1 	udiv	r3, r3, r1
 800103e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001042:	4618      	mov	r0, r3
 8001044:	f000 f971 	bl	800132a <HAL_SYSTICK_Config>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e00e      	b.n	8001070 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2b0f      	cmp	r3, #15
 8001056:	d80a      	bhi.n	800106e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001058:	2200      	movs	r2, #0
 800105a:	6879      	ldr	r1, [r7, #4]
 800105c:	f04f 30ff 	mov.w	r0, #4294967295
 8001060:	f000 f93b 	bl	80012da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001064:	4a06      	ldr	r2, [pc, #24]	@ (8001080 <HAL_InitTick+0x68>)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800106a:	2300      	movs	r3, #0
 800106c:	e000      	b.n	8001070 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
}
 8001070:	4618      	mov	r0, r3
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	2400000c 	.word	0x2400000c
 800107c:	24000000 	.word	0x24000000
 8001080:	24000008 	.word	0x24000008

08001084 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001088:	4b06      	ldr	r3, [pc, #24]	@ (80010a4 <HAL_IncTick+0x20>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	461a      	mov	r2, r3
 800108e:	4b06      	ldr	r3, [pc, #24]	@ (80010a8 <HAL_IncTick+0x24>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4413      	add	r3, r2
 8001094:	4a04      	ldr	r2, [pc, #16]	@ (80010a8 <HAL_IncTick+0x24>)
 8001096:	6013      	str	r3, [r2, #0]
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	2400000c 	.word	0x2400000c
 80010a8:	24000134 	.word	0x24000134

080010ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  return uwTick;
 80010b0:	4b03      	ldr	r3, [pc, #12]	@ (80010c0 <HAL_GetTick+0x14>)
 80010b2:	681b      	ldr	r3, [r3, #0]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	24000134 	.word	0x24000134

080010c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010cc:	f7ff ffee 	bl	80010ac <HAL_GetTick>
 80010d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010dc:	d005      	beq.n	80010ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010de:	4b0a      	ldr	r3, [pc, #40]	@ (8001108 <HAL_Delay+0x44>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	461a      	mov	r2, r3
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	4413      	add	r3, r2
 80010e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010ea:	bf00      	nop
 80010ec:	f7ff ffde 	bl	80010ac <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	68fa      	ldr	r2, [r7, #12]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d8f7      	bhi.n	80010ec <HAL_Delay+0x28>
  {
  }
}
 80010fc:	bf00      	nop
 80010fe:	bf00      	nop
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	2400000c 	.word	0x2400000c

0800110c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001110:	4b03      	ldr	r3, [pc, #12]	@ (8001120 <HAL_GetREVID+0x14>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	0c1b      	lsrs	r3, r3, #16
}
 8001116:	4618      	mov	r0, r3
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	5c001000 	.word	0x5c001000

08001124 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001124:	b480      	push	{r7}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f003 0307 	and.w	r3, r3, #7
 8001132:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001134:	4b0b      	ldr	r3, [pc, #44]	@ (8001164 <__NVIC_SetPriorityGrouping+0x40>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800113a:	68ba      	ldr	r2, [r7, #8]
 800113c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001140:	4013      	ands	r3, r2
 8001142:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800114c:	4b06      	ldr	r3, [pc, #24]	@ (8001168 <__NVIC_SetPriorityGrouping+0x44>)
 800114e:	4313      	orrs	r3, r2
 8001150:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001152:	4a04      	ldr	r2, [pc, #16]	@ (8001164 <__NVIC_SetPriorityGrouping+0x40>)
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	60d3      	str	r3, [r2, #12]
}
 8001158:	bf00      	nop
 800115a:	3714      	adds	r7, #20
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	e000ed00 	.word	0xe000ed00
 8001168:	05fa0000 	.word	0x05fa0000

0800116c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001170:	4b04      	ldr	r3, [pc, #16]	@ (8001184 <__NVIC_GetPriorityGrouping+0x18>)
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	0a1b      	lsrs	r3, r3, #8
 8001176:	f003 0307 	and.w	r3, r3, #7
}
 800117a:	4618      	mov	r0, r3
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001192:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001196:	2b00      	cmp	r3, #0
 8001198:	db0b      	blt.n	80011b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800119a:	88fb      	ldrh	r3, [r7, #6]
 800119c:	f003 021f 	and.w	r2, r3, #31
 80011a0:	4907      	ldr	r1, [pc, #28]	@ (80011c0 <__NVIC_EnableIRQ+0x38>)
 80011a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011a6:	095b      	lsrs	r3, r3, #5
 80011a8:	2001      	movs	r0, #1
 80011aa:	fa00 f202 	lsl.w	r2, r0, r2
 80011ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011b2:	bf00      	nop
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	e000e100 	.word	0xe000e100

080011c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	6039      	str	r1, [r7, #0]
 80011ce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	db0a      	blt.n	80011ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	b2da      	uxtb	r2, r3
 80011dc:	490c      	ldr	r1, [pc, #48]	@ (8001210 <__NVIC_SetPriority+0x4c>)
 80011de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011e2:	0112      	lsls	r2, r2, #4
 80011e4:	b2d2      	uxtb	r2, r2
 80011e6:	440b      	add	r3, r1
 80011e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011ec:	e00a      	b.n	8001204 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	b2da      	uxtb	r2, r3
 80011f2:	4908      	ldr	r1, [pc, #32]	@ (8001214 <__NVIC_SetPriority+0x50>)
 80011f4:	88fb      	ldrh	r3, [r7, #6]
 80011f6:	f003 030f 	and.w	r3, r3, #15
 80011fa:	3b04      	subs	r3, #4
 80011fc:	0112      	lsls	r2, r2, #4
 80011fe:	b2d2      	uxtb	r2, r2
 8001200:	440b      	add	r3, r1
 8001202:	761a      	strb	r2, [r3, #24]
}
 8001204:	bf00      	nop
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	e000e100 	.word	0xe000e100
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001218:	b480      	push	{r7}
 800121a:	b089      	sub	sp, #36	@ 0x24
 800121c:	af00      	add	r7, sp, #0
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	f003 0307 	and.w	r3, r3, #7
 800122a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	f1c3 0307 	rsb	r3, r3, #7
 8001232:	2b04      	cmp	r3, #4
 8001234:	bf28      	it	cs
 8001236:	2304      	movcs	r3, #4
 8001238:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	3304      	adds	r3, #4
 800123e:	2b06      	cmp	r3, #6
 8001240:	d902      	bls.n	8001248 <NVIC_EncodePriority+0x30>
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	3b03      	subs	r3, #3
 8001246:	e000      	b.n	800124a <NVIC_EncodePriority+0x32>
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800124c:	f04f 32ff 	mov.w	r2, #4294967295
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	43da      	mvns	r2, r3
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	401a      	ands	r2, r3
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001260:	f04f 31ff 	mov.w	r1, #4294967295
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	fa01 f303 	lsl.w	r3, r1, r3
 800126a:	43d9      	mvns	r1, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001270:	4313      	orrs	r3, r2
         );
}
 8001272:	4618      	mov	r0, r3
 8001274:	3724      	adds	r7, #36	@ 0x24
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
	...

08001280 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3b01      	subs	r3, #1
 800128c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001290:	d301      	bcc.n	8001296 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001292:	2301      	movs	r3, #1
 8001294:	e00f      	b.n	80012b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001296:	4a0a      	ldr	r2, [pc, #40]	@ (80012c0 <SysTick_Config+0x40>)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	3b01      	subs	r3, #1
 800129c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800129e:	210f      	movs	r1, #15
 80012a0:	f04f 30ff 	mov.w	r0, #4294967295
 80012a4:	f7ff ff8e 	bl	80011c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012a8:	4b05      	ldr	r3, [pc, #20]	@ (80012c0 <SysTick_Config+0x40>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ae:	4b04      	ldr	r3, [pc, #16]	@ (80012c0 <SysTick_Config+0x40>)
 80012b0:	2207      	movs	r2, #7
 80012b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	e000e010 	.word	0xe000e010

080012c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f7ff ff29 	bl	8001124 <__NVIC_SetPriorityGrouping>
}
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b086      	sub	sp, #24
 80012de:	af00      	add	r7, sp, #0
 80012e0:	4603      	mov	r3, r0
 80012e2:	60b9      	str	r1, [r7, #8]
 80012e4:	607a      	str	r2, [r7, #4]
 80012e6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012e8:	f7ff ff40 	bl	800116c <__NVIC_GetPriorityGrouping>
 80012ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	68b9      	ldr	r1, [r7, #8]
 80012f2:	6978      	ldr	r0, [r7, #20]
 80012f4:	f7ff ff90 	bl	8001218 <NVIC_EncodePriority>
 80012f8:	4602      	mov	r2, r0
 80012fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012fe:	4611      	mov	r1, r2
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff ff5f 	bl	80011c4 <__NVIC_SetPriority>
}
 8001306:	bf00      	nop
 8001308:	3718      	adds	r7, #24
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b082      	sub	sp, #8
 8001312:	af00      	add	r7, sp, #0
 8001314:	4603      	mov	r3, r0
 8001316:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001318:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff ff33 	bl	8001188 <__NVIC_EnableIRQ>
}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	b082      	sub	sp, #8
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f7ff ffa4 	bl	8001280 <SysTick_Config>
 8001338:	4603      	mov	r3, r0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
	...

08001344 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001348:	f3bf 8f5f 	dmb	sy
}
 800134c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800134e:	4b07      	ldr	r3, [pc, #28]	@ (800136c <HAL_MPU_Disable+0x28>)
 8001350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001352:	4a06      	ldr	r2, [pc, #24]	@ (800136c <HAL_MPU_Disable+0x28>)
 8001354:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001358:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800135a:	4b05      	ldr	r3, [pc, #20]	@ (8001370 <HAL_MPU_Disable+0x2c>)
 800135c:	2200      	movs	r2, #0
 800135e:	605a      	str	r2, [r3, #4]
}
 8001360:	bf00      	nop
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	e000ed00 	.word	0xe000ed00
 8001370:	e000ed90 	.word	0xe000ed90

08001374 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800137c:	4a0b      	ldr	r2, [pc, #44]	@ (80013ac <HAL_MPU_Enable+0x38>)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	f043 0301 	orr.w	r3, r3, #1
 8001384:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001386:	4b0a      	ldr	r3, [pc, #40]	@ (80013b0 <HAL_MPU_Enable+0x3c>)
 8001388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800138a:	4a09      	ldr	r2, [pc, #36]	@ (80013b0 <HAL_MPU_Enable+0x3c>)
 800138c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001390:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001392:	f3bf 8f4f 	dsb	sy
}
 8001396:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001398:	f3bf 8f6f 	isb	sy
}
 800139c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800139e:	bf00      	nop
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	e000ed90 	.word	0xe000ed90
 80013b0:	e000ed00 	.word	0xe000ed00

080013b4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	785a      	ldrb	r2, [r3, #1]
 80013c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001430 <HAL_MPU_ConfigRegion+0x7c>)
 80013c2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80013c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001430 <HAL_MPU_ConfigRegion+0x7c>)
 80013c6:	691b      	ldr	r3, [r3, #16]
 80013c8:	4a19      	ldr	r2, [pc, #100]	@ (8001430 <HAL_MPU_ConfigRegion+0x7c>)
 80013ca:	f023 0301 	bic.w	r3, r3, #1
 80013ce:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80013d0:	4a17      	ldr	r2, [pc, #92]	@ (8001430 <HAL_MPU_ConfigRegion+0x7c>)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	7b1b      	ldrb	r3, [r3, #12]
 80013dc:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	7adb      	ldrb	r3, [r3, #11]
 80013e2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80013e4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	7a9b      	ldrb	r3, [r3, #10]
 80013ea:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80013ec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	7b5b      	ldrb	r3, [r3, #13]
 80013f2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80013f4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	7b9b      	ldrb	r3, [r3, #14]
 80013fa:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80013fc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	7bdb      	ldrb	r3, [r3, #15]
 8001402:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001404:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	7a5b      	ldrb	r3, [r3, #9]
 800140a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800140c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	7a1b      	ldrb	r3, [r3, #8]
 8001412:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001414:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	7812      	ldrb	r2, [r2, #0]
 800141a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800141c:	4a04      	ldr	r2, [pc, #16]	@ (8001430 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800141e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001420:	6113      	str	r3, [r2, #16]
}
 8001422:	bf00      	nop
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	e000ed90 	.word	0xe000ed90

08001434 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001434:	b480      	push	{r7}
 8001436:	b089      	sub	sp, #36	@ 0x24
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800143e:	2300      	movs	r3, #0
 8001440:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001442:	4b89      	ldr	r3, [pc, #548]	@ (8001668 <HAL_GPIO_Init+0x234>)
 8001444:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001446:	e194      	b.n	8001772 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	2101      	movs	r1, #1
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	fa01 f303 	lsl.w	r3, r1, r3
 8001454:	4013      	ands	r3, r2
 8001456:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	2b00      	cmp	r3, #0
 800145c:	f000 8186 	beq.w	800176c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f003 0303 	and.w	r3, r3, #3
 8001468:	2b01      	cmp	r3, #1
 800146a:	d005      	beq.n	8001478 <HAL_GPIO_Init+0x44>
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f003 0303 	and.w	r3, r3, #3
 8001474:	2b02      	cmp	r3, #2
 8001476:	d130      	bne.n	80014da <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	2203      	movs	r2, #3
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	43db      	mvns	r3, r3
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	4013      	ands	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	68da      	ldr	r2, [r3, #12]
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	4313      	orrs	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014ae:	2201      	movs	r2, #1
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	43db      	mvns	r3, r3
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	4013      	ands	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	091b      	lsrs	r3, r3, #4
 80014c4:	f003 0201 	and.w	r2, r3, #1
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f003 0303 	and.w	r3, r3, #3
 80014e2:	2b03      	cmp	r3, #3
 80014e4:	d017      	beq.n	8001516 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	2203      	movs	r2, #3
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	43db      	mvns	r3, r3
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	4013      	ands	r3, r2
 80014fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	689a      	ldr	r2, [r3, #8]
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	69ba      	ldr	r2, [r7, #24]
 800150c:	4313      	orrs	r3, r2
 800150e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	69ba      	ldr	r2, [r7, #24]
 8001514:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f003 0303 	and.w	r3, r3, #3
 800151e:	2b02      	cmp	r3, #2
 8001520:	d123      	bne.n	800156a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	08da      	lsrs	r2, r3, #3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	3208      	adds	r2, #8
 800152a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800152e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	f003 0307 	and.w	r3, r3, #7
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	220f      	movs	r2, #15
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	43db      	mvns	r3, r3
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	4013      	ands	r3, r2
 8001544:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	691a      	ldr	r2, [r3, #16]
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	f003 0307 	and.w	r3, r3, #7
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	4313      	orrs	r3, r2
 800155a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	08da      	lsrs	r2, r3, #3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	3208      	adds	r2, #8
 8001564:	69b9      	ldr	r1, [r7, #24]
 8001566:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	2203      	movs	r2, #3
 8001576:	fa02 f303 	lsl.w	r3, r2, r3
 800157a:	43db      	mvns	r3, r3
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	4013      	ands	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f003 0203 	and.w	r2, r3, #3
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	4313      	orrs	r3, r2
 8001596:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	f000 80e0 	beq.w	800176c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ac:	4b2f      	ldr	r3, [pc, #188]	@ (800166c <HAL_GPIO_Init+0x238>)
 80015ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80015b2:	4a2e      	ldr	r2, [pc, #184]	@ (800166c <HAL_GPIO_Init+0x238>)
 80015b4:	f043 0302 	orr.w	r3, r3, #2
 80015b8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80015bc:	4b2b      	ldr	r3, [pc, #172]	@ (800166c <HAL_GPIO_Init+0x238>)
 80015be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015ca:	4a29      	ldr	r2, [pc, #164]	@ (8001670 <HAL_GPIO_Init+0x23c>)
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	089b      	lsrs	r3, r3, #2
 80015d0:	3302      	adds	r3, #2
 80015d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	f003 0303 	and.w	r3, r3, #3
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	220f      	movs	r2, #15
 80015e2:	fa02 f303 	lsl.w	r3, r2, r3
 80015e6:	43db      	mvns	r3, r3
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	4013      	ands	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a20      	ldr	r2, [pc, #128]	@ (8001674 <HAL_GPIO_Init+0x240>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d052      	beq.n	800169c <HAL_GPIO_Init+0x268>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a1f      	ldr	r2, [pc, #124]	@ (8001678 <HAL_GPIO_Init+0x244>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d031      	beq.n	8001662 <HAL_GPIO_Init+0x22e>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a1e      	ldr	r2, [pc, #120]	@ (800167c <HAL_GPIO_Init+0x248>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d02b      	beq.n	800165e <HAL_GPIO_Init+0x22a>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a1d      	ldr	r2, [pc, #116]	@ (8001680 <HAL_GPIO_Init+0x24c>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d025      	beq.n	800165a <HAL_GPIO_Init+0x226>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a1c      	ldr	r2, [pc, #112]	@ (8001684 <HAL_GPIO_Init+0x250>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d01f      	beq.n	8001656 <HAL_GPIO_Init+0x222>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a1b      	ldr	r2, [pc, #108]	@ (8001688 <HAL_GPIO_Init+0x254>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d019      	beq.n	8001652 <HAL_GPIO_Init+0x21e>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a1a      	ldr	r2, [pc, #104]	@ (800168c <HAL_GPIO_Init+0x258>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d013      	beq.n	800164e <HAL_GPIO_Init+0x21a>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a19      	ldr	r2, [pc, #100]	@ (8001690 <HAL_GPIO_Init+0x25c>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d00d      	beq.n	800164a <HAL_GPIO_Init+0x216>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4a18      	ldr	r2, [pc, #96]	@ (8001694 <HAL_GPIO_Init+0x260>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d007      	beq.n	8001646 <HAL_GPIO_Init+0x212>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4a17      	ldr	r2, [pc, #92]	@ (8001698 <HAL_GPIO_Init+0x264>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d101      	bne.n	8001642 <HAL_GPIO_Init+0x20e>
 800163e:	2309      	movs	r3, #9
 8001640:	e02d      	b.n	800169e <HAL_GPIO_Init+0x26a>
 8001642:	230a      	movs	r3, #10
 8001644:	e02b      	b.n	800169e <HAL_GPIO_Init+0x26a>
 8001646:	2308      	movs	r3, #8
 8001648:	e029      	b.n	800169e <HAL_GPIO_Init+0x26a>
 800164a:	2307      	movs	r3, #7
 800164c:	e027      	b.n	800169e <HAL_GPIO_Init+0x26a>
 800164e:	2306      	movs	r3, #6
 8001650:	e025      	b.n	800169e <HAL_GPIO_Init+0x26a>
 8001652:	2305      	movs	r3, #5
 8001654:	e023      	b.n	800169e <HAL_GPIO_Init+0x26a>
 8001656:	2304      	movs	r3, #4
 8001658:	e021      	b.n	800169e <HAL_GPIO_Init+0x26a>
 800165a:	2303      	movs	r3, #3
 800165c:	e01f      	b.n	800169e <HAL_GPIO_Init+0x26a>
 800165e:	2302      	movs	r3, #2
 8001660:	e01d      	b.n	800169e <HAL_GPIO_Init+0x26a>
 8001662:	2301      	movs	r3, #1
 8001664:	e01b      	b.n	800169e <HAL_GPIO_Init+0x26a>
 8001666:	bf00      	nop
 8001668:	58000080 	.word	0x58000080
 800166c:	58024400 	.word	0x58024400
 8001670:	58000400 	.word	0x58000400
 8001674:	58020000 	.word	0x58020000
 8001678:	58020400 	.word	0x58020400
 800167c:	58020800 	.word	0x58020800
 8001680:	58020c00 	.word	0x58020c00
 8001684:	58021000 	.word	0x58021000
 8001688:	58021400 	.word	0x58021400
 800168c:	58021800 	.word	0x58021800
 8001690:	58021c00 	.word	0x58021c00
 8001694:	58022000 	.word	0x58022000
 8001698:	58022400 	.word	0x58022400
 800169c:	2300      	movs	r3, #0
 800169e:	69fa      	ldr	r2, [r7, #28]
 80016a0:	f002 0203 	and.w	r2, r2, #3
 80016a4:	0092      	lsls	r2, r2, #2
 80016a6:	4093      	lsls	r3, r2
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016ae:	4938      	ldr	r1, [pc, #224]	@ (8001790 <HAL_GPIO_Init+0x35c>)
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	089b      	lsrs	r3, r3, #2
 80016b4:	3302      	adds	r3, #2
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	43db      	mvns	r3, r3
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	4013      	ands	r3, r2
 80016cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d003      	beq.n	80016e2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	4313      	orrs	r3, r2
 80016e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80016e2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80016ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	43db      	mvns	r3, r3
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	4013      	ands	r3, r2
 80016fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d003      	beq.n	8001710 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	4313      	orrs	r3, r2
 800170e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001710:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	43db      	mvns	r3, r3
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	4013      	ands	r3, r2
 8001726:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d003      	beq.n	800173c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	4313      	orrs	r3, r2
 800173a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	43db      	mvns	r3, r3
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	4013      	ands	r3, r2
 8001750:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d003      	beq.n	8001766 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800175e:	69ba      	ldr	r2, [r7, #24]
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	4313      	orrs	r3, r2
 8001764:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	3301      	adds	r3, #1
 8001770:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	fa22 f303 	lsr.w	r3, r2, r3
 800177c:	2b00      	cmp	r3, #0
 800177e:	f47f ae63 	bne.w	8001448 <HAL_GPIO_Init+0x14>
  }
}
 8001782:	bf00      	nop
 8001784:	bf00      	nop
 8001786:	3724      	adds	r7, #36	@ 0x24
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	58000400 	.word	0x58000400

08001794 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	460b      	mov	r3, r1
 800179e:	807b      	strh	r3, [r7, #2]
 80017a0:	4613      	mov	r3, r2
 80017a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017a4:	787b      	ldrb	r3, [r7, #1]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d003      	beq.n	80017b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017aa:	887a      	ldrh	r2, [r7, #2]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80017b0:	e003      	b.n	80017ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80017b2:	887b      	ldrh	r3, [r7, #2]
 80017b4:	041a      	lsls	r2, r3, #16
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	619a      	str	r2, [r3, #24]
}
 80017ba:	bf00      	nop
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017c6:	b480      	push	{r7}
 80017c8:	b085      	sub	sp, #20
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
 80017ce:	460b      	mov	r3, r1
 80017d0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	695b      	ldr	r3, [r3, #20]
 80017d6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017d8:	887a      	ldrh	r2, [r7, #2]
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	4013      	ands	r3, r2
 80017de:	041a      	lsls	r2, r3, #16
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	43d9      	mvns	r1, r3
 80017e4:	887b      	ldrh	r3, [r7, #2]
 80017e6:	400b      	ands	r3, r1
 80017e8:	431a      	orrs	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	619a      	str	r2, [r3, #24]
}
 80017ee:	bf00      	nop
 80017f0:	3714      	adds	r7, #20
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
	...

080017fc <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001804:	4b19      	ldr	r3, [pc, #100]	@ (800186c <HAL_PWREx_ConfigSupply+0x70>)
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	f003 0304 	and.w	r3, r3, #4
 800180c:	2b04      	cmp	r3, #4
 800180e:	d00a      	beq.n	8001826 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001810:	4b16      	ldr	r3, [pc, #88]	@ (800186c <HAL_PWREx_ConfigSupply+0x70>)
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	f003 0307 	and.w	r3, r3, #7
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	429a      	cmp	r2, r3
 800181c:	d001      	beq.n	8001822 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e01f      	b.n	8001862 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001822:	2300      	movs	r3, #0
 8001824:	e01d      	b.n	8001862 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001826:	4b11      	ldr	r3, [pc, #68]	@ (800186c <HAL_PWREx_ConfigSupply+0x70>)
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	f023 0207 	bic.w	r2, r3, #7
 800182e:	490f      	ldr	r1, [pc, #60]	@ (800186c <HAL_PWREx_ConfigSupply+0x70>)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4313      	orrs	r3, r2
 8001834:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001836:	f7ff fc39 	bl	80010ac <HAL_GetTick>
 800183a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800183c:	e009      	b.n	8001852 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800183e:	f7ff fc35 	bl	80010ac <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800184c:	d901      	bls.n	8001852 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e007      	b.n	8001862 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001852:	4b06      	ldr	r3, [pc, #24]	@ (800186c <HAL_PWREx_ConfigSupply+0x70>)
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800185a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800185e:	d1ee      	bne.n	800183e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	3710      	adds	r7, #16
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	58024800 	.word	0x58024800

08001870 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b08c      	sub	sp, #48	@ 0x30
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d102      	bne.n	8001884 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	f000 bc48 	b.w	8002114 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0301 	and.w	r3, r3, #1
 800188c:	2b00      	cmp	r3, #0
 800188e:	f000 8088 	beq.w	80019a2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001892:	4b99      	ldr	r3, [pc, #612]	@ (8001af8 <HAL_RCC_OscConfig+0x288>)
 8001894:	691b      	ldr	r3, [r3, #16]
 8001896:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800189a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800189c:	4b96      	ldr	r3, [pc, #600]	@ (8001af8 <HAL_RCC_OscConfig+0x288>)
 800189e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80018a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018a4:	2b10      	cmp	r3, #16
 80018a6:	d007      	beq.n	80018b8 <HAL_RCC_OscConfig+0x48>
 80018a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018aa:	2b18      	cmp	r3, #24
 80018ac:	d111      	bne.n	80018d2 <HAL_RCC_OscConfig+0x62>
 80018ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018b0:	f003 0303 	and.w	r3, r3, #3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d10c      	bne.n	80018d2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018b8:	4b8f      	ldr	r3, [pc, #572]	@ (8001af8 <HAL_RCC_OscConfig+0x288>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d06d      	beq.n	80019a0 <HAL_RCC_OscConfig+0x130>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d169      	bne.n	80019a0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	f000 bc21 	b.w	8002114 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018da:	d106      	bne.n	80018ea <HAL_RCC_OscConfig+0x7a>
 80018dc:	4b86      	ldr	r3, [pc, #536]	@ (8001af8 <HAL_RCC_OscConfig+0x288>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a85      	ldr	r2, [pc, #532]	@ (8001af8 <HAL_RCC_OscConfig+0x288>)
 80018e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018e6:	6013      	str	r3, [r2, #0]
 80018e8:	e02e      	b.n	8001948 <HAL_RCC_OscConfig+0xd8>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d10c      	bne.n	800190c <HAL_RCC_OscConfig+0x9c>
 80018f2:	4b81      	ldr	r3, [pc, #516]	@ (8001af8 <HAL_RCC_OscConfig+0x288>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a80      	ldr	r2, [pc, #512]	@ (8001af8 <HAL_RCC_OscConfig+0x288>)
 80018f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018fc:	6013      	str	r3, [r2, #0]
 80018fe:	4b7e      	ldr	r3, [pc, #504]	@ (8001af8 <HAL_RCC_OscConfig+0x288>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a7d      	ldr	r2, [pc, #500]	@ (8001af8 <HAL_RCC_OscConfig+0x288>)
 8001904:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001908:	6013      	str	r3, [r2, #0]
 800190a:	e01d      	b.n	8001948 <HAL_RCC_OscConfig+0xd8>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001914:	d10c      	bne.n	8001930 <HAL_RCC_OscConfig+0xc0>
 8001916:	4b78      	ldr	r3, [pc, #480]	@ (8001af8 <HAL_RCC_OscConfig+0x288>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a77      	ldr	r2, [pc, #476]	@ (8001af8 <HAL_RCC_OscConfig+0x288>)
 800191c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001920:	6013      	str	r3, [r2, #0]
 8001922:	4b75      	ldr	r3, [pc, #468]	@ (8001af8 <HAL_RCC_OscConfig+0x288>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a74      	ldr	r2, [pc, #464]	@ (8001af8 <HAL_RCC_OscConfig+0x288>)
 8001928:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800192c:	6013      	str	r3, [r2, #0]
 800192e:	e00b      	b.n	8001948 <HAL_RCC_OscConfig+0xd8>
 8001930:	4b71      	ldr	r3, [pc, #452]	@ (8001af8 <HAL_RCC_OscConfig+0x288>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a70      	ldr	r2, [pc, #448]	@ (8001af8 <HAL_RCC_OscConfig+0x288>)
 8001936:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800193a:	6013      	str	r3, [r2, #0]
 800193c:	4b6e      	ldr	r3, [pc, #440]	@ (8001af8 <HAL_RCC_OscConfig+0x288>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a6d      	ldr	r2, [pc, #436]	@ (8001af8 <HAL_RCC_OscConfig+0x288>)
 8001942:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001946:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d013      	beq.n	8001978 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001950:	f7ff fbac 	bl	80010ac <HAL_GetTick>
 8001954:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001956:	e008      	b.n	800196a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001958:	f7ff fba8 	bl	80010ac <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b64      	cmp	r3, #100	@ 0x64
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e3d4      	b.n	8002114 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800196a:	4b63      	ldr	r3, [pc, #396]	@ (8001af8 <HAL_RCC_OscConfig+0x288>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d0f0      	beq.n	8001958 <HAL_RCC_OscConfig+0xe8>
 8001976:	e014      	b.n	80019a2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001978:	f7ff fb98 	bl	80010ac <HAL_GetTick>
 800197c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800197e:	e008      	b.n	8001992 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001980:	f7ff fb94 	bl	80010ac <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b64      	cmp	r3, #100	@ 0x64
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e3c0      	b.n	8002114 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001992:	4b59      	ldr	r3, [pc, #356]	@ (8001af8 <HAL_RCC_OscConfig+0x288>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d1f0      	bne.n	8001980 <HAL_RCC_OscConfig+0x110>
 800199e:	e000      	b.n	80019a2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	f000 80ca 	beq.w	8001b44 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019b0:	4b51      	ldr	r3, [pc, #324]	@ (8001af8 <HAL_RCC_OscConfig+0x288>)
 80019b2:	691b      	ldr	r3, [r3, #16]
 80019b4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80019b8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80019ba:	4b4f      	ldr	r3, [pc, #316]	@ (8001af8 <HAL_RCC_OscConfig+0x288>)
 80019bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019be:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80019c0:	6a3b      	ldr	r3, [r7, #32]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d007      	beq.n	80019d6 <HAL_RCC_OscConfig+0x166>
 80019c6:	6a3b      	ldr	r3, [r7, #32]
 80019c8:	2b18      	cmp	r3, #24
 80019ca:	d156      	bne.n	8001a7a <HAL_RCC_OscConfig+0x20a>
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	f003 0303 	and.w	r3, r3, #3
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d151      	bne.n	8001a7a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019d6:	4b48      	ldr	r3, [pc, #288]	@ (8001af8 <HAL_RCC_OscConfig+0x288>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0304 	and.w	r3, r3, #4
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d005      	beq.n	80019ee <HAL_RCC_OscConfig+0x17e>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d101      	bne.n	80019ee <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e392      	b.n	8002114 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80019ee:	4b42      	ldr	r3, [pc, #264]	@ (8001af8 <HAL_RCC_OscConfig+0x288>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f023 0219 	bic.w	r2, r3, #25
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	68db      	ldr	r3, [r3, #12]
 80019fa:	493f      	ldr	r1, [pc, #252]	@ (8001af8 <HAL_RCC_OscConfig+0x288>)
 80019fc:	4313      	orrs	r3, r2
 80019fe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a00:	f7ff fb54 	bl	80010ac <HAL_GetTick>
 8001a04:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a06:	e008      	b.n	8001a1a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a08:	f7ff fb50 	bl	80010ac <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e37c      	b.n	8002114 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a1a:	4b37      	ldr	r3, [pc, #220]	@ (8001af8 <HAL_RCC_OscConfig+0x288>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0304 	and.w	r3, r3, #4
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d0f0      	beq.n	8001a08 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a26:	f7ff fb71 	bl	800110c <HAL_GetREVID>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d817      	bhi.n	8001a64 <HAL_RCC_OscConfig+0x1f4>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	691b      	ldr	r3, [r3, #16]
 8001a38:	2b40      	cmp	r3, #64	@ 0x40
 8001a3a:	d108      	bne.n	8001a4e <HAL_RCC_OscConfig+0x1de>
 8001a3c:	4b2e      	ldr	r3, [pc, #184]	@ (8001af8 <HAL_RCC_OscConfig+0x288>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001a44:	4a2c      	ldr	r2, [pc, #176]	@ (8001af8 <HAL_RCC_OscConfig+0x288>)
 8001a46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a4a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a4c:	e07a      	b.n	8001b44 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a4e:	4b2a      	ldr	r3, [pc, #168]	@ (8001af8 <HAL_RCC_OscConfig+0x288>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	691b      	ldr	r3, [r3, #16]
 8001a5a:	031b      	lsls	r3, r3, #12
 8001a5c:	4926      	ldr	r1, [pc, #152]	@ (8001af8 <HAL_RCC_OscConfig+0x288>)
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a62:	e06f      	b.n	8001b44 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a64:	4b24      	ldr	r3, [pc, #144]	@ (8001af8 <HAL_RCC_OscConfig+0x288>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	691b      	ldr	r3, [r3, #16]
 8001a70:	061b      	lsls	r3, r3, #24
 8001a72:	4921      	ldr	r1, [pc, #132]	@ (8001af8 <HAL_RCC_OscConfig+0x288>)
 8001a74:	4313      	orrs	r3, r2
 8001a76:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a78:	e064      	b.n	8001b44 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d047      	beq.n	8001b12 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001a82:	4b1d      	ldr	r3, [pc, #116]	@ (8001af8 <HAL_RCC_OscConfig+0x288>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f023 0219 	bic.w	r2, r3, #25
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	491a      	ldr	r1, [pc, #104]	@ (8001af8 <HAL_RCC_OscConfig+0x288>)
 8001a90:	4313      	orrs	r3, r2
 8001a92:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a94:	f7ff fb0a 	bl	80010ac <HAL_GetTick>
 8001a98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a9a:	e008      	b.n	8001aae <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a9c:	f7ff fb06 	bl	80010ac <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e332      	b.n	8002114 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001aae:	4b12      	ldr	r3, [pc, #72]	@ (8001af8 <HAL_RCC_OscConfig+0x288>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0304 	and.w	r3, r3, #4
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d0f0      	beq.n	8001a9c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aba:	f7ff fb27 	bl	800110c <HAL_GetREVID>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d819      	bhi.n	8001afc <HAL_RCC_OscConfig+0x28c>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	691b      	ldr	r3, [r3, #16]
 8001acc:	2b40      	cmp	r3, #64	@ 0x40
 8001ace:	d108      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x272>
 8001ad0:	4b09      	ldr	r3, [pc, #36]	@ (8001af8 <HAL_RCC_OscConfig+0x288>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001ad8:	4a07      	ldr	r2, [pc, #28]	@ (8001af8 <HAL_RCC_OscConfig+0x288>)
 8001ada:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ade:	6053      	str	r3, [r2, #4]
 8001ae0:	e030      	b.n	8001b44 <HAL_RCC_OscConfig+0x2d4>
 8001ae2:	4b05      	ldr	r3, [pc, #20]	@ (8001af8 <HAL_RCC_OscConfig+0x288>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	031b      	lsls	r3, r3, #12
 8001af0:	4901      	ldr	r1, [pc, #4]	@ (8001af8 <HAL_RCC_OscConfig+0x288>)
 8001af2:	4313      	orrs	r3, r2
 8001af4:	604b      	str	r3, [r1, #4]
 8001af6:	e025      	b.n	8001b44 <HAL_RCC_OscConfig+0x2d4>
 8001af8:	58024400 	.word	0x58024400
 8001afc:	4b9a      	ldr	r3, [pc, #616]	@ (8001d68 <HAL_RCC_OscConfig+0x4f8>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	691b      	ldr	r3, [r3, #16]
 8001b08:	061b      	lsls	r3, r3, #24
 8001b0a:	4997      	ldr	r1, [pc, #604]	@ (8001d68 <HAL_RCC_OscConfig+0x4f8>)
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	604b      	str	r3, [r1, #4]
 8001b10:	e018      	b.n	8001b44 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b12:	4b95      	ldr	r3, [pc, #596]	@ (8001d68 <HAL_RCC_OscConfig+0x4f8>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a94      	ldr	r2, [pc, #592]	@ (8001d68 <HAL_RCC_OscConfig+0x4f8>)
 8001b18:	f023 0301 	bic.w	r3, r3, #1
 8001b1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b1e:	f7ff fac5 	bl	80010ac <HAL_GetTick>
 8001b22:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b24:	e008      	b.n	8001b38 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b26:	f7ff fac1 	bl	80010ac <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d901      	bls.n	8001b38 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e2ed      	b.n	8002114 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b38:	4b8b      	ldr	r3, [pc, #556]	@ (8001d68 <HAL_RCC_OscConfig+0x4f8>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0304 	and.w	r3, r3, #4
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d1f0      	bne.n	8001b26 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0310 	and.w	r3, r3, #16
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	f000 80a9 	beq.w	8001ca4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b52:	4b85      	ldr	r3, [pc, #532]	@ (8001d68 <HAL_RCC_OscConfig+0x4f8>)
 8001b54:	691b      	ldr	r3, [r3, #16]
 8001b56:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001b5a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001b5c:	4b82      	ldr	r3, [pc, #520]	@ (8001d68 <HAL_RCC_OscConfig+0x4f8>)
 8001b5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b60:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	2b08      	cmp	r3, #8
 8001b66:	d007      	beq.n	8001b78 <HAL_RCC_OscConfig+0x308>
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	2b18      	cmp	r3, #24
 8001b6c:	d13a      	bne.n	8001be4 <HAL_RCC_OscConfig+0x374>
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	f003 0303 	and.w	r3, r3, #3
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d135      	bne.n	8001be4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b78:	4b7b      	ldr	r3, [pc, #492]	@ (8001d68 <HAL_RCC_OscConfig+0x4f8>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d005      	beq.n	8001b90 <HAL_RCC_OscConfig+0x320>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	69db      	ldr	r3, [r3, #28]
 8001b88:	2b80      	cmp	r3, #128	@ 0x80
 8001b8a:	d001      	beq.n	8001b90 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e2c1      	b.n	8002114 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b90:	f7ff fabc 	bl	800110c <HAL_GetREVID>
 8001b94:	4603      	mov	r3, r0
 8001b96:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d817      	bhi.n	8001bce <HAL_RCC_OscConfig+0x35e>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6a1b      	ldr	r3, [r3, #32]
 8001ba2:	2b20      	cmp	r3, #32
 8001ba4:	d108      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x348>
 8001ba6:	4b70      	ldr	r3, [pc, #448]	@ (8001d68 <HAL_RCC_OscConfig+0x4f8>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001bae:	4a6e      	ldr	r2, [pc, #440]	@ (8001d68 <HAL_RCC_OscConfig+0x4f8>)
 8001bb0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001bb4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001bb6:	e075      	b.n	8001ca4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001bb8:	4b6b      	ldr	r3, [pc, #428]	@ (8001d68 <HAL_RCC_OscConfig+0x4f8>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6a1b      	ldr	r3, [r3, #32]
 8001bc4:	069b      	lsls	r3, r3, #26
 8001bc6:	4968      	ldr	r1, [pc, #416]	@ (8001d68 <HAL_RCC_OscConfig+0x4f8>)
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001bcc:	e06a      	b.n	8001ca4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001bce:	4b66      	ldr	r3, [pc, #408]	@ (8001d68 <HAL_RCC_OscConfig+0x4f8>)
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a1b      	ldr	r3, [r3, #32]
 8001bda:	061b      	lsls	r3, r3, #24
 8001bdc:	4962      	ldr	r1, [pc, #392]	@ (8001d68 <HAL_RCC_OscConfig+0x4f8>)
 8001bde:	4313      	orrs	r3, r2
 8001be0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001be2:	e05f      	b.n	8001ca4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	69db      	ldr	r3, [r3, #28]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d042      	beq.n	8001c72 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001bec:	4b5e      	ldr	r3, [pc, #376]	@ (8001d68 <HAL_RCC_OscConfig+0x4f8>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a5d      	ldr	r2, [pc, #372]	@ (8001d68 <HAL_RCC_OscConfig+0x4f8>)
 8001bf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001bf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf8:	f7ff fa58 	bl	80010ac <HAL_GetTick>
 8001bfc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001bfe:	e008      	b.n	8001c12 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001c00:	f7ff fa54 	bl	80010ac <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e280      	b.n	8002114 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001c12:	4b55      	ldr	r3, [pc, #340]	@ (8001d68 <HAL_RCC_OscConfig+0x4f8>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d0f0      	beq.n	8001c00 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c1e:	f7ff fa75 	bl	800110c <HAL_GetREVID>
 8001c22:	4603      	mov	r3, r0
 8001c24:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d817      	bhi.n	8001c5c <HAL_RCC_OscConfig+0x3ec>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6a1b      	ldr	r3, [r3, #32]
 8001c30:	2b20      	cmp	r3, #32
 8001c32:	d108      	bne.n	8001c46 <HAL_RCC_OscConfig+0x3d6>
 8001c34:	4b4c      	ldr	r3, [pc, #304]	@ (8001d68 <HAL_RCC_OscConfig+0x4f8>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001c3c:	4a4a      	ldr	r2, [pc, #296]	@ (8001d68 <HAL_RCC_OscConfig+0x4f8>)
 8001c3e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001c42:	6053      	str	r3, [r2, #4]
 8001c44:	e02e      	b.n	8001ca4 <HAL_RCC_OscConfig+0x434>
 8001c46:	4b48      	ldr	r3, [pc, #288]	@ (8001d68 <HAL_RCC_OscConfig+0x4f8>)
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a1b      	ldr	r3, [r3, #32]
 8001c52:	069b      	lsls	r3, r3, #26
 8001c54:	4944      	ldr	r1, [pc, #272]	@ (8001d68 <HAL_RCC_OscConfig+0x4f8>)
 8001c56:	4313      	orrs	r3, r2
 8001c58:	604b      	str	r3, [r1, #4]
 8001c5a:	e023      	b.n	8001ca4 <HAL_RCC_OscConfig+0x434>
 8001c5c:	4b42      	ldr	r3, [pc, #264]	@ (8001d68 <HAL_RCC_OscConfig+0x4f8>)
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a1b      	ldr	r3, [r3, #32]
 8001c68:	061b      	lsls	r3, r3, #24
 8001c6a:	493f      	ldr	r1, [pc, #252]	@ (8001d68 <HAL_RCC_OscConfig+0x4f8>)
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	60cb      	str	r3, [r1, #12]
 8001c70:	e018      	b.n	8001ca4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001c72:	4b3d      	ldr	r3, [pc, #244]	@ (8001d68 <HAL_RCC_OscConfig+0x4f8>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a3c      	ldr	r2, [pc, #240]	@ (8001d68 <HAL_RCC_OscConfig+0x4f8>)
 8001c78:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001c7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c7e:	f7ff fa15 	bl	80010ac <HAL_GetTick>
 8001c82:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001c84:	e008      	b.n	8001c98 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001c86:	f7ff fa11 	bl	80010ac <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d901      	bls.n	8001c98 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e23d      	b.n	8002114 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001c98:	4b33      	ldr	r3, [pc, #204]	@ (8001d68 <HAL_RCC_OscConfig+0x4f8>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d1f0      	bne.n	8001c86 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0308 	and.w	r3, r3, #8
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d036      	beq.n	8001d1e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	695b      	ldr	r3, [r3, #20]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d019      	beq.n	8001cec <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cb8:	4b2b      	ldr	r3, [pc, #172]	@ (8001d68 <HAL_RCC_OscConfig+0x4f8>)
 8001cba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cbc:	4a2a      	ldr	r2, [pc, #168]	@ (8001d68 <HAL_RCC_OscConfig+0x4f8>)
 8001cbe:	f043 0301 	orr.w	r3, r3, #1
 8001cc2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cc4:	f7ff f9f2 	bl	80010ac <HAL_GetTick>
 8001cc8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001cca:	e008      	b.n	8001cde <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ccc:	f7ff f9ee 	bl	80010ac <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e21a      	b.n	8002114 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001cde:	4b22      	ldr	r3, [pc, #136]	@ (8001d68 <HAL_RCC_OscConfig+0x4f8>)
 8001ce0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d0f0      	beq.n	8001ccc <HAL_RCC_OscConfig+0x45c>
 8001cea:	e018      	b.n	8001d1e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cec:	4b1e      	ldr	r3, [pc, #120]	@ (8001d68 <HAL_RCC_OscConfig+0x4f8>)
 8001cee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cf0:	4a1d      	ldr	r2, [pc, #116]	@ (8001d68 <HAL_RCC_OscConfig+0x4f8>)
 8001cf2:	f023 0301 	bic.w	r3, r3, #1
 8001cf6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf8:	f7ff f9d8 	bl	80010ac <HAL_GetTick>
 8001cfc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001cfe:	e008      	b.n	8001d12 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d00:	f7ff f9d4 	bl	80010ac <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e200      	b.n	8002114 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001d12:	4b15      	ldr	r3, [pc, #84]	@ (8001d68 <HAL_RCC_OscConfig+0x4f8>)
 8001d14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d1f0      	bne.n	8001d00 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0320 	and.w	r3, r3, #32
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d039      	beq.n	8001d9e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	699b      	ldr	r3, [r3, #24]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d01c      	beq.n	8001d6c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d32:	4b0d      	ldr	r3, [pc, #52]	@ (8001d68 <HAL_RCC_OscConfig+0x4f8>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a0c      	ldr	r2, [pc, #48]	@ (8001d68 <HAL_RCC_OscConfig+0x4f8>)
 8001d38:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001d3c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001d3e:	f7ff f9b5 	bl	80010ac <HAL_GetTick>
 8001d42:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001d44:	e008      	b.n	8001d58 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d46:	f7ff f9b1 	bl	80010ac <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d901      	bls.n	8001d58 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e1dd      	b.n	8002114 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001d58:	4b03      	ldr	r3, [pc, #12]	@ (8001d68 <HAL_RCC_OscConfig+0x4f8>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d0f0      	beq.n	8001d46 <HAL_RCC_OscConfig+0x4d6>
 8001d64:	e01b      	b.n	8001d9e <HAL_RCC_OscConfig+0x52e>
 8001d66:	bf00      	nop
 8001d68:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d6c:	4b9b      	ldr	r3, [pc, #620]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a9a      	ldr	r2, [pc, #616]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001d72:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001d76:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001d78:	f7ff f998 	bl	80010ac <HAL_GetTick>
 8001d7c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001d7e:	e008      	b.n	8001d92 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d80:	f7ff f994 	bl	80010ac <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e1c0      	b.n	8002114 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001d92:	4b92      	ldr	r3, [pc, #584]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1f0      	bne.n	8001d80 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0304 	and.w	r3, r3, #4
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	f000 8081 	beq.w	8001eae <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001dac:	4b8c      	ldr	r3, [pc, #560]	@ (8001fe0 <HAL_RCC_OscConfig+0x770>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a8b      	ldr	r2, [pc, #556]	@ (8001fe0 <HAL_RCC_OscConfig+0x770>)
 8001db2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001db6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001db8:	f7ff f978 	bl	80010ac <HAL_GetTick>
 8001dbc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dc0:	f7ff f974 	bl	80010ac <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b64      	cmp	r3, #100	@ 0x64
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e1a0      	b.n	8002114 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001dd2:	4b83      	ldr	r3, [pc, #524]	@ (8001fe0 <HAL_RCC_OscConfig+0x770>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d0f0      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d106      	bne.n	8001df4 <HAL_RCC_OscConfig+0x584>
 8001de6:	4b7d      	ldr	r3, [pc, #500]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001de8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dea:	4a7c      	ldr	r2, [pc, #496]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001dec:	f043 0301 	orr.w	r3, r3, #1
 8001df0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001df2:	e02d      	b.n	8001e50 <HAL_RCC_OscConfig+0x5e0>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d10c      	bne.n	8001e16 <HAL_RCC_OscConfig+0x5a6>
 8001dfc:	4b77      	ldr	r3, [pc, #476]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001dfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e00:	4a76      	ldr	r2, [pc, #472]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001e02:	f023 0301 	bic.w	r3, r3, #1
 8001e06:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e08:	4b74      	ldr	r3, [pc, #464]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001e0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e0c:	4a73      	ldr	r2, [pc, #460]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001e0e:	f023 0304 	bic.w	r3, r3, #4
 8001e12:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e14:	e01c      	b.n	8001e50 <HAL_RCC_OscConfig+0x5e0>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	2b05      	cmp	r3, #5
 8001e1c:	d10c      	bne.n	8001e38 <HAL_RCC_OscConfig+0x5c8>
 8001e1e:	4b6f      	ldr	r3, [pc, #444]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001e20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e22:	4a6e      	ldr	r2, [pc, #440]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001e24:	f043 0304 	orr.w	r3, r3, #4
 8001e28:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e2a:	4b6c      	ldr	r3, [pc, #432]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001e2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e2e:	4a6b      	ldr	r2, [pc, #428]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001e30:	f043 0301 	orr.w	r3, r3, #1
 8001e34:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e36:	e00b      	b.n	8001e50 <HAL_RCC_OscConfig+0x5e0>
 8001e38:	4b68      	ldr	r3, [pc, #416]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001e3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e3c:	4a67      	ldr	r2, [pc, #412]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001e3e:	f023 0301 	bic.w	r3, r3, #1
 8001e42:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e44:	4b65      	ldr	r3, [pc, #404]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001e46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e48:	4a64      	ldr	r2, [pc, #400]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001e4a:	f023 0304 	bic.w	r3, r3, #4
 8001e4e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d015      	beq.n	8001e84 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e58:	f7ff f928 	bl	80010ac <HAL_GetTick>
 8001e5c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e5e:	e00a      	b.n	8001e76 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e60:	f7ff f924 	bl	80010ac <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e14e      	b.n	8002114 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e76:	4b59      	ldr	r3, [pc, #356]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001e78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d0ee      	beq.n	8001e60 <HAL_RCC_OscConfig+0x5f0>
 8001e82:	e014      	b.n	8001eae <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e84:	f7ff f912 	bl	80010ac <HAL_GetTick>
 8001e88:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e8a:	e00a      	b.n	8001ea2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e8c:	f7ff f90e 	bl	80010ac <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e138      	b.n	8002114 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001ea2:	4b4e      	ldr	r3, [pc, #312]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001ea4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d1ee      	bne.n	8001e8c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	f000 812d 	beq.w	8002112 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001eb8:	4b48      	ldr	r3, [pc, #288]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001eba:	691b      	ldr	r3, [r3, #16]
 8001ebc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001ec0:	2b18      	cmp	r3, #24
 8001ec2:	f000 80bd 	beq.w	8002040 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	f040 809e 	bne.w	800200c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ed0:	4b42      	ldr	r3, [pc, #264]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a41      	ldr	r2, [pc, #260]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001ed6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001eda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001edc:	f7ff f8e6 	bl	80010ac <HAL_GetTick>
 8001ee0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ee4:	f7ff f8e2 	bl	80010ac <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e10e      	b.n	8002114 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ef6:	4b39      	ldr	r3, [pc, #228]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1f0      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f02:	4b36      	ldr	r3, [pc, #216]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001f04:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f06:	4b37      	ldr	r3, [pc, #220]	@ (8001fe4 <HAL_RCC_OscConfig+0x774>)
 8001f08:	4013      	ands	r3, r2
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001f12:	0112      	lsls	r2, r2, #4
 8001f14:	430a      	orrs	r2, r1
 8001f16:	4931      	ldr	r1, [pc, #196]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	628b      	str	r3, [r1, #40]	@ 0x28
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f20:	3b01      	subs	r3, #1
 8001f22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	025b      	lsls	r3, r3, #9
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	431a      	orrs	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f36:	3b01      	subs	r3, #1
 8001f38:	041b      	lsls	r3, r3, #16
 8001f3a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001f3e:	431a      	orrs	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f44:	3b01      	subs	r3, #1
 8001f46:	061b      	lsls	r3, r3, #24
 8001f48:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001f4c:	4923      	ldr	r1, [pc, #140]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001f52:	4b22      	ldr	r3, [pc, #136]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f56:	4a21      	ldr	r2, [pc, #132]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001f58:	f023 0301 	bic.w	r3, r3, #1
 8001f5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001f5e:	4b1f      	ldr	r3, [pc, #124]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001f60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f62:	4b21      	ldr	r3, [pc, #132]	@ (8001fe8 <HAL_RCC_OscConfig+0x778>)
 8001f64:	4013      	ands	r3, r2
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001f6a:	00d2      	lsls	r2, r2, #3
 8001f6c:	491b      	ldr	r1, [pc, #108]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001f72:	4b1a      	ldr	r3, [pc, #104]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f76:	f023 020c 	bic.w	r2, r3, #12
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f7e:	4917      	ldr	r1, [pc, #92]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001f84:	4b15      	ldr	r3, [pc, #84]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f88:	f023 0202 	bic.w	r2, r3, #2
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f90:	4912      	ldr	r1, [pc, #72]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001f92:	4313      	orrs	r3, r2
 8001f94:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001f96:	4b11      	ldr	r3, [pc, #68]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f9a:	4a10      	ldr	r2, [pc, #64]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001f9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fa0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001fa2:	4b0e      	ldr	r3, [pc, #56]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fa6:	4a0d      	ldr	r2, [pc, #52]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001fa8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001fae:	4b0b      	ldr	r3, [pc, #44]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fb2:	4a0a      	ldr	r2, [pc, #40]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001fb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001fba:	4b08      	ldr	r3, [pc, #32]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fbe:	4a07      	ldr	r2, [pc, #28]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001fc0:	f043 0301 	orr.w	r3, r3, #1
 8001fc4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fc6:	4b05      	ldr	r3, [pc, #20]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a04      	ldr	r2, [pc, #16]	@ (8001fdc <HAL_RCC_OscConfig+0x76c>)
 8001fcc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001fd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd2:	f7ff f86b 	bl	80010ac <HAL_GetTick>
 8001fd6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001fd8:	e011      	b.n	8001ffe <HAL_RCC_OscConfig+0x78e>
 8001fda:	bf00      	nop
 8001fdc:	58024400 	.word	0x58024400
 8001fe0:	58024800 	.word	0x58024800
 8001fe4:	fffffc0c 	.word	0xfffffc0c
 8001fe8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fec:	f7ff f85e 	bl	80010ac <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e08a      	b.n	8002114 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ffe:	4b47      	ldr	r3, [pc, #284]	@ (800211c <HAL_RCC_OscConfig+0x8ac>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d0f0      	beq.n	8001fec <HAL_RCC_OscConfig+0x77c>
 800200a:	e082      	b.n	8002112 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800200c:	4b43      	ldr	r3, [pc, #268]	@ (800211c <HAL_RCC_OscConfig+0x8ac>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a42      	ldr	r2, [pc, #264]	@ (800211c <HAL_RCC_OscConfig+0x8ac>)
 8002012:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002016:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002018:	f7ff f848 	bl	80010ac <HAL_GetTick>
 800201c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002020:	f7ff f844 	bl	80010ac <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e070      	b.n	8002114 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002032:	4b3a      	ldr	r3, [pc, #232]	@ (800211c <HAL_RCC_OscConfig+0x8ac>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1f0      	bne.n	8002020 <HAL_RCC_OscConfig+0x7b0>
 800203e:	e068      	b.n	8002112 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002040:	4b36      	ldr	r3, [pc, #216]	@ (800211c <HAL_RCC_OscConfig+0x8ac>)
 8002042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002044:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002046:	4b35      	ldr	r3, [pc, #212]	@ (800211c <HAL_RCC_OscConfig+0x8ac>)
 8002048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800204a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002050:	2b01      	cmp	r3, #1
 8002052:	d031      	beq.n	80020b8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	f003 0203 	and.w	r2, r3, #3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800205e:	429a      	cmp	r2, r3
 8002060:	d12a      	bne.n	80020b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	091b      	lsrs	r3, r3, #4
 8002066:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800206e:	429a      	cmp	r2, r3
 8002070:	d122      	bne.n	80020b8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800207c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800207e:	429a      	cmp	r2, r3
 8002080:	d11a      	bne.n	80020b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	0a5b      	lsrs	r3, r3, #9
 8002086:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800208e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002090:	429a      	cmp	r2, r3
 8002092:	d111      	bne.n	80020b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	0c1b      	lsrs	r3, r3, #16
 8002098:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020a0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d108      	bne.n	80020b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	0e1b      	lsrs	r3, r3, #24
 80020aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020b2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d001      	beq.n	80020bc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e02b      	b.n	8002114 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80020bc:	4b17      	ldr	r3, [pc, #92]	@ (800211c <HAL_RCC_OscConfig+0x8ac>)
 80020be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020c0:	08db      	lsrs	r3, r3, #3
 80020c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80020c6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020cc:	693a      	ldr	r2, [r7, #16]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d01f      	beq.n	8002112 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80020d2:	4b12      	ldr	r3, [pc, #72]	@ (800211c <HAL_RCC_OscConfig+0x8ac>)
 80020d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020d6:	4a11      	ldr	r2, [pc, #68]	@ (800211c <HAL_RCC_OscConfig+0x8ac>)
 80020d8:	f023 0301 	bic.w	r3, r3, #1
 80020dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80020de:	f7fe ffe5 	bl	80010ac <HAL_GetTick>
 80020e2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80020e4:	bf00      	nop
 80020e6:	f7fe ffe1 	bl	80010ac <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d0f9      	beq.n	80020e6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80020f2:	4b0a      	ldr	r3, [pc, #40]	@ (800211c <HAL_RCC_OscConfig+0x8ac>)
 80020f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002120 <HAL_RCC_OscConfig+0x8b0>)
 80020f8:	4013      	ands	r3, r2
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80020fe:	00d2      	lsls	r2, r2, #3
 8002100:	4906      	ldr	r1, [pc, #24]	@ (800211c <HAL_RCC_OscConfig+0x8ac>)
 8002102:	4313      	orrs	r3, r2
 8002104:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002106:	4b05      	ldr	r3, [pc, #20]	@ (800211c <HAL_RCC_OscConfig+0x8ac>)
 8002108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800210a:	4a04      	ldr	r2, [pc, #16]	@ (800211c <HAL_RCC_OscConfig+0x8ac>)
 800210c:	f043 0301 	orr.w	r3, r3, #1
 8002110:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	3730      	adds	r7, #48	@ 0x30
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	58024400 	.word	0x58024400
 8002120:	ffff0007 	.word	0xffff0007

08002124 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b086      	sub	sp, #24
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d101      	bne.n	8002138 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e19c      	b.n	8002472 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002138:	4b8a      	ldr	r3, [pc, #552]	@ (8002364 <HAL_RCC_ClockConfig+0x240>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 030f 	and.w	r3, r3, #15
 8002140:	683a      	ldr	r2, [r7, #0]
 8002142:	429a      	cmp	r2, r3
 8002144:	d910      	bls.n	8002168 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002146:	4b87      	ldr	r3, [pc, #540]	@ (8002364 <HAL_RCC_ClockConfig+0x240>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f023 020f 	bic.w	r2, r3, #15
 800214e:	4985      	ldr	r1, [pc, #532]	@ (8002364 <HAL_RCC_ClockConfig+0x240>)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	4313      	orrs	r3, r2
 8002154:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002156:	4b83      	ldr	r3, [pc, #524]	@ (8002364 <HAL_RCC_ClockConfig+0x240>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 030f 	and.w	r3, r3, #15
 800215e:	683a      	ldr	r2, [r7, #0]
 8002160:	429a      	cmp	r2, r3
 8002162:	d001      	beq.n	8002168 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e184      	b.n	8002472 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	2b00      	cmp	r3, #0
 8002172:	d010      	beq.n	8002196 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	691a      	ldr	r2, [r3, #16]
 8002178:	4b7b      	ldr	r3, [pc, #492]	@ (8002368 <HAL_RCC_ClockConfig+0x244>)
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002180:	429a      	cmp	r2, r3
 8002182:	d908      	bls.n	8002196 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002184:	4b78      	ldr	r3, [pc, #480]	@ (8002368 <HAL_RCC_ClockConfig+0x244>)
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	691b      	ldr	r3, [r3, #16]
 8002190:	4975      	ldr	r1, [pc, #468]	@ (8002368 <HAL_RCC_ClockConfig+0x244>)
 8002192:	4313      	orrs	r3, r2
 8002194:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0308 	and.w	r3, r3, #8
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d010      	beq.n	80021c4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	695a      	ldr	r2, [r3, #20]
 80021a6:	4b70      	ldr	r3, [pc, #448]	@ (8002368 <HAL_RCC_ClockConfig+0x244>)
 80021a8:	69db      	ldr	r3, [r3, #28]
 80021aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d908      	bls.n	80021c4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80021b2:	4b6d      	ldr	r3, [pc, #436]	@ (8002368 <HAL_RCC_ClockConfig+0x244>)
 80021b4:	69db      	ldr	r3, [r3, #28]
 80021b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	695b      	ldr	r3, [r3, #20]
 80021be:	496a      	ldr	r1, [pc, #424]	@ (8002368 <HAL_RCC_ClockConfig+0x244>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0310 	and.w	r3, r3, #16
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d010      	beq.n	80021f2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	699a      	ldr	r2, [r3, #24]
 80021d4:	4b64      	ldr	r3, [pc, #400]	@ (8002368 <HAL_RCC_ClockConfig+0x244>)
 80021d6:	69db      	ldr	r3, [r3, #28]
 80021d8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80021dc:	429a      	cmp	r2, r3
 80021de:	d908      	bls.n	80021f2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80021e0:	4b61      	ldr	r3, [pc, #388]	@ (8002368 <HAL_RCC_ClockConfig+0x244>)
 80021e2:	69db      	ldr	r3, [r3, #28]
 80021e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	495e      	ldr	r1, [pc, #376]	@ (8002368 <HAL_RCC_ClockConfig+0x244>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0320 	and.w	r3, r3, #32
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d010      	beq.n	8002220 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	69da      	ldr	r2, [r3, #28]
 8002202:	4b59      	ldr	r3, [pc, #356]	@ (8002368 <HAL_RCC_ClockConfig+0x244>)
 8002204:	6a1b      	ldr	r3, [r3, #32]
 8002206:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800220a:	429a      	cmp	r2, r3
 800220c:	d908      	bls.n	8002220 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800220e:	4b56      	ldr	r3, [pc, #344]	@ (8002368 <HAL_RCC_ClockConfig+0x244>)
 8002210:	6a1b      	ldr	r3, [r3, #32]
 8002212:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	69db      	ldr	r3, [r3, #28]
 800221a:	4953      	ldr	r1, [pc, #332]	@ (8002368 <HAL_RCC_ClockConfig+0x244>)
 800221c:	4313      	orrs	r3, r2
 800221e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0302 	and.w	r3, r3, #2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d010      	beq.n	800224e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	68da      	ldr	r2, [r3, #12]
 8002230:	4b4d      	ldr	r3, [pc, #308]	@ (8002368 <HAL_RCC_ClockConfig+0x244>)
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	f003 030f 	and.w	r3, r3, #15
 8002238:	429a      	cmp	r2, r3
 800223a:	d908      	bls.n	800224e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800223c:	4b4a      	ldr	r3, [pc, #296]	@ (8002368 <HAL_RCC_ClockConfig+0x244>)
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	f023 020f 	bic.w	r2, r3, #15
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	4947      	ldr	r1, [pc, #284]	@ (8002368 <HAL_RCC_ClockConfig+0x244>)
 800224a:	4313      	orrs	r3, r2
 800224c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	2b00      	cmp	r3, #0
 8002258:	d055      	beq.n	8002306 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800225a:	4b43      	ldr	r3, [pc, #268]	@ (8002368 <HAL_RCC_ClockConfig+0x244>)
 800225c:	699b      	ldr	r3, [r3, #24]
 800225e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	4940      	ldr	r1, [pc, #256]	@ (8002368 <HAL_RCC_ClockConfig+0x244>)
 8002268:	4313      	orrs	r3, r2
 800226a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	2b02      	cmp	r3, #2
 8002272:	d107      	bne.n	8002284 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002274:	4b3c      	ldr	r3, [pc, #240]	@ (8002368 <HAL_RCC_ClockConfig+0x244>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d121      	bne.n	80022c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e0f6      	b.n	8002472 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	2b03      	cmp	r3, #3
 800228a:	d107      	bne.n	800229c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800228c:	4b36      	ldr	r3, [pc, #216]	@ (8002368 <HAL_RCC_ClockConfig+0x244>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d115      	bne.n	80022c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e0ea      	b.n	8002472 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d107      	bne.n	80022b4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80022a4:	4b30      	ldr	r3, [pc, #192]	@ (8002368 <HAL_RCC_ClockConfig+0x244>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d109      	bne.n	80022c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e0de      	b.n	8002472 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022b4:	4b2c      	ldr	r3, [pc, #176]	@ (8002368 <HAL_RCC_ClockConfig+0x244>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0304 	and.w	r3, r3, #4
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d101      	bne.n	80022c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e0d6      	b.n	8002472 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80022c4:	4b28      	ldr	r3, [pc, #160]	@ (8002368 <HAL_RCC_ClockConfig+0x244>)
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	f023 0207 	bic.w	r2, r3, #7
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	4925      	ldr	r1, [pc, #148]	@ (8002368 <HAL_RCC_ClockConfig+0x244>)
 80022d2:	4313      	orrs	r3, r2
 80022d4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022d6:	f7fe fee9 	bl	80010ac <HAL_GetTick>
 80022da:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022dc:	e00a      	b.n	80022f4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022de:	f7fe fee5 	bl	80010ac <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d901      	bls.n	80022f4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e0be      	b.n	8002472 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022f4:	4b1c      	ldr	r3, [pc, #112]	@ (8002368 <HAL_RCC_ClockConfig+0x244>)
 80022f6:	691b      	ldr	r3, [r3, #16]
 80022f8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	00db      	lsls	r3, r3, #3
 8002302:	429a      	cmp	r2, r3
 8002304:	d1eb      	bne.n	80022de <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b00      	cmp	r3, #0
 8002310:	d010      	beq.n	8002334 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	68da      	ldr	r2, [r3, #12]
 8002316:	4b14      	ldr	r3, [pc, #80]	@ (8002368 <HAL_RCC_ClockConfig+0x244>)
 8002318:	699b      	ldr	r3, [r3, #24]
 800231a:	f003 030f 	and.w	r3, r3, #15
 800231e:	429a      	cmp	r2, r3
 8002320:	d208      	bcs.n	8002334 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002322:	4b11      	ldr	r3, [pc, #68]	@ (8002368 <HAL_RCC_ClockConfig+0x244>)
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	f023 020f 	bic.w	r2, r3, #15
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	490e      	ldr	r1, [pc, #56]	@ (8002368 <HAL_RCC_ClockConfig+0x244>)
 8002330:	4313      	orrs	r3, r2
 8002332:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002334:	4b0b      	ldr	r3, [pc, #44]	@ (8002364 <HAL_RCC_ClockConfig+0x240>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 030f 	and.w	r3, r3, #15
 800233c:	683a      	ldr	r2, [r7, #0]
 800233e:	429a      	cmp	r2, r3
 8002340:	d214      	bcs.n	800236c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002342:	4b08      	ldr	r3, [pc, #32]	@ (8002364 <HAL_RCC_ClockConfig+0x240>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f023 020f 	bic.w	r2, r3, #15
 800234a:	4906      	ldr	r1, [pc, #24]	@ (8002364 <HAL_RCC_ClockConfig+0x240>)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	4313      	orrs	r3, r2
 8002350:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002352:	4b04      	ldr	r3, [pc, #16]	@ (8002364 <HAL_RCC_ClockConfig+0x240>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 030f 	and.w	r3, r3, #15
 800235a:	683a      	ldr	r2, [r7, #0]
 800235c:	429a      	cmp	r2, r3
 800235e:	d005      	beq.n	800236c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e086      	b.n	8002472 <HAL_RCC_ClockConfig+0x34e>
 8002364:	52002000 	.word	0x52002000
 8002368:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0304 	and.w	r3, r3, #4
 8002374:	2b00      	cmp	r3, #0
 8002376:	d010      	beq.n	800239a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	691a      	ldr	r2, [r3, #16]
 800237c:	4b3f      	ldr	r3, [pc, #252]	@ (800247c <HAL_RCC_ClockConfig+0x358>)
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002384:	429a      	cmp	r2, r3
 8002386:	d208      	bcs.n	800239a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002388:	4b3c      	ldr	r3, [pc, #240]	@ (800247c <HAL_RCC_ClockConfig+0x358>)
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	4939      	ldr	r1, [pc, #228]	@ (800247c <HAL_RCC_ClockConfig+0x358>)
 8002396:	4313      	orrs	r3, r2
 8002398:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0308 	and.w	r3, r3, #8
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d010      	beq.n	80023c8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	695a      	ldr	r2, [r3, #20]
 80023aa:	4b34      	ldr	r3, [pc, #208]	@ (800247c <HAL_RCC_ClockConfig+0x358>)
 80023ac:	69db      	ldr	r3, [r3, #28]
 80023ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d208      	bcs.n	80023c8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80023b6:	4b31      	ldr	r3, [pc, #196]	@ (800247c <HAL_RCC_ClockConfig+0x358>)
 80023b8:	69db      	ldr	r3, [r3, #28]
 80023ba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	695b      	ldr	r3, [r3, #20]
 80023c2:	492e      	ldr	r1, [pc, #184]	@ (800247c <HAL_RCC_ClockConfig+0x358>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0310 	and.w	r3, r3, #16
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d010      	beq.n	80023f6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	699a      	ldr	r2, [r3, #24]
 80023d8:	4b28      	ldr	r3, [pc, #160]	@ (800247c <HAL_RCC_ClockConfig+0x358>)
 80023da:	69db      	ldr	r3, [r3, #28]
 80023dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d208      	bcs.n	80023f6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80023e4:	4b25      	ldr	r3, [pc, #148]	@ (800247c <HAL_RCC_ClockConfig+0x358>)
 80023e6:	69db      	ldr	r3, [r3, #28]
 80023e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	4922      	ldr	r1, [pc, #136]	@ (800247c <HAL_RCC_ClockConfig+0x358>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0320 	and.w	r3, r3, #32
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d010      	beq.n	8002424 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	69da      	ldr	r2, [r3, #28]
 8002406:	4b1d      	ldr	r3, [pc, #116]	@ (800247c <HAL_RCC_ClockConfig+0x358>)
 8002408:	6a1b      	ldr	r3, [r3, #32]
 800240a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800240e:	429a      	cmp	r2, r3
 8002410:	d208      	bcs.n	8002424 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002412:	4b1a      	ldr	r3, [pc, #104]	@ (800247c <HAL_RCC_ClockConfig+0x358>)
 8002414:	6a1b      	ldr	r3, [r3, #32]
 8002416:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	69db      	ldr	r3, [r3, #28]
 800241e:	4917      	ldr	r1, [pc, #92]	@ (800247c <HAL_RCC_ClockConfig+0x358>)
 8002420:	4313      	orrs	r3, r2
 8002422:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002424:	f000 f834 	bl	8002490 <HAL_RCC_GetSysClockFreq>
 8002428:	4602      	mov	r2, r0
 800242a:	4b14      	ldr	r3, [pc, #80]	@ (800247c <HAL_RCC_ClockConfig+0x358>)
 800242c:	699b      	ldr	r3, [r3, #24]
 800242e:	0a1b      	lsrs	r3, r3, #8
 8002430:	f003 030f 	and.w	r3, r3, #15
 8002434:	4912      	ldr	r1, [pc, #72]	@ (8002480 <HAL_RCC_ClockConfig+0x35c>)
 8002436:	5ccb      	ldrb	r3, [r1, r3]
 8002438:	f003 031f 	and.w	r3, r3, #31
 800243c:	fa22 f303 	lsr.w	r3, r2, r3
 8002440:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002442:	4b0e      	ldr	r3, [pc, #56]	@ (800247c <HAL_RCC_ClockConfig+0x358>)
 8002444:	699b      	ldr	r3, [r3, #24]
 8002446:	f003 030f 	and.w	r3, r3, #15
 800244a:	4a0d      	ldr	r2, [pc, #52]	@ (8002480 <HAL_RCC_ClockConfig+0x35c>)
 800244c:	5cd3      	ldrb	r3, [r2, r3]
 800244e:	f003 031f 	and.w	r3, r3, #31
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	fa22 f303 	lsr.w	r3, r2, r3
 8002458:	4a0a      	ldr	r2, [pc, #40]	@ (8002484 <HAL_RCC_ClockConfig+0x360>)
 800245a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800245c:	4a0a      	ldr	r2, [pc, #40]	@ (8002488 <HAL_RCC_ClockConfig+0x364>)
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002462:	4b0a      	ldr	r3, [pc, #40]	@ (800248c <HAL_RCC_ClockConfig+0x368>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4618      	mov	r0, r3
 8002468:	f7fe fdd6 	bl	8001018 <HAL_InitTick>
 800246c:	4603      	mov	r3, r0
 800246e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002470:	7bfb      	ldrb	r3, [r7, #15]
}
 8002472:	4618      	mov	r0, r3
 8002474:	3718      	adds	r7, #24
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	58024400 	.word	0x58024400
 8002480:	080061d0 	.word	0x080061d0
 8002484:	24000004 	.word	0x24000004
 8002488:	24000000 	.word	0x24000000
 800248c:	24000008 	.word	0x24000008

08002490 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002490:	b480      	push	{r7}
 8002492:	b089      	sub	sp, #36	@ 0x24
 8002494:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002496:	4bb3      	ldr	r3, [pc, #716]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002498:	691b      	ldr	r3, [r3, #16]
 800249a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800249e:	2b18      	cmp	r3, #24
 80024a0:	f200 8155 	bhi.w	800274e <HAL_RCC_GetSysClockFreq+0x2be>
 80024a4:	a201      	add	r2, pc, #4	@ (adr r2, 80024ac <HAL_RCC_GetSysClockFreq+0x1c>)
 80024a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024aa:	bf00      	nop
 80024ac:	08002511 	.word	0x08002511
 80024b0:	0800274f 	.word	0x0800274f
 80024b4:	0800274f 	.word	0x0800274f
 80024b8:	0800274f 	.word	0x0800274f
 80024bc:	0800274f 	.word	0x0800274f
 80024c0:	0800274f 	.word	0x0800274f
 80024c4:	0800274f 	.word	0x0800274f
 80024c8:	0800274f 	.word	0x0800274f
 80024cc:	08002537 	.word	0x08002537
 80024d0:	0800274f 	.word	0x0800274f
 80024d4:	0800274f 	.word	0x0800274f
 80024d8:	0800274f 	.word	0x0800274f
 80024dc:	0800274f 	.word	0x0800274f
 80024e0:	0800274f 	.word	0x0800274f
 80024e4:	0800274f 	.word	0x0800274f
 80024e8:	0800274f 	.word	0x0800274f
 80024ec:	0800253d 	.word	0x0800253d
 80024f0:	0800274f 	.word	0x0800274f
 80024f4:	0800274f 	.word	0x0800274f
 80024f8:	0800274f 	.word	0x0800274f
 80024fc:	0800274f 	.word	0x0800274f
 8002500:	0800274f 	.word	0x0800274f
 8002504:	0800274f 	.word	0x0800274f
 8002508:	0800274f 	.word	0x0800274f
 800250c:	08002543 	.word	0x08002543
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002510:	4b94      	ldr	r3, [pc, #592]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0320 	and.w	r3, r3, #32
 8002518:	2b00      	cmp	r3, #0
 800251a:	d009      	beq.n	8002530 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800251c:	4b91      	ldr	r3, [pc, #580]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	08db      	lsrs	r3, r3, #3
 8002522:	f003 0303 	and.w	r3, r3, #3
 8002526:	4a90      	ldr	r2, [pc, #576]	@ (8002768 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002528:	fa22 f303 	lsr.w	r3, r2, r3
 800252c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800252e:	e111      	b.n	8002754 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002530:	4b8d      	ldr	r3, [pc, #564]	@ (8002768 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002532:	61bb      	str	r3, [r7, #24]
      break;
 8002534:	e10e      	b.n	8002754 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002536:	4b8d      	ldr	r3, [pc, #564]	@ (800276c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002538:	61bb      	str	r3, [r7, #24]
      break;
 800253a:	e10b      	b.n	8002754 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800253c:	4b8c      	ldr	r3, [pc, #560]	@ (8002770 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800253e:	61bb      	str	r3, [r7, #24]
      break;
 8002540:	e108      	b.n	8002754 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002542:	4b88      	ldr	r3, [pc, #544]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002546:	f003 0303 	and.w	r3, r3, #3
 800254a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800254c:	4b85      	ldr	r3, [pc, #532]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800254e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002550:	091b      	lsrs	r3, r3, #4
 8002552:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002556:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002558:	4b82      	ldr	r3, [pc, #520]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800255a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800255c:	f003 0301 	and.w	r3, r3, #1
 8002560:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002562:	4b80      	ldr	r3, [pc, #512]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002564:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002566:	08db      	lsrs	r3, r3, #3
 8002568:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800256c:	68fa      	ldr	r2, [r7, #12]
 800256e:	fb02 f303 	mul.w	r3, r2, r3
 8002572:	ee07 3a90 	vmov	s15, r3
 8002576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800257a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	2b00      	cmp	r3, #0
 8002582:	f000 80e1 	beq.w	8002748 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	2b02      	cmp	r3, #2
 800258a:	f000 8083 	beq.w	8002694 <HAL_RCC_GetSysClockFreq+0x204>
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	2b02      	cmp	r3, #2
 8002592:	f200 80a1 	bhi.w	80026d8 <HAL_RCC_GetSysClockFreq+0x248>
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d003      	beq.n	80025a4 <HAL_RCC_GetSysClockFreq+0x114>
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d056      	beq.n	8002650 <HAL_RCC_GetSysClockFreq+0x1c0>
 80025a2:	e099      	b.n	80026d8 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80025a4:	4b6f      	ldr	r3, [pc, #444]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0320 	and.w	r3, r3, #32
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d02d      	beq.n	800260c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80025b0:	4b6c      	ldr	r3, [pc, #432]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	08db      	lsrs	r3, r3, #3
 80025b6:	f003 0303 	and.w	r3, r3, #3
 80025ba:	4a6b      	ldr	r2, [pc, #428]	@ (8002768 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80025bc:	fa22 f303 	lsr.w	r3, r2, r3
 80025c0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	ee07 3a90 	vmov	s15, r3
 80025c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	ee07 3a90 	vmov	s15, r3
 80025d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025da:	4b62      	ldr	r3, [pc, #392]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025e2:	ee07 3a90 	vmov	s15, r3
 80025e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80025ee:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002774 <HAL_RCC_GetSysClockFreq+0x2e4>
 80025f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80025fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002606:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800260a:	e087      	b.n	800271c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	ee07 3a90 	vmov	s15, r3
 8002612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002616:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002778 <HAL_RCC_GetSysClockFreq+0x2e8>
 800261a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800261e:	4b51      	ldr	r3, [pc, #324]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002626:	ee07 3a90 	vmov	s15, r3
 800262a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800262e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002632:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002774 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002636:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800263a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800263e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002642:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800264a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800264e:	e065      	b.n	800271c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	ee07 3a90 	vmov	s15, r3
 8002656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800265a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800277c <HAL_RCC_GetSysClockFreq+0x2ec>
 800265e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002662:	4b40      	ldr	r3, [pc, #256]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800266a:	ee07 3a90 	vmov	s15, r3
 800266e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002672:	ed97 6a02 	vldr	s12, [r7, #8]
 8002676:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002774 <HAL_RCC_GetSysClockFreq+0x2e4>
 800267a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800267e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002682:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002686:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800268a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800268e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002692:	e043      	b.n	800271c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	ee07 3a90 	vmov	s15, r3
 800269a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800269e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002780 <HAL_RCC_GetSysClockFreq+0x2f0>
 80026a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026a6:	4b2f      	ldr	r3, [pc, #188]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026ae:	ee07 3a90 	vmov	s15, r3
 80026b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80026ba:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002774 <HAL_RCC_GetSysClockFreq+0x2e4>
 80026be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80026c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80026ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80026d6:	e021      	b.n	800271c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	ee07 3a90 	vmov	s15, r3
 80026de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026e2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800277c <HAL_RCC_GetSysClockFreq+0x2ec>
 80026e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026ea:	4b1e      	ldr	r3, [pc, #120]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026f2:	ee07 3a90 	vmov	s15, r3
 80026f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80026fe:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002774 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002702:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002706:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800270a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800270e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002712:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002716:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800271a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800271c:	4b11      	ldr	r3, [pc, #68]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800271e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002720:	0a5b      	lsrs	r3, r3, #9
 8002722:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002726:	3301      	adds	r3, #1
 8002728:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	ee07 3a90 	vmov	s15, r3
 8002730:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002734:	edd7 6a07 	vldr	s13, [r7, #28]
 8002738:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800273c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002740:	ee17 3a90 	vmov	r3, s15
 8002744:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002746:	e005      	b.n	8002754 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002748:	2300      	movs	r3, #0
 800274a:	61bb      	str	r3, [r7, #24]
      break;
 800274c:	e002      	b.n	8002754 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800274e:	4b07      	ldr	r3, [pc, #28]	@ (800276c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002750:	61bb      	str	r3, [r7, #24]
      break;
 8002752:	bf00      	nop
  }

  return sysclockfreq;
 8002754:	69bb      	ldr	r3, [r7, #24]
}
 8002756:	4618      	mov	r0, r3
 8002758:	3724      	adds	r7, #36	@ 0x24
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	58024400 	.word	0x58024400
 8002768:	03d09000 	.word	0x03d09000
 800276c:	003d0900 	.word	0x003d0900
 8002770:	007a1200 	.word	0x007a1200
 8002774:	46000000 	.word	0x46000000
 8002778:	4c742400 	.word	0x4c742400
 800277c:	4a742400 	.word	0x4a742400
 8002780:	4af42400 	.word	0x4af42400

08002784 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800278a:	f7ff fe81 	bl	8002490 <HAL_RCC_GetSysClockFreq>
 800278e:	4602      	mov	r2, r0
 8002790:	4b10      	ldr	r3, [pc, #64]	@ (80027d4 <HAL_RCC_GetHCLKFreq+0x50>)
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	0a1b      	lsrs	r3, r3, #8
 8002796:	f003 030f 	and.w	r3, r3, #15
 800279a:	490f      	ldr	r1, [pc, #60]	@ (80027d8 <HAL_RCC_GetHCLKFreq+0x54>)
 800279c:	5ccb      	ldrb	r3, [r1, r3]
 800279e:	f003 031f 	and.w	r3, r3, #31
 80027a2:	fa22 f303 	lsr.w	r3, r2, r3
 80027a6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80027a8:	4b0a      	ldr	r3, [pc, #40]	@ (80027d4 <HAL_RCC_GetHCLKFreq+0x50>)
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	f003 030f 	and.w	r3, r3, #15
 80027b0:	4a09      	ldr	r2, [pc, #36]	@ (80027d8 <HAL_RCC_GetHCLKFreq+0x54>)
 80027b2:	5cd3      	ldrb	r3, [r2, r3]
 80027b4:	f003 031f 	and.w	r3, r3, #31
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	fa22 f303 	lsr.w	r3, r2, r3
 80027be:	4a07      	ldr	r2, [pc, #28]	@ (80027dc <HAL_RCC_GetHCLKFreq+0x58>)
 80027c0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80027c2:	4a07      	ldr	r2, [pc, #28]	@ (80027e0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80027c8:	4b04      	ldr	r3, [pc, #16]	@ (80027dc <HAL_RCC_GetHCLKFreq+0x58>)
 80027ca:	681b      	ldr	r3, [r3, #0]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3708      	adds	r7, #8
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	58024400 	.word	0x58024400
 80027d8:	080061d0 	.word	0x080061d0
 80027dc:	24000004 	.word	0x24000004
 80027e0:	24000000 	.word	0x24000000

080027e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80027e8:	f7ff ffcc 	bl	8002784 <HAL_RCC_GetHCLKFreq>
 80027ec:	4602      	mov	r2, r0
 80027ee:	4b06      	ldr	r3, [pc, #24]	@ (8002808 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	091b      	lsrs	r3, r3, #4
 80027f4:	f003 0307 	and.w	r3, r3, #7
 80027f8:	4904      	ldr	r1, [pc, #16]	@ (800280c <HAL_RCC_GetPCLK1Freq+0x28>)
 80027fa:	5ccb      	ldrb	r3, [r1, r3]
 80027fc:	f003 031f 	and.w	r3, r3, #31
 8002800:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002804:	4618      	mov	r0, r3
 8002806:	bd80      	pop	{r7, pc}
 8002808:	58024400 	.word	0x58024400
 800280c:	080061d0 	.word	0x080061d0

08002810 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002814:	f7ff ffb6 	bl	8002784 <HAL_RCC_GetHCLKFreq>
 8002818:	4602      	mov	r2, r0
 800281a:	4b06      	ldr	r3, [pc, #24]	@ (8002834 <HAL_RCC_GetPCLK2Freq+0x24>)
 800281c:	69db      	ldr	r3, [r3, #28]
 800281e:	0a1b      	lsrs	r3, r3, #8
 8002820:	f003 0307 	and.w	r3, r3, #7
 8002824:	4904      	ldr	r1, [pc, #16]	@ (8002838 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002826:	5ccb      	ldrb	r3, [r1, r3]
 8002828:	f003 031f 	and.w	r3, r3, #31
 800282c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002830:	4618      	mov	r0, r3
 8002832:	bd80      	pop	{r7, pc}
 8002834:	58024400 	.word	0x58024400
 8002838:	080061d0 	.word	0x080061d0

0800283c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800283c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002840:	b0ca      	sub	sp, #296	@ 0x128
 8002842:	af00      	add	r7, sp, #0
 8002844:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002848:	2300      	movs	r3, #0
 800284a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800284e:	2300      	movs	r3, #0
 8002850:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002854:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800285c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002860:	2500      	movs	r5, #0
 8002862:	ea54 0305 	orrs.w	r3, r4, r5
 8002866:	d049      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002868:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800286c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800286e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002872:	d02f      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002874:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002878:	d828      	bhi.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800287a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800287e:	d01a      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002880:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002884:	d822      	bhi.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002886:	2b00      	cmp	r3, #0
 8002888:	d003      	beq.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800288a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800288e:	d007      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002890:	e01c      	b.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002892:	4bb8      	ldr	r3, [pc, #736]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002896:	4ab7      	ldr	r2, [pc, #732]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002898:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800289c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800289e:	e01a      	b.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80028a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028a4:	3308      	adds	r3, #8
 80028a6:	2102      	movs	r1, #2
 80028a8:	4618      	mov	r0, r3
 80028aa:	f001 fca3 	bl	80041f4 <RCCEx_PLL2_Config>
 80028ae:	4603      	mov	r3, r0
 80028b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80028b4:	e00f      	b.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80028b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028ba:	3328      	adds	r3, #40	@ 0x28
 80028bc:	2102      	movs	r1, #2
 80028be:	4618      	mov	r0, r3
 80028c0:	f001 fd4a 	bl	8004358 <RCCEx_PLL3_Config>
 80028c4:	4603      	mov	r3, r0
 80028c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80028ca:	e004      	b.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80028d2:	e000      	b.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80028d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d10a      	bne.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80028de:	4ba5      	ldr	r3, [pc, #660]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028e2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80028e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80028ec:	4aa1      	ldr	r2, [pc, #644]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028ee:	430b      	orrs	r3, r1
 80028f0:	6513      	str	r3, [r2, #80]	@ 0x50
 80028f2:	e003      	b.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80028f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80028fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002904:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002908:	f04f 0900 	mov.w	r9, #0
 800290c:	ea58 0309 	orrs.w	r3, r8, r9
 8002910:	d047      	beq.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002916:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002918:	2b04      	cmp	r3, #4
 800291a:	d82a      	bhi.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800291c:	a201      	add	r2, pc, #4	@ (adr r2, 8002924 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800291e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002922:	bf00      	nop
 8002924:	08002939 	.word	0x08002939
 8002928:	08002947 	.word	0x08002947
 800292c:	0800295d 	.word	0x0800295d
 8002930:	0800297b 	.word	0x0800297b
 8002934:	0800297b 	.word	0x0800297b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002938:	4b8e      	ldr	r3, [pc, #568]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800293a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800293c:	4a8d      	ldr	r2, [pc, #564]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800293e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002942:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002944:	e01a      	b.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800294a:	3308      	adds	r3, #8
 800294c:	2100      	movs	r1, #0
 800294e:	4618      	mov	r0, r3
 8002950:	f001 fc50 	bl	80041f4 <RCCEx_PLL2_Config>
 8002954:	4603      	mov	r3, r0
 8002956:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800295a:	e00f      	b.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800295c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002960:	3328      	adds	r3, #40	@ 0x28
 8002962:	2100      	movs	r1, #0
 8002964:	4618      	mov	r0, r3
 8002966:	f001 fcf7 	bl	8004358 <RCCEx_PLL3_Config>
 800296a:	4603      	mov	r3, r0
 800296c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002970:	e004      	b.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002978:	e000      	b.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800297a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800297c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002980:	2b00      	cmp	r3, #0
 8002982:	d10a      	bne.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002984:	4b7b      	ldr	r3, [pc, #492]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002986:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002988:	f023 0107 	bic.w	r1, r3, #7
 800298c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002992:	4a78      	ldr	r2, [pc, #480]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002994:	430b      	orrs	r3, r1
 8002996:	6513      	str	r3, [r2, #80]	@ 0x50
 8002998:	e003      	b.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800299a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800299e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80029a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029aa:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80029ae:	f04f 0b00 	mov.w	fp, #0
 80029b2:	ea5a 030b 	orrs.w	r3, sl, fp
 80029b6:	d04c      	beq.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80029b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029c2:	d030      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80029c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029c8:	d829      	bhi.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80029ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80029cc:	d02d      	beq.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80029ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80029d0:	d825      	bhi.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80029d2:	2b80      	cmp	r3, #128	@ 0x80
 80029d4:	d018      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80029d6:	2b80      	cmp	r3, #128	@ 0x80
 80029d8:	d821      	bhi.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d002      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80029de:	2b40      	cmp	r3, #64	@ 0x40
 80029e0:	d007      	beq.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80029e2:	e01c      	b.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029e4:	4b63      	ldr	r3, [pc, #396]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029e8:	4a62      	ldr	r2, [pc, #392]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80029f0:	e01c      	b.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80029f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029f6:	3308      	adds	r3, #8
 80029f8:	2100      	movs	r1, #0
 80029fa:	4618      	mov	r0, r3
 80029fc:	f001 fbfa 	bl	80041f4 <RCCEx_PLL2_Config>
 8002a00:	4603      	mov	r3, r0
 8002a02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002a06:	e011      	b.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a0c:	3328      	adds	r3, #40	@ 0x28
 8002a0e:	2100      	movs	r1, #0
 8002a10:	4618      	mov	r0, r3
 8002a12:	f001 fca1 	bl	8004358 <RCCEx_PLL3_Config>
 8002a16:	4603      	mov	r3, r0
 8002a18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002a1c:	e006      	b.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002a24:	e002      	b.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002a26:	bf00      	nop
 8002a28:	e000      	b.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002a2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d10a      	bne.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002a34:	4b4f      	ldr	r3, [pc, #316]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a38:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a42:	4a4c      	ldr	r2, [pc, #304]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a44:	430b      	orrs	r3, r1
 8002a46:	6513      	str	r3, [r2, #80]	@ 0x50
 8002a48:	e003      	b.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a5a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8002a5e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002a62:	2300      	movs	r3, #0
 8002a64:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002a68:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	d053      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a76:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002a7a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002a7e:	d035      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002a80:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002a84:	d82e      	bhi.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002a86:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002a8a:	d031      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002a8c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002a90:	d828      	bhi.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002a92:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a96:	d01a      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002a98:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a9c:	d822      	bhi.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d003      	beq.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002aa2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002aa6:	d007      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002aa8:	e01c      	b.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002aaa:	4b32      	ldr	r3, [pc, #200]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aae:	4a31      	ldr	r2, [pc, #196]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ab0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ab4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ab6:	e01c      	b.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002ab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002abc:	3308      	adds	r3, #8
 8002abe:	2100      	movs	r1, #0
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f001 fb97 	bl	80041f4 <RCCEx_PLL2_Config>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002acc:	e011      	b.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ad2:	3328      	adds	r3, #40	@ 0x28
 8002ad4:	2100      	movs	r1, #0
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f001 fc3e 	bl	8004358 <RCCEx_PLL3_Config>
 8002adc:	4603      	mov	r3, r0
 8002ade:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ae2:	e006      	b.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002aea:	e002      	b.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002aec:	bf00      	nop
 8002aee:	e000      	b.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002af0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002af2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d10b      	bne.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002afa:	4b1e      	ldr	r3, [pc, #120]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002afc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002afe:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b06:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002b0a:	4a1a      	ldr	r2, [pc, #104]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b0c:	430b      	orrs	r3, r1
 8002b0e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b10:	e003      	b.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b22:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002b26:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002b30:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002b34:	460b      	mov	r3, r1
 8002b36:	4313      	orrs	r3, r2
 8002b38:	d056      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b3e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002b42:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002b46:	d038      	beq.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002b48:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002b4c:	d831      	bhi.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002b4e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002b52:	d034      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002b54:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002b58:	d82b      	bhi.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002b5a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002b5e:	d01d      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002b60:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002b64:	d825      	bhi.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d006      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002b6a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b6e:	d00a      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002b70:	e01f      	b.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002b72:	bf00      	nop
 8002b74:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b78:	4ba2      	ldr	r3, [pc, #648]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b7c:	4aa1      	ldr	r2, [pc, #644]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002b84:	e01c      	b.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b8a:	3308      	adds	r3, #8
 8002b8c:	2100      	movs	r1, #0
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f001 fb30 	bl	80041f4 <RCCEx_PLL2_Config>
 8002b94:	4603      	mov	r3, r0
 8002b96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002b9a:	e011      	b.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002b9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ba0:	3328      	adds	r3, #40	@ 0x28
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f001 fbd7 	bl	8004358 <RCCEx_PLL3_Config>
 8002baa:	4603      	mov	r3, r0
 8002bac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002bb0:	e006      	b.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002bb8:	e002      	b.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002bba:	bf00      	nop
 8002bbc:	e000      	b.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002bbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d10b      	bne.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002bc8:	4b8e      	ldr	r3, [pc, #568]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002bca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bcc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bd4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002bd8:	4a8a      	ldr	r2, [pc, #552]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002bda:	430b      	orrs	r3, r1
 8002bdc:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bde:	e003      	b.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002be0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002be4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002bf4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002bfe:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002c02:	460b      	mov	r3, r1
 8002c04:	4313      	orrs	r3, r2
 8002c06:	d03a      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002c08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c0e:	2b30      	cmp	r3, #48	@ 0x30
 8002c10:	d01f      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002c12:	2b30      	cmp	r3, #48	@ 0x30
 8002c14:	d819      	bhi.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002c16:	2b20      	cmp	r3, #32
 8002c18:	d00c      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002c1a:	2b20      	cmp	r3, #32
 8002c1c:	d815      	bhi.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d019      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002c22:	2b10      	cmp	r3, #16
 8002c24:	d111      	bne.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c26:	4b77      	ldr	r3, [pc, #476]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c2a:	4a76      	ldr	r2, [pc, #472]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c30:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002c32:	e011      	b.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002c34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c38:	3308      	adds	r3, #8
 8002c3a:	2102      	movs	r1, #2
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f001 fad9 	bl	80041f4 <RCCEx_PLL2_Config>
 8002c42:	4603      	mov	r3, r0
 8002c44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002c48:	e006      	b.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002c50:	e002      	b.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002c52:	bf00      	nop
 8002c54:	e000      	b.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002c56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d10a      	bne.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002c60:	4b68      	ldr	r3, [pc, #416]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c64:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c6e:	4a65      	ldr	r2, [pc, #404]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c70:	430b      	orrs	r3, r1
 8002c72:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c74:	e003      	b.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c86:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002c8a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002c8e:	2300      	movs	r3, #0
 8002c90:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002c94:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002c98:	460b      	mov	r3, r1
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	d051      	beq.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ca2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ca4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ca8:	d035      	beq.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002caa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002cae:	d82e      	bhi.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002cb0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002cb4:	d031      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002cb6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002cba:	d828      	bhi.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002cbc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002cc0:	d01a      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002cc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002cc6:	d822      	bhi.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d003      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002ccc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cd0:	d007      	beq.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002cd2:	e01c      	b.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cd4:	4b4b      	ldr	r3, [pc, #300]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cd8:	4a4a      	ldr	r2, [pc, #296]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002cda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cde:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002ce0:	e01c      	b.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ce6:	3308      	adds	r3, #8
 8002ce8:	2100      	movs	r1, #0
 8002cea:	4618      	mov	r0, r3
 8002cec:	f001 fa82 	bl	80041f4 <RCCEx_PLL2_Config>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002cf6:	e011      	b.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cfc:	3328      	adds	r3, #40	@ 0x28
 8002cfe:	2100      	movs	r1, #0
 8002d00:	4618      	mov	r0, r3
 8002d02:	f001 fb29 	bl	8004358 <RCCEx_PLL3_Config>
 8002d06:	4603      	mov	r3, r0
 8002d08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002d0c:	e006      	b.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002d14:	e002      	b.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002d16:	bf00      	nop
 8002d18:	e000      	b.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002d1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d10a      	bne.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002d24:	4b37      	ldr	r3, [pc, #220]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d28:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002d2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d32:	4a34      	ldr	r2, [pc, #208]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d34:	430b      	orrs	r3, r1
 8002d36:	6513      	str	r3, [r2, #80]	@ 0x50
 8002d38:	e003      	b.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d4a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002d4e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002d52:	2300      	movs	r3, #0
 8002d54:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002d58:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	d056      	beq.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d6c:	d033      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002d6e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d72:	d82c      	bhi.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002d74:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002d78:	d02f      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002d7a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002d7e:	d826      	bhi.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002d80:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002d84:	d02b      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002d86:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002d8a:	d820      	bhi.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002d8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002d90:	d012      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002d92:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002d96:	d81a      	bhi.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d022      	beq.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002d9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002da0:	d115      	bne.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002da6:	3308      	adds	r3, #8
 8002da8:	2101      	movs	r1, #1
 8002daa:	4618      	mov	r0, r3
 8002dac:	f001 fa22 	bl	80041f4 <RCCEx_PLL2_Config>
 8002db0:	4603      	mov	r3, r0
 8002db2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002db6:	e015      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dbc:	3328      	adds	r3, #40	@ 0x28
 8002dbe:	2101      	movs	r1, #1
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f001 fac9 	bl	8004358 <RCCEx_PLL3_Config>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002dcc:	e00a      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002dd4:	e006      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002dd6:	bf00      	nop
 8002dd8:	e004      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002dda:	bf00      	nop
 8002ddc:	e002      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002dde:	bf00      	nop
 8002de0:	e000      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002de2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002de4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d10d      	bne.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002dec:	4b05      	ldr	r3, [pc, #20]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002dee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002df0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002df8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002dfa:	4a02      	ldr	r2, [pc, #8]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002dfc:	430b      	orrs	r3, r1
 8002dfe:	6513      	str	r3, [r2, #80]	@ 0x50
 8002e00:	e006      	b.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002e02:	bf00      	nop
 8002e04:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002e10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e18:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002e1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002e20:	2300      	movs	r3, #0
 8002e22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002e26:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8002e2a:	460b      	mov	r3, r1
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	d055      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e34:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002e38:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e3c:	d033      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002e3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e42:	d82c      	bhi.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002e44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e48:	d02f      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e4e:	d826      	bhi.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002e50:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002e54:	d02b      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002e56:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002e5a:	d820      	bhi.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002e5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e60:	d012      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002e62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e66:	d81a      	bhi.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d022      	beq.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002e6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002e70:	d115      	bne.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e76:	3308      	adds	r3, #8
 8002e78:	2101      	movs	r1, #1
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f001 f9ba 	bl	80041f4 <RCCEx_PLL2_Config>
 8002e80:	4603      	mov	r3, r0
 8002e82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002e86:	e015      	b.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002e88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e8c:	3328      	adds	r3, #40	@ 0x28
 8002e8e:	2101      	movs	r1, #1
 8002e90:	4618      	mov	r0, r3
 8002e92:	f001 fa61 	bl	8004358 <RCCEx_PLL3_Config>
 8002e96:	4603      	mov	r3, r0
 8002e98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002e9c:	e00a      	b.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002ea4:	e006      	b.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002ea6:	bf00      	nop
 8002ea8:	e004      	b.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002eaa:	bf00      	nop
 8002eac:	e002      	b.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002eae:	bf00      	nop
 8002eb0:	e000      	b.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002eb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002eb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d10b      	bne.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002ebc:	4ba3      	ldr	r3, [pc, #652]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ebe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ec0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ec8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002ecc:	4a9f      	ldr	r2, [pc, #636]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ece:	430b      	orrs	r3, r1
 8002ed0:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ed2:	e003      	b.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ed4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ed8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002edc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ee4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8002ee8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002eec:	2300      	movs	r3, #0
 8002eee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002ef2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	d037      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002efc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f06:	d00e      	beq.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8002f08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f0c:	d816      	bhi.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x700>
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d018      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8002f12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002f16:	d111      	bne.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f18:	4b8c      	ldr	r3, [pc, #560]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f1c:	4a8b      	ldr	r2, [pc, #556]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002f24:	e00f      	b.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f2a:	3308      	adds	r3, #8
 8002f2c:	2101      	movs	r1, #1
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f001 f960 	bl	80041f4 <RCCEx_PLL2_Config>
 8002f34:	4603      	mov	r3, r0
 8002f36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002f3a:	e004      	b.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002f42:	e000      	b.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8002f44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d10a      	bne.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002f4e:	4b7f      	ldr	r3, [pc, #508]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f52:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8002f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f5c:	4a7b      	ldr	r2, [pc, #492]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f5e:	430b      	orrs	r3, r1
 8002f60:	6513      	str	r3, [r2, #80]	@ 0x50
 8002f62:	e003      	b.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002f6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f74:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8002f78:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002f82:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8002f86:	460b      	mov	r3, r1
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	d039      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002f8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f92:	2b03      	cmp	r3, #3
 8002f94:	d81c      	bhi.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8002f96:	a201      	add	r2, pc, #4	@ (adr r2, 8002f9c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8002f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f9c:	08002fd9 	.word	0x08002fd9
 8002fa0:	08002fad 	.word	0x08002fad
 8002fa4:	08002fbb 	.word	0x08002fbb
 8002fa8:	08002fd9 	.word	0x08002fd9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fac:	4b67      	ldr	r3, [pc, #412]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fb0:	4a66      	ldr	r2, [pc, #408]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fb6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002fb8:	e00f      	b.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fbe:	3308      	adds	r3, #8
 8002fc0:	2102      	movs	r1, #2
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f001 f916 	bl	80041f4 <RCCEx_PLL2_Config>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002fce:	e004      	b.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002fd6:	e000      	b.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8002fd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d10a      	bne.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002fe2:	4b5a      	ldr	r3, [pc, #360]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fe4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fe6:	f023 0103 	bic.w	r1, r3, #3
 8002fea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ff0:	4a56      	ldr	r2, [pc, #344]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ff2:	430b      	orrs	r3, r1
 8002ff4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ff6:	e003      	b.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ff8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ffc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003000:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003008:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800300c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003010:	2300      	movs	r3, #0
 8003012:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003016:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800301a:	460b      	mov	r3, r1
 800301c:	4313      	orrs	r3, r2
 800301e:	f000 809f 	beq.w	8003160 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003022:	4b4b      	ldr	r3, [pc, #300]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a4a      	ldr	r2, [pc, #296]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003028:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800302c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800302e:	f7fe f83d 	bl	80010ac <HAL_GetTick>
 8003032:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003036:	e00b      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003038:	f7fe f838 	bl	80010ac <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	2b64      	cmp	r3, #100	@ 0x64
 8003046:	d903      	bls.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800304e:	e005      	b.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003050:	4b3f      	ldr	r3, [pc, #252]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003058:	2b00      	cmp	r3, #0
 800305a:	d0ed      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800305c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003060:	2b00      	cmp	r3, #0
 8003062:	d179      	bne.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003064:	4b39      	ldr	r3, [pc, #228]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003066:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003068:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800306c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003070:	4053      	eors	r3, r2
 8003072:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003076:	2b00      	cmp	r3, #0
 8003078:	d015      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800307a:	4b34      	ldr	r3, [pc, #208]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800307c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800307e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003082:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003086:	4b31      	ldr	r3, [pc, #196]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003088:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800308a:	4a30      	ldr	r2, [pc, #192]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800308c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003090:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003092:	4b2e      	ldr	r3, [pc, #184]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003094:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003096:	4a2d      	ldr	r2, [pc, #180]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003098:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800309c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800309e:	4a2b      	ldr	r2, [pc, #172]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80030a4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80030a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80030ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030b2:	d118      	bne.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b4:	f7fd fffa 	bl	80010ac <HAL_GetTick>
 80030b8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80030bc:	e00d      	b.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030be:	f7fd fff5 	bl	80010ac <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80030c8:	1ad2      	subs	r2, r2, r3
 80030ca:	f241 3388 	movw	r3, #5000	@ 0x1388
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d903      	bls.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80030d8:	e005      	b.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80030da:	4b1c      	ldr	r3, [pc, #112]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d0eb      	beq.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80030e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d129      	bne.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80030f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80030fe:	d10e      	bne.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003100:	4b12      	ldr	r3, [pc, #72]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003102:	691b      	ldr	r3, [r3, #16]
 8003104:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003108:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800310c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003110:	091a      	lsrs	r2, r3, #4
 8003112:	4b10      	ldr	r3, [pc, #64]	@ (8003154 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003114:	4013      	ands	r3, r2
 8003116:	4a0d      	ldr	r2, [pc, #52]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003118:	430b      	orrs	r3, r1
 800311a:	6113      	str	r3, [r2, #16]
 800311c:	e005      	b.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800311e:	4b0b      	ldr	r3, [pc, #44]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	4a0a      	ldr	r2, [pc, #40]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003124:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003128:	6113      	str	r3, [r2, #16]
 800312a:	4b08      	ldr	r3, [pc, #32]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800312c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800312e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003132:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003136:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800313a:	4a04      	ldr	r2, [pc, #16]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800313c:	430b      	orrs	r3, r1
 800313e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003140:	e00e      	b.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003142:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003146:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800314a:	e009      	b.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800314c:	58024400 	.word	0x58024400
 8003150:	58024800 	.word	0x58024800
 8003154:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003158:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800315c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003160:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003168:	f002 0301 	and.w	r3, r2, #1
 800316c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003170:	2300      	movs	r3, #0
 8003172:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003176:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800317a:	460b      	mov	r3, r1
 800317c:	4313      	orrs	r3, r2
 800317e:	f000 8089 	beq.w	8003294 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003182:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003186:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003188:	2b28      	cmp	r3, #40	@ 0x28
 800318a:	d86b      	bhi.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800318c:	a201      	add	r2, pc, #4	@ (adr r2, 8003194 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800318e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003192:	bf00      	nop
 8003194:	0800326d 	.word	0x0800326d
 8003198:	08003265 	.word	0x08003265
 800319c:	08003265 	.word	0x08003265
 80031a0:	08003265 	.word	0x08003265
 80031a4:	08003265 	.word	0x08003265
 80031a8:	08003265 	.word	0x08003265
 80031ac:	08003265 	.word	0x08003265
 80031b0:	08003265 	.word	0x08003265
 80031b4:	08003239 	.word	0x08003239
 80031b8:	08003265 	.word	0x08003265
 80031bc:	08003265 	.word	0x08003265
 80031c0:	08003265 	.word	0x08003265
 80031c4:	08003265 	.word	0x08003265
 80031c8:	08003265 	.word	0x08003265
 80031cc:	08003265 	.word	0x08003265
 80031d0:	08003265 	.word	0x08003265
 80031d4:	0800324f 	.word	0x0800324f
 80031d8:	08003265 	.word	0x08003265
 80031dc:	08003265 	.word	0x08003265
 80031e0:	08003265 	.word	0x08003265
 80031e4:	08003265 	.word	0x08003265
 80031e8:	08003265 	.word	0x08003265
 80031ec:	08003265 	.word	0x08003265
 80031f0:	08003265 	.word	0x08003265
 80031f4:	0800326d 	.word	0x0800326d
 80031f8:	08003265 	.word	0x08003265
 80031fc:	08003265 	.word	0x08003265
 8003200:	08003265 	.word	0x08003265
 8003204:	08003265 	.word	0x08003265
 8003208:	08003265 	.word	0x08003265
 800320c:	08003265 	.word	0x08003265
 8003210:	08003265 	.word	0x08003265
 8003214:	0800326d 	.word	0x0800326d
 8003218:	08003265 	.word	0x08003265
 800321c:	08003265 	.word	0x08003265
 8003220:	08003265 	.word	0x08003265
 8003224:	08003265 	.word	0x08003265
 8003228:	08003265 	.word	0x08003265
 800322c:	08003265 	.word	0x08003265
 8003230:	08003265 	.word	0x08003265
 8003234:	0800326d 	.word	0x0800326d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003238:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800323c:	3308      	adds	r3, #8
 800323e:	2101      	movs	r1, #1
 8003240:	4618      	mov	r0, r3
 8003242:	f000 ffd7 	bl	80041f4 <RCCEx_PLL2_Config>
 8003246:	4603      	mov	r3, r0
 8003248:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800324c:	e00f      	b.n	800326e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800324e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003252:	3328      	adds	r3, #40	@ 0x28
 8003254:	2101      	movs	r1, #1
 8003256:	4618      	mov	r0, r3
 8003258:	f001 f87e 	bl	8004358 <RCCEx_PLL3_Config>
 800325c:	4603      	mov	r3, r0
 800325e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003262:	e004      	b.n	800326e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800326a:	e000      	b.n	800326e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800326c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800326e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003272:	2b00      	cmp	r3, #0
 8003274:	d10a      	bne.n	800328c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003276:	4bbf      	ldr	r3, [pc, #764]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003278:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800327a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800327e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003282:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003284:	4abb      	ldr	r2, [pc, #748]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003286:	430b      	orrs	r3, r1
 8003288:	6553      	str	r3, [r2, #84]	@ 0x54
 800328a:	e003      	b.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800328c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003290:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003294:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800329c:	f002 0302 	and.w	r3, r2, #2
 80032a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80032a4:	2300      	movs	r3, #0
 80032a6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80032aa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80032ae:	460b      	mov	r3, r1
 80032b0:	4313      	orrs	r3, r2
 80032b2:	d041      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80032b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80032ba:	2b05      	cmp	r3, #5
 80032bc:	d824      	bhi.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80032be:	a201      	add	r2, pc, #4	@ (adr r2, 80032c4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80032c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032c4:	08003311 	.word	0x08003311
 80032c8:	080032dd 	.word	0x080032dd
 80032cc:	080032f3 	.word	0x080032f3
 80032d0:	08003311 	.word	0x08003311
 80032d4:	08003311 	.word	0x08003311
 80032d8:	08003311 	.word	0x08003311
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80032dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032e0:	3308      	adds	r3, #8
 80032e2:	2101      	movs	r1, #1
 80032e4:	4618      	mov	r0, r3
 80032e6:	f000 ff85 	bl	80041f4 <RCCEx_PLL2_Config>
 80032ea:	4603      	mov	r3, r0
 80032ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80032f0:	e00f      	b.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80032f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032f6:	3328      	adds	r3, #40	@ 0x28
 80032f8:	2101      	movs	r1, #1
 80032fa:	4618      	mov	r0, r3
 80032fc:	f001 f82c 	bl	8004358 <RCCEx_PLL3_Config>
 8003300:	4603      	mov	r3, r0
 8003302:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003306:	e004      	b.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800330e:	e000      	b.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003310:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003312:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003316:	2b00      	cmp	r3, #0
 8003318:	d10a      	bne.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800331a:	4b96      	ldr	r3, [pc, #600]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800331c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800331e:	f023 0107 	bic.w	r1, r3, #7
 8003322:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003326:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003328:	4a92      	ldr	r2, [pc, #584]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800332a:	430b      	orrs	r3, r1
 800332c:	6553      	str	r3, [r2, #84]	@ 0x54
 800332e:	e003      	b.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003330:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003334:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003338:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800333c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003340:	f002 0304 	and.w	r3, r2, #4
 8003344:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003348:	2300      	movs	r3, #0
 800334a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800334e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003352:	460b      	mov	r3, r1
 8003354:	4313      	orrs	r3, r2
 8003356:	d044      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003358:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800335c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003360:	2b05      	cmp	r3, #5
 8003362:	d825      	bhi.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003364:	a201      	add	r2, pc, #4	@ (adr r2, 800336c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800336a:	bf00      	nop
 800336c:	080033b9 	.word	0x080033b9
 8003370:	08003385 	.word	0x08003385
 8003374:	0800339b 	.word	0x0800339b
 8003378:	080033b9 	.word	0x080033b9
 800337c:	080033b9 	.word	0x080033b9
 8003380:	080033b9 	.word	0x080033b9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003384:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003388:	3308      	adds	r3, #8
 800338a:	2101      	movs	r1, #1
 800338c:	4618      	mov	r0, r3
 800338e:	f000 ff31 	bl	80041f4 <RCCEx_PLL2_Config>
 8003392:	4603      	mov	r3, r0
 8003394:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003398:	e00f      	b.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800339a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800339e:	3328      	adds	r3, #40	@ 0x28
 80033a0:	2101      	movs	r1, #1
 80033a2:	4618      	mov	r0, r3
 80033a4:	f000 ffd8 	bl	8004358 <RCCEx_PLL3_Config>
 80033a8:	4603      	mov	r3, r0
 80033aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80033ae:	e004      	b.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80033b6:	e000      	b.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80033b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d10b      	bne.n	80033da <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80033c2:	4b6c      	ldr	r3, [pc, #432]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80033c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033c6:	f023 0107 	bic.w	r1, r3, #7
 80033ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033d2:	4a68      	ldr	r2, [pc, #416]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80033d4:	430b      	orrs	r3, r1
 80033d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80033d8:	e003      	b.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80033e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ea:	f002 0320 	and.w	r3, r2, #32
 80033ee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80033f2:	2300      	movs	r3, #0
 80033f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80033f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80033fc:	460b      	mov	r3, r1
 80033fe:	4313      	orrs	r3, r2
 8003400:	d055      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003402:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003406:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800340a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800340e:	d033      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003410:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003414:	d82c      	bhi.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003416:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800341a:	d02f      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800341c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003420:	d826      	bhi.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003422:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003426:	d02b      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003428:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800342c:	d820      	bhi.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800342e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003432:	d012      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003434:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003438:	d81a      	bhi.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800343a:	2b00      	cmp	r3, #0
 800343c:	d022      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800343e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003442:	d115      	bne.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003444:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003448:	3308      	adds	r3, #8
 800344a:	2100      	movs	r1, #0
 800344c:	4618      	mov	r0, r3
 800344e:	f000 fed1 	bl	80041f4 <RCCEx_PLL2_Config>
 8003452:	4603      	mov	r3, r0
 8003454:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003458:	e015      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800345a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800345e:	3328      	adds	r3, #40	@ 0x28
 8003460:	2102      	movs	r1, #2
 8003462:	4618      	mov	r0, r3
 8003464:	f000 ff78 	bl	8004358 <RCCEx_PLL3_Config>
 8003468:	4603      	mov	r3, r0
 800346a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800346e:	e00a      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003476:	e006      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003478:	bf00      	nop
 800347a:	e004      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800347c:	bf00      	nop
 800347e:	e002      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003480:	bf00      	nop
 8003482:	e000      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003484:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003486:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800348a:	2b00      	cmp	r3, #0
 800348c:	d10b      	bne.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800348e:	4b39      	ldr	r3, [pc, #228]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003490:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003492:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003496:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800349a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800349e:	4a35      	ldr	r2, [pc, #212]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80034a0:	430b      	orrs	r3, r1
 80034a2:	6553      	str	r3, [r2, #84]	@ 0x54
 80034a4:	e003      	b.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80034ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80034ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80034be:	2300      	movs	r3, #0
 80034c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80034c4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80034c8:	460b      	mov	r3, r1
 80034ca:	4313      	orrs	r3, r2
 80034cc:	d058      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80034ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80034d6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80034da:	d033      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80034dc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80034e0:	d82c      	bhi.n	800353c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80034e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034e6:	d02f      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80034e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034ec:	d826      	bhi.n	800353c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80034ee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80034f2:	d02b      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80034f4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80034f8:	d820      	bhi.n	800353c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80034fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034fe:	d012      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003500:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003504:	d81a      	bhi.n	800353c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003506:	2b00      	cmp	r3, #0
 8003508:	d022      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800350a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800350e:	d115      	bne.n	800353c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003510:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003514:	3308      	adds	r3, #8
 8003516:	2100      	movs	r1, #0
 8003518:	4618      	mov	r0, r3
 800351a:	f000 fe6b 	bl	80041f4 <RCCEx_PLL2_Config>
 800351e:	4603      	mov	r3, r0
 8003520:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003524:	e015      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003526:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800352a:	3328      	adds	r3, #40	@ 0x28
 800352c:	2102      	movs	r1, #2
 800352e:	4618      	mov	r0, r3
 8003530:	f000 ff12 	bl	8004358 <RCCEx_PLL3_Config>
 8003534:	4603      	mov	r3, r0
 8003536:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800353a:	e00a      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003542:	e006      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003544:	bf00      	nop
 8003546:	e004      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003548:	bf00      	nop
 800354a:	e002      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800354c:	bf00      	nop
 800354e:	e000      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003550:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003552:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003556:	2b00      	cmp	r3, #0
 8003558:	d10e      	bne.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800355a:	4b06      	ldr	r3, [pc, #24]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800355c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800355e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003562:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003566:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800356a:	4a02      	ldr	r2, [pc, #8]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800356c:	430b      	orrs	r3, r1
 800356e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003570:	e006      	b.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003572:	bf00      	nop
 8003574:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003578:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800357c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003580:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003588:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800358c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003590:	2300      	movs	r3, #0
 8003592:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003596:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800359a:	460b      	mov	r3, r1
 800359c:	4313      	orrs	r3, r2
 800359e:	d055      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80035a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80035a8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80035ac:	d033      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80035ae:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80035b2:	d82c      	bhi.n	800360e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80035b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035b8:	d02f      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80035ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035be:	d826      	bhi.n	800360e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80035c0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80035c4:	d02b      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80035c6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80035ca:	d820      	bhi.n	800360e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80035cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80035d0:	d012      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80035d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80035d6:	d81a      	bhi.n	800360e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d022      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80035dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035e0:	d115      	bne.n	800360e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035e6:	3308      	adds	r3, #8
 80035e8:	2100      	movs	r1, #0
 80035ea:	4618      	mov	r0, r3
 80035ec:	f000 fe02 	bl	80041f4 <RCCEx_PLL2_Config>
 80035f0:	4603      	mov	r3, r0
 80035f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80035f6:	e015      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80035f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035fc:	3328      	adds	r3, #40	@ 0x28
 80035fe:	2102      	movs	r1, #2
 8003600:	4618      	mov	r0, r3
 8003602:	f000 fea9 	bl	8004358 <RCCEx_PLL3_Config>
 8003606:	4603      	mov	r3, r0
 8003608:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800360c:	e00a      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003614:	e006      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003616:	bf00      	nop
 8003618:	e004      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800361a:	bf00      	nop
 800361c:	e002      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800361e:	bf00      	nop
 8003620:	e000      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003622:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003624:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003628:	2b00      	cmp	r3, #0
 800362a:	d10b      	bne.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800362c:	4ba1      	ldr	r3, [pc, #644]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800362e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003630:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003634:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003638:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800363c:	4a9d      	ldr	r2, [pc, #628]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800363e:	430b      	orrs	r3, r1
 8003640:	6593      	str	r3, [r2, #88]	@ 0x58
 8003642:	e003      	b.n	800364c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003644:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003648:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800364c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003654:	f002 0308 	and.w	r3, r2, #8
 8003658:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800365c:	2300      	movs	r3, #0
 800365e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003662:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003666:	460b      	mov	r3, r1
 8003668:	4313      	orrs	r3, r2
 800366a:	d01e      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800366c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003670:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003674:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003678:	d10c      	bne.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800367a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800367e:	3328      	adds	r3, #40	@ 0x28
 8003680:	2102      	movs	r1, #2
 8003682:	4618      	mov	r0, r3
 8003684:	f000 fe68 	bl	8004358 <RCCEx_PLL3_Config>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d002      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003694:	4b87      	ldr	r3, [pc, #540]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003696:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003698:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800369c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036a4:	4a83      	ldr	r2, [pc, #524]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80036a6:	430b      	orrs	r3, r1
 80036a8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80036aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b2:	f002 0310 	and.w	r3, r2, #16
 80036b6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80036ba:	2300      	movs	r3, #0
 80036bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80036c0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80036c4:	460b      	mov	r3, r1
 80036c6:	4313      	orrs	r3, r2
 80036c8:	d01e      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80036ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80036d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036d6:	d10c      	bne.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80036d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036dc:	3328      	adds	r3, #40	@ 0x28
 80036de:	2102      	movs	r1, #2
 80036e0:	4618      	mov	r0, r3
 80036e2:	f000 fe39 	bl	8004358 <RCCEx_PLL3_Config>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d002      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80036f2:	4b70      	ldr	r3, [pc, #448]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80036f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036f6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80036fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003702:	4a6c      	ldr	r2, [pc, #432]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003704:	430b      	orrs	r3, r1
 8003706:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003708:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800370c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003710:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003714:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003718:	2300      	movs	r3, #0
 800371a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800371e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003722:	460b      	mov	r3, r1
 8003724:	4313      	orrs	r3, r2
 8003726:	d03e      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003728:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800372c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003730:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003734:	d022      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003736:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800373a:	d81b      	bhi.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800373c:	2b00      	cmp	r3, #0
 800373e:	d003      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003740:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003744:	d00b      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003746:	e015      	b.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003748:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800374c:	3308      	adds	r3, #8
 800374e:	2100      	movs	r1, #0
 8003750:	4618      	mov	r0, r3
 8003752:	f000 fd4f 	bl	80041f4 <RCCEx_PLL2_Config>
 8003756:	4603      	mov	r3, r0
 8003758:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800375c:	e00f      	b.n	800377e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800375e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003762:	3328      	adds	r3, #40	@ 0x28
 8003764:	2102      	movs	r1, #2
 8003766:	4618      	mov	r0, r3
 8003768:	f000 fdf6 	bl	8004358 <RCCEx_PLL3_Config>
 800376c:	4603      	mov	r3, r0
 800376e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003772:	e004      	b.n	800377e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800377a:	e000      	b.n	800377e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800377c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800377e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003782:	2b00      	cmp	r3, #0
 8003784:	d10b      	bne.n	800379e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003786:	4b4b      	ldr	r3, [pc, #300]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003788:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800378a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800378e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003792:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003796:	4a47      	ldr	r2, [pc, #284]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003798:	430b      	orrs	r3, r1
 800379a:	6593      	str	r3, [r2, #88]	@ 0x58
 800379c:	e003      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800379e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80037a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ae:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80037b2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80037b4:	2300      	movs	r3, #0
 80037b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80037b8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80037bc:	460b      	mov	r3, r1
 80037be:	4313      	orrs	r3, r2
 80037c0:	d03b      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80037c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037ca:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80037ce:	d01f      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80037d0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80037d4:	d818      	bhi.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80037d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80037da:	d003      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80037dc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80037e0:	d007      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80037e2:	e011      	b.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037e4:	4b33      	ldr	r3, [pc, #204]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80037e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037e8:	4a32      	ldr	r2, [pc, #200]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80037ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80037f0:	e00f      	b.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80037f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037f6:	3328      	adds	r3, #40	@ 0x28
 80037f8:	2101      	movs	r1, #1
 80037fa:	4618      	mov	r0, r3
 80037fc:	f000 fdac 	bl	8004358 <RCCEx_PLL3_Config>
 8003800:	4603      	mov	r3, r0
 8003802:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8003806:	e004      	b.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800380e:	e000      	b.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003810:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003812:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003816:	2b00      	cmp	r3, #0
 8003818:	d10b      	bne.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800381a:	4b26      	ldr	r3, [pc, #152]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800381c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800381e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003826:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800382a:	4a22      	ldr	r2, [pc, #136]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800382c:	430b      	orrs	r3, r1
 800382e:	6553      	str	r3, [r2, #84]	@ 0x54
 8003830:	e003      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003832:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003836:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800383a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800383e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003842:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003846:	673b      	str	r3, [r7, #112]	@ 0x70
 8003848:	2300      	movs	r3, #0
 800384a:	677b      	str	r3, [r7, #116]	@ 0x74
 800384c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003850:	460b      	mov	r3, r1
 8003852:	4313      	orrs	r3, r2
 8003854:	d034      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003856:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800385a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800385c:	2b00      	cmp	r3, #0
 800385e:	d003      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003860:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003864:	d007      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8003866:	e011      	b.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003868:	4b12      	ldr	r3, [pc, #72]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800386a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800386c:	4a11      	ldr	r2, [pc, #68]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800386e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003872:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003874:	e00e      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003876:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800387a:	3308      	adds	r3, #8
 800387c:	2102      	movs	r1, #2
 800387e:	4618      	mov	r0, r3
 8003880:	f000 fcb8 	bl	80041f4 <RCCEx_PLL2_Config>
 8003884:	4603      	mov	r3, r0
 8003886:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800388a:	e003      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003892:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003894:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003898:	2b00      	cmp	r3, #0
 800389a:	d10d      	bne.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800389c:	4b05      	ldr	r3, [pc, #20]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800389e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038a0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80038a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038aa:	4a02      	ldr	r2, [pc, #8]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80038ac:	430b      	orrs	r3, r1
 80038ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80038b0:	e006      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80038b2:	bf00      	nop
 80038b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80038c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80038cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80038ce:	2300      	movs	r3, #0
 80038d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80038d2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80038d6:	460b      	mov	r3, r1
 80038d8:	4313      	orrs	r3, r2
 80038da:	d00c      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80038dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038e0:	3328      	adds	r3, #40	@ 0x28
 80038e2:	2102      	movs	r1, #2
 80038e4:	4618      	mov	r0, r3
 80038e6:	f000 fd37 	bl	8004358 <RCCEx_PLL3_Config>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d002      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80038f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038fe:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003902:	663b      	str	r3, [r7, #96]	@ 0x60
 8003904:	2300      	movs	r3, #0
 8003906:	667b      	str	r3, [r7, #100]	@ 0x64
 8003908:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800390c:	460b      	mov	r3, r1
 800390e:	4313      	orrs	r3, r2
 8003910:	d038      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003916:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800391a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800391e:	d018      	beq.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003920:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003924:	d811      	bhi.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003926:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800392a:	d014      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800392c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003930:	d80b      	bhi.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003932:	2b00      	cmp	r3, #0
 8003934:	d011      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8003936:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800393a:	d106      	bne.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800393c:	4bc3      	ldr	r3, [pc, #780]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800393e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003940:	4ac2      	ldr	r2, [pc, #776]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003942:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003946:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003948:	e008      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003950:	e004      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003952:	bf00      	nop
 8003954:	e002      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003956:	bf00      	nop
 8003958:	e000      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800395a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800395c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003960:	2b00      	cmp	r3, #0
 8003962:	d10b      	bne.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003964:	4bb9      	ldr	r3, [pc, #740]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003966:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003968:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800396c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003970:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003974:	4ab5      	ldr	r2, [pc, #724]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003976:	430b      	orrs	r3, r1
 8003978:	6553      	str	r3, [r2, #84]	@ 0x54
 800397a:	e003      	b.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800397c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003980:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003984:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800398c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003990:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003992:	2300      	movs	r3, #0
 8003994:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003996:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800399a:	460b      	mov	r3, r1
 800399c:	4313      	orrs	r3, r2
 800399e:	d009      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80039a0:	4baa      	ldr	r3, [pc, #680]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80039a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039a4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80039a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039ae:	4aa7      	ldr	r2, [pc, #668]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80039b0:	430b      	orrs	r3, r1
 80039b2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80039b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039bc:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80039c0:	653b      	str	r3, [r7, #80]	@ 0x50
 80039c2:	2300      	movs	r3, #0
 80039c4:	657b      	str	r3, [r7, #84]	@ 0x54
 80039c6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80039ca:	460b      	mov	r3, r1
 80039cc:	4313      	orrs	r3, r2
 80039ce:	d00a      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80039d0:	4b9e      	ldr	r3, [pc, #632]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80039d2:	691b      	ldr	r3, [r3, #16]
 80039d4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80039d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039dc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80039e0:	4a9a      	ldr	r2, [pc, #616]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80039e2:	430b      	orrs	r3, r1
 80039e4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80039e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ee:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80039f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80039f4:	2300      	movs	r3, #0
 80039f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039f8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80039fc:	460b      	mov	r3, r1
 80039fe:	4313      	orrs	r3, r2
 8003a00:	d009      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003a02:	4b92      	ldr	r3, [pc, #584]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a06:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a10:	4a8e      	ldr	r2, [pc, #568]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a12:	430b      	orrs	r3, r1
 8003a14:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a1e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003a22:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a24:	2300      	movs	r3, #0
 8003a26:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a28:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	d00e      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003a32:	4b86      	ldr	r3, [pc, #536]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	4a85      	ldr	r2, [pc, #532]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a38:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003a3c:	6113      	str	r3, [r2, #16]
 8003a3e:	4b83      	ldr	r3, [pc, #524]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a40:	6919      	ldr	r1, [r3, #16]
 8003a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a46:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003a4a:	4a80      	ldr	r2, [pc, #512]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a4c:	430b      	orrs	r3, r1
 8003a4e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a58:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003a5c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a5e:	2300      	movs	r3, #0
 8003a60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a62:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003a66:	460b      	mov	r3, r1
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	d009      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003a6c:	4b77      	ldr	r3, [pc, #476]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a70:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003a74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a7a:	4a74      	ldr	r2, [pc, #464]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a7c:	430b      	orrs	r3, r1
 8003a7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a88:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003a8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a8e:	2300      	movs	r3, #0
 8003a90:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a92:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003a96:	460b      	mov	r3, r1
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	d00a      	beq.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003a9c:	4b6b      	ldr	r3, [pc, #428]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aa0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003aac:	4a67      	ldr	r2, [pc, #412]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003aae:	430b      	orrs	r3, r1
 8003ab0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aba:	2100      	movs	r1, #0
 8003abc:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003abe:	f003 0301 	and.w	r3, r3, #1
 8003ac2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ac4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003ac8:	460b      	mov	r3, r1
 8003aca:	4313      	orrs	r3, r2
 8003acc:	d011      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ad2:	3308      	adds	r3, #8
 8003ad4:	2100      	movs	r1, #0
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f000 fb8c 	bl	80041f4 <RCCEx_PLL2_Config>
 8003adc:	4603      	mov	r3, r0
 8003ade:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003ae2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d003      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003aee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003afa:	2100      	movs	r1, #0
 8003afc:	6239      	str	r1, [r7, #32]
 8003afe:	f003 0302 	and.w	r3, r3, #2
 8003b02:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b04:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003b08:	460b      	mov	r3, r1
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	d011      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b12:	3308      	adds	r3, #8
 8003b14:	2101      	movs	r1, #1
 8003b16:	4618      	mov	r0, r3
 8003b18:	f000 fb6c 	bl	80041f4 <RCCEx_PLL2_Config>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003b22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d003      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b3a:	2100      	movs	r1, #0
 8003b3c:	61b9      	str	r1, [r7, #24]
 8003b3e:	f003 0304 	and.w	r3, r3, #4
 8003b42:	61fb      	str	r3, [r7, #28]
 8003b44:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003b48:	460b      	mov	r3, r1
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	d011      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b52:	3308      	adds	r3, #8
 8003b54:	2102      	movs	r1, #2
 8003b56:	4618      	mov	r0, r3
 8003b58:	f000 fb4c 	bl	80041f4 <RCCEx_PLL2_Config>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003b62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d003      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b7a:	2100      	movs	r1, #0
 8003b7c:	6139      	str	r1, [r7, #16]
 8003b7e:	f003 0308 	and.w	r3, r3, #8
 8003b82:	617b      	str	r3, [r7, #20]
 8003b84:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003b88:	460b      	mov	r3, r1
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	d011      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b92:	3328      	adds	r3, #40	@ 0x28
 8003b94:	2100      	movs	r1, #0
 8003b96:	4618      	mov	r0, r3
 8003b98:	f000 fbde 	bl	8004358 <RCCEx_PLL3_Config>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8003ba2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d003      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003baa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bba:	2100      	movs	r1, #0
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	f003 0310 	and.w	r3, r3, #16
 8003bc2:	60fb      	str	r3, [r7, #12]
 8003bc4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003bc8:	460b      	mov	r3, r1
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	d011      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bd2:	3328      	adds	r3, #40	@ 0x28
 8003bd4:	2101      	movs	r1, #1
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f000 fbbe 	bl	8004358 <RCCEx_PLL3_Config>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003be2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d003      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bfa:	2100      	movs	r1, #0
 8003bfc:	6039      	str	r1, [r7, #0]
 8003bfe:	f003 0320 	and.w	r3, r3, #32
 8003c02:	607b      	str	r3, [r7, #4]
 8003c04:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003c08:	460b      	mov	r3, r1
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	d011      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c12:	3328      	adds	r3, #40	@ 0x28
 8003c14:	2102      	movs	r1, #2
 8003c16:	4618      	mov	r0, r3
 8003c18:	f000 fb9e 	bl	8004358 <RCCEx_PLL3_Config>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003c22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d003      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8003c32:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d101      	bne.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	e000      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8003c46:	46bd      	mov	sp, r7
 8003c48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c4c:	58024400 	.word	0x58024400

08003c50 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003c54:	f7fe fd96 	bl	8002784 <HAL_RCC_GetHCLKFreq>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	4b06      	ldr	r3, [pc, #24]	@ (8003c74 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003c5c:	6a1b      	ldr	r3, [r3, #32]
 8003c5e:	091b      	lsrs	r3, r3, #4
 8003c60:	f003 0307 	and.w	r3, r3, #7
 8003c64:	4904      	ldr	r1, [pc, #16]	@ (8003c78 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003c66:	5ccb      	ldrb	r3, [r1, r3]
 8003c68:	f003 031f 	and.w	r3, r3, #31
 8003c6c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	58024400 	.word	0x58024400
 8003c78:	080061d0 	.word	0x080061d0

08003c7c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b089      	sub	sp, #36	@ 0x24
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003c84:	4ba1      	ldr	r3, [pc, #644]	@ (8003f0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c88:	f003 0303 	and.w	r3, r3, #3
 8003c8c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003c8e:	4b9f      	ldr	r3, [pc, #636]	@ (8003f0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c92:	0b1b      	lsrs	r3, r3, #12
 8003c94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c98:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003c9a:	4b9c      	ldr	r3, [pc, #624]	@ (8003f0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c9e:	091b      	lsrs	r3, r3, #4
 8003ca0:	f003 0301 	and.w	r3, r3, #1
 8003ca4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003ca6:	4b99      	ldr	r3, [pc, #612]	@ (8003f0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ca8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003caa:	08db      	lsrs	r3, r3, #3
 8003cac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003cb0:	693a      	ldr	r2, [r7, #16]
 8003cb2:	fb02 f303 	mul.w	r3, r2, r3
 8003cb6:	ee07 3a90 	vmov	s15, r3
 8003cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cbe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	f000 8111 	beq.w	8003eec <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	f000 8083 	beq.w	8003dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	f200 80a1 	bhi.w	8003e1c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d003      	beq.n	8003ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d056      	beq.n	8003d94 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003ce6:	e099      	b.n	8003e1c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ce8:	4b88      	ldr	r3, [pc, #544]	@ (8003f0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0320 	and.w	r3, r3, #32
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d02d      	beq.n	8003d50 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003cf4:	4b85      	ldr	r3, [pc, #532]	@ (8003f0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	08db      	lsrs	r3, r3, #3
 8003cfa:	f003 0303 	and.w	r3, r3, #3
 8003cfe:	4a84      	ldr	r2, [pc, #528]	@ (8003f10 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003d00:	fa22 f303 	lsr.w	r3, r2, r3
 8003d04:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	ee07 3a90 	vmov	s15, r3
 8003d0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	ee07 3a90 	vmov	s15, r3
 8003d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d1e:	4b7b      	ldr	r3, [pc, #492]	@ (8003f0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d26:	ee07 3a90 	vmov	s15, r3
 8003d2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d32:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003f14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003d36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d4a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003d4e:	e087      	b.n	8003e60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	ee07 3a90 	vmov	s15, r3
 8003d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d5a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003f18 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003d5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d62:	4b6a      	ldr	r3, [pc, #424]	@ (8003f0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d6a:	ee07 3a90 	vmov	s15, r3
 8003d6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d72:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d76:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003f14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003d7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d92:	e065      	b.n	8003e60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	ee07 3a90 	vmov	s15, r3
 8003d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d9e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003f1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003da2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003da6:	4b59      	ldr	r3, [pc, #356]	@ (8003f0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003da8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003daa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dae:	ee07 3a90 	vmov	s15, r3
 8003db2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003db6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003dba:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003f14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003dbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003dca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003dd6:	e043      	b.n	8003e60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	ee07 3a90 	vmov	s15, r3
 8003dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003de2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003f20 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003de6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dea:	4b48      	ldr	r3, [pc, #288]	@ (8003f0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003dec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003df2:	ee07 3a90 	vmov	s15, r3
 8003df6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8003dfe:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003f14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003e02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e1a:	e021      	b.n	8003e60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	ee07 3a90 	vmov	s15, r3
 8003e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e26:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003f1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003e2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e2e:	4b37      	ldr	r3, [pc, #220]	@ (8003f0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e36:	ee07 3a90 	vmov	s15, r3
 8003e3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e42:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003f14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003e46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e5e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003e60:	4b2a      	ldr	r3, [pc, #168]	@ (8003f0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e64:	0a5b      	lsrs	r3, r3, #9
 8003e66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e6a:	ee07 3a90 	vmov	s15, r3
 8003e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e72:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003e76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e86:	ee17 2a90 	vmov	r2, s15
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003e8e:	4b1f      	ldr	r3, [pc, #124]	@ (8003f0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e92:	0c1b      	lsrs	r3, r3, #16
 8003e94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e98:	ee07 3a90 	vmov	s15, r3
 8003e9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ea0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003ea4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ea8:	edd7 6a07 	vldr	s13, [r7, #28]
 8003eac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003eb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003eb4:	ee17 2a90 	vmov	r2, s15
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003ebc:	4b13      	ldr	r3, [pc, #76]	@ (8003f0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ebe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ec0:	0e1b      	lsrs	r3, r3, #24
 8003ec2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ec6:	ee07 3a90 	vmov	s15, r3
 8003eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ece:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003ed2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ed6:	edd7 6a07 	vldr	s13, [r7, #28]
 8003eda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ede:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ee2:	ee17 2a90 	vmov	r2, s15
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003eea:	e008      	b.n	8003efe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	609a      	str	r2, [r3, #8]
}
 8003efe:	bf00      	nop
 8003f00:	3724      	adds	r7, #36	@ 0x24
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	58024400 	.word	0x58024400
 8003f10:	03d09000 	.word	0x03d09000
 8003f14:	46000000 	.word	0x46000000
 8003f18:	4c742400 	.word	0x4c742400
 8003f1c:	4a742400 	.word	0x4a742400
 8003f20:	4af42400 	.word	0x4af42400

08003f24 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b089      	sub	sp, #36	@ 0x24
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003f2c:	4ba1      	ldr	r3, [pc, #644]	@ (80041b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f30:	f003 0303 	and.w	r3, r3, #3
 8003f34:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003f36:	4b9f      	ldr	r3, [pc, #636]	@ (80041b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f3a:	0d1b      	lsrs	r3, r3, #20
 8003f3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f40:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003f42:	4b9c      	ldr	r3, [pc, #624]	@ (80041b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f46:	0a1b      	lsrs	r3, r3, #8
 8003f48:	f003 0301 	and.w	r3, r3, #1
 8003f4c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003f4e:	4b99      	ldr	r3, [pc, #612]	@ (80041b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f52:	08db      	lsrs	r3, r3, #3
 8003f54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003f58:	693a      	ldr	r2, [r7, #16]
 8003f5a:	fb02 f303 	mul.w	r3, r2, r3
 8003f5e:	ee07 3a90 	vmov	s15, r3
 8003f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f66:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	f000 8111 	beq.w	8004194 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	f000 8083 	beq.w	8004080 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	f200 80a1 	bhi.w	80040c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d003      	beq.n	8003f90 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d056      	beq.n	800403c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003f8e:	e099      	b.n	80040c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f90:	4b88      	ldr	r3, [pc, #544]	@ (80041b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0320 	and.w	r3, r3, #32
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d02d      	beq.n	8003ff8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003f9c:	4b85      	ldr	r3, [pc, #532]	@ (80041b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	08db      	lsrs	r3, r3, #3
 8003fa2:	f003 0303 	and.w	r3, r3, #3
 8003fa6:	4a84      	ldr	r2, [pc, #528]	@ (80041b8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003fa8:	fa22 f303 	lsr.w	r3, r2, r3
 8003fac:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	ee07 3a90 	vmov	s15, r3
 8003fb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	ee07 3a90 	vmov	s15, r3
 8003fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fc6:	4b7b      	ldr	r3, [pc, #492]	@ (80041b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fce:	ee07 3a90 	vmov	s15, r3
 8003fd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003fda:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80041bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003fde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fe2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fe6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003fea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ff2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003ff6:	e087      	b.n	8004108 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	ee07 3a90 	vmov	s15, r3
 8003ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004002:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80041c0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004006:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800400a:	4b6a      	ldr	r3, [pc, #424]	@ (80041b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800400c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800400e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004012:	ee07 3a90 	vmov	s15, r3
 8004016:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800401a:	ed97 6a03 	vldr	s12, [r7, #12]
 800401e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80041bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004022:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004026:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800402a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800402e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004032:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004036:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800403a:	e065      	b.n	8004108 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	ee07 3a90 	vmov	s15, r3
 8004042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004046:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80041c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800404a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800404e:	4b59      	ldr	r3, [pc, #356]	@ (80041b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004052:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004056:	ee07 3a90 	vmov	s15, r3
 800405a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800405e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004062:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80041bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004066:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800406a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800406e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004072:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800407a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800407e:	e043      	b.n	8004108 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	ee07 3a90 	vmov	s15, r3
 8004086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800408a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80041c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800408e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004092:	4b48      	ldr	r3, [pc, #288]	@ (80041b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004096:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800409a:	ee07 3a90 	vmov	s15, r3
 800409e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80040a6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80041bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80040aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80040b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80040c2:	e021      	b.n	8004108 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	ee07 3a90 	vmov	s15, r3
 80040ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040ce:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80041c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80040d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040d6:	4b37      	ldr	r3, [pc, #220]	@ (80041b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040de:	ee07 3a90 	vmov	s15, r3
 80040e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80040ea:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80041bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80040ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80040fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004102:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004106:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004108:	4b2a      	ldr	r3, [pc, #168]	@ (80041b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800410a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800410c:	0a5b      	lsrs	r3, r3, #9
 800410e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004112:	ee07 3a90 	vmov	s15, r3
 8004116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800411a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800411e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004122:	edd7 6a07 	vldr	s13, [r7, #28]
 8004126:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800412a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800412e:	ee17 2a90 	vmov	r2, s15
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004136:	4b1f      	ldr	r3, [pc, #124]	@ (80041b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800413a:	0c1b      	lsrs	r3, r3, #16
 800413c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004140:	ee07 3a90 	vmov	s15, r3
 8004144:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004148:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800414c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004150:	edd7 6a07 	vldr	s13, [r7, #28]
 8004154:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004158:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800415c:	ee17 2a90 	vmov	r2, s15
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004164:	4b13      	ldr	r3, [pc, #76]	@ (80041b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004168:	0e1b      	lsrs	r3, r3, #24
 800416a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800416e:	ee07 3a90 	vmov	s15, r3
 8004172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004176:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800417a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800417e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004182:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004186:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800418a:	ee17 2a90 	vmov	r2, s15
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004192:	e008      	b.n	80041a6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	609a      	str	r2, [r3, #8]
}
 80041a6:	bf00      	nop
 80041a8:	3724      	adds	r7, #36	@ 0x24
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	58024400 	.word	0x58024400
 80041b8:	03d09000 	.word	0x03d09000
 80041bc:	46000000 	.word	0x46000000
 80041c0:	4c742400 	.word	0x4c742400
 80041c4:	4a742400 	.word	0x4a742400
 80041c8:	4af42400 	.word	0x4af42400

080041cc <HAL_RCCEx_WWDGxSysResetConfig>:
  * @note   This bit can be set by software but is cleared by hardware during a system reset
  *
  * @retval None
  */
void HAL_RCCEx_WWDGxSysResetConfig(uint32_t RCC_WWDGx)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_SCOPE_WWDG(RCC_WWDGx));
  SET_BIT(RCC->GCR, RCC_WWDGx) ;
 80041d4:	4b06      	ldr	r3, [pc, #24]	@ (80041f0 <HAL_RCCEx_WWDGxSysResetConfig+0x24>)
 80041d6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80041da:	4905      	ldr	r1, [pc, #20]	@ (80041f0 <HAL_RCCEx_WWDGxSysResetConfig+0x24>)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4313      	orrs	r3, r2
 80041e0:	f8c1 30a0 	str.w	r3, [r1, #160]	@ 0xa0
}
 80041e4:	bf00      	nop
 80041e6:	370c      	adds	r7, #12
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr
 80041f0:	58024400 	.word	0x58024400

080041f4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041fe:	2300      	movs	r3, #0
 8004200:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004202:	4b53      	ldr	r3, [pc, #332]	@ (8004350 <RCCEx_PLL2_Config+0x15c>)
 8004204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004206:	f003 0303 	and.w	r3, r3, #3
 800420a:	2b03      	cmp	r3, #3
 800420c:	d101      	bne.n	8004212 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e099      	b.n	8004346 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004212:	4b4f      	ldr	r3, [pc, #316]	@ (8004350 <RCCEx_PLL2_Config+0x15c>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a4e      	ldr	r2, [pc, #312]	@ (8004350 <RCCEx_PLL2_Config+0x15c>)
 8004218:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800421c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800421e:	f7fc ff45 	bl	80010ac <HAL_GetTick>
 8004222:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004224:	e008      	b.n	8004238 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004226:	f7fc ff41 	bl	80010ac <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	2b02      	cmp	r3, #2
 8004232:	d901      	bls.n	8004238 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	e086      	b.n	8004346 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004238:	4b45      	ldr	r3, [pc, #276]	@ (8004350 <RCCEx_PLL2_Config+0x15c>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d1f0      	bne.n	8004226 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004244:	4b42      	ldr	r3, [pc, #264]	@ (8004350 <RCCEx_PLL2_Config+0x15c>)
 8004246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004248:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	031b      	lsls	r3, r3, #12
 8004252:	493f      	ldr	r1, [pc, #252]	@ (8004350 <RCCEx_PLL2_Config+0x15c>)
 8004254:	4313      	orrs	r3, r2
 8004256:	628b      	str	r3, [r1, #40]	@ 0x28
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	3b01      	subs	r3, #1
 800425e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	3b01      	subs	r3, #1
 8004268:	025b      	lsls	r3, r3, #9
 800426a:	b29b      	uxth	r3, r3
 800426c:	431a      	orrs	r2, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	3b01      	subs	r3, #1
 8004274:	041b      	lsls	r3, r3, #16
 8004276:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800427a:	431a      	orrs	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	3b01      	subs	r3, #1
 8004282:	061b      	lsls	r3, r3, #24
 8004284:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004288:	4931      	ldr	r1, [pc, #196]	@ (8004350 <RCCEx_PLL2_Config+0x15c>)
 800428a:	4313      	orrs	r3, r2
 800428c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800428e:	4b30      	ldr	r3, [pc, #192]	@ (8004350 <RCCEx_PLL2_Config+0x15c>)
 8004290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004292:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	695b      	ldr	r3, [r3, #20]
 800429a:	492d      	ldr	r1, [pc, #180]	@ (8004350 <RCCEx_PLL2_Config+0x15c>)
 800429c:	4313      	orrs	r3, r2
 800429e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80042a0:	4b2b      	ldr	r3, [pc, #172]	@ (8004350 <RCCEx_PLL2_Config+0x15c>)
 80042a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042a4:	f023 0220 	bic.w	r2, r3, #32
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	699b      	ldr	r3, [r3, #24]
 80042ac:	4928      	ldr	r1, [pc, #160]	@ (8004350 <RCCEx_PLL2_Config+0x15c>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80042b2:	4b27      	ldr	r3, [pc, #156]	@ (8004350 <RCCEx_PLL2_Config+0x15c>)
 80042b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042b6:	4a26      	ldr	r2, [pc, #152]	@ (8004350 <RCCEx_PLL2_Config+0x15c>)
 80042b8:	f023 0310 	bic.w	r3, r3, #16
 80042bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80042be:	4b24      	ldr	r3, [pc, #144]	@ (8004350 <RCCEx_PLL2_Config+0x15c>)
 80042c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80042c2:	4b24      	ldr	r3, [pc, #144]	@ (8004354 <RCCEx_PLL2_Config+0x160>)
 80042c4:	4013      	ands	r3, r2
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	69d2      	ldr	r2, [r2, #28]
 80042ca:	00d2      	lsls	r2, r2, #3
 80042cc:	4920      	ldr	r1, [pc, #128]	@ (8004350 <RCCEx_PLL2_Config+0x15c>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80042d2:	4b1f      	ldr	r3, [pc, #124]	@ (8004350 <RCCEx_PLL2_Config+0x15c>)
 80042d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042d6:	4a1e      	ldr	r2, [pc, #120]	@ (8004350 <RCCEx_PLL2_Config+0x15c>)
 80042d8:	f043 0310 	orr.w	r3, r3, #16
 80042dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d106      	bne.n	80042f2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80042e4:	4b1a      	ldr	r3, [pc, #104]	@ (8004350 <RCCEx_PLL2_Config+0x15c>)
 80042e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042e8:	4a19      	ldr	r2, [pc, #100]	@ (8004350 <RCCEx_PLL2_Config+0x15c>)
 80042ea:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80042ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80042f0:	e00f      	b.n	8004312 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d106      	bne.n	8004306 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80042f8:	4b15      	ldr	r3, [pc, #84]	@ (8004350 <RCCEx_PLL2_Config+0x15c>)
 80042fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042fc:	4a14      	ldr	r2, [pc, #80]	@ (8004350 <RCCEx_PLL2_Config+0x15c>)
 80042fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004302:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004304:	e005      	b.n	8004312 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004306:	4b12      	ldr	r3, [pc, #72]	@ (8004350 <RCCEx_PLL2_Config+0x15c>)
 8004308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800430a:	4a11      	ldr	r2, [pc, #68]	@ (8004350 <RCCEx_PLL2_Config+0x15c>)
 800430c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004310:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004312:	4b0f      	ldr	r3, [pc, #60]	@ (8004350 <RCCEx_PLL2_Config+0x15c>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a0e      	ldr	r2, [pc, #56]	@ (8004350 <RCCEx_PLL2_Config+0x15c>)
 8004318:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800431c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800431e:	f7fc fec5 	bl	80010ac <HAL_GetTick>
 8004322:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004324:	e008      	b.n	8004338 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004326:	f7fc fec1 	bl	80010ac <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	2b02      	cmp	r3, #2
 8004332:	d901      	bls.n	8004338 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	e006      	b.n	8004346 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004338:	4b05      	ldr	r3, [pc, #20]	@ (8004350 <RCCEx_PLL2_Config+0x15c>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d0f0      	beq.n	8004326 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004344:	7bfb      	ldrb	r3, [r7, #15]
}
 8004346:	4618      	mov	r0, r3
 8004348:	3710      	adds	r7, #16
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	58024400 	.word	0x58024400
 8004354:	ffff0007 	.word	0xffff0007

08004358 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004362:	2300      	movs	r3, #0
 8004364:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004366:	4b53      	ldr	r3, [pc, #332]	@ (80044b4 <RCCEx_PLL3_Config+0x15c>)
 8004368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800436a:	f003 0303 	and.w	r3, r3, #3
 800436e:	2b03      	cmp	r3, #3
 8004370:	d101      	bne.n	8004376 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e099      	b.n	80044aa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004376:	4b4f      	ldr	r3, [pc, #316]	@ (80044b4 <RCCEx_PLL3_Config+0x15c>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a4e      	ldr	r2, [pc, #312]	@ (80044b4 <RCCEx_PLL3_Config+0x15c>)
 800437c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004380:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004382:	f7fc fe93 	bl	80010ac <HAL_GetTick>
 8004386:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004388:	e008      	b.n	800439c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800438a:	f7fc fe8f 	bl	80010ac <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	2b02      	cmp	r3, #2
 8004396:	d901      	bls.n	800439c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	e086      	b.n	80044aa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800439c:	4b45      	ldr	r3, [pc, #276]	@ (80044b4 <RCCEx_PLL3_Config+0x15c>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d1f0      	bne.n	800438a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80043a8:	4b42      	ldr	r3, [pc, #264]	@ (80044b4 <RCCEx_PLL3_Config+0x15c>)
 80043aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ac:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	051b      	lsls	r3, r3, #20
 80043b6:	493f      	ldr	r1, [pc, #252]	@ (80044b4 <RCCEx_PLL3_Config+0x15c>)
 80043b8:	4313      	orrs	r3, r2
 80043ba:	628b      	str	r3, [r1, #40]	@ 0x28
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	3b01      	subs	r3, #1
 80043c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	3b01      	subs	r3, #1
 80043cc:	025b      	lsls	r3, r3, #9
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	431a      	orrs	r2, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	3b01      	subs	r3, #1
 80043d8:	041b      	lsls	r3, r3, #16
 80043da:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80043de:	431a      	orrs	r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	691b      	ldr	r3, [r3, #16]
 80043e4:	3b01      	subs	r3, #1
 80043e6:	061b      	lsls	r3, r3, #24
 80043e8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80043ec:	4931      	ldr	r1, [pc, #196]	@ (80044b4 <RCCEx_PLL3_Config+0x15c>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80043f2:	4b30      	ldr	r3, [pc, #192]	@ (80044b4 <RCCEx_PLL3_Config+0x15c>)
 80043f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043f6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	695b      	ldr	r3, [r3, #20]
 80043fe:	492d      	ldr	r1, [pc, #180]	@ (80044b4 <RCCEx_PLL3_Config+0x15c>)
 8004400:	4313      	orrs	r3, r2
 8004402:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004404:	4b2b      	ldr	r3, [pc, #172]	@ (80044b4 <RCCEx_PLL3_Config+0x15c>)
 8004406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004408:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	699b      	ldr	r3, [r3, #24]
 8004410:	4928      	ldr	r1, [pc, #160]	@ (80044b4 <RCCEx_PLL3_Config+0x15c>)
 8004412:	4313      	orrs	r3, r2
 8004414:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004416:	4b27      	ldr	r3, [pc, #156]	@ (80044b4 <RCCEx_PLL3_Config+0x15c>)
 8004418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800441a:	4a26      	ldr	r2, [pc, #152]	@ (80044b4 <RCCEx_PLL3_Config+0x15c>)
 800441c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004420:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004422:	4b24      	ldr	r3, [pc, #144]	@ (80044b4 <RCCEx_PLL3_Config+0x15c>)
 8004424:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004426:	4b24      	ldr	r3, [pc, #144]	@ (80044b8 <RCCEx_PLL3_Config+0x160>)
 8004428:	4013      	ands	r3, r2
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	69d2      	ldr	r2, [r2, #28]
 800442e:	00d2      	lsls	r2, r2, #3
 8004430:	4920      	ldr	r1, [pc, #128]	@ (80044b4 <RCCEx_PLL3_Config+0x15c>)
 8004432:	4313      	orrs	r3, r2
 8004434:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004436:	4b1f      	ldr	r3, [pc, #124]	@ (80044b4 <RCCEx_PLL3_Config+0x15c>)
 8004438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800443a:	4a1e      	ldr	r2, [pc, #120]	@ (80044b4 <RCCEx_PLL3_Config+0x15c>)
 800443c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004440:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d106      	bne.n	8004456 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004448:	4b1a      	ldr	r3, [pc, #104]	@ (80044b4 <RCCEx_PLL3_Config+0x15c>)
 800444a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800444c:	4a19      	ldr	r2, [pc, #100]	@ (80044b4 <RCCEx_PLL3_Config+0x15c>)
 800444e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004452:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004454:	e00f      	b.n	8004476 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	2b01      	cmp	r3, #1
 800445a:	d106      	bne.n	800446a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800445c:	4b15      	ldr	r3, [pc, #84]	@ (80044b4 <RCCEx_PLL3_Config+0x15c>)
 800445e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004460:	4a14      	ldr	r2, [pc, #80]	@ (80044b4 <RCCEx_PLL3_Config+0x15c>)
 8004462:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004466:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004468:	e005      	b.n	8004476 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800446a:	4b12      	ldr	r3, [pc, #72]	@ (80044b4 <RCCEx_PLL3_Config+0x15c>)
 800446c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800446e:	4a11      	ldr	r2, [pc, #68]	@ (80044b4 <RCCEx_PLL3_Config+0x15c>)
 8004470:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004474:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004476:	4b0f      	ldr	r3, [pc, #60]	@ (80044b4 <RCCEx_PLL3_Config+0x15c>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a0e      	ldr	r2, [pc, #56]	@ (80044b4 <RCCEx_PLL3_Config+0x15c>)
 800447c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004480:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004482:	f7fc fe13 	bl	80010ac <HAL_GetTick>
 8004486:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004488:	e008      	b.n	800449c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800448a:	f7fc fe0f 	bl	80010ac <HAL_GetTick>
 800448e:	4602      	mov	r2, r0
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	2b02      	cmp	r3, #2
 8004496:	d901      	bls.n	800449c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e006      	b.n	80044aa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800449c:	4b05      	ldr	r3, [pc, #20]	@ (80044b4 <RCCEx_PLL3_Config+0x15c>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d0f0      	beq.n	800448a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80044a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3710      	adds	r7, #16
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	58024400 	.word	0x58024400
 80044b8:	ffff0007 	.word	0xffff0007

080044bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d101      	bne.n	80044ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e042      	b.n	8004554 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d106      	bne.n	80044e6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f7fc fc59 	bl	8000d98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2224      	movs	r2, #36	@ 0x24
 80044ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f022 0201 	bic.w	r2, r2, #1
 80044fc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004502:	2b00      	cmp	r3, #0
 8004504:	d002      	beq.n	800450c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 fe1e 	bl	8005148 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f000 f8b3 	bl	8004678 <UART_SetConfig>
 8004512:	4603      	mov	r3, r0
 8004514:	2b01      	cmp	r3, #1
 8004516:	d101      	bne.n	800451c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e01b      	b.n	8004554 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	685a      	ldr	r2, [r3, #4]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800452a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	689a      	ldr	r2, [r3, #8]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800453a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f042 0201 	orr.w	r2, r2, #1
 800454a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f000 fe9d 	bl	800528c <UART_CheckIdleState>
 8004552:	4603      	mov	r3, r0
}
 8004554:	4618      	mov	r0, r3
 8004556:	3708      	adds	r7, #8
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b08a      	sub	sp, #40	@ 0x28
 8004560:	af02      	add	r7, sp, #8
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	60b9      	str	r1, [r7, #8]
 8004566:	603b      	str	r3, [r7, #0]
 8004568:	4613      	mov	r3, r2
 800456a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004572:	2b20      	cmp	r3, #32
 8004574:	d17b      	bne.n	800466e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d002      	beq.n	8004582 <HAL_UART_Transmit+0x26>
 800457c:	88fb      	ldrh	r3, [r7, #6]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d101      	bne.n	8004586 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e074      	b.n	8004670 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2200      	movs	r2, #0
 800458a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2221      	movs	r2, #33	@ 0x21
 8004592:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004596:	f7fc fd89 	bl	80010ac <HAL_GetTick>
 800459a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	88fa      	ldrh	r2, [r7, #6]
 80045a0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	88fa      	ldrh	r2, [r7, #6]
 80045a8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045b4:	d108      	bne.n	80045c8 <HAL_UART_Transmit+0x6c>
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d104      	bne.n	80045c8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80045be:	2300      	movs	r3, #0
 80045c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	61bb      	str	r3, [r7, #24]
 80045c6:	e003      	b.n	80045d0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045cc:	2300      	movs	r3, #0
 80045ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80045d0:	e030      	b.n	8004634 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	9300      	str	r3, [sp, #0]
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	2200      	movs	r2, #0
 80045da:	2180      	movs	r1, #128	@ 0x80
 80045dc:	68f8      	ldr	r0, [r7, #12]
 80045de:	f000 feff 	bl	80053e0 <UART_WaitOnFlagUntilTimeout>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d005      	beq.n	80045f4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2220      	movs	r2, #32
 80045ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80045f0:	2303      	movs	r3, #3
 80045f2:	e03d      	b.n	8004670 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d10b      	bne.n	8004612 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	881b      	ldrh	r3, [r3, #0]
 80045fe:	461a      	mov	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004608:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	3302      	adds	r3, #2
 800460e:	61bb      	str	r3, [r7, #24]
 8004610:	e007      	b.n	8004622 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	781a      	ldrb	r2, [r3, #0]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	3301      	adds	r3, #1
 8004620:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004628:	b29b      	uxth	r3, r3
 800462a:	3b01      	subs	r3, #1
 800462c:	b29a      	uxth	r2, r3
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800463a:	b29b      	uxth	r3, r3
 800463c:	2b00      	cmp	r3, #0
 800463e:	d1c8      	bne.n	80045d2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	9300      	str	r3, [sp, #0]
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	2200      	movs	r2, #0
 8004648:	2140      	movs	r1, #64	@ 0x40
 800464a:	68f8      	ldr	r0, [r7, #12]
 800464c:	f000 fec8 	bl	80053e0 <UART_WaitOnFlagUntilTimeout>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d005      	beq.n	8004662 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2220      	movs	r2, #32
 800465a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e006      	b.n	8004670 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2220      	movs	r2, #32
 8004666:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800466a:	2300      	movs	r3, #0
 800466c:	e000      	b.n	8004670 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800466e:	2302      	movs	r3, #2
  }
}
 8004670:	4618      	mov	r0, r3
 8004672:	3720      	adds	r7, #32
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004678:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800467c:	b092      	sub	sp, #72	@ 0x48
 800467e:	af00      	add	r7, sp, #0
 8004680:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004682:	2300      	movs	r3, #0
 8004684:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	689a      	ldr	r2, [r3, #8]
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	431a      	orrs	r2, r3
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	695b      	ldr	r3, [r3, #20]
 8004696:	431a      	orrs	r2, r3
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	69db      	ldr	r3, [r3, #28]
 800469c:	4313      	orrs	r3, r2
 800469e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	4bbe      	ldr	r3, [pc, #760]	@ (80049a0 <UART_SetConfig+0x328>)
 80046a8:	4013      	ands	r3, r2
 80046aa:	697a      	ldr	r2, [r7, #20]
 80046ac:	6812      	ldr	r2, [r2, #0]
 80046ae:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80046b0:	430b      	orrs	r3, r1
 80046b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	68da      	ldr	r2, [r3, #12]
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	430a      	orrs	r2, r1
 80046c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	699b      	ldr	r3, [r3, #24]
 80046ce:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4ab3      	ldr	r2, [pc, #716]	@ (80049a4 <UART_SetConfig+0x32c>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d004      	beq.n	80046e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	6a1b      	ldr	r3, [r3, #32]
 80046de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80046e0:	4313      	orrs	r3, r2
 80046e2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	689a      	ldr	r2, [r3, #8]
 80046ea:	4baf      	ldr	r3, [pc, #700]	@ (80049a8 <UART_SetConfig+0x330>)
 80046ec:	4013      	ands	r3, r2
 80046ee:	697a      	ldr	r2, [r7, #20]
 80046f0:	6812      	ldr	r2, [r2, #0]
 80046f2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80046f4:	430b      	orrs	r3, r1
 80046f6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046fe:	f023 010f 	bic.w	r1, r3, #15
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	430a      	orrs	r2, r1
 800470c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4aa6      	ldr	r2, [pc, #664]	@ (80049ac <UART_SetConfig+0x334>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d177      	bne.n	8004808 <UART_SetConfig+0x190>
 8004718:	4ba5      	ldr	r3, [pc, #660]	@ (80049b0 <UART_SetConfig+0x338>)
 800471a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800471c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004720:	2b28      	cmp	r3, #40	@ 0x28
 8004722:	d86d      	bhi.n	8004800 <UART_SetConfig+0x188>
 8004724:	a201      	add	r2, pc, #4	@ (adr r2, 800472c <UART_SetConfig+0xb4>)
 8004726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800472a:	bf00      	nop
 800472c:	080047d1 	.word	0x080047d1
 8004730:	08004801 	.word	0x08004801
 8004734:	08004801 	.word	0x08004801
 8004738:	08004801 	.word	0x08004801
 800473c:	08004801 	.word	0x08004801
 8004740:	08004801 	.word	0x08004801
 8004744:	08004801 	.word	0x08004801
 8004748:	08004801 	.word	0x08004801
 800474c:	080047d9 	.word	0x080047d9
 8004750:	08004801 	.word	0x08004801
 8004754:	08004801 	.word	0x08004801
 8004758:	08004801 	.word	0x08004801
 800475c:	08004801 	.word	0x08004801
 8004760:	08004801 	.word	0x08004801
 8004764:	08004801 	.word	0x08004801
 8004768:	08004801 	.word	0x08004801
 800476c:	080047e1 	.word	0x080047e1
 8004770:	08004801 	.word	0x08004801
 8004774:	08004801 	.word	0x08004801
 8004778:	08004801 	.word	0x08004801
 800477c:	08004801 	.word	0x08004801
 8004780:	08004801 	.word	0x08004801
 8004784:	08004801 	.word	0x08004801
 8004788:	08004801 	.word	0x08004801
 800478c:	080047e9 	.word	0x080047e9
 8004790:	08004801 	.word	0x08004801
 8004794:	08004801 	.word	0x08004801
 8004798:	08004801 	.word	0x08004801
 800479c:	08004801 	.word	0x08004801
 80047a0:	08004801 	.word	0x08004801
 80047a4:	08004801 	.word	0x08004801
 80047a8:	08004801 	.word	0x08004801
 80047ac:	080047f1 	.word	0x080047f1
 80047b0:	08004801 	.word	0x08004801
 80047b4:	08004801 	.word	0x08004801
 80047b8:	08004801 	.word	0x08004801
 80047bc:	08004801 	.word	0x08004801
 80047c0:	08004801 	.word	0x08004801
 80047c4:	08004801 	.word	0x08004801
 80047c8:	08004801 	.word	0x08004801
 80047cc:	080047f9 	.word	0x080047f9
 80047d0:	2301      	movs	r3, #1
 80047d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047d6:	e222      	b.n	8004c1e <UART_SetConfig+0x5a6>
 80047d8:	2304      	movs	r3, #4
 80047da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047de:	e21e      	b.n	8004c1e <UART_SetConfig+0x5a6>
 80047e0:	2308      	movs	r3, #8
 80047e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047e6:	e21a      	b.n	8004c1e <UART_SetConfig+0x5a6>
 80047e8:	2310      	movs	r3, #16
 80047ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047ee:	e216      	b.n	8004c1e <UART_SetConfig+0x5a6>
 80047f0:	2320      	movs	r3, #32
 80047f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047f6:	e212      	b.n	8004c1e <UART_SetConfig+0x5a6>
 80047f8:	2340      	movs	r3, #64	@ 0x40
 80047fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047fe:	e20e      	b.n	8004c1e <UART_SetConfig+0x5a6>
 8004800:	2380      	movs	r3, #128	@ 0x80
 8004802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004806:	e20a      	b.n	8004c1e <UART_SetConfig+0x5a6>
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a69      	ldr	r2, [pc, #420]	@ (80049b4 <UART_SetConfig+0x33c>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d130      	bne.n	8004874 <UART_SetConfig+0x1fc>
 8004812:	4b67      	ldr	r3, [pc, #412]	@ (80049b0 <UART_SetConfig+0x338>)
 8004814:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004816:	f003 0307 	and.w	r3, r3, #7
 800481a:	2b05      	cmp	r3, #5
 800481c:	d826      	bhi.n	800486c <UART_SetConfig+0x1f4>
 800481e:	a201      	add	r2, pc, #4	@ (adr r2, 8004824 <UART_SetConfig+0x1ac>)
 8004820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004824:	0800483d 	.word	0x0800483d
 8004828:	08004845 	.word	0x08004845
 800482c:	0800484d 	.word	0x0800484d
 8004830:	08004855 	.word	0x08004855
 8004834:	0800485d 	.word	0x0800485d
 8004838:	08004865 	.word	0x08004865
 800483c:	2300      	movs	r3, #0
 800483e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004842:	e1ec      	b.n	8004c1e <UART_SetConfig+0x5a6>
 8004844:	2304      	movs	r3, #4
 8004846:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800484a:	e1e8      	b.n	8004c1e <UART_SetConfig+0x5a6>
 800484c:	2308      	movs	r3, #8
 800484e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004852:	e1e4      	b.n	8004c1e <UART_SetConfig+0x5a6>
 8004854:	2310      	movs	r3, #16
 8004856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800485a:	e1e0      	b.n	8004c1e <UART_SetConfig+0x5a6>
 800485c:	2320      	movs	r3, #32
 800485e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004862:	e1dc      	b.n	8004c1e <UART_SetConfig+0x5a6>
 8004864:	2340      	movs	r3, #64	@ 0x40
 8004866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800486a:	e1d8      	b.n	8004c1e <UART_SetConfig+0x5a6>
 800486c:	2380      	movs	r3, #128	@ 0x80
 800486e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004872:	e1d4      	b.n	8004c1e <UART_SetConfig+0x5a6>
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a4f      	ldr	r2, [pc, #316]	@ (80049b8 <UART_SetConfig+0x340>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d130      	bne.n	80048e0 <UART_SetConfig+0x268>
 800487e:	4b4c      	ldr	r3, [pc, #304]	@ (80049b0 <UART_SetConfig+0x338>)
 8004880:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004882:	f003 0307 	and.w	r3, r3, #7
 8004886:	2b05      	cmp	r3, #5
 8004888:	d826      	bhi.n	80048d8 <UART_SetConfig+0x260>
 800488a:	a201      	add	r2, pc, #4	@ (adr r2, 8004890 <UART_SetConfig+0x218>)
 800488c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004890:	080048a9 	.word	0x080048a9
 8004894:	080048b1 	.word	0x080048b1
 8004898:	080048b9 	.word	0x080048b9
 800489c:	080048c1 	.word	0x080048c1
 80048a0:	080048c9 	.word	0x080048c9
 80048a4:	080048d1 	.word	0x080048d1
 80048a8:	2300      	movs	r3, #0
 80048aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048ae:	e1b6      	b.n	8004c1e <UART_SetConfig+0x5a6>
 80048b0:	2304      	movs	r3, #4
 80048b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048b6:	e1b2      	b.n	8004c1e <UART_SetConfig+0x5a6>
 80048b8:	2308      	movs	r3, #8
 80048ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048be:	e1ae      	b.n	8004c1e <UART_SetConfig+0x5a6>
 80048c0:	2310      	movs	r3, #16
 80048c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048c6:	e1aa      	b.n	8004c1e <UART_SetConfig+0x5a6>
 80048c8:	2320      	movs	r3, #32
 80048ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048ce:	e1a6      	b.n	8004c1e <UART_SetConfig+0x5a6>
 80048d0:	2340      	movs	r3, #64	@ 0x40
 80048d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048d6:	e1a2      	b.n	8004c1e <UART_SetConfig+0x5a6>
 80048d8:	2380      	movs	r3, #128	@ 0x80
 80048da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048de:	e19e      	b.n	8004c1e <UART_SetConfig+0x5a6>
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a35      	ldr	r2, [pc, #212]	@ (80049bc <UART_SetConfig+0x344>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d130      	bne.n	800494c <UART_SetConfig+0x2d4>
 80048ea:	4b31      	ldr	r3, [pc, #196]	@ (80049b0 <UART_SetConfig+0x338>)
 80048ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048ee:	f003 0307 	and.w	r3, r3, #7
 80048f2:	2b05      	cmp	r3, #5
 80048f4:	d826      	bhi.n	8004944 <UART_SetConfig+0x2cc>
 80048f6:	a201      	add	r2, pc, #4	@ (adr r2, 80048fc <UART_SetConfig+0x284>)
 80048f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048fc:	08004915 	.word	0x08004915
 8004900:	0800491d 	.word	0x0800491d
 8004904:	08004925 	.word	0x08004925
 8004908:	0800492d 	.word	0x0800492d
 800490c:	08004935 	.word	0x08004935
 8004910:	0800493d 	.word	0x0800493d
 8004914:	2300      	movs	r3, #0
 8004916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800491a:	e180      	b.n	8004c1e <UART_SetConfig+0x5a6>
 800491c:	2304      	movs	r3, #4
 800491e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004922:	e17c      	b.n	8004c1e <UART_SetConfig+0x5a6>
 8004924:	2308      	movs	r3, #8
 8004926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800492a:	e178      	b.n	8004c1e <UART_SetConfig+0x5a6>
 800492c:	2310      	movs	r3, #16
 800492e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004932:	e174      	b.n	8004c1e <UART_SetConfig+0x5a6>
 8004934:	2320      	movs	r3, #32
 8004936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800493a:	e170      	b.n	8004c1e <UART_SetConfig+0x5a6>
 800493c:	2340      	movs	r3, #64	@ 0x40
 800493e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004942:	e16c      	b.n	8004c1e <UART_SetConfig+0x5a6>
 8004944:	2380      	movs	r3, #128	@ 0x80
 8004946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800494a:	e168      	b.n	8004c1e <UART_SetConfig+0x5a6>
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a1b      	ldr	r2, [pc, #108]	@ (80049c0 <UART_SetConfig+0x348>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d142      	bne.n	80049dc <UART_SetConfig+0x364>
 8004956:	4b16      	ldr	r3, [pc, #88]	@ (80049b0 <UART_SetConfig+0x338>)
 8004958:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800495a:	f003 0307 	and.w	r3, r3, #7
 800495e:	2b05      	cmp	r3, #5
 8004960:	d838      	bhi.n	80049d4 <UART_SetConfig+0x35c>
 8004962:	a201      	add	r2, pc, #4	@ (adr r2, 8004968 <UART_SetConfig+0x2f0>)
 8004964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004968:	08004981 	.word	0x08004981
 800496c:	08004989 	.word	0x08004989
 8004970:	08004991 	.word	0x08004991
 8004974:	08004999 	.word	0x08004999
 8004978:	080049c5 	.word	0x080049c5
 800497c:	080049cd 	.word	0x080049cd
 8004980:	2300      	movs	r3, #0
 8004982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004986:	e14a      	b.n	8004c1e <UART_SetConfig+0x5a6>
 8004988:	2304      	movs	r3, #4
 800498a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800498e:	e146      	b.n	8004c1e <UART_SetConfig+0x5a6>
 8004990:	2308      	movs	r3, #8
 8004992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004996:	e142      	b.n	8004c1e <UART_SetConfig+0x5a6>
 8004998:	2310      	movs	r3, #16
 800499a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800499e:	e13e      	b.n	8004c1e <UART_SetConfig+0x5a6>
 80049a0:	cfff69f3 	.word	0xcfff69f3
 80049a4:	58000c00 	.word	0x58000c00
 80049a8:	11fff4ff 	.word	0x11fff4ff
 80049ac:	40011000 	.word	0x40011000
 80049b0:	58024400 	.word	0x58024400
 80049b4:	40004400 	.word	0x40004400
 80049b8:	40004800 	.word	0x40004800
 80049bc:	40004c00 	.word	0x40004c00
 80049c0:	40005000 	.word	0x40005000
 80049c4:	2320      	movs	r3, #32
 80049c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049ca:	e128      	b.n	8004c1e <UART_SetConfig+0x5a6>
 80049cc:	2340      	movs	r3, #64	@ 0x40
 80049ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049d2:	e124      	b.n	8004c1e <UART_SetConfig+0x5a6>
 80049d4:	2380      	movs	r3, #128	@ 0x80
 80049d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049da:	e120      	b.n	8004c1e <UART_SetConfig+0x5a6>
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4acb      	ldr	r2, [pc, #812]	@ (8004d10 <UART_SetConfig+0x698>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d176      	bne.n	8004ad4 <UART_SetConfig+0x45c>
 80049e6:	4bcb      	ldr	r3, [pc, #812]	@ (8004d14 <UART_SetConfig+0x69c>)
 80049e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80049ee:	2b28      	cmp	r3, #40	@ 0x28
 80049f0:	d86c      	bhi.n	8004acc <UART_SetConfig+0x454>
 80049f2:	a201      	add	r2, pc, #4	@ (adr r2, 80049f8 <UART_SetConfig+0x380>)
 80049f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f8:	08004a9d 	.word	0x08004a9d
 80049fc:	08004acd 	.word	0x08004acd
 8004a00:	08004acd 	.word	0x08004acd
 8004a04:	08004acd 	.word	0x08004acd
 8004a08:	08004acd 	.word	0x08004acd
 8004a0c:	08004acd 	.word	0x08004acd
 8004a10:	08004acd 	.word	0x08004acd
 8004a14:	08004acd 	.word	0x08004acd
 8004a18:	08004aa5 	.word	0x08004aa5
 8004a1c:	08004acd 	.word	0x08004acd
 8004a20:	08004acd 	.word	0x08004acd
 8004a24:	08004acd 	.word	0x08004acd
 8004a28:	08004acd 	.word	0x08004acd
 8004a2c:	08004acd 	.word	0x08004acd
 8004a30:	08004acd 	.word	0x08004acd
 8004a34:	08004acd 	.word	0x08004acd
 8004a38:	08004aad 	.word	0x08004aad
 8004a3c:	08004acd 	.word	0x08004acd
 8004a40:	08004acd 	.word	0x08004acd
 8004a44:	08004acd 	.word	0x08004acd
 8004a48:	08004acd 	.word	0x08004acd
 8004a4c:	08004acd 	.word	0x08004acd
 8004a50:	08004acd 	.word	0x08004acd
 8004a54:	08004acd 	.word	0x08004acd
 8004a58:	08004ab5 	.word	0x08004ab5
 8004a5c:	08004acd 	.word	0x08004acd
 8004a60:	08004acd 	.word	0x08004acd
 8004a64:	08004acd 	.word	0x08004acd
 8004a68:	08004acd 	.word	0x08004acd
 8004a6c:	08004acd 	.word	0x08004acd
 8004a70:	08004acd 	.word	0x08004acd
 8004a74:	08004acd 	.word	0x08004acd
 8004a78:	08004abd 	.word	0x08004abd
 8004a7c:	08004acd 	.word	0x08004acd
 8004a80:	08004acd 	.word	0x08004acd
 8004a84:	08004acd 	.word	0x08004acd
 8004a88:	08004acd 	.word	0x08004acd
 8004a8c:	08004acd 	.word	0x08004acd
 8004a90:	08004acd 	.word	0x08004acd
 8004a94:	08004acd 	.word	0x08004acd
 8004a98:	08004ac5 	.word	0x08004ac5
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004aa2:	e0bc      	b.n	8004c1e <UART_SetConfig+0x5a6>
 8004aa4:	2304      	movs	r3, #4
 8004aa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004aaa:	e0b8      	b.n	8004c1e <UART_SetConfig+0x5a6>
 8004aac:	2308      	movs	r3, #8
 8004aae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ab2:	e0b4      	b.n	8004c1e <UART_SetConfig+0x5a6>
 8004ab4:	2310      	movs	r3, #16
 8004ab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004aba:	e0b0      	b.n	8004c1e <UART_SetConfig+0x5a6>
 8004abc:	2320      	movs	r3, #32
 8004abe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ac2:	e0ac      	b.n	8004c1e <UART_SetConfig+0x5a6>
 8004ac4:	2340      	movs	r3, #64	@ 0x40
 8004ac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004aca:	e0a8      	b.n	8004c1e <UART_SetConfig+0x5a6>
 8004acc:	2380      	movs	r3, #128	@ 0x80
 8004ace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ad2:	e0a4      	b.n	8004c1e <UART_SetConfig+0x5a6>
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a8f      	ldr	r2, [pc, #572]	@ (8004d18 <UART_SetConfig+0x6a0>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d130      	bne.n	8004b40 <UART_SetConfig+0x4c8>
 8004ade:	4b8d      	ldr	r3, [pc, #564]	@ (8004d14 <UART_SetConfig+0x69c>)
 8004ae0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ae2:	f003 0307 	and.w	r3, r3, #7
 8004ae6:	2b05      	cmp	r3, #5
 8004ae8:	d826      	bhi.n	8004b38 <UART_SetConfig+0x4c0>
 8004aea:	a201      	add	r2, pc, #4	@ (adr r2, 8004af0 <UART_SetConfig+0x478>)
 8004aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004af0:	08004b09 	.word	0x08004b09
 8004af4:	08004b11 	.word	0x08004b11
 8004af8:	08004b19 	.word	0x08004b19
 8004afc:	08004b21 	.word	0x08004b21
 8004b00:	08004b29 	.word	0x08004b29
 8004b04:	08004b31 	.word	0x08004b31
 8004b08:	2300      	movs	r3, #0
 8004b0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b0e:	e086      	b.n	8004c1e <UART_SetConfig+0x5a6>
 8004b10:	2304      	movs	r3, #4
 8004b12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b16:	e082      	b.n	8004c1e <UART_SetConfig+0x5a6>
 8004b18:	2308      	movs	r3, #8
 8004b1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b1e:	e07e      	b.n	8004c1e <UART_SetConfig+0x5a6>
 8004b20:	2310      	movs	r3, #16
 8004b22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b26:	e07a      	b.n	8004c1e <UART_SetConfig+0x5a6>
 8004b28:	2320      	movs	r3, #32
 8004b2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b2e:	e076      	b.n	8004c1e <UART_SetConfig+0x5a6>
 8004b30:	2340      	movs	r3, #64	@ 0x40
 8004b32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b36:	e072      	b.n	8004c1e <UART_SetConfig+0x5a6>
 8004b38:	2380      	movs	r3, #128	@ 0x80
 8004b3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b3e:	e06e      	b.n	8004c1e <UART_SetConfig+0x5a6>
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a75      	ldr	r2, [pc, #468]	@ (8004d1c <UART_SetConfig+0x6a4>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d130      	bne.n	8004bac <UART_SetConfig+0x534>
 8004b4a:	4b72      	ldr	r3, [pc, #456]	@ (8004d14 <UART_SetConfig+0x69c>)
 8004b4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b4e:	f003 0307 	and.w	r3, r3, #7
 8004b52:	2b05      	cmp	r3, #5
 8004b54:	d826      	bhi.n	8004ba4 <UART_SetConfig+0x52c>
 8004b56:	a201      	add	r2, pc, #4	@ (adr r2, 8004b5c <UART_SetConfig+0x4e4>)
 8004b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b5c:	08004b75 	.word	0x08004b75
 8004b60:	08004b7d 	.word	0x08004b7d
 8004b64:	08004b85 	.word	0x08004b85
 8004b68:	08004b8d 	.word	0x08004b8d
 8004b6c:	08004b95 	.word	0x08004b95
 8004b70:	08004b9d 	.word	0x08004b9d
 8004b74:	2300      	movs	r3, #0
 8004b76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b7a:	e050      	b.n	8004c1e <UART_SetConfig+0x5a6>
 8004b7c:	2304      	movs	r3, #4
 8004b7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b82:	e04c      	b.n	8004c1e <UART_SetConfig+0x5a6>
 8004b84:	2308      	movs	r3, #8
 8004b86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b8a:	e048      	b.n	8004c1e <UART_SetConfig+0x5a6>
 8004b8c:	2310      	movs	r3, #16
 8004b8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b92:	e044      	b.n	8004c1e <UART_SetConfig+0x5a6>
 8004b94:	2320      	movs	r3, #32
 8004b96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b9a:	e040      	b.n	8004c1e <UART_SetConfig+0x5a6>
 8004b9c:	2340      	movs	r3, #64	@ 0x40
 8004b9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ba2:	e03c      	b.n	8004c1e <UART_SetConfig+0x5a6>
 8004ba4:	2380      	movs	r3, #128	@ 0x80
 8004ba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004baa:	e038      	b.n	8004c1e <UART_SetConfig+0x5a6>
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a5b      	ldr	r2, [pc, #364]	@ (8004d20 <UART_SetConfig+0x6a8>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d130      	bne.n	8004c18 <UART_SetConfig+0x5a0>
 8004bb6:	4b57      	ldr	r3, [pc, #348]	@ (8004d14 <UART_SetConfig+0x69c>)
 8004bb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bba:	f003 0307 	and.w	r3, r3, #7
 8004bbe:	2b05      	cmp	r3, #5
 8004bc0:	d826      	bhi.n	8004c10 <UART_SetConfig+0x598>
 8004bc2:	a201      	add	r2, pc, #4	@ (adr r2, 8004bc8 <UART_SetConfig+0x550>)
 8004bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bc8:	08004be1 	.word	0x08004be1
 8004bcc:	08004be9 	.word	0x08004be9
 8004bd0:	08004bf1 	.word	0x08004bf1
 8004bd4:	08004bf9 	.word	0x08004bf9
 8004bd8:	08004c01 	.word	0x08004c01
 8004bdc:	08004c09 	.word	0x08004c09
 8004be0:	2302      	movs	r3, #2
 8004be2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004be6:	e01a      	b.n	8004c1e <UART_SetConfig+0x5a6>
 8004be8:	2304      	movs	r3, #4
 8004bea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bee:	e016      	b.n	8004c1e <UART_SetConfig+0x5a6>
 8004bf0:	2308      	movs	r3, #8
 8004bf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bf6:	e012      	b.n	8004c1e <UART_SetConfig+0x5a6>
 8004bf8:	2310      	movs	r3, #16
 8004bfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bfe:	e00e      	b.n	8004c1e <UART_SetConfig+0x5a6>
 8004c00:	2320      	movs	r3, #32
 8004c02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c06:	e00a      	b.n	8004c1e <UART_SetConfig+0x5a6>
 8004c08:	2340      	movs	r3, #64	@ 0x40
 8004c0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c0e:	e006      	b.n	8004c1e <UART_SetConfig+0x5a6>
 8004c10:	2380      	movs	r3, #128	@ 0x80
 8004c12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c16:	e002      	b.n	8004c1e <UART_SetConfig+0x5a6>
 8004c18:	2380      	movs	r3, #128	@ 0x80
 8004c1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a3f      	ldr	r2, [pc, #252]	@ (8004d20 <UART_SetConfig+0x6a8>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	f040 80f8 	bne.w	8004e1a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004c2a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004c2e:	2b20      	cmp	r3, #32
 8004c30:	dc46      	bgt.n	8004cc0 <UART_SetConfig+0x648>
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	f2c0 8082 	blt.w	8004d3c <UART_SetConfig+0x6c4>
 8004c38:	3b02      	subs	r3, #2
 8004c3a:	2b1e      	cmp	r3, #30
 8004c3c:	d87e      	bhi.n	8004d3c <UART_SetConfig+0x6c4>
 8004c3e:	a201      	add	r2, pc, #4	@ (adr r2, 8004c44 <UART_SetConfig+0x5cc>)
 8004c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c44:	08004cc7 	.word	0x08004cc7
 8004c48:	08004d3d 	.word	0x08004d3d
 8004c4c:	08004ccf 	.word	0x08004ccf
 8004c50:	08004d3d 	.word	0x08004d3d
 8004c54:	08004d3d 	.word	0x08004d3d
 8004c58:	08004d3d 	.word	0x08004d3d
 8004c5c:	08004cdf 	.word	0x08004cdf
 8004c60:	08004d3d 	.word	0x08004d3d
 8004c64:	08004d3d 	.word	0x08004d3d
 8004c68:	08004d3d 	.word	0x08004d3d
 8004c6c:	08004d3d 	.word	0x08004d3d
 8004c70:	08004d3d 	.word	0x08004d3d
 8004c74:	08004d3d 	.word	0x08004d3d
 8004c78:	08004d3d 	.word	0x08004d3d
 8004c7c:	08004cef 	.word	0x08004cef
 8004c80:	08004d3d 	.word	0x08004d3d
 8004c84:	08004d3d 	.word	0x08004d3d
 8004c88:	08004d3d 	.word	0x08004d3d
 8004c8c:	08004d3d 	.word	0x08004d3d
 8004c90:	08004d3d 	.word	0x08004d3d
 8004c94:	08004d3d 	.word	0x08004d3d
 8004c98:	08004d3d 	.word	0x08004d3d
 8004c9c:	08004d3d 	.word	0x08004d3d
 8004ca0:	08004d3d 	.word	0x08004d3d
 8004ca4:	08004d3d 	.word	0x08004d3d
 8004ca8:	08004d3d 	.word	0x08004d3d
 8004cac:	08004d3d 	.word	0x08004d3d
 8004cb0:	08004d3d 	.word	0x08004d3d
 8004cb4:	08004d3d 	.word	0x08004d3d
 8004cb8:	08004d3d 	.word	0x08004d3d
 8004cbc:	08004d2f 	.word	0x08004d2f
 8004cc0:	2b40      	cmp	r3, #64	@ 0x40
 8004cc2:	d037      	beq.n	8004d34 <UART_SetConfig+0x6bc>
 8004cc4:	e03a      	b.n	8004d3c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004cc6:	f7fe ffc3 	bl	8003c50 <HAL_RCCEx_GetD3PCLK1Freq>
 8004cca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004ccc:	e03c      	b.n	8004d48 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004cce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f7fe ffd2 	bl	8003c7c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004cdc:	e034      	b.n	8004d48 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004cde:	f107 0318 	add.w	r3, r7, #24
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f7ff f91e 	bl	8003f24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004cec:	e02c      	b.n	8004d48 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004cee:	4b09      	ldr	r3, [pc, #36]	@ (8004d14 <UART_SetConfig+0x69c>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 0320 	and.w	r3, r3, #32
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d016      	beq.n	8004d28 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004cfa:	4b06      	ldr	r3, [pc, #24]	@ (8004d14 <UART_SetConfig+0x69c>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	08db      	lsrs	r3, r3, #3
 8004d00:	f003 0303 	and.w	r3, r3, #3
 8004d04:	4a07      	ldr	r2, [pc, #28]	@ (8004d24 <UART_SetConfig+0x6ac>)
 8004d06:	fa22 f303 	lsr.w	r3, r2, r3
 8004d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004d0c:	e01c      	b.n	8004d48 <UART_SetConfig+0x6d0>
 8004d0e:	bf00      	nop
 8004d10:	40011400 	.word	0x40011400
 8004d14:	58024400 	.word	0x58024400
 8004d18:	40007800 	.word	0x40007800
 8004d1c:	40007c00 	.word	0x40007c00
 8004d20:	58000c00 	.word	0x58000c00
 8004d24:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8004d28:	4b9d      	ldr	r3, [pc, #628]	@ (8004fa0 <UART_SetConfig+0x928>)
 8004d2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004d2c:	e00c      	b.n	8004d48 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004d2e:	4b9d      	ldr	r3, [pc, #628]	@ (8004fa4 <UART_SetConfig+0x92c>)
 8004d30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004d32:	e009      	b.n	8004d48 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d34:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004d3a:	e005      	b.n	8004d48 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004d46:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004d48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	f000 81de 	beq.w	800510c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d54:	4a94      	ldr	r2, [pc, #592]	@ (8004fa8 <UART_SetConfig+0x930>)
 8004d56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d5e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d62:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	685a      	ldr	r2, [r3, #4]
 8004d68:	4613      	mov	r3, r2
 8004d6a:	005b      	lsls	r3, r3, #1
 8004d6c:	4413      	add	r3, r2
 8004d6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d305      	bcc.n	8004d80 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004d7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d903      	bls.n	8004d88 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004d86:	e1c1      	b.n	800510c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	60bb      	str	r3, [r7, #8]
 8004d8e:	60fa      	str	r2, [r7, #12]
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d94:	4a84      	ldr	r2, [pc, #528]	@ (8004fa8 <UART_SetConfig+0x930>)
 8004d96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	603b      	str	r3, [r7, #0]
 8004da0:	607a      	str	r2, [r7, #4]
 8004da2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004da6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004daa:	f7fb fa95 	bl	80002d8 <__aeabi_uldivmod>
 8004dae:	4602      	mov	r2, r0
 8004db0:	460b      	mov	r3, r1
 8004db2:	4610      	mov	r0, r2
 8004db4:	4619      	mov	r1, r3
 8004db6:	f04f 0200 	mov.w	r2, #0
 8004dba:	f04f 0300 	mov.w	r3, #0
 8004dbe:	020b      	lsls	r3, r1, #8
 8004dc0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004dc4:	0202      	lsls	r2, r0, #8
 8004dc6:	6979      	ldr	r1, [r7, #20]
 8004dc8:	6849      	ldr	r1, [r1, #4]
 8004dca:	0849      	lsrs	r1, r1, #1
 8004dcc:	2000      	movs	r0, #0
 8004dce:	460c      	mov	r4, r1
 8004dd0:	4605      	mov	r5, r0
 8004dd2:	eb12 0804 	adds.w	r8, r2, r4
 8004dd6:	eb43 0905 	adc.w	r9, r3, r5
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	469a      	mov	sl, r3
 8004de2:	4693      	mov	fp, r2
 8004de4:	4652      	mov	r2, sl
 8004de6:	465b      	mov	r3, fp
 8004de8:	4640      	mov	r0, r8
 8004dea:	4649      	mov	r1, r9
 8004dec:	f7fb fa74 	bl	80002d8 <__aeabi_uldivmod>
 8004df0:	4602      	mov	r2, r0
 8004df2:	460b      	mov	r3, r1
 8004df4:	4613      	mov	r3, r2
 8004df6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004df8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dfa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004dfe:	d308      	bcc.n	8004e12 <UART_SetConfig+0x79a>
 8004e00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e06:	d204      	bcs.n	8004e12 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004e0e:	60da      	str	r2, [r3, #12]
 8004e10:	e17c      	b.n	800510c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004e18:	e178      	b.n	800510c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	69db      	ldr	r3, [r3, #28]
 8004e1e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e22:	f040 80c5 	bne.w	8004fb0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8004e26:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004e2a:	2b20      	cmp	r3, #32
 8004e2c:	dc48      	bgt.n	8004ec0 <UART_SetConfig+0x848>
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	db7b      	blt.n	8004f2a <UART_SetConfig+0x8b2>
 8004e32:	2b20      	cmp	r3, #32
 8004e34:	d879      	bhi.n	8004f2a <UART_SetConfig+0x8b2>
 8004e36:	a201      	add	r2, pc, #4	@ (adr r2, 8004e3c <UART_SetConfig+0x7c4>)
 8004e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e3c:	08004ec7 	.word	0x08004ec7
 8004e40:	08004ecf 	.word	0x08004ecf
 8004e44:	08004f2b 	.word	0x08004f2b
 8004e48:	08004f2b 	.word	0x08004f2b
 8004e4c:	08004ed7 	.word	0x08004ed7
 8004e50:	08004f2b 	.word	0x08004f2b
 8004e54:	08004f2b 	.word	0x08004f2b
 8004e58:	08004f2b 	.word	0x08004f2b
 8004e5c:	08004ee7 	.word	0x08004ee7
 8004e60:	08004f2b 	.word	0x08004f2b
 8004e64:	08004f2b 	.word	0x08004f2b
 8004e68:	08004f2b 	.word	0x08004f2b
 8004e6c:	08004f2b 	.word	0x08004f2b
 8004e70:	08004f2b 	.word	0x08004f2b
 8004e74:	08004f2b 	.word	0x08004f2b
 8004e78:	08004f2b 	.word	0x08004f2b
 8004e7c:	08004ef7 	.word	0x08004ef7
 8004e80:	08004f2b 	.word	0x08004f2b
 8004e84:	08004f2b 	.word	0x08004f2b
 8004e88:	08004f2b 	.word	0x08004f2b
 8004e8c:	08004f2b 	.word	0x08004f2b
 8004e90:	08004f2b 	.word	0x08004f2b
 8004e94:	08004f2b 	.word	0x08004f2b
 8004e98:	08004f2b 	.word	0x08004f2b
 8004e9c:	08004f2b 	.word	0x08004f2b
 8004ea0:	08004f2b 	.word	0x08004f2b
 8004ea4:	08004f2b 	.word	0x08004f2b
 8004ea8:	08004f2b 	.word	0x08004f2b
 8004eac:	08004f2b 	.word	0x08004f2b
 8004eb0:	08004f2b 	.word	0x08004f2b
 8004eb4:	08004f2b 	.word	0x08004f2b
 8004eb8:	08004f2b 	.word	0x08004f2b
 8004ebc:	08004f1d 	.word	0x08004f1d
 8004ec0:	2b40      	cmp	r3, #64	@ 0x40
 8004ec2:	d02e      	beq.n	8004f22 <UART_SetConfig+0x8aa>
 8004ec4:	e031      	b.n	8004f2a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ec6:	f7fd fc8d 	bl	80027e4 <HAL_RCC_GetPCLK1Freq>
 8004eca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004ecc:	e033      	b.n	8004f36 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ece:	f7fd fc9f 	bl	8002810 <HAL_RCC_GetPCLK2Freq>
 8004ed2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004ed4:	e02f      	b.n	8004f36 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ed6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004eda:	4618      	mov	r0, r3
 8004edc:	f7fe fece 	bl	8003c7c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004ee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004ee4:	e027      	b.n	8004f36 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ee6:	f107 0318 	add.w	r3, r7, #24
 8004eea:	4618      	mov	r0, r3
 8004eec:	f7ff f81a 	bl	8003f24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004ef4:	e01f      	b.n	8004f36 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ef6:	4b2d      	ldr	r3, [pc, #180]	@ (8004fac <UART_SetConfig+0x934>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 0320 	and.w	r3, r3, #32
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d009      	beq.n	8004f16 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004f02:	4b2a      	ldr	r3, [pc, #168]	@ (8004fac <UART_SetConfig+0x934>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	08db      	lsrs	r3, r3, #3
 8004f08:	f003 0303 	and.w	r3, r3, #3
 8004f0c:	4a24      	ldr	r2, [pc, #144]	@ (8004fa0 <UART_SetConfig+0x928>)
 8004f0e:	fa22 f303 	lsr.w	r3, r2, r3
 8004f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004f14:	e00f      	b.n	8004f36 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8004f16:	4b22      	ldr	r3, [pc, #136]	@ (8004fa0 <UART_SetConfig+0x928>)
 8004f18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f1a:	e00c      	b.n	8004f36 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004f1c:	4b21      	ldr	r3, [pc, #132]	@ (8004fa4 <UART_SetConfig+0x92c>)
 8004f1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f20:	e009      	b.n	8004f36 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f28:	e005      	b.n	8004f36 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004f34:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	f000 80e7 	beq.w	800510c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f42:	4a19      	ldr	r2, [pc, #100]	@ (8004fa8 <UART_SetConfig+0x930>)
 8004f44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f48:	461a      	mov	r2, r3
 8004f4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f50:	005a      	lsls	r2, r3, #1
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	085b      	lsrs	r3, r3, #1
 8004f58:	441a      	add	r2, r3
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f62:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f66:	2b0f      	cmp	r3, #15
 8004f68:	d916      	bls.n	8004f98 <UART_SetConfig+0x920>
 8004f6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f70:	d212      	bcs.n	8004f98 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	f023 030f 	bic.w	r3, r3, #15
 8004f7a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f7e:	085b      	lsrs	r3, r3, #1
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	f003 0307 	and.w	r3, r3, #7
 8004f86:	b29a      	uxth	r2, r3
 8004f88:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8004f94:	60da      	str	r2, [r3, #12]
 8004f96:	e0b9      	b.n	800510c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004f9e:	e0b5      	b.n	800510c <UART_SetConfig+0xa94>
 8004fa0:	03d09000 	.word	0x03d09000
 8004fa4:	003d0900 	.word	0x003d0900
 8004fa8:	080061e0 	.word	0x080061e0
 8004fac:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8004fb0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004fb4:	2b20      	cmp	r3, #32
 8004fb6:	dc49      	bgt.n	800504c <UART_SetConfig+0x9d4>
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	db7c      	blt.n	80050b6 <UART_SetConfig+0xa3e>
 8004fbc:	2b20      	cmp	r3, #32
 8004fbe:	d87a      	bhi.n	80050b6 <UART_SetConfig+0xa3e>
 8004fc0:	a201      	add	r2, pc, #4	@ (adr r2, 8004fc8 <UART_SetConfig+0x950>)
 8004fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fc6:	bf00      	nop
 8004fc8:	08005053 	.word	0x08005053
 8004fcc:	0800505b 	.word	0x0800505b
 8004fd0:	080050b7 	.word	0x080050b7
 8004fd4:	080050b7 	.word	0x080050b7
 8004fd8:	08005063 	.word	0x08005063
 8004fdc:	080050b7 	.word	0x080050b7
 8004fe0:	080050b7 	.word	0x080050b7
 8004fe4:	080050b7 	.word	0x080050b7
 8004fe8:	08005073 	.word	0x08005073
 8004fec:	080050b7 	.word	0x080050b7
 8004ff0:	080050b7 	.word	0x080050b7
 8004ff4:	080050b7 	.word	0x080050b7
 8004ff8:	080050b7 	.word	0x080050b7
 8004ffc:	080050b7 	.word	0x080050b7
 8005000:	080050b7 	.word	0x080050b7
 8005004:	080050b7 	.word	0x080050b7
 8005008:	08005083 	.word	0x08005083
 800500c:	080050b7 	.word	0x080050b7
 8005010:	080050b7 	.word	0x080050b7
 8005014:	080050b7 	.word	0x080050b7
 8005018:	080050b7 	.word	0x080050b7
 800501c:	080050b7 	.word	0x080050b7
 8005020:	080050b7 	.word	0x080050b7
 8005024:	080050b7 	.word	0x080050b7
 8005028:	080050b7 	.word	0x080050b7
 800502c:	080050b7 	.word	0x080050b7
 8005030:	080050b7 	.word	0x080050b7
 8005034:	080050b7 	.word	0x080050b7
 8005038:	080050b7 	.word	0x080050b7
 800503c:	080050b7 	.word	0x080050b7
 8005040:	080050b7 	.word	0x080050b7
 8005044:	080050b7 	.word	0x080050b7
 8005048:	080050a9 	.word	0x080050a9
 800504c:	2b40      	cmp	r3, #64	@ 0x40
 800504e:	d02e      	beq.n	80050ae <UART_SetConfig+0xa36>
 8005050:	e031      	b.n	80050b6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005052:	f7fd fbc7 	bl	80027e4 <HAL_RCC_GetPCLK1Freq>
 8005056:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005058:	e033      	b.n	80050c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800505a:	f7fd fbd9 	bl	8002810 <HAL_RCC_GetPCLK2Freq>
 800505e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005060:	e02f      	b.n	80050c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005062:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005066:	4618      	mov	r0, r3
 8005068:	f7fe fe08 	bl	8003c7c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800506c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800506e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005070:	e027      	b.n	80050c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005072:	f107 0318 	add.w	r3, r7, #24
 8005076:	4618      	mov	r0, r3
 8005078:	f7fe ff54 	bl	8003f24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005080:	e01f      	b.n	80050c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005082:	4b2d      	ldr	r3, [pc, #180]	@ (8005138 <UART_SetConfig+0xac0>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 0320 	and.w	r3, r3, #32
 800508a:	2b00      	cmp	r3, #0
 800508c:	d009      	beq.n	80050a2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800508e:	4b2a      	ldr	r3, [pc, #168]	@ (8005138 <UART_SetConfig+0xac0>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	08db      	lsrs	r3, r3, #3
 8005094:	f003 0303 	and.w	r3, r3, #3
 8005098:	4a28      	ldr	r2, [pc, #160]	@ (800513c <UART_SetConfig+0xac4>)
 800509a:	fa22 f303 	lsr.w	r3, r2, r3
 800509e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80050a0:	e00f      	b.n	80050c2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80050a2:	4b26      	ldr	r3, [pc, #152]	@ (800513c <UART_SetConfig+0xac4>)
 80050a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80050a6:	e00c      	b.n	80050c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80050a8:	4b25      	ldr	r3, [pc, #148]	@ (8005140 <UART_SetConfig+0xac8>)
 80050aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80050ac:	e009      	b.n	80050c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80050b4:	e005      	b.n	80050c2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80050b6:	2300      	movs	r3, #0
 80050b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80050c0:	bf00      	nop
    }

    if (pclk != 0U)
 80050c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d021      	beq.n	800510c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050cc:	4a1d      	ldr	r2, [pc, #116]	@ (8005144 <UART_SetConfig+0xacc>)
 80050ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050d2:	461a      	mov	r2, r3
 80050d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050d6:	fbb3 f2f2 	udiv	r2, r3, r2
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	085b      	lsrs	r3, r3, #1
 80050e0:	441a      	add	r2, r3
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ea:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050ee:	2b0f      	cmp	r3, #15
 80050f0:	d909      	bls.n	8005106 <UART_SetConfig+0xa8e>
 80050f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050f8:	d205      	bcs.n	8005106 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80050fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050fc:	b29a      	uxth	r2, r3
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	60da      	str	r2, [r3, #12]
 8005104:	e002      	b.n	800510c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	2201      	movs	r2, #1
 8005110:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	2201      	movs	r2, #1
 8005118:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	2200      	movs	r2, #0
 8005120:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	2200      	movs	r2, #0
 8005126:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005128:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800512c:	4618      	mov	r0, r3
 800512e:	3748      	adds	r7, #72	@ 0x48
 8005130:	46bd      	mov	sp, r7
 8005132:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005136:	bf00      	nop
 8005138:	58024400 	.word	0x58024400
 800513c:	03d09000 	.word	0x03d09000
 8005140:	003d0900 	.word	0x003d0900
 8005144:	080061e0 	.word	0x080061e0

08005148 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005154:	f003 0308 	and.w	r3, r3, #8
 8005158:	2b00      	cmp	r3, #0
 800515a:	d00a      	beq.n	8005172 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	430a      	orrs	r2, r1
 8005170:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005176:	f003 0301 	and.w	r3, r3, #1
 800517a:	2b00      	cmp	r3, #0
 800517c:	d00a      	beq.n	8005194 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	430a      	orrs	r2, r1
 8005192:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005198:	f003 0302 	and.w	r3, r3, #2
 800519c:	2b00      	cmp	r3, #0
 800519e:	d00a      	beq.n	80051b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	430a      	orrs	r2, r1
 80051b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051ba:	f003 0304 	and.w	r3, r3, #4
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d00a      	beq.n	80051d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	430a      	orrs	r2, r1
 80051d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051dc:	f003 0310 	and.w	r3, r3, #16
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d00a      	beq.n	80051fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	430a      	orrs	r2, r1
 80051f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051fe:	f003 0320 	and.w	r3, r3, #32
 8005202:	2b00      	cmp	r3, #0
 8005204:	d00a      	beq.n	800521c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	430a      	orrs	r2, r1
 800521a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005220:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005224:	2b00      	cmp	r3, #0
 8005226:	d01a      	beq.n	800525e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	430a      	orrs	r2, r1
 800523c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005242:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005246:	d10a      	bne.n	800525e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	430a      	orrs	r2, r1
 800525c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005262:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005266:	2b00      	cmp	r3, #0
 8005268:	d00a      	beq.n	8005280 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	430a      	orrs	r2, r1
 800527e:	605a      	str	r2, [r3, #4]
  }
}
 8005280:	bf00      	nop
 8005282:	370c      	adds	r7, #12
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr

0800528c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b098      	sub	sp, #96	@ 0x60
 8005290:	af02      	add	r7, sp, #8
 8005292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800529c:	f7fb ff06 	bl	80010ac <HAL_GetTick>
 80052a0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 0308 	and.w	r3, r3, #8
 80052ac:	2b08      	cmp	r3, #8
 80052ae:	d12f      	bne.n	8005310 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052b0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80052b4:	9300      	str	r3, [sp, #0]
 80052b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052b8:	2200      	movs	r2, #0
 80052ba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 f88e 	bl	80053e0 <UART_WaitOnFlagUntilTimeout>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d022      	beq.n	8005310 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052d2:	e853 3f00 	ldrex	r3, [r3]
 80052d6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80052d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80052de:	653b      	str	r3, [r7, #80]	@ 0x50
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	461a      	mov	r2, r3
 80052e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80052e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80052ea:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80052ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80052f0:	e841 2300 	strex	r3, r2, [r1]
 80052f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80052f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d1e6      	bne.n	80052ca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2220      	movs	r2, #32
 8005300:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800530c:	2303      	movs	r3, #3
 800530e:	e063      	b.n	80053d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 0304 	and.w	r3, r3, #4
 800531a:	2b04      	cmp	r3, #4
 800531c:	d149      	bne.n	80053b2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800531e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005322:	9300      	str	r3, [sp, #0]
 8005324:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005326:	2200      	movs	r2, #0
 8005328:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f000 f857 	bl	80053e0 <UART_WaitOnFlagUntilTimeout>
 8005332:	4603      	mov	r3, r0
 8005334:	2b00      	cmp	r3, #0
 8005336:	d03c      	beq.n	80053b2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800533e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005340:	e853 3f00 	ldrex	r3, [r3]
 8005344:	623b      	str	r3, [r7, #32]
   return(result);
 8005346:	6a3b      	ldr	r3, [r7, #32]
 8005348:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800534c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	461a      	mov	r2, r3
 8005354:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005356:	633b      	str	r3, [r7, #48]	@ 0x30
 8005358:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800535a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800535c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800535e:	e841 2300 	strex	r3, r2, [r1]
 8005362:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005366:	2b00      	cmp	r3, #0
 8005368:	d1e6      	bne.n	8005338 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	3308      	adds	r3, #8
 8005370:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	e853 3f00 	ldrex	r3, [r3]
 8005378:	60fb      	str	r3, [r7, #12]
   return(result);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f023 0301 	bic.w	r3, r3, #1
 8005380:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	3308      	adds	r3, #8
 8005388:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800538a:	61fa      	str	r2, [r7, #28]
 800538c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800538e:	69b9      	ldr	r1, [r7, #24]
 8005390:	69fa      	ldr	r2, [r7, #28]
 8005392:	e841 2300 	strex	r3, r2, [r1]
 8005396:	617b      	str	r3, [r7, #20]
   return(result);
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d1e5      	bne.n	800536a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2220      	movs	r2, #32
 80053a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053ae:	2303      	movs	r3, #3
 80053b0:	e012      	b.n	80053d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2220      	movs	r2, #32
 80053b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2220      	movs	r2, #32
 80053be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80053d6:	2300      	movs	r3, #0
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3758      	adds	r7, #88	@ 0x58
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	603b      	str	r3, [r7, #0]
 80053ec:	4613      	mov	r3, r2
 80053ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053f0:	e04f      	b.n	8005492 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053f2:	69bb      	ldr	r3, [r7, #24]
 80053f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053f8:	d04b      	beq.n	8005492 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053fa:	f7fb fe57 	bl	80010ac <HAL_GetTick>
 80053fe:	4602      	mov	r2, r0
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	1ad3      	subs	r3, r2, r3
 8005404:	69ba      	ldr	r2, [r7, #24]
 8005406:	429a      	cmp	r2, r3
 8005408:	d302      	bcc.n	8005410 <UART_WaitOnFlagUntilTimeout+0x30>
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d101      	bne.n	8005414 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005410:	2303      	movs	r3, #3
 8005412:	e04e      	b.n	80054b2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 0304 	and.w	r3, r3, #4
 800541e:	2b00      	cmp	r3, #0
 8005420:	d037      	beq.n	8005492 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	2b80      	cmp	r3, #128	@ 0x80
 8005426:	d034      	beq.n	8005492 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	2b40      	cmp	r3, #64	@ 0x40
 800542c:	d031      	beq.n	8005492 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	69db      	ldr	r3, [r3, #28]
 8005434:	f003 0308 	and.w	r3, r3, #8
 8005438:	2b08      	cmp	r3, #8
 800543a:	d110      	bne.n	800545e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2208      	movs	r2, #8
 8005442:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005444:	68f8      	ldr	r0, [r7, #12]
 8005446:	f000 f839 	bl	80054bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2208      	movs	r2, #8
 800544e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2200      	movs	r2, #0
 8005456:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e029      	b.n	80054b2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	69db      	ldr	r3, [r3, #28]
 8005464:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005468:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800546c:	d111      	bne.n	8005492 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005476:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005478:	68f8      	ldr	r0, [r7, #12]
 800547a:	f000 f81f 	bl	80054bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2220      	movs	r2, #32
 8005482:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800548e:	2303      	movs	r3, #3
 8005490:	e00f      	b.n	80054b2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	69da      	ldr	r2, [r3, #28]
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	4013      	ands	r3, r2
 800549c:	68ba      	ldr	r2, [r7, #8]
 800549e:	429a      	cmp	r2, r3
 80054a0:	bf0c      	ite	eq
 80054a2:	2301      	moveq	r3, #1
 80054a4:	2300      	movne	r3, #0
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	461a      	mov	r2, r3
 80054aa:	79fb      	ldrb	r3, [r7, #7]
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d0a0      	beq.n	80053f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054b0:	2300      	movs	r3, #0
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3710      	adds	r7, #16
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
	...

080054bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054bc:	b480      	push	{r7}
 80054be:	b095      	sub	sp, #84	@ 0x54
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054cc:	e853 3f00 	ldrex	r3, [r3]
 80054d0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80054d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80054d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	461a      	mov	r2, r3
 80054e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80054e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80054e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80054ea:	e841 2300 	strex	r3, r2, [r1]
 80054ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80054f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d1e6      	bne.n	80054c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	3308      	adds	r3, #8
 80054fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054fe:	6a3b      	ldr	r3, [r7, #32]
 8005500:	e853 3f00 	ldrex	r3, [r3]
 8005504:	61fb      	str	r3, [r7, #28]
   return(result);
 8005506:	69fa      	ldr	r2, [r7, #28]
 8005508:	4b1e      	ldr	r3, [pc, #120]	@ (8005584 <UART_EndRxTransfer+0xc8>)
 800550a:	4013      	ands	r3, r2
 800550c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	3308      	adds	r3, #8
 8005514:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005516:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005518:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800551a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800551c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800551e:	e841 2300 	strex	r3, r2, [r1]
 8005522:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005526:	2b00      	cmp	r3, #0
 8005528:	d1e5      	bne.n	80054f6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800552e:	2b01      	cmp	r3, #1
 8005530:	d118      	bne.n	8005564 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	e853 3f00 	ldrex	r3, [r3]
 800553e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	f023 0310 	bic.w	r3, r3, #16
 8005546:	647b      	str	r3, [r7, #68]	@ 0x44
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	461a      	mov	r2, r3
 800554e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005550:	61bb      	str	r3, [r7, #24]
 8005552:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005554:	6979      	ldr	r1, [r7, #20]
 8005556:	69ba      	ldr	r2, [r7, #24]
 8005558:	e841 2300 	strex	r3, r2, [r1]
 800555c:	613b      	str	r3, [r7, #16]
   return(result);
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d1e6      	bne.n	8005532 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2220      	movs	r2, #32
 8005568:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005578:	bf00      	nop
 800557a:	3754      	adds	r7, #84	@ 0x54
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr
 8005584:	effffffe 	.word	0xeffffffe

08005588 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005588:	b480      	push	{r7}
 800558a:	b085      	sub	sp, #20
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005596:	2b01      	cmp	r3, #1
 8005598:	d101      	bne.n	800559e <HAL_UARTEx_DisableFifoMode+0x16>
 800559a:	2302      	movs	r3, #2
 800559c:	e027      	b.n	80055ee <HAL_UARTEx_DisableFifoMode+0x66>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2201      	movs	r2, #1
 80055a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2224      	movs	r2, #36	@ 0x24
 80055aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f022 0201 	bic.w	r2, r2, #1
 80055c4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80055cc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	68fa      	ldr	r2, [r7, #12]
 80055da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2220      	movs	r2, #32
 80055e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3714      	adds	r7, #20
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr

080055fa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80055fa:	b580      	push	{r7, lr}
 80055fc:	b084      	sub	sp, #16
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]
 8005602:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800560a:	2b01      	cmp	r3, #1
 800560c:	d101      	bne.n	8005612 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800560e:	2302      	movs	r3, #2
 8005610:	e02d      	b.n	800566e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2201      	movs	r2, #1
 8005616:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2224      	movs	r2, #36	@ 0x24
 800561e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f022 0201 	bic.w	r2, r2, #1
 8005638:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	683a      	ldr	r2, [r7, #0]
 800564a:	430a      	orrs	r2, r1
 800564c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 f850 	bl	80056f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	68fa      	ldr	r2, [r7, #12]
 800565a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2220      	movs	r2, #32
 8005660:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800566c:	2300      	movs	r3, #0
}
 800566e:	4618      	mov	r0, r3
 8005670:	3710      	adds	r7, #16
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}

08005676 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005676:	b580      	push	{r7, lr}
 8005678:	b084      	sub	sp, #16
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
 800567e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005686:	2b01      	cmp	r3, #1
 8005688:	d101      	bne.n	800568e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800568a:	2302      	movs	r3, #2
 800568c:	e02d      	b.n	80056ea <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2201      	movs	r2, #1
 8005692:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2224      	movs	r2, #36	@ 0x24
 800569a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f022 0201 	bic.w	r2, r2, #1
 80056b4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	683a      	ldr	r2, [r7, #0]
 80056c6:	430a      	orrs	r2, r1
 80056c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f000 f812 	bl	80056f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	68fa      	ldr	r2, [r7, #12]
 80056d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2220      	movs	r2, #32
 80056dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3710      	adds	r7, #16
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
	...

080056f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005700:	2b00      	cmp	r3, #0
 8005702:	d108      	bne.n	8005716 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005714:	e031      	b.n	800577a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005716:	2310      	movs	r3, #16
 8005718:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800571a:	2310      	movs	r3, #16
 800571c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	0e5b      	lsrs	r3, r3, #25
 8005726:	b2db      	uxtb	r3, r3
 8005728:	f003 0307 	and.w	r3, r3, #7
 800572c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	0f5b      	lsrs	r3, r3, #29
 8005736:	b2db      	uxtb	r3, r3
 8005738:	f003 0307 	and.w	r3, r3, #7
 800573c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800573e:	7bbb      	ldrb	r3, [r7, #14]
 8005740:	7b3a      	ldrb	r2, [r7, #12]
 8005742:	4911      	ldr	r1, [pc, #68]	@ (8005788 <UARTEx_SetNbDataToProcess+0x94>)
 8005744:	5c8a      	ldrb	r2, [r1, r2]
 8005746:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800574a:	7b3a      	ldrb	r2, [r7, #12]
 800574c:	490f      	ldr	r1, [pc, #60]	@ (800578c <UARTEx_SetNbDataToProcess+0x98>)
 800574e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005750:	fb93 f3f2 	sdiv	r3, r3, r2
 8005754:	b29a      	uxth	r2, r3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800575c:	7bfb      	ldrb	r3, [r7, #15]
 800575e:	7b7a      	ldrb	r2, [r7, #13]
 8005760:	4909      	ldr	r1, [pc, #36]	@ (8005788 <UARTEx_SetNbDataToProcess+0x94>)
 8005762:	5c8a      	ldrb	r2, [r1, r2]
 8005764:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005768:	7b7a      	ldrb	r2, [r7, #13]
 800576a:	4908      	ldr	r1, [pc, #32]	@ (800578c <UARTEx_SetNbDataToProcess+0x98>)
 800576c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800576e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005772:	b29a      	uxth	r2, r3
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800577a:	bf00      	nop
 800577c:	3714      	adds	r7, #20
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr
 8005786:	bf00      	nop
 8005788:	080061f8 	.word	0x080061f8
 800578c:	08006200 	.word	0x08006200

08005790 <HAL_WWDG_Init>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b082      	sub	sp, #8
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  /* Check the WWDG handle allocation */
  if (hwwdg == NULL)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d101      	bne.n	80057a2 <HAL_WWDG_Init+0x12>
  {
    return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e016      	b.n	80057d0 <HAL_WWDG_Init+0x40>

  /* Init the low level hardware */
  hwwdg->MspInitCallback(hwwdg);
#else
  /* Init the low level hardware */
  HAL_WWDG_MspInit(hwwdg);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f7fb fba4 	bl	8000ef0 <HAL_WWDG_MspInit>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */

  /* Set WWDG Counter */
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	68da      	ldr	r2, [r3, #12]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80057b4:	601a      	str	r2, [r3, #0]

  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	691a      	ldr	r2, [r3, #16]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	ea42 0103 	orr.w	r1, r2, r3
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	689a      	ldr	r2, [r3, #8]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	430a      	orrs	r2, r1
 80057cc:	605a      	str	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80057ce:	2300      	movs	r3, #0
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3708      	adds	r7, #8
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}

080057d8 <HAL_WWDG_Refresh>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Refresh(WWDG_HandleTypeDef *hwwdg)
{
 80057d8:	b480      	push	{r7}
 80057da:	b083      	sub	sp, #12
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  /* Write to WWDG CR the WWDG Counter value to refresh with */
  WRITE_REG(hwwdg->Instance->CR, (hwwdg->Init.Counter));
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	68d2      	ldr	r2, [r2, #12]
 80057e8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80057ea:	2300      	movs	r3, #0
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	370c      	adds	r7, #12
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <HAL_WWDG_IRQHandler>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
void HAL_WWDG_IRQHandler(WWDG_HandleTypeDef *hwwdg)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b082      	sub	sp, #8
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  /* Check if Early Wakeup Interrupt is enable */
  if (__HAL_WWDG_GET_IT_SOURCE(hwwdg, WWDG_IT_EWI) != RESET)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800580a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800580e:	d10e      	bne.n	800582e <HAL_WWDG_IRQHandler+0x36>
  {
    /* Check if WWDG Early Wakeup Interrupt occurred */
    if (__HAL_WWDG_GET_FLAG(hwwdg, WWDG_FLAG_EWIF) != RESET)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	f003 0301 	and.w	r3, r3, #1
 800581a:	2b01      	cmp	r3, #1
 800581c:	d107      	bne.n	800582e <HAL_WWDG_IRQHandler+0x36>
    {
      /* Clear the WWDG Early Wakeup flag */
      __HAL_WWDG_CLEAR_FLAG(hwwdg, WWDG_FLAG_EWIF);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f06f 0201 	mvn.w	r2, #1
 8005826:	609a      	str	r2, [r3, #8]
#if (USE_HAL_WWDG_REGISTER_CALLBACKS == 1)
      /* Early Wakeup registered callback */
      hwwdg->EwiCallback(hwwdg);
#else
      /* Early Wakeup callback */
      HAL_WWDG_EarlyWakeupCallback(hwwdg);
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f7fb f8e1 	bl	80009f0 <HAL_WWDG_EarlyWakeupCallback>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */
    }
  }
}
 800582e:	bf00      	nop
 8005830:	3708      	adds	r7, #8
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}
	...

08005838 <std>:
 8005838:	2300      	movs	r3, #0
 800583a:	b510      	push	{r4, lr}
 800583c:	4604      	mov	r4, r0
 800583e:	e9c0 3300 	strd	r3, r3, [r0]
 8005842:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005846:	6083      	str	r3, [r0, #8]
 8005848:	8181      	strh	r1, [r0, #12]
 800584a:	6643      	str	r3, [r0, #100]	@ 0x64
 800584c:	81c2      	strh	r2, [r0, #14]
 800584e:	6183      	str	r3, [r0, #24]
 8005850:	4619      	mov	r1, r3
 8005852:	2208      	movs	r2, #8
 8005854:	305c      	adds	r0, #92	@ 0x5c
 8005856:	f000 f9e7 	bl	8005c28 <memset>
 800585a:	4b0d      	ldr	r3, [pc, #52]	@ (8005890 <std+0x58>)
 800585c:	6263      	str	r3, [r4, #36]	@ 0x24
 800585e:	4b0d      	ldr	r3, [pc, #52]	@ (8005894 <std+0x5c>)
 8005860:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005862:	4b0d      	ldr	r3, [pc, #52]	@ (8005898 <std+0x60>)
 8005864:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005866:	4b0d      	ldr	r3, [pc, #52]	@ (800589c <std+0x64>)
 8005868:	6323      	str	r3, [r4, #48]	@ 0x30
 800586a:	4b0d      	ldr	r3, [pc, #52]	@ (80058a0 <std+0x68>)
 800586c:	6224      	str	r4, [r4, #32]
 800586e:	429c      	cmp	r4, r3
 8005870:	d006      	beq.n	8005880 <std+0x48>
 8005872:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005876:	4294      	cmp	r4, r2
 8005878:	d002      	beq.n	8005880 <std+0x48>
 800587a:	33d0      	adds	r3, #208	@ 0xd0
 800587c:	429c      	cmp	r4, r3
 800587e:	d105      	bne.n	800588c <std+0x54>
 8005880:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005888:	f000 ba46 	b.w	8005d18 <__retarget_lock_init_recursive>
 800588c:	bd10      	pop	{r4, pc}
 800588e:	bf00      	nop
 8005890:	08005a79 	.word	0x08005a79
 8005894:	08005a9b 	.word	0x08005a9b
 8005898:	08005ad3 	.word	0x08005ad3
 800589c:	08005af7 	.word	0x08005af7
 80058a0:	24000138 	.word	0x24000138

080058a4 <stdio_exit_handler>:
 80058a4:	4a02      	ldr	r2, [pc, #8]	@ (80058b0 <stdio_exit_handler+0xc>)
 80058a6:	4903      	ldr	r1, [pc, #12]	@ (80058b4 <stdio_exit_handler+0x10>)
 80058a8:	4803      	ldr	r0, [pc, #12]	@ (80058b8 <stdio_exit_handler+0x14>)
 80058aa:	f000 b869 	b.w	8005980 <_fwalk_sglue>
 80058ae:	bf00      	nop
 80058b0:	24000010 	.word	0x24000010
 80058b4:	08006019 	.word	0x08006019
 80058b8:	24000020 	.word	0x24000020

080058bc <cleanup_stdio>:
 80058bc:	6841      	ldr	r1, [r0, #4]
 80058be:	4b0c      	ldr	r3, [pc, #48]	@ (80058f0 <cleanup_stdio+0x34>)
 80058c0:	4299      	cmp	r1, r3
 80058c2:	b510      	push	{r4, lr}
 80058c4:	4604      	mov	r4, r0
 80058c6:	d001      	beq.n	80058cc <cleanup_stdio+0x10>
 80058c8:	f000 fba6 	bl	8006018 <_fflush_r>
 80058cc:	68a1      	ldr	r1, [r4, #8]
 80058ce:	4b09      	ldr	r3, [pc, #36]	@ (80058f4 <cleanup_stdio+0x38>)
 80058d0:	4299      	cmp	r1, r3
 80058d2:	d002      	beq.n	80058da <cleanup_stdio+0x1e>
 80058d4:	4620      	mov	r0, r4
 80058d6:	f000 fb9f 	bl	8006018 <_fflush_r>
 80058da:	68e1      	ldr	r1, [r4, #12]
 80058dc:	4b06      	ldr	r3, [pc, #24]	@ (80058f8 <cleanup_stdio+0x3c>)
 80058de:	4299      	cmp	r1, r3
 80058e0:	d004      	beq.n	80058ec <cleanup_stdio+0x30>
 80058e2:	4620      	mov	r0, r4
 80058e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058e8:	f000 bb96 	b.w	8006018 <_fflush_r>
 80058ec:	bd10      	pop	{r4, pc}
 80058ee:	bf00      	nop
 80058f0:	24000138 	.word	0x24000138
 80058f4:	240001a0 	.word	0x240001a0
 80058f8:	24000208 	.word	0x24000208

080058fc <global_stdio_init.part.0>:
 80058fc:	b510      	push	{r4, lr}
 80058fe:	4b0b      	ldr	r3, [pc, #44]	@ (800592c <global_stdio_init.part.0+0x30>)
 8005900:	4c0b      	ldr	r4, [pc, #44]	@ (8005930 <global_stdio_init.part.0+0x34>)
 8005902:	4a0c      	ldr	r2, [pc, #48]	@ (8005934 <global_stdio_init.part.0+0x38>)
 8005904:	601a      	str	r2, [r3, #0]
 8005906:	4620      	mov	r0, r4
 8005908:	2200      	movs	r2, #0
 800590a:	2104      	movs	r1, #4
 800590c:	f7ff ff94 	bl	8005838 <std>
 8005910:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005914:	2201      	movs	r2, #1
 8005916:	2109      	movs	r1, #9
 8005918:	f7ff ff8e 	bl	8005838 <std>
 800591c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005920:	2202      	movs	r2, #2
 8005922:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005926:	2112      	movs	r1, #18
 8005928:	f7ff bf86 	b.w	8005838 <std>
 800592c:	24000270 	.word	0x24000270
 8005930:	24000138 	.word	0x24000138
 8005934:	080058a5 	.word	0x080058a5

08005938 <__sfp_lock_acquire>:
 8005938:	4801      	ldr	r0, [pc, #4]	@ (8005940 <__sfp_lock_acquire+0x8>)
 800593a:	f000 b9ee 	b.w	8005d1a <__retarget_lock_acquire_recursive>
 800593e:	bf00      	nop
 8005940:	24000279 	.word	0x24000279

08005944 <__sfp_lock_release>:
 8005944:	4801      	ldr	r0, [pc, #4]	@ (800594c <__sfp_lock_release+0x8>)
 8005946:	f000 b9e9 	b.w	8005d1c <__retarget_lock_release_recursive>
 800594a:	bf00      	nop
 800594c:	24000279 	.word	0x24000279

08005950 <__sinit>:
 8005950:	b510      	push	{r4, lr}
 8005952:	4604      	mov	r4, r0
 8005954:	f7ff fff0 	bl	8005938 <__sfp_lock_acquire>
 8005958:	6a23      	ldr	r3, [r4, #32]
 800595a:	b11b      	cbz	r3, 8005964 <__sinit+0x14>
 800595c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005960:	f7ff bff0 	b.w	8005944 <__sfp_lock_release>
 8005964:	4b04      	ldr	r3, [pc, #16]	@ (8005978 <__sinit+0x28>)
 8005966:	6223      	str	r3, [r4, #32]
 8005968:	4b04      	ldr	r3, [pc, #16]	@ (800597c <__sinit+0x2c>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d1f5      	bne.n	800595c <__sinit+0xc>
 8005970:	f7ff ffc4 	bl	80058fc <global_stdio_init.part.0>
 8005974:	e7f2      	b.n	800595c <__sinit+0xc>
 8005976:	bf00      	nop
 8005978:	080058bd 	.word	0x080058bd
 800597c:	24000270 	.word	0x24000270

08005980 <_fwalk_sglue>:
 8005980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005984:	4607      	mov	r7, r0
 8005986:	4688      	mov	r8, r1
 8005988:	4614      	mov	r4, r2
 800598a:	2600      	movs	r6, #0
 800598c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005990:	f1b9 0901 	subs.w	r9, r9, #1
 8005994:	d505      	bpl.n	80059a2 <_fwalk_sglue+0x22>
 8005996:	6824      	ldr	r4, [r4, #0]
 8005998:	2c00      	cmp	r4, #0
 800599a:	d1f7      	bne.n	800598c <_fwalk_sglue+0xc>
 800599c:	4630      	mov	r0, r6
 800599e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059a2:	89ab      	ldrh	r3, [r5, #12]
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d907      	bls.n	80059b8 <_fwalk_sglue+0x38>
 80059a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80059ac:	3301      	adds	r3, #1
 80059ae:	d003      	beq.n	80059b8 <_fwalk_sglue+0x38>
 80059b0:	4629      	mov	r1, r5
 80059b2:	4638      	mov	r0, r7
 80059b4:	47c0      	blx	r8
 80059b6:	4306      	orrs	r6, r0
 80059b8:	3568      	adds	r5, #104	@ 0x68
 80059ba:	e7e9      	b.n	8005990 <_fwalk_sglue+0x10>

080059bc <_puts_r>:
 80059bc:	6a03      	ldr	r3, [r0, #32]
 80059be:	b570      	push	{r4, r5, r6, lr}
 80059c0:	6884      	ldr	r4, [r0, #8]
 80059c2:	4605      	mov	r5, r0
 80059c4:	460e      	mov	r6, r1
 80059c6:	b90b      	cbnz	r3, 80059cc <_puts_r+0x10>
 80059c8:	f7ff ffc2 	bl	8005950 <__sinit>
 80059cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80059ce:	07db      	lsls	r3, r3, #31
 80059d0:	d405      	bmi.n	80059de <_puts_r+0x22>
 80059d2:	89a3      	ldrh	r3, [r4, #12]
 80059d4:	0598      	lsls	r0, r3, #22
 80059d6:	d402      	bmi.n	80059de <_puts_r+0x22>
 80059d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80059da:	f000 f99e 	bl	8005d1a <__retarget_lock_acquire_recursive>
 80059de:	89a3      	ldrh	r3, [r4, #12]
 80059e0:	0719      	lsls	r1, r3, #28
 80059e2:	d502      	bpl.n	80059ea <_puts_r+0x2e>
 80059e4:	6923      	ldr	r3, [r4, #16]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d135      	bne.n	8005a56 <_puts_r+0x9a>
 80059ea:	4621      	mov	r1, r4
 80059ec:	4628      	mov	r0, r5
 80059ee:	f000 f8c5 	bl	8005b7c <__swsetup_r>
 80059f2:	b380      	cbz	r0, 8005a56 <_puts_r+0x9a>
 80059f4:	f04f 35ff 	mov.w	r5, #4294967295
 80059f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80059fa:	07da      	lsls	r2, r3, #31
 80059fc:	d405      	bmi.n	8005a0a <_puts_r+0x4e>
 80059fe:	89a3      	ldrh	r3, [r4, #12]
 8005a00:	059b      	lsls	r3, r3, #22
 8005a02:	d402      	bmi.n	8005a0a <_puts_r+0x4e>
 8005a04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005a06:	f000 f989 	bl	8005d1c <__retarget_lock_release_recursive>
 8005a0a:	4628      	mov	r0, r5
 8005a0c:	bd70      	pop	{r4, r5, r6, pc}
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	da04      	bge.n	8005a1c <_puts_r+0x60>
 8005a12:	69a2      	ldr	r2, [r4, #24]
 8005a14:	429a      	cmp	r2, r3
 8005a16:	dc17      	bgt.n	8005a48 <_puts_r+0x8c>
 8005a18:	290a      	cmp	r1, #10
 8005a1a:	d015      	beq.n	8005a48 <_puts_r+0x8c>
 8005a1c:	6823      	ldr	r3, [r4, #0]
 8005a1e:	1c5a      	adds	r2, r3, #1
 8005a20:	6022      	str	r2, [r4, #0]
 8005a22:	7019      	strb	r1, [r3, #0]
 8005a24:	68a3      	ldr	r3, [r4, #8]
 8005a26:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005a2a:	3b01      	subs	r3, #1
 8005a2c:	60a3      	str	r3, [r4, #8]
 8005a2e:	2900      	cmp	r1, #0
 8005a30:	d1ed      	bne.n	8005a0e <_puts_r+0x52>
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	da11      	bge.n	8005a5a <_puts_r+0x9e>
 8005a36:	4622      	mov	r2, r4
 8005a38:	210a      	movs	r1, #10
 8005a3a:	4628      	mov	r0, r5
 8005a3c:	f000 f85f 	bl	8005afe <__swbuf_r>
 8005a40:	3001      	adds	r0, #1
 8005a42:	d0d7      	beq.n	80059f4 <_puts_r+0x38>
 8005a44:	250a      	movs	r5, #10
 8005a46:	e7d7      	b.n	80059f8 <_puts_r+0x3c>
 8005a48:	4622      	mov	r2, r4
 8005a4a:	4628      	mov	r0, r5
 8005a4c:	f000 f857 	bl	8005afe <__swbuf_r>
 8005a50:	3001      	adds	r0, #1
 8005a52:	d1e7      	bne.n	8005a24 <_puts_r+0x68>
 8005a54:	e7ce      	b.n	80059f4 <_puts_r+0x38>
 8005a56:	3e01      	subs	r6, #1
 8005a58:	e7e4      	b.n	8005a24 <_puts_r+0x68>
 8005a5a:	6823      	ldr	r3, [r4, #0]
 8005a5c:	1c5a      	adds	r2, r3, #1
 8005a5e:	6022      	str	r2, [r4, #0]
 8005a60:	220a      	movs	r2, #10
 8005a62:	701a      	strb	r2, [r3, #0]
 8005a64:	e7ee      	b.n	8005a44 <_puts_r+0x88>
	...

08005a68 <puts>:
 8005a68:	4b02      	ldr	r3, [pc, #8]	@ (8005a74 <puts+0xc>)
 8005a6a:	4601      	mov	r1, r0
 8005a6c:	6818      	ldr	r0, [r3, #0]
 8005a6e:	f7ff bfa5 	b.w	80059bc <_puts_r>
 8005a72:	bf00      	nop
 8005a74:	2400001c 	.word	0x2400001c

08005a78 <__sread>:
 8005a78:	b510      	push	{r4, lr}
 8005a7a:	460c      	mov	r4, r1
 8005a7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a80:	f000 f8fc 	bl	8005c7c <_read_r>
 8005a84:	2800      	cmp	r0, #0
 8005a86:	bfab      	itete	ge
 8005a88:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005a8a:	89a3      	ldrhlt	r3, [r4, #12]
 8005a8c:	181b      	addge	r3, r3, r0
 8005a8e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005a92:	bfac      	ite	ge
 8005a94:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005a96:	81a3      	strhlt	r3, [r4, #12]
 8005a98:	bd10      	pop	{r4, pc}

08005a9a <__swrite>:
 8005a9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a9e:	461f      	mov	r7, r3
 8005aa0:	898b      	ldrh	r3, [r1, #12]
 8005aa2:	05db      	lsls	r3, r3, #23
 8005aa4:	4605      	mov	r5, r0
 8005aa6:	460c      	mov	r4, r1
 8005aa8:	4616      	mov	r6, r2
 8005aaa:	d505      	bpl.n	8005ab8 <__swrite+0x1e>
 8005aac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ab0:	2302      	movs	r3, #2
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f000 f8d0 	bl	8005c58 <_lseek_r>
 8005ab8:	89a3      	ldrh	r3, [r4, #12]
 8005aba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005abe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005ac2:	81a3      	strh	r3, [r4, #12]
 8005ac4:	4632      	mov	r2, r6
 8005ac6:	463b      	mov	r3, r7
 8005ac8:	4628      	mov	r0, r5
 8005aca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ace:	f000 b8e7 	b.w	8005ca0 <_write_r>

08005ad2 <__sseek>:
 8005ad2:	b510      	push	{r4, lr}
 8005ad4:	460c      	mov	r4, r1
 8005ad6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ada:	f000 f8bd 	bl	8005c58 <_lseek_r>
 8005ade:	1c43      	adds	r3, r0, #1
 8005ae0:	89a3      	ldrh	r3, [r4, #12]
 8005ae2:	bf15      	itete	ne
 8005ae4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005ae6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005aea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005aee:	81a3      	strheq	r3, [r4, #12]
 8005af0:	bf18      	it	ne
 8005af2:	81a3      	strhne	r3, [r4, #12]
 8005af4:	bd10      	pop	{r4, pc}

08005af6 <__sclose>:
 8005af6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005afa:	f000 b89d 	b.w	8005c38 <_close_r>

08005afe <__swbuf_r>:
 8005afe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b00:	460e      	mov	r6, r1
 8005b02:	4614      	mov	r4, r2
 8005b04:	4605      	mov	r5, r0
 8005b06:	b118      	cbz	r0, 8005b10 <__swbuf_r+0x12>
 8005b08:	6a03      	ldr	r3, [r0, #32]
 8005b0a:	b90b      	cbnz	r3, 8005b10 <__swbuf_r+0x12>
 8005b0c:	f7ff ff20 	bl	8005950 <__sinit>
 8005b10:	69a3      	ldr	r3, [r4, #24]
 8005b12:	60a3      	str	r3, [r4, #8]
 8005b14:	89a3      	ldrh	r3, [r4, #12]
 8005b16:	071a      	lsls	r2, r3, #28
 8005b18:	d501      	bpl.n	8005b1e <__swbuf_r+0x20>
 8005b1a:	6923      	ldr	r3, [r4, #16]
 8005b1c:	b943      	cbnz	r3, 8005b30 <__swbuf_r+0x32>
 8005b1e:	4621      	mov	r1, r4
 8005b20:	4628      	mov	r0, r5
 8005b22:	f000 f82b 	bl	8005b7c <__swsetup_r>
 8005b26:	b118      	cbz	r0, 8005b30 <__swbuf_r+0x32>
 8005b28:	f04f 37ff 	mov.w	r7, #4294967295
 8005b2c:	4638      	mov	r0, r7
 8005b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b30:	6823      	ldr	r3, [r4, #0]
 8005b32:	6922      	ldr	r2, [r4, #16]
 8005b34:	1a98      	subs	r0, r3, r2
 8005b36:	6963      	ldr	r3, [r4, #20]
 8005b38:	b2f6      	uxtb	r6, r6
 8005b3a:	4283      	cmp	r3, r0
 8005b3c:	4637      	mov	r7, r6
 8005b3e:	dc05      	bgt.n	8005b4c <__swbuf_r+0x4e>
 8005b40:	4621      	mov	r1, r4
 8005b42:	4628      	mov	r0, r5
 8005b44:	f000 fa68 	bl	8006018 <_fflush_r>
 8005b48:	2800      	cmp	r0, #0
 8005b4a:	d1ed      	bne.n	8005b28 <__swbuf_r+0x2a>
 8005b4c:	68a3      	ldr	r3, [r4, #8]
 8005b4e:	3b01      	subs	r3, #1
 8005b50:	60a3      	str	r3, [r4, #8]
 8005b52:	6823      	ldr	r3, [r4, #0]
 8005b54:	1c5a      	adds	r2, r3, #1
 8005b56:	6022      	str	r2, [r4, #0]
 8005b58:	701e      	strb	r6, [r3, #0]
 8005b5a:	6962      	ldr	r2, [r4, #20]
 8005b5c:	1c43      	adds	r3, r0, #1
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d004      	beq.n	8005b6c <__swbuf_r+0x6e>
 8005b62:	89a3      	ldrh	r3, [r4, #12]
 8005b64:	07db      	lsls	r3, r3, #31
 8005b66:	d5e1      	bpl.n	8005b2c <__swbuf_r+0x2e>
 8005b68:	2e0a      	cmp	r6, #10
 8005b6a:	d1df      	bne.n	8005b2c <__swbuf_r+0x2e>
 8005b6c:	4621      	mov	r1, r4
 8005b6e:	4628      	mov	r0, r5
 8005b70:	f000 fa52 	bl	8006018 <_fflush_r>
 8005b74:	2800      	cmp	r0, #0
 8005b76:	d0d9      	beq.n	8005b2c <__swbuf_r+0x2e>
 8005b78:	e7d6      	b.n	8005b28 <__swbuf_r+0x2a>
	...

08005b7c <__swsetup_r>:
 8005b7c:	b538      	push	{r3, r4, r5, lr}
 8005b7e:	4b29      	ldr	r3, [pc, #164]	@ (8005c24 <__swsetup_r+0xa8>)
 8005b80:	4605      	mov	r5, r0
 8005b82:	6818      	ldr	r0, [r3, #0]
 8005b84:	460c      	mov	r4, r1
 8005b86:	b118      	cbz	r0, 8005b90 <__swsetup_r+0x14>
 8005b88:	6a03      	ldr	r3, [r0, #32]
 8005b8a:	b90b      	cbnz	r3, 8005b90 <__swsetup_r+0x14>
 8005b8c:	f7ff fee0 	bl	8005950 <__sinit>
 8005b90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b94:	0719      	lsls	r1, r3, #28
 8005b96:	d422      	bmi.n	8005bde <__swsetup_r+0x62>
 8005b98:	06da      	lsls	r2, r3, #27
 8005b9a:	d407      	bmi.n	8005bac <__swsetup_r+0x30>
 8005b9c:	2209      	movs	r2, #9
 8005b9e:	602a      	str	r2, [r5, #0]
 8005ba0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ba4:	81a3      	strh	r3, [r4, #12]
 8005ba6:	f04f 30ff 	mov.w	r0, #4294967295
 8005baa:	e033      	b.n	8005c14 <__swsetup_r+0x98>
 8005bac:	0758      	lsls	r0, r3, #29
 8005bae:	d512      	bpl.n	8005bd6 <__swsetup_r+0x5a>
 8005bb0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005bb2:	b141      	cbz	r1, 8005bc6 <__swsetup_r+0x4a>
 8005bb4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005bb8:	4299      	cmp	r1, r3
 8005bba:	d002      	beq.n	8005bc2 <__swsetup_r+0x46>
 8005bbc:	4628      	mov	r0, r5
 8005bbe:	f000 f8af 	bl	8005d20 <_free_r>
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	6363      	str	r3, [r4, #52]	@ 0x34
 8005bc6:	89a3      	ldrh	r3, [r4, #12]
 8005bc8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005bcc:	81a3      	strh	r3, [r4, #12]
 8005bce:	2300      	movs	r3, #0
 8005bd0:	6063      	str	r3, [r4, #4]
 8005bd2:	6923      	ldr	r3, [r4, #16]
 8005bd4:	6023      	str	r3, [r4, #0]
 8005bd6:	89a3      	ldrh	r3, [r4, #12]
 8005bd8:	f043 0308 	orr.w	r3, r3, #8
 8005bdc:	81a3      	strh	r3, [r4, #12]
 8005bde:	6923      	ldr	r3, [r4, #16]
 8005be0:	b94b      	cbnz	r3, 8005bf6 <__swsetup_r+0x7a>
 8005be2:	89a3      	ldrh	r3, [r4, #12]
 8005be4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005be8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bec:	d003      	beq.n	8005bf6 <__swsetup_r+0x7a>
 8005bee:	4621      	mov	r1, r4
 8005bf0:	4628      	mov	r0, r5
 8005bf2:	f000 fa5f 	bl	80060b4 <__smakebuf_r>
 8005bf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bfa:	f013 0201 	ands.w	r2, r3, #1
 8005bfe:	d00a      	beq.n	8005c16 <__swsetup_r+0x9a>
 8005c00:	2200      	movs	r2, #0
 8005c02:	60a2      	str	r2, [r4, #8]
 8005c04:	6962      	ldr	r2, [r4, #20]
 8005c06:	4252      	negs	r2, r2
 8005c08:	61a2      	str	r2, [r4, #24]
 8005c0a:	6922      	ldr	r2, [r4, #16]
 8005c0c:	b942      	cbnz	r2, 8005c20 <__swsetup_r+0xa4>
 8005c0e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005c12:	d1c5      	bne.n	8005ba0 <__swsetup_r+0x24>
 8005c14:	bd38      	pop	{r3, r4, r5, pc}
 8005c16:	0799      	lsls	r1, r3, #30
 8005c18:	bf58      	it	pl
 8005c1a:	6962      	ldrpl	r2, [r4, #20]
 8005c1c:	60a2      	str	r2, [r4, #8]
 8005c1e:	e7f4      	b.n	8005c0a <__swsetup_r+0x8e>
 8005c20:	2000      	movs	r0, #0
 8005c22:	e7f7      	b.n	8005c14 <__swsetup_r+0x98>
 8005c24:	2400001c 	.word	0x2400001c

08005c28 <memset>:
 8005c28:	4402      	add	r2, r0
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d100      	bne.n	8005c32 <memset+0xa>
 8005c30:	4770      	bx	lr
 8005c32:	f803 1b01 	strb.w	r1, [r3], #1
 8005c36:	e7f9      	b.n	8005c2c <memset+0x4>

08005c38 <_close_r>:
 8005c38:	b538      	push	{r3, r4, r5, lr}
 8005c3a:	4d06      	ldr	r5, [pc, #24]	@ (8005c54 <_close_r+0x1c>)
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	4604      	mov	r4, r0
 8005c40:	4608      	mov	r0, r1
 8005c42:	602b      	str	r3, [r5, #0]
 8005c44:	f7fa ff39 	bl	8000aba <_close>
 8005c48:	1c43      	adds	r3, r0, #1
 8005c4a:	d102      	bne.n	8005c52 <_close_r+0x1a>
 8005c4c:	682b      	ldr	r3, [r5, #0]
 8005c4e:	b103      	cbz	r3, 8005c52 <_close_r+0x1a>
 8005c50:	6023      	str	r3, [r4, #0]
 8005c52:	bd38      	pop	{r3, r4, r5, pc}
 8005c54:	24000274 	.word	0x24000274

08005c58 <_lseek_r>:
 8005c58:	b538      	push	{r3, r4, r5, lr}
 8005c5a:	4d07      	ldr	r5, [pc, #28]	@ (8005c78 <_lseek_r+0x20>)
 8005c5c:	4604      	mov	r4, r0
 8005c5e:	4608      	mov	r0, r1
 8005c60:	4611      	mov	r1, r2
 8005c62:	2200      	movs	r2, #0
 8005c64:	602a      	str	r2, [r5, #0]
 8005c66:	461a      	mov	r2, r3
 8005c68:	f7fa ff4e 	bl	8000b08 <_lseek>
 8005c6c:	1c43      	adds	r3, r0, #1
 8005c6e:	d102      	bne.n	8005c76 <_lseek_r+0x1e>
 8005c70:	682b      	ldr	r3, [r5, #0]
 8005c72:	b103      	cbz	r3, 8005c76 <_lseek_r+0x1e>
 8005c74:	6023      	str	r3, [r4, #0]
 8005c76:	bd38      	pop	{r3, r4, r5, pc}
 8005c78:	24000274 	.word	0x24000274

08005c7c <_read_r>:
 8005c7c:	b538      	push	{r3, r4, r5, lr}
 8005c7e:	4d07      	ldr	r5, [pc, #28]	@ (8005c9c <_read_r+0x20>)
 8005c80:	4604      	mov	r4, r0
 8005c82:	4608      	mov	r0, r1
 8005c84:	4611      	mov	r1, r2
 8005c86:	2200      	movs	r2, #0
 8005c88:	602a      	str	r2, [r5, #0]
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	f7fa fedc 	bl	8000a48 <_read>
 8005c90:	1c43      	adds	r3, r0, #1
 8005c92:	d102      	bne.n	8005c9a <_read_r+0x1e>
 8005c94:	682b      	ldr	r3, [r5, #0]
 8005c96:	b103      	cbz	r3, 8005c9a <_read_r+0x1e>
 8005c98:	6023      	str	r3, [r4, #0]
 8005c9a:	bd38      	pop	{r3, r4, r5, pc}
 8005c9c:	24000274 	.word	0x24000274

08005ca0 <_write_r>:
 8005ca0:	b538      	push	{r3, r4, r5, lr}
 8005ca2:	4d07      	ldr	r5, [pc, #28]	@ (8005cc0 <_write_r+0x20>)
 8005ca4:	4604      	mov	r4, r0
 8005ca6:	4608      	mov	r0, r1
 8005ca8:	4611      	mov	r1, r2
 8005caa:	2200      	movs	r2, #0
 8005cac:	602a      	str	r2, [r5, #0]
 8005cae:	461a      	mov	r2, r3
 8005cb0:	f7fa fee7 	bl	8000a82 <_write>
 8005cb4:	1c43      	adds	r3, r0, #1
 8005cb6:	d102      	bne.n	8005cbe <_write_r+0x1e>
 8005cb8:	682b      	ldr	r3, [r5, #0]
 8005cba:	b103      	cbz	r3, 8005cbe <_write_r+0x1e>
 8005cbc:	6023      	str	r3, [r4, #0]
 8005cbe:	bd38      	pop	{r3, r4, r5, pc}
 8005cc0:	24000274 	.word	0x24000274

08005cc4 <__errno>:
 8005cc4:	4b01      	ldr	r3, [pc, #4]	@ (8005ccc <__errno+0x8>)
 8005cc6:	6818      	ldr	r0, [r3, #0]
 8005cc8:	4770      	bx	lr
 8005cca:	bf00      	nop
 8005ccc:	2400001c 	.word	0x2400001c

08005cd0 <__libc_init_array>:
 8005cd0:	b570      	push	{r4, r5, r6, lr}
 8005cd2:	4d0d      	ldr	r5, [pc, #52]	@ (8005d08 <__libc_init_array+0x38>)
 8005cd4:	4c0d      	ldr	r4, [pc, #52]	@ (8005d0c <__libc_init_array+0x3c>)
 8005cd6:	1b64      	subs	r4, r4, r5
 8005cd8:	10a4      	asrs	r4, r4, #2
 8005cda:	2600      	movs	r6, #0
 8005cdc:	42a6      	cmp	r6, r4
 8005cde:	d109      	bne.n	8005cf4 <__libc_init_array+0x24>
 8005ce0:	4d0b      	ldr	r5, [pc, #44]	@ (8005d10 <__libc_init_array+0x40>)
 8005ce2:	4c0c      	ldr	r4, [pc, #48]	@ (8005d14 <__libc_init_array+0x44>)
 8005ce4:	f000 fa54 	bl	8006190 <_init>
 8005ce8:	1b64      	subs	r4, r4, r5
 8005cea:	10a4      	asrs	r4, r4, #2
 8005cec:	2600      	movs	r6, #0
 8005cee:	42a6      	cmp	r6, r4
 8005cf0:	d105      	bne.n	8005cfe <__libc_init_array+0x2e>
 8005cf2:	bd70      	pop	{r4, r5, r6, pc}
 8005cf4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cf8:	4798      	blx	r3
 8005cfa:	3601      	adds	r6, #1
 8005cfc:	e7ee      	b.n	8005cdc <__libc_init_array+0xc>
 8005cfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d02:	4798      	blx	r3
 8005d04:	3601      	adds	r6, #1
 8005d06:	e7f2      	b.n	8005cee <__libc_init_array+0x1e>
 8005d08:	08006210 	.word	0x08006210
 8005d0c:	08006210 	.word	0x08006210
 8005d10:	08006210 	.word	0x08006210
 8005d14:	08006214 	.word	0x08006214

08005d18 <__retarget_lock_init_recursive>:
 8005d18:	4770      	bx	lr

08005d1a <__retarget_lock_acquire_recursive>:
 8005d1a:	4770      	bx	lr

08005d1c <__retarget_lock_release_recursive>:
 8005d1c:	4770      	bx	lr
	...

08005d20 <_free_r>:
 8005d20:	b538      	push	{r3, r4, r5, lr}
 8005d22:	4605      	mov	r5, r0
 8005d24:	2900      	cmp	r1, #0
 8005d26:	d041      	beq.n	8005dac <_free_r+0x8c>
 8005d28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d2c:	1f0c      	subs	r4, r1, #4
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	bfb8      	it	lt
 8005d32:	18e4      	addlt	r4, r4, r3
 8005d34:	f000 f8e0 	bl	8005ef8 <__malloc_lock>
 8005d38:	4a1d      	ldr	r2, [pc, #116]	@ (8005db0 <_free_r+0x90>)
 8005d3a:	6813      	ldr	r3, [r2, #0]
 8005d3c:	b933      	cbnz	r3, 8005d4c <_free_r+0x2c>
 8005d3e:	6063      	str	r3, [r4, #4]
 8005d40:	6014      	str	r4, [r2, #0]
 8005d42:	4628      	mov	r0, r5
 8005d44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d48:	f000 b8dc 	b.w	8005f04 <__malloc_unlock>
 8005d4c:	42a3      	cmp	r3, r4
 8005d4e:	d908      	bls.n	8005d62 <_free_r+0x42>
 8005d50:	6820      	ldr	r0, [r4, #0]
 8005d52:	1821      	adds	r1, r4, r0
 8005d54:	428b      	cmp	r3, r1
 8005d56:	bf01      	itttt	eq
 8005d58:	6819      	ldreq	r1, [r3, #0]
 8005d5a:	685b      	ldreq	r3, [r3, #4]
 8005d5c:	1809      	addeq	r1, r1, r0
 8005d5e:	6021      	streq	r1, [r4, #0]
 8005d60:	e7ed      	b.n	8005d3e <_free_r+0x1e>
 8005d62:	461a      	mov	r2, r3
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	b10b      	cbz	r3, 8005d6c <_free_r+0x4c>
 8005d68:	42a3      	cmp	r3, r4
 8005d6a:	d9fa      	bls.n	8005d62 <_free_r+0x42>
 8005d6c:	6811      	ldr	r1, [r2, #0]
 8005d6e:	1850      	adds	r0, r2, r1
 8005d70:	42a0      	cmp	r0, r4
 8005d72:	d10b      	bne.n	8005d8c <_free_r+0x6c>
 8005d74:	6820      	ldr	r0, [r4, #0]
 8005d76:	4401      	add	r1, r0
 8005d78:	1850      	adds	r0, r2, r1
 8005d7a:	4283      	cmp	r3, r0
 8005d7c:	6011      	str	r1, [r2, #0]
 8005d7e:	d1e0      	bne.n	8005d42 <_free_r+0x22>
 8005d80:	6818      	ldr	r0, [r3, #0]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	6053      	str	r3, [r2, #4]
 8005d86:	4408      	add	r0, r1
 8005d88:	6010      	str	r0, [r2, #0]
 8005d8a:	e7da      	b.n	8005d42 <_free_r+0x22>
 8005d8c:	d902      	bls.n	8005d94 <_free_r+0x74>
 8005d8e:	230c      	movs	r3, #12
 8005d90:	602b      	str	r3, [r5, #0]
 8005d92:	e7d6      	b.n	8005d42 <_free_r+0x22>
 8005d94:	6820      	ldr	r0, [r4, #0]
 8005d96:	1821      	adds	r1, r4, r0
 8005d98:	428b      	cmp	r3, r1
 8005d9a:	bf04      	itt	eq
 8005d9c:	6819      	ldreq	r1, [r3, #0]
 8005d9e:	685b      	ldreq	r3, [r3, #4]
 8005da0:	6063      	str	r3, [r4, #4]
 8005da2:	bf04      	itt	eq
 8005da4:	1809      	addeq	r1, r1, r0
 8005da6:	6021      	streq	r1, [r4, #0]
 8005da8:	6054      	str	r4, [r2, #4]
 8005daa:	e7ca      	b.n	8005d42 <_free_r+0x22>
 8005dac:	bd38      	pop	{r3, r4, r5, pc}
 8005dae:	bf00      	nop
 8005db0:	24000280 	.word	0x24000280

08005db4 <sbrk_aligned>:
 8005db4:	b570      	push	{r4, r5, r6, lr}
 8005db6:	4e0f      	ldr	r6, [pc, #60]	@ (8005df4 <sbrk_aligned+0x40>)
 8005db8:	460c      	mov	r4, r1
 8005dba:	6831      	ldr	r1, [r6, #0]
 8005dbc:	4605      	mov	r5, r0
 8005dbe:	b911      	cbnz	r1, 8005dc6 <sbrk_aligned+0x12>
 8005dc0:	f000 f9d6 	bl	8006170 <_sbrk_r>
 8005dc4:	6030      	str	r0, [r6, #0]
 8005dc6:	4621      	mov	r1, r4
 8005dc8:	4628      	mov	r0, r5
 8005dca:	f000 f9d1 	bl	8006170 <_sbrk_r>
 8005dce:	1c43      	adds	r3, r0, #1
 8005dd0:	d103      	bne.n	8005dda <sbrk_aligned+0x26>
 8005dd2:	f04f 34ff 	mov.w	r4, #4294967295
 8005dd6:	4620      	mov	r0, r4
 8005dd8:	bd70      	pop	{r4, r5, r6, pc}
 8005dda:	1cc4      	adds	r4, r0, #3
 8005ddc:	f024 0403 	bic.w	r4, r4, #3
 8005de0:	42a0      	cmp	r0, r4
 8005de2:	d0f8      	beq.n	8005dd6 <sbrk_aligned+0x22>
 8005de4:	1a21      	subs	r1, r4, r0
 8005de6:	4628      	mov	r0, r5
 8005de8:	f000 f9c2 	bl	8006170 <_sbrk_r>
 8005dec:	3001      	adds	r0, #1
 8005dee:	d1f2      	bne.n	8005dd6 <sbrk_aligned+0x22>
 8005df0:	e7ef      	b.n	8005dd2 <sbrk_aligned+0x1e>
 8005df2:	bf00      	nop
 8005df4:	2400027c 	.word	0x2400027c

08005df8 <_malloc_r>:
 8005df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005dfc:	1ccd      	adds	r5, r1, #3
 8005dfe:	f025 0503 	bic.w	r5, r5, #3
 8005e02:	3508      	adds	r5, #8
 8005e04:	2d0c      	cmp	r5, #12
 8005e06:	bf38      	it	cc
 8005e08:	250c      	movcc	r5, #12
 8005e0a:	2d00      	cmp	r5, #0
 8005e0c:	4606      	mov	r6, r0
 8005e0e:	db01      	blt.n	8005e14 <_malloc_r+0x1c>
 8005e10:	42a9      	cmp	r1, r5
 8005e12:	d904      	bls.n	8005e1e <_malloc_r+0x26>
 8005e14:	230c      	movs	r3, #12
 8005e16:	6033      	str	r3, [r6, #0]
 8005e18:	2000      	movs	r0, #0
 8005e1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005ef4 <_malloc_r+0xfc>
 8005e22:	f000 f869 	bl	8005ef8 <__malloc_lock>
 8005e26:	f8d8 3000 	ldr.w	r3, [r8]
 8005e2a:	461c      	mov	r4, r3
 8005e2c:	bb44      	cbnz	r4, 8005e80 <_malloc_r+0x88>
 8005e2e:	4629      	mov	r1, r5
 8005e30:	4630      	mov	r0, r6
 8005e32:	f7ff ffbf 	bl	8005db4 <sbrk_aligned>
 8005e36:	1c43      	adds	r3, r0, #1
 8005e38:	4604      	mov	r4, r0
 8005e3a:	d158      	bne.n	8005eee <_malloc_r+0xf6>
 8005e3c:	f8d8 4000 	ldr.w	r4, [r8]
 8005e40:	4627      	mov	r7, r4
 8005e42:	2f00      	cmp	r7, #0
 8005e44:	d143      	bne.n	8005ece <_malloc_r+0xd6>
 8005e46:	2c00      	cmp	r4, #0
 8005e48:	d04b      	beq.n	8005ee2 <_malloc_r+0xea>
 8005e4a:	6823      	ldr	r3, [r4, #0]
 8005e4c:	4639      	mov	r1, r7
 8005e4e:	4630      	mov	r0, r6
 8005e50:	eb04 0903 	add.w	r9, r4, r3
 8005e54:	f000 f98c 	bl	8006170 <_sbrk_r>
 8005e58:	4581      	cmp	r9, r0
 8005e5a:	d142      	bne.n	8005ee2 <_malloc_r+0xea>
 8005e5c:	6821      	ldr	r1, [r4, #0]
 8005e5e:	1a6d      	subs	r5, r5, r1
 8005e60:	4629      	mov	r1, r5
 8005e62:	4630      	mov	r0, r6
 8005e64:	f7ff ffa6 	bl	8005db4 <sbrk_aligned>
 8005e68:	3001      	adds	r0, #1
 8005e6a:	d03a      	beq.n	8005ee2 <_malloc_r+0xea>
 8005e6c:	6823      	ldr	r3, [r4, #0]
 8005e6e:	442b      	add	r3, r5
 8005e70:	6023      	str	r3, [r4, #0]
 8005e72:	f8d8 3000 	ldr.w	r3, [r8]
 8005e76:	685a      	ldr	r2, [r3, #4]
 8005e78:	bb62      	cbnz	r2, 8005ed4 <_malloc_r+0xdc>
 8005e7a:	f8c8 7000 	str.w	r7, [r8]
 8005e7e:	e00f      	b.n	8005ea0 <_malloc_r+0xa8>
 8005e80:	6822      	ldr	r2, [r4, #0]
 8005e82:	1b52      	subs	r2, r2, r5
 8005e84:	d420      	bmi.n	8005ec8 <_malloc_r+0xd0>
 8005e86:	2a0b      	cmp	r2, #11
 8005e88:	d917      	bls.n	8005eba <_malloc_r+0xc2>
 8005e8a:	1961      	adds	r1, r4, r5
 8005e8c:	42a3      	cmp	r3, r4
 8005e8e:	6025      	str	r5, [r4, #0]
 8005e90:	bf18      	it	ne
 8005e92:	6059      	strne	r1, [r3, #4]
 8005e94:	6863      	ldr	r3, [r4, #4]
 8005e96:	bf08      	it	eq
 8005e98:	f8c8 1000 	streq.w	r1, [r8]
 8005e9c:	5162      	str	r2, [r4, r5]
 8005e9e:	604b      	str	r3, [r1, #4]
 8005ea0:	4630      	mov	r0, r6
 8005ea2:	f000 f82f 	bl	8005f04 <__malloc_unlock>
 8005ea6:	f104 000b 	add.w	r0, r4, #11
 8005eaa:	1d23      	adds	r3, r4, #4
 8005eac:	f020 0007 	bic.w	r0, r0, #7
 8005eb0:	1ac2      	subs	r2, r0, r3
 8005eb2:	bf1c      	itt	ne
 8005eb4:	1a1b      	subne	r3, r3, r0
 8005eb6:	50a3      	strne	r3, [r4, r2]
 8005eb8:	e7af      	b.n	8005e1a <_malloc_r+0x22>
 8005eba:	6862      	ldr	r2, [r4, #4]
 8005ebc:	42a3      	cmp	r3, r4
 8005ebe:	bf0c      	ite	eq
 8005ec0:	f8c8 2000 	streq.w	r2, [r8]
 8005ec4:	605a      	strne	r2, [r3, #4]
 8005ec6:	e7eb      	b.n	8005ea0 <_malloc_r+0xa8>
 8005ec8:	4623      	mov	r3, r4
 8005eca:	6864      	ldr	r4, [r4, #4]
 8005ecc:	e7ae      	b.n	8005e2c <_malloc_r+0x34>
 8005ece:	463c      	mov	r4, r7
 8005ed0:	687f      	ldr	r7, [r7, #4]
 8005ed2:	e7b6      	b.n	8005e42 <_malloc_r+0x4a>
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	42a3      	cmp	r3, r4
 8005eda:	d1fb      	bne.n	8005ed4 <_malloc_r+0xdc>
 8005edc:	2300      	movs	r3, #0
 8005ede:	6053      	str	r3, [r2, #4]
 8005ee0:	e7de      	b.n	8005ea0 <_malloc_r+0xa8>
 8005ee2:	230c      	movs	r3, #12
 8005ee4:	6033      	str	r3, [r6, #0]
 8005ee6:	4630      	mov	r0, r6
 8005ee8:	f000 f80c 	bl	8005f04 <__malloc_unlock>
 8005eec:	e794      	b.n	8005e18 <_malloc_r+0x20>
 8005eee:	6005      	str	r5, [r0, #0]
 8005ef0:	e7d6      	b.n	8005ea0 <_malloc_r+0xa8>
 8005ef2:	bf00      	nop
 8005ef4:	24000280 	.word	0x24000280

08005ef8 <__malloc_lock>:
 8005ef8:	4801      	ldr	r0, [pc, #4]	@ (8005f00 <__malloc_lock+0x8>)
 8005efa:	f7ff bf0e 	b.w	8005d1a <__retarget_lock_acquire_recursive>
 8005efe:	bf00      	nop
 8005f00:	24000278 	.word	0x24000278

08005f04 <__malloc_unlock>:
 8005f04:	4801      	ldr	r0, [pc, #4]	@ (8005f0c <__malloc_unlock+0x8>)
 8005f06:	f7ff bf09 	b.w	8005d1c <__retarget_lock_release_recursive>
 8005f0a:	bf00      	nop
 8005f0c:	24000278 	.word	0x24000278

08005f10 <__sflush_r>:
 8005f10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f18:	0716      	lsls	r6, r2, #28
 8005f1a:	4605      	mov	r5, r0
 8005f1c:	460c      	mov	r4, r1
 8005f1e:	d454      	bmi.n	8005fca <__sflush_r+0xba>
 8005f20:	684b      	ldr	r3, [r1, #4]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	dc02      	bgt.n	8005f2c <__sflush_r+0x1c>
 8005f26:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	dd48      	ble.n	8005fbe <__sflush_r+0xae>
 8005f2c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005f2e:	2e00      	cmp	r6, #0
 8005f30:	d045      	beq.n	8005fbe <__sflush_r+0xae>
 8005f32:	2300      	movs	r3, #0
 8005f34:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005f38:	682f      	ldr	r7, [r5, #0]
 8005f3a:	6a21      	ldr	r1, [r4, #32]
 8005f3c:	602b      	str	r3, [r5, #0]
 8005f3e:	d030      	beq.n	8005fa2 <__sflush_r+0x92>
 8005f40:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005f42:	89a3      	ldrh	r3, [r4, #12]
 8005f44:	0759      	lsls	r1, r3, #29
 8005f46:	d505      	bpl.n	8005f54 <__sflush_r+0x44>
 8005f48:	6863      	ldr	r3, [r4, #4]
 8005f4a:	1ad2      	subs	r2, r2, r3
 8005f4c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005f4e:	b10b      	cbz	r3, 8005f54 <__sflush_r+0x44>
 8005f50:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005f52:	1ad2      	subs	r2, r2, r3
 8005f54:	2300      	movs	r3, #0
 8005f56:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005f58:	6a21      	ldr	r1, [r4, #32]
 8005f5a:	4628      	mov	r0, r5
 8005f5c:	47b0      	blx	r6
 8005f5e:	1c43      	adds	r3, r0, #1
 8005f60:	89a3      	ldrh	r3, [r4, #12]
 8005f62:	d106      	bne.n	8005f72 <__sflush_r+0x62>
 8005f64:	6829      	ldr	r1, [r5, #0]
 8005f66:	291d      	cmp	r1, #29
 8005f68:	d82b      	bhi.n	8005fc2 <__sflush_r+0xb2>
 8005f6a:	4a2a      	ldr	r2, [pc, #168]	@ (8006014 <__sflush_r+0x104>)
 8005f6c:	40ca      	lsrs	r2, r1
 8005f6e:	07d6      	lsls	r6, r2, #31
 8005f70:	d527      	bpl.n	8005fc2 <__sflush_r+0xb2>
 8005f72:	2200      	movs	r2, #0
 8005f74:	6062      	str	r2, [r4, #4]
 8005f76:	04d9      	lsls	r1, r3, #19
 8005f78:	6922      	ldr	r2, [r4, #16]
 8005f7a:	6022      	str	r2, [r4, #0]
 8005f7c:	d504      	bpl.n	8005f88 <__sflush_r+0x78>
 8005f7e:	1c42      	adds	r2, r0, #1
 8005f80:	d101      	bne.n	8005f86 <__sflush_r+0x76>
 8005f82:	682b      	ldr	r3, [r5, #0]
 8005f84:	b903      	cbnz	r3, 8005f88 <__sflush_r+0x78>
 8005f86:	6560      	str	r0, [r4, #84]	@ 0x54
 8005f88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005f8a:	602f      	str	r7, [r5, #0]
 8005f8c:	b1b9      	cbz	r1, 8005fbe <__sflush_r+0xae>
 8005f8e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005f92:	4299      	cmp	r1, r3
 8005f94:	d002      	beq.n	8005f9c <__sflush_r+0x8c>
 8005f96:	4628      	mov	r0, r5
 8005f98:	f7ff fec2 	bl	8005d20 <_free_r>
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	6363      	str	r3, [r4, #52]	@ 0x34
 8005fa0:	e00d      	b.n	8005fbe <__sflush_r+0xae>
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	4628      	mov	r0, r5
 8005fa6:	47b0      	blx	r6
 8005fa8:	4602      	mov	r2, r0
 8005faa:	1c50      	adds	r0, r2, #1
 8005fac:	d1c9      	bne.n	8005f42 <__sflush_r+0x32>
 8005fae:	682b      	ldr	r3, [r5, #0]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d0c6      	beq.n	8005f42 <__sflush_r+0x32>
 8005fb4:	2b1d      	cmp	r3, #29
 8005fb6:	d001      	beq.n	8005fbc <__sflush_r+0xac>
 8005fb8:	2b16      	cmp	r3, #22
 8005fba:	d11e      	bne.n	8005ffa <__sflush_r+0xea>
 8005fbc:	602f      	str	r7, [r5, #0]
 8005fbe:	2000      	movs	r0, #0
 8005fc0:	e022      	b.n	8006008 <__sflush_r+0xf8>
 8005fc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005fc6:	b21b      	sxth	r3, r3
 8005fc8:	e01b      	b.n	8006002 <__sflush_r+0xf2>
 8005fca:	690f      	ldr	r7, [r1, #16]
 8005fcc:	2f00      	cmp	r7, #0
 8005fce:	d0f6      	beq.n	8005fbe <__sflush_r+0xae>
 8005fd0:	0793      	lsls	r3, r2, #30
 8005fd2:	680e      	ldr	r6, [r1, #0]
 8005fd4:	bf08      	it	eq
 8005fd6:	694b      	ldreq	r3, [r1, #20]
 8005fd8:	600f      	str	r7, [r1, #0]
 8005fda:	bf18      	it	ne
 8005fdc:	2300      	movne	r3, #0
 8005fde:	eba6 0807 	sub.w	r8, r6, r7
 8005fe2:	608b      	str	r3, [r1, #8]
 8005fe4:	f1b8 0f00 	cmp.w	r8, #0
 8005fe8:	dde9      	ble.n	8005fbe <__sflush_r+0xae>
 8005fea:	6a21      	ldr	r1, [r4, #32]
 8005fec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005fee:	4643      	mov	r3, r8
 8005ff0:	463a      	mov	r2, r7
 8005ff2:	4628      	mov	r0, r5
 8005ff4:	47b0      	blx	r6
 8005ff6:	2800      	cmp	r0, #0
 8005ff8:	dc08      	bgt.n	800600c <__sflush_r+0xfc>
 8005ffa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ffe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006002:	81a3      	strh	r3, [r4, #12]
 8006004:	f04f 30ff 	mov.w	r0, #4294967295
 8006008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800600c:	4407      	add	r7, r0
 800600e:	eba8 0800 	sub.w	r8, r8, r0
 8006012:	e7e7      	b.n	8005fe4 <__sflush_r+0xd4>
 8006014:	20400001 	.word	0x20400001

08006018 <_fflush_r>:
 8006018:	b538      	push	{r3, r4, r5, lr}
 800601a:	690b      	ldr	r3, [r1, #16]
 800601c:	4605      	mov	r5, r0
 800601e:	460c      	mov	r4, r1
 8006020:	b913      	cbnz	r3, 8006028 <_fflush_r+0x10>
 8006022:	2500      	movs	r5, #0
 8006024:	4628      	mov	r0, r5
 8006026:	bd38      	pop	{r3, r4, r5, pc}
 8006028:	b118      	cbz	r0, 8006032 <_fflush_r+0x1a>
 800602a:	6a03      	ldr	r3, [r0, #32]
 800602c:	b90b      	cbnz	r3, 8006032 <_fflush_r+0x1a>
 800602e:	f7ff fc8f 	bl	8005950 <__sinit>
 8006032:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d0f3      	beq.n	8006022 <_fflush_r+0xa>
 800603a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800603c:	07d0      	lsls	r0, r2, #31
 800603e:	d404      	bmi.n	800604a <_fflush_r+0x32>
 8006040:	0599      	lsls	r1, r3, #22
 8006042:	d402      	bmi.n	800604a <_fflush_r+0x32>
 8006044:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006046:	f7ff fe68 	bl	8005d1a <__retarget_lock_acquire_recursive>
 800604a:	4628      	mov	r0, r5
 800604c:	4621      	mov	r1, r4
 800604e:	f7ff ff5f 	bl	8005f10 <__sflush_r>
 8006052:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006054:	07da      	lsls	r2, r3, #31
 8006056:	4605      	mov	r5, r0
 8006058:	d4e4      	bmi.n	8006024 <_fflush_r+0xc>
 800605a:	89a3      	ldrh	r3, [r4, #12]
 800605c:	059b      	lsls	r3, r3, #22
 800605e:	d4e1      	bmi.n	8006024 <_fflush_r+0xc>
 8006060:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006062:	f7ff fe5b 	bl	8005d1c <__retarget_lock_release_recursive>
 8006066:	e7dd      	b.n	8006024 <_fflush_r+0xc>

08006068 <__swhatbuf_r>:
 8006068:	b570      	push	{r4, r5, r6, lr}
 800606a:	460c      	mov	r4, r1
 800606c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006070:	2900      	cmp	r1, #0
 8006072:	b096      	sub	sp, #88	@ 0x58
 8006074:	4615      	mov	r5, r2
 8006076:	461e      	mov	r6, r3
 8006078:	da0d      	bge.n	8006096 <__swhatbuf_r+0x2e>
 800607a:	89a3      	ldrh	r3, [r4, #12]
 800607c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006080:	f04f 0100 	mov.w	r1, #0
 8006084:	bf14      	ite	ne
 8006086:	2340      	movne	r3, #64	@ 0x40
 8006088:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800608c:	2000      	movs	r0, #0
 800608e:	6031      	str	r1, [r6, #0]
 8006090:	602b      	str	r3, [r5, #0]
 8006092:	b016      	add	sp, #88	@ 0x58
 8006094:	bd70      	pop	{r4, r5, r6, pc}
 8006096:	466a      	mov	r2, sp
 8006098:	f000 f848 	bl	800612c <_fstat_r>
 800609c:	2800      	cmp	r0, #0
 800609e:	dbec      	blt.n	800607a <__swhatbuf_r+0x12>
 80060a0:	9901      	ldr	r1, [sp, #4]
 80060a2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80060a6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80060aa:	4259      	negs	r1, r3
 80060ac:	4159      	adcs	r1, r3
 80060ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80060b2:	e7eb      	b.n	800608c <__swhatbuf_r+0x24>

080060b4 <__smakebuf_r>:
 80060b4:	898b      	ldrh	r3, [r1, #12]
 80060b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80060b8:	079d      	lsls	r5, r3, #30
 80060ba:	4606      	mov	r6, r0
 80060bc:	460c      	mov	r4, r1
 80060be:	d507      	bpl.n	80060d0 <__smakebuf_r+0x1c>
 80060c0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80060c4:	6023      	str	r3, [r4, #0]
 80060c6:	6123      	str	r3, [r4, #16]
 80060c8:	2301      	movs	r3, #1
 80060ca:	6163      	str	r3, [r4, #20]
 80060cc:	b003      	add	sp, #12
 80060ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060d0:	ab01      	add	r3, sp, #4
 80060d2:	466a      	mov	r2, sp
 80060d4:	f7ff ffc8 	bl	8006068 <__swhatbuf_r>
 80060d8:	9f00      	ldr	r7, [sp, #0]
 80060da:	4605      	mov	r5, r0
 80060dc:	4639      	mov	r1, r7
 80060de:	4630      	mov	r0, r6
 80060e0:	f7ff fe8a 	bl	8005df8 <_malloc_r>
 80060e4:	b948      	cbnz	r0, 80060fa <__smakebuf_r+0x46>
 80060e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060ea:	059a      	lsls	r2, r3, #22
 80060ec:	d4ee      	bmi.n	80060cc <__smakebuf_r+0x18>
 80060ee:	f023 0303 	bic.w	r3, r3, #3
 80060f2:	f043 0302 	orr.w	r3, r3, #2
 80060f6:	81a3      	strh	r3, [r4, #12]
 80060f8:	e7e2      	b.n	80060c0 <__smakebuf_r+0xc>
 80060fa:	89a3      	ldrh	r3, [r4, #12]
 80060fc:	6020      	str	r0, [r4, #0]
 80060fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006102:	81a3      	strh	r3, [r4, #12]
 8006104:	9b01      	ldr	r3, [sp, #4]
 8006106:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800610a:	b15b      	cbz	r3, 8006124 <__smakebuf_r+0x70>
 800610c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006110:	4630      	mov	r0, r6
 8006112:	f000 f81d 	bl	8006150 <_isatty_r>
 8006116:	b128      	cbz	r0, 8006124 <__smakebuf_r+0x70>
 8006118:	89a3      	ldrh	r3, [r4, #12]
 800611a:	f023 0303 	bic.w	r3, r3, #3
 800611e:	f043 0301 	orr.w	r3, r3, #1
 8006122:	81a3      	strh	r3, [r4, #12]
 8006124:	89a3      	ldrh	r3, [r4, #12]
 8006126:	431d      	orrs	r5, r3
 8006128:	81a5      	strh	r5, [r4, #12]
 800612a:	e7cf      	b.n	80060cc <__smakebuf_r+0x18>

0800612c <_fstat_r>:
 800612c:	b538      	push	{r3, r4, r5, lr}
 800612e:	4d07      	ldr	r5, [pc, #28]	@ (800614c <_fstat_r+0x20>)
 8006130:	2300      	movs	r3, #0
 8006132:	4604      	mov	r4, r0
 8006134:	4608      	mov	r0, r1
 8006136:	4611      	mov	r1, r2
 8006138:	602b      	str	r3, [r5, #0]
 800613a:	f7fa fcca 	bl	8000ad2 <_fstat>
 800613e:	1c43      	adds	r3, r0, #1
 8006140:	d102      	bne.n	8006148 <_fstat_r+0x1c>
 8006142:	682b      	ldr	r3, [r5, #0]
 8006144:	b103      	cbz	r3, 8006148 <_fstat_r+0x1c>
 8006146:	6023      	str	r3, [r4, #0]
 8006148:	bd38      	pop	{r3, r4, r5, pc}
 800614a:	bf00      	nop
 800614c:	24000274 	.word	0x24000274

08006150 <_isatty_r>:
 8006150:	b538      	push	{r3, r4, r5, lr}
 8006152:	4d06      	ldr	r5, [pc, #24]	@ (800616c <_isatty_r+0x1c>)
 8006154:	2300      	movs	r3, #0
 8006156:	4604      	mov	r4, r0
 8006158:	4608      	mov	r0, r1
 800615a:	602b      	str	r3, [r5, #0]
 800615c:	f7fa fcc9 	bl	8000af2 <_isatty>
 8006160:	1c43      	adds	r3, r0, #1
 8006162:	d102      	bne.n	800616a <_isatty_r+0x1a>
 8006164:	682b      	ldr	r3, [r5, #0]
 8006166:	b103      	cbz	r3, 800616a <_isatty_r+0x1a>
 8006168:	6023      	str	r3, [r4, #0]
 800616a:	bd38      	pop	{r3, r4, r5, pc}
 800616c:	24000274 	.word	0x24000274

08006170 <_sbrk_r>:
 8006170:	b538      	push	{r3, r4, r5, lr}
 8006172:	4d06      	ldr	r5, [pc, #24]	@ (800618c <_sbrk_r+0x1c>)
 8006174:	2300      	movs	r3, #0
 8006176:	4604      	mov	r4, r0
 8006178:	4608      	mov	r0, r1
 800617a:	602b      	str	r3, [r5, #0]
 800617c:	f7fa fcd2 	bl	8000b24 <_sbrk>
 8006180:	1c43      	adds	r3, r0, #1
 8006182:	d102      	bne.n	800618a <_sbrk_r+0x1a>
 8006184:	682b      	ldr	r3, [r5, #0]
 8006186:	b103      	cbz	r3, 800618a <_sbrk_r+0x1a>
 8006188:	6023      	str	r3, [r4, #0]
 800618a:	bd38      	pop	{r3, r4, r5, pc}
 800618c:	24000274 	.word	0x24000274

08006190 <_init>:
 8006190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006192:	bf00      	nop
 8006194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006196:	bc08      	pop	{r3}
 8006198:	469e      	mov	lr, r3
 800619a:	4770      	bx	lr

0800619c <_fini>:
 800619c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800619e:	bf00      	nop
 80061a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061a2:	bc08      	pop	{r3}
 80061a4:	469e      	mov	lr, r3
 80061a6:	4770      	bx	lr
