
9.GTIM-PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008764  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080089fc  080089fc  000099fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008a44  08008a44  00009a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008a4c  08008a4c  00009a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08008a50  08008a50  00009a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  24000000  08008a54  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002b0  2400006c  08008ac0  0000a06c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400031c  08008ac0  0000a31c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000a06c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00018b4d  00000000  00000000  0000a09a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000335e  00000000  00000000  00022be7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001258  00000000  00000000  00025f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000e29  00000000  00000000  000271a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a20a  00000000  00000000  00027fc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001ec5c  00000000  00000000  000621d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00168754  00000000  00000000  00080e2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001e9583  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005184  00000000  00000000  001e95c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005a  00000000  00000000  001ee74c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2400006c 	.word	0x2400006c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080089e4 	.word	0x080089e4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000070 	.word	0x24000070
 80002d4:	080089e4 	.word	0x080089e4

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b988 	b.w	8000600 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	468e      	mov	lr, r1
 8000310:	4604      	mov	r4, r0
 8000312:	4688      	mov	r8, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d962      	bls.n	80003e4 <__udivmoddi4+0xdc>
 800031e:	fab2 f682 	clz	r6, r2
 8000322:	b14e      	cbz	r6, 8000338 <__udivmoddi4+0x30>
 8000324:	f1c6 0320 	rsb	r3, r6, #32
 8000328:	fa01 f806 	lsl.w	r8, r1, r6
 800032c:	fa20 f303 	lsr.w	r3, r0, r3
 8000330:	40b7      	lsls	r7, r6
 8000332:	ea43 0808 	orr.w	r8, r3, r8
 8000336:	40b4      	lsls	r4, r6
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	fbb8 f1fe 	udiv	r1, r8, lr
 8000344:	0c23      	lsrs	r3, r4, #16
 8000346:	fb0e 8811 	mls	r8, lr, r1, r8
 800034a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034e:	fb01 f20c 	mul.w	r2, r1, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d909      	bls.n	800036a <__udivmoddi4+0x62>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f101 30ff 	add.w	r0, r1, #4294967295
 800035c:	f080 80ea 	bcs.w	8000534 <__udivmoddi4+0x22c>
 8000360:	429a      	cmp	r2, r3
 8000362:	f240 80e7 	bls.w	8000534 <__udivmoddi4+0x22c>
 8000366:	3902      	subs	r1, #2
 8000368:	443b      	add	r3, r7
 800036a:	1a9a      	subs	r2, r3, r2
 800036c:	b2a3      	uxth	r3, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800037a:	fb00 fc0c 	mul.w	ip, r0, ip
 800037e:	459c      	cmp	ip, r3
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x8e>
 8000382:	18fb      	adds	r3, r7, r3
 8000384:	f100 32ff 	add.w	r2, r0, #4294967295
 8000388:	f080 80d6 	bcs.w	8000538 <__udivmoddi4+0x230>
 800038c:	459c      	cmp	ip, r3
 800038e:	f240 80d3 	bls.w	8000538 <__udivmoddi4+0x230>
 8000392:	443b      	add	r3, r7
 8000394:	3802      	subs	r0, #2
 8000396:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039a:	eba3 030c 	sub.w	r3, r3, ip
 800039e:	2100      	movs	r1, #0
 80003a0:	b11d      	cbz	r5, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40f3      	lsrs	r3, r6
 80003a4:	2200      	movs	r2, #0
 80003a6:	e9c5 3200 	strd	r3, r2, [r5]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d905      	bls.n	80003be <__udivmoddi4+0xb6>
 80003b2:	b10d      	cbz	r5, 80003b8 <__udivmoddi4+0xb0>
 80003b4:	e9c5 0100 	strd	r0, r1, [r5]
 80003b8:	2100      	movs	r1, #0
 80003ba:	4608      	mov	r0, r1
 80003bc:	e7f5      	b.n	80003aa <__udivmoddi4+0xa2>
 80003be:	fab3 f183 	clz	r1, r3
 80003c2:	2900      	cmp	r1, #0
 80003c4:	d146      	bne.n	8000454 <__udivmoddi4+0x14c>
 80003c6:	4573      	cmp	r3, lr
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xc8>
 80003ca:	4282      	cmp	r2, r0
 80003cc:	f200 8105 	bhi.w	80005da <__udivmoddi4+0x2d2>
 80003d0:	1a84      	subs	r4, r0, r2
 80003d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	4690      	mov	r8, r2
 80003da:	2d00      	cmp	r5, #0
 80003dc:	d0e5      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003de:	e9c5 4800 	strd	r4, r8, [r5]
 80003e2:	e7e2      	b.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	2a00      	cmp	r2, #0
 80003e6:	f000 8090 	beq.w	800050a <__udivmoddi4+0x202>
 80003ea:	fab2 f682 	clz	r6, r2
 80003ee:	2e00      	cmp	r6, #0
 80003f0:	f040 80a4 	bne.w	800053c <__udivmoddi4+0x234>
 80003f4:	1a8a      	subs	r2, r1, r2
 80003f6:	0c03      	lsrs	r3, r0, #16
 80003f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fc:	b280      	uxth	r0, r0
 80003fe:	b2bc      	uxth	r4, r7
 8000400:	2101      	movs	r1, #1
 8000402:	fbb2 fcfe 	udiv	ip, r2, lr
 8000406:	fb0e 221c 	mls	r2, lr, ip, r2
 800040a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800040e:	fb04 f20c 	mul.w	r2, r4, ip
 8000412:	429a      	cmp	r2, r3
 8000414:	d907      	bls.n	8000426 <__udivmoddi4+0x11e>
 8000416:	18fb      	adds	r3, r7, r3
 8000418:	f10c 38ff 	add.w	r8, ip, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x11c>
 800041e:	429a      	cmp	r2, r3
 8000420:	f200 80e0 	bhi.w	80005e4 <__udivmoddi4+0x2dc>
 8000424:	46c4      	mov	ip, r8
 8000426:	1a9b      	subs	r3, r3, r2
 8000428:	fbb3 f2fe 	udiv	r2, r3, lr
 800042c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000430:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000434:	fb02 f404 	mul.w	r4, r2, r4
 8000438:	429c      	cmp	r4, r3
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x144>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x142>
 8000444:	429c      	cmp	r4, r3
 8000446:	f200 80ca 	bhi.w	80005de <__udivmoddi4+0x2d6>
 800044a:	4602      	mov	r2, r0
 800044c:	1b1b      	subs	r3, r3, r4
 800044e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000452:	e7a5      	b.n	80003a0 <__udivmoddi4+0x98>
 8000454:	f1c1 0620 	rsb	r6, r1, #32
 8000458:	408b      	lsls	r3, r1
 800045a:	fa22 f706 	lsr.w	r7, r2, r6
 800045e:	431f      	orrs	r7, r3
 8000460:	fa0e f401 	lsl.w	r4, lr, r1
 8000464:	fa20 f306 	lsr.w	r3, r0, r6
 8000468:	fa2e fe06 	lsr.w	lr, lr, r6
 800046c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000470:	4323      	orrs	r3, r4
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	fa1f fc87 	uxth.w	ip, r7
 800047a:	fbbe f0f9 	udiv	r0, lr, r9
 800047e:	0c1c      	lsrs	r4, r3, #16
 8000480:	fb09 ee10 	mls	lr, r9, r0, lr
 8000484:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000488:	fb00 fe0c 	mul.w	lr, r0, ip
 800048c:	45a6      	cmp	lr, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	d909      	bls.n	80004a8 <__udivmoddi4+0x1a0>
 8000494:	193c      	adds	r4, r7, r4
 8000496:	f100 3aff 	add.w	sl, r0, #4294967295
 800049a:	f080 809c 	bcs.w	80005d6 <__udivmoddi4+0x2ce>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f240 8099 	bls.w	80005d6 <__udivmoddi4+0x2ce>
 80004a4:	3802      	subs	r0, #2
 80004a6:	443c      	add	r4, r7
 80004a8:	eba4 040e 	sub.w	r4, r4, lr
 80004ac:	fa1f fe83 	uxth.w	lr, r3
 80004b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b4:	fb09 4413 	mls	r4, r9, r3, r4
 80004b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c0:	45a4      	cmp	ip, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x1ce>
 80004c4:	193c      	adds	r4, r7, r4
 80004c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80004ca:	f080 8082 	bcs.w	80005d2 <__udivmoddi4+0x2ca>
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d97f      	bls.n	80005d2 <__udivmoddi4+0x2ca>
 80004d2:	3b02      	subs	r3, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	fba0 ec02 	umull	lr, ip, r0, r2
 80004e2:	4564      	cmp	r4, ip
 80004e4:	4673      	mov	r3, lr
 80004e6:	46e1      	mov	r9, ip
 80004e8:	d362      	bcc.n	80005b0 <__udivmoddi4+0x2a8>
 80004ea:	d05f      	beq.n	80005ac <__udivmoddi4+0x2a4>
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x1fe>
 80004ee:	ebb8 0203 	subs.w	r2, r8, r3
 80004f2:	eb64 0409 	sbc.w	r4, r4, r9
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	431e      	orrs	r6, r3
 8000500:	40cc      	lsrs	r4, r1
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e74f      	b.n	80003aa <__udivmoddi4+0xa2>
 800050a:	fbb1 fcf2 	udiv	ip, r1, r2
 800050e:	0c01      	lsrs	r1, r0, #16
 8000510:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000514:	b280      	uxth	r0, r0
 8000516:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800051a:	463b      	mov	r3, r7
 800051c:	4638      	mov	r0, r7
 800051e:	463c      	mov	r4, r7
 8000520:	46b8      	mov	r8, r7
 8000522:	46be      	mov	lr, r7
 8000524:	2620      	movs	r6, #32
 8000526:	fbb1 f1f7 	udiv	r1, r1, r7
 800052a:	eba2 0208 	sub.w	r2, r2, r8
 800052e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000532:	e766      	b.n	8000402 <__udivmoddi4+0xfa>
 8000534:	4601      	mov	r1, r0
 8000536:	e718      	b.n	800036a <__udivmoddi4+0x62>
 8000538:	4610      	mov	r0, r2
 800053a:	e72c      	b.n	8000396 <__udivmoddi4+0x8e>
 800053c:	f1c6 0220 	rsb	r2, r6, #32
 8000540:	fa2e f302 	lsr.w	r3, lr, r2
 8000544:	40b7      	lsls	r7, r6
 8000546:	40b1      	lsls	r1, r6
 8000548:	fa20 f202 	lsr.w	r2, r0, r2
 800054c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000550:	430a      	orrs	r2, r1
 8000552:	fbb3 f8fe 	udiv	r8, r3, lr
 8000556:	b2bc      	uxth	r4, r7
 8000558:	fb0e 3318 	mls	r3, lr, r8, r3
 800055c:	0c11      	lsrs	r1, r2, #16
 800055e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000562:	fb08 f904 	mul.w	r9, r8, r4
 8000566:	40b0      	lsls	r0, r6
 8000568:	4589      	cmp	r9, r1
 800056a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800056e:	b280      	uxth	r0, r0
 8000570:	d93e      	bls.n	80005f0 <__udivmoddi4+0x2e8>
 8000572:	1879      	adds	r1, r7, r1
 8000574:	f108 3cff 	add.w	ip, r8, #4294967295
 8000578:	d201      	bcs.n	800057e <__udivmoddi4+0x276>
 800057a:	4589      	cmp	r9, r1
 800057c:	d81f      	bhi.n	80005be <__udivmoddi4+0x2b6>
 800057e:	eba1 0109 	sub.w	r1, r1, r9
 8000582:	fbb1 f9fe 	udiv	r9, r1, lr
 8000586:	fb09 f804 	mul.w	r8, r9, r4
 800058a:	fb0e 1119 	mls	r1, lr, r9, r1
 800058e:	b292      	uxth	r2, r2
 8000590:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000594:	4542      	cmp	r2, r8
 8000596:	d229      	bcs.n	80005ec <__udivmoddi4+0x2e4>
 8000598:	18ba      	adds	r2, r7, r2
 800059a:	f109 31ff 	add.w	r1, r9, #4294967295
 800059e:	d2c4      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a0:	4542      	cmp	r2, r8
 80005a2:	d2c2      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a4:	f1a9 0102 	sub.w	r1, r9, #2
 80005a8:	443a      	add	r2, r7
 80005aa:	e7be      	b.n	800052a <__udivmoddi4+0x222>
 80005ac:	45f0      	cmp	r8, lr
 80005ae:	d29d      	bcs.n	80004ec <__udivmoddi4+0x1e4>
 80005b0:	ebbe 0302 	subs.w	r3, lr, r2
 80005b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005b8:	3801      	subs	r0, #1
 80005ba:	46e1      	mov	r9, ip
 80005bc:	e796      	b.n	80004ec <__udivmoddi4+0x1e4>
 80005be:	eba7 0909 	sub.w	r9, r7, r9
 80005c2:	4449      	add	r1, r9
 80005c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80005c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80005cc:	fb09 f804 	mul.w	r8, r9, r4
 80005d0:	e7db      	b.n	800058a <__udivmoddi4+0x282>
 80005d2:	4673      	mov	r3, lr
 80005d4:	e77f      	b.n	80004d6 <__udivmoddi4+0x1ce>
 80005d6:	4650      	mov	r0, sl
 80005d8:	e766      	b.n	80004a8 <__udivmoddi4+0x1a0>
 80005da:	4608      	mov	r0, r1
 80005dc:	e6fd      	b.n	80003da <__udivmoddi4+0xd2>
 80005de:	443b      	add	r3, r7
 80005e0:	3a02      	subs	r2, #2
 80005e2:	e733      	b.n	800044c <__udivmoddi4+0x144>
 80005e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e8:	443b      	add	r3, r7
 80005ea:	e71c      	b.n	8000426 <__udivmoddi4+0x11e>
 80005ec:	4649      	mov	r1, r9
 80005ee:	e79c      	b.n	800052a <__udivmoddi4+0x222>
 80005f0:	eba1 0109 	sub.w	r1, r1, r9
 80005f4:	46c4      	mov	ip, r8
 80005f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80005fa:	fb09 f804 	mul.w	r8, r9, r4
 80005fe:	e7c4      	b.n	800058a <__udivmoddi4+0x282>

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <MX_BEEP_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_BEEP_GPIO_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b086      	sub	sp, #24
 8000608:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
 8000616:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000618:	4b12      	ldr	r3, [pc, #72]	@ (8000664 <MX_BEEP_GPIO_Init+0x60>)
 800061a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800061e:	4a11      	ldr	r2, [pc, #68]	@ (8000664 <MX_BEEP_GPIO_Init+0x60>)
 8000620:	f043 0310 	orr.w	r3, r3, #16
 8000624:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000628:	4b0e      	ldr	r3, [pc, #56]	@ (8000664 <MX_BEEP_GPIO_Init+0x60>)
 800062a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800062e:	f003 0310 	and.w	r3, r3, #16
 8000632:	603b      	str	r3, [r7, #0]
 8000634:	683b      	ldr	r3, [r7, #0]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BEEP_GPIO_Port, BEEP_Pin, GPIO_PIN_RESET);
 8000636:	2200      	movs	r2, #0
 8000638:	2110      	movs	r1, #16
 800063a:	480b      	ldr	r0, [pc, #44]	@ (8000668 <MX_BEEP_GPIO_Init+0x64>)
 800063c:	f001 fec6 	bl	80023cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BEEP_Pin */
  GPIO_InitStruct.Pin = BEEP_Pin;
 8000640:	2310      	movs	r3, #16
 8000642:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000644:	2301      	movs	r3, #1
 8000646:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000648:	2300      	movs	r3, #0
 800064a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064c:	2300      	movs	r3, #0
 800064e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000650:	1d3b      	adds	r3, r7, #4
 8000652:	4619      	mov	r1, r3
 8000654:	4804      	ldr	r0, [pc, #16]	@ (8000668 <MX_BEEP_GPIO_Init+0x64>)
 8000656:	f001 fd09 	bl	800206c <HAL_GPIO_Init>
}
 800065a:	bf00      	nop
 800065c:	3718      	adds	r7, #24
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	58024400 	.word	0x58024400
 8000668:	58021000 	.word	0x58021000

0800066c <MX_KEY_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_KEY_GPIO_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b086      	sub	sp, #24
 8000670:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000672:	1d3b      	adds	r3, r7, #4
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000680:	4b14      	ldr	r3, [pc, #80]	@ (80006d4 <MX_KEY_GPIO_Init+0x68>)
 8000682:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000686:	4a13      	ldr	r2, [pc, #76]	@ (80006d4 <MX_KEY_GPIO_Init+0x68>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000690:	4b10      	ldr	r3, [pc, #64]	@ (80006d4 <MX_KEY_GPIO_Init+0x68>)
 8000692:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	603b      	str	r3, [r7, #0]
 800069c:	683b      	ldr	r3, [r7, #0]
  /*Configure GPIO pin : WK_UP_Pin */
  GPIO_InitStruct.Pin = WK_UP_Pin;
 800069e:	2301      	movs	r3, #1
 80006a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006a2:	2300      	movs	r3, #0
 80006a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006a6:	2302      	movs	r3, #2
 80006a8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(WK_UP_GPIO_Port, &GPIO_InitStruct);
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	4619      	mov	r1, r3
 80006ae:	480a      	ldr	r0, [pc, #40]	@ (80006d8 <MX_KEY_GPIO_Init+0x6c>)
 80006b0:	f001 fcdc 	bl	800206c <HAL_GPIO_Init>
  /*Configure GPIO pins : KEY0_Pin KEY1_Pin */
  GPIO_InitStruct.Pin = KEY0_Pin|KEY1_Pin;
 80006b4:	f248 0302 	movw	r3, #32770	@ 0x8002
 80006b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ba:	2300      	movs	r3, #0
 80006bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006be:	2301      	movs	r3, #1
 80006c0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	4619      	mov	r1, r3
 80006c6:	4804      	ldr	r0, [pc, #16]	@ (80006d8 <MX_KEY_GPIO_Init+0x6c>)
 80006c8:	f001 fcd0 	bl	800206c <HAL_GPIO_Init>
}
 80006cc:	bf00      	nop
 80006ce:	3718      	adds	r7, #24
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	58024400 	.word	0x58024400
 80006d8:	58020000 	.word	0x58020000

080006dc <MX_LED_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_LED_GPIO_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b088      	sub	sp, #32
 80006e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e2:	f107 030c 	add.w	r3, r7, #12
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
 80006f0:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006f2:	4b24      	ldr	r3, [pc, #144]	@ (8000784 <MX_LED_GPIO_Init+0xa8>)
 80006f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006f8:	4a22      	ldr	r2, [pc, #136]	@ (8000784 <MX_LED_GPIO_Init+0xa8>)
 80006fa:	f043 0310 	orr.w	r3, r3, #16
 80006fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000702:	4b20      	ldr	r3, [pc, #128]	@ (8000784 <MX_LED_GPIO_Init+0xa8>)
 8000704:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000708:	f003 0310 	and.w	r3, r3, #16
 800070c:	60bb      	str	r3, [r7, #8]
 800070e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000710:	4b1c      	ldr	r3, [pc, #112]	@ (8000784 <MX_LED_GPIO_Init+0xa8>)
 8000712:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000716:	4a1b      	ldr	r2, [pc, #108]	@ (8000784 <MX_LED_GPIO_Init+0xa8>)
 8000718:	f043 0302 	orr.w	r3, r3, #2
 800071c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000720:	4b18      	ldr	r3, [pc, #96]	@ (8000784 <MX_LED_GPIO_Init+0xa8>)
 8000722:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000726:	f003 0302 	and.w	r3, r3, #2
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_Pin|LED2_Pin, GPIO_PIN_SET);
 800072e:	2201      	movs	r2, #1
 8000730:	2160      	movs	r1, #96	@ 0x60
 8000732:	4815      	ldr	r0, [pc, #84]	@ (8000788 <MX_LED_GPIO_Init+0xac>)
 8000734:	f001 fe4a 	bl	80023cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 8000738:	2201      	movs	r2, #1
 800073a:	2110      	movs	r1, #16
 800073c:	4813      	ldr	r0, [pc, #76]	@ (800078c <MX_LED_GPIO_Init+0xb0>)
 800073e:	f001 fe45 	bl	80023cc <HAL_GPIO_WritePin>
  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000742:	2360      	movs	r3, #96	@ 0x60
 8000744:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000746:	2301      	movs	r3, #1
 8000748:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074e:	2300      	movs	r3, #0
 8000750:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000752:	f107 030c 	add.w	r3, r7, #12
 8000756:	4619      	mov	r1, r3
 8000758:	480b      	ldr	r0, [pc, #44]	@ (8000788 <MX_LED_GPIO_Init+0xac>)
 800075a:	f001 fc87 	bl	800206c <HAL_GPIO_Init>
  /*Configure GPIO pin : LED0_Pin */
  GPIO_InitStruct.Pin = LED0_Pin;
 800075e:	2310      	movs	r3, #16
 8000760:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000762:	2301      	movs	r3, #1
 8000764:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076a:	2300      	movs	r3, #0
 800076c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 800076e:	f107 030c 	add.w	r3, r7, #12
 8000772:	4619      	mov	r1, r3
 8000774:	4805      	ldr	r0, [pc, #20]	@ (800078c <MX_LED_GPIO_Init+0xb0>)
 8000776:	f001 fc79 	bl	800206c <HAL_GPIO_Init>
}
 800077a:	bf00      	nop
 800077c:	3720      	adds	r7, #32
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	58024400 	.word	0x58024400
 8000788:	58021000 	.word	0x58021000
 800078c:	58020400 	.word	0x58020400

08000790 <bsp_init>:
#include "bsp_init.h"

void bsp_init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
	MX_LED_GPIO_Init();
 8000794:	f7ff ffa2 	bl	80006dc <MX_LED_GPIO_Init>
	MX_BEEP_GPIO_Init();
 8000798:	f7ff ff34 	bl	8000604 <MX_BEEP_GPIO_Init>
	MX_KEY_GPIO_Init();
 800079c:	f7ff ff66 	bl	800066c <MX_KEY_GPIO_Init>
	// MX_EXTI_GPIO_Init();
	MX_USART1_UART_Init();
 80007a0:	f000 fbba 	bl	8000f18 <MX_USART1_UART_Init>
	// MX_IWDG1_Init(); // 溢出时间约1s
	// MX_TIM6_Init(); // 溢出时间约500ms
}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
  uint16_t pwm_val = 0; // PWM占空比变量
 80007ae:	2300      	movs	r3, #0
 80007b0:	80fb      	strh	r3, [r7, #6]
  uint8_t dir = 1; // 方向变量，1表示增加，0表示减少
 80007b2:	2301      	movs	r3, #1
 80007b4:	717b      	strb	r3, [r7, #5]
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80007b6:	f000 f8a9 	bl	800090c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ba:	f000 fca9 	bl	8001110 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007be:	f000 f829 	bl	8000814 <SystemClock_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

  /* USER CODE BEGIN 2 */
  bsp_init();
 80007c2:	f7ff ffe5 	bl	8000790 <bsp_init>
  printf("GTIM PWM Test\r\n");
 80007c6:	4811      	ldr	r0, [pc, #68]	@ (800080c <main+0x64>)
 80007c8:	f007 fd78 	bl	80082bc <puts>
  MX_TIM3_Init();
 80007cc:	f000 faa6 	bl	8000d1c <MX_TIM3_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(5);
 80007d0:	2005      	movs	r0, #5
 80007d2:	f000 fd2f 	bl	8001234 <HAL_Delay>
	  if(dir)
 80007d6:	797b      	ldrb	r3, [r7, #5]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d003      	beq.n	80007e4 <main+0x3c>
	  {
		  pwm_val++;
 80007dc:	88fb      	ldrh	r3, [r7, #6]
 80007de:	3301      	adds	r3, #1
 80007e0:	80fb      	strh	r3, [r7, #6]
 80007e2:	e002      	b.n	80007ea <main+0x42>
	  }
	  else
	  {
		  pwm_val--;
 80007e4:	88fb      	ldrh	r3, [r7, #6]
 80007e6:	3b01      	subs	r3, #1
 80007e8:	80fb      	strh	r3, [r7, #6]
	  }
	  if(pwm_val >= 500)
 80007ea:	88fb      	ldrh	r3, [r7, #6]
 80007ec:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80007f0:	d301      	bcc.n	80007f6 <main+0x4e>
	  {
		  dir = 0;
 80007f2:	2300      	movs	r3, #0
 80007f4:	717b      	strb	r3, [r7, #5]
	  }
	  if(pwm_val == 0)
 80007f6:	88fb      	ldrh	r3, [r7, #6]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d101      	bne.n	8000800 <main+0x58>
	  {
		  dir = 1;
 80007fc:	2301      	movs	r3, #1
 80007fe:	717b      	strb	r3, [r7, #5]
	  }
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pwm_val); // 设置PWM占空比
 8000800:	4b03      	ldr	r3, [pc, #12]	@ (8000810 <main+0x68>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	88fa      	ldrh	r2, [r7, #6]
 8000806:	635a      	str	r2, [r3, #52]	@ 0x34
	  HAL_Delay(5);
 8000808:	e7e2      	b.n	80007d0 <main+0x28>
 800080a:	bf00      	nop
 800080c:	080089fc 	.word	0x080089fc
 8000810:	2400008c 	.word	0x2400008c

08000814 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b09c      	sub	sp, #112	@ 0x70
 8000818:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800081e:	224c      	movs	r2, #76	@ 0x4c
 8000820:	2100      	movs	r1, #0
 8000822:	4618      	mov	r0, r3
 8000824:	f007 fe2a 	bl	800847c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	2220      	movs	r2, #32
 800082c:	2100      	movs	r1, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f007 fe24 	bl	800847c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000834:	2002      	movs	r0, #2
 8000836:	f001 fe07 	bl	8002448 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800083a:	2300      	movs	r3, #0
 800083c:	603b      	str	r3, [r7, #0]
 800083e:	4b31      	ldr	r3, [pc, #196]	@ (8000904 <SystemClock_Config+0xf0>)
 8000840:	699b      	ldr	r3, [r3, #24]
 8000842:	4a30      	ldr	r2, [pc, #192]	@ (8000904 <SystemClock_Config+0xf0>)
 8000844:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000848:	6193      	str	r3, [r2, #24]
 800084a:	4b2e      	ldr	r3, [pc, #184]	@ (8000904 <SystemClock_Config+0xf0>)
 800084c:	699b      	ldr	r3, [r3, #24]
 800084e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000852:	603b      	str	r3, [r7, #0]
 8000854:	4b2c      	ldr	r3, [pc, #176]	@ (8000908 <SystemClock_Config+0xf4>)
 8000856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000858:	4a2b      	ldr	r2, [pc, #172]	@ (8000908 <SystemClock_Config+0xf4>)
 800085a:	f043 0301 	orr.w	r3, r3, #1
 800085e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000860:	4b29      	ldr	r3, [pc, #164]	@ (8000908 <SystemClock_Config+0xf4>)
 8000862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000864:	f003 0301 	and.w	r3, r3, #1
 8000868:	603b      	str	r3, [r7, #0]
 800086a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800086c:	bf00      	nop
 800086e:	4b25      	ldr	r3, [pc, #148]	@ (8000904 <SystemClock_Config+0xf0>)
 8000870:	699b      	ldr	r3, [r3, #24]
 8000872:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000876:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800087a:	d1f8      	bne.n	800086e <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800087c:	2309      	movs	r3, #9
 800087e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000880:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000884:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000886:	2301      	movs	r3, #1
 8000888:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800088a:	2302      	movs	r3, #2
 800088c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800088e:	2302      	movs	r3, #2
 8000890:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000892:	2302      	movs	r3, #2
 8000894:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 8000896:	23f0      	movs	r3, #240	@ 0xf0
 8000898:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800089a:	2302      	movs	r3, #2
 800089c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800089e:	2302      	movs	r3, #2
 80008a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008a2:	2302      	movs	r3, #2
 80008a4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80008a6:	2308      	movs	r3, #8
 80008a8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008aa:	2300      	movs	r3, #0
 80008ac:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008ae:	2300      	movs	r3, #0
 80008b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008b6:	4618      	mov	r0, r3
 80008b8:	f001 fe00 	bl	80024bc <HAL_RCC_OscConfig>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80008c2:	f000 f84f 	bl	8000964 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008c6:	233f      	movs	r3, #63	@ 0x3f
 80008c8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ca:	2303      	movs	r3, #3
 80008cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008ce:	2300      	movs	r3, #0
 80008d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80008d2:	2308      	movs	r3, #8
 80008d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008d6:	2340      	movs	r3, #64	@ 0x40
 80008d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008da:	2340      	movs	r3, #64	@ 0x40
 80008dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008e2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008e4:	2340      	movs	r3, #64	@ 0x40
 80008e6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008e8:	1d3b      	adds	r3, r7, #4
 80008ea:	2104      	movs	r1, #4
 80008ec:	4618      	mov	r0, r3
 80008ee:	f002 fa3f 	bl	8002d70 <HAL_RCC_ClockConfig>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80008f8:	f000 f834 	bl	8000964 <Error_Handler>
  }
}
 80008fc:	bf00      	nop
 80008fe:	3770      	adds	r7, #112	@ 0x70
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	58024800 	.word	0x58024800
 8000908:	58000400 	.word	0x58000400

0800090c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000912:	463b      	mov	r3, r7
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
 800091c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800091e:	f000 fdc9 	bl	80014b4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000922:	2301      	movs	r3, #1
 8000924:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000926:	2300      	movs	r3, #0
 8000928:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800092a:	2300      	movs	r3, #0
 800092c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800092e:	231f      	movs	r3, #31
 8000930:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000932:	2387      	movs	r3, #135	@ 0x87
 8000934:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000936:	2300      	movs	r3, #0
 8000938:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800093a:	2300      	movs	r3, #0
 800093c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800093e:	2301      	movs	r3, #1
 8000940:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000942:	2301      	movs	r3, #1
 8000944:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000946:	2300      	movs	r3, #0
 8000948:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800094a:	2300      	movs	r3, #0
 800094c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800094e:	463b      	mov	r3, r7
 8000950:	4618      	mov	r0, r3
 8000952:	f000 fde7 	bl	8001524 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000956:	2004      	movs	r0, #4
 8000958:	f000 fdc4 	bl	80014e4 <HAL_MPU_Enable>

}
 800095c:	bf00      	nop
 800095e:	3710      	adds	r7, #16
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}

08000964 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000968:	b672      	cpsid	i
}
 800096a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800096c:	bf00      	nop
 800096e:	e7fd      	b.n	800096c <Error_Handler+0x8>

08000970 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000976:	4b0a      	ldr	r3, [pc, #40]	@ (80009a0 <HAL_MspInit+0x30>)
 8000978:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800097c:	4a08      	ldr	r2, [pc, #32]	@ (80009a0 <HAL_MspInit+0x30>)
 800097e:	f043 0302 	orr.w	r3, r3, #2
 8000982:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000986:	4b06      	ldr	r3, [pc, #24]	@ (80009a0 <HAL_MspInit+0x30>)
 8000988:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800098c:	f003 0302 	and.w	r3, r3, #2
 8000990:	607b      	str	r3, [r7, #4]
 8000992:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000994:	bf00      	nop
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr
 80009a0:	58024400 	.word	0x58024400

080009a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009a8:	bf00      	nop
 80009aa:	e7fd      	b.n	80009a8 <NMI_Handler+0x4>

080009ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009b0:	bf00      	nop
 80009b2:	e7fd      	b.n	80009b0 <HardFault_Handler+0x4>

080009b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b8:	bf00      	nop
 80009ba:	e7fd      	b.n	80009b8 <MemManage_Handler+0x4>

080009bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009c0:	bf00      	nop
 80009c2:	e7fd      	b.n	80009c0 <BusFault_Handler+0x4>

080009c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c8:	bf00      	nop
 80009ca:	e7fd      	b.n	80009c8 <UsageFault_Handler+0x4>

080009cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr

080009da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr

080009f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009f6:	b580      	push	{r7, lr}
 80009f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009fa:	f000 fbfb 	bl	80011f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}
	...

08000a04 <WWDG_IRQHandler>:

/**
  * @brief This function handles Window watchdog interrupt.
  */
void WWDG_IRQHandler(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN WWDG_IRQn 0 */

  /* USER CODE END WWDG_IRQn 0 */
  HAL_WWDG_IRQHandler(&hwwdg1);
 8000a08:	4802      	ldr	r0, [pc, #8]	@ (8000a14 <WWDG_IRQHandler+0x10>)
 8000a0a:	f007 fb15 	bl	8008038 <HAL_WWDG_IRQHandler>
  /* USER CODE BEGIN WWDG_IRQn 1 */
  /* USER CODE END WWDG_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	240001b8 	.word	0x240001b8

08000a18 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI_KEY1_Pin);
 8000a1c:	2002      	movs	r0, #2
 8000a1e:	f001 fcee 	bl	80023fe <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
	...

08000a28 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000a2c:	4802      	ldr	r0, [pc, #8]	@ (8000a38 <TIM3_IRQHandler+0x10>)
 8000a2e:	f004 fd1d 	bl	800546c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  /* USER CODE END TIM3_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	2400008c 	.word	0x2400008c

08000a3c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a40:	4802      	ldr	r0, [pc, #8]	@ (8000a4c <USART1_IRQHandler+0x10>)
 8000a42:	f005 fe1d 	bl	8006680 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	24000124 	.word	0x24000124

08000a50 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a54:	4802      	ldr	r0, [pc, #8]	@ (8000a60 <TIM6_DAC_IRQHandler+0x10>)
 8000a56:	f004 fd09 	bl	800546c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	240000d8 	.word	0x240000d8

08000a64 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b086      	sub	sp, #24
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60f8      	str	r0, [r7, #12]
 8000a6c:	60b9      	str	r1, [r7, #8]
 8000a6e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a70:	2300      	movs	r3, #0
 8000a72:	617b      	str	r3, [r7, #20]
 8000a74:	e00a      	b.n	8000a8c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a76:	f3af 8000 	nop.w
 8000a7a:	4601      	mov	r1, r0
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	1c5a      	adds	r2, r3, #1
 8000a80:	60ba      	str	r2, [r7, #8]
 8000a82:	b2ca      	uxtb	r2, r1
 8000a84:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	617b      	str	r3, [r7, #20]
 8000a8c:	697a      	ldr	r2, [r7, #20]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	429a      	cmp	r2, r3
 8000a92:	dbf0      	blt.n	8000a76 <_read+0x12>
  }

  return len;
 8000a94:	687b      	ldr	r3, [r7, #4]
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3718      	adds	r7, #24
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}

08000a9e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	b086      	sub	sp, #24
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	60f8      	str	r0, [r7, #12]
 8000aa6:	60b9      	str	r1, [r7, #8]
 8000aa8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aaa:	2300      	movs	r3, #0
 8000aac:	617b      	str	r3, [r7, #20]
 8000aae:	e009      	b.n	8000ac4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	1c5a      	adds	r2, r3, #1
 8000ab4:	60ba      	str	r2, [r7, #8]
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f000 faeb 	bl	8001094 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	617b      	str	r3, [r7, #20]
 8000ac4:	697a      	ldr	r2, [r7, #20]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	dbf1      	blt.n	8000ab0 <_write+0x12>
  }
  return len;
 8000acc:	687b      	ldr	r3, [r7, #4]
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3718      	adds	r7, #24
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}

08000ad6 <_close>:

int _close(int file)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	b083      	sub	sp, #12
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ade:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	370c      	adds	r7, #12
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr

08000aee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000aee:	b480      	push	{r7}
 8000af0:	b083      	sub	sp, #12
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	6078      	str	r0, [r7, #4]
 8000af6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000afe:	605a      	str	r2, [r3, #4]
  return 0;
 8000b00:	2300      	movs	r3, #0
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	370c      	adds	r7, #12
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr

08000b0e <_isatty>:

int _isatty(int file)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	b083      	sub	sp, #12
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b16:	2301      	movs	r3, #1
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	370c      	adds	r7, #12
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr

08000b24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b085      	sub	sp, #20
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	60f8      	str	r0, [r7, #12]
 8000b2c:	60b9      	str	r1, [r7, #8]
 8000b2e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b30:	2300      	movs	r3, #0
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3714      	adds	r7, #20
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
	...

08000b40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b086      	sub	sp, #24
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b48:	4a14      	ldr	r2, [pc, #80]	@ (8000b9c <_sbrk+0x5c>)
 8000b4a:	4b15      	ldr	r3, [pc, #84]	@ (8000ba0 <_sbrk+0x60>)
 8000b4c:	1ad3      	subs	r3, r2, r3
 8000b4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b54:	4b13      	ldr	r3, [pc, #76]	@ (8000ba4 <_sbrk+0x64>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d102      	bne.n	8000b62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b5c:	4b11      	ldr	r3, [pc, #68]	@ (8000ba4 <_sbrk+0x64>)
 8000b5e:	4a12      	ldr	r2, [pc, #72]	@ (8000ba8 <_sbrk+0x68>)
 8000b60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b62:	4b10      	ldr	r3, [pc, #64]	@ (8000ba4 <_sbrk+0x64>)
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4413      	add	r3, r2
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d207      	bcs.n	8000b80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b70:	f007 fcd2 	bl	8008518 <__errno>
 8000b74:	4603      	mov	r3, r0
 8000b76:	220c      	movs	r2, #12
 8000b78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b7e:	e009      	b.n	8000b94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b80:	4b08      	ldr	r3, [pc, #32]	@ (8000ba4 <_sbrk+0x64>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b86:	4b07      	ldr	r3, [pc, #28]	@ (8000ba4 <_sbrk+0x64>)
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	4a05      	ldr	r2, [pc, #20]	@ (8000ba4 <_sbrk+0x64>)
 8000b90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b92:	68fb      	ldr	r3, [r7, #12]
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3718      	adds	r7, #24
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	24080000 	.word	0x24080000
 8000ba0:	00000400 	.word	0x00000400
 8000ba4:	24000088 	.word	0x24000088
 8000ba8:	24000320 	.word	0x24000320

08000bac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000bb0:	4b43      	ldr	r3, [pc, #268]	@ (8000cc0 <SystemInit+0x114>)
 8000bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bb6:	4a42      	ldr	r2, [pc, #264]	@ (8000cc0 <SystemInit+0x114>)
 8000bb8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bbc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bc0:	4b40      	ldr	r3, [pc, #256]	@ (8000cc4 <SystemInit+0x118>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f003 030f 	and.w	r3, r3, #15
 8000bc8:	2b06      	cmp	r3, #6
 8000bca:	d807      	bhi.n	8000bdc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bcc:	4b3d      	ldr	r3, [pc, #244]	@ (8000cc4 <SystemInit+0x118>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f023 030f 	bic.w	r3, r3, #15
 8000bd4:	4a3b      	ldr	r2, [pc, #236]	@ (8000cc4 <SystemInit+0x118>)
 8000bd6:	f043 0307 	orr.w	r3, r3, #7
 8000bda:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000bdc:	4b3a      	ldr	r3, [pc, #232]	@ (8000cc8 <SystemInit+0x11c>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a39      	ldr	r2, [pc, #228]	@ (8000cc8 <SystemInit+0x11c>)
 8000be2:	f043 0301 	orr.w	r3, r3, #1
 8000be6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000be8:	4b37      	ldr	r3, [pc, #220]	@ (8000cc8 <SystemInit+0x11c>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000bee:	4b36      	ldr	r3, [pc, #216]	@ (8000cc8 <SystemInit+0x11c>)
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	4935      	ldr	r1, [pc, #212]	@ (8000cc8 <SystemInit+0x11c>)
 8000bf4:	4b35      	ldr	r3, [pc, #212]	@ (8000ccc <SystemInit+0x120>)
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bfa:	4b32      	ldr	r3, [pc, #200]	@ (8000cc4 <SystemInit+0x118>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f003 0308 	and.w	r3, r3, #8
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d007      	beq.n	8000c16 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c06:	4b2f      	ldr	r3, [pc, #188]	@ (8000cc4 <SystemInit+0x118>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f023 030f 	bic.w	r3, r3, #15
 8000c0e:	4a2d      	ldr	r2, [pc, #180]	@ (8000cc4 <SystemInit+0x118>)
 8000c10:	f043 0307 	orr.w	r3, r3, #7
 8000c14:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000c16:	4b2c      	ldr	r3, [pc, #176]	@ (8000cc8 <SystemInit+0x11c>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000c1c:	4b2a      	ldr	r3, [pc, #168]	@ (8000cc8 <SystemInit+0x11c>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000c22:	4b29      	ldr	r3, [pc, #164]	@ (8000cc8 <SystemInit+0x11c>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000c28:	4b27      	ldr	r3, [pc, #156]	@ (8000cc8 <SystemInit+0x11c>)
 8000c2a:	4a29      	ldr	r2, [pc, #164]	@ (8000cd0 <SystemInit+0x124>)
 8000c2c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000c2e:	4b26      	ldr	r3, [pc, #152]	@ (8000cc8 <SystemInit+0x11c>)
 8000c30:	4a28      	ldr	r2, [pc, #160]	@ (8000cd4 <SystemInit+0x128>)
 8000c32:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000c34:	4b24      	ldr	r3, [pc, #144]	@ (8000cc8 <SystemInit+0x11c>)
 8000c36:	4a28      	ldr	r2, [pc, #160]	@ (8000cd8 <SystemInit+0x12c>)
 8000c38:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000c3a:	4b23      	ldr	r3, [pc, #140]	@ (8000cc8 <SystemInit+0x11c>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000c40:	4b21      	ldr	r3, [pc, #132]	@ (8000cc8 <SystemInit+0x11c>)
 8000c42:	4a25      	ldr	r2, [pc, #148]	@ (8000cd8 <SystemInit+0x12c>)
 8000c44:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000c46:	4b20      	ldr	r3, [pc, #128]	@ (8000cc8 <SystemInit+0x11c>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c4c:	4b1e      	ldr	r3, [pc, #120]	@ (8000cc8 <SystemInit+0x11c>)
 8000c4e:	4a22      	ldr	r2, [pc, #136]	@ (8000cd8 <SystemInit+0x12c>)
 8000c50:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c52:	4b1d      	ldr	r3, [pc, #116]	@ (8000cc8 <SystemInit+0x11c>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c58:	4b1b      	ldr	r3, [pc, #108]	@ (8000cc8 <SystemInit+0x11c>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a1a      	ldr	r2, [pc, #104]	@ (8000cc8 <SystemInit+0x11c>)
 8000c5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c62:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c64:	4b18      	ldr	r3, [pc, #96]	@ (8000cc8 <SystemInit+0x11c>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000c6a:	4b1c      	ldr	r3, [pc, #112]	@ (8000cdc <SystemInit+0x130>)
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ce0 <SystemInit+0x134>)
 8000c70:	4013      	ands	r3, r2
 8000c72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000c76:	d202      	bcs.n	8000c7e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000c78:	4b1a      	ldr	r3, [pc, #104]	@ (8000ce4 <SystemInit+0x138>)
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000c7e:	4b12      	ldr	r3, [pc, #72]	@ (8000cc8 <SystemInit+0x11c>)
 8000c80:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000c84:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d113      	bne.n	8000cb4 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000c8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc8 <SystemInit+0x11c>)
 8000c8e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000c92:	4a0d      	ldr	r2, [pc, #52]	@ (8000cc8 <SystemInit+0x11c>)
 8000c94:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c98:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000c9c:	4b12      	ldr	r3, [pc, #72]	@ (8000ce8 <SystemInit+0x13c>)
 8000c9e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000ca2:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000ca4:	4b08      	ldr	r3, [pc, #32]	@ (8000cc8 <SystemInit+0x11c>)
 8000ca6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000caa:	4a07      	ldr	r2, [pc, #28]	@ (8000cc8 <SystemInit+0x11c>)
 8000cac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000cb0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	e000ed00 	.word	0xe000ed00
 8000cc4:	52002000 	.word	0x52002000
 8000cc8:	58024400 	.word	0x58024400
 8000ccc:	eaf6ed7f 	.word	0xeaf6ed7f
 8000cd0:	02020200 	.word	0x02020200
 8000cd4:	01ff0000 	.word	0x01ff0000
 8000cd8:	01010280 	.word	0x01010280
 8000cdc:	5c001000 	.word	0x5c001000
 8000ce0:	ffff0000 	.word	0xffff0000
 8000ce4:	51008108 	.word	0x51008108
 8000ce8:	52004000 	.word	0x52004000

08000cec <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000cf0:	4b09      	ldr	r3, [pc, #36]	@ (8000d18 <ExitRun0Mode+0x2c>)
 8000cf2:	68db      	ldr	r3, [r3, #12]
 8000cf4:	4a08      	ldr	r2, [pc, #32]	@ (8000d18 <ExitRun0Mode+0x2c>)
 8000cf6:	f043 0302 	orr.w	r3, r3, #2
 8000cfa:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000cfc:	bf00      	nop
 8000cfe:	4b06      	ldr	r3, [pc, #24]	@ (8000d18 <ExitRun0Mode+0x2c>)
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d0f9      	beq.n	8000cfe <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000d0a:	bf00      	nop
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	58024800 	.word	0x58024800

08000d1c <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08e      	sub	sp, #56	@ 0x38
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d22:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	605a      	str	r2, [r3, #4]
 8000d2c:	609a      	str	r2, [r3, #8]
 8000d2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d30:	f107 031c 	add.w	r3, r7, #28
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d3c:	463b      	mov	r3, r7
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	605a      	str	r2, [r3, #4]
 8000d44:	609a      	str	r2, [r3, #8]
 8000d46:	60da      	str	r2, [r3, #12]
 8000d48:	611a      	str	r2, [r3, #16]
 8000d4a:	615a      	str	r2, [r3, #20]
 8000d4c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d4e:	4b2f      	ldr	r3, [pc, #188]	@ (8000e0c <MX_TIM3_Init+0xf0>)
 8000d50:	4a2f      	ldr	r2, [pc, #188]	@ (8000e10 <MX_TIM3_Init+0xf4>)
 8000d52:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 239;
 8000d54:	4b2d      	ldr	r3, [pc, #180]	@ (8000e0c <MX_TIM3_Init+0xf0>)
 8000d56:	22ef      	movs	r2, #239	@ 0xef
 8000d58:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d5a:	4b2c      	ldr	r3, [pc, #176]	@ (8000e0c <MX_TIM3_Init+0xf0>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000d60:	4b2a      	ldr	r3, [pc, #168]	@ (8000e0c <MX_TIM3_Init+0xf0>)
 8000d62:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d66:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d68:	4b28      	ldr	r3, [pc, #160]	@ (8000e0c <MX_TIM3_Init+0xf0>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d6e:	4b27      	ldr	r3, [pc, #156]	@ (8000e0c <MX_TIM3_Init+0xf0>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d74:	4825      	ldr	r0, [pc, #148]	@ (8000e0c <MX_TIM3_Init+0xf0>)
 8000d76:	f004 f9b3 	bl	80050e0 <HAL_TIM_Base_Init>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000d80:	f7ff fdf0 	bl	8000964 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d88:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d8a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d8e:	4619      	mov	r1, r3
 8000d90:	481e      	ldr	r0, [pc, #120]	@ (8000e0c <MX_TIM3_Init+0xf0>)
 8000d92:	f004 fd87 	bl	80058a4 <HAL_TIM_ConfigClockSource>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000d9c:	f7ff fde2 	bl	8000964 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000da0:	481a      	ldr	r0, [pc, #104]	@ (8000e0c <MX_TIM3_Init+0xf0>)
 8000da2:	f004 f9f4 	bl	800518e <HAL_TIM_PWM_Init>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000dac:	f7ff fdda 	bl	8000964 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000db0:	2300      	movs	r3, #0
 8000db2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000db4:	2300      	movs	r3, #0
 8000db6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000db8:	f107 031c 	add.w	r3, r7, #28
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4813      	ldr	r0, [pc, #76]	@ (8000e0c <MX_TIM3_Init+0xf0>)
 8000dc0:	f005 fad4 	bl	800636c <HAL_TIMEx_MasterConfigSynchronization>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000dca:	f7ff fdcb 	bl	8000964 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dce:	2360      	movs	r3, #96	@ 0x60
 8000dd0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dde:	463b      	mov	r3, r7
 8000de0:	2200      	movs	r2, #0
 8000de2:	4619      	mov	r1, r3
 8000de4:	4809      	ldr	r0, [pc, #36]	@ (8000e0c <MX_TIM3_Init+0xf0>)
 8000de6:	f004 fc49 	bl	800567c <HAL_TIM_PWM_ConfigChannel>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000df0:	f7ff fdb8 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  // HAL_TIM_Base_Start_IT(&htim3); // 启动定时器3及其中断
  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000df4:	4805      	ldr	r0, [pc, #20]	@ (8000e0c <MX_TIM3_Init+0xf0>)
 8000df6:	f000 f855 	bl	8000ea4 <HAL_TIM_MspPostInit>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // 启动PWM通道1
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	4803      	ldr	r0, [pc, #12]	@ (8000e0c <MX_TIM3_Init+0xf0>)
 8000dfe:	f004 fa27 	bl	8005250 <HAL_TIM_PWM_Start>

}
 8000e02:	bf00      	nop
 8000e04:	3738      	adds	r7, #56	@ 0x38
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	2400008c 	.word	0x2400008c
 8000e10:	40000400 	.word	0x40000400

08000e14 <HAL_TIM_Base_MspInit>:
  /* USER CODE END TIM6_Init 2 */

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a1d      	ldr	r2, [pc, #116]	@ (8000e98 <HAL_TIM_Base_MspInit+0x84>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d117      	bne.n	8000e56 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e26:	4b1d      	ldr	r3, [pc, #116]	@ (8000e9c <HAL_TIM_Base_MspInit+0x88>)
 8000e28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e2c:	4a1b      	ldr	r2, [pc, #108]	@ (8000e9c <HAL_TIM_Base_MspInit+0x88>)
 8000e2e:	f043 0302 	orr.w	r3, r3, #2
 8000e32:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000e36:	4b19      	ldr	r3, [pc, #100]	@ (8000e9c <HAL_TIM_Base_MspInit+0x88>)
 8000e38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e3c:	f003 0302 	and.w	r3, r3, #2
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 1);
 8000e44:	2201      	movs	r2, #1
 8000e46:	2103      	movs	r1, #3
 8000e48:	201d      	movs	r0, #29
 8000e4a:	f000 fafe 	bl	800144a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000e4e:	201d      	movs	r0, #29
 8000e50:	f000 fb15 	bl	800147e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */
  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000e54:	e01b      	b.n	8000e8e <HAL_TIM_Base_MspInit+0x7a>
  else if(tim_baseHandle->Instance==TIM6)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a11      	ldr	r2, [pc, #68]	@ (8000ea0 <HAL_TIM_Base_MspInit+0x8c>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d116      	bne.n	8000e8e <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000e60:	4b0e      	ldr	r3, [pc, #56]	@ (8000e9c <HAL_TIM_Base_MspInit+0x88>)
 8000e62:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e66:	4a0d      	ldr	r2, [pc, #52]	@ (8000e9c <HAL_TIM_Base_MspInit+0x88>)
 8000e68:	f043 0310 	orr.w	r3, r3, #16
 8000e6c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000e70:	4b0a      	ldr	r3, [pc, #40]	@ (8000e9c <HAL_TIM_Base_MspInit+0x88>)
 8000e72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e76:	f003 0310 	and.w	r3, r3, #16
 8000e7a:	60bb      	str	r3, [r7, #8]
 8000e7c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2101      	movs	r1, #1
 8000e82:	2036      	movs	r0, #54	@ 0x36
 8000e84:	f000 fae1 	bl	800144a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e88:	2036      	movs	r0, #54	@ 0x36
 8000e8a:	f000 faf8 	bl	800147e <HAL_NVIC_EnableIRQ>
}
 8000e8e:	bf00      	nop
 8000e90:	3710      	adds	r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40000400 	.word	0x40000400
 8000e9c:	58024400 	.word	0x58024400
 8000ea0:	40001000 	.word	0x40001000

08000ea4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b088      	sub	sp, #32
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eac:	f107 030c 	add.w	r3, r7, #12
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a12      	ldr	r2, [pc, #72]	@ (8000f0c <HAL_TIM_MspPostInit+0x68>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d11e      	bne.n	8000f04 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec6:	4b12      	ldr	r3, [pc, #72]	@ (8000f10 <HAL_TIM_MspPostInit+0x6c>)
 8000ec8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ecc:	4a10      	ldr	r2, [pc, #64]	@ (8000f10 <HAL_TIM_MspPostInit+0x6c>)
 8000ece:	f043 0302 	orr.w	r3, r3, #2
 8000ed2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ed6:	4b0e      	ldr	r3, [pc, #56]	@ (8000f10 <HAL_TIM_MspPostInit+0x6c>)
 8000ed8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000edc:	f003 0302 	and.w	r3, r3, #2
 8000ee0:	60bb      	str	r3, [r7, #8]
 8000ee2:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4 (NJTRST)     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = TIM_LED_Pin;
 8000ee4:	2310      	movs	r3, #16
 8000ee6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIM_LED_GPIO_Port, &GPIO_InitStruct);
 8000ef8:	f107 030c 	add.w	r3, r7, #12
 8000efc:	4619      	mov	r1, r3
 8000efe:	4805      	ldr	r0, [pc, #20]	@ (8000f14 <HAL_TIM_MspPostInit+0x70>)
 8000f00:	f001 f8b4 	bl	800206c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000f04:	bf00      	nop
 8000f06:	3720      	adds	r7, #32
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	40000400 	.word	0x40000400
 8000f10:	58024400 	.word	0x58024400
 8000f14:	58020400 	.word	0x58020400

08000f18 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f1c:	4b22      	ldr	r3, [pc, #136]	@ (8000fa8 <MX_USART1_UART_Init+0x90>)
 8000f1e:	4a23      	ldr	r2, [pc, #140]	@ (8000fac <MX_USART1_UART_Init+0x94>)
 8000f20:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f22:	4b21      	ldr	r3, [pc, #132]	@ (8000fa8 <MX_USART1_UART_Init+0x90>)
 8000f24:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f28:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f2a:	4b1f      	ldr	r3, [pc, #124]	@ (8000fa8 <MX_USART1_UART_Init+0x90>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f30:	4b1d      	ldr	r3, [pc, #116]	@ (8000fa8 <MX_USART1_UART_Init+0x90>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f36:	4b1c      	ldr	r3, [pc, #112]	@ (8000fa8 <MX_USART1_UART_Init+0x90>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f3c:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa8 <MX_USART1_UART_Init+0x90>)
 8000f3e:	220c      	movs	r2, #12
 8000f40:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f42:	4b19      	ldr	r3, [pc, #100]	@ (8000fa8 <MX_USART1_UART_Init+0x90>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f48:	4b17      	ldr	r3, [pc, #92]	@ (8000fa8 <MX_USART1_UART_Init+0x90>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f4e:	4b16      	ldr	r3, [pc, #88]	@ (8000fa8 <MX_USART1_UART_Init+0x90>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f54:	4b14      	ldr	r3, [pc, #80]	@ (8000fa8 <MX_USART1_UART_Init+0x90>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f5a:	4b13      	ldr	r3, [pc, #76]	@ (8000fa8 <MX_USART1_UART_Init+0x90>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f60:	4811      	ldr	r0, [pc, #68]	@ (8000fa8 <MX_USART1_UART_Init+0x90>)
 8000f62:	f005 faaf 	bl	80064c4 <HAL_UART_Init>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000f6c:	f7ff fcfa 	bl	8000964 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f70:	2100      	movs	r1, #0
 8000f72:	480d      	ldr	r0, [pc, #52]	@ (8000fa8 <MX_USART1_UART_Init+0x90>)
 8000f74:	f006 ff96 	bl	8007ea4 <HAL_UARTEx_SetTxFifoThreshold>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000f7e:	f7ff fcf1 	bl	8000964 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f82:	2100      	movs	r1, #0
 8000f84:	4808      	ldr	r0, [pc, #32]	@ (8000fa8 <MX_USART1_UART_Init+0x90>)
 8000f86:	f006 ffcb 	bl	8007f20 <HAL_UARTEx_SetRxFifoThreshold>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000f90:	f7ff fce8 	bl	8000964 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000f94:	4804      	ldr	r0, [pc, #16]	@ (8000fa8 <MX_USART1_UART_Init+0x90>)
 8000f96:	f006 ff4c 	bl	8007e32 <HAL_UARTEx_DisableFifoMode>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000fa0:	f7ff fce0 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fa4:	bf00      	nop
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	24000124 	.word	0x24000124
 8000fac:	40011000 	.word	0x40011000

08000fb0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b0ba      	sub	sp, #232	@ 0xe8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fc8:	f107 0310 	add.w	r3, r7, #16
 8000fcc:	22c0      	movs	r2, #192	@ 0xc0
 8000fce:	2100      	movs	r1, #0
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f007 fa53 	bl	800847c <memset>
  if(uartHandle->Instance==USART1)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a2b      	ldr	r2, [pc, #172]	@ (8001088 <HAL_UART_MspInit+0xd8>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d14e      	bne.n	800107e <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000fe0:	f04f 0201 	mov.w	r2, #1
 8000fe4:	f04f 0300 	mov.w	r3, #0
 8000fe8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000fec:	2300      	movs	r3, #0
 8000fee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ff2:	f107 0310 	add.w	r3, r7, #16
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f002 fa46 	bl	8003488 <HAL_RCCEx_PeriphCLKConfig>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001002:	f7ff fcaf 	bl	8000964 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001006:	4b21      	ldr	r3, [pc, #132]	@ (800108c <HAL_UART_MspInit+0xdc>)
 8001008:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800100c:	4a1f      	ldr	r2, [pc, #124]	@ (800108c <HAL_UART_MspInit+0xdc>)
 800100e:	f043 0310 	orr.w	r3, r3, #16
 8001012:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001016:	4b1d      	ldr	r3, [pc, #116]	@ (800108c <HAL_UART_MspInit+0xdc>)
 8001018:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800101c:	f003 0310 	and.w	r3, r3, #16
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001024:	4b19      	ldr	r3, [pc, #100]	@ (800108c <HAL_UART_MspInit+0xdc>)
 8001026:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800102a:	4a18      	ldr	r2, [pc, #96]	@ (800108c <HAL_UART_MspInit+0xdc>)
 800102c:	f043 0301 	orr.w	r3, r3, #1
 8001030:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001034:	4b15      	ldr	r3, [pc, #84]	@ (800108c <HAL_UART_MspInit+0xdc>)
 8001036:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800103a:	f003 0301 	and.w	r3, r3, #1
 800103e:	60bb      	str	r3, [r7, #8]
 8001040:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001042:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001046:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104a:	2302      	movs	r3, #2
 800104c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001050:	2301      	movs	r3, #1
 8001052:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001056:	2302      	movs	r3, #2
 8001058:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800105c:	2307      	movs	r3, #7
 800105e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001062:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001066:	4619      	mov	r1, r3
 8001068:	4809      	ldr	r0, [pc, #36]	@ (8001090 <HAL_UART_MspInit+0xe0>)
 800106a:	f000 ffff 	bl	800206c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800106e:	2200      	movs	r2, #0
 8001070:	2100      	movs	r1, #0
 8001072:	2025      	movs	r0, #37	@ 0x25
 8001074:	f000 f9e9 	bl	800144a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001078:	2025      	movs	r0, #37	@ 0x25
 800107a:	f000 fa00 	bl	800147e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800107e:	bf00      	nop
 8001080:	37e8      	adds	r7, #232	@ 0xe8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40011000 	.word	0x40011000
 800108c:	58024400 	.word	0x58024400
 8001090:	58020000 	.word	0x58020000

08001094 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

/* printf重定向 */
PUTCHAR_PROTOTYPE
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800109c:	1d39      	adds	r1, r7, #4
 800109e:	f04f 33ff 	mov.w	r3, #4294967295
 80010a2:	2201      	movs	r2, #1
 80010a4:	4803      	ldr	r0, [pc, #12]	@ (80010b4 <__io_putchar+0x20>)
 80010a6:	f005 fa5d 	bl	8006564 <HAL_UART_Transmit>
    return ch;
 80010aa:	687b      	ldr	r3, [r7, #4]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	24000124 	.word	0x24000124

080010b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80010b8:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80010f4 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80010bc:	f7ff fe16 	bl	8000cec <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80010c0:	f7ff fd74 	bl	8000bac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010c4:	480c      	ldr	r0, [pc, #48]	@ (80010f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010c6:	490d      	ldr	r1, [pc, #52]	@ (80010fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001100 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010cc:	e002      	b.n	80010d4 <LoopCopyDataInit>

080010ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010d2:	3304      	adds	r3, #4

080010d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010d8:	d3f9      	bcc.n	80010ce <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010da:	4a0a      	ldr	r2, [pc, #40]	@ (8001104 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010dc:	4c0a      	ldr	r4, [pc, #40]	@ (8001108 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010e0:	e001      	b.n	80010e6 <LoopFillZerobss>

080010e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010e4:	3204      	adds	r2, #4

080010e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010e8:	d3fb      	bcc.n	80010e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010ea:	f007 fa1b 	bl	8008524 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010ee:	f7ff fb5b 	bl	80007a8 <main>
  bx  lr
 80010f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010f4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80010f8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80010fc:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8001100:	08008a54 	.word	0x08008a54
  ldr r2, =_sbss
 8001104:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 8001108:	2400031c 	.word	0x2400031c

0800110c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800110c:	e7fe      	b.n	800110c <ADC3_IRQHandler>
	...

08001110 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001116:	2003      	movs	r0, #3
 8001118:	f000 f98c 	bl	8001434 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800111c:	f001 ffde 	bl	80030dc <HAL_RCC_GetSysClockFreq>
 8001120:	4602      	mov	r2, r0
 8001122:	4b15      	ldr	r3, [pc, #84]	@ (8001178 <HAL_Init+0x68>)
 8001124:	699b      	ldr	r3, [r3, #24]
 8001126:	0a1b      	lsrs	r3, r3, #8
 8001128:	f003 030f 	and.w	r3, r3, #15
 800112c:	4913      	ldr	r1, [pc, #76]	@ (800117c <HAL_Init+0x6c>)
 800112e:	5ccb      	ldrb	r3, [r1, r3]
 8001130:	f003 031f 	and.w	r3, r3, #31
 8001134:	fa22 f303 	lsr.w	r3, r2, r3
 8001138:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800113a:	4b0f      	ldr	r3, [pc, #60]	@ (8001178 <HAL_Init+0x68>)
 800113c:	699b      	ldr	r3, [r3, #24]
 800113e:	f003 030f 	and.w	r3, r3, #15
 8001142:	4a0e      	ldr	r2, [pc, #56]	@ (800117c <HAL_Init+0x6c>)
 8001144:	5cd3      	ldrb	r3, [r2, r3]
 8001146:	f003 031f 	and.w	r3, r3, #31
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	fa22 f303 	lsr.w	r3, r2, r3
 8001150:	4a0b      	ldr	r2, [pc, #44]	@ (8001180 <HAL_Init+0x70>)
 8001152:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001154:	4a0b      	ldr	r2, [pc, #44]	@ (8001184 <HAL_Init+0x74>)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800115a:	200f      	movs	r0, #15
 800115c:	f000 f814 	bl	8001188 <HAL_InitTick>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e002      	b.n	8001170 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800116a:	f7ff fc01 	bl	8000970 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800116e:	2300      	movs	r3, #0
}
 8001170:	4618      	mov	r0, r3
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	58024400 	.word	0x58024400
 800117c:	08008a0c 	.word	0x08008a0c
 8001180:	24000004 	.word	0x24000004
 8001184:	24000000 	.word	0x24000000

08001188 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001190:	4b15      	ldr	r3, [pc, #84]	@ (80011e8 <HAL_InitTick+0x60>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d101      	bne.n	800119c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	e021      	b.n	80011e0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800119c:	4b13      	ldr	r3, [pc, #76]	@ (80011ec <HAL_InitTick+0x64>)
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	4b11      	ldr	r3, [pc, #68]	@ (80011e8 <HAL_InitTick+0x60>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	4619      	mov	r1, r3
 80011a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80011b2:	4618      	mov	r0, r3
 80011b4:	f000 f971 	bl	800149a <HAL_SYSTICK_Config>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e00e      	b.n	80011e0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2b0f      	cmp	r3, #15
 80011c6:	d80a      	bhi.n	80011de <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011c8:	2200      	movs	r2, #0
 80011ca:	6879      	ldr	r1, [r7, #4]
 80011cc:	f04f 30ff 	mov.w	r0, #4294967295
 80011d0:	f000 f93b 	bl	800144a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011d4:	4a06      	ldr	r2, [pc, #24]	@ (80011f0 <HAL_InitTick+0x68>)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011da:	2300      	movs	r3, #0
 80011dc:	e000      	b.n	80011e0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	2400000c 	.word	0x2400000c
 80011ec:	24000000 	.word	0x24000000
 80011f0:	24000008 	.word	0x24000008

080011f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011f8:	4b06      	ldr	r3, [pc, #24]	@ (8001214 <HAL_IncTick+0x20>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	461a      	mov	r2, r3
 80011fe:	4b06      	ldr	r3, [pc, #24]	@ (8001218 <HAL_IncTick+0x24>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4413      	add	r3, r2
 8001204:	4a04      	ldr	r2, [pc, #16]	@ (8001218 <HAL_IncTick+0x24>)
 8001206:	6013      	str	r3, [r2, #0]
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	2400000c 	.word	0x2400000c
 8001218:	240001cc 	.word	0x240001cc

0800121c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  return uwTick;
 8001220:	4b03      	ldr	r3, [pc, #12]	@ (8001230 <HAL_GetTick+0x14>)
 8001222:	681b      	ldr	r3, [r3, #0]
}
 8001224:	4618      	mov	r0, r3
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	240001cc 	.word	0x240001cc

08001234 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800123c:	f7ff ffee 	bl	800121c <HAL_GetTick>
 8001240:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800124c:	d005      	beq.n	800125a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800124e:	4b0a      	ldr	r3, [pc, #40]	@ (8001278 <HAL_Delay+0x44>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	461a      	mov	r2, r3
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	4413      	add	r3, r2
 8001258:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800125a:	bf00      	nop
 800125c:	f7ff ffde 	bl	800121c <HAL_GetTick>
 8001260:	4602      	mov	r2, r0
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	68fa      	ldr	r2, [r7, #12]
 8001268:	429a      	cmp	r2, r3
 800126a:	d8f7      	bhi.n	800125c <HAL_Delay+0x28>
  {
  }
}
 800126c:	bf00      	nop
 800126e:	bf00      	nop
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	2400000c 	.word	0x2400000c

0800127c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001280:	4b03      	ldr	r3, [pc, #12]	@ (8001290 <HAL_GetREVID+0x14>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	0c1b      	lsrs	r3, r3, #16
}
 8001286:	4618      	mov	r0, r3
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	5c001000 	.word	0x5c001000

08001294 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001294:	b480      	push	{r7}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f003 0307 	and.w	r3, r3, #7
 80012a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012a4:	4b0b      	ldr	r3, [pc, #44]	@ (80012d4 <__NVIC_SetPriorityGrouping+0x40>)
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012aa:	68ba      	ldr	r2, [r7, #8]
 80012ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012b0:	4013      	ands	r3, r2
 80012b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80012bc:	4b06      	ldr	r3, [pc, #24]	@ (80012d8 <__NVIC_SetPriorityGrouping+0x44>)
 80012be:	4313      	orrs	r3, r2
 80012c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012c2:	4a04      	ldr	r2, [pc, #16]	@ (80012d4 <__NVIC_SetPriorityGrouping+0x40>)
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	60d3      	str	r3, [r2, #12]
}
 80012c8:	bf00      	nop
 80012ca:	3714      	adds	r7, #20
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr
 80012d4:	e000ed00 	.word	0xe000ed00
 80012d8:	05fa0000 	.word	0x05fa0000

080012dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012e0:	4b04      	ldr	r3, [pc, #16]	@ (80012f4 <__NVIC_GetPriorityGrouping+0x18>)
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	0a1b      	lsrs	r3, r3, #8
 80012e6:	f003 0307 	and.w	r3, r3, #7
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	e000ed00 	.word	0xe000ed00

080012f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001302:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001306:	2b00      	cmp	r3, #0
 8001308:	db0b      	blt.n	8001322 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800130a:	88fb      	ldrh	r3, [r7, #6]
 800130c:	f003 021f 	and.w	r2, r3, #31
 8001310:	4907      	ldr	r1, [pc, #28]	@ (8001330 <__NVIC_EnableIRQ+0x38>)
 8001312:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001316:	095b      	lsrs	r3, r3, #5
 8001318:	2001      	movs	r0, #1
 800131a:	fa00 f202 	lsl.w	r2, r0, r2
 800131e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001322:	bf00      	nop
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	e000e100 	.word	0xe000e100

08001334 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	6039      	str	r1, [r7, #0]
 800133e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001340:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001344:	2b00      	cmp	r3, #0
 8001346:	db0a      	blt.n	800135e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	b2da      	uxtb	r2, r3
 800134c:	490c      	ldr	r1, [pc, #48]	@ (8001380 <__NVIC_SetPriority+0x4c>)
 800134e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001352:	0112      	lsls	r2, r2, #4
 8001354:	b2d2      	uxtb	r2, r2
 8001356:	440b      	add	r3, r1
 8001358:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800135c:	e00a      	b.n	8001374 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	b2da      	uxtb	r2, r3
 8001362:	4908      	ldr	r1, [pc, #32]	@ (8001384 <__NVIC_SetPriority+0x50>)
 8001364:	88fb      	ldrh	r3, [r7, #6]
 8001366:	f003 030f 	and.w	r3, r3, #15
 800136a:	3b04      	subs	r3, #4
 800136c:	0112      	lsls	r2, r2, #4
 800136e:	b2d2      	uxtb	r2, r2
 8001370:	440b      	add	r3, r1
 8001372:	761a      	strb	r2, [r3, #24]
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	e000e100 	.word	0xe000e100
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001388:	b480      	push	{r7}
 800138a:	b089      	sub	sp, #36	@ 0x24
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f003 0307 	and.w	r3, r3, #7
 800139a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	f1c3 0307 	rsb	r3, r3, #7
 80013a2:	2b04      	cmp	r3, #4
 80013a4:	bf28      	it	cs
 80013a6:	2304      	movcs	r3, #4
 80013a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	3304      	adds	r3, #4
 80013ae:	2b06      	cmp	r3, #6
 80013b0:	d902      	bls.n	80013b8 <NVIC_EncodePriority+0x30>
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	3b03      	subs	r3, #3
 80013b6:	e000      	b.n	80013ba <NVIC_EncodePriority+0x32>
 80013b8:	2300      	movs	r3, #0
 80013ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013bc:	f04f 32ff 	mov.w	r2, #4294967295
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	43da      	mvns	r2, r3
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	401a      	ands	r2, r3
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013d0:	f04f 31ff 	mov.w	r1, #4294967295
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	fa01 f303 	lsl.w	r3, r1, r3
 80013da:	43d9      	mvns	r1, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e0:	4313      	orrs	r3, r2
         );
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3724      	adds	r7, #36	@ 0x24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
	...

080013f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	3b01      	subs	r3, #1
 80013fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001400:	d301      	bcc.n	8001406 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001402:	2301      	movs	r3, #1
 8001404:	e00f      	b.n	8001426 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001406:	4a0a      	ldr	r2, [pc, #40]	@ (8001430 <SysTick_Config+0x40>)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	3b01      	subs	r3, #1
 800140c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800140e:	210f      	movs	r1, #15
 8001410:	f04f 30ff 	mov.w	r0, #4294967295
 8001414:	f7ff ff8e 	bl	8001334 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001418:	4b05      	ldr	r3, [pc, #20]	@ (8001430 <SysTick_Config+0x40>)
 800141a:	2200      	movs	r2, #0
 800141c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800141e:	4b04      	ldr	r3, [pc, #16]	@ (8001430 <SysTick_Config+0x40>)
 8001420:	2207      	movs	r2, #7
 8001422:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	e000e010 	.word	0xe000e010

08001434 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f7ff ff29 	bl	8001294 <__NVIC_SetPriorityGrouping>
}
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b086      	sub	sp, #24
 800144e:	af00      	add	r7, sp, #0
 8001450:	4603      	mov	r3, r0
 8001452:	60b9      	str	r1, [r7, #8]
 8001454:	607a      	str	r2, [r7, #4]
 8001456:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001458:	f7ff ff40 	bl	80012dc <__NVIC_GetPriorityGrouping>
 800145c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	68b9      	ldr	r1, [r7, #8]
 8001462:	6978      	ldr	r0, [r7, #20]
 8001464:	f7ff ff90 	bl	8001388 <NVIC_EncodePriority>
 8001468:	4602      	mov	r2, r0
 800146a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800146e:	4611      	mov	r1, r2
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff ff5f 	bl	8001334 <__NVIC_SetPriority>
}
 8001476:	bf00      	nop
 8001478:	3718      	adds	r7, #24
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b082      	sub	sp, #8
 8001482:	af00      	add	r7, sp, #0
 8001484:	4603      	mov	r3, r0
 8001486:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001488:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff ff33 	bl	80012f8 <__NVIC_EnableIRQ>
}
 8001492:	bf00      	nop
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b082      	sub	sp, #8
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f7ff ffa4 	bl	80013f0 <SysTick_Config>
 80014a8:	4603      	mov	r3, r0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
	...

080014b4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80014b8:	f3bf 8f5f 	dmb	sy
}
 80014bc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80014be:	4b07      	ldr	r3, [pc, #28]	@ (80014dc <HAL_MPU_Disable+0x28>)
 80014c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014c2:	4a06      	ldr	r2, [pc, #24]	@ (80014dc <HAL_MPU_Disable+0x28>)
 80014c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014c8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80014ca:	4b05      	ldr	r3, [pc, #20]	@ (80014e0 <HAL_MPU_Disable+0x2c>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	605a      	str	r2, [r3, #4]
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	e000ed00 	.word	0xe000ed00
 80014e0:	e000ed90 	.word	0xe000ed90

080014e4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80014ec:	4a0b      	ldr	r2, [pc, #44]	@ (800151c <HAL_MPU_Enable+0x38>)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80014f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001520 <HAL_MPU_Enable+0x3c>)
 80014f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014fa:	4a09      	ldr	r2, [pc, #36]	@ (8001520 <HAL_MPU_Enable+0x3c>)
 80014fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001500:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001502:	f3bf 8f4f 	dsb	sy
}
 8001506:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001508:	f3bf 8f6f 	isb	sy
}
 800150c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	e000ed90 	.word	0xe000ed90
 8001520:	e000ed00 	.word	0xe000ed00

08001524 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	785a      	ldrb	r2, [r3, #1]
 8001530:	4b1b      	ldr	r3, [pc, #108]	@ (80015a0 <HAL_MPU_ConfigRegion+0x7c>)
 8001532:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001534:	4b1a      	ldr	r3, [pc, #104]	@ (80015a0 <HAL_MPU_ConfigRegion+0x7c>)
 8001536:	691b      	ldr	r3, [r3, #16]
 8001538:	4a19      	ldr	r2, [pc, #100]	@ (80015a0 <HAL_MPU_ConfigRegion+0x7c>)
 800153a:	f023 0301 	bic.w	r3, r3, #1
 800153e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001540:	4a17      	ldr	r2, [pc, #92]	@ (80015a0 <HAL_MPU_ConfigRegion+0x7c>)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	7b1b      	ldrb	r3, [r3, #12]
 800154c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	7adb      	ldrb	r3, [r3, #11]
 8001552:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001554:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	7a9b      	ldrb	r3, [r3, #10]
 800155a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800155c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	7b5b      	ldrb	r3, [r3, #13]
 8001562:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001564:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	7b9b      	ldrb	r3, [r3, #14]
 800156a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800156c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	7bdb      	ldrb	r3, [r3, #15]
 8001572:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001574:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	7a5b      	ldrb	r3, [r3, #9]
 800157a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800157c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	7a1b      	ldrb	r3, [r3, #8]
 8001582:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001584:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	7812      	ldrb	r2, [r2, #0]
 800158a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800158c:	4a04      	ldr	r2, [pc, #16]	@ (80015a0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800158e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001590:	6113      	str	r3, [r2, #16]
}
 8001592:	bf00      	nop
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	e000ed90 	.word	0xe000ed90

080015a4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80015ac:	f7ff fe36 	bl	800121c <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d101      	bne.n	80015bc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e2dc      	b.n	8001b76 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d008      	beq.n	80015da <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2280      	movs	r2, #128	@ 0x80
 80015cc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2200      	movs	r2, #0
 80015d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e2cd      	b.n	8001b76 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a76      	ldr	r2, [pc, #472]	@ (80017b8 <HAL_DMA_Abort+0x214>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d04a      	beq.n	800167a <HAL_DMA_Abort+0xd6>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a74      	ldr	r2, [pc, #464]	@ (80017bc <HAL_DMA_Abort+0x218>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d045      	beq.n	800167a <HAL_DMA_Abort+0xd6>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a73      	ldr	r2, [pc, #460]	@ (80017c0 <HAL_DMA_Abort+0x21c>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d040      	beq.n	800167a <HAL_DMA_Abort+0xd6>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a71      	ldr	r2, [pc, #452]	@ (80017c4 <HAL_DMA_Abort+0x220>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d03b      	beq.n	800167a <HAL_DMA_Abort+0xd6>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a70      	ldr	r2, [pc, #448]	@ (80017c8 <HAL_DMA_Abort+0x224>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d036      	beq.n	800167a <HAL_DMA_Abort+0xd6>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a6e      	ldr	r2, [pc, #440]	@ (80017cc <HAL_DMA_Abort+0x228>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d031      	beq.n	800167a <HAL_DMA_Abort+0xd6>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a6d      	ldr	r2, [pc, #436]	@ (80017d0 <HAL_DMA_Abort+0x22c>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d02c      	beq.n	800167a <HAL_DMA_Abort+0xd6>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a6b      	ldr	r2, [pc, #428]	@ (80017d4 <HAL_DMA_Abort+0x230>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d027      	beq.n	800167a <HAL_DMA_Abort+0xd6>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a6a      	ldr	r2, [pc, #424]	@ (80017d8 <HAL_DMA_Abort+0x234>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d022      	beq.n	800167a <HAL_DMA_Abort+0xd6>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a68      	ldr	r2, [pc, #416]	@ (80017dc <HAL_DMA_Abort+0x238>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d01d      	beq.n	800167a <HAL_DMA_Abort+0xd6>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a67      	ldr	r2, [pc, #412]	@ (80017e0 <HAL_DMA_Abort+0x23c>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d018      	beq.n	800167a <HAL_DMA_Abort+0xd6>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a65      	ldr	r2, [pc, #404]	@ (80017e4 <HAL_DMA_Abort+0x240>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d013      	beq.n	800167a <HAL_DMA_Abort+0xd6>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a64      	ldr	r2, [pc, #400]	@ (80017e8 <HAL_DMA_Abort+0x244>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d00e      	beq.n	800167a <HAL_DMA_Abort+0xd6>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a62      	ldr	r2, [pc, #392]	@ (80017ec <HAL_DMA_Abort+0x248>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d009      	beq.n	800167a <HAL_DMA_Abort+0xd6>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a61      	ldr	r2, [pc, #388]	@ (80017f0 <HAL_DMA_Abort+0x24c>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d004      	beq.n	800167a <HAL_DMA_Abort+0xd6>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a5f      	ldr	r2, [pc, #380]	@ (80017f4 <HAL_DMA_Abort+0x250>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d101      	bne.n	800167e <HAL_DMA_Abort+0xda>
 800167a:	2301      	movs	r3, #1
 800167c:	e000      	b.n	8001680 <HAL_DMA_Abort+0xdc>
 800167e:	2300      	movs	r3, #0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d013      	beq.n	80016ac <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f022 021e 	bic.w	r2, r2, #30
 8001692:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	695a      	ldr	r2, [r3, #20]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80016a2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	617b      	str	r3, [r7, #20]
 80016aa:	e00a      	b.n	80016c2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f022 020e 	bic.w	r2, r2, #14
 80016ba:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a3c      	ldr	r2, [pc, #240]	@ (80017b8 <HAL_DMA_Abort+0x214>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d072      	beq.n	80017b2 <HAL_DMA_Abort+0x20e>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a3a      	ldr	r2, [pc, #232]	@ (80017bc <HAL_DMA_Abort+0x218>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d06d      	beq.n	80017b2 <HAL_DMA_Abort+0x20e>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a39      	ldr	r2, [pc, #228]	@ (80017c0 <HAL_DMA_Abort+0x21c>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d068      	beq.n	80017b2 <HAL_DMA_Abort+0x20e>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a37      	ldr	r2, [pc, #220]	@ (80017c4 <HAL_DMA_Abort+0x220>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d063      	beq.n	80017b2 <HAL_DMA_Abort+0x20e>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a36      	ldr	r2, [pc, #216]	@ (80017c8 <HAL_DMA_Abort+0x224>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d05e      	beq.n	80017b2 <HAL_DMA_Abort+0x20e>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a34      	ldr	r2, [pc, #208]	@ (80017cc <HAL_DMA_Abort+0x228>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d059      	beq.n	80017b2 <HAL_DMA_Abort+0x20e>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a33      	ldr	r2, [pc, #204]	@ (80017d0 <HAL_DMA_Abort+0x22c>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d054      	beq.n	80017b2 <HAL_DMA_Abort+0x20e>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a31      	ldr	r2, [pc, #196]	@ (80017d4 <HAL_DMA_Abort+0x230>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d04f      	beq.n	80017b2 <HAL_DMA_Abort+0x20e>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a30      	ldr	r2, [pc, #192]	@ (80017d8 <HAL_DMA_Abort+0x234>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d04a      	beq.n	80017b2 <HAL_DMA_Abort+0x20e>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a2e      	ldr	r2, [pc, #184]	@ (80017dc <HAL_DMA_Abort+0x238>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d045      	beq.n	80017b2 <HAL_DMA_Abort+0x20e>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a2d      	ldr	r2, [pc, #180]	@ (80017e0 <HAL_DMA_Abort+0x23c>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d040      	beq.n	80017b2 <HAL_DMA_Abort+0x20e>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a2b      	ldr	r2, [pc, #172]	@ (80017e4 <HAL_DMA_Abort+0x240>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d03b      	beq.n	80017b2 <HAL_DMA_Abort+0x20e>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a2a      	ldr	r2, [pc, #168]	@ (80017e8 <HAL_DMA_Abort+0x244>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d036      	beq.n	80017b2 <HAL_DMA_Abort+0x20e>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a28      	ldr	r2, [pc, #160]	@ (80017ec <HAL_DMA_Abort+0x248>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d031      	beq.n	80017b2 <HAL_DMA_Abort+0x20e>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a27      	ldr	r2, [pc, #156]	@ (80017f0 <HAL_DMA_Abort+0x24c>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d02c      	beq.n	80017b2 <HAL_DMA_Abort+0x20e>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a25      	ldr	r2, [pc, #148]	@ (80017f4 <HAL_DMA_Abort+0x250>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d027      	beq.n	80017b2 <HAL_DMA_Abort+0x20e>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a24      	ldr	r2, [pc, #144]	@ (80017f8 <HAL_DMA_Abort+0x254>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d022      	beq.n	80017b2 <HAL_DMA_Abort+0x20e>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a22      	ldr	r2, [pc, #136]	@ (80017fc <HAL_DMA_Abort+0x258>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d01d      	beq.n	80017b2 <HAL_DMA_Abort+0x20e>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a21      	ldr	r2, [pc, #132]	@ (8001800 <HAL_DMA_Abort+0x25c>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d018      	beq.n	80017b2 <HAL_DMA_Abort+0x20e>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a1f      	ldr	r2, [pc, #124]	@ (8001804 <HAL_DMA_Abort+0x260>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d013      	beq.n	80017b2 <HAL_DMA_Abort+0x20e>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a1e      	ldr	r2, [pc, #120]	@ (8001808 <HAL_DMA_Abort+0x264>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d00e      	beq.n	80017b2 <HAL_DMA_Abort+0x20e>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a1c      	ldr	r2, [pc, #112]	@ (800180c <HAL_DMA_Abort+0x268>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d009      	beq.n	80017b2 <HAL_DMA_Abort+0x20e>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a1b      	ldr	r2, [pc, #108]	@ (8001810 <HAL_DMA_Abort+0x26c>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d004      	beq.n	80017b2 <HAL_DMA_Abort+0x20e>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a19      	ldr	r2, [pc, #100]	@ (8001814 <HAL_DMA_Abort+0x270>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d132      	bne.n	8001818 <HAL_DMA_Abort+0x274>
 80017b2:	2301      	movs	r3, #1
 80017b4:	e031      	b.n	800181a <HAL_DMA_Abort+0x276>
 80017b6:	bf00      	nop
 80017b8:	40020010 	.word	0x40020010
 80017bc:	40020028 	.word	0x40020028
 80017c0:	40020040 	.word	0x40020040
 80017c4:	40020058 	.word	0x40020058
 80017c8:	40020070 	.word	0x40020070
 80017cc:	40020088 	.word	0x40020088
 80017d0:	400200a0 	.word	0x400200a0
 80017d4:	400200b8 	.word	0x400200b8
 80017d8:	40020410 	.word	0x40020410
 80017dc:	40020428 	.word	0x40020428
 80017e0:	40020440 	.word	0x40020440
 80017e4:	40020458 	.word	0x40020458
 80017e8:	40020470 	.word	0x40020470
 80017ec:	40020488 	.word	0x40020488
 80017f0:	400204a0 	.word	0x400204a0
 80017f4:	400204b8 	.word	0x400204b8
 80017f8:	58025408 	.word	0x58025408
 80017fc:	5802541c 	.word	0x5802541c
 8001800:	58025430 	.word	0x58025430
 8001804:	58025444 	.word	0x58025444
 8001808:	58025458 	.word	0x58025458
 800180c:	5802546c 	.word	0x5802546c
 8001810:	58025480 	.word	0x58025480
 8001814:	58025494 	.word	0x58025494
 8001818:	2300      	movs	r3, #0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d007      	beq.n	800182e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001828:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800182c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a6d      	ldr	r2, [pc, #436]	@ (80019e8 <HAL_DMA_Abort+0x444>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d04a      	beq.n	80018ce <HAL_DMA_Abort+0x32a>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a6b      	ldr	r2, [pc, #428]	@ (80019ec <HAL_DMA_Abort+0x448>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d045      	beq.n	80018ce <HAL_DMA_Abort+0x32a>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a6a      	ldr	r2, [pc, #424]	@ (80019f0 <HAL_DMA_Abort+0x44c>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d040      	beq.n	80018ce <HAL_DMA_Abort+0x32a>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a68      	ldr	r2, [pc, #416]	@ (80019f4 <HAL_DMA_Abort+0x450>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d03b      	beq.n	80018ce <HAL_DMA_Abort+0x32a>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a67      	ldr	r2, [pc, #412]	@ (80019f8 <HAL_DMA_Abort+0x454>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d036      	beq.n	80018ce <HAL_DMA_Abort+0x32a>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a65      	ldr	r2, [pc, #404]	@ (80019fc <HAL_DMA_Abort+0x458>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d031      	beq.n	80018ce <HAL_DMA_Abort+0x32a>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a64      	ldr	r2, [pc, #400]	@ (8001a00 <HAL_DMA_Abort+0x45c>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d02c      	beq.n	80018ce <HAL_DMA_Abort+0x32a>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a62      	ldr	r2, [pc, #392]	@ (8001a04 <HAL_DMA_Abort+0x460>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d027      	beq.n	80018ce <HAL_DMA_Abort+0x32a>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a61      	ldr	r2, [pc, #388]	@ (8001a08 <HAL_DMA_Abort+0x464>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d022      	beq.n	80018ce <HAL_DMA_Abort+0x32a>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a5f      	ldr	r2, [pc, #380]	@ (8001a0c <HAL_DMA_Abort+0x468>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d01d      	beq.n	80018ce <HAL_DMA_Abort+0x32a>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a5e      	ldr	r2, [pc, #376]	@ (8001a10 <HAL_DMA_Abort+0x46c>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d018      	beq.n	80018ce <HAL_DMA_Abort+0x32a>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a5c      	ldr	r2, [pc, #368]	@ (8001a14 <HAL_DMA_Abort+0x470>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d013      	beq.n	80018ce <HAL_DMA_Abort+0x32a>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a5b      	ldr	r2, [pc, #364]	@ (8001a18 <HAL_DMA_Abort+0x474>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d00e      	beq.n	80018ce <HAL_DMA_Abort+0x32a>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a59      	ldr	r2, [pc, #356]	@ (8001a1c <HAL_DMA_Abort+0x478>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d009      	beq.n	80018ce <HAL_DMA_Abort+0x32a>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a58      	ldr	r2, [pc, #352]	@ (8001a20 <HAL_DMA_Abort+0x47c>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d004      	beq.n	80018ce <HAL_DMA_Abort+0x32a>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a56      	ldr	r2, [pc, #344]	@ (8001a24 <HAL_DMA_Abort+0x480>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d108      	bne.n	80018e0 <HAL_DMA_Abort+0x33c>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f022 0201 	bic.w	r2, r2, #1
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	e007      	b.n	80018f0 <HAL_DMA_Abort+0x34c>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f022 0201 	bic.w	r2, r2, #1
 80018ee:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80018f0:	e013      	b.n	800191a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018f2:	f7ff fc93 	bl	800121c <HAL_GetTick>
 80018f6:	4602      	mov	r2, r0
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	2b05      	cmp	r3, #5
 80018fe:	d90c      	bls.n	800191a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2220      	movs	r2, #32
 8001904:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2203      	movs	r2, #3
 800190a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e12d      	b.n	8001b76 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1e5      	bne.n	80018f2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a2f      	ldr	r2, [pc, #188]	@ (80019e8 <HAL_DMA_Abort+0x444>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d04a      	beq.n	80019c6 <HAL_DMA_Abort+0x422>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a2d      	ldr	r2, [pc, #180]	@ (80019ec <HAL_DMA_Abort+0x448>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d045      	beq.n	80019c6 <HAL_DMA_Abort+0x422>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a2c      	ldr	r2, [pc, #176]	@ (80019f0 <HAL_DMA_Abort+0x44c>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d040      	beq.n	80019c6 <HAL_DMA_Abort+0x422>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a2a      	ldr	r2, [pc, #168]	@ (80019f4 <HAL_DMA_Abort+0x450>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d03b      	beq.n	80019c6 <HAL_DMA_Abort+0x422>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a29      	ldr	r2, [pc, #164]	@ (80019f8 <HAL_DMA_Abort+0x454>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d036      	beq.n	80019c6 <HAL_DMA_Abort+0x422>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a27      	ldr	r2, [pc, #156]	@ (80019fc <HAL_DMA_Abort+0x458>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d031      	beq.n	80019c6 <HAL_DMA_Abort+0x422>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a26      	ldr	r2, [pc, #152]	@ (8001a00 <HAL_DMA_Abort+0x45c>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d02c      	beq.n	80019c6 <HAL_DMA_Abort+0x422>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a24      	ldr	r2, [pc, #144]	@ (8001a04 <HAL_DMA_Abort+0x460>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d027      	beq.n	80019c6 <HAL_DMA_Abort+0x422>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a23      	ldr	r2, [pc, #140]	@ (8001a08 <HAL_DMA_Abort+0x464>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d022      	beq.n	80019c6 <HAL_DMA_Abort+0x422>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a21      	ldr	r2, [pc, #132]	@ (8001a0c <HAL_DMA_Abort+0x468>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d01d      	beq.n	80019c6 <HAL_DMA_Abort+0x422>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a20      	ldr	r2, [pc, #128]	@ (8001a10 <HAL_DMA_Abort+0x46c>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d018      	beq.n	80019c6 <HAL_DMA_Abort+0x422>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a1e      	ldr	r2, [pc, #120]	@ (8001a14 <HAL_DMA_Abort+0x470>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d013      	beq.n	80019c6 <HAL_DMA_Abort+0x422>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a1d      	ldr	r2, [pc, #116]	@ (8001a18 <HAL_DMA_Abort+0x474>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d00e      	beq.n	80019c6 <HAL_DMA_Abort+0x422>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a1b      	ldr	r2, [pc, #108]	@ (8001a1c <HAL_DMA_Abort+0x478>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d009      	beq.n	80019c6 <HAL_DMA_Abort+0x422>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a1a      	ldr	r2, [pc, #104]	@ (8001a20 <HAL_DMA_Abort+0x47c>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d004      	beq.n	80019c6 <HAL_DMA_Abort+0x422>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a18      	ldr	r2, [pc, #96]	@ (8001a24 <HAL_DMA_Abort+0x480>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d101      	bne.n	80019ca <HAL_DMA_Abort+0x426>
 80019c6:	2301      	movs	r3, #1
 80019c8:	e000      	b.n	80019cc <HAL_DMA_Abort+0x428>
 80019ca:	2300      	movs	r3, #0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d02b      	beq.n	8001a28 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019d4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019da:	f003 031f 	and.w	r3, r3, #31
 80019de:	223f      	movs	r2, #63	@ 0x3f
 80019e0:	409a      	lsls	r2, r3
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	609a      	str	r2, [r3, #8]
 80019e6:	e02a      	b.n	8001a3e <HAL_DMA_Abort+0x49a>
 80019e8:	40020010 	.word	0x40020010
 80019ec:	40020028 	.word	0x40020028
 80019f0:	40020040 	.word	0x40020040
 80019f4:	40020058 	.word	0x40020058
 80019f8:	40020070 	.word	0x40020070
 80019fc:	40020088 	.word	0x40020088
 8001a00:	400200a0 	.word	0x400200a0
 8001a04:	400200b8 	.word	0x400200b8
 8001a08:	40020410 	.word	0x40020410
 8001a0c:	40020428 	.word	0x40020428
 8001a10:	40020440 	.word	0x40020440
 8001a14:	40020458 	.word	0x40020458
 8001a18:	40020470 	.word	0x40020470
 8001a1c:	40020488 	.word	0x40020488
 8001a20:	400204a0 	.word	0x400204a0
 8001a24:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a2c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a32:	f003 031f 	and.w	r3, r3, #31
 8001a36:	2201      	movs	r2, #1
 8001a38:	409a      	lsls	r2, r3
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a4f      	ldr	r2, [pc, #316]	@ (8001b80 <HAL_DMA_Abort+0x5dc>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d072      	beq.n	8001b2e <HAL_DMA_Abort+0x58a>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a4d      	ldr	r2, [pc, #308]	@ (8001b84 <HAL_DMA_Abort+0x5e0>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d06d      	beq.n	8001b2e <HAL_DMA_Abort+0x58a>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a4c      	ldr	r2, [pc, #304]	@ (8001b88 <HAL_DMA_Abort+0x5e4>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d068      	beq.n	8001b2e <HAL_DMA_Abort+0x58a>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a4a      	ldr	r2, [pc, #296]	@ (8001b8c <HAL_DMA_Abort+0x5e8>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d063      	beq.n	8001b2e <HAL_DMA_Abort+0x58a>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a49      	ldr	r2, [pc, #292]	@ (8001b90 <HAL_DMA_Abort+0x5ec>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d05e      	beq.n	8001b2e <HAL_DMA_Abort+0x58a>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a47      	ldr	r2, [pc, #284]	@ (8001b94 <HAL_DMA_Abort+0x5f0>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d059      	beq.n	8001b2e <HAL_DMA_Abort+0x58a>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a46      	ldr	r2, [pc, #280]	@ (8001b98 <HAL_DMA_Abort+0x5f4>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d054      	beq.n	8001b2e <HAL_DMA_Abort+0x58a>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a44      	ldr	r2, [pc, #272]	@ (8001b9c <HAL_DMA_Abort+0x5f8>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d04f      	beq.n	8001b2e <HAL_DMA_Abort+0x58a>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a43      	ldr	r2, [pc, #268]	@ (8001ba0 <HAL_DMA_Abort+0x5fc>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d04a      	beq.n	8001b2e <HAL_DMA_Abort+0x58a>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a41      	ldr	r2, [pc, #260]	@ (8001ba4 <HAL_DMA_Abort+0x600>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d045      	beq.n	8001b2e <HAL_DMA_Abort+0x58a>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a40      	ldr	r2, [pc, #256]	@ (8001ba8 <HAL_DMA_Abort+0x604>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d040      	beq.n	8001b2e <HAL_DMA_Abort+0x58a>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a3e      	ldr	r2, [pc, #248]	@ (8001bac <HAL_DMA_Abort+0x608>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d03b      	beq.n	8001b2e <HAL_DMA_Abort+0x58a>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a3d      	ldr	r2, [pc, #244]	@ (8001bb0 <HAL_DMA_Abort+0x60c>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d036      	beq.n	8001b2e <HAL_DMA_Abort+0x58a>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a3b      	ldr	r2, [pc, #236]	@ (8001bb4 <HAL_DMA_Abort+0x610>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d031      	beq.n	8001b2e <HAL_DMA_Abort+0x58a>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a3a      	ldr	r2, [pc, #232]	@ (8001bb8 <HAL_DMA_Abort+0x614>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d02c      	beq.n	8001b2e <HAL_DMA_Abort+0x58a>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a38      	ldr	r2, [pc, #224]	@ (8001bbc <HAL_DMA_Abort+0x618>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d027      	beq.n	8001b2e <HAL_DMA_Abort+0x58a>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a37      	ldr	r2, [pc, #220]	@ (8001bc0 <HAL_DMA_Abort+0x61c>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d022      	beq.n	8001b2e <HAL_DMA_Abort+0x58a>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a35      	ldr	r2, [pc, #212]	@ (8001bc4 <HAL_DMA_Abort+0x620>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d01d      	beq.n	8001b2e <HAL_DMA_Abort+0x58a>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a34      	ldr	r2, [pc, #208]	@ (8001bc8 <HAL_DMA_Abort+0x624>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d018      	beq.n	8001b2e <HAL_DMA_Abort+0x58a>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a32      	ldr	r2, [pc, #200]	@ (8001bcc <HAL_DMA_Abort+0x628>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d013      	beq.n	8001b2e <HAL_DMA_Abort+0x58a>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a31      	ldr	r2, [pc, #196]	@ (8001bd0 <HAL_DMA_Abort+0x62c>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d00e      	beq.n	8001b2e <HAL_DMA_Abort+0x58a>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a2f      	ldr	r2, [pc, #188]	@ (8001bd4 <HAL_DMA_Abort+0x630>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d009      	beq.n	8001b2e <HAL_DMA_Abort+0x58a>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a2e      	ldr	r2, [pc, #184]	@ (8001bd8 <HAL_DMA_Abort+0x634>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d004      	beq.n	8001b2e <HAL_DMA_Abort+0x58a>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a2c      	ldr	r2, [pc, #176]	@ (8001bdc <HAL_DMA_Abort+0x638>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d101      	bne.n	8001b32 <HAL_DMA_Abort+0x58e>
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e000      	b.n	8001b34 <HAL_DMA_Abort+0x590>
 8001b32:	2300      	movs	r3, #0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d015      	beq.n	8001b64 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001b40:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d00c      	beq.n	8001b64 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001b54:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001b58:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001b62:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3718      	adds	r7, #24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40020010 	.word	0x40020010
 8001b84:	40020028 	.word	0x40020028
 8001b88:	40020040 	.word	0x40020040
 8001b8c:	40020058 	.word	0x40020058
 8001b90:	40020070 	.word	0x40020070
 8001b94:	40020088 	.word	0x40020088
 8001b98:	400200a0 	.word	0x400200a0
 8001b9c:	400200b8 	.word	0x400200b8
 8001ba0:	40020410 	.word	0x40020410
 8001ba4:	40020428 	.word	0x40020428
 8001ba8:	40020440 	.word	0x40020440
 8001bac:	40020458 	.word	0x40020458
 8001bb0:	40020470 	.word	0x40020470
 8001bb4:	40020488 	.word	0x40020488
 8001bb8:	400204a0 	.word	0x400204a0
 8001bbc:	400204b8 	.word	0x400204b8
 8001bc0:	58025408 	.word	0x58025408
 8001bc4:	5802541c 	.word	0x5802541c
 8001bc8:	58025430 	.word	0x58025430
 8001bcc:	58025444 	.word	0x58025444
 8001bd0:	58025458 	.word	0x58025458
 8001bd4:	5802546c 	.word	0x5802546c
 8001bd8:	58025480 	.word	0x58025480
 8001bdc:	58025494 	.word	0x58025494

08001be0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d101      	bne.n	8001bf2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e237      	b.n	8002062 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d004      	beq.n	8001c08 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2280      	movs	r2, #128	@ 0x80
 8001c02:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e22c      	b.n	8002062 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a5c      	ldr	r2, [pc, #368]	@ (8001d80 <HAL_DMA_Abort_IT+0x1a0>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d04a      	beq.n	8001ca8 <HAL_DMA_Abort_IT+0xc8>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a5b      	ldr	r2, [pc, #364]	@ (8001d84 <HAL_DMA_Abort_IT+0x1a4>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d045      	beq.n	8001ca8 <HAL_DMA_Abort_IT+0xc8>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a59      	ldr	r2, [pc, #356]	@ (8001d88 <HAL_DMA_Abort_IT+0x1a8>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d040      	beq.n	8001ca8 <HAL_DMA_Abort_IT+0xc8>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a58      	ldr	r2, [pc, #352]	@ (8001d8c <HAL_DMA_Abort_IT+0x1ac>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d03b      	beq.n	8001ca8 <HAL_DMA_Abort_IT+0xc8>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a56      	ldr	r2, [pc, #344]	@ (8001d90 <HAL_DMA_Abort_IT+0x1b0>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d036      	beq.n	8001ca8 <HAL_DMA_Abort_IT+0xc8>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a55      	ldr	r2, [pc, #340]	@ (8001d94 <HAL_DMA_Abort_IT+0x1b4>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d031      	beq.n	8001ca8 <HAL_DMA_Abort_IT+0xc8>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a53      	ldr	r2, [pc, #332]	@ (8001d98 <HAL_DMA_Abort_IT+0x1b8>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d02c      	beq.n	8001ca8 <HAL_DMA_Abort_IT+0xc8>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a52      	ldr	r2, [pc, #328]	@ (8001d9c <HAL_DMA_Abort_IT+0x1bc>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d027      	beq.n	8001ca8 <HAL_DMA_Abort_IT+0xc8>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a50      	ldr	r2, [pc, #320]	@ (8001da0 <HAL_DMA_Abort_IT+0x1c0>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d022      	beq.n	8001ca8 <HAL_DMA_Abort_IT+0xc8>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a4f      	ldr	r2, [pc, #316]	@ (8001da4 <HAL_DMA_Abort_IT+0x1c4>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d01d      	beq.n	8001ca8 <HAL_DMA_Abort_IT+0xc8>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a4d      	ldr	r2, [pc, #308]	@ (8001da8 <HAL_DMA_Abort_IT+0x1c8>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d018      	beq.n	8001ca8 <HAL_DMA_Abort_IT+0xc8>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a4c      	ldr	r2, [pc, #304]	@ (8001dac <HAL_DMA_Abort_IT+0x1cc>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d013      	beq.n	8001ca8 <HAL_DMA_Abort_IT+0xc8>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a4a      	ldr	r2, [pc, #296]	@ (8001db0 <HAL_DMA_Abort_IT+0x1d0>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d00e      	beq.n	8001ca8 <HAL_DMA_Abort_IT+0xc8>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a49      	ldr	r2, [pc, #292]	@ (8001db4 <HAL_DMA_Abort_IT+0x1d4>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d009      	beq.n	8001ca8 <HAL_DMA_Abort_IT+0xc8>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a47      	ldr	r2, [pc, #284]	@ (8001db8 <HAL_DMA_Abort_IT+0x1d8>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d004      	beq.n	8001ca8 <HAL_DMA_Abort_IT+0xc8>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a46      	ldr	r2, [pc, #280]	@ (8001dbc <HAL_DMA_Abort_IT+0x1dc>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d101      	bne.n	8001cac <HAL_DMA_Abort_IT+0xcc>
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e000      	b.n	8001cae <HAL_DMA_Abort_IT+0xce>
 8001cac:	2300      	movs	r3, #0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	f000 8086 	beq.w	8001dc0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2204      	movs	r2, #4
 8001cb8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a2f      	ldr	r2, [pc, #188]	@ (8001d80 <HAL_DMA_Abort_IT+0x1a0>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d04a      	beq.n	8001d5c <HAL_DMA_Abort_IT+0x17c>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a2e      	ldr	r2, [pc, #184]	@ (8001d84 <HAL_DMA_Abort_IT+0x1a4>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d045      	beq.n	8001d5c <HAL_DMA_Abort_IT+0x17c>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a2c      	ldr	r2, [pc, #176]	@ (8001d88 <HAL_DMA_Abort_IT+0x1a8>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d040      	beq.n	8001d5c <HAL_DMA_Abort_IT+0x17c>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a2b      	ldr	r2, [pc, #172]	@ (8001d8c <HAL_DMA_Abort_IT+0x1ac>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d03b      	beq.n	8001d5c <HAL_DMA_Abort_IT+0x17c>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a29      	ldr	r2, [pc, #164]	@ (8001d90 <HAL_DMA_Abort_IT+0x1b0>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d036      	beq.n	8001d5c <HAL_DMA_Abort_IT+0x17c>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a28      	ldr	r2, [pc, #160]	@ (8001d94 <HAL_DMA_Abort_IT+0x1b4>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d031      	beq.n	8001d5c <HAL_DMA_Abort_IT+0x17c>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a26      	ldr	r2, [pc, #152]	@ (8001d98 <HAL_DMA_Abort_IT+0x1b8>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d02c      	beq.n	8001d5c <HAL_DMA_Abort_IT+0x17c>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a25      	ldr	r2, [pc, #148]	@ (8001d9c <HAL_DMA_Abort_IT+0x1bc>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d027      	beq.n	8001d5c <HAL_DMA_Abort_IT+0x17c>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a23      	ldr	r2, [pc, #140]	@ (8001da0 <HAL_DMA_Abort_IT+0x1c0>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d022      	beq.n	8001d5c <HAL_DMA_Abort_IT+0x17c>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a22      	ldr	r2, [pc, #136]	@ (8001da4 <HAL_DMA_Abort_IT+0x1c4>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d01d      	beq.n	8001d5c <HAL_DMA_Abort_IT+0x17c>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a20      	ldr	r2, [pc, #128]	@ (8001da8 <HAL_DMA_Abort_IT+0x1c8>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d018      	beq.n	8001d5c <HAL_DMA_Abort_IT+0x17c>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a1f      	ldr	r2, [pc, #124]	@ (8001dac <HAL_DMA_Abort_IT+0x1cc>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d013      	beq.n	8001d5c <HAL_DMA_Abort_IT+0x17c>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a1d      	ldr	r2, [pc, #116]	@ (8001db0 <HAL_DMA_Abort_IT+0x1d0>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d00e      	beq.n	8001d5c <HAL_DMA_Abort_IT+0x17c>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a1c      	ldr	r2, [pc, #112]	@ (8001db4 <HAL_DMA_Abort_IT+0x1d4>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d009      	beq.n	8001d5c <HAL_DMA_Abort_IT+0x17c>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a1a      	ldr	r2, [pc, #104]	@ (8001db8 <HAL_DMA_Abort_IT+0x1d8>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d004      	beq.n	8001d5c <HAL_DMA_Abort_IT+0x17c>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a19      	ldr	r2, [pc, #100]	@ (8001dbc <HAL_DMA_Abort_IT+0x1dc>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d108      	bne.n	8001d6e <HAL_DMA_Abort_IT+0x18e>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f022 0201 	bic.w	r2, r2, #1
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	e178      	b.n	8002060 <HAL_DMA_Abort_IT+0x480>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f022 0201 	bic.w	r2, r2, #1
 8001d7c:	601a      	str	r2, [r3, #0]
 8001d7e:	e16f      	b.n	8002060 <HAL_DMA_Abort_IT+0x480>
 8001d80:	40020010 	.word	0x40020010
 8001d84:	40020028 	.word	0x40020028
 8001d88:	40020040 	.word	0x40020040
 8001d8c:	40020058 	.word	0x40020058
 8001d90:	40020070 	.word	0x40020070
 8001d94:	40020088 	.word	0x40020088
 8001d98:	400200a0 	.word	0x400200a0
 8001d9c:	400200b8 	.word	0x400200b8
 8001da0:	40020410 	.word	0x40020410
 8001da4:	40020428 	.word	0x40020428
 8001da8:	40020440 	.word	0x40020440
 8001dac:	40020458 	.word	0x40020458
 8001db0:	40020470 	.word	0x40020470
 8001db4:	40020488 	.word	0x40020488
 8001db8:	400204a0 	.word	0x400204a0
 8001dbc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f022 020e 	bic.w	r2, r2, #14
 8001dce:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a6c      	ldr	r2, [pc, #432]	@ (8001f88 <HAL_DMA_Abort_IT+0x3a8>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d04a      	beq.n	8001e70 <HAL_DMA_Abort_IT+0x290>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a6b      	ldr	r2, [pc, #428]	@ (8001f8c <HAL_DMA_Abort_IT+0x3ac>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d045      	beq.n	8001e70 <HAL_DMA_Abort_IT+0x290>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a69      	ldr	r2, [pc, #420]	@ (8001f90 <HAL_DMA_Abort_IT+0x3b0>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d040      	beq.n	8001e70 <HAL_DMA_Abort_IT+0x290>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a68      	ldr	r2, [pc, #416]	@ (8001f94 <HAL_DMA_Abort_IT+0x3b4>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d03b      	beq.n	8001e70 <HAL_DMA_Abort_IT+0x290>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a66      	ldr	r2, [pc, #408]	@ (8001f98 <HAL_DMA_Abort_IT+0x3b8>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d036      	beq.n	8001e70 <HAL_DMA_Abort_IT+0x290>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a65      	ldr	r2, [pc, #404]	@ (8001f9c <HAL_DMA_Abort_IT+0x3bc>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d031      	beq.n	8001e70 <HAL_DMA_Abort_IT+0x290>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a63      	ldr	r2, [pc, #396]	@ (8001fa0 <HAL_DMA_Abort_IT+0x3c0>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d02c      	beq.n	8001e70 <HAL_DMA_Abort_IT+0x290>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a62      	ldr	r2, [pc, #392]	@ (8001fa4 <HAL_DMA_Abort_IT+0x3c4>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d027      	beq.n	8001e70 <HAL_DMA_Abort_IT+0x290>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a60      	ldr	r2, [pc, #384]	@ (8001fa8 <HAL_DMA_Abort_IT+0x3c8>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d022      	beq.n	8001e70 <HAL_DMA_Abort_IT+0x290>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a5f      	ldr	r2, [pc, #380]	@ (8001fac <HAL_DMA_Abort_IT+0x3cc>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d01d      	beq.n	8001e70 <HAL_DMA_Abort_IT+0x290>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a5d      	ldr	r2, [pc, #372]	@ (8001fb0 <HAL_DMA_Abort_IT+0x3d0>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d018      	beq.n	8001e70 <HAL_DMA_Abort_IT+0x290>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a5c      	ldr	r2, [pc, #368]	@ (8001fb4 <HAL_DMA_Abort_IT+0x3d4>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d013      	beq.n	8001e70 <HAL_DMA_Abort_IT+0x290>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a5a      	ldr	r2, [pc, #360]	@ (8001fb8 <HAL_DMA_Abort_IT+0x3d8>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d00e      	beq.n	8001e70 <HAL_DMA_Abort_IT+0x290>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a59      	ldr	r2, [pc, #356]	@ (8001fbc <HAL_DMA_Abort_IT+0x3dc>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d009      	beq.n	8001e70 <HAL_DMA_Abort_IT+0x290>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a57      	ldr	r2, [pc, #348]	@ (8001fc0 <HAL_DMA_Abort_IT+0x3e0>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d004      	beq.n	8001e70 <HAL_DMA_Abort_IT+0x290>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a56      	ldr	r2, [pc, #344]	@ (8001fc4 <HAL_DMA_Abort_IT+0x3e4>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d108      	bne.n	8001e82 <HAL_DMA_Abort_IT+0x2a2>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f022 0201 	bic.w	r2, r2, #1
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	e007      	b.n	8001e92 <HAL_DMA_Abort_IT+0x2b2>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f022 0201 	bic.w	r2, r2, #1
 8001e90:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a3c      	ldr	r2, [pc, #240]	@ (8001f88 <HAL_DMA_Abort_IT+0x3a8>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d072      	beq.n	8001f82 <HAL_DMA_Abort_IT+0x3a2>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a3a      	ldr	r2, [pc, #232]	@ (8001f8c <HAL_DMA_Abort_IT+0x3ac>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d06d      	beq.n	8001f82 <HAL_DMA_Abort_IT+0x3a2>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a39      	ldr	r2, [pc, #228]	@ (8001f90 <HAL_DMA_Abort_IT+0x3b0>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d068      	beq.n	8001f82 <HAL_DMA_Abort_IT+0x3a2>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a37      	ldr	r2, [pc, #220]	@ (8001f94 <HAL_DMA_Abort_IT+0x3b4>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d063      	beq.n	8001f82 <HAL_DMA_Abort_IT+0x3a2>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a36      	ldr	r2, [pc, #216]	@ (8001f98 <HAL_DMA_Abort_IT+0x3b8>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d05e      	beq.n	8001f82 <HAL_DMA_Abort_IT+0x3a2>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a34      	ldr	r2, [pc, #208]	@ (8001f9c <HAL_DMA_Abort_IT+0x3bc>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d059      	beq.n	8001f82 <HAL_DMA_Abort_IT+0x3a2>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a33      	ldr	r2, [pc, #204]	@ (8001fa0 <HAL_DMA_Abort_IT+0x3c0>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d054      	beq.n	8001f82 <HAL_DMA_Abort_IT+0x3a2>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a31      	ldr	r2, [pc, #196]	@ (8001fa4 <HAL_DMA_Abort_IT+0x3c4>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d04f      	beq.n	8001f82 <HAL_DMA_Abort_IT+0x3a2>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a30      	ldr	r2, [pc, #192]	@ (8001fa8 <HAL_DMA_Abort_IT+0x3c8>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d04a      	beq.n	8001f82 <HAL_DMA_Abort_IT+0x3a2>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a2e      	ldr	r2, [pc, #184]	@ (8001fac <HAL_DMA_Abort_IT+0x3cc>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d045      	beq.n	8001f82 <HAL_DMA_Abort_IT+0x3a2>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a2d      	ldr	r2, [pc, #180]	@ (8001fb0 <HAL_DMA_Abort_IT+0x3d0>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d040      	beq.n	8001f82 <HAL_DMA_Abort_IT+0x3a2>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a2b      	ldr	r2, [pc, #172]	@ (8001fb4 <HAL_DMA_Abort_IT+0x3d4>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d03b      	beq.n	8001f82 <HAL_DMA_Abort_IT+0x3a2>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a2a      	ldr	r2, [pc, #168]	@ (8001fb8 <HAL_DMA_Abort_IT+0x3d8>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d036      	beq.n	8001f82 <HAL_DMA_Abort_IT+0x3a2>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a28      	ldr	r2, [pc, #160]	@ (8001fbc <HAL_DMA_Abort_IT+0x3dc>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d031      	beq.n	8001f82 <HAL_DMA_Abort_IT+0x3a2>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a27      	ldr	r2, [pc, #156]	@ (8001fc0 <HAL_DMA_Abort_IT+0x3e0>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d02c      	beq.n	8001f82 <HAL_DMA_Abort_IT+0x3a2>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a25      	ldr	r2, [pc, #148]	@ (8001fc4 <HAL_DMA_Abort_IT+0x3e4>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d027      	beq.n	8001f82 <HAL_DMA_Abort_IT+0x3a2>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a24      	ldr	r2, [pc, #144]	@ (8001fc8 <HAL_DMA_Abort_IT+0x3e8>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d022      	beq.n	8001f82 <HAL_DMA_Abort_IT+0x3a2>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a22      	ldr	r2, [pc, #136]	@ (8001fcc <HAL_DMA_Abort_IT+0x3ec>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d01d      	beq.n	8001f82 <HAL_DMA_Abort_IT+0x3a2>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a21      	ldr	r2, [pc, #132]	@ (8001fd0 <HAL_DMA_Abort_IT+0x3f0>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d018      	beq.n	8001f82 <HAL_DMA_Abort_IT+0x3a2>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a1f      	ldr	r2, [pc, #124]	@ (8001fd4 <HAL_DMA_Abort_IT+0x3f4>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d013      	beq.n	8001f82 <HAL_DMA_Abort_IT+0x3a2>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a1e      	ldr	r2, [pc, #120]	@ (8001fd8 <HAL_DMA_Abort_IT+0x3f8>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d00e      	beq.n	8001f82 <HAL_DMA_Abort_IT+0x3a2>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a1c      	ldr	r2, [pc, #112]	@ (8001fdc <HAL_DMA_Abort_IT+0x3fc>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d009      	beq.n	8001f82 <HAL_DMA_Abort_IT+0x3a2>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a1b      	ldr	r2, [pc, #108]	@ (8001fe0 <HAL_DMA_Abort_IT+0x400>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d004      	beq.n	8001f82 <HAL_DMA_Abort_IT+0x3a2>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a19      	ldr	r2, [pc, #100]	@ (8001fe4 <HAL_DMA_Abort_IT+0x404>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d132      	bne.n	8001fe8 <HAL_DMA_Abort_IT+0x408>
 8001f82:	2301      	movs	r3, #1
 8001f84:	e031      	b.n	8001fea <HAL_DMA_Abort_IT+0x40a>
 8001f86:	bf00      	nop
 8001f88:	40020010 	.word	0x40020010
 8001f8c:	40020028 	.word	0x40020028
 8001f90:	40020040 	.word	0x40020040
 8001f94:	40020058 	.word	0x40020058
 8001f98:	40020070 	.word	0x40020070
 8001f9c:	40020088 	.word	0x40020088
 8001fa0:	400200a0 	.word	0x400200a0
 8001fa4:	400200b8 	.word	0x400200b8
 8001fa8:	40020410 	.word	0x40020410
 8001fac:	40020428 	.word	0x40020428
 8001fb0:	40020440 	.word	0x40020440
 8001fb4:	40020458 	.word	0x40020458
 8001fb8:	40020470 	.word	0x40020470
 8001fbc:	40020488 	.word	0x40020488
 8001fc0:	400204a0 	.word	0x400204a0
 8001fc4:	400204b8 	.word	0x400204b8
 8001fc8:	58025408 	.word	0x58025408
 8001fcc:	5802541c 	.word	0x5802541c
 8001fd0:	58025430 	.word	0x58025430
 8001fd4:	58025444 	.word	0x58025444
 8001fd8:	58025458 	.word	0x58025458
 8001fdc:	5802546c 	.word	0x5802546c
 8001fe0:	58025480 	.word	0x58025480
 8001fe4:	58025494 	.word	0x58025494
 8001fe8:	2300      	movs	r3, #0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d028      	beq.n	8002040 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ff8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ffc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002002:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002008:	f003 031f 	and.w	r3, r3, #31
 800200c:	2201      	movs	r2, #1
 800200e:	409a      	lsls	r2, r3
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800201c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002022:	2b00      	cmp	r3, #0
 8002024:	d00c      	beq.n	8002040 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002030:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002034:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800203e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002054:	2b00      	cmp	r3, #0
 8002056:	d003      	beq.n	8002060 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop

0800206c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800206c:	b480      	push	{r7}
 800206e:	b089      	sub	sp, #36	@ 0x24
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002076:	2300      	movs	r3, #0
 8002078:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800207a:	4b89      	ldr	r3, [pc, #548]	@ (80022a0 <HAL_GPIO_Init+0x234>)
 800207c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800207e:	e194      	b.n	80023aa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	2101      	movs	r1, #1
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	fa01 f303 	lsl.w	r3, r1, r3
 800208c:	4013      	ands	r3, r2
 800208e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	2b00      	cmp	r3, #0
 8002094:	f000 8186 	beq.w	80023a4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f003 0303 	and.w	r3, r3, #3
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d005      	beq.n	80020b0 <HAL_GPIO_Init+0x44>
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f003 0303 	and.w	r3, r3, #3
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d130      	bne.n	8002112 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	2203      	movs	r2, #3
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	43db      	mvns	r3, r3
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	4013      	ands	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	68da      	ldr	r2, [r3, #12]
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020e6:	2201      	movs	r2, #1
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	43db      	mvns	r3, r3
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	4013      	ands	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	091b      	lsrs	r3, r3, #4
 80020fc:	f003 0201 	and.w	r2, r3, #1
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4313      	orrs	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f003 0303 	and.w	r3, r3, #3
 800211a:	2b03      	cmp	r3, #3
 800211c:	d017      	beq.n	800214e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	2203      	movs	r2, #3
 800212a:	fa02 f303 	lsl.w	r3, r2, r3
 800212e:	43db      	mvns	r3, r3
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	4013      	ands	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	689a      	ldr	r2, [r3, #8]
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	4313      	orrs	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f003 0303 	and.w	r3, r3, #3
 8002156:	2b02      	cmp	r3, #2
 8002158:	d123      	bne.n	80021a2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	08da      	lsrs	r2, r3, #3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	3208      	adds	r2, #8
 8002162:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002166:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	f003 0307 	and.w	r3, r3, #7
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	220f      	movs	r2, #15
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	43db      	mvns	r3, r3
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	4013      	ands	r3, r2
 800217c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	691a      	ldr	r2, [r3, #16]
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	f003 0307 	and.w	r3, r3, #7
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	4313      	orrs	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	08da      	lsrs	r2, r3, #3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	3208      	adds	r2, #8
 800219c:	69b9      	ldr	r1, [r7, #24]
 800219e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	2203      	movs	r2, #3
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	43db      	mvns	r3, r3
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	4013      	ands	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f003 0203 	and.w	r2, r3, #3
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f000 80e0 	beq.w	80023a4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021e4:	4b2f      	ldr	r3, [pc, #188]	@ (80022a4 <HAL_GPIO_Init+0x238>)
 80021e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80021ea:	4a2e      	ldr	r2, [pc, #184]	@ (80022a4 <HAL_GPIO_Init+0x238>)
 80021ec:	f043 0302 	orr.w	r3, r3, #2
 80021f0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80021f4:	4b2b      	ldr	r3, [pc, #172]	@ (80022a4 <HAL_GPIO_Init+0x238>)
 80021f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	60fb      	str	r3, [r7, #12]
 8002200:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002202:	4a29      	ldr	r2, [pc, #164]	@ (80022a8 <HAL_GPIO_Init+0x23c>)
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	089b      	lsrs	r3, r3, #2
 8002208:	3302      	adds	r3, #2
 800220a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800220e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	f003 0303 	and.w	r3, r3, #3
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	220f      	movs	r2, #15
 800221a:	fa02 f303 	lsl.w	r3, r2, r3
 800221e:	43db      	mvns	r3, r3
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	4013      	ands	r3, r2
 8002224:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a20      	ldr	r2, [pc, #128]	@ (80022ac <HAL_GPIO_Init+0x240>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d052      	beq.n	80022d4 <HAL_GPIO_Init+0x268>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a1f      	ldr	r2, [pc, #124]	@ (80022b0 <HAL_GPIO_Init+0x244>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d031      	beq.n	800229a <HAL_GPIO_Init+0x22e>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a1e      	ldr	r2, [pc, #120]	@ (80022b4 <HAL_GPIO_Init+0x248>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d02b      	beq.n	8002296 <HAL_GPIO_Init+0x22a>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a1d      	ldr	r2, [pc, #116]	@ (80022b8 <HAL_GPIO_Init+0x24c>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d025      	beq.n	8002292 <HAL_GPIO_Init+0x226>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a1c      	ldr	r2, [pc, #112]	@ (80022bc <HAL_GPIO_Init+0x250>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d01f      	beq.n	800228e <HAL_GPIO_Init+0x222>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a1b      	ldr	r2, [pc, #108]	@ (80022c0 <HAL_GPIO_Init+0x254>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d019      	beq.n	800228a <HAL_GPIO_Init+0x21e>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a1a      	ldr	r2, [pc, #104]	@ (80022c4 <HAL_GPIO_Init+0x258>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d013      	beq.n	8002286 <HAL_GPIO_Init+0x21a>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a19      	ldr	r2, [pc, #100]	@ (80022c8 <HAL_GPIO_Init+0x25c>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d00d      	beq.n	8002282 <HAL_GPIO_Init+0x216>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a18      	ldr	r2, [pc, #96]	@ (80022cc <HAL_GPIO_Init+0x260>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d007      	beq.n	800227e <HAL_GPIO_Init+0x212>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a17      	ldr	r2, [pc, #92]	@ (80022d0 <HAL_GPIO_Init+0x264>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d101      	bne.n	800227a <HAL_GPIO_Init+0x20e>
 8002276:	2309      	movs	r3, #9
 8002278:	e02d      	b.n	80022d6 <HAL_GPIO_Init+0x26a>
 800227a:	230a      	movs	r3, #10
 800227c:	e02b      	b.n	80022d6 <HAL_GPIO_Init+0x26a>
 800227e:	2308      	movs	r3, #8
 8002280:	e029      	b.n	80022d6 <HAL_GPIO_Init+0x26a>
 8002282:	2307      	movs	r3, #7
 8002284:	e027      	b.n	80022d6 <HAL_GPIO_Init+0x26a>
 8002286:	2306      	movs	r3, #6
 8002288:	e025      	b.n	80022d6 <HAL_GPIO_Init+0x26a>
 800228a:	2305      	movs	r3, #5
 800228c:	e023      	b.n	80022d6 <HAL_GPIO_Init+0x26a>
 800228e:	2304      	movs	r3, #4
 8002290:	e021      	b.n	80022d6 <HAL_GPIO_Init+0x26a>
 8002292:	2303      	movs	r3, #3
 8002294:	e01f      	b.n	80022d6 <HAL_GPIO_Init+0x26a>
 8002296:	2302      	movs	r3, #2
 8002298:	e01d      	b.n	80022d6 <HAL_GPIO_Init+0x26a>
 800229a:	2301      	movs	r3, #1
 800229c:	e01b      	b.n	80022d6 <HAL_GPIO_Init+0x26a>
 800229e:	bf00      	nop
 80022a0:	58000080 	.word	0x58000080
 80022a4:	58024400 	.word	0x58024400
 80022a8:	58000400 	.word	0x58000400
 80022ac:	58020000 	.word	0x58020000
 80022b0:	58020400 	.word	0x58020400
 80022b4:	58020800 	.word	0x58020800
 80022b8:	58020c00 	.word	0x58020c00
 80022bc:	58021000 	.word	0x58021000
 80022c0:	58021400 	.word	0x58021400
 80022c4:	58021800 	.word	0x58021800
 80022c8:	58021c00 	.word	0x58021c00
 80022cc:	58022000 	.word	0x58022000
 80022d0:	58022400 	.word	0x58022400
 80022d4:	2300      	movs	r3, #0
 80022d6:	69fa      	ldr	r2, [r7, #28]
 80022d8:	f002 0203 	and.w	r2, r2, #3
 80022dc:	0092      	lsls	r2, r2, #2
 80022de:	4093      	lsls	r3, r2
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022e6:	4938      	ldr	r1, [pc, #224]	@ (80023c8 <HAL_GPIO_Init+0x35c>)
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	089b      	lsrs	r3, r3, #2
 80022ec:	3302      	adds	r3, #2
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80022f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	43db      	mvns	r3, r3
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	4013      	ands	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d003      	beq.n	800231a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	4313      	orrs	r3, r2
 8002318:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800231a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002322:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	43db      	mvns	r3, r3
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	4013      	ands	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d003      	beq.n	8002348 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	4313      	orrs	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002348:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	43db      	mvns	r3, r3
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	4013      	ands	r3, r2
 800235e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d003      	beq.n	8002374 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	4313      	orrs	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	43db      	mvns	r3, r3
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	4013      	ands	r3, r2
 8002388:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d003      	beq.n	800239e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	4313      	orrs	r3, r2
 800239c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	3301      	adds	r3, #1
 80023a8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	fa22 f303 	lsr.w	r3, r2, r3
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	f47f ae63 	bne.w	8002080 <HAL_GPIO_Init+0x14>
  }
}
 80023ba:	bf00      	nop
 80023bc:	bf00      	nop
 80023be:	3724      	adds	r7, #36	@ 0x24
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr
 80023c8:	58000400 	.word	0x58000400

080023cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	460b      	mov	r3, r1
 80023d6:	807b      	strh	r3, [r7, #2]
 80023d8:	4613      	mov	r3, r2
 80023da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023dc:	787b      	ldrb	r3, [r7, #1]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d003      	beq.n	80023ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023e2:	887a      	ldrh	r2, [r7, #2]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80023e8:	e003      	b.n	80023f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80023ea:	887b      	ldrh	r3, [r7, #2]
 80023ec:	041a      	lsls	r2, r3, #16
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	619a      	str	r2, [r3, #24]
}
 80023f2:	bf00      	nop
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr

080023fe <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b082      	sub	sp, #8
 8002402:	af00      	add	r7, sp, #0
 8002404:	4603      	mov	r3, r0
 8002406:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8002408:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800240c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002410:	88fb      	ldrh	r3, [r7, #6]
 8002412:	4013      	ands	r3, r2
 8002414:	2b00      	cmp	r3, #0
 8002416:	d008      	beq.n	800242a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002418:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800241c:	88fb      	ldrh	r3, [r7, #6]
 800241e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002422:	88fb      	ldrh	r3, [r7, #6]
 8002424:	4618      	mov	r0, r3
 8002426:	f000 f804 	bl	8002432 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800242a:	bf00      	nop
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002432:	b480      	push	{r7}
 8002434:	b083      	sub	sp, #12
 8002436:	af00      	add	r7, sp, #0
 8002438:	4603      	mov	r3, r0
 800243a:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800243c:	bf00      	nop
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002450:	4b19      	ldr	r3, [pc, #100]	@ (80024b8 <HAL_PWREx_ConfigSupply+0x70>)
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	f003 0304 	and.w	r3, r3, #4
 8002458:	2b04      	cmp	r3, #4
 800245a:	d00a      	beq.n	8002472 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800245c:	4b16      	ldr	r3, [pc, #88]	@ (80024b8 <HAL_PWREx_ConfigSupply+0x70>)
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	f003 0307 	and.w	r3, r3, #7
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	429a      	cmp	r2, r3
 8002468:	d001      	beq.n	800246e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e01f      	b.n	80024ae <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800246e:	2300      	movs	r3, #0
 8002470:	e01d      	b.n	80024ae <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002472:	4b11      	ldr	r3, [pc, #68]	@ (80024b8 <HAL_PWREx_ConfigSupply+0x70>)
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	f023 0207 	bic.w	r2, r3, #7
 800247a:	490f      	ldr	r1, [pc, #60]	@ (80024b8 <HAL_PWREx_ConfigSupply+0x70>)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4313      	orrs	r3, r2
 8002480:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002482:	f7fe fecb 	bl	800121c <HAL_GetTick>
 8002486:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002488:	e009      	b.n	800249e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800248a:	f7fe fec7 	bl	800121c <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002498:	d901      	bls.n	800249e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e007      	b.n	80024ae <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800249e:	4b06      	ldr	r3, [pc, #24]	@ (80024b8 <HAL_PWREx_ConfigSupply+0x70>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80024a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80024aa:	d1ee      	bne.n	800248a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	58024800 	.word	0x58024800

080024bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b08c      	sub	sp, #48	@ 0x30
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d102      	bne.n	80024d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	f000 bc48 	b.w	8002d60 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0301 	and.w	r3, r3, #1
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f000 8088 	beq.w	80025ee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024de:	4b99      	ldr	r3, [pc, #612]	@ (8002744 <HAL_RCC_OscConfig+0x288>)
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80024e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80024e8:	4b96      	ldr	r3, [pc, #600]	@ (8002744 <HAL_RCC_OscConfig+0x288>)
 80024ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80024ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024f0:	2b10      	cmp	r3, #16
 80024f2:	d007      	beq.n	8002504 <HAL_RCC_OscConfig+0x48>
 80024f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024f6:	2b18      	cmp	r3, #24
 80024f8:	d111      	bne.n	800251e <HAL_RCC_OscConfig+0x62>
 80024fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024fc:	f003 0303 	and.w	r3, r3, #3
 8002500:	2b02      	cmp	r3, #2
 8002502:	d10c      	bne.n	800251e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002504:	4b8f      	ldr	r3, [pc, #572]	@ (8002744 <HAL_RCC_OscConfig+0x288>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d06d      	beq.n	80025ec <HAL_RCC_OscConfig+0x130>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d169      	bne.n	80025ec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	f000 bc21 	b.w	8002d60 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002526:	d106      	bne.n	8002536 <HAL_RCC_OscConfig+0x7a>
 8002528:	4b86      	ldr	r3, [pc, #536]	@ (8002744 <HAL_RCC_OscConfig+0x288>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a85      	ldr	r2, [pc, #532]	@ (8002744 <HAL_RCC_OscConfig+0x288>)
 800252e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002532:	6013      	str	r3, [r2, #0]
 8002534:	e02e      	b.n	8002594 <HAL_RCC_OscConfig+0xd8>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d10c      	bne.n	8002558 <HAL_RCC_OscConfig+0x9c>
 800253e:	4b81      	ldr	r3, [pc, #516]	@ (8002744 <HAL_RCC_OscConfig+0x288>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a80      	ldr	r2, [pc, #512]	@ (8002744 <HAL_RCC_OscConfig+0x288>)
 8002544:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002548:	6013      	str	r3, [r2, #0]
 800254a:	4b7e      	ldr	r3, [pc, #504]	@ (8002744 <HAL_RCC_OscConfig+0x288>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a7d      	ldr	r2, [pc, #500]	@ (8002744 <HAL_RCC_OscConfig+0x288>)
 8002550:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002554:	6013      	str	r3, [r2, #0]
 8002556:	e01d      	b.n	8002594 <HAL_RCC_OscConfig+0xd8>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002560:	d10c      	bne.n	800257c <HAL_RCC_OscConfig+0xc0>
 8002562:	4b78      	ldr	r3, [pc, #480]	@ (8002744 <HAL_RCC_OscConfig+0x288>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a77      	ldr	r2, [pc, #476]	@ (8002744 <HAL_RCC_OscConfig+0x288>)
 8002568:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800256c:	6013      	str	r3, [r2, #0]
 800256e:	4b75      	ldr	r3, [pc, #468]	@ (8002744 <HAL_RCC_OscConfig+0x288>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a74      	ldr	r2, [pc, #464]	@ (8002744 <HAL_RCC_OscConfig+0x288>)
 8002574:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002578:	6013      	str	r3, [r2, #0]
 800257a:	e00b      	b.n	8002594 <HAL_RCC_OscConfig+0xd8>
 800257c:	4b71      	ldr	r3, [pc, #452]	@ (8002744 <HAL_RCC_OscConfig+0x288>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a70      	ldr	r2, [pc, #448]	@ (8002744 <HAL_RCC_OscConfig+0x288>)
 8002582:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002586:	6013      	str	r3, [r2, #0]
 8002588:	4b6e      	ldr	r3, [pc, #440]	@ (8002744 <HAL_RCC_OscConfig+0x288>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a6d      	ldr	r2, [pc, #436]	@ (8002744 <HAL_RCC_OscConfig+0x288>)
 800258e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002592:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d013      	beq.n	80025c4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800259c:	f7fe fe3e 	bl	800121c <HAL_GetTick>
 80025a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025a2:	e008      	b.n	80025b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025a4:	f7fe fe3a 	bl	800121c <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b64      	cmp	r3, #100	@ 0x64
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e3d4      	b.n	8002d60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025b6:	4b63      	ldr	r3, [pc, #396]	@ (8002744 <HAL_RCC_OscConfig+0x288>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d0f0      	beq.n	80025a4 <HAL_RCC_OscConfig+0xe8>
 80025c2:	e014      	b.n	80025ee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c4:	f7fe fe2a 	bl	800121c <HAL_GetTick>
 80025c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80025ca:	e008      	b.n	80025de <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025cc:	f7fe fe26 	bl	800121c <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b64      	cmp	r3, #100	@ 0x64
 80025d8:	d901      	bls.n	80025de <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e3c0      	b.n	8002d60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80025de:	4b59      	ldr	r3, [pc, #356]	@ (8002744 <HAL_RCC_OscConfig+0x288>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1f0      	bne.n	80025cc <HAL_RCC_OscConfig+0x110>
 80025ea:	e000      	b.n	80025ee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f000 80ca 	beq.w	8002790 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025fc:	4b51      	ldr	r3, [pc, #324]	@ (8002744 <HAL_RCC_OscConfig+0x288>)
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002604:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002606:	4b4f      	ldr	r3, [pc, #316]	@ (8002744 <HAL_RCC_OscConfig+0x288>)
 8002608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800260a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800260c:	6a3b      	ldr	r3, [r7, #32]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d007      	beq.n	8002622 <HAL_RCC_OscConfig+0x166>
 8002612:	6a3b      	ldr	r3, [r7, #32]
 8002614:	2b18      	cmp	r3, #24
 8002616:	d156      	bne.n	80026c6 <HAL_RCC_OscConfig+0x20a>
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	f003 0303 	and.w	r3, r3, #3
 800261e:	2b00      	cmp	r3, #0
 8002620:	d151      	bne.n	80026c6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002622:	4b48      	ldr	r3, [pc, #288]	@ (8002744 <HAL_RCC_OscConfig+0x288>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0304 	and.w	r3, r3, #4
 800262a:	2b00      	cmp	r3, #0
 800262c:	d005      	beq.n	800263a <HAL_RCC_OscConfig+0x17e>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d101      	bne.n	800263a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e392      	b.n	8002d60 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800263a:	4b42      	ldr	r3, [pc, #264]	@ (8002744 <HAL_RCC_OscConfig+0x288>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f023 0219 	bic.w	r2, r3, #25
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	493f      	ldr	r1, [pc, #252]	@ (8002744 <HAL_RCC_OscConfig+0x288>)
 8002648:	4313      	orrs	r3, r2
 800264a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800264c:	f7fe fde6 	bl	800121c <HAL_GetTick>
 8002650:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002652:	e008      	b.n	8002666 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002654:	f7fe fde2 	bl	800121c <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e37c      	b.n	8002d60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002666:	4b37      	ldr	r3, [pc, #220]	@ (8002744 <HAL_RCC_OscConfig+0x288>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0304 	and.w	r3, r3, #4
 800266e:	2b00      	cmp	r3, #0
 8002670:	d0f0      	beq.n	8002654 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002672:	f7fe fe03 	bl	800127c <HAL_GetREVID>
 8002676:	4603      	mov	r3, r0
 8002678:	f241 0203 	movw	r2, #4099	@ 0x1003
 800267c:	4293      	cmp	r3, r2
 800267e:	d817      	bhi.n	80026b0 <HAL_RCC_OscConfig+0x1f4>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	691b      	ldr	r3, [r3, #16]
 8002684:	2b40      	cmp	r3, #64	@ 0x40
 8002686:	d108      	bne.n	800269a <HAL_RCC_OscConfig+0x1de>
 8002688:	4b2e      	ldr	r3, [pc, #184]	@ (8002744 <HAL_RCC_OscConfig+0x288>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002690:	4a2c      	ldr	r2, [pc, #176]	@ (8002744 <HAL_RCC_OscConfig+0x288>)
 8002692:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002696:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002698:	e07a      	b.n	8002790 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800269a:	4b2a      	ldr	r3, [pc, #168]	@ (8002744 <HAL_RCC_OscConfig+0x288>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	031b      	lsls	r3, r3, #12
 80026a8:	4926      	ldr	r1, [pc, #152]	@ (8002744 <HAL_RCC_OscConfig+0x288>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026ae:	e06f      	b.n	8002790 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026b0:	4b24      	ldr	r3, [pc, #144]	@ (8002744 <HAL_RCC_OscConfig+0x288>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	061b      	lsls	r3, r3, #24
 80026be:	4921      	ldr	r1, [pc, #132]	@ (8002744 <HAL_RCC_OscConfig+0x288>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026c4:	e064      	b.n	8002790 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d047      	beq.n	800275e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80026ce:	4b1d      	ldr	r3, [pc, #116]	@ (8002744 <HAL_RCC_OscConfig+0x288>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f023 0219 	bic.w	r2, r3, #25
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	491a      	ldr	r1, [pc, #104]	@ (8002744 <HAL_RCC_OscConfig+0x288>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e0:	f7fe fd9c 	bl	800121c <HAL_GetTick>
 80026e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026e6:	e008      	b.n	80026fa <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026e8:	f7fe fd98 	bl	800121c <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e332      	b.n	8002d60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026fa:	4b12      	ldr	r3, [pc, #72]	@ (8002744 <HAL_RCC_OscConfig+0x288>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0304 	and.w	r3, r3, #4
 8002702:	2b00      	cmp	r3, #0
 8002704:	d0f0      	beq.n	80026e8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002706:	f7fe fdb9 	bl	800127c <HAL_GetREVID>
 800270a:	4603      	mov	r3, r0
 800270c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002710:	4293      	cmp	r3, r2
 8002712:	d819      	bhi.n	8002748 <HAL_RCC_OscConfig+0x28c>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	691b      	ldr	r3, [r3, #16]
 8002718:	2b40      	cmp	r3, #64	@ 0x40
 800271a:	d108      	bne.n	800272e <HAL_RCC_OscConfig+0x272>
 800271c:	4b09      	ldr	r3, [pc, #36]	@ (8002744 <HAL_RCC_OscConfig+0x288>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002724:	4a07      	ldr	r2, [pc, #28]	@ (8002744 <HAL_RCC_OscConfig+0x288>)
 8002726:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800272a:	6053      	str	r3, [r2, #4]
 800272c:	e030      	b.n	8002790 <HAL_RCC_OscConfig+0x2d4>
 800272e:	4b05      	ldr	r3, [pc, #20]	@ (8002744 <HAL_RCC_OscConfig+0x288>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	031b      	lsls	r3, r3, #12
 800273c:	4901      	ldr	r1, [pc, #4]	@ (8002744 <HAL_RCC_OscConfig+0x288>)
 800273e:	4313      	orrs	r3, r2
 8002740:	604b      	str	r3, [r1, #4]
 8002742:	e025      	b.n	8002790 <HAL_RCC_OscConfig+0x2d4>
 8002744:	58024400 	.word	0x58024400
 8002748:	4b9a      	ldr	r3, [pc, #616]	@ (80029b4 <HAL_RCC_OscConfig+0x4f8>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	691b      	ldr	r3, [r3, #16]
 8002754:	061b      	lsls	r3, r3, #24
 8002756:	4997      	ldr	r1, [pc, #604]	@ (80029b4 <HAL_RCC_OscConfig+0x4f8>)
 8002758:	4313      	orrs	r3, r2
 800275a:	604b      	str	r3, [r1, #4]
 800275c:	e018      	b.n	8002790 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800275e:	4b95      	ldr	r3, [pc, #596]	@ (80029b4 <HAL_RCC_OscConfig+0x4f8>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a94      	ldr	r2, [pc, #592]	@ (80029b4 <HAL_RCC_OscConfig+0x4f8>)
 8002764:	f023 0301 	bic.w	r3, r3, #1
 8002768:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800276a:	f7fe fd57 	bl	800121c <HAL_GetTick>
 800276e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002770:	e008      	b.n	8002784 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002772:	f7fe fd53 	bl	800121c <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	2b02      	cmp	r3, #2
 800277e:	d901      	bls.n	8002784 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e2ed      	b.n	8002d60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002784:	4b8b      	ldr	r3, [pc, #556]	@ (80029b4 <HAL_RCC_OscConfig+0x4f8>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0304 	and.w	r3, r3, #4
 800278c:	2b00      	cmp	r3, #0
 800278e:	d1f0      	bne.n	8002772 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0310 	and.w	r3, r3, #16
 8002798:	2b00      	cmp	r3, #0
 800279a:	f000 80a9 	beq.w	80028f0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800279e:	4b85      	ldr	r3, [pc, #532]	@ (80029b4 <HAL_RCC_OscConfig+0x4f8>)
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80027a6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80027a8:	4b82      	ldr	r3, [pc, #520]	@ (80029b4 <HAL_RCC_OscConfig+0x4f8>)
 80027aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ac:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	2b08      	cmp	r3, #8
 80027b2:	d007      	beq.n	80027c4 <HAL_RCC_OscConfig+0x308>
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	2b18      	cmp	r3, #24
 80027b8:	d13a      	bne.n	8002830 <HAL_RCC_OscConfig+0x374>
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	f003 0303 	and.w	r3, r3, #3
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d135      	bne.n	8002830 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80027c4:	4b7b      	ldr	r3, [pc, #492]	@ (80029b4 <HAL_RCC_OscConfig+0x4f8>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d005      	beq.n	80027dc <HAL_RCC_OscConfig+0x320>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	69db      	ldr	r3, [r3, #28]
 80027d4:	2b80      	cmp	r3, #128	@ 0x80
 80027d6:	d001      	beq.n	80027dc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e2c1      	b.n	8002d60 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80027dc:	f7fe fd4e 	bl	800127c <HAL_GetREVID>
 80027e0:	4603      	mov	r3, r0
 80027e2:	f241 0203 	movw	r2, #4099	@ 0x1003
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d817      	bhi.n	800281a <HAL_RCC_OscConfig+0x35e>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a1b      	ldr	r3, [r3, #32]
 80027ee:	2b20      	cmp	r3, #32
 80027f0:	d108      	bne.n	8002804 <HAL_RCC_OscConfig+0x348>
 80027f2:	4b70      	ldr	r3, [pc, #448]	@ (80029b4 <HAL_RCC_OscConfig+0x4f8>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80027fa:	4a6e      	ldr	r2, [pc, #440]	@ (80029b4 <HAL_RCC_OscConfig+0x4f8>)
 80027fc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002800:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002802:	e075      	b.n	80028f0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002804:	4b6b      	ldr	r3, [pc, #428]	@ (80029b4 <HAL_RCC_OscConfig+0x4f8>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a1b      	ldr	r3, [r3, #32]
 8002810:	069b      	lsls	r3, r3, #26
 8002812:	4968      	ldr	r1, [pc, #416]	@ (80029b4 <HAL_RCC_OscConfig+0x4f8>)
 8002814:	4313      	orrs	r3, r2
 8002816:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002818:	e06a      	b.n	80028f0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800281a:	4b66      	ldr	r3, [pc, #408]	@ (80029b4 <HAL_RCC_OscConfig+0x4f8>)
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a1b      	ldr	r3, [r3, #32]
 8002826:	061b      	lsls	r3, r3, #24
 8002828:	4962      	ldr	r1, [pc, #392]	@ (80029b4 <HAL_RCC_OscConfig+0x4f8>)
 800282a:	4313      	orrs	r3, r2
 800282c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800282e:	e05f      	b.n	80028f0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	69db      	ldr	r3, [r3, #28]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d042      	beq.n	80028be <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002838:	4b5e      	ldr	r3, [pc, #376]	@ (80029b4 <HAL_RCC_OscConfig+0x4f8>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a5d      	ldr	r2, [pc, #372]	@ (80029b4 <HAL_RCC_OscConfig+0x4f8>)
 800283e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002842:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002844:	f7fe fcea 	bl	800121c <HAL_GetTick>
 8002848:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800284a:	e008      	b.n	800285e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800284c:	f7fe fce6 	bl	800121c <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b02      	cmp	r3, #2
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e280      	b.n	8002d60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800285e:	4b55      	ldr	r3, [pc, #340]	@ (80029b4 <HAL_RCC_OscConfig+0x4f8>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002866:	2b00      	cmp	r3, #0
 8002868:	d0f0      	beq.n	800284c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800286a:	f7fe fd07 	bl	800127c <HAL_GetREVID>
 800286e:	4603      	mov	r3, r0
 8002870:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002874:	4293      	cmp	r3, r2
 8002876:	d817      	bhi.n	80028a8 <HAL_RCC_OscConfig+0x3ec>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a1b      	ldr	r3, [r3, #32]
 800287c:	2b20      	cmp	r3, #32
 800287e:	d108      	bne.n	8002892 <HAL_RCC_OscConfig+0x3d6>
 8002880:	4b4c      	ldr	r3, [pc, #304]	@ (80029b4 <HAL_RCC_OscConfig+0x4f8>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002888:	4a4a      	ldr	r2, [pc, #296]	@ (80029b4 <HAL_RCC_OscConfig+0x4f8>)
 800288a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800288e:	6053      	str	r3, [r2, #4]
 8002890:	e02e      	b.n	80028f0 <HAL_RCC_OscConfig+0x434>
 8002892:	4b48      	ldr	r3, [pc, #288]	@ (80029b4 <HAL_RCC_OscConfig+0x4f8>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a1b      	ldr	r3, [r3, #32]
 800289e:	069b      	lsls	r3, r3, #26
 80028a0:	4944      	ldr	r1, [pc, #272]	@ (80029b4 <HAL_RCC_OscConfig+0x4f8>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	604b      	str	r3, [r1, #4]
 80028a6:	e023      	b.n	80028f0 <HAL_RCC_OscConfig+0x434>
 80028a8:	4b42      	ldr	r3, [pc, #264]	@ (80029b4 <HAL_RCC_OscConfig+0x4f8>)
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a1b      	ldr	r3, [r3, #32]
 80028b4:	061b      	lsls	r3, r3, #24
 80028b6:	493f      	ldr	r1, [pc, #252]	@ (80029b4 <HAL_RCC_OscConfig+0x4f8>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	60cb      	str	r3, [r1, #12]
 80028bc:	e018      	b.n	80028f0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80028be:	4b3d      	ldr	r3, [pc, #244]	@ (80029b4 <HAL_RCC_OscConfig+0x4f8>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a3c      	ldr	r2, [pc, #240]	@ (80029b4 <HAL_RCC_OscConfig+0x4f8>)
 80028c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80028c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ca:	f7fe fca7 	bl	800121c <HAL_GetTick>
 80028ce:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80028d0:	e008      	b.n	80028e4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80028d2:	f7fe fca3 	bl	800121c <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d901      	bls.n	80028e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e23d      	b.n	8002d60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80028e4:	4b33      	ldr	r3, [pc, #204]	@ (80029b4 <HAL_RCC_OscConfig+0x4f8>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d1f0      	bne.n	80028d2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0308 	and.w	r3, r3, #8
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d036      	beq.n	800296a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	695b      	ldr	r3, [r3, #20]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d019      	beq.n	8002938 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002904:	4b2b      	ldr	r3, [pc, #172]	@ (80029b4 <HAL_RCC_OscConfig+0x4f8>)
 8002906:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002908:	4a2a      	ldr	r2, [pc, #168]	@ (80029b4 <HAL_RCC_OscConfig+0x4f8>)
 800290a:	f043 0301 	orr.w	r3, r3, #1
 800290e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002910:	f7fe fc84 	bl	800121c <HAL_GetTick>
 8002914:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002916:	e008      	b.n	800292a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002918:	f7fe fc80 	bl	800121c <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b02      	cmp	r3, #2
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e21a      	b.n	8002d60 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800292a:	4b22      	ldr	r3, [pc, #136]	@ (80029b4 <HAL_RCC_OscConfig+0x4f8>)
 800292c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d0f0      	beq.n	8002918 <HAL_RCC_OscConfig+0x45c>
 8002936:	e018      	b.n	800296a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002938:	4b1e      	ldr	r3, [pc, #120]	@ (80029b4 <HAL_RCC_OscConfig+0x4f8>)
 800293a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800293c:	4a1d      	ldr	r2, [pc, #116]	@ (80029b4 <HAL_RCC_OscConfig+0x4f8>)
 800293e:	f023 0301 	bic.w	r3, r3, #1
 8002942:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002944:	f7fe fc6a 	bl	800121c <HAL_GetTick>
 8002948:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800294a:	e008      	b.n	800295e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800294c:	f7fe fc66 	bl	800121c <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b02      	cmp	r3, #2
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e200      	b.n	8002d60 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800295e:	4b15      	ldr	r3, [pc, #84]	@ (80029b4 <HAL_RCC_OscConfig+0x4f8>)
 8002960:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1f0      	bne.n	800294c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0320 	and.w	r3, r3, #32
 8002972:	2b00      	cmp	r3, #0
 8002974:	d039      	beq.n	80029ea <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d01c      	beq.n	80029b8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800297e:	4b0d      	ldr	r3, [pc, #52]	@ (80029b4 <HAL_RCC_OscConfig+0x4f8>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a0c      	ldr	r2, [pc, #48]	@ (80029b4 <HAL_RCC_OscConfig+0x4f8>)
 8002984:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002988:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800298a:	f7fe fc47 	bl	800121c <HAL_GetTick>
 800298e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002990:	e008      	b.n	80029a4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002992:	f7fe fc43 	bl	800121c <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	2b02      	cmp	r3, #2
 800299e:	d901      	bls.n	80029a4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e1dd      	b.n	8002d60 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80029a4:	4b03      	ldr	r3, [pc, #12]	@ (80029b4 <HAL_RCC_OscConfig+0x4f8>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d0f0      	beq.n	8002992 <HAL_RCC_OscConfig+0x4d6>
 80029b0:	e01b      	b.n	80029ea <HAL_RCC_OscConfig+0x52e>
 80029b2:	bf00      	nop
 80029b4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80029b8:	4b9b      	ldr	r3, [pc, #620]	@ (8002c28 <HAL_RCC_OscConfig+0x76c>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a9a      	ldr	r2, [pc, #616]	@ (8002c28 <HAL_RCC_OscConfig+0x76c>)
 80029be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80029c2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80029c4:	f7fe fc2a 	bl	800121c <HAL_GetTick>
 80029c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80029ca:	e008      	b.n	80029de <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029cc:	f7fe fc26 	bl	800121c <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d901      	bls.n	80029de <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e1c0      	b.n	8002d60 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80029de:	4b92      	ldr	r3, [pc, #584]	@ (8002c28 <HAL_RCC_OscConfig+0x76c>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1f0      	bne.n	80029cc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0304 	and.w	r3, r3, #4
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	f000 8081 	beq.w	8002afa <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80029f8:	4b8c      	ldr	r3, [pc, #560]	@ (8002c2c <HAL_RCC_OscConfig+0x770>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a8b      	ldr	r2, [pc, #556]	@ (8002c2c <HAL_RCC_OscConfig+0x770>)
 80029fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a02:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a04:	f7fe fc0a 	bl	800121c <HAL_GetTick>
 8002a08:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a0a:	e008      	b.n	8002a1e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a0c:	f7fe fc06 	bl	800121c <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b64      	cmp	r3, #100	@ 0x64
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e1a0      	b.n	8002d60 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a1e:	4b83      	ldr	r3, [pc, #524]	@ (8002c2c <HAL_RCC_OscConfig+0x770>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d0f0      	beq.n	8002a0c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d106      	bne.n	8002a40 <HAL_RCC_OscConfig+0x584>
 8002a32:	4b7d      	ldr	r3, [pc, #500]	@ (8002c28 <HAL_RCC_OscConfig+0x76c>)
 8002a34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a36:	4a7c      	ldr	r2, [pc, #496]	@ (8002c28 <HAL_RCC_OscConfig+0x76c>)
 8002a38:	f043 0301 	orr.w	r3, r3, #1
 8002a3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a3e:	e02d      	b.n	8002a9c <HAL_RCC_OscConfig+0x5e0>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d10c      	bne.n	8002a62 <HAL_RCC_OscConfig+0x5a6>
 8002a48:	4b77      	ldr	r3, [pc, #476]	@ (8002c28 <HAL_RCC_OscConfig+0x76c>)
 8002a4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a4c:	4a76      	ldr	r2, [pc, #472]	@ (8002c28 <HAL_RCC_OscConfig+0x76c>)
 8002a4e:	f023 0301 	bic.w	r3, r3, #1
 8002a52:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a54:	4b74      	ldr	r3, [pc, #464]	@ (8002c28 <HAL_RCC_OscConfig+0x76c>)
 8002a56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a58:	4a73      	ldr	r2, [pc, #460]	@ (8002c28 <HAL_RCC_OscConfig+0x76c>)
 8002a5a:	f023 0304 	bic.w	r3, r3, #4
 8002a5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a60:	e01c      	b.n	8002a9c <HAL_RCC_OscConfig+0x5e0>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	2b05      	cmp	r3, #5
 8002a68:	d10c      	bne.n	8002a84 <HAL_RCC_OscConfig+0x5c8>
 8002a6a:	4b6f      	ldr	r3, [pc, #444]	@ (8002c28 <HAL_RCC_OscConfig+0x76c>)
 8002a6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a6e:	4a6e      	ldr	r2, [pc, #440]	@ (8002c28 <HAL_RCC_OscConfig+0x76c>)
 8002a70:	f043 0304 	orr.w	r3, r3, #4
 8002a74:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a76:	4b6c      	ldr	r3, [pc, #432]	@ (8002c28 <HAL_RCC_OscConfig+0x76c>)
 8002a78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a7a:	4a6b      	ldr	r2, [pc, #428]	@ (8002c28 <HAL_RCC_OscConfig+0x76c>)
 8002a7c:	f043 0301 	orr.w	r3, r3, #1
 8002a80:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a82:	e00b      	b.n	8002a9c <HAL_RCC_OscConfig+0x5e0>
 8002a84:	4b68      	ldr	r3, [pc, #416]	@ (8002c28 <HAL_RCC_OscConfig+0x76c>)
 8002a86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a88:	4a67      	ldr	r2, [pc, #412]	@ (8002c28 <HAL_RCC_OscConfig+0x76c>)
 8002a8a:	f023 0301 	bic.w	r3, r3, #1
 8002a8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a90:	4b65      	ldr	r3, [pc, #404]	@ (8002c28 <HAL_RCC_OscConfig+0x76c>)
 8002a92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a94:	4a64      	ldr	r2, [pc, #400]	@ (8002c28 <HAL_RCC_OscConfig+0x76c>)
 8002a96:	f023 0304 	bic.w	r3, r3, #4
 8002a9a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d015      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa4:	f7fe fbba 	bl	800121c <HAL_GetTick>
 8002aa8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002aaa:	e00a      	b.n	8002ac2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aac:	f7fe fbb6 	bl	800121c <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e14e      	b.n	8002d60 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ac2:	4b59      	ldr	r3, [pc, #356]	@ (8002c28 <HAL_RCC_OscConfig+0x76c>)
 8002ac4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d0ee      	beq.n	8002aac <HAL_RCC_OscConfig+0x5f0>
 8002ace:	e014      	b.n	8002afa <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad0:	f7fe fba4 	bl	800121c <HAL_GetTick>
 8002ad4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ad6:	e00a      	b.n	8002aee <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ad8:	f7fe fba0 	bl	800121c <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e138      	b.n	8002d60 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002aee:	4b4e      	ldr	r3, [pc, #312]	@ (8002c28 <HAL_RCC_OscConfig+0x76c>)
 8002af0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1ee      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	f000 812d 	beq.w	8002d5e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002b04:	4b48      	ldr	r3, [pc, #288]	@ (8002c28 <HAL_RCC_OscConfig+0x76c>)
 8002b06:	691b      	ldr	r3, [r3, #16]
 8002b08:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002b0c:	2b18      	cmp	r3, #24
 8002b0e:	f000 80bd 	beq.w	8002c8c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	f040 809e 	bne.w	8002c58 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b1c:	4b42      	ldr	r3, [pc, #264]	@ (8002c28 <HAL_RCC_OscConfig+0x76c>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a41      	ldr	r2, [pc, #260]	@ (8002c28 <HAL_RCC_OscConfig+0x76c>)
 8002b22:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b28:	f7fe fb78 	bl	800121c <HAL_GetTick>
 8002b2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b2e:	e008      	b.n	8002b42 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b30:	f7fe fb74 	bl	800121c <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e10e      	b.n	8002d60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b42:	4b39      	ldr	r3, [pc, #228]	@ (8002c28 <HAL_RCC_OscConfig+0x76c>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1f0      	bne.n	8002b30 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b4e:	4b36      	ldr	r3, [pc, #216]	@ (8002c28 <HAL_RCC_OscConfig+0x76c>)
 8002b50:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b52:	4b37      	ldr	r3, [pc, #220]	@ (8002c30 <HAL_RCC_OscConfig+0x774>)
 8002b54:	4013      	ands	r3, r2
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002b5e:	0112      	lsls	r2, r2, #4
 8002b60:	430a      	orrs	r2, r1
 8002b62:	4931      	ldr	r1, [pc, #196]	@ (8002c28 <HAL_RCC_OscConfig+0x76c>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	628b      	str	r3, [r1, #40]	@ 0x28
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b76:	3b01      	subs	r3, #1
 8002b78:	025b      	lsls	r3, r3, #9
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	431a      	orrs	r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b82:	3b01      	subs	r3, #1
 8002b84:	041b      	lsls	r3, r3, #16
 8002b86:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002b8a:	431a      	orrs	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b90:	3b01      	subs	r3, #1
 8002b92:	061b      	lsls	r3, r3, #24
 8002b94:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002b98:	4923      	ldr	r1, [pc, #140]	@ (8002c28 <HAL_RCC_OscConfig+0x76c>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002b9e:	4b22      	ldr	r3, [pc, #136]	@ (8002c28 <HAL_RCC_OscConfig+0x76c>)
 8002ba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ba2:	4a21      	ldr	r2, [pc, #132]	@ (8002c28 <HAL_RCC_OscConfig+0x76c>)
 8002ba4:	f023 0301 	bic.w	r3, r3, #1
 8002ba8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002baa:	4b1f      	ldr	r3, [pc, #124]	@ (8002c28 <HAL_RCC_OscConfig+0x76c>)
 8002bac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002bae:	4b21      	ldr	r3, [pc, #132]	@ (8002c34 <HAL_RCC_OscConfig+0x778>)
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002bb6:	00d2      	lsls	r2, r2, #3
 8002bb8:	491b      	ldr	r1, [pc, #108]	@ (8002c28 <HAL_RCC_OscConfig+0x76c>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002bbe:	4b1a      	ldr	r3, [pc, #104]	@ (8002c28 <HAL_RCC_OscConfig+0x76c>)
 8002bc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bc2:	f023 020c 	bic.w	r2, r3, #12
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bca:	4917      	ldr	r1, [pc, #92]	@ (8002c28 <HAL_RCC_OscConfig+0x76c>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002bd0:	4b15      	ldr	r3, [pc, #84]	@ (8002c28 <HAL_RCC_OscConfig+0x76c>)
 8002bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bd4:	f023 0202 	bic.w	r2, r3, #2
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bdc:	4912      	ldr	r1, [pc, #72]	@ (8002c28 <HAL_RCC_OscConfig+0x76c>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002be2:	4b11      	ldr	r3, [pc, #68]	@ (8002c28 <HAL_RCC_OscConfig+0x76c>)
 8002be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002be6:	4a10      	ldr	r2, [pc, #64]	@ (8002c28 <HAL_RCC_OscConfig+0x76c>)
 8002be8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bee:	4b0e      	ldr	r3, [pc, #56]	@ (8002c28 <HAL_RCC_OscConfig+0x76c>)
 8002bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bf2:	4a0d      	ldr	r2, [pc, #52]	@ (8002c28 <HAL_RCC_OscConfig+0x76c>)
 8002bf4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bf8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002bfa:	4b0b      	ldr	r3, [pc, #44]	@ (8002c28 <HAL_RCC_OscConfig+0x76c>)
 8002bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bfe:	4a0a      	ldr	r2, [pc, #40]	@ (8002c28 <HAL_RCC_OscConfig+0x76c>)
 8002c00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c04:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002c06:	4b08      	ldr	r3, [pc, #32]	@ (8002c28 <HAL_RCC_OscConfig+0x76c>)
 8002c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c0a:	4a07      	ldr	r2, [pc, #28]	@ (8002c28 <HAL_RCC_OscConfig+0x76c>)
 8002c0c:	f043 0301 	orr.w	r3, r3, #1
 8002c10:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c12:	4b05      	ldr	r3, [pc, #20]	@ (8002c28 <HAL_RCC_OscConfig+0x76c>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a04      	ldr	r2, [pc, #16]	@ (8002c28 <HAL_RCC_OscConfig+0x76c>)
 8002c18:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c1e:	f7fe fafd 	bl	800121c <HAL_GetTick>
 8002c22:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c24:	e011      	b.n	8002c4a <HAL_RCC_OscConfig+0x78e>
 8002c26:	bf00      	nop
 8002c28:	58024400 	.word	0x58024400
 8002c2c:	58024800 	.word	0x58024800
 8002c30:	fffffc0c 	.word	0xfffffc0c
 8002c34:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c38:	f7fe faf0 	bl	800121c <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e08a      	b.n	8002d60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c4a:	4b47      	ldr	r3, [pc, #284]	@ (8002d68 <HAL_RCC_OscConfig+0x8ac>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d0f0      	beq.n	8002c38 <HAL_RCC_OscConfig+0x77c>
 8002c56:	e082      	b.n	8002d5e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c58:	4b43      	ldr	r3, [pc, #268]	@ (8002d68 <HAL_RCC_OscConfig+0x8ac>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a42      	ldr	r2, [pc, #264]	@ (8002d68 <HAL_RCC_OscConfig+0x8ac>)
 8002c5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c64:	f7fe fada 	bl	800121c <HAL_GetTick>
 8002c68:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c6a:	e008      	b.n	8002c7e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c6c:	f7fe fad6 	bl	800121c <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e070      	b.n	8002d60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c7e:	4b3a      	ldr	r3, [pc, #232]	@ (8002d68 <HAL_RCC_OscConfig+0x8ac>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1f0      	bne.n	8002c6c <HAL_RCC_OscConfig+0x7b0>
 8002c8a:	e068      	b.n	8002d5e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002c8c:	4b36      	ldr	r3, [pc, #216]	@ (8002d68 <HAL_RCC_OscConfig+0x8ac>)
 8002c8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c90:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002c92:	4b35      	ldr	r3, [pc, #212]	@ (8002d68 <HAL_RCC_OscConfig+0x8ac>)
 8002c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c96:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d031      	beq.n	8002d04 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	f003 0203 	and.w	r2, r3, #3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d12a      	bne.n	8002d04 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	091b      	lsrs	r3, r3, #4
 8002cb2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d122      	bne.n	8002d04 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d11a      	bne.n	8002d04 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	0a5b      	lsrs	r3, r3, #9
 8002cd2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cda:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d111      	bne.n	8002d04 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	0c1b      	lsrs	r3, r3, #16
 8002ce4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cec:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d108      	bne.n	8002d04 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	0e1b      	lsrs	r3, r3, #24
 8002cf6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cfe:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d001      	beq.n	8002d08 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e02b      	b.n	8002d60 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002d08:	4b17      	ldr	r3, [pc, #92]	@ (8002d68 <HAL_RCC_OscConfig+0x8ac>)
 8002d0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d0c:	08db      	lsrs	r3, r3, #3
 8002d0e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002d12:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d18:	693a      	ldr	r2, [r7, #16]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d01f      	beq.n	8002d5e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002d1e:	4b12      	ldr	r3, [pc, #72]	@ (8002d68 <HAL_RCC_OscConfig+0x8ac>)
 8002d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d22:	4a11      	ldr	r2, [pc, #68]	@ (8002d68 <HAL_RCC_OscConfig+0x8ac>)
 8002d24:	f023 0301 	bic.w	r3, r3, #1
 8002d28:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d2a:	f7fe fa77 	bl	800121c <HAL_GetTick>
 8002d2e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002d30:	bf00      	nop
 8002d32:	f7fe fa73 	bl	800121c <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d0f9      	beq.n	8002d32 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002d3e:	4b0a      	ldr	r3, [pc, #40]	@ (8002d68 <HAL_RCC_OscConfig+0x8ac>)
 8002d40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d42:	4b0a      	ldr	r3, [pc, #40]	@ (8002d6c <HAL_RCC_OscConfig+0x8b0>)
 8002d44:	4013      	ands	r3, r2
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002d4a:	00d2      	lsls	r2, r2, #3
 8002d4c:	4906      	ldr	r1, [pc, #24]	@ (8002d68 <HAL_RCC_OscConfig+0x8ac>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002d52:	4b05      	ldr	r3, [pc, #20]	@ (8002d68 <HAL_RCC_OscConfig+0x8ac>)
 8002d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d56:	4a04      	ldr	r2, [pc, #16]	@ (8002d68 <HAL_RCC_OscConfig+0x8ac>)
 8002d58:	f043 0301 	orr.w	r3, r3, #1
 8002d5c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3730      	adds	r7, #48	@ 0x30
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	58024400 	.word	0x58024400
 8002d6c:	ffff0007 	.word	0xffff0007

08002d70 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d101      	bne.n	8002d84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e19c      	b.n	80030be <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d84:	4b8a      	ldr	r3, [pc, #552]	@ (8002fb0 <HAL_RCC_ClockConfig+0x240>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 030f 	and.w	r3, r3, #15
 8002d8c:	683a      	ldr	r2, [r7, #0]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d910      	bls.n	8002db4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d92:	4b87      	ldr	r3, [pc, #540]	@ (8002fb0 <HAL_RCC_ClockConfig+0x240>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f023 020f 	bic.w	r2, r3, #15
 8002d9a:	4985      	ldr	r1, [pc, #532]	@ (8002fb0 <HAL_RCC_ClockConfig+0x240>)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002da2:	4b83      	ldr	r3, [pc, #524]	@ (8002fb0 <HAL_RCC_ClockConfig+0x240>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 030f 	and.w	r3, r3, #15
 8002daa:	683a      	ldr	r2, [r7, #0]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d001      	beq.n	8002db4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e184      	b.n	80030be <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0304 	and.w	r3, r3, #4
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d010      	beq.n	8002de2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	691a      	ldr	r2, [r3, #16]
 8002dc4:	4b7b      	ldr	r3, [pc, #492]	@ (8002fb4 <HAL_RCC_ClockConfig+0x244>)
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d908      	bls.n	8002de2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002dd0:	4b78      	ldr	r3, [pc, #480]	@ (8002fb4 <HAL_RCC_ClockConfig+0x244>)
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	691b      	ldr	r3, [r3, #16]
 8002ddc:	4975      	ldr	r1, [pc, #468]	@ (8002fb4 <HAL_RCC_ClockConfig+0x244>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0308 	and.w	r3, r3, #8
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d010      	beq.n	8002e10 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	695a      	ldr	r2, [r3, #20]
 8002df2:	4b70      	ldr	r3, [pc, #448]	@ (8002fb4 <HAL_RCC_ClockConfig+0x244>)
 8002df4:	69db      	ldr	r3, [r3, #28]
 8002df6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d908      	bls.n	8002e10 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002dfe:	4b6d      	ldr	r3, [pc, #436]	@ (8002fb4 <HAL_RCC_ClockConfig+0x244>)
 8002e00:	69db      	ldr	r3, [r3, #28]
 8002e02:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	496a      	ldr	r1, [pc, #424]	@ (8002fb4 <HAL_RCC_ClockConfig+0x244>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0310 	and.w	r3, r3, #16
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d010      	beq.n	8002e3e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	699a      	ldr	r2, [r3, #24]
 8002e20:	4b64      	ldr	r3, [pc, #400]	@ (8002fb4 <HAL_RCC_ClockConfig+0x244>)
 8002e22:	69db      	ldr	r3, [r3, #28]
 8002e24:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d908      	bls.n	8002e3e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002e2c:	4b61      	ldr	r3, [pc, #388]	@ (8002fb4 <HAL_RCC_ClockConfig+0x244>)
 8002e2e:	69db      	ldr	r3, [r3, #28]
 8002e30:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	495e      	ldr	r1, [pc, #376]	@ (8002fb4 <HAL_RCC_ClockConfig+0x244>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0320 	and.w	r3, r3, #32
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d010      	beq.n	8002e6c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	69da      	ldr	r2, [r3, #28]
 8002e4e:	4b59      	ldr	r3, [pc, #356]	@ (8002fb4 <HAL_RCC_ClockConfig+0x244>)
 8002e50:	6a1b      	ldr	r3, [r3, #32]
 8002e52:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d908      	bls.n	8002e6c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002e5a:	4b56      	ldr	r3, [pc, #344]	@ (8002fb4 <HAL_RCC_ClockConfig+0x244>)
 8002e5c:	6a1b      	ldr	r3, [r3, #32]
 8002e5e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	69db      	ldr	r3, [r3, #28]
 8002e66:	4953      	ldr	r1, [pc, #332]	@ (8002fb4 <HAL_RCC_ClockConfig+0x244>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0302 	and.w	r3, r3, #2
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d010      	beq.n	8002e9a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	68da      	ldr	r2, [r3, #12]
 8002e7c:	4b4d      	ldr	r3, [pc, #308]	@ (8002fb4 <HAL_RCC_ClockConfig+0x244>)
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	f003 030f 	and.w	r3, r3, #15
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d908      	bls.n	8002e9a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e88:	4b4a      	ldr	r3, [pc, #296]	@ (8002fb4 <HAL_RCC_ClockConfig+0x244>)
 8002e8a:	699b      	ldr	r3, [r3, #24]
 8002e8c:	f023 020f 	bic.w	r2, r3, #15
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	4947      	ldr	r1, [pc, #284]	@ (8002fb4 <HAL_RCC_ClockConfig+0x244>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d055      	beq.n	8002f52 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002ea6:	4b43      	ldr	r3, [pc, #268]	@ (8002fb4 <HAL_RCC_ClockConfig+0x244>)
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	4940      	ldr	r1, [pc, #256]	@ (8002fb4 <HAL_RCC_ClockConfig+0x244>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d107      	bne.n	8002ed0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ec0:	4b3c      	ldr	r3, [pc, #240]	@ (8002fb4 <HAL_RCC_ClockConfig+0x244>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d121      	bne.n	8002f10 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e0f6      	b.n	80030be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	2b03      	cmp	r3, #3
 8002ed6:	d107      	bne.n	8002ee8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ed8:	4b36      	ldr	r3, [pc, #216]	@ (8002fb4 <HAL_RCC_ClockConfig+0x244>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d115      	bne.n	8002f10 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e0ea      	b.n	80030be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d107      	bne.n	8002f00 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ef0:	4b30      	ldr	r3, [pc, #192]	@ (8002fb4 <HAL_RCC_ClockConfig+0x244>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d109      	bne.n	8002f10 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e0de      	b.n	80030be <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f00:	4b2c      	ldr	r3, [pc, #176]	@ (8002fb4 <HAL_RCC_ClockConfig+0x244>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0304 	and.w	r3, r3, #4
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d101      	bne.n	8002f10 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e0d6      	b.n	80030be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f10:	4b28      	ldr	r3, [pc, #160]	@ (8002fb4 <HAL_RCC_ClockConfig+0x244>)
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	f023 0207 	bic.w	r2, r3, #7
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	4925      	ldr	r1, [pc, #148]	@ (8002fb4 <HAL_RCC_ClockConfig+0x244>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f22:	f7fe f97b 	bl	800121c <HAL_GetTick>
 8002f26:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f28:	e00a      	b.n	8002f40 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f2a:	f7fe f977 	bl	800121c <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d901      	bls.n	8002f40 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e0be      	b.n	80030be <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f40:	4b1c      	ldr	r3, [pc, #112]	@ (8002fb4 <HAL_RCC_ClockConfig+0x244>)
 8002f42:	691b      	ldr	r3, [r3, #16]
 8002f44:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	00db      	lsls	r3, r3, #3
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d1eb      	bne.n	8002f2a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d010      	beq.n	8002f80 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	68da      	ldr	r2, [r3, #12]
 8002f62:	4b14      	ldr	r3, [pc, #80]	@ (8002fb4 <HAL_RCC_ClockConfig+0x244>)
 8002f64:	699b      	ldr	r3, [r3, #24]
 8002f66:	f003 030f 	and.w	r3, r3, #15
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d208      	bcs.n	8002f80 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f6e:	4b11      	ldr	r3, [pc, #68]	@ (8002fb4 <HAL_RCC_ClockConfig+0x244>)
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	f023 020f 	bic.w	r2, r3, #15
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	490e      	ldr	r1, [pc, #56]	@ (8002fb4 <HAL_RCC_ClockConfig+0x244>)
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f80:	4b0b      	ldr	r3, [pc, #44]	@ (8002fb0 <HAL_RCC_ClockConfig+0x240>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 030f 	and.w	r3, r3, #15
 8002f88:	683a      	ldr	r2, [r7, #0]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d214      	bcs.n	8002fb8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f8e:	4b08      	ldr	r3, [pc, #32]	@ (8002fb0 <HAL_RCC_ClockConfig+0x240>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f023 020f 	bic.w	r2, r3, #15
 8002f96:	4906      	ldr	r1, [pc, #24]	@ (8002fb0 <HAL_RCC_ClockConfig+0x240>)
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f9e:	4b04      	ldr	r3, [pc, #16]	@ (8002fb0 <HAL_RCC_ClockConfig+0x240>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 030f 	and.w	r3, r3, #15
 8002fa6:	683a      	ldr	r2, [r7, #0]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d005      	beq.n	8002fb8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e086      	b.n	80030be <HAL_RCC_ClockConfig+0x34e>
 8002fb0:	52002000 	.word	0x52002000
 8002fb4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0304 	and.w	r3, r3, #4
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d010      	beq.n	8002fe6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	691a      	ldr	r2, [r3, #16]
 8002fc8:	4b3f      	ldr	r3, [pc, #252]	@ (80030c8 <HAL_RCC_ClockConfig+0x358>)
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d208      	bcs.n	8002fe6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002fd4:	4b3c      	ldr	r3, [pc, #240]	@ (80030c8 <HAL_RCC_ClockConfig+0x358>)
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	4939      	ldr	r1, [pc, #228]	@ (80030c8 <HAL_RCC_ClockConfig+0x358>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0308 	and.w	r3, r3, #8
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d010      	beq.n	8003014 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	695a      	ldr	r2, [r3, #20]
 8002ff6:	4b34      	ldr	r3, [pc, #208]	@ (80030c8 <HAL_RCC_ClockConfig+0x358>)
 8002ff8:	69db      	ldr	r3, [r3, #28]
 8002ffa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d208      	bcs.n	8003014 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003002:	4b31      	ldr	r3, [pc, #196]	@ (80030c8 <HAL_RCC_ClockConfig+0x358>)
 8003004:	69db      	ldr	r3, [r3, #28]
 8003006:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	492e      	ldr	r1, [pc, #184]	@ (80030c8 <HAL_RCC_ClockConfig+0x358>)
 8003010:	4313      	orrs	r3, r2
 8003012:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0310 	and.w	r3, r3, #16
 800301c:	2b00      	cmp	r3, #0
 800301e:	d010      	beq.n	8003042 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	699a      	ldr	r2, [r3, #24]
 8003024:	4b28      	ldr	r3, [pc, #160]	@ (80030c8 <HAL_RCC_ClockConfig+0x358>)
 8003026:	69db      	ldr	r3, [r3, #28]
 8003028:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800302c:	429a      	cmp	r2, r3
 800302e:	d208      	bcs.n	8003042 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003030:	4b25      	ldr	r3, [pc, #148]	@ (80030c8 <HAL_RCC_ClockConfig+0x358>)
 8003032:	69db      	ldr	r3, [r3, #28]
 8003034:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	699b      	ldr	r3, [r3, #24]
 800303c:	4922      	ldr	r1, [pc, #136]	@ (80030c8 <HAL_RCC_ClockConfig+0x358>)
 800303e:	4313      	orrs	r3, r2
 8003040:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0320 	and.w	r3, r3, #32
 800304a:	2b00      	cmp	r3, #0
 800304c:	d010      	beq.n	8003070 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	69da      	ldr	r2, [r3, #28]
 8003052:	4b1d      	ldr	r3, [pc, #116]	@ (80030c8 <HAL_RCC_ClockConfig+0x358>)
 8003054:	6a1b      	ldr	r3, [r3, #32]
 8003056:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800305a:	429a      	cmp	r2, r3
 800305c:	d208      	bcs.n	8003070 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800305e:	4b1a      	ldr	r3, [pc, #104]	@ (80030c8 <HAL_RCC_ClockConfig+0x358>)
 8003060:	6a1b      	ldr	r3, [r3, #32]
 8003062:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	69db      	ldr	r3, [r3, #28]
 800306a:	4917      	ldr	r1, [pc, #92]	@ (80030c8 <HAL_RCC_ClockConfig+0x358>)
 800306c:	4313      	orrs	r3, r2
 800306e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003070:	f000 f834 	bl	80030dc <HAL_RCC_GetSysClockFreq>
 8003074:	4602      	mov	r2, r0
 8003076:	4b14      	ldr	r3, [pc, #80]	@ (80030c8 <HAL_RCC_ClockConfig+0x358>)
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	0a1b      	lsrs	r3, r3, #8
 800307c:	f003 030f 	and.w	r3, r3, #15
 8003080:	4912      	ldr	r1, [pc, #72]	@ (80030cc <HAL_RCC_ClockConfig+0x35c>)
 8003082:	5ccb      	ldrb	r3, [r1, r3]
 8003084:	f003 031f 	and.w	r3, r3, #31
 8003088:	fa22 f303 	lsr.w	r3, r2, r3
 800308c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800308e:	4b0e      	ldr	r3, [pc, #56]	@ (80030c8 <HAL_RCC_ClockConfig+0x358>)
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	f003 030f 	and.w	r3, r3, #15
 8003096:	4a0d      	ldr	r2, [pc, #52]	@ (80030cc <HAL_RCC_ClockConfig+0x35c>)
 8003098:	5cd3      	ldrb	r3, [r2, r3]
 800309a:	f003 031f 	and.w	r3, r3, #31
 800309e:	693a      	ldr	r2, [r7, #16]
 80030a0:	fa22 f303 	lsr.w	r3, r2, r3
 80030a4:	4a0a      	ldr	r2, [pc, #40]	@ (80030d0 <HAL_RCC_ClockConfig+0x360>)
 80030a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80030a8:	4a0a      	ldr	r2, [pc, #40]	@ (80030d4 <HAL_RCC_ClockConfig+0x364>)
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80030ae:	4b0a      	ldr	r3, [pc, #40]	@ (80030d8 <HAL_RCC_ClockConfig+0x368>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7fe f868 	bl	8001188 <HAL_InitTick>
 80030b8:	4603      	mov	r3, r0
 80030ba:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80030bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3718      	adds	r7, #24
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	58024400 	.word	0x58024400
 80030cc:	08008a0c 	.word	0x08008a0c
 80030d0:	24000004 	.word	0x24000004
 80030d4:	24000000 	.word	0x24000000
 80030d8:	24000008 	.word	0x24000008

080030dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	b089      	sub	sp, #36	@ 0x24
 80030e0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030e2:	4bb3      	ldr	r3, [pc, #716]	@ (80033b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80030ea:	2b18      	cmp	r3, #24
 80030ec:	f200 8155 	bhi.w	800339a <HAL_RCC_GetSysClockFreq+0x2be>
 80030f0:	a201      	add	r2, pc, #4	@ (adr r2, 80030f8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80030f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030f6:	bf00      	nop
 80030f8:	0800315d 	.word	0x0800315d
 80030fc:	0800339b 	.word	0x0800339b
 8003100:	0800339b 	.word	0x0800339b
 8003104:	0800339b 	.word	0x0800339b
 8003108:	0800339b 	.word	0x0800339b
 800310c:	0800339b 	.word	0x0800339b
 8003110:	0800339b 	.word	0x0800339b
 8003114:	0800339b 	.word	0x0800339b
 8003118:	08003183 	.word	0x08003183
 800311c:	0800339b 	.word	0x0800339b
 8003120:	0800339b 	.word	0x0800339b
 8003124:	0800339b 	.word	0x0800339b
 8003128:	0800339b 	.word	0x0800339b
 800312c:	0800339b 	.word	0x0800339b
 8003130:	0800339b 	.word	0x0800339b
 8003134:	0800339b 	.word	0x0800339b
 8003138:	08003189 	.word	0x08003189
 800313c:	0800339b 	.word	0x0800339b
 8003140:	0800339b 	.word	0x0800339b
 8003144:	0800339b 	.word	0x0800339b
 8003148:	0800339b 	.word	0x0800339b
 800314c:	0800339b 	.word	0x0800339b
 8003150:	0800339b 	.word	0x0800339b
 8003154:	0800339b 	.word	0x0800339b
 8003158:	0800318f 	.word	0x0800318f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800315c:	4b94      	ldr	r3, [pc, #592]	@ (80033b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0320 	and.w	r3, r3, #32
 8003164:	2b00      	cmp	r3, #0
 8003166:	d009      	beq.n	800317c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003168:	4b91      	ldr	r3, [pc, #580]	@ (80033b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	08db      	lsrs	r3, r3, #3
 800316e:	f003 0303 	and.w	r3, r3, #3
 8003172:	4a90      	ldr	r2, [pc, #576]	@ (80033b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003174:	fa22 f303 	lsr.w	r3, r2, r3
 8003178:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800317a:	e111      	b.n	80033a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800317c:	4b8d      	ldr	r3, [pc, #564]	@ (80033b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800317e:	61bb      	str	r3, [r7, #24]
      break;
 8003180:	e10e      	b.n	80033a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003182:	4b8d      	ldr	r3, [pc, #564]	@ (80033b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003184:	61bb      	str	r3, [r7, #24]
      break;
 8003186:	e10b      	b.n	80033a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003188:	4b8c      	ldr	r3, [pc, #560]	@ (80033bc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800318a:	61bb      	str	r3, [r7, #24]
      break;
 800318c:	e108      	b.n	80033a0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800318e:	4b88      	ldr	r3, [pc, #544]	@ (80033b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003192:	f003 0303 	and.w	r3, r3, #3
 8003196:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003198:	4b85      	ldr	r3, [pc, #532]	@ (80033b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800319a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800319c:	091b      	lsrs	r3, r3, #4
 800319e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80031a2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80031a4:	4b82      	ldr	r3, [pc, #520]	@ (80033b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031a8:	f003 0301 	and.w	r3, r3, #1
 80031ac:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80031ae:	4b80      	ldr	r3, [pc, #512]	@ (80033b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031b2:	08db      	lsrs	r3, r3, #3
 80031b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80031b8:	68fa      	ldr	r2, [r7, #12]
 80031ba:	fb02 f303 	mul.w	r3, r2, r3
 80031be:	ee07 3a90 	vmov	s15, r3
 80031c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031c6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	f000 80e1 	beq.w	8003394 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	f000 8083 	beq.w	80032e0 <HAL_RCC_GetSysClockFreq+0x204>
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	2b02      	cmp	r3, #2
 80031de:	f200 80a1 	bhi.w	8003324 <HAL_RCC_GetSysClockFreq+0x248>
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d003      	beq.n	80031f0 <HAL_RCC_GetSysClockFreq+0x114>
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d056      	beq.n	800329c <HAL_RCC_GetSysClockFreq+0x1c0>
 80031ee:	e099      	b.n	8003324 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80031f0:	4b6f      	ldr	r3, [pc, #444]	@ (80033b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0320 	and.w	r3, r3, #32
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d02d      	beq.n	8003258 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80031fc:	4b6c      	ldr	r3, [pc, #432]	@ (80033b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	08db      	lsrs	r3, r3, #3
 8003202:	f003 0303 	and.w	r3, r3, #3
 8003206:	4a6b      	ldr	r2, [pc, #428]	@ (80033b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003208:	fa22 f303 	lsr.w	r3, r2, r3
 800320c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	ee07 3a90 	vmov	s15, r3
 8003214:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	ee07 3a90 	vmov	s15, r3
 800321e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003222:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003226:	4b62      	ldr	r3, [pc, #392]	@ (80033b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800322a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800322e:	ee07 3a90 	vmov	s15, r3
 8003232:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003236:	ed97 6a02 	vldr	s12, [r7, #8]
 800323a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80033c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800323e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003242:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003246:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800324a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800324e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003252:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003256:	e087      	b.n	8003368 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	ee07 3a90 	vmov	s15, r3
 800325e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003262:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80033c4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003266:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800326a:	4b51      	ldr	r3, [pc, #324]	@ (80033b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800326c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800326e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003272:	ee07 3a90 	vmov	s15, r3
 8003276:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800327a:	ed97 6a02 	vldr	s12, [r7, #8]
 800327e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80033c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003282:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003286:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800328a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800328e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003292:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003296:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800329a:	e065      	b.n	8003368 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	ee07 3a90 	vmov	s15, r3
 80032a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032a6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80033c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80032aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032ae:	4b40      	ldr	r3, [pc, #256]	@ (80033b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032b6:	ee07 3a90 	vmov	s15, r3
 80032ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032be:	ed97 6a02 	vldr	s12, [r7, #8]
 80032c2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80033c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80032d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80032de:	e043      	b.n	8003368 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	ee07 3a90 	vmov	s15, r3
 80032e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032ea:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80033cc <HAL_RCC_GetSysClockFreq+0x2f0>
 80032ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032f2:	4b2f      	ldr	r3, [pc, #188]	@ (80033b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032fa:	ee07 3a90 	vmov	s15, r3
 80032fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003302:	ed97 6a02 	vldr	s12, [r7, #8]
 8003306:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80033c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800330a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800330e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003312:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003316:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800331a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800331e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003322:	e021      	b.n	8003368 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	ee07 3a90 	vmov	s15, r3
 800332a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800332e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80033c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003332:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003336:	4b1e      	ldr	r3, [pc, #120]	@ (80033b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800333a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800333e:	ee07 3a90 	vmov	s15, r3
 8003342:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003346:	ed97 6a02 	vldr	s12, [r7, #8]
 800334a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80033c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800334e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003352:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003356:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800335a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800335e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003362:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003366:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003368:	4b11      	ldr	r3, [pc, #68]	@ (80033b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800336a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800336c:	0a5b      	lsrs	r3, r3, #9
 800336e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003372:	3301      	adds	r3, #1
 8003374:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	ee07 3a90 	vmov	s15, r3
 800337c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003380:	edd7 6a07 	vldr	s13, [r7, #28]
 8003384:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003388:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800338c:	ee17 3a90 	vmov	r3, s15
 8003390:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003392:	e005      	b.n	80033a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003394:	2300      	movs	r3, #0
 8003396:	61bb      	str	r3, [r7, #24]
      break;
 8003398:	e002      	b.n	80033a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800339a:	4b07      	ldr	r3, [pc, #28]	@ (80033b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800339c:	61bb      	str	r3, [r7, #24]
      break;
 800339e:	bf00      	nop
  }

  return sysclockfreq;
 80033a0:	69bb      	ldr	r3, [r7, #24]
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3724      	adds	r7, #36	@ 0x24
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	58024400 	.word	0x58024400
 80033b4:	03d09000 	.word	0x03d09000
 80033b8:	003d0900 	.word	0x003d0900
 80033bc:	007a1200 	.word	0x007a1200
 80033c0:	46000000 	.word	0x46000000
 80033c4:	4c742400 	.word	0x4c742400
 80033c8:	4a742400 	.word	0x4a742400
 80033cc:	4af42400 	.word	0x4af42400

080033d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80033d6:	f7ff fe81 	bl	80030dc <HAL_RCC_GetSysClockFreq>
 80033da:	4602      	mov	r2, r0
 80033dc:	4b10      	ldr	r3, [pc, #64]	@ (8003420 <HAL_RCC_GetHCLKFreq+0x50>)
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	0a1b      	lsrs	r3, r3, #8
 80033e2:	f003 030f 	and.w	r3, r3, #15
 80033e6:	490f      	ldr	r1, [pc, #60]	@ (8003424 <HAL_RCC_GetHCLKFreq+0x54>)
 80033e8:	5ccb      	ldrb	r3, [r1, r3]
 80033ea:	f003 031f 	and.w	r3, r3, #31
 80033ee:	fa22 f303 	lsr.w	r3, r2, r3
 80033f2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80033f4:	4b0a      	ldr	r3, [pc, #40]	@ (8003420 <HAL_RCC_GetHCLKFreq+0x50>)
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	f003 030f 	and.w	r3, r3, #15
 80033fc:	4a09      	ldr	r2, [pc, #36]	@ (8003424 <HAL_RCC_GetHCLKFreq+0x54>)
 80033fe:	5cd3      	ldrb	r3, [r2, r3]
 8003400:	f003 031f 	and.w	r3, r3, #31
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	fa22 f303 	lsr.w	r3, r2, r3
 800340a:	4a07      	ldr	r2, [pc, #28]	@ (8003428 <HAL_RCC_GetHCLKFreq+0x58>)
 800340c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800340e:	4a07      	ldr	r2, [pc, #28]	@ (800342c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003414:	4b04      	ldr	r3, [pc, #16]	@ (8003428 <HAL_RCC_GetHCLKFreq+0x58>)
 8003416:	681b      	ldr	r3, [r3, #0]
}
 8003418:	4618      	mov	r0, r3
 800341a:	3708      	adds	r7, #8
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	58024400 	.word	0x58024400
 8003424:	08008a0c 	.word	0x08008a0c
 8003428:	24000004 	.word	0x24000004
 800342c:	24000000 	.word	0x24000000

08003430 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003434:	f7ff ffcc 	bl	80033d0 <HAL_RCC_GetHCLKFreq>
 8003438:	4602      	mov	r2, r0
 800343a:	4b06      	ldr	r3, [pc, #24]	@ (8003454 <HAL_RCC_GetPCLK1Freq+0x24>)
 800343c:	69db      	ldr	r3, [r3, #28]
 800343e:	091b      	lsrs	r3, r3, #4
 8003440:	f003 0307 	and.w	r3, r3, #7
 8003444:	4904      	ldr	r1, [pc, #16]	@ (8003458 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003446:	5ccb      	ldrb	r3, [r1, r3]
 8003448:	f003 031f 	and.w	r3, r3, #31
 800344c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003450:	4618      	mov	r0, r3
 8003452:	bd80      	pop	{r7, pc}
 8003454:	58024400 	.word	0x58024400
 8003458:	08008a0c 	.word	0x08008a0c

0800345c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003460:	f7ff ffb6 	bl	80033d0 <HAL_RCC_GetHCLKFreq>
 8003464:	4602      	mov	r2, r0
 8003466:	4b06      	ldr	r3, [pc, #24]	@ (8003480 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003468:	69db      	ldr	r3, [r3, #28]
 800346a:	0a1b      	lsrs	r3, r3, #8
 800346c:	f003 0307 	and.w	r3, r3, #7
 8003470:	4904      	ldr	r1, [pc, #16]	@ (8003484 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003472:	5ccb      	ldrb	r3, [r1, r3]
 8003474:	f003 031f 	and.w	r3, r3, #31
 8003478:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800347c:	4618      	mov	r0, r3
 800347e:	bd80      	pop	{r7, pc}
 8003480:	58024400 	.word	0x58024400
 8003484:	08008a0c 	.word	0x08008a0c

08003488 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003488:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800348c:	b0ca      	sub	sp, #296	@ 0x128
 800348e:	af00      	add	r7, sp, #0
 8003490:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003494:	2300      	movs	r3, #0
 8003496:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800349a:	2300      	movs	r3, #0
 800349c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80034a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80034ac:	2500      	movs	r5, #0
 80034ae:	ea54 0305 	orrs.w	r3, r4, r5
 80034b2:	d049      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80034b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80034ba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80034be:	d02f      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80034c0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80034c4:	d828      	bhi.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80034c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80034ca:	d01a      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80034cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80034d0:	d822      	bhi.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d003      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x56>
 80034d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80034da:	d007      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 80034dc:	e01c      	b.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034de:	4bb8      	ldr	r3, [pc, #736]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034e2:	4ab7      	ldr	r2, [pc, #732]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80034ea:	e01a      	b.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80034ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034f0:	3308      	adds	r3, #8
 80034f2:	2102      	movs	r1, #2
 80034f4:	4618      	mov	r0, r3
 80034f6:	f001 fc8f 	bl	8004e18 <RCCEx_PLL2_Config>
 80034fa:	4603      	mov	r3, r0
 80034fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003500:	e00f      	b.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003502:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003506:	3328      	adds	r3, #40	@ 0x28
 8003508:	2102      	movs	r1, #2
 800350a:	4618      	mov	r0, r3
 800350c:	f001 fd36 	bl	8004f7c <RCCEx_PLL3_Config>
 8003510:	4603      	mov	r3, r0
 8003512:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003516:	e004      	b.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800351e:	e000      	b.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003520:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003522:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003526:	2b00      	cmp	r3, #0
 8003528:	d10a      	bne.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800352a:	4ba5      	ldr	r3, [pc, #660]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800352c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800352e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003532:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003536:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003538:	4aa1      	ldr	r2, [pc, #644]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800353a:	430b      	orrs	r3, r1
 800353c:	6513      	str	r3, [r2, #80]	@ 0x50
 800353e:	e003      	b.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003540:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003544:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003548:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800354c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003550:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003554:	f04f 0900 	mov.w	r9, #0
 8003558:	ea58 0309 	orrs.w	r3, r8, r9
 800355c:	d047      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800355e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003562:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003564:	2b04      	cmp	r3, #4
 8003566:	d82a      	bhi.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003568:	a201      	add	r2, pc, #4	@ (adr r2, 8003570 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800356a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800356e:	bf00      	nop
 8003570:	08003585 	.word	0x08003585
 8003574:	08003593 	.word	0x08003593
 8003578:	080035a9 	.word	0x080035a9
 800357c:	080035c7 	.word	0x080035c7
 8003580:	080035c7 	.word	0x080035c7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003584:	4b8e      	ldr	r3, [pc, #568]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003588:	4a8d      	ldr	r2, [pc, #564]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800358a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800358e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003590:	e01a      	b.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003592:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003596:	3308      	adds	r3, #8
 8003598:	2100      	movs	r1, #0
 800359a:	4618      	mov	r0, r3
 800359c:	f001 fc3c 	bl	8004e18 <RCCEx_PLL2_Config>
 80035a0:	4603      	mov	r3, r0
 80035a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035a6:	e00f      	b.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80035a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035ac:	3328      	adds	r3, #40	@ 0x28
 80035ae:	2100      	movs	r1, #0
 80035b0:	4618      	mov	r0, r3
 80035b2:	f001 fce3 	bl	8004f7c <RCCEx_PLL3_Config>
 80035b6:	4603      	mov	r3, r0
 80035b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035bc:	e004      	b.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80035c4:	e000      	b.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80035c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d10a      	bne.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035d0:	4b7b      	ldr	r3, [pc, #492]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035d4:	f023 0107 	bic.w	r1, r3, #7
 80035d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035de:	4a78      	ldr	r2, [pc, #480]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035e0:	430b      	orrs	r3, r1
 80035e2:	6513      	str	r3, [r2, #80]	@ 0x50
 80035e4:	e003      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80035ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80035fa:	f04f 0b00 	mov.w	fp, #0
 80035fe:	ea5a 030b 	orrs.w	r3, sl, fp
 8003602:	d04c      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003604:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003608:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800360a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800360e:	d030      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003610:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003614:	d829      	bhi.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003616:	2bc0      	cmp	r3, #192	@ 0xc0
 8003618:	d02d      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800361a:	2bc0      	cmp	r3, #192	@ 0xc0
 800361c:	d825      	bhi.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800361e:	2b80      	cmp	r3, #128	@ 0x80
 8003620:	d018      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003622:	2b80      	cmp	r3, #128	@ 0x80
 8003624:	d821      	bhi.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003626:	2b00      	cmp	r3, #0
 8003628:	d002      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800362a:	2b40      	cmp	r3, #64	@ 0x40
 800362c:	d007      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800362e:	e01c      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003630:	4b63      	ldr	r3, [pc, #396]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003634:	4a62      	ldr	r2, [pc, #392]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003636:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800363a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800363c:	e01c      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800363e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003642:	3308      	adds	r3, #8
 8003644:	2100      	movs	r1, #0
 8003646:	4618      	mov	r0, r3
 8003648:	f001 fbe6 	bl	8004e18 <RCCEx_PLL2_Config>
 800364c:	4603      	mov	r3, r0
 800364e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003652:	e011      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003654:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003658:	3328      	adds	r3, #40	@ 0x28
 800365a:	2100      	movs	r1, #0
 800365c:	4618      	mov	r0, r3
 800365e:	f001 fc8d 	bl	8004f7c <RCCEx_PLL3_Config>
 8003662:	4603      	mov	r3, r0
 8003664:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003668:	e006      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003670:	e002      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003672:	bf00      	nop
 8003674:	e000      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003676:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003678:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800367c:	2b00      	cmp	r3, #0
 800367e:	d10a      	bne.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003680:	4b4f      	ldr	r3, [pc, #316]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003682:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003684:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003688:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800368c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800368e:	4a4c      	ldr	r2, [pc, #304]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003690:	430b      	orrs	r3, r1
 8003692:	6513      	str	r3, [r2, #80]	@ 0x50
 8003694:	e003      	b.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003696:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800369a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800369e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80036aa:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80036ae:	2300      	movs	r3, #0
 80036b0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80036b4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80036b8:	460b      	mov	r3, r1
 80036ba:	4313      	orrs	r3, r2
 80036bc:	d053      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80036be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036c2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80036c6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80036ca:	d035      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80036cc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80036d0:	d82e      	bhi.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80036d2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80036d6:	d031      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80036d8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80036dc:	d828      	bhi.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80036de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036e2:	d01a      	beq.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x292>
 80036e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036e8:	d822      	bhi.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d003      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80036ee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80036f2:	d007      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80036f4:	e01c      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036f6:	4b32      	ldr	r3, [pc, #200]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036fa:	4a31      	ldr	r2, [pc, #196]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003700:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003702:	e01c      	b.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003704:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003708:	3308      	adds	r3, #8
 800370a:	2100      	movs	r1, #0
 800370c:	4618      	mov	r0, r3
 800370e:	f001 fb83 	bl	8004e18 <RCCEx_PLL2_Config>
 8003712:	4603      	mov	r3, r0
 8003714:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003718:	e011      	b.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800371a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800371e:	3328      	adds	r3, #40	@ 0x28
 8003720:	2100      	movs	r1, #0
 8003722:	4618      	mov	r0, r3
 8003724:	f001 fc2a 	bl	8004f7c <RCCEx_PLL3_Config>
 8003728:	4603      	mov	r3, r0
 800372a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800372e:	e006      	b.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003736:	e002      	b.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003738:	bf00      	nop
 800373a:	e000      	b.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800373c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800373e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003742:	2b00      	cmp	r3, #0
 8003744:	d10b      	bne.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003746:	4b1e      	ldr	r3, [pc, #120]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800374a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800374e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003752:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003756:	4a1a      	ldr	r2, [pc, #104]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003758:	430b      	orrs	r3, r1
 800375a:	6593      	str	r3, [r2, #88]	@ 0x58
 800375c:	e003      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800375e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003762:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003766:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800376a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800376e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003772:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003776:	2300      	movs	r3, #0
 8003778:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800377c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003780:	460b      	mov	r3, r1
 8003782:	4313      	orrs	r3, r2
 8003784:	d056      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800378a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800378e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003792:	d038      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003794:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003798:	d831      	bhi.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x376>
 800379a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800379e:	d034      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x382>
 80037a0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80037a4:	d82b      	bhi.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x376>
 80037a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80037aa:	d01d      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80037ac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80037b0:	d825      	bhi.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x376>
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d006      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80037b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80037ba:	d00a      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80037bc:	e01f      	b.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x376>
 80037be:	bf00      	nop
 80037c0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037c4:	4ba2      	ldr	r3, [pc, #648]	@ (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037c8:	4aa1      	ldr	r2, [pc, #644]	@ (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80037d0:	e01c      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037d6:	3308      	adds	r3, #8
 80037d8:	2100      	movs	r1, #0
 80037da:	4618      	mov	r0, r3
 80037dc:	f001 fb1c 	bl	8004e18 <RCCEx_PLL2_Config>
 80037e0:	4603      	mov	r3, r0
 80037e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80037e6:	e011      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037ec:	3328      	adds	r3, #40	@ 0x28
 80037ee:	2100      	movs	r1, #0
 80037f0:	4618      	mov	r0, r3
 80037f2:	f001 fbc3 	bl	8004f7c <RCCEx_PLL3_Config>
 80037f6:	4603      	mov	r3, r0
 80037f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80037fc:	e006      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003804:	e002      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003806:	bf00      	nop
 8003808:	e000      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800380a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800380c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003810:	2b00      	cmp	r3, #0
 8003812:	d10b      	bne.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003814:	4b8e      	ldr	r3, [pc, #568]	@ (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003816:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003818:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800381c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003820:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003824:	4a8a      	ldr	r2, [pc, #552]	@ (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003826:	430b      	orrs	r3, r1
 8003828:	6593      	str	r3, [r2, #88]	@ 0x58
 800382a:	e003      	b.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800382c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003830:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003834:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800383c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003840:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003844:	2300      	movs	r3, #0
 8003846:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800384a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800384e:	460b      	mov	r3, r1
 8003850:	4313      	orrs	r3, r2
 8003852:	d03a      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003854:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800385a:	2b30      	cmp	r3, #48	@ 0x30
 800385c:	d01f      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800385e:	2b30      	cmp	r3, #48	@ 0x30
 8003860:	d819      	bhi.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003862:	2b20      	cmp	r3, #32
 8003864:	d00c      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003866:	2b20      	cmp	r3, #32
 8003868:	d815      	bhi.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800386a:	2b00      	cmp	r3, #0
 800386c:	d019      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800386e:	2b10      	cmp	r3, #16
 8003870:	d111      	bne.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003872:	4b77      	ldr	r3, [pc, #476]	@ (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003876:	4a76      	ldr	r2, [pc, #472]	@ (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003878:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800387c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800387e:	e011      	b.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003880:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003884:	3308      	adds	r3, #8
 8003886:	2102      	movs	r1, #2
 8003888:	4618      	mov	r0, r3
 800388a:	f001 fac5 	bl	8004e18 <RCCEx_PLL2_Config>
 800388e:	4603      	mov	r3, r0
 8003890:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003894:	e006      	b.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800389c:	e002      	b.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800389e:	bf00      	nop
 80038a0:	e000      	b.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80038a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d10a      	bne.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80038ac:	4b68      	ldr	r3, [pc, #416]	@ (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038b0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80038b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038ba:	4a65      	ldr	r2, [pc, #404]	@ (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038bc:	430b      	orrs	r3, r1
 80038be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80038c0:	e003      	b.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80038ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80038d6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80038da:	2300      	movs	r3, #0
 80038dc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80038e0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80038e4:	460b      	mov	r3, r1
 80038e6:	4313      	orrs	r3, r2
 80038e8:	d051      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80038ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80038f4:	d035      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80038f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80038fa:	d82e      	bhi.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80038fc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003900:	d031      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003902:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003906:	d828      	bhi.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003908:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800390c:	d01a      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800390e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003912:	d822      	bhi.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003914:	2b00      	cmp	r3, #0
 8003916:	d003      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003918:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800391c:	d007      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800391e:	e01c      	b.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003920:	4b4b      	ldr	r3, [pc, #300]	@ (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003924:	4a4a      	ldr	r2, [pc, #296]	@ (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003926:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800392a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800392c:	e01c      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800392e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003932:	3308      	adds	r3, #8
 8003934:	2100      	movs	r1, #0
 8003936:	4618      	mov	r0, r3
 8003938:	f001 fa6e 	bl	8004e18 <RCCEx_PLL2_Config>
 800393c:	4603      	mov	r3, r0
 800393e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003942:	e011      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003944:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003948:	3328      	adds	r3, #40	@ 0x28
 800394a:	2100      	movs	r1, #0
 800394c:	4618      	mov	r0, r3
 800394e:	f001 fb15 	bl	8004f7c <RCCEx_PLL3_Config>
 8003952:	4603      	mov	r3, r0
 8003954:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003958:	e006      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003960:	e002      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003962:	bf00      	nop
 8003964:	e000      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003966:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003968:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800396c:	2b00      	cmp	r3, #0
 800396e:	d10a      	bne.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003970:	4b37      	ldr	r3, [pc, #220]	@ (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003972:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003974:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003978:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800397c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800397e:	4a34      	ldr	r2, [pc, #208]	@ (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003980:	430b      	orrs	r3, r1
 8003982:	6513      	str	r3, [r2, #80]	@ 0x50
 8003984:	e003      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003986:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800398a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800398e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003996:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800399a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800399e:	2300      	movs	r3, #0
 80039a0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80039a4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80039a8:	460b      	mov	r3, r1
 80039aa:	4313      	orrs	r3, r2
 80039ac:	d056      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80039ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80039b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039b8:	d033      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80039ba:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039be:	d82c      	bhi.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80039c0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80039c4:	d02f      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80039c6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80039ca:	d826      	bhi.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80039cc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80039d0:	d02b      	beq.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80039d2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80039d6:	d820      	bhi.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80039d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80039dc:	d012      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80039de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80039e2:	d81a      	bhi.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d022      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80039e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039ec:	d115      	bne.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80039ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039f2:	3308      	adds	r3, #8
 80039f4:	2101      	movs	r1, #1
 80039f6:	4618      	mov	r0, r3
 80039f8:	f001 fa0e 	bl	8004e18 <RCCEx_PLL2_Config>
 80039fc:	4603      	mov	r3, r0
 80039fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003a02:	e015      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a08:	3328      	adds	r3, #40	@ 0x28
 8003a0a:	2101      	movs	r1, #1
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f001 fab5 	bl	8004f7c <RCCEx_PLL3_Config>
 8003a12:	4603      	mov	r3, r0
 8003a14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003a18:	e00a      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a20:	e006      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003a22:	bf00      	nop
 8003a24:	e004      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003a26:	bf00      	nop
 8003a28:	e002      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003a2a:	bf00      	nop
 8003a2c:	e000      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003a2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d10d      	bne.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003a38:	4b05      	ldr	r3, [pc, #20]	@ (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a3c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a46:	4a02      	ldr	r2, [pc, #8]	@ (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a48:	430b      	orrs	r3, r1
 8003a4a:	6513      	str	r3, [r2, #80]	@ 0x50
 8003a4c:	e006      	b.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003a4e:	bf00      	nop
 8003a50:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a58:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a64:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003a68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003a72:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003a76:	460b      	mov	r3, r1
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	d055      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003a7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a80:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003a84:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a88:	d033      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003a8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a8e:	d82c      	bhi.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003a90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a94:	d02f      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003a96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a9a:	d826      	bhi.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003a9c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003aa0:	d02b      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003aa2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003aa6:	d820      	bhi.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003aa8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003aac:	d012      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003aae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ab2:	d81a      	bhi.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d022      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003ab8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003abc:	d115      	bne.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ac2:	3308      	adds	r3, #8
 8003ac4:	2101      	movs	r1, #1
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f001 f9a6 	bl	8004e18 <RCCEx_PLL2_Config>
 8003acc:	4603      	mov	r3, r0
 8003ace:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003ad2:	e015      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ad8:	3328      	adds	r3, #40	@ 0x28
 8003ada:	2101      	movs	r1, #1
 8003adc:	4618      	mov	r0, r3
 8003ade:	f001 fa4d 	bl	8004f7c <RCCEx_PLL3_Config>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003ae8:	e00a      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003af0:	e006      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003af2:	bf00      	nop
 8003af4:	e004      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003af6:	bf00      	nop
 8003af8:	e002      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003afa:	bf00      	nop
 8003afc:	e000      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003afe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d10b      	bne.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003b08:	4ba3      	ldr	r3, [pc, #652]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b0c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003b10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b14:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003b18:	4a9f      	ldr	r2, [pc, #636]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b1a:	430b      	orrs	r3, r1
 8003b1c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b1e:	e003      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b24:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003b28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b30:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003b34:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003b38:	2300      	movs	r3, #0
 8003b3a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003b3e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003b42:	460b      	mov	r3, r1
 8003b44:	4313      	orrs	r3, r2
 8003b46:	d037      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003b48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b52:	d00e      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003b54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b58:	d816      	bhi.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d018      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003b5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b62:	d111      	bne.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b64:	4b8c      	ldr	r3, [pc, #560]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b68:	4a8b      	ldr	r2, [pc, #556]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003b70:	e00f      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b76:	3308      	adds	r3, #8
 8003b78:	2101      	movs	r1, #1
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f001 f94c 	bl	8004e18 <RCCEx_PLL2_Config>
 8003b80:	4603      	mov	r3, r0
 8003b82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003b86:	e004      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b8e:	e000      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003b90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d10a      	bne.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003b9a:	4b7f      	ldr	r3, [pc, #508]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b9e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ba6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ba8:	4a7b      	ldr	r2, [pc, #492]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003baa:	430b      	orrs	r3, r1
 8003bac:	6513      	str	r3, [r2, #80]	@ 0x50
 8003bae:	e003      	b.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bb4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003bb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bc0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003bc4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003bc8:	2300      	movs	r3, #0
 8003bca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003bce:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	d039      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003bd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bde:	2b03      	cmp	r3, #3
 8003be0:	d81c      	bhi.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003be2:	a201      	add	r2, pc, #4	@ (adr r2, 8003be8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003be8:	08003c25 	.word	0x08003c25
 8003bec:	08003bf9 	.word	0x08003bf9
 8003bf0:	08003c07 	.word	0x08003c07
 8003bf4:	08003c25 	.word	0x08003c25
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bf8:	4b67      	ldr	r3, [pc, #412]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bfc:	4a66      	ldr	r2, [pc, #408]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bfe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003c04:	e00f      	b.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c0a:	3308      	adds	r3, #8
 8003c0c:	2102      	movs	r1, #2
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f001 f902 	bl	8004e18 <RCCEx_PLL2_Config>
 8003c14:	4603      	mov	r3, r0
 8003c16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003c1a:	e004      	b.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c22:	e000      	b.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003c24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d10a      	bne.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003c2e:	4b5a      	ldr	r3, [pc, #360]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c32:	f023 0103 	bic.w	r1, r3, #3
 8003c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c3c:	4a56      	ldr	r2, [pc, #344]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c3e:	430b      	orrs	r3, r1
 8003c40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c42:	e003      	b.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c48:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c54:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003c58:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003c62:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003c66:	460b      	mov	r3, r1
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	f000 809f 	beq.w	8003dac <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c6e:	4b4b      	ldr	r3, [pc, #300]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a4a      	ldr	r2, [pc, #296]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003c74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c78:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c7a:	f7fd facf 	bl	800121c <HAL_GetTick>
 8003c7e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c82:	e00b      	b.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c84:	f7fd faca 	bl	800121c <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	2b64      	cmp	r3, #100	@ 0x64
 8003c92:	d903      	bls.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c9a:	e005      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c9c:	4b3f      	ldr	r3, [pc, #252]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d0ed      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003ca8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d179      	bne.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003cb0:	4b39      	ldr	r3, [pc, #228]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cb2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003cb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cb8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003cbc:	4053      	eors	r3, r2
 8003cbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d015      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003cc6:	4b34      	ldr	r3, [pc, #208]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cce:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003cd2:	4b31      	ldr	r3, [pc, #196]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cd6:	4a30      	ldr	r2, [pc, #192]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cdc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003cde:	4b2e      	ldr	r3, [pc, #184]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ce0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ce2:	4a2d      	ldr	r2, [pc, #180]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ce4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ce8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003cea:	4a2b      	ldr	r2, [pc, #172]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003cf0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cf6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003cfa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cfe:	d118      	bne.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d00:	f7fd fa8c 	bl	800121c <HAL_GetTick>
 8003d04:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d08:	e00d      	b.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d0a:	f7fd fa87 	bl	800121c <HAL_GetTick>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003d14:	1ad2      	subs	r2, r2, r3
 8003d16:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d903      	bls.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003d24:	e005      	b.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d26:	4b1c      	ldr	r3, [pc, #112]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d2a:	f003 0302 	and.w	r3, r3, #2
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d0eb      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003d32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d129      	bne.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d3e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003d42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d46:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d4a:	d10e      	bne.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003d4c:	4b12      	ldr	r3, [pc, #72]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d4e:	691b      	ldr	r3, [r3, #16]
 8003d50:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d58:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003d5c:	091a      	lsrs	r2, r3, #4
 8003d5e:	4b10      	ldr	r3, [pc, #64]	@ (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003d60:	4013      	ands	r3, r2
 8003d62:	4a0d      	ldr	r2, [pc, #52]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d64:	430b      	orrs	r3, r1
 8003d66:	6113      	str	r3, [r2, #16]
 8003d68:	e005      	b.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003d6a:	4b0b      	ldr	r3, [pc, #44]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	4a0a      	ldr	r2, [pc, #40]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d70:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003d74:	6113      	str	r3, [r2, #16]
 8003d76:	4b08      	ldr	r3, [pc, #32]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d78:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d7e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003d82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d86:	4a04      	ldr	r2, [pc, #16]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d88:	430b      	orrs	r3, r1
 8003d8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d8c:	e00e      	b.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003d96:	e009      	b.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003d98:	58024400 	.word	0x58024400
 8003d9c:	58024800 	.word	0x58024800
 8003da0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003da4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003da8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003dac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003db4:	f002 0301 	and.w	r3, r2, #1
 8003db8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003dc2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003dc6:	460b      	mov	r3, r1
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	f000 8089 	beq.w	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dd2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003dd4:	2b28      	cmp	r3, #40	@ 0x28
 8003dd6:	d86b      	bhi.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003dd8:	a201      	add	r2, pc, #4	@ (adr r2, 8003de0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dde:	bf00      	nop
 8003de0:	08003eb9 	.word	0x08003eb9
 8003de4:	08003eb1 	.word	0x08003eb1
 8003de8:	08003eb1 	.word	0x08003eb1
 8003dec:	08003eb1 	.word	0x08003eb1
 8003df0:	08003eb1 	.word	0x08003eb1
 8003df4:	08003eb1 	.word	0x08003eb1
 8003df8:	08003eb1 	.word	0x08003eb1
 8003dfc:	08003eb1 	.word	0x08003eb1
 8003e00:	08003e85 	.word	0x08003e85
 8003e04:	08003eb1 	.word	0x08003eb1
 8003e08:	08003eb1 	.word	0x08003eb1
 8003e0c:	08003eb1 	.word	0x08003eb1
 8003e10:	08003eb1 	.word	0x08003eb1
 8003e14:	08003eb1 	.word	0x08003eb1
 8003e18:	08003eb1 	.word	0x08003eb1
 8003e1c:	08003eb1 	.word	0x08003eb1
 8003e20:	08003e9b 	.word	0x08003e9b
 8003e24:	08003eb1 	.word	0x08003eb1
 8003e28:	08003eb1 	.word	0x08003eb1
 8003e2c:	08003eb1 	.word	0x08003eb1
 8003e30:	08003eb1 	.word	0x08003eb1
 8003e34:	08003eb1 	.word	0x08003eb1
 8003e38:	08003eb1 	.word	0x08003eb1
 8003e3c:	08003eb1 	.word	0x08003eb1
 8003e40:	08003eb9 	.word	0x08003eb9
 8003e44:	08003eb1 	.word	0x08003eb1
 8003e48:	08003eb1 	.word	0x08003eb1
 8003e4c:	08003eb1 	.word	0x08003eb1
 8003e50:	08003eb1 	.word	0x08003eb1
 8003e54:	08003eb1 	.word	0x08003eb1
 8003e58:	08003eb1 	.word	0x08003eb1
 8003e5c:	08003eb1 	.word	0x08003eb1
 8003e60:	08003eb9 	.word	0x08003eb9
 8003e64:	08003eb1 	.word	0x08003eb1
 8003e68:	08003eb1 	.word	0x08003eb1
 8003e6c:	08003eb1 	.word	0x08003eb1
 8003e70:	08003eb1 	.word	0x08003eb1
 8003e74:	08003eb1 	.word	0x08003eb1
 8003e78:	08003eb1 	.word	0x08003eb1
 8003e7c:	08003eb1 	.word	0x08003eb1
 8003e80:	08003eb9 	.word	0x08003eb9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e88:	3308      	adds	r3, #8
 8003e8a:	2101      	movs	r1, #1
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f000 ffc3 	bl	8004e18 <RCCEx_PLL2_Config>
 8003e92:	4603      	mov	r3, r0
 8003e94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003e98:	e00f      	b.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e9e:	3328      	adds	r3, #40	@ 0x28
 8003ea0:	2101      	movs	r1, #1
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f001 f86a 	bl	8004f7c <RCCEx_PLL3_Config>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003eae:	e004      	b.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003eb6:	e000      	b.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003eb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003eba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d10a      	bne.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003ec2:	4bbf      	ldr	r3, [pc, #764]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ec4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ec6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ece:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ed0:	4abb      	ldr	r2, [pc, #748]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ed2:	430b      	orrs	r3, r1
 8003ed4:	6553      	str	r3, [r2, #84]	@ 0x54
 8003ed6:	e003      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ed8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003edc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee8:	f002 0302 	and.w	r3, r2, #2
 8003eec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003ef6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003efa:	460b      	mov	r3, r1
 8003efc:	4313      	orrs	r3, r2
 8003efe:	d041      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003f00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f06:	2b05      	cmp	r3, #5
 8003f08:	d824      	bhi.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003f0a:	a201      	add	r2, pc, #4	@ (adr r2, 8003f10 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f10:	08003f5d 	.word	0x08003f5d
 8003f14:	08003f29 	.word	0x08003f29
 8003f18:	08003f3f 	.word	0x08003f3f
 8003f1c:	08003f5d 	.word	0x08003f5d
 8003f20:	08003f5d 	.word	0x08003f5d
 8003f24:	08003f5d 	.word	0x08003f5d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f2c:	3308      	adds	r3, #8
 8003f2e:	2101      	movs	r1, #1
 8003f30:	4618      	mov	r0, r3
 8003f32:	f000 ff71 	bl	8004e18 <RCCEx_PLL2_Config>
 8003f36:	4603      	mov	r3, r0
 8003f38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003f3c:	e00f      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f42:	3328      	adds	r3, #40	@ 0x28
 8003f44:	2101      	movs	r1, #1
 8003f46:	4618      	mov	r0, r3
 8003f48:	f001 f818 	bl	8004f7c <RCCEx_PLL3_Config>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003f52:	e004      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f5a:	e000      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003f5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d10a      	bne.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003f66:	4b96      	ldr	r3, [pc, #600]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f6a:	f023 0107 	bic.w	r1, r3, #7
 8003f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f72:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f74:	4a92      	ldr	r2, [pc, #584]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f76:	430b      	orrs	r3, r1
 8003f78:	6553      	str	r3, [r2, #84]	@ 0x54
 8003f7a:	e003      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f8c:	f002 0304 	and.w	r3, r2, #4
 8003f90:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f94:	2300      	movs	r3, #0
 8003f96:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f9a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003f9e:	460b      	mov	r3, r1
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	d044      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fac:	2b05      	cmp	r3, #5
 8003fae:	d825      	bhi.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003fb0:	a201      	add	r2, pc, #4	@ (adr r2, 8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb6:	bf00      	nop
 8003fb8:	08004005 	.word	0x08004005
 8003fbc:	08003fd1 	.word	0x08003fd1
 8003fc0:	08003fe7 	.word	0x08003fe7
 8003fc4:	08004005 	.word	0x08004005
 8003fc8:	08004005 	.word	0x08004005
 8003fcc:	08004005 	.word	0x08004005
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003fd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fd4:	3308      	adds	r3, #8
 8003fd6:	2101      	movs	r1, #1
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f000 ff1d 	bl	8004e18 <RCCEx_PLL2_Config>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003fe4:	e00f      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fea:	3328      	adds	r3, #40	@ 0x28
 8003fec:	2101      	movs	r1, #1
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f000 ffc4 	bl	8004f7c <RCCEx_PLL3_Config>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003ffa:	e004      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004002:	e000      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004004:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004006:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800400a:	2b00      	cmp	r3, #0
 800400c:	d10b      	bne.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800400e:	4b6c      	ldr	r3, [pc, #432]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004010:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004012:	f023 0107 	bic.w	r1, r3, #7
 8004016:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800401a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800401e:	4a68      	ldr	r2, [pc, #416]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004020:	430b      	orrs	r3, r1
 8004022:	6593      	str	r3, [r2, #88]	@ 0x58
 8004024:	e003      	b.n	800402e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004026:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800402a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800402e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004036:	f002 0320 	and.w	r3, r2, #32
 800403a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800403e:	2300      	movs	r3, #0
 8004040:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004044:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004048:	460b      	mov	r3, r1
 800404a:	4313      	orrs	r3, r2
 800404c:	d055      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800404e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004052:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004056:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800405a:	d033      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800405c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004060:	d82c      	bhi.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004062:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004066:	d02f      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004068:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800406c:	d826      	bhi.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800406e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004072:	d02b      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004074:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004078:	d820      	bhi.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800407a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800407e:	d012      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004080:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004084:	d81a      	bhi.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004086:	2b00      	cmp	r3, #0
 8004088:	d022      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800408a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800408e:	d115      	bne.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004090:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004094:	3308      	adds	r3, #8
 8004096:	2100      	movs	r1, #0
 8004098:	4618      	mov	r0, r3
 800409a:	f000 febd 	bl	8004e18 <RCCEx_PLL2_Config>
 800409e:	4603      	mov	r3, r0
 80040a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80040a4:	e015      	b.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80040a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040aa:	3328      	adds	r3, #40	@ 0x28
 80040ac:	2102      	movs	r1, #2
 80040ae:	4618      	mov	r0, r3
 80040b0:	f000 ff64 	bl	8004f7c <RCCEx_PLL3_Config>
 80040b4:	4603      	mov	r3, r0
 80040b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80040ba:	e00a      	b.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80040c2:	e006      	b.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80040c4:	bf00      	nop
 80040c6:	e004      	b.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80040c8:	bf00      	nop
 80040ca:	e002      	b.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80040cc:	bf00      	nop
 80040ce:	e000      	b.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80040d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d10b      	bne.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80040da:	4b39      	ldr	r3, [pc, #228]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040de:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80040e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040ea:	4a35      	ldr	r2, [pc, #212]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040ec:	430b      	orrs	r3, r1
 80040ee:	6553      	str	r3, [r2, #84]	@ 0x54
 80040f0:	e003      	b.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80040fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004102:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004106:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800410a:	2300      	movs	r3, #0
 800410c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004110:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004114:	460b      	mov	r3, r1
 8004116:	4313      	orrs	r3, r2
 8004118:	d058      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800411a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800411e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004122:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004126:	d033      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004128:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800412c:	d82c      	bhi.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800412e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004132:	d02f      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004134:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004138:	d826      	bhi.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800413a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800413e:	d02b      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004140:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004144:	d820      	bhi.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004146:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800414a:	d012      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800414c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004150:	d81a      	bhi.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004152:	2b00      	cmp	r3, #0
 8004154:	d022      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004156:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800415a:	d115      	bne.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800415c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004160:	3308      	adds	r3, #8
 8004162:	2100      	movs	r1, #0
 8004164:	4618      	mov	r0, r3
 8004166:	f000 fe57 	bl	8004e18 <RCCEx_PLL2_Config>
 800416a:	4603      	mov	r3, r0
 800416c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004170:	e015      	b.n	800419e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004172:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004176:	3328      	adds	r3, #40	@ 0x28
 8004178:	2102      	movs	r1, #2
 800417a:	4618      	mov	r0, r3
 800417c:	f000 fefe 	bl	8004f7c <RCCEx_PLL3_Config>
 8004180:	4603      	mov	r3, r0
 8004182:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004186:	e00a      	b.n	800419e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800418e:	e006      	b.n	800419e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004190:	bf00      	nop
 8004192:	e004      	b.n	800419e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004194:	bf00      	nop
 8004196:	e002      	b.n	800419e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004198:	bf00      	nop
 800419a:	e000      	b.n	800419e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800419c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800419e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d10e      	bne.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80041a6:	4b06      	ldr	r3, [pc, #24]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041aa:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80041ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80041b6:	4a02      	ldr	r2, [pc, #8]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041b8:	430b      	orrs	r3, r1
 80041ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80041bc:	e006      	b.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80041be:	bf00      	nop
 80041c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80041cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80041d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80041dc:	2300      	movs	r3, #0
 80041de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80041e2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80041e6:	460b      	mov	r3, r1
 80041e8:	4313      	orrs	r3, r2
 80041ea:	d055      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80041ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80041f4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80041f8:	d033      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80041fa:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80041fe:	d82c      	bhi.n	800425a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004200:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004204:	d02f      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004206:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800420a:	d826      	bhi.n	800425a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800420c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004210:	d02b      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004212:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004216:	d820      	bhi.n	800425a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004218:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800421c:	d012      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800421e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004222:	d81a      	bhi.n	800425a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004224:	2b00      	cmp	r3, #0
 8004226:	d022      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004228:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800422c:	d115      	bne.n	800425a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800422e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004232:	3308      	adds	r3, #8
 8004234:	2100      	movs	r1, #0
 8004236:	4618      	mov	r0, r3
 8004238:	f000 fdee 	bl	8004e18 <RCCEx_PLL2_Config>
 800423c:	4603      	mov	r3, r0
 800423e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004242:	e015      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004244:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004248:	3328      	adds	r3, #40	@ 0x28
 800424a:	2102      	movs	r1, #2
 800424c:	4618      	mov	r0, r3
 800424e:	f000 fe95 	bl	8004f7c <RCCEx_PLL3_Config>
 8004252:	4603      	mov	r3, r0
 8004254:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004258:	e00a      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004260:	e006      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004262:	bf00      	nop
 8004264:	e004      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004266:	bf00      	nop
 8004268:	e002      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800426a:	bf00      	nop
 800426c:	e000      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800426e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004270:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004274:	2b00      	cmp	r3, #0
 8004276:	d10b      	bne.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004278:	4ba1      	ldr	r3, [pc, #644]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800427a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800427c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004280:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004284:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004288:	4a9d      	ldr	r2, [pc, #628]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800428a:	430b      	orrs	r3, r1
 800428c:	6593      	str	r3, [r2, #88]	@ 0x58
 800428e:	e003      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004290:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004294:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004298:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800429c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a0:	f002 0308 	and.w	r3, r2, #8
 80042a4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80042a8:	2300      	movs	r3, #0
 80042aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80042ae:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80042b2:	460b      	mov	r3, r1
 80042b4:	4313      	orrs	r3, r2
 80042b6:	d01e      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80042b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042c4:	d10c      	bne.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80042c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042ca:	3328      	adds	r3, #40	@ 0x28
 80042cc:	2102      	movs	r1, #2
 80042ce:	4618      	mov	r0, r3
 80042d0:	f000 fe54 	bl	8004f7c <RCCEx_PLL3_Config>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d002      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80042e0:	4b87      	ldr	r3, [pc, #540]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042e4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80042e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042f0:	4a83      	ldr	r2, [pc, #524]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042f2:	430b      	orrs	r3, r1
 80042f4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80042f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042fe:	f002 0310 	and.w	r3, r2, #16
 8004302:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004306:	2300      	movs	r3, #0
 8004308:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800430c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004310:	460b      	mov	r3, r1
 8004312:	4313      	orrs	r3, r2
 8004314:	d01e      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004316:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800431a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800431e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004322:	d10c      	bne.n	800433e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004324:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004328:	3328      	adds	r3, #40	@ 0x28
 800432a:	2102      	movs	r1, #2
 800432c:	4618      	mov	r0, r3
 800432e:	f000 fe25 	bl	8004f7c <RCCEx_PLL3_Config>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d002      	beq.n	800433e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800433e:	4b70      	ldr	r3, [pc, #448]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004340:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004342:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004346:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800434a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800434e:	4a6c      	ldr	r2, [pc, #432]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004350:	430b      	orrs	r3, r1
 8004352:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004354:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800435c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004360:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004364:	2300      	movs	r3, #0
 8004366:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800436a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800436e:	460b      	mov	r3, r1
 8004370:	4313      	orrs	r3, r2
 8004372:	d03e      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004374:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004378:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800437c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004380:	d022      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004382:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004386:	d81b      	bhi.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004388:	2b00      	cmp	r3, #0
 800438a:	d003      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800438c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004390:	d00b      	beq.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004392:	e015      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004394:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004398:	3308      	adds	r3, #8
 800439a:	2100      	movs	r1, #0
 800439c:	4618      	mov	r0, r3
 800439e:	f000 fd3b 	bl	8004e18 <RCCEx_PLL2_Config>
 80043a2:	4603      	mov	r3, r0
 80043a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80043a8:	e00f      	b.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80043aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ae:	3328      	adds	r3, #40	@ 0x28
 80043b0:	2102      	movs	r1, #2
 80043b2:	4618      	mov	r0, r3
 80043b4:	f000 fde2 	bl	8004f7c <RCCEx_PLL3_Config>
 80043b8:	4603      	mov	r3, r0
 80043ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80043be:	e004      	b.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80043c6:	e000      	b.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80043c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d10b      	bne.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043d2:	4b4b      	ldr	r3, [pc, #300]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043d6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80043da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80043e2:	4a47      	ldr	r2, [pc, #284]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043e4:	430b      	orrs	r3, r1
 80043e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80043e8:	e003      	b.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80043f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043fa:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80043fe:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004400:	2300      	movs	r3, #0
 8004402:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004404:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004408:	460b      	mov	r3, r1
 800440a:	4313      	orrs	r3, r2
 800440c:	d03b      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800440e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004412:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004416:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800441a:	d01f      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800441c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004420:	d818      	bhi.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004422:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004426:	d003      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004428:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800442c:	d007      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800442e:	e011      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004430:	4b33      	ldr	r3, [pc, #204]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004434:	4a32      	ldr	r2, [pc, #200]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004436:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800443a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800443c:	e00f      	b.n	800445e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800443e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004442:	3328      	adds	r3, #40	@ 0x28
 8004444:	2101      	movs	r1, #1
 8004446:	4618      	mov	r0, r3
 8004448:	f000 fd98 	bl	8004f7c <RCCEx_PLL3_Config>
 800444c:	4603      	mov	r3, r0
 800444e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004452:	e004      	b.n	800445e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800445a:	e000      	b.n	800445e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800445c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800445e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004462:	2b00      	cmp	r3, #0
 8004464:	d10b      	bne.n	800447e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004466:	4b26      	ldr	r3, [pc, #152]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004468:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800446a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800446e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004472:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004476:	4a22      	ldr	r2, [pc, #136]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004478:	430b      	orrs	r3, r1
 800447a:	6553      	str	r3, [r2, #84]	@ 0x54
 800447c:	e003      	b.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800447e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004482:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004486:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800448a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800448e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004492:	673b      	str	r3, [r7, #112]	@ 0x70
 8004494:	2300      	movs	r3, #0
 8004496:	677b      	str	r3, [r7, #116]	@ 0x74
 8004498:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800449c:	460b      	mov	r3, r1
 800449e:	4313      	orrs	r3, r2
 80044a0:	d034      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80044a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d003      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80044ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044b0:	d007      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80044b2:	e011      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044b4:	4b12      	ldr	r3, [pc, #72]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044b8:	4a11      	ldr	r2, [pc, #68]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80044c0:	e00e      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80044c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044c6:	3308      	adds	r3, #8
 80044c8:	2102      	movs	r1, #2
 80044ca:	4618      	mov	r0, r3
 80044cc:	f000 fca4 	bl	8004e18 <RCCEx_PLL2_Config>
 80044d0:	4603      	mov	r3, r0
 80044d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80044d6:	e003      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80044de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d10d      	bne.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80044e8:	4b05      	ldr	r3, [pc, #20]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044ec:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80044f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044f6:	4a02      	ldr	r2, [pc, #8]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044f8:	430b      	orrs	r3, r1
 80044fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80044fc:	e006      	b.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80044fe:	bf00      	nop
 8004500:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004504:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004508:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800450c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004514:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004518:	66bb      	str	r3, [r7, #104]	@ 0x68
 800451a:	2300      	movs	r3, #0
 800451c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800451e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004522:	460b      	mov	r3, r1
 8004524:	4313      	orrs	r3, r2
 8004526:	d00c      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004528:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800452c:	3328      	adds	r3, #40	@ 0x28
 800452e:	2102      	movs	r1, #2
 8004530:	4618      	mov	r0, r3
 8004532:	f000 fd23 	bl	8004f7c <RCCEx_PLL3_Config>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d002      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004542:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800454a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800454e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004550:	2300      	movs	r3, #0
 8004552:	667b      	str	r3, [r7, #100]	@ 0x64
 8004554:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004558:	460b      	mov	r3, r1
 800455a:	4313      	orrs	r3, r2
 800455c:	d038      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800455e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004562:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004566:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800456a:	d018      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800456c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004570:	d811      	bhi.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004572:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004576:	d014      	beq.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004578:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800457c:	d80b      	bhi.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800457e:	2b00      	cmp	r3, #0
 8004580:	d011      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004582:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004586:	d106      	bne.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004588:	4bc3      	ldr	r3, [pc, #780]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800458a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800458c:	4ac2      	ldr	r2, [pc, #776]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800458e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004592:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004594:	e008      	b.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800459c:	e004      	b.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800459e:	bf00      	nop
 80045a0:	e002      	b.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80045a2:	bf00      	nop
 80045a4:	e000      	b.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80045a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d10b      	bne.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80045b0:	4bb9      	ldr	r3, [pc, #740]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045b4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80045b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045c0:	4ab5      	ldr	r2, [pc, #724]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045c2:	430b      	orrs	r3, r1
 80045c4:	6553      	str	r3, [r2, #84]	@ 0x54
 80045c6:	e003      	b.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80045d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80045dc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80045de:	2300      	movs	r3, #0
 80045e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80045e2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80045e6:	460b      	mov	r3, r1
 80045e8:	4313      	orrs	r3, r2
 80045ea:	d009      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80045ec:	4baa      	ldr	r3, [pc, #680]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045f0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80045f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045fa:	4aa7      	ldr	r2, [pc, #668]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045fc:	430b      	orrs	r3, r1
 80045fe:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004600:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004608:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800460c:	653b      	str	r3, [r7, #80]	@ 0x50
 800460e:	2300      	movs	r3, #0
 8004610:	657b      	str	r3, [r7, #84]	@ 0x54
 8004612:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004616:	460b      	mov	r3, r1
 8004618:	4313      	orrs	r3, r2
 800461a:	d00a      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800461c:	4b9e      	ldr	r3, [pc, #632]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800461e:	691b      	ldr	r3, [r3, #16]
 8004620:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004624:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004628:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800462c:	4a9a      	ldr	r2, [pc, #616]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800462e:	430b      	orrs	r3, r1
 8004630:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004632:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800463a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800463e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004640:	2300      	movs	r3, #0
 8004642:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004644:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004648:	460b      	mov	r3, r1
 800464a:	4313      	orrs	r3, r2
 800464c:	d009      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800464e:	4b92      	ldr	r3, [pc, #584]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004650:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004652:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004656:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800465a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800465c:	4a8e      	ldr	r2, [pc, #568]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800465e:	430b      	orrs	r3, r1
 8004660:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004662:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800466a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800466e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004670:	2300      	movs	r3, #0
 8004672:	647b      	str	r3, [r7, #68]	@ 0x44
 8004674:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004678:	460b      	mov	r3, r1
 800467a:	4313      	orrs	r3, r2
 800467c:	d00e      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800467e:	4b86      	ldr	r3, [pc, #536]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	4a85      	ldr	r2, [pc, #532]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004684:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004688:	6113      	str	r3, [r2, #16]
 800468a:	4b83      	ldr	r3, [pc, #524]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800468c:	6919      	ldr	r1, [r3, #16]
 800468e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004692:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004696:	4a80      	ldr	r2, [pc, #512]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004698:	430b      	orrs	r3, r1
 800469a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800469c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80046a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80046aa:	2300      	movs	r3, #0
 80046ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80046ae:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80046b2:	460b      	mov	r3, r1
 80046b4:	4313      	orrs	r3, r2
 80046b6:	d009      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80046b8:	4b77      	ldr	r3, [pc, #476]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046bc:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80046c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046c6:	4a74      	ldr	r2, [pc, #464]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046c8:	430b      	orrs	r3, r1
 80046ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80046cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80046d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80046da:	2300      	movs	r3, #0
 80046dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80046de:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80046e2:	460b      	mov	r3, r1
 80046e4:	4313      	orrs	r3, r2
 80046e6:	d00a      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80046e8:	4b6b      	ldr	r3, [pc, #428]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046ec:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80046f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80046f8:	4a67      	ldr	r2, [pc, #412]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046fa:	430b      	orrs	r3, r1
 80046fc:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80046fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004706:	2100      	movs	r1, #0
 8004708:	62b9      	str	r1, [r7, #40]	@ 0x28
 800470a:	f003 0301 	and.w	r3, r3, #1
 800470e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004710:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004714:	460b      	mov	r3, r1
 8004716:	4313      	orrs	r3, r2
 8004718:	d011      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800471a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800471e:	3308      	adds	r3, #8
 8004720:	2100      	movs	r1, #0
 8004722:	4618      	mov	r0, r3
 8004724:	f000 fb78 	bl	8004e18 <RCCEx_PLL2_Config>
 8004728:	4603      	mov	r3, r0
 800472a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800472e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004732:	2b00      	cmp	r3, #0
 8004734:	d003      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004736:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800473a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800473e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004746:	2100      	movs	r1, #0
 8004748:	6239      	str	r1, [r7, #32]
 800474a:	f003 0302 	and.w	r3, r3, #2
 800474e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004750:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004754:	460b      	mov	r3, r1
 8004756:	4313      	orrs	r3, r2
 8004758:	d011      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800475a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800475e:	3308      	adds	r3, #8
 8004760:	2101      	movs	r1, #1
 8004762:	4618      	mov	r0, r3
 8004764:	f000 fb58 	bl	8004e18 <RCCEx_PLL2_Config>
 8004768:	4603      	mov	r3, r0
 800476a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800476e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004772:	2b00      	cmp	r3, #0
 8004774:	d003      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004776:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800477a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800477e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004786:	2100      	movs	r1, #0
 8004788:	61b9      	str	r1, [r7, #24]
 800478a:	f003 0304 	and.w	r3, r3, #4
 800478e:	61fb      	str	r3, [r7, #28]
 8004790:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004794:	460b      	mov	r3, r1
 8004796:	4313      	orrs	r3, r2
 8004798:	d011      	beq.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800479a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800479e:	3308      	adds	r3, #8
 80047a0:	2102      	movs	r1, #2
 80047a2:	4618      	mov	r0, r3
 80047a4:	f000 fb38 	bl	8004e18 <RCCEx_PLL2_Config>
 80047a8:	4603      	mov	r3, r0
 80047aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80047ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d003      	beq.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80047be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c6:	2100      	movs	r1, #0
 80047c8:	6139      	str	r1, [r7, #16]
 80047ca:	f003 0308 	and.w	r3, r3, #8
 80047ce:	617b      	str	r3, [r7, #20]
 80047d0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80047d4:	460b      	mov	r3, r1
 80047d6:	4313      	orrs	r3, r2
 80047d8:	d011      	beq.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80047da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047de:	3328      	adds	r3, #40	@ 0x28
 80047e0:	2100      	movs	r1, #0
 80047e2:	4618      	mov	r0, r3
 80047e4:	f000 fbca 	bl	8004f7c <RCCEx_PLL3_Config>
 80047e8:	4603      	mov	r3, r0
 80047ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80047ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d003      	beq.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80047fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004806:	2100      	movs	r1, #0
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	f003 0310 	and.w	r3, r3, #16
 800480e:	60fb      	str	r3, [r7, #12]
 8004810:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004814:	460b      	mov	r3, r1
 8004816:	4313      	orrs	r3, r2
 8004818:	d011      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800481a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800481e:	3328      	adds	r3, #40	@ 0x28
 8004820:	2101      	movs	r1, #1
 8004822:	4618      	mov	r0, r3
 8004824:	f000 fbaa 	bl	8004f7c <RCCEx_PLL3_Config>
 8004828:	4603      	mov	r3, r0
 800482a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800482e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004832:	2b00      	cmp	r3, #0
 8004834:	d003      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004836:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800483a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800483e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004846:	2100      	movs	r1, #0
 8004848:	6039      	str	r1, [r7, #0]
 800484a:	f003 0320 	and.w	r3, r3, #32
 800484e:	607b      	str	r3, [r7, #4]
 8004850:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004854:	460b      	mov	r3, r1
 8004856:	4313      	orrs	r3, r2
 8004858:	d011      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800485a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800485e:	3328      	adds	r3, #40	@ 0x28
 8004860:	2102      	movs	r1, #2
 8004862:	4618      	mov	r0, r3
 8004864:	f000 fb8a 	bl	8004f7c <RCCEx_PLL3_Config>
 8004868:	4603      	mov	r3, r0
 800486a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800486e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004872:	2b00      	cmp	r3, #0
 8004874:	d003      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004876:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800487a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800487e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004882:	2b00      	cmp	r3, #0
 8004884:	d101      	bne.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004886:	2300      	movs	r3, #0
 8004888:	e000      	b.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
}
 800488c:	4618      	mov	r0, r3
 800488e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004892:	46bd      	mov	sp, r7
 8004894:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004898:	58024400 	.word	0x58024400

0800489c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80048a0:	f7fe fd96 	bl	80033d0 <HAL_RCC_GetHCLKFreq>
 80048a4:	4602      	mov	r2, r0
 80048a6:	4b06      	ldr	r3, [pc, #24]	@ (80048c0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80048a8:	6a1b      	ldr	r3, [r3, #32]
 80048aa:	091b      	lsrs	r3, r3, #4
 80048ac:	f003 0307 	and.w	r3, r3, #7
 80048b0:	4904      	ldr	r1, [pc, #16]	@ (80048c4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80048b2:	5ccb      	ldrb	r3, [r1, r3]
 80048b4:	f003 031f 	and.w	r3, r3, #31
 80048b8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80048bc:	4618      	mov	r0, r3
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	58024400 	.word	0x58024400
 80048c4:	08008a0c 	.word	0x08008a0c

080048c8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b089      	sub	sp, #36	@ 0x24
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80048d0:	4ba1      	ldr	r3, [pc, #644]	@ (8004b58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048d4:	f003 0303 	and.w	r3, r3, #3
 80048d8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80048da:	4b9f      	ldr	r3, [pc, #636]	@ (8004b58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048de:	0b1b      	lsrs	r3, r3, #12
 80048e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80048e4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80048e6:	4b9c      	ldr	r3, [pc, #624]	@ (8004b58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ea:	091b      	lsrs	r3, r3, #4
 80048ec:	f003 0301 	and.w	r3, r3, #1
 80048f0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80048f2:	4b99      	ldr	r3, [pc, #612]	@ (8004b58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048f6:	08db      	lsrs	r3, r3, #3
 80048f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80048fc:	693a      	ldr	r2, [r7, #16]
 80048fe:	fb02 f303 	mul.w	r3, r2, r3
 8004902:	ee07 3a90 	vmov	s15, r3
 8004906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800490a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	2b00      	cmp	r3, #0
 8004912:	f000 8111 	beq.w	8004b38 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	2b02      	cmp	r3, #2
 800491a:	f000 8083 	beq.w	8004a24 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	2b02      	cmp	r3, #2
 8004922:	f200 80a1 	bhi.w	8004a68 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d003      	beq.n	8004934 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	2b01      	cmp	r3, #1
 8004930:	d056      	beq.n	80049e0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004932:	e099      	b.n	8004a68 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004934:	4b88      	ldr	r3, [pc, #544]	@ (8004b58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0320 	and.w	r3, r3, #32
 800493c:	2b00      	cmp	r3, #0
 800493e:	d02d      	beq.n	800499c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004940:	4b85      	ldr	r3, [pc, #532]	@ (8004b58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	08db      	lsrs	r3, r3, #3
 8004946:	f003 0303 	and.w	r3, r3, #3
 800494a:	4a84      	ldr	r2, [pc, #528]	@ (8004b5c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800494c:	fa22 f303 	lsr.w	r3, r2, r3
 8004950:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	ee07 3a90 	vmov	s15, r3
 8004958:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	ee07 3a90 	vmov	s15, r3
 8004962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004966:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800496a:	4b7b      	ldr	r3, [pc, #492]	@ (8004b58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800496c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800496e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004972:	ee07 3a90 	vmov	s15, r3
 8004976:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800497a:	ed97 6a03 	vldr	s12, [r7, #12]
 800497e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004b60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004982:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004986:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800498a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800498e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004996:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800499a:	e087      	b.n	8004aac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	ee07 3a90 	vmov	s15, r3
 80049a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049a6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004b64 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80049aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049ae:	4b6a      	ldr	r3, [pc, #424]	@ (8004b58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049b6:	ee07 3a90 	vmov	s15, r3
 80049ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049be:	ed97 6a03 	vldr	s12, [r7, #12]
 80049c2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004b60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80049c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049de:	e065      	b.n	8004aac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	ee07 3a90 	vmov	s15, r3
 80049e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ea:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004b68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80049ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049f2:	4b59      	ldr	r3, [pc, #356]	@ (8004b58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049fa:	ee07 3a90 	vmov	s15, r3
 80049fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a02:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a06:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004b60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a22:	e043      	b.n	8004aac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	ee07 3a90 	vmov	s15, r3
 8004a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a2e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004b6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004a32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a36:	4b48      	ldr	r3, [pc, #288]	@ (8004b58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a3e:	ee07 3a90 	vmov	s15, r3
 8004a42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a46:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a4a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004b60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a66:	e021      	b.n	8004aac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	ee07 3a90 	vmov	s15, r3
 8004a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a72:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004b68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004a76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a7a:	4b37      	ldr	r3, [pc, #220]	@ (8004b58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a82:	ee07 3a90 	vmov	s15, r3
 8004a86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a8e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004b60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aa6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004aaa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004aac:	4b2a      	ldr	r3, [pc, #168]	@ (8004b58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004aae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ab0:	0a5b      	lsrs	r3, r3, #9
 8004ab2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ab6:	ee07 3a90 	vmov	s15, r3
 8004aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004abe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004ac2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ac6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004aca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ace:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ad2:	ee17 2a90 	vmov	r2, s15
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004ada:	4b1f      	ldr	r3, [pc, #124]	@ (8004b58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004adc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ade:	0c1b      	lsrs	r3, r3, #16
 8004ae0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ae4:	ee07 3a90 	vmov	s15, r3
 8004ae8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004af0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004af4:	edd7 6a07 	vldr	s13, [r7, #28]
 8004af8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004afc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b00:	ee17 2a90 	vmov	r2, s15
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004b08:	4b13      	ldr	r3, [pc, #76]	@ (8004b58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b0c:	0e1b      	lsrs	r3, r3, #24
 8004b0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b12:	ee07 3a90 	vmov	s15, r3
 8004b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b22:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b2e:	ee17 2a90 	vmov	r2, s15
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004b36:	e008      	b.n	8004b4a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	609a      	str	r2, [r3, #8]
}
 8004b4a:	bf00      	nop
 8004b4c:	3724      	adds	r7, #36	@ 0x24
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	58024400 	.word	0x58024400
 8004b5c:	03d09000 	.word	0x03d09000
 8004b60:	46000000 	.word	0x46000000
 8004b64:	4c742400 	.word	0x4c742400
 8004b68:	4a742400 	.word	0x4a742400
 8004b6c:	4af42400 	.word	0x4af42400

08004b70 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b089      	sub	sp, #36	@ 0x24
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004b78:	4ba1      	ldr	r3, [pc, #644]	@ (8004e00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b7c:	f003 0303 	and.w	r3, r3, #3
 8004b80:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004b82:	4b9f      	ldr	r3, [pc, #636]	@ (8004e00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b86:	0d1b      	lsrs	r3, r3, #20
 8004b88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b8c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004b8e:	4b9c      	ldr	r3, [pc, #624]	@ (8004e00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b92:	0a1b      	lsrs	r3, r3, #8
 8004b94:	f003 0301 	and.w	r3, r3, #1
 8004b98:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004b9a:	4b99      	ldr	r3, [pc, #612]	@ (8004e00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b9e:	08db      	lsrs	r3, r3, #3
 8004ba0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ba4:	693a      	ldr	r2, [r7, #16]
 8004ba6:	fb02 f303 	mul.w	r3, r2, r3
 8004baa:	ee07 3a90 	vmov	s15, r3
 8004bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bb2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	f000 8111 	beq.w	8004de0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	f000 8083 	beq.w	8004ccc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	f200 80a1 	bhi.w	8004d10 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d003      	beq.n	8004bdc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004bd4:	69bb      	ldr	r3, [r7, #24]
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d056      	beq.n	8004c88 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004bda:	e099      	b.n	8004d10 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004bdc:	4b88      	ldr	r3, [pc, #544]	@ (8004e00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0320 	and.w	r3, r3, #32
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d02d      	beq.n	8004c44 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004be8:	4b85      	ldr	r3, [pc, #532]	@ (8004e00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	08db      	lsrs	r3, r3, #3
 8004bee:	f003 0303 	and.w	r3, r3, #3
 8004bf2:	4a84      	ldr	r2, [pc, #528]	@ (8004e04 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004bf4:	fa22 f303 	lsr.w	r3, r2, r3
 8004bf8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	ee07 3a90 	vmov	s15, r3
 8004c00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	ee07 3a90 	vmov	s15, r3
 8004c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c12:	4b7b      	ldr	r3, [pc, #492]	@ (8004e00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c1a:	ee07 3a90 	vmov	s15, r3
 8004c1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c22:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c26:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004e08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c3e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004c42:	e087      	b.n	8004d54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	ee07 3a90 	vmov	s15, r3
 8004c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c4e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004e0c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004c52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c56:	4b6a      	ldr	r3, [pc, #424]	@ (8004e00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c5e:	ee07 3a90 	vmov	s15, r3
 8004c62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c66:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c6a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004e08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c86:	e065      	b.n	8004d54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	ee07 3a90 	vmov	s15, r3
 8004c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c92:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004e10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004c96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c9a:	4b59      	ldr	r3, [pc, #356]	@ (8004e00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ca2:	ee07 3a90 	vmov	s15, r3
 8004ca6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004caa:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cae:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004e08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004cb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004cca:	e043      	b.n	8004d54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	ee07 3a90 	vmov	s15, r3
 8004cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cd6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004e14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004cda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cde:	4b48      	ldr	r3, [pc, #288]	@ (8004e00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ce2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ce6:	ee07 3a90 	vmov	s15, r3
 8004cea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cee:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cf2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004e08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004cf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cfe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d0e:	e021      	b.n	8004d54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	ee07 3a90 	vmov	s15, r3
 8004d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d1a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004e10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004d1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d22:	4b37      	ldr	r3, [pc, #220]	@ (8004e00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d2a:	ee07 3a90 	vmov	s15, r3
 8004d2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d32:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d36:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004e08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d52:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004d54:	4b2a      	ldr	r3, [pc, #168]	@ (8004e00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d58:	0a5b      	lsrs	r3, r3, #9
 8004d5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d5e:	ee07 3a90 	vmov	s15, r3
 8004d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d66:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004d6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d7a:	ee17 2a90 	vmov	r2, s15
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004d82:	4b1f      	ldr	r3, [pc, #124]	@ (8004e00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d86:	0c1b      	lsrs	r3, r3, #16
 8004d88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d8c:	ee07 3a90 	vmov	s15, r3
 8004d90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d94:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004d98:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004da0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004da4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004da8:	ee17 2a90 	vmov	r2, s15
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004db0:	4b13      	ldr	r3, [pc, #76]	@ (8004e00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004db4:	0e1b      	lsrs	r3, r3, #24
 8004db6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004dba:	ee07 3a90 	vmov	s15, r3
 8004dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dc2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004dc6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004dca:	edd7 6a07 	vldr	s13, [r7, #28]
 8004dce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dd6:	ee17 2a90 	vmov	r2, s15
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004dde:	e008      	b.n	8004df2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	609a      	str	r2, [r3, #8]
}
 8004df2:	bf00      	nop
 8004df4:	3724      	adds	r7, #36	@ 0x24
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	58024400 	.word	0x58024400
 8004e04:	03d09000 	.word	0x03d09000
 8004e08:	46000000 	.word	0x46000000
 8004e0c:	4c742400 	.word	0x4c742400
 8004e10:	4a742400 	.word	0x4a742400
 8004e14:	4af42400 	.word	0x4af42400

08004e18 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e22:	2300      	movs	r3, #0
 8004e24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004e26:	4b53      	ldr	r3, [pc, #332]	@ (8004f74 <RCCEx_PLL2_Config+0x15c>)
 8004e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e2a:	f003 0303 	and.w	r3, r3, #3
 8004e2e:	2b03      	cmp	r3, #3
 8004e30:	d101      	bne.n	8004e36 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e099      	b.n	8004f6a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004e36:	4b4f      	ldr	r3, [pc, #316]	@ (8004f74 <RCCEx_PLL2_Config+0x15c>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a4e      	ldr	r2, [pc, #312]	@ (8004f74 <RCCEx_PLL2_Config+0x15c>)
 8004e3c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004e40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e42:	f7fc f9eb 	bl	800121c <HAL_GetTick>
 8004e46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004e48:	e008      	b.n	8004e5c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004e4a:	f7fc f9e7 	bl	800121c <HAL_GetTick>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	d901      	bls.n	8004e5c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004e58:	2303      	movs	r3, #3
 8004e5a:	e086      	b.n	8004f6a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004e5c:	4b45      	ldr	r3, [pc, #276]	@ (8004f74 <RCCEx_PLL2_Config+0x15c>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d1f0      	bne.n	8004e4a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004e68:	4b42      	ldr	r3, [pc, #264]	@ (8004f74 <RCCEx_PLL2_Config+0x15c>)
 8004e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e6c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	031b      	lsls	r3, r3, #12
 8004e76:	493f      	ldr	r1, [pc, #252]	@ (8004f74 <RCCEx_PLL2_Config+0x15c>)
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	628b      	str	r3, [r1, #40]	@ 0x28
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	3b01      	subs	r3, #1
 8004e82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	025b      	lsls	r3, r3, #9
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	431a      	orrs	r2, r3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	3b01      	subs	r3, #1
 8004e98:	041b      	lsls	r3, r3, #16
 8004e9a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004e9e:	431a      	orrs	r2, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	691b      	ldr	r3, [r3, #16]
 8004ea4:	3b01      	subs	r3, #1
 8004ea6:	061b      	lsls	r3, r3, #24
 8004ea8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004eac:	4931      	ldr	r1, [pc, #196]	@ (8004f74 <RCCEx_PLL2_Config+0x15c>)
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004eb2:	4b30      	ldr	r3, [pc, #192]	@ (8004f74 <RCCEx_PLL2_Config+0x15c>)
 8004eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eb6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	695b      	ldr	r3, [r3, #20]
 8004ebe:	492d      	ldr	r1, [pc, #180]	@ (8004f74 <RCCEx_PLL2_Config+0x15c>)
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004ec4:	4b2b      	ldr	r3, [pc, #172]	@ (8004f74 <RCCEx_PLL2_Config+0x15c>)
 8004ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec8:	f023 0220 	bic.w	r2, r3, #32
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	699b      	ldr	r3, [r3, #24]
 8004ed0:	4928      	ldr	r1, [pc, #160]	@ (8004f74 <RCCEx_PLL2_Config+0x15c>)
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004ed6:	4b27      	ldr	r3, [pc, #156]	@ (8004f74 <RCCEx_PLL2_Config+0x15c>)
 8004ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eda:	4a26      	ldr	r2, [pc, #152]	@ (8004f74 <RCCEx_PLL2_Config+0x15c>)
 8004edc:	f023 0310 	bic.w	r3, r3, #16
 8004ee0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004ee2:	4b24      	ldr	r3, [pc, #144]	@ (8004f74 <RCCEx_PLL2_Config+0x15c>)
 8004ee4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ee6:	4b24      	ldr	r3, [pc, #144]	@ (8004f78 <RCCEx_PLL2_Config+0x160>)
 8004ee8:	4013      	ands	r3, r2
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	69d2      	ldr	r2, [r2, #28]
 8004eee:	00d2      	lsls	r2, r2, #3
 8004ef0:	4920      	ldr	r1, [pc, #128]	@ (8004f74 <RCCEx_PLL2_Config+0x15c>)
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004ef6:	4b1f      	ldr	r3, [pc, #124]	@ (8004f74 <RCCEx_PLL2_Config+0x15c>)
 8004ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004efa:	4a1e      	ldr	r2, [pc, #120]	@ (8004f74 <RCCEx_PLL2_Config+0x15c>)
 8004efc:	f043 0310 	orr.w	r3, r3, #16
 8004f00:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d106      	bne.n	8004f16 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004f08:	4b1a      	ldr	r3, [pc, #104]	@ (8004f74 <RCCEx_PLL2_Config+0x15c>)
 8004f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f0c:	4a19      	ldr	r2, [pc, #100]	@ (8004f74 <RCCEx_PLL2_Config+0x15c>)
 8004f0e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004f12:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004f14:	e00f      	b.n	8004f36 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d106      	bne.n	8004f2a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004f1c:	4b15      	ldr	r3, [pc, #84]	@ (8004f74 <RCCEx_PLL2_Config+0x15c>)
 8004f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f20:	4a14      	ldr	r2, [pc, #80]	@ (8004f74 <RCCEx_PLL2_Config+0x15c>)
 8004f22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f26:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004f28:	e005      	b.n	8004f36 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004f2a:	4b12      	ldr	r3, [pc, #72]	@ (8004f74 <RCCEx_PLL2_Config+0x15c>)
 8004f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f2e:	4a11      	ldr	r2, [pc, #68]	@ (8004f74 <RCCEx_PLL2_Config+0x15c>)
 8004f30:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004f34:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004f36:	4b0f      	ldr	r3, [pc, #60]	@ (8004f74 <RCCEx_PLL2_Config+0x15c>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a0e      	ldr	r2, [pc, #56]	@ (8004f74 <RCCEx_PLL2_Config+0x15c>)
 8004f3c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004f40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f42:	f7fc f96b 	bl	800121c <HAL_GetTick>
 8004f46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004f48:	e008      	b.n	8004f5c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004f4a:	f7fc f967 	bl	800121c <HAL_GetTick>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	1ad3      	subs	r3, r2, r3
 8004f54:	2b02      	cmp	r3, #2
 8004f56:	d901      	bls.n	8004f5c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004f58:	2303      	movs	r3, #3
 8004f5a:	e006      	b.n	8004f6a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004f5c:	4b05      	ldr	r3, [pc, #20]	@ (8004f74 <RCCEx_PLL2_Config+0x15c>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d0f0      	beq.n	8004f4a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3710      	adds	r7, #16
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	58024400 	.word	0x58024400
 8004f78:	ffff0007 	.word	0xffff0007

08004f7c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f86:	2300      	movs	r3, #0
 8004f88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004f8a:	4b53      	ldr	r3, [pc, #332]	@ (80050d8 <RCCEx_PLL3_Config+0x15c>)
 8004f8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f8e:	f003 0303 	and.w	r3, r3, #3
 8004f92:	2b03      	cmp	r3, #3
 8004f94:	d101      	bne.n	8004f9a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e099      	b.n	80050ce <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004f9a:	4b4f      	ldr	r3, [pc, #316]	@ (80050d8 <RCCEx_PLL3_Config+0x15c>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a4e      	ldr	r2, [pc, #312]	@ (80050d8 <RCCEx_PLL3_Config+0x15c>)
 8004fa0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004fa4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fa6:	f7fc f939 	bl	800121c <HAL_GetTick>
 8004faa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004fac:	e008      	b.n	8004fc0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004fae:	f7fc f935 	bl	800121c <HAL_GetTick>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d901      	bls.n	8004fc0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	e086      	b.n	80050ce <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004fc0:	4b45      	ldr	r3, [pc, #276]	@ (80050d8 <RCCEx_PLL3_Config+0x15c>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d1f0      	bne.n	8004fae <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004fcc:	4b42      	ldr	r3, [pc, #264]	@ (80050d8 <RCCEx_PLL3_Config+0x15c>)
 8004fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fd0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	051b      	lsls	r3, r3, #20
 8004fda:	493f      	ldr	r1, [pc, #252]	@ (80050d8 <RCCEx_PLL3_Config+0x15c>)
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	628b      	str	r3, [r1, #40]	@ 0x28
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	3b01      	subs	r3, #1
 8004fe6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	3b01      	subs	r3, #1
 8004ff0:	025b      	lsls	r3, r3, #9
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	431a      	orrs	r2, r3
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	041b      	lsls	r3, r3, #16
 8004ffe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005002:	431a      	orrs	r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	3b01      	subs	r3, #1
 800500a:	061b      	lsls	r3, r3, #24
 800500c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005010:	4931      	ldr	r1, [pc, #196]	@ (80050d8 <RCCEx_PLL3_Config+0x15c>)
 8005012:	4313      	orrs	r3, r2
 8005014:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005016:	4b30      	ldr	r3, [pc, #192]	@ (80050d8 <RCCEx_PLL3_Config+0x15c>)
 8005018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800501a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	695b      	ldr	r3, [r3, #20]
 8005022:	492d      	ldr	r1, [pc, #180]	@ (80050d8 <RCCEx_PLL3_Config+0x15c>)
 8005024:	4313      	orrs	r3, r2
 8005026:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005028:	4b2b      	ldr	r3, [pc, #172]	@ (80050d8 <RCCEx_PLL3_Config+0x15c>)
 800502a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800502c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	699b      	ldr	r3, [r3, #24]
 8005034:	4928      	ldr	r1, [pc, #160]	@ (80050d8 <RCCEx_PLL3_Config+0x15c>)
 8005036:	4313      	orrs	r3, r2
 8005038:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800503a:	4b27      	ldr	r3, [pc, #156]	@ (80050d8 <RCCEx_PLL3_Config+0x15c>)
 800503c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800503e:	4a26      	ldr	r2, [pc, #152]	@ (80050d8 <RCCEx_PLL3_Config+0x15c>)
 8005040:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005044:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005046:	4b24      	ldr	r3, [pc, #144]	@ (80050d8 <RCCEx_PLL3_Config+0x15c>)
 8005048:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800504a:	4b24      	ldr	r3, [pc, #144]	@ (80050dc <RCCEx_PLL3_Config+0x160>)
 800504c:	4013      	ands	r3, r2
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	69d2      	ldr	r2, [r2, #28]
 8005052:	00d2      	lsls	r2, r2, #3
 8005054:	4920      	ldr	r1, [pc, #128]	@ (80050d8 <RCCEx_PLL3_Config+0x15c>)
 8005056:	4313      	orrs	r3, r2
 8005058:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800505a:	4b1f      	ldr	r3, [pc, #124]	@ (80050d8 <RCCEx_PLL3_Config+0x15c>)
 800505c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800505e:	4a1e      	ldr	r2, [pc, #120]	@ (80050d8 <RCCEx_PLL3_Config+0x15c>)
 8005060:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005064:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d106      	bne.n	800507a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800506c:	4b1a      	ldr	r3, [pc, #104]	@ (80050d8 <RCCEx_PLL3_Config+0x15c>)
 800506e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005070:	4a19      	ldr	r2, [pc, #100]	@ (80050d8 <RCCEx_PLL3_Config+0x15c>)
 8005072:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005076:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005078:	e00f      	b.n	800509a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	2b01      	cmp	r3, #1
 800507e:	d106      	bne.n	800508e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005080:	4b15      	ldr	r3, [pc, #84]	@ (80050d8 <RCCEx_PLL3_Config+0x15c>)
 8005082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005084:	4a14      	ldr	r2, [pc, #80]	@ (80050d8 <RCCEx_PLL3_Config+0x15c>)
 8005086:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800508a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800508c:	e005      	b.n	800509a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800508e:	4b12      	ldr	r3, [pc, #72]	@ (80050d8 <RCCEx_PLL3_Config+0x15c>)
 8005090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005092:	4a11      	ldr	r2, [pc, #68]	@ (80050d8 <RCCEx_PLL3_Config+0x15c>)
 8005094:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005098:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800509a:	4b0f      	ldr	r3, [pc, #60]	@ (80050d8 <RCCEx_PLL3_Config+0x15c>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a0e      	ldr	r2, [pc, #56]	@ (80050d8 <RCCEx_PLL3_Config+0x15c>)
 80050a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050a6:	f7fc f8b9 	bl	800121c <HAL_GetTick>
 80050aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80050ac:	e008      	b.n	80050c0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80050ae:	f7fc f8b5 	bl	800121c <HAL_GetTick>
 80050b2:	4602      	mov	r2, r0
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	d901      	bls.n	80050c0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	e006      	b.n	80050ce <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80050c0:	4b05      	ldr	r3, [pc, #20]	@ (80050d8 <RCCEx_PLL3_Config+0x15c>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d0f0      	beq.n	80050ae <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80050cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3710      	adds	r7, #16
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop
 80050d8:	58024400 	.word	0x58024400
 80050dc:	ffff0007 	.word	0xffff0007

080050e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b082      	sub	sp, #8
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d101      	bne.n	80050f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e049      	b.n	8005186 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d106      	bne.n	800510c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f7fb fe84 	bl	8000e14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2202      	movs	r2, #2
 8005110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	3304      	adds	r3, #4
 800511c:	4619      	mov	r1, r3
 800511e:	4610      	mov	r0, r2
 8005120:	f000 fcea 	bl	8005af8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3708      	adds	r7, #8
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}

0800518e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800518e:	b580      	push	{r7, lr}
 8005190:	b082      	sub	sp, #8
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d101      	bne.n	80051a0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e049      	b.n	8005234 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d106      	bne.n	80051ba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f000 f841 	bl	800523c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2202      	movs	r2, #2
 80051be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	3304      	adds	r3, #4
 80051ca:	4619      	mov	r1, r3
 80051cc:	4610      	mov	r0, r2
 80051ce:	f000 fc93 	bl	8005af8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2201      	movs	r2, #1
 80051d6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2201      	movs	r2, #1
 80051de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2201      	movs	r2, #1
 80051e6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2201      	movs	r2, #1
 80051ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2201      	movs	r2, #1
 80051f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2201      	movs	r2, #1
 80051fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2201      	movs	r2, #1
 8005206:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2201      	movs	r2, #1
 800520e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2201      	movs	r2, #1
 8005216:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2201      	movs	r2, #1
 800521e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2201      	movs	r2, #1
 8005226:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2201      	movs	r2, #1
 800522e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005232:	2300      	movs	r3, #0
}
 8005234:	4618      	mov	r0, r3
 8005236:	3708      	adds	r7, #8
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005244:	bf00      	nop
 8005246:	370c      	adds	r7, #12
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d109      	bne.n	8005274 <HAL_TIM_PWM_Start+0x24>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005266:	b2db      	uxtb	r3, r3
 8005268:	2b01      	cmp	r3, #1
 800526a:	bf14      	ite	ne
 800526c:	2301      	movne	r3, #1
 800526e:	2300      	moveq	r3, #0
 8005270:	b2db      	uxtb	r3, r3
 8005272:	e03c      	b.n	80052ee <HAL_TIM_PWM_Start+0x9e>
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	2b04      	cmp	r3, #4
 8005278:	d109      	bne.n	800528e <HAL_TIM_PWM_Start+0x3e>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005280:	b2db      	uxtb	r3, r3
 8005282:	2b01      	cmp	r3, #1
 8005284:	bf14      	ite	ne
 8005286:	2301      	movne	r3, #1
 8005288:	2300      	moveq	r3, #0
 800528a:	b2db      	uxtb	r3, r3
 800528c:	e02f      	b.n	80052ee <HAL_TIM_PWM_Start+0x9e>
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	2b08      	cmp	r3, #8
 8005292:	d109      	bne.n	80052a8 <HAL_TIM_PWM_Start+0x58>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800529a:	b2db      	uxtb	r3, r3
 800529c:	2b01      	cmp	r3, #1
 800529e:	bf14      	ite	ne
 80052a0:	2301      	movne	r3, #1
 80052a2:	2300      	moveq	r3, #0
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	e022      	b.n	80052ee <HAL_TIM_PWM_Start+0x9e>
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	2b0c      	cmp	r3, #12
 80052ac:	d109      	bne.n	80052c2 <HAL_TIM_PWM_Start+0x72>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	bf14      	ite	ne
 80052ba:	2301      	movne	r3, #1
 80052bc:	2300      	moveq	r3, #0
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	e015      	b.n	80052ee <HAL_TIM_PWM_Start+0x9e>
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	2b10      	cmp	r3, #16
 80052c6:	d109      	bne.n	80052dc <HAL_TIM_PWM_Start+0x8c>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	bf14      	ite	ne
 80052d4:	2301      	movne	r3, #1
 80052d6:	2300      	moveq	r3, #0
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	e008      	b.n	80052ee <HAL_TIM_PWM_Start+0x9e>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	bf14      	ite	ne
 80052e8:	2301      	movne	r3, #1
 80052ea:	2300      	moveq	r3, #0
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d001      	beq.n	80052f6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e0a1      	b.n	800543a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d104      	bne.n	8005306 <HAL_TIM_PWM_Start+0xb6>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2202      	movs	r2, #2
 8005300:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005304:	e023      	b.n	800534e <HAL_TIM_PWM_Start+0xfe>
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	2b04      	cmp	r3, #4
 800530a:	d104      	bne.n	8005316 <HAL_TIM_PWM_Start+0xc6>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2202      	movs	r2, #2
 8005310:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005314:	e01b      	b.n	800534e <HAL_TIM_PWM_Start+0xfe>
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	2b08      	cmp	r3, #8
 800531a:	d104      	bne.n	8005326 <HAL_TIM_PWM_Start+0xd6>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2202      	movs	r2, #2
 8005320:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005324:	e013      	b.n	800534e <HAL_TIM_PWM_Start+0xfe>
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	2b0c      	cmp	r3, #12
 800532a:	d104      	bne.n	8005336 <HAL_TIM_PWM_Start+0xe6>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2202      	movs	r2, #2
 8005330:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005334:	e00b      	b.n	800534e <HAL_TIM_PWM_Start+0xfe>
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	2b10      	cmp	r3, #16
 800533a:	d104      	bne.n	8005346 <HAL_TIM_PWM_Start+0xf6>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2202      	movs	r2, #2
 8005340:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005344:	e003      	b.n	800534e <HAL_TIM_PWM_Start+0xfe>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2202      	movs	r2, #2
 800534a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	2201      	movs	r2, #1
 8005354:	6839      	ldr	r1, [r7, #0]
 8005356:	4618      	mov	r0, r3
 8005358:	f000 ffe2 	bl	8006320 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a38      	ldr	r2, [pc, #224]	@ (8005444 <HAL_TIM_PWM_Start+0x1f4>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d013      	beq.n	800538e <HAL_TIM_PWM_Start+0x13e>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a37      	ldr	r2, [pc, #220]	@ (8005448 <HAL_TIM_PWM_Start+0x1f8>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d00e      	beq.n	800538e <HAL_TIM_PWM_Start+0x13e>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a35      	ldr	r2, [pc, #212]	@ (800544c <HAL_TIM_PWM_Start+0x1fc>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d009      	beq.n	800538e <HAL_TIM_PWM_Start+0x13e>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a34      	ldr	r2, [pc, #208]	@ (8005450 <HAL_TIM_PWM_Start+0x200>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d004      	beq.n	800538e <HAL_TIM_PWM_Start+0x13e>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a32      	ldr	r2, [pc, #200]	@ (8005454 <HAL_TIM_PWM_Start+0x204>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d101      	bne.n	8005392 <HAL_TIM_PWM_Start+0x142>
 800538e:	2301      	movs	r3, #1
 8005390:	e000      	b.n	8005394 <HAL_TIM_PWM_Start+0x144>
 8005392:	2300      	movs	r3, #0
 8005394:	2b00      	cmp	r3, #0
 8005396:	d007      	beq.n	80053a8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80053a6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a25      	ldr	r2, [pc, #148]	@ (8005444 <HAL_TIM_PWM_Start+0x1f4>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d022      	beq.n	80053f8 <HAL_TIM_PWM_Start+0x1a8>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053ba:	d01d      	beq.n	80053f8 <HAL_TIM_PWM_Start+0x1a8>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a25      	ldr	r2, [pc, #148]	@ (8005458 <HAL_TIM_PWM_Start+0x208>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d018      	beq.n	80053f8 <HAL_TIM_PWM_Start+0x1a8>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a24      	ldr	r2, [pc, #144]	@ (800545c <HAL_TIM_PWM_Start+0x20c>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d013      	beq.n	80053f8 <HAL_TIM_PWM_Start+0x1a8>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a22      	ldr	r2, [pc, #136]	@ (8005460 <HAL_TIM_PWM_Start+0x210>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d00e      	beq.n	80053f8 <HAL_TIM_PWM_Start+0x1a8>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a1a      	ldr	r2, [pc, #104]	@ (8005448 <HAL_TIM_PWM_Start+0x1f8>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d009      	beq.n	80053f8 <HAL_TIM_PWM_Start+0x1a8>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a1e      	ldr	r2, [pc, #120]	@ (8005464 <HAL_TIM_PWM_Start+0x214>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d004      	beq.n	80053f8 <HAL_TIM_PWM_Start+0x1a8>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a16      	ldr	r2, [pc, #88]	@ (800544c <HAL_TIM_PWM_Start+0x1fc>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d115      	bne.n	8005424 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	689a      	ldr	r2, [r3, #8]
 80053fe:	4b1a      	ldr	r3, [pc, #104]	@ (8005468 <HAL_TIM_PWM_Start+0x218>)
 8005400:	4013      	ands	r3, r2
 8005402:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2b06      	cmp	r3, #6
 8005408:	d015      	beq.n	8005436 <HAL_TIM_PWM_Start+0x1e6>
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005410:	d011      	beq.n	8005436 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f042 0201 	orr.w	r2, r2, #1
 8005420:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005422:	e008      	b.n	8005436 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f042 0201 	orr.w	r2, r2, #1
 8005432:	601a      	str	r2, [r3, #0]
 8005434:	e000      	b.n	8005438 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005436:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005438:	2300      	movs	r3, #0
}
 800543a:	4618      	mov	r0, r3
 800543c:	3710      	adds	r7, #16
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
 8005442:	bf00      	nop
 8005444:	40010000 	.word	0x40010000
 8005448:	40010400 	.word	0x40010400
 800544c:	40014000 	.word	0x40014000
 8005450:	40014400 	.word	0x40014400
 8005454:	40014800 	.word	0x40014800
 8005458:	40000400 	.word	0x40000400
 800545c:	40000800 	.word	0x40000800
 8005460:	40000c00 	.word	0x40000c00
 8005464:	40001800 	.word	0x40001800
 8005468:	00010007 	.word	0x00010007

0800546c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	f003 0302 	and.w	r3, r3, #2
 800548a:	2b00      	cmp	r3, #0
 800548c:	d020      	beq.n	80054d0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f003 0302 	and.w	r3, r3, #2
 8005494:	2b00      	cmp	r3, #0
 8005496:	d01b      	beq.n	80054d0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f06f 0202 	mvn.w	r2, #2
 80054a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2201      	movs	r2, #1
 80054a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	699b      	ldr	r3, [r3, #24]
 80054ae:	f003 0303 	and.w	r3, r3, #3
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d003      	beq.n	80054be <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 fb00 	bl	8005abc <HAL_TIM_IC_CaptureCallback>
 80054bc:	e005      	b.n	80054ca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 faf2 	bl	8005aa8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f000 fb03 	bl	8005ad0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	f003 0304 	and.w	r3, r3, #4
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d020      	beq.n	800551c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f003 0304 	and.w	r3, r3, #4
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d01b      	beq.n	800551c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f06f 0204 	mvn.w	r2, #4
 80054ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2202      	movs	r2, #2
 80054f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	699b      	ldr	r3, [r3, #24]
 80054fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d003      	beq.n	800550a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 fada 	bl	8005abc <HAL_TIM_IC_CaptureCallback>
 8005508:	e005      	b.n	8005516 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 facc 	bl	8005aa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f000 fadd 	bl	8005ad0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	f003 0308 	and.w	r3, r3, #8
 8005522:	2b00      	cmp	r3, #0
 8005524:	d020      	beq.n	8005568 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	f003 0308 	and.w	r3, r3, #8
 800552c:	2b00      	cmp	r3, #0
 800552e:	d01b      	beq.n	8005568 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f06f 0208 	mvn.w	r2, #8
 8005538:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2204      	movs	r2, #4
 800553e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	69db      	ldr	r3, [r3, #28]
 8005546:	f003 0303 	and.w	r3, r3, #3
 800554a:	2b00      	cmp	r3, #0
 800554c:	d003      	beq.n	8005556 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 fab4 	bl	8005abc <HAL_TIM_IC_CaptureCallback>
 8005554:	e005      	b.n	8005562 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 faa6 	bl	8005aa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f000 fab7 	bl	8005ad0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	f003 0310 	and.w	r3, r3, #16
 800556e:	2b00      	cmp	r3, #0
 8005570:	d020      	beq.n	80055b4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f003 0310 	and.w	r3, r3, #16
 8005578:	2b00      	cmp	r3, #0
 800557a:	d01b      	beq.n	80055b4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f06f 0210 	mvn.w	r2, #16
 8005584:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2208      	movs	r2, #8
 800558a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	69db      	ldr	r3, [r3, #28]
 8005592:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005596:	2b00      	cmp	r3, #0
 8005598:	d003      	beq.n	80055a2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 fa8e 	bl	8005abc <HAL_TIM_IC_CaptureCallback>
 80055a0:	e005      	b.n	80055ae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 fa80 	bl	8005aa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f000 fa91 	bl	8005ad0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	f003 0301 	and.w	r3, r3, #1
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00c      	beq.n	80055d8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f003 0301 	and.w	r3, r3, #1
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d007      	beq.n	80055d8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f06f 0201 	mvn.w	r2, #1
 80055d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 fa5e 	bl	8005a94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d104      	bne.n	80055ec <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d00c      	beq.n	8005606 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d007      	beq.n	8005606 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80055fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f000 ff4b 	bl	800649c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800560c:	2b00      	cmp	r3, #0
 800560e:	d00c      	beq.n	800562a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005616:	2b00      	cmp	r3, #0
 8005618:	d007      	beq.n	800562a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005622:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f000 ff43 	bl	80064b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005630:	2b00      	cmp	r3, #0
 8005632:	d00c      	beq.n	800564e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800563a:	2b00      	cmp	r3, #0
 800563c:	d007      	beq.n	800564e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005646:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f000 fa4b 	bl	8005ae4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	f003 0320 	and.w	r3, r3, #32
 8005654:	2b00      	cmp	r3, #0
 8005656:	d00c      	beq.n	8005672 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f003 0320 	and.w	r3, r3, #32
 800565e:	2b00      	cmp	r3, #0
 8005660:	d007      	beq.n	8005672 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f06f 0220 	mvn.w	r2, #32
 800566a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f000 ff0b 	bl	8006488 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005672:	bf00      	nop
 8005674:	3710      	adds	r7, #16
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
	...

0800567c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b086      	sub	sp, #24
 8005680:	af00      	add	r7, sp, #0
 8005682:	60f8      	str	r0, [r7, #12]
 8005684:	60b9      	str	r1, [r7, #8]
 8005686:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005688:	2300      	movs	r3, #0
 800568a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005692:	2b01      	cmp	r3, #1
 8005694:	d101      	bne.n	800569a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005696:	2302      	movs	r3, #2
 8005698:	e0ff      	b.n	800589a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2201      	movs	r2, #1
 800569e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2b14      	cmp	r3, #20
 80056a6:	f200 80f0 	bhi.w	800588a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80056aa:	a201      	add	r2, pc, #4	@ (adr r2, 80056b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80056ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b0:	08005705 	.word	0x08005705
 80056b4:	0800588b 	.word	0x0800588b
 80056b8:	0800588b 	.word	0x0800588b
 80056bc:	0800588b 	.word	0x0800588b
 80056c0:	08005745 	.word	0x08005745
 80056c4:	0800588b 	.word	0x0800588b
 80056c8:	0800588b 	.word	0x0800588b
 80056cc:	0800588b 	.word	0x0800588b
 80056d0:	08005787 	.word	0x08005787
 80056d4:	0800588b 	.word	0x0800588b
 80056d8:	0800588b 	.word	0x0800588b
 80056dc:	0800588b 	.word	0x0800588b
 80056e0:	080057c7 	.word	0x080057c7
 80056e4:	0800588b 	.word	0x0800588b
 80056e8:	0800588b 	.word	0x0800588b
 80056ec:	0800588b 	.word	0x0800588b
 80056f0:	08005809 	.word	0x08005809
 80056f4:	0800588b 	.word	0x0800588b
 80056f8:	0800588b 	.word	0x0800588b
 80056fc:	0800588b 	.word	0x0800588b
 8005700:	08005849 	.word	0x08005849
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	68b9      	ldr	r1, [r7, #8]
 800570a:	4618      	mov	r0, r3
 800570c:	f000 fa94 	bl	8005c38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	699a      	ldr	r2, [r3, #24]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f042 0208 	orr.w	r2, r2, #8
 800571e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	699a      	ldr	r2, [r3, #24]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f022 0204 	bic.w	r2, r2, #4
 800572e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	6999      	ldr	r1, [r3, #24]
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	691a      	ldr	r2, [r3, #16]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	430a      	orrs	r2, r1
 8005740:	619a      	str	r2, [r3, #24]
      break;
 8005742:	e0a5      	b.n	8005890 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	68b9      	ldr	r1, [r7, #8]
 800574a:	4618      	mov	r0, r3
 800574c:	f000 fb04 	bl	8005d58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	699a      	ldr	r2, [r3, #24]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800575e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	699a      	ldr	r2, [r3, #24]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800576e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	6999      	ldr	r1, [r3, #24]
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	021a      	lsls	r2, r3, #8
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	430a      	orrs	r2, r1
 8005782:	619a      	str	r2, [r3, #24]
      break;
 8005784:	e084      	b.n	8005890 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	68b9      	ldr	r1, [r7, #8]
 800578c:	4618      	mov	r0, r3
 800578e:	f000 fb6d 	bl	8005e6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	69da      	ldr	r2, [r3, #28]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f042 0208 	orr.w	r2, r2, #8
 80057a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	69da      	ldr	r2, [r3, #28]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f022 0204 	bic.w	r2, r2, #4
 80057b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	69d9      	ldr	r1, [r3, #28]
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	691a      	ldr	r2, [r3, #16]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	430a      	orrs	r2, r1
 80057c2:	61da      	str	r2, [r3, #28]
      break;
 80057c4:	e064      	b.n	8005890 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68b9      	ldr	r1, [r7, #8]
 80057cc:	4618      	mov	r0, r3
 80057ce:	f000 fbd5 	bl	8005f7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	69da      	ldr	r2, [r3, #28]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80057e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	69da      	ldr	r2, [r3, #28]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	69d9      	ldr	r1, [r3, #28]
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	691b      	ldr	r3, [r3, #16]
 80057fc:	021a      	lsls	r2, r3, #8
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	430a      	orrs	r2, r1
 8005804:	61da      	str	r2, [r3, #28]
      break;
 8005806:	e043      	b.n	8005890 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68b9      	ldr	r1, [r7, #8]
 800580e:	4618      	mov	r0, r3
 8005810:	f000 fc1e 	bl	8006050 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f042 0208 	orr.w	r2, r2, #8
 8005822:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f022 0204 	bic.w	r2, r2, #4
 8005832:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	691a      	ldr	r2, [r3, #16]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	430a      	orrs	r2, r1
 8005844:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005846:	e023      	b.n	8005890 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	68b9      	ldr	r1, [r7, #8]
 800584e:	4618      	mov	r0, r3
 8005850:	f000 fc62 	bl	8006118 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005862:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005872:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	021a      	lsls	r2, r3, #8
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	430a      	orrs	r2, r1
 8005886:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005888:	e002      	b.n	8005890 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	75fb      	strb	r3, [r7, #23]
      break;
 800588e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2200      	movs	r2, #0
 8005894:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005898:	7dfb      	ldrb	r3, [r7, #23]
}
 800589a:	4618      	mov	r0, r3
 800589c:	3718      	adds	r7, #24
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
 80058a2:	bf00      	nop

080058a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058ae:	2300      	movs	r3, #0
 80058b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d101      	bne.n	80058c0 <HAL_TIM_ConfigClockSource+0x1c>
 80058bc:	2302      	movs	r3, #2
 80058be:	e0dc      	b.n	8005a7a <HAL_TIM_ConfigClockSource+0x1d6>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2202      	movs	r2, #2
 80058cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80058d8:	68ba      	ldr	r2, [r7, #8]
 80058da:	4b6a      	ldr	r3, [pc, #424]	@ (8005a84 <HAL_TIM_ConfigClockSource+0x1e0>)
 80058dc:	4013      	ands	r3, r2
 80058de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80058e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	68ba      	ldr	r2, [r7, #8]
 80058ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a64      	ldr	r2, [pc, #400]	@ (8005a88 <HAL_TIM_ConfigClockSource+0x1e4>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	f000 80a9 	beq.w	8005a4e <HAL_TIM_ConfigClockSource+0x1aa>
 80058fc:	4a62      	ldr	r2, [pc, #392]	@ (8005a88 <HAL_TIM_ConfigClockSource+0x1e4>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	f200 80ae 	bhi.w	8005a60 <HAL_TIM_ConfigClockSource+0x1bc>
 8005904:	4a61      	ldr	r2, [pc, #388]	@ (8005a8c <HAL_TIM_ConfigClockSource+0x1e8>)
 8005906:	4293      	cmp	r3, r2
 8005908:	f000 80a1 	beq.w	8005a4e <HAL_TIM_ConfigClockSource+0x1aa>
 800590c:	4a5f      	ldr	r2, [pc, #380]	@ (8005a8c <HAL_TIM_ConfigClockSource+0x1e8>)
 800590e:	4293      	cmp	r3, r2
 8005910:	f200 80a6 	bhi.w	8005a60 <HAL_TIM_ConfigClockSource+0x1bc>
 8005914:	4a5e      	ldr	r2, [pc, #376]	@ (8005a90 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005916:	4293      	cmp	r3, r2
 8005918:	f000 8099 	beq.w	8005a4e <HAL_TIM_ConfigClockSource+0x1aa>
 800591c:	4a5c      	ldr	r2, [pc, #368]	@ (8005a90 <HAL_TIM_ConfigClockSource+0x1ec>)
 800591e:	4293      	cmp	r3, r2
 8005920:	f200 809e 	bhi.w	8005a60 <HAL_TIM_ConfigClockSource+0x1bc>
 8005924:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005928:	f000 8091 	beq.w	8005a4e <HAL_TIM_ConfigClockSource+0x1aa>
 800592c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005930:	f200 8096 	bhi.w	8005a60 <HAL_TIM_ConfigClockSource+0x1bc>
 8005934:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005938:	f000 8089 	beq.w	8005a4e <HAL_TIM_ConfigClockSource+0x1aa>
 800593c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005940:	f200 808e 	bhi.w	8005a60 <HAL_TIM_ConfigClockSource+0x1bc>
 8005944:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005948:	d03e      	beq.n	80059c8 <HAL_TIM_ConfigClockSource+0x124>
 800594a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800594e:	f200 8087 	bhi.w	8005a60 <HAL_TIM_ConfigClockSource+0x1bc>
 8005952:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005956:	f000 8086 	beq.w	8005a66 <HAL_TIM_ConfigClockSource+0x1c2>
 800595a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800595e:	d87f      	bhi.n	8005a60 <HAL_TIM_ConfigClockSource+0x1bc>
 8005960:	2b70      	cmp	r3, #112	@ 0x70
 8005962:	d01a      	beq.n	800599a <HAL_TIM_ConfigClockSource+0xf6>
 8005964:	2b70      	cmp	r3, #112	@ 0x70
 8005966:	d87b      	bhi.n	8005a60 <HAL_TIM_ConfigClockSource+0x1bc>
 8005968:	2b60      	cmp	r3, #96	@ 0x60
 800596a:	d050      	beq.n	8005a0e <HAL_TIM_ConfigClockSource+0x16a>
 800596c:	2b60      	cmp	r3, #96	@ 0x60
 800596e:	d877      	bhi.n	8005a60 <HAL_TIM_ConfigClockSource+0x1bc>
 8005970:	2b50      	cmp	r3, #80	@ 0x50
 8005972:	d03c      	beq.n	80059ee <HAL_TIM_ConfigClockSource+0x14a>
 8005974:	2b50      	cmp	r3, #80	@ 0x50
 8005976:	d873      	bhi.n	8005a60 <HAL_TIM_ConfigClockSource+0x1bc>
 8005978:	2b40      	cmp	r3, #64	@ 0x40
 800597a:	d058      	beq.n	8005a2e <HAL_TIM_ConfigClockSource+0x18a>
 800597c:	2b40      	cmp	r3, #64	@ 0x40
 800597e:	d86f      	bhi.n	8005a60 <HAL_TIM_ConfigClockSource+0x1bc>
 8005980:	2b30      	cmp	r3, #48	@ 0x30
 8005982:	d064      	beq.n	8005a4e <HAL_TIM_ConfigClockSource+0x1aa>
 8005984:	2b30      	cmp	r3, #48	@ 0x30
 8005986:	d86b      	bhi.n	8005a60 <HAL_TIM_ConfigClockSource+0x1bc>
 8005988:	2b20      	cmp	r3, #32
 800598a:	d060      	beq.n	8005a4e <HAL_TIM_ConfigClockSource+0x1aa>
 800598c:	2b20      	cmp	r3, #32
 800598e:	d867      	bhi.n	8005a60 <HAL_TIM_ConfigClockSource+0x1bc>
 8005990:	2b00      	cmp	r3, #0
 8005992:	d05c      	beq.n	8005a4e <HAL_TIM_ConfigClockSource+0x1aa>
 8005994:	2b10      	cmp	r3, #16
 8005996:	d05a      	beq.n	8005a4e <HAL_TIM_ConfigClockSource+0x1aa>
 8005998:	e062      	b.n	8005a60 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80059aa:	f000 fc99 	bl	80062e0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80059bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	68ba      	ldr	r2, [r7, #8]
 80059c4:	609a      	str	r2, [r3, #8]
      break;
 80059c6:	e04f      	b.n	8005a68 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80059d8:	f000 fc82 	bl	80062e0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	689a      	ldr	r2, [r3, #8]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80059ea:	609a      	str	r2, [r3, #8]
      break;
 80059ec:	e03c      	b.n	8005a68 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80059fa:	461a      	mov	r2, r3
 80059fc:	f000 fbf2 	bl	80061e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2150      	movs	r1, #80	@ 0x50
 8005a06:	4618      	mov	r0, r3
 8005a08:	f000 fc4c 	bl	80062a4 <TIM_ITRx_SetConfig>
      break;
 8005a0c:	e02c      	b.n	8005a68 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	f000 fc11 	bl	8006242 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	2160      	movs	r1, #96	@ 0x60
 8005a26:	4618      	mov	r0, r3
 8005a28:	f000 fc3c 	bl	80062a4 <TIM_ITRx_SetConfig>
      break;
 8005a2c:	e01c      	b.n	8005a68 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	f000 fbd2 	bl	80061e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2140      	movs	r1, #64	@ 0x40
 8005a46:	4618      	mov	r0, r3
 8005a48:	f000 fc2c 	bl	80062a4 <TIM_ITRx_SetConfig>
      break;
 8005a4c:	e00c      	b.n	8005a68 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4619      	mov	r1, r3
 8005a58:	4610      	mov	r0, r2
 8005a5a:	f000 fc23 	bl	80062a4 <TIM_ITRx_SetConfig>
      break;
 8005a5e:	e003      	b.n	8005a68 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	73fb      	strb	r3, [r7, #15]
      break;
 8005a64:	e000      	b.n	8005a68 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8005a66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3710      	adds	r7, #16
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	bf00      	nop
 8005a84:	ffceff88 	.word	0xffceff88
 8005a88:	00100040 	.word	0x00100040
 8005a8c:	00100030 	.word	0x00100030
 8005a90:	00100020 	.word	0x00100020

08005a94 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b083      	sub	sp, #12
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005a9c:	bf00      	nop
 8005a9e:	370c      	adds	r7, #12
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ab0:	bf00      	nop
 8005ab2:	370c      	adds	r7, #12
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ac4:	bf00      	nop
 8005ac6:	370c      	adds	r7, #12
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr

08005ad0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b083      	sub	sp, #12
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ad8:	bf00      	nop
 8005ada:	370c      	adds	r7, #12
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr

08005ae4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005aec:	bf00      	nop
 8005aee:	370c      	adds	r7, #12
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr

08005af8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b085      	sub	sp, #20
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4a43      	ldr	r2, [pc, #268]	@ (8005c18 <TIM_Base_SetConfig+0x120>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d013      	beq.n	8005b38 <TIM_Base_SetConfig+0x40>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b16:	d00f      	beq.n	8005b38 <TIM_Base_SetConfig+0x40>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4a40      	ldr	r2, [pc, #256]	@ (8005c1c <TIM_Base_SetConfig+0x124>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d00b      	beq.n	8005b38 <TIM_Base_SetConfig+0x40>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	4a3f      	ldr	r2, [pc, #252]	@ (8005c20 <TIM_Base_SetConfig+0x128>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d007      	beq.n	8005b38 <TIM_Base_SetConfig+0x40>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	4a3e      	ldr	r2, [pc, #248]	@ (8005c24 <TIM_Base_SetConfig+0x12c>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d003      	beq.n	8005b38 <TIM_Base_SetConfig+0x40>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	4a3d      	ldr	r2, [pc, #244]	@ (8005c28 <TIM_Base_SetConfig+0x130>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d108      	bne.n	8005b4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	68fa      	ldr	r2, [r7, #12]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a32      	ldr	r2, [pc, #200]	@ (8005c18 <TIM_Base_SetConfig+0x120>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d01f      	beq.n	8005b92 <TIM_Base_SetConfig+0x9a>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b58:	d01b      	beq.n	8005b92 <TIM_Base_SetConfig+0x9a>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a2f      	ldr	r2, [pc, #188]	@ (8005c1c <TIM_Base_SetConfig+0x124>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d017      	beq.n	8005b92 <TIM_Base_SetConfig+0x9a>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a2e      	ldr	r2, [pc, #184]	@ (8005c20 <TIM_Base_SetConfig+0x128>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d013      	beq.n	8005b92 <TIM_Base_SetConfig+0x9a>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a2d      	ldr	r2, [pc, #180]	@ (8005c24 <TIM_Base_SetConfig+0x12c>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d00f      	beq.n	8005b92 <TIM_Base_SetConfig+0x9a>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a2c      	ldr	r2, [pc, #176]	@ (8005c28 <TIM_Base_SetConfig+0x130>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d00b      	beq.n	8005b92 <TIM_Base_SetConfig+0x9a>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a2b      	ldr	r2, [pc, #172]	@ (8005c2c <TIM_Base_SetConfig+0x134>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d007      	beq.n	8005b92 <TIM_Base_SetConfig+0x9a>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a2a      	ldr	r2, [pc, #168]	@ (8005c30 <TIM_Base_SetConfig+0x138>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d003      	beq.n	8005b92 <TIM_Base_SetConfig+0x9a>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4a29      	ldr	r2, [pc, #164]	@ (8005c34 <TIM_Base_SetConfig+0x13c>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d108      	bne.n	8005ba4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	68fa      	ldr	r2, [r7, #12]
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	695b      	ldr	r3, [r3, #20]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	689a      	ldr	r2, [r3, #8]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	4a14      	ldr	r2, [pc, #80]	@ (8005c18 <TIM_Base_SetConfig+0x120>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d00f      	beq.n	8005bea <TIM_Base_SetConfig+0xf2>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4a16      	ldr	r2, [pc, #88]	@ (8005c28 <TIM_Base_SetConfig+0x130>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d00b      	beq.n	8005bea <TIM_Base_SetConfig+0xf2>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4a15      	ldr	r2, [pc, #84]	@ (8005c2c <TIM_Base_SetConfig+0x134>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d007      	beq.n	8005bea <TIM_Base_SetConfig+0xf2>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4a14      	ldr	r2, [pc, #80]	@ (8005c30 <TIM_Base_SetConfig+0x138>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d003      	beq.n	8005bea <TIM_Base_SetConfig+0xf2>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4a13      	ldr	r2, [pc, #76]	@ (8005c34 <TIM_Base_SetConfig+0x13c>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d103      	bne.n	8005bf2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	691a      	ldr	r2, [r3, #16]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f043 0204 	orr.w	r2, r3, #4
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2201      	movs	r2, #1
 8005c02:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	68fa      	ldr	r2, [r7, #12]
 8005c08:	601a      	str	r2, [r3, #0]
}
 8005c0a:	bf00      	nop
 8005c0c:	3714      	adds	r7, #20
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr
 8005c16:	bf00      	nop
 8005c18:	40010000 	.word	0x40010000
 8005c1c:	40000400 	.word	0x40000400
 8005c20:	40000800 	.word	0x40000800
 8005c24:	40000c00 	.word	0x40000c00
 8005c28:	40010400 	.word	0x40010400
 8005c2c:	40014000 	.word	0x40014000
 8005c30:	40014400 	.word	0x40014400
 8005c34:	40014800 	.word	0x40014800

08005c38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b087      	sub	sp, #28
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a1b      	ldr	r3, [r3, #32]
 8005c46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6a1b      	ldr	r3, [r3, #32]
 8005c4c:	f023 0201 	bic.w	r2, r3, #1
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	699b      	ldr	r3, [r3, #24]
 8005c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c60:	68fa      	ldr	r2, [r7, #12]
 8005c62:	4b37      	ldr	r3, [pc, #220]	@ (8005d40 <TIM_OC1_SetConfig+0x108>)
 8005c64:	4013      	ands	r3, r2
 8005c66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f023 0303 	bic.w	r3, r3, #3
 8005c6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68fa      	ldr	r2, [r7, #12]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	f023 0302 	bic.w	r3, r3, #2
 8005c80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	697a      	ldr	r2, [r7, #20]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4a2d      	ldr	r2, [pc, #180]	@ (8005d44 <TIM_OC1_SetConfig+0x10c>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d00f      	beq.n	8005cb4 <TIM_OC1_SetConfig+0x7c>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	4a2c      	ldr	r2, [pc, #176]	@ (8005d48 <TIM_OC1_SetConfig+0x110>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d00b      	beq.n	8005cb4 <TIM_OC1_SetConfig+0x7c>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	4a2b      	ldr	r2, [pc, #172]	@ (8005d4c <TIM_OC1_SetConfig+0x114>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d007      	beq.n	8005cb4 <TIM_OC1_SetConfig+0x7c>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	4a2a      	ldr	r2, [pc, #168]	@ (8005d50 <TIM_OC1_SetConfig+0x118>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d003      	beq.n	8005cb4 <TIM_OC1_SetConfig+0x7c>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	4a29      	ldr	r2, [pc, #164]	@ (8005d54 <TIM_OC1_SetConfig+0x11c>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d10c      	bne.n	8005cce <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	f023 0308 	bic.w	r3, r3, #8
 8005cba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	697a      	ldr	r2, [r7, #20]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	f023 0304 	bic.w	r3, r3, #4
 8005ccc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4a1c      	ldr	r2, [pc, #112]	@ (8005d44 <TIM_OC1_SetConfig+0x10c>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d00f      	beq.n	8005cf6 <TIM_OC1_SetConfig+0xbe>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a1b      	ldr	r2, [pc, #108]	@ (8005d48 <TIM_OC1_SetConfig+0x110>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d00b      	beq.n	8005cf6 <TIM_OC1_SetConfig+0xbe>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4a1a      	ldr	r2, [pc, #104]	@ (8005d4c <TIM_OC1_SetConfig+0x114>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d007      	beq.n	8005cf6 <TIM_OC1_SetConfig+0xbe>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a19      	ldr	r2, [pc, #100]	@ (8005d50 <TIM_OC1_SetConfig+0x118>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d003      	beq.n	8005cf6 <TIM_OC1_SetConfig+0xbe>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a18      	ldr	r2, [pc, #96]	@ (8005d54 <TIM_OC1_SetConfig+0x11c>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d111      	bne.n	8005d1a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005cfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005d04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	695b      	ldr	r3, [r3, #20]
 8005d0a:	693a      	ldr	r2, [r7, #16]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	699b      	ldr	r3, [r3, #24]
 8005d14:	693a      	ldr	r2, [r7, #16]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	693a      	ldr	r2, [r7, #16]
 8005d1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	68fa      	ldr	r2, [r7, #12]
 8005d24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	685a      	ldr	r2, [r3, #4]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	697a      	ldr	r2, [r7, #20]
 8005d32:	621a      	str	r2, [r3, #32]
}
 8005d34:	bf00      	nop
 8005d36:	371c      	adds	r7, #28
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr
 8005d40:	fffeff8f 	.word	0xfffeff8f
 8005d44:	40010000 	.word	0x40010000
 8005d48:	40010400 	.word	0x40010400
 8005d4c:	40014000 	.word	0x40014000
 8005d50:	40014400 	.word	0x40014400
 8005d54:	40014800 	.word	0x40014800

08005d58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b087      	sub	sp, #28
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a1b      	ldr	r3, [r3, #32]
 8005d66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6a1b      	ldr	r3, [r3, #32]
 8005d6c:	f023 0210 	bic.w	r2, r3, #16
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	699b      	ldr	r3, [r3, #24]
 8005d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d80:	68fa      	ldr	r2, [r7, #12]
 8005d82:	4b34      	ldr	r3, [pc, #208]	@ (8005e54 <TIM_OC2_SetConfig+0xfc>)
 8005d84:	4013      	ands	r3, r2
 8005d86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	021b      	lsls	r3, r3, #8
 8005d96:	68fa      	ldr	r2, [r7, #12]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	f023 0320 	bic.w	r3, r3, #32
 8005da2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	011b      	lsls	r3, r3, #4
 8005daa:	697a      	ldr	r2, [r7, #20]
 8005dac:	4313      	orrs	r3, r2
 8005dae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	4a29      	ldr	r2, [pc, #164]	@ (8005e58 <TIM_OC2_SetConfig+0x100>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d003      	beq.n	8005dc0 <TIM_OC2_SetConfig+0x68>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a28      	ldr	r2, [pc, #160]	@ (8005e5c <TIM_OC2_SetConfig+0x104>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d10d      	bne.n	8005ddc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005dc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	011b      	lsls	r3, r3, #4
 8005dce:	697a      	ldr	r2, [r7, #20]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005dda:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	4a1e      	ldr	r2, [pc, #120]	@ (8005e58 <TIM_OC2_SetConfig+0x100>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d00f      	beq.n	8005e04 <TIM_OC2_SetConfig+0xac>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	4a1d      	ldr	r2, [pc, #116]	@ (8005e5c <TIM_OC2_SetConfig+0x104>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d00b      	beq.n	8005e04 <TIM_OC2_SetConfig+0xac>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	4a1c      	ldr	r2, [pc, #112]	@ (8005e60 <TIM_OC2_SetConfig+0x108>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d007      	beq.n	8005e04 <TIM_OC2_SetConfig+0xac>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4a1b      	ldr	r2, [pc, #108]	@ (8005e64 <TIM_OC2_SetConfig+0x10c>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d003      	beq.n	8005e04 <TIM_OC2_SetConfig+0xac>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	4a1a      	ldr	r2, [pc, #104]	@ (8005e68 <TIM_OC2_SetConfig+0x110>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d113      	bne.n	8005e2c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005e0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005e12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	695b      	ldr	r3, [r3, #20]
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	693a      	ldr	r2, [r7, #16]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	699b      	ldr	r3, [r3, #24]
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	693a      	ldr	r2, [r7, #16]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	693a      	ldr	r2, [r7, #16]
 8005e30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	68fa      	ldr	r2, [r7, #12]
 8005e36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	685a      	ldr	r2, [r3, #4]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	697a      	ldr	r2, [r7, #20]
 8005e44:	621a      	str	r2, [r3, #32]
}
 8005e46:	bf00      	nop
 8005e48:	371c      	adds	r7, #28
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr
 8005e52:	bf00      	nop
 8005e54:	feff8fff 	.word	0xfeff8fff
 8005e58:	40010000 	.word	0x40010000
 8005e5c:	40010400 	.word	0x40010400
 8005e60:	40014000 	.word	0x40014000
 8005e64:	40014400 	.word	0x40014400
 8005e68:	40014800 	.word	0x40014800

08005e6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b087      	sub	sp, #28
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a1b      	ldr	r3, [r3, #32]
 8005e7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6a1b      	ldr	r3, [r3, #32]
 8005e80:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	69db      	ldr	r3, [r3, #28]
 8005e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e94:	68fa      	ldr	r2, [r7, #12]
 8005e96:	4b33      	ldr	r3, [pc, #204]	@ (8005f64 <TIM_OC3_SetConfig+0xf8>)
 8005e98:	4013      	ands	r3, r2
 8005e9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f023 0303 	bic.w	r3, r3, #3
 8005ea2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	68fa      	ldr	r2, [r7, #12]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005eb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	021b      	lsls	r3, r3, #8
 8005ebc:	697a      	ldr	r2, [r7, #20]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4a28      	ldr	r2, [pc, #160]	@ (8005f68 <TIM_OC3_SetConfig+0xfc>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d003      	beq.n	8005ed2 <TIM_OC3_SetConfig+0x66>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4a27      	ldr	r2, [pc, #156]	@ (8005f6c <TIM_OC3_SetConfig+0x100>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d10d      	bne.n	8005eee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005ed8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	021b      	lsls	r3, r3, #8
 8005ee0:	697a      	ldr	r2, [r7, #20]
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005eec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4a1d      	ldr	r2, [pc, #116]	@ (8005f68 <TIM_OC3_SetConfig+0xfc>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d00f      	beq.n	8005f16 <TIM_OC3_SetConfig+0xaa>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4a1c      	ldr	r2, [pc, #112]	@ (8005f6c <TIM_OC3_SetConfig+0x100>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d00b      	beq.n	8005f16 <TIM_OC3_SetConfig+0xaa>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4a1b      	ldr	r2, [pc, #108]	@ (8005f70 <TIM_OC3_SetConfig+0x104>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d007      	beq.n	8005f16 <TIM_OC3_SetConfig+0xaa>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	4a1a      	ldr	r2, [pc, #104]	@ (8005f74 <TIM_OC3_SetConfig+0x108>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d003      	beq.n	8005f16 <TIM_OC3_SetConfig+0xaa>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a19      	ldr	r2, [pc, #100]	@ (8005f78 <TIM_OC3_SetConfig+0x10c>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d113      	bne.n	8005f3e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005f24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	695b      	ldr	r3, [r3, #20]
 8005f2a:	011b      	lsls	r3, r3, #4
 8005f2c:	693a      	ldr	r2, [r7, #16]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	699b      	ldr	r3, [r3, #24]
 8005f36:	011b      	lsls	r3, r3, #4
 8005f38:	693a      	ldr	r2, [r7, #16]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	693a      	ldr	r2, [r7, #16]
 8005f42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	68fa      	ldr	r2, [r7, #12]
 8005f48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	685a      	ldr	r2, [r3, #4]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	697a      	ldr	r2, [r7, #20]
 8005f56:	621a      	str	r2, [r3, #32]
}
 8005f58:	bf00      	nop
 8005f5a:	371c      	adds	r7, #28
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr
 8005f64:	fffeff8f 	.word	0xfffeff8f
 8005f68:	40010000 	.word	0x40010000
 8005f6c:	40010400 	.word	0x40010400
 8005f70:	40014000 	.word	0x40014000
 8005f74:	40014400 	.word	0x40014400
 8005f78:	40014800 	.word	0x40014800

08005f7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b087      	sub	sp, #28
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6a1b      	ldr	r3, [r3, #32]
 8005f8a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6a1b      	ldr	r3, [r3, #32]
 8005f90:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	69db      	ldr	r3, [r3, #28]
 8005fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005fa4:	68fa      	ldr	r2, [r7, #12]
 8005fa6:	4b24      	ldr	r3, [pc, #144]	@ (8006038 <TIM_OC4_SetConfig+0xbc>)
 8005fa8:	4013      	ands	r3, r2
 8005faa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005fb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	021b      	lsls	r3, r3, #8
 8005fba:	68fa      	ldr	r2, [r7, #12]
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005fc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	031b      	lsls	r3, r3, #12
 8005fce:	693a      	ldr	r2, [r7, #16]
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a19      	ldr	r2, [pc, #100]	@ (800603c <TIM_OC4_SetConfig+0xc0>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d00f      	beq.n	8005ffc <TIM_OC4_SetConfig+0x80>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	4a18      	ldr	r2, [pc, #96]	@ (8006040 <TIM_OC4_SetConfig+0xc4>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d00b      	beq.n	8005ffc <TIM_OC4_SetConfig+0x80>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	4a17      	ldr	r2, [pc, #92]	@ (8006044 <TIM_OC4_SetConfig+0xc8>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d007      	beq.n	8005ffc <TIM_OC4_SetConfig+0x80>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	4a16      	ldr	r2, [pc, #88]	@ (8006048 <TIM_OC4_SetConfig+0xcc>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d003      	beq.n	8005ffc <TIM_OC4_SetConfig+0x80>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	4a15      	ldr	r2, [pc, #84]	@ (800604c <TIM_OC4_SetConfig+0xd0>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d109      	bne.n	8006010 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006002:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	695b      	ldr	r3, [r3, #20]
 8006008:	019b      	lsls	r3, r3, #6
 800600a:	697a      	ldr	r2, [r7, #20]
 800600c:	4313      	orrs	r3, r2
 800600e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	697a      	ldr	r2, [r7, #20]
 8006014:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	685a      	ldr	r2, [r3, #4]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	693a      	ldr	r2, [r7, #16]
 8006028:	621a      	str	r2, [r3, #32]
}
 800602a:	bf00      	nop
 800602c:	371c      	adds	r7, #28
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr
 8006036:	bf00      	nop
 8006038:	feff8fff 	.word	0xfeff8fff
 800603c:	40010000 	.word	0x40010000
 8006040:	40010400 	.word	0x40010400
 8006044:	40014000 	.word	0x40014000
 8006048:	40014400 	.word	0x40014400
 800604c:	40014800 	.word	0x40014800

08006050 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006050:	b480      	push	{r7}
 8006052:	b087      	sub	sp, #28
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a1b      	ldr	r3, [r3, #32]
 800605e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6a1b      	ldr	r3, [r3, #32]
 8006064:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006078:	68fa      	ldr	r2, [r7, #12]
 800607a:	4b21      	ldr	r3, [pc, #132]	@ (8006100 <TIM_OC5_SetConfig+0xb0>)
 800607c:	4013      	ands	r3, r2
 800607e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	68fa      	ldr	r2, [r7, #12]
 8006086:	4313      	orrs	r3, r2
 8006088:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006090:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	041b      	lsls	r3, r3, #16
 8006098:	693a      	ldr	r2, [r7, #16]
 800609a:	4313      	orrs	r3, r2
 800609c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a18      	ldr	r2, [pc, #96]	@ (8006104 <TIM_OC5_SetConfig+0xb4>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d00f      	beq.n	80060c6 <TIM_OC5_SetConfig+0x76>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4a17      	ldr	r2, [pc, #92]	@ (8006108 <TIM_OC5_SetConfig+0xb8>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d00b      	beq.n	80060c6 <TIM_OC5_SetConfig+0x76>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4a16      	ldr	r2, [pc, #88]	@ (800610c <TIM_OC5_SetConfig+0xbc>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d007      	beq.n	80060c6 <TIM_OC5_SetConfig+0x76>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4a15      	ldr	r2, [pc, #84]	@ (8006110 <TIM_OC5_SetConfig+0xc0>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d003      	beq.n	80060c6 <TIM_OC5_SetConfig+0x76>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4a14      	ldr	r2, [pc, #80]	@ (8006114 <TIM_OC5_SetConfig+0xc4>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d109      	bne.n	80060da <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060cc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	695b      	ldr	r3, [r3, #20]
 80060d2:	021b      	lsls	r3, r3, #8
 80060d4:	697a      	ldr	r2, [r7, #20]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	697a      	ldr	r2, [r7, #20]
 80060de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	68fa      	ldr	r2, [r7, #12]
 80060e4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	685a      	ldr	r2, [r3, #4]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	693a      	ldr	r2, [r7, #16]
 80060f2:	621a      	str	r2, [r3, #32]
}
 80060f4:	bf00      	nop
 80060f6:	371c      	adds	r7, #28
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr
 8006100:	fffeff8f 	.word	0xfffeff8f
 8006104:	40010000 	.word	0x40010000
 8006108:	40010400 	.word	0x40010400
 800610c:	40014000 	.word	0x40014000
 8006110:	40014400 	.word	0x40014400
 8006114:	40014800 	.word	0x40014800

08006118 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006118:	b480      	push	{r7}
 800611a:	b087      	sub	sp, #28
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a1b      	ldr	r3, [r3, #32]
 8006126:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6a1b      	ldr	r3, [r3, #32]
 800612c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800613e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006140:	68fa      	ldr	r2, [r7, #12]
 8006142:	4b22      	ldr	r3, [pc, #136]	@ (80061cc <TIM_OC6_SetConfig+0xb4>)
 8006144:	4013      	ands	r3, r2
 8006146:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	021b      	lsls	r3, r3, #8
 800614e:	68fa      	ldr	r2, [r7, #12]
 8006150:	4313      	orrs	r3, r2
 8006152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800615a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	051b      	lsls	r3, r3, #20
 8006162:	693a      	ldr	r2, [r7, #16]
 8006164:	4313      	orrs	r3, r2
 8006166:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	4a19      	ldr	r2, [pc, #100]	@ (80061d0 <TIM_OC6_SetConfig+0xb8>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d00f      	beq.n	8006190 <TIM_OC6_SetConfig+0x78>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4a18      	ldr	r2, [pc, #96]	@ (80061d4 <TIM_OC6_SetConfig+0xbc>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d00b      	beq.n	8006190 <TIM_OC6_SetConfig+0x78>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	4a17      	ldr	r2, [pc, #92]	@ (80061d8 <TIM_OC6_SetConfig+0xc0>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d007      	beq.n	8006190 <TIM_OC6_SetConfig+0x78>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	4a16      	ldr	r2, [pc, #88]	@ (80061dc <TIM_OC6_SetConfig+0xc4>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d003      	beq.n	8006190 <TIM_OC6_SetConfig+0x78>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4a15      	ldr	r2, [pc, #84]	@ (80061e0 <TIM_OC6_SetConfig+0xc8>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d109      	bne.n	80061a4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006196:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	695b      	ldr	r3, [r3, #20]
 800619c:	029b      	lsls	r3, r3, #10
 800619e:	697a      	ldr	r2, [r7, #20]
 80061a0:	4313      	orrs	r3, r2
 80061a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	697a      	ldr	r2, [r7, #20]
 80061a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	68fa      	ldr	r2, [r7, #12]
 80061ae:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	685a      	ldr	r2, [r3, #4]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	693a      	ldr	r2, [r7, #16]
 80061bc:	621a      	str	r2, [r3, #32]
}
 80061be:	bf00      	nop
 80061c0:	371c      	adds	r7, #28
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr
 80061ca:	bf00      	nop
 80061cc:	feff8fff 	.word	0xfeff8fff
 80061d0:	40010000 	.word	0x40010000
 80061d4:	40010400 	.word	0x40010400
 80061d8:	40014000 	.word	0x40014000
 80061dc:	40014400 	.word	0x40014400
 80061e0:	40014800 	.word	0x40014800

080061e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b087      	sub	sp, #28
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6a1b      	ldr	r3, [r3, #32]
 80061f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	6a1b      	ldr	r3, [r3, #32]
 80061fa:	f023 0201 	bic.w	r2, r3, #1
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	699b      	ldr	r3, [r3, #24]
 8006206:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800620e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	011b      	lsls	r3, r3, #4
 8006214:	693a      	ldr	r2, [r7, #16]
 8006216:	4313      	orrs	r3, r2
 8006218:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	f023 030a 	bic.w	r3, r3, #10
 8006220:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006222:	697a      	ldr	r2, [r7, #20]
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	4313      	orrs	r3, r2
 8006228:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	693a      	ldr	r2, [r7, #16]
 800622e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	697a      	ldr	r2, [r7, #20]
 8006234:	621a      	str	r2, [r3, #32]
}
 8006236:	bf00      	nop
 8006238:	371c      	adds	r7, #28
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr

08006242 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006242:	b480      	push	{r7}
 8006244:	b087      	sub	sp, #28
 8006246:	af00      	add	r7, sp, #0
 8006248:	60f8      	str	r0, [r7, #12]
 800624a:	60b9      	str	r1, [r7, #8]
 800624c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6a1b      	ldr	r3, [r3, #32]
 8006252:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6a1b      	ldr	r3, [r3, #32]
 8006258:	f023 0210 	bic.w	r2, r3, #16
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	699b      	ldr	r3, [r3, #24]
 8006264:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800626c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	031b      	lsls	r3, r3, #12
 8006272:	693a      	ldr	r2, [r7, #16]
 8006274:	4313      	orrs	r3, r2
 8006276:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800627e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	011b      	lsls	r3, r3, #4
 8006284:	697a      	ldr	r2, [r7, #20]
 8006286:	4313      	orrs	r3, r2
 8006288:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	693a      	ldr	r2, [r7, #16]
 800628e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	697a      	ldr	r2, [r7, #20]
 8006294:	621a      	str	r2, [r3, #32]
}
 8006296:	bf00      	nop
 8006298:	371c      	adds	r7, #28
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr
	...

080062a4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b085      	sub	sp, #20
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80062b4:	68fa      	ldr	r2, [r7, #12]
 80062b6:	4b09      	ldr	r3, [pc, #36]	@ (80062dc <TIM_ITRx_SetConfig+0x38>)
 80062b8:	4013      	ands	r3, r2
 80062ba:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80062bc:	683a      	ldr	r2, [r7, #0]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	f043 0307 	orr.w	r3, r3, #7
 80062c6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	68fa      	ldr	r2, [r7, #12]
 80062cc:	609a      	str	r2, [r3, #8]
}
 80062ce:	bf00      	nop
 80062d0:	3714      	adds	r7, #20
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr
 80062da:	bf00      	nop
 80062dc:	ffcfff8f 	.word	0xffcfff8f

080062e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b087      	sub	sp, #28
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	60b9      	str	r1, [r7, #8]
 80062ea:	607a      	str	r2, [r7, #4]
 80062ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80062fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	021a      	lsls	r2, r3, #8
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	431a      	orrs	r2, r3
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	4313      	orrs	r3, r2
 8006308:	697a      	ldr	r2, [r7, #20]
 800630a:	4313      	orrs	r3, r2
 800630c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	697a      	ldr	r2, [r7, #20]
 8006312:	609a      	str	r2, [r3, #8]
}
 8006314:	bf00      	nop
 8006316:	371c      	adds	r7, #28
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr

08006320 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006320:	b480      	push	{r7}
 8006322:	b087      	sub	sp, #28
 8006324:	af00      	add	r7, sp, #0
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	f003 031f 	and.w	r3, r3, #31
 8006332:	2201      	movs	r2, #1
 8006334:	fa02 f303 	lsl.w	r3, r2, r3
 8006338:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	6a1a      	ldr	r2, [r3, #32]
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	43db      	mvns	r3, r3
 8006342:	401a      	ands	r2, r3
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	6a1a      	ldr	r2, [r3, #32]
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	f003 031f 	and.w	r3, r3, #31
 8006352:	6879      	ldr	r1, [r7, #4]
 8006354:	fa01 f303 	lsl.w	r3, r1, r3
 8006358:	431a      	orrs	r2, r3
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	621a      	str	r2, [r3, #32]
}
 800635e:	bf00      	nop
 8006360:	371c      	adds	r7, #28
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr
	...

0800636c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800636c:	b480      	push	{r7}
 800636e:	b085      	sub	sp, #20
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800637c:	2b01      	cmp	r3, #1
 800637e:	d101      	bne.n	8006384 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006380:	2302      	movs	r3, #2
 8006382:	e06d      	b.n	8006460 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2201      	movs	r2, #1
 8006388:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2202      	movs	r2, #2
 8006390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a30      	ldr	r2, [pc, #192]	@ (800646c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d004      	beq.n	80063b8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a2f      	ldr	r2, [pc, #188]	@ (8006470 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d108      	bne.n	80063ca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80063be:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	68fa      	ldr	r2, [r7, #12]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063d0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	68fa      	ldr	r2, [r7, #12]
 80063d8:	4313      	orrs	r3, r2
 80063da:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a20      	ldr	r2, [pc, #128]	@ (800646c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d022      	beq.n	8006434 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063f6:	d01d      	beq.n	8006434 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a1d      	ldr	r2, [pc, #116]	@ (8006474 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d018      	beq.n	8006434 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a1c      	ldr	r2, [pc, #112]	@ (8006478 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d013      	beq.n	8006434 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a1a      	ldr	r2, [pc, #104]	@ (800647c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d00e      	beq.n	8006434 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a15      	ldr	r2, [pc, #84]	@ (8006470 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d009      	beq.n	8006434 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a16      	ldr	r2, [pc, #88]	@ (8006480 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d004      	beq.n	8006434 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a15      	ldr	r2, [pc, #84]	@ (8006484 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d10c      	bne.n	800644e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800643a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	68ba      	ldr	r2, [r7, #8]
 8006442:	4313      	orrs	r3, r2
 8006444:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	68ba      	ldr	r2, [r7, #8]
 800644c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2201      	movs	r2, #1
 8006452:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800645e:	2300      	movs	r3, #0
}
 8006460:	4618      	mov	r0, r3
 8006462:	3714      	adds	r7, #20
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr
 800646c:	40010000 	.word	0x40010000
 8006470:	40010400 	.word	0x40010400
 8006474:	40000400 	.word	0x40000400
 8006478:	40000800 	.word	0x40000800
 800647c:	40000c00 	.word	0x40000c00
 8006480:	40001800 	.word	0x40001800
 8006484:	40014000 	.word	0x40014000

08006488 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006488:	b480      	push	{r7}
 800648a:	b083      	sub	sp, #12
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006490:	bf00      	nop
 8006492:	370c      	adds	r7, #12
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr

0800649c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800649c:	b480      	push	{r7}
 800649e:	b083      	sub	sp, #12
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80064a4:	bf00      	nop
 80064a6:	370c      	adds	r7, #12
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr

080064b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b083      	sub	sp, #12
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80064b8:	bf00      	nop
 80064ba:	370c      	adds	r7, #12
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr

080064c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b082      	sub	sp, #8
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d101      	bne.n	80064d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	e042      	b.n	800655c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d106      	bne.n	80064ee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f7fa fd61 	bl	8000fb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2224      	movs	r2, #36	@ 0x24
 80064f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f022 0201 	bic.w	r2, r2, #1
 8006504:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800650a:	2b00      	cmp	r3, #0
 800650c:	d002      	beq.n	8006514 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f001 fa14 	bl	800793c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f000 fca9 	bl	8006e6c <UART_SetConfig>
 800651a:	4603      	mov	r3, r0
 800651c:	2b01      	cmp	r3, #1
 800651e:	d101      	bne.n	8006524 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006520:	2301      	movs	r3, #1
 8006522:	e01b      	b.n	800655c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	685a      	ldr	r2, [r3, #4]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006532:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	689a      	ldr	r2, [r3, #8]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006542:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f042 0201 	orr.w	r2, r2, #1
 8006552:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f001 fa93 	bl	8007a80 <UART_CheckIdleState>
 800655a:	4603      	mov	r3, r0
}
 800655c:	4618      	mov	r0, r3
 800655e:	3708      	adds	r7, #8
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b08a      	sub	sp, #40	@ 0x28
 8006568:	af02      	add	r7, sp, #8
 800656a:	60f8      	str	r0, [r7, #12]
 800656c:	60b9      	str	r1, [r7, #8]
 800656e:	603b      	str	r3, [r7, #0]
 8006570:	4613      	mov	r3, r2
 8006572:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800657a:	2b20      	cmp	r3, #32
 800657c:	d17b      	bne.n	8006676 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d002      	beq.n	800658a <HAL_UART_Transmit+0x26>
 8006584:	88fb      	ldrh	r3, [r7, #6]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d101      	bne.n	800658e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	e074      	b.n	8006678 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2200      	movs	r2, #0
 8006592:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2221      	movs	r2, #33	@ 0x21
 800659a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800659e:	f7fa fe3d 	bl	800121c <HAL_GetTick>
 80065a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	88fa      	ldrh	r2, [r7, #6]
 80065a8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	88fa      	ldrh	r2, [r7, #6]
 80065b0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065bc:	d108      	bne.n	80065d0 <HAL_UART_Transmit+0x6c>
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d104      	bne.n	80065d0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80065c6:	2300      	movs	r3, #0
 80065c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	61bb      	str	r3, [r7, #24]
 80065ce:	e003      	b.n	80065d8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80065d4:	2300      	movs	r3, #0
 80065d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80065d8:	e030      	b.n	800663c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	9300      	str	r3, [sp, #0]
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	2200      	movs	r2, #0
 80065e2:	2180      	movs	r1, #128	@ 0x80
 80065e4:	68f8      	ldr	r0, [r7, #12]
 80065e6:	f001 faf5 	bl	8007bd4 <UART_WaitOnFlagUntilTimeout>
 80065ea:	4603      	mov	r3, r0
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d005      	beq.n	80065fc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2220      	movs	r2, #32
 80065f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80065f8:	2303      	movs	r3, #3
 80065fa:	e03d      	b.n	8006678 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80065fc:	69fb      	ldr	r3, [r7, #28]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d10b      	bne.n	800661a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006602:	69bb      	ldr	r3, [r7, #24]
 8006604:	881b      	ldrh	r3, [r3, #0]
 8006606:	461a      	mov	r2, r3
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006610:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006612:	69bb      	ldr	r3, [r7, #24]
 8006614:	3302      	adds	r3, #2
 8006616:	61bb      	str	r3, [r7, #24]
 8006618:	e007      	b.n	800662a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800661a:	69fb      	ldr	r3, [r7, #28]
 800661c:	781a      	ldrb	r2, [r3, #0]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006624:	69fb      	ldr	r3, [r7, #28]
 8006626:	3301      	adds	r3, #1
 8006628:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006630:	b29b      	uxth	r3, r3
 8006632:	3b01      	subs	r3, #1
 8006634:	b29a      	uxth	r2, r3
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006642:	b29b      	uxth	r3, r3
 8006644:	2b00      	cmp	r3, #0
 8006646:	d1c8      	bne.n	80065da <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	9300      	str	r3, [sp, #0]
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	2200      	movs	r2, #0
 8006650:	2140      	movs	r1, #64	@ 0x40
 8006652:	68f8      	ldr	r0, [r7, #12]
 8006654:	f001 fabe 	bl	8007bd4 <UART_WaitOnFlagUntilTimeout>
 8006658:	4603      	mov	r3, r0
 800665a:	2b00      	cmp	r3, #0
 800665c:	d005      	beq.n	800666a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2220      	movs	r2, #32
 8006662:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006666:	2303      	movs	r3, #3
 8006668:	e006      	b.n	8006678 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2220      	movs	r2, #32
 800666e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006672:	2300      	movs	r3, #0
 8006674:	e000      	b.n	8006678 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006676:	2302      	movs	r3, #2
  }
}
 8006678:	4618      	mov	r0, r3
 800667a:	3720      	adds	r7, #32
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}

08006680 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b0ba      	sub	sp, #232	@ 0xe8
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	69db      	ldr	r3, [r3, #28]
 800668e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80066a6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80066aa:	f640 030f 	movw	r3, #2063	@ 0x80f
 80066ae:	4013      	ands	r3, r2
 80066b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80066b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d11b      	bne.n	80066f4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80066bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066c0:	f003 0320 	and.w	r3, r3, #32
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d015      	beq.n	80066f4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80066c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066cc:	f003 0320 	and.w	r3, r3, #32
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d105      	bne.n	80066e0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80066d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d009      	beq.n	80066f4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	f000 8393 	beq.w	8006e10 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	4798      	blx	r3
      }
      return;
 80066f2:	e38d      	b.n	8006e10 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80066f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	f000 8123 	beq.w	8006944 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80066fe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006702:	4b8d      	ldr	r3, [pc, #564]	@ (8006938 <HAL_UART_IRQHandler+0x2b8>)
 8006704:	4013      	ands	r3, r2
 8006706:	2b00      	cmp	r3, #0
 8006708:	d106      	bne.n	8006718 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800670a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800670e:	4b8b      	ldr	r3, [pc, #556]	@ (800693c <HAL_UART_IRQHandler+0x2bc>)
 8006710:	4013      	ands	r3, r2
 8006712:	2b00      	cmp	r3, #0
 8006714:	f000 8116 	beq.w	8006944 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006718:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800671c:	f003 0301 	and.w	r3, r3, #1
 8006720:	2b00      	cmp	r3, #0
 8006722:	d011      	beq.n	8006748 <HAL_UART_IRQHandler+0xc8>
 8006724:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006728:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800672c:	2b00      	cmp	r3, #0
 800672e:	d00b      	beq.n	8006748 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	2201      	movs	r2, #1
 8006736:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800673e:	f043 0201 	orr.w	r2, r3, #1
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006748:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800674c:	f003 0302 	and.w	r3, r3, #2
 8006750:	2b00      	cmp	r3, #0
 8006752:	d011      	beq.n	8006778 <HAL_UART_IRQHandler+0xf8>
 8006754:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006758:	f003 0301 	and.w	r3, r3, #1
 800675c:	2b00      	cmp	r3, #0
 800675e:	d00b      	beq.n	8006778 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	2202      	movs	r2, #2
 8006766:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800676e:	f043 0204 	orr.w	r2, r3, #4
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006778:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800677c:	f003 0304 	and.w	r3, r3, #4
 8006780:	2b00      	cmp	r3, #0
 8006782:	d011      	beq.n	80067a8 <HAL_UART_IRQHandler+0x128>
 8006784:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006788:	f003 0301 	and.w	r3, r3, #1
 800678c:	2b00      	cmp	r3, #0
 800678e:	d00b      	beq.n	80067a8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	2204      	movs	r2, #4
 8006796:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800679e:	f043 0202 	orr.w	r2, r3, #2
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80067a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067ac:	f003 0308 	and.w	r3, r3, #8
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d017      	beq.n	80067e4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80067b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067b8:	f003 0320 	and.w	r3, r3, #32
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d105      	bne.n	80067cc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80067c0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80067c4:	4b5c      	ldr	r3, [pc, #368]	@ (8006938 <HAL_UART_IRQHandler+0x2b8>)
 80067c6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d00b      	beq.n	80067e4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	2208      	movs	r2, #8
 80067d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067da:	f043 0208 	orr.w	r2, r3, #8
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80067e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d012      	beq.n	8006816 <HAL_UART_IRQHandler+0x196>
 80067f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067f4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d00c      	beq.n	8006816 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006804:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800680c:	f043 0220 	orr.w	r2, r3, #32
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800681c:	2b00      	cmp	r3, #0
 800681e:	f000 82f9 	beq.w	8006e14 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006826:	f003 0320 	and.w	r3, r3, #32
 800682a:	2b00      	cmp	r3, #0
 800682c:	d013      	beq.n	8006856 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800682e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006832:	f003 0320 	and.w	r3, r3, #32
 8006836:	2b00      	cmp	r3, #0
 8006838:	d105      	bne.n	8006846 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800683a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800683e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006842:	2b00      	cmp	r3, #0
 8006844:	d007      	beq.n	8006856 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800684a:	2b00      	cmp	r3, #0
 800684c:	d003      	beq.n	8006856 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800685c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800686a:	2b40      	cmp	r3, #64	@ 0x40
 800686c:	d005      	beq.n	800687a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800686e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006872:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006876:	2b00      	cmp	r3, #0
 8006878:	d054      	beq.n	8006924 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f001 fa18 	bl	8007cb0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800688a:	2b40      	cmp	r3, #64	@ 0x40
 800688c:	d146      	bne.n	800691c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	3308      	adds	r3, #8
 8006894:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006898:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800689c:	e853 3f00 	ldrex	r3, [r3]
 80068a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80068a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80068a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	3308      	adds	r3, #8
 80068b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80068ba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80068be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80068c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80068ca:	e841 2300 	strex	r3, r2, [r1]
 80068ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80068d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d1d9      	bne.n	800688e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d017      	beq.n	8006914 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068ea:	4a15      	ldr	r2, [pc, #84]	@ (8006940 <HAL_UART_IRQHandler+0x2c0>)
 80068ec:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068f4:	4618      	mov	r0, r3
 80068f6:	f7fb f973 	bl	8001be0 <HAL_DMA_Abort_IT>
 80068fa:	4603      	mov	r3, r0
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d019      	beq.n	8006934 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006906:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800690e:	4610      	mov	r0, r2
 8006910:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006912:	e00f      	b.n	8006934 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f000 fa93 	bl	8006e40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800691a:	e00b      	b.n	8006934 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f000 fa8f 	bl	8006e40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006922:	e007      	b.n	8006934 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 fa8b 	bl	8006e40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006932:	e26f      	b.n	8006e14 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006934:	bf00      	nop
    return;
 8006936:	e26d      	b.n	8006e14 <HAL_UART_IRQHandler+0x794>
 8006938:	10000001 	.word	0x10000001
 800693c:	04000120 	.word	0x04000120
 8006940:	08007d7d 	.word	0x08007d7d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006948:	2b01      	cmp	r3, #1
 800694a:	f040 8203 	bne.w	8006d54 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800694e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006952:	f003 0310 	and.w	r3, r3, #16
 8006956:	2b00      	cmp	r3, #0
 8006958:	f000 81fc 	beq.w	8006d54 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800695c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006960:	f003 0310 	and.w	r3, r3, #16
 8006964:	2b00      	cmp	r3, #0
 8006966:	f000 81f5 	beq.w	8006d54 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	2210      	movs	r2, #16
 8006970:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800697c:	2b40      	cmp	r3, #64	@ 0x40
 800697e:	f040 816d 	bne.w	8006c5c <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4aa4      	ldr	r2, [pc, #656]	@ (8006c1c <HAL_UART_IRQHandler+0x59c>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d068      	beq.n	8006a62 <HAL_UART_IRQHandler+0x3e2>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4aa1      	ldr	r2, [pc, #644]	@ (8006c20 <HAL_UART_IRQHandler+0x5a0>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d061      	beq.n	8006a62 <HAL_UART_IRQHandler+0x3e2>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a9f      	ldr	r2, [pc, #636]	@ (8006c24 <HAL_UART_IRQHandler+0x5a4>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d05a      	beq.n	8006a62 <HAL_UART_IRQHandler+0x3e2>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a9c      	ldr	r2, [pc, #624]	@ (8006c28 <HAL_UART_IRQHandler+0x5a8>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d053      	beq.n	8006a62 <HAL_UART_IRQHandler+0x3e2>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a9a      	ldr	r2, [pc, #616]	@ (8006c2c <HAL_UART_IRQHandler+0x5ac>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d04c      	beq.n	8006a62 <HAL_UART_IRQHandler+0x3e2>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a97      	ldr	r2, [pc, #604]	@ (8006c30 <HAL_UART_IRQHandler+0x5b0>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d045      	beq.n	8006a62 <HAL_UART_IRQHandler+0x3e2>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a95      	ldr	r2, [pc, #596]	@ (8006c34 <HAL_UART_IRQHandler+0x5b4>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d03e      	beq.n	8006a62 <HAL_UART_IRQHandler+0x3e2>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a92      	ldr	r2, [pc, #584]	@ (8006c38 <HAL_UART_IRQHandler+0x5b8>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d037      	beq.n	8006a62 <HAL_UART_IRQHandler+0x3e2>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a90      	ldr	r2, [pc, #576]	@ (8006c3c <HAL_UART_IRQHandler+0x5bc>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d030      	beq.n	8006a62 <HAL_UART_IRQHandler+0x3e2>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a8d      	ldr	r2, [pc, #564]	@ (8006c40 <HAL_UART_IRQHandler+0x5c0>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d029      	beq.n	8006a62 <HAL_UART_IRQHandler+0x3e2>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a8b      	ldr	r2, [pc, #556]	@ (8006c44 <HAL_UART_IRQHandler+0x5c4>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d022      	beq.n	8006a62 <HAL_UART_IRQHandler+0x3e2>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a88      	ldr	r2, [pc, #544]	@ (8006c48 <HAL_UART_IRQHandler+0x5c8>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d01b      	beq.n	8006a62 <HAL_UART_IRQHandler+0x3e2>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a86      	ldr	r2, [pc, #536]	@ (8006c4c <HAL_UART_IRQHandler+0x5cc>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d014      	beq.n	8006a62 <HAL_UART_IRQHandler+0x3e2>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a83      	ldr	r2, [pc, #524]	@ (8006c50 <HAL_UART_IRQHandler+0x5d0>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d00d      	beq.n	8006a62 <HAL_UART_IRQHandler+0x3e2>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a81      	ldr	r2, [pc, #516]	@ (8006c54 <HAL_UART_IRQHandler+0x5d4>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d006      	beq.n	8006a62 <HAL_UART_IRQHandler+0x3e2>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a7e      	ldr	r2, [pc, #504]	@ (8006c58 <HAL_UART_IRQHandler+0x5d8>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d106      	bne.n	8006a70 <HAL_UART_IRQHandler+0x3f0>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	e005      	b.n	8006a7c <HAL_UART_IRQHandler+0x3fc>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006a80:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	f000 80ad 	beq.w	8006be4 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006a90:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006a94:	429a      	cmp	r2, r3
 8006a96:	f080 80a5 	bcs.w	8006be4 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006aa0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006aaa:	69db      	ldr	r3, [r3, #28]
 8006aac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ab0:	f000 8087 	beq.w	8006bc2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006abc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006ac0:	e853 3f00 	ldrex	r3, [r3]
 8006ac4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006ac8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006acc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ad0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	461a      	mov	r2, r3
 8006ada:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006ade:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006ae2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006aea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006aee:	e841 2300 	strex	r3, r2, [r1]
 8006af2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006af6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d1da      	bne.n	8006ab4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	3308      	adds	r3, #8
 8006b04:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b06:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006b08:	e853 3f00 	ldrex	r3, [r3]
 8006b0c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006b0e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006b10:	f023 0301 	bic.w	r3, r3, #1
 8006b14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	3308      	adds	r3, #8
 8006b1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006b22:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006b26:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b28:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006b2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006b2e:	e841 2300 	strex	r3, r2, [r1]
 8006b32:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006b34:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d1e1      	bne.n	8006afe <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	3308      	adds	r3, #8
 8006b40:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b42:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006b44:	e853 3f00 	ldrex	r3, [r3]
 8006b48:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006b4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006b4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	3308      	adds	r3, #8
 8006b5a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006b5e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006b60:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b62:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006b64:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006b66:	e841 2300 	strex	r3, r2, [r1]
 8006b6a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006b6c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d1e3      	bne.n	8006b3a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2220      	movs	r2, #32
 8006b76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b88:	e853 3f00 	ldrex	r3, [r3]
 8006b8c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006b8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b90:	f023 0310 	bic.w	r3, r3, #16
 8006b94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	461a      	mov	r2, r3
 8006b9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006ba2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006ba4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006ba8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006baa:	e841 2300 	strex	r3, r2, [r1]
 8006bae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006bb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d1e4      	bne.n	8006b80 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f7fa fcf1 	bl	80015a4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2202      	movs	r2, #2
 8006bc6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	1ad3      	subs	r3, r2, r3
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	4619      	mov	r1, r3
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f000 f939 	bl	8006e54 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006be2:	e119      	b.n	8006e18 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006bea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006bee:	429a      	cmp	r2, r3
 8006bf0:	f040 8112 	bne.w	8006e18 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006bfa:	69db      	ldr	r3, [r3, #28]
 8006bfc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c00:	f040 810a 	bne.w	8006e18 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2202      	movs	r2, #2
 8006c08:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006c10:	4619      	mov	r1, r3
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 f91e 	bl	8006e54 <HAL_UARTEx_RxEventCallback>
      return;
 8006c18:	e0fe      	b.n	8006e18 <HAL_UART_IRQHandler+0x798>
 8006c1a:	bf00      	nop
 8006c1c:	40020010 	.word	0x40020010
 8006c20:	40020028 	.word	0x40020028
 8006c24:	40020040 	.word	0x40020040
 8006c28:	40020058 	.word	0x40020058
 8006c2c:	40020070 	.word	0x40020070
 8006c30:	40020088 	.word	0x40020088
 8006c34:	400200a0 	.word	0x400200a0
 8006c38:	400200b8 	.word	0x400200b8
 8006c3c:	40020410 	.word	0x40020410
 8006c40:	40020428 	.word	0x40020428
 8006c44:	40020440 	.word	0x40020440
 8006c48:	40020458 	.word	0x40020458
 8006c4c:	40020470 	.word	0x40020470
 8006c50:	40020488 	.word	0x40020488
 8006c54:	400204a0 	.word	0x400204a0
 8006c58:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	1ad3      	subs	r3, r2, r3
 8006c6c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	f000 80cf 	beq.w	8006e1c <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8006c7e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	f000 80ca 	beq.w	8006e1c <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c90:	e853 3f00 	ldrex	r3, [r3]
 8006c94:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006c96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c9c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006caa:	647b      	str	r3, [r7, #68]	@ 0x44
 8006cac:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006cb0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006cb2:	e841 2300 	strex	r3, r2, [r1]
 8006cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006cb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d1e4      	bne.n	8006c88 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	3308      	adds	r3, #8
 8006cc4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc8:	e853 3f00 	ldrex	r3, [r3]
 8006ccc:	623b      	str	r3, [r7, #32]
   return(result);
 8006cce:	6a3a      	ldr	r2, [r7, #32]
 8006cd0:	4b55      	ldr	r3, [pc, #340]	@ (8006e28 <HAL_UART_IRQHandler+0x7a8>)
 8006cd2:	4013      	ands	r3, r2
 8006cd4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	3308      	adds	r3, #8
 8006cde:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006ce2:	633a      	str	r2, [r7, #48]	@ 0x30
 8006ce4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ce8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cea:	e841 2300 	strex	r3, r2, [r1]
 8006cee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d1e3      	bne.n	8006cbe <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2220      	movs	r2, #32
 8006cfa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2200      	movs	r2, #0
 8006d02:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2200      	movs	r2, #0
 8006d08:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	e853 3f00 	ldrex	r3, [r3]
 8006d16:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f023 0310 	bic.w	r3, r3, #16
 8006d1e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	461a      	mov	r2, r3
 8006d28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006d2c:	61fb      	str	r3, [r7, #28]
 8006d2e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d30:	69b9      	ldr	r1, [r7, #24]
 8006d32:	69fa      	ldr	r2, [r7, #28]
 8006d34:	e841 2300 	strex	r3, r2, [r1]
 8006d38:	617b      	str	r3, [r7, #20]
   return(result);
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d1e4      	bne.n	8006d0a <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2202      	movs	r2, #2
 8006d44:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006d46:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006d4a:	4619      	mov	r1, r3
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f000 f881 	bl	8006e54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006d52:	e063      	b.n	8006e1c <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006d54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d00e      	beq.n	8006d7e <HAL_UART_IRQHandler+0x6fe>
 8006d60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d008      	beq.n	8006d7e <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006d74:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f001 f83d 	bl	8007df6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d7c:	e051      	b.n	8006e22 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d014      	beq.n	8006db4 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006d8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d105      	bne.n	8006da2 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006d96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d9a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d008      	beq.n	8006db4 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d03a      	beq.n	8006e20 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	4798      	blx	r3
    }
    return;
 8006db2:	e035      	b.n	8006e20 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006db4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006db8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d009      	beq.n	8006dd4 <HAL_UART_IRQHandler+0x754>
 8006dc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006dc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d003      	beq.n	8006dd4 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 ffe7 	bl	8007da0 <UART_EndTransmit_IT>
    return;
 8006dd2:	e026      	b.n	8006e22 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006dd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006dd8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d009      	beq.n	8006df4 <HAL_UART_IRQHandler+0x774>
 8006de0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006de4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d003      	beq.n	8006df4 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f001 f816 	bl	8007e1e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006df2:	e016      	b.n	8006e22 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006df4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006df8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d010      	beq.n	8006e22 <HAL_UART_IRQHandler+0x7a2>
 8006e00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	da0c      	bge.n	8006e22 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 fffe 	bl	8007e0a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006e0e:	e008      	b.n	8006e22 <HAL_UART_IRQHandler+0x7a2>
      return;
 8006e10:	bf00      	nop
 8006e12:	e006      	b.n	8006e22 <HAL_UART_IRQHandler+0x7a2>
    return;
 8006e14:	bf00      	nop
 8006e16:	e004      	b.n	8006e22 <HAL_UART_IRQHandler+0x7a2>
      return;
 8006e18:	bf00      	nop
 8006e1a:	e002      	b.n	8006e22 <HAL_UART_IRQHandler+0x7a2>
      return;
 8006e1c:	bf00      	nop
 8006e1e:	e000      	b.n	8006e22 <HAL_UART_IRQHandler+0x7a2>
    return;
 8006e20:	bf00      	nop
  }
}
 8006e22:	37e8      	adds	r7, #232	@ 0xe8
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}
 8006e28:	effffffe 	.word	0xeffffffe

08006e2c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b083      	sub	sp, #12
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006e34:	bf00      	nop
 8006e36:	370c      	adds	r7, #12
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr

08006e40 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b083      	sub	sp, #12
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006e48:	bf00      	nop
 8006e4a:	370c      	adds	r7, #12
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr

08006e54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	460b      	mov	r3, r1
 8006e5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006e60:	bf00      	nop
 8006e62:	370c      	adds	r7, #12
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr

08006e6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e70:	b092      	sub	sp, #72	@ 0x48
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006e76:	2300      	movs	r3, #0
 8006e78:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	689a      	ldr	r2, [r3, #8]
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	691b      	ldr	r3, [r3, #16]
 8006e84:	431a      	orrs	r2, r3
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	695b      	ldr	r3, [r3, #20]
 8006e8a:	431a      	orrs	r2, r3
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	69db      	ldr	r3, [r3, #28]
 8006e90:	4313      	orrs	r3, r2
 8006e92:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	4bbe      	ldr	r3, [pc, #760]	@ (8007194 <UART_SetConfig+0x328>)
 8006e9c:	4013      	ands	r3, r2
 8006e9e:	697a      	ldr	r2, [r7, #20]
 8006ea0:	6812      	ldr	r2, [r2, #0]
 8006ea2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006ea4:	430b      	orrs	r3, r1
 8006ea6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	68da      	ldr	r2, [r3, #12]
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	430a      	orrs	r2, r1
 8006ebc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	699b      	ldr	r3, [r3, #24]
 8006ec2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4ab3      	ldr	r2, [pc, #716]	@ (8007198 <UART_SetConfig+0x32c>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d004      	beq.n	8006ed8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	6a1b      	ldr	r3, [r3, #32]
 8006ed2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	689a      	ldr	r2, [r3, #8]
 8006ede:	4baf      	ldr	r3, [pc, #700]	@ (800719c <UART_SetConfig+0x330>)
 8006ee0:	4013      	ands	r3, r2
 8006ee2:	697a      	ldr	r2, [r7, #20]
 8006ee4:	6812      	ldr	r2, [r2, #0]
 8006ee6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006ee8:	430b      	orrs	r3, r1
 8006eea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ef2:	f023 010f 	bic.w	r1, r3, #15
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	430a      	orrs	r2, r1
 8006f00:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4aa6      	ldr	r2, [pc, #664]	@ (80071a0 <UART_SetConfig+0x334>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d177      	bne.n	8006ffc <UART_SetConfig+0x190>
 8006f0c:	4ba5      	ldr	r3, [pc, #660]	@ (80071a4 <UART_SetConfig+0x338>)
 8006f0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f10:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006f14:	2b28      	cmp	r3, #40	@ 0x28
 8006f16:	d86d      	bhi.n	8006ff4 <UART_SetConfig+0x188>
 8006f18:	a201      	add	r2, pc, #4	@ (adr r2, 8006f20 <UART_SetConfig+0xb4>)
 8006f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f1e:	bf00      	nop
 8006f20:	08006fc5 	.word	0x08006fc5
 8006f24:	08006ff5 	.word	0x08006ff5
 8006f28:	08006ff5 	.word	0x08006ff5
 8006f2c:	08006ff5 	.word	0x08006ff5
 8006f30:	08006ff5 	.word	0x08006ff5
 8006f34:	08006ff5 	.word	0x08006ff5
 8006f38:	08006ff5 	.word	0x08006ff5
 8006f3c:	08006ff5 	.word	0x08006ff5
 8006f40:	08006fcd 	.word	0x08006fcd
 8006f44:	08006ff5 	.word	0x08006ff5
 8006f48:	08006ff5 	.word	0x08006ff5
 8006f4c:	08006ff5 	.word	0x08006ff5
 8006f50:	08006ff5 	.word	0x08006ff5
 8006f54:	08006ff5 	.word	0x08006ff5
 8006f58:	08006ff5 	.word	0x08006ff5
 8006f5c:	08006ff5 	.word	0x08006ff5
 8006f60:	08006fd5 	.word	0x08006fd5
 8006f64:	08006ff5 	.word	0x08006ff5
 8006f68:	08006ff5 	.word	0x08006ff5
 8006f6c:	08006ff5 	.word	0x08006ff5
 8006f70:	08006ff5 	.word	0x08006ff5
 8006f74:	08006ff5 	.word	0x08006ff5
 8006f78:	08006ff5 	.word	0x08006ff5
 8006f7c:	08006ff5 	.word	0x08006ff5
 8006f80:	08006fdd 	.word	0x08006fdd
 8006f84:	08006ff5 	.word	0x08006ff5
 8006f88:	08006ff5 	.word	0x08006ff5
 8006f8c:	08006ff5 	.word	0x08006ff5
 8006f90:	08006ff5 	.word	0x08006ff5
 8006f94:	08006ff5 	.word	0x08006ff5
 8006f98:	08006ff5 	.word	0x08006ff5
 8006f9c:	08006ff5 	.word	0x08006ff5
 8006fa0:	08006fe5 	.word	0x08006fe5
 8006fa4:	08006ff5 	.word	0x08006ff5
 8006fa8:	08006ff5 	.word	0x08006ff5
 8006fac:	08006ff5 	.word	0x08006ff5
 8006fb0:	08006ff5 	.word	0x08006ff5
 8006fb4:	08006ff5 	.word	0x08006ff5
 8006fb8:	08006ff5 	.word	0x08006ff5
 8006fbc:	08006ff5 	.word	0x08006ff5
 8006fc0:	08006fed 	.word	0x08006fed
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fca:	e222      	b.n	8007412 <UART_SetConfig+0x5a6>
 8006fcc:	2304      	movs	r3, #4
 8006fce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fd2:	e21e      	b.n	8007412 <UART_SetConfig+0x5a6>
 8006fd4:	2308      	movs	r3, #8
 8006fd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fda:	e21a      	b.n	8007412 <UART_SetConfig+0x5a6>
 8006fdc:	2310      	movs	r3, #16
 8006fde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fe2:	e216      	b.n	8007412 <UART_SetConfig+0x5a6>
 8006fe4:	2320      	movs	r3, #32
 8006fe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fea:	e212      	b.n	8007412 <UART_SetConfig+0x5a6>
 8006fec:	2340      	movs	r3, #64	@ 0x40
 8006fee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ff2:	e20e      	b.n	8007412 <UART_SetConfig+0x5a6>
 8006ff4:	2380      	movs	r3, #128	@ 0x80
 8006ff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ffa:	e20a      	b.n	8007412 <UART_SetConfig+0x5a6>
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a69      	ldr	r2, [pc, #420]	@ (80071a8 <UART_SetConfig+0x33c>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d130      	bne.n	8007068 <UART_SetConfig+0x1fc>
 8007006:	4b67      	ldr	r3, [pc, #412]	@ (80071a4 <UART_SetConfig+0x338>)
 8007008:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800700a:	f003 0307 	and.w	r3, r3, #7
 800700e:	2b05      	cmp	r3, #5
 8007010:	d826      	bhi.n	8007060 <UART_SetConfig+0x1f4>
 8007012:	a201      	add	r2, pc, #4	@ (adr r2, 8007018 <UART_SetConfig+0x1ac>)
 8007014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007018:	08007031 	.word	0x08007031
 800701c:	08007039 	.word	0x08007039
 8007020:	08007041 	.word	0x08007041
 8007024:	08007049 	.word	0x08007049
 8007028:	08007051 	.word	0x08007051
 800702c:	08007059 	.word	0x08007059
 8007030:	2300      	movs	r3, #0
 8007032:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007036:	e1ec      	b.n	8007412 <UART_SetConfig+0x5a6>
 8007038:	2304      	movs	r3, #4
 800703a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800703e:	e1e8      	b.n	8007412 <UART_SetConfig+0x5a6>
 8007040:	2308      	movs	r3, #8
 8007042:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007046:	e1e4      	b.n	8007412 <UART_SetConfig+0x5a6>
 8007048:	2310      	movs	r3, #16
 800704a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800704e:	e1e0      	b.n	8007412 <UART_SetConfig+0x5a6>
 8007050:	2320      	movs	r3, #32
 8007052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007056:	e1dc      	b.n	8007412 <UART_SetConfig+0x5a6>
 8007058:	2340      	movs	r3, #64	@ 0x40
 800705a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800705e:	e1d8      	b.n	8007412 <UART_SetConfig+0x5a6>
 8007060:	2380      	movs	r3, #128	@ 0x80
 8007062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007066:	e1d4      	b.n	8007412 <UART_SetConfig+0x5a6>
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a4f      	ldr	r2, [pc, #316]	@ (80071ac <UART_SetConfig+0x340>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d130      	bne.n	80070d4 <UART_SetConfig+0x268>
 8007072:	4b4c      	ldr	r3, [pc, #304]	@ (80071a4 <UART_SetConfig+0x338>)
 8007074:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007076:	f003 0307 	and.w	r3, r3, #7
 800707a:	2b05      	cmp	r3, #5
 800707c:	d826      	bhi.n	80070cc <UART_SetConfig+0x260>
 800707e:	a201      	add	r2, pc, #4	@ (adr r2, 8007084 <UART_SetConfig+0x218>)
 8007080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007084:	0800709d 	.word	0x0800709d
 8007088:	080070a5 	.word	0x080070a5
 800708c:	080070ad 	.word	0x080070ad
 8007090:	080070b5 	.word	0x080070b5
 8007094:	080070bd 	.word	0x080070bd
 8007098:	080070c5 	.word	0x080070c5
 800709c:	2300      	movs	r3, #0
 800709e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070a2:	e1b6      	b.n	8007412 <UART_SetConfig+0x5a6>
 80070a4:	2304      	movs	r3, #4
 80070a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070aa:	e1b2      	b.n	8007412 <UART_SetConfig+0x5a6>
 80070ac:	2308      	movs	r3, #8
 80070ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070b2:	e1ae      	b.n	8007412 <UART_SetConfig+0x5a6>
 80070b4:	2310      	movs	r3, #16
 80070b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070ba:	e1aa      	b.n	8007412 <UART_SetConfig+0x5a6>
 80070bc:	2320      	movs	r3, #32
 80070be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070c2:	e1a6      	b.n	8007412 <UART_SetConfig+0x5a6>
 80070c4:	2340      	movs	r3, #64	@ 0x40
 80070c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070ca:	e1a2      	b.n	8007412 <UART_SetConfig+0x5a6>
 80070cc:	2380      	movs	r3, #128	@ 0x80
 80070ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070d2:	e19e      	b.n	8007412 <UART_SetConfig+0x5a6>
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a35      	ldr	r2, [pc, #212]	@ (80071b0 <UART_SetConfig+0x344>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d130      	bne.n	8007140 <UART_SetConfig+0x2d4>
 80070de:	4b31      	ldr	r3, [pc, #196]	@ (80071a4 <UART_SetConfig+0x338>)
 80070e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070e2:	f003 0307 	and.w	r3, r3, #7
 80070e6:	2b05      	cmp	r3, #5
 80070e8:	d826      	bhi.n	8007138 <UART_SetConfig+0x2cc>
 80070ea:	a201      	add	r2, pc, #4	@ (adr r2, 80070f0 <UART_SetConfig+0x284>)
 80070ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070f0:	08007109 	.word	0x08007109
 80070f4:	08007111 	.word	0x08007111
 80070f8:	08007119 	.word	0x08007119
 80070fc:	08007121 	.word	0x08007121
 8007100:	08007129 	.word	0x08007129
 8007104:	08007131 	.word	0x08007131
 8007108:	2300      	movs	r3, #0
 800710a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800710e:	e180      	b.n	8007412 <UART_SetConfig+0x5a6>
 8007110:	2304      	movs	r3, #4
 8007112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007116:	e17c      	b.n	8007412 <UART_SetConfig+0x5a6>
 8007118:	2308      	movs	r3, #8
 800711a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800711e:	e178      	b.n	8007412 <UART_SetConfig+0x5a6>
 8007120:	2310      	movs	r3, #16
 8007122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007126:	e174      	b.n	8007412 <UART_SetConfig+0x5a6>
 8007128:	2320      	movs	r3, #32
 800712a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800712e:	e170      	b.n	8007412 <UART_SetConfig+0x5a6>
 8007130:	2340      	movs	r3, #64	@ 0x40
 8007132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007136:	e16c      	b.n	8007412 <UART_SetConfig+0x5a6>
 8007138:	2380      	movs	r3, #128	@ 0x80
 800713a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800713e:	e168      	b.n	8007412 <UART_SetConfig+0x5a6>
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a1b      	ldr	r2, [pc, #108]	@ (80071b4 <UART_SetConfig+0x348>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d142      	bne.n	80071d0 <UART_SetConfig+0x364>
 800714a:	4b16      	ldr	r3, [pc, #88]	@ (80071a4 <UART_SetConfig+0x338>)
 800714c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800714e:	f003 0307 	and.w	r3, r3, #7
 8007152:	2b05      	cmp	r3, #5
 8007154:	d838      	bhi.n	80071c8 <UART_SetConfig+0x35c>
 8007156:	a201      	add	r2, pc, #4	@ (adr r2, 800715c <UART_SetConfig+0x2f0>)
 8007158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800715c:	08007175 	.word	0x08007175
 8007160:	0800717d 	.word	0x0800717d
 8007164:	08007185 	.word	0x08007185
 8007168:	0800718d 	.word	0x0800718d
 800716c:	080071b9 	.word	0x080071b9
 8007170:	080071c1 	.word	0x080071c1
 8007174:	2300      	movs	r3, #0
 8007176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800717a:	e14a      	b.n	8007412 <UART_SetConfig+0x5a6>
 800717c:	2304      	movs	r3, #4
 800717e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007182:	e146      	b.n	8007412 <UART_SetConfig+0x5a6>
 8007184:	2308      	movs	r3, #8
 8007186:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800718a:	e142      	b.n	8007412 <UART_SetConfig+0x5a6>
 800718c:	2310      	movs	r3, #16
 800718e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007192:	e13e      	b.n	8007412 <UART_SetConfig+0x5a6>
 8007194:	cfff69f3 	.word	0xcfff69f3
 8007198:	58000c00 	.word	0x58000c00
 800719c:	11fff4ff 	.word	0x11fff4ff
 80071a0:	40011000 	.word	0x40011000
 80071a4:	58024400 	.word	0x58024400
 80071a8:	40004400 	.word	0x40004400
 80071ac:	40004800 	.word	0x40004800
 80071b0:	40004c00 	.word	0x40004c00
 80071b4:	40005000 	.word	0x40005000
 80071b8:	2320      	movs	r3, #32
 80071ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071be:	e128      	b.n	8007412 <UART_SetConfig+0x5a6>
 80071c0:	2340      	movs	r3, #64	@ 0x40
 80071c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071c6:	e124      	b.n	8007412 <UART_SetConfig+0x5a6>
 80071c8:	2380      	movs	r3, #128	@ 0x80
 80071ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071ce:	e120      	b.n	8007412 <UART_SetConfig+0x5a6>
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4acb      	ldr	r2, [pc, #812]	@ (8007504 <UART_SetConfig+0x698>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d176      	bne.n	80072c8 <UART_SetConfig+0x45c>
 80071da:	4bcb      	ldr	r3, [pc, #812]	@ (8007508 <UART_SetConfig+0x69c>)
 80071dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80071e2:	2b28      	cmp	r3, #40	@ 0x28
 80071e4:	d86c      	bhi.n	80072c0 <UART_SetConfig+0x454>
 80071e6:	a201      	add	r2, pc, #4	@ (adr r2, 80071ec <UART_SetConfig+0x380>)
 80071e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ec:	08007291 	.word	0x08007291
 80071f0:	080072c1 	.word	0x080072c1
 80071f4:	080072c1 	.word	0x080072c1
 80071f8:	080072c1 	.word	0x080072c1
 80071fc:	080072c1 	.word	0x080072c1
 8007200:	080072c1 	.word	0x080072c1
 8007204:	080072c1 	.word	0x080072c1
 8007208:	080072c1 	.word	0x080072c1
 800720c:	08007299 	.word	0x08007299
 8007210:	080072c1 	.word	0x080072c1
 8007214:	080072c1 	.word	0x080072c1
 8007218:	080072c1 	.word	0x080072c1
 800721c:	080072c1 	.word	0x080072c1
 8007220:	080072c1 	.word	0x080072c1
 8007224:	080072c1 	.word	0x080072c1
 8007228:	080072c1 	.word	0x080072c1
 800722c:	080072a1 	.word	0x080072a1
 8007230:	080072c1 	.word	0x080072c1
 8007234:	080072c1 	.word	0x080072c1
 8007238:	080072c1 	.word	0x080072c1
 800723c:	080072c1 	.word	0x080072c1
 8007240:	080072c1 	.word	0x080072c1
 8007244:	080072c1 	.word	0x080072c1
 8007248:	080072c1 	.word	0x080072c1
 800724c:	080072a9 	.word	0x080072a9
 8007250:	080072c1 	.word	0x080072c1
 8007254:	080072c1 	.word	0x080072c1
 8007258:	080072c1 	.word	0x080072c1
 800725c:	080072c1 	.word	0x080072c1
 8007260:	080072c1 	.word	0x080072c1
 8007264:	080072c1 	.word	0x080072c1
 8007268:	080072c1 	.word	0x080072c1
 800726c:	080072b1 	.word	0x080072b1
 8007270:	080072c1 	.word	0x080072c1
 8007274:	080072c1 	.word	0x080072c1
 8007278:	080072c1 	.word	0x080072c1
 800727c:	080072c1 	.word	0x080072c1
 8007280:	080072c1 	.word	0x080072c1
 8007284:	080072c1 	.word	0x080072c1
 8007288:	080072c1 	.word	0x080072c1
 800728c:	080072b9 	.word	0x080072b9
 8007290:	2301      	movs	r3, #1
 8007292:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007296:	e0bc      	b.n	8007412 <UART_SetConfig+0x5a6>
 8007298:	2304      	movs	r3, #4
 800729a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800729e:	e0b8      	b.n	8007412 <UART_SetConfig+0x5a6>
 80072a0:	2308      	movs	r3, #8
 80072a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072a6:	e0b4      	b.n	8007412 <UART_SetConfig+0x5a6>
 80072a8:	2310      	movs	r3, #16
 80072aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072ae:	e0b0      	b.n	8007412 <UART_SetConfig+0x5a6>
 80072b0:	2320      	movs	r3, #32
 80072b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072b6:	e0ac      	b.n	8007412 <UART_SetConfig+0x5a6>
 80072b8:	2340      	movs	r3, #64	@ 0x40
 80072ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072be:	e0a8      	b.n	8007412 <UART_SetConfig+0x5a6>
 80072c0:	2380      	movs	r3, #128	@ 0x80
 80072c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072c6:	e0a4      	b.n	8007412 <UART_SetConfig+0x5a6>
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a8f      	ldr	r2, [pc, #572]	@ (800750c <UART_SetConfig+0x6a0>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d130      	bne.n	8007334 <UART_SetConfig+0x4c8>
 80072d2:	4b8d      	ldr	r3, [pc, #564]	@ (8007508 <UART_SetConfig+0x69c>)
 80072d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072d6:	f003 0307 	and.w	r3, r3, #7
 80072da:	2b05      	cmp	r3, #5
 80072dc:	d826      	bhi.n	800732c <UART_SetConfig+0x4c0>
 80072de:	a201      	add	r2, pc, #4	@ (adr r2, 80072e4 <UART_SetConfig+0x478>)
 80072e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072e4:	080072fd 	.word	0x080072fd
 80072e8:	08007305 	.word	0x08007305
 80072ec:	0800730d 	.word	0x0800730d
 80072f0:	08007315 	.word	0x08007315
 80072f4:	0800731d 	.word	0x0800731d
 80072f8:	08007325 	.word	0x08007325
 80072fc:	2300      	movs	r3, #0
 80072fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007302:	e086      	b.n	8007412 <UART_SetConfig+0x5a6>
 8007304:	2304      	movs	r3, #4
 8007306:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800730a:	e082      	b.n	8007412 <UART_SetConfig+0x5a6>
 800730c:	2308      	movs	r3, #8
 800730e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007312:	e07e      	b.n	8007412 <UART_SetConfig+0x5a6>
 8007314:	2310      	movs	r3, #16
 8007316:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800731a:	e07a      	b.n	8007412 <UART_SetConfig+0x5a6>
 800731c:	2320      	movs	r3, #32
 800731e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007322:	e076      	b.n	8007412 <UART_SetConfig+0x5a6>
 8007324:	2340      	movs	r3, #64	@ 0x40
 8007326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800732a:	e072      	b.n	8007412 <UART_SetConfig+0x5a6>
 800732c:	2380      	movs	r3, #128	@ 0x80
 800732e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007332:	e06e      	b.n	8007412 <UART_SetConfig+0x5a6>
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a75      	ldr	r2, [pc, #468]	@ (8007510 <UART_SetConfig+0x6a4>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d130      	bne.n	80073a0 <UART_SetConfig+0x534>
 800733e:	4b72      	ldr	r3, [pc, #456]	@ (8007508 <UART_SetConfig+0x69c>)
 8007340:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007342:	f003 0307 	and.w	r3, r3, #7
 8007346:	2b05      	cmp	r3, #5
 8007348:	d826      	bhi.n	8007398 <UART_SetConfig+0x52c>
 800734a:	a201      	add	r2, pc, #4	@ (adr r2, 8007350 <UART_SetConfig+0x4e4>)
 800734c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007350:	08007369 	.word	0x08007369
 8007354:	08007371 	.word	0x08007371
 8007358:	08007379 	.word	0x08007379
 800735c:	08007381 	.word	0x08007381
 8007360:	08007389 	.word	0x08007389
 8007364:	08007391 	.word	0x08007391
 8007368:	2300      	movs	r3, #0
 800736a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800736e:	e050      	b.n	8007412 <UART_SetConfig+0x5a6>
 8007370:	2304      	movs	r3, #4
 8007372:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007376:	e04c      	b.n	8007412 <UART_SetConfig+0x5a6>
 8007378:	2308      	movs	r3, #8
 800737a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800737e:	e048      	b.n	8007412 <UART_SetConfig+0x5a6>
 8007380:	2310      	movs	r3, #16
 8007382:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007386:	e044      	b.n	8007412 <UART_SetConfig+0x5a6>
 8007388:	2320      	movs	r3, #32
 800738a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800738e:	e040      	b.n	8007412 <UART_SetConfig+0x5a6>
 8007390:	2340      	movs	r3, #64	@ 0x40
 8007392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007396:	e03c      	b.n	8007412 <UART_SetConfig+0x5a6>
 8007398:	2380      	movs	r3, #128	@ 0x80
 800739a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800739e:	e038      	b.n	8007412 <UART_SetConfig+0x5a6>
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a5b      	ldr	r2, [pc, #364]	@ (8007514 <UART_SetConfig+0x6a8>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d130      	bne.n	800740c <UART_SetConfig+0x5a0>
 80073aa:	4b57      	ldr	r3, [pc, #348]	@ (8007508 <UART_SetConfig+0x69c>)
 80073ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073ae:	f003 0307 	and.w	r3, r3, #7
 80073b2:	2b05      	cmp	r3, #5
 80073b4:	d826      	bhi.n	8007404 <UART_SetConfig+0x598>
 80073b6:	a201      	add	r2, pc, #4	@ (adr r2, 80073bc <UART_SetConfig+0x550>)
 80073b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073bc:	080073d5 	.word	0x080073d5
 80073c0:	080073dd 	.word	0x080073dd
 80073c4:	080073e5 	.word	0x080073e5
 80073c8:	080073ed 	.word	0x080073ed
 80073cc:	080073f5 	.word	0x080073f5
 80073d0:	080073fd 	.word	0x080073fd
 80073d4:	2302      	movs	r3, #2
 80073d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073da:	e01a      	b.n	8007412 <UART_SetConfig+0x5a6>
 80073dc:	2304      	movs	r3, #4
 80073de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073e2:	e016      	b.n	8007412 <UART_SetConfig+0x5a6>
 80073e4:	2308      	movs	r3, #8
 80073e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073ea:	e012      	b.n	8007412 <UART_SetConfig+0x5a6>
 80073ec:	2310      	movs	r3, #16
 80073ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073f2:	e00e      	b.n	8007412 <UART_SetConfig+0x5a6>
 80073f4:	2320      	movs	r3, #32
 80073f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073fa:	e00a      	b.n	8007412 <UART_SetConfig+0x5a6>
 80073fc:	2340      	movs	r3, #64	@ 0x40
 80073fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007402:	e006      	b.n	8007412 <UART_SetConfig+0x5a6>
 8007404:	2380      	movs	r3, #128	@ 0x80
 8007406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800740a:	e002      	b.n	8007412 <UART_SetConfig+0x5a6>
 800740c:	2380      	movs	r3, #128	@ 0x80
 800740e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a3f      	ldr	r2, [pc, #252]	@ (8007514 <UART_SetConfig+0x6a8>)
 8007418:	4293      	cmp	r3, r2
 800741a:	f040 80f8 	bne.w	800760e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800741e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007422:	2b20      	cmp	r3, #32
 8007424:	dc46      	bgt.n	80074b4 <UART_SetConfig+0x648>
 8007426:	2b02      	cmp	r3, #2
 8007428:	f2c0 8082 	blt.w	8007530 <UART_SetConfig+0x6c4>
 800742c:	3b02      	subs	r3, #2
 800742e:	2b1e      	cmp	r3, #30
 8007430:	d87e      	bhi.n	8007530 <UART_SetConfig+0x6c4>
 8007432:	a201      	add	r2, pc, #4	@ (adr r2, 8007438 <UART_SetConfig+0x5cc>)
 8007434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007438:	080074bb 	.word	0x080074bb
 800743c:	08007531 	.word	0x08007531
 8007440:	080074c3 	.word	0x080074c3
 8007444:	08007531 	.word	0x08007531
 8007448:	08007531 	.word	0x08007531
 800744c:	08007531 	.word	0x08007531
 8007450:	080074d3 	.word	0x080074d3
 8007454:	08007531 	.word	0x08007531
 8007458:	08007531 	.word	0x08007531
 800745c:	08007531 	.word	0x08007531
 8007460:	08007531 	.word	0x08007531
 8007464:	08007531 	.word	0x08007531
 8007468:	08007531 	.word	0x08007531
 800746c:	08007531 	.word	0x08007531
 8007470:	080074e3 	.word	0x080074e3
 8007474:	08007531 	.word	0x08007531
 8007478:	08007531 	.word	0x08007531
 800747c:	08007531 	.word	0x08007531
 8007480:	08007531 	.word	0x08007531
 8007484:	08007531 	.word	0x08007531
 8007488:	08007531 	.word	0x08007531
 800748c:	08007531 	.word	0x08007531
 8007490:	08007531 	.word	0x08007531
 8007494:	08007531 	.word	0x08007531
 8007498:	08007531 	.word	0x08007531
 800749c:	08007531 	.word	0x08007531
 80074a0:	08007531 	.word	0x08007531
 80074a4:	08007531 	.word	0x08007531
 80074a8:	08007531 	.word	0x08007531
 80074ac:	08007531 	.word	0x08007531
 80074b0:	08007523 	.word	0x08007523
 80074b4:	2b40      	cmp	r3, #64	@ 0x40
 80074b6:	d037      	beq.n	8007528 <UART_SetConfig+0x6bc>
 80074b8:	e03a      	b.n	8007530 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80074ba:	f7fd f9ef 	bl	800489c <HAL_RCCEx_GetD3PCLK1Freq>
 80074be:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80074c0:	e03c      	b.n	800753c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80074c6:	4618      	mov	r0, r3
 80074c8:	f7fd f9fe 	bl	80048c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80074cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074d0:	e034      	b.n	800753c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074d2:	f107 0318 	add.w	r3, r7, #24
 80074d6:	4618      	mov	r0, r3
 80074d8:	f7fd fb4a 	bl	8004b70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80074dc:	69fb      	ldr	r3, [r7, #28]
 80074de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074e0:	e02c      	b.n	800753c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074e2:	4b09      	ldr	r3, [pc, #36]	@ (8007508 <UART_SetConfig+0x69c>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f003 0320 	and.w	r3, r3, #32
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d016      	beq.n	800751c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80074ee:	4b06      	ldr	r3, [pc, #24]	@ (8007508 <UART_SetConfig+0x69c>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	08db      	lsrs	r3, r3, #3
 80074f4:	f003 0303 	and.w	r3, r3, #3
 80074f8:	4a07      	ldr	r2, [pc, #28]	@ (8007518 <UART_SetConfig+0x6ac>)
 80074fa:	fa22 f303 	lsr.w	r3, r2, r3
 80074fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007500:	e01c      	b.n	800753c <UART_SetConfig+0x6d0>
 8007502:	bf00      	nop
 8007504:	40011400 	.word	0x40011400
 8007508:	58024400 	.word	0x58024400
 800750c:	40007800 	.word	0x40007800
 8007510:	40007c00 	.word	0x40007c00
 8007514:	58000c00 	.word	0x58000c00
 8007518:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800751c:	4b9d      	ldr	r3, [pc, #628]	@ (8007794 <UART_SetConfig+0x928>)
 800751e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007520:	e00c      	b.n	800753c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007522:	4b9d      	ldr	r3, [pc, #628]	@ (8007798 <UART_SetConfig+0x92c>)
 8007524:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007526:	e009      	b.n	800753c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007528:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800752c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800752e:	e005      	b.n	800753c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007530:	2300      	movs	r3, #0
 8007532:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007534:	2301      	movs	r3, #1
 8007536:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800753a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800753c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800753e:	2b00      	cmp	r3, #0
 8007540:	f000 81de 	beq.w	8007900 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007548:	4a94      	ldr	r2, [pc, #592]	@ (800779c <UART_SetConfig+0x930>)
 800754a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800754e:	461a      	mov	r2, r3
 8007550:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007552:	fbb3 f3f2 	udiv	r3, r3, r2
 8007556:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	685a      	ldr	r2, [r3, #4]
 800755c:	4613      	mov	r3, r2
 800755e:	005b      	lsls	r3, r3, #1
 8007560:	4413      	add	r3, r2
 8007562:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007564:	429a      	cmp	r2, r3
 8007566:	d305      	bcc.n	8007574 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800756e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007570:	429a      	cmp	r2, r3
 8007572:	d903      	bls.n	800757c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007574:	2301      	movs	r3, #1
 8007576:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800757a:	e1c1      	b.n	8007900 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800757c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800757e:	2200      	movs	r2, #0
 8007580:	60bb      	str	r3, [r7, #8]
 8007582:	60fa      	str	r2, [r7, #12]
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007588:	4a84      	ldr	r2, [pc, #528]	@ (800779c <UART_SetConfig+0x930>)
 800758a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800758e:	b29b      	uxth	r3, r3
 8007590:	2200      	movs	r2, #0
 8007592:	603b      	str	r3, [r7, #0]
 8007594:	607a      	str	r2, [r7, #4]
 8007596:	e9d7 2300 	ldrd	r2, r3, [r7]
 800759a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800759e:	f7f8 fe9b 	bl	80002d8 <__aeabi_uldivmod>
 80075a2:	4602      	mov	r2, r0
 80075a4:	460b      	mov	r3, r1
 80075a6:	4610      	mov	r0, r2
 80075a8:	4619      	mov	r1, r3
 80075aa:	f04f 0200 	mov.w	r2, #0
 80075ae:	f04f 0300 	mov.w	r3, #0
 80075b2:	020b      	lsls	r3, r1, #8
 80075b4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80075b8:	0202      	lsls	r2, r0, #8
 80075ba:	6979      	ldr	r1, [r7, #20]
 80075bc:	6849      	ldr	r1, [r1, #4]
 80075be:	0849      	lsrs	r1, r1, #1
 80075c0:	2000      	movs	r0, #0
 80075c2:	460c      	mov	r4, r1
 80075c4:	4605      	mov	r5, r0
 80075c6:	eb12 0804 	adds.w	r8, r2, r4
 80075ca:	eb43 0905 	adc.w	r9, r3, r5
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	2200      	movs	r2, #0
 80075d4:	469a      	mov	sl, r3
 80075d6:	4693      	mov	fp, r2
 80075d8:	4652      	mov	r2, sl
 80075da:	465b      	mov	r3, fp
 80075dc:	4640      	mov	r0, r8
 80075de:	4649      	mov	r1, r9
 80075e0:	f7f8 fe7a 	bl	80002d8 <__aeabi_uldivmod>
 80075e4:	4602      	mov	r2, r0
 80075e6:	460b      	mov	r3, r1
 80075e8:	4613      	mov	r3, r2
 80075ea:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80075ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80075f2:	d308      	bcc.n	8007606 <UART_SetConfig+0x79a>
 80075f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80075fa:	d204      	bcs.n	8007606 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007602:	60da      	str	r2, [r3, #12]
 8007604:	e17c      	b.n	8007900 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007606:	2301      	movs	r3, #1
 8007608:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800760c:	e178      	b.n	8007900 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	69db      	ldr	r3, [r3, #28]
 8007612:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007616:	f040 80c5 	bne.w	80077a4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800761a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800761e:	2b20      	cmp	r3, #32
 8007620:	dc48      	bgt.n	80076b4 <UART_SetConfig+0x848>
 8007622:	2b00      	cmp	r3, #0
 8007624:	db7b      	blt.n	800771e <UART_SetConfig+0x8b2>
 8007626:	2b20      	cmp	r3, #32
 8007628:	d879      	bhi.n	800771e <UART_SetConfig+0x8b2>
 800762a:	a201      	add	r2, pc, #4	@ (adr r2, 8007630 <UART_SetConfig+0x7c4>)
 800762c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007630:	080076bb 	.word	0x080076bb
 8007634:	080076c3 	.word	0x080076c3
 8007638:	0800771f 	.word	0x0800771f
 800763c:	0800771f 	.word	0x0800771f
 8007640:	080076cb 	.word	0x080076cb
 8007644:	0800771f 	.word	0x0800771f
 8007648:	0800771f 	.word	0x0800771f
 800764c:	0800771f 	.word	0x0800771f
 8007650:	080076db 	.word	0x080076db
 8007654:	0800771f 	.word	0x0800771f
 8007658:	0800771f 	.word	0x0800771f
 800765c:	0800771f 	.word	0x0800771f
 8007660:	0800771f 	.word	0x0800771f
 8007664:	0800771f 	.word	0x0800771f
 8007668:	0800771f 	.word	0x0800771f
 800766c:	0800771f 	.word	0x0800771f
 8007670:	080076eb 	.word	0x080076eb
 8007674:	0800771f 	.word	0x0800771f
 8007678:	0800771f 	.word	0x0800771f
 800767c:	0800771f 	.word	0x0800771f
 8007680:	0800771f 	.word	0x0800771f
 8007684:	0800771f 	.word	0x0800771f
 8007688:	0800771f 	.word	0x0800771f
 800768c:	0800771f 	.word	0x0800771f
 8007690:	0800771f 	.word	0x0800771f
 8007694:	0800771f 	.word	0x0800771f
 8007698:	0800771f 	.word	0x0800771f
 800769c:	0800771f 	.word	0x0800771f
 80076a0:	0800771f 	.word	0x0800771f
 80076a4:	0800771f 	.word	0x0800771f
 80076a8:	0800771f 	.word	0x0800771f
 80076ac:	0800771f 	.word	0x0800771f
 80076b0:	08007711 	.word	0x08007711
 80076b4:	2b40      	cmp	r3, #64	@ 0x40
 80076b6:	d02e      	beq.n	8007716 <UART_SetConfig+0x8aa>
 80076b8:	e031      	b.n	800771e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076ba:	f7fb feb9 	bl	8003430 <HAL_RCC_GetPCLK1Freq>
 80076be:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80076c0:	e033      	b.n	800772a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80076c2:	f7fb fecb 	bl	800345c <HAL_RCC_GetPCLK2Freq>
 80076c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80076c8:	e02f      	b.n	800772a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80076ce:	4618      	mov	r0, r3
 80076d0:	f7fd f8fa 	bl	80048c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80076d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076d8:	e027      	b.n	800772a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80076da:	f107 0318 	add.w	r3, r7, #24
 80076de:	4618      	mov	r0, r3
 80076e0:	f7fd fa46 	bl	8004b70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80076e4:	69fb      	ldr	r3, [r7, #28]
 80076e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076e8:	e01f      	b.n	800772a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80076ea:	4b2d      	ldr	r3, [pc, #180]	@ (80077a0 <UART_SetConfig+0x934>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f003 0320 	and.w	r3, r3, #32
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d009      	beq.n	800770a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80076f6:	4b2a      	ldr	r3, [pc, #168]	@ (80077a0 <UART_SetConfig+0x934>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	08db      	lsrs	r3, r3, #3
 80076fc:	f003 0303 	and.w	r3, r3, #3
 8007700:	4a24      	ldr	r2, [pc, #144]	@ (8007794 <UART_SetConfig+0x928>)
 8007702:	fa22 f303 	lsr.w	r3, r2, r3
 8007706:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007708:	e00f      	b.n	800772a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800770a:	4b22      	ldr	r3, [pc, #136]	@ (8007794 <UART_SetConfig+0x928>)
 800770c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800770e:	e00c      	b.n	800772a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007710:	4b21      	ldr	r3, [pc, #132]	@ (8007798 <UART_SetConfig+0x92c>)
 8007712:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007714:	e009      	b.n	800772a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007716:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800771a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800771c:	e005      	b.n	800772a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800771e:	2300      	movs	r3, #0
 8007720:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007722:	2301      	movs	r3, #1
 8007724:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007728:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800772a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800772c:	2b00      	cmp	r3, #0
 800772e:	f000 80e7 	beq.w	8007900 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007736:	4a19      	ldr	r2, [pc, #100]	@ (800779c <UART_SetConfig+0x930>)
 8007738:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800773c:	461a      	mov	r2, r3
 800773e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007740:	fbb3 f3f2 	udiv	r3, r3, r2
 8007744:	005a      	lsls	r2, r3, #1
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	085b      	lsrs	r3, r3, #1
 800774c:	441a      	add	r2, r3
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	fbb2 f3f3 	udiv	r3, r2, r3
 8007756:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800775a:	2b0f      	cmp	r3, #15
 800775c:	d916      	bls.n	800778c <UART_SetConfig+0x920>
 800775e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007760:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007764:	d212      	bcs.n	800778c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007768:	b29b      	uxth	r3, r3
 800776a:	f023 030f 	bic.w	r3, r3, #15
 800776e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007772:	085b      	lsrs	r3, r3, #1
 8007774:	b29b      	uxth	r3, r3
 8007776:	f003 0307 	and.w	r3, r3, #7
 800777a:	b29a      	uxth	r2, r3
 800777c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800777e:	4313      	orrs	r3, r2
 8007780:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007788:	60da      	str	r2, [r3, #12]
 800778a:	e0b9      	b.n	8007900 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800778c:	2301      	movs	r3, #1
 800778e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007792:	e0b5      	b.n	8007900 <UART_SetConfig+0xa94>
 8007794:	03d09000 	.word	0x03d09000
 8007798:	003d0900 	.word	0x003d0900
 800779c:	08008a1c 	.word	0x08008a1c
 80077a0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80077a4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80077a8:	2b20      	cmp	r3, #32
 80077aa:	dc49      	bgt.n	8007840 <UART_SetConfig+0x9d4>
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	db7c      	blt.n	80078aa <UART_SetConfig+0xa3e>
 80077b0:	2b20      	cmp	r3, #32
 80077b2:	d87a      	bhi.n	80078aa <UART_SetConfig+0xa3e>
 80077b4:	a201      	add	r2, pc, #4	@ (adr r2, 80077bc <UART_SetConfig+0x950>)
 80077b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ba:	bf00      	nop
 80077bc:	08007847 	.word	0x08007847
 80077c0:	0800784f 	.word	0x0800784f
 80077c4:	080078ab 	.word	0x080078ab
 80077c8:	080078ab 	.word	0x080078ab
 80077cc:	08007857 	.word	0x08007857
 80077d0:	080078ab 	.word	0x080078ab
 80077d4:	080078ab 	.word	0x080078ab
 80077d8:	080078ab 	.word	0x080078ab
 80077dc:	08007867 	.word	0x08007867
 80077e0:	080078ab 	.word	0x080078ab
 80077e4:	080078ab 	.word	0x080078ab
 80077e8:	080078ab 	.word	0x080078ab
 80077ec:	080078ab 	.word	0x080078ab
 80077f0:	080078ab 	.word	0x080078ab
 80077f4:	080078ab 	.word	0x080078ab
 80077f8:	080078ab 	.word	0x080078ab
 80077fc:	08007877 	.word	0x08007877
 8007800:	080078ab 	.word	0x080078ab
 8007804:	080078ab 	.word	0x080078ab
 8007808:	080078ab 	.word	0x080078ab
 800780c:	080078ab 	.word	0x080078ab
 8007810:	080078ab 	.word	0x080078ab
 8007814:	080078ab 	.word	0x080078ab
 8007818:	080078ab 	.word	0x080078ab
 800781c:	080078ab 	.word	0x080078ab
 8007820:	080078ab 	.word	0x080078ab
 8007824:	080078ab 	.word	0x080078ab
 8007828:	080078ab 	.word	0x080078ab
 800782c:	080078ab 	.word	0x080078ab
 8007830:	080078ab 	.word	0x080078ab
 8007834:	080078ab 	.word	0x080078ab
 8007838:	080078ab 	.word	0x080078ab
 800783c:	0800789d 	.word	0x0800789d
 8007840:	2b40      	cmp	r3, #64	@ 0x40
 8007842:	d02e      	beq.n	80078a2 <UART_SetConfig+0xa36>
 8007844:	e031      	b.n	80078aa <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007846:	f7fb fdf3 	bl	8003430 <HAL_RCC_GetPCLK1Freq>
 800784a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800784c:	e033      	b.n	80078b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800784e:	f7fb fe05 	bl	800345c <HAL_RCC_GetPCLK2Freq>
 8007852:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007854:	e02f      	b.n	80078b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007856:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800785a:	4618      	mov	r0, r3
 800785c:	f7fd f834 	bl	80048c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007862:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007864:	e027      	b.n	80078b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007866:	f107 0318 	add.w	r3, r7, #24
 800786a:	4618      	mov	r0, r3
 800786c:	f7fd f980 	bl	8004b70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007870:	69fb      	ldr	r3, [r7, #28]
 8007872:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007874:	e01f      	b.n	80078b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007876:	4b2d      	ldr	r3, [pc, #180]	@ (800792c <UART_SetConfig+0xac0>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f003 0320 	and.w	r3, r3, #32
 800787e:	2b00      	cmp	r3, #0
 8007880:	d009      	beq.n	8007896 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007882:	4b2a      	ldr	r3, [pc, #168]	@ (800792c <UART_SetConfig+0xac0>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	08db      	lsrs	r3, r3, #3
 8007888:	f003 0303 	and.w	r3, r3, #3
 800788c:	4a28      	ldr	r2, [pc, #160]	@ (8007930 <UART_SetConfig+0xac4>)
 800788e:	fa22 f303 	lsr.w	r3, r2, r3
 8007892:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007894:	e00f      	b.n	80078b6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007896:	4b26      	ldr	r3, [pc, #152]	@ (8007930 <UART_SetConfig+0xac4>)
 8007898:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800789a:	e00c      	b.n	80078b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800789c:	4b25      	ldr	r3, [pc, #148]	@ (8007934 <UART_SetConfig+0xac8>)
 800789e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078a0:	e009      	b.n	80078b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80078a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078a8:	e005      	b.n	80078b6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80078aa:	2300      	movs	r3, #0
 80078ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80078ae:	2301      	movs	r3, #1
 80078b0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80078b4:	bf00      	nop
    }

    if (pclk != 0U)
 80078b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d021      	beq.n	8007900 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078c0:	4a1d      	ldr	r2, [pc, #116]	@ (8007938 <UART_SetConfig+0xacc>)
 80078c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078c6:	461a      	mov	r2, r3
 80078c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078ca:	fbb3 f2f2 	udiv	r2, r3, r2
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	085b      	lsrs	r3, r3, #1
 80078d4:	441a      	add	r2, r3
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	fbb2 f3f3 	udiv	r3, r2, r3
 80078de:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078e2:	2b0f      	cmp	r3, #15
 80078e4:	d909      	bls.n	80078fa <UART_SetConfig+0xa8e>
 80078e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078ec:	d205      	bcs.n	80078fa <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80078ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078f0:	b29a      	uxth	r2, r3
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	60da      	str	r2, [r3, #12]
 80078f8:	e002      	b.n	8007900 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80078fa:	2301      	movs	r3, #1
 80078fc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	2201      	movs	r2, #1
 8007904:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	2201      	movs	r2, #1
 800790c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	2200      	movs	r2, #0
 8007914:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	2200      	movs	r2, #0
 800791a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800791c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8007920:	4618      	mov	r0, r3
 8007922:	3748      	adds	r7, #72	@ 0x48
 8007924:	46bd      	mov	sp, r7
 8007926:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800792a:	bf00      	nop
 800792c:	58024400 	.word	0x58024400
 8007930:	03d09000 	.word	0x03d09000
 8007934:	003d0900 	.word	0x003d0900
 8007938:	08008a1c 	.word	0x08008a1c

0800793c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800793c:	b480      	push	{r7}
 800793e:	b083      	sub	sp, #12
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007948:	f003 0308 	and.w	r3, r3, #8
 800794c:	2b00      	cmp	r3, #0
 800794e:	d00a      	beq.n	8007966 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	430a      	orrs	r2, r1
 8007964:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800796a:	f003 0301 	and.w	r3, r3, #1
 800796e:	2b00      	cmp	r3, #0
 8007970:	d00a      	beq.n	8007988 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	430a      	orrs	r2, r1
 8007986:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800798c:	f003 0302 	and.w	r3, r3, #2
 8007990:	2b00      	cmp	r3, #0
 8007992:	d00a      	beq.n	80079aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	430a      	orrs	r2, r1
 80079a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079ae:	f003 0304 	and.w	r3, r3, #4
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d00a      	beq.n	80079cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	430a      	orrs	r2, r1
 80079ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079d0:	f003 0310 	and.w	r3, r3, #16
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d00a      	beq.n	80079ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	689b      	ldr	r3, [r3, #8]
 80079de:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	430a      	orrs	r2, r1
 80079ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079f2:	f003 0320 	and.w	r3, r3, #32
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d00a      	beq.n	8007a10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	689b      	ldr	r3, [r3, #8]
 8007a00:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	430a      	orrs	r2, r1
 8007a0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d01a      	beq.n	8007a52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	430a      	orrs	r2, r1
 8007a30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a3a:	d10a      	bne.n	8007a52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	430a      	orrs	r2, r1
 8007a50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d00a      	beq.n	8007a74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	430a      	orrs	r2, r1
 8007a72:	605a      	str	r2, [r3, #4]
  }
}
 8007a74:	bf00      	nop
 8007a76:	370c      	adds	r7, #12
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7e:	4770      	bx	lr

08007a80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b098      	sub	sp, #96	@ 0x60
 8007a84:	af02      	add	r7, sp, #8
 8007a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007a90:	f7f9 fbc4 	bl	800121c <HAL_GetTick>
 8007a94:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f003 0308 	and.w	r3, r3, #8
 8007aa0:	2b08      	cmp	r3, #8
 8007aa2:	d12f      	bne.n	8007b04 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007aa4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007aa8:	9300      	str	r3, [sp, #0]
 8007aaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007aac:	2200      	movs	r2, #0
 8007aae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 f88e 	bl	8007bd4 <UART_WaitOnFlagUntilTimeout>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d022      	beq.n	8007b04 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ac6:	e853 3f00 	ldrex	r3, [r3]
 8007aca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007acc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ace:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007ad2:	653b      	str	r3, [r7, #80]	@ 0x50
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	461a      	mov	r2, r3
 8007ada:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007adc:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ade:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007ae2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007ae4:	e841 2300 	strex	r3, r2, [r1]
 8007ae8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007aea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d1e6      	bne.n	8007abe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2220      	movs	r2, #32
 8007af4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2200      	movs	r2, #0
 8007afc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b00:	2303      	movs	r3, #3
 8007b02:	e063      	b.n	8007bcc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f003 0304 	and.w	r3, r3, #4
 8007b0e:	2b04      	cmp	r3, #4
 8007b10:	d149      	bne.n	8007ba6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b12:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007b16:	9300      	str	r3, [sp, #0]
 8007b18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f000 f857 	bl	8007bd4 <UART_WaitOnFlagUntilTimeout>
 8007b26:	4603      	mov	r3, r0
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d03c      	beq.n	8007ba6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b34:	e853 3f00 	ldrex	r3, [r3]
 8007b38:	623b      	str	r3, [r7, #32]
   return(result);
 8007b3a:	6a3b      	ldr	r3, [r7, #32]
 8007b3c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b40:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	461a      	mov	r2, r3
 8007b48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b4a:	633b      	str	r3, [r7, #48]	@ 0x30
 8007b4c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b4e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007b50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b52:	e841 2300 	strex	r3, r2, [r1]
 8007b56:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d1e6      	bne.n	8007b2c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	3308      	adds	r3, #8
 8007b64:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	e853 3f00 	ldrex	r3, [r3]
 8007b6c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	f023 0301 	bic.w	r3, r3, #1
 8007b74:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	3308      	adds	r3, #8
 8007b7c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007b7e:	61fa      	str	r2, [r7, #28]
 8007b80:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b82:	69b9      	ldr	r1, [r7, #24]
 8007b84:	69fa      	ldr	r2, [r7, #28]
 8007b86:	e841 2300 	strex	r3, r2, [r1]
 8007b8a:	617b      	str	r3, [r7, #20]
   return(result);
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d1e5      	bne.n	8007b5e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2220      	movs	r2, #32
 8007b96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ba2:	2303      	movs	r3, #3
 8007ba4:	e012      	b.n	8007bcc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2220      	movs	r2, #32
 8007baa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2220      	movs	r2, #32
 8007bb2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007bca:	2300      	movs	r3, #0
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3758      	adds	r7, #88	@ 0x58
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}

08007bd4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b084      	sub	sp, #16
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	60f8      	str	r0, [r7, #12]
 8007bdc:	60b9      	str	r1, [r7, #8]
 8007bde:	603b      	str	r3, [r7, #0]
 8007be0:	4613      	mov	r3, r2
 8007be2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007be4:	e04f      	b.n	8007c86 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007be6:	69bb      	ldr	r3, [r7, #24]
 8007be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bec:	d04b      	beq.n	8007c86 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bee:	f7f9 fb15 	bl	800121c <HAL_GetTick>
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	1ad3      	subs	r3, r2, r3
 8007bf8:	69ba      	ldr	r2, [r7, #24]
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	d302      	bcc.n	8007c04 <UART_WaitOnFlagUntilTimeout+0x30>
 8007bfe:	69bb      	ldr	r3, [r7, #24]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d101      	bne.n	8007c08 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007c04:	2303      	movs	r3, #3
 8007c06:	e04e      	b.n	8007ca6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f003 0304 	and.w	r3, r3, #4
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d037      	beq.n	8007c86 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	2b80      	cmp	r3, #128	@ 0x80
 8007c1a:	d034      	beq.n	8007c86 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	2b40      	cmp	r3, #64	@ 0x40
 8007c20:	d031      	beq.n	8007c86 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	69db      	ldr	r3, [r3, #28]
 8007c28:	f003 0308 	and.w	r3, r3, #8
 8007c2c:	2b08      	cmp	r3, #8
 8007c2e:	d110      	bne.n	8007c52 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	2208      	movs	r2, #8
 8007c36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007c38:	68f8      	ldr	r0, [r7, #12]
 8007c3a:	f000 f839 	bl	8007cb0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2208      	movs	r2, #8
 8007c42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	e029      	b.n	8007ca6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	69db      	ldr	r3, [r3, #28]
 8007c58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007c5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c60:	d111      	bne.n	8007c86 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007c6a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007c6c:	68f8      	ldr	r0, [r7, #12]
 8007c6e:	f000 f81f 	bl	8007cb0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2220      	movs	r2, #32
 8007c76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007c82:	2303      	movs	r3, #3
 8007c84:	e00f      	b.n	8007ca6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	69da      	ldr	r2, [r3, #28]
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	4013      	ands	r3, r2
 8007c90:	68ba      	ldr	r2, [r7, #8]
 8007c92:	429a      	cmp	r2, r3
 8007c94:	bf0c      	ite	eq
 8007c96:	2301      	moveq	r3, #1
 8007c98:	2300      	movne	r3, #0
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	461a      	mov	r2, r3
 8007c9e:	79fb      	ldrb	r3, [r7, #7]
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	d0a0      	beq.n	8007be6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ca4:	2300      	movs	r3, #0
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3710      	adds	r7, #16
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}
	...

08007cb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b095      	sub	sp, #84	@ 0x54
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cc0:	e853 3f00 	ldrex	r3, [r3]
 8007cc4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cc8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ccc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	461a      	mov	r2, r3
 8007cd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007cd6:	643b      	str	r3, [r7, #64]	@ 0x40
 8007cd8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cda:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007cdc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007cde:	e841 2300 	strex	r3, r2, [r1]
 8007ce2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d1e6      	bne.n	8007cb8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	3308      	adds	r3, #8
 8007cf0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf2:	6a3b      	ldr	r3, [r7, #32]
 8007cf4:	e853 3f00 	ldrex	r3, [r3]
 8007cf8:	61fb      	str	r3, [r7, #28]
   return(result);
 8007cfa:	69fa      	ldr	r2, [r7, #28]
 8007cfc:	4b1e      	ldr	r3, [pc, #120]	@ (8007d78 <UART_EndRxTransfer+0xc8>)
 8007cfe:	4013      	ands	r3, r2
 8007d00:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	3308      	adds	r3, #8
 8007d08:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007d0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d0e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007d10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d12:	e841 2300 	strex	r3, r2, [r1]
 8007d16:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d1e5      	bne.n	8007cea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d22:	2b01      	cmp	r3, #1
 8007d24:	d118      	bne.n	8007d58 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	e853 3f00 	ldrex	r3, [r3]
 8007d32:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	f023 0310 	bic.w	r3, r3, #16
 8007d3a:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	461a      	mov	r2, r3
 8007d42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d44:	61bb      	str	r3, [r7, #24]
 8007d46:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d48:	6979      	ldr	r1, [r7, #20]
 8007d4a:	69ba      	ldr	r2, [r7, #24]
 8007d4c:	e841 2300 	strex	r3, r2, [r1]
 8007d50:	613b      	str	r3, [r7, #16]
   return(result);
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d1e6      	bne.n	8007d26 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2220      	movs	r2, #32
 8007d5c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2200      	movs	r2, #0
 8007d64:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007d6c:	bf00      	nop
 8007d6e:	3754      	adds	r7, #84	@ 0x54
 8007d70:	46bd      	mov	sp, r7
 8007d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d76:	4770      	bx	lr
 8007d78:	effffffe 	.word	0xeffffffe

08007d7c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b084      	sub	sp, #16
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d88:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d92:	68f8      	ldr	r0, [r7, #12]
 8007d94:	f7ff f854 	bl	8006e40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d98:	bf00      	nop
 8007d9a:	3710      	adds	r7, #16
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b088      	sub	sp, #32
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	e853 3f00 	ldrex	r3, [r3]
 8007db4:	60bb      	str	r3, [r7, #8]
   return(result);
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007dbc:	61fb      	str	r3, [r7, #28]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	69fb      	ldr	r3, [r7, #28]
 8007dc6:	61bb      	str	r3, [r7, #24]
 8007dc8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dca:	6979      	ldr	r1, [r7, #20]
 8007dcc:	69ba      	ldr	r2, [r7, #24]
 8007dce:	e841 2300 	strex	r3, r2, [r1]
 8007dd2:	613b      	str	r3, [r7, #16]
   return(result);
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d1e6      	bne.n	8007da8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2220      	movs	r2, #32
 8007dde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2200      	movs	r2, #0
 8007de6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f7ff f81f 	bl	8006e2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007dee:	bf00      	nop
 8007df0:	3720      	adds	r7, #32
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}

08007df6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007df6:	b480      	push	{r7}
 8007df8:	b083      	sub	sp, #12
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007dfe:	bf00      	nop
 8007e00:	370c      	adds	r7, #12
 8007e02:	46bd      	mov	sp, r7
 8007e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e08:	4770      	bx	lr

08007e0a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007e0a:	b480      	push	{r7}
 8007e0c:	b083      	sub	sp, #12
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007e12:	bf00      	nop
 8007e14:	370c      	adds	r7, #12
 8007e16:	46bd      	mov	sp, r7
 8007e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1c:	4770      	bx	lr

08007e1e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007e1e:	b480      	push	{r7}
 8007e20:	b083      	sub	sp, #12
 8007e22:	af00      	add	r7, sp, #0
 8007e24:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007e26:	bf00      	nop
 8007e28:	370c      	adds	r7, #12
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e30:	4770      	bx	lr

08007e32 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007e32:	b480      	push	{r7}
 8007e34:	b085      	sub	sp, #20
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007e40:	2b01      	cmp	r3, #1
 8007e42:	d101      	bne.n	8007e48 <HAL_UARTEx_DisableFifoMode+0x16>
 8007e44:	2302      	movs	r3, #2
 8007e46:	e027      	b.n	8007e98 <HAL_UARTEx_DisableFifoMode+0x66>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2224      	movs	r2, #36	@ 0x24
 8007e54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	681a      	ldr	r2, [r3, #0]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f022 0201 	bic.w	r2, r2, #1
 8007e6e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007e76:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	68fa      	ldr	r2, [r7, #12]
 8007e84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2220      	movs	r2, #32
 8007e8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2200      	movs	r2, #0
 8007e92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007e96:	2300      	movs	r3, #0
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3714      	adds	r7, #20
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea2:	4770      	bx	lr

08007ea4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b084      	sub	sp, #16
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007eb4:	2b01      	cmp	r3, #1
 8007eb6:	d101      	bne.n	8007ebc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007eb8:	2302      	movs	r3, #2
 8007eba:	e02d      	b.n	8007f18 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2224      	movs	r2, #36	@ 0x24
 8007ec8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f022 0201 	bic.w	r2, r2, #1
 8007ee2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	689b      	ldr	r3, [r3, #8]
 8007eea:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	683a      	ldr	r2, [r7, #0]
 8007ef4:	430a      	orrs	r2, r1
 8007ef6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f000 f84f 	bl	8007f9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	68fa      	ldr	r2, [r7, #12]
 8007f04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2220      	movs	r2, #32
 8007f0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2200      	movs	r2, #0
 8007f12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007f16:	2300      	movs	r3, #0
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3710      	adds	r7, #16
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}

08007f20 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b084      	sub	sp, #16
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007f30:	2b01      	cmp	r3, #1
 8007f32:	d101      	bne.n	8007f38 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007f34:	2302      	movs	r3, #2
 8007f36:	e02d      	b.n	8007f94 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2224      	movs	r2, #36	@ 0x24
 8007f44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	681a      	ldr	r2, [r3, #0]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f022 0201 	bic.w	r2, r2, #1
 8007f5e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	683a      	ldr	r2, [r7, #0]
 8007f70:	430a      	orrs	r2, r1
 8007f72:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f000 f811 	bl	8007f9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	68fa      	ldr	r2, [r7, #12]
 8007f80:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2220      	movs	r2, #32
 8007f86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007f92:	2300      	movs	r3, #0
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3710      	adds	r7, #16
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}

08007f9c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b085      	sub	sp, #20
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d108      	bne.n	8007fbe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2201      	movs	r2, #1
 8007fb0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007fbc:	e031      	b.n	8008022 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007fbe:	2310      	movs	r3, #16
 8007fc0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007fc2:	2310      	movs	r3, #16
 8007fc4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	689b      	ldr	r3, [r3, #8]
 8007fcc:	0e5b      	lsrs	r3, r3, #25
 8007fce:	b2db      	uxtb	r3, r3
 8007fd0:	f003 0307 	and.w	r3, r3, #7
 8007fd4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	689b      	ldr	r3, [r3, #8]
 8007fdc:	0f5b      	lsrs	r3, r3, #29
 8007fde:	b2db      	uxtb	r3, r3
 8007fe0:	f003 0307 	and.w	r3, r3, #7
 8007fe4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007fe6:	7bbb      	ldrb	r3, [r7, #14]
 8007fe8:	7b3a      	ldrb	r2, [r7, #12]
 8007fea:	4911      	ldr	r1, [pc, #68]	@ (8008030 <UARTEx_SetNbDataToProcess+0x94>)
 8007fec:	5c8a      	ldrb	r2, [r1, r2]
 8007fee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007ff2:	7b3a      	ldrb	r2, [r7, #12]
 8007ff4:	490f      	ldr	r1, [pc, #60]	@ (8008034 <UARTEx_SetNbDataToProcess+0x98>)
 8007ff6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007ff8:	fb93 f3f2 	sdiv	r3, r3, r2
 8007ffc:	b29a      	uxth	r2, r3
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008004:	7bfb      	ldrb	r3, [r7, #15]
 8008006:	7b7a      	ldrb	r2, [r7, #13]
 8008008:	4909      	ldr	r1, [pc, #36]	@ (8008030 <UARTEx_SetNbDataToProcess+0x94>)
 800800a:	5c8a      	ldrb	r2, [r1, r2]
 800800c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008010:	7b7a      	ldrb	r2, [r7, #13]
 8008012:	4908      	ldr	r1, [pc, #32]	@ (8008034 <UARTEx_SetNbDataToProcess+0x98>)
 8008014:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008016:	fb93 f3f2 	sdiv	r3, r3, r2
 800801a:	b29a      	uxth	r2, r3
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008022:	bf00      	nop
 8008024:	3714      	adds	r7, #20
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr
 800802e:	bf00      	nop
 8008030:	08008a34 	.word	0x08008a34
 8008034:	08008a3c 	.word	0x08008a3c

08008038 <HAL_WWDG_IRQHandler>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
void HAL_WWDG_IRQHandler(WWDG_HandleTypeDef *hwwdg)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b082      	sub	sp, #8
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  /* Check if Early Wakeup Interrupt is enable */
  if (__HAL_WWDG_GET_IT_SOURCE(hwwdg, WWDG_IT_EWI) != RESET)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	685b      	ldr	r3, [r3, #4]
 8008046:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800804a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800804e:	d10e      	bne.n	800806e <HAL_WWDG_IRQHandler+0x36>
  {
    /* Check if WWDG Early Wakeup Interrupt occurred */
    if (__HAL_WWDG_GET_FLAG(hwwdg, WWDG_FLAG_EWIF) != RESET)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	689b      	ldr	r3, [r3, #8]
 8008056:	f003 0301 	and.w	r3, r3, #1
 800805a:	2b01      	cmp	r3, #1
 800805c:	d107      	bne.n	800806e <HAL_WWDG_IRQHandler+0x36>
    {
      /* Clear the WWDG Early Wakeup flag */
      __HAL_WWDG_CLEAR_FLAG(hwwdg, WWDG_FLAG_EWIF);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f06f 0201 	mvn.w	r2, #1
 8008066:	609a      	str	r2, [r3, #8]
#if (USE_HAL_WWDG_REGISTER_CALLBACKS == 1)
      /* Early Wakeup registered callback */
      hwwdg->EwiCallback(hwwdg);
#else
      /* Early Wakeup callback */
      HAL_WWDG_EarlyWakeupCallback(hwwdg);
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f000 f804 	bl	8008076 <HAL_WWDG_EarlyWakeupCallback>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */
    }
  }
}
 800806e:	bf00      	nop
 8008070:	3708      	adds	r7, #8
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}

08008076 <HAL_WWDG_EarlyWakeupCallback>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
__weak void HAL_WWDG_EarlyWakeupCallback(WWDG_HandleTypeDef *hwwdg)
{
 8008076:	b480      	push	{r7}
 8008078:	b083      	sub	sp, #12
 800807a:	af00      	add	r7, sp, #0
 800807c:	6078      	str	r0, [r7, #4]
  UNUSED(hwwdg);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_WWDG_EarlyWakeupCallback could be implemented in the user file
   */
}
 800807e:	bf00      	nop
 8008080:	370c      	adds	r7, #12
 8008082:	46bd      	mov	sp, r7
 8008084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008088:	4770      	bx	lr
	...

0800808c <std>:
 800808c:	2300      	movs	r3, #0
 800808e:	b510      	push	{r4, lr}
 8008090:	4604      	mov	r4, r0
 8008092:	e9c0 3300 	strd	r3, r3, [r0]
 8008096:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800809a:	6083      	str	r3, [r0, #8]
 800809c:	8181      	strh	r1, [r0, #12]
 800809e:	6643      	str	r3, [r0, #100]	@ 0x64
 80080a0:	81c2      	strh	r2, [r0, #14]
 80080a2:	6183      	str	r3, [r0, #24]
 80080a4:	4619      	mov	r1, r3
 80080a6:	2208      	movs	r2, #8
 80080a8:	305c      	adds	r0, #92	@ 0x5c
 80080aa:	f000 f9e7 	bl	800847c <memset>
 80080ae:	4b0d      	ldr	r3, [pc, #52]	@ (80080e4 <std+0x58>)
 80080b0:	6263      	str	r3, [r4, #36]	@ 0x24
 80080b2:	4b0d      	ldr	r3, [pc, #52]	@ (80080e8 <std+0x5c>)
 80080b4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80080b6:	4b0d      	ldr	r3, [pc, #52]	@ (80080ec <std+0x60>)
 80080b8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80080ba:	4b0d      	ldr	r3, [pc, #52]	@ (80080f0 <std+0x64>)
 80080bc:	6323      	str	r3, [r4, #48]	@ 0x30
 80080be:	4b0d      	ldr	r3, [pc, #52]	@ (80080f4 <std+0x68>)
 80080c0:	6224      	str	r4, [r4, #32]
 80080c2:	429c      	cmp	r4, r3
 80080c4:	d006      	beq.n	80080d4 <std+0x48>
 80080c6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80080ca:	4294      	cmp	r4, r2
 80080cc:	d002      	beq.n	80080d4 <std+0x48>
 80080ce:	33d0      	adds	r3, #208	@ 0xd0
 80080d0:	429c      	cmp	r4, r3
 80080d2:	d105      	bne.n	80080e0 <std+0x54>
 80080d4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80080d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080dc:	f000 ba46 	b.w	800856c <__retarget_lock_init_recursive>
 80080e0:	bd10      	pop	{r4, pc}
 80080e2:	bf00      	nop
 80080e4:	080082cd 	.word	0x080082cd
 80080e8:	080082ef 	.word	0x080082ef
 80080ec:	08008327 	.word	0x08008327
 80080f0:	0800834b 	.word	0x0800834b
 80080f4:	240001d0 	.word	0x240001d0

080080f8 <stdio_exit_handler>:
 80080f8:	4a02      	ldr	r2, [pc, #8]	@ (8008104 <stdio_exit_handler+0xc>)
 80080fa:	4903      	ldr	r1, [pc, #12]	@ (8008108 <stdio_exit_handler+0x10>)
 80080fc:	4803      	ldr	r0, [pc, #12]	@ (800810c <stdio_exit_handler+0x14>)
 80080fe:	f000 b869 	b.w	80081d4 <_fwalk_sglue>
 8008102:	bf00      	nop
 8008104:	24000010 	.word	0x24000010
 8008108:	0800886d 	.word	0x0800886d
 800810c:	24000020 	.word	0x24000020

08008110 <cleanup_stdio>:
 8008110:	6841      	ldr	r1, [r0, #4]
 8008112:	4b0c      	ldr	r3, [pc, #48]	@ (8008144 <cleanup_stdio+0x34>)
 8008114:	4299      	cmp	r1, r3
 8008116:	b510      	push	{r4, lr}
 8008118:	4604      	mov	r4, r0
 800811a:	d001      	beq.n	8008120 <cleanup_stdio+0x10>
 800811c:	f000 fba6 	bl	800886c <_fflush_r>
 8008120:	68a1      	ldr	r1, [r4, #8]
 8008122:	4b09      	ldr	r3, [pc, #36]	@ (8008148 <cleanup_stdio+0x38>)
 8008124:	4299      	cmp	r1, r3
 8008126:	d002      	beq.n	800812e <cleanup_stdio+0x1e>
 8008128:	4620      	mov	r0, r4
 800812a:	f000 fb9f 	bl	800886c <_fflush_r>
 800812e:	68e1      	ldr	r1, [r4, #12]
 8008130:	4b06      	ldr	r3, [pc, #24]	@ (800814c <cleanup_stdio+0x3c>)
 8008132:	4299      	cmp	r1, r3
 8008134:	d004      	beq.n	8008140 <cleanup_stdio+0x30>
 8008136:	4620      	mov	r0, r4
 8008138:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800813c:	f000 bb96 	b.w	800886c <_fflush_r>
 8008140:	bd10      	pop	{r4, pc}
 8008142:	bf00      	nop
 8008144:	240001d0 	.word	0x240001d0
 8008148:	24000238 	.word	0x24000238
 800814c:	240002a0 	.word	0x240002a0

08008150 <global_stdio_init.part.0>:
 8008150:	b510      	push	{r4, lr}
 8008152:	4b0b      	ldr	r3, [pc, #44]	@ (8008180 <global_stdio_init.part.0+0x30>)
 8008154:	4c0b      	ldr	r4, [pc, #44]	@ (8008184 <global_stdio_init.part.0+0x34>)
 8008156:	4a0c      	ldr	r2, [pc, #48]	@ (8008188 <global_stdio_init.part.0+0x38>)
 8008158:	601a      	str	r2, [r3, #0]
 800815a:	4620      	mov	r0, r4
 800815c:	2200      	movs	r2, #0
 800815e:	2104      	movs	r1, #4
 8008160:	f7ff ff94 	bl	800808c <std>
 8008164:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008168:	2201      	movs	r2, #1
 800816a:	2109      	movs	r1, #9
 800816c:	f7ff ff8e 	bl	800808c <std>
 8008170:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008174:	2202      	movs	r2, #2
 8008176:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800817a:	2112      	movs	r1, #18
 800817c:	f7ff bf86 	b.w	800808c <std>
 8008180:	24000308 	.word	0x24000308
 8008184:	240001d0 	.word	0x240001d0
 8008188:	080080f9 	.word	0x080080f9

0800818c <__sfp_lock_acquire>:
 800818c:	4801      	ldr	r0, [pc, #4]	@ (8008194 <__sfp_lock_acquire+0x8>)
 800818e:	f000 b9ee 	b.w	800856e <__retarget_lock_acquire_recursive>
 8008192:	bf00      	nop
 8008194:	24000311 	.word	0x24000311

08008198 <__sfp_lock_release>:
 8008198:	4801      	ldr	r0, [pc, #4]	@ (80081a0 <__sfp_lock_release+0x8>)
 800819a:	f000 b9e9 	b.w	8008570 <__retarget_lock_release_recursive>
 800819e:	bf00      	nop
 80081a0:	24000311 	.word	0x24000311

080081a4 <__sinit>:
 80081a4:	b510      	push	{r4, lr}
 80081a6:	4604      	mov	r4, r0
 80081a8:	f7ff fff0 	bl	800818c <__sfp_lock_acquire>
 80081ac:	6a23      	ldr	r3, [r4, #32]
 80081ae:	b11b      	cbz	r3, 80081b8 <__sinit+0x14>
 80081b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081b4:	f7ff bff0 	b.w	8008198 <__sfp_lock_release>
 80081b8:	4b04      	ldr	r3, [pc, #16]	@ (80081cc <__sinit+0x28>)
 80081ba:	6223      	str	r3, [r4, #32]
 80081bc:	4b04      	ldr	r3, [pc, #16]	@ (80081d0 <__sinit+0x2c>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d1f5      	bne.n	80081b0 <__sinit+0xc>
 80081c4:	f7ff ffc4 	bl	8008150 <global_stdio_init.part.0>
 80081c8:	e7f2      	b.n	80081b0 <__sinit+0xc>
 80081ca:	bf00      	nop
 80081cc:	08008111 	.word	0x08008111
 80081d0:	24000308 	.word	0x24000308

080081d4 <_fwalk_sglue>:
 80081d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081d8:	4607      	mov	r7, r0
 80081da:	4688      	mov	r8, r1
 80081dc:	4614      	mov	r4, r2
 80081de:	2600      	movs	r6, #0
 80081e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80081e4:	f1b9 0901 	subs.w	r9, r9, #1
 80081e8:	d505      	bpl.n	80081f6 <_fwalk_sglue+0x22>
 80081ea:	6824      	ldr	r4, [r4, #0]
 80081ec:	2c00      	cmp	r4, #0
 80081ee:	d1f7      	bne.n	80081e0 <_fwalk_sglue+0xc>
 80081f0:	4630      	mov	r0, r6
 80081f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081f6:	89ab      	ldrh	r3, [r5, #12]
 80081f8:	2b01      	cmp	r3, #1
 80081fa:	d907      	bls.n	800820c <_fwalk_sglue+0x38>
 80081fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008200:	3301      	adds	r3, #1
 8008202:	d003      	beq.n	800820c <_fwalk_sglue+0x38>
 8008204:	4629      	mov	r1, r5
 8008206:	4638      	mov	r0, r7
 8008208:	47c0      	blx	r8
 800820a:	4306      	orrs	r6, r0
 800820c:	3568      	adds	r5, #104	@ 0x68
 800820e:	e7e9      	b.n	80081e4 <_fwalk_sglue+0x10>

08008210 <_puts_r>:
 8008210:	6a03      	ldr	r3, [r0, #32]
 8008212:	b570      	push	{r4, r5, r6, lr}
 8008214:	6884      	ldr	r4, [r0, #8]
 8008216:	4605      	mov	r5, r0
 8008218:	460e      	mov	r6, r1
 800821a:	b90b      	cbnz	r3, 8008220 <_puts_r+0x10>
 800821c:	f7ff ffc2 	bl	80081a4 <__sinit>
 8008220:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008222:	07db      	lsls	r3, r3, #31
 8008224:	d405      	bmi.n	8008232 <_puts_r+0x22>
 8008226:	89a3      	ldrh	r3, [r4, #12]
 8008228:	0598      	lsls	r0, r3, #22
 800822a:	d402      	bmi.n	8008232 <_puts_r+0x22>
 800822c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800822e:	f000 f99e 	bl	800856e <__retarget_lock_acquire_recursive>
 8008232:	89a3      	ldrh	r3, [r4, #12]
 8008234:	0719      	lsls	r1, r3, #28
 8008236:	d502      	bpl.n	800823e <_puts_r+0x2e>
 8008238:	6923      	ldr	r3, [r4, #16]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d135      	bne.n	80082aa <_puts_r+0x9a>
 800823e:	4621      	mov	r1, r4
 8008240:	4628      	mov	r0, r5
 8008242:	f000 f8c5 	bl	80083d0 <__swsetup_r>
 8008246:	b380      	cbz	r0, 80082aa <_puts_r+0x9a>
 8008248:	f04f 35ff 	mov.w	r5, #4294967295
 800824c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800824e:	07da      	lsls	r2, r3, #31
 8008250:	d405      	bmi.n	800825e <_puts_r+0x4e>
 8008252:	89a3      	ldrh	r3, [r4, #12]
 8008254:	059b      	lsls	r3, r3, #22
 8008256:	d402      	bmi.n	800825e <_puts_r+0x4e>
 8008258:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800825a:	f000 f989 	bl	8008570 <__retarget_lock_release_recursive>
 800825e:	4628      	mov	r0, r5
 8008260:	bd70      	pop	{r4, r5, r6, pc}
 8008262:	2b00      	cmp	r3, #0
 8008264:	da04      	bge.n	8008270 <_puts_r+0x60>
 8008266:	69a2      	ldr	r2, [r4, #24]
 8008268:	429a      	cmp	r2, r3
 800826a:	dc17      	bgt.n	800829c <_puts_r+0x8c>
 800826c:	290a      	cmp	r1, #10
 800826e:	d015      	beq.n	800829c <_puts_r+0x8c>
 8008270:	6823      	ldr	r3, [r4, #0]
 8008272:	1c5a      	adds	r2, r3, #1
 8008274:	6022      	str	r2, [r4, #0]
 8008276:	7019      	strb	r1, [r3, #0]
 8008278:	68a3      	ldr	r3, [r4, #8]
 800827a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800827e:	3b01      	subs	r3, #1
 8008280:	60a3      	str	r3, [r4, #8]
 8008282:	2900      	cmp	r1, #0
 8008284:	d1ed      	bne.n	8008262 <_puts_r+0x52>
 8008286:	2b00      	cmp	r3, #0
 8008288:	da11      	bge.n	80082ae <_puts_r+0x9e>
 800828a:	4622      	mov	r2, r4
 800828c:	210a      	movs	r1, #10
 800828e:	4628      	mov	r0, r5
 8008290:	f000 f85f 	bl	8008352 <__swbuf_r>
 8008294:	3001      	adds	r0, #1
 8008296:	d0d7      	beq.n	8008248 <_puts_r+0x38>
 8008298:	250a      	movs	r5, #10
 800829a:	e7d7      	b.n	800824c <_puts_r+0x3c>
 800829c:	4622      	mov	r2, r4
 800829e:	4628      	mov	r0, r5
 80082a0:	f000 f857 	bl	8008352 <__swbuf_r>
 80082a4:	3001      	adds	r0, #1
 80082a6:	d1e7      	bne.n	8008278 <_puts_r+0x68>
 80082a8:	e7ce      	b.n	8008248 <_puts_r+0x38>
 80082aa:	3e01      	subs	r6, #1
 80082ac:	e7e4      	b.n	8008278 <_puts_r+0x68>
 80082ae:	6823      	ldr	r3, [r4, #0]
 80082b0:	1c5a      	adds	r2, r3, #1
 80082b2:	6022      	str	r2, [r4, #0]
 80082b4:	220a      	movs	r2, #10
 80082b6:	701a      	strb	r2, [r3, #0]
 80082b8:	e7ee      	b.n	8008298 <_puts_r+0x88>
	...

080082bc <puts>:
 80082bc:	4b02      	ldr	r3, [pc, #8]	@ (80082c8 <puts+0xc>)
 80082be:	4601      	mov	r1, r0
 80082c0:	6818      	ldr	r0, [r3, #0]
 80082c2:	f7ff bfa5 	b.w	8008210 <_puts_r>
 80082c6:	bf00      	nop
 80082c8:	2400001c 	.word	0x2400001c

080082cc <__sread>:
 80082cc:	b510      	push	{r4, lr}
 80082ce:	460c      	mov	r4, r1
 80082d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082d4:	f000 f8fc 	bl	80084d0 <_read_r>
 80082d8:	2800      	cmp	r0, #0
 80082da:	bfab      	itete	ge
 80082dc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80082de:	89a3      	ldrhlt	r3, [r4, #12]
 80082e0:	181b      	addge	r3, r3, r0
 80082e2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80082e6:	bfac      	ite	ge
 80082e8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80082ea:	81a3      	strhlt	r3, [r4, #12]
 80082ec:	bd10      	pop	{r4, pc}

080082ee <__swrite>:
 80082ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082f2:	461f      	mov	r7, r3
 80082f4:	898b      	ldrh	r3, [r1, #12]
 80082f6:	05db      	lsls	r3, r3, #23
 80082f8:	4605      	mov	r5, r0
 80082fa:	460c      	mov	r4, r1
 80082fc:	4616      	mov	r6, r2
 80082fe:	d505      	bpl.n	800830c <__swrite+0x1e>
 8008300:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008304:	2302      	movs	r3, #2
 8008306:	2200      	movs	r2, #0
 8008308:	f000 f8d0 	bl	80084ac <_lseek_r>
 800830c:	89a3      	ldrh	r3, [r4, #12]
 800830e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008312:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008316:	81a3      	strh	r3, [r4, #12]
 8008318:	4632      	mov	r2, r6
 800831a:	463b      	mov	r3, r7
 800831c:	4628      	mov	r0, r5
 800831e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008322:	f000 b8e7 	b.w	80084f4 <_write_r>

08008326 <__sseek>:
 8008326:	b510      	push	{r4, lr}
 8008328:	460c      	mov	r4, r1
 800832a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800832e:	f000 f8bd 	bl	80084ac <_lseek_r>
 8008332:	1c43      	adds	r3, r0, #1
 8008334:	89a3      	ldrh	r3, [r4, #12]
 8008336:	bf15      	itete	ne
 8008338:	6560      	strne	r0, [r4, #84]	@ 0x54
 800833a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800833e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008342:	81a3      	strheq	r3, [r4, #12]
 8008344:	bf18      	it	ne
 8008346:	81a3      	strhne	r3, [r4, #12]
 8008348:	bd10      	pop	{r4, pc}

0800834a <__sclose>:
 800834a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800834e:	f000 b89d 	b.w	800848c <_close_r>

08008352 <__swbuf_r>:
 8008352:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008354:	460e      	mov	r6, r1
 8008356:	4614      	mov	r4, r2
 8008358:	4605      	mov	r5, r0
 800835a:	b118      	cbz	r0, 8008364 <__swbuf_r+0x12>
 800835c:	6a03      	ldr	r3, [r0, #32]
 800835e:	b90b      	cbnz	r3, 8008364 <__swbuf_r+0x12>
 8008360:	f7ff ff20 	bl	80081a4 <__sinit>
 8008364:	69a3      	ldr	r3, [r4, #24]
 8008366:	60a3      	str	r3, [r4, #8]
 8008368:	89a3      	ldrh	r3, [r4, #12]
 800836a:	071a      	lsls	r2, r3, #28
 800836c:	d501      	bpl.n	8008372 <__swbuf_r+0x20>
 800836e:	6923      	ldr	r3, [r4, #16]
 8008370:	b943      	cbnz	r3, 8008384 <__swbuf_r+0x32>
 8008372:	4621      	mov	r1, r4
 8008374:	4628      	mov	r0, r5
 8008376:	f000 f82b 	bl	80083d0 <__swsetup_r>
 800837a:	b118      	cbz	r0, 8008384 <__swbuf_r+0x32>
 800837c:	f04f 37ff 	mov.w	r7, #4294967295
 8008380:	4638      	mov	r0, r7
 8008382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008384:	6823      	ldr	r3, [r4, #0]
 8008386:	6922      	ldr	r2, [r4, #16]
 8008388:	1a98      	subs	r0, r3, r2
 800838a:	6963      	ldr	r3, [r4, #20]
 800838c:	b2f6      	uxtb	r6, r6
 800838e:	4283      	cmp	r3, r0
 8008390:	4637      	mov	r7, r6
 8008392:	dc05      	bgt.n	80083a0 <__swbuf_r+0x4e>
 8008394:	4621      	mov	r1, r4
 8008396:	4628      	mov	r0, r5
 8008398:	f000 fa68 	bl	800886c <_fflush_r>
 800839c:	2800      	cmp	r0, #0
 800839e:	d1ed      	bne.n	800837c <__swbuf_r+0x2a>
 80083a0:	68a3      	ldr	r3, [r4, #8]
 80083a2:	3b01      	subs	r3, #1
 80083a4:	60a3      	str	r3, [r4, #8]
 80083a6:	6823      	ldr	r3, [r4, #0]
 80083a8:	1c5a      	adds	r2, r3, #1
 80083aa:	6022      	str	r2, [r4, #0]
 80083ac:	701e      	strb	r6, [r3, #0]
 80083ae:	6962      	ldr	r2, [r4, #20]
 80083b0:	1c43      	adds	r3, r0, #1
 80083b2:	429a      	cmp	r2, r3
 80083b4:	d004      	beq.n	80083c0 <__swbuf_r+0x6e>
 80083b6:	89a3      	ldrh	r3, [r4, #12]
 80083b8:	07db      	lsls	r3, r3, #31
 80083ba:	d5e1      	bpl.n	8008380 <__swbuf_r+0x2e>
 80083bc:	2e0a      	cmp	r6, #10
 80083be:	d1df      	bne.n	8008380 <__swbuf_r+0x2e>
 80083c0:	4621      	mov	r1, r4
 80083c2:	4628      	mov	r0, r5
 80083c4:	f000 fa52 	bl	800886c <_fflush_r>
 80083c8:	2800      	cmp	r0, #0
 80083ca:	d0d9      	beq.n	8008380 <__swbuf_r+0x2e>
 80083cc:	e7d6      	b.n	800837c <__swbuf_r+0x2a>
	...

080083d0 <__swsetup_r>:
 80083d0:	b538      	push	{r3, r4, r5, lr}
 80083d2:	4b29      	ldr	r3, [pc, #164]	@ (8008478 <__swsetup_r+0xa8>)
 80083d4:	4605      	mov	r5, r0
 80083d6:	6818      	ldr	r0, [r3, #0]
 80083d8:	460c      	mov	r4, r1
 80083da:	b118      	cbz	r0, 80083e4 <__swsetup_r+0x14>
 80083dc:	6a03      	ldr	r3, [r0, #32]
 80083de:	b90b      	cbnz	r3, 80083e4 <__swsetup_r+0x14>
 80083e0:	f7ff fee0 	bl	80081a4 <__sinit>
 80083e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083e8:	0719      	lsls	r1, r3, #28
 80083ea:	d422      	bmi.n	8008432 <__swsetup_r+0x62>
 80083ec:	06da      	lsls	r2, r3, #27
 80083ee:	d407      	bmi.n	8008400 <__swsetup_r+0x30>
 80083f0:	2209      	movs	r2, #9
 80083f2:	602a      	str	r2, [r5, #0]
 80083f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083f8:	81a3      	strh	r3, [r4, #12]
 80083fa:	f04f 30ff 	mov.w	r0, #4294967295
 80083fe:	e033      	b.n	8008468 <__swsetup_r+0x98>
 8008400:	0758      	lsls	r0, r3, #29
 8008402:	d512      	bpl.n	800842a <__swsetup_r+0x5a>
 8008404:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008406:	b141      	cbz	r1, 800841a <__swsetup_r+0x4a>
 8008408:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800840c:	4299      	cmp	r1, r3
 800840e:	d002      	beq.n	8008416 <__swsetup_r+0x46>
 8008410:	4628      	mov	r0, r5
 8008412:	f000 f8af 	bl	8008574 <_free_r>
 8008416:	2300      	movs	r3, #0
 8008418:	6363      	str	r3, [r4, #52]	@ 0x34
 800841a:	89a3      	ldrh	r3, [r4, #12]
 800841c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008420:	81a3      	strh	r3, [r4, #12]
 8008422:	2300      	movs	r3, #0
 8008424:	6063      	str	r3, [r4, #4]
 8008426:	6923      	ldr	r3, [r4, #16]
 8008428:	6023      	str	r3, [r4, #0]
 800842a:	89a3      	ldrh	r3, [r4, #12]
 800842c:	f043 0308 	orr.w	r3, r3, #8
 8008430:	81a3      	strh	r3, [r4, #12]
 8008432:	6923      	ldr	r3, [r4, #16]
 8008434:	b94b      	cbnz	r3, 800844a <__swsetup_r+0x7a>
 8008436:	89a3      	ldrh	r3, [r4, #12]
 8008438:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800843c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008440:	d003      	beq.n	800844a <__swsetup_r+0x7a>
 8008442:	4621      	mov	r1, r4
 8008444:	4628      	mov	r0, r5
 8008446:	f000 fa5f 	bl	8008908 <__smakebuf_r>
 800844a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800844e:	f013 0201 	ands.w	r2, r3, #1
 8008452:	d00a      	beq.n	800846a <__swsetup_r+0x9a>
 8008454:	2200      	movs	r2, #0
 8008456:	60a2      	str	r2, [r4, #8]
 8008458:	6962      	ldr	r2, [r4, #20]
 800845a:	4252      	negs	r2, r2
 800845c:	61a2      	str	r2, [r4, #24]
 800845e:	6922      	ldr	r2, [r4, #16]
 8008460:	b942      	cbnz	r2, 8008474 <__swsetup_r+0xa4>
 8008462:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008466:	d1c5      	bne.n	80083f4 <__swsetup_r+0x24>
 8008468:	bd38      	pop	{r3, r4, r5, pc}
 800846a:	0799      	lsls	r1, r3, #30
 800846c:	bf58      	it	pl
 800846e:	6962      	ldrpl	r2, [r4, #20]
 8008470:	60a2      	str	r2, [r4, #8]
 8008472:	e7f4      	b.n	800845e <__swsetup_r+0x8e>
 8008474:	2000      	movs	r0, #0
 8008476:	e7f7      	b.n	8008468 <__swsetup_r+0x98>
 8008478:	2400001c 	.word	0x2400001c

0800847c <memset>:
 800847c:	4402      	add	r2, r0
 800847e:	4603      	mov	r3, r0
 8008480:	4293      	cmp	r3, r2
 8008482:	d100      	bne.n	8008486 <memset+0xa>
 8008484:	4770      	bx	lr
 8008486:	f803 1b01 	strb.w	r1, [r3], #1
 800848a:	e7f9      	b.n	8008480 <memset+0x4>

0800848c <_close_r>:
 800848c:	b538      	push	{r3, r4, r5, lr}
 800848e:	4d06      	ldr	r5, [pc, #24]	@ (80084a8 <_close_r+0x1c>)
 8008490:	2300      	movs	r3, #0
 8008492:	4604      	mov	r4, r0
 8008494:	4608      	mov	r0, r1
 8008496:	602b      	str	r3, [r5, #0]
 8008498:	f7f8 fb1d 	bl	8000ad6 <_close>
 800849c:	1c43      	adds	r3, r0, #1
 800849e:	d102      	bne.n	80084a6 <_close_r+0x1a>
 80084a0:	682b      	ldr	r3, [r5, #0]
 80084a2:	b103      	cbz	r3, 80084a6 <_close_r+0x1a>
 80084a4:	6023      	str	r3, [r4, #0]
 80084a6:	bd38      	pop	{r3, r4, r5, pc}
 80084a8:	2400030c 	.word	0x2400030c

080084ac <_lseek_r>:
 80084ac:	b538      	push	{r3, r4, r5, lr}
 80084ae:	4d07      	ldr	r5, [pc, #28]	@ (80084cc <_lseek_r+0x20>)
 80084b0:	4604      	mov	r4, r0
 80084b2:	4608      	mov	r0, r1
 80084b4:	4611      	mov	r1, r2
 80084b6:	2200      	movs	r2, #0
 80084b8:	602a      	str	r2, [r5, #0]
 80084ba:	461a      	mov	r2, r3
 80084bc:	f7f8 fb32 	bl	8000b24 <_lseek>
 80084c0:	1c43      	adds	r3, r0, #1
 80084c2:	d102      	bne.n	80084ca <_lseek_r+0x1e>
 80084c4:	682b      	ldr	r3, [r5, #0]
 80084c6:	b103      	cbz	r3, 80084ca <_lseek_r+0x1e>
 80084c8:	6023      	str	r3, [r4, #0]
 80084ca:	bd38      	pop	{r3, r4, r5, pc}
 80084cc:	2400030c 	.word	0x2400030c

080084d0 <_read_r>:
 80084d0:	b538      	push	{r3, r4, r5, lr}
 80084d2:	4d07      	ldr	r5, [pc, #28]	@ (80084f0 <_read_r+0x20>)
 80084d4:	4604      	mov	r4, r0
 80084d6:	4608      	mov	r0, r1
 80084d8:	4611      	mov	r1, r2
 80084da:	2200      	movs	r2, #0
 80084dc:	602a      	str	r2, [r5, #0]
 80084de:	461a      	mov	r2, r3
 80084e0:	f7f8 fac0 	bl	8000a64 <_read>
 80084e4:	1c43      	adds	r3, r0, #1
 80084e6:	d102      	bne.n	80084ee <_read_r+0x1e>
 80084e8:	682b      	ldr	r3, [r5, #0]
 80084ea:	b103      	cbz	r3, 80084ee <_read_r+0x1e>
 80084ec:	6023      	str	r3, [r4, #0]
 80084ee:	bd38      	pop	{r3, r4, r5, pc}
 80084f0:	2400030c 	.word	0x2400030c

080084f4 <_write_r>:
 80084f4:	b538      	push	{r3, r4, r5, lr}
 80084f6:	4d07      	ldr	r5, [pc, #28]	@ (8008514 <_write_r+0x20>)
 80084f8:	4604      	mov	r4, r0
 80084fa:	4608      	mov	r0, r1
 80084fc:	4611      	mov	r1, r2
 80084fe:	2200      	movs	r2, #0
 8008500:	602a      	str	r2, [r5, #0]
 8008502:	461a      	mov	r2, r3
 8008504:	f7f8 facb 	bl	8000a9e <_write>
 8008508:	1c43      	adds	r3, r0, #1
 800850a:	d102      	bne.n	8008512 <_write_r+0x1e>
 800850c:	682b      	ldr	r3, [r5, #0]
 800850e:	b103      	cbz	r3, 8008512 <_write_r+0x1e>
 8008510:	6023      	str	r3, [r4, #0]
 8008512:	bd38      	pop	{r3, r4, r5, pc}
 8008514:	2400030c 	.word	0x2400030c

08008518 <__errno>:
 8008518:	4b01      	ldr	r3, [pc, #4]	@ (8008520 <__errno+0x8>)
 800851a:	6818      	ldr	r0, [r3, #0]
 800851c:	4770      	bx	lr
 800851e:	bf00      	nop
 8008520:	2400001c 	.word	0x2400001c

08008524 <__libc_init_array>:
 8008524:	b570      	push	{r4, r5, r6, lr}
 8008526:	4d0d      	ldr	r5, [pc, #52]	@ (800855c <__libc_init_array+0x38>)
 8008528:	4c0d      	ldr	r4, [pc, #52]	@ (8008560 <__libc_init_array+0x3c>)
 800852a:	1b64      	subs	r4, r4, r5
 800852c:	10a4      	asrs	r4, r4, #2
 800852e:	2600      	movs	r6, #0
 8008530:	42a6      	cmp	r6, r4
 8008532:	d109      	bne.n	8008548 <__libc_init_array+0x24>
 8008534:	4d0b      	ldr	r5, [pc, #44]	@ (8008564 <__libc_init_array+0x40>)
 8008536:	4c0c      	ldr	r4, [pc, #48]	@ (8008568 <__libc_init_array+0x44>)
 8008538:	f000 fa54 	bl	80089e4 <_init>
 800853c:	1b64      	subs	r4, r4, r5
 800853e:	10a4      	asrs	r4, r4, #2
 8008540:	2600      	movs	r6, #0
 8008542:	42a6      	cmp	r6, r4
 8008544:	d105      	bne.n	8008552 <__libc_init_array+0x2e>
 8008546:	bd70      	pop	{r4, r5, r6, pc}
 8008548:	f855 3b04 	ldr.w	r3, [r5], #4
 800854c:	4798      	blx	r3
 800854e:	3601      	adds	r6, #1
 8008550:	e7ee      	b.n	8008530 <__libc_init_array+0xc>
 8008552:	f855 3b04 	ldr.w	r3, [r5], #4
 8008556:	4798      	blx	r3
 8008558:	3601      	adds	r6, #1
 800855a:	e7f2      	b.n	8008542 <__libc_init_array+0x1e>
 800855c:	08008a4c 	.word	0x08008a4c
 8008560:	08008a4c 	.word	0x08008a4c
 8008564:	08008a4c 	.word	0x08008a4c
 8008568:	08008a50 	.word	0x08008a50

0800856c <__retarget_lock_init_recursive>:
 800856c:	4770      	bx	lr

0800856e <__retarget_lock_acquire_recursive>:
 800856e:	4770      	bx	lr

08008570 <__retarget_lock_release_recursive>:
 8008570:	4770      	bx	lr
	...

08008574 <_free_r>:
 8008574:	b538      	push	{r3, r4, r5, lr}
 8008576:	4605      	mov	r5, r0
 8008578:	2900      	cmp	r1, #0
 800857a:	d041      	beq.n	8008600 <_free_r+0x8c>
 800857c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008580:	1f0c      	subs	r4, r1, #4
 8008582:	2b00      	cmp	r3, #0
 8008584:	bfb8      	it	lt
 8008586:	18e4      	addlt	r4, r4, r3
 8008588:	f000 f8e0 	bl	800874c <__malloc_lock>
 800858c:	4a1d      	ldr	r2, [pc, #116]	@ (8008604 <_free_r+0x90>)
 800858e:	6813      	ldr	r3, [r2, #0]
 8008590:	b933      	cbnz	r3, 80085a0 <_free_r+0x2c>
 8008592:	6063      	str	r3, [r4, #4]
 8008594:	6014      	str	r4, [r2, #0]
 8008596:	4628      	mov	r0, r5
 8008598:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800859c:	f000 b8dc 	b.w	8008758 <__malloc_unlock>
 80085a0:	42a3      	cmp	r3, r4
 80085a2:	d908      	bls.n	80085b6 <_free_r+0x42>
 80085a4:	6820      	ldr	r0, [r4, #0]
 80085a6:	1821      	adds	r1, r4, r0
 80085a8:	428b      	cmp	r3, r1
 80085aa:	bf01      	itttt	eq
 80085ac:	6819      	ldreq	r1, [r3, #0]
 80085ae:	685b      	ldreq	r3, [r3, #4]
 80085b0:	1809      	addeq	r1, r1, r0
 80085b2:	6021      	streq	r1, [r4, #0]
 80085b4:	e7ed      	b.n	8008592 <_free_r+0x1e>
 80085b6:	461a      	mov	r2, r3
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	b10b      	cbz	r3, 80085c0 <_free_r+0x4c>
 80085bc:	42a3      	cmp	r3, r4
 80085be:	d9fa      	bls.n	80085b6 <_free_r+0x42>
 80085c0:	6811      	ldr	r1, [r2, #0]
 80085c2:	1850      	adds	r0, r2, r1
 80085c4:	42a0      	cmp	r0, r4
 80085c6:	d10b      	bne.n	80085e0 <_free_r+0x6c>
 80085c8:	6820      	ldr	r0, [r4, #0]
 80085ca:	4401      	add	r1, r0
 80085cc:	1850      	adds	r0, r2, r1
 80085ce:	4283      	cmp	r3, r0
 80085d0:	6011      	str	r1, [r2, #0]
 80085d2:	d1e0      	bne.n	8008596 <_free_r+0x22>
 80085d4:	6818      	ldr	r0, [r3, #0]
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	6053      	str	r3, [r2, #4]
 80085da:	4408      	add	r0, r1
 80085dc:	6010      	str	r0, [r2, #0]
 80085de:	e7da      	b.n	8008596 <_free_r+0x22>
 80085e0:	d902      	bls.n	80085e8 <_free_r+0x74>
 80085e2:	230c      	movs	r3, #12
 80085e4:	602b      	str	r3, [r5, #0]
 80085e6:	e7d6      	b.n	8008596 <_free_r+0x22>
 80085e8:	6820      	ldr	r0, [r4, #0]
 80085ea:	1821      	adds	r1, r4, r0
 80085ec:	428b      	cmp	r3, r1
 80085ee:	bf04      	itt	eq
 80085f0:	6819      	ldreq	r1, [r3, #0]
 80085f2:	685b      	ldreq	r3, [r3, #4]
 80085f4:	6063      	str	r3, [r4, #4]
 80085f6:	bf04      	itt	eq
 80085f8:	1809      	addeq	r1, r1, r0
 80085fa:	6021      	streq	r1, [r4, #0]
 80085fc:	6054      	str	r4, [r2, #4]
 80085fe:	e7ca      	b.n	8008596 <_free_r+0x22>
 8008600:	bd38      	pop	{r3, r4, r5, pc}
 8008602:	bf00      	nop
 8008604:	24000318 	.word	0x24000318

08008608 <sbrk_aligned>:
 8008608:	b570      	push	{r4, r5, r6, lr}
 800860a:	4e0f      	ldr	r6, [pc, #60]	@ (8008648 <sbrk_aligned+0x40>)
 800860c:	460c      	mov	r4, r1
 800860e:	6831      	ldr	r1, [r6, #0]
 8008610:	4605      	mov	r5, r0
 8008612:	b911      	cbnz	r1, 800861a <sbrk_aligned+0x12>
 8008614:	f000 f9d6 	bl	80089c4 <_sbrk_r>
 8008618:	6030      	str	r0, [r6, #0]
 800861a:	4621      	mov	r1, r4
 800861c:	4628      	mov	r0, r5
 800861e:	f000 f9d1 	bl	80089c4 <_sbrk_r>
 8008622:	1c43      	adds	r3, r0, #1
 8008624:	d103      	bne.n	800862e <sbrk_aligned+0x26>
 8008626:	f04f 34ff 	mov.w	r4, #4294967295
 800862a:	4620      	mov	r0, r4
 800862c:	bd70      	pop	{r4, r5, r6, pc}
 800862e:	1cc4      	adds	r4, r0, #3
 8008630:	f024 0403 	bic.w	r4, r4, #3
 8008634:	42a0      	cmp	r0, r4
 8008636:	d0f8      	beq.n	800862a <sbrk_aligned+0x22>
 8008638:	1a21      	subs	r1, r4, r0
 800863a:	4628      	mov	r0, r5
 800863c:	f000 f9c2 	bl	80089c4 <_sbrk_r>
 8008640:	3001      	adds	r0, #1
 8008642:	d1f2      	bne.n	800862a <sbrk_aligned+0x22>
 8008644:	e7ef      	b.n	8008626 <sbrk_aligned+0x1e>
 8008646:	bf00      	nop
 8008648:	24000314 	.word	0x24000314

0800864c <_malloc_r>:
 800864c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008650:	1ccd      	adds	r5, r1, #3
 8008652:	f025 0503 	bic.w	r5, r5, #3
 8008656:	3508      	adds	r5, #8
 8008658:	2d0c      	cmp	r5, #12
 800865a:	bf38      	it	cc
 800865c:	250c      	movcc	r5, #12
 800865e:	2d00      	cmp	r5, #0
 8008660:	4606      	mov	r6, r0
 8008662:	db01      	blt.n	8008668 <_malloc_r+0x1c>
 8008664:	42a9      	cmp	r1, r5
 8008666:	d904      	bls.n	8008672 <_malloc_r+0x26>
 8008668:	230c      	movs	r3, #12
 800866a:	6033      	str	r3, [r6, #0]
 800866c:	2000      	movs	r0, #0
 800866e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008672:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008748 <_malloc_r+0xfc>
 8008676:	f000 f869 	bl	800874c <__malloc_lock>
 800867a:	f8d8 3000 	ldr.w	r3, [r8]
 800867e:	461c      	mov	r4, r3
 8008680:	bb44      	cbnz	r4, 80086d4 <_malloc_r+0x88>
 8008682:	4629      	mov	r1, r5
 8008684:	4630      	mov	r0, r6
 8008686:	f7ff ffbf 	bl	8008608 <sbrk_aligned>
 800868a:	1c43      	adds	r3, r0, #1
 800868c:	4604      	mov	r4, r0
 800868e:	d158      	bne.n	8008742 <_malloc_r+0xf6>
 8008690:	f8d8 4000 	ldr.w	r4, [r8]
 8008694:	4627      	mov	r7, r4
 8008696:	2f00      	cmp	r7, #0
 8008698:	d143      	bne.n	8008722 <_malloc_r+0xd6>
 800869a:	2c00      	cmp	r4, #0
 800869c:	d04b      	beq.n	8008736 <_malloc_r+0xea>
 800869e:	6823      	ldr	r3, [r4, #0]
 80086a0:	4639      	mov	r1, r7
 80086a2:	4630      	mov	r0, r6
 80086a4:	eb04 0903 	add.w	r9, r4, r3
 80086a8:	f000 f98c 	bl	80089c4 <_sbrk_r>
 80086ac:	4581      	cmp	r9, r0
 80086ae:	d142      	bne.n	8008736 <_malloc_r+0xea>
 80086b0:	6821      	ldr	r1, [r4, #0]
 80086b2:	1a6d      	subs	r5, r5, r1
 80086b4:	4629      	mov	r1, r5
 80086b6:	4630      	mov	r0, r6
 80086b8:	f7ff ffa6 	bl	8008608 <sbrk_aligned>
 80086bc:	3001      	adds	r0, #1
 80086be:	d03a      	beq.n	8008736 <_malloc_r+0xea>
 80086c0:	6823      	ldr	r3, [r4, #0]
 80086c2:	442b      	add	r3, r5
 80086c4:	6023      	str	r3, [r4, #0]
 80086c6:	f8d8 3000 	ldr.w	r3, [r8]
 80086ca:	685a      	ldr	r2, [r3, #4]
 80086cc:	bb62      	cbnz	r2, 8008728 <_malloc_r+0xdc>
 80086ce:	f8c8 7000 	str.w	r7, [r8]
 80086d2:	e00f      	b.n	80086f4 <_malloc_r+0xa8>
 80086d4:	6822      	ldr	r2, [r4, #0]
 80086d6:	1b52      	subs	r2, r2, r5
 80086d8:	d420      	bmi.n	800871c <_malloc_r+0xd0>
 80086da:	2a0b      	cmp	r2, #11
 80086dc:	d917      	bls.n	800870e <_malloc_r+0xc2>
 80086de:	1961      	adds	r1, r4, r5
 80086e0:	42a3      	cmp	r3, r4
 80086e2:	6025      	str	r5, [r4, #0]
 80086e4:	bf18      	it	ne
 80086e6:	6059      	strne	r1, [r3, #4]
 80086e8:	6863      	ldr	r3, [r4, #4]
 80086ea:	bf08      	it	eq
 80086ec:	f8c8 1000 	streq.w	r1, [r8]
 80086f0:	5162      	str	r2, [r4, r5]
 80086f2:	604b      	str	r3, [r1, #4]
 80086f4:	4630      	mov	r0, r6
 80086f6:	f000 f82f 	bl	8008758 <__malloc_unlock>
 80086fa:	f104 000b 	add.w	r0, r4, #11
 80086fe:	1d23      	adds	r3, r4, #4
 8008700:	f020 0007 	bic.w	r0, r0, #7
 8008704:	1ac2      	subs	r2, r0, r3
 8008706:	bf1c      	itt	ne
 8008708:	1a1b      	subne	r3, r3, r0
 800870a:	50a3      	strne	r3, [r4, r2]
 800870c:	e7af      	b.n	800866e <_malloc_r+0x22>
 800870e:	6862      	ldr	r2, [r4, #4]
 8008710:	42a3      	cmp	r3, r4
 8008712:	bf0c      	ite	eq
 8008714:	f8c8 2000 	streq.w	r2, [r8]
 8008718:	605a      	strne	r2, [r3, #4]
 800871a:	e7eb      	b.n	80086f4 <_malloc_r+0xa8>
 800871c:	4623      	mov	r3, r4
 800871e:	6864      	ldr	r4, [r4, #4]
 8008720:	e7ae      	b.n	8008680 <_malloc_r+0x34>
 8008722:	463c      	mov	r4, r7
 8008724:	687f      	ldr	r7, [r7, #4]
 8008726:	e7b6      	b.n	8008696 <_malloc_r+0x4a>
 8008728:	461a      	mov	r2, r3
 800872a:	685b      	ldr	r3, [r3, #4]
 800872c:	42a3      	cmp	r3, r4
 800872e:	d1fb      	bne.n	8008728 <_malloc_r+0xdc>
 8008730:	2300      	movs	r3, #0
 8008732:	6053      	str	r3, [r2, #4]
 8008734:	e7de      	b.n	80086f4 <_malloc_r+0xa8>
 8008736:	230c      	movs	r3, #12
 8008738:	6033      	str	r3, [r6, #0]
 800873a:	4630      	mov	r0, r6
 800873c:	f000 f80c 	bl	8008758 <__malloc_unlock>
 8008740:	e794      	b.n	800866c <_malloc_r+0x20>
 8008742:	6005      	str	r5, [r0, #0]
 8008744:	e7d6      	b.n	80086f4 <_malloc_r+0xa8>
 8008746:	bf00      	nop
 8008748:	24000318 	.word	0x24000318

0800874c <__malloc_lock>:
 800874c:	4801      	ldr	r0, [pc, #4]	@ (8008754 <__malloc_lock+0x8>)
 800874e:	f7ff bf0e 	b.w	800856e <__retarget_lock_acquire_recursive>
 8008752:	bf00      	nop
 8008754:	24000310 	.word	0x24000310

08008758 <__malloc_unlock>:
 8008758:	4801      	ldr	r0, [pc, #4]	@ (8008760 <__malloc_unlock+0x8>)
 800875a:	f7ff bf09 	b.w	8008570 <__retarget_lock_release_recursive>
 800875e:	bf00      	nop
 8008760:	24000310 	.word	0x24000310

08008764 <__sflush_r>:
 8008764:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800876c:	0716      	lsls	r6, r2, #28
 800876e:	4605      	mov	r5, r0
 8008770:	460c      	mov	r4, r1
 8008772:	d454      	bmi.n	800881e <__sflush_r+0xba>
 8008774:	684b      	ldr	r3, [r1, #4]
 8008776:	2b00      	cmp	r3, #0
 8008778:	dc02      	bgt.n	8008780 <__sflush_r+0x1c>
 800877a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800877c:	2b00      	cmp	r3, #0
 800877e:	dd48      	ble.n	8008812 <__sflush_r+0xae>
 8008780:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008782:	2e00      	cmp	r6, #0
 8008784:	d045      	beq.n	8008812 <__sflush_r+0xae>
 8008786:	2300      	movs	r3, #0
 8008788:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800878c:	682f      	ldr	r7, [r5, #0]
 800878e:	6a21      	ldr	r1, [r4, #32]
 8008790:	602b      	str	r3, [r5, #0]
 8008792:	d030      	beq.n	80087f6 <__sflush_r+0x92>
 8008794:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008796:	89a3      	ldrh	r3, [r4, #12]
 8008798:	0759      	lsls	r1, r3, #29
 800879a:	d505      	bpl.n	80087a8 <__sflush_r+0x44>
 800879c:	6863      	ldr	r3, [r4, #4]
 800879e:	1ad2      	subs	r2, r2, r3
 80087a0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80087a2:	b10b      	cbz	r3, 80087a8 <__sflush_r+0x44>
 80087a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80087a6:	1ad2      	subs	r2, r2, r3
 80087a8:	2300      	movs	r3, #0
 80087aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80087ac:	6a21      	ldr	r1, [r4, #32]
 80087ae:	4628      	mov	r0, r5
 80087b0:	47b0      	blx	r6
 80087b2:	1c43      	adds	r3, r0, #1
 80087b4:	89a3      	ldrh	r3, [r4, #12]
 80087b6:	d106      	bne.n	80087c6 <__sflush_r+0x62>
 80087b8:	6829      	ldr	r1, [r5, #0]
 80087ba:	291d      	cmp	r1, #29
 80087bc:	d82b      	bhi.n	8008816 <__sflush_r+0xb2>
 80087be:	4a2a      	ldr	r2, [pc, #168]	@ (8008868 <__sflush_r+0x104>)
 80087c0:	40ca      	lsrs	r2, r1
 80087c2:	07d6      	lsls	r6, r2, #31
 80087c4:	d527      	bpl.n	8008816 <__sflush_r+0xb2>
 80087c6:	2200      	movs	r2, #0
 80087c8:	6062      	str	r2, [r4, #4]
 80087ca:	04d9      	lsls	r1, r3, #19
 80087cc:	6922      	ldr	r2, [r4, #16]
 80087ce:	6022      	str	r2, [r4, #0]
 80087d0:	d504      	bpl.n	80087dc <__sflush_r+0x78>
 80087d2:	1c42      	adds	r2, r0, #1
 80087d4:	d101      	bne.n	80087da <__sflush_r+0x76>
 80087d6:	682b      	ldr	r3, [r5, #0]
 80087d8:	b903      	cbnz	r3, 80087dc <__sflush_r+0x78>
 80087da:	6560      	str	r0, [r4, #84]	@ 0x54
 80087dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80087de:	602f      	str	r7, [r5, #0]
 80087e0:	b1b9      	cbz	r1, 8008812 <__sflush_r+0xae>
 80087e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80087e6:	4299      	cmp	r1, r3
 80087e8:	d002      	beq.n	80087f0 <__sflush_r+0x8c>
 80087ea:	4628      	mov	r0, r5
 80087ec:	f7ff fec2 	bl	8008574 <_free_r>
 80087f0:	2300      	movs	r3, #0
 80087f2:	6363      	str	r3, [r4, #52]	@ 0x34
 80087f4:	e00d      	b.n	8008812 <__sflush_r+0xae>
 80087f6:	2301      	movs	r3, #1
 80087f8:	4628      	mov	r0, r5
 80087fa:	47b0      	blx	r6
 80087fc:	4602      	mov	r2, r0
 80087fe:	1c50      	adds	r0, r2, #1
 8008800:	d1c9      	bne.n	8008796 <__sflush_r+0x32>
 8008802:	682b      	ldr	r3, [r5, #0]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d0c6      	beq.n	8008796 <__sflush_r+0x32>
 8008808:	2b1d      	cmp	r3, #29
 800880a:	d001      	beq.n	8008810 <__sflush_r+0xac>
 800880c:	2b16      	cmp	r3, #22
 800880e:	d11e      	bne.n	800884e <__sflush_r+0xea>
 8008810:	602f      	str	r7, [r5, #0]
 8008812:	2000      	movs	r0, #0
 8008814:	e022      	b.n	800885c <__sflush_r+0xf8>
 8008816:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800881a:	b21b      	sxth	r3, r3
 800881c:	e01b      	b.n	8008856 <__sflush_r+0xf2>
 800881e:	690f      	ldr	r7, [r1, #16]
 8008820:	2f00      	cmp	r7, #0
 8008822:	d0f6      	beq.n	8008812 <__sflush_r+0xae>
 8008824:	0793      	lsls	r3, r2, #30
 8008826:	680e      	ldr	r6, [r1, #0]
 8008828:	bf08      	it	eq
 800882a:	694b      	ldreq	r3, [r1, #20]
 800882c:	600f      	str	r7, [r1, #0]
 800882e:	bf18      	it	ne
 8008830:	2300      	movne	r3, #0
 8008832:	eba6 0807 	sub.w	r8, r6, r7
 8008836:	608b      	str	r3, [r1, #8]
 8008838:	f1b8 0f00 	cmp.w	r8, #0
 800883c:	dde9      	ble.n	8008812 <__sflush_r+0xae>
 800883e:	6a21      	ldr	r1, [r4, #32]
 8008840:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008842:	4643      	mov	r3, r8
 8008844:	463a      	mov	r2, r7
 8008846:	4628      	mov	r0, r5
 8008848:	47b0      	blx	r6
 800884a:	2800      	cmp	r0, #0
 800884c:	dc08      	bgt.n	8008860 <__sflush_r+0xfc>
 800884e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008852:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008856:	81a3      	strh	r3, [r4, #12]
 8008858:	f04f 30ff 	mov.w	r0, #4294967295
 800885c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008860:	4407      	add	r7, r0
 8008862:	eba8 0800 	sub.w	r8, r8, r0
 8008866:	e7e7      	b.n	8008838 <__sflush_r+0xd4>
 8008868:	20400001 	.word	0x20400001

0800886c <_fflush_r>:
 800886c:	b538      	push	{r3, r4, r5, lr}
 800886e:	690b      	ldr	r3, [r1, #16]
 8008870:	4605      	mov	r5, r0
 8008872:	460c      	mov	r4, r1
 8008874:	b913      	cbnz	r3, 800887c <_fflush_r+0x10>
 8008876:	2500      	movs	r5, #0
 8008878:	4628      	mov	r0, r5
 800887a:	bd38      	pop	{r3, r4, r5, pc}
 800887c:	b118      	cbz	r0, 8008886 <_fflush_r+0x1a>
 800887e:	6a03      	ldr	r3, [r0, #32]
 8008880:	b90b      	cbnz	r3, 8008886 <_fflush_r+0x1a>
 8008882:	f7ff fc8f 	bl	80081a4 <__sinit>
 8008886:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d0f3      	beq.n	8008876 <_fflush_r+0xa>
 800888e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008890:	07d0      	lsls	r0, r2, #31
 8008892:	d404      	bmi.n	800889e <_fflush_r+0x32>
 8008894:	0599      	lsls	r1, r3, #22
 8008896:	d402      	bmi.n	800889e <_fflush_r+0x32>
 8008898:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800889a:	f7ff fe68 	bl	800856e <__retarget_lock_acquire_recursive>
 800889e:	4628      	mov	r0, r5
 80088a0:	4621      	mov	r1, r4
 80088a2:	f7ff ff5f 	bl	8008764 <__sflush_r>
 80088a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80088a8:	07da      	lsls	r2, r3, #31
 80088aa:	4605      	mov	r5, r0
 80088ac:	d4e4      	bmi.n	8008878 <_fflush_r+0xc>
 80088ae:	89a3      	ldrh	r3, [r4, #12]
 80088b0:	059b      	lsls	r3, r3, #22
 80088b2:	d4e1      	bmi.n	8008878 <_fflush_r+0xc>
 80088b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80088b6:	f7ff fe5b 	bl	8008570 <__retarget_lock_release_recursive>
 80088ba:	e7dd      	b.n	8008878 <_fflush_r+0xc>

080088bc <__swhatbuf_r>:
 80088bc:	b570      	push	{r4, r5, r6, lr}
 80088be:	460c      	mov	r4, r1
 80088c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088c4:	2900      	cmp	r1, #0
 80088c6:	b096      	sub	sp, #88	@ 0x58
 80088c8:	4615      	mov	r5, r2
 80088ca:	461e      	mov	r6, r3
 80088cc:	da0d      	bge.n	80088ea <__swhatbuf_r+0x2e>
 80088ce:	89a3      	ldrh	r3, [r4, #12]
 80088d0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80088d4:	f04f 0100 	mov.w	r1, #0
 80088d8:	bf14      	ite	ne
 80088da:	2340      	movne	r3, #64	@ 0x40
 80088dc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80088e0:	2000      	movs	r0, #0
 80088e2:	6031      	str	r1, [r6, #0]
 80088e4:	602b      	str	r3, [r5, #0]
 80088e6:	b016      	add	sp, #88	@ 0x58
 80088e8:	bd70      	pop	{r4, r5, r6, pc}
 80088ea:	466a      	mov	r2, sp
 80088ec:	f000 f848 	bl	8008980 <_fstat_r>
 80088f0:	2800      	cmp	r0, #0
 80088f2:	dbec      	blt.n	80088ce <__swhatbuf_r+0x12>
 80088f4:	9901      	ldr	r1, [sp, #4]
 80088f6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80088fa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80088fe:	4259      	negs	r1, r3
 8008900:	4159      	adcs	r1, r3
 8008902:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008906:	e7eb      	b.n	80088e0 <__swhatbuf_r+0x24>

08008908 <__smakebuf_r>:
 8008908:	898b      	ldrh	r3, [r1, #12]
 800890a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800890c:	079d      	lsls	r5, r3, #30
 800890e:	4606      	mov	r6, r0
 8008910:	460c      	mov	r4, r1
 8008912:	d507      	bpl.n	8008924 <__smakebuf_r+0x1c>
 8008914:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008918:	6023      	str	r3, [r4, #0]
 800891a:	6123      	str	r3, [r4, #16]
 800891c:	2301      	movs	r3, #1
 800891e:	6163      	str	r3, [r4, #20]
 8008920:	b003      	add	sp, #12
 8008922:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008924:	ab01      	add	r3, sp, #4
 8008926:	466a      	mov	r2, sp
 8008928:	f7ff ffc8 	bl	80088bc <__swhatbuf_r>
 800892c:	9f00      	ldr	r7, [sp, #0]
 800892e:	4605      	mov	r5, r0
 8008930:	4639      	mov	r1, r7
 8008932:	4630      	mov	r0, r6
 8008934:	f7ff fe8a 	bl	800864c <_malloc_r>
 8008938:	b948      	cbnz	r0, 800894e <__smakebuf_r+0x46>
 800893a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800893e:	059a      	lsls	r2, r3, #22
 8008940:	d4ee      	bmi.n	8008920 <__smakebuf_r+0x18>
 8008942:	f023 0303 	bic.w	r3, r3, #3
 8008946:	f043 0302 	orr.w	r3, r3, #2
 800894a:	81a3      	strh	r3, [r4, #12]
 800894c:	e7e2      	b.n	8008914 <__smakebuf_r+0xc>
 800894e:	89a3      	ldrh	r3, [r4, #12]
 8008950:	6020      	str	r0, [r4, #0]
 8008952:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008956:	81a3      	strh	r3, [r4, #12]
 8008958:	9b01      	ldr	r3, [sp, #4]
 800895a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800895e:	b15b      	cbz	r3, 8008978 <__smakebuf_r+0x70>
 8008960:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008964:	4630      	mov	r0, r6
 8008966:	f000 f81d 	bl	80089a4 <_isatty_r>
 800896a:	b128      	cbz	r0, 8008978 <__smakebuf_r+0x70>
 800896c:	89a3      	ldrh	r3, [r4, #12]
 800896e:	f023 0303 	bic.w	r3, r3, #3
 8008972:	f043 0301 	orr.w	r3, r3, #1
 8008976:	81a3      	strh	r3, [r4, #12]
 8008978:	89a3      	ldrh	r3, [r4, #12]
 800897a:	431d      	orrs	r5, r3
 800897c:	81a5      	strh	r5, [r4, #12]
 800897e:	e7cf      	b.n	8008920 <__smakebuf_r+0x18>

08008980 <_fstat_r>:
 8008980:	b538      	push	{r3, r4, r5, lr}
 8008982:	4d07      	ldr	r5, [pc, #28]	@ (80089a0 <_fstat_r+0x20>)
 8008984:	2300      	movs	r3, #0
 8008986:	4604      	mov	r4, r0
 8008988:	4608      	mov	r0, r1
 800898a:	4611      	mov	r1, r2
 800898c:	602b      	str	r3, [r5, #0]
 800898e:	f7f8 f8ae 	bl	8000aee <_fstat>
 8008992:	1c43      	adds	r3, r0, #1
 8008994:	d102      	bne.n	800899c <_fstat_r+0x1c>
 8008996:	682b      	ldr	r3, [r5, #0]
 8008998:	b103      	cbz	r3, 800899c <_fstat_r+0x1c>
 800899a:	6023      	str	r3, [r4, #0]
 800899c:	bd38      	pop	{r3, r4, r5, pc}
 800899e:	bf00      	nop
 80089a0:	2400030c 	.word	0x2400030c

080089a4 <_isatty_r>:
 80089a4:	b538      	push	{r3, r4, r5, lr}
 80089a6:	4d06      	ldr	r5, [pc, #24]	@ (80089c0 <_isatty_r+0x1c>)
 80089a8:	2300      	movs	r3, #0
 80089aa:	4604      	mov	r4, r0
 80089ac:	4608      	mov	r0, r1
 80089ae:	602b      	str	r3, [r5, #0]
 80089b0:	f7f8 f8ad 	bl	8000b0e <_isatty>
 80089b4:	1c43      	adds	r3, r0, #1
 80089b6:	d102      	bne.n	80089be <_isatty_r+0x1a>
 80089b8:	682b      	ldr	r3, [r5, #0]
 80089ba:	b103      	cbz	r3, 80089be <_isatty_r+0x1a>
 80089bc:	6023      	str	r3, [r4, #0]
 80089be:	bd38      	pop	{r3, r4, r5, pc}
 80089c0:	2400030c 	.word	0x2400030c

080089c4 <_sbrk_r>:
 80089c4:	b538      	push	{r3, r4, r5, lr}
 80089c6:	4d06      	ldr	r5, [pc, #24]	@ (80089e0 <_sbrk_r+0x1c>)
 80089c8:	2300      	movs	r3, #0
 80089ca:	4604      	mov	r4, r0
 80089cc:	4608      	mov	r0, r1
 80089ce:	602b      	str	r3, [r5, #0]
 80089d0:	f7f8 f8b6 	bl	8000b40 <_sbrk>
 80089d4:	1c43      	adds	r3, r0, #1
 80089d6:	d102      	bne.n	80089de <_sbrk_r+0x1a>
 80089d8:	682b      	ldr	r3, [r5, #0]
 80089da:	b103      	cbz	r3, 80089de <_sbrk_r+0x1a>
 80089dc:	6023      	str	r3, [r4, #0]
 80089de:	bd38      	pop	{r3, r4, r5, pc}
 80089e0:	2400030c 	.word	0x2400030c

080089e4 <_init>:
 80089e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089e6:	bf00      	nop
 80089e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089ea:	bc08      	pop	{r3}
 80089ec:	469e      	mov	lr, r3
 80089ee:	4770      	bx	lr

080089f0 <_fini>:
 80089f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089f2:	bf00      	nop
 80089f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089f6:	bc08      	pop	{r3}
 80089f8:	469e      	mov	lr, r3
 80089fa:	4770      	bx	lr
