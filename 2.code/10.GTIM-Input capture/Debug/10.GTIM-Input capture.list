
10.GTIM-Input capture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008bfc  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08008e9c  08008e9c  00009e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008f2c  08008f2c  00009f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008f34  08008f34  00009f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08008f38  08008f38  00009f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  24000000  08008f3c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000308  2400006c  08008fa8  0000a06c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000374  08008fa8  0000a374  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000a06c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000186db  00000000  00000000  0000a09a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000033e5  00000000  00000000  00022775  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001278  00000000  00000000  00025b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000e45  00000000  00000000  00026dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a22c  00000000  00000000  00027c1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001ee62  00000000  00000000  00061e49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00168803  00000000  00000000  00080cab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001e94ae  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005384  00000000  00000000  001e94f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005a  00000000  00000000  001ee878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400006c 	.word	0x2400006c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008e84 	.word	0x08008e84

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000070 	.word	0x24000070
 80002dc:	08008e84 	.word	0x08008e84

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <MX_BEEP_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_BEEP_GPIO_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b086      	sub	sp, #24
 80006b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006c0:	4b12      	ldr	r3, [pc, #72]	@ (800070c <MX_BEEP_GPIO_Init+0x60>)
 80006c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006c6:	4a11      	ldr	r2, [pc, #68]	@ (800070c <MX_BEEP_GPIO_Init+0x60>)
 80006c8:	f043 0310 	orr.w	r3, r3, #16
 80006cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006d0:	4b0e      	ldr	r3, [pc, #56]	@ (800070c <MX_BEEP_GPIO_Init+0x60>)
 80006d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006d6:	f003 0310 	and.w	r3, r3, #16
 80006da:	603b      	str	r3, [r7, #0]
 80006dc:	683b      	ldr	r3, [r7, #0]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BEEP_GPIO_Port, BEEP_Pin, GPIO_PIN_RESET);
 80006de:	2200      	movs	r2, #0
 80006e0:	2110      	movs	r1, #16
 80006e2:	480b      	ldr	r0, [pc, #44]	@ (8000710 <MX_BEEP_GPIO_Init+0x64>)
 80006e4:	f001 ff94 	bl	8002610 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BEEP_Pin */
  GPIO_InitStruct.Pin = BEEP_Pin;
 80006e8:	2310      	movs	r3, #16
 80006ea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ec:	2301      	movs	r3, #1
 80006ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f0:	2300      	movs	r3, #0
 80006f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f4:	2300      	movs	r3, #0
 80006f6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006f8:	1d3b      	adds	r3, r7, #4
 80006fa:	4619      	mov	r1, r3
 80006fc:	4804      	ldr	r0, [pc, #16]	@ (8000710 <MX_BEEP_GPIO_Init+0x64>)
 80006fe:	f001 fdd7 	bl	80022b0 <HAL_GPIO_Init>
}
 8000702:	bf00      	nop
 8000704:	3718      	adds	r7, #24
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	58024400 	.word	0x58024400
 8000710:	58021000 	.word	0x58021000

08000714 <MX_KEY_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_KEY_GPIO_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b086      	sub	sp, #24
 8000718:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000728:	4b14      	ldr	r3, [pc, #80]	@ (800077c <MX_KEY_GPIO_Init+0x68>)
 800072a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800072e:	4a13      	ldr	r2, [pc, #76]	@ (800077c <MX_KEY_GPIO_Init+0x68>)
 8000730:	f043 0301 	orr.w	r3, r3, #1
 8000734:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000738:	4b10      	ldr	r3, [pc, #64]	@ (800077c <MX_KEY_GPIO_Init+0x68>)
 800073a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	603b      	str	r3, [r7, #0]
 8000744:	683b      	ldr	r3, [r7, #0]
  /*Configure GPIO pin : WK_UP_Pin */
  GPIO_InitStruct.Pin = WK_UP_Pin;
 8000746:	2301      	movs	r3, #1
 8000748:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800074a:	2300      	movs	r3, #0
 800074c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800074e:	2302      	movs	r3, #2
 8000750:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(WK_UP_GPIO_Port, &GPIO_InitStruct);
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	4619      	mov	r1, r3
 8000756:	480a      	ldr	r0, [pc, #40]	@ (8000780 <MX_KEY_GPIO_Init+0x6c>)
 8000758:	f001 fdaa 	bl	80022b0 <HAL_GPIO_Init>
  /*Configure GPIO pins : KEY0_Pin KEY1_Pin */
  GPIO_InitStruct.Pin = KEY0_Pin|KEY1_Pin;
 800075c:	f248 0302 	movw	r3, #32770	@ 0x8002
 8000760:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000762:	2300      	movs	r3, #0
 8000764:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000766:	2301      	movs	r3, #1
 8000768:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800076a:	1d3b      	adds	r3, r7, #4
 800076c:	4619      	mov	r1, r3
 800076e:	4804      	ldr	r0, [pc, #16]	@ (8000780 <MX_KEY_GPIO_Init+0x6c>)
 8000770:	f001 fd9e 	bl	80022b0 <HAL_GPIO_Init>
}
 8000774:	bf00      	nop
 8000776:	3718      	adds	r7, #24
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	58024400 	.word	0x58024400
 8000780:	58020000 	.word	0x58020000

08000784 <MX_LED_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_LED_GPIO_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b088      	sub	sp, #32
 8000788:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078a:	f107 030c 	add.w	r3, r7, #12
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
 8000798:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800079a:	4b24      	ldr	r3, [pc, #144]	@ (800082c <MX_LED_GPIO_Init+0xa8>)
 800079c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007a0:	4a22      	ldr	r2, [pc, #136]	@ (800082c <MX_LED_GPIO_Init+0xa8>)
 80007a2:	f043 0310 	orr.w	r3, r3, #16
 80007a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007aa:	4b20      	ldr	r3, [pc, #128]	@ (800082c <MX_LED_GPIO_Init+0xa8>)
 80007ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007b0:	f003 0310 	and.w	r3, r3, #16
 80007b4:	60bb      	str	r3, [r7, #8]
 80007b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b8:	4b1c      	ldr	r3, [pc, #112]	@ (800082c <MX_LED_GPIO_Init+0xa8>)
 80007ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007be:	4a1b      	ldr	r2, [pc, #108]	@ (800082c <MX_LED_GPIO_Init+0xa8>)
 80007c0:	f043 0302 	orr.w	r3, r3, #2
 80007c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007c8:	4b18      	ldr	r3, [pc, #96]	@ (800082c <MX_LED_GPIO_Init+0xa8>)
 80007ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007ce:	f003 0302 	and.w	r3, r3, #2
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_Pin|LED2_Pin, GPIO_PIN_SET);
 80007d6:	2201      	movs	r2, #1
 80007d8:	2160      	movs	r1, #96	@ 0x60
 80007da:	4815      	ldr	r0, [pc, #84]	@ (8000830 <MX_LED_GPIO_Init+0xac>)
 80007dc:	f001 ff18 	bl	8002610 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 80007e0:	2201      	movs	r2, #1
 80007e2:	2110      	movs	r1, #16
 80007e4:	4813      	ldr	r0, [pc, #76]	@ (8000834 <MX_LED_GPIO_Init+0xb0>)
 80007e6:	f001 ff13 	bl	8002610 <HAL_GPIO_WritePin>
  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 80007ea:	2360      	movs	r3, #96	@ 0x60
 80007ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ee:	2301      	movs	r3, #1
 80007f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f6:	2300      	movs	r3, #0
 80007f8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007fa:	f107 030c 	add.w	r3, r7, #12
 80007fe:	4619      	mov	r1, r3
 8000800:	480b      	ldr	r0, [pc, #44]	@ (8000830 <MX_LED_GPIO_Init+0xac>)
 8000802:	f001 fd55 	bl	80022b0 <HAL_GPIO_Init>
  /*Configure GPIO pin : LED0_Pin */
  GPIO_InitStruct.Pin = LED0_Pin;
 8000806:	2310      	movs	r3, #16
 8000808:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080a:	2301      	movs	r3, #1
 800080c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000812:	2300      	movs	r3, #0
 8000814:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8000816:	f107 030c 	add.w	r3, r7, #12
 800081a:	4619      	mov	r1, r3
 800081c:	4805      	ldr	r0, [pc, #20]	@ (8000834 <MX_LED_GPIO_Init+0xb0>)
 800081e:	f001 fd47 	bl	80022b0 <HAL_GPIO_Init>
}
 8000822:	bf00      	nop
 8000824:	3720      	adds	r7, #32
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	58024400 	.word	0x58024400
 8000830:	58021000 	.word	0x58021000
 8000834:	58020400 	.word	0x58020400

08000838 <bsp_init>:
#include "bsp_init.h"

void bsp_init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
	MX_LED_GPIO_Init();
 800083c:	f7ff ffa2 	bl	8000784 <MX_LED_GPIO_Init>
	MX_BEEP_GPIO_Init();
 8000840:	f7ff ff34 	bl	80006ac <MX_BEEP_GPIO_Init>
	MX_KEY_GPIO_Init();
 8000844:	f7ff ff66 	bl	8000714 <MX_KEY_GPIO_Init>
	// MX_EXTI_GPIO_Init();
	MX_USART1_UART_Init();
 8000848:	f000 fcac 	bl	80011a4 <MX_USART1_UART_Init>
	// MX_IWDG1_Init(); // 溢出时间约1s
	// MX_TIM6_Init(); // 溢出时间约500ms
}
 800084c:	bf00      	nop
 800084e:	bd80      	pop	{r7, pc}

08000850 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000856:	f000 f8ab 	bl	80009b0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800085a:	f000 fd9f 	bl	800139c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800085e:	f000 f82b 	bl	80008b8 <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  bsp_init();
 8000862:	f7ff ffe9 	bl	8000838 <bsp_init>
  printf("GTIM In Test\r\n");
 8000866:	4810      	ldr	r0, [pc, #64]	@ (80008a8 <main+0x58>)
 8000868:	f007 fcaa 	bl	80081c0 <puts>
  MX_TIM5_Init();
 800086c:	f000 fb8c 	bl	8000f88 <MX_TIM5_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(cap_sta & 0x80) // 捕获完成
 8000870:	4b0e      	ldr	r3, [pc, #56]	@ (80008ac <main+0x5c>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	b2db      	uxtb	r3, r3
 8000876:	b25b      	sxtb	r3, r3
 8000878:	2b00      	cmp	r3, #0
 800087a:	daf9      	bge.n	8000870 <main+0x20>
	  {
	      // 计算高电平时间（微秒）
	      // 定时器时钟 = 480MHz / (479 + 1) = 1MHz，所以每个计数代表1微秒
	      uint32_t overflow_count = cap_sta & 0x3F;
 800087c:	4b0b      	ldr	r3, [pc, #44]	@ (80008ac <main+0x5c>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	b2db      	uxtb	r3, r3
 8000882:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000886:	607b      	str	r3, [r7, #4]
	      uint32_t total_time = overflow_count * 0xFFFF + cap_val;
 8000888:	687a      	ldr	r2, [r7, #4]
 800088a:	4613      	mov	r3, r2
 800088c:	041b      	lsls	r3, r3, #16
 800088e:	1a9a      	subs	r2, r3, r2
 8000890:	4b07      	ldr	r3, [pc, #28]	@ (80008b0 <main+0x60>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4413      	add	r3, r2
 8000896:	603b      	str	r3, [r7, #0]
	      printf("High Time:%lu us\r\n", total_time);
 8000898:	6839      	ldr	r1, [r7, #0]
 800089a:	4806      	ldr	r0, [pc, #24]	@ (80008b4 <main+0x64>)
 800089c:	f007 fc28 	bl	80080f0 <iprintf>
	      cap_sta = 0; // 重置捕获状态
 80008a0:	4b02      	ldr	r3, [pc, #8]	@ (80008ac <main+0x5c>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	701a      	strb	r2, [r3, #0]
	  if(cap_sta & 0x80) // 捕获完成
 80008a6:	e7e3      	b.n	8000870 <main+0x20>
 80008a8:	08008e9c 	.word	0x08008e9c
 80008ac:	24000088 	.word	0x24000088
 80008b0:	2400008c 	.word	0x2400008c
 80008b4:	08008eac 	.word	0x08008eac

080008b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b09c      	sub	sp, #112	@ 0x70
 80008bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008c2:	224c      	movs	r2, #76	@ 0x4c
 80008c4:	2100      	movs	r1, #0
 80008c6:	4618      	mov	r0, r3
 80008c8:	f007 fd5a 	bl	8008380 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008cc:	1d3b      	adds	r3, r7, #4
 80008ce:	2220      	movs	r2, #32
 80008d0:	2100      	movs	r1, #0
 80008d2:	4618      	mov	r0, r3
 80008d4:	f007 fd54 	bl	8008380 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80008d8:	2002      	movs	r0, #2
 80008da:	f001 fed7 	bl	800268c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80008de:	2300      	movs	r3, #0
 80008e0:	603b      	str	r3, [r7, #0]
 80008e2:	4b31      	ldr	r3, [pc, #196]	@ (80009a8 <SystemClock_Config+0xf0>)
 80008e4:	699b      	ldr	r3, [r3, #24]
 80008e6:	4a30      	ldr	r2, [pc, #192]	@ (80009a8 <SystemClock_Config+0xf0>)
 80008e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008ec:	6193      	str	r3, [r2, #24]
 80008ee:	4b2e      	ldr	r3, [pc, #184]	@ (80009a8 <SystemClock_Config+0xf0>)
 80008f0:	699b      	ldr	r3, [r3, #24]
 80008f2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008f6:	603b      	str	r3, [r7, #0]
 80008f8:	4b2c      	ldr	r3, [pc, #176]	@ (80009ac <SystemClock_Config+0xf4>)
 80008fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008fc:	4a2b      	ldr	r2, [pc, #172]	@ (80009ac <SystemClock_Config+0xf4>)
 80008fe:	f043 0301 	orr.w	r3, r3, #1
 8000902:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000904:	4b29      	ldr	r3, [pc, #164]	@ (80009ac <SystemClock_Config+0xf4>)
 8000906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000908:	f003 0301 	and.w	r3, r3, #1
 800090c:	603b      	str	r3, [r7, #0]
 800090e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000910:	bf00      	nop
 8000912:	4b25      	ldr	r3, [pc, #148]	@ (80009a8 <SystemClock_Config+0xf0>)
 8000914:	699b      	ldr	r3, [r3, #24]
 8000916:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800091a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800091e:	d1f8      	bne.n	8000912 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000920:	2309      	movs	r3, #9
 8000922:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000924:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000928:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800092a:	2301      	movs	r3, #1
 800092c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800092e:	2302      	movs	r3, #2
 8000930:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000932:	2302      	movs	r3, #2
 8000934:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000936:	2302      	movs	r3, #2
 8000938:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 800093a:	23f0      	movs	r3, #240	@ 0xf0
 800093c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800093e:	2302      	movs	r3, #2
 8000940:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000942:	2302      	movs	r3, #2
 8000944:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000946:	2302      	movs	r3, #2
 8000948:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800094a:	2308      	movs	r3, #8
 800094c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800094e:	2300      	movs	r3, #0
 8000950:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000952:	2300      	movs	r3, #0
 8000954:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000956:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800095a:	4618      	mov	r0, r3
 800095c:	f001 fed0 	bl	8002700 <HAL_RCC_OscConfig>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000966:	f000 f84f 	bl	8000a08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800096a:	233f      	movs	r3, #63	@ 0x3f
 800096c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800096e:	2303      	movs	r3, #3
 8000970:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000972:	2300      	movs	r3, #0
 8000974:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000976:	2308      	movs	r3, #8
 8000978:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800097a:	2340      	movs	r3, #64	@ 0x40
 800097c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800097e:	2340      	movs	r3, #64	@ 0x40
 8000980:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000982:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000986:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000988:	2340      	movs	r3, #64	@ 0x40
 800098a:	623b      	str	r3, [r7, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800098c:	1d3b      	adds	r3, r7, #4
 800098e:	2104      	movs	r1, #4
 8000990:	4618      	mov	r0, r3
 8000992:	f002 fb0f 	bl	8002fb4 <HAL_RCC_ClockConfig>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 800099c:	f000 f834 	bl	8000a08 <Error_Handler>
  }
}
 80009a0:	bf00      	nop
 80009a2:	3770      	adds	r7, #112	@ 0x70
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	58024800 	.word	0x58024800
 80009ac:	58000400 	.word	0x58000400

080009b0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80009b6:	463b      	mov	r3, r7
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
 80009c0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80009c2:	f000 fe99 	bl	80016f8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80009c6:	2301      	movs	r3, #1
 80009c8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80009ca:	2300      	movs	r3, #0
 80009cc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80009ce:	2300      	movs	r3, #0
 80009d0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80009d2:	231f      	movs	r3, #31
 80009d4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80009d6:	2387      	movs	r3, #135	@ 0x87
 80009d8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80009da:	2300      	movs	r3, #0
 80009dc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80009de:	2300      	movs	r3, #0
 80009e0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80009e2:	2301      	movs	r3, #1
 80009e4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80009e6:	2301      	movs	r3, #1
 80009e8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80009ea:	2300      	movs	r3, #0
 80009ec:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80009ee:	2300      	movs	r3, #0
 80009f0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80009f2:	463b      	mov	r3, r7
 80009f4:	4618      	mov	r0, r3
 80009f6:	f000 feb7 	bl	8001768 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80009fa:	2004      	movs	r0, #4
 80009fc:	f000 fe94 	bl	8001728 <HAL_MPU_Enable>

}
 8000a00:	bf00      	nop
 8000a02:	3710      	adds	r7, #16
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a0c:	b672      	cpsid	i
}
 8000a0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a10:	bf00      	nop
 8000a12:	e7fd      	b.n	8000a10 <Error_Handler+0x8>

08000a14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a44 <HAL_MspInit+0x30>)
 8000a1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a20:	4a08      	ldr	r2, [pc, #32]	@ (8000a44 <HAL_MspInit+0x30>)
 8000a22:	f043 0302 	orr.w	r3, r3, #2
 8000a26:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000a2a:	4b06      	ldr	r3, [pc, #24]	@ (8000a44 <HAL_MspInit+0x30>)
 8000a2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a30:	f003 0302 	and.w	r3, r3, #2
 8000a34:	607b      	str	r3, [r7, #4]
 8000a36:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a38:	bf00      	nop
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	58024400 	.word	0x58024400

08000a48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a4c:	bf00      	nop
 8000a4e:	e7fd      	b.n	8000a4c <NMI_Handler+0x4>

08000a50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a54:	bf00      	nop
 8000a56:	e7fd      	b.n	8000a54 <HardFault_Handler+0x4>

08000a58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a5c:	bf00      	nop
 8000a5e:	e7fd      	b.n	8000a5c <MemManage_Handler+0x4>

08000a60 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a64:	bf00      	nop
 8000a66:	e7fd      	b.n	8000a64 <BusFault_Handler+0x4>

08000a68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a6c:	bf00      	nop
 8000a6e:	e7fd      	b.n	8000a6c <UsageFault_Handler+0x4>

08000a70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr

08000a7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a82:	bf00      	nop
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr

08000a9a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a9e:	f000 fcef 	bl	8001480 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
	...

08000aa8 <WWDG_IRQHandler>:

/**
  * @brief This function handles Window watchdog interrupt.
  */
void WWDG_IRQHandler(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN WWDG_IRQn 0 */

  /* USER CODE END WWDG_IRQn 0 */
  HAL_WWDG_IRQHandler(&hwwdg1);
 8000aac:	4802      	ldr	r0, [pc, #8]	@ (8000ab8 <WWDG_IRQHandler+0x10>)
 8000aae:	f007 fa33 	bl	8007f18 <HAL_WWDG_IRQHandler>
  /* USER CODE BEGIN WWDG_IRQn 1 */
  /* USER CODE END WWDG_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	24000210 	.word	0x24000210

08000abc <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI_KEY1_Pin);
 8000ac0:	2002      	movs	r0, #2
 8000ac2:	f001 fdbe 	bl	8002642 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
	...

08000acc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000ad0:	4802      	ldr	r0, [pc, #8]	@ (8000adc <TIM3_IRQHandler+0x10>)
 8000ad2:	f004 fe2f 	bl	8005734 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  /* USER CODE END TIM3_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	24000098 	.word	0x24000098

08000ae0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ae4:	4802      	ldr	r0, [pc, #8]	@ (8000af0 <USART1_IRQHandler+0x10>)
 8000ae6:	f005 fd3b 	bl	8006560 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	2400017c 	.word	0x2400017c

08000af4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000af8:	4802      	ldr	r0, [pc, #8]	@ (8000b04 <TIM5_IRQHandler+0x10>)
 8000afa:	f004 fe1b 	bl	8005734 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	240000e4 	.word	0x240000e4

08000b08 <HAL_TIM_IC_CaptureCallback>:

// 输入捕获中断回调
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
	static uint32_t last_capture_time = 0;
	uint32_t current_time = HAL_GetTick();
 8000b10:	f000 fcca 	bl	80014a8 <HAL_GetTick>
 8000b14:	60f8      	str	r0, [r7, #12]
	// 简单的去抖动：忽略在短时间内连续发生的捕获事件
	if (current_time - last_capture_time < 50) // 50ms去抖动时间
 8000b16:	4b42      	ldr	r3, [pc, #264]	@ (8000c20 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	68fa      	ldr	r2, [r7, #12]
 8000b1c:	1ad3      	subs	r3, r2, r3
 8000b1e:	2b31      	cmp	r3, #49	@ 0x31
 8000b20:	d979      	bls.n	8000c16 <HAL_TIM_IC_CaptureCallback+0x10e>
	{
		return;
	}
	last_capture_time = current_time;
 8000b22:	4a3f      	ldr	r2, [pc, #252]	@ (8000c20 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	6013      	str	r3, [r2, #0]
    if(htim->Instance == TIM5 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a3d      	ldr	r2, [pc, #244]	@ (8000c24 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d172      	bne.n	8000c18 <HAL_TIM_IC_CaptureCallback+0x110>
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	7f1b      	ldrb	r3, [r3, #28]
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d16e      	bne.n	8000c18 <HAL_TIM_IC_CaptureCallback+0x110>
    {
        if((cap_sta & 0x80) == 0)
 8000b3a:	4b3b      	ldr	r3, [pc, #236]	@ (8000c28 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	b25b      	sxtb	r3, r3
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	db68      	blt.n	8000c18 <HAL_TIM_IC_CaptureCallback+0x110>
        {
            if(cap_sta & 0x40) // 已经捕获到上升沿
 8000b46:	4b38      	ldr	r3, [pc, #224]	@ (8000c28 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d01d      	beq.n	8000b90 <HAL_TIM_IC_CaptureCallback+0x88>
            {
                cap_sta |= 0x80; // 标记捕获完成
 8000b54:	4b34      	ldr	r3, [pc, #208]	@ (8000c28 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000b5e:	b2da      	uxtb	r2, r3
 8000b60:	4b31      	ldr	r3, [pc, #196]	@ (8000c28 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000b62:	701a      	strb	r2, [r3, #0]
                cap_val = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000b64:	2100      	movs	r1, #0
 8000b66:	6878      	ldr	r0, [r7, #4]
 8000b68:	f005 f880 	bl	8005c6c <HAL_TIM_ReadCapturedValue>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	4a2f      	ldr	r2, [pc, #188]	@ (8000c2c <HAL_TIM_IC_CaptureCallback+0x124>)
 8000b70:	6013      	str	r3, [r2, #0]
                // 重置为上升沿捕获，准备下一次测量
                TIM_RESET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	6a1a      	ldr	r2, [r3, #32]
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f022 020a 	bic.w	r2, r2, #10
 8000b80:	621a      	str	r2, [r3, #32]
                TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	6a12      	ldr	r2, [r2, #32]
 8000b8c:	621a      	str	r2, [r3, #32]
 8000b8e:	e043      	b.n	8000c18 <HAL_TIM_IC_CaptureCallback+0x110>
            }
            else // 首次捕获到上升沿
            {
                cap_sta = 0;
 8000b90:	4b25      	ldr	r3, [pc, #148]	@ (8000c28 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	701a      	strb	r2, [r3, #0]
                cap_val = 0;
 8000b96:	4b25      	ldr	r3, [pc, #148]	@ (8000c2c <HAL_TIM_IC_CaptureCallback+0x124>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
                cap_sta |= 0x40; // 标记已捕获到上升沿
 8000b9c:	4b22      	ldr	r3, [pc, #136]	@ (8000c28 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ba6:	b2da      	uxtb	r2, r3
 8000ba8:	4b1f      	ldr	r3, [pc, #124]	@ (8000c28 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000baa:	701a      	strb	r2, [r3, #0]
                __HAL_TIM_DISABLE(htim);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	6a1a      	ldr	r2, [r3, #32]
 8000bb2:	f241 1311 	movw	r3, #4369	@ 0x1111
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d10f      	bne.n	8000bdc <HAL_TIM_IC_CaptureCallback+0xd4>
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	6a1a      	ldr	r2, [r3, #32]
 8000bc2:	f240 4344 	movw	r3, #1092	@ 0x444
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d107      	bne.n	8000bdc <HAL_TIM_IC_CaptureCallback+0xd4>
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f022 0201 	bic.w	r2, r2, #1
 8000bda:	601a      	str	r2, [r3, #0]
                __HAL_TIM_SET_COUNTER(htim, 0);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2200      	movs	r2, #0
 8000be2:	625a      	str	r2, [r3, #36]	@ 0x24
                // 设置为下降沿捕获
                TIM_RESET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	6a1a      	ldr	r2, [r3, #32]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f022 020a 	bic.w	r2, r2, #10
 8000bf2:	621a      	str	r2, [r3, #32]
                TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	6a1a      	ldr	r2, [r3, #32]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f042 0202 	orr.w	r2, r2, #2
 8000c02:	621a      	str	r2, [r3, #32]
                __HAL_TIM_ENABLE(htim);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f042 0201 	orr.w	r2, r2, #1
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	e000      	b.n	8000c18 <HAL_TIM_IC_CaptureCallback+0x110>
		return;
 8000c16:	bf00      	nop
            }
        }
    }
}
 8000c18:	3710      	adds	r7, #16
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	24000090 	.word	0x24000090
 8000c24:	40000c00 	.word	0x40000c00
 8000c28:	24000088 	.word	0x24000088
 8000c2c:	2400008c 	.word	0x2400008c

08000c30 <HAL_TIM_PeriodElapsedCallback>:

// 更新中断回调
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM5)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a1c      	ldr	r2, [pc, #112]	@ (8000cb0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d130      	bne.n	8000ca4 <HAL_TIM_PeriodElapsedCallback+0x74>
    {
        if((cap_sta & 0x80) == 0) // 捕获未完成
 8000c42:	4b1c      	ldr	r3, [pc, #112]	@ (8000cb4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	b25b      	sxtb	r3, r3
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	db2a      	blt.n	8000ca4 <HAL_TIM_PeriodElapsedCallback+0x74>
        {
            if(cap_sta & 0x40) // 已经捕获到上升沿
 8000c4e:	4b19      	ldr	r3, [pc, #100]	@ (8000cb4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d023      	beq.n	8000ca4 <HAL_TIM_PeriodElapsedCallback+0x74>
            {
                if((cap_sta & 0x3F) == 0x3F) // 溢出次数达到最大值
 8000c5c:	4b15      	ldr	r3, [pc, #84]	@ (8000cb4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000c66:	2b3f      	cmp	r3, #63	@ 0x3f
 8000c68:	d115      	bne.n	8000c96 <HAL_TIM_PeriodElapsedCallback+0x66>
                {
                    // 重置为上升沿捕获
                    TIM_RESET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	6a1a      	ldr	r2, [r3, #32]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f022 020a 	bic.w	r2, r2, #10
 8000c78:	621a      	str	r2, [r3, #32]
                    TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	6a12      	ldr	r2, [r2, #32]
 8000c84:	621a      	str	r2, [r3, #32]
                    cap_sta = 0;
 8000c86:	4b0b      	ldr	r3, [pc, #44]	@ (8000cb4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	701a      	strb	r2, [r3, #0]
                    cap_val = 0xFFFF;
 8000c8c:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000c8e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c92:	601a      	str	r2, [r3, #0]
                    cap_sta++; // 增加溢出计数
                }
            }
        }
    }
}
 8000c94:	e006      	b.n	8000ca4 <HAL_TIM_PeriodElapsedCallback+0x74>
                    cap_sta++; // 增加溢出计数
 8000c96:	4b07      	ldr	r3, [pc, #28]	@ (8000cb4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	b2da      	uxtb	r2, r3
 8000ca0:	4b04      	ldr	r3, [pc, #16]	@ (8000cb4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000ca2:	701a      	strb	r2, [r3, #0]
}
 8000ca4:	bf00      	nop
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	40000c00 	.word	0x40000c00
 8000cb4:	24000088 	.word	0x24000088
 8000cb8:	2400008c 	.word	0x2400008c

08000cbc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000cc0:	4802      	ldr	r0, [pc, #8]	@ (8000ccc <TIM6_DAC_IRQHandler+0x10>)
 8000cc2:	f004 fd37 	bl	8005734 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	24000130 	.word	0x24000130

08000cd0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	60f8      	str	r0, [r7, #12]
 8000cd8:	60b9      	str	r1, [r7, #8]
 8000cda:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]
 8000ce0:	e00a      	b.n	8000cf8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ce2:	f3af 8000 	nop.w
 8000ce6:	4601      	mov	r1, r0
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	1c5a      	adds	r2, r3, #1
 8000cec:	60ba      	str	r2, [r7, #8]
 8000cee:	b2ca      	uxtb	r2, r1
 8000cf0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	617b      	str	r3, [r7, #20]
 8000cf8:	697a      	ldr	r2, [r7, #20]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	dbf0      	blt.n	8000ce2 <_read+0x12>
  }

  return len;
 8000d00:	687b      	ldr	r3, [r7, #4]
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3718      	adds	r7, #24
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b086      	sub	sp, #24
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	60f8      	str	r0, [r7, #12]
 8000d12:	60b9      	str	r1, [r7, #8]
 8000d14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d16:	2300      	movs	r3, #0
 8000d18:	617b      	str	r3, [r7, #20]
 8000d1a:	e009      	b.n	8000d30 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	1c5a      	adds	r2, r3, #1
 8000d20:	60ba      	str	r2, [r7, #8]
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	4618      	mov	r0, r3
 8000d26:	f000 fafb 	bl	8001320 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	617b      	str	r3, [r7, #20]
 8000d30:	697a      	ldr	r2, [r7, #20]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	dbf1      	blt.n	8000d1c <_write+0x12>
  }
  return len;
 8000d38:	687b      	ldr	r3, [r7, #4]
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3718      	adds	r7, #24
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <_close>:

int _close(int file)
{
 8000d42:	b480      	push	{r7}
 8000d44:	b083      	sub	sp, #12
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr

08000d5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	b083      	sub	sp, #12
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
 8000d62:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d6a:	605a      	str	r2, [r3, #4]
  return 0;
 8000d6c:	2300      	movs	r3, #0
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	370c      	adds	r7, #12
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr

08000d7a <_isatty>:

int _isatty(int file)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	b083      	sub	sp, #12
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d82:	2301      	movs	r3, #1
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	60b9      	str	r1, [r7, #8]
 8000d9a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d9c:	2300      	movs	r3, #0
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3714      	adds	r7, #20
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
	...

08000dac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000db4:	4a14      	ldr	r2, [pc, #80]	@ (8000e08 <_sbrk+0x5c>)
 8000db6:	4b15      	ldr	r3, [pc, #84]	@ (8000e0c <_sbrk+0x60>)
 8000db8:	1ad3      	subs	r3, r2, r3
 8000dba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dc0:	4b13      	ldr	r3, [pc, #76]	@ (8000e10 <_sbrk+0x64>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d102      	bne.n	8000dce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dc8:	4b11      	ldr	r3, [pc, #68]	@ (8000e10 <_sbrk+0x64>)
 8000dca:	4a12      	ldr	r2, [pc, #72]	@ (8000e14 <_sbrk+0x68>)
 8000dcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dce:	4b10      	ldr	r3, [pc, #64]	@ (8000e10 <_sbrk+0x64>)
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d207      	bcs.n	8000dec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ddc:	f007 fb1e 	bl	800841c <__errno>
 8000de0:	4603      	mov	r3, r0
 8000de2:	220c      	movs	r2, #12
 8000de4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000de6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dea:	e009      	b.n	8000e00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dec:	4b08      	ldr	r3, [pc, #32]	@ (8000e10 <_sbrk+0x64>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000df2:	4b07      	ldr	r3, [pc, #28]	@ (8000e10 <_sbrk+0x64>)
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4413      	add	r3, r2
 8000dfa:	4a05      	ldr	r2, [pc, #20]	@ (8000e10 <_sbrk+0x64>)
 8000dfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dfe:	68fb      	ldr	r3, [r7, #12]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3718      	adds	r7, #24
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	24080000 	.word	0x24080000
 8000e0c:	00000400 	.word	0x00000400
 8000e10:	24000094 	.word	0x24000094
 8000e14:	24000378 	.word	0x24000378

08000e18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e1c:	4b43      	ldr	r3, [pc, #268]	@ (8000f2c <SystemInit+0x114>)
 8000e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e22:	4a42      	ldr	r2, [pc, #264]	@ (8000f2c <SystemInit+0x114>)
 8000e24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e2c:	4b40      	ldr	r3, [pc, #256]	@ (8000f30 <SystemInit+0x118>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f003 030f 	and.w	r3, r3, #15
 8000e34:	2b06      	cmp	r3, #6
 8000e36:	d807      	bhi.n	8000e48 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e38:	4b3d      	ldr	r3, [pc, #244]	@ (8000f30 <SystemInit+0x118>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f023 030f 	bic.w	r3, r3, #15
 8000e40:	4a3b      	ldr	r2, [pc, #236]	@ (8000f30 <SystemInit+0x118>)
 8000e42:	f043 0307 	orr.w	r3, r3, #7
 8000e46:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000e48:	4b3a      	ldr	r3, [pc, #232]	@ (8000f34 <SystemInit+0x11c>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a39      	ldr	r2, [pc, #228]	@ (8000f34 <SystemInit+0x11c>)
 8000e4e:	f043 0301 	orr.w	r3, r3, #1
 8000e52:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e54:	4b37      	ldr	r3, [pc, #220]	@ (8000f34 <SystemInit+0x11c>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000e5a:	4b36      	ldr	r3, [pc, #216]	@ (8000f34 <SystemInit+0x11c>)
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	4935      	ldr	r1, [pc, #212]	@ (8000f34 <SystemInit+0x11c>)
 8000e60:	4b35      	ldr	r3, [pc, #212]	@ (8000f38 <SystemInit+0x120>)
 8000e62:	4013      	ands	r3, r2
 8000e64:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e66:	4b32      	ldr	r3, [pc, #200]	@ (8000f30 <SystemInit+0x118>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f003 0308 	and.w	r3, r3, #8
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d007      	beq.n	8000e82 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e72:	4b2f      	ldr	r3, [pc, #188]	@ (8000f30 <SystemInit+0x118>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f023 030f 	bic.w	r3, r3, #15
 8000e7a:	4a2d      	ldr	r2, [pc, #180]	@ (8000f30 <SystemInit+0x118>)
 8000e7c:	f043 0307 	orr.w	r3, r3, #7
 8000e80:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000e82:	4b2c      	ldr	r3, [pc, #176]	@ (8000f34 <SystemInit+0x11c>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000e88:	4b2a      	ldr	r3, [pc, #168]	@ (8000f34 <SystemInit+0x11c>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000e8e:	4b29      	ldr	r3, [pc, #164]	@ (8000f34 <SystemInit+0x11c>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000e94:	4b27      	ldr	r3, [pc, #156]	@ (8000f34 <SystemInit+0x11c>)
 8000e96:	4a29      	ldr	r2, [pc, #164]	@ (8000f3c <SystemInit+0x124>)
 8000e98:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000e9a:	4b26      	ldr	r3, [pc, #152]	@ (8000f34 <SystemInit+0x11c>)
 8000e9c:	4a28      	ldr	r2, [pc, #160]	@ (8000f40 <SystemInit+0x128>)
 8000e9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000ea0:	4b24      	ldr	r3, [pc, #144]	@ (8000f34 <SystemInit+0x11c>)
 8000ea2:	4a28      	ldr	r2, [pc, #160]	@ (8000f44 <SystemInit+0x12c>)
 8000ea4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000ea6:	4b23      	ldr	r3, [pc, #140]	@ (8000f34 <SystemInit+0x11c>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000eac:	4b21      	ldr	r3, [pc, #132]	@ (8000f34 <SystemInit+0x11c>)
 8000eae:	4a25      	ldr	r2, [pc, #148]	@ (8000f44 <SystemInit+0x12c>)
 8000eb0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000eb2:	4b20      	ldr	r3, [pc, #128]	@ (8000f34 <SystemInit+0x11c>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000eb8:	4b1e      	ldr	r3, [pc, #120]	@ (8000f34 <SystemInit+0x11c>)
 8000eba:	4a22      	ldr	r2, [pc, #136]	@ (8000f44 <SystemInit+0x12c>)
 8000ebc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000ebe:	4b1d      	ldr	r3, [pc, #116]	@ (8000f34 <SystemInit+0x11c>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ec4:	4b1b      	ldr	r3, [pc, #108]	@ (8000f34 <SystemInit+0x11c>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a1a      	ldr	r2, [pc, #104]	@ (8000f34 <SystemInit+0x11c>)
 8000eca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ece:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000ed0:	4b18      	ldr	r3, [pc, #96]	@ (8000f34 <SystemInit+0x11c>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000ed6:	4b1c      	ldr	r3, [pc, #112]	@ (8000f48 <SystemInit+0x130>)
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	4b1c      	ldr	r3, [pc, #112]	@ (8000f4c <SystemInit+0x134>)
 8000edc:	4013      	ands	r3, r2
 8000ede:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000ee2:	d202      	bcs.n	8000eea <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000ee4:	4b1a      	ldr	r3, [pc, #104]	@ (8000f50 <SystemInit+0x138>)
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000eea:	4b12      	ldr	r3, [pc, #72]	@ (8000f34 <SystemInit+0x11c>)
 8000eec:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000ef0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d113      	bne.n	8000f20 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000ef8:	4b0e      	ldr	r3, [pc, #56]	@ (8000f34 <SystemInit+0x11c>)
 8000efa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000efe:	4a0d      	ldr	r2, [pc, #52]	@ (8000f34 <SystemInit+0x11c>)
 8000f00:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f04:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000f08:	4b12      	ldr	r3, [pc, #72]	@ (8000f54 <SystemInit+0x13c>)
 8000f0a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000f0e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000f10:	4b08      	ldr	r3, [pc, #32]	@ (8000f34 <SystemInit+0x11c>)
 8000f12:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000f16:	4a07      	ldr	r2, [pc, #28]	@ (8000f34 <SystemInit+0x11c>)
 8000f18:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000f1c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	e000ed00 	.word	0xe000ed00
 8000f30:	52002000 	.word	0x52002000
 8000f34:	58024400 	.word	0x58024400
 8000f38:	eaf6ed7f 	.word	0xeaf6ed7f
 8000f3c:	02020200 	.word	0x02020200
 8000f40:	01ff0000 	.word	0x01ff0000
 8000f44:	01010280 	.word	0x01010280
 8000f48:	5c001000 	.word	0x5c001000
 8000f4c:	ffff0000 	.word	0xffff0000
 8000f50:	51008108 	.word	0x51008108
 8000f54:	52004000 	.word	0x52004000

08000f58 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000f5c:	4b09      	ldr	r3, [pc, #36]	@ (8000f84 <ExitRun0Mode+0x2c>)
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	4a08      	ldr	r2, [pc, #32]	@ (8000f84 <ExitRun0Mode+0x2c>)
 8000f62:	f043 0302 	orr.w	r3, r3, #2
 8000f66:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000f68:	bf00      	nop
 8000f6a:	4b06      	ldr	r3, [pc, #24]	@ (8000f84 <ExitRun0Mode+0x2c>)
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d0f9      	beq.n	8000f6a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000f76:	bf00      	nop
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	58024800 	.word	0x58024800

08000f88 <MX_TIM5_Init>:
  HAL_TIM_MspPostInit(&htim3);

}
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b08c      	sub	sp, #48	@ 0x30
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f8e:	f107 0320 	add.w	r3, r7, #32
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	605a      	str	r2, [r3, #4]
 8000f98:	609a      	str	r2, [r3, #8]
 8000f9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f9c:	f107 0314 	add.w	r3, r7, #20
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000fa8:	1d3b      	adds	r3, r7, #4
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
 8000fb2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000fb4:	4b31      	ldr	r3, [pc, #196]	@ (800107c <MX_TIM5_Init+0xf4>)
 8000fb6:	4a32      	ldr	r2, [pc, #200]	@ (8001080 <MX_TIM5_Init+0xf8>)
 8000fb8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 479;
 8000fba:	4b30      	ldr	r3, [pc, #192]	@ (800107c <MX_TIM5_Init+0xf4>)
 8000fbc:	f240 12df 	movw	r2, #479	@ 0x1df
 8000fc0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fc2:	4b2e      	ldr	r3, [pc, #184]	@ (800107c <MX_TIM5_Init+0xf4>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xFFFFFFFF;
 8000fc8:	4b2c      	ldr	r3, [pc, #176]	@ (800107c <MX_TIM5_Init+0xf4>)
 8000fca:	f04f 32ff 	mov.w	r2, #4294967295
 8000fce:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fd0:	4b2a      	ldr	r3, [pc, #168]	@ (800107c <MX_TIM5_Init+0xf4>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fd6:	4b29      	ldr	r3, [pc, #164]	@ (800107c <MX_TIM5_Init+0xf4>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000fdc:	4827      	ldr	r0, [pc, #156]	@ (800107c <MX_TIM5_Init+0xf4>)
 8000fde:	f004 f9a1 	bl	8005324 <HAL_TIM_Base_Init>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_TIM5_Init+0x64>
  {
    Error_Handler();
 8000fe8:	f7ff fd0e 	bl	8000a08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ff0:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000ff2:	f107 0320 	add.w	r3, r7, #32
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4820      	ldr	r0, [pc, #128]	@ (800107c <MX_TIM5_Init+0xf4>)
 8000ffa:	f004 fd3f 	bl	8005a7c <HAL_TIM_ConfigClockSource>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_TIM5_Init+0x80>
  {
    Error_Handler();
 8001004:	f7ff fd00 	bl	8000a08 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8001008:	481c      	ldr	r0, [pc, #112]	@ (800107c <MX_TIM5_Init+0xf4>)
 800100a:	f004 f9e2 	bl	80053d2 <HAL_TIM_IC_Init>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8001014:	f7ff fcf8 	bl	8000a08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800101c:	2300      	movs	r3, #0
 800101e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001020:	f107 0314 	add.w	r3, r7, #20
 8001024:	4619      	mov	r1, r3
 8001026:	4815      	ldr	r0, [pc, #84]	@ (800107c <MX_TIM5_Init+0xf4>)
 8001028:	f005 f910 	bl	800624c <HAL_TIMEx_MasterConfigSynchronization>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_TIM5_Init+0xae>
  {
    Error_Handler();
 8001032:	f7ff fce9 	bl	8000a08 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001036:	2300      	movs	r3, #0
 8001038:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800103a:	2301      	movs	r3, #1
 800103c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800103e:	2300      	movs	r3, #0
 8001040:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 10;
 8001042:	230a      	movs	r3, #10
 8001044:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001046:	1d3b      	adds	r3, r7, #4
 8001048:	2200      	movs	r2, #0
 800104a:	4619      	mov	r1, r3
 800104c:	480b      	ldr	r0, [pc, #44]	@ (800107c <MX_TIM5_Init+0xf4>)
 800104e:	f004 fc78 	bl	8005942 <HAL_TIM_IC_ConfigChannel>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_TIM5_Init+0xd4>
  {
    Error_Handler();
 8001058:	f7ff fcd6 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */
  __HAL_TIM_ENABLE_IT(&htim5, TIM_IT_UPDATE); // 使能更新中断
 800105c:	4b07      	ldr	r3, [pc, #28]	@ (800107c <MX_TIM5_Init+0xf4>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	68da      	ldr	r2, [r3, #12]
 8001062:	4b06      	ldr	r3, [pc, #24]	@ (800107c <MX_TIM5_Init+0xf4>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f042 0201 	orr.w	r2, r2, #1
 800106a:	60da      	str	r2, [r3, #12]
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1); // 启动输入捕获及其中断
 800106c:	2100      	movs	r1, #0
 800106e:	4803      	ldr	r0, [pc, #12]	@ (800107c <MX_TIM5_Init+0xf4>)
 8001070:	f004 fa10 	bl	8005494 <HAL_TIM_IC_Start_IT>
  /* USER CODE END TIM5_Init 2 */

}
 8001074:	bf00      	nop
 8001076:	3730      	adds	r7, #48	@ 0x30
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	240000e4 	.word	0x240000e4
 8001080:	40000c00 	.word	0x40000c00

08001084 <HAL_TIM_Base_MspInit>:
  /* USER CODE END TIM6_Init 2 */

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b08c      	sub	sp, #48	@ 0x30
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108c:	f107 031c 	add.w	r3, r7, #28
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a3b      	ldr	r2, [pc, #236]	@ (8001190 <HAL_TIM_Base_MspInit+0x10c>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d117      	bne.n	80010d6 <HAL_TIM_Base_MspInit+0x52>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010a6:	4b3b      	ldr	r3, [pc, #236]	@ (8001194 <HAL_TIM_Base_MspInit+0x110>)
 80010a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010ac:	4a39      	ldr	r2, [pc, #228]	@ (8001194 <HAL_TIM_Base_MspInit+0x110>)
 80010ae:	f043 0302 	orr.w	r3, r3, #2
 80010b2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80010b6:	4b37      	ldr	r3, [pc, #220]	@ (8001194 <HAL_TIM_Base_MspInit+0x110>)
 80010b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010bc:	f003 0302 	and.w	r3, r3, #2
 80010c0:	61bb      	str	r3, [r7, #24]
 80010c2:	69bb      	ldr	r3, [r7, #24]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80010c4:	2200      	movs	r2, #0
 80010c6:	2100      	movs	r1, #0
 80010c8:	201d      	movs	r0, #29
 80010ca:	f000 fae0 	bl	800168e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80010ce:	201d      	movs	r0, #29
 80010d0:	f000 faf7 	bl	80016c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */
  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80010d4:	e057      	b.n	8001186 <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM5)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a2f      	ldr	r2, [pc, #188]	@ (8001198 <HAL_TIM_Base_MspInit+0x114>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d136      	bne.n	800114e <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80010e0:	4b2c      	ldr	r3, [pc, #176]	@ (8001194 <HAL_TIM_Base_MspInit+0x110>)
 80010e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010e6:	4a2b      	ldr	r2, [pc, #172]	@ (8001194 <HAL_TIM_Base_MspInit+0x110>)
 80010e8:	f043 0308 	orr.w	r3, r3, #8
 80010ec:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80010f0:	4b28      	ldr	r3, [pc, #160]	@ (8001194 <HAL_TIM_Base_MspInit+0x110>)
 80010f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010f6:	f003 0308 	and.w	r3, r3, #8
 80010fa:	617b      	str	r3, [r7, #20]
 80010fc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fe:	4b25      	ldr	r3, [pc, #148]	@ (8001194 <HAL_TIM_Base_MspInit+0x110>)
 8001100:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001104:	4a23      	ldr	r2, [pc, #140]	@ (8001194 <HAL_TIM_Base_MspInit+0x110>)
 8001106:	f043 0301 	orr.w	r3, r3, #1
 800110a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800110e:	4b21      	ldr	r3, [pc, #132]	@ (8001194 <HAL_TIM_Base_MspInit+0x110>)
 8001110:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001114:	f003 0301 	and.w	r3, r3, #1
 8001118:	613b      	str	r3, [r7, #16]
 800111a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM5_IN_Pin;
 800111c:	2301      	movs	r3, #1
 800111e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001120:	2302      	movs	r3, #2
 8001122:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001124:	2302      	movs	r3, #2
 8001126:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001128:	2300      	movs	r3, #0
 800112a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800112c:	2302      	movs	r3, #2
 800112e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(TIM5_IN_GPIO_Port, &GPIO_InitStruct);
 8001130:	f107 031c 	add.w	r3, r7, #28
 8001134:	4619      	mov	r1, r3
 8001136:	4819      	ldr	r0, [pc, #100]	@ (800119c <HAL_TIM_Base_MspInit+0x118>)
 8001138:	f001 f8ba 	bl	80022b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 2, 3);
 800113c:	2203      	movs	r2, #3
 800113e:	2102      	movs	r1, #2
 8001140:	2032      	movs	r0, #50	@ 0x32
 8001142:	f000 faa4 	bl	800168e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001146:	2032      	movs	r0, #50	@ 0x32
 8001148:	f000 fabb 	bl	80016c2 <HAL_NVIC_EnableIRQ>
}
 800114c:	e01b      	b.n	8001186 <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM6)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a13      	ldr	r2, [pc, #76]	@ (80011a0 <HAL_TIM_Base_MspInit+0x11c>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d116      	bne.n	8001186 <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001158:	4b0e      	ldr	r3, [pc, #56]	@ (8001194 <HAL_TIM_Base_MspInit+0x110>)
 800115a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800115e:	4a0d      	ldr	r2, [pc, #52]	@ (8001194 <HAL_TIM_Base_MspInit+0x110>)
 8001160:	f043 0310 	orr.w	r3, r3, #16
 8001164:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001168:	4b0a      	ldr	r3, [pc, #40]	@ (8001194 <HAL_TIM_Base_MspInit+0x110>)
 800116a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800116e:	f003 0310 	and.w	r3, r3, #16
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8001176:	2200      	movs	r2, #0
 8001178:	2101      	movs	r1, #1
 800117a:	2036      	movs	r0, #54	@ 0x36
 800117c:	f000 fa87 	bl	800168e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001180:	2036      	movs	r0, #54	@ 0x36
 8001182:	f000 fa9e 	bl	80016c2 <HAL_NVIC_EnableIRQ>
}
 8001186:	bf00      	nop
 8001188:	3730      	adds	r7, #48	@ 0x30
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40000400 	.word	0x40000400
 8001194:	58024400 	.word	0x58024400
 8001198:	40000c00 	.word	0x40000c00
 800119c:	58020000 	.word	0x58020000
 80011a0:	40001000 	.word	0x40001000

080011a4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011a8:	4b22      	ldr	r3, [pc, #136]	@ (8001234 <MX_USART1_UART_Init+0x90>)
 80011aa:	4a23      	ldr	r2, [pc, #140]	@ (8001238 <MX_USART1_UART_Init+0x94>)
 80011ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011ae:	4b21      	ldr	r3, [pc, #132]	@ (8001234 <MX_USART1_UART_Init+0x90>)
 80011b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011b6:	4b1f      	ldr	r3, [pc, #124]	@ (8001234 <MX_USART1_UART_Init+0x90>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001234 <MX_USART1_UART_Init+0x90>)
 80011be:	2200      	movs	r2, #0
 80011c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001234 <MX_USART1_UART_Init+0x90>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001234 <MX_USART1_UART_Init+0x90>)
 80011ca:	220c      	movs	r2, #12
 80011cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ce:	4b19      	ldr	r3, [pc, #100]	@ (8001234 <MX_USART1_UART_Init+0x90>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011d4:	4b17      	ldr	r3, [pc, #92]	@ (8001234 <MX_USART1_UART_Init+0x90>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011da:	4b16      	ldr	r3, [pc, #88]	@ (8001234 <MX_USART1_UART_Init+0x90>)
 80011dc:	2200      	movs	r2, #0
 80011de:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011e0:	4b14      	ldr	r3, [pc, #80]	@ (8001234 <MX_USART1_UART_Init+0x90>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011e6:	4b13      	ldr	r3, [pc, #76]	@ (8001234 <MX_USART1_UART_Init+0x90>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011ec:	4811      	ldr	r0, [pc, #68]	@ (8001234 <MX_USART1_UART_Init+0x90>)
 80011ee:	f005 f8d9 	bl	80063a4 <HAL_UART_Init>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80011f8:	f7ff fc06 	bl	8000a08 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011fc:	2100      	movs	r1, #0
 80011fe:	480d      	ldr	r0, [pc, #52]	@ (8001234 <MX_USART1_UART_Init+0x90>)
 8001200:	f006 fdc0 	bl	8007d84 <HAL_UARTEx_SetTxFifoThreshold>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800120a:	f7ff fbfd 	bl	8000a08 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800120e:	2100      	movs	r1, #0
 8001210:	4808      	ldr	r0, [pc, #32]	@ (8001234 <MX_USART1_UART_Init+0x90>)
 8001212:	f006 fdf5 	bl	8007e00 <HAL_UARTEx_SetRxFifoThreshold>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800121c:	f7ff fbf4 	bl	8000a08 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001220:	4804      	ldr	r0, [pc, #16]	@ (8001234 <MX_USART1_UART_Init+0x90>)
 8001222:	f006 fd76 	bl	8007d12 <HAL_UARTEx_DisableFifoMode>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800122c:	f7ff fbec 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001230:	bf00      	nop
 8001232:	bd80      	pop	{r7, pc}
 8001234:	2400017c 	.word	0x2400017c
 8001238:	40011000 	.word	0x40011000

0800123c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b0ba      	sub	sp, #232	@ 0xe8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001244:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
 8001252:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001254:	f107 0310 	add.w	r3, r7, #16
 8001258:	22c0      	movs	r2, #192	@ 0xc0
 800125a:	2100      	movs	r1, #0
 800125c:	4618      	mov	r0, r3
 800125e:	f007 f88f 	bl	8008380 <memset>
  if(uartHandle->Instance==USART1)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a2b      	ldr	r2, [pc, #172]	@ (8001314 <HAL_UART_MspInit+0xd8>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d14e      	bne.n	800130a <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800126c:	f04f 0201 	mov.w	r2, #1
 8001270:	f04f 0300 	mov.w	r3, #0
 8001274:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001278:	2300      	movs	r3, #0
 800127a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800127e:	f107 0310 	add.w	r3, r7, #16
 8001282:	4618      	mov	r0, r3
 8001284:	f002 fa22 	bl	80036cc <HAL_RCCEx_PeriphCLKConfig>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800128e:	f7ff fbbb 	bl	8000a08 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001292:	4b21      	ldr	r3, [pc, #132]	@ (8001318 <HAL_UART_MspInit+0xdc>)
 8001294:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001298:	4a1f      	ldr	r2, [pc, #124]	@ (8001318 <HAL_UART_MspInit+0xdc>)
 800129a:	f043 0310 	orr.w	r3, r3, #16
 800129e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80012a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001318 <HAL_UART_MspInit+0xdc>)
 80012a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80012a8:	f003 0310 	and.w	r3, r3, #16
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b0:	4b19      	ldr	r3, [pc, #100]	@ (8001318 <HAL_UART_MspInit+0xdc>)
 80012b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012b6:	4a18      	ldr	r2, [pc, #96]	@ (8001318 <HAL_UART_MspInit+0xdc>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012c0:	4b15      	ldr	r3, [pc, #84]	@ (8001318 <HAL_UART_MspInit+0xdc>)
 80012c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	60bb      	str	r3, [r7, #8]
 80012cc:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80012ce:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80012d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d6:	2302      	movs	r3, #2
 80012d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012dc:	2301      	movs	r3, #1
 80012de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012e2:	2302      	movs	r3, #2
 80012e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012e8:	2307      	movs	r3, #7
 80012ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ee:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80012f2:	4619      	mov	r1, r3
 80012f4:	4809      	ldr	r0, [pc, #36]	@ (800131c <HAL_UART_MspInit+0xe0>)
 80012f6:	f000 ffdb 	bl	80022b0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80012fa:	2200      	movs	r2, #0
 80012fc:	2100      	movs	r1, #0
 80012fe:	2025      	movs	r0, #37	@ 0x25
 8001300:	f000 f9c5 	bl	800168e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001304:	2025      	movs	r0, #37	@ 0x25
 8001306:	f000 f9dc 	bl	80016c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800130a:	bf00      	nop
 800130c:	37e8      	adds	r7, #232	@ 0xe8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40011000 	.word	0x40011000
 8001318:	58024400 	.word	0x58024400
 800131c:	58020000 	.word	0x58020000

08001320 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

/* printf重定向 */
PUTCHAR_PROTOTYPE
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001328:	1d39      	adds	r1, r7, #4
 800132a:	f04f 33ff 	mov.w	r3, #4294967295
 800132e:	2201      	movs	r2, #1
 8001330:	4803      	ldr	r0, [pc, #12]	@ (8001340 <__io_putchar+0x20>)
 8001332:	f005 f887 	bl	8006444 <HAL_UART_Transmit>
    return ch;
 8001336:	687b      	ldr	r3, [r7, #4]
}
 8001338:	4618      	mov	r0, r3
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	2400017c 	.word	0x2400017c

08001344 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001344:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001380 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001348:	f7ff fe06 	bl	8000f58 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800134c:	f7ff fd64 	bl	8000e18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001350:	480c      	ldr	r0, [pc, #48]	@ (8001384 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001352:	490d      	ldr	r1, [pc, #52]	@ (8001388 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001354:	4a0d      	ldr	r2, [pc, #52]	@ (800138c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001356:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001358:	e002      	b.n	8001360 <LoopCopyDataInit>

0800135a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800135a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800135c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800135e:	3304      	adds	r3, #4

08001360 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001360:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001362:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001364:	d3f9      	bcc.n	800135a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001366:	4a0a      	ldr	r2, [pc, #40]	@ (8001390 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001368:	4c0a      	ldr	r4, [pc, #40]	@ (8001394 <LoopFillZerobss+0x22>)
  movs r3, #0
 800136a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800136c:	e001      	b.n	8001372 <LoopFillZerobss>

0800136e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800136e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001370:	3204      	adds	r2, #4

08001372 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001372:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001374:	d3fb      	bcc.n	800136e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001376:	f007 f857 	bl	8008428 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800137a:	f7ff fa69 	bl	8000850 <main>
  bx  lr
 800137e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001380:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001384:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001388:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 800138c:	08008f3c 	.word	0x08008f3c
  ldr r2, =_sbss
 8001390:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 8001394:	24000374 	.word	0x24000374

08001398 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001398:	e7fe      	b.n	8001398 <ADC3_IRQHandler>
	...

0800139c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013a2:	2003      	movs	r0, #3
 80013a4:	f000 f968 	bl	8001678 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80013a8:	f001 ffba 	bl	8003320 <HAL_RCC_GetSysClockFreq>
 80013ac:	4602      	mov	r2, r0
 80013ae:	4b15      	ldr	r3, [pc, #84]	@ (8001404 <HAL_Init+0x68>)
 80013b0:	699b      	ldr	r3, [r3, #24]
 80013b2:	0a1b      	lsrs	r3, r3, #8
 80013b4:	f003 030f 	and.w	r3, r3, #15
 80013b8:	4913      	ldr	r1, [pc, #76]	@ (8001408 <HAL_Init+0x6c>)
 80013ba:	5ccb      	ldrb	r3, [r1, r3]
 80013bc:	f003 031f 	and.w	r3, r3, #31
 80013c0:	fa22 f303 	lsr.w	r3, r2, r3
 80013c4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80013c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001404 <HAL_Init+0x68>)
 80013c8:	699b      	ldr	r3, [r3, #24]
 80013ca:	f003 030f 	and.w	r3, r3, #15
 80013ce:	4a0e      	ldr	r2, [pc, #56]	@ (8001408 <HAL_Init+0x6c>)
 80013d0:	5cd3      	ldrb	r3, [r2, r3]
 80013d2:	f003 031f 	and.w	r3, r3, #31
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	fa22 f303 	lsr.w	r3, r2, r3
 80013dc:	4a0b      	ldr	r2, [pc, #44]	@ (800140c <HAL_Init+0x70>)
 80013de:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80013e0:	4a0b      	ldr	r2, [pc, #44]	@ (8001410 <HAL_Init+0x74>)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013e6:	200f      	movs	r0, #15
 80013e8:	f000 f814 	bl	8001414 <HAL_InitTick>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e002      	b.n	80013fc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80013f6:	f7ff fb0d 	bl	8000a14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013fa:	2300      	movs	r3, #0
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	58024400 	.word	0x58024400
 8001408:	08008ec0 	.word	0x08008ec0
 800140c:	24000004 	.word	0x24000004
 8001410:	24000000 	.word	0x24000000

08001414 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800141c:	4b15      	ldr	r3, [pc, #84]	@ (8001474 <HAL_InitTick+0x60>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d101      	bne.n	8001428 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	e021      	b.n	800146c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001428:	4b13      	ldr	r3, [pc, #76]	@ (8001478 <HAL_InitTick+0x64>)
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	4b11      	ldr	r3, [pc, #68]	@ (8001474 <HAL_InitTick+0x60>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	4619      	mov	r1, r3
 8001432:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001436:	fbb3 f3f1 	udiv	r3, r3, r1
 800143a:	fbb2 f3f3 	udiv	r3, r2, r3
 800143e:	4618      	mov	r0, r3
 8001440:	f000 f94d 	bl	80016de <HAL_SYSTICK_Config>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e00e      	b.n	800146c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2b0f      	cmp	r3, #15
 8001452:	d80a      	bhi.n	800146a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001454:	2200      	movs	r2, #0
 8001456:	6879      	ldr	r1, [r7, #4]
 8001458:	f04f 30ff 	mov.w	r0, #4294967295
 800145c:	f000 f917 	bl	800168e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001460:	4a06      	ldr	r2, [pc, #24]	@ (800147c <HAL_InitTick+0x68>)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001466:	2300      	movs	r3, #0
 8001468:	e000      	b.n	800146c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
}
 800146c:	4618      	mov	r0, r3
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	2400000c 	.word	0x2400000c
 8001478:	24000000 	.word	0x24000000
 800147c:	24000008 	.word	0x24000008

08001480 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001484:	4b06      	ldr	r3, [pc, #24]	@ (80014a0 <HAL_IncTick+0x20>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	461a      	mov	r2, r3
 800148a:	4b06      	ldr	r3, [pc, #24]	@ (80014a4 <HAL_IncTick+0x24>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4413      	add	r3, r2
 8001490:	4a04      	ldr	r2, [pc, #16]	@ (80014a4 <HAL_IncTick+0x24>)
 8001492:	6013      	str	r3, [r2, #0]
}
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	2400000c 	.word	0x2400000c
 80014a4:	24000224 	.word	0x24000224

080014a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  return uwTick;
 80014ac:	4b03      	ldr	r3, [pc, #12]	@ (80014bc <HAL_GetTick+0x14>)
 80014ae:	681b      	ldr	r3, [r3, #0]
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	24000224 	.word	0x24000224

080014c0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80014c4:	4b03      	ldr	r3, [pc, #12]	@ (80014d4 <HAL_GetREVID+0x14>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	0c1b      	lsrs	r3, r3, #16
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	5c001000 	.word	0x5c001000

080014d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f003 0307 	and.w	r3, r3, #7
 80014e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001518 <__NVIC_SetPriorityGrouping+0x40>)
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ee:	68ba      	ldr	r2, [r7, #8]
 80014f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014f4:	4013      	ands	r3, r2
 80014f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001500:	4b06      	ldr	r3, [pc, #24]	@ (800151c <__NVIC_SetPriorityGrouping+0x44>)
 8001502:	4313      	orrs	r3, r2
 8001504:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001506:	4a04      	ldr	r2, [pc, #16]	@ (8001518 <__NVIC_SetPriorityGrouping+0x40>)
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	60d3      	str	r3, [r2, #12]
}
 800150c:	bf00      	nop
 800150e:	3714      	adds	r7, #20
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	e000ed00 	.word	0xe000ed00
 800151c:	05fa0000 	.word	0x05fa0000

08001520 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001524:	4b04      	ldr	r3, [pc, #16]	@ (8001538 <__NVIC_GetPriorityGrouping+0x18>)
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	0a1b      	lsrs	r3, r3, #8
 800152a:	f003 0307 	and.w	r3, r3, #7
}
 800152e:	4618      	mov	r0, r3
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	e000ed00 	.word	0xe000ed00

0800153c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001546:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800154a:	2b00      	cmp	r3, #0
 800154c:	db0b      	blt.n	8001566 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800154e:	88fb      	ldrh	r3, [r7, #6]
 8001550:	f003 021f 	and.w	r2, r3, #31
 8001554:	4907      	ldr	r1, [pc, #28]	@ (8001574 <__NVIC_EnableIRQ+0x38>)
 8001556:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800155a:	095b      	lsrs	r3, r3, #5
 800155c:	2001      	movs	r0, #1
 800155e:	fa00 f202 	lsl.w	r2, r0, r2
 8001562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	e000e100 	.word	0xe000e100

08001578 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	6039      	str	r1, [r7, #0]
 8001582:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001584:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001588:	2b00      	cmp	r3, #0
 800158a:	db0a      	blt.n	80015a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	b2da      	uxtb	r2, r3
 8001590:	490c      	ldr	r1, [pc, #48]	@ (80015c4 <__NVIC_SetPriority+0x4c>)
 8001592:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001596:	0112      	lsls	r2, r2, #4
 8001598:	b2d2      	uxtb	r2, r2
 800159a:	440b      	add	r3, r1
 800159c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015a0:	e00a      	b.n	80015b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	b2da      	uxtb	r2, r3
 80015a6:	4908      	ldr	r1, [pc, #32]	@ (80015c8 <__NVIC_SetPriority+0x50>)
 80015a8:	88fb      	ldrh	r3, [r7, #6]
 80015aa:	f003 030f 	and.w	r3, r3, #15
 80015ae:	3b04      	subs	r3, #4
 80015b0:	0112      	lsls	r2, r2, #4
 80015b2:	b2d2      	uxtb	r2, r2
 80015b4:	440b      	add	r3, r1
 80015b6:	761a      	strb	r2, [r3, #24]
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	e000e100 	.word	0xe000e100
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b089      	sub	sp, #36	@ 0x24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	f1c3 0307 	rsb	r3, r3, #7
 80015e6:	2b04      	cmp	r3, #4
 80015e8:	bf28      	it	cs
 80015ea:	2304      	movcs	r3, #4
 80015ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	3304      	adds	r3, #4
 80015f2:	2b06      	cmp	r3, #6
 80015f4:	d902      	bls.n	80015fc <NVIC_EncodePriority+0x30>
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	3b03      	subs	r3, #3
 80015fa:	e000      	b.n	80015fe <NVIC_EncodePriority+0x32>
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001600:	f04f 32ff 	mov.w	r2, #4294967295
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	43da      	mvns	r2, r3
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	401a      	ands	r2, r3
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001614:	f04f 31ff 	mov.w	r1, #4294967295
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	fa01 f303 	lsl.w	r3, r1, r3
 800161e:	43d9      	mvns	r1, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001624:	4313      	orrs	r3, r2
         );
}
 8001626:	4618      	mov	r0, r3
 8001628:	3724      	adds	r7, #36	@ 0x24
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
	...

08001634 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	3b01      	subs	r3, #1
 8001640:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001644:	d301      	bcc.n	800164a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001646:	2301      	movs	r3, #1
 8001648:	e00f      	b.n	800166a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800164a:	4a0a      	ldr	r2, [pc, #40]	@ (8001674 <SysTick_Config+0x40>)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3b01      	subs	r3, #1
 8001650:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001652:	210f      	movs	r1, #15
 8001654:	f04f 30ff 	mov.w	r0, #4294967295
 8001658:	f7ff ff8e 	bl	8001578 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800165c:	4b05      	ldr	r3, [pc, #20]	@ (8001674 <SysTick_Config+0x40>)
 800165e:	2200      	movs	r2, #0
 8001660:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001662:	4b04      	ldr	r3, [pc, #16]	@ (8001674 <SysTick_Config+0x40>)
 8001664:	2207      	movs	r2, #7
 8001666:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	e000e010 	.word	0xe000e010

08001678 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f7ff ff29 	bl	80014d8 <__NVIC_SetPriorityGrouping>
}
 8001686:	bf00      	nop
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	b086      	sub	sp, #24
 8001692:	af00      	add	r7, sp, #0
 8001694:	4603      	mov	r3, r0
 8001696:	60b9      	str	r1, [r7, #8]
 8001698:	607a      	str	r2, [r7, #4]
 800169a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800169c:	f7ff ff40 	bl	8001520 <__NVIC_GetPriorityGrouping>
 80016a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	68b9      	ldr	r1, [r7, #8]
 80016a6:	6978      	ldr	r0, [r7, #20]
 80016a8:	f7ff ff90 	bl	80015cc <NVIC_EncodePriority>
 80016ac:	4602      	mov	r2, r0
 80016ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016b2:	4611      	mov	r1, r2
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff ff5f 	bl	8001578 <__NVIC_SetPriority>
}
 80016ba:	bf00      	nop
 80016bc:	3718      	adds	r7, #24
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b082      	sub	sp, #8
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	4603      	mov	r3, r0
 80016ca:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff ff33 	bl	800153c <__NVIC_EnableIRQ>
}
 80016d6:	bf00      	nop
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b082      	sub	sp, #8
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f7ff ffa4 	bl	8001634 <SysTick_Config>
 80016ec:	4603      	mov	r3, r0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
	...

080016f8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80016fc:	f3bf 8f5f 	dmb	sy
}
 8001700:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001702:	4b07      	ldr	r3, [pc, #28]	@ (8001720 <HAL_MPU_Disable+0x28>)
 8001704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001706:	4a06      	ldr	r2, [pc, #24]	@ (8001720 <HAL_MPU_Disable+0x28>)
 8001708:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800170c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800170e:	4b05      	ldr	r3, [pc, #20]	@ (8001724 <HAL_MPU_Disable+0x2c>)
 8001710:	2200      	movs	r2, #0
 8001712:	605a      	str	r2, [r3, #4]
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	e000ed00 	.word	0xe000ed00
 8001724:	e000ed90 	.word	0xe000ed90

08001728 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001730:	4a0b      	ldr	r2, [pc, #44]	@ (8001760 <HAL_MPU_Enable+0x38>)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f043 0301 	orr.w	r3, r3, #1
 8001738:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800173a:	4b0a      	ldr	r3, [pc, #40]	@ (8001764 <HAL_MPU_Enable+0x3c>)
 800173c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800173e:	4a09      	ldr	r2, [pc, #36]	@ (8001764 <HAL_MPU_Enable+0x3c>)
 8001740:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001744:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001746:	f3bf 8f4f 	dsb	sy
}
 800174a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800174c:	f3bf 8f6f 	isb	sy
}
 8001750:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001752:	bf00      	nop
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	e000ed90 	.word	0xe000ed90
 8001764:	e000ed00 	.word	0xe000ed00

08001768 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	785a      	ldrb	r2, [r3, #1]
 8001774:	4b1b      	ldr	r3, [pc, #108]	@ (80017e4 <HAL_MPU_ConfigRegion+0x7c>)
 8001776:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001778:	4b1a      	ldr	r3, [pc, #104]	@ (80017e4 <HAL_MPU_ConfigRegion+0x7c>)
 800177a:	691b      	ldr	r3, [r3, #16]
 800177c:	4a19      	ldr	r2, [pc, #100]	@ (80017e4 <HAL_MPU_ConfigRegion+0x7c>)
 800177e:	f023 0301 	bic.w	r3, r3, #1
 8001782:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001784:	4a17      	ldr	r2, [pc, #92]	@ (80017e4 <HAL_MPU_ConfigRegion+0x7c>)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	7b1b      	ldrb	r3, [r3, #12]
 8001790:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	7adb      	ldrb	r3, [r3, #11]
 8001796:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001798:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	7a9b      	ldrb	r3, [r3, #10]
 800179e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80017a0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	7b5b      	ldrb	r3, [r3, #13]
 80017a6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80017a8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	7b9b      	ldrb	r3, [r3, #14]
 80017ae:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80017b0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	7bdb      	ldrb	r3, [r3, #15]
 80017b6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80017b8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	7a5b      	ldrb	r3, [r3, #9]
 80017be:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80017c0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	7a1b      	ldrb	r3, [r3, #8]
 80017c6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80017c8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	7812      	ldrb	r2, [r2, #0]
 80017ce:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80017d0:	4a04      	ldr	r2, [pc, #16]	@ (80017e4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80017d2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80017d4:	6113      	str	r3, [r2, #16]
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	e000ed90 	.word	0xe000ed90

080017e8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b086      	sub	sp, #24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80017f0:	f7ff fe5a 	bl	80014a8 <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d101      	bne.n	8001800 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e2dc      	b.n	8001dba <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001806:	b2db      	uxtb	r3, r3
 8001808:	2b02      	cmp	r3, #2
 800180a:	d008      	beq.n	800181e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2280      	movs	r2, #128	@ 0x80
 8001810:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2200      	movs	r2, #0
 8001816:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e2cd      	b.n	8001dba <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a76      	ldr	r2, [pc, #472]	@ (80019fc <HAL_DMA_Abort+0x214>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d04a      	beq.n	80018be <HAL_DMA_Abort+0xd6>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a74      	ldr	r2, [pc, #464]	@ (8001a00 <HAL_DMA_Abort+0x218>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d045      	beq.n	80018be <HAL_DMA_Abort+0xd6>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a73      	ldr	r2, [pc, #460]	@ (8001a04 <HAL_DMA_Abort+0x21c>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d040      	beq.n	80018be <HAL_DMA_Abort+0xd6>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a71      	ldr	r2, [pc, #452]	@ (8001a08 <HAL_DMA_Abort+0x220>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d03b      	beq.n	80018be <HAL_DMA_Abort+0xd6>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a70      	ldr	r2, [pc, #448]	@ (8001a0c <HAL_DMA_Abort+0x224>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d036      	beq.n	80018be <HAL_DMA_Abort+0xd6>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a6e      	ldr	r2, [pc, #440]	@ (8001a10 <HAL_DMA_Abort+0x228>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d031      	beq.n	80018be <HAL_DMA_Abort+0xd6>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a6d      	ldr	r2, [pc, #436]	@ (8001a14 <HAL_DMA_Abort+0x22c>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d02c      	beq.n	80018be <HAL_DMA_Abort+0xd6>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a6b      	ldr	r2, [pc, #428]	@ (8001a18 <HAL_DMA_Abort+0x230>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d027      	beq.n	80018be <HAL_DMA_Abort+0xd6>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a6a      	ldr	r2, [pc, #424]	@ (8001a1c <HAL_DMA_Abort+0x234>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d022      	beq.n	80018be <HAL_DMA_Abort+0xd6>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a68      	ldr	r2, [pc, #416]	@ (8001a20 <HAL_DMA_Abort+0x238>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d01d      	beq.n	80018be <HAL_DMA_Abort+0xd6>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a67      	ldr	r2, [pc, #412]	@ (8001a24 <HAL_DMA_Abort+0x23c>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d018      	beq.n	80018be <HAL_DMA_Abort+0xd6>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a65      	ldr	r2, [pc, #404]	@ (8001a28 <HAL_DMA_Abort+0x240>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d013      	beq.n	80018be <HAL_DMA_Abort+0xd6>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a64      	ldr	r2, [pc, #400]	@ (8001a2c <HAL_DMA_Abort+0x244>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d00e      	beq.n	80018be <HAL_DMA_Abort+0xd6>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a62      	ldr	r2, [pc, #392]	@ (8001a30 <HAL_DMA_Abort+0x248>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d009      	beq.n	80018be <HAL_DMA_Abort+0xd6>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a61      	ldr	r2, [pc, #388]	@ (8001a34 <HAL_DMA_Abort+0x24c>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d004      	beq.n	80018be <HAL_DMA_Abort+0xd6>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a5f      	ldr	r2, [pc, #380]	@ (8001a38 <HAL_DMA_Abort+0x250>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d101      	bne.n	80018c2 <HAL_DMA_Abort+0xda>
 80018be:	2301      	movs	r3, #1
 80018c0:	e000      	b.n	80018c4 <HAL_DMA_Abort+0xdc>
 80018c2:	2300      	movs	r3, #0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d013      	beq.n	80018f0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f022 021e 	bic.w	r2, r2, #30
 80018d6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	695a      	ldr	r2, [r3, #20]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80018e6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	617b      	str	r3, [r7, #20]
 80018ee:	e00a      	b.n	8001906 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f022 020e 	bic.w	r2, r2, #14
 80018fe:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a3c      	ldr	r2, [pc, #240]	@ (80019fc <HAL_DMA_Abort+0x214>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d072      	beq.n	80019f6 <HAL_DMA_Abort+0x20e>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a3a      	ldr	r2, [pc, #232]	@ (8001a00 <HAL_DMA_Abort+0x218>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d06d      	beq.n	80019f6 <HAL_DMA_Abort+0x20e>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a39      	ldr	r2, [pc, #228]	@ (8001a04 <HAL_DMA_Abort+0x21c>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d068      	beq.n	80019f6 <HAL_DMA_Abort+0x20e>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a37      	ldr	r2, [pc, #220]	@ (8001a08 <HAL_DMA_Abort+0x220>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d063      	beq.n	80019f6 <HAL_DMA_Abort+0x20e>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a36      	ldr	r2, [pc, #216]	@ (8001a0c <HAL_DMA_Abort+0x224>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d05e      	beq.n	80019f6 <HAL_DMA_Abort+0x20e>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a34      	ldr	r2, [pc, #208]	@ (8001a10 <HAL_DMA_Abort+0x228>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d059      	beq.n	80019f6 <HAL_DMA_Abort+0x20e>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a33      	ldr	r2, [pc, #204]	@ (8001a14 <HAL_DMA_Abort+0x22c>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d054      	beq.n	80019f6 <HAL_DMA_Abort+0x20e>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a31      	ldr	r2, [pc, #196]	@ (8001a18 <HAL_DMA_Abort+0x230>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d04f      	beq.n	80019f6 <HAL_DMA_Abort+0x20e>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a30      	ldr	r2, [pc, #192]	@ (8001a1c <HAL_DMA_Abort+0x234>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d04a      	beq.n	80019f6 <HAL_DMA_Abort+0x20e>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a2e      	ldr	r2, [pc, #184]	@ (8001a20 <HAL_DMA_Abort+0x238>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d045      	beq.n	80019f6 <HAL_DMA_Abort+0x20e>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a2d      	ldr	r2, [pc, #180]	@ (8001a24 <HAL_DMA_Abort+0x23c>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d040      	beq.n	80019f6 <HAL_DMA_Abort+0x20e>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a2b      	ldr	r2, [pc, #172]	@ (8001a28 <HAL_DMA_Abort+0x240>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d03b      	beq.n	80019f6 <HAL_DMA_Abort+0x20e>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a2a      	ldr	r2, [pc, #168]	@ (8001a2c <HAL_DMA_Abort+0x244>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d036      	beq.n	80019f6 <HAL_DMA_Abort+0x20e>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a28      	ldr	r2, [pc, #160]	@ (8001a30 <HAL_DMA_Abort+0x248>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d031      	beq.n	80019f6 <HAL_DMA_Abort+0x20e>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a27      	ldr	r2, [pc, #156]	@ (8001a34 <HAL_DMA_Abort+0x24c>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d02c      	beq.n	80019f6 <HAL_DMA_Abort+0x20e>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a25      	ldr	r2, [pc, #148]	@ (8001a38 <HAL_DMA_Abort+0x250>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d027      	beq.n	80019f6 <HAL_DMA_Abort+0x20e>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a24      	ldr	r2, [pc, #144]	@ (8001a3c <HAL_DMA_Abort+0x254>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d022      	beq.n	80019f6 <HAL_DMA_Abort+0x20e>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a22      	ldr	r2, [pc, #136]	@ (8001a40 <HAL_DMA_Abort+0x258>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d01d      	beq.n	80019f6 <HAL_DMA_Abort+0x20e>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a21      	ldr	r2, [pc, #132]	@ (8001a44 <HAL_DMA_Abort+0x25c>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d018      	beq.n	80019f6 <HAL_DMA_Abort+0x20e>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a1f      	ldr	r2, [pc, #124]	@ (8001a48 <HAL_DMA_Abort+0x260>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d013      	beq.n	80019f6 <HAL_DMA_Abort+0x20e>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a1e      	ldr	r2, [pc, #120]	@ (8001a4c <HAL_DMA_Abort+0x264>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d00e      	beq.n	80019f6 <HAL_DMA_Abort+0x20e>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a1c      	ldr	r2, [pc, #112]	@ (8001a50 <HAL_DMA_Abort+0x268>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d009      	beq.n	80019f6 <HAL_DMA_Abort+0x20e>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a1b      	ldr	r2, [pc, #108]	@ (8001a54 <HAL_DMA_Abort+0x26c>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d004      	beq.n	80019f6 <HAL_DMA_Abort+0x20e>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a19      	ldr	r2, [pc, #100]	@ (8001a58 <HAL_DMA_Abort+0x270>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d132      	bne.n	8001a5c <HAL_DMA_Abort+0x274>
 80019f6:	2301      	movs	r3, #1
 80019f8:	e031      	b.n	8001a5e <HAL_DMA_Abort+0x276>
 80019fa:	bf00      	nop
 80019fc:	40020010 	.word	0x40020010
 8001a00:	40020028 	.word	0x40020028
 8001a04:	40020040 	.word	0x40020040
 8001a08:	40020058 	.word	0x40020058
 8001a0c:	40020070 	.word	0x40020070
 8001a10:	40020088 	.word	0x40020088
 8001a14:	400200a0 	.word	0x400200a0
 8001a18:	400200b8 	.word	0x400200b8
 8001a1c:	40020410 	.word	0x40020410
 8001a20:	40020428 	.word	0x40020428
 8001a24:	40020440 	.word	0x40020440
 8001a28:	40020458 	.word	0x40020458
 8001a2c:	40020470 	.word	0x40020470
 8001a30:	40020488 	.word	0x40020488
 8001a34:	400204a0 	.word	0x400204a0
 8001a38:	400204b8 	.word	0x400204b8
 8001a3c:	58025408 	.word	0x58025408
 8001a40:	5802541c 	.word	0x5802541c
 8001a44:	58025430 	.word	0x58025430
 8001a48:	58025444 	.word	0x58025444
 8001a4c:	58025458 	.word	0x58025458
 8001a50:	5802546c 	.word	0x5802546c
 8001a54:	58025480 	.word	0x58025480
 8001a58:	58025494 	.word	0x58025494
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d007      	beq.n	8001a72 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a6c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001a70:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a6d      	ldr	r2, [pc, #436]	@ (8001c2c <HAL_DMA_Abort+0x444>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d04a      	beq.n	8001b12 <HAL_DMA_Abort+0x32a>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a6b      	ldr	r2, [pc, #428]	@ (8001c30 <HAL_DMA_Abort+0x448>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d045      	beq.n	8001b12 <HAL_DMA_Abort+0x32a>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a6a      	ldr	r2, [pc, #424]	@ (8001c34 <HAL_DMA_Abort+0x44c>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d040      	beq.n	8001b12 <HAL_DMA_Abort+0x32a>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a68      	ldr	r2, [pc, #416]	@ (8001c38 <HAL_DMA_Abort+0x450>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d03b      	beq.n	8001b12 <HAL_DMA_Abort+0x32a>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a67      	ldr	r2, [pc, #412]	@ (8001c3c <HAL_DMA_Abort+0x454>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d036      	beq.n	8001b12 <HAL_DMA_Abort+0x32a>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a65      	ldr	r2, [pc, #404]	@ (8001c40 <HAL_DMA_Abort+0x458>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d031      	beq.n	8001b12 <HAL_DMA_Abort+0x32a>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a64      	ldr	r2, [pc, #400]	@ (8001c44 <HAL_DMA_Abort+0x45c>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d02c      	beq.n	8001b12 <HAL_DMA_Abort+0x32a>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a62      	ldr	r2, [pc, #392]	@ (8001c48 <HAL_DMA_Abort+0x460>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d027      	beq.n	8001b12 <HAL_DMA_Abort+0x32a>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a61      	ldr	r2, [pc, #388]	@ (8001c4c <HAL_DMA_Abort+0x464>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d022      	beq.n	8001b12 <HAL_DMA_Abort+0x32a>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a5f      	ldr	r2, [pc, #380]	@ (8001c50 <HAL_DMA_Abort+0x468>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d01d      	beq.n	8001b12 <HAL_DMA_Abort+0x32a>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a5e      	ldr	r2, [pc, #376]	@ (8001c54 <HAL_DMA_Abort+0x46c>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d018      	beq.n	8001b12 <HAL_DMA_Abort+0x32a>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a5c      	ldr	r2, [pc, #368]	@ (8001c58 <HAL_DMA_Abort+0x470>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d013      	beq.n	8001b12 <HAL_DMA_Abort+0x32a>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a5b      	ldr	r2, [pc, #364]	@ (8001c5c <HAL_DMA_Abort+0x474>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d00e      	beq.n	8001b12 <HAL_DMA_Abort+0x32a>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a59      	ldr	r2, [pc, #356]	@ (8001c60 <HAL_DMA_Abort+0x478>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d009      	beq.n	8001b12 <HAL_DMA_Abort+0x32a>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a58      	ldr	r2, [pc, #352]	@ (8001c64 <HAL_DMA_Abort+0x47c>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d004      	beq.n	8001b12 <HAL_DMA_Abort+0x32a>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a56      	ldr	r2, [pc, #344]	@ (8001c68 <HAL_DMA_Abort+0x480>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d108      	bne.n	8001b24 <HAL_DMA_Abort+0x33c>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f022 0201 	bic.w	r2, r2, #1
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	e007      	b.n	8001b34 <HAL_DMA_Abort+0x34c>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f022 0201 	bic.w	r2, r2, #1
 8001b32:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001b34:	e013      	b.n	8001b5e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b36:	f7ff fcb7 	bl	80014a8 <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	2b05      	cmp	r3, #5
 8001b42:	d90c      	bls.n	8001b5e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2220      	movs	r2, #32
 8001b48:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2203      	movs	r2, #3
 8001b4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e12d      	b.n	8001dba <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d1e5      	bne.n	8001b36 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a2f      	ldr	r2, [pc, #188]	@ (8001c2c <HAL_DMA_Abort+0x444>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d04a      	beq.n	8001c0a <HAL_DMA_Abort+0x422>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a2d      	ldr	r2, [pc, #180]	@ (8001c30 <HAL_DMA_Abort+0x448>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d045      	beq.n	8001c0a <HAL_DMA_Abort+0x422>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a2c      	ldr	r2, [pc, #176]	@ (8001c34 <HAL_DMA_Abort+0x44c>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d040      	beq.n	8001c0a <HAL_DMA_Abort+0x422>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a2a      	ldr	r2, [pc, #168]	@ (8001c38 <HAL_DMA_Abort+0x450>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d03b      	beq.n	8001c0a <HAL_DMA_Abort+0x422>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a29      	ldr	r2, [pc, #164]	@ (8001c3c <HAL_DMA_Abort+0x454>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d036      	beq.n	8001c0a <HAL_DMA_Abort+0x422>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a27      	ldr	r2, [pc, #156]	@ (8001c40 <HAL_DMA_Abort+0x458>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d031      	beq.n	8001c0a <HAL_DMA_Abort+0x422>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a26      	ldr	r2, [pc, #152]	@ (8001c44 <HAL_DMA_Abort+0x45c>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d02c      	beq.n	8001c0a <HAL_DMA_Abort+0x422>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a24      	ldr	r2, [pc, #144]	@ (8001c48 <HAL_DMA_Abort+0x460>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d027      	beq.n	8001c0a <HAL_DMA_Abort+0x422>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a23      	ldr	r2, [pc, #140]	@ (8001c4c <HAL_DMA_Abort+0x464>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d022      	beq.n	8001c0a <HAL_DMA_Abort+0x422>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a21      	ldr	r2, [pc, #132]	@ (8001c50 <HAL_DMA_Abort+0x468>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d01d      	beq.n	8001c0a <HAL_DMA_Abort+0x422>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a20      	ldr	r2, [pc, #128]	@ (8001c54 <HAL_DMA_Abort+0x46c>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d018      	beq.n	8001c0a <HAL_DMA_Abort+0x422>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a1e      	ldr	r2, [pc, #120]	@ (8001c58 <HAL_DMA_Abort+0x470>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d013      	beq.n	8001c0a <HAL_DMA_Abort+0x422>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a1d      	ldr	r2, [pc, #116]	@ (8001c5c <HAL_DMA_Abort+0x474>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d00e      	beq.n	8001c0a <HAL_DMA_Abort+0x422>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a1b      	ldr	r2, [pc, #108]	@ (8001c60 <HAL_DMA_Abort+0x478>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d009      	beq.n	8001c0a <HAL_DMA_Abort+0x422>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a1a      	ldr	r2, [pc, #104]	@ (8001c64 <HAL_DMA_Abort+0x47c>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d004      	beq.n	8001c0a <HAL_DMA_Abort+0x422>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a18      	ldr	r2, [pc, #96]	@ (8001c68 <HAL_DMA_Abort+0x480>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d101      	bne.n	8001c0e <HAL_DMA_Abort+0x426>
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e000      	b.n	8001c10 <HAL_DMA_Abort+0x428>
 8001c0e:	2300      	movs	r3, #0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d02b      	beq.n	8001c6c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c18:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c1e:	f003 031f 	and.w	r3, r3, #31
 8001c22:	223f      	movs	r2, #63	@ 0x3f
 8001c24:	409a      	lsls	r2, r3
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	609a      	str	r2, [r3, #8]
 8001c2a:	e02a      	b.n	8001c82 <HAL_DMA_Abort+0x49a>
 8001c2c:	40020010 	.word	0x40020010
 8001c30:	40020028 	.word	0x40020028
 8001c34:	40020040 	.word	0x40020040
 8001c38:	40020058 	.word	0x40020058
 8001c3c:	40020070 	.word	0x40020070
 8001c40:	40020088 	.word	0x40020088
 8001c44:	400200a0 	.word	0x400200a0
 8001c48:	400200b8 	.word	0x400200b8
 8001c4c:	40020410 	.word	0x40020410
 8001c50:	40020428 	.word	0x40020428
 8001c54:	40020440 	.word	0x40020440
 8001c58:	40020458 	.word	0x40020458
 8001c5c:	40020470 	.word	0x40020470
 8001c60:	40020488 	.word	0x40020488
 8001c64:	400204a0 	.word	0x400204a0
 8001c68:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c70:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c76:	f003 031f 	and.w	r3, r3, #31
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	409a      	lsls	r2, r3
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a4f      	ldr	r2, [pc, #316]	@ (8001dc4 <HAL_DMA_Abort+0x5dc>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d072      	beq.n	8001d72 <HAL_DMA_Abort+0x58a>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a4d      	ldr	r2, [pc, #308]	@ (8001dc8 <HAL_DMA_Abort+0x5e0>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d06d      	beq.n	8001d72 <HAL_DMA_Abort+0x58a>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a4c      	ldr	r2, [pc, #304]	@ (8001dcc <HAL_DMA_Abort+0x5e4>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d068      	beq.n	8001d72 <HAL_DMA_Abort+0x58a>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a4a      	ldr	r2, [pc, #296]	@ (8001dd0 <HAL_DMA_Abort+0x5e8>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d063      	beq.n	8001d72 <HAL_DMA_Abort+0x58a>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a49      	ldr	r2, [pc, #292]	@ (8001dd4 <HAL_DMA_Abort+0x5ec>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d05e      	beq.n	8001d72 <HAL_DMA_Abort+0x58a>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a47      	ldr	r2, [pc, #284]	@ (8001dd8 <HAL_DMA_Abort+0x5f0>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d059      	beq.n	8001d72 <HAL_DMA_Abort+0x58a>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a46      	ldr	r2, [pc, #280]	@ (8001ddc <HAL_DMA_Abort+0x5f4>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d054      	beq.n	8001d72 <HAL_DMA_Abort+0x58a>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a44      	ldr	r2, [pc, #272]	@ (8001de0 <HAL_DMA_Abort+0x5f8>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d04f      	beq.n	8001d72 <HAL_DMA_Abort+0x58a>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a43      	ldr	r2, [pc, #268]	@ (8001de4 <HAL_DMA_Abort+0x5fc>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d04a      	beq.n	8001d72 <HAL_DMA_Abort+0x58a>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a41      	ldr	r2, [pc, #260]	@ (8001de8 <HAL_DMA_Abort+0x600>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d045      	beq.n	8001d72 <HAL_DMA_Abort+0x58a>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a40      	ldr	r2, [pc, #256]	@ (8001dec <HAL_DMA_Abort+0x604>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d040      	beq.n	8001d72 <HAL_DMA_Abort+0x58a>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a3e      	ldr	r2, [pc, #248]	@ (8001df0 <HAL_DMA_Abort+0x608>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d03b      	beq.n	8001d72 <HAL_DMA_Abort+0x58a>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a3d      	ldr	r2, [pc, #244]	@ (8001df4 <HAL_DMA_Abort+0x60c>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d036      	beq.n	8001d72 <HAL_DMA_Abort+0x58a>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a3b      	ldr	r2, [pc, #236]	@ (8001df8 <HAL_DMA_Abort+0x610>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d031      	beq.n	8001d72 <HAL_DMA_Abort+0x58a>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a3a      	ldr	r2, [pc, #232]	@ (8001dfc <HAL_DMA_Abort+0x614>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d02c      	beq.n	8001d72 <HAL_DMA_Abort+0x58a>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a38      	ldr	r2, [pc, #224]	@ (8001e00 <HAL_DMA_Abort+0x618>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d027      	beq.n	8001d72 <HAL_DMA_Abort+0x58a>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a37      	ldr	r2, [pc, #220]	@ (8001e04 <HAL_DMA_Abort+0x61c>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d022      	beq.n	8001d72 <HAL_DMA_Abort+0x58a>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a35      	ldr	r2, [pc, #212]	@ (8001e08 <HAL_DMA_Abort+0x620>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d01d      	beq.n	8001d72 <HAL_DMA_Abort+0x58a>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a34      	ldr	r2, [pc, #208]	@ (8001e0c <HAL_DMA_Abort+0x624>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d018      	beq.n	8001d72 <HAL_DMA_Abort+0x58a>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a32      	ldr	r2, [pc, #200]	@ (8001e10 <HAL_DMA_Abort+0x628>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d013      	beq.n	8001d72 <HAL_DMA_Abort+0x58a>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a31      	ldr	r2, [pc, #196]	@ (8001e14 <HAL_DMA_Abort+0x62c>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d00e      	beq.n	8001d72 <HAL_DMA_Abort+0x58a>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a2f      	ldr	r2, [pc, #188]	@ (8001e18 <HAL_DMA_Abort+0x630>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d009      	beq.n	8001d72 <HAL_DMA_Abort+0x58a>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a2e      	ldr	r2, [pc, #184]	@ (8001e1c <HAL_DMA_Abort+0x634>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d004      	beq.n	8001d72 <HAL_DMA_Abort+0x58a>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a2c      	ldr	r2, [pc, #176]	@ (8001e20 <HAL_DMA_Abort+0x638>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d101      	bne.n	8001d76 <HAL_DMA_Abort+0x58e>
 8001d72:	2301      	movs	r3, #1
 8001d74:	e000      	b.n	8001d78 <HAL_DMA_Abort+0x590>
 8001d76:	2300      	movs	r3, #0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d015      	beq.n	8001da8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001d84:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d00c      	beq.n	8001da8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d98:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d9c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001da6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3718      	adds	r7, #24
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40020010 	.word	0x40020010
 8001dc8:	40020028 	.word	0x40020028
 8001dcc:	40020040 	.word	0x40020040
 8001dd0:	40020058 	.word	0x40020058
 8001dd4:	40020070 	.word	0x40020070
 8001dd8:	40020088 	.word	0x40020088
 8001ddc:	400200a0 	.word	0x400200a0
 8001de0:	400200b8 	.word	0x400200b8
 8001de4:	40020410 	.word	0x40020410
 8001de8:	40020428 	.word	0x40020428
 8001dec:	40020440 	.word	0x40020440
 8001df0:	40020458 	.word	0x40020458
 8001df4:	40020470 	.word	0x40020470
 8001df8:	40020488 	.word	0x40020488
 8001dfc:	400204a0 	.word	0x400204a0
 8001e00:	400204b8 	.word	0x400204b8
 8001e04:	58025408 	.word	0x58025408
 8001e08:	5802541c 	.word	0x5802541c
 8001e0c:	58025430 	.word	0x58025430
 8001e10:	58025444 	.word	0x58025444
 8001e14:	58025458 	.word	0x58025458
 8001e18:	5802546c 	.word	0x5802546c
 8001e1c:	58025480 	.word	0x58025480
 8001e20:	58025494 	.word	0x58025494

08001e24 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d101      	bne.n	8001e36 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e237      	b.n	80022a6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d004      	beq.n	8001e4c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2280      	movs	r2, #128	@ 0x80
 8001e46:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e22c      	b.n	80022a6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a5c      	ldr	r2, [pc, #368]	@ (8001fc4 <HAL_DMA_Abort_IT+0x1a0>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d04a      	beq.n	8001eec <HAL_DMA_Abort_IT+0xc8>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a5b      	ldr	r2, [pc, #364]	@ (8001fc8 <HAL_DMA_Abort_IT+0x1a4>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d045      	beq.n	8001eec <HAL_DMA_Abort_IT+0xc8>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a59      	ldr	r2, [pc, #356]	@ (8001fcc <HAL_DMA_Abort_IT+0x1a8>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d040      	beq.n	8001eec <HAL_DMA_Abort_IT+0xc8>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a58      	ldr	r2, [pc, #352]	@ (8001fd0 <HAL_DMA_Abort_IT+0x1ac>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d03b      	beq.n	8001eec <HAL_DMA_Abort_IT+0xc8>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a56      	ldr	r2, [pc, #344]	@ (8001fd4 <HAL_DMA_Abort_IT+0x1b0>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d036      	beq.n	8001eec <HAL_DMA_Abort_IT+0xc8>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a55      	ldr	r2, [pc, #340]	@ (8001fd8 <HAL_DMA_Abort_IT+0x1b4>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d031      	beq.n	8001eec <HAL_DMA_Abort_IT+0xc8>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a53      	ldr	r2, [pc, #332]	@ (8001fdc <HAL_DMA_Abort_IT+0x1b8>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d02c      	beq.n	8001eec <HAL_DMA_Abort_IT+0xc8>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a52      	ldr	r2, [pc, #328]	@ (8001fe0 <HAL_DMA_Abort_IT+0x1bc>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d027      	beq.n	8001eec <HAL_DMA_Abort_IT+0xc8>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a50      	ldr	r2, [pc, #320]	@ (8001fe4 <HAL_DMA_Abort_IT+0x1c0>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d022      	beq.n	8001eec <HAL_DMA_Abort_IT+0xc8>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a4f      	ldr	r2, [pc, #316]	@ (8001fe8 <HAL_DMA_Abort_IT+0x1c4>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d01d      	beq.n	8001eec <HAL_DMA_Abort_IT+0xc8>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a4d      	ldr	r2, [pc, #308]	@ (8001fec <HAL_DMA_Abort_IT+0x1c8>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d018      	beq.n	8001eec <HAL_DMA_Abort_IT+0xc8>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a4c      	ldr	r2, [pc, #304]	@ (8001ff0 <HAL_DMA_Abort_IT+0x1cc>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d013      	beq.n	8001eec <HAL_DMA_Abort_IT+0xc8>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a4a      	ldr	r2, [pc, #296]	@ (8001ff4 <HAL_DMA_Abort_IT+0x1d0>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d00e      	beq.n	8001eec <HAL_DMA_Abort_IT+0xc8>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a49      	ldr	r2, [pc, #292]	@ (8001ff8 <HAL_DMA_Abort_IT+0x1d4>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d009      	beq.n	8001eec <HAL_DMA_Abort_IT+0xc8>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a47      	ldr	r2, [pc, #284]	@ (8001ffc <HAL_DMA_Abort_IT+0x1d8>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d004      	beq.n	8001eec <HAL_DMA_Abort_IT+0xc8>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a46      	ldr	r2, [pc, #280]	@ (8002000 <HAL_DMA_Abort_IT+0x1dc>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d101      	bne.n	8001ef0 <HAL_DMA_Abort_IT+0xcc>
 8001eec:	2301      	movs	r3, #1
 8001eee:	e000      	b.n	8001ef2 <HAL_DMA_Abort_IT+0xce>
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	f000 8086 	beq.w	8002004 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2204      	movs	r2, #4
 8001efc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a2f      	ldr	r2, [pc, #188]	@ (8001fc4 <HAL_DMA_Abort_IT+0x1a0>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d04a      	beq.n	8001fa0 <HAL_DMA_Abort_IT+0x17c>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a2e      	ldr	r2, [pc, #184]	@ (8001fc8 <HAL_DMA_Abort_IT+0x1a4>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d045      	beq.n	8001fa0 <HAL_DMA_Abort_IT+0x17c>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a2c      	ldr	r2, [pc, #176]	@ (8001fcc <HAL_DMA_Abort_IT+0x1a8>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d040      	beq.n	8001fa0 <HAL_DMA_Abort_IT+0x17c>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a2b      	ldr	r2, [pc, #172]	@ (8001fd0 <HAL_DMA_Abort_IT+0x1ac>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d03b      	beq.n	8001fa0 <HAL_DMA_Abort_IT+0x17c>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a29      	ldr	r2, [pc, #164]	@ (8001fd4 <HAL_DMA_Abort_IT+0x1b0>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d036      	beq.n	8001fa0 <HAL_DMA_Abort_IT+0x17c>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a28      	ldr	r2, [pc, #160]	@ (8001fd8 <HAL_DMA_Abort_IT+0x1b4>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d031      	beq.n	8001fa0 <HAL_DMA_Abort_IT+0x17c>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a26      	ldr	r2, [pc, #152]	@ (8001fdc <HAL_DMA_Abort_IT+0x1b8>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d02c      	beq.n	8001fa0 <HAL_DMA_Abort_IT+0x17c>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a25      	ldr	r2, [pc, #148]	@ (8001fe0 <HAL_DMA_Abort_IT+0x1bc>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d027      	beq.n	8001fa0 <HAL_DMA_Abort_IT+0x17c>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a23      	ldr	r2, [pc, #140]	@ (8001fe4 <HAL_DMA_Abort_IT+0x1c0>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d022      	beq.n	8001fa0 <HAL_DMA_Abort_IT+0x17c>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a22      	ldr	r2, [pc, #136]	@ (8001fe8 <HAL_DMA_Abort_IT+0x1c4>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d01d      	beq.n	8001fa0 <HAL_DMA_Abort_IT+0x17c>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a20      	ldr	r2, [pc, #128]	@ (8001fec <HAL_DMA_Abort_IT+0x1c8>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d018      	beq.n	8001fa0 <HAL_DMA_Abort_IT+0x17c>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a1f      	ldr	r2, [pc, #124]	@ (8001ff0 <HAL_DMA_Abort_IT+0x1cc>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d013      	beq.n	8001fa0 <HAL_DMA_Abort_IT+0x17c>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a1d      	ldr	r2, [pc, #116]	@ (8001ff4 <HAL_DMA_Abort_IT+0x1d0>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d00e      	beq.n	8001fa0 <HAL_DMA_Abort_IT+0x17c>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a1c      	ldr	r2, [pc, #112]	@ (8001ff8 <HAL_DMA_Abort_IT+0x1d4>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d009      	beq.n	8001fa0 <HAL_DMA_Abort_IT+0x17c>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a1a      	ldr	r2, [pc, #104]	@ (8001ffc <HAL_DMA_Abort_IT+0x1d8>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d004      	beq.n	8001fa0 <HAL_DMA_Abort_IT+0x17c>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a19      	ldr	r2, [pc, #100]	@ (8002000 <HAL_DMA_Abort_IT+0x1dc>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d108      	bne.n	8001fb2 <HAL_DMA_Abort_IT+0x18e>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f022 0201 	bic.w	r2, r2, #1
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	e178      	b.n	80022a4 <HAL_DMA_Abort_IT+0x480>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f022 0201 	bic.w	r2, r2, #1
 8001fc0:	601a      	str	r2, [r3, #0]
 8001fc2:	e16f      	b.n	80022a4 <HAL_DMA_Abort_IT+0x480>
 8001fc4:	40020010 	.word	0x40020010
 8001fc8:	40020028 	.word	0x40020028
 8001fcc:	40020040 	.word	0x40020040
 8001fd0:	40020058 	.word	0x40020058
 8001fd4:	40020070 	.word	0x40020070
 8001fd8:	40020088 	.word	0x40020088
 8001fdc:	400200a0 	.word	0x400200a0
 8001fe0:	400200b8 	.word	0x400200b8
 8001fe4:	40020410 	.word	0x40020410
 8001fe8:	40020428 	.word	0x40020428
 8001fec:	40020440 	.word	0x40020440
 8001ff0:	40020458 	.word	0x40020458
 8001ff4:	40020470 	.word	0x40020470
 8001ff8:	40020488 	.word	0x40020488
 8001ffc:	400204a0 	.word	0x400204a0
 8002000:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f022 020e 	bic.w	r2, r2, #14
 8002012:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a6c      	ldr	r2, [pc, #432]	@ (80021cc <HAL_DMA_Abort_IT+0x3a8>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d04a      	beq.n	80020b4 <HAL_DMA_Abort_IT+0x290>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a6b      	ldr	r2, [pc, #428]	@ (80021d0 <HAL_DMA_Abort_IT+0x3ac>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d045      	beq.n	80020b4 <HAL_DMA_Abort_IT+0x290>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a69      	ldr	r2, [pc, #420]	@ (80021d4 <HAL_DMA_Abort_IT+0x3b0>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d040      	beq.n	80020b4 <HAL_DMA_Abort_IT+0x290>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a68      	ldr	r2, [pc, #416]	@ (80021d8 <HAL_DMA_Abort_IT+0x3b4>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d03b      	beq.n	80020b4 <HAL_DMA_Abort_IT+0x290>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a66      	ldr	r2, [pc, #408]	@ (80021dc <HAL_DMA_Abort_IT+0x3b8>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d036      	beq.n	80020b4 <HAL_DMA_Abort_IT+0x290>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a65      	ldr	r2, [pc, #404]	@ (80021e0 <HAL_DMA_Abort_IT+0x3bc>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d031      	beq.n	80020b4 <HAL_DMA_Abort_IT+0x290>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a63      	ldr	r2, [pc, #396]	@ (80021e4 <HAL_DMA_Abort_IT+0x3c0>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d02c      	beq.n	80020b4 <HAL_DMA_Abort_IT+0x290>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a62      	ldr	r2, [pc, #392]	@ (80021e8 <HAL_DMA_Abort_IT+0x3c4>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d027      	beq.n	80020b4 <HAL_DMA_Abort_IT+0x290>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a60      	ldr	r2, [pc, #384]	@ (80021ec <HAL_DMA_Abort_IT+0x3c8>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d022      	beq.n	80020b4 <HAL_DMA_Abort_IT+0x290>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a5f      	ldr	r2, [pc, #380]	@ (80021f0 <HAL_DMA_Abort_IT+0x3cc>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d01d      	beq.n	80020b4 <HAL_DMA_Abort_IT+0x290>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a5d      	ldr	r2, [pc, #372]	@ (80021f4 <HAL_DMA_Abort_IT+0x3d0>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d018      	beq.n	80020b4 <HAL_DMA_Abort_IT+0x290>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a5c      	ldr	r2, [pc, #368]	@ (80021f8 <HAL_DMA_Abort_IT+0x3d4>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d013      	beq.n	80020b4 <HAL_DMA_Abort_IT+0x290>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a5a      	ldr	r2, [pc, #360]	@ (80021fc <HAL_DMA_Abort_IT+0x3d8>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d00e      	beq.n	80020b4 <HAL_DMA_Abort_IT+0x290>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a59      	ldr	r2, [pc, #356]	@ (8002200 <HAL_DMA_Abort_IT+0x3dc>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d009      	beq.n	80020b4 <HAL_DMA_Abort_IT+0x290>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a57      	ldr	r2, [pc, #348]	@ (8002204 <HAL_DMA_Abort_IT+0x3e0>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d004      	beq.n	80020b4 <HAL_DMA_Abort_IT+0x290>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a56      	ldr	r2, [pc, #344]	@ (8002208 <HAL_DMA_Abort_IT+0x3e4>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d108      	bne.n	80020c6 <HAL_DMA_Abort_IT+0x2a2>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f022 0201 	bic.w	r2, r2, #1
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	e007      	b.n	80020d6 <HAL_DMA_Abort_IT+0x2b2>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f022 0201 	bic.w	r2, r2, #1
 80020d4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a3c      	ldr	r2, [pc, #240]	@ (80021cc <HAL_DMA_Abort_IT+0x3a8>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d072      	beq.n	80021c6 <HAL_DMA_Abort_IT+0x3a2>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a3a      	ldr	r2, [pc, #232]	@ (80021d0 <HAL_DMA_Abort_IT+0x3ac>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d06d      	beq.n	80021c6 <HAL_DMA_Abort_IT+0x3a2>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a39      	ldr	r2, [pc, #228]	@ (80021d4 <HAL_DMA_Abort_IT+0x3b0>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d068      	beq.n	80021c6 <HAL_DMA_Abort_IT+0x3a2>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a37      	ldr	r2, [pc, #220]	@ (80021d8 <HAL_DMA_Abort_IT+0x3b4>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d063      	beq.n	80021c6 <HAL_DMA_Abort_IT+0x3a2>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a36      	ldr	r2, [pc, #216]	@ (80021dc <HAL_DMA_Abort_IT+0x3b8>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d05e      	beq.n	80021c6 <HAL_DMA_Abort_IT+0x3a2>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a34      	ldr	r2, [pc, #208]	@ (80021e0 <HAL_DMA_Abort_IT+0x3bc>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d059      	beq.n	80021c6 <HAL_DMA_Abort_IT+0x3a2>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a33      	ldr	r2, [pc, #204]	@ (80021e4 <HAL_DMA_Abort_IT+0x3c0>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d054      	beq.n	80021c6 <HAL_DMA_Abort_IT+0x3a2>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a31      	ldr	r2, [pc, #196]	@ (80021e8 <HAL_DMA_Abort_IT+0x3c4>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d04f      	beq.n	80021c6 <HAL_DMA_Abort_IT+0x3a2>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a30      	ldr	r2, [pc, #192]	@ (80021ec <HAL_DMA_Abort_IT+0x3c8>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d04a      	beq.n	80021c6 <HAL_DMA_Abort_IT+0x3a2>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a2e      	ldr	r2, [pc, #184]	@ (80021f0 <HAL_DMA_Abort_IT+0x3cc>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d045      	beq.n	80021c6 <HAL_DMA_Abort_IT+0x3a2>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a2d      	ldr	r2, [pc, #180]	@ (80021f4 <HAL_DMA_Abort_IT+0x3d0>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d040      	beq.n	80021c6 <HAL_DMA_Abort_IT+0x3a2>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a2b      	ldr	r2, [pc, #172]	@ (80021f8 <HAL_DMA_Abort_IT+0x3d4>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d03b      	beq.n	80021c6 <HAL_DMA_Abort_IT+0x3a2>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a2a      	ldr	r2, [pc, #168]	@ (80021fc <HAL_DMA_Abort_IT+0x3d8>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d036      	beq.n	80021c6 <HAL_DMA_Abort_IT+0x3a2>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a28      	ldr	r2, [pc, #160]	@ (8002200 <HAL_DMA_Abort_IT+0x3dc>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d031      	beq.n	80021c6 <HAL_DMA_Abort_IT+0x3a2>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a27      	ldr	r2, [pc, #156]	@ (8002204 <HAL_DMA_Abort_IT+0x3e0>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d02c      	beq.n	80021c6 <HAL_DMA_Abort_IT+0x3a2>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a25      	ldr	r2, [pc, #148]	@ (8002208 <HAL_DMA_Abort_IT+0x3e4>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d027      	beq.n	80021c6 <HAL_DMA_Abort_IT+0x3a2>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a24      	ldr	r2, [pc, #144]	@ (800220c <HAL_DMA_Abort_IT+0x3e8>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d022      	beq.n	80021c6 <HAL_DMA_Abort_IT+0x3a2>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a22      	ldr	r2, [pc, #136]	@ (8002210 <HAL_DMA_Abort_IT+0x3ec>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d01d      	beq.n	80021c6 <HAL_DMA_Abort_IT+0x3a2>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a21      	ldr	r2, [pc, #132]	@ (8002214 <HAL_DMA_Abort_IT+0x3f0>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d018      	beq.n	80021c6 <HAL_DMA_Abort_IT+0x3a2>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a1f      	ldr	r2, [pc, #124]	@ (8002218 <HAL_DMA_Abort_IT+0x3f4>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d013      	beq.n	80021c6 <HAL_DMA_Abort_IT+0x3a2>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a1e      	ldr	r2, [pc, #120]	@ (800221c <HAL_DMA_Abort_IT+0x3f8>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d00e      	beq.n	80021c6 <HAL_DMA_Abort_IT+0x3a2>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a1c      	ldr	r2, [pc, #112]	@ (8002220 <HAL_DMA_Abort_IT+0x3fc>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d009      	beq.n	80021c6 <HAL_DMA_Abort_IT+0x3a2>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a1b      	ldr	r2, [pc, #108]	@ (8002224 <HAL_DMA_Abort_IT+0x400>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d004      	beq.n	80021c6 <HAL_DMA_Abort_IT+0x3a2>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a19      	ldr	r2, [pc, #100]	@ (8002228 <HAL_DMA_Abort_IT+0x404>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d132      	bne.n	800222c <HAL_DMA_Abort_IT+0x408>
 80021c6:	2301      	movs	r3, #1
 80021c8:	e031      	b.n	800222e <HAL_DMA_Abort_IT+0x40a>
 80021ca:	bf00      	nop
 80021cc:	40020010 	.word	0x40020010
 80021d0:	40020028 	.word	0x40020028
 80021d4:	40020040 	.word	0x40020040
 80021d8:	40020058 	.word	0x40020058
 80021dc:	40020070 	.word	0x40020070
 80021e0:	40020088 	.word	0x40020088
 80021e4:	400200a0 	.word	0x400200a0
 80021e8:	400200b8 	.word	0x400200b8
 80021ec:	40020410 	.word	0x40020410
 80021f0:	40020428 	.word	0x40020428
 80021f4:	40020440 	.word	0x40020440
 80021f8:	40020458 	.word	0x40020458
 80021fc:	40020470 	.word	0x40020470
 8002200:	40020488 	.word	0x40020488
 8002204:	400204a0 	.word	0x400204a0
 8002208:	400204b8 	.word	0x400204b8
 800220c:	58025408 	.word	0x58025408
 8002210:	5802541c 	.word	0x5802541c
 8002214:	58025430 	.word	0x58025430
 8002218:	58025444 	.word	0x58025444
 800221c:	58025458 	.word	0x58025458
 8002220:	5802546c 	.word	0x5802546c
 8002224:	58025480 	.word	0x58025480
 8002228:	58025494 	.word	0x58025494
 800222c:	2300      	movs	r3, #0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d028      	beq.n	8002284 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800223c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002240:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002246:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800224c:	f003 031f 	and.w	r3, r3, #31
 8002250:	2201      	movs	r2, #1
 8002252:	409a      	lsls	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002260:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002266:	2b00      	cmp	r3, #0
 8002268:	d00c      	beq.n	8002284 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002274:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002278:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002282:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002298:	2b00      	cmp	r3, #0
 800229a:	d003      	beq.n	80022a4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop

080022b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b089      	sub	sp, #36	@ 0x24
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80022ba:	2300      	movs	r3, #0
 80022bc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80022be:	4b89      	ldr	r3, [pc, #548]	@ (80024e4 <HAL_GPIO_Init+0x234>)
 80022c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80022c2:	e194      	b.n	80025ee <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	2101      	movs	r1, #1
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	fa01 f303 	lsl.w	r3, r1, r3
 80022d0:	4013      	ands	r3, r2
 80022d2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f000 8186 	beq.w	80025e8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f003 0303 	and.w	r3, r3, #3
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d005      	beq.n	80022f4 <HAL_GPIO_Init+0x44>
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f003 0303 	and.w	r3, r3, #3
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d130      	bne.n	8002356 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	2203      	movs	r2, #3
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	43db      	mvns	r3, r3
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	4013      	ands	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	68da      	ldr	r2, [r3, #12]
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	4313      	orrs	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800232a:	2201      	movs	r2, #1
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	fa02 f303 	lsl.w	r3, r2, r3
 8002332:	43db      	mvns	r3, r3
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	4013      	ands	r3, r2
 8002338:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	091b      	lsrs	r3, r3, #4
 8002340:	f003 0201 	and.w	r2, r3, #1
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	4313      	orrs	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f003 0303 	and.w	r3, r3, #3
 800235e:	2b03      	cmp	r3, #3
 8002360:	d017      	beq.n	8002392 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	2203      	movs	r2, #3
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	43db      	mvns	r3, r3
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	4013      	ands	r3, r2
 8002378:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	689a      	ldr	r2, [r3, #8]
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	4313      	orrs	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f003 0303 	and.w	r3, r3, #3
 800239a:	2b02      	cmp	r3, #2
 800239c:	d123      	bne.n	80023e6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	08da      	lsrs	r2, r3, #3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	3208      	adds	r2, #8
 80023a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	f003 0307 	and.w	r3, r3, #7
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	220f      	movs	r2, #15
 80023b6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ba:	43db      	mvns	r3, r3
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	4013      	ands	r3, r2
 80023c0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	691a      	ldr	r2, [r3, #16]
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	f003 0307 	and.w	r3, r3, #7
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	08da      	lsrs	r2, r3, #3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3208      	adds	r2, #8
 80023e0:	69b9      	ldr	r1, [r7, #24]
 80023e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	2203      	movs	r2, #3
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	43db      	mvns	r3, r3
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	4013      	ands	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f003 0203 	and.w	r2, r3, #3
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	fa02 f303 	lsl.w	r3, r2, r3
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	4313      	orrs	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002422:	2b00      	cmp	r3, #0
 8002424:	f000 80e0 	beq.w	80025e8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002428:	4b2f      	ldr	r3, [pc, #188]	@ (80024e8 <HAL_GPIO_Init+0x238>)
 800242a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800242e:	4a2e      	ldr	r2, [pc, #184]	@ (80024e8 <HAL_GPIO_Init+0x238>)
 8002430:	f043 0302 	orr.w	r3, r3, #2
 8002434:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002438:	4b2b      	ldr	r3, [pc, #172]	@ (80024e8 <HAL_GPIO_Init+0x238>)
 800243a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	60fb      	str	r3, [r7, #12]
 8002444:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002446:	4a29      	ldr	r2, [pc, #164]	@ (80024ec <HAL_GPIO_Init+0x23c>)
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	089b      	lsrs	r3, r3, #2
 800244c:	3302      	adds	r3, #2
 800244e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002452:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	f003 0303 	and.w	r3, r3, #3
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	220f      	movs	r2, #15
 800245e:	fa02 f303 	lsl.w	r3, r2, r3
 8002462:	43db      	mvns	r3, r3
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	4013      	ands	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a20      	ldr	r2, [pc, #128]	@ (80024f0 <HAL_GPIO_Init+0x240>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d052      	beq.n	8002518 <HAL_GPIO_Init+0x268>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a1f      	ldr	r2, [pc, #124]	@ (80024f4 <HAL_GPIO_Init+0x244>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d031      	beq.n	80024de <HAL_GPIO_Init+0x22e>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a1e      	ldr	r2, [pc, #120]	@ (80024f8 <HAL_GPIO_Init+0x248>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d02b      	beq.n	80024da <HAL_GPIO_Init+0x22a>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a1d      	ldr	r2, [pc, #116]	@ (80024fc <HAL_GPIO_Init+0x24c>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d025      	beq.n	80024d6 <HAL_GPIO_Init+0x226>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a1c      	ldr	r2, [pc, #112]	@ (8002500 <HAL_GPIO_Init+0x250>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d01f      	beq.n	80024d2 <HAL_GPIO_Init+0x222>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a1b      	ldr	r2, [pc, #108]	@ (8002504 <HAL_GPIO_Init+0x254>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d019      	beq.n	80024ce <HAL_GPIO_Init+0x21e>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a1a      	ldr	r2, [pc, #104]	@ (8002508 <HAL_GPIO_Init+0x258>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d013      	beq.n	80024ca <HAL_GPIO_Init+0x21a>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a19      	ldr	r2, [pc, #100]	@ (800250c <HAL_GPIO_Init+0x25c>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d00d      	beq.n	80024c6 <HAL_GPIO_Init+0x216>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a18      	ldr	r2, [pc, #96]	@ (8002510 <HAL_GPIO_Init+0x260>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d007      	beq.n	80024c2 <HAL_GPIO_Init+0x212>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a17      	ldr	r2, [pc, #92]	@ (8002514 <HAL_GPIO_Init+0x264>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d101      	bne.n	80024be <HAL_GPIO_Init+0x20e>
 80024ba:	2309      	movs	r3, #9
 80024bc:	e02d      	b.n	800251a <HAL_GPIO_Init+0x26a>
 80024be:	230a      	movs	r3, #10
 80024c0:	e02b      	b.n	800251a <HAL_GPIO_Init+0x26a>
 80024c2:	2308      	movs	r3, #8
 80024c4:	e029      	b.n	800251a <HAL_GPIO_Init+0x26a>
 80024c6:	2307      	movs	r3, #7
 80024c8:	e027      	b.n	800251a <HAL_GPIO_Init+0x26a>
 80024ca:	2306      	movs	r3, #6
 80024cc:	e025      	b.n	800251a <HAL_GPIO_Init+0x26a>
 80024ce:	2305      	movs	r3, #5
 80024d0:	e023      	b.n	800251a <HAL_GPIO_Init+0x26a>
 80024d2:	2304      	movs	r3, #4
 80024d4:	e021      	b.n	800251a <HAL_GPIO_Init+0x26a>
 80024d6:	2303      	movs	r3, #3
 80024d8:	e01f      	b.n	800251a <HAL_GPIO_Init+0x26a>
 80024da:	2302      	movs	r3, #2
 80024dc:	e01d      	b.n	800251a <HAL_GPIO_Init+0x26a>
 80024de:	2301      	movs	r3, #1
 80024e0:	e01b      	b.n	800251a <HAL_GPIO_Init+0x26a>
 80024e2:	bf00      	nop
 80024e4:	58000080 	.word	0x58000080
 80024e8:	58024400 	.word	0x58024400
 80024ec:	58000400 	.word	0x58000400
 80024f0:	58020000 	.word	0x58020000
 80024f4:	58020400 	.word	0x58020400
 80024f8:	58020800 	.word	0x58020800
 80024fc:	58020c00 	.word	0x58020c00
 8002500:	58021000 	.word	0x58021000
 8002504:	58021400 	.word	0x58021400
 8002508:	58021800 	.word	0x58021800
 800250c:	58021c00 	.word	0x58021c00
 8002510:	58022000 	.word	0x58022000
 8002514:	58022400 	.word	0x58022400
 8002518:	2300      	movs	r3, #0
 800251a:	69fa      	ldr	r2, [r7, #28]
 800251c:	f002 0203 	and.w	r2, r2, #3
 8002520:	0092      	lsls	r2, r2, #2
 8002522:	4093      	lsls	r3, r2
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	4313      	orrs	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800252a:	4938      	ldr	r1, [pc, #224]	@ (800260c <HAL_GPIO_Init+0x35c>)
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	089b      	lsrs	r3, r3, #2
 8002530:	3302      	adds	r3, #2
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002538:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	43db      	mvns	r3, r3
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	4013      	ands	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d003      	beq.n	800255e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	4313      	orrs	r3, r2
 800255c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800255e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002566:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	43db      	mvns	r3, r3
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	4013      	ands	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d003      	beq.n	800258c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	4313      	orrs	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800258c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	43db      	mvns	r3, r3
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	4013      	ands	r3, r2
 80025a2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d003      	beq.n	80025b8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	43db      	mvns	r3, r3
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	4013      	ands	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d003      	beq.n	80025e2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	4313      	orrs	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	3301      	adds	r3, #1
 80025ec:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	fa22 f303 	lsr.w	r3, r2, r3
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	f47f ae63 	bne.w	80022c4 <HAL_GPIO_Init+0x14>
  }
}
 80025fe:	bf00      	nop
 8002600:	bf00      	nop
 8002602:	3724      	adds	r7, #36	@ 0x24
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr
 800260c:	58000400 	.word	0x58000400

08002610 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	460b      	mov	r3, r1
 800261a:	807b      	strh	r3, [r7, #2]
 800261c:	4613      	mov	r3, r2
 800261e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002620:	787b      	ldrb	r3, [r7, #1]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d003      	beq.n	800262e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002626:	887a      	ldrh	r2, [r7, #2]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800262c:	e003      	b.n	8002636 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800262e:	887b      	ldrh	r3, [r7, #2]
 8002630:	041a      	lsls	r2, r3, #16
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	619a      	str	r2, [r3, #24]
}
 8002636:	bf00      	nop
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr

08002642 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002642:	b580      	push	{r7, lr}
 8002644:	b082      	sub	sp, #8
 8002646:	af00      	add	r7, sp, #0
 8002648:	4603      	mov	r3, r0
 800264a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800264c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002650:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002654:	88fb      	ldrh	r3, [r7, #6]
 8002656:	4013      	ands	r3, r2
 8002658:	2b00      	cmp	r3, #0
 800265a:	d008      	beq.n	800266e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800265c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002660:	88fb      	ldrh	r3, [r7, #6]
 8002662:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002666:	88fb      	ldrh	r3, [r7, #6]
 8002668:	4618      	mov	r0, r3
 800266a:	f000 f804 	bl	8002676 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800266e:	bf00      	nop
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002676:	b480      	push	{r7}
 8002678:	b083      	sub	sp, #12
 800267a:	af00      	add	r7, sp, #0
 800267c:	4603      	mov	r3, r0
 800267e:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002680:	bf00      	nop
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002694:	4b19      	ldr	r3, [pc, #100]	@ (80026fc <HAL_PWREx_ConfigSupply+0x70>)
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	f003 0304 	and.w	r3, r3, #4
 800269c:	2b04      	cmp	r3, #4
 800269e:	d00a      	beq.n	80026b6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80026a0:	4b16      	ldr	r3, [pc, #88]	@ (80026fc <HAL_PWREx_ConfigSupply+0x70>)
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	f003 0307 	and.w	r3, r3, #7
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d001      	beq.n	80026b2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e01f      	b.n	80026f2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80026b2:	2300      	movs	r3, #0
 80026b4:	e01d      	b.n	80026f2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80026b6:	4b11      	ldr	r3, [pc, #68]	@ (80026fc <HAL_PWREx_ConfigSupply+0x70>)
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	f023 0207 	bic.w	r2, r3, #7
 80026be:	490f      	ldr	r1, [pc, #60]	@ (80026fc <HAL_PWREx_ConfigSupply+0x70>)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80026c6:	f7fe feef 	bl	80014a8 <HAL_GetTick>
 80026ca:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80026cc:	e009      	b.n	80026e2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80026ce:	f7fe feeb 	bl	80014a8 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80026dc:	d901      	bls.n	80026e2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e007      	b.n	80026f2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80026e2:	4b06      	ldr	r3, [pc, #24]	@ (80026fc <HAL_PWREx_ConfigSupply+0x70>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026ee:	d1ee      	bne.n	80026ce <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3710      	adds	r7, #16
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	58024800 	.word	0x58024800

08002700 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b08c      	sub	sp, #48	@ 0x30
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d102      	bne.n	8002714 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	f000 bc48 	b.w	8002fa4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0301 	and.w	r3, r3, #1
 800271c:	2b00      	cmp	r3, #0
 800271e:	f000 8088 	beq.w	8002832 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002722:	4b99      	ldr	r3, [pc, #612]	@ (8002988 <HAL_RCC_OscConfig+0x288>)
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800272a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800272c:	4b96      	ldr	r3, [pc, #600]	@ (8002988 <HAL_RCC_OscConfig+0x288>)
 800272e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002730:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002734:	2b10      	cmp	r3, #16
 8002736:	d007      	beq.n	8002748 <HAL_RCC_OscConfig+0x48>
 8002738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800273a:	2b18      	cmp	r3, #24
 800273c:	d111      	bne.n	8002762 <HAL_RCC_OscConfig+0x62>
 800273e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002740:	f003 0303 	and.w	r3, r3, #3
 8002744:	2b02      	cmp	r3, #2
 8002746:	d10c      	bne.n	8002762 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002748:	4b8f      	ldr	r3, [pc, #572]	@ (8002988 <HAL_RCC_OscConfig+0x288>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d06d      	beq.n	8002830 <HAL_RCC_OscConfig+0x130>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d169      	bne.n	8002830 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	f000 bc21 	b.w	8002fa4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800276a:	d106      	bne.n	800277a <HAL_RCC_OscConfig+0x7a>
 800276c:	4b86      	ldr	r3, [pc, #536]	@ (8002988 <HAL_RCC_OscConfig+0x288>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a85      	ldr	r2, [pc, #532]	@ (8002988 <HAL_RCC_OscConfig+0x288>)
 8002772:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002776:	6013      	str	r3, [r2, #0]
 8002778:	e02e      	b.n	80027d8 <HAL_RCC_OscConfig+0xd8>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d10c      	bne.n	800279c <HAL_RCC_OscConfig+0x9c>
 8002782:	4b81      	ldr	r3, [pc, #516]	@ (8002988 <HAL_RCC_OscConfig+0x288>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a80      	ldr	r2, [pc, #512]	@ (8002988 <HAL_RCC_OscConfig+0x288>)
 8002788:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800278c:	6013      	str	r3, [r2, #0]
 800278e:	4b7e      	ldr	r3, [pc, #504]	@ (8002988 <HAL_RCC_OscConfig+0x288>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a7d      	ldr	r2, [pc, #500]	@ (8002988 <HAL_RCC_OscConfig+0x288>)
 8002794:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002798:	6013      	str	r3, [r2, #0]
 800279a:	e01d      	b.n	80027d8 <HAL_RCC_OscConfig+0xd8>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027a4:	d10c      	bne.n	80027c0 <HAL_RCC_OscConfig+0xc0>
 80027a6:	4b78      	ldr	r3, [pc, #480]	@ (8002988 <HAL_RCC_OscConfig+0x288>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a77      	ldr	r2, [pc, #476]	@ (8002988 <HAL_RCC_OscConfig+0x288>)
 80027ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027b0:	6013      	str	r3, [r2, #0]
 80027b2:	4b75      	ldr	r3, [pc, #468]	@ (8002988 <HAL_RCC_OscConfig+0x288>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a74      	ldr	r2, [pc, #464]	@ (8002988 <HAL_RCC_OscConfig+0x288>)
 80027b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027bc:	6013      	str	r3, [r2, #0]
 80027be:	e00b      	b.n	80027d8 <HAL_RCC_OscConfig+0xd8>
 80027c0:	4b71      	ldr	r3, [pc, #452]	@ (8002988 <HAL_RCC_OscConfig+0x288>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a70      	ldr	r2, [pc, #448]	@ (8002988 <HAL_RCC_OscConfig+0x288>)
 80027c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027ca:	6013      	str	r3, [r2, #0]
 80027cc:	4b6e      	ldr	r3, [pc, #440]	@ (8002988 <HAL_RCC_OscConfig+0x288>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a6d      	ldr	r2, [pc, #436]	@ (8002988 <HAL_RCC_OscConfig+0x288>)
 80027d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d013      	beq.n	8002808 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e0:	f7fe fe62 	bl	80014a8 <HAL_GetTick>
 80027e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027e8:	f7fe fe5e 	bl	80014a8 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b64      	cmp	r3, #100	@ 0x64
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e3d4      	b.n	8002fa4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80027fa:	4b63      	ldr	r3, [pc, #396]	@ (8002988 <HAL_RCC_OscConfig+0x288>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d0f0      	beq.n	80027e8 <HAL_RCC_OscConfig+0xe8>
 8002806:	e014      	b.n	8002832 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002808:	f7fe fe4e 	bl	80014a8 <HAL_GetTick>
 800280c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800280e:	e008      	b.n	8002822 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002810:	f7fe fe4a 	bl	80014a8 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b64      	cmp	r3, #100	@ 0x64
 800281c:	d901      	bls.n	8002822 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e3c0      	b.n	8002fa4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002822:	4b59      	ldr	r3, [pc, #356]	@ (8002988 <HAL_RCC_OscConfig+0x288>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1f0      	bne.n	8002810 <HAL_RCC_OscConfig+0x110>
 800282e:	e000      	b.n	8002832 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002830:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	2b00      	cmp	r3, #0
 800283c:	f000 80ca 	beq.w	80029d4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002840:	4b51      	ldr	r3, [pc, #324]	@ (8002988 <HAL_RCC_OscConfig+0x288>)
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002848:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800284a:	4b4f      	ldr	r3, [pc, #316]	@ (8002988 <HAL_RCC_OscConfig+0x288>)
 800284c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800284e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002850:	6a3b      	ldr	r3, [r7, #32]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d007      	beq.n	8002866 <HAL_RCC_OscConfig+0x166>
 8002856:	6a3b      	ldr	r3, [r7, #32]
 8002858:	2b18      	cmp	r3, #24
 800285a:	d156      	bne.n	800290a <HAL_RCC_OscConfig+0x20a>
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	f003 0303 	and.w	r3, r3, #3
 8002862:	2b00      	cmp	r3, #0
 8002864:	d151      	bne.n	800290a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002866:	4b48      	ldr	r3, [pc, #288]	@ (8002988 <HAL_RCC_OscConfig+0x288>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0304 	and.w	r3, r3, #4
 800286e:	2b00      	cmp	r3, #0
 8002870:	d005      	beq.n	800287e <HAL_RCC_OscConfig+0x17e>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d101      	bne.n	800287e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e392      	b.n	8002fa4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800287e:	4b42      	ldr	r3, [pc, #264]	@ (8002988 <HAL_RCC_OscConfig+0x288>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f023 0219 	bic.w	r2, r3, #25
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	493f      	ldr	r1, [pc, #252]	@ (8002988 <HAL_RCC_OscConfig+0x288>)
 800288c:	4313      	orrs	r3, r2
 800288e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002890:	f7fe fe0a 	bl	80014a8 <HAL_GetTick>
 8002894:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002896:	e008      	b.n	80028aa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002898:	f7fe fe06 	bl	80014a8 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e37c      	b.n	8002fa4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028aa:	4b37      	ldr	r3, [pc, #220]	@ (8002988 <HAL_RCC_OscConfig+0x288>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0304 	and.w	r3, r3, #4
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d0f0      	beq.n	8002898 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028b6:	f7fe fe03 	bl	80014c0 <HAL_GetREVID>
 80028ba:	4603      	mov	r3, r0
 80028bc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d817      	bhi.n	80028f4 <HAL_RCC_OscConfig+0x1f4>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	2b40      	cmp	r3, #64	@ 0x40
 80028ca:	d108      	bne.n	80028de <HAL_RCC_OscConfig+0x1de>
 80028cc:	4b2e      	ldr	r3, [pc, #184]	@ (8002988 <HAL_RCC_OscConfig+0x288>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80028d4:	4a2c      	ldr	r2, [pc, #176]	@ (8002988 <HAL_RCC_OscConfig+0x288>)
 80028d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028da:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028dc:	e07a      	b.n	80029d4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028de:	4b2a      	ldr	r3, [pc, #168]	@ (8002988 <HAL_RCC_OscConfig+0x288>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	031b      	lsls	r3, r3, #12
 80028ec:	4926      	ldr	r1, [pc, #152]	@ (8002988 <HAL_RCC_OscConfig+0x288>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028f2:	e06f      	b.n	80029d4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028f4:	4b24      	ldr	r3, [pc, #144]	@ (8002988 <HAL_RCC_OscConfig+0x288>)
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	061b      	lsls	r3, r3, #24
 8002902:	4921      	ldr	r1, [pc, #132]	@ (8002988 <HAL_RCC_OscConfig+0x288>)
 8002904:	4313      	orrs	r3, r2
 8002906:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002908:	e064      	b.n	80029d4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d047      	beq.n	80029a2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002912:	4b1d      	ldr	r3, [pc, #116]	@ (8002988 <HAL_RCC_OscConfig+0x288>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f023 0219 	bic.w	r2, r3, #25
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	491a      	ldr	r1, [pc, #104]	@ (8002988 <HAL_RCC_OscConfig+0x288>)
 8002920:	4313      	orrs	r3, r2
 8002922:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002924:	f7fe fdc0 	bl	80014a8 <HAL_GetTick>
 8002928:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800292c:	f7fe fdbc 	bl	80014a8 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e332      	b.n	8002fa4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800293e:	4b12      	ldr	r3, [pc, #72]	@ (8002988 <HAL_RCC_OscConfig+0x288>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0304 	and.w	r3, r3, #4
 8002946:	2b00      	cmp	r3, #0
 8002948:	d0f0      	beq.n	800292c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800294a:	f7fe fdb9 	bl	80014c0 <HAL_GetREVID>
 800294e:	4603      	mov	r3, r0
 8002950:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002954:	4293      	cmp	r3, r2
 8002956:	d819      	bhi.n	800298c <HAL_RCC_OscConfig+0x28c>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	691b      	ldr	r3, [r3, #16]
 800295c:	2b40      	cmp	r3, #64	@ 0x40
 800295e:	d108      	bne.n	8002972 <HAL_RCC_OscConfig+0x272>
 8002960:	4b09      	ldr	r3, [pc, #36]	@ (8002988 <HAL_RCC_OscConfig+0x288>)
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002968:	4a07      	ldr	r2, [pc, #28]	@ (8002988 <HAL_RCC_OscConfig+0x288>)
 800296a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800296e:	6053      	str	r3, [r2, #4]
 8002970:	e030      	b.n	80029d4 <HAL_RCC_OscConfig+0x2d4>
 8002972:	4b05      	ldr	r3, [pc, #20]	@ (8002988 <HAL_RCC_OscConfig+0x288>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	031b      	lsls	r3, r3, #12
 8002980:	4901      	ldr	r1, [pc, #4]	@ (8002988 <HAL_RCC_OscConfig+0x288>)
 8002982:	4313      	orrs	r3, r2
 8002984:	604b      	str	r3, [r1, #4]
 8002986:	e025      	b.n	80029d4 <HAL_RCC_OscConfig+0x2d4>
 8002988:	58024400 	.word	0x58024400
 800298c:	4b9a      	ldr	r3, [pc, #616]	@ (8002bf8 <HAL_RCC_OscConfig+0x4f8>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	061b      	lsls	r3, r3, #24
 800299a:	4997      	ldr	r1, [pc, #604]	@ (8002bf8 <HAL_RCC_OscConfig+0x4f8>)
 800299c:	4313      	orrs	r3, r2
 800299e:	604b      	str	r3, [r1, #4]
 80029a0:	e018      	b.n	80029d4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029a2:	4b95      	ldr	r3, [pc, #596]	@ (8002bf8 <HAL_RCC_OscConfig+0x4f8>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a94      	ldr	r2, [pc, #592]	@ (8002bf8 <HAL_RCC_OscConfig+0x4f8>)
 80029a8:	f023 0301 	bic.w	r3, r3, #1
 80029ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ae:	f7fe fd7b 	bl	80014a8 <HAL_GetTick>
 80029b2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80029b4:	e008      	b.n	80029c8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029b6:	f7fe fd77 	bl	80014a8 <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d901      	bls.n	80029c8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e2ed      	b.n	8002fa4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80029c8:	4b8b      	ldr	r3, [pc, #556]	@ (8002bf8 <HAL_RCC_OscConfig+0x4f8>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0304 	and.w	r3, r3, #4
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d1f0      	bne.n	80029b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0310 	and.w	r3, r3, #16
 80029dc:	2b00      	cmp	r3, #0
 80029de:	f000 80a9 	beq.w	8002b34 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029e2:	4b85      	ldr	r3, [pc, #532]	@ (8002bf8 <HAL_RCC_OscConfig+0x4f8>)
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80029ea:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80029ec:	4b82      	ldr	r3, [pc, #520]	@ (8002bf8 <HAL_RCC_OscConfig+0x4f8>)
 80029ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029f0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	2b08      	cmp	r3, #8
 80029f6:	d007      	beq.n	8002a08 <HAL_RCC_OscConfig+0x308>
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	2b18      	cmp	r3, #24
 80029fc:	d13a      	bne.n	8002a74 <HAL_RCC_OscConfig+0x374>
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	f003 0303 	and.w	r3, r3, #3
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d135      	bne.n	8002a74 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a08:	4b7b      	ldr	r3, [pc, #492]	@ (8002bf8 <HAL_RCC_OscConfig+0x4f8>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d005      	beq.n	8002a20 <HAL_RCC_OscConfig+0x320>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	69db      	ldr	r3, [r3, #28]
 8002a18:	2b80      	cmp	r3, #128	@ 0x80
 8002a1a:	d001      	beq.n	8002a20 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e2c1      	b.n	8002fa4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a20:	f7fe fd4e 	bl	80014c0 <HAL_GetREVID>
 8002a24:	4603      	mov	r3, r0
 8002a26:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d817      	bhi.n	8002a5e <HAL_RCC_OscConfig+0x35e>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a1b      	ldr	r3, [r3, #32]
 8002a32:	2b20      	cmp	r3, #32
 8002a34:	d108      	bne.n	8002a48 <HAL_RCC_OscConfig+0x348>
 8002a36:	4b70      	ldr	r3, [pc, #448]	@ (8002bf8 <HAL_RCC_OscConfig+0x4f8>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002a3e:	4a6e      	ldr	r2, [pc, #440]	@ (8002bf8 <HAL_RCC_OscConfig+0x4f8>)
 8002a40:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002a44:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a46:	e075      	b.n	8002b34 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a48:	4b6b      	ldr	r3, [pc, #428]	@ (8002bf8 <HAL_RCC_OscConfig+0x4f8>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a1b      	ldr	r3, [r3, #32]
 8002a54:	069b      	lsls	r3, r3, #26
 8002a56:	4968      	ldr	r1, [pc, #416]	@ (8002bf8 <HAL_RCC_OscConfig+0x4f8>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a5c:	e06a      	b.n	8002b34 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a5e:	4b66      	ldr	r3, [pc, #408]	@ (8002bf8 <HAL_RCC_OscConfig+0x4f8>)
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a1b      	ldr	r3, [r3, #32]
 8002a6a:	061b      	lsls	r3, r3, #24
 8002a6c:	4962      	ldr	r1, [pc, #392]	@ (8002bf8 <HAL_RCC_OscConfig+0x4f8>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a72:	e05f      	b.n	8002b34 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	69db      	ldr	r3, [r3, #28]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d042      	beq.n	8002b02 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002a7c:	4b5e      	ldr	r3, [pc, #376]	@ (8002bf8 <HAL_RCC_OscConfig+0x4f8>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a5d      	ldr	r2, [pc, #372]	@ (8002bf8 <HAL_RCC_OscConfig+0x4f8>)
 8002a82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a88:	f7fe fd0e 	bl	80014a8 <HAL_GetTick>
 8002a8c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a8e:	e008      	b.n	8002aa2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002a90:	f7fe fd0a 	bl	80014a8 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e280      	b.n	8002fa4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002aa2:	4b55      	ldr	r3, [pc, #340]	@ (8002bf8 <HAL_RCC_OscConfig+0x4f8>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d0f0      	beq.n	8002a90 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002aae:	f7fe fd07 	bl	80014c0 <HAL_GetREVID>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d817      	bhi.n	8002aec <HAL_RCC_OscConfig+0x3ec>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a1b      	ldr	r3, [r3, #32]
 8002ac0:	2b20      	cmp	r3, #32
 8002ac2:	d108      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x3d6>
 8002ac4:	4b4c      	ldr	r3, [pc, #304]	@ (8002bf8 <HAL_RCC_OscConfig+0x4f8>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002acc:	4a4a      	ldr	r2, [pc, #296]	@ (8002bf8 <HAL_RCC_OscConfig+0x4f8>)
 8002ace:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002ad2:	6053      	str	r3, [r2, #4]
 8002ad4:	e02e      	b.n	8002b34 <HAL_RCC_OscConfig+0x434>
 8002ad6:	4b48      	ldr	r3, [pc, #288]	@ (8002bf8 <HAL_RCC_OscConfig+0x4f8>)
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a1b      	ldr	r3, [r3, #32]
 8002ae2:	069b      	lsls	r3, r3, #26
 8002ae4:	4944      	ldr	r1, [pc, #272]	@ (8002bf8 <HAL_RCC_OscConfig+0x4f8>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	604b      	str	r3, [r1, #4]
 8002aea:	e023      	b.n	8002b34 <HAL_RCC_OscConfig+0x434>
 8002aec:	4b42      	ldr	r3, [pc, #264]	@ (8002bf8 <HAL_RCC_OscConfig+0x4f8>)
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a1b      	ldr	r3, [r3, #32]
 8002af8:	061b      	lsls	r3, r3, #24
 8002afa:	493f      	ldr	r1, [pc, #252]	@ (8002bf8 <HAL_RCC_OscConfig+0x4f8>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	60cb      	str	r3, [r1, #12]
 8002b00:	e018      	b.n	8002b34 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002b02:	4b3d      	ldr	r3, [pc, #244]	@ (8002bf8 <HAL_RCC_OscConfig+0x4f8>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a3c      	ldr	r2, [pc, #240]	@ (8002bf8 <HAL_RCC_OscConfig+0x4f8>)
 8002b08:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b0e:	f7fe fccb 	bl	80014a8 <HAL_GetTick>
 8002b12:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002b14:	e008      	b.n	8002b28 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002b16:	f7fe fcc7 	bl	80014a8 <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d901      	bls.n	8002b28 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e23d      	b.n	8002fa4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002b28:	4b33      	ldr	r3, [pc, #204]	@ (8002bf8 <HAL_RCC_OscConfig+0x4f8>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1f0      	bne.n	8002b16 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0308 	and.w	r3, r3, #8
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d036      	beq.n	8002bae <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	695b      	ldr	r3, [r3, #20]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d019      	beq.n	8002b7c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b48:	4b2b      	ldr	r3, [pc, #172]	@ (8002bf8 <HAL_RCC_OscConfig+0x4f8>)
 8002b4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b4c:	4a2a      	ldr	r2, [pc, #168]	@ (8002bf8 <HAL_RCC_OscConfig+0x4f8>)
 8002b4e:	f043 0301 	orr.w	r3, r3, #1
 8002b52:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b54:	f7fe fca8 	bl	80014a8 <HAL_GetTick>
 8002b58:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b5a:	e008      	b.n	8002b6e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b5c:	f7fe fca4 	bl	80014a8 <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e21a      	b.n	8002fa4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b6e:	4b22      	ldr	r3, [pc, #136]	@ (8002bf8 <HAL_RCC_OscConfig+0x4f8>)
 8002b70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d0f0      	beq.n	8002b5c <HAL_RCC_OscConfig+0x45c>
 8002b7a:	e018      	b.n	8002bae <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b7c:	4b1e      	ldr	r3, [pc, #120]	@ (8002bf8 <HAL_RCC_OscConfig+0x4f8>)
 8002b7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b80:	4a1d      	ldr	r2, [pc, #116]	@ (8002bf8 <HAL_RCC_OscConfig+0x4f8>)
 8002b82:	f023 0301 	bic.w	r3, r3, #1
 8002b86:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b88:	f7fe fc8e 	bl	80014a8 <HAL_GetTick>
 8002b8c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b90:	f7fe fc8a 	bl	80014a8 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e200      	b.n	8002fa4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ba2:	4b15      	ldr	r3, [pc, #84]	@ (8002bf8 <HAL_RCC_OscConfig+0x4f8>)
 8002ba4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1f0      	bne.n	8002b90 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0320 	and.w	r3, r3, #32
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d039      	beq.n	8002c2e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	699b      	ldr	r3, [r3, #24]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d01c      	beq.n	8002bfc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8002bf8 <HAL_RCC_OscConfig+0x4f8>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a0c      	ldr	r2, [pc, #48]	@ (8002bf8 <HAL_RCC_OscConfig+0x4f8>)
 8002bc8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002bcc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002bce:	f7fe fc6b 	bl	80014a8 <HAL_GetTick>
 8002bd2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002bd4:	e008      	b.n	8002be8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bd6:	f7fe fc67 	bl	80014a8 <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d901      	bls.n	8002be8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e1dd      	b.n	8002fa4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002be8:	4b03      	ldr	r3, [pc, #12]	@ (8002bf8 <HAL_RCC_OscConfig+0x4f8>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d0f0      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x4d6>
 8002bf4:	e01b      	b.n	8002c2e <HAL_RCC_OscConfig+0x52e>
 8002bf6:	bf00      	nop
 8002bf8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002bfc:	4b9b      	ldr	r3, [pc, #620]	@ (8002e6c <HAL_RCC_OscConfig+0x76c>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a9a      	ldr	r2, [pc, #616]	@ (8002e6c <HAL_RCC_OscConfig+0x76c>)
 8002c02:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002c06:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002c08:	f7fe fc4e 	bl	80014a8 <HAL_GetTick>
 8002c0c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c10:	f7fe fc4a 	bl	80014a8 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e1c0      	b.n	8002fa4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002c22:	4b92      	ldr	r3, [pc, #584]	@ (8002e6c <HAL_RCC_OscConfig+0x76c>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1f0      	bne.n	8002c10 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0304 	and.w	r3, r3, #4
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	f000 8081 	beq.w	8002d3e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002c3c:	4b8c      	ldr	r3, [pc, #560]	@ (8002e70 <HAL_RCC_OscConfig+0x770>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a8b      	ldr	r2, [pc, #556]	@ (8002e70 <HAL_RCC_OscConfig+0x770>)
 8002c42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c46:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c48:	f7fe fc2e 	bl	80014a8 <HAL_GetTick>
 8002c4c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c4e:	e008      	b.n	8002c62 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c50:	f7fe fc2a 	bl	80014a8 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b64      	cmp	r3, #100	@ 0x64
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e1a0      	b.n	8002fa4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c62:	4b83      	ldr	r3, [pc, #524]	@ (8002e70 <HAL_RCC_OscConfig+0x770>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d0f0      	beq.n	8002c50 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d106      	bne.n	8002c84 <HAL_RCC_OscConfig+0x584>
 8002c76:	4b7d      	ldr	r3, [pc, #500]	@ (8002e6c <HAL_RCC_OscConfig+0x76c>)
 8002c78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c7a:	4a7c      	ldr	r2, [pc, #496]	@ (8002e6c <HAL_RCC_OscConfig+0x76c>)
 8002c7c:	f043 0301 	orr.w	r3, r3, #1
 8002c80:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c82:	e02d      	b.n	8002ce0 <HAL_RCC_OscConfig+0x5e0>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d10c      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x5a6>
 8002c8c:	4b77      	ldr	r3, [pc, #476]	@ (8002e6c <HAL_RCC_OscConfig+0x76c>)
 8002c8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c90:	4a76      	ldr	r2, [pc, #472]	@ (8002e6c <HAL_RCC_OscConfig+0x76c>)
 8002c92:	f023 0301 	bic.w	r3, r3, #1
 8002c96:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c98:	4b74      	ldr	r3, [pc, #464]	@ (8002e6c <HAL_RCC_OscConfig+0x76c>)
 8002c9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c9c:	4a73      	ldr	r2, [pc, #460]	@ (8002e6c <HAL_RCC_OscConfig+0x76c>)
 8002c9e:	f023 0304 	bic.w	r3, r3, #4
 8002ca2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ca4:	e01c      	b.n	8002ce0 <HAL_RCC_OscConfig+0x5e0>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	2b05      	cmp	r3, #5
 8002cac:	d10c      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x5c8>
 8002cae:	4b6f      	ldr	r3, [pc, #444]	@ (8002e6c <HAL_RCC_OscConfig+0x76c>)
 8002cb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cb2:	4a6e      	ldr	r2, [pc, #440]	@ (8002e6c <HAL_RCC_OscConfig+0x76c>)
 8002cb4:	f043 0304 	orr.w	r3, r3, #4
 8002cb8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cba:	4b6c      	ldr	r3, [pc, #432]	@ (8002e6c <HAL_RCC_OscConfig+0x76c>)
 8002cbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cbe:	4a6b      	ldr	r2, [pc, #428]	@ (8002e6c <HAL_RCC_OscConfig+0x76c>)
 8002cc0:	f043 0301 	orr.w	r3, r3, #1
 8002cc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cc6:	e00b      	b.n	8002ce0 <HAL_RCC_OscConfig+0x5e0>
 8002cc8:	4b68      	ldr	r3, [pc, #416]	@ (8002e6c <HAL_RCC_OscConfig+0x76c>)
 8002cca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ccc:	4a67      	ldr	r2, [pc, #412]	@ (8002e6c <HAL_RCC_OscConfig+0x76c>)
 8002cce:	f023 0301 	bic.w	r3, r3, #1
 8002cd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cd4:	4b65      	ldr	r3, [pc, #404]	@ (8002e6c <HAL_RCC_OscConfig+0x76c>)
 8002cd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cd8:	4a64      	ldr	r2, [pc, #400]	@ (8002e6c <HAL_RCC_OscConfig+0x76c>)
 8002cda:	f023 0304 	bic.w	r3, r3, #4
 8002cde:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d015      	beq.n	8002d14 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce8:	f7fe fbde 	bl	80014a8 <HAL_GetTick>
 8002cec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cee:	e00a      	b.n	8002d06 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cf0:	f7fe fbda 	bl	80014a8 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e14e      	b.n	8002fa4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d06:	4b59      	ldr	r3, [pc, #356]	@ (8002e6c <HAL_RCC_OscConfig+0x76c>)
 8002d08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d0ee      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x5f0>
 8002d12:	e014      	b.n	8002d3e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d14:	f7fe fbc8 	bl	80014a8 <HAL_GetTick>
 8002d18:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d1a:	e00a      	b.n	8002d32 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d1c:	f7fe fbc4 	bl	80014a8 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e138      	b.n	8002fa4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d32:	4b4e      	ldr	r3, [pc, #312]	@ (8002e6c <HAL_RCC_OscConfig+0x76c>)
 8002d34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1ee      	bne.n	8002d1c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f000 812d 	beq.w	8002fa2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002d48:	4b48      	ldr	r3, [pc, #288]	@ (8002e6c <HAL_RCC_OscConfig+0x76c>)
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d50:	2b18      	cmp	r3, #24
 8002d52:	f000 80bd 	beq.w	8002ed0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	f040 809e 	bne.w	8002e9c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d60:	4b42      	ldr	r3, [pc, #264]	@ (8002e6c <HAL_RCC_OscConfig+0x76c>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a41      	ldr	r2, [pc, #260]	@ (8002e6c <HAL_RCC_OscConfig+0x76c>)
 8002d66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d6c:	f7fe fb9c 	bl	80014a8 <HAL_GetTick>
 8002d70:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d72:	e008      	b.n	8002d86 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d74:	f7fe fb98 	bl	80014a8 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d901      	bls.n	8002d86 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e10e      	b.n	8002fa4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d86:	4b39      	ldr	r3, [pc, #228]	@ (8002e6c <HAL_RCC_OscConfig+0x76c>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d1f0      	bne.n	8002d74 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d92:	4b36      	ldr	r3, [pc, #216]	@ (8002e6c <HAL_RCC_OscConfig+0x76c>)
 8002d94:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d96:	4b37      	ldr	r3, [pc, #220]	@ (8002e74 <HAL_RCC_OscConfig+0x774>)
 8002d98:	4013      	ands	r3, r2
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002da2:	0112      	lsls	r2, r2, #4
 8002da4:	430a      	orrs	r2, r1
 8002da6:	4931      	ldr	r1, [pc, #196]	@ (8002e6c <HAL_RCC_OscConfig+0x76c>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	628b      	str	r3, [r1, #40]	@ 0x28
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002db0:	3b01      	subs	r3, #1
 8002db2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	025b      	lsls	r3, r3, #9
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	431a      	orrs	r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	041b      	lsls	r3, r3, #16
 8002dca:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002dce:	431a      	orrs	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	061b      	lsls	r3, r3, #24
 8002dd8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002ddc:	4923      	ldr	r1, [pc, #140]	@ (8002e6c <HAL_RCC_OscConfig+0x76c>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002de2:	4b22      	ldr	r3, [pc, #136]	@ (8002e6c <HAL_RCC_OscConfig+0x76c>)
 8002de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002de6:	4a21      	ldr	r2, [pc, #132]	@ (8002e6c <HAL_RCC_OscConfig+0x76c>)
 8002de8:	f023 0301 	bic.w	r3, r3, #1
 8002dec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002dee:	4b1f      	ldr	r3, [pc, #124]	@ (8002e6c <HAL_RCC_OscConfig+0x76c>)
 8002df0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002df2:	4b21      	ldr	r3, [pc, #132]	@ (8002e78 <HAL_RCC_OscConfig+0x778>)
 8002df4:	4013      	ands	r3, r2
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002dfa:	00d2      	lsls	r2, r2, #3
 8002dfc:	491b      	ldr	r1, [pc, #108]	@ (8002e6c <HAL_RCC_OscConfig+0x76c>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002e02:	4b1a      	ldr	r3, [pc, #104]	@ (8002e6c <HAL_RCC_OscConfig+0x76c>)
 8002e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e06:	f023 020c 	bic.w	r2, r3, #12
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e0e:	4917      	ldr	r1, [pc, #92]	@ (8002e6c <HAL_RCC_OscConfig+0x76c>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002e14:	4b15      	ldr	r3, [pc, #84]	@ (8002e6c <HAL_RCC_OscConfig+0x76c>)
 8002e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e18:	f023 0202 	bic.w	r2, r3, #2
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e20:	4912      	ldr	r1, [pc, #72]	@ (8002e6c <HAL_RCC_OscConfig+0x76c>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002e26:	4b11      	ldr	r3, [pc, #68]	@ (8002e6c <HAL_RCC_OscConfig+0x76c>)
 8002e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e2a:	4a10      	ldr	r2, [pc, #64]	@ (8002e6c <HAL_RCC_OscConfig+0x76c>)
 8002e2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e30:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e32:	4b0e      	ldr	r3, [pc, #56]	@ (8002e6c <HAL_RCC_OscConfig+0x76c>)
 8002e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e36:	4a0d      	ldr	r2, [pc, #52]	@ (8002e6c <HAL_RCC_OscConfig+0x76c>)
 8002e38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002e3e:	4b0b      	ldr	r3, [pc, #44]	@ (8002e6c <HAL_RCC_OscConfig+0x76c>)
 8002e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e42:	4a0a      	ldr	r2, [pc, #40]	@ (8002e6c <HAL_RCC_OscConfig+0x76c>)
 8002e44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e48:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002e4a:	4b08      	ldr	r3, [pc, #32]	@ (8002e6c <HAL_RCC_OscConfig+0x76c>)
 8002e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e4e:	4a07      	ldr	r2, [pc, #28]	@ (8002e6c <HAL_RCC_OscConfig+0x76c>)
 8002e50:	f043 0301 	orr.w	r3, r3, #1
 8002e54:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e56:	4b05      	ldr	r3, [pc, #20]	@ (8002e6c <HAL_RCC_OscConfig+0x76c>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a04      	ldr	r2, [pc, #16]	@ (8002e6c <HAL_RCC_OscConfig+0x76c>)
 8002e5c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e62:	f7fe fb21 	bl	80014a8 <HAL_GetTick>
 8002e66:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e68:	e011      	b.n	8002e8e <HAL_RCC_OscConfig+0x78e>
 8002e6a:	bf00      	nop
 8002e6c:	58024400 	.word	0x58024400
 8002e70:	58024800 	.word	0x58024800
 8002e74:	fffffc0c 	.word	0xfffffc0c
 8002e78:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e7c:	f7fe fb14 	bl	80014a8 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d901      	bls.n	8002e8e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e08a      	b.n	8002fa4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e8e:	4b47      	ldr	r3, [pc, #284]	@ (8002fac <HAL_RCC_OscConfig+0x8ac>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d0f0      	beq.n	8002e7c <HAL_RCC_OscConfig+0x77c>
 8002e9a:	e082      	b.n	8002fa2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e9c:	4b43      	ldr	r3, [pc, #268]	@ (8002fac <HAL_RCC_OscConfig+0x8ac>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a42      	ldr	r2, [pc, #264]	@ (8002fac <HAL_RCC_OscConfig+0x8ac>)
 8002ea2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ea6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea8:	f7fe fafe 	bl	80014a8 <HAL_GetTick>
 8002eac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002eae:	e008      	b.n	8002ec2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eb0:	f7fe fafa 	bl	80014a8 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e070      	b.n	8002fa4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ec2:	4b3a      	ldr	r3, [pc, #232]	@ (8002fac <HAL_RCC_OscConfig+0x8ac>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1f0      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x7b0>
 8002ece:	e068      	b.n	8002fa2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002ed0:	4b36      	ldr	r3, [pc, #216]	@ (8002fac <HAL_RCC_OscConfig+0x8ac>)
 8002ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ed4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002ed6:	4b35      	ldr	r3, [pc, #212]	@ (8002fac <HAL_RCC_OscConfig+0x8ac>)
 8002ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eda:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d031      	beq.n	8002f48 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	f003 0203 	and.w	r2, r3, #3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d12a      	bne.n	8002f48 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	091b      	lsrs	r3, r3, #4
 8002ef6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d122      	bne.n	8002f48 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f0c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d11a      	bne.n	8002f48 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	0a5b      	lsrs	r3, r3, #9
 8002f16:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f1e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d111      	bne.n	8002f48 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	0c1b      	lsrs	r3, r3, #16
 8002f28:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f30:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d108      	bne.n	8002f48 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	0e1b      	lsrs	r3, r3, #24
 8002f3a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f42:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d001      	beq.n	8002f4c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e02b      	b.n	8002fa4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002f4c:	4b17      	ldr	r3, [pc, #92]	@ (8002fac <HAL_RCC_OscConfig+0x8ac>)
 8002f4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f50:	08db      	lsrs	r3, r3, #3
 8002f52:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002f56:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f5c:	693a      	ldr	r2, [r7, #16]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d01f      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002f62:	4b12      	ldr	r3, [pc, #72]	@ (8002fac <HAL_RCC_OscConfig+0x8ac>)
 8002f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f66:	4a11      	ldr	r2, [pc, #68]	@ (8002fac <HAL_RCC_OscConfig+0x8ac>)
 8002f68:	f023 0301 	bic.w	r3, r3, #1
 8002f6c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f6e:	f7fe fa9b 	bl	80014a8 <HAL_GetTick>
 8002f72:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002f74:	bf00      	nop
 8002f76:	f7fe fa97 	bl	80014a8 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d0f9      	beq.n	8002f76 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002f82:	4b0a      	ldr	r3, [pc, #40]	@ (8002fac <HAL_RCC_OscConfig+0x8ac>)
 8002f84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f86:	4b0a      	ldr	r3, [pc, #40]	@ (8002fb0 <HAL_RCC_OscConfig+0x8b0>)
 8002f88:	4013      	ands	r3, r2
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002f8e:	00d2      	lsls	r2, r2, #3
 8002f90:	4906      	ldr	r1, [pc, #24]	@ (8002fac <HAL_RCC_OscConfig+0x8ac>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002f96:	4b05      	ldr	r3, [pc, #20]	@ (8002fac <HAL_RCC_OscConfig+0x8ac>)
 8002f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f9a:	4a04      	ldr	r2, [pc, #16]	@ (8002fac <HAL_RCC_OscConfig+0x8ac>)
 8002f9c:	f043 0301 	orr.w	r3, r3, #1
 8002fa0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3730      	adds	r7, #48	@ 0x30
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	58024400 	.word	0x58024400
 8002fb0:	ffff0007 	.word	0xffff0007

08002fb4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b086      	sub	sp, #24
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d101      	bne.n	8002fc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e19c      	b.n	8003302 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fc8:	4b8a      	ldr	r3, [pc, #552]	@ (80031f4 <HAL_RCC_ClockConfig+0x240>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 030f 	and.w	r3, r3, #15
 8002fd0:	683a      	ldr	r2, [r7, #0]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d910      	bls.n	8002ff8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fd6:	4b87      	ldr	r3, [pc, #540]	@ (80031f4 <HAL_RCC_ClockConfig+0x240>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f023 020f 	bic.w	r2, r3, #15
 8002fde:	4985      	ldr	r1, [pc, #532]	@ (80031f4 <HAL_RCC_ClockConfig+0x240>)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fe6:	4b83      	ldr	r3, [pc, #524]	@ (80031f4 <HAL_RCC_ClockConfig+0x240>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 030f 	and.w	r3, r3, #15
 8002fee:	683a      	ldr	r2, [r7, #0]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d001      	beq.n	8002ff8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e184      	b.n	8003302 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0304 	and.w	r3, r3, #4
 8003000:	2b00      	cmp	r3, #0
 8003002:	d010      	beq.n	8003026 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	691a      	ldr	r2, [r3, #16]
 8003008:	4b7b      	ldr	r3, [pc, #492]	@ (80031f8 <HAL_RCC_ClockConfig+0x244>)
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003010:	429a      	cmp	r2, r3
 8003012:	d908      	bls.n	8003026 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003014:	4b78      	ldr	r3, [pc, #480]	@ (80031f8 <HAL_RCC_ClockConfig+0x244>)
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	691b      	ldr	r3, [r3, #16]
 8003020:	4975      	ldr	r1, [pc, #468]	@ (80031f8 <HAL_RCC_ClockConfig+0x244>)
 8003022:	4313      	orrs	r3, r2
 8003024:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0308 	and.w	r3, r3, #8
 800302e:	2b00      	cmp	r3, #0
 8003030:	d010      	beq.n	8003054 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	695a      	ldr	r2, [r3, #20]
 8003036:	4b70      	ldr	r3, [pc, #448]	@ (80031f8 <HAL_RCC_ClockConfig+0x244>)
 8003038:	69db      	ldr	r3, [r3, #28]
 800303a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800303e:	429a      	cmp	r2, r3
 8003040:	d908      	bls.n	8003054 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003042:	4b6d      	ldr	r3, [pc, #436]	@ (80031f8 <HAL_RCC_ClockConfig+0x244>)
 8003044:	69db      	ldr	r3, [r3, #28]
 8003046:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	496a      	ldr	r1, [pc, #424]	@ (80031f8 <HAL_RCC_ClockConfig+0x244>)
 8003050:	4313      	orrs	r3, r2
 8003052:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0310 	and.w	r3, r3, #16
 800305c:	2b00      	cmp	r3, #0
 800305e:	d010      	beq.n	8003082 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	699a      	ldr	r2, [r3, #24]
 8003064:	4b64      	ldr	r3, [pc, #400]	@ (80031f8 <HAL_RCC_ClockConfig+0x244>)
 8003066:	69db      	ldr	r3, [r3, #28]
 8003068:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800306c:	429a      	cmp	r2, r3
 800306e:	d908      	bls.n	8003082 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003070:	4b61      	ldr	r3, [pc, #388]	@ (80031f8 <HAL_RCC_ClockConfig+0x244>)
 8003072:	69db      	ldr	r3, [r3, #28]
 8003074:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	495e      	ldr	r1, [pc, #376]	@ (80031f8 <HAL_RCC_ClockConfig+0x244>)
 800307e:	4313      	orrs	r3, r2
 8003080:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0320 	and.w	r3, r3, #32
 800308a:	2b00      	cmp	r3, #0
 800308c:	d010      	beq.n	80030b0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	69da      	ldr	r2, [r3, #28]
 8003092:	4b59      	ldr	r3, [pc, #356]	@ (80031f8 <HAL_RCC_ClockConfig+0x244>)
 8003094:	6a1b      	ldr	r3, [r3, #32]
 8003096:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800309a:	429a      	cmp	r2, r3
 800309c:	d908      	bls.n	80030b0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800309e:	4b56      	ldr	r3, [pc, #344]	@ (80031f8 <HAL_RCC_ClockConfig+0x244>)
 80030a0:	6a1b      	ldr	r3, [r3, #32]
 80030a2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	69db      	ldr	r3, [r3, #28]
 80030aa:	4953      	ldr	r1, [pc, #332]	@ (80031f8 <HAL_RCC_ClockConfig+0x244>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d010      	beq.n	80030de <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	68da      	ldr	r2, [r3, #12]
 80030c0:	4b4d      	ldr	r3, [pc, #308]	@ (80031f8 <HAL_RCC_ClockConfig+0x244>)
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	f003 030f 	and.w	r3, r3, #15
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d908      	bls.n	80030de <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030cc:	4b4a      	ldr	r3, [pc, #296]	@ (80031f8 <HAL_RCC_ClockConfig+0x244>)
 80030ce:	699b      	ldr	r3, [r3, #24]
 80030d0:	f023 020f 	bic.w	r2, r3, #15
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	4947      	ldr	r1, [pc, #284]	@ (80031f8 <HAL_RCC_ClockConfig+0x244>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d055      	beq.n	8003196 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80030ea:	4b43      	ldr	r3, [pc, #268]	@ (80031f8 <HAL_RCC_ClockConfig+0x244>)
 80030ec:	699b      	ldr	r3, [r3, #24]
 80030ee:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	4940      	ldr	r1, [pc, #256]	@ (80031f8 <HAL_RCC_ClockConfig+0x244>)
 80030f8:	4313      	orrs	r3, r2
 80030fa:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	2b02      	cmp	r3, #2
 8003102:	d107      	bne.n	8003114 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003104:	4b3c      	ldr	r3, [pc, #240]	@ (80031f8 <HAL_RCC_ClockConfig+0x244>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d121      	bne.n	8003154 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e0f6      	b.n	8003302 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	2b03      	cmp	r3, #3
 800311a:	d107      	bne.n	800312c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800311c:	4b36      	ldr	r3, [pc, #216]	@ (80031f8 <HAL_RCC_ClockConfig+0x244>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d115      	bne.n	8003154 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e0ea      	b.n	8003302 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	2b01      	cmp	r3, #1
 8003132:	d107      	bne.n	8003144 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003134:	4b30      	ldr	r3, [pc, #192]	@ (80031f8 <HAL_RCC_ClockConfig+0x244>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800313c:	2b00      	cmp	r3, #0
 800313e:	d109      	bne.n	8003154 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e0de      	b.n	8003302 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003144:	4b2c      	ldr	r3, [pc, #176]	@ (80031f8 <HAL_RCC_ClockConfig+0x244>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0304 	and.w	r3, r3, #4
 800314c:	2b00      	cmp	r3, #0
 800314e:	d101      	bne.n	8003154 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e0d6      	b.n	8003302 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003154:	4b28      	ldr	r3, [pc, #160]	@ (80031f8 <HAL_RCC_ClockConfig+0x244>)
 8003156:	691b      	ldr	r3, [r3, #16]
 8003158:	f023 0207 	bic.w	r2, r3, #7
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	4925      	ldr	r1, [pc, #148]	@ (80031f8 <HAL_RCC_ClockConfig+0x244>)
 8003162:	4313      	orrs	r3, r2
 8003164:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003166:	f7fe f99f 	bl	80014a8 <HAL_GetTick>
 800316a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800316c:	e00a      	b.n	8003184 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800316e:	f7fe f99b 	bl	80014a8 <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	f241 3288 	movw	r2, #5000	@ 0x1388
 800317c:	4293      	cmp	r3, r2
 800317e:	d901      	bls.n	8003184 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e0be      	b.n	8003302 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003184:	4b1c      	ldr	r3, [pc, #112]	@ (80031f8 <HAL_RCC_ClockConfig+0x244>)
 8003186:	691b      	ldr	r3, [r3, #16]
 8003188:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	00db      	lsls	r3, r3, #3
 8003192:	429a      	cmp	r2, r3
 8003194:	d1eb      	bne.n	800316e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0302 	and.w	r3, r3, #2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d010      	beq.n	80031c4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	68da      	ldr	r2, [r3, #12]
 80031a6:	4b14      	ldr	r3, [pc, #80]	@ (80031f8 <HAL_RCC_ClockConfig+0x244>)
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	f003 030f 	and.w	r3, r3, #15
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d208      	bcs.n	80031c4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031b2:	4b11      	ldr	r3, [pc, #68]	@ (80031f8 <HAL_RCC_ClockConfig+0x244>)
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	f023 020f 	bic.w	r2, r3, #15
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	490e      	ldr	r1, [pc, #56]	@ (80031f8 <HAL_RCC_ClockConfig+0x244>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031c4:	4b0b      	ldr	r3, [pc, #44]	@ (80031f4 <HAL_RCC_ClockConfig+0x240>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 030f 	and.w	r3, r3, #15
 80031cc:	683a      	ldr	r2, [r7, #0]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d214      	bcs.n	80031fc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031d2:	4b08      	ldr	r3, [pc, #32]	@ (80031f4 <HAL_RCC_ClockConfig+0x240>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f023 020f 	bic.w	r2, r3, #15
 80031da:	4906      	ldr	r1, [pc, #24]	@ (80031f4 <HAL_RCC_ClockConfig+0x240>)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	4313      	orrs	r3, r2
 80031e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031e2:	4b04      	ldr	r3, [pc, #16]	@ (80031f4 <HAL_RCC_ClockConfig+0x240>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 030f 	and.w	r3, r3, #15
 80031ea:	683a      	ldr	r2, [r7, #0]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d005      	beq.n	80031fc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e086      	b.n	8003302 <HAL_RCC_ClockConfig+0x34e>
 80031f4:	52002000 	.word	0x52002000
 80031f8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0304 	and.w	r3, r3, #4
 8003204:	2b00      	cmp	r3, #0
 8003206:	d010      	beq.n	800322a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	691a      	ldr	r2, [r3, #16]
 800320c:	4b3f      	ldr	r3, [pc, #252]	@ (800330c <HAL_RCC_ClockConfig+0x358>)
 800320e:	699b      	ldr	r3, [r3, #24]
 8003210:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003214:	429a      	cmp	r2, r3
 8003216:	d208      	bcs.n	800322a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003218:	4b3c      	ldr	r3, [pc, #240]	@ (800330c <HAL_RCC_ClockConfig+0x358>)
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	691b      	ldr	r3, [r3, #16]
 8003224:	4939      	ldr	r1, [pc, #228]	@ (800330c <HAL_RCC_ClockConfig+0x358>)
 8003226:	4313      	orrs	r3, r2
 8003228:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0308 	and.w	r3, r3, #8
 8003232:	2b00      	cmp	r3, #0
 8003234:	d010      	beq.n	8003258 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	695a      	ldr	r2, [r3, #20]
 800323a:	4b34      	ldr	r3, [pc, #208]	@ (800330c <HAL_RCC_ClockConfig+0x358>)
 800323c:	69db      	ldr	r3, [r3, #28]
 800323e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003242:	429a      	cmp	r2, r3
 8003244:	d208      	bcs.n	8003258 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003246:	4b31      	ldr	r3, [pc, #196]	@ (800330c <HAL_RCC_ClockConfig+0x358>)
 8003248:	69db      	ldr	r3, [r3, #28]
 800324a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	492e      	ldr	r1, [pc, #184]	@ (800330c <HAL_RCC_ClockConfig+0x358>)
 8003254:	4313      	orrs	r3, r2
 8003256:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0310 	and.w	r3, r3, #16
 8003260:	2b00      	cmp	r3, #0
 8003262:	d010      	beq.n	8003286 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	699a      	ldr	r2, [r3, #24]
 8003268:	4b28      	ldr	r3, [pc, #160]	@ (800330c <HAL_RCC_ClockConfig+0x358>)
 800326a:	69db      	ldr	r3, [r3, #28]
 800326c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003270:	429a      	cmp	r2, r3
 8003272:	d208      	bcs.n	8003286 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003274:	4b25      	ldr	r3, [pc, #148]	@ (800330c <HAL_RCC_ClockConfig+0x358>)
 8003276:	69db      	ldr	r3, [r3, #28]
 8003278:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	699b      	ldr	r3, [r3, #24]
 8003280:	4922      	ldr	r1, [pc, #136]	@ (800330c <HAL_RCC_ClockConfig+0x358>)
 8003282:	4313      	orrs	r3, r2
 8003284:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0320 	and.w	r3, r3, #32
 800328e:	2b00      	cmp	r3, #0
 8003290:	d010      	beq.n	80032b4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	69da      	ldr	r2, [r3, #28]
 8003296:	4b1d      	ldr	r3, [pc, #116]	@ (800330c <HAL_RCC_ClockConfig+0x358>)
 8003298:	6a1b      	ldr	r3, [r3, #32]
 800329a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800329e:	429a      	cmp	r2, r3
 80032a0:	d208      	bcs.n	80032b4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80032a2:	4b1a      	ldr	r3, [pc, #104]	@ (800330c <HAL_RCC_ClockConfig+0x358>)
 80032a4:	6a1b      	ldr	r3, [r3, #32]
 80032a6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	69db      	ldr	r3, [r3, #28]
 80032ae:	4917      	ldr	r1, [pc, #92]	@ (800330c <HAL_RCC_ClockConfig+0x358>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80032b4:	f000 f834 	bl	8003320 <HAL_RCC_GetSysClockFreq>
 80032b8:	4602      	mov	r2, r0
 80032ba:	4b14      	ldr	r3, [pc, #80]	@ (800330c <HAL_RCC_ClockConfig+0x358>)
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	0a1b      	lsrs	r3, r3, #8
 80032c0:	f003 030f 	and.w	r3, r3, #15
 80032c4:	4912      	ldr	r1, [pc, #72]	@ (8003310 <HAL_RCC_ClockConfig+0x35c>)
 80032c6:	5ccb      	ldrb	r3, [r1, r3]
 80032c8:	f003 031f 	and.w	r3, r3, #31
 80032cc:	fa22 f303 	lsr.w	r3, r2, r3
 80032d0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80032d2:	4b0e      	ldr	r3, [pc, #56]	@ (800330c <HAL_RCC_ClockConfig+0x358>)
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	f003 030f 	and.w	r3, r3, #15
 80032da:	4a0d      	ldr	r2, [pc, #52]	@ (8003310 <HAL_RCC_ClockConfig+0x35c>)
 80032dc:	5cd3      	ldrb	r3, [r2, r3]
 80032de:	f003 031f 	and.w	r3, r3, #31
 80032e2:	693a      	ldr	r2, [r7, #16]
 80032e4:	fa22 f303 	lsr.w	r3, r2, r3
 80032e8:	4a0a      	ldr	r2, [pc, #40]	@ (8003314 <HAL_RCC_ClockConfig+0x360>)
 80032ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80032ec:	4a0a      	ldr	r2, [pc, #40]	@ (8003318 <HAL_RCC_ClockConfig+0x364>)
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80032f2:	4b0a      	ldr	r3, [pc, #40]	@ (800331c <HAL_RCC_ClockConfig+0x368>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f7fe f88c 	bl	8001414 <HAL_InitTick>
 80032fc:	4603      	mov	r3, r0
 80032fe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003300:	7bfb      	ldrb	r3, [r7, #15]
}
 8003302:	4618      	mov	r0, r3
 8003304:	3718      	adds	r7, #24
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	58024400 	.word	0x58024400
 8003310:	08008ec0 	.word	0x08008ec0
 8003314:	24000004 	.word	0x24000004
 8003318:	24000000 	.word	0x24000000
 800331c:	24000008 	.word	0x24000008

08003320 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003320:	b480      	push	{r7}
 8003322:	b089      	sub	sp, #36	@ 0x24
 8003324:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003326:	4bb3      	ldr	r3, [pc, #716]	@ (80035f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800332e:	2b18      	cmp	r3, #24
 8003330:	f200 8155 	bhi.w	80035de <HAL_RCC_GetSysClockFreq+0x2be>
 8003334:	a201      	add	r2, pc, #4	@ (adr r2, 800333c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800333a:	bf00      	nop
 800333c:	080033a1 	.word	0x080033a1
 8003340:	080035df 	.word	0x080035df
 8003344:	080035df 	.word	0x080035df
 8003348:	080035df 	.word	0x080035df
 800334c:	080035df 	.word	0x080035df
 8003350:	080035df 	.word	0x080035df
 8003354:	080035df 	.word	0x080035df
 8003358:	080035df 	.word	0x080035df
 800335c:	080033c7 	.word	0x080033c7
 8003360:	080035df 	.word	0x080035df
 8003364:	080035df 	.word	0x080035df
 8003368:	080035df 	.word	0x080035df
 800336c:	080035df 	.word	0x080035df
 8003370:	080035df 	.word	0x080035df
 8003374:	080035df 	.word	0x080035df
 8003378:	080035df 	.word	0x080035df
 800337c:	080033cd 	.word	0x080033cd
 8003380:	080035df 	.word	0x080035df
 8003384:	080035df 	.word	0x080035df
 8003388:	080035df 	.word	0x080035df
 800338c:	080035df 	.word	0x080035df
 8003390:	080035df 	.word	0x080035df
 8003394:	080035df 	.word	0x080035df
 8003398:	080035df 	.word	0x080035df
 800339c:	080033d3 	.word	0x080033d3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80033a0:	4b94      	ldr	r3, [pc, #592]	@ (80035f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0320 	and.w	r3, r3, #32
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d009      	beq.n	80033c0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80033ac:	4b91      	ldr	r3, [pc, #580]	@ (80035f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	08db      	lsrs	r3, r3, #3
 80033b2:	f003 0303 	and.w	r3, r3, #3
 80033b6:	4a90      	ldr	r2, [pc, #576]	@ (80035f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80033b8:	fa22 f303 	lsr.w	r3, r2, r3
 80033bc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80033be:	e111      	b.n	80035e4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80033c0:	4b8d      	ldr	r3, [pc, #564]	@ (80035f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80033c2:	61bb      	str	r3, [r7, #24]
      break;
 80033c4:	e10e      	b.n	80035e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80033c6:	4b8d      	ldr	r3, [pc, #564]	@ (80035fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80033c8:	61bb      	str	r3, [r7, #24]
      break;
 80033ca:	e10b      	b.n	80035e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80033cc:	4b8c      	ldr	r3, [pc, #560]	@ (8003600 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80033ce:	61bb      	str	r3, [r7, #24]
      break;
 80033d0:	e108      	b.n	80035e4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80033d2:	4b88      	ldr	r3, [pc, #544]	@ (80035f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033d6:	f003 0303 	and.w	r3, r3, #3
 80033da:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80033dc:	4b85      	ldr	r3, [pc, #532]	@ (80035f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033e0:	091b      	lsrs	r3, r3, #4
 80033e2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033e6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80033e8:	4b82      	ldr	r3, [pc, #520]	@ (80035f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ec:	f003 0301 	and.w	r3, r3, #1
 80033f0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80033f2:	4b80      	ldr	r3, [pc, #512]	@ (80035f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033f6:	08db      	lsrs	r3, r3, #3
 80033f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80033fc:	68fa      	ldr	r2, [r7, #12]
 80033fe:	fb02 f303 	mul.w	r3, r2, r3
 8003402:	ee07 3a90 	vmov	s15, r3
 8003406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800340a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	2b00      	cmp	r3, #0
 8003412:	f000 80e1 	beq.w	80035d8 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	2b02      	cmp	r3, #2
 800341a:	f000 8083 	beq.w	8003524 <HAL_RCC_GetSysClockFreq+0x204>
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	2b02      	cmp	r3, #2
 8003422:	f200 80a1 	bhi.w	8003568 <HAL_RCC_GetSysClockFreq+0x248>
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d003      	beq.n	8003434 <HAL_RCC_GetSysClockFreq+0x114>
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	2b01      	cmp	r3, #1
 8003430:	d056      	beq.n	80034e0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003432:	e099      	b.n	8003568 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003434:	4b6f      	ldr	r3, [pc, #444]	@ (80035f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0320 	and.w	r3, r3, #32
 800343c:	2b00      	cmp	r3, #0
 800343e:	d02d      	beq.n	800349c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003440:	4b6c      	ldr	r3, [pc, #432]	@ (80035f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	08db      	lsrs	r3, r3, #3
 8003446:	f003 0303 	and.w	r3, r3, #3
 800344a:	4a6b      	ldr	r2, [pc, #428]	@ (80035f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800344c:	fa22 f303 	lsr.w	r3, r2, r3
 8003450:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	ee07 3a90 	vmov	s15, r3
 8003458:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	ee07 3a90 	vmov	s15, r3
 8003462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003466:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800346a:	4b62      	ldr	r3, [pc, #392]	@ (80035f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800346c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800346e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003472:	ee07 3a90 	vmov	s15, r3
 8003476:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800347a:	ed97 6a02 	vldr	s12, [r7, #8]
 800347e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003604 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003482:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003486:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800348a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800348e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003492:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003496:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800349a:	e087      	b.n	80035ac <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	ee07 3a90 	vmov	s15, r3
 80034a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034a6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003608 <HAL_RCC_GetSysClockFreq+0x2e8>
 80034aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034ae:	4b51      	ldr	r3, [pc, #324]	@ (80035f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034b6:	ee07 3a90 	vmov	s15, r3
 80034ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034be:	ed97 6a02 	vldr	s12, [r7, #8]
 80034c2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003604 <HAL_RCC_GetSysClockFreq+0x2e4>
 80034c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80034d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80034de:	e065      	b.n	80035ac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	ee07 3a90 	vmov	s15, r3
 80034e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034ea:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800360c <HAL_RCC_GetSysClockFreq+0x2ec>
 80034ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034f2:	4b40      	ldr	r3, [pc, #256]	@ (80035f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034fa:	ee07 3a90 	vmov	s15, r3
 80034fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003502:	ed97 6a02 	vldr	s12, [r7, #8]
 8003506:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003604 <HAL_RCC_GetSysClockFreq+0x2e4>
 800350a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800350e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003512:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003516:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800351a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800351e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003522:	e043      	b.n	80035ac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	ee07 3a90 	vmov	s15, r3
 800352a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800352e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003610 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003532:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003536:	4b2f      	ldr	r3, [pc, #188]	@ (80035f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800353a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800353e:	ee07 3a90 	vmov	s15, r3
 8003542:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003546:	ed97 6a02 	vldr	s12, [r7, #8]
 800354a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003604 <HAL_RCC_GetSysClockFreq+0x2e4>
 800354e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003552:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003556:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800355a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800355e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003562:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003566:	e021      	b.n	80035ac <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	ee07 3a90 	vmov	s15, r3
 800356e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003572:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800360c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003576:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800357a:	4b1e      	ldr	r3, [pc, #120]	@ (80035f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800357c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800357e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003582:	ee07 3a90 	vmov	s15, r3
 8003586:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800358a:	ed97 6a02 	vldr	s12, [r7, #8]
 800358e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003604 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003592:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003596:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800359a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800359e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80035aa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80035ac:	4b11      	ldr	r3, [pc, #68]	@ (80035f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035b0:	0a5b      	lsrs	r3, r3, #9
 80035b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80035b6:	3301      	adds	r3, #1
 80035b8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	ee07 3a90 	vmov	s15, r3
 80035c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80035c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80035c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035d0:	ee17 3a90 	vmov	r3, s15
 80035d4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80035d6:	e005      	b.n	80035e4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80035d8:	2300      	movs	r3, #0
 80035da:	61bb      	str	r3, [r7, #24]
      break;
 80035dc:	e002      	b.n	80035e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80035de:	4b07      	ldr	r3, [pc, #28]	@ (80035fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80035e0:	61bb      	str	r3, [r7, #24]
      break;
 80035e2:	bf00      	nop
  }

  return sysclockfreq;
 80035e4:	69bb      	ldr	r3, [r7, #24]
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3724      	adds	r7, #36	@ 0x24
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	58024400 	.word	0x58024400
 80035f8:	03d09000 	.word	0x03d09000
 80035fc:	003d0900 	.word	0x003d0900
 8003600:	007a1200 	.word	0x007a1200
 8003604:	46000000 	.word	0x46000000
 8003608:	4c742400 	.word	0x4c742400
 800360c:	4a742400 	.word	0x4a742400
 8003610:	4af42400 	.word	0x4af42400

08003614 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800361a:	f7ff fe81 	bl	8003320 <HAL_RCC_GetSysClockFreq>
 800361e:	4602      	mov	r2, r0
 8003620:	4b10      	ldr	r3, [pc, #64]	@ (8003664 <HAL_RCC_GetHCLKFreq+0x50>)
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	0a1b      	lsrs	r3, r3, #8
 8003626:	f003 030f 	and.w	r3, r3, #15
 800362a:	490f      	ldr	r1, [pc, #60]	@ (8003668 <HAL_RCC_GetHCLKFreq+0x54>)
 800362c:	5ccb      	ldrb	r3, [r1, r3]
 800362e:	f003 031f 	and.w	r3, r3, #31
 8003632:	fa22 f303 	lsr.w	r3, r2, r3
 8003636:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003638:	4b0a      	ldr	r3, [pc, #40]	@ (8003664 <HAL_RCC_GetHCLKFreq+0x50>)
 800363a:	699b      	ldr	r3, [r3, #24]
 800363c:	f003 030f 	and.w	r3, r3, #15
 8003640:	4a09      	ldr	r2, [pc, #36]	@ (8003668 <HAL_RCC_GetHCLKFreq+0x54>)
 8003642:	5cd3      	ldrb	r3, [r2, r3]
 8003644:	f003 031f 	and.w	r3, r3, #31
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	fa22 f303 	lsr.w	r3, r2, r3
 800364e:	4a07      	ldr	r2, [pc, #28]	@ (800366c <HAL_RCC_GetHCLKFreq+0x58>)
 8003650:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003652:	4a07      	ldr	r2, [pc, #28]	@ (8003670 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003658:	4b04      	ldr	r3, [pc, #16]	@ (800366c <HAL_RCC_GetHCLKFreq+0x58>)
 800365a:	681b      	ldr	r3, [r3, #0]
}
 800365c:	4618      	mov	r0, r3
 800365e:	3708      	adds	r7, #8
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	58024400 	.word	0x58024400
 8003668:	08008ec0 	.word	0x08008ec0
 800366c:	24000004 	.word	0x24000004
 8003670:	24000000 	.word	0x24000000

08003674 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003678:	f7ff ffcc 	bl	8003614 <HAL_RCC_GetHCLKFreq>
 800367c:	4602      	mov	r2, r0
 800367e:	4b06      	ldr	r3, [pc, #24]	@ (8003698 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003680:	69db      	ldr	r3, [r3, #28]
 8003682:	091b      	lsrs	r3, r3, #4
 8003684:	f003 0307 	and.w	r3, r3, #7
 8003688:	4904      	ldr	r1, [pc, #16]	@ (800369c <HAL_RCC_GetPCLK1Freq+0x28>)
 800368a:	5ccb      	ldrb	r3, [r1, r3]
 800368c:	f003 031f 	and.w	r3, r3, #31
 8003690:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003694:	4618      	mov	r0, r3
 8003696:	bd80      	pop	{r7, pc}
 8003698:	58024400 	.word	0x58024400
 800369c:	08008ec0 	.word	0x08008ec0

080036a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80036a4:	f7ff ffb6 	bl	8003614 <HAL_RCC_GetHCLKFreq>
 80036a8:	4602      	mov	r2, r0
 80036aa:	4b06      	ldr	r3, [pc, #24]	@ (80036c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036ac:	69db      	ldr	r3, [r3, #28]
 80036ae:	0a1b      	lsrs	r3, r3, #8
 80036b0:	f003 0307 	and.w	r3, r3, #7
 80036b4:	4904      	ldr	r1, [pc, #16]	@ (80036c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80036b6:	5ccb      	ldrb	r3, [r1, r3]
 80036b8:	f003 031f 	and.w	r3, r3, #31
 80036bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	58024400 	.word	0x58024400
 80036c8:	08008ec0 	.word	0x08008ec0

080036cc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036d0:	b0ca      	sub	sp, #296	@ 0x128
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80036d8:	2300      	movs	r3, #0
 80036da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036de:	2300      	movs	r3, #0
 80036e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80036e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ec:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80036f0:	2500      	movs	r5, #0
 80036f2:	ea54 0305 	orrs.w	r3, r4, r5
 80036f6:	d049      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80036f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80036fe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003702:	d02f      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003704:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003708:	d828      	bhi.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800370a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800370e:	d01a      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003710:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003714:	d822      	bhi.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003716:	2b00      	cmp	r3, #0
 8003718:	d003      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800371a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800371e:	d007      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003720:	e01c      	b.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003722:	4bb8      	ldr	r3, [pc, #736]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003726:	4ab7      	ldr	r2, [pc, #732]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003728:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800372c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800372e:	e01a      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003730:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003734:	3308      	adds	r3, #8
 8003736:	2102      	movs	r1, #2
 8003738:	4618      	mov	r0, r3
 800373a:	f001 fc8f 	bl	800505c <RCCEx_PLL2_Config>
 800373e:	4603      	mov	r3, r0
 8003740:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003744:	e00f      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003746:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800374a:	3328      	adds	r3, #40	@ 0x28
 800374c:	2102      	movs	r1, #2
 800374e:	4618      	mov	r0, r3
 8003750:	f001 fd36 	bl	80051c0 <RCCEx_PLL3_Config>
 8003754:	4603      	mov	r3, r0
 8003756:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800375a:	e004      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003762:	e000      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003764:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003766:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800376a:	2b00      	cmp	r3, #0
 800376c:	d10a      	bne.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800376e:	4ba5      	ldr	r3, [pc, #660]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003770:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003772:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003776:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800377a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800377c:	4aa1      	ldr	r2, [pc, #644]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800377e:	430b      	orrs	r3, r1
 8003780:	6513      	str	r3, [r2, #80]	@ 0x50
 8003782:	e003      	b.n	800378c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003784:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003788:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800378c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003794:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003798:	f04f 0900 	mov.w	r9, #0
 800379c:	ea58 0309 	orrs.w	r3, r8, r9
 80037a0:	d047      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80037a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037a8:	2b04      	cmp	r3, #4
 80037aa:	d82a      	bhi.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80037ac:	a201      	add	r2, pc, #4	@ (adr r2, 80037b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80037ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037b2:	bf00      	nop
 80037b4:	080037c9 	.word	0x080037c9
 80037b8:	080037d7 	.word	0x080037d7
 80037bc:	080037ed 	.word	0x080037ed
 80037c0:	0800380b 	.word	0x0800380b
 80037c4:	0800380b 	.word	0x0800380b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037c8:	4b8e      	ldr	r3, [pc, #568]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037cc:	4a8d      	ldr	r2, [pc, #564]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80037d4:	e01a      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037da:	3308      	adds	r3, #8
 80037dc:	2100      	movs	r1, #0
 80037de:	4618      	mov	r0, r3
 80037e0:	f001 fc3c 	bl	800505c <RCCEx_PLL2_Config>
 80037e4:	4603      	mov	r3, r0
 80037e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80037ea:	e00f      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037f0:	3328      	adds	r3, #40	@ 0x28
 80037f2:	2100      	movs	r1, #0
 80037f4:	4618      	mov	r0, r3
 80037f6:	f001 fce3 	bl	80051c0 <RCCEx_PLL3_Config>
 80037fa:	4603      	mov	r3, r0
 80037fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003800:	e004      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003808:	e000      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800380a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800380c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003810:	2b00      	cmp	r3, #0
 8003812:	d10a      	bne.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003814:	4b7b      	ldr	r3, [pc, #492]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003816:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003818:	f023 0107 	bic.w	r1, r3, #7
 800381c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003820:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003822:	4a78      	ldr	r2, [pc, #480]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003824:	430b      	orrs	r3, r1
 8003826:	6513      	str	r3, [r2, #80]	@ 0x50
 8003828:	e003      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800382a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800382e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800383a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800383e:	f04f 0b00 	mov.w	fp, #0
 8003842:	ea5a 030b 	orrs.w	r3, sl, fp
 8003846:	d04c      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003848:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800384c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800384e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003852:	d030      	beq.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003854:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003858:	d829      	bhi.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800385a:	2bc0      	cmp	r3, #192	@ 0xc0
 800385c:	d02d      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800385e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003860:	d825      	bhi.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003862:	2b80      	cmp	r3, #128	@ 0x80
 8003864:	d018      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003866:	2b80      	cmp	r3, #128	@ 0x80
 8003868:	d821      	bhi.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800386a:	2b00      	cmp	r3, #0
 800386c:	d002      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800386e:	2b40      	cmp	r3, #64	@ 0x40
 8003870:	d007      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003872:	e01c      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003874:	4b63      	ldr	r3, [pc, #396]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003878:	4a62      	ldr	r2, [pc, #392]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800387a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800387e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003880:	e01c      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003882:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003886:	3308      	adds	r3, #8
 8003888:	2100      	movs	r1, #0
 800388a:	4618      	mov	r0, r3
 800388c:	f001 fbe6 	bl	800505c <RCCEx_PLL2_Config>
 8003890:	4603      	mov	r3, r0
 8003892:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003896:	e011      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003898:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800389c:	3328      	adds	r3, #40	@ 0x28
 800389e:	2100      	movs	r1, #0
 80038a0:	4618      	mov	r0, r3
 80038a2:	f001 fc8d 	bl	80051c0 <RCCEx_PLL3_Config>
 80038a6:	4603      	mov	r3, r0
 80038a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80038ac:	e006      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038b4:	e002      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80038b6:	bf00      	nop
 80038b8:	e000      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80038ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d10a      	bne.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80038c4:	4b4f      	ldr	r3, [pc, #316]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038c8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80038cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038d2:	4a4c      	ldr	r2, [pc, #304]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038d4:	430b      	orrs	r3, r1
 80038d6:	6513      	str	r3, [r2, #80]	@ 0x50
 80038d8:	e003      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80038e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ea:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80038ee:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80038f2:	2300      	movs	r3, #0
 80038f4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80038f8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80038fc:	460b      	mov	r3, r1
 80038fe:	4313      	orrs	r3, r2
 8003900:	d053      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003902:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003906:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800390a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800390e:	d035      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003910:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003914:	d82e      	bhi.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003916:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800391a:	d031      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800391c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003920:	d828      	bhi.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003922:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003926:	d01a      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003928:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800392c:	d822      	bhi.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800392e:	2b00      	cmp	r3, #0
 8003930:	d003      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003932:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003936:	d007      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003938:	e01c      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800393a:	4b32      	ldr	r3, [pc, #200]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800393c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800393e:	4a31      	ldr	r2, [pc, #196]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003940:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003944:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003946:	e01c      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003948:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800394c:	3308      	adds	r3, #8
 800394e:	2100      	movs	r1, #0
 8003950:	4618      	mov	r0, r3
 8003952:	f001 fb83 	bl	800505c <RCCEx_PLL2_Config>
 8003956:	4603      	mov	r3, r0
 8003958:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800395c:	e011      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800395e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003962:	3328      	adds	r3, #40	@ 0x28
 8003964:	2100      	movs	r1, #0
 8003966:	4618      	mov	r0, r3
 8003968:	f001 fc2a 	bl	80051c0 <RCCEx_PLL3_Config>
 800396c:	4603      	mov	r3, r0
 800396e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003972:	e006      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800397a:	e002      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800397c:	bf00      	nop
 800397e:	e000      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003980:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003982:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003986:	2b00      	cmp	r3, #0
 8003988:	d10b      	bne.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800398a:	4b1e      	ldr	r3, [pc, #120]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800398c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800398e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003992:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003996:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800399a:	4a1a      	ldr	r2, [pc, #104]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800399c:	430b      	orrs	r3, r1
 800399e:	6593      	str	r3, [r2, #88]	@ 0x58
 80039a0:	e003      	b.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80039aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80039b6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80039ba:	2300      	movs	r3, #0
 80039bc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80039c0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80039c4:	460b      	mov	r3, r1
 80039c6:	4313      	orrs	r3, r2
 80039c8:	d056      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80039ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80039d2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80039d6:	d038      	beq.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80039d8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80039dc:	d831      	bhi.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80039de:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80039e2:	d034      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x382>
 80039e4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80039e8:	d82b      	bhi.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80039ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80039ee:	d01d      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x360>
 80039f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80039f4:	d825      	bhi.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d006      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80039fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80039fe:	d00a      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003a00:	e01f      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003a02:	bf00      	nop
 8003a04:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a08:	4ba2      	ldr	r3, [pc, #648]	@ (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a0c:	4aa1      	ldr	r2, [pc, #644]	@ (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a14:	e01c      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a1a:	3308      	adds	r3, #8
 8003a1c:	2100      	movs	r1, #0
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f001 fb1c 	bl	800505c <RCCEx_PLL2_Config>
 8003a24:	4603      	mov	r3, r0
 8003a26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003a2a:	e011      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a30:	3328      	adds	r3, #40	@ 0x28
 8003a32:	2100      	movs	r1, #0
 8003a34:	4618      	mov	r0, r3
 8003a36:	f001 fbc3 	bl	80051c0 <RCCEx_PLL3_Config>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a40:	e006      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a48:	e002      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003a4a:	bf00      	nop
 8003a4c:	e000      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003a4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d10b      	bne.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003a58:	4b8e      	ldr	r3, [pc, #568]	@ (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a5c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003a60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a64:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003a68:	4a8a      	ldr	r2, [pc, #552]	@ (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a6a:	430b      	orrs	r3, r1
 8003a6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a6e:	e003      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a80:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003a84:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003a88:	2300      	movs	r3, #0
 8003a8a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003a8e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003a92:	460b      	mov	r3, r1
 8003a94:	4313      	orrs	r3, r2
 8003a96:	d03a      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a9e:	2b30      	cmp	r3, #48	@ 0x30
 8003aa0:	d01f      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003aa2:	2b30      	cmp	r3, #48	@ 0x30
 8003aa4:	d819      	bhi.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003aa6:	2b20      	cmp	r3, #32
 8003aa8:	d00c      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003aaa:	2b20      	cmp	r3, #32
 8003aac:	d815      	bhi.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d019      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003ab2:	2b10      	cmp	r3, #16
 8003ab4:	d111      	bne.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ab6:	4b77      	ldr	r3, [pc, #476]	@ (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aba:	4a76      	ldr	r2, [pc, #472]	@ (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003abc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ac0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003ac2:	e011      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ac8:	3308      	adds	r3, #8
 8003aca:	2102      	movs	r1, #2
 8003acc:	4618      	mov	r0, r3
 8003ace:	f001 fac5 	bl	800505c <RCCEx_PLL2_Config>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003ad8:	e006      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ae0:	e002      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003ae2:	bf00      	nop
 8003ae4:	e000      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003ae6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ae8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d10a      	bne.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003af0:	4b68      	ldr	r3, [pc, #416]	@ (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003af2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003af4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003afc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003afe:	4a65      	ldr	r2, [pc, #404]	@ (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b00:	430b      	orrs	r3, r1
 8003b02:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b04:	e003      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b16:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003b1a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003b1e:	2300      	movs	r3, #0
 8003b20:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003b24:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003b28:	460b      	mov	r3, r1
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	d051      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b34:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b38:	d035      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003b3a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b3e:	d82e      	bhi.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003b40:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003b44:	d031      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003b46:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003b4a:	d828      	bhi.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003b4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b50:	d01a      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003b52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b56:	d822      	bhi.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d003      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003b5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b60:	d007      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003b62:	e01c      	b.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b64:	4b4b      	ldr	r3, [pc, #300]	@ (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b68:	4a4a      	ldr	r2, [pc, #296]	@ (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003b70:	e01c      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b76:	3308      	adds	r3, #8
 8003b78:	2100      	movs	r1, #0
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f001 fa6e 	bl	800505c <RCCEx_PLL2_Config>
 8003b80:	4603      	mov	r3, r0
 8003b82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003b86:	e011      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b8c:	3328      	adds	r3, #40	@ 0x28
 8003b8e:	2100      	movs	r1, #0
 8003b90:	4618      	mov	r0, r3
 8003b92:	f001 fb15 	bl	80051c0 <RCCEx_PLL3_Config>
 8003b96:	4603      	mov	r3, r0
 8003b98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003b9c:	e006      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ba4:	e002      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003ba6:	bf00      	nop
 8003ba8:	e000      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003baa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d10a      	bne.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003bb4:	4b37      	ldr	r3, [pc, #220]	@ (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bb8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bc2:	4a34      	ldr	r2, [pc, #208]	@ (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bc4:	430b      	orrs	r3, r1
 8003bc6:	6513      	str	r3, [r2, #80]	@ 0x50
 8003bc8:	e003      	b.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bda:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003bde:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003be2:	2300      	movs	r3, #0
 8003be4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003be8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003bec:	460b      	mov	r3, r1
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	d056      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bf6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003bf8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003bfc:	d033      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003bfe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c02:	d82c      	bhi.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003c04:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003c08:	d02f      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003c0a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003c0e:	d826      	bhi.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003c10:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003c14:	d02b      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003c16:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003c1a:	d820      	bhi.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003c1c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c20:	d012      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003c22:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c26:	d81a      	bhi.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d022      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003c2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c30:	d115      	bne.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c36:	3308      	adds	r3, #8
 8003c38:	2101      	movs	r1, #1
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f001 fa0e 	bl	800505c <RCCEx_PLL2_Config>
 8003c40:	4603      	mov	r3, r0
 8003c42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003c46:	e015      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c4c:	3328      	adds	r3, #40	@ 0x28
 8003c4e:	2101      	movs	r1, #1
 8003c50:	4618      	mov	r0, r3
 8003c52:	f001 fab5 	bl	80051c0 <RCCEx_PLL3_Config>
 8003c56:	4603      	mov	r3, r0
 8003c58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003c5c:	e00a      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c64:	e006      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003c66:	bf00      	nop
 8003c68:	e004      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003c6a:	bf00      	nop
 8003c6c:	e002      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003c6e:	bf00      	nop
 8003c70:	e000      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003c72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d10d      	bne.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003c7c:	4b05      	ldr	r3, [pc, #20]	@ (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c80:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c8a:	4a02      	ldr	r2, [pc, #8]	@ (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c8c:	430b      	orrs	r3, r1
 8003c8e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003c90:	e006      	b.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003c92:	bf00      	nop
 8003c94:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c9c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003cac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003cb6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003cba:	460b      	mov	r3, r1
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	d055      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003cc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cc4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003cc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ccc:	d033      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003cce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003cd2:	d82c      	bhi.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cd8:	d02f      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003cda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cde:	d826      	bhi.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003ce0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003ce4:	d02b      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003ce6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003cea:	d820      	bhi.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003cec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003cf0:	d012      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003cf2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003cf6:	d81a      	bhi.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d022      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003cfc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003d00:	d115      	bne.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d06:	3308      	adds	r3, #8
 8003d08:	2101      	movs	r1, #1
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f001 f9a6 	bl	800505c <RCCEx_PLL2_Config>
 8003d10:	4603      	mov	r3, r0
 8003d12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003d16:	e015      	b.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d1c:	3328      	adds	r3, #40	@ 0x28
 8003d1e:	2101      	movs	r1, #1
 8003d20:	4618      	mov	r0, r3
 8003d22:	f001 fa4d 	bl	80051c0 <RCCEx_PLL3_Config>
 8003d26:	4603      	mov	r3, r0
 8003d28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003d2c:	e00a      	b.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d34:	e006      	b.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003d36:	bf00      	nop
 8003d38:	e004      	b.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003d3a:	bf00      	nop
 8003d3c:	e002      	b.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003d3e:	bf00      	nop
 8003d40:	e000      	b.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003d42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d10b      	bne.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003d4c:	4ba3      	ldr	r3, [pc, #652]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d50:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d58:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003d5c:	4a9f      	ldr	r2, [pc, #636]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d5e:	430b      	orrs	r3, r1
 8003d60:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d62:	e003      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d74:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003d78:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003d82:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003d86:	460b      	mov	r3, r1
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	d037      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003d8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d96:	d00e      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003d98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d9c:	d816      	bhi.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d018      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003da2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003da6:	d111      	bne.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003da8:	4b8c      	ldr	r3, [pc, #560]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dac:	4a8b      	ldr	r2, [pc, #556]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003db2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003db4:	e00f      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dba:	3308      	adds	r3, #8
 8003dbc:	2101      	movs	r1, #1
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f001 f94c 	bl	800505c <RCCEx_PLL2_Config>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003dca:	e004      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003dd2:	e000      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003dd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d10a      	bne.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003dde:	4b7f      	ldr	r3, [pc, #508]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003de0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003de2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dec:	4a7b      	ldr	r2, [pc, #492]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dee:	430b      	orrs	r3, r1
 8003df0:	6513      	str	r3, [r2, #80]	@ 0x50
 8003df2:	e003      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003df4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003df8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e04:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003e08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003e12:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003e16:	460b      	mov	r3, r1
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	d039      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e22:	2b03      	cmp	r3, #3
 8003e24:	d81c      	bhi.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003e26:	a201      	add	r2, pc, #4	@ (adr r2, 8003e2c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e2c:	08003e69 	.word	0x08003e69
 8003e30:	08003e3d 	.word	0x08003e3d
 8003e34:	08003e4b 	.word	0x08003e4b
 8003e38:	08003e69 	.word	0x08003e69
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e3c:	4b67      	ldr	r3, [pc, #412]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e40:	4a66      	ldr	r2, [pc, #408]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003e48:	e00f      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e4e:	3308      	adds	r3, #8
 8003e50:	2102      	movs	r1, #2
 8003e52:	4618      	mov	r0, r3
 8003e54:	f001 f902 	bl	800505c <RCCEx_PLL2_Config>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003e5e:	e004      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e66:	e000      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003e68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d10a      	bne.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003e72:	4b5a      	ldr	r3, [pc, #360]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e76:	f023 0103 	bic.w	r1, r3, #3
 8003e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e80:	4a56      	ldr	r2, [pc, #344]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e82:	430b      	orrs	r3, r1
 8003e84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e86:	e003      	b.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e8c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e98:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003e9c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003ea6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003eaa:	460b      	mov	r3, r1
 8003eac:	4313      	orrs	r3, r2
 8003eae:	f000 809f 	beq.w	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003eb2:	4b4b      	ldr	r3, [pc, #300]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a4a      	ldr	r2, [pc, #296]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003eb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ebc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ebe:	f7fd faf3 	bl	80014a8 <HAL_GetTick>
 8003ec2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ec6:	e00b      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ec8:	f7fd faee 	bl	80014a8 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	2b64      	cmp	r3, #100	@ 0x64
 8003ed6:	d903      	bls.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ede:	e005      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ee0:	4b3f      	ldr	r3, [pc, #252]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d0ed      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003eec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d179      	bne.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003ef4:	4b39      	ldr	r3, [pc, #228]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ef6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003efc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003f00:	4053      	eors	r3, r2
 8003f02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d015      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f0a:	4b34      	ldr	r3, [pc, #208]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f12:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f16:	4b31      	ldr	r3, [pc, #196]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f1a:	4a30      	ldr	r2, [pc, #192]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f20:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f22:	4b2e      	ldr	r3, [pc, #184]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f26:	4a2d      	ldr	r2, [pc, #180]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f2c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003f2e:	4a2b      	ldr	r2, [pc, #172]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f30:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003f34:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f3a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003f3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f42:	d118      	bne.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f44:	f7fd fab0 	bl	80014a8 <HAL_GetTick>
 8003f48:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f4c:	e00d      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f4e:	f7fd faab 	bl	80014a8 <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003f58:	1ad2      	subs	r2, r2, r3
 8003f5a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d903      	bls.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003f68:	e005      	b.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f6a:	4b1c      	ldr	r3, [pc, #112]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d0eb      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003f76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d129      	bne.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f82:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003f86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f8a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f8e:	d10e      	bne.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003f90:	4b12      	ldr	r3, [pc, #72]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003f98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f9c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003fa0:	091a      	lsrs	r2, r3, #4
 8003fa2:	4b10      	ldr	r3, [pc, #64]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	4a0d      	ldr	r2, [pc, #52]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fa8:	430b      	orrs	r3, r1
 8003faa:	6113      	str	r3, [r2, #16]
 8003fac:	e005      	b.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003fae:	4b0b      	ldr	r3, [pc, #44]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	4a0a      	ldr	r2, [pc, #40]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fb4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003fb8:	6113      	str	r3, [r2, #16]
 8003fba:	4b08      	ldr	r3, [pc, #32]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fbc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fc2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003fc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fca:	4a04      	ldr	r2, [pc, #16]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fcc:	430b      	orrs	r3, r1
 8003fce:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fd0:	e00e      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003fd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003fda:	e009      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003fdc:	58024400 	.word	0x58024400
 8003fe0:	58024800 	.word	0x58024800
 8003fe4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fe8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003ff0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff8:	f002 0301 	and.w	r3, r2, #1
 8003ffc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004000:	2300      	movs	r3, #0
 8004002:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004006:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800400a:	460b      	mov	r3, r1
 800400c:	4313      	orrs	r3, r2
 800400e:	f000 8089 	beq.w	8004124 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004012:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004016:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004018:	2b28      	cmp	r3, #40	@ 0x28
 800401a:	d86b      	bhi.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800401c:	a201      	add	r2, pc, #4	@ (adr r2, 8004024 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800401e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004022:	bf00      	nop
 8004024:	080040fd 	.word	0x080040fd
 8004028:	080040f5 	.word	0x080040f5
 800402c:	080040f5 	.word	0x080040f5
 8004030:	080040f5 	.word	0x080040f5
 8004034:	080040f5 	.word	0x080040f5
 8004038:	080040f5 	.word	0x080040f5
 800403c:	080040f5 	.word	0x080040f5
 8004040:	080040f5 	.word	0x080040f5
 8004044:	080040c9 	.word	0x080040c9
 8004048:	080040f5 	.word	0x080040f5
 800404c:	080040f5 	.word	0x080040f5
 8004050:	080040f5 	.word	0x080040f5
 8004054:	080040f5 	.word	0x080040f5
 8004058:	080040f5 	.word	0x080040f5
 800405c:	080040f5 	.word	0x080040f5
 8004060:	080040f5 	.word	0x080040f5
 8004064:	080040df 	.word	0x080040df
 8004068:	080040f5 	.word	0x080040f5
 800406c:	080040f5 	.word	0x080040f5
 8004070:	080040f5 	.word	0x080040f5
 8004074:	080040f5 	.word	0x080040f5
 8004078:	080040f5 	.word	0x080040f5
 800407c:	080040f5 	.word	0x080040f5
 8004080:	080040f5 	.word	0x080040f5
 8004084:	080040fd 	.word	0x080040fd
 8004088:	080040f5 	.word	0x080040f5
 800408c:	080040f5 	.word	0x080040f5
 8004090:	080040f5 	.word	0x080040f5
 8004094:	080040f5 	.word	0x080040f5
 8004098:	080040f5 	.word	0x080040f5
 800409c:	080040f5 	.word	0x080040f5
 80040a0:	080040f5 	.word	0x080040f5
 80040a4:	080040fd 	.word	0x080040fd
 80040a8:	080040f5 	.word	0x080040f5
 80040ac:	080040f5 	.word	0x080040f5
 80040b0:	080040f5 	.word	0x080040f5
 80040b4:	080040f5 	.word	0x080040f5
 80040b8:	080040f5 	.word	0x080040f5
 80040bc:	080040f5 	.word	0x080040f5
 80040c0:	080040f5 	.word	0x080040f5
 80040c4:	080040fd 	.word	0x080040fd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80040c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040cc:	3308      	adds	r3, #8
 80040ce:	2101      	movs	r1, #1
 80040d0:	4618      	mov	r0, r3
 80040d2:	f000 ffc3 	bl	800505c <RCCEx_PLL2_Config>
 80040d6:	4603      	mov	r3, r0
 80040d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80040dc:	e00f      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80040de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040e2:	3328      	adds	r3, #40	@ 0x28
 80040e4:	2101      	movs	r1, #1
 80040e6:	4618      	mov	r0, r3
 80040e8:	f001 f86a 	bl	80051c0 <RCCEx_PLL3_Config>
 80040ec:	4603      	mov	r3, r0
 80040ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80040f2:	e004      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80040fa:	e000      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80040fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004102:	2b00      	cmp	r3, #0
 8004104:	d10a      	bne.n	800411c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004106:	4bbf      	ldr	r3, [pc, #764]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004108:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800410a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800410e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004112:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004114:	4abb      	ldr	r2, [pc, #748]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004116:	430b      	orrs	r3, r1
 8004118:	6553      	str	r3, [r2, #84]	@ 0x54
 800411a:	e003      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800411c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004120:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004124:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800412c:	f002 0302 	and.w	r3, r2, #2
 8004130:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004134:	2300      	movs	r3, #0
 8004136:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800413a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800413e:	460b      	mov	r3, r1
 8004140:	4313      	orrs	r3, r2
 8004142:	d041      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004144:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004148:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800414a:	2b05      	cmp	r3, #5
 800414c:	d824      	bhi.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800414e:	a201      	add	r2, pc, #4	@ (adr r2, 8004154 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004154:	080041a1 	.word	0x080041a1
 8004158:	0800416d 	.word	0x0800416d
 800415c:	08004183 	.word	0x08004183
 8004160:	080041a1 	.word	0x080041a1
 8004164:	080041a1 	.word	0x080041a1
 8004168:	080041a1 	.word	0x080041a1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800416c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004170:	3308      	adds	r3, #8
 8004172:	2101      	movs	r1, #1
 8004174:	4618      	mov	r0, r3
 8004176:	f000 ff71 	bl	800505c <RCCEx_PLL2_Config>
 800417a:	4603      	mov	r3, r0
 800417c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004180:	e00f      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004182:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004186:	3328      	adds	r3, #40	@ 0x28
 8004188:	2101      	movs	r1, #1
 800418a:	4618      	mov	r0, r3
 800418c:	f001 f818 	bl	80051c0 <RCCEx_PLL3_Config>
 8004190:	4603      	mov	r3, r0
 8004192:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004196:	e004      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800419e:	e000      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80041a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d10a      	bne.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80041aa:	4b96      	ldr	r3, [pc, #600]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041ae:	f023 0107 	bic.w	r1, r3, #7
 80041b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80041b8:	4a92      	ldr	r2, [pc, #584]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041ba:	430b      	orrs	r3, r1
 80041bc:	6553      	str	r3, [r2, #84]	@ 0x54
 80041be:	e003      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d0:	f002 0304 	and.w	r3, r2, #4
 80041d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80041d8:	2300      	movs	r3, #0
 80041da:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80041de:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80041e2:	460b      	mov	r3, r1
 80041e4:	4313      	orrs	r3, r2
 80041e6:	d044      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80041e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041f0:	2b05      	cmp	r3, #5
 80041f2:	d825      	bhi.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80041f4:	a201      	add	r2, pc, #4	@ (adr r2, 80041fc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80041f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041fa:	bf00      	nop
 80041fc:	08004249 	.word	0x08004249
 8004200:	08004215 	.word	0x08004215
 8004204:	0800422b 	.word	0x0800422b
 8004208:	08004249 	.word	0x08004249
 800420c:	08004249 	.word	0x08004249
 8004210:	08004249 	.word	0x08004249
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004214:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004218:	3308      	adds	r3, #8
 800421a:	2101      	movs	r1, #1
 800421c:	4618      	mov	r0, r3
 800421e:	f000 ff1d 	bl	800505c <RCCEx_PLL2_Config>
 8004222:	4603      	mov	r3, r0
 8004224:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004228:	e00f      	b.n	800424a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800422a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800422e:	3328      	adds	r3, #40	@ 0x28
 8004230:	2101      	movs	r1, #1
 8004232:	4618      	mov	r0, r3
 8004234:	f000 ffc4 	bl	80051c0 <RCCEx_PLL3_Config>
 8004238:	4603      	mov	r3, r0
 800423a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800423e:	e004      	b.n	800424a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004246:	e000      	b.n	800424a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004248:	bf00      	nop
    }

    if (ret == HAL_OK)
 800424a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800424e:	2b00      	cmp	r3, #0
 8004250:	d10b      	bne.n	800426a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004252:	4b6c      	ldr	r3, [pc, #432]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004254:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004256:	f023 0107 	bic.w	r1, r3, #7
 800425a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800425e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004262:	4a68      	ldr	r2, [pc, #416]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004264:	430b      	orrs	r3, r1
 8004266:	6593      	str	r3, [r2, #88]	@ 0x58
 8004268:	e003      	b.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800426a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800426e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004272:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800427a:	f002 0320 	and.w	r3, r2, #32
 800427e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004282:	2300      	movs	r3, #0
 8004284:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004288:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800428c:	460b      	mov	r3, r1
 800428e:	4313      	orrs	r3, r2
 8004290:	d055      	beq.n	800433e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004292:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004296:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800429a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800429e:	d033      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80042a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80042a4:	d82c      	bhi.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80042a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042aa:	d02f      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80042ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042b0:	d826      	bhi.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80042b2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80042b6:	d02b      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80042b8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80042bc:	d820      	bhi.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80042be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80042c2:	d012      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80042c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80042c8:	d81a      	bhi.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d022      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80042ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80042d2:	d115      	bne.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042d8:	3308      	adds	r3, #8
 80042da:	2100      	movs	r1, #0
 80042dc:	4618      	mov	r0, r3
 80042de:	f000 febd 	bl	800505c <RCCEx_PLL2_Config>
 80042e2:	4603      	mov	r3, r0
 80042e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80042e8:	e015      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80042ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042ee:	3328      	adds	r3, #40	@ 0x28
 80042f0:	2102      	movs	r1, #2
 80042f2:	4618      	mov	r0, r3
 80042f4:	f000 ff64 	bl	80051c0 <RCCEx_PLL3_Config>
 80042f8:	4603      	mov	r3, r0
 80042fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80042fe:	e00a      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004306:	e006      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004308:	bf00      	nop
 800430a:	e004      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800430c:	bf00      	nop
 800430e:	e002      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004310:	bf00      	nop
 8004312:	e000      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004314:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004316:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800431a:	2b00      	cmp	r3, #0
 800431c:	d10b      	bne.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800431e:	4b39      	ldr	r3, [pc, #228]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004320:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004322:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004326:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800432a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800432e:	4a35      	ldr	r2, [pc, #212]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004330:	430b      	orrs	r3, r1
 8004332:	6553      	str	r3, [r2, #84]	@ 0x54
 8004334:	e003      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004336:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800433a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800433e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004346:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800434a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800434e:	2300      	movs	r3, #0
 8004350:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004354:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004358:	460b      	mov	r3, r1
 800435a:	4313      	orrs	r3, r2
 800435c:	d058      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800435e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004362:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004366:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800436a:	d033      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800436c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004370:	d82c      	bhi.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004372:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004376:	d02f      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004378:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800437c:	d826      	bhi.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800437e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004382:	d02b      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004384:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004388:	d820      	bhi.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800438a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800438e:	d012      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004390:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004394:	d81a      	bhi.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004396:	2b00      	cmp	r3, #0
 8004398:	d022      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800439a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800439e:	d115      	bne.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80043a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043a4:	3308      	adds	r3, #8
 80043a6:	2100      	movs	r1, #0
 80043a8:	4618      	mov	r0, r3
 80043aa:	f000 fe57 	bl	800505c <RCCEx_PLL2_Config>
 80043ae:	4603      	mov	r3, r0
 80043b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80043b4:	e015      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80043b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ba:	3328      	adds	r3, #40	@ 0x28
 80043bc:	2102      	movs	r1, #2
 80043be:	4618      	mov	r0, r3
 80043c0:	f000 fefe 	bl	80051c0 <RCCEx_PLL3_Config>
 80043c4:	4603      	mov	r3, r0
 80043c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80043ca:	e00a      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80043d2:	e006      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80043d4:	bf00      	nop
 80043d6:	e004      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80043d8:	bf00      	nop
 80043da:	e002      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80043dc:	bf00      	nop
 80043de:	e000      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80043e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d10e      	bne.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80043ea:	4b06      	ldr	r3, [pc, #24]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80043ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043ee:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80043f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80043fa:	4a02      	ldr	r2, [pc, #8]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80043fc:	430b      	orrs	r3, r1
 80043fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8004400:	e006      	b.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004402:	bf00      	nop
 8004404:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004408:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800440c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004410:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004418:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800441c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004420:	2300      	movs	r3, #0
 8004422:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004426:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800442a:	460b      	mov	r3, r1
 800442c:	4313      	orrs	r3, r2
 800442e:	d055      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004430:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004434:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004438:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800443c:	d033      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800443e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004442:	d82c      	bhi.n	800449e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004444:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004448:	d02f      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800444a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800444e:	d826      	bhi.n	800449e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004450:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004454:	d02b      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004456:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800445a:	d820      	bhi.n	800449e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800445c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004460:	d012      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004462:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004466:	d81a      	bhi.n	800449e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004468:	2b00      	cmp	r3, #0
 800446a:	d022      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800446c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004470:	d115      	bne.n	800449e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004472:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004476:	3308      	adds	r3, #8
 8004478:	2100      	movs	r1, #0
 800447a:	4618      	mov	r0, r3
 800447c:	f000 fdee 	bl	800505c <RCCEx_PLL2_Config>
 8004480:	4603      	mov	r3, r0
 8004482:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004486:	e015      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004488:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800448c:	3328      	adds	r3, #40	@ 0x28
 800448e:	2102      	movs	r1, #2
 8004490:	4618      	mov	r0, r3
 8004492:	f000 fe95 	bl	80051c0 <RCCEx_PLL3_Config>
 8004496:	4603      	mov	r3, r0
 8004498:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800449c:	e00a      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80044a4:	e006      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80044a6:	bf00      	nop
 80044a8:	e004      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80044aa:	bf00      	nop
 80044ac:	e002      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80044ae:	bf00      	nop
 80044b0:	e000      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80044b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d10b      	bne.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80044bc:	4ba1      	ldr	r3, [pc, #644]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044c0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80044c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80044cc:	4a9d      	ldr	r2, [pc, #628]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044ce:	430b      	orrs	r3, r1
 80044d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80044d2:	e003      	b.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80044dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e4:	f002 0308 	and.w	r3, r2, #8
 80044e8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80044ec:	2300      	movs	r3, #0
 80044ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80044f2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80044f6:	460b      	mov	r3, r1
 80044f8:	4313      	orrs	r3, r2
 80044fa:	d01e      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80044fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004500:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004504:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004508:	d10c      	bne.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800450a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800450e:	3328      	adds	r3, #40	@ 0x28
 8004510:	2102      	movs	r1, #2
 8004512:	4618      	mov	r0, r3
 8004514:	f000 fe54 	bl	80051c0 <RCCEx_PLL3_Config>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d002      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004524:	4b87      	ldr	r3, [pc, #540]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004526:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004528:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800452c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004530:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004534:	4a83      	ldr	r2, [pc, #524]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004536:	430b      	orrs	r3, r1
 8004538:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800453a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800453e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004542:	f002 0310 	and.w	r3, r2, #16
 8004546:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800454a:	2300      	movs	r3, #0
 800454c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004550:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004554:	460b      	mov	r3, r1
 8004556:	4313      	orrs	r3, r2
 8004558:	d01e      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800455a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800455e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004562:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004566:	d10c      	bne.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004568:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800456c:	3328      	adds	r3, #40	@ 0x28
 800456e:	2102      	movs	r1, #2
 8004570:	4618      	mov	r0, r3
 8004572:	f000 fe25 	bl	80051c0 <RCCEx_PLL3_Config>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d002      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004582:	4b70      	ldr	r3, [pc, #448]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004584:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004586:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800458a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800458e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004592:	4a6c      	ldr	r2, [pc, #432]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004594:	430b      	orrs	r3, r1
 8004596:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004598:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800459c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80045a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80045a8:	2300      	movs	r3, #0
 80045aa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80045ae:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80045b2:	460b      	mov	r3, r1
 80045b4:	4313      	orrs	r3, r2
 80045b6:	d03e      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80045b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80045c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80045c4:	d022      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80045c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80045ca:	d81b      	bhi.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d003      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80045d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045d4:	d00b      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80045d6:	e015      	b.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80045d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045dc:	3308      	adds	r3, #8
 80045de:	2100      	movs	r1, #0
 80045e0:	4618      	mov	r0, r3
 80045e2:	f000 fd3b 	bl	800505c <RCCEx_PLL2_Config>
 80045e6:	4603      	mov	r3, r0
 80045e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80045ec:	e00f      	b.n	800460e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80045ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045f2:	3328      	adds	r3, #40	@ 0x28
 80045f4:	2102      	movs	r1, #2
 80045f6:	4618      	mov	r0, r3
 80045f8:	f000 fde2 	bl	80051c0 <RCCEx_PLL3_Config>
 80045fc:	4603      	mov	r3, r0
 80045fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004602:	e004      	b.n	800460e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800460a:	e000      	b.n	800460e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800460c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800460e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004612:	2b00      	cmp	r3, #0
 8004614:	d10b      	bne.n	800462e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004616:	4b4b      	ldr	r3, [pc, #300]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004618:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800461a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800461e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004622:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004626:	4a47      	ldr	r2, [pc, #284]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004628:	430b      	orrs	r3, r1
 800462a:	6593      	str	r3, [r2, #88]	@ 0x58
 800462c:	e003      	b.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800462e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004632:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004636:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800463a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800463e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004642:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004644:	2300      	movs	r3, #0
 8004646:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004648:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800464c:	460b      	mov	r3, r1
 800464e:	4313      	orrs	r3, r2
 8004650:	d03b      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004652:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004656:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800465a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800465e:	d01f      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004660:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004664:	d818      	bhi.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004666:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800466a:	d003      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800466c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004670:	d007      	beq.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004672:	e011      	b.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004674:	4b33      	ldr	r3, [pc, #204]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004678:	4a32      	ldr	r2, [pc, #200]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800467a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800467e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004680:	e00f      	b.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004682:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004686:	3328      	adds	r3, #40	@ 0x28
 8004688:	2101      	movs	r1, #1
 800468a:	4618      	mov	r0, r3
 800468c:	f000 fd98 	bl	80051c0 <RCCEx_PLL3_Config>
 8004690:	4603      	mov	r3, r0
 8004692:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004696:	e004      	b.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800469e:	e000      	b.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80046a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d10b      	bne.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80046aa:	4b26      	ldr	r3, [pc, #152]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046ae:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80046b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046ba:	4a22      	ldr	r2, [pc, #136]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046bc:	430b      	orrs	r3, r1
 80046be:	6553      	str	r3, [r2, #84]	@ 0x54
 80046c0:	e003      	b.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80046ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80046d6:	673b      	str	r3, [r7, #112]	@ 0x70
 80046d8:	2300      	movs	r3, #0
 80046da:	677b      	str	r3, [r7, #116]	@ 0x74
 80046dc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80046e0:	460b      	mov	r3, r1
 80046e2:	4313      	orrs	r3, r2
 80046e4:	d034      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80046e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d003      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80046f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046f4:	d007      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80046f6:	e011      	b.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046f8:	4b12      	ldr	r3, [pc, #72]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046fc:	4a11      	ldr	r2, [pc, #68]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004702:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004704:	e00e      	b.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004706:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800470a:	3308      	adds	r3, #8
 800470c:	2102      	movs	r1, #2
 800470e:	4618      	mov	r0, r3
 8004710:	f000 fca4 	bl	800505c <RCCEx_PLL2_Config>
 8004714:	4603      	mov	r3, r0
 8004716:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800471a:	e003      	b.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004722:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004724:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004728:	2b00      	cmp	r3, #0
 800472a:	d10d      	bne.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800472c:	4b05      	ldr	r3, [pc, #20]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800472e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004730:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004734:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004738:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800473a:	4a02      	ldr	r2, [pc, #8]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800473c:	430b      	orrs	r3, r1
 800473e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004740:	e006      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004742:	bf00      	nop
 8004744:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004748:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800474c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004750:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004758:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800475c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800475e:	2300      	movs	r3, #0
 8004760:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004762:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004766:	460b      	mov	r3, r1
 8004768:	4313      	orrs	r3, r2
 800476a:	d00c      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800476c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004770:	3328      	adds	r3, #40	@ 0x28
 8004772:	2102      	movs	r1, #2
 8004774:	4618      	mov	r0, r3
 8004776:	f000 fd23 	bl	80051c0 <RCCEx_PLL3_Config>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d002      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800478a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800478e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004792:	663b      	str	r3, [r7, #96]	@ 0x60
 8004794:	2300      	movs	r3, #0
 8004796:	667b      	str	r3, [r7, #100]	@ 0x64
 8004798:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800479c:	460b      	mov	r3, r1
 800479e:	4313      	orrs	r3, r2
 80047a0:	d038      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80047a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80047ae:	d018      	beq.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80047b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80047b4:	d811      	bhi.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80047b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047ba:	d014      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80047bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047c0:	d80b      	bhi.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d011      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80047c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047ca:	d106      	bne.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047cc:	4bc3      	ldr	r3, [pc, #780]	@ (8004adc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047d0:	4ac2      	ldr	r2, [pc, #776]	@ (8004adc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80047d8:	e008      	b.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80047e0:	e004      	b.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80047e2:	bf00      	nop
 80047e4:	e002      	b.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80047e6:	bf00      	nop
 80047e8:	e000      	b.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80047ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d10b      	bne.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80047f4:	4bb9      	ldr	r3, [pc, #740]	@ (8004adc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047f8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80047fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004800:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004804:	4ab5      	ldr	r2, [pc, #724]	@ (8004adc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004806:	430b      	orrs	r3, r1
 8004808:	6553      	str	r3, [r2, #84]	@ 0x54
 800480a:	e003      	b.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800480c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004810:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004814:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800481c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004820:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004822:	2300      	movs	r3, #0
 8004824:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004826:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800482a:	460b      	mov	r3, r1
 800482c:	4313      	orrs	r3, r2
 800482e:	d009      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004830:	4baa      	ldr	r3, [pc, #680]	@ (8004adc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004832:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004834:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004838:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800483c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800483e:	4aa7      	ldr	r2, [pc, #668]	@ (8004adc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004840:	430b      	orrs	r3, r1
 8004842:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004844:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800484c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004850:	653b      	str	r3, [r7, #80]	@ 0x50
 8004852:	2300      	movs	r3, #0
 8004854:	657b      	str	r3, [r7, #84]	@ 0x54
 8004856:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800485a:	460b      	mov	r3, r1
 800485c:	4313      	orrs	r3, r2
 800485e:	d00a      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004860:	4b9e      	ldr	r3, [pc, #632]	@ (8004adc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004868:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800486c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004870:	4a9a      	ldr	r2, [pc, #616]	@ (8004adc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004872:	430b      	orrs	r3, r1
 8004874:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004876:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800487a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800487e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004882:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004884:	2300      	movs	r3, #0
 8004886:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004888:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800488c:	460b      	mov	r3, r1
 800488e:	4313      	orrs	r3, r2
 8004890:	d009      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004892:	4b92      	ldr	r3, [pc, #584]	@ (8004adc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004894:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004896:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800489a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800489e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048a0:	4a8e      	ldr	r2, [pc, #568]	@ (8004adc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048a2:	430b      	orrs	r3, r1
 80048a4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80048a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ae:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80048b2:	643b      	str	r3, [r7, #64]	@ 0x40
 80048b4:	2300      	movs	r3, #0
 80048b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80048b8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80048bc:	460b      	mov	r3, r1
 80048be:	4313      	orrs	r3, r2
 80048c0:	d00e      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80048c2:	4b86      	ldr	r3, [pc, #536]	@ (8004adc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	4a85      	ldr	r2, [pc, #532]	@ (8004adc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048c8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80048cc:	6113      	str	r3, [r2, #16]
 80048ce:	4b83      	ldr	r3, [pc, #524]	@ (8004adc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048d0:	6919      	ldr	r1, [r3, #16]
 80048d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048d6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80048da:	4a80      	ldr	r2, [pc, #512]	@ (8004adc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048dc:	430b      	orrs	r3, r1
 80048de:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80048e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80048ec:	63bb      	str	r3, [r7, #56]	@ 0x38
 80048ee:	2300      	movs	r3, #0
 80048f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80048f2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80048f6:	460b      	mov	r3, r1
 80048f8:	4313      	orrs	r3, r2
 80048fa:	d009      	beq.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80048fc:	4b77      	ldr	r3, [pc, #476]	@ (8004adc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004900:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004904:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004908:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800490a:	4a74      	ldr	r2, [pc, #464]	@ (8004adc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800490c:	430b      	orrs	r3, r1
 800490e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004910:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004918:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800491c:	633b      	str	r3, [r7, #48]	@ 0x30
 800491e:	2300      	movs	r3, #0
 8004920:	637b      	str	r3, [r7, #52]	@ 0x34
 8004922:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004926:	460b      	mov	r3, r1
 8004928:	4313      	orrs	r3, r2
 800492a:	d00a      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800492c:	4b6b      	ldr	r3, [pc, #428]	@ (8004adc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800492e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004930:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004934:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004938:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800493c:	4a67      	ldr	r2, [pc, #412]	@ (8004adc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800493e:	430b      	orrs	r3, r1
 8004940:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004942:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800494a:	2100      	movs	r1, #0
 800494c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004954:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004958:	460b      	mov	r3, r1
 800495a:	4313      	orrs	r3, r2
 800495c:	d011      	beq.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800495e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004962:	3308      	adds	r3, #8
 8004964:	2100      	movs	r1, #0
 8004966:	4618      	mov	r0, r3
 8004968:	f000 fb78 	bl	800505c <RCCEx_PLL2_Config>
 800496c:	4603      	mov	r3, r0
 800496e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004972:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004976:	2b00      	cmp	r3, #0
 8004978:	d003      	beq.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800497a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800497e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004982:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800498a:	2100      	movs	r1, #0
 800498c:	6239      	str	r1, [r7, #32]
 800498e:	f003 0302 	and.w	r3, r3, #2
 8004992:	627b      	str	r3, [r7, #36]	@ 0x24
 8004994:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004998:	460b      	mov	r3, r1
 800499a:	4313      	orrs	r3, r2
 800499c:	d011      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800499e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049a2:	3308      	adds	r3, #8
 80049a4:	2101      	movs	r1, #1
 80049a6:	4618      	mov	r0, r3
 80049a8:	f000 fb58 	bl	800505c <RCCEx_PLL2_Config>
 80049ac:	4603      	mov	r3, r0
 80049ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80049b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d003      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80049c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ca:	2100      	movs	r1, #0
 80049cc:	61b9      	str	r1, [r7, #24]
 80049ce:	f003 0304 	and.w	r3, r3, #4
 80049d2:	61fb      	str	r3, [r7, #28]
 80049d4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80049d8:	460b      	mov	r3, r1
 80049da:	4313      	orrs	r3, r2
 80049dc:	d011      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80049de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049e2:	3308      	adds	r3, #8
 80049e4:	2102      	movs	r1, #2
 80049e6:	4618      	mov	r0, r3
 80049e8:	f000 fb38 	bl	800505c <RCCEx_PLL2_Config>
 80049ec:	4603      	mov	r3, r0
 80049ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80049f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d003      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a0a:	2100      	movs	r1, #0
 8004a0c:	6139      	str	r1, [r7, #16]
 8004a0e:	f003 0308 	and.w	r3, r3, #8
 8004a12:	617b      	str	r3, [r7, #20]
 8004a14:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004a18:	460b      	mov	r3, r1
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	d011      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a22:	3328      	adds	r3, #40	@ 0x28
 8004a24:	2100      	movs	r1, #0
 8004a26:	4618      	mov	r0, r3
 8004a28:	f000 fbca 	bl	80051c0 <RCCEx_PLL3_Config>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004a32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d003      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a4a:	2100      	movs	r1, #0
 8004a4c:	60b9      	str	r1, [r7, #8]
 8004a4e:	f003 0310 	and.w	r3, r3, #16
 8004a52:	60fb      	str	r3, [r7, #12]
 8004a54:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004a58:	460b      	mov	r3, r1
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	d011      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a62:	3328      	adds	r3, #40	@ 0x28
 8004a64:	2101      	movs	r1, #1
 8004a66:	4618      	mov	r0, r3
 8004a68:	f000 fbaa 	bl	80051c0 <RCCEx_PLL3_Config>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004a72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d003      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a8a:	2100      	movs	r1, #0
 8004a8c:	6039      	str	r1, [r7, #0]
 8004a8e:	f003 0320 	and.w	r3, r3, #32
 8004a92:	607b      	str	r3, [r7, #4]
 8004a94:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004a98:	460b      	mov	r3, r1
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	d011      	beq.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aa2:	3328      	adds	r3, #40	@ 0x28
 8004aa4:	2102      	movs	r1, #2
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f000 fb8a 	bl	80051c0 <RCCEx_PLL3_Config>
 8004aac:	4603      	mov	r3, r0
 8004aae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004ab2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d003      	beq.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004abe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004ac2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d101      	bne.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004aca:	2300      	movs	r3, #0
 8004acc:	e000      	b.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004adc:	58024400 	.word	0x58024400

08004ae0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004ae4:	f7fe fd96 	bl	8003614 <HAL_RCC_GetHCLKFreq>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	4b06      	ldr	r3, [pc, #24]	@ (8004b04 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004aec:	6a1b      	ldr	r3, [r3, #32]
 8004aee:	091b      	lsrs	r3, r3, #4
 8004af0:	f003 0307 	and.w	r3, r3, #7
 8004af4:	4904      	ldr	r1, [pc, #16]	@ (8004b08 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004af6:	5ccb      	ldrb	r3, [r1, r3]
 8004af8:	f003 031f 	and.w	r3, r3, #31
 8004afc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	58024400 	.word	0x58024400
 8004b08:	08008ec0 	.word	0x08008ec0

08004b0c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b089      	sub	sp, #36	@ 0x24
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004b14:	4ba1      	ldr	r3, [pc, #644]	@ (8004d9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b18:	f003 0303 	and.w	r3, r3, #3
 8004b1c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004b1e:	4b9f      	ldr	r3, [pc, #636]	@ (8004d9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b22:	0b1b      	lsrs	r3, r3, #12
 8004b24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b28:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004b2a:	4b9c      	ldr	r3, [pc, #624]	@ (8004d9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b2e:	091b      	lsrs	r3, r3, #4
 8004b30:	f003 0301 	and.w	r3, r3, #1
 8004b34:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004b36:	4b99      	ldr	r3, [pc, #612]	@ (8004d9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b3a:	08db      	lsrs	r3, r3, #3
 8004b3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b40:	693a      	ldr	r2, [r7, #16]
 8004b42:	fb02 f303 	mul.w	r3, r2, r3
 8004b46:	ee07 3a90 	vmov	s15, r3
 8004b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b4e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	f000 8111 	beq.w	8004d7c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	f000 8083 	beq.w	8004c68 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	f200 80a1 	bhi.w	8004cac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d003      	beq.n	8004b78 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d056      	beq.n	8004c24 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004b76:	e099      	b.n	8004cac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b78:	4b88      	ldr	r3, [pc, #544]	@ (8004d9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0320 	and.w	r3, r3, #32
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d02d      	beq.n	8004be0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004b84:	4b85      	ldr	r3, [pc, #532]	@ (8004d9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	08db      	lsrs	r3, r3, #3
 8004b8a:	f003 0303 	and.w	r3, r3, #3
 8004b8e:	4a84      	ldr	r2, [pc, #528]	@ (8004da0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004b90:	fa22 f303 	lsr.w	r3, r2, r3
 8004b94:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	ee07 3a90 	vmov	s15, r3
 8004b9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	ee07 3a90 	vmov	s15, r3
 8004ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004baa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bae:	4b7b      	ldr	r3, [pc, #492]	@ (8004d9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bb6:	ee07 3a90 	vmov	s15, r3
 8004bba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bc2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004da4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004bc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bda:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004bde:	e087      	b.n	8004cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	ee07 3a90 	vmov	s15, r3
 8004be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bea:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004da8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004bee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bf2:	4b6a      	ldr	r3, [pc, #424]	@ (8004d9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bfa:	ee07 3a90 	vmov	s15, r3
 8004bfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c02:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c06:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004da4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c22:	e065      	b.n	8004cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	ee07 3a90 	vmov	s15, r3
 8004c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c2e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004dac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004c32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c36:	4b59      	ldr	r3, [pc, #356]	@ (8004d9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c3e:	ee07 3a90 	vmov	s15, r3
 8004c42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c46:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c4a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004da4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c66:	e043      	b.n	8004cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	ee07 3a90 	vmov	s15, r3
 8004c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c72:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004db0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004c76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c7a:	4b48      	ldr	r3, [pc, #288]	@ (8004d9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c82:	ee07 3a90 	vmov	s15, r3
 8004c86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c8e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004da4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ca6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004caa:	e021      	b.n	8004cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	ee07 3a90 	vmov	s15, r3
 8004cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cb6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004dac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004cba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cbe:	4b37      	ldr	r3, [pc, #220]	@ (8004d9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cc6:	ee07 3a90 	vmov	s15, r3
 8004cca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cce:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cd2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004da4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004cd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ce2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004cee:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004cf0:	4b2a      	ldr	r3, [pc, #168]	@ (8004d9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cf4:	0a5b      	lsrs	r3, r3, #9
 8004cf6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cfa:	ee07 3a90 	vmov	s15, r3
 8004cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d02:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004d06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d16:	ee17 2a90 	vmov	r2, s15
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004d1e:	4b1f      	ldr	r3, [pc, #124]	@ (8004d9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d22:	0c1b      	lsrs	r3, r3, #16
 8004d24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d28:	ee07 3a90 	vmov	s15, r3
 8004d2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d30:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004d34:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d38:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d44:	ee17 2a90 	vmov	r2, s15
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004d4c:	4b13      	ldr	r3, [pc, #76]	@ (8004d9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d50:	0e1b      	lsrs	r3, r3, #24
 8004d52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d56:	ee07 3a90 	vmov	s15, r3
 8004d5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d5e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004d62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d66:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d72:	ee17 2a90 	vmov	r2, s15
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004d7a:	e008      	b.n	8004d8e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	609a      	str	r2, [r3, #8]
}
 8004d8e:	bf00      	nop
 8004d90:	3724      	adds	r7, #36	@ 0x24
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr
 8004d9a:	bf00      	nop
 8004d9c:	58024400 	.word	0x58024400
 8004da0:	03d09000 	.word	0x03d09000
 8004da4:	46000000 	.word	0x46000000
 8004da8:	4c742400 	.word	0x4c742400
 8004dac:	4a742400 	.word	0x4a742400
 8004db0:	4af42400 	.word	0x4af42400

08004db4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b089      	sub	sp, #36	@ 0x24
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004dbc:	4ba1      	ldr	r3, [pc, #644]	@ (8005044 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dc0:	f003 0303 	and.w	r3, r3, #3
 8004dc4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004dc6:	4b9f      	ldr	r3, [pc, #636]	@ (8005044 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dca:	0d1b      	lsrs	r3, r3, #20
 8004dcc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004dd0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004dd2:	4b9c      	ldr	r3, [pc, #624]	@ (8005044 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dd6:	0a1b      	lsrs	r3, r3, #8
 8004dd8:	f003 0301 	and.w	r3, r3, #1
 8004ddc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004dde:	4b99      	ldr	r3, [pc, #612]	@ (8005044 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004de2:	08db      	lsrs	r3, r3, #3
 8004de4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004de8:	693a      	ldr	r2, [r7, #16]
 8004dea:	fb02 f303 	mul.w	r3, r2, r3
 8004dee:	ee07 3a90 	vmov	s15, r3
 8004df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004df6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	f000 8111 	beq.w	8005024 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004e02:	69bb      	ldr	r3, [r7, #24]
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	f000 8083 	beq.w	8004f10 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	2b02      	cmp	r3, #2
 8004e0e:	f200 80a1 	bhi.w	8004f54 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004e12:	69bb      	ldr	r3, [r7, #24]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d003      	beq.n	8004e20 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004e18:	69bb      	ldr	r3, [r7, #24]
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d056      	beq.n	8004ecc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004e1e:	e099      	b.n	8004f54 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e20:	4b88      	ldr	r3, [pc, #544]	@ (8005044 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 0320 	and.w	r3, r3, #32
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d02d      	beq.n	8004e88 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004e2c:	4b85      	ldr	r3, [pc, #532]	@ (8005044 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	08db      	lsrs	r3, r3, #3
 8004e32:	f003 0303 	and.w	r3, r3, #3
 8004e36:	4a84      	ldr	r2, [pc, #528]	@ (8005048 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004e38:	fa22 f303 	lsr.w	r3, r2, r3
 8004e3c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	ee07 3a90 	vmov	s15, r3
 8004e44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	ee07 3a90 	vmov	s15, r3
 8004e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e56:	4b7b      	ldr	r3, [pc, #492]	@ (8005044 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e5e:	ee07 3a90 	vmov	s15, r3
 8004e62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e66:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e6a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800504c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e82:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004e86:	e087      	b.n	8004f98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	ee07 3a90 	vmov	s15, r3
 8004e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e92:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005050 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004e96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e9a:	4b6a      	ldr	r3, [pc, #424]	@ (8005044 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ea2:	ee07 3a90 	vmov	s15, r3
 8004ea6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eaa:	ed97 6a03 	vldr	s12, [r7, #12]
 8004eae:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800504c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004eb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004eb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004eba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ebe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ec6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004eca:	e065      	b.n	8004f98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	ee07 3a90 	vmov	s15, r3
 8004ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ed6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005054 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004eda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ede:	4b59      	ldr	r3, [pc, #356]	@ (8005044 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ee2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ee6:	ee07 3a90 	vmov	s15, r3
 8004eea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eee:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ef2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800504c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ef6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004efa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004efe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f0e:	e043      	b.n	8004f98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	ee07 3a90 	vmov	s15, r3
 8004f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f1a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005058 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004f1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f22:	4b48      	ldr	r3, [pc, #288]	@ (8005044 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f2a:	ee07 3a90 	vmov	s15, r3
 8004f2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f32:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f36:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800504c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f52:	e021      	b.n	8004f98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	ee07 3a90 	vmov	s15, r3
 8004f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f5e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005054 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004f62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f66:	4b37      	ldr	r3, [pc, #220]	@ (8005044 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f6e:	ee07 3a90 	vmov	s15, r3
 8004f72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f76:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f7a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800504c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f96:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004f98:	4b2a      	ldr	r3, [pc, #168]	@ (8005044 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f9c:	0a5b      	lsrs	r3, r3, #9
 8004f9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004fa2:	ee07 3a90 	vmov	s15, r3
 8004fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004faa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004fae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004fb2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fbe:	ee17 2a90 	vmov	r2, s15
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004fc6:	4b1f      	ldr	r3, [pc, #124]	@ (8005044 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fca:	0c1b      	lsrs	r3, r3, #16
 8004fcc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004fd0:	ee07 3a90 	vmov	s15, r3
 8004fd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fd8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004fdc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004fe0:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fe4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fe8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fec:	ee17 2a90 	vmov	r2, s15
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004ff4:	4b13      	ldr	r3, [pc, #76]	@ (8005044 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ff8:	0e1b      	lsrs	r3, r3, #24
 8004ffa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ffe:	ee07 3a90 	vmov	s15, r3
 8005002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005006:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800500a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800500e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005012:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005016:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800501a:	ee17 2a90 	vmov	r2, s15
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005022:	e008      	b.n	8005036 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	609a      	str	r2, [r3, #8]
}
 8005036:	bf00      	nop
 8005038:	3724      	adds	r7, #36	@ 0x24
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	58024400 	.word	0x58024400
 8005048:	03d09000 	.word	0x03d09000
 800504c:	46000000 	.word	0x46000000
 8005050:	4c742400 	.word	0x4c742400
 8005054:	4a742400 	.word	0x4a742400
 8005058:	4af42400 	.word	0x4af42400

0800505c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b084      	sub	sp, #16
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005066:	2300      	movs	r3, #0
 8005068:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800506a:	4b53      	ldr	r3, [pc, #332]	@ (80051b8 <RCCEx_PLL2_Config+0x15c>)
 800506c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800506e:	f003 0303 	and.w	r3, r3, #3
 8005072:	2b03      	cmp	r3, #3
 8005074:	d101      	bne.n	800507a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e099      	b.n	80051ae <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800507a:	4b4f      	ldr	r3, [pc, #316]	@ (80051b8 <RCCEx_PLL2_Config+0x15c>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a4e      	ldr	r2, [pc, #312]	@ (80051b8 <RCCEx_PLL2_Config+0x15c>)
 8005080:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005084:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005086:	f7fc fa0f 	bl	80014a8 <HAL_GetTick>
 800508a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800508c:	e008      	b.n	80050a0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800508e:	f7fc fa0b 	bl	80014a8 <HAL_GetTick>
 8005092:	4602      	mov	r2, r0
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	2b02      	cmp	r3, #2
 800509a:	d901      	bls.n	80050a0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800509c:	2303      	movs	r3, #3
 800509e:	e086      	b.n	80051ae <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80050a0:	4b45      	ldr	r3, [pc, #276]	@ (80051b8 <RCCEx_PLL2_Config+0x15c>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d1f0      	bne.n	800508e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80050ac:	4b42      	ldr	r3, [pc, #264]	@ (80051b8 <RCCEx_PLL2_Config+0x15c>)
 80050ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050b0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	031b      	lsls	r3, r3, #12
 80050ba:	493f      	ldr	r1, [pc, #252]	@ (80051b8 <RCCEx_PLL2_Config+0x15c>)
 80050bc:	4313      	orrs	r3, r2
 80050be:	628b      	str	r3, [r1, #40]	@ 0x28
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	3b01      	subs	r3, #1
 80050c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	3b01      	subs	r3, #1
 80050d0:	025b      	lsls	r3, r3, #9
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	431a      	orrs	r2, r3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	3b01      	subs	r3, #1
 80050dc:	041b      	lsls	r3, r3, #16
 80050de:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80050e2:	431a      	orrs	r2, r3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	3b01      	subs	r3, #1
 80050ea:	061b      	lsls	r3, r3, #24
 80050ec:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80050f0:	4931      	ldr	r1, [pc, #196]	@ (80051b8 <RCCEx_PLL2_Config+0x15c>)
 80050f2:	4313      	orrs	r3, r2
 80050f4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80050f6:	4b30      	ldr	r3, [pc, #192]	@ (80051b8 <RCCEx_PLL2_Config+0x15c>)
 80050f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050fa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	695b      	ldr	r3, [r3, #20]
 8005102:	492d      	ldr	r1, [pc, #180]	@ (80051b8 <RCCEx_PLL2_Config+0x15c>)
 8005104:	4313      	orrs	r3, r2
 8005106:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005108:	4b2b      	ldr	r3, [pc, #172]	@ (80051b8 <RCCEx_PLL2_Config+0x15c>)
 800510a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800510c:	f023 0220 	bic.w	r2, r3, #32
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	699b      	ldr	r3, [r3, #24]
 8005114:	4928      	ldr	r1, [pc, #160]	@ (80051b8 <RCCEx_PLL2_Config+0x15c>)
 8005116:	4313      	orrs	r3, r2
 8005118:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800511a:	4b27      	ldr	r3, [pc, #156]	@ (80051b8 <RCCEx_PLL2_Config+0x15c>)
 800511c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800511e:	4a26      	ldr	r2, [pc, #152]	@ (80051b8 <RCCEx_PLL2_Config+0x15c>)
 8005120:	f023 0310 	bic.w	r3, r3, #16
 8005124:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005126:	4b24      	ldr	r3, [pc, #144]	@ (80051b8 <RCCEx_PLL2_Config+0x15c>)
 8005128:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800512a:	4b24      	ldr	r3, [pc, #144]	@ (80051bc <RCCEx_PLL2_Config+0x160>)
 800512c:	4013      	ands	r3, r2
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	69d2      	ldr	r2, [r2, #28]
 8005132:	00d2      	lsls	r2, r2, #3
 8005134:	4920      	ldr	r1, [pc, #128]	@ (80051b8 <RCCEx_PLL2_Config+0x15c>)
 8005136:	4313      	orrs	r3, r2
 8005138:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800513a:	4b1f      	ldr	r3, [pc, #124]	@ (80051b8 <RCCEx_PLL2_Config+0x15c>)
 800513c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800513e:	4a1e      	ldr	r2, [pc, #120]	@ (80051b8 <RCCEx_PLL2_Config+0x15c>)
 8005140:	f043 0310 	orr.w	r3, r3, #16
 8005144:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d106      	bne.n	800515a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800514c:	4b1a      	ldr	r3, [pc, #104]	@ (80051b8 <RCCEx_PLL2_Config+0x15c>)
 800514e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005150:	4a19      	ldr	r2, [pc, #100]	@ (80051b8 <RCCEx_PLL2_Config+0x15c>)
 8005152:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005156:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005158:	e00f      	b.n	800517a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	2b01      	cmp	r3, #1
 800515e:	d106      	bne.n	800516e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005160:	4b15      	ldr	r3, [pc, #84]	@ (80051b8 <RCCEx_PLL2_Config+0x15c>)
 8005162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005164:	4a14      	ldr	r2, [pc, #80]	@ (80051b8 <RCCEx_PLL2_Config+0x15c>)
 8005166:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800516a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800516c:	e005      	b.n	800517a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800516e:	4b12      	ldr	r3, [pc, #72]	@ (80051b8 <RCCEx_PLL2_Config+0x15c>)
 8005170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005172:	4a11      	ldr	r2, [pc, #68]	@ (80051b8 <RCCEx_PLL2_Config+0x15c>)
 8005174:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005178:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800517a:	4b0f      	ldr	r3, [pc, #60]	@ (80051b8 <RCCEx_PLL2_Config+0x15c>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a0e      	ldr	r2, [pc, #56]	@ (80051b8 <RCCEx_PLL2_Config+0x15c>)
 8005180:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005184:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005186:	f7fc f98f 	bl	80014a8 <HAL_GetTick>
 800518a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800518c:	e008      	b.n	80051a0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800518e:	f7fc f98b 	bl	80014a8 <HAL_GetTick>
 8005192:	4602      	mov	r2, r0
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	2b02      	cmp	r3, #2
 800519a:	d901      	bls.n	80051a0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800519c:	2303      	movs	r3, #3
 800519e:	e006      	b.n	80051ae <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80051a0:	4b05      	ldr	r3, [pc, #20]	@ (80051b8 <RCCEx_PLL2_Config+0x15c>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d0f0      	beq.n	800518e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80051ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3710      	adds	r7, #16
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	58024400 	.word	0x58024400
 80051bc:	ffff0007 	.word	0xffff0007

080051c0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80051ca:	2300      	movs	r3, #0
 80051cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80051ce:	4b53      	ldr	r3, [pc, #332]	@ (800531c <RCCEx_PLL3_Config+0x15c>)
 80051d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051d2:	f003 0303 	and.w	r3, r3, #3
 80051d6:	2b03      	cmp	r3, #3
 80051d8:	d101      	bne.n	80051de <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e099      	b.n	8005312 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80051de:	4b4f      	ldr	r3, [pc, #316]	@ (800531c <RCCEx_PLL3_Config+0x15c>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a4e      	ldr	r2, [pc, #312]	@ (800531c <RCCEx_PLL3_Config+0x15c>)
 80051e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051ea:	f7fc f95d 	bl	80014a8 <HAL_GetTick>
 80051ee:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80051f0:	e008      	b.n	8005204 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80051f2:	f7fc f959 	bl	80014a8 <HAL_GetTick>
 80051f6:	4602      	mov	r2, r0
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d901      	bls.n	8005204 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	e086      	b.n	8005312 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005204:	4b45      	ldr	r3, [pc, #276]	@ (800531c <RCCEx_PLL3_Config+0x15c>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800520c:	2b00      	cmp	r3, #0
 800520e:	d1f0      	bne.n	80051f2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005210:	4b42      	ldr	r3, [pc, #264]	@ (800531c <RCCEx_PLL3_Config+0x15c>)
 8005212:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005214:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	051b      	lsls	r3, r3, #20
 800521e:	493f      	ldr	r1, [pc, #252]	@ (800531c <RCCEx_PLL3_Config+0x15c>)
 8005220:	4313      	orrs	r3, r2
 8005222:	628b      	str	r3, [r1, #40]	@ 0x28
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	3b01      	subs	r3, #1
 800522a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	3b01      	subs	r3, #1
 8005234:	025b      	lsls	r3, r3, #9
 8005236:	b29b      	uxth	r3, r3
 8005238:	431a      	orrs	r2, r3
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	3b01      	subs	r3, #1
 8005240:	041b      	lsls	r3, r3, #16
 8005242:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005246:	431a      	orrs	r2, r3
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	691b      	ldr	r3, [r3, #16]
 800524c:	3b01      	subs	r3, #1
 800524e:	061b      	lsls	r3, r3, #24
 8005250:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005254:	4931      	ldr	r1, [pc, #196]	@ (800531c <RCCEx_PLL3_Config+0x15c>)
 8005256:	4313      	orrs	r3, r2
 8005258:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800525a:	4b30      	ldr	r3, [pc, #192]	@ (800531c <RCCEx_PLL3_Config+0x15c>)
 800525c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800525e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	695b      	ldr	r3, [r3, #20]
 8005266:	492d      	ldr	r1, [pc, #180]	@ (800531c <RCCEx_PLL3_Config+0x15c>)
 8005268:	4313      	orrs	r3, r2
 800526a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800526c:	4b2b      	ldr	r3, [pc, #172]	@ (800531c <RCCEx_PLL3_Config+0x15c>)
 800526e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005270:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	699b      	ldr	r3, [r3, #24]
 8005278:	4928      	ldr	r1, [pc, #160]	@ (800531c <RCCEx_PLL3_Config+0x15c>)
 800527a:	4313      	orrs	r3, r2
 800527c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800527e:	4b27      	ldr	r3, [pc, #156]	@ (800531c <RCCEx_PLL3_Config+0x15c>)
 8005280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005282:	4a26      	ldr	r2, [pc, #152]	@ (800531c <RCCEx_PLL3_Config+0x15c>)
 8005284:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005288:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800528a:	4b24      	ldr	r3, [pc, #144]	@ (800531c <RCCEx_PLL3_Config+0x15c>)
 800528c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800528e:	4b24      	ldr	r3, [pc, #144]	@ (8005320 <RCCEx_PLL3_Config+0x160>)
 8005290:	4013      	ands	r3, r2
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	69d2      	ldr	r2, [r2, #28]
 8005296:	00d2      	lsls	r2, r2, #3
 8005298:	4920      	ldr	r1, [pc, #128]	@ (800531c <RCCEx_PLL3_Config+0x15c>)
 800529a:	4313      	orrs	r3, r2
 800529c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800529e:	4b1f      	ldr	r3, [pc, #124]	@ (800531c <RCCEx_PLL3_Config+0x15c>)
 80052a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052a2:	4a1e      	ldr	r2, [pc, #120]	@ (800531c <RCCEx_PLL3_Config+0x15c>)
 80052a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d106      	bne.n	80052be <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80052b0:	4b1a      	ldr	r3, [pc, #104]	@ (800531c <RCCEx_PLL3_Config+0x15c>)
 80052b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052b4:	4a19      	ldr	r2, [pc, #100]	@ (800531c <RCCEx_PLL3_Config+0x15c>)
 80052b6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80052ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80052bc:	e00f      	b.n	80052de <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d106      	bne.n	80052d2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80052c4:	4b15      	ldr	r3, [pc, #84]	@ (800531c <RCCEx_PLL3_Config+0x15c>)
 80052c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052c8:	4a14      	ldr	r2, [pc, #80]	@ (800531c <RCCEx_PLL3_Config+0x15c>)
 80052ca:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80052ce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80052d0:	e005      	b.n	80052de <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80052d2:	4b12      	ldr	r3, [pc, #72]	@ (800531c <RCCEx_PLL3_Config+0x15c>)
 80052d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052d6:	4a11      	ldr	r2, [pc, #68]	@ (800531c <RCCEx_PLL3_Config+0x15c>)
 80052d8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80052dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80052de:	4b0f      	ldr	r3, [pc, #60]	@ (800531c <RCCEx_PLL3_Config+0x15c>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a0e      	ldr	r2, [pc, #56]	@ (800531c <RCCEx_PLL3_Config+0x15c>)
 80052e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052ea:	f7fc f8dd 	bl	80014a8 <HAL_GetTick>
 80052ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80052f0:	e008      	b.n	8005304 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80052f2:	f7fc f8d9 	bl	80014a8 <HAL_GetTick>
 80052f6:	4602      	mov	r2, r0
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	2b02      	cmp	r3, #2
 80052fe:	d901      	bls.n	8005304 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005300:	2303      	movs	r3, #3
 8005302:	e006      	b.n	8005312 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005304:	4b05      	ldr	r3, [pc, #20]	@ (800531c <RCCEx_PLL3_Config+0x15c>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d0f0      	beq.n	80052f2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005310:	7bfb      	ldrb	r3, [r7, #15]
}
 8005312:	4618      	mov	r0, r3
 8005314:	3710      	adds	r7, #16
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
 800531a:	bf00      	nop
 800531c:	58024400 	.word	0x58024400
 8005320:	ffff0007 	.word	0xffff0007

08005324 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b082      	sub	sp, #8
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d101      	bne.n	8005336 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e049      	b.n	80053ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800533c:	b2db      	uxtb	r3, r3
 800533e:	2b00      	cmp	r3, #0
 8005340:	d106      	bne.n	8005350 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f7fb fe9a 	bl	8001084 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2202      	movs	r2, #2
 8005354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	3304      	adds	r3, #4
 8005360:	4619      	mov	r1, r3
 8005362:	4610      	mov	r0, r2
 8005364:	f000 fce4 	bl	8005d30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3708      	adds	r7, #8
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}

080053d2 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80053d2:	b580      	push	{r7, lr}
 80053d4:	b082      	sub	sp, #8
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d101      	bne.n	80053e4 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	e049      	b.n	8005478 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d106      	bne.n	80053fe <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 f841 	bl	8005480 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2202      	movs	r2, #2
 8005402:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	3304      	adds	r3, #4
 800540e:	4619      	mov	r1, r3
 8005410:	4610      	mov	r0, r2
 8005412:	f000 fc8d 	bl	8005d30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2201      	movs	r2, #1
 800541a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2201      	movs	r2, #1
 8005422:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2201      	movs	r2, #1
 800542a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2201      	movs	r2, #1
 8005432:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2201      	movs	r2, #1
 800543a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2201      	movs	r2, #1
 8005442:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2201      	movs	r2, #1
 800544a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2201      	movs	r2, #1
 8005452:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2201      	movs	r2, #1
 800545a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2201      	movs	r2, #1
 8005462:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2201      	movs	r2, #1
 800546a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2201      	movs	r2, #1
 8005472:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005476:	2300      	movs	r3, #0
}
 8005478:	4618      	mov	r0, r3
 800547a:	3708      	adds	r7, #8
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005480:	b480      	push	{r7}
 8005482:	b083      	sub	sp, #12
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005488:	bf00      	nop
 800548a:	370c      	adds	r7, #12
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr

08005494 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800549e:	2300      	movs	r3, #0
 80054a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d104      	bne.n	80054b2 <HAL_TIM_IC_Start_IT+0x1e>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	e023      	b.n	80054fa <HAL_TIM_IC_Start_IT+0x66>
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	2b04      	cmp	r3, #4
 80054b6:	d104      	bne.n	80054c2 <HAL_TIM_IC_Start_IT+0x2e>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	e01b      	b.n	80054fa <HAL_TIM_IC_Start_IT+0x66>
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	2b08      	cmp	r3, #8
 80054c6:	d104      	bne.n	80054d2 <HAL_TIM_IC_Start_IT+0x3e>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	e013      	b.n	80054fa <HAL_TIM_IC_Start_IT+0x66>
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	2b0c      	cmp	r3, #12
 80054d6:	d104      	bne.n	80054e2 <HAL_TIM_IC_Start_IT+0x4e>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	e00b      	b.n	80054fa <HAL_TIM_IC_Start_IT+0x66>
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	2b10      	cmp	r3, #16
 80054e6:	d104      	bne.n	80054f2 <HAL_TIM_IC_Start_IT+0x5e>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	e003      	b.n	80054fa <HAL_TIM_IC_Start_IT+0x66>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d104      	bne.n	800550c <HAL_TIM_IC_Start_IT+0x78>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005508:	b2db      	uxtb	r3, r3
 800550a:	e013      	b.n	8005534 <HAL_TIM_IC_Start_IT+0xa0>
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	2b04      	cmp	r3, #4
 8005510:	d104      	bne.n	800551c <HAL_TIM_IC_Start_IT+0x88>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005518:	b2db      	uxtb	r3, r3
 800551a:	e00b      	b.n	8005534 <HAL_TIM_IC_Start_IT+0xa0>
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	2b08      	cmp	r3, #8
 8005520:	d104      	bne.n	800552c <HAL_TIM_IC_Start_IT+0x98>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005528:	b2db      	uxtb	r3, r3
 800552a:	e003      	b.n	8005534 <HAL_TIM_IC_Start_IT+0xa0>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8005532:	b2db      	uxtb	r3, r3
 8005534:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005536:	7bbb      	ldrb	r3, [r7, #14]
 8005538:	2b01      	cmp	r3, #1
 800553a:	d102      	bne.n	8005542 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800553c:	7b7b      	ldrb	r3, [r7, #13]
 800553e:	2b01      	cmp	r3, #1
 8005540:	d001      	beq.n	8005546 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e0e2      	b.n	800570c <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d104      	bne.n	8005556 <HAL_TIM_IC_Start_IT+0xc2>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2202      	movs	r2, #2
 8005550:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005554:	e023      	b.n	800559e <HAL_TIM_IC_Start_IT+0x10a>
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	2b04      	cmp	r3, #4
 800555a:	d104      	bne.n	8005566 <HAL_TIM_IC_Start_IT+0xd2>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2202      	movs	r2, #2
 8005560:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005564:	e01b      	b.n	800559e <HAL_TIM_IC_Start_IT+0x10a>
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	2b08      	cmp	r3, #8
 800556a:	d104      	bne.n	8005576 <HAL_TIM_IC_Start_IT+0xe2>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2202      	movs	r2, #2
 8005570:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005574:	e013      	b.n	800559e <HAL_TIM_IC_Start_IT+0x10a>
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	2b0c      	cmp	r3, #12
 800557a:	d104      	bne.n	8005586 <HAL_TIM_IC_Start_IT+0xf2>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2202      	movs	r2, #2
 8005580:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005584:	e00b      	b.n	800559e <HAL_TIM_IC_Start_IT+0x10a>
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	2b10      	cmp	r3, #16
 800558a:	d104      	bne.n	8005596 <HAL_TIM_IC_Start_IT+0x102>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2202      	movs	r2, #2
 8005590:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005594:	e003      	b.n	800559e <HAL_TIM_IC_Start_IT+0x10a>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2202      	movs	r2, #2
 800559a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d104      	bne.n	80055ae <HAL_TIM_IC_Start_IT+0x11a>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2202      	movs	r2, #2
 80055a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80055ac:	e013      	b.n	80055d6 <HAL_TIM_IC_Start_IT+0x142>
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	2b04      	cmp	r3, #4
 80055b2:	d104      	bne.n	80055be <HAL_TIM_IC_Start_IT+0x12a>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2202      	movs	r2, #2
 80055b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80055bc:	e00b      	b.n	80055d6 <HAL_TIM_IC_Start_IT+0x142>
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	2b08      	cmp	r3, #8
 80055c2:	d104      	bne.n	80055ce <HAL_TIM_IC_Start_IT+0x13a>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2202      	movs	r2, #2
 80055c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80055cc:	e003      	b.n	80055d6 <HAL_TIM_IC_Start_IT+0x142>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2202      	movs	r2, #2
 80055d2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	2b0c      	cmp	r3, #12
 80055da:	d841      	bhi.n	8005660 <HAL_TIM_IC_Start_IT+0x1cc>
 80055dc:	a201      	add	r2, pc, #4	@ (adr r2, 80055e4 <HAL_TIM_IC_Start_IT+0x150>)
 80055de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e2:	bf00      	nop
 80055e4:	08005619 	.word	0x08005619
 80055e8:	08005661 	.word	0x08005661
 80055ec:	08005661 	.word	0x08005661
 80055f0:	08005661 	.word	0x08005661
 80055f4:	0800562b 	.word	0x0800562b
 80055f8:	08005661 	.word	0x08005661
 80055fc:	08005661 	.word	0x08005661
 8005600:	08005661 	.word	0x08005661
 8005604:	0800563d 	.word	0x0800563d
 8005608:	08005661 	.word	0x08005661
 800560c:	08005661 	.word	0x08005661
 8005610:	08005661 	.word	0x08005661
 8005614:	0800564f 	.word	0x0800564f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	68da      	ldr	r2, [r3, #12]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f042 0202 	orr.w	r2, r2, #2
 8005626:	60da      	str	r2, [r3, #12]
      break;
 8005628:	e01d      	b.n	8005666 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68da      	ldr	r2, [r3, #12]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f042 0204 	orr.w	r2, r2, #4
 8005638:	60da      	str	r2, [r3, #12]
      break;
 800563a:	e014      	b.n	8005666 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68da      	ldr	r2, [r3, #12]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f042 0208 	orr.w	r2, r2, #8
 800564a:	60da      	str	r2, [r3, #12]
      break;
 800564c:	e00b      	b.n	8005666 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68da      	ldr	r2, [r3, #12]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f042 0210 	orr.w	r2, r2, #16
 800565c:	60da      	str	r2, [r3, #12]
      break;
 800565e:	e002      	b.n	8005666 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	73fb      	strb	r3, [r7, #15]
      break;
 8005664:	bf00      	nop
  }

  if (status == HAL_OK)
 8005666:	7bfb      	ldrb	r3, [r7, #15]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d14e      	bne.n	800570a <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2201      	movs	r2, #1
 8005672:	6839      	ldr	r1, [r7, #0]
 8005674:	4618      	mov	r0, r3
 8005676:	f000 fdc3 	bl	8006200 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a25      	ldr	r2, [pc, #148]	@ (8005714 <HAL_TIM_IC_Start_IT+0x280>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d022      	beq.n	80056ca <HAL_TIM_IC_Start_IT+0x236>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800568c:	d01d      	beq.n	80056ca <HAL_TIM_IC_Start_IT+0x236>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a21      	ldr	r2, [pc, #132]	@ (8005718 <HAL_TIM_IC_Start_IT+0x284>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d018      	beq.n	80056ca <HAL_TIM_IC_Start_IT+0x236>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a1f      	ldr	r2, [pc, #124]	@ (800571c <HAL_TIM_IC_Start_IT+0x288>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d013      	beq.n	80056ca <HAL_TIM_IC_Start_IT+0x236>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a1e      	ldr	r2, [pc, #120]	@ (8005720 <HAL_TIM_IC_Start_IT+0x28c>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d00e      	beq.n	80056ca <HAL_TIM_IC_Start_IT+0x236>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a1c      	ldr	r2, [pc, #112]	@ (8005724 <HAL_TIM_IC_Start_IT+0x290>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d009      	beq.n	80056ca <HAL_TIM_IC_Start_IT+0x236>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a1b      	ldr	r2, [pc, #108]	@ (8005728 <HAL_TIM_IC_Start_IT+0x294>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d004      	beq.n	80056ca <HAL_TIM_IC_Start_IT+0x236>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a19      	ldr	r2, [pc, #100]	@ (800572c <HAL_TIM_IC_Start_IT+0x298>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d115      	bne.n	80056f6 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	689a      	ldr	r2, [r3, #8]
 80056d0:	4b17      	ldr	r3, [pc, #92]	@ (8005730 <HAL_TIM_IC_Start_IT+0x29c>)
 80056d2:	4013      	ands	r3, r2
 80056d4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	2b06      	cmp	r3, #6
 80056da:	d015      	beq.n	8005708 <HAL_TIM_IC_Start_IT+0x274>
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056e2:	d011      	beq.n	8005708 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f042 0201 	orr.w	r2, r2, #1
 80056f2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056f4:	e008      	b.n	8005708 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f042 0201 	orr.w	r2, r2, #1
 8005704:	601a      	str	r2, [r3, #0]
 8005706:	e000      	b.n	800570a <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005708:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800570a:	7bfb      	ldrb	r3, [r7, #15]
}
 800570c:	4618      	mov	r0, r3
 800570e:	3710      	adds	r7, #16
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}
 8005714:	40010000 	.word	0x40010000
 8005718:	40000400 	.word	0x40000400
 800571c:	40000800 	.word	0x40000800
 8005720:	40000c00 	.word	0x40000c00
 8005724:	40010400 	.word	0x40010400
 8005728:	40001800 	.word	0x40001800
 800572c:	40014000 	.word	0x40014000
 8005730:	00010007 	.word	0x00010007

08005734 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b084      	sub	sp, #16
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	f003 0302 	and.w	r3, r3, #2
 8005752:	2b00      	cmp	r3, #0
 8005754:	d020      	beq.n	8005798 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f003 0302 	and.w	r3, r3, #2
 800575c:	2b00      	cmp	r3, #0
 800575e:	d01b      	beq.n	8005798 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f06f 0202 	mvn.w	r2, #2
 8005768:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2201      	movs	r2, #1
 800576e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	699b      	ldr	r3, [r3, #24]
 8005776:	f003 0303 	and.w	r3, r3, #3
 800577a:	2b00      	cmp	r3, #0
 800577c:	d003      	beq.n	8005786 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f7fb f9c2 	bl	8000b08 <HAL_TIM_IC_CaptureCallback>
 8005784:	e005      	b.n	8005792 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f000 fab4 	bl	8005cf4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f000 fabb 	bl	8005d08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	f003 0304 	and.w	r3, r3, #4
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d020      	beq.n	80057e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f003 0304 	and.w	r3, r3, #4
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d01b      	beq.n	80057e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f06f 0204 	mvn.w	r2, #4
 80057b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2202      	movs	r2, #2
 80057ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	699b      	ldr	r3, [r3, #24]
 80057c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d003      	beq.n	80057d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f7fb f99c 	bl	8000b08 <HAL_TIM_IC_CaptureCallback>
 80057d0:	e005      	b.n	80057de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 fa8e 	bl	8005cf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f000 fa95 	bl	8005d08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	f003 0308 	and.w	r3, r3, #8
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d020      	beq.n	8005830 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	f003 0308 	and.w	r3, r3, #8
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d01b      	beq.n	8005830 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f06f 0208 	mvn.w	r2, #8
 8005800:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2204      	movs	r2, #4
 8005806:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	69db      	ldr	r3, [r3, #28]
 800580e:	f003 0303 	and.w	r3, r3, #3
 8005812:	2b00      	cmp	r3, #0
 8005814:	d003      	beq.n	800581e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f7fb f976 	bl	8000b08 <HAL_TIM_IC_CaptureCallback>
 800581c:	e005      	b.n	800582a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 fa68 	bl	8005cf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f000 fa6f 	bl	8005d08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	f003 0310 	and.w	r3, r3, #16
 8005836:	2b00      	cmp	r3, #0
 8005838:	d020      	beq.n	800587c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f003 0310 	and.w	r3, r3, #16
 8005840:	2b00      	cmp	r3, #0
 8005842:	d01b      	beq.n	800587c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f06f 0210 	mvn.w	r2, #16
 800584c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2208      	movs	r2, #8
 8005852:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	69db      	ldr	r3, [r3, #28]
 800585a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800585e:	2b00      	cmp	r3, #0
 8005860:	d003      	beq.n	800586a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f7fb f950 	bl	8000b08 <HAL_TIM_IC_CaptureCallback>
 8005868:	e005      	b.n	8005876 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f000 fa42 	bl	8005cf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f000 fa49 	bl	8005d08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	f003 0301 	and.w	r3, r3, #1
 8005882:	2b00      	cmp	r3, #0
 8005884:	d00c      	beq.n	80058a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f003 0301 	and.w	r3, r3, #1
 800588c:	2b00      	cmp	r3, #0
 800588e:	d007      	beq.n	80058a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f06f 0201 	mvn.w	r2, #1
 8005898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f7fb f9c8 	bl	8000c30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d104      	bne.n	80058b4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d00c      	beq.n	80058ce <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d007      	beq.n	80058ce <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80058c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f000 fd57 	bl	800637c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d00c      	beq.n	80058f2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d007      	beq.n	80058f2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80058ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f000 fd4f 	bl	8006390 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d00c      	beq.n	8005916 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005902:	2b00      	cmp	r3, #0
 8005904:	d007      	beq.n	8005916 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800590e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f000 fa03 	bl	8005d1c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	f003 0320 	and.w	r3, r3, #32
 800591c:	2b00      	cmp	r3, #0
 800591e:	d00c      	beq.n	800593a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f003 0320 	and.w	r3, r3, #32
 8005926:	2b00      	cmp	r3, #0
 8005928:	d007      	beq.n	800593a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f06f 0220 	mvn.w	r2, #32
 8005932:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f000 fd17 	bl	8006368 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800593a:	bf00      	nop
 800593c:	3710      	adds	r7, #16
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}

08005942 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005942:	b580      	push	{r7, lr}
 8005944:	b086      	sub	sp, #24
 8005946:	af00      	add	r7, sp, #0
 8005948:	60f8      	str	r0, [r7, #12]
 800594a:	60b9      	str	r1, [r7, #8]
 800594c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800594e:	2300      	movs	r3, #0
 8005950:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005958:	2b01      	cmp	r3, #1
 800595a:	d101      	bne.n	8005960 <HAL_TIM_IC_ConfigChannel+0x1e>
 800595c:	2302      	movs	r3, #2
 800595e:	e088      	b.n	8005a72 <HAL_TIM_IC_ConfigChannel+0x130>
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d11b      	bne.n	80059a6 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800597e:	f000 fa77 	bl	8005e70 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	699a      	ldr	r2, [r3, #24]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f022 020c 	bic.w	r2, r2, #12
 8005990:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	6999      	ldr	r1, [r3, #24]
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	689a      	ldr	r2, [r3, #8]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	430a      	orrs	r2, r1
 80059a2:	619a      	str	r2, [r3, #24]
 80059a4:	e060      	b.n	8005a68 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2b04      	cmp	r3, #4
 80059aa:	d11c      	bne.n	80059e6 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80059bc:	f000 fafb 	bl	8005fb6 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	699a      	ldr	r2, [r3, #24]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80059ce:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	6999      	ldr	r1, [r3, #24]
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	021a      	lsls	r2, r3, #8
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	430a      	orrs	r2, r1
 80059e2:	619a      	str	r2, [r3, #24]
 80059e4:	e040      	b.n	8005a68 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2b08      	cmp	r3, #8
 80059ea:	d11b      	bne.n	8005a24 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80059fc:	f000 fb48 	bl	8006090 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	69da      	ldr	r2, [r3, #28]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f022 020c 	bic.w	r2, r2, #12
 8005a0e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	69d9      	ldr	r1, [r3, #28]
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	689a      	ldr	r2, [r3, #8]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	430a      	orrs	r2, r1
 8005a20:	61da      	str	r2, [r3, #28]
 8005a22:	e021      	b.n	8005a68 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2b0c      	cmp	r3, #12
 8005a28:	d11c      	bne.n	8005a64 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005a3a:	f000 fb65 	bl	8006108 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	69da      	ldr	r2, [r3, #28]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005a4c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	69d9      	ldr	r1, [r3, #28]
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	021a      	lsls	r2, r3, #8
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	430a      	orrs	r2, r1
 8005a60:	61da      	str	r2, [r3, #28]
 8005a62:	e001      	b.n	8005a68 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005a70:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3718      	adds	r7, #24
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
	...

08005a7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b084      	sub	sp, #16
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a86:	2300      	movs	r3, #0
 8005a88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d101      	bne.n	8005a98 <HAL_TIM_ConfigClockSource+0x1c>
 8005a94:	2302      	movs	r3, #2
 8005a96:	e0dc      	b.n	8005c52 <HAL_TIM_ConfigClockSource+0x1d6>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2202      	movs	r2, #2
 8005aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ab0:	68ba      	ldr	r2, [r7, #8]
 8005ab2:	4b6a      	ldr	r3, [pc, #424]	@ (8005c5c <HAL_TIM_ConfigClockSource+0x1e0>)
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005abe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	68ba      	ldr	r2, [r7, #8]
 8005ac6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a64      	ldr	r2, [pc, #400]	@ (8005c60 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	f000 80a9 	beq.w	8005c26 <HAL_TIM_ConfigClockSource+0x1aa>
 8005ad4:	4a62      	ldr	r2, [pc, #392]	@ (8005c60 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	f200 80ae 	bhi.w	8005c38 <HAL_TIM_ConfigClockSource+0x1bc>
 8005adc:	4a61      	ldr	r2, [pc, #388]	@ (8005c64 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	f000 80a1 	beq.w	8005c26 <HAL_TIM_ConfigClockSource+0x1aa>
 8005ae4:	4a5f      	ldr	r2, [pc, #380]	@ (8005c64 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	f200 80a6 	bhi.w	8005c38 <HAL_TIM_ConfigClockSource+0x1bc>
 8005aec:	4a5e      	ldr	r2, [pc, #376]	@ (8005c68 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	f000 8099 	beq.w	8005c26 <HAL_TIM_ConfigClockSource+0x1aa>
 8005af4:	4a5c      	ldr	r2, [pc, #368]	@ (8005c68 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	f200 809e 	bhi.w	8005c38 <HAL_TIM_ConfigClockSource+0x1bc>
 8005afc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005b00:	f000 8091 	beq.w	8005c26 <HAL_TIM_ConfigClockSource+0x1aa>
 8005b04:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005b08:	f200 8096 	bhi.w	8005c38 <HAL_TIM_ConfigClockSource+0x1bc>
 8005b0c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b10:	f000 8089 	beq.w	8005c26 <HAL_TIM_ConfigClockSource+0x1aa>
 8005b14:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b18:	f200 808e 	bhi.w	8005c38 <HAL_TIM_ConfigClockSource+0x1bc>
 8005b1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b20:	d03e      	beq.n	8005ba0 <HAL_TIM_ConfigClockSource+0x124>
 8005b22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b26:	f200 8087 	bhi.w	8005c38 <HAL_TIM_ConfigClockSource+0x1bc>
 8005b2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b2e:	f000 8086 	beq.w	8005c3e <HAL_TIM_ConfigClockSource+0x1c2>
 8005b32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b36:	d87f      	bhi.n	8005c38 <HAL_TIM_ConfigClockSource+0x1bc>
 8005b38:	2b70      	cmp	r3, #112	@ 0x70
 8005b3a:	d01a      	beq.n	8005b72 <HAL_TIM_ConfigClockSource+0xf6>
 8005b3c:	2b70      	cmp	r3, #112	@ 0x70
 8005b3e:	d87b      	bhi.n	8005c38 <HAL_TIM_ConfigClockSource+0x1bc>
 8005b40:	2b60      	cmp	r3, #96	@ 0x60
 8005b42:	d050      	beq.n	8005be6 <HAL_TIM_ConfigClockSource+0x16a>
 8005b44:	2b60      	cmp	r3, #96	@ 0x60
 8005b46:	d877      	bhi.n	8005c38 <HAL_TIM_ConfigClockSource+0x1bc>
 8005b48:	2b50      	cmp	r3, #80	@ 0x50
 8005b4a:	d03c      	beq.n	8005bc6 <HAL_TIM_ConfigClockSource+0x14a>
 8005b4c:	2b50      	cmp	r3, #80	@ 0x50
 8005b4e:	d873      	bhi.n	8005c38 <HAL_TIM_ConfigClockSource+0x1bc>
 8005b50:	2b40      	cmp	r3, #64	@ 0x40
 8005b52:	d058      	beq.n	8005c06 <HAL_TIM_ConfigClockSource+0x18a>
 8005b54:	2b40      	cmp	r3, #64	@ 0x40
 8005b56:	d86f      	bhi.n	8005c38 <HAL_TIM_ConfigClockSource+0x1bc>
 8005b58:	2b30      	cmp	r3, #48	@ 0x30
 8005b5a:	d064      	beq.n	8005c26 <HAL_TIM_ConfigClockSource+0x1aa>
 8005b5c:	2b30      	cmp	r3, #48	@ 0x30
 8005b5e:	d86b      	bhi.n	8005c38 <HAL_TIM_ConfigClockSource+0x1bc>
 8005b60:	2b20      	cmp	r3, #32
 8005b62:	d060      	beq.n	8005c26 <HAL_TIM_ConfigClockSource+0x1aa>
 8005b64:	2b20      	cmp	r3, #32
 8005b66:	d867      	bhi.n	8005c38 <HAL_TIM_ConfigClockSource+0x1bc>
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d05c      	beq.n	8005c26 <HAL_TIM_ConfigClockSource+0x1aa>
 8005b6c:	2b10      	cmp	r3, #16
 8005b6e:	d05a      	beq.n	8005c26 <HAL_TIM_ConfigClockSource+0x1aa>
 8005b70:	e062      	b.n	8005c38 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b82:	f000 fb1d 	bl	80061c0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005b94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	68ba      	ldr	r2, [r7, #8]
 8005b9c:	609a      	str	r2, [r3, #8]
      break;
 8005b9e:	e04f      	b.n	8005c40 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005bb0:	f000 fb06 	bl	80061c0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	689a      	ldr	r2, [r3, #8]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005bc2:	609a      	str	r2, [r3, #8]
      break;
 8005bc4:	e03c      	b.n	8005c40 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	f000 f9c0 	bl	8005f58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2150      	movs	r1, #80	@ 0x50
 8005bde:	4618      	mov	r0, r3
 8005be0:	f000 fad0 	bl	8006184 <TIM_ITRx_SetConfig>
      break;
 8005be4:	e02c      	b.n	8005c40 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	f000 fa1c 	bl	8006030 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	2160      	movs	r1, #96	@ 0x60
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f000 fac0 	bl	8006184 <TIM_ITRx_SetConfig>
      break;
 8005c04:	e01c      	b.n	8005c40 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c12:	461a      	mov	r2, r3
 8005c14:	f000 f9a0 	bl	8005f58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	2140      	movs	r1, #64	@ 0x40
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f000 fab0 	bl	8006184 <TIM_ITRx_SetConfig>
      break;
 8005c24:	e00c      	b.n	8005c40 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4619      	mov	r1, r3
 8005c30:	4610      	mov	r0, r2
 8005c32:	f000 faa7 	bl	8006184 <TIM_ITRx_SetConfig>
      break;
 8005c36:	e003      	b.n	8005c40 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	73fb      	strb	r3, [r7, #15]
      break;
 8005c3c:	e000      	b.n	8005c40 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8005c3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3710      	adds	r7, #16
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
 8005c5a:	bf00      	nop
 8005c5c:	ffceff88 	.word	0xffceff88
 8005c60:	00100040 	.word	0x00100040
 8005c64:	00100030 	.word	0x00100030
 8005c68:	00100020 	.word	0x00100020

08005c6c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b085      	sub	sp, #20
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005c76:	2300      	movs	r3, #0
 8005c78:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	2b0c      	cmp	r3, #12
 8005c7e:	d831      	bhi.n	8005ce4 <HAL_TIM_ReadCapturedValue+0x78>
 8005c80:	a201      	add	r2, pc, #4	@ (adr r2, 8005c88 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c86:	bf00      	nop
 8005c88:	08005cbd 	.word	0x08005cbd
 8005c8c:	08005ce5 	.word	0x08005ce5
 8005c90:	08005ce5 	.word	0x08005ce5
 8005c94:	08005ce5 	.word	0x08005ce5
 8005c98:	08005cc7 	.word	0x08005cc7
 8005c9c:	08005ce5 	.word	0x08005ce5
 8005ca0:	08005ce5 	.word	0x08005ce5
 8005ca4:	08005ce5 	.word	0x08005ce5
 8005ca8:	08005cd1 	.word	0x08005cd1
 8005cac:	08005ce5 	.word	0x08005ce5
 8005cb0:	08005ce5 	.word	0x08005ce5
 8005cb4:	08005ce5 	.word	0x08005ce5
 8005cb8:	08005cdb 	.word	0x08005cdb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cc2:	60fb      	str	r3, [r7, #12]

      break;
 8005cc4:	e00f      	b.n	8005ce6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ccc:	60fb      	str	r3, [r7, #12]

      break;
 8005cce:	e00a      	b.n	8005ce6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cd6:	60fb      	str	r3, [r7, #12]

      break;
 8005cd8:	e005      	b.n	8005ce6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ce0:	60fb      	str	r3, [r7, #12]

      break;
 8005ce2:	e000      	b.n	8005ce6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005ce4:	bf00      	nop
  }

  return tmpreg;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3714      	adds	r7, #20
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr

08005cf4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b083      	sub	sp, #12
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005cfc:	bf00      	nop
 8005cfe:	370c      	adds	r7, #12
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr

08005d08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b083      	sub	sp, #12
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d10:	bf00      	nop
 8005d12:	370c      	adds	r7, #12
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr

08005d1c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b083      	sub	sp, #12
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d24:	bf00      	nop
 8005d26:	370c      	adds	r7, #12
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr

08005d30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b085      	sub	sp, #20
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4a43      	ldr	r2, [pc, #268]	@ (8005e50 <TIM_Base_SetConfig+0x120>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d013      	beq.n	8005d70 <TIM_Base_SetConfig+0x40>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d4e:	d00f      	beq.n	8005d70 <TIM_Base_SetConfig+0x40>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	4a40      	ldr	r2, [pc, #256]	@ (8005e54 <TIM_Base_SetConfig+0x124>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d00b      	beq.n	8005d70 <TIM_Base_SetConfig+0x40>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	4a3f      	ldr	r2, [pc, #252]	@ (8005e58 <TIM_Base_SetConfig+0x128>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d007      	beq.n	8005d70 <TIM_Base_SetConfig+0x40>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4a3e      	ldr	r2, [pc, #248]	@ (8005e5c <TIM_Base_SetConfig+0x12c>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d003      	beq.n	8005d70 <TIM_Base_SetConfig+0x40>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4a3d      	ldr	r2, [pc, #244]	@ (8005e60 <TIM_Base_SetConfig+0x130>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d108      	bne.n	8005d82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	68fa      	ldr	r2, [r7, #12]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4a32      	ldr	r2, [pc, #200]	@ (8005e50 <TIM_Base_SetConfig+0x120>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d01f      	beq.n	8005dca <TIM_Base_SetConfig+0x9a>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d90:	d01b      	beq.n	8005dca <TIM_Base_SetConfig+0x9a>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a2f      	ldr	r2, [pc, #188]	@ (8005e54 <TIM_Base_SetConfig+0x124>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d017      	beq.n	8005dca <TIM_Base_SetConfig+0x9a>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a2e      	ldr	r2, [pc, #184]	@ (8005e58 <TIM_Base_SetConfig+0x128>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d013      	beq.n	8005dca <TIM_Base_SetConfig+0x9a>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a2d      	ldr	r2, [pc, #180]	@ (8005e5c <TIM_Base_SetConfig+0x12c>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d00f      	beq.n	8005dca <TIM_Base_SetConfig+0x9a>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4a2c      	ldr	r2, [pc, #176]	@ (8005e60 <TIM_Base_SetConfig+0x130>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d00b      	beq.n	8005dca <TIM_Base_SetConfig+0x9a>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a2b      	ldr	r2, [pc, #172]	@ (8005e64 <TIM_Base_SetConfig+0x134>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d007      	beq.n	8005dca <TIM_Base_SetConfig+0x9a>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4a2a      	ldr	r2, [pc, #168]	@ (8005e68 <TIM_Base_SetConfig+0x138>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d003      	beq.n	8005dca <TIM_Base_SetConfig+0x9a>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	4a29      	ldr	r2, [pc, #164]	@ (8005e6c <TIM_Base_SetConfig+0x13c>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d108      	bne.n	8005ddc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005dd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	68fa      	ldr	r2, [r7, #12]
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	695b      	ldr	r3, [r3, #20]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	689a      	ldr	r2, [r3, #8]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a14      	ldr	r2, [pc, #80]	@ (8005e50 <TIM_Base_SetConfig+0x120>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d00f      	beq.n	8005e22 <TIM_Base_SetConfig+0xf2>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a16      	ldr	r2, [pc, #88]	@ (8005e60 <TIM_Base_SetConfig+0x130>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d00b      	beq.n	8005e22 <TIM_Base_SetConfig+0xf2>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a15      	ldr	r2, [pc, #84]	@ (8005e64 <TIM_Base_SetConfig+0x134>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d007      	beq.n	8005e22 <TIM_Base_SetConfig+0xf2>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a14      	ldr	r2, [pc, #80]	@ (8005e68 <TIM_Base_SetConfig+0x138>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d003      	beq.n	8005e22 <TIM_Base_SetConfig+0xf2>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a13      	ldr	r2, [pc, #76]	@ (8005e6c <TIM_Base_SetConfig+0x13c>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d103      	bne.n	8005e2a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	691a      	ldr	r2, [r3, #16]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f043 0204 	orr.w	r2, r3, #4
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2201      	movs	r2, #1
 8005e3a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	68fa      	ldr	r2, [r7, #12]
 8005e40:	601a      	str	r2, [r3, #0]
}
 8005e42:	bf00      	nop
 8005e44:	3714      	adds	r7, #20
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr
 8005e4e:	bf00      	nop
 8005e50:	40010000 	.word	0x40010000
 8005e54:	40000400 	.word	0x40000400
 8005e58:	40000800 	.word	0x40000800
 8005e5c:	40000c00 	.word	0x40000c00
 8005e60:	40010400 	.word	0x40010400
 8005e64:	40014000 	.word	0x40014000
 8005e68:	40014400 	.word	0x40014400
 8005e6c:	40014800 	.word	0x40014800

08005e70 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b087      	sub	sp, #28
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	60f8      	str	r0, [r7, #12]
 8005e78:	60b9      	str	r1, [r7, #8]
 8005e7a:	607a      	str	r2, [r7, #4]
 8005e7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	6a1b      	ldr	r3, [r3, #32]
 8005e82:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6a1b      	ldr	r3, [r3, #32]
 8005e88:	f023 0201 	bic.w	r2, r3, #1
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	699b      	ldr	r3, [r3, #24]
 8005e94:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	4a28      	ldr	r2, [pc, #160]	@ (8005f3c <TIM_TI1_SetConfig+0xcc>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d01b      	beq.n	8005ed6 <TIM_TI1_SetConfig+0x66>
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ea4:	d017      	beq.n	8005ed6 <TIM_TI1_SetConfig+0x66>
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	4a25      	ldr	r2, [pc, #148]	@ (8005f40 <TIM_TI1_SetConfig+0xd0>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d013      	beq.n	8005ed6 <TIM_TI1_SetConfig+0x66>
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	4a24      	ldr	r2, [pc, #144]	@ (8005f44 <TIM_TI1_SetConfig+0xd4>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d00f      	beq.n	8005ed6 <TIM_TI1_SetConfig+0x66>
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	4a23      	ldr	r2, [pc, #140]	@ (8005f48 <TIM_TI1_SetConfig+0xd8>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d00b      	beq.n	8005ed6 <TIM_TI1_SetConfig+0x66>
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	4a22      	ldr	r2, [pc, #136]	@ (8005f4c <TIM_TI1_SetConfig+0xdc>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d007      	beq.n	8005ed6 <TIM_TI1_SetConfig+0x66>
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	4a21      	ldr	r2, [pc, #132]	@ (8005f50 <TIM_TI1_SetConfig+0xe0>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d003      	beq.n	8005ed6 <TIM_TI1_SetConfig+0x66>
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	4a20      	ldr	r2, [pc, #128]	@ (8005f54 <TIM_TI1_SetConfig+0xe4>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d101      	bne.n	8005eda <TIM_TI1_SetConfig+0x6a>
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e000      	b.n	8005edc <TIM_TI1_SetConfig+0x6c>
 8005eda:	2300      	movs	r3, #0
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d008      	beq.n	8005ef2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	f023 0303 	bic.w	r3, r3, #3
 8005ee6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005ee8:	697a      	ldr	r2, [r7, #20]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	617b      	str	r3, [r7, #20]
 8005ef0:	e003      	b.n	8005efa <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	f043 0301 	orr.w	r3, r3, #1
 8005ef8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	011b      	lsls	r3, r3, #4
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	697a      	ldr	r2, [r7, #20]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	f023 030a 	bic.w	r3, r3, #10
 8005f14:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	f003 030a 	and.w	r3, r3, #10
 8005f1c:	693a      	ldr	r2, [r7, #16]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	697a      	ldr	r2, [r7, #20]
 8005f26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	693a      	ldr	r2, [r7, #16]
 8005f2c:	621a      	str	r2, [r3, #32]
}
 8005f2e:	bf00      	nop
 8005f30:	371c      	adds	r7, #28
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr
 8005f3a:	bf00      	nop
 8005f3c:	40010000 	.word	0x40010000
 8005f40:	40000400 	.word	0x40000400
 8005f44:	40000800 	.word	0x40000800
 8005f48:	40000c00 	.word	0x40000c00
 8005f4c:	40010400 	.word	0x40010400
 8005f50:	40001800 	.word	0x40001800
 8005f54:	40014000 	.word	0x40014000

08005f58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b087      	sub	sp, #28
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6a1b      	ldr	r3, [r3, #32]
 8005f68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6a1b      	ldr	r3, [r3, #32]
 8005f6e:	f023 0201 	bic.w	r2, r3, #1
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	699b      	ldr	r3, [r3, #24]
 8005f7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	011b      	lsls	r3, r3, #4
 8005f88:	693a      	ldr	r2, [r7, #16]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	f023 030a 	bic.w	r3, r3, #10
 8005f94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f96:	697a      	ldr	r2, [r7, #20]
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	693a      	ldr	r2, [r7, #16]
 8005fa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	697a      	ldr	r2, [r7, #20]
 8005fa8:	621a      	str	r2, [r3, #32]
}
 8005faa:	bf00      	nop
 8005fac:	371c      	adds	r7, #28
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr

08005fb6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005fb6:	b480      	push	{r7}
 8005fb8:	b087      	sub	sp, #28
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	60f8      	str	r0, [r7, #12]
 8005fbe:	60b9      	str	r1, [r7, #8]
 8005fc0:	607a      	str	r2, [r7, #4]
 8005fc2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6a1b      	ldr	r3, [r3, #32]
 8005fc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6a1b      	ldr	r3, [r3, #32]
 8005fce:	f023 0210 	bic.w	r2, r3, #16
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	699b      	ldr	r3, [r3, #24]
 8005fda:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005fe2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	021b      	lsls	r3, r3, #8
 8005fe8:	693a      	ldr	r2, [r7, #16]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005ff4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	031b      	lsls	r3, r3, #12
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	693a      	ldr	r2, [r7, #16]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006008:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	011b      	lsls	r3, r3, #4
 800600e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006012:	697a      	ldr	r2, [r7, #20]
 8006014:	4313      	orrs	r3, r2
 8006016:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	693a      	ldr	r2, [r7, #16]
 800601c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	697a      	ldr	r2, [r7, #20]
 8006022:	621a      	str	r2, [r3, #32]
}
 8006024:	bf00      	nop
 8006026:	371c      	adds	r7, #28
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006030:	b480      	push	{r7}
 8006032:	b087      	sub	sp, #28
 8006034:	af00      	add	r7, sp, #0
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6a1b      	ldr	r3, [r3, #32]
 8006040:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	6a1b      	ldr	r3, [r3, #32]
 8006046:	f023 0210 	bic.w	r2, r3, #16
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	699b      	ldr	r3, [r3, #24]
 8006052:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800605a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	031b      	lsls	r3, r3, #12
 8006060:	693a      	ldr	r2, [r7, #16]
 8006062:	4313      	orrs	r3, r2
 8006064:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800606c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	011b      	lsls	r3, r3, #4
 8006072:	697a      	ldr	r2, [r7, #20]
 8006074:	4313      	orrs	r3, r2
 8006076:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	693a      	ldr	r2, [r7, #16]
 800607c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	697a      	ldr	r2, [r7, #20]
 8006082:	621a      	str	r2, [r3, #32]
}
 8006084:	bf00      	nop
 8006086:	371c      	adds	r7, #28
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr

08006090 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006090:	b480      	push	{r7}
 8006092:	b087      	sub	sp, #28
 8006094:	af00      	add	r7, sp, #0
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	60b9      	str	r1, [r7, #8]
 800609a:	607a      	str	r2, [r7, #4]
 800609c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	6a1b      	ldr	r3, [r3, #32]
 80060a2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	6a1b      	ldr	r3, [r3, #32]
 80060a8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	69db      	ldr	r3, [r3, #28]
 80060b4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	f023 0303 	bic.w	r3, r3, #3
 80060bc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80060be:	693a      	ldr	r2, [r7, #16]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80060cc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	011b      	lsls	r3, r3, #4
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	693a      	ldr	r2, [r7, #16]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80060e0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	021b      	lsls	r3, r3, #8
 80060e6:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80060ea:	697a      	ldr	r2, [r7, #20]
 80060ec:	4313      	orrs	r3, r2
 80060ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	693a      	ldr	r2, [r7, #16]
 80060f4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	697a      	ldr	r2, [r7, #20]
 80060fa:	621a      	str	r2, [r3, #32]
}
 80060fc:	bf00      	nop
 80060fe:	371c      	adds	r7, #28
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006108:	b480      	push	{r7}
 800610a:	b087      	sub	sp, #28
 800610c:	af00      	add	r7, sp, #0
 800610e:	60f8      	str	r0, [r7, #12]
 8006110:	60b9      	str	r1, [r7, #8]
 8006112:	607a      	str	r2, [r7, #4]
 8006114:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	6a1b      	ldr	r3, [r3, #32]
 800611a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6a1b      	ldr	r3, [r3, #32]
 8006120:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	69db      	ldr	r3, [r3, #28]
 800612c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006134:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	021b      	lsls	r3, r3, #8
 800613a:	693a      	ldr	r2, [r7, #16]
 800613c:	4313      	orrs	r3, r2
 800613e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006146:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	031b      	lsls	r3, r3, #12
 800614c:	b29b      	uxth	r3, r3
 800614e:	693a      	ldr	r2, [r7, #16]
 8006150:	4313      	orrs	r3, r2
 8006152:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800615a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	031b      	lsls	r3, r3, #12
 8006160:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8006164:	697a      	ldr	r2, [r7, #20]
 8006166:	4313      	orrs	r3, r2
 8006168:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	693a      	ldr	r2, [r7, #16]
 800616e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	697a      	ldr	r2, [r7, #20]
 8006174:	621a      	str	r2, [r3, #32]
}
 8006176:	bf00      	nop
 8006178:	371c      	adds	r7, #28
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr
	...

08006184 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006184:	b480      	push	{r7}
 8006186:	b085      	sub	sp, #20
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006194:	68fa      	ldr	r2, [r7, #12]
 8006196:	4b09      	ldr	r3, [pc, #36]	@ (80061bc <TIM_ITRx_SetConfig+0x38>)
 8006198:	4013      	ands	r3, r2
 800619a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800619c:	683a      	ldr	r2, [r7, #0]
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	4313      	orrs	r3, r2
 80061a2:	f043 0307 	orr.w	r3, r3, #7
 80061a6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	68fa      	ldr	r2, [r7, #12]
 80061ac:	609a      	str	r2, [r3, #8]
}
 80061ae:	bf00      	nop
 80061b0:	3714      	adds	r7, #20
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr
 80061ba:	bf00      	nop
 80061bc:	ffcfff8f 	.word	0xffcfff8f

080061c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b087      	sub	sp, #28
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	60b9      	str	r1, [r7, #8]
 80061ca:	607a      	str	r2, [r7, #4]
 80061cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80061da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	021a      	lsls	r2, r3, #8
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	431a      	orrs	r2, r3
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	697a      	ldr	r2, [r7, #20]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	697a      	ldr	r2, [r7, #20]
 80061f2:	609a      	str	r2, [r3, #8]
}
 80061f4:	bf00      	nop
 80061f6:	371c      	adds	r7, #28
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006200:	b480      	push	{r7}
 8006202:	b087      	sub	sp, #28
 8006204:	af00      	add	r7, sp, #0
 8006206:	60f8      	str	r0, [r7, #12]
 8006208:	60b9      	str	r1, [r7, #8]
 800620a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	f003 031f 	and.w	r3, r3, #31
 8006212:	2201      	movs	r2, #1
 8006214:	fa02 f303 	lsl.w	r3, r2, r3
 8006218:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	6a1a      	ldr	r2, [r3, #32]
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	43db      	mvns	r3, r3
 8006222:	401a      	ands	r2, r3
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	6a1a      	ldr	r2, [r3, #32]
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	f003 031f 	and.w	r3, r3, #31
 8006232:	6879      	ldr	r1, [r7, #4]
 8006234:	fa01 f303 	lsl.w	r3, r1, r3
 8006238:	431a      	orrs	r2, r3
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	621a      	str	r2, [r3, #32]
}
 800623e:	bf00      	nop
 8006240:	371c      	adds	r7, #28
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr
	...

0800624c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800624c:	b480      	push	{r7}
 800624e:	b085      	sub	sp, #20
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800625c:	2b01      	cmp	r3, #1
 800625e:	d101      	bne.n	8006264 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006260:	2302      	movs	r3, #2
 8006262:	e06d      	b.n	8006340 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2202      	movs	r2, #2
 8006270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a30      	ldr	r2, [pc, #192]	@ (800634c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d004      	beq.n	8006298 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a2f      	ldr	r2, [pc, #188]	@ (8006350 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d108      	bne.n	80062aa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800629e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	68fa      	ldr	r2, [r7, #12]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062b0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	68fa      	ldr	r2, [r7, #12]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	68fa      	ldr	r2, [r7, #12]
 80062c2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a20      	ldr	r2, [pc, #128]	@ (800634c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d022      	beq.n	8006314 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062d6:	d01d      	beq.n	8006314 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a1d      	ldr	r2, [pc, #116]	@ (8006354 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d018      	beq.n	8006314 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a1c      	ldr	r2, [pc, #112]	@ (8006358 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d013      	beq.n	8006314 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a1a      	ldr	r2, [pc, #104]	@ (800635c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d00e      	beq.n	8006314 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a15      	ldr	r2, [pc, #84]	@ (8006350 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d009      	beq.n	8006314 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a16      	ldr	r2, [pc, #88]	@ (8006360 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d004      	beq.n	8006314 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a15      	ldr	r2, [pc, #84]	@ (8006364 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d10c      	bne.n	800632e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800631a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	68ba      	ldr	r2, [r7, #8]
 8006322:	4313      	orrs	r3, r2
 8006324:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68ba      	ldr	r2, [r7, #8]
 800632c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2201      	movs	r2, #1
 8006332:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2200      	movs	r2, #0
 800633a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800633e:	2300      	movs	r3, #0
}
 8006340:	4618      	mov	r0, r3
 8006342:	3714      	adds	r7, #20
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr
 800634c:	40010000 	.word	0x40010000
 8006350:	40010400 	.word	0x40010400
 8006354:	40000400 	.word	0x40000400
 8006358:	40000800 	.word	0x40000800
 800635c:	40000c00 	.word	0x40000c00
 8006360:	40001800 	.word	0x40001800
 8006364:	40014000 	.word	0x40014000

08006368 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006370:	bf00      	nop
 8006372:	370c      	adds	r7, #12
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006384:	bf00      	nop
 8006386:	370c      	adds	r7, #12
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr

08006390 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006390:	b480      	push	{r7}
 8006392:	b083      	sub	sp, #12
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006398:	bf00      	nop
 800639a:	370c      	adds	r7, #12
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b082      	sub	sp, #8
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d101      	bne.n	80063b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e042      	b.n	800643c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d106      	bne.n	80063ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f7fa ff37 	bl	800123c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2224      	movs	r2, #36	@ 0x24
 80063d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f022 0201 	bic.w	r2, r2, #1
 80063e4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d002      	beq.n	80063f4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f001 fa14 	bl	800781c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f000 fca9 	bl	8006d4c <UART_SetConfig>
 80063fa:	4603      	mov	r3, r0
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d101      	bne.n	8006404 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	e01b      	b.n	800643c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	685a      	ldr	r2, [r3, #4]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006412:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	689a      	ldr	r2, [r3, #8]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006422:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f042 0201 	orr.w	r2, r2, #1
 8006432:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f001 fa93 	bl	8007960 <UART_CheckIdleState>
 800643a:	4603      	mov	r3, r0
}
 800643c:	4618      	mov	r0, r3
 800643e:	3708      	adds	r7, #8
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}

08006444 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b08a      	sub	sp, #40	@ 0x28
 8006448:	af02      	add	r7, sp, #8
 800644a:	60f8      	str	r0, [r7, #12]
 800644c:	60b9      	str	r1, [r7, #8]
 800644e:	603b      	str	r3, [r7, #0]
 8006450:	4613      	mov	r3, r2
 8006452:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800645a:	2b20      	cmp	r3, #32
 800645c:	d17b      	bne.n	8006556 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d002      	beq.n	800646a <HAL_UART_Transmit+0x26>
 8006464:	88fb      	ldrh	r3, [r7, #6]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d101      	bne.n	800646e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	e074      	b.n	8006558 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2200      	movs	r2, #0
 8006472:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2221      	movs	r2, #33	@ 0x21
 800647a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800647e:	f7fb f813 	bl	80014a8 <HAL_GetTick>
 8006482:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	88fa      	ldrh	r2, [r7, #6]
 8006488:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	88fa      	ldrh	r2, [r7, #6]
 8006490:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800649c:	d108      	bne.n	80064b0 <HAL_UART_Transmit+0x6c>
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d104      	bne.n	80064b0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80064a6:	2300      	movs	r3, #0
 80064a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	61bb      	str	r3, [r7, #24]
 80064ae:	e003      	b.n	80064b8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064b4:	2300      	movs	r3, #0
 80064b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80064b8:	e030      	b.n	800651c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	9300      	str	r3, [sp, #0]
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	2200      	movs	r2, #0
 80064c2:	2180      	movs	r1, #128	@ 0x80
 80064c4:	68f8      	ldr	r0, [r7, #12]
 80064c6:	f001 faf5 	bl	8007ab4 <UART_WaitOnFlagUntilTimeout>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d005      	beq.n	80064dc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2220      	movs	r2, #32
 80064d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80064d8:	2303      	movs	r3, #3
 80064da:	e03d      	b.n	8006558 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80064dc:	69fb      	ldr	r3, [r7, #28]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d10b      	bne.n	80064fa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	881b      	ldrh	r3, [r3, #0]
 80064e6:	461a      	mov	r2, r3
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064f0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80064f2:	69bb      	ldr	r3, [r7, #24]
 80064f4:	3302      	adds	r3, #2
 80064f6:	61bb      	str	r3, [r7, #24]
 80064f8:	e007      	b.n	800650a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80064fa:	69fb      	ldr	r3, [r7, #28]
 80064fc:	781a      	ldrb	r2, [r3, #0]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	3301      	adds	r3, #1
 8006508:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006510:	b29b      	uxth	r3, r3
 8006512:	3b01      	subs	r3, #1
 8006514:	b29a      	uxth	r2, r3
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006522:	b29b      	uxth	r3, r3
 8006524:	2b00      	cmp	r3, #0
 8006526:	d1c8      	bne.n	80064ba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	9300      	str	r3, [sp, #0]
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	2200      	movs	r2, #0
 8006530:	2140      	movs	r1, #64	@ 0x40
 8006532:	68f8      	ldr	r0, [r7, #12]
 8006534:	f001 fabe 	bl	8007ab4 <UART_WaitOnFlagUntilTimeout>
 8006538:	4603      	mov	r3, r0
 800653a:	2b00      	cmp	r3, #0
 800653c:	d005      	beq.n	800654a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2220      	movs	r2, #32
 8006542:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006546:	2303      	movs	r3, #3
 8006548:	e006      	b.n	8006558 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2220      	movs	r2, #32
 800654e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006552:	2300      	movs	r3, #0
 8006554:	e000      	b.n	8006558 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006556:	2302      	movs	r3, #2
  }
}
 8006558:	4618      	mov	r0, r3
 800655a:	3720      	adds	r7, #32
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}

08006560 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b0ba      	sub	sp, #232	@ 0xe8
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	69db      	ldr	r3, [r3, #28]
 800656e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006586:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800658a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800658e:	4013      	ands	r3, r2
 8006590:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006594:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006598:	2b00      	cmp	r3, #0
 800659a:	d11b      	bne.n	80065d4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800659c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065a0:	f003 0320 	and.w	r3, r3, #32
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d015      	beq.n	80065d4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80065a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065ac:	f003 0320 	and.w	r3, r3, #32
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d105      	bne.n	80065c0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80065b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80065b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d009      	beq.n	80065d4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	f000 8393 	beq.w	8006cf0 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	4798      	blx	r3
      }
      return;
 80065d2:	e38d      	b.n	8006cf0 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80065d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80065d8:	2b00      	cmp	r3, #0
 80065da:	f000 8123 	beq.w	8006824 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80065de:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80065e2:	4b8d      	ldr	r3, [pc, #564]	@ (8006818 <HAL_UART_IRQHandler+0x2b8>)
 80065e4:	4013      	ands	r3, r2
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d106      	bne.n	80065f8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80065ea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80065ee:	4b8b      	ldr	r3, [pc, #556]	@ (800681c <HAL_UART_IRQHandler+0x2bc>)
 80065f0:	4013      	ands	r3, r2
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	f000 8116 	beq.w	8006824 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80065f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065fc:	f003 0301 	and.w	r3, r3, #1
 8006600:	2b00      	cmp	r3, #0
 8006602:	d011      	beq.n	8006628 <HAL_UART_IRQHandler+0xc8>
 8006604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006608:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800660c:	2b00      	cmp	r3, #0
 800660e:	d00b      	beq.n	8006628 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	2201      	movs	r2, #1
 8006616:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800661e:	f043 0201 	orr.w	r2, r3, #1
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006628:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800662c:	f003 0302 	and.w	r3, r3, #2
 8006630:	2b00      	cmp	r3, #0
 8006632:	d011      	beq.n	8006658 <HAL_UART_IRQHandler+0xf8>
 8006634:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006638:	f003 0301 	and.w	r3, r3, #1
 800663c:	2b00      	cmp	r3, #0
 800663e:	d00b      	beq.n	8006658 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	2202      	movs	r2, #2
 8006646:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800664e:	f043 0204 	orr.w	r2, r3, #4
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006658:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800665c:	f003 0304 	and.w	r3, r3, #4
 8006660:	2b00      	cmp	r3, #0
 8006662:	d011      	beq.n	8006688 <HAL_UART_IRQHandler+0x128>
 8006664:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006668:	f003 0301 	and.w	r3, r3, #1
 800666c:	2b00      	cmp	r3, #0
 800666e:	d00b      	beq.n	8006688 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	2204      	movs	r2, #4
 8006676:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800667e:	f043 0202 	orr.w	r2, r3, #2
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006688:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800668c:	f003 0308 	and.w	r3, r3, #8
 8006690:	2b00      	cmp	r3, #0
 8006692:	d017      	beq.n	80066c4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006694:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006698:	f003 0320 	and.w	r3, r3, #32
 800669c:	2b00      	cmp	r3, #0
 800669e:	d105      	bne.n	80066ac <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80066a0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80066a4:	4b5c      	ldr	r3, [pc, #368]	@ (8006818 <HAL_UART_IRQHandler+0x2b8>)
 80066a6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d00b      	beq.n	80066c4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	2208      	movs	r2, #8
 80066b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066ba:	f043 0208 	orr.w	r2, r3, #8
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80066c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d012      	beq.n	80066f6 <HAL_UART_IRQHandler+0x196>
 80066d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066d4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d00c      	beq.n	80066f6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80066e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066ec:	f043 0220 	orr.w	r2, r3, #32
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	f000 82f9 	beq.w	8006cf4 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006706:	f003 0320 	and.w	r3, r3, #32
 800670a:	2b00      	cmp	r3, #0
 800670c:	d013      	beq.n	8006736 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800670e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006712:	f003 0320 	and.w	r3, r3, #32
 8006716:	2b00      	cmp	r3, #0
 8006718:	d105      	bne.n	8006726 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800671a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800671e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006722:	2b00      	cmp	r3, #0
 8006724:	d007      	beq.n	8006736 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800672a:	2b00      	cmp	r3, #0
 800672c:	d003      	beq.n	8006736 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800673c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800674a:	2b40      	cmp	r3, #64	@ 0x40
 800674c:	d005      	beq.n	800675a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800674e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006752:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006756:	2b00      	cmp	r3, #0
 8006758:	d054      	beq.n	8006804 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f001 fa18 	bl	8007b90 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800676a:	2b40      	cmp	r3, #64	@ 0x40
 800676c:	d146      	bne.n	80067fc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	3308      	adds	r3, #8
 8006774:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006778:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800677c:	e853 3f00 	ldrex	r3, [r3]
 8006780:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006784:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006788:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800678c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	3308      	adds	r3, #8
 8006796:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800679a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800679e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80067a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80067aa:	e841 2300 	strex	r3, r2, [r1]
 80067ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80067b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d1d9      	bne.n	800676e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d017      	beq.n	80067f4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067ca:	4a15      	ldr	r2, [pc, #84]	@ (8006820 <HAL_UART_IRQHandler+0x2c0>)
 80067cc:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067d4:	4618      	mov	r0, r3
 80067d6:	f7fb fb25 	bl	8001e24 <HAL_DMA_Abort_IT>
 80067da:	4603      	mov	r3, r0
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d019      	beq.n	8006814 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067e8:	687a      	ldr	r2, [r7, #4]
 80067ea:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80067ee:	4610      	mov	r0, r2
 80067f0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067f2:	e00f      	b.n	8006814 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 fa93 	bl	8006d20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067fa:	e00b      	b.n	8006814 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f000 fa8f 	bl	8006d20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006802:	e007      	b.n	8006814 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f000 fa8b 	bl	8006d20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2200      	movs	r2, #0
 800680e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006812:	e26f      	b.n	8006cf4 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006814:	bf00      	nop
    return;
 8006816:	e26d      	b.n	8006cf4 <HAL_UART_IRQHandler+0x794>
 8006818:	10000001 	.word	0x10000001
 800681c:	04000120 	.word	0x04000120
 8006820:	08007c5d 	.word	0x08007c5d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006828:	2b01      	cmp	r3, #1
 800682a:	f040 8203 	bne.w	8006c34 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800682e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006832:	f003 0310 	and.w	r3, r3, #16
 8006836:	2b00      	cmp	r3, #0
 8006838:	f000 81fc 	beq.w	8006c34 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800683c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006840:	f003 0310 	and.w	r3, r3, #16
 8006844:	2b00      	cmp	r3, #0
 8006846:	f000 81f5 	beq.w	8006c34 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	2210      	movs	r2, #16
 8006850:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800685c:	2b40      	cmp	r3, #64	@ 0x40
 800685e:	f040 816d 	bne.w	8006b3c <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4aa4      	ldr	r2, [pc, #656]	@ (8006afc <HAL_UART_IRQHandler+0x59c>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d068      	beq.n	8006942 <HAL_UART_IRQHandler+0x3e2>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4aa1      	ldr	r2, [pc, #644]	@ (8006b00 <HAL_UART_IRQHandler+0x5a0>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d061      	beq.n	8006942 <HAL_UART_IRQHandler+0x3e2>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a9f      	ldr	r2, [pc, #636]	@ (8006b04 <HAL_UART_IRQHandler+0x5a4>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d05a      	beq.n	8006942 <HAL_UART_IRQHandler+0x3e2>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a9c      	ldr	r2, [pc, #624]	@ (8006b08 <HAL_UART_IRQHandler+0x5a8>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d053      	beq.n	8006942 <HAL_UART_IRQHandler+0x3e2>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a9a      	ldr	r2, [pc, #616]	@ (8006b0c <HAL_UART_IRQHandler+0x5ac>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d04c      	beq.n	8006942 <HAL_UART_IRQHandler+0x3e2>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a97      	ldr	r2, [pc, #604]	@ (8006b10 <HAL_UART_IRQHandler+0x5b0>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d045      	beq.n	8006942 <HAL_UART_IRQHandler+0x3e2>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a95      	ldr	r2, [pc, #596]	@ (8006b14 <HAL_UART_IRQHandler+0x5b4>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d03e      	beq.n	8006942 <HAL_UART_IRQHandler+0x3e2>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a92      	ldr	r2, [pc, #584]	@ (8006b18 <HAL_UART_IRQHandler+0x5b8>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d037      	beq.n	8006942 <HAL_UART_IRQHandler+0x3e2>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a90      	ldr	r2, [pc, #576]	@ (8006b1c <HAL_UART_IRQHandler+0x5bc>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d030      	beq.n	8006942 <HAL_UART_IRQHandler+0x3e2>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a8d      	ldr	r2, [pc, #564]	@ (8006b20 <HAL_UART_IRQHandler+0x5c0>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d029      	beq.n	8006942 <HAL_UART_IRQHandler+0x3e2>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a8b      	ldr	r2, [pc, #556]	@ (8006b24 <HAL_UART_IRQHandler+0x5c4>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d022      	beq.n	8006942 <HAL_UART_IRQHandler+0x3e2>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a88      	ldr	r2, [pc, #544]	@ (8006b28 <HAL_UART_IRQHandler+0x5c8>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d01b      	beq.n	8006942 <HAL_UART_IRQHandler+0x3e2>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a86      	ldr	r2, [pc, #536]	@ (8006b2c <HAL_UART_IRQHandler+0x5cc>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d014      	beq.n	8006942 <HAL_UART_IRQHandler+0x3e2>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a83      	ldr	r2, [pc, #524]	@ (8006b30 <HAL_UART_IRQHandler+0x5d0>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d00d      	beq.n	8006942 <HAL_UART_IRQHandler+0x3e2>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a81      	ldr	r2, [pc, #516]	@ (8006b34 <HAL_UART_IRQHandler+0x5d4>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d006      	beq.n	8006942 <HAL_UART_IRQHandler+0x3e2>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a7e      	ldr	r2, [pc, #504]	@ (8006b38 <HAL_UART_IRQHandler+0x5d8>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d106      	bne.n	8006950 <HAL_UART_IRQHandler+0x3f0>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	b29b      	uxth	r3, r3
 800694e:	e005      	b.n	800695c <HAL_UART_IRQHandler+0x3fc>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	b29b      	uxth	r3, r3
 800695c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006960:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006964:	2b00      	cmp	r3, #0
 8006966:	f000 80ad 	beq.w	8006ac4 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006970:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006974:	429a      	cmp	r2, r3
 8006976:	f080 80a5 	bcs.w	8006ac4 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006980:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800698a:	69db      	ldr	r3, [r3, #28]
 800698c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006990:	f000 8087 	beq.w	8006aa2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800699c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80069a0:	e853 3f00 	ldrex	r3, [r3]
 80069a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80069a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80069ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80069b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	461a      	mov	r2, r3
 80069ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80069be:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80069c2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80069ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80069ce:	e841 2300 	strex	r3, r2, [r1]
 80069d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80069d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d1da      	bne.n	8006994 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	3308      	adds	r3, #8
 80069e4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80069e8:	e853 3f00 	ldrex	r3, [r3]
 80069ec:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80069ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80069f0:	f023 0301 	bic.w	r3, r3, #1
 80069f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	3308      	adds	r3, #8
 80069fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006a02:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006a06:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a08:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006a0a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006a0e:	e841 2300 	strex	r3, r2, [r1]
 8006a12:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006a14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d1e1      	bne.n	80069de <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	3308      	adds	r3, #8
 8006a20:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a22:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006a24:	e853 3f00 	ldrex	r3, [r3]
 8006a28:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006a2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006a2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a30:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	3308      	adds	r3, #8
 8006a3a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006a3e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006a40:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a42:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006a44:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006a46:	e841 2300 	strex	r3, r2, [r1]
 8006a4a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006a4c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d1e3      	bne.n	8006a1a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2220      	movs	r2, #32
 8006a56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a68:	e853 3f00 	ldrex	r3, [r3]
 8006a6c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006a6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a70:	f023 0310 	bic.w	r3, r3, #16
 8006a74:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	461a      	mov	r2, r3
 8006a7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006a82:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006a84:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a86:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006a88:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006a8a:	e841 2300 	strex	r3, r2, [r1]
 8006a8e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006a90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d1e4      	bne.n	8006a60 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f7fa fea3 	bl	80017e8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2202      	movs	r2, #2
 8006aa6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	1ad3      	subs	r3, r2, r3
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	4619      	mov	r1, r3
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f000 f939 	bl	8006d34 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006ac2:	e119      	b.n	8006cf8 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006aca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	f040 8112 	bne.w	8006cf8 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ada:	69db      	ldr	r3, [r3, #28]
 8006adc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ae0:	f040 810a 	bne.w	8006cf8 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2202      	movs	r2, #2
 8006ae8:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006af0:	4619      	mov	r1, r3
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 f91e 	bl	8006d34 <HAL_UARTEx_RxEventCallback>
      return;
 8006af8:	e0fe      	b.n	8006cf8 <HAL_UART_IRQHandler+0x798>
 8006afa:	bf00      	nop
 8006afc:	40020010 	.word	0x40020010
 8006b00:	40020028 	.word	0x40020028
 8006b04:	40020040 	.word	0x40020040
 8006b08:	40020058 	.word	0x40020058
 8006b0c:	40020070 	.word	0x40020070
 8006b10:	40020088 	.word	0x40020088
 8006b14:	400200a0 	.word	0x400200a0
 8006b18:	400200b8 	.word	0x400200b8
 8006b1c:	40020410 	.word	0x40020410
 8006b20:	40020428 	.word	0x40020428
 8006b24:	40020440 	.word	0x40020440
 8006b28:	40020458 	.word	0x40020458
 8006b2c:	40020470 	.word	0x40020470
 8006b30:	40020488 	.word	0x40020488
 8006b34:	400204a0 	.word	0x400204a0
 8006b38:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	1ad3      	subs	r3, r2, r3
 8006b4c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	f000 80cf 	beq.w	8006cfc <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8006b5e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	f000 80ca 	beq.w	8006cfc <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b70:	e853 3f00 	ldrex	r3, [r3]
 8006b74:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006b76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b7c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	461a      	mov	r2, r3
 8006b86:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006b8a:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b8c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b8e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006b90:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b92:	e841 2300 	strex	r3, r2, [r1]
 8006b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006b98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d1e4      	bne.n	8006b68 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	3308      	adds	r3, #8
 8006ba4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ba8:	e853 3f00 	ldrex	r3, [r3]
 8006bac:	623b      	str	r3, [r7, #32]
   return(result);
 8006bae:	6a3a      	ldr	r2, [r7, #32]
 8006bb0:	4b55      	ldr	r3, [pc, #340]	@ (8006d08 <HAL_UART_IRQHandler+0x7a8>)
 8006bb2:	4013      	ands	r3, r2
 8006bb4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	3308      	adds	r3, #8
 8006bbe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006bc2:	633a      	str	r2, [r7, #48]	@ 0x30
 8006bc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006bc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bca:	e841 2300 	strex	r3, r2, [r1]
 8006bce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d1e3      	bne.n	8006b9e <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2220      	movs	r2, #32
 8006bda:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2200      	movs	r2, #0
 8006be2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2200      	movs	r2, #0
 8006be8:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	e853 3f00 	ldrex	r3, [r3]
 8006bf6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f023 0310 	bic.w	r3, r3, #16
 8006bfe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	461a      	mov	r2, r3
 8006c08:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006c0c:	61fb      	str	r3, [r7, #28]
 8006c0e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c10:	69b9      	ldr	r1, [r7, #24]
 8006c12:	69fa      	ldr	r2, [r7, #28]
 8006c14:	e841 2300 	strex	r3, r2, [r1]
 8006c18:	617b      	str	r3, [r7, #20]
   return(result);
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d1e4      	bne.n	8006bea <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2202      	movs	r2, #2
 8006c24:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006c26:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006c2a:	4619      	mov	r1, r3
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f000 f881 	bl	8006d34 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006c32:	e063      	b.n	8006cfc <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006c34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c38:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d00e      	beq.n	8006c5e <HAL_UART_IRQHandler+0x6fe>
 8006c40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d008      	beq.n	8006c5e <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006c54:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f001 f83d 	bl	8007cd6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006c5c:	e051      	b.n	8006d02 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006c5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d014      	beq.n	8006c94 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006c6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d105      	bne.n	8006c82 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006c76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c7a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d008      	beq.n	8006c94 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d03a      	beq.n	8006d00 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	4798      	blx	r3
    }
    return;
 8006c92:	e035      	b.n	8006d00 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006c94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d009      	beq.n	8006cb4 <HAL_UART_IRQHandler+0x754>
 8006ca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ca4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d003      	beq.n	8006cb4 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f000 ffe7 	bl	8007c80 <UART_EndTransmit_IT>
    return;
 8006cb2:	e026      	b.n	8006d02 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006cb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cb8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d009      	beq.n	8006cd4 <HAL_UART_IRQHandler+0x774>
 8006cc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cc4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d003      	beq.n	8006cd4 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f001 f816 	bl	8007cfe <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006cd2:	e016      	b.n	8006d02 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006cd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cd8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d010      	beq.n	8006d02 <HAL_UART_IRQHandler+0x7a2>
 8006ce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	da0c      	bge.n	8006d02 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f000 fffe 	bl	8007cea <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006cee:	e008      	b.n	8006d02 <HAL_UART_IRQHandler+0x7a2>
      return;
 8006cf0:	bf00      	nop
 8006cf2:	e006      	b.n	8006d02 <HAL_UART_IRQHandler+0x7a2>
    return;
 8006cf4:	bf00      	nop
 8006cf6:	e004      	b.n	8006d02 <HAL_UART_IRQHandler+0x7a2>
      return;
 8006cf8:	bf00      	nop
 8006cfa:	e002      	b.n	8006d02 <HAL_UART_IRQHandler+0x7a2>
      return;
 8006cfc:	bf00      	nop
 8006cfe:	e000      	b.n	8006d02 <HAL_UART_IRQHandler+0x7a2>
    return;
 8006d00:	bf00      	nop
  }
}
 8006d02:	37e8      	adds	r7, #232	@ 0xe8
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}
 8006d08:	effffffe 	.word	0xeffffffe

08006d0c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b083      	sub	sp, #12
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006d14:	bf00      	nop
 8006d16:	370c      	adds	r7, #12
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr

08006d20 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b083      	sub	sp, #12
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006d28:	bf00      	nop
 8006d2a:	370c      	adds	r7, #12
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr

08006d34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b083      	sub	sp, #12
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	460b      	mov	r3, r1
 8006d3e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006d40:	bf00      	nop
 8006d42:	370c      	adds	r7, #12
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr

08006d4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d50:	b092      	sub	sp, #72	@ 0x48
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d56:	2300      	movs	r3, #0
 8006d58:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	689a      	ldr	r2, [r3, #8]
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	691b      	ldr	r3, [r3, #16]
 8006d64:	431a      	orrs	r2, r3
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	695b      	ldr	r3, [r3, #20]
 8006d6a:	431a      	orrs	r2, r3
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	69db      	ldr	r3, [r3, #28]
 8006d70:	4313      	orrs	r3, r2
 8006d72:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	4bbe      	ldr	r3, [pc, #760]	@ (8007074 <UART_SetConfig+0x328>)
 8006d7c:	4013      	ands	r3, r2
 8006d7e:	697a      	ldr	r2, [r7, #20]
 8006d80:	6812      	ldr	r2, [r2, #0]
 8006d82:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006d84:	430b      	orrs	r3, r1
 8006d86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	68da      	ldr	r2, [r3, #12]
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	430a      	orrs	r2, r1
 8006d9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	699b      	ldr	r3, [r3, #24]
 8006da2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4ab3      	ldr	r2, [pc, #716]	@ (8007078 <UART_SetConfig+0x32c>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d004      	beq.n	8006db8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	6a1b      	ldr	r3, [r3, #32]
 8006db2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006db4:	4313      	orrs	r3, r2
 8006db6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	689a      	ldr	r2, [r3, #8]
 8006dbe:	4baf      	ldr	r3, [pc, #700]	@ (800707c <UART_SetConfig+0x330>)
 8006dc0:	4013      	ands	r3, r2
 8006dc2:	697a      	ldr	r2, [r7, #20]
 8006dc4:	6812      	ldr	r2, [r2, #0]
 8006dc6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006dc8:	430b      	orrs	r3, r1
 8006dca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dd2:	f023 010f 	bic.w	r1, r3, #15
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	430a      	orrs	r2, r1
 8006de0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4aa6      	ldr	r2, [pc, #664]	@ (8007080 <UART_SetConfig+0x334>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d177      	bne.n	8006edc <UART_SetConfig+0x190>
 8006dec:	4ba5      	ldr	r3, [pc, #660]	@ (8007084 <UART_SetConfig+0x338>)
 8006dee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006df0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006df4:	2b28      	cmp	r3, #40	@ 0x28
 8006df6:	d86d      	bhi.n	8006ed4 <UART_SetConfig+0x188>
 8006df8:	a201      	add	r2, pc, #4	@ (adr r2, 8006e00 <UART_SetConfig+0xb4>)
 8006dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dfe:	bf00      	nop
 8006e00:	08006ea5 	.word	0x08006ea5
 8006e04:	08006ed5 	.word	0x08006ed5
 8006e08:	08006ed5 	.word	0x08006ed5
 8006e0c:	08006ed5 	.word	0x08006ed5
 8006e10:	08006ed5 	.word	0x08006ed5
 8006e14:	08006ed5 	.word	0x08006ed5
 8006e18:	08006ed5 	.word	0x08006ed5
 8006e1c:	08006ed5 	.word	0x08006ed5
 8006e20:	08006ead 	.word	0x08006ead
 8006e24:	08006ed5 	.word	0x08006ed5
 8006e28:	08006ed5 	.word	0x08006ed5
 8006e2c:	08006ed5 	.word	0x08006ed5
 8006e30:	08006ed5 	.word	0x08006ed5
 8006e34:	08006ed5 	.word	0x08006ed5
 8006e38:	08006ed5 	.word	0x08006ed5
 8006e3c:	08006ed5 	.word	0x08006ed5
 8006e40:	08006eb5 	.word	0x08006eb5
 8006e44:	08006ed5 	.word	0x08006ed5
 8006e48:	08006ed5 	.word	0x08006ed5
 8006e4c:	08006ed5 	.word	0x08006ed5
 8006e50:	08006ed5 	.word	0x08006ed5
 8006e54:	08006ed5 	.word	0x08006ed5
 8006e58:	08006ed5 	.word	0x08006ed5
 8006e5c:	08006ed5 	.word	0x08006ed5
 8006e60:	08006ebd 	.word	0x08006ebd
 8006e64:	08006ed5 	.word	0x08006ed5
 8006e68:	08006ed5 	.word	0x08006ed5
 8006e6c:	08006ed5 	.word	0x08006ed5
 8006e70:	08006ed5 	.word	0x08006ed5
 8006e74:	08006ed5 	.word	0x08006ed5
 8006e78:	08006ed5 	.word	0x08006ed5
 8006e7c:	08006ed5 	.word	0x08006ed5
 8006e80:	08006ec5 	.word	0x08006ec5
 8006e84:	08006ed5 	.word	0x08006ed5
 8006e88:	08006ed5 	.word	0x08006ed5
 8006e8c:	08006ed5 	.word	0x08006ed5
 8006e90:	08006ed5 	.word	0x08006ed5
 8006e94:	08006ed5 	.word	0x08006ed5
 8006e98:	08006ed5 	.word	0x08006ed5
 8006e9c:	08006ed5 	.word	0x08006ed5
 8006ea0:	08006ecd 	.word	0x08006ecd
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006eaa:	e222      	b.n	80072f2 <UART_SetConfig+0x5a6>
 8006eac:	2304      	movs	r3, #4
 8006eae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006eb2:	e21e      	b.n	80072f2 <UART_SetConfig+0x5a6>
 8006eb4:	2308      	movs	r3, #8
 8006eb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006eba:	e21a      	b.n	80072f2 <UART_SetConfig+0x5a6>
 8006ebc:	2310      	movs	r3, #16
 8006ebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ec2:	e216      	b.n	80072f2 <UART_SetConfig+0x5a6>
 8006ec4:	2320      	movs	r3, #32
 8006ec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006eca:	e212      	b.n	80072f2 <UART_SetConfig+0x5a6>
 8006ecc:	2340      	movs	r3, #64	@ 0x40
 8006ece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ed2:	e20e      	b.n	80072f2 <UART_SetConfig+0x5a6>
 8006ed4:	2380      	movs	r3, #128	@ 0x80
 8006ed6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006eda:	e20a      	b.n	80072f2 <UART_SetConfig+0x5a6>
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a69      	ldr	r2, [pc, #420]	@ (8007088 <UART_SetConfig+0x33c>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d130      	bne.n	8006f48 <UART_SetConfig+0x1fc>
 8006ee6:	4b67      	ldr	r3, [pc, #412]	@ (8007084 <UART_SetConfig+0x338>)
 8006ee8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006eea:	f003 0307 	and.w	r3, r3, #7
 8006eee:	2b05      	cmp	r3, #5
 8006ef0:	d826      	bhi.n	8006f40 <UART_SetConfig+0x1f4>
 8006ef2:	a201      	add	r2, pc, #4	@ (adr r2, 8006ef8 <UART_SetConfig+0x1ac>)
 8006ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ef8:	08006f11 	.word	0x08006f11
 8006efc:	08006f19 	.word	0x08006f19
 8006f00:	08006f21 	.word	0x08006f21
 8006f04:	08006f29 	.word	0x08006f29
 8006f08:	08006f31 	.word	0x08006f31
 8006f0c:	08006f39 	.word	0x08006f39
 8006f10:	2300      	movs	r3, #0
 8006f12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f16:	e1ec      	b.n	80072f2 <UART_SetConfig+0x5a6>
 8006f18:	2304      	movs	r3, #4
 8006f1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f1e:	e1e8      	b.n	80072f2 <UART_SetConfig+0x5a6>
 8006f20:	2308      	movs	r3, #8
 8006f22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f26:	e1e4      	b.n	80072f2 <UART_SetConfig+0x5a6>
 8006f28:	2310      	movs	r3, #16
 8006f2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f2e:	e1e0      	b.n	80072f2 <UART_SetConfig+0x5a6>
 8006f30:	2320      	movs	r3, #32
 8006f32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f36:	e1dc      	b.n	80072f2 <UART_SetConfig+0x5a6>
 8006f38:	2340      	movs	r3, #64	@ 0x40
 8006f3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f3e:	e1d8      	b.n	80072f2 <UART_SetConfig+0x5a6>
 8006f40:	2380      	movs	r3, #128	@ 0x80
 8006f42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f46:	e1d4      	b.n	80072f2 <UART_SetConfig+0x5a6>
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a4f      	ldr	r2, [pc, #316]	@ (800708c <UART_SetConfig+0x340>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d130      	bne.n	8006fb4 <UART_SetConfig+0x268>
 8006f52:	4b4c      	ldr	r3, [pc, #304]	@ (8007084 <UART_SetConfig+0x338>)
 8006f54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f56:	f003 0307 	and.w	r3, r3, #7
 8006f5a:	2b05      	cmp	r3, #5
 8006f5c:	d826      	bhi.n	8006fac <UART_SetConfig+0x260>
 8006f5e:	a201      	add	r2, pc, #4	@ (adr r2, 8006f64 <UART_SetConfig+0x218>)
 8006f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f64:	08006f7d 	.word	0x08006f7d
 8006f68:	08006f85 	.word	0x08006f85
 8006f6c:	08006f8d 	.word	0x08006f8d
 8006f70:	08006f95 	.word	0x08006f95
 8006f74:	08006f9d 	.word	0x08006f9d
 8006f78:	08006fa5 	.word	0x08006fa5
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f82:	e1b6      	b.n	80072f2 <UART_SetConfig+0x5a6>
 8006f84:	2304      	movs	r3, #4
 8006f86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f8a:	e1b2      	b.n	80072f2 <UART_SetConfig+0x5a6>
 8006f8c:	2308      	movs	r3, #8
 8006f8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f92:	e1ae      	b.n	80072f2 <UART_SetConfig+0x5a6>
 8006f94:	2310      	movs	r3, #16
 8006f96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f9a:	e1aa      	b.n	80072f2 <UART_SetConfig+0x5a6>
 8006f9c:	2320      	movs	r3, #32
 8006f9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fa2:	e1a6      	b.n	80072f2 <UART_SetConfig+0x5a6>
 8006fa4:	2340      	movs	r3, #64	@ 0x40
 8006fa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006faa:	e1a2      	b.n	80072f2 <UART_SetConfig+0x5a6>
 8006fac:	2380      	movs	r3, #128	@ 0x80
 8006fae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fb2:	e19e      	b.n	80072f2 <UART_SetConfig+0x5a6>
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a35      	ldr	r2, [pc, #212]	@ (8007090 <UART_SetConfig+0x344>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d130      	bne.n	8007020 <UART_SetConfig+0x2d4>
 8006fbe:	4b31      	ldr	r3, [pc, #196]	@ (8007084 <UART_SetConfig+0x338>)
 8006fc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fc2:	f003 0307 	and.w	r3, r3, #7
 8006fc6:	2b05      	cmp	r3, #5
 8006fc8:	d826      	bhi.n	8007018 <UART_SetConfig+0x2cc>
 8006fca:	a201      	add	r2, pc, #4	@ (adr r2, 8006fd0 <UART_SetConfig+0x284>)
 8006fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fd0:	08006fe9 	.word	0x08006fe9
 8006fd4:	08006ff1 	.word	0x08006ff1
 8006fd8:	08006ff9 	.word	0x08006ff9
 8006fdc:	08007001 	.word	0x08007001
 8006fe0:	08007009 	.word	0x08007009
 8006fe4:	08007011 	.word	0x08007011
 8006fe8:	2300      	movs	r3, #0
 8006fea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fee:	e180      	b.n	80072f2 <UART_SetConfig+0x5a6>
 8006ff0:	2304      	movs	r3, #4
 8006ff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ff6:	e17c      	b.n	80072f2 <UART_SetConfig+0x5a6>
 8006ff8:	2308      	movs	r3, #8
 8006ffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ffe:	e178      	b.n	80072f2 <UART_SetConfig+0x5a6>
 8007000:	2310      	movs	r3, #16
 8007002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007006:	e174      	b.n	80072f2 <UART_SetConfig+0x5a6>
 8007008:	2320      	movs	r3, #32
 800700a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800700e:	e170      	b.n	80072f2 <UART_SetConfig+0x5a6>
 8007010:	2340      	movs	r3, #64	@ 0x40
 8007012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007016:	e16c      	b.n	80072f2 <UART_SetConfig+0x5a6>
 8007018:	2380      	movs	r3, #128	@ 0x80
 800701a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800701e:	e168      	b.n	80072f2 <UART_SetConfig+0x5a6>
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a1b      	ldr	r2, [pc, #108]	@ (8007094 <UART_SetConfig+0x348>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d142      	bne.n	80070b0 <UART_SetConfig+0x364>
 800702a:	4b16      	ldr	r3, [pc, #88]	@ (8007084 <UART_SetConfig+0x338>)
 800702c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800702e:	f003 0307 	and.w	r3, r3, #7
 8007032:	2b05      	cmp	r3, #5
 8007034:	d838      	bhi.n	80070a8 <UART_SetConfig+0x35c>
 8007036:	a201      	add	r2, pc, #4	@ (adr r2, 800703c <UART_SetConfig+0x2f0>)
 8007038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800703c:	08007055 	.word	0x08007055
 8007040:	0800705d 	.word	0x0800705d
 8007044:	08007065 	.word	0x08007065
 8007048:	0800706d 	.word	0x0800706d
 800704c:	08007099 	.word	0x08007099
 8007050:	080070a1 	.word	0x080070a1
 8007054:	2300      	movs	r3, #0
 8007056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800705a:	e14a      	b.n	80072f2 <UART_SetConfig+0x5a6>
 800705c:	2304      	movs	r3, #4
 800705e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007062:	e146      	b.n	80072f2 <UART_SetConfig+0x5a6>
 8007064:	2308      	movs	r3, #8
 8007066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800706a:	e142      	b.n	80072f2 <UART_SetConfig+0x5a6>
 800706c:	2310      	movs	r3, #16
 800706e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007072:	e13e      	b.n	80072f2 <UART_SetConfig+0x5a6>
 8007074:	cfff69f3 	.word	0xcfff69f3
 8007078:	58000c00 	.word	0x58000c00
 800707c:	11fff4ff 	.word	0x11fff4ff
 8007080:	40011000 	.word	0x40011000
 8007084:	58024400 	.word	0x58024400
 8007088:	40004400 	.word	0x40004400
 800708c:	40004800 	.word	0x40004800
 8007090:	40004c00 	.word	0x40004c00
 8007094:	40005000 	.word	0x40005000
 8007098:	2320      	movs	r3, #32
 800709a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800709e:	e128      	b.n	80072f2 <UART_SetConfig+0x5a6>
 80070a0:	2340      	movs	r3, #64	@ 0x40
 80070a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070a6:	e124      	b.n	80072f2 <UART_SetConfig+0x5a6>
 80070a8:	2380      	movs	r3, #128	@ 0x80
 80070aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070ae:	e120      	b.n	80072f2 <UART_SetConfig+0x5a6>
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4acb      	ldr	r2, [pc, #812]	@ (80073e4 <UART_SetConfig+0x698>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d176      	bne.n	80071a8 <UART_SetConfig+0x45c>
 80070ba:	4bcb      	ldr	r3, [pc, #812]	@ (80073e8 <UART_SetConfig+0x69c>)
 80070bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80070c2:	2b28      	cmp	r3, #40	@ 0x28
 80070c4:	d86c      	bhi.n	80071a0 <UART_SetConfig+0x454>
 80070c6:	a201      	add	r2, pc, #4	@ (adr r2, 80070cc <UART_SetConfig+0x380>)
 80070c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070cc:	08007171 	.word	0x08007171
 80070d0:	080071a1 	.word	0x080071a1
 80070d4:	080071a1 	.word	0x080071a1
 80070d8:	080071a1 	.word	0x080071a1
 80070dc:	080071a1 	.word	0x080071a1
 80070e0:	080071a1 	.word	0x080071a1
 80070e4:	080071a1 	.word	0x080071a1
 80070e8:	080071a1 	.word	0x080071a1
 80070ec:	08007179 	.word	0x08007179
 80070f0:	080071a1 	.word	0x080071a1
 80070f4:	080071a1 	.word	0x080071a1
 80070f8:	080071a1 	.word	0x080071a1
 80070fc:	080071a1 	.word	0x080071a1
 8007100:	080071a1 	.word	0x080071a1
 8007104:	080071a1 	.word	0x080071a1
 8007108:	080071a1 	.word	0x080071a1
 800710c:	08007181 	.word	0x08007181
 8007110:	080071a1 	.word	0x080071a1
 8007114:	080071a1 	.word	0x080071a1
 8007118:	080071a1 	.word	0x080071a1
 800711c:	080071a1 	.word	0x080071a1
 8007120:	080071a1 	.word	0x080071a1
 8007124:	080071a1 	.word	0x080071a1
 8007128:	080071a1 	.word	0x080071a1
 800712c:	08007189 	.word	0x08007189
 8007130:	080071a1 	.word	0x080071a1
 8007134:	080071a1 	.word	0x080071a1
 8007138:	080071a1 	.word	0x080071a1
 800713c:	080071a1 	.word	0x080071a1
 8007140:	080071a1 	.word	0x080071a1
 8007144:	080071a1 	.word	0x080071a1
 8007148:	080071a1 	.word	0x080071a1
 800714c:	08007191 	.word	0x08007191
 8007150:	080071a1 	.word	0x080071a1
 8007154:	080071a1 	.word	0x080071a1
 8007158:	080071a1 	.word	0x080071a1
 800715c:	080071a1 	.word	0x080071a1
 8007160:	080071a1 	.word	0x080071a1
 8007164:	080071a1 	.word	0x080071a1
 8007168:	080071a1 	.word	0x080071a1
 800716c:	08007199 	.word	0x08007199
 8007170:	2301      	movs	r3, #1
 8007172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007176:	e0bc      	b.n	80072f2 <UART_SetConfig+0x5a6>
 8007178:	2304      	movs	r3, #4
 800717a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800717e:	e0b8      	b.n	80072f2 <UART_SetConfig+0x5a6>
 8007180:	2308      	movs	r3, #8
 8007182:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007186:	e0b4      	b.n	80072f2 <UART_SetConfig+0x5a6>
 8007188:	2310      	movs	r3, #16
 800718a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800718e:	e0b0      	b.n	80072f2 <UART_SetConfig+0x5a6>
 8007190:	2320      	movs	r3, #32
 8007192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007196:	e0ac      	b.n	80072f2 <UART_SetConfig+0x5a6>
 8007198:	2340      	movs	r3, #64	@ 0x40
 800719a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800719e:	e0a8      	b.n	80072f2 <UART_SetConfig+0x5a6>
 80071a0:	2380      	movs	r3, #128	@ 0x80
 80071a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071a6:	e0a4      	b.n	80072f2 <UART_SetConfig+0x5a6>
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a8f      	ldr	r2, [pc, #572]	@ (80073ec <UART_SetConfig+0x6a0>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d130      	bne.n	8007214 <UART_SetConfig+0x4c8>
 80071b2:	4b8d      	ldr	r3, [pc, #564]	@ (80073e8 <UART_SetConfig+0x69c>)
 80071b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071b6:	f003 0307 	and.w	r3, r3, #7
 80071ba:	2b05      	cmp	r3, #5
 80071bc:	d826      	bhi.n	800720c <UART_SetConfig+0x4c0>
 80071be:	a201      	add	r2, pc, #4	@ (adr r2, 80071c4 <UART_SetConfig+0x478>)
 80071c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071c4:	080071dd 	.word	0x080071dd
 80071c8:	080071e5 	.word	0x080071e5
 80071cc:	080071ed 	.word	0x080071ed
 80071d0:	080071f5 	.word	0x080071f5
 80071d4:	080071fd 	.word	0x080071fd
 80071d8:	08007205 	.word	0x08007205
 80071dc:	2300      	movs	r3, #0
 80071de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071e2:	e086      	b.n	80072f2 <UART_SetConfig+0x5a6>
 80071e4:	2304      	movs	r3, #4
 80071e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071ea:	e082      	b.n	80072f2 <UART_SetConfig+0x5a6>
 80071ec:	2308      	movs	r3, #8
 80071ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071f2:	e07e      	b.n	80072f2 <UART_SetConfig+0x5a6>
 80071f4:	2310      	movs	r3, #16
 80071f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071fa:	e07a      	b.n	80072f2 <UART_SetConfig+0x5a6>
 80071fc:	2320      	movs	r3, #32
 80071fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007202:	e076      	b.n	80072f2 <UART_SetConfig+0x5a6>
 8007204:	2340      	movs	r3, #64	@ 0x40
 8007206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800720a:	e072      	b.n	80072f2 <UART_SetConfig+0x5a6>
 800720c:	2380      	movs	r3, #128	@ 0x80
 800720e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007212:	e06e      	b.n	80072f2 <UART_SetConfig+0x5a6>
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a75      	ldr	r2, [pc, #468]	@ (80073f0 <UART_SetConfig+0x6a4>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d130      	bne.n	8007280 <UART_SetConfig+0x534>
 800721e:	4b72      	ldr	r3, [pc, #456]	@ (80073e8 <UART_SetConfig+0x69c>)
 8007220:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007222:	f003 0307 	and.w	r3, r3, #7
 8007226:	2b05      	cmp	r3, #5
 8007228:	d826      	bhi.n	8007278 <UART_SetConfig+0x52c>
 800722a:	a201      	add	r2, pc, #4	@ (adr r2, 8007230 <UART_SetConfig+0x4e4>)
 800722c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007230:	08007249 	.word	0x08007249
 8007234:	08007251 	.word	0x08007251
 8007238:	08007259 	.word	0x08007259
 800723c:	08007261 	.word	0x08007261
 8007240:	08007269 	.word	0x08007269
 8007244:	08007271 	.word	0x08007271
 8007248:	2300      	movs	r3, #0
 800724a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800724e:	e050      	b.n	80072f2 <UART_SetConfig+0x5a6>
 8007250:	2304      	movs	r3, #4
 8007252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007256:	e04c      	b.n	80072f2 <UART_SetConfig+0x5a6>
 8007258:	2308      	movs	r3, #8
 800725a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800725e:	e048      	b.n	80072f2 <UART_SetConfig+0x5a6>
 8007260:	2310      	movs	r3, #16
 8007262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007266:	e044      	b.n	80072f2 <UART_SetConfig+0x5a6>
 8007268:	2320      	movs	r3, #32
 800726a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800726e:	e040      	b.n	80072f2 <UART_SetConfig+0x5a6>
 8007270:	2340      	movs	r3, #64	@ 0x40
 8007272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007276:	e03c      	b.n	80072f2 <UART_SetConfig+0x5a6>
 8007278:	2380      	movs	r3, #128	@ 0x80
 800727a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800727e:	e038      	b.n	80072f2 <UART_SetConfig+0x5a6>
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a5b      	ldr	r2, [pc, #364]	@ (80073f4 <UART_SetConfig+0x6a8>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d130      	bne.n	80072ec <UART_SetConfig+0x5a0>
 800728a:	4b57      	ldr	r3, [pc, #348]	@ (80073e8 <UART_SetConfig+0x69c>)
 800728c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800728e:	f003 0307 	and.w	r3, r3, #7
 8007292:	2b05      	cmp	r3, #5
 8007294:	d826      	bhi.n	80072e4 <UART_SetConfig+0x598>
 8007296:	a201      	add	r2, pc, #4	@ (adr r2, 800729c <UART_SetConfig+0x550>)
 8007298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800729c:	080072b5 	.word	0x080072b5
 80072a0:	080072bd 	.word	0x080072bd
 80072a4:	080072c5 	.word	0x080072c5
 80072a8:	080072cd 	.word	0x080072cd
 80072ac:	080072d5 	.word	0x080072d5
 80072b0:	080072dd 	.word	0x080072dd
 80072b4:	2302      	movs	r3, #2
 80072b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072ba:	e01a      	b.n	80072f2 <UART_SetConfig+0x5a6>
 80072bc:	2304      	movs	r3, #4
 80072be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072c2:	e016      	b.n	80072f2 <UART_SetConfig+0x5a6>
 80072c4:	2308      	movs	r3, #8
 80072c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072ca:	e012      	b.n	80072f2 <UART_SetConfig+0x5a6>
 80072cc:	2310      	movs	r3, #16
 80072ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072d2:	e00e      	b.n	80072f2 <UART_SetConfig+0x5a6>
 80072d4:	2320      	movs	r3, #32
 80072d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072da:	e00a      	b.n	80072f2 <UART_SetConfig+0x5a6>
 80072dc:	2340      	movs	r3, #64	@ 0x40
 80072de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072e2:	e006      	b.n	80072f2 <UART_SetConfig+0x5a6>
 80072e4:	2380      	movs	r3, #128	@ 0x80
 80072e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072ea:	e002      	b.n	80072f2 <UART_SetConfig+0x5a6>
 80072ec:	2380      	movs	r3, #128	@ 0x80
 80072ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a3f      	ldr	r2, [pc, #252]	@ (80073f4 <UART_SetConfig+0x6a8>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	f040 80f8 	bne.w	80074ee <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80072fe:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007302:	2b20      	cmp	r3, #32
 8007304:	dc46      	bgt.n	8007394 <UART_SetConfig+0x648>
 8007306:	2b02      	cmp	r3, #2
 8007308:	f2c0 8082 	blt.w	8007410 <UART_SetConfig+0x6c4>
 800730c:	3b02      	subs	r3, #2
 800730e:	2b1e      	cmp	r3, #30
 8007310:	d87e      	bhi.n	8007410 <UART_SetConfig+0x6c4>
 8007312:	a201      	add	r2, pc, #4	@ (adr r2, 8007318 <UART_SetConfig+0x5cc>)
 8007314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007318:	0800739b 	.word	0x0800739b
 800731c:	08007411 	.word	0x08007411
 8007320:	080073a3 	.word	0x080073a3
 8007324:	08007411 	.word	0x08007411
 8007328:	08007411 	.word	0x08007411
 800732c:	08007411 	.word	0x08007411
 8007330:	080073b3 	.word	0x080073b3
 8007334:	08007411 	.word	0x08007411
 8007338:	08007411 	.word	0x08007411
 800733c:	08007411 	.word	0x08007411
 8007340:	08007411 	.word	0x08007411
 8007344:	08007411 	.word	0x08007411
 8007348:	08007411 	.word	0x08007411
 800734c:	08007411 	.word	0x08007411
 8007350:	080073c3 	.word	0x080073c3
 8007354:	08007411 	.word	0x08007411
 8007358:	08007411 	.word	0x08007411
 800735c:	08007411 	.word	0x08007411
 8007360:	08007411 	.word	0x08007411
 8007364:	08007411 	.word	0x08007411
 8007368:	08007411 	.word	0x08007411
 800736c:	08007411 	.word	0x08007411
 8007370:	08007411 	.word	0x08007411
 8007374:	08007411 	.word	0x08007411
 8007378:	08007411 	.word	0x08007411
 800737c:	08007411 	.word	0x08007411
 8007380:	08007411 	.word	0x08007411
 8007384:	08007411 	.word	0x08007411
 8007388:	08007411 	.word	0x08007411
 800738c:	08007411 	.word	0x08007411
 8007390:	08007403 	.word	0x08007403
 8007394:	2b40      	cmp	r3, #64	@ 0x40
 8007396:	d037      	beq.n	8007408 <UART_SetConfig+0x6bc>
 8007398:	e03a      	b.n	8007410 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800739a:	f7fd fba1 	bl	8004ae0 <HAL_RCCEx_GetD3PCLK1Freq>
 800739e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80073a0:	e03c      	b.n	800741c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80073a6:	4618      	mov	r0, r3
 80073a8:	f7fd fbb0 	bl	8004b0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80073ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073b0:	e034      	b.n	800741c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073b2:	f107 0318 	add.w	r3, r7, #24
 80073b6:	4618      	mov	r0, r3
 80073b8:	f7fd fcfc 	bl	8004db4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80073bc:	69fb      	ldr	r3, [r7, #28]
 80073be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073c0:	e02c      	b.n	800741c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073c2:	4b09      	ldr	r3, [pc, #36]	@ (80073e8 <UART_SetConfig+0x69c>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f003 0320 	and.w	r3, r3, #32
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d016      	beq.n	80073fc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80073ce:	4b06      	ldr	r3, [pc, #24]	@ (80073e8 <UART_SetConfig+0x69c>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	08db      	lsrs	r3, r3, #3
 80073d4:	f003 0303 	and.w	r3, r3, #3
 80073d8:	4a07      	ldr	r2, [pc, #28]	@ (80073f8 <UART_SetConfig+0x6ac>)
 80073da:	fa22 f303 	lsr.w	r3, r2, r3
 80073de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80073e0:	e01c      	b.n	800741c <UART_SetConfig+0x6d0>
 80073e2:	bf00      	nop
 80073e4:	40011400 	.word	0x40011400
 80073e8:	58024400 	.word	0x58024400
 80073ec:	40007800 	.word	0x40007800
 80073f0:	40007c00 	.word	0x40007c00
 80073f4:	58000c00 	.word	0x58000c00
 80073f8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80073fc:	4b9d      	ldr	r3, [pc, #628]	@ (8007674 <UART_SetConfig+0x928>)
 80073fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007400:	e00c      	b.n	800741c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007402:	4b9d      	ldr	r3, [pc, #628]	@ (8007678 <UART_SetConfig+0x92c>)
 8007404:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007406:	e009      	b.n	800741c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007408:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800740c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800740e:	e005      	b.n	800741c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007410:	2300      	movs	r3, #0
 8007412:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007414:	2301      	movs	r3, #1
 8007416:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800741a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800741c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800741e:	2b00      	cmp	r3, #0
 8007420:	f000 81de 	beq.w	80077e0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007428:	4a94      	ldr	r2, [pc, #592]	@ (800767c <UART_SetConfig+0x930>)
 800742a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800742e:	461a      	mov	r2, r3
 8007430:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007432:	fbb3 f3f2 	udiv	r3, r3, r2
 8007436:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	685a      	ldr	r2, [r3, #4]
 800743c:	4613      	mov	r3, r2
 800743e:	005b      	lsls	r3, r3, #1
 8007440:	4413      	add	r3, r2
 8007442:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007444:	429a      	cmp	r2, r3
 8007446:	d305      	bcc.n	8007454 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800744e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007450:	429a      	cmp	r2, r3
 8007452:	d903      	bls.n	800745c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007454:	2301      	movs	r3, #1
 8007456:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800745a:	e1c1      	b.n	80077e0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800745c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800745e:	2200      	movs	r2, #0
 8007460:	60bb      	str	r3, [r7, #8]
 8007462:	60fa      	str	r2, [r7, #12]
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007468:	4a84      	ldr	r2, [pc, #528]	@ (800767c <UART_SetConfig+0x930>)
 800746a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800746e:	b29b      	uxth	r3, r3
 8007470:	2200      	movs	r2, #0
 8007472:	603b      	str	r3, [r7, #0]
 8007474:	607a      	str	r2, [r7, #4]
 8007476:	e9d7 2300 	ldrd	r2, r3, [r7]
 800747a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800747e:	f7f8 ff7f 	bl	8000380 <__aeabi_uldivmod>
 8007482:	4602      	mov	r2, r0
 8007484:	460b      	mov	r3, r1
 8007486:	4610      	mov	r0, r2
 8007488:	4619      	mov	r1, r3
 800748a:	f04f 0200 	mov.w	r2, #0
 800748e:	f04f 0300 	mov.w	r3, #0
 8007492:	020b      	lsls	r3, r1, #8
 8007494:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007498:	0202      	lsls	r2, r0, #8
 800749a:	6979      	ldr	r1, [r7, #20]
 800749c:	6849      	ldr	r1, [r1, #4]
 800749e:	0849      	lsrs	r1, r1, #1
 80074a0:	2000      	movs	r0, #0
 80074a2:	460c      	mov	r4, r1
 80074a4:	4605      	mov	r5, r0
 80074a6:	eb12 0804 	adds.w	r8, r2, r4
 80074aa:	eb43 0905 	adc.w	r9, r3, r5
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	2200      	movs	r2, #0
 80074b4:	469a      	mov	sl, r3
 80074b6:	4693      	mov	fp, r2
 80074b8:	4652      	mov	r2, sl
 80074ba:	465b      	mov	r3, fp
 80074bc:	4640      	mov	r0, r8
 80074be:	4649      	mov	r1, r9
 80074c0:	f7f8 ff5e 	bl	8000380 <__aeabi_uldivmod>
 80074c4:	4602      	mov	r2, r0
 80074c6:	460b      	mov	r3, r1
 80074c8:	4613      	mov	r3, r2
 80074ca:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80074cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80074d2:	d308      	bcc.n	80074e6 <UART_SetConfig+0x79a>
 80074d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80074da:	d204      	bcs.n	80074e6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80074e2:	60da      	str	r2, [r3, #12]
 80074e4:	e17c      	b.n	80077e0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80074e6:	2301      	movs	r3, #1
 80074e8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80074ec:	e178      	b.n	80077e0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	69db      	ldr	r3, [r3, #28]
 80074f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80074f6:	f040 80c5 	bne.w	8007684 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80074fa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80074fe:	2b20      	cmp	r3, #32
 8007500:	dc48      	bgt.n	8007594 <UART_SetConfig+0x848>
 8007502:	2b00      	cmp	r3, #0
 8007504:	db7b      	blt.n	80075fe <UART_SetConfig+0x8b2>
 8007506:	2b20      	cmp	r3, #32
 8007508:	d879      	bhi.n	80075fe <UART_SetConfig+0x8b2>
 800750a:	a201      	add	r2, pc, #4	@ (adr r2, 8007510 <UART_SetConfig+0x7c4>)
 800750c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007510:	0800759b 	.word	0x0800759b
 8007514:	080075a3 	.word	0x080075a3
 8007518:	080075ff 	.word	0x080075ff
 800751c:	080075ff 	.word	0x080075ff
 8007520:	080075ab 	.word	0x080075ab
 8007524:	080075ff 	.word	0x080075ff
 8007528:	080075ff 	.word	0x080075ff
 800752c:	080075ff 	.word	0x080075ff
 8007530:	080075bb 	.word	0x080075bb
 8007534:	080075ff 	.word	0x080075ff
 8007538:	080075ff 	.word	0x080075ff
 800753c:	080075ff 	.word	0x080075ff
 8007540:	080075ff 	.word	0x080075ff
 8007544:	080075ff 	.word	0x080075ff
 8007548:	080075ff 	.word	0x080075ff
 800754c:	080075ff 	.word	0x080075ff
 8007550:	080075cb 	.word	0x080075cb
 8007554:	080075ff 	.word	0x080075ff
 8007558:	080075ff 	.word	0x080075ff
 800755c:	080075ff 	.word	0x080075ff
 8007560:	080075ff 	.word	0x080075ff
 8007564:	080075ff 	.word	0x080075ff
 8007568:	080075ff 	.word	0x080075ff
 800756c:	080075ff 	.word	0x080075ff
 8007570:	080075ff 	.word	0x080075ff
 8007574:	080075ff 	.word	0x080075ff
 8007578:	080075ff 	.word	0x080075ff
 800757c:	080075ff 	.word	0x080075ff
 8007580:	080075ff 	.word	0x080075ff
 8007584:	080075ff 	.word	0x080075ff
 8007588:	080075ff 	.word	0x080075ff
 800758c:	080075ff 	.word	0x080075ff
 8007590:	080075f1 	.word	0x080075f1
 8007594:	2b40      	cmp	r3, #64	@ 0x40
 8007596:	d02e      	beq.n	80075f6 <UART_SetConfig+0x8aa>
 8007598:	e031      	b.n	80075fe <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800759a:	f7fc f86b 	bl	8003674 <HAL_RCC_GetPCLK1Freq>
 800759e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80075a0:	e033      	b.n	800760a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80075a2:	f7fc f87d 	bl	80036a0 <HAL_RCC_GetPCLK2Freq>
 80075a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80075a8:	e02f      	b.n	800760a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80075ae:	4618      	mov	r0, r3
 80075b0:	f7fd faac 	bl	8004b0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80075b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075b8:	e027      	b.n	800760a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80075ba:	f107 0318 	add.w	r3, r7, #24
 80075be:	4618      	mov	r0, r3
 80075c0:	f7fd fbf8 	bl	8004db4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80075c4:	69fb      	ldr	r3, [r7, #28]
 80075c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075c8:	e01f      	b.n	800760a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80075ca:	4b2d      	ldr	r3, [pc, #180]	@ (8007680 <UART_SetConfig+0x934>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f003 0320 	and.w	r3, r3, #32
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d009      	beq.n	80075ea <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80075d6:	4b2a      	ldr	r3, [pc, #168]	@ (8007680 <UART_SetConfig+0x934>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	08db      	lsrs	r3, r3, #3
 80075dc:	f003 0303 	and.w	r3, r3, #3
 80075e0:	4a24      	ldr	r2, [pc, #144]	@ (8007674 <UART_SetConfig+0x928>)
 80075e2:	fa22 f303 	lsr.w	r3, r2, r3
 80075e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80075e8:	e00f      	b.n	800760a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80075ea:	4b22      	ldr	r3, [pc, #136]	@ (8007674 <UART_SetConfig+0x928>)
 80075ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075ee:	e00c      	b.n	800760a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80075f0:	4b21      	ldr	r3, [pc, #132]	@ (8007678 <UART_SetConfig+0x92c>)
 80075f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075f4:	e009      	b.n	800760a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80075fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075fc:	e005      	b.n	800760a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80075fe:	2300      	movs	r3, #0
 8007600:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007602:	2301      	movs	r3, #1
 8007604:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007608:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800760a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800760c:	2b00      	cmp	r3, #0
 800760e:	f000 80e7 	beq.w	80077e0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007616:	4a19      	ldr	r2, [pc, #100]	@ (800767c <UART_SetConfig+0x930>)
 8007618:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800761c:	461a      	mov	r2, r3
 800761e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007620:	fbb3 f3f2 	udiv	r3, r3, r2
 8007624:	005a      	lsls	r2, r3, #1
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	085b      	lsrs	r3, r3, #1
 800762c:	441a      	add	r2, r3
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	fbb2 f3f3 	udiv	r3, r2, r3
 8007636:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800763a:	2b0f      	cmp	r3, #15
 800763c:	d916      	bls.n	800766c <UART_SetConfig+0x920>
 800763e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007640:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007644:	d212      	bcs.n	800766c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007648:	b29b      	uxth	r3, r3
 800764a:	f023 030f 	bic.w	r3, r3, #15
 800764e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007652:	085b      	lsrs	r3, r3, #1
 8007654:	b29b      	uxth	r3, r3
 8007656:	f003 0307 	and.w	r3, r3, #7
 800765a:	b29a      	uxth	r2, r3
 800765c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800765e:	4313      	orrs	r3, r2
 8007660:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007668:	60da      	str	r2, [r3, #12]
 800766a:	e0b9      	b.n	80077e0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800766c:	2301      	movs	r3, #1
 800766e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007672:	e0b5      	b.n	80077e0 <UART_SetConfig+0xa94>
 8007674:	03d09000 	.word	0x03d09000
 8007678:	003d0900 	.word	0x003d0900
 800767c:	08008ed0 	.word	0x08008ed0
 8007680:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007684:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007688:	2b20      	cmp	r3, #32
 800768a:	dc49      	bgt.n	8007720 <UART_SetConfig+0x9d4>
 800768c:	2b00      	cmp	r3, #0
 800768e:	db7c      	blt.n	800778a <UART_SetConfig+0xa3e>
 8007690:	2b20      	cmp	r3, #32
 8007692:	d87a      	bhi.n	800778a <UART_SetConfig+0xa3e>
 8007694:	a201      	add	r2, pc, #4	@ (adr r2, 800769c <UART_SetConfig+0x950>)
 8007696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800769a:	bf00      	nop
 800769c:	08007727 	.word	0x08007727
 80076a0:	0800772f 	.word	0x0800772f
 80076a4:	0800778b 	.word	0x0800778b
 80076a8:	0800778b 	.word	0x0800778b
 80076ac:	08007737 	.word	0x08007737
 80076b0:	0800778b 	.word	0x0800778b
 80076b4:	0800778b 	.word	0x0800778b
 80076b8:	0800778b 	.word	0x0800778b
 80076bc:	08007747 	.word	0x08007747
 80076c0:	0800778b 	.word	0x0800778b
 80076c4:	0800778b 	.word	0x0800778b
 80076c8:	0800778b 	.word	0x0800778b
 80076cc:	0800778b 	.word	0x0800778b
 80076d0:	0800778b 	.word	0x0800778b
 80076d4:	0800778b 	.word	0x0800778b
 80076d8:	0800778b 	.word	0x0800778b
 80076dc:	08007757 	.word	0x08007757
 80076e0:	0800778b 	.word	0x0800778b
 80076e4:	0800778b 	.word	0x0800778b
 80076e8:	0800778b 	.word	0x0800778b
 80076ec:	0800778b 	.word	0x0800778b
 80076f0:	0800778b 	.word	0x0800778b
 80076f4:	0800778b 	.word	0x0800778b
 80076f8:	0800778b 	.word	0x0800778b
 80076fc:	0800778b 	.word	0x0800778b
 8007700:	0800778b 	.word	0x0800778b
 8007704:	0800778b 	.word	0x0800778b
 8007708:	0800778b 	.word	0x0800778b
 800770c:	0800778b 	.word	0x0800778b
 8007710:	0800778b 	.word	0x0800778b
 8007714:	0800778b 	.word	0x0800778b
 8007718:	0800778b 	.word	0x0800778b
 800771c:	0800777d 	.word	0x0800777d
 8007720:	2b40      	cmp	r3, #64	@ 0x40
 8007722:	d02e      	beq.n	8007782 <UART_SetConfig+0xa36>
 8007724:	e031      	b.n	800778a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007726:	f7fb ffa5 	bl	8003674 <HAL_RCC_GetPCLK1Freq>
 800772a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800772c:	e033      	b.n	8007796 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800772e:	f7fb ffb7 	bl	80036a0 <HAL_RCC_GetPCLK2Freq>
 8007732:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007734:	e02f      	b.n	8007796 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007736:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800773a:	4618      	mov	r0, r3
 800773c:	f7fd f9e6 	bl	8004b0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007742:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007744:	e027      	b.n	8007796 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007746:	f107 0318 	add.w	r3, r7, #24
 800774a:	4618      	mov	r0, r3
 800774c:	f7fd fb32 	bl	8004db4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007750:	69fb      	ldr	r3, [r7, #28]
 8007752:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007754:	e01f      	b.n	8007796 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007756:	4b2d      	ldr	r3, [pc, #180]	@ (800780c <UART_SetConfig+0xac0>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f003 0320 	and.w	r3, r3, #32
 800775e:	2b00      	cmp	r3, #0
 8007760:	d009      	beq.n	8007776 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007762:	4b2a      	ldr	r3, [pc, #168]	@ (800780c <UART_SetConfig+0xac0>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	08db      	lsrs	r3, r3, #3
 8007768:	f003 0303 	and.w	r3, r3, #3
 800776c:	4a28      	ldr	r2, [pc, #160]	@ (8007810 <UART_SetConfig+0xac4>)
 800776e:	fa22 f303 	lsr.w	r3, r2, r3
 8007772:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007774:	e00f      	b.n	8007796 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007776:	4b26      	ldr	r3, [pc, #152]	@ (8007810 <UART_SetConfig+0xac4>)
 8007778:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800777a:	e00c      	b.n	8007796 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800777c:	4b25      	ldr	r3, [pc, #148]	@ (8007814 <UART_SetConfig+0xac8>)
 800777e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007780:	e009      	b.n	8007796 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007782:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007786:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007788:	e005      	b.n	8007796 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800778a:	2300      	movs	r3, #0
 800778c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007794:	bf00      	nop
    }

    if (pclk != 0U)
 8007796:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007798:	2b00      	cmp	r3, #0
 800779a:	d021      	beq.n	80077e0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077a0:	4a1d      	ldr	r2, [pc, #116]	@ (8007818 <UART_SetConfig+0xacc>)
 80077a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077a6:	461a      	mov	r2, r3
 80077a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077aa:	fbb3 f2f2 	udiv	r2, r3, r2
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	085b      	lsrs	r3, r3, #1
 80077b4:	441a      	add	r2, r3
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80077be:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077c2:	2b0f      	cmp	r3, #15
 80077c4:	d909      	bls.n	80077da <UART_SetConfig+0xa8e>
 80077c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80077cc:	d205      	bcs.n	80077da <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80077ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077d0:	b29a      	uxth	r2, r3
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	60da      	str	r2, [r3, #12]
 80077d8:	e002      	b.n	80077e0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80077da:	2301      	movs	r3, #1
 80077dc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	2201      	movs	r2, #1
 80077e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	2201      	movs	r2, #1
 80077ec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	2200      	movs	r2, #0
 80077f4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	2200      	movs	r2, #0
 80077fa:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80077fc:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8007800:	4618      	mov	r0, r3
 8007802:	3748      	adds	r7, #72	@ 0x48
 8007804:	46bd      	mov	sp, r7
 8007806:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800780a:	bf00      	nop
 800780c:	58024400 	.word	0x58024400
 8007810:	03d09000 	.word	0x03d09000
 8007814:	003d0900 	.word	0x003d0900
 8007818:	08008ed0 	.word	0x08008ed0

0800781c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800781c:	b480      	push	{r7}
 800781e:	b083      	sub	sp, #12
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007828:	f003 0308 	and.w	r3, r3, #8
 800782c:	2b00      	cmp	r3, #0
 800782e:	d00a      	beq.n	8007846 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	430a      	orrs	r2, r1
 8007844:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800784a:	f003 0301 	and.w	r3, r3, #1
 800784e:	2b00      	cmp	r3, #0
 8007850:	d00a      	beq.n	8007868 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	430a      	orrs	r2, r1
 8007866:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800786c:	f003 0302 	and.w	r3, r3, #2
 8007870:	2b00      	cmp	r3, #0
 8007872:	d00a      	beq.n	800788a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	430a      	orrs	r2, r1
 8007888:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800788e:	f003 0304 	and.w	r3, r3, #4
 8007892:	2b00      	cmp	r3, #0
 8007894:	d00a      	beq.n	80078ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	430a      	orrs	r2, r1
 80078aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078b0:	f003 0310 	and.w	r3, r3, #16
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d00a      	beq.n	80078ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	689b      	ldr	r3, [r3, #8]
 80078be:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	430a      	orrs	r2, r1
 80078cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078d2:	f003 0320 	and.w	r3, r3, #32
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d00a      	beq.n	80078f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	689b      	ldr	r3, [r3, #8]
 80078e0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	430a      	orrs	r2, r1
 80078ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d01a      	beq.n	8007932 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	430a      	orrs	r2, r1
 8007910:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007916:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800791a:	d10a      	bne.n	8007932 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	430a      	orrs	r2, r1
 8007930:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007936:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800793a:	2b00      	cmp	r3, #0
 800793c:	d00a      	beq.n	8007954 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	430a      	orrs	r2, r1
 8007952:	605a      	str	r2, [r3, #4]
  }
}
 8007954:	bf00      	nop
 8007956:	370c      	adds	r7, #12
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr

08007960 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b098      	sub	sp, #96	@ 0x60
 8007964:	af02      	add	r7, sp, #8
 8007966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2200      	movs	r2, #0
 800796c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007970:	f7f9 fd9a 	bl	80014a8 <HAL_GetTick>
 8007974:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f003 0308 	and.w	r3, r3, #8
 8007980:	2b08      	cmp	r3, #8
 8007982:	d12f      	bne.n	80079e4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007984:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007988:	9300      	str	r3, [sp, #0]
 800798a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800798c:	2200      	movs	r2, #0
 800798e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 f88e 	bl	8007ab4 <UART_WaitOnFlagUntilTimeout>
 8007998:	4603      	mov	r3, r0
 800799a:	2b00      	cmp	r3, #0
 800799c:	d022      	beq.n	80079e4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079a6:	e853 3f00 	ldrex	r3, [r3]
 80079aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80079ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80079b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	461a      	mov	r2, r3
 80079ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80079bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80079be:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80079c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80079c4:	e841 2300 	strex	r3, r2, [r1]
 80079c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80079ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d1e6      	bne.n	800799e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2220      	movs	r2, #32
 80079d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2200      	movs	r2, #0
 80079dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079e0:	2303      	movs	r3, #3
 80079e2:	e063      	b.n	8007aac <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f003 0304 	and.w	r3, r3, #4
 80079ee:	2b04      	cmp	r3, #4
 80079f0:	d149      	bne.n	8007a86 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079f2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80079f6:	9300      	str	r3, [sp, #0]
 80079f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079fa:	2200      	movs	r2, #0
 80079fc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f000 f857 	bl	8007ab4 <UART_WaitOnFlagUntilTimeout>
 8007a06:	4603      	mov	r3, r0
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d03c      	beq.n	8007a86 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a14:	e853 3f00 	ldrex	r3, [r3]
 8007a18:	623b      	str	r3, [r7, #32]
   return(result);
 8007a1a:	6a3b      	ldr	r3, [r7, #32]
 8007a1c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007a20:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	461a      	mov	r2, r3
 8007a28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a2a:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a2c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007a30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a32:	e841 2300 	strex	r3, r2, [r1]
 8007a36:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d1e6      	bne.n	8007a0c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	3308      	adds	r3, #8
 8007a44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	e853 3f00 	ldrex	r3, [r3]
 8007a4c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	f023 0301 	bic.w	r3, r3, #1
 8007a54:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	3308      	adds	r3, #8
 8007a5c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007a5e:	61fa      	str	r2, [r7, #28]
 8007a60:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a62:	69b9      	ldr	r1, [r7, #24]
 8007a64:	69fa      	ldr	r2, [r7, #28]
 8007a66:	e841 2300 	strex	r3, r2, [r1]
 8007a6a:	617b      	str	r3, [r7, #20]
   return(result);
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d1e5      	bne.n	8007a3e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2220      	movs	r2, #32
 8007a76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a82:	2303      	movs	r3, #3
 8007a84:	e012      	b.n	8007aac <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2220      	movs	r2, #32
 8007a8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2220      	movs	r2, #32
 8007a92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007aaa:	2300      	movs	r3, #0
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3758      	adds	r7, #88	@ 0x58
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}

08007ab4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b084      	sub	sp, #16
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	60f8      	str	r0, [r7, #12]
 8007abc:	60b9      	str	r1, [r7, #8]
 8007abe:	603b      	str	r3, [r7, #0]
 8007ac0:	4613      	mov	r3, r2
 8007ac2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ac4:	e04f      	b.n	8007b66 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ac6:	69bb      	ldr	r3, [r7, #24]
 8007ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007acc:	d04b      	beq.n	8007b66 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ace:	f7f9 fceb 	bl	80014a8 <HAL_GetTick>
 8007ad2:	4602      	mov	r2, r0
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	1ad3      	subs	r3, r2, r3
 8007ad8:	69ba      	ldr	r2, [r7, #24]
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d302      	bcc.n	8007ae4 <UART_WaitOnFlagUntilTimeout+0x30>
 8007ade:	69bb      	ldr	r3, [r7, #24]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d101      	bne.n	8007ae8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007ae4:	2303      	movs	r3, #3
 8007ae6:	e04e      	b.n	8007b86 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f003 0304 	and.w	r3, r3, #4
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d037      	beq.n	8007b66 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	2b80      	cmp	r3, #128	@ 0x80
 8007afa:	d034      	beq.n	8007b66 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	2b40      	cmp	r3, #64	@ 0x40
 8007b00:	d031      	beq.n	8007b66 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	69db      	ldr	r3, [r3, #28]
 8007b08:	f003 0308 	and.w	r3, r3, #8
 8007b0c:	2b08      	cmp	r3, #8
 8007b0e:	d110      	bne.n	8007b32 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	2208      	movs	r2, #8
 8007b16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007b18:	68f8      	ldr	r0, [r7, #12]
 8007b1a:	f000 f839 	bl	8007b90 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	2208      	movs	r2, #8
 8007b22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007b2e:	2301      	movs	r3, #1
 8007b30:	e029      	b.n	8007b86 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	69db      	ldr	r3, [r3, #28]
 8007b38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007b3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b40:	d111      	bne.n	8007b66 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007b4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007b4c:	68f8      	ldr	r0, [r7, #12]
 8007b4e:	f000 f81f 	bl	8007b90 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2220      	movs	r2, #32
 8007b56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007b62:	2303      	movs	r3, #3
 8007b64:	e00f      	b.n	8007b86 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	69da      	ldr	r2, [r3, #28]
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	4013      	ands	r3, r2
 8007b70:	68ba      	ldr	r2, [r7, #8]
 8007b72:	429a      	cmp	r2, r3
 8007b74:	bf0c      	ite	eq
 8007b76:	2301      	moveq	r3, #1
 8007b78:	2300      	movne	r3, #0
 8007b7a:	b2db      	uxtb	r3, r3
 8007b7c:	461a      	mov	r2, r3
 8007b7e:	79fb      	ldrb	r3, [r7, #7]
 8007b80:	429a      	cmp	r2, r3
 8007b82:	d0a0      	beq.n	8007ac6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b84:	2300      	movs	r3, #0
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3710      	adds	r7, #16
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}
	...

08007b90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b095      	sub	sp, #84	@ 0x54
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ba0:	e853 3f00 	ldrex	r3, [r3]
 8007ba4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ba8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007bac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	461a      	mov	r2, r3
 8007bb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007bb6:	643b      	str	r3, [r7, #64]	@ 0x40
 8007bb8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007bbc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007bbe:	e841 2300 	strex	r3, r2, [r1]
 8007bc2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007bc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d1e6      	bne.n	8007b98 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	3308      	adds	r3, #8
 8007bd0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd2:	6a3b      	ldr	r3, [r7, #32]
 8007bd4:	e853 3f00 	ldrex	r3, [r3]
 8007bd8:	61fb      	str	r3, [r7, #28]
   return(result);
 8007bda:	69fa      	ldr	r2, [r7, #28]
 8007bdc:	4b1e      	ldr	r3, [pc, #120]	@ (8007c58 <UART_EndRxTransfer+0xc8>)
 8007bde:	4013      	ands	r3, r2
 8007be0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	3308      	adds	r3, #8
 8007be8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007bea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007bec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007bf0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007bf2:	e841 2300 	strex	r3, r2, [r1]
 8007bf6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d1e5      	bne.n	8007bca <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c02:	2b01      	cmp	r3, #1
 8007c04:	d118      	bne.n	8007c38 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	e853 3f00 	ldrex	r3, [r3]
 8007c12:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	f023 0310 	bic.w	r3, r3, #16
 8007c1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	461a      	mov	r2, r3
 8007c22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c24:	61bb      	str	r3, [r7, #24]
 8007c26:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c28:	6979      	ldr	r1, [r7, #20]
 8007c2a:	69ba      	ldr	r2, [r7, #24]
 8007c2c:	e841 2300 	strex	r3, r2, [r1]
 8007c30:	613b      	str	r3, [r7, #16]
   return(result);
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d1e6      	bne.n	8007c06 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2220      	movs	r2, #32
 8007c3c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2200      	movs	r2, #0
 8007c44:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007c4c:	bf00      	nop
 8007c4e:	3754      	adds	r7, #84	@ 0x54
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr
 8007c58:	effffffe 	.word	0xeffffffe

08007c5c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b084      	sub	sp, #16
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c68:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c72:	68f8      	ldr	r0, [r7, #12]
 8007c74:	f7ff f854 	bl	8006d20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c78:	bf00      	nop
 8007c7a:	3710      	adds	r7, #16
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b088      	sub	sp, #32
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	e853 3f00 	ldrex	r3, [r3]
 8007c94:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c9c:	61fb      	str	r3, [r7, #28]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	69fb      	ldr	r3, [r7, #28]
 8007ca6:	61bb      	str	r3, [r7, #24]
 8007ca8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007caa:	6979      	ldr	r1, [r7, #20]
 8007cac:	69ba      	ldr	r2, [r7, #24]
 8007cae:	e841 2300 	strex	r3, r2, [r1]
 8007cb2:	613b      	str	r3, [r7, #16]
   return(result);
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d1e6      	bne.n	8007c88 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2220      	movs	r2, #32
 8007cbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f7ff f81f 	bl	8006d0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007cce:	bf00      	nop
 8007cd0:	3720      	adds	r7, #32
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}

08007cd6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007cd6:	b480      	push	{r7}
 8007cd8:	b083      	sub	sp, #12
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007cde:	bf00      	nop
 8007ce0:	370c      	adds	r7, #12
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce8:	4770      	bx	lr

08007cea <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007cea:	b480      	push	{r7}
 8007cec:	b083      	sub	sp, #12
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007cf2:	bf00      	nop
 8007cf4:	370c      	adds	r7, #12
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfc:	4770      	bx	lr

08007cfe <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007cfe:	b480      	push	{r7}
 8007d00:	b083      	sub	sp, #12
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007d06:	bf00      	nop
 8007d08:	370c      	adds	r7, #12
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d10:	4770      	bx	lr

08007d12 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007d12:	b480      	push	{r7}
 8007d14:	b085      	sub	sp, #20
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007d20:	2b01      	cmp	r3, #1
 8007d22:	d101      	bne.n	8007d28 <HAL_UARTEx_DisableFifoMode+0x16>
 8007d24:	2302      	movs	r3, #2
 8007d26:	e027      	b.n	8007d78 <HAL_UARTEx_DisableFifoMode+0x66>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2224      	movs	r2, #36	@ 0x24
 8007d34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	681a      	ldr	r2, [r3, #0]
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f022 0201 	bic.w	r2, r2, #1
 8007d4e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007d56:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	68fa      	ldr	r2, [r7, #12]
 8007d64:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2220      	movs	r2, #32
 8007d6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2200      	movs	r2, #0
 8007d72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007d76:	2300      	movs	r3, #0
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3714      	adds	r7, #20
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d82:	4770      	bx	lr

08007d84 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b084      	sub	sp, #16
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	d101      	bne.n	8007d9c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007d98:	2302      	movs	r3, #2
 8007d9a:	e02d      	b.n	8007df8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2201      	movs	r2, #1
 8007da0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2224      	movs	r2, #36	@ 0x24
 8007da8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	681a      	ldr	r2, [r3, #0]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f022 0201 	bic.w	r2, r2, #1
 8007dc2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	689b      	ldr	r3, [r3, #8]
 8007dca:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	683a      	ldr	r2, [r7, #0]
 8007dd4:	430a      	orrs	r2, r1
 8007dd6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f000 f84f 	bl	8007e7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	68fa      	ldr	r2, [r7, #12]
 8007de4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2220      	movs	r2, #32
 8007dea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2200      	movs	r2, #0
 8007df2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007df6:	2300      	movs	r3, #0
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3710      	adds	r7, #16
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}

08007e00 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b084      	sub	sp, #16
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	d101      	bne.n	8007e18 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007e14:	2302      	movs	r3, #2
 8007e16:	e02d      	b.n	8007e74 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2224      	movs	r2, #36	@ 0x24
 8007e24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	681a      	ldr	r2, [r3, #0]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f022 0201 	bic.w	r2, r2, #1
 8007e3e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	689b      	ldr	r3, [r3, #8]
 8007e46:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	683a      	ldr	r2, [r7, #0]
 8007e50:	430a      	orrs	r2, r1
 8007e52:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f000 f811 	bl	8007e7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	68fa      	ldr	r2, [r7, #12]
 8007e60:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2220      	movs	r2, #32
 8007e66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007e72:	2300      	movs	r3, #0
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3710      	adds	r7, #16
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b085      	sub	sp, #20
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d108      	bne.n	8007e9e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2201      	movs	r2, #1
 8007e90:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2201      	movs	r2, #1
 8007e98:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007e9c:	e031      	b.n	8007f02 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007e9e:	2310      	movs	r3, #16
 8007ea0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007ea2:	2310      	movs	r3, #16
 8007ea4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	689b      	ldr	r3, [r3, #8]
 8007eac:	0e5b      	lsrs	r3, r3, #25
 8007eae:	b2db      	uxtb	r3, r3
 8007eb0:	f003 0307 	and.w	r3, r3, #7
 8007eb4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	689b      	ldr	r3, [r3, #8]
 8007ebc:	0f5b      	lsrs	r3, r3, #29
 8007ebe:	b2db      	uxtb	r3, r3
 8007ec0:	f003 0307 	and.w	r3, r3, #7
 8007ec4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007ec6:	7bbb      	ldrb	r3, [r7, #14]
 8007ec8:	7b3a      	ldrb	r2, [r7, #12]
 8007eca:	4911      	ldr	r1, [pc, #68]	@ (8007f10 <UARTEx_SetNbDataToProcess+0x94>)
 8007ecc:	5c8a      	ldrb	r2, [r1, r2]
 8007ece:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007ed2:	7b3a      	ldrb	r2, [r7, #12]
 8007ed4:	490f      	ldr	r1, [pc, #60]	@ (8007f14 <UARTEx_SetNbDataToProcess+0x98>)
 8007ed6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007ed8:	fb93 f3f2 	sdiv	r3, r3, r2
 8007edc:	b29a      	uxth	r2, r3
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007ee4:	7bfb      	ldrb	r3, [r7, #15]
 8007ee6:	7b7a      	ldrb	r2, [r7, #13]
 8007ee8:	4909      	ldr	r1, [pc, #36]	@ (8007f10 <UARTEx_SetNbDataToProcess+0x94>)
 8007eea:	5c8a      	ldrb	r2, [r1, r2]
 8007eec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007ef0:	7b7a      	ldrb	r2, [r7, #13]
 8007ef2:	4908      	ldr	r1, [pc, #32]	@ (8007f14 <UARTEx_SetNbDataToProcess+0x98>)
 8007ef4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007ef6:	fb93 f3f2 	sdiv	r3, r3, r2
 8007efa:	b29a      	uxth	r2, r3
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007f02:	bf00      	nop
 8007f04:	3714      	adds	r7, #20
 8007f06:	46bd      	mov	sp, r7
 8007f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0c:	4770      	bx	lr
 8007f0e:	bf00      	nop
 8007f10:	08008ee8 	.word	0x08008ee8
 8007f14:	08008ef0 	.word	0x08008ef0

08007f18 <HAL_WWDG_IRQHandler>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
void HAL_WWDG_IRQHandler(WWDG_HandleTypeDef *hwwdg)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b082      	sub	sp, #8
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  /* Check if Early Wakeup Interrupt is enable */
  if (__HAL_WWDG_GET_IT_SOURCE(hwwdg, WWDG_IT_EWI) != RESET)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007f2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f2e:	d10e      	bne.n	8007f4e <HAL_WWDG_IRQHandler+0x36>
  {
    /* Check if WWDG Early Wakeup Interrupt occurred */
    if (__HAL_WWDG_GET_FLAG(hwwdg, WWDG_FLAG_EWIF) != RESET)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	689b      	ldr	r3, [r3, #8]
 8007f36:	f003 0301 	and.w	r3, r3, #1
 8007f3a:	2b01      	cmp	r3, #1
 8007f3c:	d107      	bne.n	8007f4e <HAL_WWDG_IRQHandler+0x36>
    {
      /* Clear the WWDG Early Wakeup flag */
      __HAL_WWDG_CLEAR_FLAG(hwwdg, WWDG_FLAG_EWIF);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f06f 0201 	mvn.w	r2, #1
 8007f46:	609a      	str	r2, [r3, #8]
#if (USE_HAL_WWDG_REGISTER_CALLBACKS == 1)
      /* Early Wakeup registered callback */
      hwwdg->EwiCallback(hwwdg);
#else
      /* Early Wakeup callback */
      HAL_WWDG_EarlyWakeupCallback(hwwdg);
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f000 f804 	bl	8007f56 <HAL_WWDG_EarlyWakeupCallback>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */
    }
  }
}
 8007f4e:	bf00      	nop
 8007f50:	3708      	adds	r7, #8
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}

08007f56 <HAL_WWDG_EarlyWakeupCallback>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
__weak void HAL_WWDG_EarlyWakeupCallback(WWDG_HandleTypeDef *hwwdg)
{
 8007f56:	b480      	push	{r7}
 8007f58:	b083      	sub	sp, #12
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	6078      	str	r0, [r7, #4]
  UNUSED(hwwdg);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_WWDG_EarlyWakeupCallback could be implemented in the user file
   */
}
 8007f5e:	bf00      	nop
 8007f60:	370c      	adds	r7, #12
 8007f62:	46bd      	mov	sp, r7
 8007f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f68:	4770      	bx	lr
	...

08007f6c <std>:
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	b510      	push	{r4, lr}
 8007f70:	4604      	mov	r4, r0
 8007f72:	e9c0 3300 	strd	r3, r3, [r0]
 8007f76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007f7a:	6083      	str	r3, [r0, #8]
 8007f7c:	8181      	strh	r1, [r0, #12]
 8007f7e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007f80:	81c2      	strh	r2, [r0, #14]
 8007f82:	6183      	str	r3, [r0, #24]
 8007f84:	4619      	mov	r1, r3
 8007f86:	2208      	movs	r2, #8
 8007f88:	305c      	adds	r0, #92	@ 0x5c
 8007f8a:	f000 f9f9 	bl	8008380 <memset>
 8007f8e:	4b0d      	ldr	r3, [pc, #52]	@ (8007fc4 <std+0x58>)
 8007f90:	6263      	str	r3, [r4, #36]	@ 0x24
 8007f92:	4b0d      	ldr	r3, [pc, #52]	@ (8007fc8 <std+0x5c>)
 8007f94:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007f96:	4b0d      	ldr	r3, [pc, #52]	@ (8007fcc <std+0x60>)
 8007f98:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8007fd0 <std+0x64>)
 8007f9c:	6323      	str	r3, [r4, #48]	@ 0x30
 8007f9e:	4b0d      	ldr	r3, [pc, #52]	@ (8007fd4 <std+0x68>)
 8007fa0:	6224      	str	r4, [r4, #32]
 8007fa2:	429c      	cmp	r4, r3
 8007fa4:	d006      	beq.n	8007fb4 <std+0x48>
 8007fa6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007faa:	4294      	cmp	r4, r2
 8007fac:	d002      	beq.n	8007fb4 <std+0x48>
 8007fae:	33d0      	adds	r3, #208	@ 0xd0
 8007fb0:	429c      	cmp	r4, r3
 8007fb2:	d105      	bne.n	8007fc0 <std+0x54>
 8007fb4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fbc:	f000 ba58 	b.w	8008470 <__retarget_lock_init_recursive>
 8007fc0:	bd10      	pop	{r4, pc}
 8007fc2:	bf00      	nop
 8007fc4:	080081d1 	.word	0x080081d1
 8007fc8:	080081f3 	.word	0x080081f3
 8007fcc:	0800822b 	.word	0x0800822b
 8007fd0:	0800824f 	.word	0x0800824f
 8007fd4:	24000228 	.word	0x24000228

08007fd8 <stdio_exit_handler>:
 8007fd8:	4a02      	ldr	r2, [pc, #8]	@ (8007fe4 <stdio_exit_handler+0xc>)
 8007fda:	4903      	ldr	r1, [pc, #12]	@ (8007fe8 <stdio_exit_handler+0x10>)
 8007fdc:	4803      	ldr	r0, [pc, #12]	@ (8007fec <stdio_exit_handler+0x14>)
 8007fde:	f000 b869 	b.w	80080b4 <_fwalk_sglue>
 8007fe2:	bf00      	nop
 8007fe4:	24000010 	.word	0x24000010
 8007fe8:	08008d0d 	.word	0x08008d0d
 8007fec:	24000020 	.word	0x24000020

08007ff0 <cleanup_stdio>:
 8007ff0:	6841      	ldr	r1, [r0, #4]
 8007ff2:	4b0c      	ldr	r3, [pc, #48]	@ (8008024 <cleanup_stdio+0x34>)
 8007ff4:	4299      	cmp	r1, r3
 8007ff6:	b510      	push	{r4, lr}
 8007ff8:	4604      	mov	r4, r0
 8007ffa:	d001      	beq.n	8008000 <cleanup_stdio+0x10>
 8007ffc:	f000 fe86 	bl	8008d0c <_fflush_r>
 8008000:	68a1      	ldr	r1, [r4, #8]
 8008002:	4b09      	ldr	r3, [pc, #36]	@ (8008028 <cleanup_stdio+0x38>)
 8008004:	4299      	cmp	r1, r3
 8008006:	d002      	beq.n	800800e <cleanup_stdio+0x1e>
 8008008:	4620      	mov	r0, r4
 800800a:	f000 fe7f 	bl	8008d0c <_fflush_r>
 800800e:	68e1      	ldr	r1, [r4, #12]
 8008010:	4b06      	ldr	r3, [pc, #24]	@ (800802c <cleanup_stdio+0x3c>)
 8008012:	4299      	cmp	r1, r3
 8008014:	d004      	beq.n	8008020 <cleanup_stdio+0x30>
 8008016:	4620      	mov	r0, r4
 8008018:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800801c:	f000 be76 	b.w	8008d0c <_fflush_r>
 8008020:	bd10      	pop	{r4, pc}
 8008022:	bf00      	nop
 8008024:	24000228 	.word	0x24000228
 8008028:	24000290 	.word	0x24000290
 800802c:	240002f8 	.word	0x240002f8

08008030 <global_stdio_init.part.0>:
 8008030:	b510      	push	{r4, lr}
 8008032:	4b0b      	ldr	r3, [pc, #44]	@ (8008060 <global_stdio_init.part.0+0x30>)
 8008034:	4c0b      	ldr	r4, [pc, #44]	@ (8008064 <global_stdio_init.part.0+0x34>)
 8008036:	4a0c      	ldr	r2, [pc, #48]	@ (8008068 <global_stdio_init.part.0+0x38>)
 8008038:	601a      	str	r2, [r3, #0]
 800803a:	4620      	mov	r0, r4
 800803c:	2200      	movs	r2, #0
 800803e:	2104      	movs	r1, #4
 8008040:	f7ff ff94 	bl	8007f6c <std>
 8008044:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008048:	2201      	movs	r2, #1
 800804a:	2109      	movs	r1, #9
 800804c:	f7ff ff8e 	bl	8007f6c <std>
 8008050:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008054:	2202      	movs	r2, #2
 8008056:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800805a:	2112      	movs	r1, #18
 800805c:	f7ff bf86 	b.w	8007f6c <std>
 8008060:	24000360 	.word	0x24000360
 8008064:	24000228 	.word	0x24000228
 8008068:	08007fd9 	.word	0x08007fd9

0800806c <__sfp_lock_acquire>:
 800806c:	4801      	ldr	r0, [pc, #4]	@ (8008074 <__sfp_lock_acquire+0x8>)
 800806e:	f000 ba00 	b.w	8008472 <__retarget_lock_acquire_recursive>
 8008072:	bf00      	nop
 8008074:	24000369 	.word	0x24000369

08008078 <__sfp_lock_release>:
 8008078:	4801      	ldr	r0, [pc, #4]	@ (8008080 <__sfp_lock_release+0x8>)
 800807a:	f000 b9fb 	b.w	8008474 <__retarget_lock_release_recursive>
 800807e:	bf00      	nop
 8008080:	24000369 	.word	0x24000369

08008084 <__sinit>:
 8008084:	b510      	push	{r4, lr}
 8008086:	4604      	mov	r4, r0
 8008088:	f7ff fff0 	bl	800806c <__sfp_lock_acquire>
 800808c:	6a23      	ldr	r3, [r4, #32]
 800808e:	b11b      	cbz	r3, 8008098 <__sinit+0x14>
 8008090:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008094:	f7ff bff0 	b.w	8008078 <__sfp_lock_release>
 8008098:	4b04      	ldr	r3, [pc, #16]	@ (80080ac <__sinit+0x28>)
 800809a:	6223      	str	r3, [r4, #32]
 800809c:	4b04      	ldr	r3, [pc, #16]	@ (80080b0 <__sinit+0x2c>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d1f5      	bne.n	8008090 <__sinit+0xc>
 80080a4:	f7ff ffc4 	bl	8008030 <global_stdio_init.part.0>
 80080a8:	e7f2      	b.n	8008090 <__sinit+0xc>
 80080aa:	bf00      	nop
 80080ac:	08007ff1 	.word	0x08007ff1
 80080b0:	24000360 	.word	0x24000360

080080b4 <_fwalk_sglue>:
 80080b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080b8:	4607      	mov	r7, r0
 80080ba:	4688      	mov	r8, r1
 80080bc:	4614      	mov	r4, r2
 80080be:	2600      	movs	r6, #0
 80080c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80080c4:	f1b9 0901 	subs.w	r9, r9, #1
 80080c8:	d505      	bpl.n	80080d6 <_fwalk_sglue+0x22>
 80080ca:	6824      	ldr	r4, [r4, #0]
 80080cc:	2c00      	cmp	r4, #0
 80080ce:	d1f7      	bne.n	80080c0 <_fwalk_sglue+0xc>
 80080d0:	4630      	mov	r0, r6
 80080d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080d6:	89ab      	ldrh	r3, [r5, #12]
 80080d8:	2b01      	cmp	r3, #1
 80080da:	d907      	bls.n	80080ec <_fwalk_sglue+0x38>
 80080dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80080e0:	3301      	adds	r3, #1
 80080e2:	d003      	beq.n	80080ec <_fwalk_sglue+0x38>
 80080e4:	4629      	mov	r1, r5
 80080e6:	4638      	mov	r0, r7
 80080e8:	47c0      	blx	r8
 80080ea:	4306      	orrs	r6, r0
 80080ec:	3568      	adds	r5, #104	@ 0x68
 80080ee:	e7e9      	b.n	80080c4 <_fwalk_sglue+0x10>

080080f0 <iprintf>:
 80080f0:	b40f      	push	{r0, r1, r2, r3}
 80080f2:	b507      	push	{r0, r1, r2, lr}
 80080f4:	4906      	ldr	r1, [pc, #24]	@ (8008110 <iprintf+0x20>)
 80080f6:	ab04      	add	r3, sp, #16
 80080f8:	6808      	ldr	r0, [r1, #0]
 80080fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80080fe:	6881      	ldr	r1, [r0, #8]
 8008100:	9301      	str	r3, [sp, #4]
 8008102:	f000 fadb 	bl	80086bc <_vfiprintf_r>
 8008106:	b003      	add	sp, #12
 8008108:	f85d eb04 	ldr.w	lr, [sp], #4
 800810c:	b004      	add	sp, #16
 800810e:	4770      	bx	lr
 8008110:	2400001c 	.word	0x2400001c

08008114 <_puts_r>:
 8008114:	6a03      	ldr	r3, [r0, #32]
 8008116:	b570      	push	{r4, r5, r6, lr}
 8008118:	6884      	ldr	r4, [r0, #8]
 800811a:	4605      	mov	r5, r0
 800811c:	460e      	mov	r6, r1
 800811e:	b90b      	cbnz	r3, 8008124 <_puts_r+0x10>
 8008120:	f7ff ffb0 	bl	8008084 <__sinit>
 8008124:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008126:	07db      	lsls	r3, r3, #31
 8008128:	d405      	bmi.n	8008136 <_puts_r+0x22>
 800812a:	89a3      	ldrh	r3, [r4, #12]
 800812c:	0598      	lsls	r0, r3, #22
 800812e:	d402      	bmi.n	8008136 <_puts_r+0x22>
 8008130:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008132:	f000 f99e 	bl	8008472 <__retarget_lock_acquire_recursive>
 8008136:	89a3      	ldrh	r3, [r4, #12]
 8008138:	0719      	lsls	r1, r3, #28
 800813a:	d502      	bpl.n	8008142 <_puts_r+0x2e>
 800813c:	6923      	ldr	r3, [r4, #16]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d135      	bne.n	80081ae <_puts_r+0x9a>
 8008142:	4621      	mov	r1, r4
 8008144:	4628      	mov	r0, r5
 8008146:	f000 f8c5 	bl	80082d4 <__swsetup_r>
 800814a:	b380      	cbz	r0, 80081ae <_puts_r+0x9a>
 800814c:	f04f 35ff 	mov.w	r5, #4294967295
 8008150:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008152:	07da      	lsls	r2, r3, #31
 8008154:	d405      	bmi.n	8008162 <_puts_r+0x4e>
 8008156:	89a3      	ldrh	r3, [r4, #12]
 8008158:	059b      	lsls	r3, r3, #22
 800815a:	d402      	bmi.n	8008162 <_puts_r+0x4e>
 800815c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800815e:	f000 f989 	bl	8008474 <__retarget_lock_release_recursive>
 8008162:	4628      	mov	r0, r5
 8008164:	bd70      	pop	{r4, r5, r6, pc}
 8008166:	2b00      	cmp	r3, #0
 8008168:	da04      	bge.n	8008174 <_puts_r+0x60>
 800816a:	69a2      	ldr	r2, [r4, #24]
 800816c:	429a      	cmp	r2, r3
 800816e:	dc17      	bgt.n	80081a0 <_puts_r+0x8c>
 8008170:	290a      	cmp	r1, #10
 8008172:	d015      	beq.n	80081a0 <_puts_r+0x8c>
 8008174:	6823      	ldr	r3, [r4, #0]
 8008176:	1c5a      	adds	r2, r3, #1
 8008178:	6022      	str	r2, [r4, #0]
 800817a:	7019      	strb	r1, [r3, #0]
 800817c:	68a3      	ldr	r3, [r4, #8]
 800817e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008182:	3b01      	subs	r3, #1
 8008184:	60a3      	str	r3, [r4, #8]
 8008186:	2900      	cmp	r1, #0
 8008188:	d1ed      	bne.n	8008166 <_puts_r+0x52>
 800818a:	2b00      	cmp	r3, #0
 800818c:	da11      	bge.n	80081b2 <_puts_r+0x9e>
 800818e:	4622      	mov	r2, r4
 8008190:	210a      	movs	r1, #10
 8008192:	4628      	mov	r0, r5
 8008194:	f000 f85f 	bl	8008256 <__swbuf_r>
 8008198:	3001      	adds	r0, #1
 800819a:	d0d7      	beq.n	800814c <_puts_r+0x38>
 800819c:	250a      	movs	r5, #10
 800819e:	e7d7      	b.n	8008150 <_puts_r+0x3c>
 80081a0:	4622      	mov	r2, r4
 80081a2:	4628      	mov	r0, r5
 80081a4:	f000 f857 	bl	8008256 <__swbuf_r>
 80081a8:	3001      	adds	r0, #1
 80081aa:	d1e7      	bne.n	800817c <_puts_r+0x68>
 80081ac:	e7ce      	b.n	800814c <_puts_r+0x38>
 80081ae:	3e01      	subs	r6, #1
 80081b0:	e7e4      	b.n	800817c <_puts_r+0x68>
 80081b2:	6823      	ldr	r3, [r4, #0]
 80081b4:	1c5a      	adds	r2, r3, #1
 80081b6:	6022      	str	r2, [r4, #0]
 80081b8:	220a      	movs	r2, #10
 80081ba:	701a      	strb	r2, [r3, #0]
 80081bc:	e7ee      	b.n	800819c <_puts_r+0x88>
	...

080081c0 <puts>:
 80081c0:	4b02      	ldr	r3, [pc, #8]	@ (80081cc <puts+0xc>)
 80081c2:	4601      	mov	r1, r0
 80081c4:	6818      	ldr	r0, [r3, #0]
 80081c6:	f7ff bfa5 	b.w	8008114 <_puts_r>
 80081ca:	bf00      	nop
 80081cc:	2400001c 	.word	0x2400001c

080081d0 <__sread>:
 80081d0:	b510      	push	{r4, lr}
 80081d2:	460c      	mov	r4, r1
 80081d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081d8:	f000 f8fc 	bl	80083d4 <_read_r>
 80081dc:	2800      	cmp	r0, #0
 80081de:	bfab      	itete	ge
 80081e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80081e2:	89a3      	ldrhlt	r3, [r4, #12]
 80081e4:	181b      	addge	r3, r3, r0
 80081e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80081ea:	bfac      	ite	ge
 80081ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 80081ee:	81a3      	strhlt	r3, [r4, #12]
 80081f0:	bd10      	pop	{r4, pc}

080081f2 <__swrite>:
 80081f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081f6:	461f      	mov	r7, r3
 80081f8:	898b      	ldrh	r3, [r1, #12]
 80081fa:	05db      	lsls	r3, r3, #23
 80081fc:	4605      	mov	r5, r0
 80081fe:	460c      	mov	r4, r1
 8008200:	4616      	mov	r6, r2
 8008202:	d505      	bpl.n	8008210 <__swrite+0x1e>
 8008204:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008208:	2302      	movs	r3, #2
 800820a:	2200      	movs	r2, #0
 800820c:	f000 f8d0 	bl	80083b0 <_lseek_r>
 8008210:	89a3      	ldrh	r3, [r4, #12]
 8008212:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008216:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800821a:	81a3      	strh	r3, [r4, #12]
 800821c:	4632      	mov	r2, r6
 800821e:	463b      	mov	r3, r7
 8008220:	4628      	mov	r0, r5
 8008222:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008226:	f000 b8e7 	b.w	80083f8 <_write_r>

0800822a <__sseek>:
 800822a:	b510      	push	{r4, lr}
 800822c:	460c      	mov	r4, r1
 800822e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008232:	f000 f8bd 	bl	80083b0 <_lseek_r>
 8008236:	1c43      	adds	r3, r0, #1
 8008238:	89a3      	ldrh	r3, [r4, #12]
 800823a:	bf15      	itete	ne
 800823c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800823e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008242:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008246:	81a3      	strheq	r3, [r4, #12]
 8008248:	bf18      	it	ne
 800824a:	81a3      	strhne	r3, [r4, #12]
 800824c:	bd10      	pop	{r4, pc}

0800824e <__sclose>:
 800824e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008252:	f000 b89d 	b.w	8008390 <_close_r>

08008256 <__swbuf_r>:
 8008256:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008258:	460e      	mov	r6, r1
 800825a:	4614      	mov	r4, r2
 800825c:	4605      	mov	r5, r0
 800825e:	b118      	cbz	r0, 8008268 <__swbuf_r+0x12>
 8008260:	6a03      	ldr	r3, [r0, #32]
 8008262:	b90b      	cbnz	r3, 8008268 <__swbuf_r+0x12>
 8008264:	f7ff ff0e 	bl	8008084 <__sinit>
 8008268:	69a3      	ldr	r3, [r4, #24]
 800826a:	60a3      	str	r3, [r4, #8]
 800826c:	89a3      	ldrh	r3, [r4, #12]
 800826e:	071a      	lsls	r2, r3, #28
 8008270:	d501      	bpl.n	8008276 <__swbuf_r+0x20>
 8008272:	6923      	ldr	r3, [r4, #16]
 8008274:	b943      	cbnz	r3, 8008288 <__swbuf_r+0x32>
 8008276:	4621      	mov	r1, r4
 8008278:	4628      	mov	r0, r5
 800827a:	f000 f82b 	bl	80082d4 <__swsetup_r>
 800827e:	b118      	cbz	r0, 8008288 <__swbuf_r+0x32>
 8008280:	f04f 37ff 	mov.w	r7, #4294967295
 8008284:	4638      	mov	r0, r7
 8008286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008288:	6823      	ldr	r3, [r4, #0]
 800828a:	6922      	ldr	r2, [r4, #16]
 800828c:	1a98      	subs	r0, r3, r2
 800828e:	6963      	ldr	r3, [r4, #20]
 8008290:	b2f6      	uxtb	r6, r6
 8008292:	4283      	cmp	r3, r0
 8008294:	4637      	mov	r7, r6
 8008296:	dc05      	bgt.n	80082a4 <__swbuf_r+0x4e>
 8008298:	4621      	mov	r1, r4
 800829a:	4628      	mov	r0, r5
 800829c:	f000 fd36 	bl	8008d0c <_fflush_r>
 80082a0:	2800      	cmp	r0, #0
 80082a2:	d1ed      	bne.n	8008280 <__swbuf_r+0x2a>
 80082a4:	68a3      	ldr	r3, [r4, #8]
 80082a6:	3b01      	subs	r3, #1
 80082a8:	60a3      	str	r3, [r4, #8]
 80082aa:	6823      	ldr	r3, [r4, #0]
 80082ac:	1c5a      	adds	r2, r3, #1
 80082ae:	6022      	str	r2, [r4, #0]
 80082b0:	701e      	strb	r6, [r3, #0]
 80082b2:	6962      	ldr	r2, [r4, #20]
 80082b4:	1c43      	adds	r3, r0, #1
 80082b6:	429a      	cmp	r2, r3
 80082b8:	d004      	beq.n	80082c4 <__swbuf_r+0x6e>
 80082ba:	89a3      	ldrh	r3, [r4, #12]
 80082bc:	07db      	lsls	r3, r3, #31
 80082be:	d5e1      	bpl.n	8008284 <__swbuf_r+0x2e>
 80082c0:	2e0a      	cmp	r6, #10
 80082c2:	d1df      	bne.n	8008284 <__swbuf_r+0x2e>
 80082c4:	4621      	mov	r1, r4
 80082c6:	4628      	mov	r0, r5
 80082c8:	f000 fd20 	bl	8008d0c <_fflush_r>
 80082cc:	2800      	cmp	r0, #0
 80082ce:	d0d9      	beq.n	8008284 <__swbuf_r+0x2e>
 80082d0:	e7d6      	b.n	8008280 <__swbuf_r+0x2a>
	...

080082d4 <__swsetup_r>:
 80082d4:	b538      	push	{r3, r4, r5, lr}
 80082d6:	4b29      	ldr	r3, [pc, #164]	@ (800837c <__swsetup_r+0xa8>)
 80082d8:	4605      	mov	r5, r0
 80082da:	6818      	ldr	r0, [r3, #0]
 80082dc:	460c      	mov	r4, r1
 80082de:	b118      	cbz	r0, 80082e8 <__swsetup_r+0x14>
 80082e0:	6a03      	ldr	r3, [r0, #32]
 80082e2:	b90b      	cbnz	r3, 80082e8 <__swsetup_r+0x14>
 80082e4:	f7ff fece 	bl	8008084 <__sinit>
 80082e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082ec:	0719      	lsls	r1, r3, #28
 80082ee:	d422      	bmi.n	8008336 <__swsetup_r+0x62>
 80082f0:	06da      	lsls	r2, r3, #27
 80082f2:	d407      	bmi.n	8008304 <__swsetup_r+0x30>
 80082f4:	2209      	movs	r2, #9
 80082f6:	602a      	str	r2, [r5, #0]
 80082f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082fc:	81a3      	strh	r3, [r4, #12]
 80082fe:	f04f 30ff 	mov.w	r0, #4294967295
 8008302:	e033      	b.n	800836c <__swsetup_r+0x98>
 8008304:	0758      	lsls	r0, r3, #29
 8008306:	d512      	bpl.n	800832e <__swsetup_r+0x5a>
 8008308:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800830a:	b141      	cbz	r1, 800831e <__swsetup_r+0x4a>
 800830c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008310:	4299      	cmp	r1, r3
 8008312:	d002      	beq.n	800831a <__swsetup_r+0x46>
 8008314:	4628      	mov	r0, r5
 8008316:	f000 f8af 	bl	8008478 <_free_r>
 800831a:	2300      	movs	r3, #0
 800831c:	6363      	str	r3, [r4, #52]	@ 0x34
 800831e:	89a3      	ldrh	r3, [r4, #12]
 8008320:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008324:	81a3      	strh	r3, [r4, #12]
 8008326:	2300      	movs	r3, #0
 8008328:	6063      	str	r3, [r4, #4]
 800832a:	6923      	ldr	r3, [r4, #16]
 800832c:	6023      	str	r3, [r4, #0]
 800832e:	89a3      	ldrh	r3, [r4, #12]
 8008330:	f043 0308 	orr.w	r3, r3, #8
 8008334:	81a3      	strh	r3, [r4, #12]
 8008336:	6923      	ldr	r3, [r4, #16]
 8008338:	b94b      	cbnz	r3, 800834e <__swsetup_r+0x7a>
 800833a:	89a3      	ldrh	r3, [r4, #12]
 800833c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008340:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008344:	d003      	beq.n	800834e <__swsetup_r+0x7a>
 8008346:	4621      	mov	r1, r4
 8008348:	4628      	mov	r0, r5
 800834a:	f000 fd2d 	bl	8008da8 <__smakebuf_r>
 800834e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008352:	f013 0201 	ands.w	r2, r3, #1
 8008356:	d00a      	beq.n	800836e <__swsetup_r+0x9a>
 8008358:	2200      	movs	r2, #0
 800835a:	60a2      	str	r2, [r4, #8]
 800835c:	6962      	ldr	r2, [r4, #20]
 800835e:	4252      	negs	r2, r2
 8008360:	61a2      	str	r2, [r4, #24]
 8008362:	6922      	ldr	r2, [r4, #16]
 8008364:	b942      	cbnz	r2, 8008378 <__swsetup_r+0xa4>
 8008366:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800836a:	d1c5      	bne.n	80082f8 <__swsetup_r+0x24>
 800836c:	bd38      	pop	{r3, r4, r5, pc}
 800836e:	0799      	lsls	r1, r3, #30
 8008370:	bf58      	it	pl
 8008372:	6962      	ldrpl	r2, [r4, #20]
 8008374:	60a2      	str	r2, [r4, #8]
 8008376:	e7f4      	b.n	8008362 <__swsetup_r+0x8e>
 8008378:	2000      	movs	r0, #0
 800837a:	e7f7      	b.n	800836c <__swsetup_r+0x98>
 800837c:	2400001c 	.word	0x2400001c

08008380 <memset>:
 8008380:	4402      	add	r2, r0
 8008382:	4603      	mov	r3, r0
 8008384:	4293      	cmp	r3, r2
 8008386:	d100      	bne.n	800838a <memset+0xa>
 8008388:	4770      	bx	lr
 800838a:	f803 1b01 	strb.w	r1, [r3], #1
 800838e:	e7f9      	b.n	8008384 <memset+0x4>

08008390 <_close_r>:
 8008390:	b538      	push	{r3, r4, r5, lr}
 8008392:	4d06      	ldr	r5, [pc, #24]	@ (80083ac <_close_r+0x1c>)
 8008394:	2300      	movs	r3, #0
 8008396:	4604      	mov	r4, r0
 8008398:	4608      	mov	r0, r1
 800839a:	602b      	str	r3, [r5, #0]
 800839c:	f7f8 fcd1 	bl	8000d42 <_close>
 80083a0:	1c43      	adds	r3, r0, #1
 80083a2:	d102      	bne.n	80083aa <_close_r+0x1a>
 80083a4:	682b      	ldr	r3, [r5, #0]
 80083a6:	b103      	cbz	r3, 80083aa <_close_r+0x1a>
 80083a8:	6023      	str	r3, [r4, #0]
 80083aa:	bd38      	pop	{r3, r4, r5, pc}
 80083ac:	24000364 	.word	0x24000364

080083b0 <_lseek_r>:
 80083b0:	b538      	push	{r3, r4, r5, lr}
 80083b2:	4d07      	ldr	r5, [pc, #28]	@ (80083d0 <_lseek_r+0x20>)
 80083b4:	4604      	mov	r4, r0
 80083b6:	4608      	mov	r0, r1
 80083b8:	4611      	mov	r1, r2
 80083ba:	2200      	movs	r2, #0
 80083bc:	602a      	str	r2, [r5, #0]
 80083be:	461a      	mov	r2, r3
 80083c0:	f7f8 fce6 	bl	8000d90 <_lseek>
 80083c4:	1c43      	adds	r3, r0, #1
 80083c6:	d102      	bne.n	80083ce <_lseek_r+0x1e>
 80083c8:	682b      	ldr	r3, [r5, #0]
 80083ca:	b103      	cbz	r3, 80083ce <_lseek_r+0x1e>
 80083cc:	6023      	str	r3, [r4, #0]
 80083ce:	bd38      	pop	{r3, r4, r5, pc}
 80083d0:	24000364 	.word	0x24000364

080083d4 <_read_r>:
 80083d4:	b538      	push	{r3, r4, r5, lr}
 80083d6:	4d07      	ldr	r5, [pc, #28]	@ (80083f4 <_read_r+0x20>)
 80083d8:	4604      	mov	r4, r0
 80083da:	4608      	mov	r0, r1
 80083dc:	4611      	mov	r1, r2
 80083de:	2200      	movs	r2, #0
 80083e0:	602a      	str	r2, [r5, #0]
 80083e2:	461a      	mov	r2, r3
 80083e4:	f7f8 fc74 	bl	8000cd0 <_read>
 80083e8:	1c43      	adds	r3, r0, #1
 80083ea:	d102      	bne.n	80083f2 <_read_r+0x1e>
 80083ec:	682b      	ldr	r3, [r5, #0]
 80083ee:	b103      	cbz	r3, 80083f2 <_read_r+0x1e>
 80083f0:	6023      	str	r3, [r4, #0]
 80083f2:	bd38      	pop	{r3, r4, r5, pc}
 80083f4:	24000364 	.word	0x24000364

080083f8 <_write_r>:
 80083f8:	b538      	push	{r3, r4, r5, lr}
 80083fa:	4d07      	ldr	r5, [pc, #28]	@ (8008418 <_write_r+0x20>)
 80083fc:	4604      	mov	r4, r0
 80083fe:	4608      	mov	r0, r1
 8008400:	4611      	mov	r1, r2
 8008402:	2200      	movs	r2, #0
 8008404:	602a      	str	r2, [r5, #0]
 8008406:	461a      	mov	r2, r3
 8008408:	f7f8 fc7f 	bl	8000d0a <_write>
 800840c:	1c43      	adds	r3, r0, #1
 800840e:	d102      	bne.n	8008416 <_write_r+0x1e>
 8008410:	682b      	ldr	r3, [r5, #0]
 8008412:	b103      	cbz	r3, 8008416 <_write_r+0x1e>
 8008414:	6023      	str	r3, [r4, #0]
 8008416:	bd38      	pop	{r3, r4, r5, pc}
 8008418:	24000364 	.word	0x24000364

0800841c <__errno>:
 800841c:	4b01      	ldr	r3, [pc, #4]	@ (8008424 <__errno+0x8>)
 800841e:	6818      	ldr	r0, [r3, #0]
 8008420:	4770      	bx	lr
 8008422:	bf00      	nop
 8008424:	2400001c 	.word	0x2400001c

08008428 <__libc_init_array>:
 8008428:	b570      	push	{r4, r5, r6, lr}
 800842a:	4d0d      	ldr	r5, [pc, #52]	@ (8008460 <__libc_init_array+0x38>)
 800842c:	4c0d      	ldr	r4, [pc, #52]	@ (8008464 <__libc_init_array+0x3c>)
 800842e:	1b64      	subs	r4, r4, r5
 8008430:	10a4      	asrs	r4, r4, #2
 8008432:	2600      	movs	r6, #0
 8008434:	42a6      	cmp	r6, r4
 8008436:	d109      	bne.n	800844c <__libc_init_array+0x24>
 8008438:	4d0b      	ldr	r5, [pc, #44]	@ (8008468 <__libc_init_array+0x40>)
 800843a:	4c0c      	ldr	r4, [pc, #48]	@ (800846c <__libc_init_array+0x44>)
 800843c:	f000 fd22 	bl	8008e84 <_init>
 8008440:	1b64      	subs	r4, r4, r5
 8008442:	10a4      	asrs	r4, r4, #2
 8008444:	2600      	movs	r6, #0
 8008446:	42a6      	cmp	r6, r4
 8008448:	d105      	bne.n	8008456 <__libc_init_array+0x2e>
 800844a:	bd70      	pop	{r4, r5, r6, pc}
 800844c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008450:	4798      	blx	r3
 8008452:	3601      	adds	r6, #1
 8008454:	e7ee      	b.n	8008434 <__libc_init_array+0xc>
 8008456:	f855 3b04 	ldr.w	r3, [r5], #4
 800845a:	4798      	blx	r3
 800845c:	3601      	adds	r6, #1
 800845e:	e7f2      	b.n	8008446 <__libc_init_array+0x1e>
 8008460:	08008f34 	.word	0x08008f34
 8008464:	08008f34 	.word	0x08008f34
 8008468:	08008f34 	.word	0x08008f34
 800846c:	08008f38 	.word	0x08008f38

08008470 <__retarget_lock_init_recursive>:
 8008470:	4770      	bx	lr

08008472 <__retarget_lock_acquire_recursive>:
 8008472:	4770      	bx	lr

08008474 <__retarget_lock_release_recursive>:
 8008474:	4770      	bx	lr
	...

08008478 <_free_r>:
 8008478:	b538      	push	{r3, r4, r5, lr}
 800847a:	4605      	mov	r5, r0
 800847c:	2900      	cmp	r1, #0
 800847e:	d041      	beq.n	8008504 <_free_r+0x8c>
 8008480:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008484:	1f0c      	subs	r4, r1, #4
 8008486:	2b00      	cmp	r3, #0
 8008488:	bfb8      	it	lt
 800848a:	18e4      	addlt	r4, r4, r3
 800848c:	f000 f8e0 	bl	8008650 <__malloc_lock>
 8008490:	4a1d      	ldr	r2, [pc, #116]	@ (8008508 <_free_r+0x90>)
 8008492:	6813      	ldr	r3, [r2, #0]
 8008494:	b933      	cbnz	r3, 80084a4 <_free_r+0x2c>
 8008496:	6063      	str	r3, [r4, #4]
 8008498:	6014      	str	r4, [r2, #0]
 800849a:	4628      	mov	r0, r5
 800849c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80084a0:	f000 b8dc 	b.w	800865c <__malloc_unlock>
 80084a4:	42a3      	cmp	r3, r4
 80084a6:	d908      	bls.n	80084ba <_free_r+0x42>
 80084a8:	6820      	ldr	r0, [r4, #0]
 80084aa:	1821      	adds	r1, r4, r0
 80084ac:	428b      	cmp	r3, r1
 80084ae:	bf01      	itttt	eq
 80084b0:	6819      	ldreq	r1, [r3, #0]
 80084b2:	685b      	ldreq	r3, [r3, #4]
 80084b4:	1809      	addeq	r1, r1, r0
 80084b6:	6021      	streq	r1, [r4, #0]
 80084b8:	e7ed      	b.n	8008496 <_free_r+0x1e>
 80084ba:	461a      	mov	r2, r3
 80084bc:	685b      	ldr	r3, [r3, #4]
 80084be:	b10b      	cbz	r3, 80084c4 <_free_r+0x4c>
 80084c0:	42a3      	cmp	r3, r4
 80084c2:	d9fa      	bls.n	80084ba <_free_r+0x42>
 80084c4:	6811      	ldr	r1, [r2, #0]
 80084c6:	1850      	adds	r0, r2, r1
 80084c8:	42a0      	cmp	r0, r4
 80084ca:	d10b      	bne.n	80084e4 <_free_r+0x6c>
 80084cc:	6820      	ldr	r0, [r4, #0]
 80084ce:	4401      	add	r1, r0
 80084d0:	1850      	adds	r0, r2, r1
 80084d2:	4283      	cmp	r3, r0
 80084d4:	6011      	str	r1, [r2, #0]
 80084d6:	d1e0      	bne.n	800849a <_free_r+0x22>
 80084d8:	6818      	ldr	r0, [r3, #0]
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	6053      	str	r3, [r2, #4]
 80084de:	4408      	add	r0, r1
 80084e0:	6010      	str	r0, [r2, #0]
 80084e2:	e7da      	b.n	800849a <_free_r+0x22>
 80084e4:	d902      	bls.n	80084ec <_free_r+0x74>
 80084e6:	230c      	movs	r3, #12
 80084e8:	602b      	str	r3, [r5, #0]
 80084ea:	e7d6      	b.n	800849a <_free_r+0x22>
 80084ec:	6820      	ldr	r0, [r4, #0]
 80084ee:	1821      	adds	r1, r4, r0
 80084f0:	428b      	cmp	r3, r1
 80084f2:	bf04      	itt	eq
 80084f4:	6819      	ldreq	r1, [r3, #0]
 80084f6:	685b      	ldreq	r3, [r3, #4]
 80084f8:	6063      	str	r3, [r4, #4]
 80084fa:	bf04      	itt	eq
 80084fc:	1809      	addeq	r1, r1, r0
 80084fe:	6021      	streq	r1, [r4, #0]
 8008500:	6054      	str	r4, [r2, #4]
 8008502:	e7ca      	b.n	800849a <_free_r+0x22>
 8008504:	bd38      	pop	{r3, r4, r5, pc}
 8008506:	bf00      	nop
 8008508:	24000370 	.word	0x24000370

0800850c <sbrk_aligned>:
 800850c:	b570      	push	{r4, r5, r6, lr}
 800850e:	4e0f      	ldr	r6, [pc, #60]	@ (800854c <sbrk_aligned+0x40>)
 8008510:	460c      	mov	r4, r1
 8008512:	6831      	ldr	r1, [r6, #0]
 8008514:	4605      	mov	r5, r0
 8008516:	b911      	cbnz	r1, 800851e <sbrk_aligned+0x12>
 8008518:	f000 fca4 	bl	8008e64 <_sbrk_r>
 800851c:	6030      	str	r0, [r6, #0]
 800851e:	4621      	mov	r1, r4
 8008520:	4628      	mov	r0, r5
 8008522:	f000 fc9f 	bl	8008e64 <_sbrk_r>
 8008526:	1c43      	adds	r3, r0, #1
 8008528:	d103      	bne.n	8008532 <sbrk_aligned+0x26>
 800852a:	f04f 34ff 	mov.w	r4, #4294967295
 800852e:	4620      	mov	r0, r4
 8008530:	bd70      	pop	{r4, r5, r6, pc}
 8008532:	1cc4      	adds	r4, r0, #3
 8008534:	f024 0403 	bic.w	r4, r4, #3
 8008538:	42a0      	cmp	r0, r4
 800853a:	d0f8      	beq.n	800852e <sbrk_aligned+0x22>
 800853c:	1a21      	subs	r1, r4, r0
 800853e:	4628      	mov	r0, r5
 8008540:	f000 fc90 	bl	8008e64 <_sbrk_r>
 8008544:	3001      	adds	r0, #1
 8008546:	d1f2      	bne.n	800852e <sbrk_aligned+0x22>
 8008548:	e7ef      	b.n	800852a <sbrk_aligned+0x1e>
 800854a:	bf00      	nop
 800854c:	2400036c 	.word	0x2400036c

08008550 <_malloc_r>:
 8008550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008554:	1ccd      	adds	r5, r1, #3
 8008556:	f025 0503 	bic.w	r5, r5, #3
 800855a:	3508      	adds	r5, #8
 800855c:	2d0c      	cmp	r5, #12
 800855e:	bf38      	it	cc
 8008560:	250c      	movcc	r5, #12
 8008562:	2d00      	cmp	r5, #0
 8008564:	4606      	mov	r6, r0
 8008566:	db01      	blt.n	800856c <_malloc_r+0x1c>
 8008568:	42a9      	cmp	r1, r5
 800856a:	d904      	bls.n	8008576 <_malloc_r+0x26>
 800856c:	230c      	movs	r3, #12
 800856e:	6033      	str	r3, [r6, #0]
 8008570:	2000      	movs	r0, #0
 8008572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008576:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800864c <_malloc_r+0xfc>
 800857a:	f000 f869 	bl	8008650 <__malloc_lock>
 800857e:	f8d8 3000 	ldr.w	r3, [r8]
 8008582:	461c      	mov	r4, r3
 8008584:	bb44      	cbnz	r4, 80085d8 <_malloc_r+0x88>
 8008586:	4629      	mov	r1, r5
 8008588:	4630      	mov	r0, r6
 800858a:	f7ff ffbf 	bl	800850c <sbrk_aligned>
 800858e:	1c43      	adds	r3, r0, #1
 8008590:	4604      	mov	r4, r0
 8008592:	d158      	bne.n	8008646 <_malloc_r+0xf6>
 8008594:	f8d8 4000 	ldr.w	r4, [r8]
 8008598:	4627      	mov	r7, r4
 800859a:	2f00      	cmp	r7, #0
 800859c:	d143      	bne.n	8008626 <_malloc_r+0xd6>
 800859e:	2c00      	cmp	r4, #0
 80085a0:	d04b      	beq.n	800863a <_malloc_r+0xea>
 80085a2:	6823      	ldr	r3, [r4, #0]
 80085a4:	4639      	mov	r1, r7
 80085a6:	4630      	mov	r0, r6
 80085a8:	eb04 0903 	add.w	r9, r4, r3
 80085ac:	f000 fc5a 	bl	8008e64 <_sbrk_r>
 80085b0:	4581      	cmp	r9, r0
 80085b2:	d142      	bne.n	800863a <_malloc_r+0xea>
 80085b4:	6821      	ldr	r1, [r4, #0]
 80085b6:	1a6d      	subs	r5, r5, r1
 80085b8:	4629      	mov	r1, r5
 80085ba:	4630      	mov	r0, r6
 80085bc:	f7ff ffa6 	bl	800850c <sbrk_aligned>
 80085c0:	3001      	adds	r0, #1
 80085c2:	d03a      	beq.n	800863a <_malloc_r+0xea>
 80085c4:	6823      	ldr	r3, [r4, #0]
 80085c6:	442b      	add	r3, r5
 80085c8:	6023      	str	r3, [r4, #0]
 80085ca:	f8d8 3000 	ldr.w	r3, [r8]
 80085ce:	685a      	ldr	r2, [r3, #4]
 80085d0:	bb62      	cbnz	r2, 800862c <_malloc_r+0xdc>
 80085d2:	f8c8 7000 	str.w	r7, [r8]
 80085d6:	e00f      	b.n	80085f8 <_malloc_r+0xa8>
 80085d8:	6822      	ldr	r2, [r4, #0]
 80085da:	1b52      	subs	r2, r2, r5
 80085dc:	d420      	bmi.n	8008620 <_malloc_r+0xd0>
 80085de:	2a0b      	cmp	r2, #11
 80085e0:	d917      	bls.n	8008612 <_malloc_r+0xc2>
 80085e2:	1961      	adds	r1, r4, r5
 80085e4:	42a3      	cmp	r3, r4
 80085e6:	6025      	str	r5, [r4, #0]
 80085e8:	bf18      	it	ne
 80085ea:	6059      	strne	r1, [r3, #4]
 80085ec:	6863      	ldr	r3, [r4, #4]
 80085ee:	bf08      	it	eq
 80085f0:	f8c8 1000 	streq.w	r1, [r8]
 80085f4:	5162      	str	r2, [r4, r5]
 80085f6:	604b      	str	r3, [r1, #4]
 80085f8:	4630      	mov	r0, r6
 80085fa:	f000 f82f 	bl	800865c <__malloc_unlock>
 80085fe:	f104 000b 	add.w	r0, r4, #11
 8008602:	1d23      	adds	r3, r4, #4
 8008604:	f020 0007 	bic.w	r0, r0, #7
 8008608:	1ac2      	subs	r2, r0, r3
 800860a:	bf1c      	itt	ne
 800860c:	1a1b      	subne	r3, r3, r0
 800860e:	50a3      	strne	r3, [r4, r2]
 8008610:	e7af      	b.n	8008572 <_malloc_r+0x22>
 8008612:	6862      	ldr	r2, [r4, #4]
 8008614:	42a3      	cmp	r3, r4
 8008616:	bf0c      	ite	eq
 8008618:	f8c8 2000 	streq.w	r2, [r8]
 800861c:	605a      	strne	r2, [r3, #4]
 800861e:	e7eb      	b.n	80085f8 <_malloc_r+0xa8>
 8008620:	4623      	mov	r3, r4
 8008622:	6864      	ldr	r4, [r4, #4]
 8008624:	e7ae      	b.n	8008584 <_malloc_r+0x34>
 8008626:	463c      	mov	r4, r7
 8008628:	687f      	ldr	r7, [r7, #4]
 800862a:	e7b6      	b.n	800859a <_malloc_r+0x4a>
 800862c:	461a      	mov	r2, r3
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	42a3      	cmp	r3, r4
 8008632:	d1fb      	bne.n	800862c <_malloc_r+0xdc>
 8008634:	2300      	movs	r3, #0
 8008636:	6053      	str	r3, [r2, #4]
 8008638:	e7de      	b.n	80085f8 <_malloc_r+0xa8>
 800863a:	230c      	movs	r3, #12
 800863c:	6033      	str	r3, [r6, #0]
 800863e:	4630      	mov	r0, r6
 8008640:	f000 f80c 	bl	800865c <__malloc_unlock>
 8008644:	e794      	b.n	8008570 <_malloc_r+0x20>
 8008646:	6005      	str	r5, [r0, #0]
 8008648:	e7d6      	b.n	80085f8 <_malloc_r+0xa8>
 800864a:	bf00      	nop
 800864c:	24000370 	.word	0x24000370

08008650 <__malloc_lock>:
 8008650:	4801      	ldr	r0, [pc, #4]	@ (8008658 <__malloc_lock+0x8>)
 8008652:	f7ff bf0e 	b.w	8008472 <__retarget_lock_acquire_recursive>
 8008656:	bf00      	nop
 8008658:	24000368 	.word	0x24000368

0800865c <__malloc_unlock>:
 800865c:	4801      	ldr	r0, [pc, #4]	@ (8008664 <__malloc_unlock+0x8>)
 800865e:	f7ff bf09 	b.w	8008474 <__retarget_lock_release_recursive>
 8008662:	bf00      	nop
 8008664:	24000368 	.word	0x24000368

08008668 <__sfputc_r>:
 8008668:	6893      	ldr	r3, [r2, #8]
 800866a:	3b01      	subs	r3, #1
 800866c:	2b00      	cmp	r3, #0
 800866e:	b410      	push	{r4}
 8008670:	6093      	str	r3, [r2, #8]
 8008672:	da08      	bge.n	8008686 <__sfputc_r+0x1e>
 8008674:	6994      	ldr	r4, [r2, #24]
 8008676:	42a3      	cmp	r3, r4
 8008678:	db01      	blt.n	800867e <__sfputc_r+0x16>
 800867a:	290a      	cmp	r1, #10
 800867c:	d103      	bne.n	8008686 <__sfputc_r+0x1e>
 800867e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008682:	f7ff bde8 	b.w	8008256 <__swbuf_r>
 8008686:	6813      	ldr	r3, [r2, #0]
 8008688:	1c58      	adds	r0, r3, #1
 800868a:	6010      	str	r0, [r2, #0]
 800868c:	7019      	strb	r1, [r3, #0]
 800868e:	4608      	mov	r0, r1
 8008690:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008694:	4770      	bx	lr

08008696 <__sfputs_r>:
 8008696:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008698:	4606      	mov	r6, r0
 800869a:	460f      	mov	r7, r1
 800869c:	4614      	mov	r4, r2
 800869e:	18d5      	adds	r5, r2, r3
 80086a0:	42ac      	cmp	r4, r5
 80086a2:	d101      	bne.n	80086a8 <__sfputs_r+0x12>
 80086a4:	2000      	movs	r0, #0
 80086a6:	e007      	b.n	80086b8 <__sfputs_r+0x22>
 80086a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086ac:	463a      	mov	r2, r7
 80086ae:	4630      	mov	r0, r6
 80086b0:	f7ff ffda 	bl	8008668 <__sfputc_r>
 80086b4:	1c43      	adds	r3, r0, #1
 80086b6:	d1f3      	bne.n	80086a0 <__sfputs_r+0xa>
 80086b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080086bc <_vfiprintf_r>:
 80086bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086c0:	460d      	mov	r5, r1
 80086c2:	b09d      	sub	sp, #116	@ 0x74
 80086c4:	4614      	mov	r4, r2
 80086c6:	4698      	mov	r8, r3
 80086c8:	4606      	mov	r6, r0
 80086ca:	b118      	cbz	r0, 80086d4 <_vfiprintf_r+0x18>
 80086cc:	6a03      	ldr	r3, [r0, #32]
 80086ce:	b90b      	cbnz	r3, 80086d4 <_vfiprintf_r+0x18>
 80086d0:	f7ff fcd8 	bl	8008084 <__sinit>
 80086d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80086d6:	07d9      	lsls	r1, r3, #31
 80086d8:	d405      	bmi.n	80086e6 <_vfiprintf_r+0x2a>
 80086da:	89ab      	ldrh	r3, [r5, #12]
 80086dc:	059a      	lsls	r2, r3, #22
 80086de:	d402      	bmi.n	80086e6 <_vfiprintf_r+0x2a>
 80086e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80086e2:	f7ff fec6 	bl	8008472 <__retarget_lock_acquire_recursive>
 80086e6:	89ab      	ldrh	r3, [r5, #12]
 80086e8:	071b      	lsls	r3, r3, #28
 80086ea:	d501      	bpl.n	80086f0 <_vfiprintf_r+0x34>
 80086ec:	692b      	ldr	r3, [r5, #16]
 80086ee:	b99b      	cbnz	r3, 8008718 <_vfiprintf_r+0x5c>
 80086f0:	4629      	mov	r1, r5
 80086f2:	4630      	mov	r0, r6
 80086f4:	f7ff fdee 	bl	80082d4 <__swsetup_r>
 80086f8:	b170      	cbz	r0, 8008718 <_vfiprintf_r+0x5c>
 80086fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80086fc:	07dc      	lsls	r4, r3, #31
 80086fe:	d504      	bpl.n	800870a <_vfiprintf_r+0x4e>
 8008700:	f04f 30ff 	mov.w	r0, #4294967295
 8008704:	b01d      	add	sp, #116	@ 0x74
 8008706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800870a:	89ab      	ldrh	r3, [r5, #12]
 800870c:	0598      	lsls	r0, r3, #22
 800870e:	d4f7      	bmi.n	8008700 <_vfiprintf_r+0x44>
 8008710:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008712:	f7ff feaf 	bl	8008474 <__retarget_lock_release_recursive>
 8008716:	e7f3      	b.n	8008700 <_vfiprintf_r+0x44>
 8008718:	2300      	movs	r3, #0
 800871a:	9309      	str	r3, [sp, #36]	@ 0x24
 800871c:	2320      	movs	r3, #32
 800871e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008722:	f8cd 800c 	str.w	r8, [sp, #12]
 8008726:	2330      	movs	r3, #48	@ 0x30
 8008728:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80088d8 <_vfiprintf_r+0x21c>
 800872c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008730:	f04f 0901 	mov.w	r9, #1
 8008734:	4623      	mov	r3, r4
 8008736:	469a      	mov	sl, r3
 8008738:	f813 2b01 	ldrb.w	r2, [r3], #1
 800873c:	b10a      	cbz	r2, 8008742 <_vfiprintf_r+0x86>
 800873e:	2a25      	cmp	r2, #37	@ 0x25
 8008740:	d1f9      	bne.n	8008736 <_vfiprintf_r+0x7a>
 8008742:	ebba 0b04 	subs.w	fp, sl, r4
 8008746:	d00b      	beq.n	8008760 <_vfiprintf_r+0xa4>
 8008748:	465b      	mov	r3, fp
 800874a:	4622      	mov	r2, r4
 800874c:	4629      	mov	r1, r5
 800874e:	4630      	mov	r0, r6
 8008750:	f7ff ffa1 	bl	8008696 <__sfputs_r>
 8008754:	3001      	adds	r0, #1
 8008756:	f000 80a7 	beq.w	80088a8 <_vfiprintf_r+0x1ec>
 800875a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800875c:	445a      	add	r2, fp
 800875e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008760:	f89a 3000 	ldrb.w	r3, [sl]
 8008764:	2b00      	cmp	r3, #0
 8008766:	f000 809f 	beq.w	80088a8 <_vfiprintf_r+0x1ec>
 800876a:	2300      	movs	r3, #0
 800876c:	f04f 32ff 	mov.w	r2, #4294967295
 8008770:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008774:	f10a 0a01 	add.w	sl, sl, #1
 8008778:	9304      	str	r3, [sp, #16]
 800877a:	9307      	str	r3, [sp, #28]
 800877c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008780:	931a      	str	r3, [sp, #104]	@ 0x68
 8008782:	4654      	mov	r4, sl
 8008784:	2205      	movs	r2, #5
 8008786:	f814 1b01 	ldrb.w	r1, [r4], #1
 800878a:	4853      	ldr	r0, [pc, #332]	@ (80088d8 <_vfiprintf_r+0x21c>)
 800878c:	f7f7 fda8 	bl	80002e0 <memchr>
 8008790:	9a04      	ldr	r2, [sp, #16]
 8008792:	b9d8      	cbnz	r0, 80087cc <_vfiprintf_r+0x110>
 8008794:	06d1      	lsls	r1, r2, #27
 8008796:	bf44      	itt	mi
 8008798:	2320      	movmi	r3, #32
 800879a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800879e:	0713      	lsls	r3, r2, #28
 80087a0:	bf44      	itt	mi
 80087a2:	232b      	movmi	r3, #43	@ 0x2b
 80087a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80087a8:	f89a 3000 	ldrb.w	r3, [sl]
 80087ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80087ae:	d015      	beq.n	80087dc <_vfiprintf_r+0x120>
 80087b0:	9a07      	ldr	r2, [sp, #28]
 80087b2:	4654      	mov	r4, sl
 80087b4:	2000      	movs	r0, #0
 80087b6:	f04f 0c0a 	mov.w	ip, #10
 80087ba:	4621      	mov	r1, r4
 80087bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80087c0:	3b30      	subs	r3, #48	@ 0x30
 80087c2:	2b09      	cmp	r3, #9
 80087c4:	d94b      	bls.n	800885e <_vfiprintf_r+0x1a2>
 80087c6:	b1b0      	cbz	r0, 80087f6 <_vfiprintf_r+0x13a>
 80087c8:	9207      	str	r2, [sp, #28]
 80087ca:	e014      	b.n	80087f6 <_vfiprintf_r+0x13a>
 80087cc:	eba0 0308 	sub.w	r3, r0, r8
 80087d0:	fa09 f303 	lsl.w	r3, r9, r3
 80087d4:	4313      	orrs	r3, r2
 80087d6:	9304      	str	r3, [sp, #16]
 80087d8:	46a2      	mov	sl, r4
 80087da:	e7d2      	b.n	8008782 <_vfiprintf_r+0xc6>
 80087dc:	9b03      	ldr	r3, [sp, #12]
 80087de:	1d19      	adds	r1, r3, #4
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	9103      	str	r1, [sp, #12]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	bfbb      	ittet	lt
 80087e8:	425b      	neglt	r3, r3
 80087ea:	f042 0202 	orrlt.w	r2, r2, #2
 80087ee:	9307      	strge	r3, [sp, #28]
 80087f0:	9307      	strlt	r3, [sp, #28]
 80087f2:	bfb8      	it	lt
 80087f4:	9204      	strlt	r2, [sp, #16]
 80087f6:	7823      	ldrb	r3, [r4, #0]
 80087f8:	2b2e      	cmp	r3, #46	@ 0x2e
 80087fa:	d10a      	bne.n	8008812 <_vfiprintf_r+0x156>
 80087fc:	7863      	ldrb	r3, [r4, #1]
 80087fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8008800:	d132      	bne.n	8008868 <_vfiprintf_r+0x1ac>
 8008802:	9b03      	ldr	r3, [sp, #12]
 8008804:	1d1a      	adds	r2, r3, #4
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	9203      	str	r2, [sp, #12]
 800880a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800880e:	3402      	adds	r4, #2
 8008810:	9305      	str	r3, [sp, #20]
 8008812:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80088e8 <_vfiprintf_r+0x22c>
 8008816:	7821      	ldrb	r1, [r4, #0]
 8008818:	2203      	movs	r2, #3
 800881a:	4650      	mov	r0, sl
 800881c:	f7f7 fd60 	bl	80002e0 <memchr>
 8008820:	b138      	cbz	r0, 8008832 <_vfiprintf_r+0x176>
 8008822:	9b04      	ldr	r3, [sp, #16]
 8008824:	eba0 000a 	sub.w	r0, r0, sl
 8008828:	2240      	movs	r2, #64	@ 0x40
 800882a:	4082      	lsls	r2, r0
 800882c:	4313      	orrs	r3, r2
 800882e:	3401      	adds	r4, #1
 8008830:	9304      	str	r3, [sp, #16]
 8008832:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008836:	4829      	ldr	r0, [pc, #164]	@ (80088dc <_vfiprintf_r+0x220>)
 8008838:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800883c:	2206      	movs	r2, #6
 800883e:	f7f7 fd4f 	bl	80002e0 <memchr>
 8008842:	2800      	cmp	r0, #0
 8008844:	d03f      	beq.n	80088c6 <_vfiprintf_r+0x20a>
 8008846:	4b26      	ldr	r3, [pc, #152]	@ (80088e0 <_vfiprintf_r+0x224>)
 8008848:	bb1b      	cbnz	r3, 8008892 <_vfiprintf_r+0x1d6>
 800884a:	9b03      	ldr	r3, [sp, #12]
 800884c:	3307      	adds	r3, #7
 800884e:	f023 0307 	bic.w	r3, r3, #7
 8008852:	3308      	adds	r3, #8
 8008854:	9303      	str	r3, [sp, #12]
 8008856:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008858:	443b      	add	r3, r7
 800885a:	9309      	str	r3, [sp, #36]	@ 0x24
 800885c:	e76a      	b.n	8008734 <_vfiprintf_r+0x78>
 800885e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008862:	460c      	mov	r4, r1
 8008864:	2001      	movs	r0, #1
 8008866:	e7a8      	b.n	80087ba <_vfiprintf_r+0xfe>
 8008868:	2300      	movs	r3, #0
 800886a:	3401      	adds	r4, #1
 800886c:	9305      	str	r3, [sp, #20]
 800886e:	4619      	mov	r1, r3
 8008870:	f04f 0c0a 	mov.w	ip, #10
 8008874:	4620      	mov	r0, r4
 8008876:	f810 2b01 	ldrb.w	r2, [r0], #1
 800887a:	3a30      	subs	r2, #48	@ 0x30
 800887c:	2a09      	cmp	r2, #9
 800887e:	d903      	bls.n	8008888 <_vfiprintf_r+0x1cc>
 8008880:	2b00      	cmp	r3, #0
 8008882:	d0c6      	beq.n	8008812 <_vfiprintf_r+0x156>
 8008884:	9105      	str	r1, [sp, #20]
 8008886:	e7c4      	b.n	8008812 <_vfiprintf_r+0x156>
 8008888:	fb0c 2101 	mla	r1, ip, r1, r2
 800888c:	4604      	mov	r4, r0
 800888e:	2301      	movs	r3, #1
 8008890:	e7f0      	b.n	8008874 <_vfiprintf_r+0x1b8>
 8008892:	ab03      	add	r3, sp, #12
 8008894:	9300      	str	r3, [sp, #0]
 8008896:	462a      	mov	r2, r5
 8008898:	4b12      	ldr	r3, [pc, #72]	@ (80088e4 <_vfiprintf_r+0x228>)
 800889a:	a904      	add	r1, sp, #16
 800889c:	4630      	mov	r0, r6
 800889e:	f3af 8000 	nop.w
 80088a2:	4607      	mov	r7, r0
 80088a4:	1c78      	adds	r0, r7, #1
 80088a6:	d1d6      	bne.n	8008856 <_vfiprintf_r+0x19a>
 80088a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80088aa:	07d9      	lsls	r1, r3, #31
 80088ac:	d405      	bmi.n	80088ba <_vfiprintf_r+0x1fe>
 80088ae:	89ab      	ldrh	r3, [r5, #12]
 80088b0:	059a      	lsls	r2, r3, #22
 80088b2:	d402      	bmi.n	80088ba <_vfiprintf_r+0x1fe>
 80088b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80088b6:	f7ff fddd 	bl	8008474 <__retarget_lock_release_recursive>
 80088ba:	89ab      	ldrh	r3, [r5, #12]
 80088bc:	065b      	lsls	r3, r3, #25
 80088be:	f53f af1f 	bmi.w	8008700 <_vfiprintf_r+0x44>
 80088c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80088c4:	e71e      	b.n	8008704 <_vfiprintf_r+0x48>
 80088c6:	ab03      	add	r3, sp, #12
 80088c8:	9300      	str	r3, [sp, #0]
 80088ca:	462a      	mov	r2, r5
 80088cc:	4b05      	ldr	r3, [pc, #20]	@ (80088e4 <_vfiprintf_r+0x228>)
 80088ce:	a904      	add	r1, sp, #16
 80088d0:	4630      	mov	r0, r6
 80088d2:	f000 f879 	bl	80089c8 <_printf_i>
 80088d6:	e7e4      	b.n	80088a2 <_vfiprintf_r+0x1e6>
 80088d8:	08008ef8 	.word	0x08008ef8
 80088dc:	08008f02 	.word	0x08008f02
 80088e0:	00000000 	.word	0x00000000
 80088e4:	08008697 	.word	0x08008697
 80088e8:	08008efe 	.word	0x08008efe

080088ec <_printf_common>:
 80088ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088f0:	4616      	mov	r6, r2
 80088f2:	4698      	mov	r8, r3
 80088f4:	688a      	ldr	r2, [r1, #8]
 80088f6:	690b      	ldr	r3, [r1, #16]
 80088f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80088fc:	4293      	cmp	r3, r2
 80088fe:	bfb8      	it	lt
 8008900:	4613      	movlt	r3, r2
 8008902:	6033      	str	r3, [r6, #0]
 8008904:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008908:	4607      	mov	r7, r0
 800890a:	460c      	mov	r4, r1
 800890c:	b10a      	cbz	r2, 8008912 <_printf_common+0x26>
 800890e:	3301      	adds	r3, #1
 8008910:	6033      	str	r3, [r6, #0]
 8008912:	6823      	ldr	r3, [r4, #0]
 8008914:	0699      	lsls	r1, r3, #26
 8008916:	bf42      	ittt	mi
 8008918:	6833      	ldrmi	r3, [r6, #0]
 800891a:	3302      	addmi	r3, #2
 800891c:	6033      	strmi	r3, [r6, #0]
 800891e:	6825      	ldr	r5, [r4, #0]
 8008920:	f015 0506 	ands.w	r5, r5, #6
 8008924:	d106      	bne.n	8008934 <_printf_common+0x48>
 8008926:	f104 0a19 	add.w	sl, r4, #25
 800892a:	68e3      	ldr	r3, [r4, #12]
 800892c:	6832      	ldr	r2, [r6, #0]
 800892e:	1a9b      	subs	r3, r3, r2
 8008930:	42ab      	cmp	r3, r5
 8008932:	dc26      	bgt.n	8008982 <_printf_common+0x96>
 8008934:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008938:	6822      	ldr	r2, [r4, #0]
 800893a:	3b00      	subs	r3, #0
 800893c:	bf18      	it	ne
 800893e:	2301      	movne	r3, #1
 8008940:	0692      	lsls	r2, r2, #26
 8008942:	d42b      	bmi.n	800899c <_printf_common+0xb0>
 8008944:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008948:	4641      	mov	r1, r8
 800894a:	4638      	mov	r0, r7
 800894c:	47c8      	blx	r9
 800894e:	3001      	adds	r0, #1
 8008950:	d01e      	beq.n	8008990 <_printf_common+0xa4>
 8008952:	6823      	ldr	r3, [r4, #0]
 8008954:	6922      	ldr	r2, [r4, #16]
 8008956:	f003 0306 	and.w	r3, r3, #6
 800895a:	2b04      	cmp	r3, #4
 800895c:	bf02      	ittt	eq
 800895e:	68e5      	ldreq	r5, [r4, #12]
 8008960:	6833      	ldreq	r3, [r6, #0]
 8008962:	1aed      	subeq	r5, r5, r3
 8008964:	68a3      	ldr	r3, [r4, #8]
 8008966:	bf0c      	ite	eq
 8008968:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800896c:	2500      	movne	r5, #0
 800896e:	4293      	cmp	r3, r2
 8008970:	bfc4      	itt	gt
 8008972:	1a9b      	subgt	r3, r3, r2
 8008974:	18ed      	addgt	r5, r5, r3
 8008976:	2600      	movs	r6, #0
 8008978:	341a      	adds	r4, #26
 800897a:	42b5      	cmp	r5, r6
 800897c:	d11a      	bne.n	80089b4 <_printf_common+0xc8>
 800897e:	2000      	movs	r0, #0
 8008980:	e008      	b.n	8008994 <_printf_common+0xa8>
 8008982:	2301      	movs	r3, #1
 8008984:	4652      	mov	r2, sl
 8008986:	4641      	mov	r1, r8
 8008988:	4638      	mov	r0, r7
 800898a:	47c8      	blx	r9
 800898c:	3001      	adds	r0, #1
 800898e:	d103      	bne.n	8008998 <_printf_common+0xac>
 8008990:	f04f 30ff 	mov.w	r0, #4294967295
 8008994:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008998:	3501      	adds	r5, #1
 800899a:	e7c6      	b.n	800892a <_printf_common+0x3e>
 800899c:	18e1      	adds	r1, r4, r3
 800899e:	1c5a      	adds	r2, r3, #1
 80089a0:	2030      	movs	r0, #48	@ 0x30
 80089a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80089a6:	4422      	add	r2, r4
 80089a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80089ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80089b0:	3302      	adds	r3, #2
 80089b2:	e7c7      	b.n	8008944 <_printf_common+0x58>
 80089b4:	2301      	movs	r3, #1
 80089b6:	4622      	mov	r2, r4
 80089b8:	4641      	mov	r1, r8
 80089ba:	4638      	mov	r0, r7
 80089bc:	47c8      	blx	r9
 80089be:	3001      	adds	r0, #1
 80089c0:	d0e6      	beq.n	8008990 <_printf_common+0xa4>
 80089c2:	3601      	adds	r6, #1
 80089c4:	e7d9      	b.n	800897a <_printf_common+0x8e>
	...

080089c8 <_printf_i>:
 80089c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80089cc:	7e0f      	ldrb	r7, [r1, #24]
 80089ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80089d0:	2f78      	cmp	r7, #120	@ 0x78
 80089d2:	4691      	mov	r9, r2
 80089d4:	4680      	mov	r8, r0
 80089d6:	460c      	mov	r4, r1
 80089d8:	469a      	mov	sl, r3
 80089da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80089de:	d807      	bhi.n	80089f0 <_printf_i+0x28>
 80089e0:	2f62      	cmp	r7, #98	@ 0x62
 80089e2:	d80a      	bhi.n	80089fa <_printf_i+0x32>
 80089e4:	2f00      	cmp	r7, #0
 80089e6:	f000 80d1 	beq.w	8008b8c <_printf_i+0x1c4>
 80089ea:	2f58      	cmp	r7, #88	@ 0x58
 80089ec:	f000 80b8 	beq.w	8008b60 <_printf_i+0x198>
 80089f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80089f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80089f8:	e03a      	b.n	8008a70 <_printf_i+0xa8>
 80089fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80089fe:	2b15      	cmp	r3, #21
 8008a00:	d8f6      	bhi.n	80089f0 <_printf_i+0x28>
 8008a02:	a101      	add	r1, pc, #4	@ (adr r1, 8008a08 <_printf_i+0x40>)
 8008a04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008a08:	08008a61 	.word	0x08008a61
 8008a0c:	08008a75 	.word	0x08008a75
 8008a10:	080089f1 	.word	0x080089f1
 8008a14:	080089f1 	.word	0x080089f1
 8008a18:	080089f1 	.word	0x080089f1
 8008a1c:	080089f1 	.word	0x080089f1
 8008a20:	08008a75 	.word	0x08008a75
 8008a24:	080089f1 	.word	0x080089f1
 8008a28:	080089f1 	.word	0x080089f1
 8008a2c:	080089f1 	.word	0x080089f1
 8008a30:	080089f1 	.word	0x080089f1
 8008a34:	08008b73 	.word	0x08008b73
 8008a38:	08008a9f 	.word	0x08008a9f
 8008a3c:	08008b2d 	.word	0x08008b2d
 8008a40:	080089f1 	.word	0x080089f1
 8008a44:	080089f1 	.word	0x080089f1
 8008a48:	08008b95 	.word	0x08008b95
 8008a4c:	080089f1 	.word	0x080089f1
 8008a50:	08008a9f 	.word	0x08008a9f
 8008a54:	080089f1 	.word	0x080089f1
 8008a58:	080089f1 	.word	0x080089f1
 8008a5c:	08008b35 	.word	0x08008b35
 8008a60:	6833      	ldr	r3, [r6, #0]
 8008a62:	1d1a      	adds	r2, r3, #4
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	6032      	str	r2, [r6, #0]
 8008a68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008a6c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008a70:	2301      	movs	r3, #1
 8008a72:	e09c      	b.n	8008bae <_printf_i+0x1e6>
 8008a74:	6833      	ldr	r3, [r6, #0]
 8008a76:	6820      	ldr	r0, [r4, #0]
 8008a78:	1d19      	adds	r1, r3, #4
 8008a7a:	6031      	str	r1, [r6, #0]
 8008a7c:	0606      	lsls	r6, r0, #24
 8008a7e:	d501      	bpl.n	8008a84 <_printf_i+0xbc>
 8008a80:	681d      	ldr	r5, [r3, #0]
 8008a82:	e003      	b.n	8008a8c <_printf_i+0xc4>
 8008a84:	0645      	lsls	r5, r0, #25
 8008a86:	d5fb      	bpl.n	8008a80 <_printf_i+0xb8>
 8008a88:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008a8c:	2d00      	cmp	r5, #0
 8008a8e:	da03      	bge.n	8008a98 <_printf_i+0xd0>
 8008a90:	232d      	movs	r3, #45	@ 0x2d
 8008a92:	426d      	negs	r5, r5
 8008a94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a98:	4858      	ldr	r0, [pc, #352]	@ (8008bfc <_printf_i+0x234>)
 8008a9a:	230a      	movs	r3, #10
 8008a9c:	e011      	b.n	8008ac2 <_printf_i+0xfa>
 8008a9e:	6821      	ldr	r1, [r4, #0]
 8008aa0:	6833      	ldr	r3, [r6, #0]
 8008aa2:	0608      	lsls	r0, r1, #24
 8008aa4:	f853 5b04 	ldr.w	r5, [r3], #4
 8008aa8:	d402      	bmi.n	8008ab0 <_printf_i+0xe8>
 8008aaa:	0649      	lsls	r1, r1, #25
 8008aac:	bf48      	it	mi
 8008aae:	b2ad      	uxthmi	r5, r5
 8008ab0:	2f6f      	cmp	r7, #111	@ 0x6f
 8008ab2:	4852      	ldr	r0, [pc, #328]	@ (8008bfc <_printf_i+0x234>)
 8008ab4:	6033      	str	r3, [r6, #0]
 8008ab6:	bf14      	ite	ne
 8008ab8:	230a      	movne	r3, #10
 8008aba:	2308      	moveq	r3, #8
 8008abc:	2100      	movs	r1, #0
 8008abe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008ac2:	6866      	ldr	r6, [r4, #4]
 8008ac4:	60a6      	str	r6, [r4, #8]
 8008ac6:	2e00      	cmp	r6, #0
 8008ac8:	db05      	blt.n	8008ad6 <_printf_i+0x10e>
 8008aca:	6821      	ldr	r1, [r4, #0]
 8008acc:	432e      	orrs	r6, r5
 8008ace:	f021 0104 	bic.w	r1, r1, #4
 8008ad2:	6021      	str	r1, [r4, #0]
 8008ad4:	d04b      	beq.n	8008b6e <_printf_i+0x1a6>
 8008ad6:	4616      	mov	r6, r2
 8008ad8:	fbb5 f1f3 	udiv	r1, r5, r3
 8008adc:	fb03 5711 	mls	r7, r3, r1, r5
 8008ae0:	5dc7      	ldrb	r7, [r0, r7]
 8008ae2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008ae6:	462f      	mov	r7, r5
 8008ae8:	42bb      	cmp	r3, r7
 8008aea:	460d      	mov	r5, r1
 8008aec:	d9f4      	bls.n	8008ad8 <_printf_i+0x110>
 8008aee:	2b08      	cmp	r3, #8
 8008af0:	d10b      	bne.n	8008b0a <_printf_i+0x142>
 8008af2:	6823      	ldr	r3, [r4, #0]
 8008af4:	07df      	lsls	r7, r3, #31
 8008af6:	d508      	bpl.n	8008b0a <_printf_i+0x142>
 8008af8:	6923      	ldr	r3, [r4, #16]
 8008afa:	6861      	ldr	r1, [r4, #4]
 8008afc:	4299      	cmp	r1, r3
 8008afe:	bfde      	ittt	le
 8008b00:	2330      	movle	r3, #48	@ 0x30
 8008b02:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008b06:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008b0a:	1b92      	subs	r2, r2, r6
 8008b0c:	6122      	str	r2, [r4, #16]
 8008b0e:	f8cd a000 	str.w	sl, [sp]
 8008b12:	464b      	mov	r3, r9
 8008b14:	aa03      	add	r2, sp, #12
 8008b16:	4621      	mov	r1, r4
 8008b18:	4640      	mov	r0, r8
 8008b1a:	f7ff fee7 	bl	80088ec <_printf_common>
 8008b1e:	3001      	adds	r0, #1
 8008b20:	d14a      	bne.n	8008bb8 <_printf_i+0x1f0>
 8008b22:	f04f 30ff 	mov.w	r0, #4294967295
 8008b26:	b004      	add	sp, #16
 8008b28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b2c:	6823      	ldr	r3, [r4, #0]
 8008b2e:	f043 0320 	orr.w	r3, r3, #32
 8008b32:	6023      	str	r3, [r4, #0]
 8008b34:	4832      	ldr	r0, [pc, #200]	@ (8008c00 <_printf_i+0x238>)
 8008b36:	2778      	movs	r7, #120	@ 0x78
 8008b38:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008b3c:	6823      	ldr	r3, [r4, #0]
 8008b3e:	6831      	ldr	r1, [r6, #0]
 8008b40:	061f      	lsls	r7, r3, #24
 8008b42:	f851 5b04 	ldr.w	r5, [r1], #4
 8008b46:	d402      	bmi.n	8008b4e <_printf_i+0x186>
 8008b48:	065f      	lsls	r7, r3, #25
 8008b4a:	bf48      	it	mi
 8008b4c:	b2ad      	uxthmi	r5, r5
 8008b4e:	6031      	str	r1, [r6, #0]
 8008b50:	07d9      	lsls	r1, r3, #31
 8008b52:	bf44      	itt	mi
 8008b54:	f043 0320 	orrmi.w	r3, r3, #32
 8008b58:	6023      	strmi	r3, [r4, #0]
 8008b5a:	b11d      	cbz	r5, 8008b64 <_printf_i+0x19c>
 8008b5c:	2310      	movs	r3, #16
 8008b5e:	e7ad      	b.n	8008abc <_printf_i+0xf4>
 8008b60:	4826      	ldr	r0, [pc, #152]	@ (8008bfc <_printf_i+0x234>)
 8008b62:	e7e9      	b.n	8008b38 <_printf_i+0x170>
 8008b64:	6823      	ldr	r3, [r4, #0]
 8008b66:	f023 0320 	bic.w	r3, r3, #32
 8008b6a:	6023      	str	r3, [r4, #0]
 8008b6c:	e7f6      	b.n	8008b5c <_printf_i+0x194>
 8008b6e:	4616      	mov	r6, r2
 8008b70:	e7bd      	b.n	8008aee <_printf_i+0x126>
 8008b72:	6833      	ldr	r3, [r6, #0]
 8008b74:	6825      	ldr	r5, [r4, #0]
 8008b76:	6961      	ldr	r1, [r4, #20]
 8008b78:	1d18      	adds	r0, r3, #4
 8008b7a:	6030      	str	r0, [r6, #0]
 8008b7c:	062e      	lsls	r6, r5, #24
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	d501      	bpl.n	8008b86 <_printf_i+0x1be>
 8008b82:	6019      	str	r1, [r3, #0]
 8008b84:	e002      	b.n	8008b8c <_printf_i+0x1c4>
 8008b86:	0668      	lsls	r0, r5, #25
 8008b88:	d5fb      	bpl.n	8008b82 <_printf_i+0x1ba>
 8008b8a:	8019      	strh	r1, [r3, #0]
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	6123      	str	r3, [r4, #16]
 8008b90:	4616      	mov	r6, r2
 8008b92:	e7bc      	b.n	8008b0e <_printf_i+0x146>
 8008b94:	6833      	ldr	r3, [r6, #0]
 8008b96:	1d1a      	adds	r2, r3, #4
 8008b98:	6032      	str	r2, [r6, #0]
 8008b9a:	681e      	ldr	r6, [r3, #0]
 8008b9c:	6862      	ldr	r2, [r4, #4]
 8008b9e:	2100      	movs	r1, #0
 8008ba0:	4630      	mov	r0, r6
 8008ba2:	f7f7 fb9d 	bl	80002e0 <memchr>
 8008ba6:	b108      	cbz	r0, 8008bac <_printf_i+0x1e4>
 8008ba8:	1b80      	subs	r0, r0, r6
 8008baa:	6060      	str	r0, [r4, #4]
 8008bac:	6863      	ldr	r3, [r4, #4]
 8008bae:	6123      	str	r3, [r4, #16]
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008bb6:	e7aa      	b.n	8008b0e <_printf_i+0x146>
 8008bb8:	6923      	ldr	r3, [r4, #16]
 8008bba:	4632      	mov	r2, r6
 8008bbc:	4649      	mov	r1, r9
 8008bbe:	4640      	mov	r0, r8
 8008bc0:	47d0      	blx	sl
 8008bc2:	3001      	adds	r0, #1
 8008bc4:	d0ad      	beq.n	8008b22 <_printf_i+0x15a>
 8008bc6:	6823      	ldr	r3, [r4, #0]
 8008bc8:	079b      	lsls	r3, r3, #30
 8008bca:	d413      	bmi.n	8008bf4 <_printf_i+0x22c>
 8008bcc:	68e0      	ldr	r0, [r4, #12]
 8008bce:	9b03      	ldr	r3, [sp, #12]
 8008bd0:	4298      	cmp	r0, r3
 8008bd2:	bfb8      	it	lt
 8008bd4:	4618      	movlt	r0, r3
 8008bd6:	e7a6      	b.n	8008b26 <_printf_i+0x15e>
 8008bd8:	2301      	movs	r3, #1
 8008bda:	4632      	mov	r2, r6
 8008bdc:	4649      	mov	r1, r9
 8008bde:	4640      	mov	r0, r8
 8008be0:	47d0      	blx	sl
 8008be2:	3001      	adds	r0, #1
 8008be4:	d09d      	beq.n	8008b22 <_printf_i+0x15a>
 8008be6:	3501      	adds	r5, #1
 8008be8:	68e3      	ldr	r3, [r4, #12]
 8008bea:	9903      	ldr	r1, [sp, #12]
 8008bec:	1a5b      	subs	r3, r3, r1
 8008bee:	42ab      	cmp	r3, r5
 8008bf0:	dcf2      	bgt.n	8008bd8 <_printf_i+0x210>
 8008bf2:	e7eb      	b.n	8008bcc <_printf_i+0x204>
 8008bf4:	2500      	movs	r5, #0
 8008bf6:	f104 0619 	add.w	r6, r4, #25
 8008bfa:	e7f5      	b.n	8008be8 <_printf_i+0x220>
 8008bfc:	08008f09 	.word	0x08008f09
 8008c00:	08008f1a 	.word	0x08008f1a

08008c04 <__sflush_r>:
 8008c04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c0c:	0716      	lsls	r6, r2, #28
 8008c0e:	4605      	mov	r5, r0
 8008c10:	460c      	mov	r4, r1
 8008c12:	d454      	bmi.n	8008cbe <__sflush_r+0xba>
 8008c14:	684b      	ldr	r3, [r1, #4]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	dc02      	bgt.n	8008c20 <__sflush_r+0x1c>
 8008c1a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	dd48      	ble.n	8008cb2 <__sflush_r+0xae>
 8008c20:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008c22:	2e00      	cmp	r6, #0
 8008c24:	d045      	beq.n	8008cb2 <__sflush_r+0xae>
 8008c26:	2300      	movs	r3, #0
 8008c28:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008c2c:	682f      	ldr	r7, [r5, #0]
 8008c2e:	6a21      	ldr	r1, [r4, #32]
 8008c30:	602b      	str	r3, [r5, #0]
 8008c32:	d030      	beq.n	8008c96 <__sflush_r+0x92>
 8008c34:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008c36:	89a3      	ldrh	r3, [r4, #12]
 8008c38:	0759      	lsls	r1, r3, #29
 8008c3a:	d505      	bpl.n	8008c48 <__sflush_r+0x44>
 8008c3c:	6863      	ldr	r3, [r4, #4]
 8008c3e:	1ad2      	subs	r2, r2, r3
 8008c40:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008c42:	b10b      	cbz	r3, 8008c48 <__sflush_r+0x44>
 8008c44:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008c46:	1ad2      	subs	r2, r2, r3
 8008c48:	2300      	movs	r3, #0
 8008c4a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008c4c:	6a21      	ldr	r1, [r4, #32]
 8008c4e:	4628      	mov	r0, r5
 8008c50:	47b0      	blx	r6
 8008c52:	1c43      	adds	r3, r0, #1
 8008c54:	89a3      	ldrh	r3, [r4, #12]
 8008c56:	d106      	bne.n	8008c66 <__sflush_r+0x62>
 8008c58:	6829      	ldr	r1, [r5, #0]
 8008c5a:	291d      	cmp	r1, #29
 8008c5c:	d82b      	bhi.n	8008cb6 <__sflush_r+0xb2>
 8008c5e:	4a2a      	ldr	r2, [pc, #168]	@ (8008d08 <__sflush_r+0x104>)
 8008c60:	40ca      	lsrs	r2, r1
 8008c62:	07d6      	lsls	r6, r2, #31
 8008c64:	d527      	bpl.n	8008cb6 <__sflush_r+0xb2>
 8008c66:	2200      	movs	r2, #0
 8008c68:	6062      	str	r2, [r4, #4]
 8008c6a:	04d9      	lsls	r1, r3, #19
 8008c6c:	6922      	ldr	r2, [r4, #16]
 8008c6e:	6022      	str	r2, [r4, #0]
 8008c70:	d504      	bpl.n	8008c7c <__sflush_r+0x78>
 8008c72:	1c42      	adds	r2, r0, #1
 8008c74:	d101      	bne.n	8008c7a <__sflush_r+0x76>
 8008c76:	682b      	ldr	r3, [r5, #0]
 8008c78:	b903      	cbnz	r3, 8008c7c <__sflush_r+0x78>
 8008c7a:	6560      	str	r0, [r4, #84]	@ 0x54
 8008c7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008c7e:	602f      	str	r7, [r5, #0]
 8008c80:	b1b9      	cbz	r1, 8008cb2 <__sflush_r+0xae>
 8008c82:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008c86:	4299      	cmp	r1, r3
 8008c88:	d002      	beq.n	8008c90 <__sflush_r+0x8c>
 8008c8a:	4628      	mov	r0, r5
 8008c8c:	f7ff fbf4 	bl	8008478 <_free_r>
 8008c90:	2300      	movs	r3, #0
 8008c92:	6363      	str	r3, [r4, #52]	@ 0x34
 8008c94:	e00d      	b.n	8008cb2 <__sflush_r+0xae>
 8008c96:	2301      	movs	r3, #1
 8008c98:	4628      	mov	r0, r5
 8008c9a:	47b0      	blx	r6
 8008c9c:	4602      	mov	r2, r0
 8008c9e:	1c50      	adds	r0, r2, #1
 8008ca0:	d1c9      	bne.n	8008c36 <__sflush_r+0x32>
 8008ca2:	682b      	ldr	r3, [r5, #0]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d0c6      	beq.n	8008c36 <__sflush_r+0x32>
 8008ca8:	2b1d      	cmp	r3, #29
 8008caa:	d001      	beq.n	8008cb0 <__sflush_r+0xac>
 8008cac:	2b16      	cmp	r3, #22
 8008cae:	d11e      	bne.n	8008cee <__sflush_r+0xea>
 8008cb0:	602f      	str	r7, [r5, #0]
 8008cb2:	2000      	movs	r0, #0
 8008cb4:	e022      	b.n	8008cfc <__sflush_r+0xf8>
 8008cb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008cba:	b21b      	sxth	r3, r3
 8008cbc:	e01b      	b.n	8008cf6 <__sflush_r+0xf2>
 8008cbe:	690f      	ldr	r7, [r1, #16]
 8008cc0:	2f00      	cmp	r7, #0
 8008cc2:	d0f6      	beq.n	8008cb2 <__sflush_r+0xae>
 8008cc4:	0793      	lsls	r3, r2, #30
 8008cc6:	680e      	ldr	r6, [r1, #0]
 8008cc8:	bf08      	it	eq
 8008cca:	694b      	ldreq	r3, [r1, #20]
 8008ccc:	600f      	str	r7, [r1, #0]
 8008cce:	bf18      	it	ne
 8008cd0:	2300      	movne	r3, #0
 8008cd2:	eba6 0807 	sub.w	r8, r6, r7
 8008cd6:	608b      	str	r3, [r1, #8]
 8008cd8:	f1b8 0f00 	cmp.w	r8, #0
 8008cdc:	dde9      	ble.n	8008cb2 <__sflush_r+0xae>
 8008cde:	6a21      	ldr	r1, [r4, #32]
 8008ce0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008ce2:	4643      	mov	r3, r8
 8008ce4:	463a      	mov	r2, r7
 8008ce6:	4628      	mov	r0, r5
 8008ce8:	47b0      	blx	r6
 8008cea:	2800      	cmp	r0, #0
 8008cec:	dc08      	bgt.n	8008d00 <__sflush_r+0xfc>
 8008cee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cf2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008cf6:	81a3      	strh	r3, [r4, #12]
 8008cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8008cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d00:	4407      	add	r7, r0
 8008d02:	eba8 0800 	sub.w	r8, r8, r0
 8008d06:	e7e7      	b.n	8008cd8 <__sflush_r+0xd4>
 8008d08:	20400001 	.word	0x20400001

08008d0c <_fflush_r>:
 8008d0c:	b538      	push	{r3, r4, r5, lr}
 8008d0e:	690b      	ldr	r3, [r1, #16]
 8008d10:	4605      	mov	r5, r0
 8008d12:	460c      	mov	r4, r1
 8008d14:	b913      	cbnz	r3, 8008d1c <_fflush_r+0x10>
 8008d16:	2500      	movs	r5, #0
 8008d18:	4628      	mov	r0, r5
 8008d1a:	bd38      	pop	{r3, r4, r5, pc}
 8008d1c:	b118      	cbz	r0, 8008d26 <_fflush_r+0x1a>
 8008d1e:	6a03      	ldr	r3, [r0, #32]
 8008d20:	b90b      	cbnz	r3, 8008d26 <_fflush_r+0x1a>
 8008d22:	f7ff f9af 	bl	8008084 <__sinit>
 8008d26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d0f3      	beq.n	8008d16 <_fflush_r+0xa>
 8008d2e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008d30:	07d0      	lsls	r0, r2, #31
 8008d32:	d404      	bmi.n	8008d3e <_fflush_r+0x32>
 8008d34:	0599      	lsls	r1, r3, #22
 8008d36:	d402      	bmi.n	8008d3e <_fflush_r+0x32>
 8008d38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d3a:	f7ff fb9a 	bl	8008472 <__retarget_lock_acquire_recursive>
 8008d3e:	4628      	mov	r0, r5
 8008d40:	4621      	mov	r1, r4
 8008d42:	f7ff ff5f 	bl	8008c04 <__sflush_r>
 8008d46:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008d48:	07da      	lsls	r2, r3, #31
 8008d4a:	4605      	mov	r5, r0
 8008d4c:	d4e4      	bmi.n	8008d18 <_fflush_r+0xc>
 8008d4e:	89a3      	ldrh	r3, [r4, #12]
 8008d50:	059b      	lsls	r3, r3, #22
 8008d52:	d4e1      	bmi.n	8008d18 <_fflush_r+0xc>
 8008d54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d56:	f7ff fb8d 	bl	8008474 <__retarget_lock_release_recursive>
 8008d5a:	e7dd      	b.n	8008d18 <_fflush_r+0xc>

08008d5c <__swhatbuf_r>:
 8008d5c:	b570      	push	{r4, r5, r6, lr}
 8008d5e:	460c      	mov	r4, r1
 8008d60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d64:	2900      	cmp	r1, #0
 8008d66:	b096      	sub	sp, #88	@ 0x58
 8008d68:	4615      	mov	r5, r2
 8008d6a:	461e      	mov	r6, r3
 8008d6c:	da0d      	bge.n	8008d8a <__swhatbuf_r+0x2e>
 8008d6e:	89a3      	ldrh	r3, [r4, #12]
 8008d70:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008d74:	f04f 0100 	mov.w	r1, #0
 8008d78:	bf14      	ite	ne
 8008d7a:	2340      	movne	r3, #64	@ 0x40
 8008d7c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008d80:	2000      	movs	r0, #0
 8008d82:	6031      	str	r1, [r6, #0]
 8008d84:	602b      	str	r3, [r5, #0]
 8008d86:	b016      	add	sp, #88	@ 0x58
 8008d88:	bd70      	pop	{r4, r5, r6, pc}
 8008d8a:	466a      	mov	r2, sp
 8008d8c:	f000 f848 	bl	8008e20 <_fstat_r>
 8008d90:	2800      	cmp	r0, #0
 8008d92:	dbec      	blt.n	8008d6e <__swhatbuf_r+0x12>
 8008d94:	9901      	ldr	r1, [sp, #4]
 8008d96:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008d9a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008d9e:	4259      	negs	r1, r3
 8008da0:	4159      	adcs	r1, r3
 8008da2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008da6:	e7eb      	b.n	8008d80 <__swhatbuf_r+0x24>

08008da8 <__smakebuf_r>:
 8008da8:	898b      	ldrh	r3, [r1, #12]
 8008daa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008dac:	079d      	lsls	r5, r3, #30
 8008dae:	4606      	mov	r6, r0
 8008db0:	460c      	mov	r4, r1
 8008db2:	d507      	bpl.n	8008dc4 <__smakebuf_r+0x1c>
 8008db4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008db8:	6023      	str	r3, [r4, #0]
 8008dba:	6123      	str	r3, [r4, #16]
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	6163      	str	r3, [r4, #20]
 8008dc0:	b003      	add	sp, #12
 8008dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008dc4:	ab01      	add	r3, sp, #4
 8008dc6:	466a      	mov	r2, sp
 8008dc8:	f7ff ffc8 	bl	8008d5c <__swhatbuf_r>
 8008dcc:	9f00      	ldr	r7, [sp, #0]
 8008dce:	4605      	mov	r5, r0
 8008dd0:	4639      	mov	r1, r7
 8008dd2:	4630      	mov	r0, r6
 8008dd4:	f7ff fbbc 	bl	8008550 <_malloc_r>
 8008dd8:	b948      	cbnz	r0, 8008dee <__smakebuf_r+0x46>
 8008dda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008dde:	059a      	lsls	r2, r3, #22
 8008de0:	d4ee      	bmi.n	8008dc0 <__smakebuf_r+0x18>
 8008de2:	f023 0303 	bic.w	r3, r3, #3
 8008de6:	f043 0302 	orr.w	r3, r3, #2
 8008dea:	81a3      	strh	r3, [r4, #12]
 8008dec:	e7e2      	b.n	8008db4 <__smakebuf_r+0xc>
 8008dee:	89a3      	ldrh	r3, [r4, #12]
 8008df0:	6020      	str	r0, [r4, #0]
 8008df2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008df6:	81a3      	strh	r3, [r4, #12]
 8008df8:	9b01      	ldr	r3, [sp, #4]
 8008dfa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008dfe:	b15b      	cbz	r3, 8008e18 <__smakebuf_r+0x70>
 8008e00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e04:	4630      	mov	r0, r6
 8008e06:	f000 f81d 	bl	8008e44 <_isatty_r>
 8008e0a:	b128      	cbz	r0, 8008e18 <__smakebuf_r+0x70>
 8008e0c:	89a3      	ldrh	r3, [r4, #12]
 8008e0e:	f023 0303 	bic.w	r3, r3, #3
 8008e12:	f043 0301 	orr.w	r3, r3, #1
 8008e16:	81a3      	strh	r3, [r4, #12]
 8008e18:	89a3      	ldrh	r3, [r4, #12]
 8008e1a:	431d      	orrs	r5, r3
 8008e1c:	81a5      	strh	r5, [r4, #12]
 8008e1e:	e7cf      	b.n	8008dc0 <__smakebuf_r+0x18>

08008e20 <_fstat_r>:
 8008e20:	b538      	push	{r3, r4, r5, lr}
 8008e22:	4d07      	ldr	r5, [pc, #28]	@ (8008e40 <_fstat_r+0x20>)
 8008e24:	2300      	movs	r3, #0
 8008e26:	4604      	mov	r4, r0
 8008e28:	4608      	mov	r0, r1
 8008e2a:	4611      	mov	r1, r2
 8008e2c:	602b      	str	r3, [r5, #0]
 8008e2e:	f7f7 ff94 	bl	8000d5a <_fstat>
 8008e32:	1c43      	adds	r3, r0, #1
 8008e34:	d102      	bne.n	8008e3c <_fstat_r+0x1c>
 8008e36:	682b      	ldr	r3, [r5, #0]
 8008e38:	b103      	cbz	r3, 8008e3c <_fstat_r+0x1c>
 8008e3a:	6023      	str	r3, [r4, #0]
 8008e3c:	bd38      	pop	{r3, r4, r5, pc}
 8008e3e:	bf00      	nop
 8008e40:	24000364 	.word	0x24000364

08008e44 <_isatty_r>:
 8008e44:	b538      	push	{r3, r4, r5, lr}
 8008e46:	4d06      	ldr	r5, [pc, #24]	@ (8008e60 <_isatty_r+0x1c>)
 8008e48:	2300      	movs	r3, #0
 8008e4a:	4604      	mov	r4, r0
 8008e4c:	4608      	mov	r0, r1
 8008e4e:	602b      	str	r3, [r5, #0]
 8008e50:	f7f7 ff93 	bl	8000d7a <_isatty>
 8008e54:	1c43      	adds	r3, r0, #1
 8008e56:	d102      	bne.n	8008e5e <_isatty_r+0x1a>
 8008e58:	682b      	ldr	r3, [r5, #0]
 8008e5a:	b103      	cbz	r3, 8008e5e <_isatty_r+0x1a>
 8008e5c:	6023      	str	r3, [r4, #0]
 8008e5e:	bd38      	pop	{r3, r4, r5, pc}
 8008e60:	24000364 	.word	0x24000364

08008e64 <_sbrk_r>:
 8008e64:	b538      	push	{r3, r4, r5, lr}
 8008e66:	4d06      	ldr	r5, [pc, #24]	@ (8008e80 <_sbrk_r+0x1c>)
 8008e68:	2300      	movs	r3, #0
 8008e6a:	4604      	mov	r4, r0
 8008e6c:	4608      	mov	r0, r1
 8008e6e:	602b      	str	r3, [r5, #0]
 8008e70:	f7f7 ff9c 	bl	8000dac <_sbrk>
 8008e74:	1c43      	adds	r3, r0, #1
 8008e76:	d102      	bne.n	8008e7e <_sbrk_r+0x1a>
 8008e78:	682b      	ldr	r3, [r5, #0]
 8008e7a:	b103      	cbz	r3, 8008e7e <_sbrk_r+0x1a>
 8008e7c:	6023      	str	r3, [r4, #0]
 8008e7e:	bd38      	pop	{r3, r4, r5, pc}
 8008e80:	24000364 	.word	0x24000364

08008e84 <_init>:
 8008e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e86:	bf00      	nop
 8008e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e8a:	bc08      	pop	{r3}
 8008e8c:	469e      	mov	lr, r3
 8008e8e:	4770      	bx	lr

08008e90 <_fini>:
 8008e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e92:	bf00      	nop
 8008e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e96:	bc08      	pop	{r3}
 8008e98:	469e      	mov	lr, r3
 8008e9a:	4770      	bx	lr
