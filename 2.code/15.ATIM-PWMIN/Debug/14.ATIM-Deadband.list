
14.ATIM-Deadband.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000897c  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08008c14  08008c14  00009c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008c5c  08008c5c  00009c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008c64  08008c64  00009c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08008c68  08008c68  00009c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  24000000  08008c6c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002d4  2400006c  08008cd8  0000a06c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000340  08008cd8  0000a340  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000a06c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00017ed7  00000000  00000000  0000a09a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000032ec  00000000  00000000  00021f71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001248  00000000  00000000  00025260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000e1d  00000000  00000000  000264a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a23a  00000000  00000000  000272c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001ec5c  00000000  00000000  000614ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00168790  00000000  00000000  0008015b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001e88eb  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005140  00000000  00000000  001e8930  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005a  00000000  00000000  001eda70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2400006c 	.word	0x2400006c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08008bfc 	.word	0x08008bfc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000070 	.word	0x24000070
 80002d4:	08008bfc 	.word	0x08008bfc

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b988 	b.w	8000600 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	468e      	mov	lr, r1
 8000310:	4604      	mov	r4, r0
 8000312:	4688      	mov	r8, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d962      	bls.n	80003e4 <__udivmoddi4+0xdc>
 800031e:	fab2 f682 	clz	r6, r2
 8000322:	b14e      	cbz	r6, 8000338 <__udivmoddi4+0x30>
 8000324:	f1c6 0320 	rsb	r3, r6, #32
 8000328:	fa01 f806 	lsl.w	r8, r1, r6
 800032c:	fa20 f303 	lsr.w	r3, r0, r3
 8000330:	40b7      	lsls	r7, r6
 8000332:	ea43 0808 	orr.w	r8, r3, r8
 8000336:	40b4      	lsls	r4, r6
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	fbb8 f1fe 	udiv	r1, r8, lr
 8000344:	0c23      	lsrs	r3, r4, #16
 8000346:	fb0e 8811 	mls	r8, lr, r1, r8
 800034a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034e:	fb01 f20c 	mul.w	r2, r1, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d909      	bls.n	800036a <__udivmoddi4+0x62>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f101 30ff 	add.w	r0, r1, #4294967295
 800035c:	f080 80ea 	bcs.w	8000534 <__udivmoddi4+0x22c>
 8000360:	429a      	cmp	r2, r3
 8000362:	f240 80e7 	bls.w	8000534 <__udivmoddi4+0x22c>
 8000366:	3902      	subs	r1, #2
 8000368:	443b      	add	r3, r7
 800036a:	1a9a      	subs	r2, r3, r2
 800036c:	b2a3      	uxth	r3, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800037a:	fb00 fc0c 	mul.w	ip, r0, ip
 800037e:	459c      	cmp	ip, r3
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x8e>
 8000382:	18fb      	adds	r3, r7, r3
 8000384:	f100 32ff 	add.w	r2, r0, #4294967295
 8000388:	f080 80d6 	bcs.w	8000538 <__udivmoddi4+0x230>
 800038c:	459c      	cmp	ip, r3
 800038e:	f240 80d3 	bls.w	8000538 <__udivmoddi4+0x230>
 8000392:	443b      	add	r3, r7
 8000394:	3802      	subs	r0, #2
 8000396:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039a:	eba3 030c 	sub.w	r3, r3, ip
 800039e:	2100      	movs	r1, #0
 80003a0:	b11d      	cbz	r5, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40f3      	lsrs	r3, r6
 80003a4:	2200      	movs	r2, #0
 80003a6:	e9c5 3200 	strd	r3, r2, [r5]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d905      	bls.n	80003be <__udivmoddi4+0xb6>
 80003b2:	b10d      	cbz	r5, 80003b8 <__udivmoddi4+0xb0>
 80003b4:	e9c5 0100 	strd	r0, r1, [r5]
 80003b8:	2100      	movs	r1, #0
 80003ba:	4608      	mov	r0, r1
 80003bc:	e7f5      	b.n	80003aa <__udivmoddi4+0xa2>
 80003be:	fab3 f183 	clz	r1, r3
 80003c2:	2900      	cmp	r1, #0
 80003c4:	d146      	bne.n	8000454 <__udivmoddi4+0x14c>
 80003c6:	4573      	cmp	r3, lr
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xc8>
 80003ca:	4282      	cmp	r2, r0
 80003cc:	f200 8105 	bhi.w	80005da <__udivmoddi4+0x2d2>
 80003d0:	1a84      	subs	r4, r0, r2
 80003d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	4690      	mov	r8, r2
 80003da:	2d00      	cmp	r5, #0
 80003dc:	d0e5      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003de:	e9c5 4800 	strd	r4, r8, [r5]
 80003e2:	e7e2      	b.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	2a00      	cmp	r2, #0
 80003e6:	f000 8090 	beq.w	800050a <__udivmoddi4+0x202>
 80003ea:	fab2 f682 	clz	r6, r2
 80003ee:	2e00      	cmp	r6, #0
 80003f0:	f040 80a4 	bne.w	800053c <__udivmoddi4+0x234>
 80003f4:	1a8a      	subs	r2, r1, r2
 80003f6:	0c03      	lsrs	r3, r0, #16
 80003f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fc:	b280      	uxth	r0, r0
 80003fe:	b2bc      	uxth	r4, r7
 8000400:	2101      	movs	r1, #1
 8000402:	fbb2 fcfe 	udiv	ip, r2, lr
 8000406:	fb0e 221c 	mls	r2, lr, ip, r2
 800040a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800040e:	fb04 f20c 	mul.w	r2, r4, ip
 8000412:	429a      	cmp	r2, r3
 8000414:	d907      	bls.n	8000426 <__udivmoddi4+0x11e>
 8000416:	18fb      	adds	r3, r7, r3
 8000418:	f10c 38ff 	add.w	r8, ip, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x11c>
 800041e:	429a      	cmp	r2, r3
 8000420:	f200 80e0 	bhi.w	80005e4 <__udivmoddi4+0x2dc>
 8000424:	46c4      	mov	ip, r8
 8000426:	1a9b      	subs	r3, r3, r2
 8000428:	fbb3 f2fe 	udiv	r2, r3, lr
 800042c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000430:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000434:	fb02 f404 	mul.w	r4, r2, r4
 8000438:	429c      	cmp	r4, r3
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x144>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x142>
 8000444:	429c      	cmp	r4, r3
 8000446:	f200 80ca 	bhi.w	80005de <__udivmoddi4+0x2d6>
 800044a:	4602      	mov	r2, r0
 800044c:	1b1b      	subs	r3, r3, r4
 800044e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000452:	e7a5      	b.n	80003a0 <__udivmoddi4+0x98>
 8000454:	f1c1 0620 	rsb	r6, r1, #32
 8000458:	408b      	lsls	r3, r1
 800045a:	fa22 f706 	lsr.w	r7, r2, r6
 800045e:	431f      	orrs	r7, r3
 8000460:	fa0e f401 	lsl.w	r4, lr, r1
 8000464:	fa20 f306 	lsr.w	r3, r0, r6
 8000468:	fa2e fe06 	lsr.w	lr, lr, r6
 800046c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000470:	4323      	orrs	r3, r4
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	fa1f fc87 	uxth.w	ip, r7
 800047a:	fbbe f0f9 	udiv	r0, lr, r9
 800047e:	0c1c      	lsrs	r4, r3, #16
 8000480:	fb09 ee10 	mls	lr, r9, r0, lr
 8000484:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000488:	fb00 fe0c 	mul.w	lr, r0, ip
 800048c:	45a6      	cmp	lr, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	d909      	bls.n	80004a8 <__udivmoddi4+0x1a0>
 8000494:	193c      	adds	r4, r7, r4
 8000496:	f100 3aff 	add.w	sl, r0, #4294967295
 800049a:	f080 809c 	bcs.w	80005d6 <__udivmoddi4+0x2ce>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f240 8099 	bls.w	80005d6 <__udivmoddi4+0x2ce>
 80004a4:	3802      	subs	r0, #2
 80004a6:	443c      	add	r4, r7
 80004a8:	eba4 040e 	sub.w	r4, r4, lr
 80004ac:	fa1f fe83 	uxth.w	lr, r3
 80004b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b4:	fb09 4413 	mls	r4, r9, r3, r4
 80004b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c0:	45a4      	cmp	ip, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x1ce>
 80004c4:	193c      	adds	r4, r7, r4
 80004c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80004ca:	f080 8082 	bcs.w	80005d2 <__udivmoddi4+0x2ca>
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d97f      	bls.n	80005d2 <__udivmoddi4+0x2ca>
 80004d2:	3b02      	subs	r3, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	fba0 ec02 	umull	lr, ip, r0, r2
 80004e2:	4564      	cmp	r4, ip
 80004e4:	4673      	mov	r3, lr
 80004e6:	46e1      	mov	r9, ip
 80004e8:	d362      	bcc.n	80005b0 <__udivmoddi4+0x2a8>
 80004ea:	d05f      	beq.n	80005ac <__udivmoddi4+0x2a4>
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x1fe>
 80004ee:	ebb8 0203 	subs.w	r2, r8, r3
 80004f2:	eb64 0409 	sbc.w	r4, r4, r9
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	431e      	orrs	r6, r3
 8000500:	40cc      	lsrs	r4, r1
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e74f      	b.n	80003aa <__udivmoddi4+0xa2>
 800050a:	fbb1 fcf2 	udiv	ip, r1, r2
 800050e:	0c01      	lsrs	r1, r0, #16
 8000510:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000514:	b280      	uxth	r0, r0
 8000516:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800051a:	463b      	mov	r3, r7
 800051c:	4638      	mov	r0, r7
 800051e:	463c      	mov	r4, r7
 8000520:	46b8      	mov	r8, r7
 8000522:	46be      	mov	lr, r7
 8000524:	2620      	movs	r6, #32
 8000526:	fbb1 f1f7 	udiv	r1, r1, r7
 800052a:	eba2 0208 	sub.w	r2, r2, r8
 800052e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000532:	e766      	b.n	8000402 <__udivmoddi4+0xfa>
 8000534:	4601      	mov	r1, r0
 8000536:	e718      	b.n	800036a <__udivmoddi4+0x62>
 8000538:	4610      	mov	r0, r2
 800053a:	e72c      	b.n	8000396 <__udivmoddi4+0x8e>
 800053c:	f1c6 0220 	rsb	r2, r6, #32
 8000540:	fa2e f302 	lsr.w	r3, lr, r2
 8000544:	40b7      	lsls	r7, r6
 8000546:	40b1      	lsls	r1, r6
 8000548:	fa20 f202 	lsr.w	r2, r0, r2
 800054c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000550:	430a      	orrs	r2, r1
 8000552:	fbb3 f8fe 	udiv	r8, r3, lr
 8000556:	b2bc      	uxth	r4, r7
 8000558:	fb0e 3318 	mls	r3, lr, r8, r3
 800055c:	0c11      	lsrs	r1, r2, #16
 800055e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000562:	fb08 f904 	mul.w	r9, r8, r4
 8000566:	40b0      	lsls	r0, r6
 8000568:	4589      	cmp	r9, r1
 800056a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800056e:	b280      	uxth	r0, r0
 8000570:	d93e      	bls.n	80005f0 <__udivmoddi4+0x2e8>
 8000572:	1879      	adds	r1, r7, r1
 8000574:	f108 3cff 	add.w	ip, r8, #4294967295
 8000578:	d201      	bcs.n	800057e <__udivmoddi4+0x276>
 800057a:	4589      	cmp	r9, r1
 800057c:	d81f      	bhi.n	80005be <__udivmoddi4+0x2b6>
 800057e:	eba1 0109 	sub.w	r1, r1, r9
 8000582:	fbb1 f9fe 	udiv	r9, r1, lr
 8000586:	fb09 f804 	mul.w	r8, r9, r4
 800058a:	fb0e 1119 	mls	r1, lr, r9, r1
 800058e:	b292      	uxth	r2, r2
 8000590:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000594:	4542      	cmp	r2, r8
 8000596:	d229      	bcs.n	80005ec <__udivmoddi4+0x2e4>
 8000598:	18ba      	adds	r2, r7, r2
 800059a:	f109 31ff 	add.w	r1, r9, #4294967295
 800059e:	d2c4      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a0:	4542      	cmp	r2, r8
 80005a2:	d2c2      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a4:	f1a9 0102 	sub.w	r1, r9, #2
 80005a8:	443a      	add	r2, r7
 80005aa:	e7be      	b.n	800052a <__udivmoddi4+0x222>
 80005ac:	45f0      	cmp	r8, lr
 80005ae:	d29d      	bcs.n	80004ec <__udivmoddi4+0x1e4>
 80005b0:	ebbe 0302 	subs.w	r3, lr, r2
 80005b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005b8:	3801      	subs	r0, #1
 80005ba:	46e1      	mov	r9, ip
 80005bc:	e796      	b.n	80004ec <__udivmoddi4+0x1e4>
 80005be:	eba7 0909 	sub.w	r9, r7, r9
 80005c2:	4449      	add	r1, r9
 80005c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80005c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80005cc:	fb09 f804 	mul.w	r8, r9, r4
 80005d0:	e7db      	b.n	800058a <__udivmoddi4+0x282>
 80005d2:	4673      	mov	r3, lr
 80005d4:	e77f      	b.n	80004d6 <__udivmoddi4+0x1ce>
 80005d6:	4650      	mov	r0, sl
 80005d8:	e766      	b.n	80004a8 <__udivmoddi4+0x1a0>
 80005da:	4608      	mov	r0, r1
 80005dc:	e6fd      	b.n	80003da <__udivmoddi4+0xd2>
 80005de:	443b      	add	r3, r7
 80005e0:	3a02      	subs	r2, #2
 80005e2:	e733      	b.n	800044c <__udivmoddi4+0x144>
 80005e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e8:	443b      	add	r3, r7
 80005ea:	e71c      	b.n	8000426 <__udivmoddi4+0x11e>
 80005ec:	4649      	mov	r1, r9
 80005ee:	e79c      	b.n	800052a <__udivmoddi4+0x222>
 80005f0:	eba1 0109 	sub.w	r1, r1, r9
 80005f4:	46c4      	mov	ip, r8
 80005f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80005fa:	fb09 f804 	mul.w	r8, r9, r4
 80005fe:	e7c4      	b.n	800058a <__udivmoddi4+0x282>

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <MX_BEEP_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_BEEP_GPIO_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b086      	sub	sp, #24
 8000608:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
 8000616:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000618:	4b12      	ldr	r3, [pc, #72]	@ (8000664 <MX_BEEP_GPIO_Init+0x60>)
 800061a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800061e:	4a11      	ldr	r2, [pc, #68]	@ (8000664 <MX_BEEP_GPIO_Init+0x60>)
 8000620:	f043 0310 	orr.w	r3, r3, #16
 8000624:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000628:	4b0e      	ldr	r3, [pc, #56]	@ (8000664 <MX_BEEP_GPIO_Init+0x60>)
 800062a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800062e:	f003 0310 	and.w	r3, r3, #16
 8000632:	603b      	str	r3, [r7, #0]
 8000634:	683b      	ldr	r3, [r7, #0]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BEEP_GPIO_Port, BEEP_Pin, GPIO_PIN_RESET);
 8000636:	2200      	movs	r2, #0
 8000638:	2110      	movs	r1, #16
 800063a:	480b      	ldr	r0, [pc, #44]	@ (8000668 <MX_BEEP_GPIO_Init+0x64>)
 800063c:	f001 fee4 	bl	8002408 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BEEP_Pin */
  GPIO_InitStruct.Pin = BEEP_Pin;
 8000640:	2310      	movs	r3, #16
 8000642:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000644:	2301      	movs	r3, #1
 8000646:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000648:	2300      	movs	r3, #0
 800064a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064c:	2300      	movs	r3, #0
 800064e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000650:	1d3b      	adds	r3, r7, #4
 8000652:	4619      	mov	r1, r3
 8000654:	4804      	ldr	r0, [pc, #16]	@ (8000668 <MX_BEEP_GPIO_Init+0x64>)
 8000656:	f001 fd27 	bl	80020a8 <HAL_GPIO_Init>
}
 800065a:	bf00      	nop
 800065c:	3718      	adds	r7, #24
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	58024400 	.word	0x58024400
 8000668:	58021000 	.word	0x58021000

0800066c <MX_KEY_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_KEY_GPIO_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b086      	sub	sp, #24
 8000670:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000672:	1d3b      	adds	r3, r7, #4
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000680:	4b14      	ldr	r3, [pc, #80]	@ (80006d4 <MX_KEY_GPIO_Init+0x68>)
 8000682:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000686:	4a13      	ldr	r2, [pc, #76]	@ (80006d4 <MX_KEY_GPIO_Init+0x68>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000690:	4b10      	ldr	r3, [pc, #64]	@ (80006d4 <MX_KEY_GPIO_Init+0x68>)
 8000692:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	603b      	str	r3, [r7, #0]
 800069c:	683b      	ldr	r3, [r7, #0]
  /*Configure GPIO pin : WK_UP_Pin */
  GPIO_InitStruct.Pin = WK_UP_Pin;
 800069e:	2301      	movs	r3, #1
 80006a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006a2:	2300      	movs	r3, #0
 80006a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006a6:	2302      	movs	r3, #2
 80006a8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(WK_UP_GPIO_Port, &GPIO_InitStruct);
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	4619      	mov	r1, r3
 80006ae:	480a      	ldr	r0, [pc, #40]	@ (80006d8 <MX_KEY_GPIO_Init+0x6c>)
 80006b0:	f001 fcfa 	bl	80020a8 <HAL_GPIO_Init>
  /*Configure GPIO pins : KEY0_Pin KEY1_Pin */
  GPIO_InitStruct.Pin = KEY0_Pin|KEY1_Pin;
 80006b4:	f248 0302 	movw	r3, #32770	@ 0x8002
 80006b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ba:	2300      	movs	r3, #0
 80006bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006be:	2301      	movs	r3, #1
 80006c0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	4619      	mov	r1, r3
 80006c6:	4804      	ldr	r0, [pc, #16]	@ (80006d8 <MX_KEY_GPIO_Init+0x6c>)
 80006c8:	f001 fcee 	bl	80020a8 <HAL_GPIO_Init>
}
 80006cc:	bf00      	nop
 80006ce:	3718      	adds	r7, #24
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	58024400 	.word	0x58024400
 80006d8:	58020000 	.word	0x58020000

080006dc <MX_LED_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_LED_GPIO_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b088      	sub	sp, #32
 80006e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e2:	f107 030c 	add.w	r3, r7, #12
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
 80006f0:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006f2:	4b24      	ldr	r3, [pc, #144]	@ (8000784 <MX_LED_GPIO_Init+0xa8>)
 80006f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006f8:	4a22      	ldr	r2, [pc, #136]	@ (8000784 <MX_LED_GPIO_Init+0xa8>)
 80006fa:	f043 0310 	orr.w	r3, r3, #16
 80006fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000702:	4b20      	ldr	r3, [pc, #128]	@ (8000784 <MX_LED_GPIO_Init+0xa8>)
 8000704:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000708:	f003 0310 	and.w	r3, r3, #16
 800070c:	60bb      	str	r3, [r7, #8]
 800070e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000710:	4b1c      	ldr	r3, [pc, #112]	@ (8000784 <MX_LED_GPIO_Init+0xa8>)
 8000712:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000716:	4a1b      	ldr	r2, [pc, #108]	@ (8000784 <MX_LED_GPIO_Init+0xa8>)
 8000718:	f043 0302 	orr.w	r3, r3, #2
 800071c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000720:	4b18      	ldr	r3, [pc, #96]	@ (8000784 <MX_LED_GPIO_Init+0xa8>)
 8000722:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000726:	f003 0302 	and.w	r3, r3, #2
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_Pin|LED2_Pin, GPIO_PIN_SET);
 800072e:	2201      	movs	r2, #1
 8000730:	2160      	movs	r1, #96	@ 0x60
 8000732:	4815      	ldr	r0, [pc, #84]	@ (8000788 <MX_LED_GPIO_Init+0xac>)
 8000734:	f001 fe68 	bl	8002408 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 8000738:	2201      	movs	r2, #1
 800073a:	2110      	movs	r1, #16
 800073c:	4813      	ldr	r0, [pc, #76]	@ (800078c <MX_LED_GPIO_Init+0xb0>)
 800073e:	f001 fe63 	bl	8002408 <HAL_GPIO_WritePin>
  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000742:	2360      	movs	r3, #96	@ 0x60
 8000744:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000746:	2301      	movs	r3, #1
 8000748:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074e:	2300      	movs	r3, #0
 8000750:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000752:	f107 030c 	add.w	r3, r7, #12
 8000756:	4619      	mov	r1, r3
 8000758:	480b      	ldr	r0, [pc, #44]	@ (8000788 <MX_LED_GPIO_Init+0xac>)
 800075a:	f001 fca5 	bl	80020a8 <HAL_GPIO_Init>
  /*Configure GPIO pin : LED0_Pin */
  GPIO_InitStruct.Pin = LED0_Pin;
 800075e:	2310      	movs	r3, #16
 8000760:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000762:	2301      	movs	r3, #1
 8000764:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076a:	2300      	movs	r3, #0
 800076c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 800076e:	f107 030c 	add.w	r3, r7, #12
 8000772:	4619      	mov	r1, r3
 8000774:	4805      	ldr	r0, [pc, #20]	@ (800078c <MX_LED_GPIO_Init+0xb0>)
 8000776:	f001 fc97 	bl	80020a8 <HAL_GPIO_Init>
}
 800077a:	bf00      	nop
 800077c:	3720      	adds	r7, #32
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	58024400 	.word	0x58024400
 8000788:	58021000 	.word	0x58021000
 800078c:	58020400 	.word	0x58020400

08000790 <bsp_init>:
#include "bsp_init.h"

void bsp_init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
	MX_LED_GPIO_Init();
 8000794:	f7ff ffa2 	bl	80006dc <MX_LED_GPIO_Init>
	MX_BEEP_GPIO_Init();
 8000798:	f7ff ff34 	bl	8000604 <MX_BEEP_GPIO_Init>
	MX_KEY_GPIO_Init();
 800079c:	f7ff ff66 	bl	800066c <MX_KEY_GPIO_Init>
	// MX_EXTI_GPIO_Init();
	MX_USART1_UART_Init();
 80007a0:	f000 fbd8 	bl	8000f54 <MX_USART1_UART_Init>
	// MX_IWDG1_Init(); // 溢出时间约1s
	// MX_TIM6_Init(); // 溢出时间约500ms
}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80007ac:	f000 f896 	bl	80008dc <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b0:	f000 fccc 	bl	800114c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b4:	f000 f816 	bl	80007e4 <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  bsp_init();
 80007b8:	f7ff ffea 	bl	8000790 <bsp_init>
  printf("ATIM BKIN Test\r\n");
 80007bc:	4807      	ldr	r0, [pc, #28]	@ (80007dc <main+0x34>)
 80007be:	f007 fe89 	bl	80084d4 <puts>
  MX_TIM1_Init();
 80007c2:	f000 fa7f 	bl	8000cc4 <MX_TIM1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_GPIO_TogglePin(LED_RED_Port, LED_RED_Pin);
 80007c6:	2140      	movs	r1, #64	@ 0x40
 80007c8:	4805      	ldr	r0, [pc, #20]	@ (80007e0 <main+0x38>)
 80007ca:	f001 fe36 	bl	800243a <HAL_GPIO_TogglePin>
    HAL_Delay(1000);
 80007ce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007d2:	f000 fd4d 	bl	8001270 <HAL_Delay>
	HAL_GPIO_TogglePin(LED_RED_Port, LED_RED_Pin);
 80007d6:	bf00      	nop
 80007d8:	e7f5      	b.n	80007c6 <main+0x1e>
 80007da:	bf00      	nop
 80007dc:	08008c14 	.word	0x08008c14
 80007e0:	58021000 	.word	0x58021000

080007e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b09c      	sub	sp, #112	@ 0x70
 80007e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007ee:	224c      	movs	r2, #76	@ 0x4c
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f007 ff4e 	bl	8008694 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f8:	1d3b      	adds	r3, r7, #4
 80007fa:	2220      	movs	r2, #32
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f007 ff48 	bl	8008694 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000804:	2002      	movs	r0, #2
 8000806:	f001 fe57 	bl	80024b8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800080a:	2300      	movs	r3, #0
 800080c:	603b      	str	r3, [r7, #0]
 800080e:	4b31      	ldr	r3, [pc, #196]	@ (80008d4 <SystemClock_Config+0xf0>)
 8000810:	699b      	ldr	r3, [r3, #24]
 8000812:	4a30      	ldr	r2, [pc, #192]	@ (80008d4 <SystemClock_Config+0xf0>)
 8000814:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000818:	6193      	str	r3, [r2, #24]
 800081a:	4b2e      	ldr	r3, [pc, #184]	@ (80008d4 <SystemClock_Config+0xf0>)
 800081c:	699b      	ldr	r3, [r3, #24]
 800081e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000822:	603b      	str	r3, [r7, #0]
 8000824:	4b2c      	ldr	r3, [pc, #176]	@ (80008d8 <SystemClock_Config+0xf4>)
 8000826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000828:	4a2b      	ldr	r2, [pc, #172]	@ (80008d8 <SystemClock_Config+0xf4>)
 800082a:	f043 0301 	orr.w	r3, r3, #1
 800082e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000830:	4b29      	ldr	r3, [pc, #164]	@ (80008d8 <SystemClock_Config+0xf4>)
 8000832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000834:	f003 0301 	and.w	r3, r3, #1
 8000838:	603b      	str	r3, [r7, #0]
 800083a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800083c:	bf00      	nop
 800083e:	4b25      	ldr	r3, [pc, #148]	@ (80008d4 <SystemClock_Config+0xf0>)
 8000840:	699b      	ldr	r3, [r3, #24]
 8000842:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000846:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800084a:	d1f8      	bne.n	800083e <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800084c:	2309      	movs	r3, #9
 800084e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000850:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000854:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000856:	2301      	movs	r3, #1
 8000858:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800085a:	2302      	movs	r3, #2
 800085c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800085e:	2302      	movs	r3, #2
 8000860:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000862:	2302      	movs	r3, #2
 8000864:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 8000866:	23f0      	movs	r3, #240	@ 0xf0
 8000868:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800086a:	2302      	movs	r3, #2
 800086c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800086e:	2302      	movs	r3, #2
 8000870:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000872:	2302      	movs	r3, #2
 8000874:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000876:	2308      	movs	r3, #8
 8000878:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800087a:	2300      	movs	r3, #0
 800087c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800087e:	2300      	movs	r3, #0
 8000880:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000882:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000886:	4618      	mov	r0, r3
 8000888:	f001 fe50 	bl	800252c <HAL_RCC_OscConfig>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000892:	f000 f84f 	bl	8000934 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000896:	233f      	movs	r3, #63	@ 0x3f
 8000898:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800089a:	2303      	movs	r3, #3
 800089c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800089e:	2300      	movs	r3, #0
 80008a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80008a2:	2308      	movs	r3, #8
 80008a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008a6:	2340      	movs	r3, #64	@ 0x40
 80008a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008aa:	2340      	movs	r3, #64	@ 0x40
 80008ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008b2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008b4:	2340      	movs	r3, #64	@ 0x40
 80008b6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008b8:	1d3b      	adds	r3, r7, #4
 80008ba:	2104      	movs	r1, #4
 80008bc:	4618      	mov	r0, r3
 80008be:	f002 fa8f 	bl	8002de0 <HAL_RCC_ClockConfig>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80008c8:	f000 f834 	bl	8000934 <Error_Handler>
  }
}
 80008cc:	bf00      	nop
 80008ce:	3770      	adds	r7, #112	@ 0x70
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	58024800 	.word	0x58024800
 80008d8:	58000400 	.word	0x58000400

080008dc <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80008e2:	463b      	mov	r3, r7
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
 80008ec:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80008ee:	f000 fdff 	bl	80014f0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80008f2:	2301      	movs	r3, #1
 80008f4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80008f6:	2300      	movs	r3, #0
 80008f8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80008fa:	2300      	movs	r3, #0
 80008fc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80008fe:	231f      	movs	r3, #31
 8000900:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000902:	2387      	movs	r3, #135	@ 0x87
 8000904:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000906:	2300      	movs	r3, #0
 8000908:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800090a:	2300      	movs	r3, #0
 800090c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800090e:	2301      	movs	r3, #1
 8000910:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000912:	2301      	movs	r3, #1
 8000914:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000916:	2300      	movs	r3, #0
 8000918:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800091a:	2300      	movs	r3, #0
 800091c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800091e:	463b      	mov	r3, r7
 8000920:	4618      	mov	r0, r3
 8000922:	f000 fe1d 	bl	8001560 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000926:	2004      	movs	r0, #4
 8000928:	f000 fdfa 	bl	8001520 <HAL_MPU_Enable>

}
 800092c:	bf00      	nop
 800092e:	3710      	adds	r7, #16
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}

08000934 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000938:	b672      	cpsid	i
}
 800093a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800093c:	bf00      	nop
 800093e:	e7fd      	b.n	800093c <Error_Handler+0x8>

08000940 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000946:	4b0a      	ldr	r3, [pc, #40]	@ (8000970 <HAL_MspInit+0x30>)
 8000948:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800094c:	4a08      	ldr	r2, [pc, #32]	@ (8000970 <HAL_MspInit+0x30>)
 800094e:	f043 0302 	orr.w	r3, r3, #2
 8000952:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000956:	4b06      	ldr	r3, [pc, #24]	@ (8000970 <HAL_MspInit+0x30>)
 8000958:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800095c:	f003 0302 	and.w	r3, r3, #2
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000964:	bf00      	nop
 8000966:	370c      	adds	r7, #12
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr
 8000970:	58024400 	.word	0x58024400

08000974 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000978:	bf00      	nop
 800097a:	e7fd      	b.n	8000978 <NMI_Handler+0x4>

0800097c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000980:	bf00      	nop
 8000982:	e7fd      	b.n	8000980 <HardFault_Handler+0x4>

08000984 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000988:	bf00      	nop
 800098a:	e7fd      	b.n	8000988 <MemManage_Handler+0x4>

0800098c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000990:	bf00      	nop
 8000992:	e7fd      	b.n	8000990 <BusFault_Handler+0x4>

08000994 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000998:	bf00      	nop
 800099a:	e7fd      	b.n	8000998 <UsageFault_Handler+0x4>

0800099c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr

080009aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr

080009c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ca:	f000 fc31 	bl	8001230 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
	...

080009d4 <WWDG_IRQHandler>:

/**
  * @brief This function handles Window watchdog interrupt.
  */
void WWDG_IRQHandler(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN WWDG_IRQn 0 */

  /* USER CODE END WWDG_IRQn 0 */
  HAL_WWDG_IRQHandler(&hwwdg1);
 80009d8:	4802      	ldr	r0, [pc, #8]	@ (80009e4 <WWDG_IRQHandler+0x10>)
 80009da:	f007 fc39 	bl	8008250 <HAL_WWDG_IRQHandler>
  /* USER CODE BEGIN WWDG_IRQn 1 */
  /* USER CODE END WWDG_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	240001dc 	.word	0x240001dc

080009e8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI_KEY1_Pin);
 80009ec:	2002      	movs	r0, #2
 80009ee:	f001 fd3e 	bl	800246e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
	...

080009f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80009fc:	4802      	ldr	r0, [pc, #8]	@ (8000a08 <USART1_IRQHandler+0x10>)
 80009fe:	f005 ff4b 	bl	8006898 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	24000148 	.word	0x24000148

08000a0c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b086      	sub	sp, #24
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	60b9      	str	r1, [r7, #8]
 8000a16:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a18:	2300      	movs	r3, #0
 8000a1a:	617b      	str	r3, [r7, #20]
 8000a1c:	e00a      	b.n	8000a34 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a1e:	f3af 8000 	nop.w
 8000a22:	4601      	mov	r1, r0
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	1c5a      	adds	r2, r3, #1
 8000a28:	60ba      	str	r2, [r7, #8]
 8000a2a:	b2ca      	uxtb	r2, r1
 8000a2c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a2e:	697b      	ldr	r3, [r7, #20]
 8000a30:	3301      	adds	r3, #1
 8000a32:	617b      	str	r3, [r7, #20]
 8000a34:	697a      	ldr	r2, [r7, #20]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	dbf0      	blt.n	8000a1e <_read+0x12>
  }

  return len;
 8000a3c:	687b      	ldr	r3, [r7, #4]
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3718      	adds	r7, #24
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a46:	b580      	push	{r7, lr}
 8000a48:	b086      	sub	sp, #24
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	60f8      	str	r0, [r7, #12]
 8000a4e:	60b9      	str	r1, [r7, #8]
 8000a50:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a52:	2300      	movs	r3, #0
 8000a54:	617b      	str	r3, [r7, #20]
 8000a56:	e009      	b.n	8000a6c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	1c5a      	adds	r2, r3, #1
 8000a5c:	60ba      	str	r2, [r7, #8]
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	4618      	mov	r0, r3
 8000a62:	f000 fb35 	bl	80010d0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	617b      	str	r3, [r7, #20]
 8000a6c:	697a      	ldr	r2, [r7, #20]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	dbf1      	blt.n	8000a58 <_write+0x12>
  }
  return len;
 8000a74:	687b      	ldr	r3, [r7, #4]
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3718      	adds	r7, #24
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}

08000a7e <_close>:

int _close(int file)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	b083      	sub	sp, #12
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	370c      	adds	r7, #12
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr

08000a96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a96:	b480      	push	{r7}
 8000a98:	b083      	sub	sp, #12
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	6078      	str	r0, [r7, #4]
 8000a9e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000aa6:	605a      	str	r2, [r3, #4]
  return 0;
 8000aa8:	2300      	movs	r3, #0
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr

08000ab6 <_isatty>:

int _isatty(int file)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	b083      	sub	sp, #12
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000abe:	2301      	movs	r3, #1
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	370c      	adds	r7, #12
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	60f8      	str	r0, [r7, #12]
 8000ad4:	60b9      	str	r1, [r7, #8]
 8000ad6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ad8:	2300      	movs	r3, #0
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3714      	adds	r7, #20
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
	...

08000ae8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b086      	sub	sp, #24
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000af0:	4a14      	ldr	r2, [pc, #80]	@ (8000b44 <_sbrk+0x5c>)
 8000af2:	4b15      	ldr	r3, [pc, #84]	@ (8000b48 <_sbrk+0x60>)
 8000af4:	1ad3      	subs	r3, r2, r3
 8000af6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000afc:	4b13      	ldr	r3, [pc, #76]	@ (8000b4c <_sbrk+0x64>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d102      	bne.n	8000b0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b04:	4b11      	ldr	r3, [pc, #68]	@ (8000b4c <_sbrk+0x64>)
 8000b06:	4a12      	ldr	r2, [pc, #72]	@ (8000b50 <_sbrk+0x68>)
 8000b08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b0a:	4b10      	ldr	r3, [pc, #64]	@ (8000b4c <_sbrk+0x64>)
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4413      	add	r3, r2
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d207      	bcs.n	8000b28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b18:	f007 fe0a 	bl	8008730 <__errno>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	220c      	movs	r2, #12
 8000b20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b22:	f04f 33ff 	mov.w	r3, #4294967295
 8000b26:	e009      	b.n	8000b3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b28:	4b08      	ldr	r3, [pc, #32]	@ (8000b4c <_sbrk+0x64>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b2e:	4b07      	ldr	r3, [pc, #28]	@ (8000b4c <_sbrk+0x64>)
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4413      	add	r3, r2
 8000b36:	4a05      	ldr	r2, [pc, #20]	@ (8000b4c <_sbrk+0x64>)
 8000b38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b3a:	68fb      	ldr	r3, [r7, #12]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3718      	adds	r7, #24
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	24080000 	.word	0x24080000
 8000b48:	00000400 	.word	0x00000400
 8000b4c:	24000088 	.word	0x24000088
 8000b50:	24000340 	.word	0x24000340

08000b54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b58:	4b43      	ldr	r3, [pc, #268]	@ (8000c68 <SystemInit+0x114>)
 8000b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b5e:	4a42      	ldr	r2, [pc, #264]	@ (8000c68 <SystemInit+0x114>)
 8000b60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b68:	4b40      	ldr	r3, [pc, #256]	@ (8000c6c <SystemInit+0x118>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f003 030f 	and.w	r3, r3, #15
 8000b70:	2b06      	cmp	r3, #6
 8000b72:	d807      	bhi.n	8000b84 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b74:	4b3d      	ldr	r3, [pc, #244]	@ (8000c6c <SystemInit+0x118>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f023 030f 	bic.w	r3, r3, #15
 8000b7c:	4a3b      	ldr	r2, [pc, #236]	@ (8000c6c <SystemInit+0x118>)
 8000b7e:	f043 0307 	orr.w	r3, r3, #7
 8000b82:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000b84:	4b3a      	ldr	r3, [pc, #232]	@ (8000c70 <SystemInit+0x11c>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a39      	ldr	r2, [pc, #228]	@ (8000c70 <SystemInit+0x11c>)
 8000b8a:	f043 0301 	orr.w	r3, r3, #1
 8000b8e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b90:	4b37      	ldr	r3, [pc, #220]	@ (8000c70 <SystemInit+0x11c>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000b96:	4b36      	ldr	r3, [pc, #216]	@ (8000c70 <SystemInit+0x11c>)
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	4935      	ldr	r1, [pc, #212]	@ (8000c70 <SystemInit+0x11c>)
 8000b9c:	4b35      	ldr	r3, [pc, #212]	@ (8000c74 <SystemInit+0x120>)
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ba2:	4b32      	ldr	r3, [pc, #200]	@ (8000c6c <SystemInit+0x118>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f003 0308 	and.w	r3, r3, #8
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d007      	beq.n	8000bbe <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bae:	4b2f      	ldr	r3, [pc, #188]	@ (8000c6c <SystemInit+0x118>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f023 030f 	bic.w	r3, r3, #15
 8000bb6:	4a2d      	ldr	r2, [pc, #180]	@ (8000c6c <SystemInit+0x118>)
 8000bb8:	f043 0307 	orr.w	r3, r3, #7
 8000bbc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000bbe:	4b2c      	ldr	r3, [pc, #176]	@ (8000c70 <SystemInit+0x11c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000bc4:	4b2a      	ldr	r3, [pc, #168]	@ (8000c70 <SystemInit+0x11c>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000bca:	4b29      	ldr	r3, [pc, #164]	@ (8000c70 <SystemInit+0x11c>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000bd0:	4b27      	ldr	r3, [pc, #156]	@ (8000c70 <SystemInit+0x11c>)
 8000bd2:	4a29      	ldr	r2, [pc, #164]	@ (8000c78 <SystemInit+0x124>)
 8000bd4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000bd6:	4b26      	ldr	r3, [pc, #152]	@ (8000c70 <SystemInit+0x11c>)
 8000bd8:	4a28      	ldr	r2, [pc, #160]	@ (8000c7c <SystemInit+0x128>)
 8000bda:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000bdc:	4b24      	ldr	r3, [pc, #144]	@ (8000c70 <SystemInit+0x11c>)
 8000bde:	4a28      	ldr	r2, [pc, #160]	@ (8000c80 <SystemInit+0x12c>)
 8000be0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000be2:	4b23      	ldr	r3, [pc, #140]	@ (8000c70 <SystemInit+0x11c>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000be8:	4b21      	ldr	r3, [pc, #132]	@ (8000c70 <SystemInit+0x11c>)
 8000bea:	4a25      	ldr	r2, [pc, #148]	@ (8000c80 <SystemInit+0x12c>)
 8000bec:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000bee:	4b20      	ldr	r3, [pc, #128]	@ (8000c70 <SystemInit+0x11c>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000bf4:	4b1e      	ldr	r3, [pc, #120]	@ (8000c70 <SystemInit+0x11c>)
 8000bf6:	4a22      	ldr	r2, [pc, #136]	@ (8000c80 <SystemInit+0x12c>)
 8000bf8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000bfa:	4b1d      	ldr	r3, [pc, #116]	@ (8000c70 <SystemInit+0x11c>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c00:	4b1b      	ldr	r3, [pc, #108]	@ (8000c70 <SystemInit+0x11c>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a1a      	ldr	r2, [pc, #104]	@ (8000c70 <SystemInit+0x11c>)
 8000c06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c0a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c0c:	4b18      	ldr	r3, [pc, #96]	@ (8000c70 <SystemInit+0x11c>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000c12:	4b1c      	ldr	r3, [pc, #112]	@ (8000c84 <SystemInit+0x130>)
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	4b1c      	ldr	r3, [pc, #112]	@ (8000c88 <SystemInit+0x134>)
 8000c18:	4013      	ands	r3, r2
 8000c1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000c1e:	d202      	bcs.n	8000c26 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000c20:	4b1a      	ldr	r3, [pc, #104]	@ (8000c8c <SystemInit+0x138>)
 8000c22:	2201      	movs	r2, #1
 8000c24:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000c26:	4b12      	ldr	r3, [pc, #72]	@ (8000c70 <SystemInit+0x11c>)
 8000c28:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000c2c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d113      	bne.n	8000c5c <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000c34:	4b0e      	ldr	r3, [pc, #56]	@ (8000c70 <SystemInit+0x11c>)
 8000c36:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000c3a:	4a0d      	ldr	r2, [pc, #52]	@ (8000c70 <SystemInit+0x11c>)
 8000c3c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c40:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000c44:	4b12      	ldr	r3, [pc, #72]	@ (8000c90 <SystemInit+0x13c>)
 8000c46:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000c4a:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000c4c:	4b08      	ldr	r3, [pc, #32]	@ (8000c70 <SystemInit+0x11c>)
 8000c4e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000c52:	4a07      	ldr	r2, [pc, #28]	@ (8000c70 <SystemInit+0x11c>)
 8000c54:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000c58:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	e000ed00 	.word	0xe000ed00
 8000c6c:	52002000 	.word	0x52002000
 8000c70:	58024400 	.word	0x58024400
 8000c74:	eaf6ed7f 	.word	0xeaf6ed7f
 8000c78:	02020200 	.word	0x02020200
 8000c7c:	01ff0000 	.word	0x01ff0000
 8000c80:	01010280 	.word	0x01010280
 8000c84:	5c001000 	.word	0x5c001000
 8000c88:	ffff0000 	.word	0xffff0000
 8000c8c:	51008108 	.word	0x51008108
 8000c90:	52004000 	.word	0x52004000

08000c94 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000c98:	4b09      	ldr	r3, [pc, #36]	@ (8000cc0 <ExitRun0Mode+0x2c>)
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	4a08      	ldr	r2, [pc, #32]	@ (8000cc0 <ExitRun0Mode+0x2c>)
 8000c9e:	f043 0302 	orr.w	r3, r3, #2
 8000ca2:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000ca4:	bf00      	nop
 8000ca6:	4b06      	ldr	r3, [pc, #24]	@ (8000cc0 <ExitRun0Mode+0x2c>)
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d0f9      	beq.n	8000ca6 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000cb2:	bf00      	nop
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	58024800 	.word	0x58024800

08000cc4 <MX_TIM1_Init>:
TIM_OC_InitTypeDef sConfigOC = {0};
TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM1_Init 0 */

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000cc8:	4b58      	ldr	r3, [pc, #352]	@ (8000e2c <MX_TIM1_Init+0x168>)
 8000cca:	4a59      	ldr	r2, [pc, #356]	@ (8000e30 <MX_TIM1_Init+0x16c>)
 8000ccc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 479;
 8000cce:	4b57      	ldr	r3, [pc, #348]	@ (8000e2c <MX_TIM1_Init+0x168>)
 8000cd0:	f240 12df 	movw	r2, #479	@ 0x1df
 8000cd4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd6:	4b55      	ldr	r3, [pc, #340]	@ (8000e2c <MX_TIM1_Init+0x168>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8000cdc:	4b53      	ldr	r3, [pc, #332]	@ (8000e2c <MX_TIM1_Init+0x168>)
 8000cde:	2263      	movs	r2, #99	@ 0x63
 8000ce0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ce2:	4b52      	ldr	r3, [pc, #328]	@ (8000e2c <MX_TIM1_Init+0x168>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ce8:	4b50      	ldr	r3, [pc, #320]	@ (8000e2c <MX_TIM1_Init+0x168>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000cee:	4b4f      	ldr	r3, [pc, #316]	@ (8000e2c <MX_TIM1_Init+0x168>)
 8000cf0:	2280      	movs	r2, #128	@ 0x80
 8000cf2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000cf4:	484d      	ldr	r0, [pc, #308]	@ (8000e2c <MX_TIM1_Init+0x168>)
 8000cf6:	f004 fa2b 	bl	8005150 <HAL_TIM_Base_Init>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_TIM1_Init+0x40>
  {
    Error_Handler();
 8000d00:	f7ff fe18 	bl	8000934 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d04:	4b4b      	ldr	r3, [pc, #300]	@ (8000e34 <MX_TIM1_Init+0x170>)
 8000d06:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000d0a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d0c:	4949      	ldr	r1, [pc, #292]	@ (8000e34 <MX_TIM1_Init+0x170>)
 8000d0e:	4847      	ldr	r0, [pc, #284]	@ (8000e2c <MX_TIM1_Init+0x168>)
 8000d10:	f004 fcf8 	bl	8005704 <HAL_TIM_ConfigClockSource>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000d1a:	f7ff fe0b 	bl	8000934 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d1e:	4843      	ldr	r0, [pc, #268]	@ (8000e2c <MX_TIM1_Init+0x168>)
 8000d20:	f004 fa6d 	bl	80051fe <HAL_TIM_PWM_Init>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8000d2a:	f7ff fe03 	bl	8000934 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d2e:	4b42      	ldr	r3, [pc, #264]	@ (8000e38 <MX_TIM1_Init+0x174>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d34:	4b40      	ldr	r3, [pc, #256]	@ (8000e38 <MX_TIM1_Init+0x174>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d3a:	4b3f      	ldr	r3, [pc, #252]	@ (8000e38 <MX_TIM1_Init+0x174>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d40:	493d      	ldr	r1, [pc, #244]	@ (8000e38 <MX_TIM1_Init+0x174>)
 8000d42:	483a      	ldr	r0, [pc, #232]	@ (8000e2c <MX_TIM1_Init+0x168>)
 8000d44:	f005 fad2 	bl	80062ec <HAL_TIMEx_MasterConfigSynchronization>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000d4e:	f7ff fdf1 	bl	8000934 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 8000d52:	4b3a      	ldr	r3, [pc, #232]	@ (8000e3c <MX_TIM1_Init+0x178>)
 8000d54:	2201      	movs	r2, #1
 8000d56:	601a      	str	r2, [r3, #0]
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8000d58:	4b38      	ldr	r3, [pc, #224]	@ (8000e3c <MX_TIM1_Init+0x178>)
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	605a      	str	r2, [r3, #4]
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8000d5e:	4b37      	ldr	r3, [pc, #220]	@ (8000e3c <MX_TIM1_Init+0x178>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8000d64:	4a35      	ldr	r2, [pc, #212]	@ (8000e3c <MX_TIM1_Init+0x178>)
 8000d66:	2101      	movs	r1, #1
 8000d68:	4830      	ldr	r0, [pc, #192]	@ (8000e2c <MX_TIM1_Init+0x168>)
 8000d6a:	f005 fbcb 	bl	8006504 <HAL_TIMEx_ConfigBreakInput>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8000d74:	f7ff fdde 	bl	8000934 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d78:	4b31      	ldr	r3, [pc, #196]	@ (8000e40 <MX_TIM1_Init+0x17c>)
 8000d7a:	2260      	movs	r2, #96	@ 0x60
 8000d7c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 70;
 8000d7e:	4b30      	ldr	r3, [pc, #192]	@ (8000e40 <MX_TIM1_Init+0x17c>)
 8000d80:	2246      	movs	r2, #70	@ 0x46
 8000d82:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000d84:	4b2e      	ldr	r3, [pc, #184]	@ (8000e40 <MX_TIM1_Init+0x17c>)
 8000d86:	2202      	movs	r2, #2
 8000d88:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8000d8a:	4b2d      	ldr	r3, [pc, #180]	@ (8000e40 <MX_TIM1_Init+0x17c>)
 8000d8c:	2208      	movs	r2, #8
 8000d8e:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d90:	4b2b      	ldr	r3, [pc, #172]	@ (8000e40 <MX_TIM1_Init+0x17c>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8000d96:	4b2a      	ldr	r3, [pc, #168]	@ (8000e40 <MX_TIM1_Init+0x17c>)
 8000d98:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d9c:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8000d9e:	4b28      	ldr	r3, [pc, #160]	@ (8000e40 <MX_TIM1_Init+0x17c>)
 8000da0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000da4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000da6:	2200      	movs	r2, #0
 8000da8:	4925      	ldr	r1, [pc, #148]	@ (8000e40 <MX_TIM1_Init+0x17c>)
 8000daa:	4820      	ldr	r0, [pc, #128]	@ (8000e2c <MX_TIM1_Init+0x168>)
 8000dac:	f004 fb96 	bl	80054dc <HAL_TIM_PWM_ConfigChannel>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000db6:	f7ff fdbd 	bl	8000934 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000dba:	4b22      	ldr	r3, [pc, #136]	@ (8000e44 <MX_TIM1_Init+0x180>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000dc0:	4b20      	ldr	r3, [pc, #128]	@ (8000e44 <MX_TIM1_Init+0x180>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000dc6:	4b1f      	ldr	r3, [pc, #124]	@ (8000e44 <MX_TIM1_Init+0x180>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 48;
 8000dcc:	4b1d      	ldr	r3, [pc, #116]	@ (8000e44 <MX_TIM1_Init+0x180>)
 8000dce:	2230      	movs	r2, #48	@ 0x30
 8000dd0:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8000dd2:	4b1c      	ldr	r3, [pc, #112]	@ (8000e44 <MX_TIM1_Init+0x180>)
 8000dd4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000dd8:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 8000dda:	4b1a      	ldr	r3, [pc, #104]	@ (8000e44 <MX_TIM1_Init+0x180>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 4;
 8000de0:	4b18      	ldr	r3, [pc, #96]	@ (8000e44 <MX_TIM1_Init+0x180>)
 8000de2:	2204      	movs	r2, #4
 8000de4:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000de6:	4b17      	ldr	r3, [pc, #92]	@ (8000e44 <MX_TIM1_Init+0x180>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000dec:	4b15      	ldr	r3, [pc, #84]	@ (8000e44 <MX_TIM1_Init+0x180>)
 8000dee:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000df2:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000df4:	4b13      	ldr	r3, [pc, #76]	@ (8000e44 <MX_TIM1_Init+0x180>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000dfa:	4b12      	ldr	r3, [pc, #72]	@ (8000e44 <MX_TIM1_Init+0x180>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e00:	4910      	ldr	r1, [pc, #64]	@ (8000e44 <MX_TIM1_Init+0x180>)
 8000e02:	480a      	ldr	r0, [pc, #40]	@ (8000e2c <MX_TIM1_Init+0x168>)
 8000e04:	f005 fb00 	bl	8006408 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 8000e0e:	f7ff fd91 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e12:	4806      	ldr	r0, [pc, #24]	@ (8000e2c <MX_TIM1_Init+0x168>)
 8000e14:	f000 f862 	bl	8000edc <HAL_TIM_MspPostInit>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);   // Start PWM signal generation on TIM1 Channel 1
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4804      	ldr	r0, [pc, #16]	@ (8000e2c <MX_TIM1_Init+0x168>)
 8000e1c:	f004 fa50 	bl	80052c0 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);// Start PWM signal generation on TIM1 Channel 1N (complementary output)
 8000e20:	2100      	movs	r1, #0
 8000e22:	4802      	ldr	r0, [pc, #8]	@ (8000e2c <MX_TIM1_Init+0x168>)
 8000e24:	f005 f9a0 	bl	8006168 <HAL_TIMEx_PWMN_Start>
}
 8000e28:	bf00      	nop
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	2400008c 	.word	0x2400008c
 8000e30:	40010000 	.word	0x40010000
 8000e34:	240000d8 	.word	0x240000d8
 8000e38:	240000e8 	.word	0x240000e8
 8000e3c:	240000f4 	.word	0x240000f4
 8000e40:	24000100 	.word	0x24000100
 8000e44:	2400011c 	.word	0x2400011c

08000e48 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08a      	sub	sp, #40	@ 0x28
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a1a      	ldr	r2, [pc, #104]	@ (8000ed0 <HAL_TIM_Base_MspInit+0x88>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d12e      	bne.n	8000ec8 <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e6a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ed4 <HAL_TIM_Base_MspInit+0x8c>)
 8000e6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000e70:	4a18      	ldr	r2, [pc, #96]	@ (8000ed4 <HAL_TIM_Base_MspInit+0x8c>)
 8000e72:	f043 0301 	orr.w	r3, r3, #1
 8000e76:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000e7a:	4b16      	ldr	r3, [pc, #88]	@ (8000ed4 <HAL_TIM_Base_MspInit+0x8c>)
 8000e7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000e80:	f003 0301 	and.w	r3, r3, #1
 8000e84:	613b      	str	r3, [r7, #16]
 8000e86:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e88:	4b12      	ldr	r3, [pc, #72]	@ (8000ed4 <HAL_TIM_Base_MspInit+0x8c>)
 8000e8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e8e:	4a11      	ldr	r2, [pc, #68]	@ (8000ed4 <HAL_TIM_Base_MspInit+0x8c>)
 8000e90:	f043 0310 	orr.w	r3, r3, #16
 8000e94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e98:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed4 <HAL_TIM_Base_MspInit+0x8c>)
 8000e9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e9e:	f003 0310 	and.w	r3, r3, #16
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE15     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = PWM_BKIN_Pin;
 8000ea6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000eaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eac:	2302      	movs	r3, #2
 8000eae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_BKIN_GPIO_Port, &GPIO_InitStruct);
 8000ebc:	f107 0314 	add.w	r3, r7, #20
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4805      	ldr	r0, [pc, #20]	@ (8000ed8 <HAL_TIM_Base_MspInit+0x90>)
 8000ec4:	f001 f8f0 	bl	80020a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000ec8:	bf00      	nop
 8000eca:	3728      	adds	r7, #40	@ 0x28
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	40010000 	.word	0x40010000
 8000ed4:	58024400 	.word	0x58024400
 8000ed8:	58021000 	.word	0x58021000

08000edc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b088      	sub	sp, #32
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee4:	f107 030c 	add.w	r3, r7, #12
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]
 8000ef2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a13      	ldr	r2, [pc, #76]	@ (8000f48 <HAL_TIM_MspPostInit+0x6c>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d11f      	bne.n	8000f3e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000efe:	4b13      	ldr	r3, [pc, #76]	@ (8000f4c <HAL_TIM_MspPostInit+0x70>)
 8000f00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f04:	4a11      	ldr	r2, [pc, #68]	@ (8000f4c <HAL_TIM_MspPostInit+0x70>)
 8000f06:	f043 0310 	orr.w	r3, r3, #16
 8000f0a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000f4c <HAL_TIM_MspPostInit+0x70>)
 8000f10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f14:	f003 0310 	and.w	r3, r3, #16
 8000f18:	60bb      	str	r3, [r7, #8]
 8000f1a:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE8     ------> TIM1_CH1N
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWM_CH1N_Pin|PWM_CH1_Pin;
 8000f1c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f20:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f22:	2302      	movs	r3, #2
 8000f24:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f32:	f107 030c 	add.w	r3, r7, #12
 8000f36:	4619      	mov	r1, r3
 8000f38:	4805      	ldr	r0, [pc, #20]	@ (8000f50 <HAL_TIM_MspPostInit+0x74>)
 8000f3a:	f001 f8b5 	bl	80020a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000f3e:	bf00      	nop
 8000f40:	3720      	adds	r7, #32
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40010000 	.word	0x40010000
 8000f4c:	58024400 	.word	0x58024400
 8000f50:	58021000 	.word	0x58021000

08000f54 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f58:	4b22      	ldr	r3, [pc, #136]	@ (8000fe4 <MX_USART1_UART_Init+0x90>)
 8000f5a:	4a23      	ldr	r2, [pc, #140]	@ (8000fe8 <MX_USART1_UART_Init+0x94>)
 8000f5c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f5e:	4b21      	ldr	r3, [pc, #132]	@ (8000fe4 <MX_USART1_UART_Init+0x90>)
 8000f60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f64:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f66:	4b1f      	ldr	r3, [pc, #124]	@ (8000fe4 <MX_USART1_UART_Init+0x90>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f6c:	4b1d      	ldr	r3, [pc, #116]	@ (8000fe4 <MX_USART1_UART_Init+0x90>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f72:	4b1c      	ldr	r3, [pc, #112]	@ (8000fe4 <MX_USART1_UART_Init+0x90>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f78:	4b1a      	ldr	r3, [pc, #104]	@ (8000fe4 <MX_USART1_UART_Init+0x90>)
 8000f7a:	220c      	movs	r2, #12
 8000f7c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f7e:	4b19      	ldr	r3, [pc, #100]	@ (8000fe4 <MX_USART1_UART_Init+0x90>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f84:	4b17      	ldr	r3, [pc, #92]	@ (8000fe4 <MX_USART1_UART_Init+0x90>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f8a:	4b16      	ldr	r3, [pc, #88]	@ (8000fe4 <MX_USART1_UART_Init+0x90>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f90:	4b14      	ldr	r3, [pc, #80]	@ (8000fe4 <MX_USART1_UART_Init+0x90>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f96:	4b13      	ldr	r3, [pc, #76]	@ (8000fe4 <MX_USART1_UART_Init+0x90>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f9c:	4811      	ldr	r0, [pc, #68]	@ (8000fe4 <MX_USART1_UART_Init+0x90>)
 8000f9e:	f005 fb9c 	bl	80066da <HAL_UART_Init>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000fa8:	f7ff fcc4 	bl	8000934 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fac:	2100      	movs	r1, #0
 8000fae:	480d      	ldr	r0, [pc, #52]	@ (8000fe4 <MX_USART1_UART_Init+0x90>)
 8000fb0:	f007 f884 	bl	80080bc <HAL_UARTEx_SetTxFifoThreshold>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000fba:	f7ff fcbb 	bl	8000934 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	4808      	ldr	r0, [pc, #32]	@ (8000fe4 <MX_USART1_UART_Init+0x90>)
 8000fc2:	f007 f8b9 	bl	8008138 <HAL_UARTEx_SetRxFifoThreshold>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000fcc:	f7ff fcb2 	bl	8000934 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000fd0:	4804      	ldr	r0, [pc, #16]	@ (8000fe4 <MX_USART1_UART_Init+0x90>)
 8000fd2:	f007 f83a 	bl	800804a <HAL_UARTEx_DisableFifoMode>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000fdc:	f7ff fcaa 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fe0:	bf00      	nop
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	24000148 	.word	0x24000148
 8000fe8:	40011000 	.word	0x40011000

08000fec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b0ba      	sub	sp, #232	@ 0xe8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001004:	f107 0310 	add.w	r3, r7, #16
 8001008:	22c0      	movs	r2, #192	@ 0xc0
 800100a:	2100      	movs	r1, #0
 800100c:	4618      	mov	r0, r3
 800100e:	f007 fb41 	bl	8008694 <memset>
  if(uartHandle->Instance==USART1)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a2b      	ldr	r2, [pc, #172]	@ (80010c4 <HAL_UART_MspInit+0xd8>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d14e      	bne.n	80010ba <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800101c:	f04f 0201 	mov.w	r2, #1
 8001020:	f04f 0300 	mov.w	r3, #0
 8001024:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001028:	2300      	movs	r3, #0
 800102a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800102e:	f107 0310 	add.w	r3, r7, #16
 8001032:	4618      	mov	r0, r3
 8001034:	f002 fa60 	bl	80034f8 <HAL_RCCEx_PeriphCLKConfig>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800103e:	f7ff fc79 	bl	8000934 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001042:	4b21      	ldr	r3, [pc, #132]	@ (80010c8 <HAL_UART_MspInit+0xdc>)
 8001044:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001048:	4a1f      	ldr	r2, [pc, #124]	@ (80010c8 <HAL_UART_MspInit+0xdc>)
 800104a:	f043 0310 	orr.w	r3, r3, #16
 800104e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001052:	4b1d      	ldr	r3, [pc, #116]	@ (80010c8 <HAL_UART_MspInit+0xdc>)
 8001054:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001058:	f003 0310 	and.w	r3, r3, #16
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001060:	4b19      	ldr	r3, [pc, #100]	@ (80010c8 <HAL_UART_MspInit+0xdc>)
 8001062:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001066:	4a18      	ldr	r2, [pc, #96]	@ (80010c8 <HAL_UART_MspInit+0xdc>)
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001070:	4b15      	ldr	r3, [pc, #84]	@ (80010c8 <HAL_UART_MspInit+0xdc>)
 8001072:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	60bb      	str	r3, [r7, #8]
 800107c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800107e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001082:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001086:	2302      	movs	r3, #2
 8001088:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800108c:	2301      	movs	r3, #1
 800108e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001092:	2302      	movs	r3, #2
 8001094:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001098:	2307      	movs	r3, #7
 800109a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80010a2:	4619      	mov	r1, r3
 80010a4:	4809      	ldr	r0, [pc, #36]	@ (80010cc <HAL_UART_MspInit+0xe0>)
 80010a6:	f000 ffff 	bl	80020a8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80010aa:	2200      	movs	r2, #0
 80010ac:	2100      	movs	r1, #0
 80010ae:	2025      	movs	r0, #37	@ 0x25
 80010b0:	f000 f9e9 	bl	8001486 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80010b4:	2025      	movs	r0, #37	@ 0x25
 80010b6:	f000 fa00 	bl	80014ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80010ba:	bf00      	nop
 80010bc:	37e8      	adds	r7, #232	@ 0xe8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40011000 	.word	0x40011000
 80010c8:	58024400 	.word	0x58024400
 80010cc:	58020000 	.word	0x58020000

080010d0 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

/* printf重定向 */
PUTCHAR_PROTOTYPE
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80010d8:	1d39      	adds	r1, r7, #4
 80010da:	f04f 33ff 	mov.w	r3, #4294967295
 80010de:	2201      	movs	r2, #1
 80010e0:	4803      	ldr	r0, [pc, #12]	@ (80010f0 <__io_putchar+0x20>)
 80010e2:	f005 fb4a 	bl	800677a <HAL_UART_Transmit>
    return ch;
 80010e6:	687b      	ldr	r3, [r7, #4]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	24000148 	.word	0x24000148

080010f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80010f4:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001130 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80010f8:	f7ff fdcc 	bl	8000c94 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80010fc:	f7ff fd2a 	bl	8000b54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001100:	480c      	ldr	r0, [pc, #48]	@ (8001134 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001102:	490d      	ldr	r1, [pc, #52]	@ (8001138 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001104:	4a0d      	ldr	r2, [pc, #52]	@ (800113c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001106:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001108:	e002      	b.n	8001110 <LoopCopyDataInit>

0800110a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800110a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800110c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800110e:	3304      	adds	r3, #4

08001110 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001110:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001112:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001114:	d3f9      	bcc.n	800110a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001116:	4a0a      	ldr	r2, [pc, #40]	@ (8001140 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001118:	4c0a      	ldr	r4, [pc, #40]	@ (8001144 <LoopFillZerobss+0x22>)
  movs r3, #0
 800111a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800111c:	e001      	b.n	8001122 <LoopFillZerobss>

0800111e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800111e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001120:	3204      	adds	r2, #4

08001122 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001122:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001124:	d3fb      	bcc.n	800111e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001126:	f007 fb09 	bl	800873c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800112a:	f7ff fb3d 	bl	80007a8 <main>
  bx  lr
 800112e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001130:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001134:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001138:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 800113c:	08008c6c 	.word	0x08008c6c
  ldr r2, =_sbss
 8001140:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 8001144:	24000340 	.word	0x24000340

08001148 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001148:	e7fe      	b.n	8001148 <ADC3_IRQHandler>
	...

0800114c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001152:	2003      	movs	r0, #3
 8001154:	f000 f98c 	bl	8001470 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001158:	f001 fff8 	bl	800314c <HAL_RCC_GetSysClockFreq>
 800115c:	4602      	mov	r2, r0
 800115e:	4b15      	ldr	r3, [pc, #84]	@ (80011b4 <HAL_Init+0x68>)
 8001160:	699b      	ldr	r3, [r3, #24]
 8001162:	0a1b      	lsrs	r3, r3, #8
 8001164:	f003 030f 	and.w	r3, r3, #15
 8001168:	4913      	ldr	r1, [pc, #76]	@ (80011b8 <HAL_Init+0x6c>)
 800116a:	5ccb      	ldrb	r3, [r1, r3]
 800116c:	f003 031f 	and.w	r3, r3, #31
 8001170:	fa22 f303 	lsr.w	r3, r2, r3
 8001174:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001176:	4b0f      	ldr	r3, [pc, #60]	@ (80011b4 <HAL_Init+0x68>)
 8001178:	699b      	ldr	r3, [r3, #24]
 800117a:	f003 030f 	and.w	r3, r3, #15
 800117e:	4a0e      	ldr	r2, [pc, #56]	@ (80011b8 <HAL_Init+0x6c>)
 8001180:	5cd3      	ldrb	r3, [r2, r3]
 8001182:	f003 031f 	and.w	r3, r3, #31
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	fa22 f303 	lsr.w	r3, r2, r3
 800118c:	4a0b      	ldr	r2, [pc, #44]	@ (80011bc <HAL_Init+0x70>)
 800118e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001190:	4a0b      	ldr	r2, [pc, #44]	@ (80011c0 <HAL_Init+0x74>)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001196:	200f      	movs	r0, #15
 8001198:	f000 f814 	bl	80011c4 <HAL_InitTick>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e002      	b.n	80011ac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80011a6:	f7ff fbcb 	bl	8000940 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011aa:	2300      	movs	r3, #0
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	58024400 	.word	0x58024400
 80011b8:	08008c24 	.word	0x08008c24
 80011bc:	24000004 	.word	0x24000004
 80011c0:	24000000 	.word	0x24000000

080011c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80011cc:	4b15      	ldr	r3, [pc, #84]	@ (8001224 <HAL_InitTick+0x60>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d101      	bne.n	80011d8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80011d4:	2301      	movs	r3, #1
 80011d6:	e021      	b.n	800121c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80011d8:	4b13      	ldr	r3, [pc, #76]	@ (8001228 <HAL_InitTick+0x64>)
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	4b11      	ldr	r3, [pc, #68]	@ (8001224 <HAL_InitTick+0x60>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	4619      	mov	r1, r3
 80011e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ee:	4618      	mov	r0, r3
 80011f0:	f000 f971 	bl	80014d6 <HAL_SYSTICK_Config>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e00e      	b.n	800121c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2b0f      	cmp	r3, #15
 8001202:	d80a      	bhi.n	800121a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001204:	2200      	movs	r2, #0
 8001206:	6879      	ldr	r1, [r7, #4]
 8001208:	f04f 30ff 	mov.w	r0, #4294967295
 800120c:	f000 f93b 	bl	8001486 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001210:	4a06      	ldr	r2, [pc, #24]	@ (800122c <HAL_InitTick+0x68>)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001216:	2300      	movs	r3, #0
 8001218:	e000      	b.n	800121c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
}
 800121c:	4618      	mov	r0, r3
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	2400000c 	.word	0x2400000c
 8001228:	24000000 	.word	0x24000000
 800122c:	24000008 	.word	0x24000008

08001230 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001234:	4b06      	ldr	r3, [pc, #24]	@ (8001250 <HAL_IncTick+0x20>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	461a      	mov	r2, r3
 800123a:	4b06      	ldr	r3, [pc, #24]	@ (8001254 <HAL_IncTick+0x24>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4413      	add	r3, r2
 8001240:	4a04      	ldr	r2, [pc, #16]	@ (8001254 <HAL_IncTick+0x24>)
 8001242:	6013      	str	r3, [r2, #0]
}
 8001244:	bf00      	nop
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	2400000c 	.word	0x2400000c
 8001254:	240001f0 	.word	0x240001f0

08001258 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  return uwTick;
 800125c:	4b03      	ldr	r3, [pc, #12]	@ (800126c <HAL_GetTick+0x14>)
 800125e:	681b      	ldr	r3, [r3, #0]
}
 8001260:	4618      	mov	r0, r3
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	240001f0 	.word	0x240001f0

08001270 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001278:	f7ff ffee 	bl	8001258 <HAL_GetTick>
 800127c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001288:	d005      	beq.n	8001296 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800128a:	4b0a      	ldr	r3, [pc, #40]	@ (80012b4 <HAL_Delay+0x44>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	461a      	mov	r2, r3
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	4413      	add	r3, r2
 8001294:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001296:	bf00      	nop
 8001298:	f7ff ffde 	bl	8001258 <HAL_GetTick>
 800129c:	4602      	mov	r2, r0
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	68fa      	ldr	r2, [r7, #12]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d8f7      	bhi.n	8001298 <HAL_Delay+0x28>
  {
  }
}
 80012a8:	bf00      	nop
 80012aa:	bf00      	nop
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	2400000c 	.word	0x2400000c

080012b8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80012bc:	4b03      	ldr	r3, [pc, #12]	@ (80012cc <HAL_GetREVID+0x14>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	0c1b      	lsrs	r3, r3, #16
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	5c001000 	.word	0x5c001000

080012d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f003 0307 	and.w	r3, r3, #7
 80012de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001310 <__NVIC_SetPriorityGrouping+0x40>)
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012e6:	68ba      	ldr	r2, [r7, #8]
 80012e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012ec:	4013      	ands	r3, r2
 80012ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80012f8:	4b06      	ldr	r3, [pc, #24]	@ (8001314 <__NVIC_SetPriorityGrouping+0x44>)
 80012fa:	4313      	orrs	r3, r2
 80012fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012fe:	4a04      	ldr	r2, [pc, #16]	@ (8001310 <__NVIC_SetPriorityGrouping+0x40>)
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	60d3      	str	r3, [r2, #12]
}
 8001304:	bf00      	nop
 8001306:	3714      	adds	r7, #20
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	e000ed00 	.word	0xe000ed00
 8001314:	05fa0000 	.word	0x05fa0000

08001318 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800131c:	4b04      	ldr	r3, [pc, #16]	@ (8001330 <__NVIC_GetPriorityGrouping+0x18>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	0a1b      	lsrs	r3, r3, #8
 8001322:	f003 0307 	and.w	r3, r3, #7
}
 8001326:	4618      	mov	r0, r3
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	e000ed00 	.word	0xe000ed00

08001334 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800133e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001342:	2b00      	cmp	r3, #0
 8001344:	db0b      	blt.n	800135e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001346:	88fb      	ldrh	r3, [r7, #6]
 8001348:	f003 021f 	and.w	r2, r3, #31
 800134c:	4907      	ldr	r1, [pc, #28]	@ (800136c <__NVIC_EnableIRQ+0x38>)
 800134e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001352:	095b      	lsrs	r3, r3, #5
 8001354:	2001      	movs	r0, #1
 8001356:	fa00 f202 	lsl.w	r2, r0, r2
 800135a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800135e:	bf00      	nop
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	e000e100 	.word	0xe000e100

08001370 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	6039      	str	r1, [r7, #0]
 800137a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800137c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001380:	2b00      	cmp	r3, #0
 8001382:	db0a      	blt.n	800139a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	b2da      	uxtb	r2, r3
 8001388:	490c      	ldr	r1, [pc, #48]	@ (80013bc <__NVIC_SetPriority+0x4c>)
 800138a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800138e:	0112      	lsls	r2, r2, #4
 8001390:	b2d2      	uxtb	r2, r2
 8001392:	440b      	add	r3, r1
 8001394:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001398:	e00a      	b.n	80013b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	b2da      	uxtb	r2, r3
 800139e:	4908      	ldr	r1, [pc, #32]	@ (80013c0 <__NVIC_SetPriority+0x50>)
 80013a0:	88fb      	ldrh	r3, [r7, #6]
 80013a2:	f003 030f 	and.w	r3, r3, #15
 80013a6:	3b04      	subs	r3, #4
 80013a8:	0112      	lsls	r2, r2, #4
 80013aa:	b2d2      	uxtb	r2, r2
 80013ac:	440b      	add	r3, r1
 80013ae:	761a      	strb	r2, [r3, #24]
}
 80013b0:	bf00      	nop
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	e000e100 	.word	0xe000e100
 80013c0:	e000ed00 	.word	0xe000ed00

080013c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b089      	sub	sp, #36	@ 0x24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	f1c3 0307 	rsb	r3, r3, #7
 80013de:	2b04      	cmp	r3, #4
 80013e0:	bf28      	it	cs
 80013e2:	2304      	movcs	r3, #4
 80013e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	3304      	adds	r3, #4
 80013ea:	2b06      	cmp	r3, #6
 80013ec:	d902      	bls.n	80013f4 <NVIC_EncodePriority+0x30>
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	3b03      	subs	r3, #3
 80013f2:	e000      	b.n	80013f6 <NVIC_EncodePriority+0x32>
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f8:	f04f 32ff 	mov.w	r2, #4294967295
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	43da      	mvns	r2, r3
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	401a      	ands	r2, r3
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800140c:	f04f 31ff 	mov.w	r1, #4294967295
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	fa01 f303 	lsl.w	r3, r1, r3
 8001416:	43d9      	mvns	r1, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800141c:	4313      	orrs	r3, r2
         );
}
 800141e:	4618      	mov	r0, r3
 8001420:	3724      	adds	r7, #36	@ 0x24
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
	...

0800142c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3b01      	subs	r3, #1
 8001438:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800143c:	d301      	bcc.n	8001442 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800143e:	2301      	movs	r3, #1
 8001440:	e00f      	b.n	8001462 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001442:	4a0a      	ldr	r2, [pc, #40]	@ (800146c <SysTick_Config+0x40>)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	3b01      	subs	r3, #1
 8001448:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800144a:	210f      	movs	r1, #15
 800144c:	f04f 30ff 	mov.w	r0, #4294967295
 8001450:	f7ff ff8e 	bl	8001370 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001454:	4b05      	ldr	r3, [pc, #20]	@ (800146c <SysTick_Config+0x40>)
 8001456:	2200      	movs	r2, #0
 8001458:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800145a:	4b04      	ldr	r3, [pc, #16]	@ (800146c <SysTick_Config+0x40>)
 800145c:	2207      	movs	r2, #7
 800145e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	e000e010 	.word	0xe000e010

08001470 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f7ff ff29 	bl	80012d0 <__NVIC_SetPriorityGrouping>
}
 800147e:	bf00      	nop
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b086      	sub	sp, #24
 800148a:	af00      	add	r7, sp, #0
 800148c:	4603      	mov	r3, r0
 800148e:	60b9      	str	r1, [r7, #8]
 8001490:	607a      	str	r2, [r7, #4]
 8001492:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001494:	f7ff ff40 	bl	8001318 <__NVIC_GetPriorityGrouping>
 8001498:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	68b9      	ldr	r1, [r7, #8]
 800149e:	6978      	ldr	r0, [r7, #20]
 80014a0:	f7ff ff90 	bl	80013c4 <NVIC_EncodePriority>
 80014a4:	4602      	mov	r2, r0
 80014a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014aa:	4611      	mov	r1, r2
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff ff5f 	bl	8001370 <__NVIC_SetPriority>
}
 80014b2:	bf00      	nop
 80014b4:	3718      	adds	r7, #24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b082      	sub	sp, #8
 80014be:	af00      	add	r7, sp, #0
 80014c0:	4603      	mov	r3, r0
 80014c2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff ff33 	bl	8001334 <__NVIC_EnableIRQ>
}
 80014ce:	bf00      	nop
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b082      	sub	sp, #8
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f7ff ffa4 	bl	800142c <SysTick_Config>
 80014e4:	4603      	mov	r3, r0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
	...

080014f0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80014f4:	f3bf 8f5f 	dmb	sy
}
 80014f8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80014fa:	4b07      	ldr	r3, [pc, #28]	@ (8001518 <HAL_MPU_Disable+0x28>)
 80014fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014fe:	4a06      	ldr	r2, [pc, #24]	@ (8001518 <HAL_MPU_Disable+0x28>)
 8001500:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001504:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001506:	4b05      	ldr	r3, [pc, #20]	@ (800151c <HAL_MPU_Disable+0x2c>)
 8001508:	2200      	movs	r2, #0
 800150a:	605a      	str	r2, [r3, #4]
}
 800150c:	bf00      	nop
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	e000ed00 	.word	0xe000ed00
 800151c:	e000ed90 	.word	0xe000ed90

08001520 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001528:	4a0b      	ldr	r2, [pc, #44]	@ (8001558 <HAL_MPU_Enable+0x38>)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001532:	4b0a      	ldr	r3, [pc, #40]	@ (800155c <HAL_MPU_Enable+0x3c>)
 8001534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001536:	4a09      	ldr	r2, [pc, #36]	@ (800155c <HAL_MPU_Enable+0x3c>)
 8001538:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800153c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800153e:	f3bf 8f4f 	dsb	sy
}
 8001542:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001544:	f3bf 8f6f 	isb	sy
}
 8001548:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800154a:	bf00      	nop
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	e000ed90 	.word	0xe000ed90
 800155c:	e000ed00 	.word	0xe000ed00

08001560 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	785a      	ldrb	r2, [r3, #1]
 800156c:	4b1b      	ldr	r3, [pc, #108]	@ (80015dc <HAL_MPU_ConfigRegion+0x7c>)
 800156e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001570:	4b1a      	ldr	r3, [pc, #104]	@ (80015dc <HAL_MPU_ConfigRegion+0x7c>)
 8001572:	691b      	ldr	r3, [r3, #16]
 8001574:	4a19      	ldr	r2, [pc, #100]	@ (80015dc <HAL_MPU_ConfigRegion+0x7c>)
 8001576:	f023 0301 	bic.w	r3, r3, #1
 800157a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800157c:	4a17      	ldr	r2, [pc, #92]	@ (80015dc <HAL_MPU_ConfigRegion+0x7c>)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	7b1b      	ldrb	r3, [r3, #12]
 8001588:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	7adb      	ldrb	r3, [r3, #11]
 800158e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001590:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	7a9b      	ldrb	r3, [r3, #10]
 8001596:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001598:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	7b5b      	ldrb	r3, [r3, #13]
 800159e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80015a0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	7b9b      	ldrb	r3, [r3, #14]
 80015a6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80015a8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	7bdb      	ldrb	r3, [r3, #15]
 80015ae:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80015b0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	7a5b      	ldrb	r3, [r3, #9]
 80015b6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80015b8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	7a1b      	ldrb	r3, [r3, #8]
 80015be:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80015c0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	7812      	ldrb	r2, [r2, #0]
 80015c6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80015c8:	4a04      	ldr	r2, [pc, #16]	@ (80015dc <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80015ca:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80015cc:	6113      	str	r3, [r2, #16]
}
 80015ce:	bf00      	nop
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	e000ed90 	.word	0xe000ed90

080015e0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80015e8:	f7ff fe36 	bl	8001258 <HAL_GetTick>
 80015ec:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d101      	bne.n	80015f8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e2dc      	b.n	8001bb2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	2b02      	cmp	r3, #2
 8001602:	d008      	beq.n	8001616 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2280      	movs	r2, #128	@ 0x80
 8001608:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2200      	movs	r2, #0
 800160e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e2cd      	b.n	8001bb2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a76      	ldr	r2, [pc, #472]	@ (80017f4 <HAL_DMA_Abort+0x214>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d04a      	beq.n	80016b6 <HAL_DMA_Abort+0xd6>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a74      	ldr	r2, [pc, #464]	@ (80017f8 <HAL_DMA_Abort+0x218>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d045      	beq.n	80016b6 <HAL_DMA_Abort+0xd6>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a73      	ldr	r2, [pc, #460]	@ (80017fc <HAL_DMA_Abort+0x21c>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d040      	beq.n	80016b6 <HAL_DMA_Abort+0xd6>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a71      	ldr	r2, [pc, #452]	@ (8001800 <HAL_DMA_Abort+0x220>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d03b      	beq.n	80016b6 <HAL_DMA_Abort+0xd6>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a70      	ldr	r2, [pc, #448]	@ (8001804 <HAL_DMA_Abort+0x224>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d036      	beq.n	80016b6 <HAL_DMA_Abort+0xd6>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a6e      	ldr	r2, [pc, #440]	@ (8001808 <HAL_DMA_Abort+0x228>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d031      	beq.n	80016b6 <HAL_DMA_Abort+0xd6>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a6d      	ldr	r2, [pc, #436]	@ (800180c <HAL_DMA_Abort+0x22c>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d02c      	beq.n	80016b6 <HAL_DMA_Abort+0xd6>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a6b      	ldr	r2, [pc, #428]	@ (8001810 <HAL_DMA_Abort+0x230>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d027      	beq.n	80016b6 <HAL_DMA_Abort+0xd6>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a6a      	ldr	r2, [pc, #424]	@ (8001814 <HAL_DMA_Abort+0x234>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d022      	beq.n	80016b6 <HAL_DMA_Abort+0xd6>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a68      	ldr	r2, [pc, #416]	@ (8001818 <HAL_DMA_Abort+0x238>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d01d      	beq.n	80016b6 <HAL_DMA_Abort+0xd6>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a67      	ldr	r2, [pc, #412]	@ (800181c <HAL_DMA_Abort+0x23c>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d018      	beq.n	80016b6 <HAL_DMA_Abort+0xd6>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a65      	ldr	r2, [pc, #404]	@ (8001820 <HAL_DMA_Abort+0x240>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d013      	beq.n	80016b6 <HAL_DMA_Abort+0xd6>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a64      	ldr	r2, [pc, #400]	@ (8001824 <HAL_DMA_Abort+0x244>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d00e      	beq.n	80016b6 <HAL_DMA_Abort+0xd6>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a62      	ldr	r2, [pc, #392]	@ (8001828 <HAL_DMA_Abort+0x248>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d009      	beq.n	80016b6 <HAL_DMA_Abort+0xd6>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a61      	ldr	r2, [pc, #388]	@ (800182c <HAL_DMA_Abort+0x24c>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d004      	beq.n	80016b6 <HAL_DMA_Abort+0xd6>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a5f      	ldr	r2, [pc, #380]	@ (8001830 <HAL_DMA_Abort+0x250>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d101      	bne.n	80016ba <HAL_DMA_Abort+0xda>
 80016b6:	2301      	movs	r3, #1
 80016b8:	e000      	b.n	80016bc <HAL_DMA_Abort+0xdc>
 80016ba:	2300      	movs	r3, #0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d013      	beq.n	80016e8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f022 021e 	bic.w	r2, r2, #30
 80016ce:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	695a      	ldr	r2, [r3, #20]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80016de:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	617b      	str	r3, [r7, #20]
 80016e6:	e00a      	b.n	80016fe <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f022 020e 	bic.w	r2, r2, #14
 80016f6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a3c      	ldr	r2, [pc, #240]	@ (80017f4 <HAL_DMA_Abort+0x214>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d072      	beq.n	80017ee <HAL_DMA_Abort+0x20e>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a3a      	ldr	r2, [pc, #232]	@ (80017f8 <HAL_DMA_Abort+0x218>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d06d      	beq.n	80017ee <HAL_DMA_Abort+0x20e>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a39      	ldr	r2, [pc, #228]	@ (80017fc <HAL_DMA_Abort+0x21c>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d068      	beq.n	80017ee <HAL_DMA_Abort+0x20e>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a37      	ldr	r2, [pc, #220]	@ (8001800 <HAL_DMA_Abort+0x220>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d063      	beq.n	80017ee <HAL_DMA_Abort+0x20e>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a36      	ldr	r2, [pc, #216]	@ (8001804 <HAL_DMA_Abort+0x224>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d05e      	beq.n	80017ee <HAL_DMA_Abort+0x20e>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a34      	ldr	r2, [pc, #208]	@ (8001808 <HAL_DMA_Abort+0x228>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d059      	beq.n	80017ee <HAL_DMA_Abort+0x20e>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a33      	ldr	r2, [pc, #204]	@ (800180c <HAL_DMA_Abort+0x22c>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d054      	beq.n	80017ee <HAL_DMA_Abort+0x20e>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a31      	ldr	r2, [pc, #196]	@ (8001810 <HAL_DMA_Abort+0x230>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d04f      	beq.n	80017ee <HAL_DMA_Abort+0x20e>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a30      	ldr	r2, [pc, #192]	@ (8001814 <HAL_DMA_Abort+0x234>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d04a      	beq.n	80017ee <HAL_DMA_Abort+0x20e>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a2e      	ldr	r2, [pc, #184]	@ (8001818 <HAL_DMA_Abort+0x238>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d045      	beq.n	80017ee <HAL_DMA_Abort+0x20e>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a2d      	ldr	r2, [pc, #180]	@ (800181c <HAL_DMA_Abort+0x23c>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d040      	beq.n	80017ee <HAL_DMA_Abort+0x20e>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a2b      	ldr	r2, [pc, #172]	@ (8001820 <HAL_DMA_Abort+0x240>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d03b      	beq.n	80017ee <HAL_DMA_Abort+0x20e>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a2a      	ldr	r2, [pc, #168]	@ (8001824 <HAL_DMA_Abort+0x244>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d036      	beq.n	80017ee <HAL_DMA_Abort+0x20e>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a28      	ldr	r2, [pc, #160]	@ (8001828 <HAL_DMA_Abort+0x248>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d031      	beq.n	80017ee <HAL_DMA_Abort+0x20e>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a27      	ldr	r2, [pc, #156]	@ (800182c <HAL_DMA_Abort+0x24c>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d02c      	beq.n	80017ee <HAL_DMA_Abort+0x20e>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a25      	ldr	r2, [pc, #148]	@ (8001830 <HAL_DMA_Abort+0x250>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d027      	beq.n	80017ee <HAL_DMA_Abort+0x20e>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a24      	ldr	r2, [pc, #144]	@ (8001834 <HAL_DMA_Abort+0x254>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d022      	beq.n	80017ee <HAL_DMA_Abort+0x20e>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a22      	ldr	r2, [pc, #136]	@ (8001838 <HAL_DMA_Abort+0x258>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d01d      	beq.n	80017ee <HAL_DMA_Abort+0x20e>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a21      	ldr	r2, [pc, #132]	@ (800183c <HAL_DMA_Abort+0x25c>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d018      	beq.n	80017ee <HAL_DMA_Abort+0x20e>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a1f      	ldr	r2, [pc, #124]	@ (8001840 <HAL_DMA_Abort+0x260>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d013      	beq.n	80017ee <HAL_DMA_Abort+0x20e>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a1e      	ldr	r2, [pc, #120]	@ (8001844 <HAL_DMA_Abort+0x264>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d00e      	beq.n	80017ee <HAL_DMA_Abort+0x20e>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a1c      	ldr	r2, [pc, #112]	@ (8001848 <HAL_DMA_Abort+0x268>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d009      	beq.n	80017ee <HAL_DMA_Abort+0x20e>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a1b      	ldr	r2, [pc, #108]	@ (800184c <HAL_DMA_Abort+0x26c>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d004      	beq.n	80017ee <HAL_DMA_Abort+0x20e>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a19      	ldr	r2, [pc, #100]	@ (8001850 <HAL_DMA_Abort+0x270>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d132      	bne.n	8001854 <HAL_DMA_Abort+0x274>
 80017ee:	2301      	movs	r3, #1
 80017f0:	e031      	b.n	8001856 <HAL_DMA_Abort+0x276>
 80017f2:	bf00      	nop
 80017f4:	40020010 	.word	0x40020010
 80017f8:	40020028 	.word	0x40020028
 80017fc:	40020040 	.word	0x40020040
 8001800:	40020058 	.word	0x40020058
 8001804:	40020070 	.word	0x40020070
 8001808:	40020088 	.word	0x40020088
 800180c:	400200a0 	.word	0x400200a0
 8001810:	400200b8 	.word	0x400200b8
 8001814:	40020410 	.word	0x40020410
 8001818:	40020428 	.word	0x40020428
 800181c:	40020440 	.word	0x40020440
 8001820:	40020458 	.word	0x40020458
 8001824:	40020470 	.word	0x40020470
 8001828:	40020488 	.word	0x40020488
 800182c:	400204a0 	.word	0x400204a0
 8001830:	400204b8 	.word	0x400204b8
 8001834:	58025408 	.word	0x58025408
 8001838:	5802541c 	.word	0x5802541c
 800183c:	58025430 	.word	0x58025430
 8001840:	58025444 	.word	0x58025444
 8001844:	58025458 	.word	0x58025458
 8001848:	5802546c 	.word	0x5802546c
 800184c:	58025480 	.word	0x58025480
 8001850:	58025494 	.word	0x58025494
 8001854:	2300      	movs	r3, #0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d007      	beq.n	800186a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001864:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001868:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a6d      	ldr	r2, [pc, #436]	@ (8001a24 <HAL_DMA_Abort+0x444>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d04a      	beq.n	800190a <HAL_DMA_Abort+0x32a>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a6b      	ldr	r2, [pc, #428]	@ (8001a28 <HAL_DMA_Abort+0x448>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d045      	beq.n	800190a <HAL_DMA_Abort+0x32a>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a6a      	ldr	r2, [pc, #424]	@ (8001a2c <HAL_DMA_Abort+0x44c>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d040      	beq.n	800190a <HAL_DMA_Abort+0x32a>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a68      	ldr	r2, [pc, #416]	@ (8001a30 <HAL_DMA_Abort+0x450>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d03b      	beq.n	800190a <HAL_DMA_Abort+0x32a>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a67      	ldr	r2, [pc, #412]	@ (8001a34 <HAL_DMA_Abort+0x454>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d036      	beq.n	800190a <HAL_DMA_Abort+0x32a>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a65      	ldr	r2, [pc, #404]	@ (8001a38 <HAL_DMA_Abort+0x458>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d031      	beq.n	800190a <HAL_DMA_Abort+0x32a>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a64      	ldr	r2, [pc, #400]	@ (8001a3c <HAL_DMA_Abort+0x45c>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d02c      	beq.n	800190a <HAL_DMA_Abort+0x32a>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a62      	ldr	r2, [pc, #392]	@ (8001a40 <HAL_DMA_Abort+0x460>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d027      	beq.n	800190a <HAL_DMA_Abort+0x32a>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a61      	ldr	r2, [pc, #388]	@ (8001a44 <HAL_DMA_Abort+0x464>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d022      	beq.n	800190a <HAL_DMA_Abort+0x32a>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a5f      	ldr	r2, [pc, #380]	@ (8001a48 <HAL_DMA_Abort+0x468>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d01d      	beq.n	800190a <HAL_DMA_Abort+0x32a>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a5e      	ldr	r2, [pc, #376]	@ (8001a4c <HAL_DMA_Abort+0x46c>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d018      	beq.n	800190a <HAL_DMA_Abort+0x32a>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a5c      	ldr	r2, [pc, #368]	@ (8001a50 <HAL_DMA_Abort+0x470>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d013      	beq.n	800190a <HAL_DMA_Abort+0x32a>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a5b      	ldr	r2, [pc, #364]	@ (8001a54 <HAL_DMA_Abort+0x474>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d00e      	beq.n	800190a <HAL_DMA_Abort+0x32a>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a59      	ldr	r2, [pc, #356]	@ (8001a58 <HAL_DMA_Abort+0x478>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d009      	beq.n	800190a <HAL_DMA_Abort+0x32a>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a58      	ldr	r2, [pc, #352]	@ (8001a5c <HAL_DMA_Abort+0x47c>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d004      	beq.n	800190a <HAL_DMA_Abort+0x32a>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a56      	ldr	r2, [pc, #344]	@ (8001a60 <HAL_DMA_Abort+0x480>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d108      	bne.n	800191c <HAL_DMA_Abort+0x33c>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f022 0201 	bic.w	r2, r2, #1
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	e007      	b.n	800192c <HAL_DMA_Abort+0x34c>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f022 0201 	bic.w	r2, r2, #1
 800192a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800192c:	e013      	b.n	8001956 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800192e:	f7ff fc93 	bl	8001258 <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	2b05      	cmp	r3, #5
 800193a:	d90c      	bls.n	8001956 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2220      	movs	r2, #32
 8001940:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2203      	movs	r2, #3
 8001946:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e12d      	b.n	8001bb2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	2b00      	cmp	r3, #0
 8001960:	d1e5      	bne.n	800192e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a2f      	ldr	r2, [pc, #188]	@ (8001a24 <HAL_DMA_Abort+0x444>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d04a      	beq.n	8001a02 <HAL_DMA_Abort+0x422>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a2d      	ldr	r2, [pc, #180]	@ (8001a28 <HAL_DMA_Abort+0x448>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d045      	beq.n	8001a02 <HAL_DMA_Abort+0x422>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a2c      	ldr	r2, [pc, #176]	@ (8001a2c <HAL_DMA_Abort+0x44c>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d040      	beq.n	8001a02 <HAL_DMA_Abort+0x422>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a2a      	ldr	r2, [pc, #168]	@ (8001a30 <HAL_DMA_Abort+0x450>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d03b      	beq.n	8001a02 <HAL_DMA_Abort+0x422>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a29      	ldr	r2, [pc, #164]	@ (8001a34 <HAL_DMA_Abort+0x454>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d036      	beq.n	8001a02 <HAL_DMA_Abort+0x422>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a27      	ldr	r2, [pc, #156]	@ (8001a38 <HAL_DMA_Abort+0x458>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d031      	beq.n	8001a02 <HAL_DMA_Abort+0x422>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a26      	ldr	r2, [pc, #152]	@ (8001a3c <HAL_DMA_Abort+0x45c>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d02c      	beq.n	8001a02 <HAL_DMA_Abort+0x422>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a24      	ldr	r2, [pc, #144]	@ (8001a40 <HAL_DMA_Abort+0x460>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d027      	beq.n	8001a02 <HAL_DMA_Abort+0x422>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a23      	ldr	r2, [pc, #140]	@ (8001a44 <HAL_DMA_Abort+0x464>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d022      	beq.n	8001a02 <HAL_DMA_Abort+0x422>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a21      	ldr	r2, [pc, #132]	@ (8001a48 <HAL_DMA_Abort+0x468>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d01d      	beq.n	8001a02 <HAL_DMA_Abort+0x422>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a20      	ldr	r2, [pc, #128]	@ (8001a4c <HAL_DMA_Abort+0x46c>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d018      	beq.n	8001a02 <HAL_DMA_Abort+0x422>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a1e      	ldr	r2, [pc, #120]	@ (8001a50 <HAL_DMA_Abort+0x470>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d013      	beq.n	8001a02 <HAL_DMA_Abort+0x422>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a1d      	ldr	r2, [pc, #116]	@ (8001a54 <HAL_DMA_Abort+0x474>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d00e      	beq.n	8001a02 <HAL_DMA_Abort+0x422>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a1b      	ldr	r2, [pc, #108]	@ (8001a58 <HAL_DMA_Abort+0x478>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d009      	beq.n	8001a02 <HAL_DMA_Abort+0x422>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a1a      	ldr	r2, [pc, #104]	@ (8001a5c <HAL_DMA_Abort+0x47c>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d004      	beq.n	8001a02 <HAL_DMA_Abort+0x422>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a18      	ldr	r2, [pc, #96]	@ (8001a60 <HAL_DMA_Abort+0x480>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d101      	bne.n	8001a06 <HAL_DMA_Abort+0x426>
 8001a02:	2301      	movs	r3, #1
 8001a04:	e000      	b.n	8001a08 <HAL_DMA_Abort+0x428>
 8001a06:	2300      	movs	r3, #0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d02b      	beq.n	8001a64 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a10:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a16:	f003 031f 	and.w	r3, r3, #31
 8001a1a:	223f      	movs	r2, #63	@ 0x3f
 8001a1c:	409a      	lsls	r2, r3
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	609a      	str	r2, [r3, #8]
 8001a22:	e02a      	b.n	8001a7a <HAL_DMA_Abort+0x49a>
 8001a24:	40020010 	.word	0x40020010
 8001a28:	40020028 	.word	0x40020028
 8001a2c:	40020040 	.word	0x40020040
 8001a30:	40020058 	.word	0x40020058
 8001a34:	40020070 	.word	0x40020070
 8001a38:	40020088 	.word	0x40020088
 8001a3c:	400200a0 	.word	0x400200a0
 8001a40:	400200b8 	.word	0x400200b8
 8001a44:	40020410 	.word	0x40020410
 8001a48:	40020428 	.word	0x40020428
 8001a4c:	40020440 	.word	0x40020440
 8001a50:	40020458 	.word	0x40020458
 8001a54:	40020470 	.word	0x40020470
 8001a58:	40020488 	.word	0x40020488
 8001a5c:	400204a0 	.word	0x400204a0
 8001a60:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a68:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a6e:	f003 031f 	and.w	r3, r3, #31
 8001a72:	2201      	movs	r2, #1
 8001a74:	409a      	lsls	r2, r3
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a4f      	ldr	r2, [pc, #316]	@ (8001bbc <HAL_DMA_Abort+0x5dc>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d072      	beq.n	8001b6a <HAL_DMA_Abort+0x58a>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a4d      	ldr	r2, [pc, #308]	@ (8001bc0 <HAL_DMA_Abort+0x5e0>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d06d      	beq.n	8001b6a <HAL_DMA_Abort+0x58a>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a4c      	ldr	r2, [pc, #304]	@ (8001bc4 <HAL_DMA_Abort+0x5e4>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d068      	beq.n	8001b6a <HAL_DMA_Abort+0x58a>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a4a      	ldr	r2, [pc, #296]	@ (8001bc8 <HAL_DMA_Abort+0x5e8>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d063      	beq.n	8001b6a <HAL_DMA_Abort+0x58a>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a49      	ldr	r2, [pc, #292]	@ (8001bcc <HAL_DMA_Abort+0x5ec>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d05e      	beq.n	8001b6a <HAL_DMA_Abort+0x58a>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a47      	ldr	r2, [pc, #284]	@ (8001bd0 <HAL_DMA_Abort+0x5f0>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d059      	beq.n	8001b6a <HAL_DMA_Abort+0x58a>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a46      	ldr	r2, [pc, #280]	@ (8001bd4 <HAL_DMA_Abort+0x5f4>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d054      	beq.n	8001b6a <HAL_DMA_Abort+0x58a>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a44      	ldr	r2, [pc, #272]	@ (8001bd8 <HAL_DMA_Abort+0x5f8>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d04f      	beq.n	8001b6a <HAL_DMA_Abort+0x58a>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a43      	ldr	r2, [pc, #268]	@ (8001bdc <HAL_DMA_Abort+0x5fc>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d04a      	beq.n	8001b6a <HAL_DMA_Abort+0x58a>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a41      	ldr	r2, [pc, #260]	@ (8001be0 <HAL_DMA_Abort+0x600>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d045      	beq.n	8001b6a <HAL_DMA_Abort+0x58a>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a40      	ldr	r2, [pc, #256]	@ (8001be4 <HAL_DMA_Abort+0x604>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d040      	beq.n	8001b6a <HAL_DMA_Abort+0x58a>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a3e      	ldr	r2, [pc, #248]	@ (8001be8 <HAL_DMA_Abort+0x608>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d03b      	beq.n	8001b6a <HAL_DMA_Abort+0x58a>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a3d      	ldr	r2, [pc, #244]	@ (8001bec <HAL_DMA_Abort+0x60c>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d036      	beq.n	8001b6a <HAL_DMA_Abort+0x58a>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a3b      	ldr	r2, [pc, #236]	@ (8001bf0 <HAL_DMA_Abort+0x610>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d031      	beq.n	8001b6a <HAL_DMA_Abort+0x58a>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a3a      	ldr	r2, [pc, #232]	@ (8001bf4 <HAL_DMA_Abort+0x614>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d02c      	beq.n	8001b6a <HAL_DMA_Abort+0x58a>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a38      	ldr	r2, [pc, #224]	@ (8001bf8 <HAL_DMA_Abort+0x618>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d027      	beq.n	8001b6a <HAL_DMA_Abort+0x58a>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a37      	ldr	r2, [pc, #220]	@ (8001bfc <HAL_DMA_Abort+0x61c>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d022      	beq.n	8001b6a <HAL_DMA_Abort+0x58a>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a35      	ldr	r2, [pc, #212]	@ (8001c00 <HAL_DMA_Abort+0x620>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d01d      	beq.n	8001b6a <HAL_DMA_Abort+0x58a>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a34      	ldr	r2, [pc, #208]	@ (8001c04 <HAL_DMA_Abort+0x624>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d018      	beq.n	8001b6a <HAL_DMA_Abort+0x58a>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a32      	ldr	r2, [pc, #200]	@ (8001c08 <HAL_DMA_Abort+0x628>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d013      	beq.n	8001b6a <HAL_DMA_Abort+0x58a>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a31      	ldr	r2, [pc, #196]	@ (8001c0c <HAL_DMA_Abort+0x62c>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d00e      	beq.n	8001b6a <HAL_DMA_Abort+0x58a>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a2f      	ldr	r2, [pc, #188]	@ (8001c10 <HAL_DMA_Abort+0x630>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d009      	beq.n	8001b6a <HAL_DMA_Abort+0x58a>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a2e      	ldr	r2, [pc, #184]	@ (8001c14 <HAL_DMA_Abort+0x634>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d004      	beq.n	8001b6a <HAL_DMA_Abort+0x58a>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a2c      	ldr	r2, [pc, #176]	@ (8001c18 <HAL_DMA_Abort+0x638>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d101      	bne.n	8001b6e <HAL_DMA_Abort+0x58e>
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e000      	b.n	8001b70 <HAL_DMA_Abort+0x590>
 8001b6e:	2300      	movs	r3, #0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d015      	beq.n	8001ba0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001b7c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d00c      	beq.n	8001ba0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001b90:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001b94:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001b9e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3718      	adds	r7, #24
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40020010 	.word	0x40020010
 8001bc0:	40020028 	.word	0x40020028
 8001bc4:	40020040 	.word	0x40020040
 8001bc8:	40020058 	.word	0x40020058
 8001bcc:	40020070 	.word	0x40020070
 8001bd0:	40020088 	.word	0x40020088
 8001bd4:	400200a0 	.word	0x400200a0
 8001bd8:	400200b8 	.word	0x400200b8
 8001bdc:	40020410 	.word	0x40020410
 8001be0:	40020428 	.word	0x40020428
 8001be4:	40020440 	.word	0x40020440
 8001be8:	40020458 	.word	0x40020458
 8001bec:	40020470 	.word	0x40020470
 8001bf0:	40020488 	.word	0x40020488
 8001bf4:	400204a0 	.word	0x400204a0
 8001bf8:	400204b8 	.word	0x400204b8
 8001bfc:	58025408 	.word	0x58025408
 8001c00:	5802541c 	.word	0x5802541c
 8001c04:	58025430 	.word	0x58025430
 8001c08:	58025444 	.word	0x58025444
 8001c0c:	58025458 	.word	0x58025458
 8001c10:	5802546c 	.word	0x5802546c
 8001c14:	58025480 	.word	0x58025480
 8001c18:	58025494 	.word	0x58025494

08001c1c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d101      	bne.n	8001c2e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e237      	b.n	800209e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d004      	beq.n	8001c44 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2280      	movs	r2, #128	@ 0x80
 8001c3e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e22c      	b.n	800209e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a5c      	ldr	r2, [pc, #368]	@ (8001dbc <HAL_DMA_Abort_IT+0x1a0>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d04a      	beq.n	8001ce4 <HAL_DMA_Abort_IT+0xc8>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a5b      	ldr	r2, [pc, #364]	@ (8001dc0 <HAL_DMA_Abort_IT+0x1a4>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d045      	beq.n	8001ce4 <HAL_DMA_Abort_IT+0xc8>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a59      	ldr	r2, [pc, #356]	@ (8001dc4 <HAL_DMA_Abort_IT+0x1a8>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d040      	beq.n	8001ce4 <HAL_DMA_Abort_IT+0xc8>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a58      	ldr	r2, [pc, #352]	@ (8001dc8 <HAL_DMA_Abort_IT+0x1ac>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d03b      	beq.n	8001ce4 <HAL_DMA_Abort_IT+0xc8>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a56      	ldr	r2, [pc, #344]	@ (8001dcc <HAL_DMA_Abort_IT+0x1b0>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d036      	beq.n	8001ce4 <HAL_DMA_Abort_IT+0xc8>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a55      	ldr	r2, [pc, #340]	@ (8001dd0 <HAL_DMA_Abort_IT+0x1b4>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d031      	beq.n	8001ce4 <HAL_DMA_Abort_IT+0xc8>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a53      	ldr	r2, [pc, #332]	@ (8001dd4 <HAL_DMA_Abort_IT+0x1b8>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d02c      	beq.n	8001ce4 <HAL_DMA_Abort_IT+0xc8>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a52      	ldr	r2, [pc, #328]	@ (8001dd8 <HAL_DMA_Abort_IT+0x1bc>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d027      	beq.n	8001ce4 <HAL_DMA_Abort_IT+0xc8>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a50      	ldr	r2, [pc, #320]	@ (8001ddc <HAL_DMA_Abort_IT+0x1c0>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d022      	beq.n	8001ce4 <HAL_DMA_Abort_IT+0xc8>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a4f      	ldr	r2, [pc, #316]	@ (8001de0 <HAL_DMA_Abort_IT+0x1c4>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d01d      	beq.n	8001ce4 <HAL_DMA_Abort_IT+0xc8>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a4d      	ldr	r2, [pc, #308]	@ (8001de4 <HAL_DMA_Abort_IT+0x1c8>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d018      	beq.n	8001ce4 <HAL_DMA_Abort_IT+0xc8>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a4c      	ldr	r2, [pc, #304]	@ (8001de8 <HAL_DMA_Abort_IT+0x1cc>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d013      	beq.n	8001ce4 <HAL_DMA_Abort_IT+0xc8>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a4a      	ldr	r2, [pc, #296]	@ (8001dec <HAL_DMA_Abort_IT+0x1d0>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d00e      	beq.n	8001ce4 <HAL_DMA_Abort_IT+0xc8>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a49      	ldr	r2, [pc, #292]	@ (8001df0 <HAL_DMA_Abort_IT+0x1d4>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d009      	beq.n	8001ce4 <HAL_DMA_Abort_IT+0xc8>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a47      	ldr	r2, [pc, #284]	@ (8001df4 <HAL_DMA_Abort_IT+0x1d8>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d004      	beq.n	8001ce4 <HAL_DMA_Abort_IT+0xc8>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a46      	ldr	r2, [pc, #280]	@ (8001df8 <HAL_DMA_Abort_IT+0x1dc>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d101      	bne.n	8001ce8 <HAL_DMA_Abort_IT+0xcc>
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e000      	b.n	8001cea <HAL_DMA_Abort_IT+0xce>
 8001ce8:	2300      	movs	r3, #0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	f000 8086 	beq.w	8001dfc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2204      	movs	r2, #4
 8001cf4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a2f      	ldr	r2, [pc, #188]	@ (8001dbc <HAL_DMA_Abort_IT+0x1a0>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d04a      	beq.n	8001d98 <HAL_DMA_Abort_IT+0x17c>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a2e      	ldr	r2, [pc, #184]	@ (8001dc0 <HAL_DMA_Abort_IT+0x1a4>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d045      	beq.n	8001d98 <HAL_DMA_Abort_IT+0x17c>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a2c      	ldr	r2, [pc, #176]	@ (8001dc4 <HAL_DMA_Abort_IT+0x1a8>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d040      	beq.n	8001d98 <HAL_DMA_Abort_IT+0x17c>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a2b      	ldr	r2, [pc, #172]	@ (8001dc8 <HAL_DMA_Abort_IT+0x1ac>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d03b      	beq.n	8001d98 <HAL_DMA_Abort_IT+0x17c>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a29      	ldr	r2, [pc, #164]	@ (8001dcc <HAL_DMA_Abort_IT+0x1b0>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d036      	beq.n	8001d98 <HAL_DMA_Abort_IT+0x17c>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a28      	ldr	r2, [pc, #160]	@ (8001dd0 <HAL_DMA_Abort_IT+0x1b4>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d031      	beq.n	8001d98 <HAL_DMA_Abort_IT+0x17c>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a26      	ldr	r2, [pc, #152]	@ (8001dd4 <HAL_DMA_Abort_IT+0x1b8>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d02c      	beq.n	8001d98 <HAL_DMA_Abort_IT+0x17c>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a25      	ldr	r2, [pc, #148]	@ (8001dd8 <HAL_DMA_Abort_IT+0x1bc>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d027      	beq.n	8001d98 <HAL_DMA_Abort_IT+0x17c>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a23      	ldr	r2, [pc, #140]	@ (8001ddc <HAL_DMA_Abort_IT+0x1c0>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d022      	beq.n	8001d98 <HAL_DMA_Abort_IT+0x17c>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a22      	ldr	r2, [pc, #136]	@ (8001de0 <HAL_DMA_Abort_IT+0x1c4>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d01d      	beq.n	8001d98 <HAL_DMA_Abort_IT+0x17c>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a20      	ldr	r2, [pc, #128]	@ (8001de4 <HAL_DMA_Abort_IT+0x1c8>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d018      	beq.n	8001d98 <HAL_DMA_Abort_IT+0x17c>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a1f      	ldr	r2, [pc, #124]	@ (8001de8 <HAL_DMA_Abort_IT+0x1cc>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d013      	beq.n	8001d98 <HAL_DMA_Abort_IT+0x17c>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a1d      	ldr	r2, [pc, #116]	@ (8001dec <HAL_DMA_Abort_IT+0x1d0>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d00e      	beq.n	8001d98 <HAL_DMA_Abort_IT+0x17c>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a1c      	ldr	r2, [pc, #112]	@ (8001df0 <HAL_DMA_Abort_IT+0x1d4>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d009      	beq.n	8001d98 <HAL_DMA_Abort_IT+0x17c>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a1a      	ldr	r2, [pc, #104]	@ (8001df4 <HAL_DMA_Abort_IT+0x1d8>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d004      	beq.n	8001d98 <HAL_DMA_Abort_IT+0x17c>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a19      	ldr	r2, [pc, #100]	@ (8001df8 <HAL_DMA_Abort_IT+0x1dc>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d108      	bne.n	8001daa <HAL_DMA_Abort_IT+0x18e>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f022 0201 	bic.w	r2, r2, #1
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	e178      	b.n	800209c <HAL_DMA_Abort_IT+0x480>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f022 0201 	bic.w	r2, r2, #1
 8001db8:	601a      	str	r2, [r3, #0]
 8001dba:	e16f      	b.n	800209c <HAL_DMA_Abort_IT+0x480>
 8001dbc:	40020010 	.word	0x40020010
 8001dc0:	40020028 	.word	0x40020028
 8001dc4:	40020040 	.word	0x40020040
 8001dc8:	40020058 	.word	0x40020058
 8001dcc:	40020070 	.word	0x40020070
 8001dd0:	40020088 	.word	0x40020088
 8001dd4:	400200a0 	.word	0x400200a0
 8001dd8:	400200b8 	.word	0x400200b8
 8001ddc:	40020410 	.word	0x40020410
 8001de0:	40020428 	.word	0x40020428
 8001de4:	40020440 	.word	0x40020440
 8001de8:	40020458 	.word	0x40020458
 8001dec:	40020470 	.word	0x40020470
 8001df0:	40020488 	.word	0x40020488
 8001df4:	400204a0 	.word	0x400204a0
 8001df8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f022 020e 	bic.w	r2, r2, #14
 8001e0a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a6c      	ldr	r2, [pc, #432]	@ (8001fc4 <HAL_DMA_Abort_IT+0x3a8>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d04a      	beq.n	8001eac <HAL_DMA_Abort_IT+0x290>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a6b      	ldr	r2, [pc, #428]	@ (8001fc8 <HAL_DMA_Abort_IT+0x3ac>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d045      	beq.n	8001eac <HAL_DMA_Abort_IT+0x290>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a69      	ldr	r2, [pc, #420]	@ (8001fcc <HAL_DMA_Abort_IT+0x3b0>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d040      	beq.n	8001eac <HAL_DMA_Abort_IT+0x290>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a68      	ldr	r2, [pc, #416]	@ (8001fd0 <HAL_DMA_Abort_IT+0x3b4>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d03b      	beq.n	8001eac <HAL_DMA_Abort_IT+0x290>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a66      	ldr	r2, [pc, #408]	@ (8001fd4 <HAL_DMA_Abort_IT+0x3b8>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d036      	beq.n	8001eac <HAL_DMA_Abort_IT+0x290>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a65      	ldr	r2, [pc, #404]	@ (8001fd8 <HAL_DMA_Abort_IT+0x3bc>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d031      	beq.n	8001eac <HAL_DMA_Abort_IT+0x290>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a63      	ldr	r2, [pc, #396]	@ (8001fdc <HAL_DMA_Abort_IT+0x3c0>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d02c      	beq.n	8001eac <HAL_DMA_Abort_IT+0x290>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a62      	ldr	r2, [pc, #392]	@ (8001fe0 <HAL_DMA_Abort_IT+0x3c4>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d027      	beq.n	8001eac <HAL_DMA_Abort_IT+0x290>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a60      	ldr	r2, [pc, #384]	@ (8001fe4 <HAL_DMA_Abort_IT+0x3c8>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d022      	beq.n	8001eac <HAL_DMA_Abort_IT+0x290>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a5f      	ldr	r2, [pc, #380]	@ (8001fe8 <HAL_DMA_Abort_IT+0x3cc>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d01d      	beq.n	8001eac <HAL_DMA_Abort_IT+0x290>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a5d      	ldr	r2, [pc, #372]	@ (8001fec <HAL_DMA_Abort_IT+0x3d0>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d018      	beq.n	8001eac <HAL_DMA_Abort_IT+0x290>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a5c      	ldr	r2, [pc, #368]	@ (8001ff0 <HAL_DMA_Abort_IT+0x3d4>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d013      	beq.n	8001eac <HAL_DMA_Abort_IT+0x290>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a5a      	ldr	r2, [pc, #360]	@ (8001ff4 <HAL_DMA_Abort_IT+0x3d8>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d00e      	beq.n	8001eac <HAL_DMA_Abort_IT+0x290>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a59      	ldr	r2, [pc, #356]	@ (8001ff8 <HAL_DMA_Abort_IT+0x3dc>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d009      	beq.n	8001eac <HAL_DMA_Abort_IT+0x290>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a57      	ldr	r2, [pc, #348]	@ (8001ffc <HAL_DMA_Abort_IT+0x3e0>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d004      	beq.n	8001eac <HAL_DMA_Abort_IT+0x290>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a56      	ldr	r2, [pc, #344]	@ (8002000 <HAL_DMA_Abort_IT+0x3e4>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d108      	bne.n	8001ebe <HAL_DMA_Abort_IT+0x2a2>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f022 0201 	bic.w	r2, r2, #1
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	e007      	b.n	8001ece <HAL_DMA_Abort_IT+0x2b2>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f022 0201 	bic.w	r2, r2, #1
 8001ecc:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a3c      	ldr	r2, [pc, #240]	@ (8001fc4 <HAL_DMA_Abort_IT+0x3a8>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d072      	beq.n	8001fbe <HAL_DMA_Abort_IT+0x3a2>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a3a      	ldr	r2, [pc, #232]	@ (8001fc8 <HAL_DMA_Abort_IT+0x3ac>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d06d      	beq.n	8001fbe <HAL_DMA_Abort_IT+0x3a2>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a39      	ldr	r2, [pc, #228]	@ (8001fcc <HAL_DMA_Abort_IT+0x3b0>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d068      	beq.n	8001fbe <HAL_DMA_Abort_IT+0x3a2>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a37      	ldr	r2, [pc, #220]	@ (8001fd0 <HAL_DMA_Abort_IT+0x3b4>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d063      	beq.n	8001fbe <HAL_DMA_Abort_IT+0x3a2>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a36      	ldr	r2, [pc, #216]	@ (8001fd4 <HAL_DMA_Abort_IT+0x3b8>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d05e      	beq.n	8001fbe <HAL_DMA_Abort_IT+0x3a2>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a34      	ldr	r2, [pc, #208]	@ (8001fd8 <HAL_DMA_Abort_IT+0x3bc>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d059      	beq.n	8001fbe <HAL_DMA_Abort_IT+0x3a2>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a33      	ldr	r2, [pc, #204]	@ (8001fdc <HAL_DMA_Abort_IT+0x3c0>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d054      	beq.n	8001fbe <HAL_DMA_Abort_IT+0x3a2>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a31      	ldr	r2, [pc, #196]	@ (8001fe0 <HAL_DMA_Abort_IT+0x3c4>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d04f      	beq.n	8001fbe <HAL_DMA_Abort_IT+0x3a2>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a30      	ldr	r2, [pc, #192]	@ (8001fe4 <HAL_DMA_Abort_IT+0x3c8>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d04a      	beq.n	8001fbe <HAL_DMA_Abort_IT+0x3a2>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a2e      	ldr	r2, [pc, #184]	@ (8001fe8 <HAL_DMA_Abort_IT+0x3cc>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d045      	beq.n	8001fbe <HAL_DMA_Abort_IT+0x3a2>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a2d      	ldr	r2, [pc, #180]	@ (8001fec <HAL_DMA_Abort_IT+0x3d0>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d040      	beq.n	8001fbe <HAL_DMA_Abort_IT+0x3a2>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a2b      	ldr	r2, [pc, #172]	@ (8001ff0 <HAL_DMA_Abort_IT+0x3d4>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d03b      	beq.n	8001fbe <HAL_DMA_Abort_IT+0x3a2>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a2a      	ldr	r2, [pc, #168]	@ (8001ff4 <HAL_DMA_Abort_IT+0x3d8>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d036      	beq.n	8001fbe <HAL_DMA_Abort_IT+0x3a2>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a28      	ldr	r2, [pc, #160]	@ (8001ff8 <HAL_DMA_Abort_IT+0x3dc>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d031      	beq.n	8001fbe <HAL_DMA_Abort_IT+0x3a2>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a27      	ldr	r2, [pc, #156]	@ (8001ffc <HAL_DMA_Abort_IT+0x3e0>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d02c      	beq.n	8001fbe <HAL_DMA_Abort_IT+0x3a2>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a25      	ldr	r2, [pc, #148]	@ (8002000 <HAL_DMA_Abort_IT+0x3e4>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d027      	beq.n	8001fbe <HAL_DMA_Abort_IT+0x3a2>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a24      	ldr	r2, [pc, #144]	@ (8002004 <HAL_DMA_Abort_IT+0x3e8>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d022      	beq.n	8001fbe <HAL_DMA_Abort_IT+0x3a2>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a22      	ldr	r2, [pc, #136]	@ (8002008 <HAL_DMA_Abort_IT+0x3ec>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d01d      	beq.n	8001fbe <HAL_DMA_Abort_IT+0x3a2>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a21      	ldr	r2, [pc, #132]	@ (800200c <HAL_DMA_Abort_IT+0x3f0>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d018      	beq.n	8001fbe <HAL_DMA_Abort_IT+0x3a2>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a1f      	ldr	r2, [pc, #124]	@ (8002010 <HAL_DMA_Abort_IT+0x3f4>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d013      	beq.n	8001fbe <HAL_DMA_Abort_IT+0x3a2>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a1e      	ldr	r2, [pc, #120]	@ (8002014 <HAL_DMA_Abort_IT+0x3f8>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d00e      	beq.n	8001fbe <HAL_DMA_Abort_IT+0x3a2>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a1c      	ldr	r2, [pc, #112]	@ (8002018 <HAL_DMA_Abort_IT+0x3fc>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d009      	beq.n	8001fbe <HAL_DMA_Abort_IT+0x3a2>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a1b      	ldr	r2, [pc, #108]	@ (800201c <HAL_DMA_Abort_IT+0x400>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d004      	beq.n	8001fbe <HAL_DMA_Abort_IT+0x3a2>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a19      	ldr	r2, [pc, #100]	@ (8002020 <HAL_DMA_Abort_IT+0x404>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d132      	bne.n	8002024 <HAL_DMA_Abort_IT+0x408>
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e031      	b.n	8002026 <HAL_DMA_Abort_IT+0x40a>
 8001fc2:	bf00      	nop
 8001fc4:	40020010 	.word	0x40020010
 8001fc8:	40020028 	.word	0x40020028
 8001fcc:	40020040 	.word	0x40020040
 8001fd0:	40020058 	.word	0x40020058
 8001fd4:	40020070 	.word	0x40020070
 8001fd8:	40020088 	.word	0x40020088
 8001fdc:	400200a0 	.word	0x400200a0
 8001fe0:	400200b8 	.word	0x400200b8
 8001fe4:	40020410 	.word	0x40020410
 8001fe8:	40020428 	.word	0x40020428
 8001fec:	40020440 	.word	0x40020440
 8001ff0:	40020458 	.word	0x40020458
 8001ff4:	40020470 	.word	0x40020470
 8001ff8:	40020488 	.word	0x40020488
 8001ffc:	400204a0 	.word	0x400204a0
 8002000:	400204b8 	.word	0x400204b8
 8002004:	58025408 	.word	0x58025408
 8002008:	5802541c 	.word	0x5802541c
 800200c:	58025430 	.word	0x58025430
 8002010:	58025444 	.word	0x58025444
 8002014:	58025458 	.word	0x58025458
 8002018:	5802546c 	.word	0x5802546c
 800201c:	58025480 	.word	0x58025480
 8002020:	58025494 	.word	0x58025494
 8002024:	2300      	movs	r3, #0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d028      	beq.n	800207c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002034:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002038:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800203e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002044:	f003 031f 	and.w	r3, r3, #31
 8002048:	2201      	movs	r2, #1
 800204a:	409a      	lsls	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002058:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800205e:	2b00      	cmp	r3, #0
 8002060:	d00c      	beq.n	800207c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800206c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002070:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800207a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002090:	2b00      	cmp	r3, #0
 8002092:	d003      	beq.n	800209c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3710      	adds	r7, #16
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop

080020a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b089      	sub	sp, #36	@ 0x24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80020b2:	2300      	movs	r3, #0
 80020b4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80020b6:	4b89      	ldr	r3, [pc, #548]	@ (80022dc <HAL_GPIO_Init+0x234>)
 80020b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80020ba:	e194      	b.n	80023e6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	2101      	movs	r1, #1
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	fa01 f303 	lsl.w	r3, r1, r3
 80020c8:	4013      	ands	r3, r2
 80020ca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	f000 8186 	beq.w	80023e0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f003 0303 	and.w	r3, r3, #3
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d005      	beq.n	80020ec <HAL_GPIO_Init+0x44>
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f003 0303 	and.w	r3, r3, #3
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d130      	bne.n	800214e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	2203      	movs	r2, #3
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	43db      	mvns	r3, r3
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	4013      	ands	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	68da      	ldr	r2, [r3, #12]
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	4313      	orrs	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002122:	2201      	movs	r2, #1
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	43db      	mvns	r3, r3
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	4013      	ands	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	091b      	lsrs	r3, r3, #4
 8002138:	f003 0201 	and.w	r2, r3, #1
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	4313      	orrs	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f003 0303 	and.w	r3, r3, #3
 8002156:	2b03      	cmp	r3, #3
 8002158:	d017      	beq.n	800218a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	2203      	movs	r2, #3
 8002166:	fa02 f303 	lsl.w	r3, r2, r3
 800216a:	43db      	mvns	r3, r3
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	4013      	ands	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	689a      	ldr	r2, [r3, #8]
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	fa02 f303 	lsl.w	r3, r2, r3
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	4313      	orrs	r3, r2
 8002182:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f003 0303 	and.w	r3, r3, #3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d123      	bne.n	80021de <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	08da      	lsrs	r2, r3, #3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	3208      	adds	r2, #8
 800219e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	f003 0307 	and.w	r3, r3, #7
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	220f      	movs	r2, #15
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	43db      	mvns	r3, r3
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	4013      	ands	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	691a      	ldr	r2, [r3, #16]
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	f003 0307 	and.w	r3, r3, #7
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	08da      	lsrs	r2, r3, #3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	3208      	adds	r2, #8
 80021d8:	69b9      	ldr	r1, [r7, #24]
 80021da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	2203      	movs	r2, #3
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	43db      	mvns	r3, r3
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	4013      	ands	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f003 0203 	and.w	r2, r3, #3
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	4313      	orrs	r3, r2
 800220a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800221a:	2b00      	cmp	r3, #0
 800221c:	f000 80e0 	beq.w	80023e0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002220:	4b2f      	ldr	r3, [pc, #188]	@ (80022e0 <HAL_GPIO_Init+0x238>)
 8002222:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002226:	4a2e      	ldr	r2, [pc, #184]	@ (80022e0 <HAL_GPIO_Init+0x238>)
 8002228:	f043 0302 	orr.w	r3, r3, #2
 800222c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002230:	4b2b      	ldr	r3, [pc, #172]	@ (80022e0 <HAL_GPIO_Init+0x238>)
 8002232:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	60fb      	str	r3, [r7, #12]
 800223c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800223e:	4a29      	ldr	r2, [pc, #164]	@ (80022e4 <HAL_GPIO_Init+0x23c>)
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	089b      	lsrs	r3, r3, #2
 8002244:	3302      	adds	r3, #2
 8002246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800224a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	f003 0303 	and.w	r3, r3, #3
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	220f      	movs	r2, #15
 8002256:	fa02 f303 	lsl.w	r3, r2, r3
 800225a:	43db      	mvns	r3, r3
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	4013      	ands	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a20      	ldr	r2, [pc, #128]	@ (80022e8 <HAL_GPIO_Init+0x240>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d052      	beq.n	8002310 <HAL_GPIO_Init+0x268>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a1f      	ldr	r2, [pc, #124]	@ (80022ec <HAL_GPIO_Init+0x244>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d031      	beq.n	80022d6 <HAL_GPIO_Init+0x22e>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a1e      	ldr	r2, [pc, #120]	@ (80022f0 <HAL_GPIO_Init+0x248>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d02b      	beq.n	80022d2 <HAL_GPIO_Init+0x22a>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a1d      	ldr	r2, [pc, #116]	@ (80022f4 <HAL_GPIO_Init+0x24c>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d025      	beq.n	80022ce <HAL_GPIO_Init+0x226>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a1c      	ldr	r2, [pc, #112]	@ (80022f8 <HAL_GPIO_Init+0x250>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d01f      	beq.n	80022ca <HAL_GPIO_Init+0x222>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a1b      	ldr	r2, [pc, #108]	@ (80022fc <HAL_GPIO_Init+0x254>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d019      	beq.n	80022c6 <HAL_GPIO_Init+0x21e>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a1a      	ldr	r2, [pc, #104]	@ (8002300 <HAL_GPIO_Init+0x258>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d013      	beq.n	80022c2 <HAL_GPIO_Init+0x21a>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a19      	ldr	r2, [pc, #100]	@ (8002304 <HAL_GPIO_Init+0x25c>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d00d      	beq.n	80022be <HAL_GPIO_Init+0x216>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a18      	ldr	r2, [pc, #96]	@ (8002308 <HAL_GPIO_Init+0x260>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d007      	beq.n	80022ba <HAL_GPIO_Init+0x212>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a17      	ldr	r2, [pc, #92]	@ (800230c <HAL_GPIO_Init+0x264>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d101      	bne.n	80022b6 <HAL_GPIO_Init+0x20e>
 80022b2:	2309      	movs	r3, #9
 80022b4:	e02d      	b.n	8002312 <HAL_GPIO_Init+0x26a>
 80022b6:	230a      	movs	r3, #10
 80022b8:	e02b      	b.n	8002312 <HAL_GPIO_Init+0x26a>
 80022ba:	2308      	movs	r3, #8
 80022bc:	e029      	b.n	8002312 <HAL_GPIO_Init+0x26a>
 80022be:	2307      	movs	r3, #7
 80022c0:	e027      	b.n	8002312 <HAL_GPIO_Init+0x26a>
 80022c2:	2306      	movs	r3, #6
 80022c4:	e025      	b.n	8002312 <HAL_GPIO_Init+0x26a>
 80022c6:	2305      	movs	r3, #5
 80022c8:	e023      	b.n	8002312 <HAL_GPIO_Init+0x26a>
 80022ca:	2304      	movs	r3, #4
 80022cc:	e021      	b.n	8002312 <HAL_GPIO_Init+0x26a>
 80022ce:	2303      	movs	r3, #3
 80022d0:	e01f      	b.n	8002312 <HAL_GPIO_Init+0x26a>
 80022d2:	2302      	movs	r3, #2
 80022d4:	e01d      	b.n	8002312 <HAL_GPIO_Init+0x26a>
 80022d6:	2301      	movs	r3, #1
 80022d8:	e01b      	b.n	8002312 <HAL_GPIO_Init+0x26a>
 80022da:	bf00      	nop
 80022dc:	58000080 	.word	0x58000080
 80022e0:	58024400 	.word	0x58024400
 80022e4:	58000400 	.word	0x58000400
 80022e8:	58020000 	.word	0x58020000
 80022ec:	58020400 	.word	0x58020400
 80022f0:	58020800 	.word	0x58020800
 80022f4:	58020c00 	.word	0x58020c00
 80022f8:	58021000 	.word	0x58021000
 80022fc:	58021400 	.word	0x58021400
 8002300:	58021800 	.word	0x58021800
 8002304:	58021c00 	.word	0x58021c00
 8002308:	58022000 	.word	0x58022000
 800230c:	58022400 	.word	0x58022400
 8002310:	2300      	movs	r3, #0
 8002312:	69fa      	ldr	r2, [r7, #28]
 8002314:	f002 0203 	and.w	r2, r2, #3
 8002318:	0092      	lsls	r2, r2, #2
 800231a:	4093      	lsls	r3, r2
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	4313      	orrs	r3, r2
 8002320:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002322:	4938      	ldr	r1, [pc, #224]	@ (8002404 <HAL_GPIO_Init+0x35c>)
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	089b      	lsrs	r3, r3, #2
 8002328:	3302      	adds	r3, #2
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002330:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	43db      	mvns	r3, r3
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	4013      	ands	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d003      	beq.n	8002356 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	4313      	orrs	r3, r2
 8002354:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002356:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800235e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	43db      	mvns	r3, r3
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	4013      	ands	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d003      	beq.n	8002384 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	4313      	orrs	r3, r2
 8002382:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002384:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	43db      	mvns	r3, r3
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	4013      	ands	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d003      	beq.n	80023b0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	43db      	mvns	r3, r3
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	4013      	ands	r3, r2
 80023c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d003      	beq.n	80023da <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	3301      	adds	r3, #1
 80023e4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	fa22 f303 	lsr.w	r3, r2, r3
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	f47f ae63 	bne.w	80020bc <HAL_GPIO_Init+0x14>
  }
}
 80023f6:	bf00      	nop
 80023f8:	bf00      	nop
 80023fa:	3724      	adds	r7, #36	@ 0x24
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr
 8002404:	58000400 	.word	0x58000400

08002408 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	460b      	mov	r3, r1
 8002412:	807b      	strh	r3, [r7, #2]
 8002414:	4613      	mov	r3, r2
 8002416:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002418:	787b      	ldrb	r3, [r7, #1]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d003      	beq.n	8002426 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800241e:	887a      	ldrh	r2, [r7, #2]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002424:	e003      	b.n	800242e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002426:	887b      	ldrh	r3, [r7, #2]
 8002428:	041a      	lsls	r2, r3, #16
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	619a      	str	r2, [r3, #24]
}
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr

0800243a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800243a:	b480      	push	{r7}
 800243c:	b085      	sub	sp, #20
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
 8002442:	460b      	mov	r3, r1
 8002444:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800244c:	887a      	ldrh	r2, [r7, #2]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	4013      	ands	r3, r2
 8002452:	041a      	lsls	r2, r3, #16
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	43d9      	mvns	r1, r3
 8002458:	887b      	ldrh	r3, [r7, #2]
 800245a:	400b      	ands	r3, r1
 800245c:	431a      	orrs	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	619a      	str	r2, [r3, #24]
}
 8002462:	bf00      	nop
 8002464:	3714      	adds	r7, #20
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr

0800246e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800246e:	b580      	push	{r7, lr}
 8002470:	b082      	sub	sp, #8
 8002472:	af00      	add	r7, sp, #0
 8002474:	4603      	mov	r3, r0
 8002476:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8002478:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800247c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002480:	88fb      	ldrh	r3, [r7, #6]
 8002482:	4013      	ands	r3, r2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d008      	beq.n	800249a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002488:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800248c:	88fb      	ldrh	r3, [r7, #6]
 800248e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002492:	88fb      	ldrh	r3, [r7, #6]
 8002494:	4618      	mov	r0, r3
 8002496:	f000 f804 	bl	80024a2 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800249a:	bf00      	nop
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80024a2:	b480      	push	{r7}
 80024a4:	b083      	sub	sp, #12
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	4603      	mov	r3, r0
 80024aa:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80024c0:	4b19      	ldr	r3, [pc, #100]	@ (8002528 <HAL_PWREx_ConfigSupply+0x70>)
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	f003 0304 	and.w	r3, r3, #4
 80024c8:	2b04      	cmp	r3, #4
 80024ca:	d00a      	beq.n	80024e2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80024cc:	4b16      	ldr	r3, [pc, #88]	@ (8002528 <HAL_PWREx_ConfigSupply+0x70>)
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	f003 0307 	and.w	r3, r3, #7
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d001      	beq.n	80024de <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e01f      	b.n	800251e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80024de:	2300      	movs	r3, #0
 80024e0:	e01d      	b.n	800251e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80024e2:	4b11      	ldr	r3, [pc, #68]	@ (8002528 <HAL_PWREx_ConfigSupply+0x70>)
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	f023 0207 	bic.w	r2, r3, #7
 80024ea:	490f      	ldr	r1, [pc, #60]	@ (8002528 <HAL_PWREx_ConfigSupply+0x70>)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80024f2:	f7fe feb1 	bl	8001258 <HAL_GetTick>
 80024f6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80024f8:	e009      	b.n	800250e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80024fa:	f7fe fead 	bl	8001258 <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002508:	d901      	bls.n	800250e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e007      	b.n	800251e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800250e:	4b06      	ldr	r3, [pc, #24]	@ (8002528 <HAL_PWREx_ConfigSupply+0x70>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002516:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800251a:	d1ee      	bne.n	80024fa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3710      	adds	r7, #16
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	58024800 	.word	0x58024800

0800252c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b08c      	sub	sp, #48	@ 0x30
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d102      	bne.n	8002540 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	f000 bc48 	b.w	8002dd0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0301 	and.w	r3, r3, #1
 8002548:	2b00      	cmp	r3, #0
 800254a:	f000 8088 	beq.w	800265e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800254e:	4b99      	ldr	r3, [pc, #612]	@ (80027b4 <HAL_RCC_OscConfig+0x288>)
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002556:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002558:	4b96      	ldr	r3, [pc, #600]	@ (80027b4 <HAL_RCC_OscConfig+0x288>)
 800255a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800255c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800255e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002560:	2b10      	cmp	r3, #16
 8002562:	d007      	beq.n	8002574 <HAL_RCC_OscConfig+0x48>
 8002564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002566:	2b18      	cmp	r3, #24
 8002568:	d111      	bne.n	800258e <HAL_RCC_OscConfig+0x62>
 800256a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800256c:	f003 0303 	and.w	r3, r3, #3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d10c      	bne.n	800258e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002574:	4b8f      	ldr	r3, [pc, #572]	@ (80027b4 <HAL_RCC_OscConfig+0x288>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d06d      	beq.n	800265c <HAL_RCC_OscConfig+0x130>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d169      	bne.n	800265c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	f000 bc21 	b.w	8002dd0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002596:	d106      	bne.n	80025a6 <HAL_RCC_OscConfig+0x7a>
 8002598:	4b86      	ldr	r3, [pc, #536]	@ (80027b4 <HAL_RCC_OscConfig+0x288>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a85      	ldr	r2, [pc, #532]	@ (80027b4 <HAL_RCC_OscConfig+0x288>)
 800259e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025a2:	6013      	str	r3, [r2, #0]
 80025a4:	e02e      	b.n	8002604 <HAL_RCC_OscConfig+0xd8>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d10c      	bne.n	80025c8 <HAL_RCC_OscConfig+0x9c>
 80025ae:	4b81      	ldr	r3, [pc, #516]	@ (80027b4 <HAL_RCC_OscConfig+0x288>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a80      	ldr	r2, [pc, #512]	@ (80027b4 <HAL_RCC_OscConfig+0x288>)
 80025b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025b8:	6013      	str	r3, [r2, #0]
 80025ba:	4b7e      	ldr	r3, [pc, #504]	@ (80027b4 <HAL_RCC_OscConfig+0x288>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a7d      	ldr	r2, [pc, #500]	@ (80027b4 <HAL_RCC_OscConfig+0x288>)
 80025c0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025c4:	6013      	str	r3, [r2, #0]
 80025c6:	e01d      	b.n	8002604 <HAL_RCC_OscConfig+0xd8>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025d0:	d10c      	bne.n	80025ec <HAL_RCC_OscConfig+0xc0>
 80025d2:	4b78      	ldr	r3, [pc, #480]	@ (80027b4 <HAL_RCC_OscConfig+0x288>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a77      	ldr	r2, [pc, #476]	@ (80027b4 <HAL_RCC_OscConfig+0x288>)
 80025d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025dc:	6013      	str	r3, [r2, #0]
 80025de:	4b75      	ldr	r3, [pc, #468]	@ (80027b4 <HAL_RCC_OscConfig+0x288>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a74      	ldr	r2, [pc, #464]	@ (80027b4 <HAL_RCC_OscConfig+0x288>)
 80025e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025e8:	6013      	str	r3, [r2, #0]
 80025ea:	e00b      	b.n	8002604 <HAL_RCC_OscConfig+0xd8>
 80025ec:	4b71      	ldr	r3, [pc, #452]	@ (80027b4 <HAL_RCC_OscConfig+0x288>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a70      	ldr	r2, [pc, #448]	@ (80027b4 <HAL_RCC_OscConfig+0x288>)
 80025f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025f6:	6013      	str	r3, [r2, #0]
 80025f8:	4b6e      	ldr	r3, [pc, #440]	@ (80027b4 <HAL_RCC_OscConfig+0x288>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a6d      	ldr	r2, [pc, #436]	@ (80027b4 <HAL_RCC_OscConfig+0x288>)
 80025fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002602:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d013      	beq.n	8002634 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800260c:	f7fe fe24 	bl	8001258 <HAL_GetTick>
 8002610:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002614:	f7fe fe20 	bl	8001258 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b64      	cmp	r3, #100	@ 0x64
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e3d4      	b.n	8002dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002626:	4b63      	ldr	r3, [pc, #396]	@ (80027b4 <HAL_RCC_OscConfig+0x288>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d0f0      	beq.n	8002614 <HAL_RCC_OscConfig+0xe8>
 8002632:	e014      	b.n	800265e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002634:	f7fe fe10 	bl	8001258 <HAL_GetTick>
 8002638:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800263a:	e008      	b.n	800264e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800263c:	f7fe fe0c 	bl	8001258 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b64      	cmp	r3, #100	@ 0x64
 8002648:	d901      	bls.n	800264e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e3c0      	b.n	8002dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800264e:	4b59      	ldr	r3, [pc, #356]	@ (80027b4 <HAL_RCC_OscConfig+0x288>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d1f0      	bne.n	800263c <HAL_RCC_OscConfig+0x110>
 800265a:	e000      	b.n	800265e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800265c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	2b00      	cmp	r3, #0
 8002668:	f000 80ca 	beq.w	8002800 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800266c:	4b51      	ldr	r3, [pc, #324]	@ (80027b4 <HAL_RCC_OscConfig+0x288>)
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002674:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002676:	4b4f      	ldr	r3, [pc, #316]	@ (80027b4 <HAL_RCC_OscConfig+0x288>)
 8002678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800267a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800267c:	6a3b      	ldr	r3, [r7, #32]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d007      	beq.n	8002692 <HAL_RCC_OscConfig+0x166>
 8002682:	6a3b      	ldr	r3, [r7, #32]
 8002684:	2b18      	cmp	r3, #24
 8002686:	d156      	bne.n	8002736 <HAL_RCC_OscConfig+0x20a>
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	f003 0303 	and.w	r3, r3, #3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d151      	bne.n	8002736 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002692:	4b48      	ldr	r3, [pc, #288]	@ (80027b4 <HAL_RCC_OscConfig+0x288>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0304 	and.w	r3, r3, #4
 800269a:	2b00      	cmp	r3, #0
 800269c:	d005      	beq.n	80026aa <HAL_RCC_OscConfig+0x17e>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e392      	b.n	8002dd0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80026aa:	4b42      	ldr	r3, [pc, #264]	@ (80027b4 <HAL_RCC_OscConfig+0x288>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f023 0219 	bic.w	r2, r3, #25
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	493f      	ldr	r1, [pc, #252]	@ (80027b4 <HAL_RCC_OscConfig+0x288>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026bc:	f7fe fdcc 	bl	8001258 <HAL_GetTick>
 80026c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026c2:	e008      	b.n	80026d6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026c4:	f7fe fdc8 	bl	8001258 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e37c      	b.n	8002dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026d6:	4b37      	ldr	r3, [pc, #220]	@ (80027b4 <HAL_RCC_OscConfig+0x288>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0304 	and.w	r3, r3, #4
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d0f0      	beq.n	80026c4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026e2:	f7fe fde9 	bl	80012b8 <HAL_GetREVID>
 80026e6:	4603      	mov	r3, r0
 80026e8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d817      	bhi.n	8002720 <HAL_RCC_OscConfig+0x1f4>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	691b      	ldr	r3, [r3, #16]
 80026f4:	2b40      	cmp	r3, #64	@ 0x40
 80026f6:	d108      	bne.n	800270a <HAL_RCC_OscConfig+0x1de>
 80026f8:	4b2e      	ldr	r3, [pc, #184]	@ (80027b4 <HAL_RCC_OscConfig+0x288>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002700:	4a2c      	ldr	r2, [pc, #176]	@ (80027b4 <HAL_RCC_OscConfig+0x288>)
 8002702:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002706:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002708:	e07a      	b.n	8002800 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800270a:	4b2a      	ldr	r3, [pc, #168]	@ (80027b4 <HAL_RCC_OscConfig+0x288>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	031b      	lsls	r3, r3, #12
 8002718:	4926      	ldr	r1, [pc, #152]	@ (80027b4 <HAL_RCC_OscConfig+0x288>)
 800271a:	4313      	orrs	r3, r2
 800271c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800271e:	e06f      	b.n	8002800 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002720:	4b24      	ldr	r3, [pc, #144]	@ (80027b4 <HAL_RCC_OscConfig+0x288>)
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	061b      	lsls	r3, r3, #24
 800272e:	4921      	ldr	r1, [pc, #132]	@ (80027b4 <HAL_RCC_OscConfig+0x288>)
 8002730:	4313      	orrs	r3, r2
 8002732:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002734:	e064      	b.n	8002800 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d047      	beq.n	80027ce <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800273e:	4b1d      	ldr	r3, [pc, #116]	@ (80027b4 <HAL_RCC_OscConfig+0x288>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f023 0219 	bic.w	r2, r3, #25
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	491a      	ldr	r1, [pc, #104]	@ (80027b4 <HAL_RCC_OscConfig+0x288>)
 800274c:	4313      	orrs	r3, r2
 800274e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002750:	f7fe fd82 	bl	8001258 <HAL_GetTick>
 8002754:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002756:	e008      	b.n	800276a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002758:	f7fe fd7e 	bl	8001258 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b02      	cmp	r3, #2
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e332      	b.n	8002dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800276a:	4b12      	ldr	r3, [pc, #72]	@ (80027b4 <HAL_RCC_OscConfig+0x288>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0304 	and.w	r3, r3, #4
 8002772:	2b00      	cmp	r3, #0
 8002774:	d0f0      	beq.n	8002758 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002776:	f7fe fd9f 	bl	80012b8 <HAL_GetREVID>
 800277a:	4603      	mov	r3, r0
 800277c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002780:	4293      	cmp	r3, r2
 8002782:	d819      	bhi.n	80027b8 <HAL_RCC_OscConfig+0x28c>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	691b      	ldr	r3, [r3, #16]
 8002788:	2b40      	cmp	r3, #64	@ 0x40
 800278a:	d108      	bne.n	800279e <HAL_RCC_OscConfig+0x272>
 800278c:	4b09      	ldr	r3, [pc, #36]	@ (80027b4 <HAL_RCC_OscConfig+0x288>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002794:	4a07      	ldr	r2, [pc, #28]	@ (80027b4 <HAL_RCC_OscConfig+0x288>)
 8002796:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800279a:	6053      	str	r3, [r2, #4]
 800279c:	e030      	b.n	8002800 <HAL_RCC_OscConfig+0x2d4>
 800279e:	4b05      	ldr	r3, [pc, #20]	@ (80027b4 <HAL_RCC_OscConfig+0x288>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	031b      	lsls	r3, r3, #12
 80027ac:	4901      	ldr	r1, [pc, #4]	@ (80027b4 <HAL_RCC_OscConfig+0x288>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	604b      	str	r3, [r1, #4]
 80027b2:	e025      	b.n	8002800 <HAL_RCC_OscConfig+0x2d4>
 80027b4:	58024400 	.word	0x58024400
 80027b8:	4b9a      	ldr	r3, [pc, #616]	@ (8002a24 <HAL_RCC_OscConfig+0x4f8>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	061b      	lsls	r3, r3, #24
 80027c6:	4997      	ldr	r1, [pc, #604]	@ (8002a24 <HAL_RCC_OscConfig+0x4f8>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	604b      	str	r3, [r1, #4]
 80027cc:	e018      	b.n	8002800 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027ce:	4b95      	ldr	r3, [pc, #596]	@ (8002a24 <HAL_RCC_OscConfig+0x4f8>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a94      	ldr	r2, [pc, #592]	@ (8002a24 <HAL_RCC_OscConfig+0x4f8>)
 80027d4:	f023 0301 	bic.w	r3, r3, #1
 80027d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027da:	f7fe fd3d 	bl	8001258 <HAL_GetTick>
 80027de:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80027e0:	e008      	b.n	80027f4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027e2:	f7fe fd39 	bl	8001258 <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d901      	bls.n	80027f4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e2ed      	b.n	8002dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80027f4:	4b8b      	ldr	r3, [pc, #556]	@ (8002a24 <HAL_RCC_OscConfig+0x4f8>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0304 	and.w	r3, r3, #4
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d1f0      	bne.n	80027e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0310 	and.w	r3, r3, #16
 8002808:	2b00      	cmp	r3, #0
 800280a:	f000 80a9 	beq.w	8002960 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800280e:	4b85      	ldr	r3, [pc, #532]	@ (8002a24 <HAL_RCC_OscConfig+0x4f8>)
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002816:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002818:	4b82      	ldr	r3, [pc, #520]	@ (8002a24 <HAL_RCC_OscConfig+0x4f8>)
 800281a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800281c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	2b08      	cmp	r3, #8
 8002822:	d007      	beq.n	8002834 <HAL_RCC_OscConfig+0x308>
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	2b18      	cmp	r3, #24
 8002828:	d13a      	bne.n	80028a0 <HAL_RCC_OscConfig+0x374>
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	f003 0303 	and.w	r3, r3, #3
 8002830:	2b01      	cmp	r3, #1
 8002832:	d135      	bne.n	80028a0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002834:	4b7b      	ldr	r3, [pc, #492]	@ (8002a24 <HAL_RCC_OscConfig+0x4f8>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800283c:	2b00      	cmp	r3, #0
 800283e:	d005      	beq.n	800284c <HAL_RCC_OscConfig+0x320>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	69db      	ldr	r3, [r3, #28]
 8002844:	2b80      	cmp	r3, #128	@ 0x80
 8002846:	d001      	beq.n	800284c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e2c1      	b.n	8002dd0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800284c:	f7fe fd34 	bl	80012b8 <HAL_GetREVID>
 8002850:	4603      	mov	r3, r0
 8002852:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002856:	4293      	cmp	r3, r2
 8002858:	d817      	bhi.n	800288a <HAL_RCC_OscConfig+0x35e>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a1b      	ldr	r3, [r3, #32]
 800285e:	2b20      	cmp	r3, #32
 8002860:	d108      	bne.n	8002874 <HAL_RCC_OscConfig+0x348>
 8002862:	4b70      	ldr	r3, [pc, #448]	@ (8002a24 <HAL_RCC_OscConfig+0x4f8>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800286a:	4a6e      	ldr	r2, [pc, #440]	@ (8002a24 <HAL_RCC_OscConfig+0x4f8>)
 800286c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002870:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002872:	e075      	b.n	8002960 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002874:	4b6b      	ldr	r3, [pc, #428]	@ (8002a24 <HAL_RCC_OscConfig+0x4f8>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a1b      	ldr	r3, [r3, #32]
 8002880:	069b      	lsls	r3, r3, #26
 8002882:	4968      	ldr	r1, [pc, #416]	@ (8002a24 <HAL_RCC_OscConfig+0x4f8>)
 8002884:	4313      	orrs	r3, r2
 8002886:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002888:	e06a      	b.n	8002960 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800288a:	4b66      	ldr	r3, [pc, #408]	@ (8002a24 <HAL_RCC_OscConfig+0x4f8>)
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a1b      	ldr	r3, [r3, #32]
 8002896:	061b      	lsls	r3, r3, #24
 8002898:	4962      	ldr	r1, [pc, #392]	@ (8002a24 <HAL_RCC_OscConfig+0x4f8>)
 800289a:	4313      	orrs	r3, r2
 800289c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800289e:	e05f      	b.n	8002960 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	69db      	ldr	r3, [r3, #28]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d042      	beq.n	800292e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80028a8:	4b5e      	ldr	r3, [pc, #376]	@ (8002a24 <HAL_RCC_OscConfig+0x4f8>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a5d      	ldr	r2, [pc, #372]	@ (8002a24 <HAL_RCC_OscConfig+0x4f8>)
 80028ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b4:	f7fe fcd0 	bl	8001258 <HAL_GetTick>
 80028b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80028ba:	e008      	b.n	80028ce <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80028bc:	f7fe fccc 	bl	8001258 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e280      	b.n	8002dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80028ce:	4b55      	ldr	r3, [pc, #340]	@ (8002a24 <HAL_RCC_OscConfig+0x4f8>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d0f0      	beq.n	80028bc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028da:	f7fe fced 	bl	80012b8 <HAL_GetREVID>
 80028de:	4603      	mov	r3, r0
 80028e0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d817      	bhi.n	8002918 <HAL_RCC_OscConfig+0x3ec>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a1b      	ldr	r3, [r3, #32]
 80028ec:	2b20      	cmp	r3, #32
 80028ee:	d108      	bne.n	8002902 <HAL_RCC_OscConfig+0x3d6>
 80028f0:	4b4c      	ldr	r3, [pc, #304]	@ (8002a24 <HAL_RCC_OscConfig+0x4f8>)
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80028f8:	4a4a      	ldr	r2, [pc, #296]	@ (8002a24 <HAL_RCC_OscConfig+0x4f8>)
 80028fa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80028fe:	6053      	str	r3, [r2, #4]
 8002900:	e02e      	b.n	8002960 <HAL_RCC_OscConfig+0x434>
 8002902:	4b48      	ldr	r3, [pc, #288]	@ (8002a24 <HAL_RCC_OscConfig+0x4f8>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a1b      	ldr	r3, [r3, #32]
 800290e:	069b      	lsls	r3, r3, #26
 8002910:	4944      	ldr	r1, [pc, #272]	@ (8002a24 <HAL_RCC_OscConfig+0x4f8>)
 8002912:	4313      	orrs	r3, r2
 8002914:	604b      	str	r3, [r1, #4]
 8002916:	e023      	b.n	8002960 <HAL_RCC_OscConfig+0x434>
 8002918:	4b42      	ldr	r3, [pc, #264]	@ (8002a24 <HAL_RCC_OscConfig+0x4f8>)
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a1b      	ldr	r3, [r3, #32]
 8002924:	061b      	lsls	r3, r3, #24
 8002926:	493f      	ldr	r1, [pc, #252]	@ (8002a24 <HAL_RCC_OscConfig+0x4f8>)
 8002928:	4313      	orrs	r3, r2
 800292a:	60cb      	str	r3, [r1, #12]
 800292c:	e018      	b.n	8002960 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800292e:	4b3d      	ldr	r3, [pc, #244]	@ (8002a24 <HAL_RCC_OscConfig+0x4f8>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a3c      	ldr	r2, [pc, #240]	@ (8002a24 <HAL_RCC_OscConfig+0x4f8>)
 8002934:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002938:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800293a:	f7fe fc8d 	bl	8001258 <HAL_GetTick>
 800293e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002940:	e008      	b.n	8002954 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002942:	f7fe fc89 	bl	8001258 <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d901      	bls.n	8002954 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e23d      	b.n	8002dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002954:	4b33      	ldr	r3, [pc, #204]	@ (8002a24 <HAL_RCC_OscConfig+0x4f8>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800295c:	2b00      	cmp	r3, #0
 800295e:	d1f0      	bne.n	8002942 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0308 	and.w	r3, r3, #8
 8002968:	2b00      	cmp	r3, #0
 800296a:	d036      	beq.n	80029da <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	695b      	ldr	r3, [r3, #20]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d019      	beq.n	80029a8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002974:	4b2b      	ldr	r3, [pc, #172]	@ (8002a24 <HAL_RCC_OscConfig+0x4f8>)
 8002976:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002978:	4a2a      	ldr	r2, [pc, #168]	@ (8002a24 <HAL_RCC_OscConfig+0x4f8>)
 800297a:	f043 0301 	orr.w	r3, r3, #1
 800297e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002980:	f7fe fc6a 	bl	8001258 <HAL_GetTick>
 8002984:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002986:	e008      	b.n	800299a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002988:	f7fe fc66 	bl	8001258 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b02      	cmp	r3, #2
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e21a      	b.n	8002dd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800299a:	4b22      	ldr	r3, [pc, #136]	@ (8002a24 <HAL_RCC_OscConfig+0x4f8>)
 800299c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d0f0      	beq.n	8002988 <HAL_RCC_OscConfig+0x45c>
 80029a6:	e018      	b.n	80029da <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029a8:	4b1e      	ldr	r3, [pc, #120]	@ (8002a24 <HAL_RCC_OscConfig+0x4f8>)
 80029aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029ac:	4a1d      	ldr	r2, [pc, #116]	@ (8002a24 <HAL_RCC_OscConfig+0x4f8>)
 80029ae:	f023 0301 	bic.w	r3, r3, #1
 80029b2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b4:	f7fe fc50 	bl	8001258 <HAL_GetTick>
 80029b8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80029ba:	e008      	b.n	80029ce <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029bc:	f7fe fc4c 	bl	8001258 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e200      	b.n	8002dd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80029ce:	4b15      	ldr	r3, [pc, #84]	@ (8002a24 <HAL_RCC_OscConfig+0x4f8>)
 80029d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1f0      	bne.n	80029bc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0320 	and.w	r3, r3, #32
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d039      	beq.n	8002a5a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d01c      	beq.n	8002a28 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80029ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002a24 <HAL_RCC_OscConfig+0x4f8>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a0c      	ldr	r2, [pc, #48]	@ (8002a24 <HAL_RCC_OscConfig+0x4f8>)
 80029f4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80029f8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80029fa:	f7fe fc2d 	bl	8001258 <HAL_GetTick>
 80029fe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a00:	e008      	b.n	8002a14 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a02:	f7fe fc29 	bl	8001258 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d901      	bls.n	8002a14 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e1dd      	b.n	8002dd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a14:	4b03      	ldr	r3, [pc, #12]	@ (8002a24 <HAL_RCC_OscConfig+0x4f8>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d0f0      	beq.n	8002a02 <HAL_RCC_OscConfig+0x4d6>
 8002a20:	e01b      	b.n	8002a5a <HAL_RCC_OscConfig+0x52e>
 8002a22:	bf00      	nop
 8002a24:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a28:	4b9b      	ldr	r3, [pc, #620]	@ (8002c98 <HAL_RCC_OscConfig+0x76c>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a9a      	ldr	r2, [pc, #616]	@ (8002c98 <HAL_RCC_OscConfig+0x76c>)
 8002a2e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002a32:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002a34:	f7fe fc10 	bl	8001258 <HAL_GetTick>
 8002a38:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a3c:	f7fe fc0c 	bl	8001258 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e1c0      	b.n	8002dd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a4e:	4b92      	ldr	r3, [pc, #584]	@ (8002c98 <HAL_RCC_OscConfig+0x76c>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1f0      	bne.n	8002a3c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0304 	and.w	r3, r3, #4
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	f000 8081 	beq.w	8002b6a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002a68:	4b8c      	ldr	r3, [pc, #560]	@ (8002c9c <HAL_RCC_OscConfig+0x770>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a8b      	ldr	r2, [pc, #556]	@ (8002c9c <HAL_RCC_OscConfig+0x770>)
 8002a6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a72:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a74:	f7fe fbf0 	bl	8001258 <HAL_GetTick>
 8002a78:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a7a:	e008      	b.n	8002a8e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a7c:	f7fe fbec 	bl	8001258 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b64      	cmp	r3, #100	@ 0x64
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e1a0      	b.n	8002dd0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a8e:	4b83      	ldr	r3, [pc, #524]	@ (8002c9c <HAL_RCC_OscConfig+0x770>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d0f0      	beq.n	8002a7c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d106      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x584>
 8002aa2:	4b7d      	ldr	r3, [pc, #500]	@ (8002c98 <HAL_RCC_OscConfig+0x76c>)
 8002aa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aa6:	4a7c      	ldr	r2, [pc, #496]	@ (8002c98 <HAL_RCC_OscConfig+0x76c>)
 8002aa8:	f043 0301 	orr.w	r3, r3, #1
 8002aac:	6713      	str	r3, [r2, #112]	@ 0x70
 8002aae:	e02d      	b.n	8002b0c <HAL_RCC_OscConfig+0x5e0>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d10c      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x5a6>
 8002ab8:	4b77      	ldr	r3, [pc, #476]	@ (8002c98 <HAL_RCC_OscConfig+0x76c>)
 8002aba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002abc:	4a76      	ldr	r2, [pc, #472]	@ (8002c98 <HAL_RCC_OscConfig+0x76c>)
 8002abe:	f023 0301 	bic.w	r3, r3, #1
 8002ac2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ac4:	4b74      	ldr	r3, [pc, #464]	@ (8002c98 <HAL_RCC_OscConfig+0x76c>)
 8002ac6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ac8:	4a73      	ldr	r2, [pc, #460]	@ (8002c98 <HAL_RCC_OscConfig+0x76c>)
 8002aca:	f023 0304 	bic.w	r3, r3, #4
 8002ace:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ad0:	e01c      	b.n	8002b0c <HAL_RCC_OscConfig+0x5e0>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	2b05      	cmp	r3, #5
 8002ad8:	d10c      	bne.n	8002af4 <HAL_RCC_OscConfig+0x5c8>
 8002ada:	4b6f      	ldr	r3, [pc, #444]	@ (8002c98 <HAL_RCC_OscConfig+0x76c>)
 8002adc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ade:	4a6e      	ldr	r2, [pc, #440]	@ (8002c98 <HAL_RCC_OscConfig+0x76c>)
 8002ae0:	f043 0304 	orr.w	r3, r3, #4
 8002ae4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ae6:	4b6c      	ldr	r3, [pc, #432]	@ (8002c98 <HAL_RCC_OscConfig+0x76c>)
 8002ae8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aea:	4a6b      	ldr	r2, [pc, #428]	@ (8002c98 <HAL_RCC_OscConfig+0x76c>)
 8002aec:	f043 0301 	orr.w	r3, r3, #1
 8002af0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002af2:	e00b      	b.n	8002b0c <HAL_RCC_OscConfig+0x5e0>
 8002af4:	4b68      	ldr	r3, [pc, #416]	@ (8002c98 <HAL_RCC_OscConfig+0x76c>)
 8002af6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002af8:	4a67      	ldr	r2, [pc, #412]	@ (8002c98 <HAL_RCC_OscConfig+0x76c>)
 8002afa:	f023 0301 	bic.w	r3, r3, #1
 8002afe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b00:	4b65      	ldr	r3, [pc, #404]	@ (8002c98 <HAL_RCC_OscConfig+0x76c>)
 8002b02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b04:	4a64      	ldr	r2, [pc, #400]	@ (8002c98 <HAL_RCC_OscConfig+0x76c>)
 8002b06:	f023 0304 	bic.w	r3, r3, #4
 8002b0a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d015      	beq.n	8002b40 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b14:	f7fe fba0 	bl	8001258 <HAL_GetTick>
 8002b18:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b1a:	e00a      	b.n	8002b32 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b1c:	f7fe fb9c 	bl	8001258 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e14e      	b.n	8002dd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b32:	4b59      	ldr	r3, [pc, #356]	@ (8002c98 <HAL_RCC_OscConfig+0x76c>)
 8002b34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d0ee      	beq.n	8002b1c <HAL_RCC_OscConfig+0x5f0>
 8002b3e:	e014      	b.n	8002b6a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b40:	f7fe fb8a 	bl	8001258 <HAL_GetTick>
 8002b44:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b46:	e00a      	b.n	8002b5e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b48:	f7fe fb86 	bl	8001258 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e138      	b.n	8002dd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b5e:	4b4e      	ldr	r3, [pc, #312]	@ (8002c98 <HAL_RCC_OscConfig+0x76c>)
 8002b60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1ee      	bne.n	8002b48 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f000 812d 	beq.w	8002dce <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002b74:	4b48      	ldr	r3, [pc, #288]	@ (8002c98 <HAL_RCC_OscConfig+0x76c>)
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002b7c:	2b18      	cmp	r3, #24
 8002b7e:	f000 80bd 	beq.w	8002cfc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	f040 809e 	bne.w	8002cc8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b8c:	4b42      	ldr	r3, [pc, #264]	@ (8002c98 <HAL_RCC_OscConfig+0x76c>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a41      	ldr	r2, [pc, #260]	@ (8002c98 <HAL_RCC_OscConfig+0x76c>)
 8002b92:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b98:	f7fe fb5e 	bl	8001258 <HAL_GetTick>
 8002b9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b9e:	e008      	b.n	8002bb2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ba0:	f7fe fb5a 	bl	8001258 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e10e      	b.n	8002dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bb2:	4b39      	ldr	r3, [pc, #228]	@ (8002c98 <HAL_RCC_OscConfig+0x76c>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1f0      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bbe:	4b36      	ldr	r3, [pc, #216]	@ (8002c98 <HAL_RCC_OscConfig+0x76c>)
 8002bc0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002bc2:	4b37      	ldr	r3, [pc, #220]	@ (8002ca0 <HAL_RCC_OscConfig+0x774>)
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002bce:	0112      	lsls	r2, r2, #4
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	4931      	ldr	r1, [pc, #196]	@ (8002c98 <HAL_RCC_OscConfig+0x76c>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	628b      	str	r3, [r1, #40]	@ 0x28
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bdc:	3b01      	subs	r3, #1
 8002bde:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002be6:	3b01      	subs	r3, #1
 8002be8:	025b      	lsls	r3, r3, #9
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	431a      	orrs	r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	041b      	lsls	r3, r3, #16
 8002bf6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002bfa:	431a      	orrs	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c00:	3b01      	subs	r3, #1
 8002c02:	061b      	lsls	r3, r3, #24
 8002c04:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002c08:	4923      	ldr	r1, [pc, #140]	@ (8002c98 <HAL_RCC_OscConfig+0x76c>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002c0e:	4b22      	ldr	r3, [pc, #136]	@ (8002c98 <HAL_RCC_OscConfig+0x76c>)
 8002c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c12:	4a21      	ldr	r2, [pc, #132]	@ (8002c98 <HAL_RCC_OscConfig+0x76c>)
 8002c14:	f023 0301 	bic.w	r3, r3, #1
 8002c18:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002c1a:	4b1f      	ldr	r3, [pc, #124]	@ (8002c98 <HAL_RCC_OscConfig+0x76c>)
 8002c1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c1e:	4b21      	ldr	r3, [pc, #132]	@ (8002ca4 <HAL_RCC_OscConfig+0x778>)
 8002c20:	4013      	ands	r3, r2
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002c26:	00d2      	lsls	r2, r2, #3
 8002c28:	491b      	ldr	r1, [pc, #108]	@ (8002c98 <HAL_RCC_OscConfig+0x76c>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002c2e:	4b1a      	ldr	r3, [pc, #104]	@ (8002c98 <HAL_RCC_OscConfig+0x76c>)
 8002c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c32:	f023 020c 	bic.w	r2, r3, #12
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c3a:	4917      	ldr	r1, [pc, #92]	@ (8002c98 <HAL_RCC_OscConfig+0x76c>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002c40:	4b15      	ldr	r3, [pc, #84]	@ (8002c98 <HAL_RCC_OscConfig+0x76c>)
 8002c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c44:	f023 0202 	bic.w	r2, r3, #2
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c4c:	4912      	ldr	r1, [pc, #72]	@ (8002c98 <HAL_RCC_OscConfig+0x76c>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002c52:	4b11      	ldr	r3, [pc, #68]	@ (8002c98 <HAL_RCC_OscConfig+0x76c>)
 8002c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c56:	4a10      	ldr	r2, [pc, #64]	@ (8002c98 <HAL_RCC_OscConfig+0x76c>)
 8002c58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c5e:	4b0e      	ldr	r3, [pc, #56]	@ (8002c98 <HAL_RCC_OscConfig+0x76c>)
 8002c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c62:	4a0d      	ldr	r2, [pc, #52]	@ (8002c98 <HAL_RCC_OscConfig+0x76c>)
 8002c64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c68:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002c6a:	4b0b      	ldr	r3, [pc, #44]	@ (8002c98 <HAL_RCC_OscConfig+0x76c>)
 8002c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c6e:	4a0a      	ldr	r2, [pc, #40]	@ (8002c98 <HAL_RCC_OscConfig+0x76c>)
 8002c70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c74:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002c76:	4b08      	ldr	r3, [pc, #32]	@ (8002c98 <HAL_RCC_OscConfig+0x76c>)
 8002c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c7a:	4a07      	ldr	r2, [pc, #28]	@ (8002c98 <HAL_RCC_OscConfig+0x76c>)
 8002c7c:	f043 0301 	orr.w	r3, r3, #1
 8002c80:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c82:	4b05      	ldr	r3, [pc, #20]	@ (8002c98 <HAL_RCC_OscConfig+0x76c>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a04      	ldr	r2, [pc, #16]	@ (8002c98 <HAL_RCC_OscConfig+0x76c>)
 8002c88:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c8e:	f7fe fae3 	bl	8001258 <HAL_GetTick>
 8002c92:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c94:	e011      	b.n	8002cba <HAL_RCC_OscConfig+0x78e>
 8002c96:	bf00      	nop
 8002c98:	58024400 	.word	0x58024400
 8002c9c:	58024800 	.word	0x58024800
 8002ca0:	fffffc0c 	.word	0xfffffc0c
 8002ca4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ca8:	f7fe fad6 	bl	8001258 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e08a      	b.n	8002dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002cba:	4b47      	ldr	r3, [pc, #284]	@ (8002dd8 <HAL_RCC_OscConfig+0x8ac>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d0f0      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x77c>
 8002cc6:	e082      	b.n	8002dce <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cc8:	4b43      	ldr	r3, [pc, #268]	@ (8002dd8 <HAL_RCC_OscConfig+0x8ac>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a42      	ldr	r2, [pc, #264]	@ (8002dd8 <HAL_RCC_OscConfig+0x8ac>)
 8002cce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002cd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd4:	f7fe fac0 	bl	8001258 <HAL_GetTick>
 8002cd8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cda:	e008      	b.n	8002cee <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cdc:	f7fe fabc 	bl	8001258 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e070      	b.n	8002dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cee:	4b3a      	ldr	r3, [pc, #232]	@ (8002dd8 <HAL_RCC_OscConfig+0x8ac>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1f0      	bne.n	8002cdc <HAL_RCC_OscConfig+0x7b0>
 8002cfa:	e068      	b.n	8002dce <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002cfc:	4b36      	ldr	r3, [pc, #216]	@ (8002dd8 <HAL_RCC_OscConfig+0x8ac>)
 8002cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d00:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002d02:	4b35      	ldr	r3, [pc, #212]	@ (8002dd8 <HAL_RCC_OscConfig+0x8ac>)
 8002d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d06:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d031      	beq.n	8002d74 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	f003 0203 	and.w	r2, r3, #3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d12a      	bne.n	8002d74 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	091b      	lsrs	r3, r3, #4
 8002d22:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d122      	bne.n	8002d74 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d38:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d11a      	bne.n	8002d74 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	0a5b      	lsrs	r3, r3, #9
 8002d42:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d4a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d111      	bne.n	8002d74 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	0c1b      	lsrs	r3, r3, #16
 8002d54:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d5c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d108      	bne.n	8002d74 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	0e1b      	lsrs	r3, r3, #24
 8002d66:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d6e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d001      	beq.n	8002d78 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e02b      	b.n	8002dd0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002d78:	4b17      	ldr	r3, [pc, #92]	@ (8002dd8 <HAL_RCC_OscConfig+0x8ac>)
 8002d7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d7c:	08db      	lsrs	r3, r3, #3
 8002d7e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002d82:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d88:	693a      	ldr	r2, [r7, #16]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d01f      	beq.n	8002dce <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002d8e:	4b12      	ldr	r3, [pc, #72]	@ (8002dd8 <HAL_RCC_OscConfig+0x8ac>)
 8002d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d92:	4a11      	ldr	r2, [pc, #68]	@ (8002dd8 <HAL_RCC_OscConfig+0x8ac>)
 8002d94:	f023 0301 	bic.w	r3, r3, #1
 8002d98:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d9a:	f7fe fa5d 	bl	8001258 <HAL_GetTick>
 8002d9e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002da0:	bf00      	nop
 8002da2:	f7fe fa59 	bl	8001258 <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d0f9      	beq.n	8002da2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002dae:	4b0a      	ldr	r3, [pc, #40]	@ (8002dd8 <HAL_RCC_OscConfig+0x8ac>)
 8002db0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002db2:	4b0a      	ldr	r3, [pc, #40]	@ (8002ddc <HAL_RCC_OscConfig+0x8b0>)
 8002db4:	4013      	ands	r3, r2
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002dba:	00d2      	lsls	r2, r2, #3
 8002dbc:	4906      	ldr	r1, [pc, #24]	@ (8002dd8 <HAL_RCC_OscConfig+0x8ac>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002dc2:	4b05      	ldr	r3, [pc, #20]	@ (8002dd8 <HAL_RCC_OscConfig+0x8ac>)
 8002dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dc6:	4a04      	ldr	r2, [pc, #16]	@ (8002dd8 <HAL_RCC_OscConfig+0x8ac>)
 8002dc8:	f043 0301 	orr.w	r3, r3, #1
 8002dcc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002dce:	2300      	movs	r3, #0
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3730      	adds	r7, #48	@ 0x30
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	58024400 	.word	0x58024400
 8002ddc:	ffff0007 	.word	0xffff0007

08002de0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b086      	sub	sp, #24
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d101      	bne.n	8002df4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e19c      	b.n	800312e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002df4:	4b8a      	ldr	r3, [pc, #552]	@ (8003020 <HAL_RCC_ClockConfig+0x240>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 030f 	and.w	r3, r3, #15
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d910      	bls.n	8002e24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e02:	4b87      	ldr	r3, [pc, #540]	@ (8003020 <HAL_RCC_ClockConfig+0x240>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f023 020f 	bic.w	r2, r3, #15
 8002e0a:	4985      	ldr	r1, [pc, #532]	@ (8003020 <HAL_RCC_ClockConfig+0x240>)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e12:	4b83      	ldr	r3, [pc, #524]	@ (8003020 <HAL_RCC_ClockConfig+0x240>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 030f 	and.w	r3, r3, #15
 8002e1a:	683a      	ldr	r2, [r7, #0]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d001      	beq.n	8002e24 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e184      	b.n	800312e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0304 	and.w	r3, r3, #4
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d010      	beq.n	8002e52 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	691a      	ldr	r2, [r3, #16]
 8002e34:	4b7b      	ldr	r3, [pc, #492]	@ (8003024 <HAL_RCC_ClockConfig+0x244>)
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d908      	bls.n	8002e52 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002e40:	4b78      	ldr	r3, [pc, #480]	@ (8003024 <HAL_RCC_ClockConfig+0x244>)
 8002e42:	699b      	ldr	r3, [r3, #24]
 8002e44:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	4975      	ldr	r1, [pc, #468]	@ (8003024 <HAL_RCC_ClockConfig+0x244>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0308 	and.w	r3, r3, #8
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d010      	beq.n	8002e80 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	695a      	ldr	r2, [r3, #20]
 8002e62:	4b70      	ldr	r3, [pc, #448]	@ (8003024 <HAL_RCC_ClockConfig+0x244>)
 8002e64:	69db      	ldr	r3, [r3, #28]
 8002e66:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d908      	bls.n	8002e80 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002e6e:	4b6d      	ldr	r3, [pc, #436]	@ (8003024 <HAL_RCC_ClockConfig+0x244>)
 8002e70:	69db      	ldr	r3, [r3, #28]
 8002e72:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	695b      	ldr	r3, [r3, #20]
 8002e7a:	496a      	ldr	r1, [pc, #424]	@ (8003024 <HAL_RCC_ClockConfig+0x244>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0310 	and.w	r3, r3, #16
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d010      	beq.n	8002eae <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	699a      	ldr	r2, [r3, #24]
 8002e90:	4b64      	ldr	r3, [pc, #400]	@ (8003024 <HAL_RCC_ClockConfig+0x244>)
 8002e92:	69db      	ldr	r3, [r3, #28]
 8002e94:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d908      	bls.n	8002eae <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002e9c:	4b61      	ldr	r3, [pc, #388]	@ (8003024 <HAL_RCC_ClockConfig+0x244>)
 8002e9e:	69db      	ldr	r3, [r3, #28]
 8002ea0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	495e      	ldr	r1, [pc, #376]	@ (8003024 <HAL_RCC_ClockConfig+0x244>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0320 	and.w	r3, r3, #32
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d010      	beq.n	8002edc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	69da      	ldr	r2, [r3, #28]
 8002ebe:	4b59      	ldr	r3, [pc, #356]	@ (8003024 <HAL_RCC_ClockConfig+0x244>)
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
 8002ec2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d908      	bls.n	8002edc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002eca:	4b56      	ldr	r3, [pc, #344]	@ (8003024 <HAL_RCC_ClockConfig+0x244>)
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
 8002ece:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	69db      	ldr	r3, [r3, #28]
 8002ed6:	4953      	ldr	r1, [pc, #332]	@ (8003024 <HAL_RCC_ClockConfig+0x244>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0302 	and.w	r3, r3, #2
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d010      	beq.n	8002f0a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	68da      	ldr	r2, [r3, #12]
 8002eec:	4b4d      	ldr	r3, [pc, #308]	@ (8003024 <HAL_RCC_ClockConfig+0x244>)
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	f003 030f 	and.w	r3, r3, #15
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d908      	bls.n	8002f0a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ef8:	4b4a      	ldr	r3, [pc, #296]	@ (8003024 <HAL_RCC_ClockConfig+0x244>)
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	f023 020f 	bic.w	r2, r3, #15
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	4947      	ldr	r1, [pc, #284]	@ (8003024 <HAL_RCC_ClockConfig+0x244>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d055      	beq.n	8002fc2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002f16:	4b43      	ldr	r3, [pc, #268]	@ (8003024 <HAL_RCC_ClockConfig+0x244>)
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	4940      	ldr	r1, [pc, #256]	@ (8003024 <HAL_RCC_ClockConfig+0x244>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d107      	bne.n	8002f40 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f30:	4b3c      	ldr	r3, [pc, #240]	@ (8003024 <HAL_RCC_ClockConfig+0x244>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d121      	bne.n	8002f80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e0f6      	b.n	800312e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	2b03      	cmp	r3, #3
 8002f46:	d107      	bne.n	8002f58 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f48:	4b36      	ldr	r3, [pc, #216]	@ (8003024 <HAL_RCC_ClockConfig+0x244>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d115      	bne.n	8002f80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e0ea      	b.n	800312e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d107      	bne.n	8002f70 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f60:	4b30      	ldr	r3, [pc, #192]	@ (8003024 <HAL_RCC_ClockConfig+0x244>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d109      	bne.n	8002f80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e0de      	b.n	800312e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f70:	4b2c      	ldr	r3, [pc, #176]	@ (8003024 <HAL_RCC_ClockConfig+0x244>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0304 	and.w	r3, r3, #4
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d101      	bne.n	8002f80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e0d6      	b.n	800312e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f80:	4b28      	ldr	r3, [pc, #160]	@ (8003024 <HAL_RCC_ClockConfig+0x244>)
 8002f82:	691b      	ldr	r3, [r3, #16]
 8002f84:	f023 0207 	bic.w	r2, r3, #7
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	4925      	ldr	r1, [pc, #148]	@ (8003024 <HAL_RCC_ClockConfig+0x244>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f92:	f7fe f961 	bl	8001258 <HAL_GetTick>
 8002f96:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f98:	e00a      	b.n	8002fb0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f9a:	f7fe f95d 	bl	8001258 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d901      	bls.n	8002fb0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e0be      	b.n	800312e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fb0:	4b1c      	ldr	r3, [pc, #112]	@ (8003024 <HAL_RCC_ClockConfig+0x244>)
 8002fb2:	691b      	ldr	r3, [r3, #16]
 8002fb4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	00db      	lsls	r3, r3, #3
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d1eb      	bne.n	8002f9a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d010      	beq.n	8002ff0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	68da      	ldr	r2, [r3, #12]
 8002fd2:	4b14      	ldr	r3, [pc, #80]	@ (8003024 <HAL_RCC_ClockConfig+0x244>)
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	f003 030f 	and.w	r3, r3, #15
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d208      	bcs.n	8002ff0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fde:	4b11      	ldr	r3, [pc, #68]	@ (8003024 <HAL_RCC_ClockConfig+0x244>)
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	f023 020f 	bic.w	r2, r3, #15
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	490e      	ldr	r1, [pc, #56]	@ (8003024 <HAL_RCC_ClockConfig+0x244>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8003020 <HAL_RCC_ClockConfig+0x240>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 030f 	and.w	r3, r3, #15
 8002ff8:	683a      	ldr	r2, [r7, #0]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d214      	bcs.n	8003028 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ffe:	4b08      	ldr	r3, [pc, #32]	@ (8003020 <HAL_RCC_ClockConfig+0x240>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f023 020f 	bic.w	r2, r3, #15
 8003006:	4906      	ldr	r1, [pc, #24]	@ (8003020 <HAL_RCC_ClockConfig+0x240>)
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	4313      	orrs	r3, r2
 800300c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800300e:	4b04      	ldr	r3, [pc, #16]	@ (8003020 <HAL_RCC_ClockConfig+0x240>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 030f 	and.w	r3, r3, #15
 8003016:	683a      	ldr	r2, [r7, #0]
 8003018:	429a      	cmp	r2, r3
 800301a:	d005      	beq.n	8003028 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e086      	b.n	800312e <HAL_RCC_ClockConfig+0x34e>
 8003020:	52002000 	.word	0x52002000
 8003024:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0304 	and.w	r3, r3, #4
 8003030:	2b00      	cmp	r3, #0
 8003032:	d010      	beq.n	8003056 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	691a      	ldr	r2, [r3, #16]
 8003038:	4b3f      	ldr	r3, [pc, #252]	@ (8003138 <HAL_RCC_ClockConfig+0x358>)
 800303a:	699b      	ldr	r3, [r3, #24]
 800303c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003040:	429a      	cmp	r2, r3
 8003042:	d208      	bcs.n	8003056 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003044:	4b3c      	ldr	r3, [pc, #240]	@ (8003138 <HAL_RCC_ClockConfig+0x358>)
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	691b      	ldr	r3, [r3, #16]
 8003050:	4939      	ldr	r1, [pc, #228]	@ (8003138 <HAL_RCC_ClockConfig+0x358>)
 8003052:	4313      	orrs	r3, r2
 8003054:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0308 	and.w	r3, r3, #8
 800305e:	2b00      	cmp	r3, #0
 8003060:	d010      	beq.n	8003084 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	695a      	ldr	r2, [r3, #20]
 8003066:	4b34      	ldr	r3, [pc, #208]	@ (8003138 <HAL_RCC_ClockConfig+0x358>)
 8003068:	69db      	ldr	r3, [r3, #28]
 800306a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800306e:	429a      	cmp	r2, r3
 8003070:	d208      	bcs.n	8003084 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003072:	4b31      	ldr	r3, [pc, #196]	@ (8003138 <HAL_RCC_ClockConfig+0x358>)
 8003074:	69db      	ldr	r3, [r3, #28]
 8003076:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	492e      	ldr	r1, [pc, #184]	@ (8003138 <HAL_RCC_ClockConfig+0x358>)
 8003080:	4313      	orrs	r3, r2
 8003082:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0310 	and.w	r3, r3, #16
 800308c:	2b00      	cmp	r3, #0
 800308e:	d010      	beq.n	80030b2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	699a      	ldr	r2, [r3, #24]
 8003094:	4b28      	ldr	r3, [pc, #160]	@ (8003138 <HAL_RCC_ClockConfig+0x358>)
 8003096:	69db      	ldr	r3, [r3, #28]
 8003098:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800309c:	429a      	cmp	r2, r3
 800309e:	d208      	bcs.n	80030b2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80030a0:	4b25      	ldr	r3, [pc, #148]	@ (8003138 <HAL_RCC_ClockConfig+0x358>)
 80030a2:	69db      	ldr	r3, [r3, #28]
 80030a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	4922      	ldr	r1, [pc, #136]	@ (8003138 <HAL_RCC_ClockConfig+0x358>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0320 	and.w	r3, r3, #32
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d010      	beq.n	80030e0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	69da      	ldr	r2, [r3, #28]
 80030c2:	4b1d      	ldr	r3, [pc, #116]	@ (8003138 <HAL_RCC_ClockConfig+0x358>)
 80030c4:	6a1b      	ldr	r3, [r3, #32]
 80030c6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d208      	bcs.n	80030e0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80030ce:	4b1a      	ldr	r3, [pc, #104]	@ (8003138 <HAL_RCC_ClockConfig+0x358>)
 80030d0:	6a1b      	ldr	r3, [r3, #32]
 80030d2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	69db      	ldr	r3, [r3, #28]
 80030da:	4917      	ldr	r1, [pc, #92]	@ (8003138 <HAL_RCC_ClockConfig+0x358>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80030e0:	f000 f834 	bl	800314c <HAL_RCC_GetSysClockFreq>
 80030e4:	4602      	mov	r2, r0
 80030e6:	4b14      	ldr	r3, [pc, #80]	@ (8003138 <HAL_RCC_ClockConfig+0x358>)
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	0a1b      	lsrs	r3, r3, #8
 80030ec:	f003 030f 	and.w	r3, r3, #15
 80030f0:	4912      	ldr	r1, [pc, #72]	@ (800313c <HAL_RCC_ClockConfig+0x35c>)
 80030f2:	5ccb      	ldrb	r3, [r1, r3]
 80030f4:	f003 031f 	and.w	r3, r3, #31
 80030f8:	fa22 f303 	lsr.w	r3, r2, r3
 80030fc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80030fe:	4b0e      	ldr	r3, [pc, #56]	@ (8003138 <HAL_RCC_ClockConfig+0x358>)
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	f003 030f 	and.w	r3, r3, #15
 8003106:	4a0d      	ldr	r2, [pc, #52]	@ (800313c <HAL_RCC_ClockConfig+0x35c>)
 8003108:	5cd3      	ldrb	r3, [r2, r3]
 800310a:	f003 031f 	and.w	r3, r3, #31
 800310e:	693a      	ldr	r2, [r7, #16]
 8003110:	fa22 f303 	lsr.w	r3, r2, r3
 8003114:	4a0a      	ldr	r2, [pc, #40]	@ (8003140 <HAL_RCC_ClockConfig+0x360>)
 8003116:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003118:	4a0a      	ldr	r2, [pc, #40]	@ (8003144 <HAL_RCC_ClockConfig+0x364>)
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800311e:	4b0a      	ldr	r3, [pc, #40]	@ (8003148 <HAL_RCC_ClockConfig+0x368>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4618      	mov	r0, r3
 8003124:	f7fe f84e 	bl	80011c4 <HAL_InitTick>
 8003128:	4603      	mov	r3, r0
 800312a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800312c:	7bfb      	ldrb	r3, [r7, #15]
}
 800312e:	4618      	mov	r0, r3
 8003130:	3718      	adds	r7, #24
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	58024400 	.word	0x58024400
 800313c:	08008c24 	.word	0x08008c24
 8003140:	24000004 	.word	0x24000004
 8003144:	24000000 	.word	0x24000000
 8003148:	24000008 	.word	0x24000008

0800314c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800314c:	b480      	push	{r7}
 800314e:	b089      	sub	sp, #36	@ 0x24
 8003150:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003152:	4bb3      	ldr	r3, [pc, #716]	@ (8003420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800315a:	2b18      	cmp	r3, #24
 800315c:	f200 8155 	bhi.w	800340a <HAL_RCC_GetSysClockFreq+0x2be>
 8003160:	a201      	add	r2, pc, #4	@ (adr r2, 8003168 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003166:	bf00      	nop
 8003168:	080031cd 	.word	0x080031cd
 800316c:	0800340b 	.word	0x0800340b
 8003170:	0800340b 	.word	0x0800340b
 8003174:	0800340b 	.word	0x0800340b
 8003178:	0800340b 	.word	0x0800340b
 800317c:	0800340b 	.word	0x0800340b
 8003180:	0800340b 	.word	0x0800340b
 8003184:	0800340b 	.word	0x0800340b
 8003188:	080031f3 	.word	0x080031f3
 800318c:	0800340b 	.word	0x0800340b
 8003190:	0800340b 	.word	0x0800340b
 8003194:	0800340b 	.word	0x0800340b
 8003198:	0800340b 	.word	0x0800340b
 800319c:	0800340b 	.word	0x0800340b
 80031a0:	0800340b 	.word	0x0800340b
 80031a4:	0800340b 	.word	0x0800340b
 80031a8:	080031f9 	.word	0x080031f9
 80031ac:	0800340b 	.word	0x0800340b
 80031b0:	0800340b 	.word	0x0800340b
 80031b4:	0800340b 	.word	0x0800340b
 80031b8:	0800340b 	.word	0x0800340b
 80031bc:	0800340b 	.word	0x0800340b
 80031c0:	0800340b 	.word	0x0800340b
 80031c4:	0800340b 	.word	0x0800340b
 80031c8:	080031ff 	.word	0x080031ff
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80031cc:	4b94      	ldr	r3, [pc, #592]	@ (8003420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0320 	and.w	r3, r3, #32
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d009      	beq.n	80031ec <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80031d8:	4b91      	ldr	r3, [pc, #580]	@ (8003420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	08db      	lsrs	r3, r3, #3
 80031de:	f003 0303 	and.w	r3, r3, #3
 80031e2:	4a90      	ldr	r2, [pc, #576]	@ (8003424 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80031e4:	fa22 f303 	lsr.w	r3, r2, r3
 80031e8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80031ea:	e111      	b.n	8003410 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80031ec:	4b8d      	ldr	r3, [pc, #564]	@ (8003424 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80031ee:	61bb      	str	r3, [r7, #24]
      break;
 80031f0:	e10e      	b.n	8003410 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80031f2:	4b8d      	ldr	r3, [pc, #564]	@ (8003428 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80031f4:	61bb      	str	r3, [r7, #24]
      break;
 80031f6:	e10b      	b.n	8003410 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80031f8:	4b8c      	ldr	r3, [pc, #560]	@ (800342c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80031fa:	61bb      	str	r3, [r7, #24]
      break;
 80031fc:	e108      	b.n	8003410 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80031fe:	4b88      	ldr	r3, [pc, #544]	@ (8003420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003202:	f003 0303 	and.w	r3, r3, #3
 8003206:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003208:	4b85      	ldr	r3, [pc, #532]	@ (8003420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800320a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800320c:	091b      	lsrs	r3, r3, #4
 800320e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003212:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003214:	4b82      	ldr	r3, [pc, #520]	@ (8003420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003218:	f003 0301 	and.w	r3, r3, #1
 800321c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800321e:	4b80      	ldr	r3, [pc, #512]	@ (8003420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003220:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003222:	08db      	lsrs	r3, r3, #3
 8003224:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003228:	68fa      	ldr	r2, [r7, #12]
 800322a:	fb02 f303 	mul.w	r3, r2, r3
 800322e:	ee07 3a90 	vmov	s15, r3
 8003232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003236:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	2b00      	cmp	r3, #0
 800323e:	f000 80e1 	beq.w	8003404 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	2b02      	cmp	r3, #2
 8003246:	f000 8083 	beq.w	8003350 <HAL_RCC_GetSysClockFreq+0x204>
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	2b02      	cmp	r3, #2
 800324e:	f200 80a1 	bhi.w	8003394 <HAL_RCC_GetSysClockFreq+0x248>
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d003      	beq.n	8003260 <HAL_RCC_GetSysClockFreq+0x114>
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d056      	beq.n	800330c <HAL_RCC_GetSysClockFreq+0x1c0>
 800325e:	e099      	b.n	8003394 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003260:	4b6f      	ldr	r3, [pc, #444]	@ (8003420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0320 	and.w	r3, r3, #32
 8003268:	2b00      	cmp	r3, #0
 800326a:	d02d      	beq.n	80032c8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800326c:	4b6c      	ldr	r3, [pc, #432]	@ (8003420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	08db      	lsrs	r3, r3, #3
 8003272:	f003 0303 	and.w	r3, r3, #3
 8003276:	4a6b      	ldr	r2, [pc, #428]	@ (8003424 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003278:	fa22 f303 	lsr.w	r3, r2, r3
 800327c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	ee07 3a90 	vmov	s15, r3
 8003284:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	ee07 3a90 	vmov	s15, r3
 800328e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003292:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003296:	4b62      	ldr	r3, [pc, #392]	@ (8003420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800329a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800329e:	ee07 3a90 	vmov	s15, r3
 80032a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80032aa:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003430 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80032ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032c2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80032c6:	e087      	b.n	80033d8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	ee07 3a90 	vmov	s15, r3
 80032ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032d2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003434 <HAL_RCC_GetSysClockFreq+0x2e8>
 80032d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032da:	4b51      	ldr	r3, [pc, #324]	@ (8003420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032e2:	ee07 3a90 	vmov	s15, r3
 80032e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80032ee:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003430 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80032fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003302:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003306:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800330a:	e065      	b.n	80033d8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	ee07 3a90 	vmov	s15, r3
 8003312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003316:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003438 <HAL_RCC_GetSysClockFreq+0x2ec>
 800331a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800331e:	4b40      	ldr	r3, [pc, #256]	@ (8003420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003326:	ee07 3a90 	vmov	s15, r3
 800332a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800332e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003332:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003430 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003336:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800333a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800333e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003342:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800334a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800334e:	e043      	b.n	80033d8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	ee07 3a90 	vmov	s15, r3
 8003356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800335a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800343c <HAL_RCC_GetSysClockFreq+0x2f0>
 800335e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003362:	4b2f      	ldr	r3, [pc, #188]	@ (8003420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800336a:	ee07 3a90 	vmov	s15, r3
 800336e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003372:	ed97 6a02 	vldr	s12, [r7, #8]
 8003376:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003430 <HAL_RCC_GetSysClockFreq+0x2e4>
 800337a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800337e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003382:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003386:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800338a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800338e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003392:	e021      	b.n	80033d8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	ee07 3a90 	vmov	s15, r3
 800339a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800339e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003438 <HAL_RCC_GetSysClockFreq+0x2ec>
 80033a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033a6:	4b1e      	ldr	r3, [pc, #120]	@ (8003420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033ae:	ee07 3a90 	vmov	s15, r3
 80033b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80033ba:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003430 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80033ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80033d6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80033d8:	4b11      	ldr	r3, [pc, #68]	@ (8003420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033dc:	0a5b      	lsrs	r3, r3, #9
 80033de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80033e2:	3301      	adds	r3, #1
 80033e4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	ee07 3a90 	vmov	s15, r3
 80033ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80033f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80033f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033fc:	ee17 3a90 	vmov	r3, s15
 8003400:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003402:	e005      	b.n	8003410 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003404:	2300      	movs	r3, #0
 8003406:	61bb      	str	r3, [r7, #24]
      break;
 8003408:	e002      	b.n	8003410 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800340a:	4b07      	ldr	r3, [pc, #28]	@ (8003428 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800340c:	61bb      	str	r3, [r7, #24]
      break;
 800340e:	bf00      	nop
  }

  return sysclockfreq;
 8003410:	69bb      	ldr	r3, [r7, #24]
}
 8003412:	4618      	mov	r0, r3
 8003414:	3724      	adds	r7, #36	@ 0x24
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	58024400 	.word	0x58024400
 8003424:	03d09000 	.word	0x03d09000
 8003428:	003d0900 	.word	0x003d0900
 800342c:	007a1200 	.word	0x007a1200
 8003430:	46000000 	.word	0x46000000
 8003434:	4c742400 	.word	0x4c742400
 8003438:	4a742400 	.word	0x4a742400
 800343c:	4af42400 	.word	0x4af42400

08003440 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003446:	f7ff fe81 	bl	800314c <HAL_RCC_GetSysClockFreq>
 800344a:	4602      	mov	r2, r0
 800344c:	4b10      	ldr	r3, [pc, #64]	@ (8003490 <HAL_RCC_GetHCLKFreq+0x50>)
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	0a1b      	lsrs	r3, r3, #8
 8003452:	f003 030f 	and.w	r3, r3, #15
 8003456:	490f      	ldr	r1, [pc, #60]	@ (8003494 <HAL_RCC_GetHCLKFreq+0x54>)
 8003458:	5ccb      	ldrb	r3, [r1, r3]
 800345a:	f003 031f 	and.w	r3, r3, #31
 800345e:	fa22 f303 	lsr.w	r3, r2, r3
 8003462:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003464:	4b0a      	ldr	r3, [pc, #40]	@ (8003490 <HAL_RCC_GetHCLKFreq+0x50>)
 8003466:	699b      	ldr	r3, [r3, #24]
 8003468:	f003 030f 	and.w	r3, r3, #15
 800346c:	4a09      	ldr	r2, [pc, #36]	@ (8003494 <HAL_RCC_GetHCLKFreq+0x54>)
 800346e:	5cd3      	ldrb	r3, [r2, r3]
 8003470:	f003 031f 	and.w	r3, r3, #31
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	fa22 f303 	lsr.w	r3, r2, r3
 800347a:	4a07      	ldr	r2, [pc, #28]	@ (8003498 <HAL_RCC_GetHCLKFreq+0x58>)
 800347c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800347e:	4a07      	ldr	r2, [pc, #28]	@ (800349c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003484:	4b04      	ldr	r3, [pc, #16]	@ (8003498 <HAL_RCC_GetHCLKFreq+0x58>)
 8003486:	681b      	ldr	r3, [r3, #0]
}
 8003488:	4618      	mov	r0, r3
 800348a:	3708      	adds	r7, #8
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	58024400 	.word	0x58024400
 8003494:	08008c24 	.word	0x08008c24
 8003498:	24000004 	.word	0x24000004
 800349c:	24000000 	.word	0x24000000

080034a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80034a4:	f7ff ffcc 	bl	8003440 <HAL_RCC_GetHCLKFreq>
 80034a8:	4602      	mov	r2, r0
 80034aa:	4b06      	ldr	r3, [pc, #24]	@ (80034c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034ac:	69db      	ldr	r3, [r3, #28]
 80034ae:	091b      	lsrs	r3, r3, #4
 80034b0:	f003 0307 	and.w	r3, r3, #7
 80034b4:	4904      	ldr	r1, [pc, #16]	@ (80034c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80034b6:	5ccb      	ldrb	r3, [r1, r3]
 80034b8:	f003 031f 	and.w	r3, r3, #31
 80034bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	58024400 	.word	0x58024400
 80034c8:	08008c24 	.word	0x08008c24

080034cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80034d0:	f7ff ffb6 	bl	8003440 <HAL_RCC_GetHCLKFreq>
 80034d4:	4602      	mov	r2, r0
 80034d6:	4b06      	ldr	r3, [pc, #24]	@ (80034f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034d8:	69db      	ldr	r3, [r3, #28]
 80034da:	0a1b      	lsrs	r3, r3, #8
 80034dc:	f003 0307 	and.w	r3, r3, #7
 80034e0:	4904      	ldr	r1, [pc, #16]	@ (80034f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80034e2:	5ccb      	ldrb	r3, [r1, r3]
 80034e4:	f003 031f 	and.w	r3, r3, #31
 80034e8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	58024400 	.word	0x58024400
 80034f4:	08008c24 	.word	0x08008c24

080034f8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034fc:	b0ca      	sub	sp, #296	@ 0x128
 80034fe:	af00      	add	r7, sp, #0
 8003500:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003504:	2300      	movs	r3, #0
 8003506:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800350a:	2300      	movs	r3, #0
 800350c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003510:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003518:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800351c:	2500      	movs	r5, #0
 800351e:	ea54 0305 	orrs.w	r3, r4, r5
 8003522:	d049      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003524:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003528:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800352a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800352e:	d02f      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003530:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003534:	d828      	bhi.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003536:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800353a:	d01a      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800353c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003540:	d822      	bhi.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003542:	2b00      	cmp	r3, #0
 8003544:	d003      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003546:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800354a:	d007      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800354c:	e01c      	b.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800354e:	4bb8      	ldr	r3, [pc, #736]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003552:	4ab7      	ldr	r2, [pc, #732]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003554:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003558:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800355a:	e01a      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800355c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003560:	3308      	adds	r3, #8
 8003562:	2102      	movs	r1, #2
 8003564:	4618      	mov	r0, r3
 8003566:	f001 fc8f 	bl	8004e88 <RCCEx_PLL2_Config>
 800356a:	4603      	mov	r3, r0
 800356c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003570:	e00f      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003572:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003576:	3328      	adds	r3, #40	@ 0x28
 8003578:	2102      	movs	r1, #2
 800357a:	4618      	mov	r0, r3
 800357c:	f001 fd36 	bl	8004fec <RCCEx_PLL3_Config>
 8003580:	4603      	mov	r3, r0
 8003582:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003586:	e004      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800358e:	e000      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003590:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003592:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003596:	2b00      	cmp	r3, #0
 8003598:	d10a      	bne.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800359a:	4ba5      	ldr	r3, [pc, #660]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800359c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800359e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80035a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035a8:	4aa1      	ldr	r2, [pc, #644]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035aa:	430b      	orrs	r3, r1
 80035ac:	6513      	str	r3, [r2, #80]	@ 0x50
 80035ae:	e003      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80035b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80035c4:	f04f 0900 	mov.w	r9, #0
 80035c8:	ea58 0309 	orrs.w	r3, r8, r9
 80035cc:	d047      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80035ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035d4:	2b04      	cmp	r3, #4
 80035d6:	d82a      	bhi.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80035d8:	a201      	add	r2, pc, #4	@ (adr r2, 80035e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80035da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035de:	bf00      	nop
 80035e0:	080035f5 	.word	0x080035f5
 80035e4:	08003603 	.word	0x08003603
 80035e8:	08003619 	.word	0x08003619
 80035ec:	08003637 	.word	0x08003637
 80035f0:	08003637 	.word	0x08003637
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035f4:	4b8e      	ldr	r3, [pc, #568]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035f8:	4a8d      	ldr	r2, [pc, #564]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003600:	e01a      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003602:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003606:	3308      	adds	r3, #8
 8003608:	2100      	movs	r1, #0
 800360a:	4618      	mov	r0, r3
 800360c:	f001 fc3c 	bl	8004e88 <RCCEx_PLL2_Config>
 8003610:	4603      	mov	r3, r0
 8003612:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003616:	e00f      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003618:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800361c:	3328      	adds	r3, #40	@ 0x28
 800361e:	2100      	movs	r1, #0
 8003620:	4618      	mov	r0, r3
 8003622:	f001 fce3 	bl	8004fec <RCCEx_PLL3_Config>
 8003626:	4603      	mov	r3, r0
 8003628:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800362c:	e004      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003634:	e000      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003636:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003638:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800363c:	2b00      	cmp	r3, #0
 800363e:	d10a      	bne.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003640:	4b7b      	ldr	r3, [pc, #492]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003642:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003644:	f023 0107 	bic.w	r1, r3, #7
 8003648:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800364c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800364e:	4a78      	ldr	r2, [pc, #480]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003650:	430b      	orrs	r3, r1
 8003652:	6513      	str	r3, [r2, #80]	@ 0x50
 8003654:	e003      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003656:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800365a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800365e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003666:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800366a:	f04f 0b00 	mov.w	fp, #0
 800366e:	ea5a 030b 	orrs.w	r3, sl, fp
 8003672:	d04c      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003674:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003678:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800367a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800367e:	d030      	beq.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003680:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003684:	d829      	bhi.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003686:	2bc0      	cmp	r3, #192	@ 0xc0
 8003688:	d02d      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800368a:	2bc0      	cmp	r3, #192	@ 0xc0
 800368c:	d825      	bhi.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800368e:	2b80      	cmp	r3, #128	@ 0x80
 8003690:	d018      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003692:	2b80      	cmp	r3, #128	@ 0x80
 8003694:	d821      	bhi.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003696:	2b00      	cmp	r3, #0
 8003698:	d002      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800369a:	2b40      	cmp	r3, #64	@ 0x40
 800369c:	d007      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800369e:	e01c      	b.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036a0:	4b63      	ldr	r3, [pc, #396]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036a4:	4a62      	ldr	r2, [pc, #392]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80036ac:	e01c      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036b2:	3308      	adds	r3, #8
 80036b4:	2100      	movs	r1, #0
 80036b6:	4618      	mov	r0, r3
 80036b8:	f001 fbe6 	bl	8004e88 <RCCEx_PLL2_Config>
 80036bc:	4603      	mov	r3, r0
 80036be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80036c2:	e011      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036c8:	3328      	adds	r3, #40	@ 0x28
 80036ca:	2100      	movs	r1, #0
 80036cc:	4618      	mov	r0, r3
 80036ce:	f001 fc8d 	bl	8004fec <RCCEx_PLL3_Config>
 80036d2:	4603      	mov	r3, r0
 80036d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80036d8:	e006      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80036e0:	e002      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80036e2:	bf00      	nop
 80036e4:	e000      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80036e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d10a      	bne.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80036f0:	4b4f      	ldr	r3, [pc, #316]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036f4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80036f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036fe:	4a4c      	ldr	r2, [pc, #304]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003700:	430b      	orrs	r3, r1
 8003702:	6513      	str	r3, [r2, #80]	@ 0x50
 8003704:	e003      	b.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003706:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800370a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800370e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003716:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800371a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800371e:	2300      	movs	r3, #0
 8003720:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003724:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003728:	460b      	mov	r3, r1
 800372a:	4313      	orrs	r3, r2
 800372c:	d053      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800372e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003732:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003736:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800373a:	d035      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800373c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003740:	d82e      	bhi.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003742:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003746:	d031      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003748:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800374c:	d828      	bhi.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800374e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003752:	d01a      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003754:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003758:	d822      	bhi.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800375a:	2b00      	cmp	r3, #0
 800375c:	d003      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800375e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003762:	d007      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003764:	e01c      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003766:	4b32      	ldr	r3, [pc, #200]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800376a:	4a31      	ldr	r2, [pc, #196]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800376c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003770:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003772:	e01c      	b.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003774:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003778:	3308      	adds	r3, #8
 800377a:	2100      	movs	r1, #0
 800377c:	4618      	mov	r0, r3
 800377e:	f001 fb83 	bl	8004e88 <RCCEx_PLL2_Config>
 8003782:	4603      	mov	r3, r0
 8003784:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003788:	e011      	b.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800378a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800378e:	3328      	adds	r3, #40	@ 0x28
 8003790:	2100      	movs	r1, #0
 8003792:	4618      	mov	r0, r3
 8003794:	f001 fc2a 	bl	8004fec <RCCEx_PLL3_Config>
 8003798:	4603      	mov	r3, r0
 800379a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800379e:	e006      	b.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037a6:	e002      	b.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80037a8:	bf00      	nop
 80037aa:	e000      	b.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80037ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d10b      	bne.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80037b6:	4b1e      	ldr	r3, [pc, #120]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037ba:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80037be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037c2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80037c6:	4a1a      	ldr	r2, [pc, #104]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037c8:	430b      	orrs	r3, r1
 80037ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80037cc:	e003      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80037d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037de:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80037e2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80037e6:	2300      	movs	r3, #0
 80037e8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80037ec:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80037f0:	460b      	mov	r3, r1
 80037f2:	4313      	orrs	r3, r2
 80037f4:	d056      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80037f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80037fe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003802:	d038      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003804:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003808:	d831      	bhi.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800380a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800380e:	d034      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003810:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003814:	d82b      	bhi.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003816:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800381a:	d01d      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800381c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003820:	d825      	bhi.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003822:	2b00      	cmp	r3, #0
 8003824:	d006      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003826:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800382a:	d00a      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800382c:	e01f      	b.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800382e:	bf00      	nop
 8003830:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003834:	4ba2      	ldr	r3, [pc, #648]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003838:	4aa1      	ldr	r2, [pc, #644]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800383a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800383e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003840:	e01c      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003842:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003846:	3308      	adds	r3, #8
 8003848:	2100      	movs	r1, #0
 800384a:	4618      	mov	r0, r3
 800384c:	f001 fb1c 	bl	8004e88 <RCCEx_PLL2_Config>
 8003850:	4603      	mov	r3, r0
 8003852:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003856:	e011      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003858:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800385c:	3328      	adds	r3, #40	@ 0x28
 800385e:	2100      	movs	r1, #0
 8003860:	4618      	mov	r0, r3
 8003862:	f001 fbc3 	bl	8004fec <RCCEx_PLL3_Config>
 8003866:	4603      	mov	r3, r0
 8003868:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800386c:	e006      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003874:	e002      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003876:	bf00      	nop
 8003878:	e000      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800387a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800387c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003880:	2b00      	cmp	r3, #0
 8003882:	d10b      	bne.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003884:	4b8e      	ldr	r3, [pc, #568]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003886:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003888:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800388c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003890:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003894:	4a8a      	ldr	r2, [pc, #552]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003896:	430b      	orrs	r3, r1
 8003898:	6593      	str	r3, [r2, #88]	@ 0x58
 800389a:	e003      	b.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800389c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80038a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ac:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80038b0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80038b4:	2300      	movs	r3, #0
 80038b6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80038ba:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80038be:	460b      	mov	r3, r1
 80038c0:	4313      	orrs	r3, r2
 80038c2:	d03a      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80038c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038ca:	2b30      	cmp	r3, #48	@ 0x30
 80038cc:	d01f      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x416>
 80038ce:	2b30      	cmp	r3, #48	@ 0x30
 80038d0:	d819      	bhi.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80038d2:	2b20      	cmp	r3, #32
 80038d4:	d00c      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80038d6:	2b20      	cmp	r3, #32
 80038d8:	d815      	bhi.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d019      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80038de:	2b10      	cmp	r3, #16
 80038e0:	d111      	bne.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038e2:	4b77      	ldr	r3, [pc, #476]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038e6:	4a76      	ldr	r2, [pc, #472]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80038ee:	e011      	b.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80038f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038f4:	3308      	adds	r3, #8
 80038f6:	2102      	movs	r1, #2
 80038f8:	4618      	mov	r0, r3
 80038fa:	f001 fac5 	bl	8004e88 <RCCEx_PLL2_Config>
 80038fe:	4603      	mov	r3, r0
 8003900:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003904:	e006      	b.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800390c:	e002      	b.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800390e:	bf00      	nop
 8003910:	e000      	b.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003912:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003914:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003918:	2b00      	cmp	r3, #0
 800391a:	d10a      	bne.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800391c:	4b68      	ldr	r3, [pc, #416]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800391e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003920:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003924:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003928:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800392a:	4a65      	ldr	r2, [pc, #404]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800392c:	430b      	orrs	r3, r1
 800392e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003930:	e003      	b.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003932:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003936:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800393a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800393e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003942:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003946:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800394a:	2300      	movs	r3, #0
 800394c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003950:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003954:	460b      	mov	r3, r1
 8003956:	4313      	orrs	r3, r2
 8003958:	d051      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800395a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800395e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003960:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003964:	d035      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003966:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800396a:	d82e      	bhi.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800396c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003970:	d031      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003972:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003976:	d828      	bhi.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003978:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800397c:	d01a      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800397e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003982:	d822      	bhi.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003984:	2b00      	cmp	r3, #0
 8003986:	d003      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003988:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800398c:	d007      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800398e:	e01c      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003990:	4b4b      	ldr	r3, [pc, #300]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003994:	4a4a      	ldr	r2, [pc, #296]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003996:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800399a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800399c:	e01c      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800399e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039a2:	3308      	adds	r3, #8
 80039a4:	2100      	movs	r1, #0
 80039a6:	4618      	mov	r0, r3
 80039a8:	f001 fa6e 	bl	8004e88 <RCCEx_PLL2_Config>
 80039ac:	4603      	mov	r3, r0
 80039ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80039b2:	e011      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80039b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039b8:	3328      	adds	r3, #40	@ 0x28
 80039ba:	2100      	movs	r1, #0
 80039bc:	4618      	mov	r0, r3
 80039be:	f001 fb15 	bl	8004fec <RCCEx_PLL3_Config>
 80039c2:	4603      	mov	r3, r0
 80039c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80039c8:	e006      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80039d0:	e002      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80039d2:	bf00      	nop
 80039d4:	e000      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80039d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d10a      	bne.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80039e0:	4b37      	ldr	r3, [pc, #220]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039e4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80039e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039ee:	4a34      	ldr	r2, [pc, #208]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039f0:	430b      	orrs	r3, r1
 80039f2:	6513      	str	r3, [r2, #80]	@ 0x50
 80039f4:	e003      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80039fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a06:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003a0a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003a0e:	2300      	movs	r3, #0
 8003a10:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003a14:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003a18:	460b      	mov	r3, r1
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	d056      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a28:	d033      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003a2a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a2e:	d82c      	bhi.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003a30:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a34:	d02f      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003a36:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a3a:	d826      	bhi.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003a3c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003a40:	d02b      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003a42:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003a46:	d820      	bhi.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003a48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a4c:	d012      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003a4e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a52:	d81a      	bhi.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d022      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003a58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a5c:	d115      	bne.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a62:	3308      	adds	r3, #8
 8003a64:	2101      	movs	r1, #1
 8003a66:	4618      	mov	r0, r3
 8003a68:	f001 fa0e 	bl	8004e88 <RCCEx_PLL2_Config>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003a72:	e015      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a78:	3328      	adds	r3, #40	@ 0x28
 8003a7a:	2101      	movs	r1, #1
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f001 fab5 	bl	8004fec <RCCEx_PLL3_Config>
 8003a82:	4603      	mov	r3, r0
 8003a84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003a88:	e00a      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a90:	e006      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003a92:	bf00      	nop
 8003a94:	e004      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003a96:	bf00      	nop
 8003a98:	e002      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003a9a:	bf00      	nop
 8003a9c:	e000      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003a9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003aa0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d10d      	bne.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003aa8:	4b05      	ldr	r3, [pc, #20]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003aaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003aac:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ab4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ab6:	4a02      	ldr	r2, [pc, #8]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ab8:	430b      	orrs	r3, r1
 8003aba:	6513      	str	r3, [r2, #80]	@ 0x50
 8003abc:	e006      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003abe:	bf00      	nop
 8003ac0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ac4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ac8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003acc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003ad8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003adc:	2300      	movs	r3, #0
 8003ade:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003ae2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003ae6:	460b      	mov	r3, r1
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	d055      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003af0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003af4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003af8:	d033      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003afa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003afe:	d82c      	bhi.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003b00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b04:	d02f      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003b06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b0a:	d826      	bhi.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003b0c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003b10:	d02b      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003b12:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003b16:	d820      	bhi.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003b18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b1c:	d012      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003b1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b22:	d81a      	bhi.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d022      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003b28:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b2c:	d115      	bne.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b32:	3308      	adds	r3, #8
 8003b34:	2101      	movs	r1, #1
 8003b36:	4618      	mov	r0, r3
 8003b38:	f001 f9a6 	bl	8004e88 <RCCEx_PLL2_Config>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003b42:	e015      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b48:	3328      	adds	r3, #40	@ 0x28
 8003b4a:	2101      	movs	r1, #1
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f001 fa4d 	bl	8004fec <RCCEx_PLL3_Config>
 8003b52:	4603      	mov	r3, r0
 8003b54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003b58:	e00a      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b60:	e006      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003b62:	bf00      	nop
 8003b64:	e004      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003b66:	bf00      	nop
 8003b68:	e002      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003b6a:	bf00      	nop
 8003b6c:	e000      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003b6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d10b      	bne.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003b78:	4ba3      	ldr	r3, [pc, #652]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b7c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b84:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003b88:	4a9f      	ldr	r2, [pc, #636]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b8a:	430b      	orrs	r3, r1
 8003b8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b8e:	e003      	b.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003ba4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003ba8:	2300      	movs	r3, #0
 8003baa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003bae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003bb2:	460b      	mov	r3, r1
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	d037      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003bb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bbe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003bc2:	d00e      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003bc4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003bc8:	d816      	bhi.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d018      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003bce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003bd2:	d111      	bne.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bd4:	4b8c      	ldr	r3, [pc, #560]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bd8:	4a8b      	ldr	r2, [pc, #556]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bde:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003be0:	e00f      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003be6:	3308      	adds	r3, #8
 8003be8:	2101      	movs	r1, #1
 8003bea:	4618      	mov	r0, r3
 8003bec:	f001 f94c 	bl	8004e88 <RCCEx_PLL2_Config>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003bf6:	e004      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003bfe:	e000      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003c00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d10a      	bne.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003c0a:	4b7f      	ldr	r3, [pc, #508]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c0e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c18:	4a7b      	ldr	r2, [pc, #492]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c1a:	430b      	orrs	r3, r1
 8003c1c:	6513      	str	r3, [r2, #80]	@ 0x50
 8003c1e:	e003      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c24:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c30:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003c34:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c38:	2300      	movs	r3, #0
 8003c3a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003c3e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003c42:	460b      	mov	r3, r1
 8003c44:	4313      	orrs	r3, r2
 8003c46:	d039      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003c48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c4e:	2b03      	cmp	r3, #3
 8003c50:	d81c      	bhi.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003c52:	a201      	add	r2, pc, #4	@ (adr r2, 8003c58 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c58:	08003c95 	.word	0x08003c95
 8003c5c:	08003c69 	.word	0x08003c69
 8003c60:	08003c77 	.word	0x08003c77
 8003c64:	08003c95 	.word	0x08003c95
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c68:	4b67      	ldr	r3, [pc, #412]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c6c:	4a66      	ldr	r2, [pc, #408]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003c74:	e00f      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003c76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c7a:	3308      	adds	r3, #8
 8003c7c:	2102      	movs	r1, #2
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f001 f902 	bl	8004e88 <RCCEx_PLL2_Config>
 8003c84:	4603      	mov	r3, r0
 8003c86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003c8a:	e004      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c92:	e000      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003c94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d10a      	bne.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003c9e:	4b5a      	ldr	r3, [pc, #360]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ca0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ca2:	f023 0103 	bic.w	r1, r3, #3
 8003ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003caa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cac:	4a56      	ldr	r2, [pc, #344]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cae:	430b      	orrs	r3, r1
 8003cb0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003cb2:	e003      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cb8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003cbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003cc8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ccc:	2300      	movs	r3, #0
 8003cce:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003cd2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003cd6:	460b      	mov	r3, r1
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	f000 809f 	beq.w	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cde:	4b4b      	ldr	r3, [pc, #300]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a4a      	ldr	r2, [pc, #296]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003ce4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ce8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003cea:	f7fd fab5 	bl	8001258 <HAL_GetTick>
 8003cee:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cf2:	e00b      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cf4:	f7fd fab0 	bl	8001258 <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	2b64      	cmp	r3, #100	@ 0x64
 8003d02:	d903      	bls.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d0a:	e005      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d0c:	4b3f      	ldr	r3, [pc, #252]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d0ed      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003d18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d179      	bne.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003d20:	4b39      	ldr	r3, [pc, #228]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d22:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d28:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003d2c:	4053      	eors	r3, r2
 8003d2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d015      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d36:	4b34      	ldr	r3, [pc, #208]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d3e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d42:	4b31      	ldr	r3, [pc, #196]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d46:	4a30      	ldr	r2, [pc, #192]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d4c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d4e:	4b2e      	ldr	r3, [pc, #184]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d52:	4a2d      	ldr	r2, [pc, #180]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d58:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003d5a:	4a2b      	ldr	r2, [pc, #172]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d60:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d66:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003d6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d6e:	d118      	bne.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d70:	f7fd fa72 	bl	8001258 <HAL_GetTick>
 8003d74:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d78:	e00d      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d7a:	f7fd fa6d 	bl	8001258 <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003d84:	1ad2      	subs	r2, r2, r3
 8003d86:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d903      	bls.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003d94:	e005      	b.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d96:	4b1c      	ldr	r3, [pc, #112]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d0eb      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003da2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d129      	bne.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003db2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003db6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003dba:	d10e      	bne.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003dbc:	4b12      	ldr	r3, [pc, #72]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dbe:	691b      	ldr	r3, [r3, #16]
 8003dc0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dc8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003dcc:	091a      	lsrs	r2, r3, #4
 8003dce:	4b10      	ldr	r3, [pc, #64]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	4a0d      	ldr	r2, [pc, #52]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dd4:	430b      	orrs	r3, r1
 8003dd6:	6113      	str	r3, [r2, #16]
 8003dd8:	e005      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003dda:	4b0b      	ldr	r3, [pc, #44]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	4a0a      	ldr	r2, [pc, #40]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003de0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003de4:	6113      	str	r3, [r2, #16]
 8003de6:	4b08      	ldr	r3, [pc, #32]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003de8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003df2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003df6:	4a04      	ldr	r2, [pc, #16]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003df8:	430b      	orrs	r3, r1
 8003dfa:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dfc:	e00e      	b.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003dfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e02:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003e06:	e009      	b.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003e08:	58024400 	.word	0x58024400
 8003e0c:	58024800 	.word	0x58024800
 8003e10:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e24:	f002 0301 	and.w	r3, r2, #1
 8003e28:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003e32:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003e36:	460b      	mov	r3, r1
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	f000 8089 	beq.w	8003f50 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e42:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e44:	2b28      	cmp	r3, #40	@ 0x28
 8003e46:	d86b      	bhi.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003e48:	a201      	add	r2, pc, #4	@ (adr r2, 8003e50 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e4e:	bf00      	nop
 8003e50:	08003f29 	.word	0x08003f29
 8003e54:	08003f21 	.word	0x08003f21
 8003e58:	08003f21 	.word	0x08003f21
 8003e5c:	08003f21 	.word	0x08003f21
 8003e60:	08003f21 	.word	0x08003f21
 8003e64:	08003f21 	.word	0x08003f21
 8003e68:	08003f21 	.word	0x08003f21
 8003e6c:	08003f21 	.word	0x08003f21
 8003e70:	08003ef5 	.word	0x08003ef5
 8003e74:	08003f21 	.word	0x08003f21
 8003e78:	08003f21 	.word	0x08003f21
 8003e7c:	08003f21 	.word	0x08003f21
 8003e80:	08003f21 	.word	0x08003f21
 8003e84:	08003f21 	.word	0x08003f21
 8003e88:	08003f21 	.word	0x08003f21
 8003e8c:	08003f21 	.word	0x08003f21
 8003e90:	08003f0b 	.word	0x08003f0b
 8003e94:	08003f21 	.word	0x08003f21
 8003e98:	08003f21 	.word	0x08003f21
 8003e9c:	08003f21 	.word	0x08003f21
 8003ea0:	08003f21 	.word	0x08003f21
 8003ea4:	08003f21 	.word	0x08003f21
 8003ea8:	08003f21 	.word	0x08003f21
 8003eac:	08003f21 	.word	0x08003f21
 8003eb0:	08003f29 	.word	0x08003f29
 8003eb4:	08003f21 	.word	0x08003f21
 8003eb8:	08003f21 	.word	0x08003f21
 8003ebc:	08003f21 	.word	0x08003f21
 8003ec0:	08003f21 	.word	0x08003f21
 8003ec4:	08003f21 	.word	0x08003f21
 8003ec8:	08003f21 	.word	0x08003f21
 8003ecc:	08003f21 	.word	0x08003f21
 8003ed0:	08003f29 	.word	0x08003f29
 8003ed4:	08003f21 	.word	0x08003f21
 8003ed8:	08003f21 	.word	0x08003f21
 8003edc:	08003f21 	.word	0x08003f21
 8003ee0:	08003f21 	.word	0x08003f21
 8003ee4:	08003f21 	.word	0x08003f21
 8003ee8:	08003f21 	.word	0x08003f21
 8003eec:	08003f21 	.word	0x08003f21
 8003ef0:	08003f29 	.word	0x08003f29
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ef4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ef8:	3308      	adds	r3, #8
 8003efa:	2101      	movs	r1, #1
 8003efc:	4618      	mov	r0, r3
 8003efe:	f000 ffc3 	bl	8004e88 <RCCEx_PLL2_Config>
 8003f02:	4603      	mov	r3, r0
 8003f04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003f08:	e00f      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f0e:	3328      	adds	r3, #40	@ 0x28
 8003f10:	2101      	movs	r1, #1
 8003f12:	4618      	mov	r0, r3
 8003f14:	f001 f86a 	bl	8004fec <RCCEx_PLL3_Config>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003f1e:	e004      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f26:	e000      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003f28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d10a      	bne.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003f32:	4bbf      	ldr	r3, [pc, #764]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f36:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f3e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f40:	4abb      	ldr	r2, [pc, #748]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f42:	430b      	orrs	r3, r1
 8003f44:	6553      	str	r3, [r2, #84]	@ 0x54
 8003f46:	e003      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f4c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f58:	f002 0302 	and.w	r3, r2, #2
 8003f5c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f60:	2300      	movs	r3, #0
 8003f62:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003f66:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003f6a:	460b      	mov	r3, r1
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	d041      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f74:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f76:	2b05      	cmp	r3, #5
 8003f78:	d824      	bhi.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003f7a:	a201      	add	r2, pc, #4	@ (adr r2, 8003f80 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f80:	08003fcd 	.word	0x08003fcd
 8003f84:	08003f99 	.word	0x08003f99
 8003f88:	08003faf 	.word	0x08003faf
 8003f8c:	08003fcd 	.word	0x08003fcd
 8003f90:	08003fcd 	.word	0x08003fcd
 8003f94:	08003fcd 	.word	0x08003fcd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f9c:	3308      	adds	r3, #8
 8003f9e:	2101      	movs	r1, #1
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f000 ff71 	bl	8004e88 <RCCEx_PLL2_Config>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003fac:	e00f      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fb2:	3328      	adds	r3, #40	@ 0x28
 8003fb4:	2101      	movs	r1, #1
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f001 f818 	bl	8004fec <RCCEx_PLL3_Config>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003fc2:	e004      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003fca:	e000      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003fcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d10a      	bne.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003fd6:	4b96      	ldr	r3, [pc, #600]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fda:	f023 0107 	bic.w	r1, r3, #7
 8003fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fe2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003fe4:	4a92      	ldr	r2, [pc, #584]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fe6:	430b      	orrs	r3, r1
 8003fe8:	6553      	str	r3, [r2, #84]	@ 0x54
 8003fea:	e003      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ff0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ffc:	f002 0304 	and.w	r3, r2, #4
 8004000:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004004:	2300      	movs	r3, #0
 8004006:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800400a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800400e:	460b      	mov	r3, r1
 8004010:	4313      	orrs	r3, r2
 8004012:	d044      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004014:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004018:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800401c:	2b05      	cmp	r3, #5
 800401e:	d825      	bhi.n	800406c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004020:	a201      	add	r2, pc, #4	@ (adr r2, 8004028 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004026:	bf00      	nop
 8004028:	08004075 	.word	0x08004075
 800402c:	08004041 	.word	0x08004041
 8004030:	08004057 	.word	0x08004057
 8004034:	08004075 	.word	0x08004075
 8004038:	08004075 	.word	0x08004075
 800403c:	08004075 	.word	0x08004075
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004040:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004044:	3308      	adds	r3, #8
 8004046:	2101      	movs	r1, #1
 8004048:	4618      	mov	r0, r3
 800404a:	f000 ff1d 	bl	8004e88 <RCCEx_PLL2_Config>
 800404e:	4603      	mov	r3, r0
 8004050:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004054:	e00f      	b.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004056:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800405a:	3328      	adds	r3, #40	@ 0x28
 800405c:	2101      	movs	r1, #1
 800405e:	4618      	mov	r0, r3
 8004060:	f000 ffc4 	bl	8004fec <RCCEx_PLL3_Config>
 8004064:	4603      	mov	r3, r0
 8004066:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800406a:	e004      	b.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004072:	e000      	b.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004074:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004076:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800407a:	2b00      	cmp	r3, #0
 800407c:	d10b      	bne.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800407e:	4b6c      	ldr	r3, [pc, #432]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004080:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004082:	f023 0107 	bic.w	r1, r3, #7
 8004086:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800408a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800408e:	4a68      	ldr	r2, [pc, #416]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004090:	430b      	orrs	r3, r1
 8004092:	6593      	str	r3, [r2, #88]	@ 0x58
 8004094:	e003      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004096:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800409a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800409e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a6:	f002 0320 	and.w	r3, r2, #32
 80040aa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80040ae:	2300      	movs	r3, #0
 80040b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80040b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80040b8:	460b      	mov	r3, r1
 80040ba:	4313      	orrs	r3, r2
 80040bc:	d055      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80040be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80040ca:	d033      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80040cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80040d0:	d82c      	bhi.n	800412c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80040d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040d6:	d02f      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80040d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040dc:	d826      	bhi.n	800412c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80040de:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80040e2:	d02b      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80040e4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80040e8:	d820      	bhi.n	800412c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80040ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040ee:	d012      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80040f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040f4:	d81a      	bhi.n	800412c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d022      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80040fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80040fe:	d115      	bne.n	800412c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004100:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004104:	3308      	adds	r3, #8
 8004106:	2100      	movs	r1, #0
 8004108:	4618      	mov	r0, r3
 800410a:	f000 febd 	bl	8004e88 <RCCEx_PLL2_Config>
 800410e:	4603      	mov	r3, r0
 8004110:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004114:	e015      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004116:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800411a:	3328      	adds	r3, #40	@ 0x28
 800411c:	2102      	movs	r1, #2
 800411e:	4618      	mov	r0, r3
 8004120:	f000 ff64 	bl	8004fec <RCCEx_PLL3_Config>
 8004124:	4603      	mov	r3, r0
 8004126:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800412a:	e00a      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004132:	e006      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004134:	bf00      	nop
 8004136:	e004      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004138:	bf00      	nop
 800413a:	e002      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800413c:	bf00      	nop
 800413e:	e000      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004140:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004142:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004146:	2b00      	cmp	r3, #0
 8004148:	d10b      	bne.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800414a:	4b39      	ldr	r3, [pc, #228]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800414c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800414e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004152:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004156:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800415a:	4a35      	ldr	r2, [pc, #212]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800415c:	430b      	orrs	r3, r1
 800415e:	6553      	str	r3, [r2, #84]	@ 0x54
 8004160:	e003      	b.n	800416a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004162:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004166:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800416a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800416e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004172:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004176:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800417a:	2300      	movs	r3, #0
 800417c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004180:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004184:	460b      	mov	r3, r1
 8004186:	4313      	orrs	r3, r2
 8004188:	d058      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800418a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800418e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004192:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004196:	d033      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004198:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800419c:	d82c      	bhi.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800419e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041a2:	d02f      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80041a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041a8:	d826      	bhi.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80041aa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80041ae:	d02b      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80041b0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80041b4:	d820      	bhi.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80041b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041ba:	d012      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80041bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041c0:	d81a      	bhi.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d022      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80041c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041ca:	d115      	bne.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041d0:	3308      	adds	r3, #8
 80041d2:	2100      	movs	r1, #0
 80041d4:	4618      	mov	r0, r3
 80041d6:	f000 fe57 	bl	8004e88 <RCCEx_PLL2_Config>
 80041da:	4603      	mov	r3, r0
 80041dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80041e0:	e015      	b.n	800420e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80041e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041e6:	3328      	adds	r3, #40	@ 0x28
 80041e8:	2102      	movs	r1, #2
 80041ea:	4618      	mov	r0, r3
 80041ec:	f000 fefe 	bl	8004fec <RCCEx_PLL3_Config>
 80041f0:	4603      	mov	r3, r0
 80041f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80041f6:	e00a      	b.n	800420e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041fe:	e006      	b.n	800420e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004200:	bf00      	nop
 8004202:	e004      	b.n	800420e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004204:	bf00      	nop
 8004206:	e002      	b.n	800420e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004208:	bf00      	nop
 800420a:	e000      	b.n	800420e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800420c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800420e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004212:	2b00      	cmp	r3, #0
 8004214:	d10e      	bne.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004216:	4b06      	ldr	r3, [pc, #24]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004218:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800421a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800421e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004222:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004226:	4a02      	ldr	r2, [pc, #8]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004228:	430b      	orrs	r3, r1
 800422a:	6593      	str	r3, [r2, #88]	@ 0x58
 800422c:	e006      	b.n	800423c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800422e:	bf00      	nop
 8004230:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004234:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004238:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800423c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004244:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004248:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800424c:	2300      	movs	r3, #0
 800424e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004252:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004256:	460b      	mov	r3, r1
 8004258:	4313      	orrs	r3, r2
 800425a:	d055      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800425c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004260:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004264:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004268:	d033      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800426a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800426e:	d82c      	bhi.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004270:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004274:	d02f      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004276:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800427a:	d826      	bhi.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800427c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004280:	d02b      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004282:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004286:	d820      	bhi.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004288:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800428c:	d012      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800428e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004292:	d81a      	bhi.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004294:	2b00      	cmp	r3, #0
 8004296:	d022      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004298:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800429c:	d115      	bne.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800429e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042a2:	3308      	adds	r3, #8
 80042a4:	2100      	movs	r1, #0
 80042a6:	4618      	mov	r0, r3
 80042a8:	f000 fdee 	bl	8004e88 <RCCEx_PLL2_Config>
 80042ac:	4603      	mov	r3, r0
 80042ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80042b2:	e015      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80042b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042b8:	3328      	adds	r3, #40	@ 0x28
 80042ba:	2102      	movs	r1, #2
 80042bc:	4618      	mov	r0, r3
 80042be:	f000 fe95 	bl	8004fec <RCCEx_PLL3_Config>
 80042c2:	4603      	mov	r3, r0
 80042c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80042c8:	e00a      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80042d0:	e006      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80042d2:	bf00      	nop
 80042d4:	e004      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80042d6:	bf00      	nop
 80042d8:	e002      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80042da:	bf00      	nop
 80042dc:	e000      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80042de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d10b      	bne.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80042e8:	4ba1      	ldr	r3, [pc, #644]	@ (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042ec:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80042f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80042f8:	4a9d      	ldr	r2, [pc, #628]	@ (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042fa:	430b      	orrs	r3, r1
 80042fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80042fe:	e003      	b.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004300:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004304:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004308:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800430c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004310:	f002 0308 	and.w	r3, r2, #8
 8004314:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004318:	2300      	movs	r3, #0
 800431a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800431e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004322:	460b      	mov	r3, r1
 8004324:	4313      	orrs	r3, r2
 8004326:	d01e      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004328:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800432c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004330:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004334:	d10c      	bne.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004336:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800433a:	3328      	adds	r3, #40	@ 0x28
 800433c:	2102      	movs	r1, #2
 800433e:	4618      	mov	r0, r3
 8004340:	f000 fe54 	bl	8004fec <RCCEx_PLL3_Config>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d002      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004350:	4b87      	ldr	r3, [pc, #540]	@ (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004352:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004354:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004358:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800435c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004360:	4a83      	ldr	r2, [pc, #524]	@ (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004362:	430b      	orrs	r3, r1
 8004364:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004366:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800436a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800436e:	f002 0310 	and.w	r3, r2, #16
 8004372:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004376:	2300      	movs	r3, #0
 8004378:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800437c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004380:	460b      	mov	r3, r1
 8004382:	4313      	orrs	r3, r2
 8004384:	d01e      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004386:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800438a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800438e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004392:	d10c      	bne.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004394:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004398:	3328      	adds	r3, #40	@ 0x28
 800439a:	2102      	movs	r1, #2
 800439c:	4618      	mov	r0, r3
 800439e:	f000 fe25 	bl	8004fec <RCCEx_PLL3_Config>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d002      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80043ae:	4b70      	ldr	r3, [pc, #448]	@ (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043b2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80043b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80043be:	4a6c      	ldr	r2, [pc, #432]	@ (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043c0:	430b      	orrs	r3, r1
 80043c2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043cc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80043d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80043d4:	2300      	movs	r3, #0
 80043d6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80043da:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80043de:	460b      	mov	r3, r1
 80043e0:	4313      	orrs	r3, r2
 80043e2:	d03e      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80043e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80043ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80043f0:	d022      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80043f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80043f6:	d81b      	bhi.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d003      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80043fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004400:	d00b      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004402:	e015      	b.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004404:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004408:	3308      	adds	r3, #8
 800440a:	2100      	movs	r1, #0
 800440c:	4618      	mov	r0, r3
 800440e:	f000 fd3b 	bl	8004e88 <RCCEx_PLL2_Config>
 8004412:	4603      	mov	r3, r0
 8004414:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004418:	e00f      	b.n	800443a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800441a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800441e:	3328      	adds	r3, #40	@ 0x28
 8004420:	2102      	movs	r1, #2
 8004422:	4618      	mov	r0, r3
 8004424:	f000 fde2 	bl	8004fec <RCCEx_PLL3_Config>
 8004428:	4603      	mov	r3, r0
 800442a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800442e:	e004      	b.n	800443a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004436:	e000      	b.n	800443a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004438:	bf00      	nop
    }

    if (ret == HAL_OK)
 800443a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800443e:	2b00      	cmp	r3, #0
 8004440:	d10b      	bne.n	800445a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004442:	4b4b      	ldr	r3, [pc, #300]	@ (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004444:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004446:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800444a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800444e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004452:	4a47      	ldr	r2, [pc, #284]	@ (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004454:	430b      	orrs	r3, r1
 8004456:	6593      	str	r3, [r2, #88]	@ 0x58
 8004458:	e003      	b.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800445a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800445e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004462:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800446a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800446e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004470:	2300      	movs	r3, #0
 8004472:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004474:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004478:	460b      	mov	r3, r1
 800447a:	4313      	orrs	r3, r2
 800447c:	d03b      	beq.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800447e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004482:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004486:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800448a:	d01f      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800448c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004490:	d818      	bhi.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004492:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004496:	d003      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004498:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800449c:	d007      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800449e:	e011      	b.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044a0:	4b33      	ldr	r3, [pc, #204]	@ (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044a4:	4a32      	ldr	r2, [pc, #200]	@ (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80044ac:	e00f      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80044ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044b2:	3328      	adds	r3, #40	@ 0x28
 80044b4:	2101      	movs	r1, #1
 80044b6:	4618      	mov	r0, r3
 80044b8:	f000 fd98 	bl	8004fec <RCCEx_PLL3_Config>
 80044bc:	4603      	mov	r3, r0
 80044be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80044c2:	e004      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80044ca:	e000      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80044cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d10b      	bne.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80044d6:	4b26      	ldr	r3, [pc, #152]	@ (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044da:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80044de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044e6:	4a22      	ldr	r2, [pc, #136]	@ (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044e8:	430b      	orrs	r3, r1
 80044ea:	6553      	str	r3, [r2, #84]	@ 0x54
 80044ec:	e003      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80044f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044fe:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004502:	673b      	str	r3, [r7, #112]	@ 0x70
 8004504:	2300      	movs	r3, #0
 8004506:	677b      	str	r3, [r7, #116]	@ 0x74
 8004508:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800450c:	460b      	mov	r3, r1
 800450e:	4313      	orrs	r3, r2
 8004510:	d034      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004512:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004516:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004518:	2b00      	cmp	r3, #0
 800451a:	d003      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800451c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004520:	d007      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004522:	e011      	b.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004524:	4b12      	ldr	r3, [pc, #72]	@ (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004528:	4a11      	ldr	r2, [pc, #68]	@ (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800452a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800452e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004530:	e00e      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004532:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004536:	3308      	adds	r3, #8
 8004538:	2102      	movs	r1, #2
 800453a:	4618      	mov	r0, r3
 800453c:	f000 fca4 	bl	8004e88 <RCCEx_PLL2_Config>
 8004540:	4603      	mov	r3, r0
 8004542:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004546:	e003      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800454e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004550:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004554:	2b00      	cmp	r3, #0
 8004556:	d10d      	bne.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004558:	4b05      	ldr	r3, [pc, #20]	@ (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800455a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800455c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004560:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004564:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004566:	4a02      	ldr	r2, [pc, #8]	@ (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004568:	430b      	orrs	r3, r1
 800456a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800456c:	e006      	b.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800456e:	bf00      	nop
 8004570:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004574:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004578:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800457c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004584:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004588:	66bb      	str	r3, [r7, #104]	@ 0x68
 800458a:	2300      	movs	r3, #0
 800458c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800458e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004592:	460b      	mov	r3, r1
 8004594:	4313      	orrs	r3, r2
 8004596:	d00c      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004598:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800459c:	3328      	adds	r3, #40	@ 0x28
 800459e:	2102      	movs	r1, #2
 80045a0:	4618      	mov	r0, r3
 80045a2:	f000 fd23 	bl	8004fec <RCCEx_PLL3_Config>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d002      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80045b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ba:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80045be:	663b      	str	r3, [r7, #96]	@ 0x60
 80045c0:	2300      	movs	r3, #0
 80045c2:	667b      	str	r3, [r7, #100]	@ 0x64
 80045c4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80045c8:	460b      	mov	r3, r1
 80045ca:	4313      	orrs	r3, r2
 80045cc:	d038      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80045ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80045da:	d018      	beq.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80045dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80045e0:	d811      	bhi.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80045e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045e6:	d014      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80045e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045ec:	d80b      	bhi.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d011      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80045f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045f6:	d106      	bne.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045f8:	4bc3      	ldr	r3, [pc, #780]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045fc:	4ac2      	ldr	r2, [pc, #776]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004602:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004604:	e008      	b.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800460c:	e004      	b.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800460e:	bf00      	nop
 8004610:	e002      	b.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004612:	bf00      	nop
 8004614:	e000      	b.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004616:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004618:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800461c:	2b00      	cmp	r3, #0
 800461e:	d10b      	bne.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004620:	4bb9      	ldr	r3, [pc, #740]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004622:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004624:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004628:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800462c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004630:	4ab5      	ldr	r2, [pc, #724]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004632:	430b      	orrs	r3, r1
 8004634:	6553      	str	r3, [r2, #84]	@ 0x54
 8004636:	e003      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004638:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800463c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004640:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004648:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800464c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800464e:	2300      	movs	r3, #0
 8004650:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004652:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004656:	460b      	mov	r3, r1
 8004658:	4313      	orrs	r3, r2
 800465a:	d009      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800465c:	4baa      	ldr	r3, [pc, #680]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800465e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004660:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004664:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004668:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800466a:	4aa7      	ldr	r2, [pc, #668]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800466c:	430b      	orrs	r3, r1
 800466e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004670:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004678:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800467c:	653b      	str	r3, [r7, #80]	@ 0x50
 800467e:	2300      	movs	r3, #0
 8004680:	657b      	str	r3, [r7, #84]	@ 0x54
 8004682:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004686:	460b      	mov	r3, r1
 8004688:	4313      	orrs	r3, r2
 800468a:	d00a      	beq.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800468c:	4b9e      	ldr	r3, [pc, #632]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004694:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004698:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800469c:	4a9a      	ldr	r2, [pc, #616]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800469e:	430b      	orrs	r3, r1
 80046a0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80046a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046aa:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80046ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80046b0:	2300      	movs	r3, #0
 80046b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046b4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80046b8:	460b      	mov	r3, r1
 80046ba:	4313      	orrs	r3, r2
 80046bc:	d009      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80046be:	4b92      	ldr	r3, [pc, #584]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046c2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80046c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046cc:	4a8e      	ldr	r2, [pc, #568]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046ce:	430b      	orrs	r3, r1
 80046d0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80046d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046da:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80046de:	643b      	str	r3, [r7, #64]	@ 0x40
 80046e0:	2300      	movs	r3, #0
 80046e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80046e4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80046e8:	460b      	mov	r3, r1
 80046ea:	4313      	orrs	r3, r2
 80046ec:	d00e      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80046ee:	4b86      	ldr	r3, [pc, #536]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	4a85      	ldr	r2, [pc, #532]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046f4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80046f8:	6113      	str	r3, [r2, #16]
 80046fa:	4b83      	ldr	r3, [pc, #524]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046fc:	6919      	ldr	r1, [r3, #16]
 80046fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004702:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004706:	4a80      	ldr	r2, [pc, #512]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004708:	430b      	orrs	r3, r1
 800470a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800470c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004714:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004718:	63bb      	str	r3, [r7, #56]	@ 0x38
 800471a:	2300      	movs	r3, #0
 800471c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800471e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004722:	460b      	mov	r3, r1
 8004724:	4313      	orrs	r3, r2
 8004726:	d009      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004728:	4b77      	ldr	r3, [pc, #476]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800472a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800472c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004730:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004734:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004736:	4a74      	ldr	r2, [pc, #464]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004738:	430b      	orrs	r3, r1
 800473a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800473c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004744:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004748:	633b      	str	r3, [r7, #48]	@ 0x30
 800474a:	2300      	movs	r3, #0
 800474c:	637b      	str	r3, [r7, #52]	@ 0x34
 800474e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004752:	460b      	mov	r3, r1
 8004754:	4313      	orrs	r3, r2
 8004756:	d00a      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004758:	4b6b      	ldr	r3, [pc, #428]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800475a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800475c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004760:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004764:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004768:	4a67      	ldr	r2, [pc, #412]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800476a:	430b      	orrs	r3, r1
 800476c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800476e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004776:	2100      	movs	r1, #0
 8004778:	62b9      	str	r1, [r7, #40]	@ 0x28
 800477a:	f003 0301 	and.w	r3, r3, #1
 800477e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004780:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004784:	460b      	mov	r3, r1
 8004786:	4313      	orrs	r3, r2
 8004788:	d011      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800478a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800478e:	3308      	adds	r3, #8
 8004790:	2100      	movs	r1, #0
 8004792:	4618      	mov	r0, r3
 8004794:	f000 fb78 	bl	8004e88 <RCCEx_PLL2_Config>
 8004798:	4603      	mov	r3, r0
 800479a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800479e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d003      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80047ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b6:	2100      	movs	r1, #0
 80047b8:	6239      	str	r1, [r7, #32]
 80047ba:	f003 0302 	and.w	r3, r3, #2
 80047be:	627b      	str	r3, [r7, #36]	@ 0x24
 80047c0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80047c4:	460b      	mov	r3, r1
 80047c6:	4313      	orrs	r3, r2
 80047c8:	d011      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80047ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ce:	3308      	adds	r3, #8
 80047d0:	2101      	movs	r1, #1
 80047d2:	4618      	mov	r0, r3
 80047d4:	f000 fb58 	bl	8004e88 <RCCEx_PLL2_Config>
 80047d8:	4603      	mov	r3, r0
 80047da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80047de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d003      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80047ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f6:	2100      	movs	r1, #0
 80047f8:	61b9      	str	r1, [r7, #24]
 80047fa:	f003 0304 	and.w	r3, r3, #4
 80047fe:	61fb      	str	r3, [r7, #28]
 8004800:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004804:	460b      	mov	r3, r1
 8004806:	4313      	orrs	r3, r2
 8004808:	d011      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800480a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800480e:	3308      	adds	r3, #8
 8004810:	2102      	movs	r1, #2
 8004812:	4618      	mov	r0, r3
 8004814:	f000 fb38 	bl	8004e88 <RCCEx_PLL2_Config>
 8004818:	4603      	mov	r3, r0
 800481a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800481e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004822:	2b00      	cmp	r3, #0
 8004824:	d003      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004826:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800482a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800482e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004836:	2100      	movs	r1, #0
 8004838:	6139      	str	r1, [r7, #16]
 800483a:	f003 0308 	and.w	r3, r3, #8
 800483e:	617b      	str	r3, [r7, #20]
 8004840:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004844:	460b      	mov	r3, r1
 8004846:	4313      	orrs	r3, r2
 8004848:	d011      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800484a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800484e:	3328      	adds	r3, #40	@ 0x28
 8004850:	2100      	movs	r1, #0
 8004852:	4618      	mov	r0, r3
 8004854:	f000 fbca 	bl	8004fec <RCCEx_PLL3_Config>
 8004858:	4603      	mov	r3, r0
 800485a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800485e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004862:	2b00      	cmp	r3, #0
 8004864:	d003      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004866:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800486a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800486e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004876:	2100      	movs	r1, #0
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	f003 0310 	and.w	r3, r3, #16
 800487e:	60fb      	str	r3, [r7, #12]
 8004880:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004884:	460b      	mov	r3, r1
 8004886:	4313      	orrs	r3, r2
 8004888:	d011      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800488a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800488e:	3328      	adds	r3, #40	@ 0x28
 8004890:	2101      	movs	r1, #1
 8004892:	4618      	mov	r0, r3
 8004894:	f000 fbaa 	bl	8004fec <RCCEx_PLL3_Config>
 8004898:	4603      	mov	r3, r0
 800489a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800489e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d003      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80048ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b6:	2100      	movs	r1, #0
 80048b8:	6039      	str	r1, [r7, #0]
 80048ba:	f003 0320 	and.w	r3, r3, #32
 80048be:	607b      	str	r3, [r7, #4]
 80048c0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80048c4:	460b      	mov	r3, r1
 80048c6:	4313      	orrs	r3, r2
 80048c8:	d011      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80048ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ce:	3328      	adds	r3, #40	@ 0x28
 80048d0:	2102      	movs	r1, #2
 80048d2:	4618      	mov	r0, r3
 80048d4:	f000 fb8a 	bl	8004fec <RCCEx_PLL3_Config>
 80048d8:	4603      	mov	r3, r0
 80048da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80048de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d003      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80048ee:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d101      	bne.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80048f6:	2300      	movs	r3, #0
 80048f8:	e000      	b.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004902:	46bd      	mov	sp, r7
 8004904:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004908:	58024400 	.word	0x58024400

0800490c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004910:	f7fe fd96 	bl	8003440 <HAL_RCC_GetHCLKFreq>
 8004914:	4602      	mov	r2, r0
 8004916:	4b06      	ldr	r3, [pc, #24]	@ (8004930 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004918:	6a1b      	ldr	r3, [r3, #32]
 800491a:	091b      	lsrs	r3, r3, #4
 800491c:	f003 0307 	and.w	r3, r3, #7
 8004920:	4904      	ldr	r1, [pc, #16]	@ (8004934 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004922:	5ccb      	ldrb	r3, [r1, r3]
 8004924:	f003 031f 	and.w	r3, r3, #31
 8004928:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800492c:	4618      	mov	r0, r3
 800492e:	bd80      	pop	{r7, pc}
 8004930:	58024400 	.word	0x58024400
 8004934:	08008c24 	.word	0x08008c24

08004938 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004938:	b480      	push	{r7}
 800493a:	b089      	sub	sp, #36	@ 0x24
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004940:	4ba1      	ldr	r3, [pc, #644]	@ (8004bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004944:	f003 0303 	and.w	r3, r3, #3
 8004948:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800494a:	4b9f      	ldr	r3, [pc, #636]	@ (8004bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800494c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800494e:	0b1b      	lsrs	r3, r3, #12
 8004950:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004954:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004956:	4b9c      	ldr	r3, [pc, #624]	@ (8004bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800495a:	091b      	lsrs	r3, r3, #4
 800495c:	f003 0301 	and.w	r3, r3, #1
 8004960:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004962:	4b99      	ldr	r3, [pc, #612]	@ (8004bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004964:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004966:	08db      	lsrs	r3, r3, #3
 8004968:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800496c:	693a      	ldr	r2, [r7, #16]
 800496e:	fb02 f303 	mul.w	r3, r2, r3
 8004972:	ee07 3a90 	vmov	s15, r3
 8004976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800497a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	2b00      	cmp	r3, #0
 8004982:	f000 8111 	beq.w	8004ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	2b02      	cmp	r3, #2
 800498a:	f000 8083 	beq.w	8004a94 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	2b02      	cmp	r3, #2
 8004992:	f200 80a1 	bhi.w	8004ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d003      	beq.n	80049a4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d056      	beq.n	8004a50 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80049a2:	e099      	b.n	8004ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80049a4:	4b88      	ldr	r3, [pc, #544]	@ (8004bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0320 	and.w	r3, r3, #32
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d02d      	beq.n	8004a0c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80049b0:	4b85      	ldr	r3, [pc, #532]	@ (8004bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	08db      	lsrs	r3, r3, #3
 80049b6:	f003 0303 	and.w	r3, r3, #3
 80049ba:	4a84      	ldr	r2, [pc, #528]	@ (8004bcc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80049bc:	fa22 f303 	lsr.w	r3, r2, r3
 80049c0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	ee07 3a90 	vmov	s15, r3
 80049c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	ee07 3a90 	vmov	s15, r3
 80049d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049da:	4b7b      	ldr	r3, [pc, #492]	@ (8004bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049e2:	ee07 3a90 	vmov	s15, r3
 80049e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80049ee:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80049f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a06:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004a0a:	e087      	b.n	8004b1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	ee07 3a90 	vmov	s15, r3
 8004a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a16:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004a1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a1e:	4b6a      	ldr	r3, [pc, #424]	@ (8004bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a26:	ee07 3a90 	vmov	s15, r3
 8004a2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a32:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a4e:	e065      	b.n	8004b1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	ee07 3a90 	vmov	s15, r3
 8004a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a5a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004a5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a62:	4b59      	ldr	r3, [pc, #356]	@ (8004bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a6a:	ee07 3a90 	vmov	s15, r3
 8004a6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a72:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a76:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a92:	e043      	b.n	8004b1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	ee07 3a90 	vmov	s15, r3
 8004a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a9e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004bdc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004aa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004aa6:	4b48      	ldr	r3, [pc, #288]	@ (8004bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004aa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aae:	ee07 3a90 	vmov	s15, r3
 8004ab2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ab6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004aba:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004abe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ac2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ac6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004aca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ace:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ad2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ad6:	e021      	b.n	8004b1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	ee07 3a90 	vmov	s15, r3
 8004ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ae2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004ae6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004aea:	4b37      	ldr	r3, [pc, #220]	@ (8004bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004aec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004af2:	ee07 3a90 	vmov	s15, r3
 8004af6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004afa:	ed97 6a03 	vldr	s12, [r7, #12]
 8004afe:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b1a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004b1c:	4b2a      	ldr	r3, [pc, #168]	@ (8004bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b20:	0a5b      	lsrs	r3, r3, #9
 8004b22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b26:	ee07 3a90 	vmov	s15, r3
 8004b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b2e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b36:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b42:	ee17 2a90 	vmov	r2, s15
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004b4a:	4b1f      	ldr	r3, [pc, #124]	@ (8004bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b4e:	0c1b      	lsrs	r3, r3, #16
 8004b50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b54:	ee07 3a90 	vmov	s15, r3
 8004b58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b5c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b60:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b64:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b70:	ee17 2a90 	vmov	r2, s15
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004b78:	4b13      	ldr	r3, [pc, #76]	@ (8004bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b7c:	0e1b      	lsrs	r3, r3, #24
 8004b7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b82:	ee07 3a90 	vmov	s15, r3
 8004b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b92:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b9e:	ee17 2a90 	vmov	r2, s15
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004ba6:	e008      	b.n	8004bba <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	609a      	str	r2, [r3, #8]
}
 8004bba:	bf00      	nop
 8004bbc:	3724      	adds	r7, #36	@ 0x24
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr
 8004bc6:	bf00      	nop
 8004bc8:	58024400 	.word	0x58024400
 8004bcc:	03d09000 	.word	0x03d09000
 8004bd0:	46000000 	.word	0x46000000
 8004bd4:	4c742400 	.word	0x4c742400
 8004bd8:	4a742400 	.word	0x4a742400
 8004bdc:	4af42400 	.word	0x4af42400

08004be0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b089      	sub	sp, #36	@ 0x24
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004be8:	4ba1      	ldr	r3, [pc, #644]	@ (8004e70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bec:	f003 0303 	and.w	r3, r3, #3
 8004bf0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004bf2:	4b9f      	ldr	r3, [pc, #636]	@ (8004e70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bf6:	0d1b      	lsrs	r3, r3, #20
 8004bf8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004bfc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004bfe:	4b9c      	ldr	r3, [pc, #624]	@ (8004e70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c02:	0a1b      	lsrs	r3, r3, #8
 8004c04:	f003 0301 	and.w	r3, r3, #1
 8004c08:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004c0a:	4b99      	ldr	r3, [pc, #612]	@ (8004e70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c0e:	08db      	lsrs	r3, r3, #3
 8004c10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c14:	693a      	ldr	r2, [r7, #16]
 8004c16:	fb02 f303 	mul.w	r3, r2, r3
 8004c1a:	ee07 3a90 	vmov	s15, r3
 8004c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c22:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	f000 8111 	beq.w	8004e50 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	f000 8083 	beq.w	8004d3c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	f200 80a1 	bhi.w	8004d80 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d003      	beq.n	8004c4c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d056      	beq.n	8004cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004c4a:	e099      	b.n	8004d80 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c4c:	4b88      	ldr	r3, [pc, #544]	@ (8004e70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0320 	and.w	r3, r3, #32
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d02d      	beq.n	8004cb4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004c58:	4b85      	ldr	r3, [pc, #532]	@ (8004e70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	08db      	lsrs	r3, r3, #3
 8004c5e:	f003 0303 	and.w	r3, r3, #3
 8004c62:	4a84      	ldr	r2, [pc, #528]	@ (8004e74 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004c64:	fa22 f303 	lsr.w	r3, r2, r3
 8004c68:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	ee07 3a90 	vmov	s15, r3
 8004c70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	ee07 3a90 	vmov	s15, r3
 8004c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c82:	4b7b      	ldr	r3, [pc, #492]	@ (8004e70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c8a:	ee07 3a90 	vmov	s15, r3
 8004c8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c92:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c96:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004e78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ca2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ca6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004cb2:	e087      	b.n	8004dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	ee07 3a90 	vmov	s15, r3
 8004cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cbe:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004e7c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004cc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cc6:	4b6a      	ldr	r3, [pc, #424]	@ (8004e70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cce:	ee07 3a90 	vmov	s15, r3
 8004cd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cda:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004e78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004cde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ce2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ce6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cf2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004cf6:	e065      	b.n	8004dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	ee07 3a90 	vmov	s15, r3
 8004cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d02:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004e80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004d06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d0a:	4b59      	ldr	r3, [pc, #356]	@ (8004e70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d12:	ee07 3a90 	vmov	s15, r3
 8004d16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d1e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004e78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d3a:	e043      	b.n	8004dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	ee07 3a90 	vmov	s15, r3
 8004d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d46:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004e84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004d4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d4e:	4b48      	ldr	r3, [pc, #288]	@ (8004e70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d56:	ee07 3a90 	vmov	s15, r3
 8004d5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d62:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004e78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d7e:	e021      	b.n	8004dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	ee07 3a90 	vmov	s15, r3
 8004d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d8a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004e80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004d8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d92:	4b37      	ldr	r3, [pc, #220]	@ (8004e70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d9a:	ee07 3a90 	vmov	s15, r3
 8004d9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004da2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004da6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004e78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004daa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004db2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004db6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004dc2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004dc4:	4b2a      	ldr	r3, [pc, #168]	@ (8004e70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dc8:	0a5b      	lsrs	r3, r3, #9
 8004dca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004dce:	ee07 3a90 	vmov	s15, r3
 8004dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dd6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004dda:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004dde:	edd7 6a07 	vldr	s13, [r7, #28]
 8004de2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004de6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dea:	ee17 2a90 	vmov	r2, s15
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004df2:	4b1f      	ldr	r3, [pc, #124]	@ (8004e70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004df6:	0c1b      	lsrs	r3, r3, #16
 8004df8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004dfc:	ee07 3a90 	vmov	s15, r3
 8004e00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e04:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e08:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e18:	ee17 2a90 	vmov	r2, s15
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004e20:	4b13      	ldr	r3, [pc, #76]	@ (8004e70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e24:	0e1b      	lsrs	r3, r3, #24
 8004e26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e2a:	ee07 3a90 	vmov	s15, r3
 8004e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e32:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e46:	ee17 2a90 	vmov	r2, s15
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004e4e:	e008      	b.n	8004e62 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	609a      	str	r2, [r3, #8]
}
 8004e62:	bf00      	nop
 8004e64:	3724      	adds	r7, #36	@ 0x24
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr
 8004e6e:	bf00      	nop
 8004e70:	58024400 	.word	0x58024400
 8004e74:	03d09000 	.word	0x03d09000
 8004e78:	46000000 	.word	0x46000000
 8004e7c:	4c742400 	.word	0x4c742400
 8004e80:	4a742400 	.word	0x4a742400
 8004e84:	4af42400 	.word	0x4af42400

08004e88 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e92:	2300      	movs	r3, #0
 8004e94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004e96:	4b53      	ldr	r3, [pc, #332]	@ (8004fe4 <RCCEx_PLL2_Config+0x15c>)
 8004e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e9a:	f003 0303 	and.w	r3, r3, #3
 8004e9e:	2b03      	cmp	r3, #3
 8004ea0:	d101      	bne.n	8004ea6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e099      	b.n	8004fda <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004ea6:	4b4f      	ldr	r3, [pc, #316]	@ (8004fe4 <RCCEx_PLL2_Config+0x15c>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a4e      	ldr	r2, [pc, #312]	@ (8004fe4 <RCCEx_PLL2_Config+0x15c>)
 8004eac:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004eb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004eb2:	f7fc f9d1 	bl	8001258 <HAL_GetTick>
 8004eb6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004eb8:	e008      	b.n	8004ecc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004eba:	f7fc f9cd 	bl	8001258 <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d901      	bls.n	8004ecc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e086      	b.n	8004fda <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004ecc:	4b45      	ldr	r3, [pc, #276]	@ (8004fe4 <RCCEx_PLL2_Config+0x15c>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d1f0      	bne.n	8004eba <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004ed8:	4b42      	ldr	r3, [pc, #264]	@ (8004fe4 <RCCEx_PLL2_Config+0x15c>)
 8004eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004edc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	031b      	lsls	r3, r3, #12
 8004ee6:	493f      	ldr	r1, [pc, #252]	@ (8004fe4 <RCCEx_PLL2_Config+0x15c>)
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	628b      	str	r3, [r1, #40]	@ 0x28
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	3b01      	subs	r3, #1
 8004ef2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	3b01      	subs	r3, #1
 8004efc:	025b      	lsls	r3, r3, #9
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	431a      	orrs	r2, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	3b01      	subs	r3, #1
 8004f08:	041b      	lsls	r3, r3, #16
 8004f0a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004f0e:	431a      	orrs	r2, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	691b      	ldr	r3, [r3, #16]
 8004f14:	3b01      	subs	r3, #1
 8004f16:	061b      	lsls	r3, r3, #24
 8004f18:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004f1c:	4931      	ldr	r1, [pc, #196]	@ (8004fe4 <RCCEx_PLL2_Config+0x15c>)
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004f22:	4b30      	ldr	r3, [pc, #192]	@ (8004fe4 <RCCEx_PLL2_Config+0x15c>)
 8004f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f26:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	695b      	ldr	r3, [r3, #20]
 8004f2e:	492d      	ldr	r1, [pc, #180]	@ (8004fe4 <RCCEx_PLL2_Config+0x15c>)
 8004f30:	4313      	orrs	r3, r2
 8004f32:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004f34:	4b2b      	ldr	r3, [pc, #172]	@ (8004fe4 <RCCEx_PLL2_Config+0x15c>)
 8004f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f38:	f023 0220 	bic.w	r2, r3, #32
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	699b      	ldr	r3, [r3, #24]
 8004f40:	4928      	ldr	r1, [pc, #160]	@ (8004fe4 <RCCEx_PLL2_Config+0x15c>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004f46:	4b27      	ldr	r3, [pc, #156]	@ (8004fe4 <RCCEx_PLL2_Config+0x15c>)
 8004f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f4a:	4a26      	ldr	r2, [pc, #152]	@ (8004fe4 <RCCEx_PLL2_Config+0x15c>)
 8004f4c:	f023 0310 	bic.w	r3, r3, #16
 8004f50:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004f52:	4b24      	ldr	r3, [pc, #144]	@ (8004fe4 <RCCEx_PLL2_Config+0x15c>)
 8004f54:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f56:	4b24      	ldr	r3, [pc, #144]	@ (8004fe8 <RCCEx_PLL2_Config+0x160>)
 8004f58:	4013      	ands	r3, r2
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	69d2      	ldr	r2, [r2, #28]
 8004f5e:	00d2      	lsls	r2, r2, #3
 8004f60:	4920      	ldr	r1, [pc, #128]	@ (8004fe4 <RCCEx_PLL2_Config+0x15c>)
 8004f62:	4313      	orrs	r3, r2
 8004f64:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004f66:	4b1f      	ldr	r3, [pc, #124]	@ (8004fe4 <RCCEx_PLL2_Config+0x15c>)
 8004f68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f6a:	4a1e      	ldr	r2, [pc, #120]	@ (8004fe4 <RCCEx_PLL2_Config+0x15c>)
 8004f6c:	f043 0310 	orr.w	r3, r3, #16
 8004f70:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d106      	bne.n	8004f86 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004f78:	4b1a      	ldr	r3, [pc, #104]	@ (8004fe4 <RCCEx_PLL2_Config+0x15c>)
 8004f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f7c:	4a19      	ldr	r2, [pc, #100]	@ (8004fe4 <RCCEx_PLL2_Config+0x15c>)
 8004f7e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004f82:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004f84:	e00f      	b.n	8004fa6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d106      	bne.n	8004f9a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004f8c:	4b15      	ldr	r3, [pc, #84]	@ (8004fe4 <RCCEx_PLL2_Config+0x15c>)
 8004f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f90:	4a14      	ldr	r2, [pc, #80]	@ (8004fe4 <RCCEx_PLL2_Config+0x15c>)
 8004f92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f96:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004f98:	e005      	b.n	8004fa6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004f9a:	4b12      	ldr	r3, [pc, #72]	@ (8004fe4 <RCCEx_PLL2_Config+0x15c>)
 8004f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f9e:	4a11      	ldr	r2, [pc, #68]	@ (8004fe4 <RCCEx_PLL2_Config+0x15c>)
 8004fa0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004fa4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004fa6:	4b0f      	ldr	r3, [pc, #60]	@ (8004fe4 <RCCEx_PLL2_Config+0x15c>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a0e      	ldr	r2, [pc, #56]	@ (8004fe4 <RCCEx_PLL2_Config+0x15c>)
 8004fac:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004fb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fb2:	f7fc f951 	bl	8001258 <HAL_GetTick>
 8004fb6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004fb8:	e008      	b.n	8004fcc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004fba:	f7fc f94d 	bl	8001258 <HAL_GetTick>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	1ad3      	subs	r3, r2, r3
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	d901      	bls.n	8004fcc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	e006      	b.n	8004fda <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004fcc:	4b05      	ldr	r3, [pc, #20]	@ (8004fe4 <RCCEx_PLL2_Config+0x15c>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d0f0      	beq.n	8004fba <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3710      	adds	r7, #16
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	58024400 	.word	0x58024400
 8004fe8:	ffff0007 	.word	0xffff0007

08004fec <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004ffa:	4b53      	ldr	r3, [pc, #332]	@ (8005148 <RCCEx_PLL3_Config+0x15c>)
 8004ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ffe:	f003 0303 	and.w	r3, r3, #3
 8005002:	2b03      	cmp	r3, #3
 8005004:	d101      	bne.n	800500a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e099      	b.n	800513e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800500a:	4b4f      	ldr	r3, [pc, #316]	@ (8005148 <RCCEx_PLL3_Config+0x15c>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a4e      	ldr	r2, [pc, #312]	@ (8005148 <RCCEx_PLL3_Config+0x15c>)
 8005010:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005014:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005016:	f7fc f91f 	bl	8001258 <HAL_GetTick>
 800501a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800501c:	e008      	b.n	8005030 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800501e:	f7fc f91b 	bl	8001258 <HAL_GetTick>
 8005022:	4602      	mov	r2, r0
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	2b02      	cmp	r3, #2
 800502a:	d901      	bls.n	8005030 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800502c:	2303      	movs	r3, #3
 800502e:	e086      	b.n	800513e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005030:	4b45      	ldr	r3, [pc, #276]	@ (8005148 <RCCEx_PLL3_Config+0x15c>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005038:	2b00      	cmp	r3, #0
 800503a:	d1f0      	bne.n	800501e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800503c:	4b42      	ldr	r3, [pc, #264]	@ (8005148 <RCCEx_PLL3_Config+0x15c>)
 800503e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005040:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	051b      	lsls	r3, r3, #20
 800504a:	493f      	ldr	r1, [pc, #252]	@ (8005148 <RCCEx_PLL3_Config+0x15c>)
 800504c:	4313      	orrs	r3, r2
 800504e:	628b      	str	r3, [r1, #40]	@ 0x28
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	3b01      	subs	r3, #1
 8005056:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	3b01      	subs	r3, #1
 8005060:	025b      	lsls	r3, r3, #9
 8005062:	b29b      	uxth	r3, r3
 8005064:	431a      	orrs	r2, r3
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	3b01      	subs	r3, #1
 800506c:	041b      	lsls	r3, r3, #16
 800506e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005072:	431a      	orrs	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	691b      	ldr	r3, [r3, #16]
 8005078:	3b01      	subs	r3, #1
 800507a:	061b      	lsls	r3, r3, #24
 800507c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005080:	4931      	ldr	r1, [pc, #196]	@ (8005148 <RCCEx_PLL3_Config+0x15c>)
 8005082:	4313      	orrs	r3, r2
 8005084:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005086:	4b30      	ldr	r3, [pc, #192]	@ (8005148 <RCCEx_PLL3_Config+0x15c>)
 8005088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800508a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	695b      	ldr	r3, [r3, #20]
 8005092:	492d      	ldr	r1, [pc, #180]	@ (8005148 <RCCEx_PLL3_Config+0x15c>)
 8005094:	4313      	orrs	r3, r2
 8005096:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005098:	4b2b      	ldr	r3, [pc, #172]	@ (8005148 <RCCEx_PLL3_Config+0x15c>)
 800509a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800509c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	699b      	ldr	r3, [r3, #24]
 80050a4:	4928      	ldr	r1, [pc, #160]	@ (8005148 <RCCEx_PLL3_Config+0x15c>)
 80050a6:	4313      	orrs	r3, r2
 80050a8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80050aa:	4b27      	ldr	r3, [pc, #156]	@ (8005148 <RCCEx_PLL3_Config+0x15c>)
 80050ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ae:	4a26      	ldr	r2, [pc, #152]	@ (8005148 <RCCEx_PLL3_Config+0x15c>)
 80050b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80050b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80050b6:	4b24      	ldr	r3, [pc, #144]	@ (8005148 <RCCEx_PLL3_Config+0x15c>)
 80050b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80050ba:	4b24      	ldr	r3, [pc, #144]	@ (800514c <RCCEx_PLL3_Config+0x160>)
 80050bc:	4013      	ands	r3, r2
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	69d2      	ldr	r2, [r2, #28]
 80050c2:	00d2      	lsls	r2, r2, #3
 80050c4:	4920      	ldr	r1, [pc, #128]	@ (8005148 <RCCEx_PLL3_Config+0x15c>)
 80050c6:	4313      	orrs	r3, r2
 80050c8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80050ca:	4b1f      	ldr	r3, [pc, #124]	@ (8005148 <RCCEx_PLL3_Config+0x15c>)
 80050cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ce:	4a1e      	ldr	r2, [pc, #120]	@ (8005148 <RCCEx_PLL3_Config+0x15c>)
 80050d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d106      	bne.n	80050ea <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80050dc:	4b1a      	ldr	r3, [pc, #104]	@ (8005148 <RCCEx_PLL3_Config+0x15c>)
 80050de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050e0:	4a19      	ldr	r2, [pc, #100]	@ (8005148 <RCCEx_PLL3_Config+0x15c>)
 80050e2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80050e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80050e8:	e00f      	b.n	800510a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d106      	bne.n	80050fe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80050f0:	4b15      	ldr	r3, [pc, #84]	@ (8005148 <RCCEx_PLL3_Config+0x15c>)
 80050f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050f4:	4a14      	ldr	r2, [pc, #80]	@ (8005148 <RCCEx_PLL3_Config+0x15c>)
 80050f6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80050fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80050fc:	e005      	b.n	800510a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80050fe:	4b12      	ldr	r3, [pc, #72]	@ (8005148 <RCCEx_PLL3_Config+0x15c>)
 8005100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005102:	4a11      	ldr	r2, [pc, #68]	@ (8005148 <RCCEx_PLL3_Config+0x15c>)
 8005104:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005108:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800510a:	4b0f      	ldr	r3, [pc, #60]	@ (8005148 <RCCEx_PLL3_Config+0x15c>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a0e      	ldr	r2, [pc, #56]	@ (8005148 <RCCEx_PLL3_Config+0x15c>)
 8005110:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005114:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005116:	f7fc f89f 	bl	8001258 <HAL_GetTick>
 800511a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800511c:	e008      	b.n	8005130 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800511e:	f7fc f89b 	bl	8001258 <HAL_GetTick>
 8005122:	4602      	mov	r2, r0
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	1ad3      	subs	r3, r2, r3
 8005128:	2b02      	cmp	r3, #2
 800512a:	d901      	bls.n	8005130 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800512c:	2303      	movs	r3, #3
 800512e:	e006      	b.n	800513e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005130:	4b05      	ldr	r3, [pc, #20]	@ (8005148 <RCCEx_PLL3_Config+0x15c>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005138:	2b00      	cmp	r3, #0
 800513a:	d0f0      	beq.n	800511e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800513c:	7bfb      	ldrb	r3, [r7, #15]
}
 800513e:	4618      	mov	r0, r3
 8005140:	3710      	adds	r7, #16
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	58024400 	.word	0x58024400
 800514c:	ffff0007 	.word	0xffff0007

08005150 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d101      	bne.n	8005162 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e049      	b.n	80051f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005168:	b2db      	uxtb	r3, r3
 800516a:	2b00      	cmp	r3, #0
 800516c:	d106      	bne.n	800517c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f7fb fe66 	bl	8000e48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2202      	movs	r2, #2
 8005180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	3304      	adds	r3, #4
 800518c:	4619      	mov	r1, r3
 800518e:	4610      	mov	r0, r2
 8005190:	f000 fbb0 	bl	80058f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80051f4:	2300      	movs	r3, #0
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3708      	adds	r7, #8
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}

080051fe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80051fe:	b580      	push	{r7, lr}
 8005200:	b082      	sub	sp, #8
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d101      	bne.n	8005210 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e049      	b.n	80052a4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005216:	b2db      	uxtb	r3, r3
 8005218:	2b00      	cmp	r3, #0
 800521a:	d106      	bne.n	800522a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f000 f841 	bl	80052ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2202      	movs	r2, #2
 800522e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	3304      	adds	r3, #4
 800523a:	4619      	mov	r1, r3
 800523c:	4610      	mov	r0, r2
 800523e:	f000 fb59 	bl	80058f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2201      	movs	r2, #1
 8005246:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2201      	movs	r2, #1
 800524e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2201      	movs	r2, #1
 8005256:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2201      	movs	r2, #1
 800525e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2201      	movs	r2, #1
 8005266:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2201      	movs	r2, #1
 800526e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2201      	movs	r2, #1
 8005276:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2201      	movs	r2, #1
 800527e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2201      	movs	r2, #1
 8005286:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2201      	movs	r2, #1
 800528e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2201      	movs	r2, #1
 8005296:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2201      	movs	r2, #1
 800529e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80052a2:	2300      	movs	r3, #0
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3708      	adds	r7, #8
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80052b4:	bf00      	nop
 80052b6:	370c      	adds	r7, #12
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d109      	bne.n	80052e4 <HAL_TIM_PWM_Start+0x24>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	2b01      	cmp	r3, #1
 80052da:	bf14      	ite	ne
 80052dc:	2301      	movne	r3, #1
 80052de:	2300      	moveq	r3, #0
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	e03c      	b.n	800535e <HAL_TIM_PWM_Start+0x9e>
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	2b04      	cmp	r3, #4
 80052e8:	d109      	bne.n	80052fe <HAL_TIM_PWM_Start+0x3e>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	bf14      	ite	ne
 80052f6:	2301      	movne	r3, #1
 80052f8:	2300      	moveq	r3, #0
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	e02f      	b.n	800535e <HAL_TIM_PWM_Start+0x9e>
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	2b08      	cmp	r3, #8
 8005302:	d109      	bne.n	8005318 <HAL_TIM_PWM_Start+0x58>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800530a:	b2db      	uxtb	r3, r3
 800530c:	2b01      	cmp	r3, #1
 800530e:	bf14      	ite	ne
 8005310:	2301      	movne	r3, #1
 8005312:	2300      	moveq	r3, #0
 8005314:	b2db      	uxtb	r3, r3
 8005316:	e022      	b.n	800535e <HAL_TIM_PWM_Start+0x9e>
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	2b0c      	cmp	r3, #12
 800531c:	d109      	bne.n	8005332 <HAL_TIM_PWM_Start+0x72>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005324:	b2db      	uxtb	r3, r3
 8005326:	2b01      	cmp	r3, #1
 8005328:	bf14      	ite	ne
 800532a:	2301      	movne	r3, #1
 800532c:	2300      	moveq	r3, #0
 800532e:	b2db      	uxtb	r3, r3
 8005330:	e015      	b.n	800535e <HAL_TIM_PWM_Start+0x9e>
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	2b10      	cmp	r3, #16
 8005336:	d109      	bne.n	800534c <HAL_TIM_PWM_Start+0x8c>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800533e:	b2db      	uxtb	r3, r3
 8005340:	2b01      	cmp	r3, #1
 8005342:	bf14      	ite	ne
 8005344:	2301      	movne	r3, #1
 8005346:	2300      	moveq	r3, #0
 8005348:	b2db      	uxtb	r3, r3
 800534a:	e008      	b.n	800535e <HAL_TIM_PWM_Start+0x9e>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005352:	b2db      	uxtb	r3, r3
 8005354:	2b01      	cmp	r3, #1
 8005356:	bf14      	ite	ne
 8005358:	2301      	movne	r3, #1
 800535a:	2300      	moveq	r3, #0
 800535c:	b2db      	uxtb	r3, r3
 800535e:	2b00      	cmp	r3, #0
 8005360:	d001      	beq.n	8005366 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e0a1      	b.n	80054aa <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d104      	bne.n	8005376 <HAL_TIM_PWM_Start+0xb6>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2202      	movs	r2, #2
 8005370:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005374:	e023      	b.n	80053be <HAL_TIM_PWM_Start+0xfe>
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	2b04      	cmp	r3, #4
 800537a:	d104      	bne.n	8005386 <HAL_TIM_PWM_Start+0xc6>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2202      	movs	r2, #2
 8005380:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005384:	e01b      	b.n	80053be <HAL_TIM_PWM_Start+0xfe>
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	2b08      	cmp	r3, #8
 800538a:	d104      	bne.n	8005396 <HAL_TIM_PWM_Start+0xd6>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2202      	movs	r2, #2
 8005390:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005394:	e013      	b.n	80053be <HAL_TIM_PWM_Start+0xfe>
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	2b0c      	cmp	r3, #12
 800539a:	d104      	bne.n	80053a6 <HAL_TIM_PWM_Start+0xe6>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2202      	movs	r2, #2
 80053a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80053a4:	e00b      	b.n	80053be <HAL_TIM_PWM_Start+0xfe>
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	2b10      	cmp	r3, #16
 80053aa:	d104      	bne.n	80053b6 <HAL_TIM_PWM_Start+0xf6>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2202      	movs	r2, #2
 80053b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80053b4:	e003      	b.n	80053be <HAL_TIM_PWM_Start+0xfe>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2202      	movs	r2, #2
 80053ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	2201      	movs	r2, #1
 80053c4:	6839      	ldr	r1, [r7, #0]
 80053c6:	4618      	mov	r0, r3
 80053c8:	f000 fea8 	bl	800611c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a38      	ldr	r2, [pc, #224]	@ (80054b4 <HAL_TIM_PWM_Start+0x1f4>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d013      	beq.n	80053fe <HAL_TIM_PWM_Start+0x13e>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a37      	ldr	r2, [pc, #220]	@ (80054b8 <HAL_TIM_PWM_Start+0x1f8>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d00e      	beq.n	80053fe <HAL_TIM_PWM_Start+0x13e>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a35      	ldr	r2, [pc, #212]	@ (80054bc <HAL_TIM_PWM_Start+0x1fc>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d009      	beq.n	80053fe <HAL_TIM_PWM_Start+0x13e>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a34      	ldr	r2, [pc, #208]	@ (80054c0 <HAL_TIM_PWM_Start+0x200>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d004      	beq.n	80053fe <HAL_TIM_PWM_Start+0x13e>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a32      	ldr	r2, [pc, #200]	@ (80054c4 <HAL_TIM_PWM_Start+0x204>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d101      	bne.n	8005402 <HAL_TIM_PWM_Start+0x142>
 80053fe:	2301      	movs	r3, #1
 8005400:	e000      	b.n	8005404 <HAL_TIM_PWM_Start+0x144>
 8005402:	2300      	movs	r3, #0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d007      	beq.n	8005418 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005416:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a25      	ldr	r2, [pc, #148]	@ (80054b4 <HAL_TIM_PWM_Start+0x1f4>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d022      	beq.n	8005468 <HAL_TIM_PWM_Start+0x1a8>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800542a:	d01d      	beq.n	8005468 <HAL_TIM_PWM_Start+0x1a8>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a25      	ldr	r2, [pc, #148]	@ (80054c8 <HAL_TIM_PWM_Start+0x208>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d018      	beq.n	8005468 <HAL_TIM_PWM_Start+0x1a8>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a24      	ldr	r2, [pc, #144]	@ (80054cc <HAL_TIM_PWM_Start+0x20c>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d013      	beq.n	8005468 <HAL_TIM_PWM_Start+0x1a8>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a22      	ldr	r2, [pc, #136]	@ (80054d0 <HAL_TIM_PWM_Start+0x210>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d00e      	beq.n	8005468 <HAL_TIM_PWM_Start+0x1a8>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a1a      	ldr	r2, [pc, #104]	@ (80054b8 <HAL_TIM_PWM_Start+0x1f8>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d009      	beq.n	8005468 <HAL_TIM_PWM_Start+0x1a8>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a1e      	ldr	r2, [pc, #120]	@ (80054d4 <HAL_TIM_PWM_Start+0x214>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d004      	beq.n	8005468 <HAL_TIM_PWM_Start+0x1a8>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a16      	ldr	r2, [pc, #88]	@ (80054bc <HAL_TIM_PWM_Start+0x1fc>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d115      	bne.n	8005494 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	689a      	ldr	r2, [r3, #8]
 800546e:	4b1a      	ldr	r3, [pc, #104]	@ (80054d8 <HAL_TIM_PWM_Start+0x218>)
 8005470:	4013      	ands	r3, r2
 8005472:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2b06      	cmp	r3, #6
 8005478:	d015      	beq.n	80054a6 <HAL_TIM_PWM_Start+0x1e6>
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005480:	d011      	beq.n	80054a6 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f042 0201 	orr.w	r2, r2, #1
 8005490:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005492:	e008      	b.n	80054a6 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f042 0201 	orr.w	r2, r2, #1
 80054a2:	601a      	str	r2, [r3, #0]
 80054a4:	e000      	b.n	80054a8 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3710      	adds	r7, #16
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	40010000 	.word	0x40010000
 80054b8:	40010400 	.word	0x40010400
 80054bc:	40014000 	.word	0x40014000
 80054c0:	40014400 	.word	0x40014400
 80054c4:	40014800 	.word	0x40014800
 80054c8:	40000400 	.word	0x40000400
 80054cc:	40000800 	.word	0x40000800
 80054d0:	40000c00 	.word	0x40000c00
 80054d4:	40001800 	.word	0x40001800
 80054d8:	00010007 	.word	0x00010007

080054dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b086      	sub	sp, #24
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	60f8      	str	r0, [r7, #12]
 80054e4:	60b9      	str	r1, [r7, #8]
 80054e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054e8:	2300      	movs	r3, #0
 80054ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d101      	bne.n	80054fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80054f6:	2302      	movs	r3, #2
 80054f8:	e0ff      	b.n	80056fa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2201      	movs	r2, #1
 80054fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2b14      	cmp	r3, #20
 8005506:	f200 80f0 	bhi.w	80056ea <HAL_TIM_PWM_ConfigChannel+0x20e>
 800550a:	a201      	add	r2, pc, #4	@ (adr r2, 8005510 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800550c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005510:	08005565 	.word	0x08005565
 8005514:	080056eb 	.word	0x080056eb
 8005518:	080056eb 	.word	0x080056eb
 800551c:	080056eb 	.word	0x080056eb
 8005520:	080055a5 	.word	0x080055a5
 8005524:	080056eb 	.word	0x080056eb
 8005528:	080056eb 	.word	0x080056eb
 800552c:	080056eb 	.word	0x080056eb
 8005530:	080055e7 	.word	0x080055e7
 8005534:	080056eb 	.word	0x080056eb
 8005538:	080056eb 	.word	0x080056eb
 800553c:	080056eb 	.word	0x080056eb
 8005540:	08005627 	.word	0x08005627
 8005544:	080056eb 	.word	0x080056eb
 8005548:	080056eb 	.word	0x080056eb
 800554c:	080056eb 	.word	0x080056eb
 8005550:	08005669 	.word	0x08005669
 8005554:	080056eb 	.word	0x080056eb
 8005558:	080056eb 	.word	0x080056eb
 800555c:	080056eb 	.word	0x080056eb
 8005560:	080056a9 	.word	0x080056a9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	68b9      	ldr	r1, [r7, #8]
 800556a:	4618      	mov	r0, r3
 800556c:	f000 fa62 	bl	8005a34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	699a      	ldr	r2, [r3, #24]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f042 0208 	orr.w	r2, r2, #8
 800557e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	699a      	ldr	r2, [r3, #24]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f022 0204 	bic.w	r2, r2, #4
 800558e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	6999      	ldr	r1, [r3, #24]
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	691a      	ldr	r2, [r3, #16]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	430a      	orrs	r2, r1
 80055a0:	619a      	str	r2, [r3, #24]
      break;
 80055a2:	e0a5      	b.n	80056f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68b9      	ldr	r1, [r7, #8]
 80055aa:	4618      	mov	r0, r3
 80055ac:	f000 fad2 	bl	8005b54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	699a      	ldr	r2, [r3, #24]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80055be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	699a      	ldr	r2, [r3, #24]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	6999      	ldr	r1, [r3, #24]
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	021a      	lsls	r2, r3, #8
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	430a      	orrs	r2, r1
 80055e2:	619a      	str	r2, [r3, #24]
      break;
 80055e4:	e084      	b.n	80056f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68b9      	ldr	r1, [r7, #8]
 80055ec:	4618      	mov	r0, r3
 80055ee:	f000 fb3b 	bl	8005c68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	69da      	ldr	r2, [r3, #28]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f042 0208 	orr.w	r2, r2, #8
 8005600:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	69da      	ldr	r2, [r3, #28]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f022 0204 	bic.w	r2, r2, #4
 8005610:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	69d9      	ldr	r1, [r3, #28]
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	691a      	ldr	r2, [r3, #16]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	430a      	orrs	r2, r1
 8005622:	61da      	str	r2, [r3, #28]
      break;
 8005624:	e064      	b.n	80056f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	68b9      	ldr	r1, [r7, #8]
 800562c:	4618      	mov	r0, r3
 800562e:	f000 fba3 	bl	8005d78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	69da      	ldr	r2, [r3, #28]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005640:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	69da      	ldr	r2, [r3, #28]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005650:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	69d9      	ldr	r1, [r3, #28]
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	691b      	ldr	r3, [r3, #16]
 800565c:	021a      	lsls	r2, r3, #8
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	430a      	orrs	r2, r1
 8005664:	61da      	str	r2, [r3, #28]
      break;
 8005666:	e043      	b.n	80056f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	68b9      	ldr	r1, [r7, #8]
 800566e:	4618      	mov	r0, r3
 8005670:	f000 fbec 	bl	8005e4c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f042 0208 	orr.w	r2, r2, #8
 8005682:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f022 0204 	bic.w	r2, r2, #4
 8005692:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	691a      	ldr	r2, [r3, #16]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	430a      	orrs	r2, r1
 80056a4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80056a6:	e023      	b.n	80056f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	68b9      	ldr	r1, [r7, #8]
 80056ae:	4618      	mov	r0, r3
 80056b0:	f000 fc30 	bl	8005f14 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80056c2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056d2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	021a      	lsls	r2, r3, #8
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	430a      	orrs	r2, r1
 80056e6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80056e8:	e002      	b.n	80056f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	75fb      	strb	r3, [r7, #23]
      break;
 80056ee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80056f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3718      	adds	r7, #24
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
 8005702:	bf00      	nop

08005704 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800570e:	2300      	movs	r3, #0
 8005710:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005718:	2b01      	cmp	r3, #1
 800571a:	d101      	bne.n	8005720 <HAL_TIM_ConfigClockSource+0x1c>
 800571c:	2302      	movs	r3, #2
 800571e:	e0dc      	b.n	80058da <HAL_TIM_ConfigClockSource+0x1d6>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2202      	movs	r2, #2
 800572c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005738:	68ba      	ldr	r2, [r7, #8]
 800573a:	4b6a      	ldr	r3, [pc, #424]	@ (80058e4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800573c:	4013      	ands	r3, r2
 800573e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005746:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68ba      	ldr	r2, [r7, #8]
 800574e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a64      	ldr	r2, [pc, #400]	@ (80058e8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005756:	4293      	cmp	r3, r2
 8005758:	f000 80a9 	beq.w	80058ae <HAL_TIM_ConfigClockSource+0x1aa>
 800575c:	4a62      	ldr	r2, [pc, #392]	@ (80058e8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800575e:	4293      	cmp	r3, r2
 8005760:	f200 80ae 	bhi.w	80058c0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005764:	4a61      	ldr	r2, [pc, #388]	@ (80058ec <HAL_TIM_ConfigClockSource+0x1e8>)
 8005766:	4293      	cmp	r3, r2
 8005768:	f000 80a1 	beq.w	80058ae <HAL_TIM_ConfigClockSource+0x1aa>
 800576c:	4a5f      	ldr	r2, [pc, #380]	@ (80058ec <HAL_TIM_ConfigClockSource+0x1e8>)
 800576e:	4293      	cmp	r3, r2
 8005770:	f200 80a6 	bhi.w	80058c0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005774:	4a5e      	ldr	r2, [pc, #376]	@ (80058f0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005776:	4293      	cmp	r3, r2
 8005778:	f000 8099 	beq.w	80058ae <HAL_TIM_ConfigClockSource+0x1aa>
 800577c:	4a5c      	ldr	r2, [pc, #368]	@ (80058f0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800577e:	4293      	cmp	r3, r2
 8005780:	f200 809e 	bhi.w	80058c0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005784:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005788:	f000 8091 	beq.w	80058ae <HAL_TIM_ConfigClockSource+0x1aa>
 800578c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005790:	f200 8096 	bhi.w	80058c0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005794:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005798:	f000 8089 	beq.w	80058ae <HAL_TIM_ConfigClockSource+0x1aa>
 800579c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80057a0:	f200 808e 	bhi.w	80058c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80057a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057a8:	d03e      	beq.n	8005828 <HAL_TIM_ConfigClockSource+0x124>
 80057aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057ae:	f200 8087 	bhi.w	80058c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80057b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057b6:	f000 8086 	beq.w	80058c6 <HAL_TIM_ConfigClockSource+0x1c2>
 80057ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057be:	d87f      	bhi.n	80058c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80057c0:	2b70      	cmp	r3, #112	@ 0x70
 80057c2:	d01a      	beq.n	80057fa <HAL_TIM_ConfigClockSource+0xf6>
 80057c4:	2b70      	cmp	r3, #112	@ 0x70
 80057c6:	d87b      	bhi.n	80058c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80057c8:	2b60      	cmp	r3, #96	@ 0x60
 80057ca:	d050      	beq.n	800586e <HAL_TIM_ConfigClockSource+0x16a>
 80057cc:	2b60      	cmp	r3, #96	@ 0x60
 80057ce:	d877      	bhi.n	80058c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80057d0:	2b50      	cmp	r3, #80	@ 0x50
 80057d2:	d03c      	beq.n	800584e <HAL_TIM_ConfigClockSource+0x14a>
 80057d4:	2b50      	cmp	r3, #80	@ 0x50
 80057d6:	d873      	bhi.n	80058c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80057d8:	2b40      	cmp	r3, #64	@ 0x40
 80057da:	d058      	beq.n	800588e <HAL_TIM_ConfigClockSource+0x18a>
 80057dc:	2b40      	cmp	r3, #64	@ 0x40
 80057de:	d86f      	bhi.n	80058c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80057e0:	2b30      	cmp	r3, #48	@ 0x30
 80057e2:	d064      	beq.n	80058ae <HAL_TIM_ConfigClockSource+0x1aa>
 80057e4:	2b30      	cmp	r3, #48	@ 0x30
 80057e6:	d86b      	bhi.n	80058c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80057e8:	2b20      	cmp	r3, #32
 80057ea:	d060      	beq.n	80058ae <HAL_TIM_ConfigClockSource+0x1aa>
 80057ec:	2b20      	cmp	r3, #32
 80057ee:	d867      	bhi.n	80058c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d05c      	beq.n	80058ae <HAL_TIM_ConfigClockSource+0x1aa>
 80057f4:	2b10      	cmp	r3, #16
 80057f6:	d05a      	beq.n	80058ae <HAL_TIM_ConfigClockSource+0x1aa>
 80057f8:	e062      	b.n	80058c0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800580a:	f000 fc67 	bl	80060dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800581c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	68ba      	ldr	r2, [r7, #8]
 8005824:	609a      	str	r2, [r3, #8]
      break;
 8005826:	e04f      	b.n	80058c8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005838:	f000 fc50 	bl	80060dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	689a      	ldr	r2, [r3, #8]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800584a:	609a      	str	r2, [r3, #8]
      break;
 800584c:	e03c      	b.n	80058c8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800585a:	461a      	mov	r2, r3
 800585c:	f000 fbc0 	bl	8005fe0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	2150      	movs	r1, #80	@ 0x50
 8005866:	4618      	mov	r0, r3
 8005868:	f000 fc1a 	bl	80060a0 <TIM_ITRx_SetConfig>
      break;
 800586c:	e02c      	b.n	80058c8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800587a:	461a      	mov	r2, r3
 800587c:	f000 fbdf 	bl	800603e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2160      	movs	r1, #96	@ 0x60
 8005886:	4618      	mov	r0, r3
 8005888:	f000 fc0a 	bl	80060a0 <TIM_ITRx_SetConfig>
      break;
 800588c:	e01c      	b.n	80058c8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800589a:	461a      	mov	r2, r3
 800589c:	f000 fba0 	bl	8005fe0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	2140      	movs	r1, #64	@ 0x40
 80058a6:	4618      	mov	r0, r3
 80058a8:	f000 fbfa 	bl	80060a0 <TIM_ITRx_SetConfig>
      break;
 80058ac:	e00c      	b.n	80058c8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4619      	mov	r1, r3
 80058b8:	4610      	mov	r0, r2
 80058ba:	f000 fbf1 	bl	80060a0 <TIM_ITRx_SetConfig>
      break;
 80058be:	e003      	b.n	80058c8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	73fb      	strb	r3, [r7, #15]
      break;
 80058c4:	e000      	b.n	80058c8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80058c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80058d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3710      	adds	r7, #16
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	ffceff88 	.word	0xffceff88
 80058e8:	00100040 	.word	0x00100040
 80058ec:	00100030 	.word	0x00100030
 80058f0:	00100020 	.word	0x00100020

080058f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b085      	sub	sp, #20
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	4a43      	ldr	r2, [pc, #268]	@ (8005a14 <TIM_Base_SetConfig+0x120>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d013      	beq.n	8005934 <TIM_Base_SetConfig+0x40>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005912:	d00f      	beq.n	8005934 <TIM_Base_SetConfig+0x40>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	4a40      	ldr	r2, [pc, #256]	@ (8005a18 <TIM_Base_SetConfig+0x124>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d00b      	beq.n	8005934 <TIM_Base_SetConfig+0x40>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a3f      	ldr	r2, [pc, #252]	@ (8005a1c <TIM_Base_SetConfig+0x128>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d007      	beq.n	8005934 <TIM_Base_SetConfig+0x40>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a3e      	ldr	r2, [pc, #248]	@ (8005a20 <TIM_Base_SetConfig+0x12c>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d003      	beq.n	8005934 <TIM_Base_SetConfig+0x40>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a3d      	ldr	r2, [pc, #244]	@ (8005a24 <TIM_Base_SetConfig+0x130>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d108      	bne.n	8005946 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800593a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	4313      	orrs	r3, r2
 8005944:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4a32      	ldr	r2, [pc, #200]	@ (8005a14 <TIM_Base_SetConfig+0x120>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d01f      	beq.n	800598e <TIM_Base_SetConfig+0x9a>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005954:	d01b      	beq.n	800598e <TIM_Base_SetConfig+0x9a>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a2f      	ldr	r2, [pc, #188]	@ (8005a18 <TIM_Base_SetConfig+0x124>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d017      	beq.n	800598e <TIM_Base_SetConfig+0x9a>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a2e      	ldr	r2, [pc, #184]	@ (8005a1c <TIM_Base_SetConfig+0x128>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d013      	beq.n	800598e <TIM_Base_SetConfig+0x9a>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4a2d      	ldr	r2, [pc, #180]	@ (8005a20 <TIM_Base_SetConfig+0x12c>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d00f      	beq.n	800598e <TIM_Base_SetConfig+0x9a>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4a2c      	ldr	r2, [pc, #176]	@ (8005a24 <TIM_Base_SetConfig+0x130>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d00b      	beq.n	800598e <TIM_Base_SetConfig+0x9a>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a2b      	ldr	r2, [pc, #172]	@ (8005a28 <TIM_Base_SetConfig+0x134>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d007      	beq.n	800598e <TIM_Base_SetConfig+0x9a>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a2a      	ldr	r2, [pc, #168]	@ (8005a2c <TIM_Base_SetConfig+0x138>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d003      	beq.n	800598e <TIM_Base_SetConfig+0x9a>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4a29      	ldr	r2, [pc, #164]	@ (8005a30 <TIM_Base_SetConfig+0x13c>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d108      	bne.n	80059a0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005994:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	68db      	ldr	r3, [r3, #12]
 800599a:	68fa      	ldr	r2, [r7, #12]
 800599c:	4313      	orrs	r3, r2
 800599e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	695b      	ldr	r3, [r3, #20]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	689a      	ldr	r2, [r3, #8]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a14      	ldr	r2, [pc, #80]	@ (8005a14 <TIM_Base_SetConfig+0x120>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d00f      	beq.n	80059e6 <TIM_Base_SetConfig+0xf2>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a16      	ldr	r2, [pc, #88]	@ (8005a24 <TIM_Base_SetConfig+0x130>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d00b      	beq.n	80059e6 <TIM_Base_SetConfig+0xf2>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a15      	ldr	r2, [pc, #84]	@ (8005a28 <TIM_Base_SetConfig+0x134>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d007      	beq.n	80059e6 <TIM_Base_SetConfig+0xf2>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a14      	ldr	r2, [pc, #80]	@ (8005a2c <TIM_Base_SetConfig+0x138>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d003      	beq.n	80059e6 <TIM_Base_SetConfig+0xf2>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a13      	ldr	r2, [pc, #76]	@ (8005a30 <TIM_Base_SetConfig+0x13c>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d103      	bne.n	80059ee <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	691a      	ldr	r2, [r3, #16]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f043 0204 	orr.w	r2, r3, #4
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2201      	movs	r2, #1
 80059fe:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	68fa      	ldr	r2, [r7, #12]
 8005a04:	601a      	str	r2, [r3, #0]
}
 8005a06:	bf00      	nop
 8005a08:	3714      	adds	r7, #20
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr
 8005a12:	bf00      	nop
 8005a14:	40010000 	.word	0x40010000
 8005a18:	40000400 	.word	0x40000400
 8005a1c:	40000800 	.word	0x40000800
 8005a20:	40000c00 	.word	0x40000c00
 8005a24:	40010400 	.word	0x40010400
 8005a28:	40014000 	.word	0x40014000
 8005a2c:	40014400 	.word	0x40014400
 8005a30:	40014800 	.word	0x40014800

08005a34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b087      	sub	sp, #28
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a1b      	ldr	r3, [r3, #32]
 8005a42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6a1b      	ldr	r3, [r3, #32]
 8005a48:	f023 0201 	bic.w	r2, r3, #1
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	699b      	ldr	r3, [r3, #24]
 8005a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a5c:	68fa      	ldr	r2, [r7, #12]
 8005a5e:	4b37      	ldr	r3, [pc, #220]	@ (8005b3c <TIM_OC1_SetConfig+0x108>)
 8005a60:	4013      	ands	r3, r2
 8005a62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f023 0303 	bic.w	r3, r3, #3
 8005a6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	68fa      	ldr	r2, [r7, #12]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	f023 0302 	bic.w	r3, r3, #2
 8005a7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	697a      	ldr	r2, [r7, #20]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	4a2d      	ldr	r2, [pc, #180]	@ (8005b40 <TIM_OC1_SetConfig+0x10c>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d00f      	beq.n	8005ab0 <TIM_OC1_SetConfig+0x7c>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4a2c      	ldr	r2, [pc, #176]	@ (8005b44 <TIM_OC1_SetConfig+0x110>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d00b      	beq.n	8005ab0 <TIM_OC1_SetConfig+0x7c>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4a2b      	ldr	r2, [pc, #172]	@ (8005b48 <TIM_OC1_SetConfig+0x114>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d007      	beq.n	8005ab0 <TIM_OC1_SetConfig+0x7c>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4a2a      	ldr	r2, [pc, #168]	@ (8005b4c <TIM_OC1_SetConfig+0x118>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d003      	beq.n	8005ab0 <TIM_OC1_SetConfig+0x7c>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4a29      	ldr	r2, [pc, #164]	@ (8005b50 <TIM_OC1_SetConfig+0x11c>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d10c      	bne.n	8005aca <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	f023 0308 	bic.w	r3, r3, #8
 8005ab6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	697a      	ldr	r2, [r7, #20]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	f023 0304 	bic.w	r3, r3, #4
 8005ac8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4a1c      	ldr	r2, [pc, #112]	@ (8005b40 <TIM_OC1_SetConfig+0x10c>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d00f      	beq.n	8005af2 <TIM_OC1_SetConfig+0xbe>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4a1b      	ldr	r2, [pc, #108]	@ (8005b44 <TIM_OC1_SetConfig+0x110>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d00b      	beq.n	8005af2 <TIM_OC1_SetConfig+0xbe>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4a1a      	ldr	r2, [pc, #104]	@ (8005b48 <TIM_OC1_SetConfig+0x114>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d007      	beq.n	8005af2 <TIM_OC1_SetConfig+0xbe>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4a19      	ldr	r2, [pc, #100]	@ (8005b4c <TIM_OC1_SetConfig+0x118>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d003      	beq.n	8005af2 <TIM_OC1_SetConfig+0xbe>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4a18      	ldr	r2, [pc, #96]	@ (8005b50 <TIM_OC1_SetConfig+0x11c>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d111      	bne.n	8005b16 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005af8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005b00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	695b      	ldr	r3, [r3, #20]
 8005b06:	693a      	ldr	r2, [r7, #16]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	699b      	ldr	r3, [r3, #24]
 8005b10:	693a      	ldr	r2, [r7, #16]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	693a      	ldr	r2, [r7, #16]
 8005b1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	68fa      	ldr	r2, [r7, #12]
 8005b20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	685a      	ldr	r2, [r3, #4]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	697a      	ldr	r2, [r7, #20]
 8005b2e:	621a      	str	r2, [r3, #32]
}
 8005b30:	bf00      	nop
 8005b32:	371c      	adds	r7, #28
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr
 8005b3c:	fffeff8f 	.word	0xfffeff8f
 8005b40:	40010000 	.word	0x40010000
 8005b44:	40010400 	.word	0x40010400
 8005b48:	40014000 	.word	0x40014000
 8005b4c:	40014400 	.word	0x40014400
 8005b50:	40014800 	.word	0x40014800

08005b54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b087      	sub	sp, #28
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6a1b      	ldr	r3, [r3, #32]
 8005b62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6a1b      	ldr	r3, [r3, #32]
 8005b68:	f023 0210 	bic.w	r2, r3, #16
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	699b      	ldr	r3, [r3, #24]
 8005b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b7c:	68fa      	ldr	r2, [r7, #12]
 8005b7e:	4b34      	ldr	r3, [pc, #208]	@ (8005c50 <TIM_OC2_SetConfig+0xfc>)
 8005b80:	4013      	ands	r3, r2
 8005b82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	021b      	lsls	r3, r3, #8
 8005b92:	68fa      	ldr	r2, [r7, #12]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	f023 0320 	bic.w	r3, r3, #32
 8005b9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	011b      	lsls	r3, r3, #4
 8005ba6:	697a      	ldr	r2, [r7, #20]
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a29      	ldr	r2, [pc, #164]	@ (8005c54 <TIM_OC2_SetConfig+0x100>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d003      	beq.n	8005bbc <TIM_OC2_SetConfig+0x68>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	4a28      	ldr	r2, [pc, #160]	@ (8005c58 <TIM_OC2_SetConfig+0x104>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d10d      	bne.n	8005bd8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005bc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	011b      	lsls	r3, r3, #4
 8005bca:	697a      	ldr	r2, [r7, #20]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005bd6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a1e      	ldr	r2, [pc, #120]	@ (8005c54 <TIM_OC2_SetConfig+0x100>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d00f      	beq.n	8005c00 <TIM_OC2_SetConfig+0xac>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a1d      	ldr	r2, [pc, #116]	@ (8005c58 <TIM_OC2_SetConfig+0x104>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d00b      	beq.n	8005c00 <TIM_OC2_SetConfig+0xac>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a1c      	ldr	r2, [pc, #112]	@ (8005c5c <TIM_OC2_SetConfig+0x108>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d007      	beq.n	8005c00 <TIM_OC2_SetConfig+0xac>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a1b      	ldr	r2, [pc, #108]	@ (8005c60 <TIM_OC2_SetConfig+0x10c>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d003      	beq.n	8005c00 <TIM_OC2_SetConfig+0xac>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a1a      	ldr	r2, [pc, #104]	@ (8005c64 <TIM_OC2_SetConfig+0x110>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d113      	bne.n	8005c28 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005c06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005c0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	695b      	ldr	r3, [r3, #20]
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	693a      	ldr	r2, [r7, #16]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	699b      	ldr	r3, [r3, #24]
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	693a      	ldr	r2, [r7, #16]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	693a      	ldr	r2, [r7, #16]
 8005c2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	68fa      	ldr	r2, [r7, #12]
 8005c32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	685a      	ldr	r2, [r3, #4]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	697a      	ldr	r2, [r7, #20]
 8005c40:	621a      	str	r2, [r3, #32]
}
 8005c42:	bf00      	nop
 8005c44:	371c      	adds	r7, #28
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr
 8005c4e:	bf00      	nop
 8005c50:	feff8fff 	.word	0xfeff8fff
 8005c54:	40010000 	.word	0x40010000
 8005c58:	40010400 	.word	0x40010400
 8005c5c:	40014000 	.word	0x40014000
 8005c60:	40014400 	.word	0x40014400
 8005c64:	40014800 	.word	0x40014800

08005c68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b087      	sub	sp, #28
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6a1b      	ldr	r3, [r3, #32]
 8005c76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6a1b      	ldr	r3, [r3, #32]
 8005c7c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	69db      	ldr	r3, [r3, #28]
 8005c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c90:	68fa      	ldr	r2, [r7, #12]
 8005c92:	4b33      	ldr	r3, [pc, #204]	@ (8005d60 <TIM_OC3_SetConfig+0xf8>)
 8005c94:	4013      	ands	r3, r2
 8005c96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f023 0303 	bic.w	r3, r3, #3
 8005c9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	68fa      	ldr	r2, [r7, #12]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005cb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	021b      	lsls	r3, r3, #8
 8005cb8:	697a      	ldr	r2, [r7, #20]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a28      	ldr	r2, [pc, #160]	@ (8005d64 <TIM_OC3_SetConfig+0xfc>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d003      	beq.n	8005cce <TIM_OC3_SetConfig+0x66>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a27      	ldr	r2, [pc, #156]	@ (8005d68 <TIM_OC3_SetConfig+0x100>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d10d      	bne.n	8005cea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005cd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	021b      	lsls	r3, r3, #8
 8005cdc:	697a      	ldr	r2, [r7, #20]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005ce8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a1d      	ldr	r2, [pc, #116]	@ (8005d64 <TIM_OC3_SetConfig+0xfc>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d00f      	beq.n	8005d12 <TIM_OC3_SetConfig+0xaa>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4a1c      	ldr	r2, [pc, #112]	@ (8005d68 <TIM_OC3_SetConfig+0x100>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d00b      	beq.n	8005d12 <TIM_OC3_SetConfig+0xaa>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a1b      	ldr	r2, [pc, #108]	@ (8005d6c <TIM_OC3_SetConfig+0x104>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d007      	beq.n	8005d12 <TIM_OC3_SetConfig+0xaa>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	4a1a      	ldr	r2, [pc, #104]	@ (8005d70 <TIM_OC3_SetConfig+0x108>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d003      	beq.n	8005d12 <TIM_OC3_SetConfig+0xaa>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4a19      	ldr	r2, [pc, #100]	@ (8005d74 <TIM_OC3_SetConfig+0x10c>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d113      	bne.n	8005d3a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005d18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005d20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	695b      	ldr	r3, [r3, #20]
 8005d26:	011b      	lsls	r3, r3, #4
 8005d28:	693a      	ldr	r2, [r7, #16]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	699b      	ldr	r3, [r3, #24]
 8005d32:	011b      	lsls	r3, r3, #4
 8005d34:	693a      	ldr	r2, [r7, #16]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	693a      	ldr	r2, [r7, #16]
 8005d3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	68fa      	ldr	r2, [r7, #12]
 8005d44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	685a      	ldr	r2, [r3, #4]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	697a      	ldr	r2, [r7, #20]
 8005d52:	621a      	str	r2, [r3, #32]
}
 8005d54:	bf00      	nop
 8005d56:	371c      	adds	r7, #28
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr
 8005d60:	fffeff8f 	.word	0xfffeff8f
 8005d64:	40010000 	.word	0x40010000
 8005d68:	40010400 	.word	0x40010400
 8005d6c:	40014000 	.word	0x40014000
 8005d70:	40014400 	.word	0x40014400
 8005d74:	40014800 	.word	0x40014800

08005d78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b087      	sub	sp, #28
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a1b      	ldr	r3, [r3, #32]
 8005d86:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6a1b      	ldr	r3, [r3, #32]
 8005d8c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	69db      	ldr	r3, [r3, #28]
 8005d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005da0:	68fa      	ldr	r2, [r7, #12]
 8005da2:	4b24      	ldr	r3, [pc, #144]	@ (8005e34 <TIM_OC4_SetConfig+0xbc>)
 8005da4:	4013      	ands	r3, r2
 8005da6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005dae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	021b      	lsls	r3, r3, #8
 8005db6:	68fa      	ldr	r2, [r7, #12]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005dc2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	031b      	lsls	r3, r3, #12
 8005dca:	693a      	ldr	r2, [r7, #16]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	4a19      	ldr	r2, [pc, #100]	@ (8005e38 <TIM_OC4_SetConfig+0xc0>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d00f      	beq.n	8005df8 <TIM_OC4_SetConfig+0x80>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	4a18      	ldr	r2, [pc, #96]	@ (8005e3c <TIM_OC4_SetConfig+0xc4>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d00b      	beq.n	8005df8 <TIM_OC4_SetConfig+0x80>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	4a17      	ldr	r2, [pc, #92]	@ (8005e40 <TIM_OC4_SetConfig+0xc8>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d007      	beq.n	8005df8 <TIM_OC4_SetConfig+0x80>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	4a16      	ldr	r2, [pc, #88]	@ (8005e44 <TIM_OC4_SetConfig+0xcc>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d003      	beq.n	8005df8 <TIM_OC4_SetConfig+0x80>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	4a15      	ldr	r2, [pc, #84]	@ (8005e48 <TIM_OC4_SetConfig+0xd0>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d109      	bne.n	8005e0c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005dfe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	695b      	ldr	r3, [r3, #20]
 8005e04:	019b      	lsls	r3, r3, #6
 8005e06:	697a      	ldr	r2, [r7, #20]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	697a      	ldr	r2, [r7, #20]
 8005e10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	68fa      	ldr	r2, [r7, #12]
 8005e16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	685a      	ldr	r2, [r3, #4]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	693a      	ldr	r2, [r7, #16]
 8005e24:	621a      	str	r2, [r3, #32]
}
 8005e26:	bf00      	nop
 8005e28:	371c      	adds	r7, #28
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr
 8005e32:	bf00      	nop
 8005e34:	feff8fff 	.word	0xfeff8fff
 8005e38:	40010000 	.word	0x40010000
 8005e3c:	40010400 	.word	0x40010400
 8005e40:	40014000 	.word	0x40014000
 8005e44:	40014400 	.word	0x40014400
 8005e48:	40014800 	.word	0x40014800

08005e4c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b087      	sub	sp, #28
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6a1b      	ldr	r3, [r3, #32]
 8005e5a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6a1b      	ldr	r3, [r3, #32]
 8005e60:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	4b21      	ldr	r3, [pc, #132]	@ (8005efc <TIM_OC5_SetConfig+0xb0>)
 8005e78:	4013      	ands	r3, r2
 8005e7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	68fa      	ldr	r2, [r7, #12]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005e8c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	041b      	lsls	r3, r3, #16
 8005e94:	693a      	ldr	r2, [r7, #16]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4a18      	ldr	r2, [pc, #96]	@ (8005f00 <TIM_OC5_SetConfig+0xb4>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d00f      	beq.n	8005ec2 <TIM_OC5_SetConfig+0x76>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	4a17      	ldr	r2, [pc, #92]	@ (8005f04 <TIM_OC5_SetConfig+0xb8>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d00b      	beq.n	8005ec2 <TIM_OC5_SetConfig+0x76>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4a16      	ldr	r2, [pc, #88]	@ (8005f08 <TIM_OC5_SetConfig+0xbc>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d007      	beq.n	8005ec2 <TIM_OC5_SetConfig+0x76>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	4a15      	ldr	r2, [pc, #84]	@ (8005f0c <TIM_OC5_SetConfig+0xc0>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d003      	beq.n	8005ec2 <TIM_OC5_SetConfig+0x76>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	4a14      	ldr	r2, [pc, #80]	@ (8005f10 <TIM_OC5_SetConfig+0xc4>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d109      	bne.n	8005ed6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ec8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	695b      	ldr	r3, [r3, #20]
 8005ece:	021b      	lsls	r3, r3, #8
 8005ed0:	697a      	ldr	r2, [r7, #20]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	697a      	ldr	r2, [r7, #20]
 8005eda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	68fa      	ldr	r2, [r7, #12]
 8005ee0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	685a      	ldr	r2, [r3, #4]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	693a      	ldr	r2, [r7, #16]
 8005eee:	621a      	str	r2, [r3, #32]
}
 8005ef0:	bf00      	nop
 8005ef2:	371c      	adds	r7, #28
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr
 8005efc:	fffeff8f 	.word	0xfffeff8f
 8005f00:	40010000 	.word	0x40010000
 8005f04:	40010400 	.word	0x40010400
 8005f08:	40014000 	.word	0x40014000
 8005f0c:	40014400 	.word	0x40014400
 8005f10:	40014800 	.word	0x40014800

08005f14 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b087      	sub	sp, #28
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a1b      	ldr	r3, [r3, #32]
 8005f22:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6a1b      	ldr	r3, [r3, #32]
 8005f28:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	4b22      	ldr	r3, [pc, #136]	@ (8005fc8 <TIM_OC6_SetConfig+0xb4>)
 8005f40:	4013      	ands	r3, r2
 8005f42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	021b      	lsls	r3, r3, #8
 8005f4a:	68fa      	ldr	r2, [r7, #12]
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005f56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	051b      	lsls	r3, r3, #20
 8005f5e:	693a      	ldr	r2, [r7, #16]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	4a19      	ldr	r2, [pc, #100]	@ (8005fcc <TIM_OC6_SetConfig+0xb8>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d00f      	beq.n	8005f8c <TIM_OC6_SetConfig+0x78>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	4a18      	ldr	r2, [pc, #96]	@ (8005fd0 <TIM_OC6_SetConfig+0xbc>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d00b      	beq.n	8005f8c <TIM_OC6_SetConfig+0x78>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	4a17      	ldr	r2, [pc, #92]	@ (8005fd4 <TIM_OC6_SetConfig+0xc0>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d007      	beq.n	8005f8c <TIM_OC6_SetConfig+0x78>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	4a16      	ldr	r2, [pc, #88]	@ (8005fd8 <TIM_OC6_SetConfig+0xc4>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d003      	beq.n	8005f8c <TIM_OC6_SetConfig+0x78>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	4a15      	ldr	r2, [pc, #84]	@ (8005fdc <TIM_OC6_SetConfig+0xc8>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d109      	bne.n	8005fa0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005f92:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	695b      	ldr	r3, [r3, #20]
 8005f98:	029b      	lsls	r3, r3, #10
 8005f9a:	697a      	ldr	r2, [r7, #20]
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	697a      	ldr	r2, [r7, #20]
 8005fa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	68fa      	ldr	r2, [r7, #12]
 8005faa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	685a      	ldr	r2, [r3, #4]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	693a      	ldr	r2, [r7, #16]
 8005fb8:	621a      	str	r2, [r3, #32]
}
 8005fba:	bf00      	nop
 8005fbc:	371c      	adds	r7, #28
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr
 8005fc6:	bf00      	nop
 8005fc8:	feff8fff 	.word	0xfeff8fff
 8005fcc:	40010000 	.word	0x40010000
 8005fd0:	40010400 	.word	0x40010400
 8005fd4:	40014000 	.word	0x40014000
 8005fd8:	40014400 	.word	0x40014400
 8005fdc:	40014800 	.word	0x40014800

08005fe0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b087      	sub	sp, #28
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	60f8      	str	r0, [r7, #12]
 8005fe8:	60b9      	str	r1, [r7, #8]
 8005fea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	6a1b      	ldr	r3, [r3, #32]
 8005ff0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	6a1b      	ldr	r3, [r3, #32]
 8005ff6:	f023 0201 	bic.w	r2, r3, #1
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	699b      	ldr	r3, [r3, #24]
 8006002:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800600a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	011b      	lsls	r3, r3, #4
 8006010:	693a      	ldr	r2, [r7, #16]
 8006012:	4313      	orrs	r3, r2
 8006014:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	f023 030a 	bic.w	r3, r3, #10
 800601c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800601e:	697a      	ldr	r2, [r7, #20]
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	4313      	orrs	r3, r2
 8006024:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	693a      	ldr	r2, [r7, #16]
 800602a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	697a      	ldr	r2, [r7, #20]
 8006030:	621a      	str	r2, [r3, #32]
}
 8006032:	bf00      	nop
 8006034:	371c      	adds	r7, #28
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr

0800603e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800603e:	b480      	push	{r7}
 8006040:	b087      	sub	sp, #28
 8006042:	af00      	add	r7, sp, #0
 8006044:	60f8      	str	r0, [r7, #12]
 8006046:	60b9      	str	r1, [r7, #8]
 8006048:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	6a1b      	ldr	r3, [r3, #32]
 800604e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	6a1b      	ldr	r3, [r3, #32]
 8006054:	f023 0210 	bic.w	r2, r3, #16
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	699b      	ldr	r3, [r3, #24]
 8006060:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006068:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	031b      	lsls	r3, r3, #12
 800606e:	693a      	ldr	r2, [r7, #16]
 8006070:	4313      	orrs	r3, r2
 8006072:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800607a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	011b      	lsls	r3, r3, #4
 8006080:	697a      	ldr	r2, [r7, #20]
 8006082:	4313      	orrs	r3, r2
 8006084:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	693a      	ldr	r2, [r7, #16]
 800608a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	697a      	ldr	r2, [r7, #20]
 8006090:	621a      	str	r2, [r3, #32]
}
 8006092:	bf00      	nop
 8006094:	371c      	adds	r7, #28
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr
	...

080060a0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b085      	sub	sp, #20
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80060b0:	68fa      	ldr	r2, [r7, #12]
 80060b2:	4b09      	ldr	r3, [pc, #36]	@ (80060d8 <TIM_ITRx_SetConfig+0x38>)
 80060b4:	4013      	ands	r3, r2
 80060b6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80060b8:	683a      	ldr	r2, [r7, #0]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	4313      	orrs	r3, r2
 80060be:	f043 0307 	orr.w	r3, r3, #7
 80060c2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	68fa      	ldr	r2, [r7, #12]
 80060c8:	609a      	str	r2, [r3, #8]
}
 80060ca:	bf00      	nop
 80060cc:	3714      	adds	r7, #20
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr
 80060d6:	bf00      	nop
 80060d8:	ffcfff8f 	.word	0xffcfff8f

080060dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80060dc:	b480      	push	{r7}
 80060de:	b087      	sub	sp, #28
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	60f8      	str	r0, [r7, #12]
 80060e4:	60b9      	str	r1, [r7, #8]
 80060e6:	607a      	str	r2, [r7, #4]
 80060e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80060f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	021a      	lsls	r2, r3, #8
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	431a      	orrs	r2, r3
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	4313      	orrs	r3, r2
 8006104:	697a      	ldr	r2, [r7, #20]
 8006106:	4313      	orrs	r3, r2
 8006108:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	697a      	ldr	r2, [r7, #20]
 800610e:	609a      	str	r2, [r3, #8]
}
 8006110:	bf00      	nop
 8006112:	371c      	adds	r7, #28
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800611c:	b480      	push	{r7}
 800611e:	b087      	sub	sp, #28
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	f003 031f 	and.w	r3, r3, #31
 800612e:	2201      	movs	r2, #1
 8006130:	fa02 f303 	lsl.w	r3, r2, r3
 8006134:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	6a1a      	ldr	r2, [r3, #32]
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	43db      	mvns	r3, r3
 800613e:	401a      	ands	r2, r3
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	6a1a      	ldr	r2, [r3, #32]
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	f003 031f 	and.w	r3, r3, #31
 800614e:	6879      	ldr	r1, [r7, #4]
 8006150:	fa01 f303 	lsl.w	r3, r1, r3
 8006154:	431a      	orrs	r2, r3
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	621a      	str	r2, [r3, #32]
}
 800615a:	bf00      	nop
 800615c:	371c      	adds	r7, #28
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr
	...

08006168 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b084      	sub	sp, #16
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d109      	bne.n	800618c <HAL_TIMEx_PWMN_Start+0x24>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800617e:	b2db      	uxtb	r3, r3
 8006180:	2b01      	cmp	r3, #1
 8006182:	bf14      	ite	ne
 8006184:	2301      	movne	r3, #1
 8006186:	2300      	moveq	r3, #0
 8006188:	b2db      	uxtb	r3, r3
 800618a:	e022      	b.n	80061d2 <HAL_TIMEx_PWMN_Start+0x6a>
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	2b04      	cmp	r3, #4
 8006190:	d109      	bne.n	80061a6 <HAL_TIMEx_PWMN_Start+0x3e>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006198:	b2db      	uxtb	r3, r3
 800619a:	2b01      	cmp	r3, #1
 800619c:	bf14      	ite	ne
 800619e:	2301      	movne	r3, #1
 80061a0:	2300      	moveq	r3, #0
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	e015      	b.n	80061d2 <HAL_TIMEx_PWMN_Start+0x6a>
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	2b08      	cmp	r3, #8
 80061aa:	d109      	bne.n	80061c0 <HAL_TIMEx_PWMN_Start+0x58>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	bf14      	ite	ne
 80061b8:	2301      	movne	r3, #1
 80061ba:	2300      	moveq	r3, #0
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	e008      	b.n	80061d2 <HAL_TIMEx_PWMN_Start+0x6a>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	bf14      	ite	ne
 80061cc:	2301      	movne	r3, #1
 80061ce:	2300      	moveq	r3, #0
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d001      	beq.n	80061da <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	e073      	b.n	80062c2 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d104      	bne.n	80061ea <HAL_TIMEx_PWMN_Start+0x82>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2202      	movs	r2, #2
 80061e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80061e8:	e013      	b.n	8006212 <HAL_TIMEx_PWMN_Start+0xaa>
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	2b04      	cmp	r3, #4
 80061ee:	d104      	bne.n	80061fa <HAL_TIMEx_PWMN_Start+0x92>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2202      	movs	r2, #2
 80061f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80061f8:	e00b      	b.n	8006212 <HAL_TIMEx_PWMN_Start+0xaa>
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	2b08      	cmp	r3, #8
 80061fe:	d104      	bne.n	800620a <HAL_TIMEx_PWMN_Start+0xa2>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2202      	movs	r2, #2
 8006204:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006208:	e003      	b.n	8006212 <HAL_TIMEx_PWMN_Start+0xaa>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2202      	movs	r2, #2
 800620e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	2204      	movs	r2, #4
 8006218:	6839      	ldr	r1, [r7, #0]
 800621a:	4618      	mov	r0, r3
 800621c:	f000 fa38 	bl	8006690 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800622e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a25      	ldr	r2, [pc, #148]	@ (80062cc <HAL_TIMEx_PWMN_Start+0x164>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d022      	beq.n	8006280 <HAL_TIMEx_PWMN_Start+0x118>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006242:	d01d      	beq.n	8006280 <HAL_TIMEx_PWMN_Start+0x118>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a21      	ldr	r2, [pc, #132]	@ (80062d0 <HAL_TIMEx_PWMN_Start+0x168>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d018      	beq.n	8006280 <HAL_TIMEx_PWMN_Start+0x118>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a20      	ldr	r2, [pc, #128]	@ (80062d4 <HAL_TIMEx_PWMN_Start+0x16c>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d013      	beq.n	8006280 <HAL_TIMEx_PWMN_Start+0x118>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a1e      	ldr	r2, [pc, #120]	@ (80062d8 <HAL_TIMEx_PWMN_Start+0x170>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d00e      	beq.n	8006280 <HAL_TIMEx_PWMN_Start+0x118>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a1d      	ldr	r2, [pc, #116]	@ (80062dc <HAL_TIMEx_PWMN_Start+0x174>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d009      	beq.n	8006280 <HAL_TIMEx_PWMN_Start+0x118>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a1b      	ldr	r2, [pc, #108]	@ (80062e0 <HAL_TIMEx_PWMN_Start+0x178>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d004      	beq.n	8006280 <HAL_TIMEx_PWMN_Start+0x118>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a1a      	ldr	r2, [pc, #104]	@ (80062e4 <HAL_TIMEx_PWMN_Start+0x17c>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d115      	bne.n	80062ac <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	689a      	ldr	r2, [r3, #8]
 8006286:	4b18      	ldr	r3, [pc, #96]	@ (80062e8 <HAL_TIMEx_PWMN_Start+0x180>)
 8006288:	4013      	ands	r3, r2
 800628a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2b06      	cmp	r3, #6
 8006290:	d015      	beq.n	80062be <HAL_TIMEx_PWMN_Start+0x156>
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006298:	d011      	beq.n	80062be <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f042 0201 	orr.w	r2, r2, #1
 80062a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062aa:	e008      	b.n	80062be <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f042 0201 	orr.w	r2, r2, #1
 80062ba:	601a      	str	r2, [r3, #0]
 80062bc:	e000      	b.n	80062c0 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80062c0:	2300      	movs	r3, #0
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3710      	adds	r7, #16
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	40010000 	.word	0x40010000
 80062d0:	40000400 	.word	0x40000400
 80062d4:	40000800 	.word	0x40000800
 80062d8:	40000c00 	.word	0x40000c00
 80062dc:	40010400 	.word	0x40010400
 80062e0:	40001800 	.word	0x40001800
 80062e4:	40014000 	.word	0x40014000
 80062e8:	00010007 	.word	0x00010007

080062ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b085      	sub	sp, #20
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d101      	bne.n	8006304 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006300:	2302      	movs	r3, #2
 8006302:	e06d      	b.n	80063e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2202      	movs	r2, #2
 8006310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a30      	ldr	r2, [pc, #192]	@ (80063ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d004      	beq.n	8006338 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a2f      	ldr	r2, [pc, #188]	@ (80063f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d108      	bne.n	800634a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800633e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	68fa      	ldr	r2, [r7, #12]
 8006346:	4313      	orrs	r3, r2
 8006348:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006350:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	68fa      	ldr	r2, [r7, #12]
 8006358:	4313      	orrs	r3, r2
 800635a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	68fa      	ldr	r2, [r7, #12]
 8006362:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a20      	ldr	r2, [pc, #128]	@ (80063ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d022      	beq.n	80063b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006376:	d01d      	beq.n	80063b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a1d      	ldr	r2, [pc, #116]	@ (80063f4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d018      	beq.n	80063b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a1c      	ldr	r2, [pc, #112]	@ (80063f8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d013      	beq.n	80063b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a1a      	ldr	r2, [pc, #104]	@ (80063fc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d00e      	beq.n	80063b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a15      	ldr	r2, [pc, #84]	@ (80063f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d009      	beq.n	80063b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a16      	ldr	r2, [pc, #88]	@ (8006400 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d004      	beq.n	80063b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a15      	ldr	r2, [pc, #84]	@ (8006404 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d10c      	bne.n	80063ce <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80063ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	68ba      	ldr	r2, [r7, #8]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	68ba      	ldr	r2, [r7, #8]
 80063cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2201      	movs	r2, #1
 80063d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80063de:	2300      	movs	r3, #0
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3714      	adds	r7, #20
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr
 80063ec:	40010000 	.word	0x40010000
 80063f0:	40010400 	.word	0x40010400
 80063f4:	40000400 	.word	0x40000400
 80063f8:	40000800 	.word	0x40000800
 80063fc:	40000c00 	.word	0x40000c00
 8006400:	40001800 	.word	0x40001800
 8006404:	40014000 	.word	0x40014000

08006408 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006408:	b480      	push	{r7}
 800640a:	b085      	sub	sp, #20
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006412:	2300      	movs	r3, #0
 8006414:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800641c:	2b01      	cmp	r3, #1
 800641e:	d101      	bne.n	8006424 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006420:	2302      	movs	r3, #2
 8006422:	e065      	b.n	80064f0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2201      	movs	r2, #1
 8006428:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	4313      	orrs	r3, r2
 8006438:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	4313      	orrs	r3, r2
 8006446:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	4313      	orrs	r3, r2
 8006454:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4313      	orrs	r3, r2
 8006462:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	4313      	orrs	r3, r2
 8006470:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	695b      	ldr	r3, [r3, #20]
 800647c:	4313      	orrs	r3, r2
 800647e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800648a:	4313      	orrs	r3, r2
 800648c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	699b      	ldr	r3, [r3, #24]
 8006498:	041b      	lsls	r3, r3, #16
 800649a:	4313      	orrs	r3, r2
 800649c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a16      	ldr	r2, [pc, #88]	@ (80064fc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d004      	beq.n	80064b2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a14      	ldr	r2, [pc, #80]	@ (8006500 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d115      	bne.n	80064de <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064bc:	051b      	lsls	r3, r3, #20
 80064be:	4313      	orrs	r3, r2
 80064c0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	69db      	ldr	r3, [r3, #28]
 80064cc:	4313      	orrs	r3, r2
 80064ce:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	6a1b      	ldr	r3, [r3, #32]
 80064da:	4313      	orrs	r3, r2
 80064dc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	68fa      	ldr	r2, [r7, #12]
 80064e4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80064ee:	2300      	movs	r3, #0
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3714      	adds	r7, #20
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr
 80064fc:	40010000 	.word	0x40010000
 8006500:	40010400 	.word	0x40010400

08006504 <HAL_TIMEx_ConfigBreakInput>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)
{
 8006504:	b480      	push	{r7}
 8006506:	b08b      	sub	sp, #44	@ 0x2c
 8006508:	af00      	add	r7, sp, #0
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006510:	2300      	movs	r3, #0
 8006512:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  {
    assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));
  }

  /* Check input state */
  __HAL_LOCK(htim);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800651c:	2b01      	cmp	r3, #1
 800651e:	d101      	bne.n	8006524 <HAL_TIMEx_ConfigBreakInput+0x20>
 8006520:	2302      	movs	r3, #2
 8006522:	e0af      	b.n	8006684 <HAL_TIMEx_ConfigBreakInput+0x180>
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (sBreakInputConfig->Source)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	3b01      	subs	r3, #1
 8006532:	2b07      	cmp	r3, #7
 8006534:	d83a      	bhi.n	80065ac <HAL_TIMEx_ConfigBreakInput+0xa8>
 8006536:	a201      	add	r2, pc, #4	@ (adr r2, 800653c <HAL_TIMEx_ConfigBreakInput+0x38>)
 8006538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800653c:	0800655d 	.word	0x0800655d
 8006540:	08006571 	.word	0x08006571
 8006544:	080065ad 	.word	0x080065ad
 8006548:	08006585 	.word	0x08006585
 800654c:	080065ad 	.word	0x080065ad
 8006550:	080065ad 	.word	0x080065ad
 8006554:	080065ad 	.word	0x080065ad
 8006558:	08006599 	.word	0x08006599
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 800655c:	2301      	movs	r3, #1
 800655e:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 8006560:	2300      	movs	r3, #0
 8006562:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 8006564:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006568:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 800656a:	2309      	movs	r3, #9
 800656c:	613b      	str	r3, [r7, #16]
      break;
 800656e:	e026      	b.n	80065be <HAL_TIMEx_ConfigBreakInput+0xba>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 8006570:	2302      	movs	r3, #2
 8006572:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 8006574:	2301      	movs	r3, #1
 8006576:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 8006578:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800657c:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 800657e:	230a      	movs	r3, #10
 8006580:	613b      	str	r3, [r7, #16]
      break;
 8006582:	e01c      	b.n	80065be <HAL_TIMEx_ConfigBreakInput+0xba>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 8006584:	2304      	movs	r3, #4
 8006586:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 8006588:	2302      	movs	r3, #2
 800658a:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 800658c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006590:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 8006592:	230b      	movs	r3, #11
 8006594:	613b      	str	r3, [r7, #16]
      break;
 8006596:	e012      	b.n	80065be <HAL_TIMEx_ConfigBreakInput+0xba>
    }
    case TIM_BREAKINPUTSOURCE_DFSDM1:
    {
      bkin_enable_mask = TIM1_AF1_BKDF1BK0E;
 8006598:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800659c:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_AF1_BKDF1BK0E_Pos;
 800659e:	2308      	movs	r3, #8
 80065a0:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = 0U;
 80065a2:	2300      	movs	r3, #0
 80065a4:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 80065a6:	2300      	movs	r3, #0
 80065a8:	613b      	str	r3, [r7, #16]
      break;
 80065aa:	e008      	b.n	80065be <HAL_TIMEx_ConfigBreakInput+0xba>
    }

    default:
    {
      bkin_enable_mask = 0U;
 80065ac:	2300      	movs	r3, #0
 80065ae:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = 0U;
 80065b0:	2300      	movs	r3, #0
 80065b2:	61bb      	str	r3, [r7, #24]
      bkin_enable_bitpos = 0U;
 80065b4:	2300      	movs	r3, #0
 80065b6:	617b      	str	r3, [r7, #20]
      bkin_polarity_bitpos = 0U;
 80065b8:	2300      	movs	r3, #0
 80065ba:	613b      	str	r3, [r7, #16]
      break;
 80065bc:	bf00      	nop
    }
  }

  switch (BreakInput)
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d003      	beq.n	80065cc <HAL_TIMEx_ConfigBreakInput+0xc8>
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	2b02      	cmp	r3, #2
 80065c8:	d029      	beq.n	800661e <HAL_TIMEx_ConfigBreakInput+0x11a>
 80065ca:	e051      	b.n	8006670 <HAL_TIMEx_ConfigBreakInput+0x16c>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_AF1 register value */
      tmporx = htim->Instance->AF1;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065d2:	623b      	str	r3, [r7, #32]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 80065d4:	69fb      	ldr	r3, [r7, #28]
 80065d6:	43db      	mvns	r3, r3
 80065d8:	6a3a      	ldr	r2, [r7, #32]
 80065da:	4013      	ands	r3, r2
 80065dc:	623b      	str	r3, [r7, #32]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	685a      	ldr	r2, [r3, #4]
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	409a      	lsls	r2, r3
 80065e6:	69fb      	ldr	r3, [r7, #28]
 80065e8:	4013      	ands	r3, r2
 80065ea:	6a3a      	ldr	r2, [r7, #32]
 80065ec:	4313      	orrs	r3, r2
 80065ee:	623b      	str	r3, [r7, #32]

      /* Set the break input polarity */
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	2b08      	cmp	r3, #8
 80065f6:	d00d      	beq.n	8006614 <HAL_TIMEx_ConfigBreakInput+0x110>
      {
        tmporx &= ~bkin_polarity_mask;
 80065f8:	69bb      	ldr	r3, [r7, #24]
 80065fa:	43db      	mvns	r3, r3
 80065fc:	6a3a      	ldr	r2, [r7, #32]
 80065fe:	4013      	ands	r3, r2
 8006600:	623b      	str	r3, [r7, #32]
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	689a      	ldr	r2, [r3, #8]
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	409a      	lsls	r2, r3
 800660a:	69bb      	ldr	r3, [r7, #24]
 800660c:	4013      	ands	r3, r2
 800660e:	6a3a      	ldr	r2, [r7, #32]
 8006610:	4313      	orrs	r3, r2
 8006612:	623b      	str	r3, [r7, #32]
      }

      /* Set TIMx_AF1 */
      htim->Instance->AF1 = tmporx;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	6a3a      	ldr	r2, [r7, #32]
 800661a:	661a      	str	r2, [r3, #96]	@ 0x60
      break;
 800661c:	e02c      	b.n	8006678 <HAL_TIMEx_ConfigBreakInput+0x174>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006624:	623b      	str	r3, [r7, #32]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 8006626:	69fb      	ldr	r3, [r7, #28]
 8006628:	43db      	mvns	r3, r3
 800662a:	6a3a      	ldr	r2, [r7, #32]
 800662c:	4013      	ands	r3, r2
 800662e:	623b      	str	r3, [r7, #32]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	685a      	ldr	r2, [r3, #4]
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	409a      	lsls	r2, r3
 8006638:	69fb      	ldr	r3, [r7, #28]
 800663a:	4013      	ands	r3, r2
 800663c:	6a3a      	ldr	r2, [r7, #32]
 800663e:	4313      	orrs	r3, r2
 8006640:	623b      	str	r3, [r7, #32]

      /* Set the break input polarity */
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	2b08      	cmp	r3, #8
 8006648:	d00d      	beq.n	8006666 <HAL_TIMEx_ConfigBreakInput+0x162>
      {
        tmporx &= ~bkin_polarity_mask;
 800664a:	69bb      	ldr	r3, [r7, #24]
 800664c:	43db      	mvns	r3, r3
 800664e:	6a3a      	ldr	r2, [r7, #32]
 8006650:	4013      	ands	r3, r2
 8006652:	623b      	str	r3, [r7, #32]
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	689a      	ldr	r2, [r3, #8]
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	409a      	lsls	r2, r3
 800665c:	69bb      	ldr	r3, [r7, #24]
 800665e:	4013      	ands	r3, r2
 8006660:	6a3a      	ldr	r2, [r7, #32]
 8006662:	4313      	orrs	r3, r2
 8006664:	623b      	str	r3, [r7, #32]
      }

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	6a3a      	ldr	r2, [r7, #32]
 800666c:	665a      	str	r2, [r3, #100]	@ 0x64
      break;
 800666e:	e003      	b.n	8006678 <HAL_TIMEx_ConfigBreakInput+0x174>
    }
    default:
      status = HAL_ERROR;
 8006670:	2301      	movs	r3, #1
 8006672:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8006676:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2200      	movs	r2, #0
 800667c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006680:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006684:	4618      	mov	r0, r3
 8006686:	372c      	adds	r7, #44	@ 0x2c
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8006690:	b480      	push	{r7}
 8006692:	b087      	sub	sp, #28
 8006694:	af00      	add	r7, sp, #0
 8006696:	60f8      	str	r0, [r7, #12]
 8006698:	60b9      	str	r1, [r7, #8]
 800669a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	f003 030f 	and.w	r3, r3, #15
 80066a2:	2204      	movs	r2, #4
 80066a4:	fa02 f303 	lsl.w	r3, r2, r3
 80066a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	6a1a      	ldr	r2, [r3, #32]
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	43db      	mvns	r3, r3
 80066b2:	401a      	ands	r2, r3
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	6a1a      	ldr	r2, [r3, #32]
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	f003 030f 	and.w	r3, r3, #15
 80066c2:	6879      	ldr	r1, [r7, #4]
 80066c4:	fa01 f303 	lsl.w	r3, r1, r3
 80066c8:	431a      	orrs	r2, r3
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	621a      	str	r2, [r3, #32]
}
 80066ce:	bf00      	nop
 80066d0:	371c      	adds	r7, #28
 80066d2:	46bd      	mov	sp, r7
 80066d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d8:	4770      	bx	lr

080066da <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80066da:	b580      	push	{r7, lr}
 80066dc:	b082      	sub	sp, #8
 80066de:	af00      	add	r7, sp, #0
 80066e0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d101      	bne.n	80066ec <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	e042      	b.n	8006772 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d106      	bne.n	8006704 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2200      	movs	r2, #0
 80066fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f7fa fc74 	bl	8000fec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2224      	movs	r2, #36	@ 0x24
 8006708:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f022 0201 	bic.w	r2, r2, #1
 800671a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006720:	2b00      	cmp	r3, #0
 8006722:	d002      	beq.n	800672a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f001 fa15 	bl	8007b54 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 fcaa 	bl	8007084 <UART_SetConfig>
 8006730:	4603      	mov	r3, r0
 8006732:	2b01      	cmp	r3, #1
 8006734:	d101      	bne.n	800673a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	e01b      	b.n	8006772 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	685a      	ldr	r2, [r3, #4]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006748:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	689a      	ldr	r2, [r3, #8]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006758:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f042 0201 	orr.w	r2, r2, #1
 8006768:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f001 fa94 	bl	8007c98 <UART_CheckIdleState>
 8006770:	4603      	mov	r3, r0
}
 8006772:	4618      	mov	r0, r3
 8006774:	3708      	adds	r7, #8
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}

0800677a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800677a:	b580      	push	{r7, lr}
 800677c:	b08a      	sub	sp, #40	@ 0x28
 800677e:	af02      	add	r7, sp, #8
 8006780:	60f8      	str	r0, [r7, #12]
 8006782:	60b9      	str	r1, [r7, #8]
 8006784:	603b      	str	r3, [r7, #0]
 8006786:	4613      	mov	r3, r2
 8006788:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006790:	2b20      	cmp	r3, #32
 8006792:	d17b      	bne.n	800688c <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d002      	beq.n	80067a0 <HAL_UART_Transmit+0x26>
 800679a:	88fb      	ldrh	r3, [r7, #6]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d101      	bne.n	80067a4 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80067a0:	2301      	movs	r3, #1
 80067a2:	e074      	b.n	800688e <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2200      	movs	r2, #0
 80067a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2221      	movs	r2, #33	@ 0x21
 80067b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80067b4:	f7fa fd50 	bl	8001258 <HAL_GetTick>
 80067b8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	88fa      	ldrh	r2, [r7, #6]
 80067be:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	88fa      	ldrh	r2, [r7, #6]
 80067c6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067d2:	d108      	bne.n	80067e6 <HAL_UART_Transmit+0x6c>
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	691b      	ldr	r3, [r3, #16]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d104      	bne.n	80067e6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80067dc:	2300      	movs	r3, #0
 80067de:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	61bb      	str	r3, [r7, #24]
 80067e4:	e003      	b.n	80067ee <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80067ea:	2300      	movs	r3, #0
 80067ec:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80067ee:	e030      	b.n	8006852 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	9300      	str	r3, [sp, #0]
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	2200      	movs	r2, #0
 80067f8:	2180      	movs	r1, #128	@ 0x80
 80067fa:	68f8      	ldr	r0, [r7, #12]
 80067fc:	f001 faf6 	bl	8007dec <UART_WaitOnFlagUntilTimeout>
 8006800:	4603      	mov	r3, r0
 8006802:	2b00      	cmp	r3, #0
 8006804:	d005      	beq.n	8006812 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2220      	movs	r2, #32
 800680a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800680e:	2303      	movs	r3, #3
 8006810:	e03d      	b.n	800688e <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d10b      	bne.n	8006830 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006818:	69bb      	ldr	r3, [r7, #24]
 800681a:	881b      	ldrh	r3, [r3, #0]
 800681c:	461a      	mov	r2, r3
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006826:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006828:	69bb      	ldr	r3, [r7, #24]
 800682a:	3302      	adds	r3, #2
 800682c:	61bb      	str	r3, [r7, #24]
 800682e:	e007      	b.n	8006840 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006830:	69fb      	ldr	r3, [r7, #28]
 8006832:	781a      	ldrb	r2, [r3, #0]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800683a:	69fb      	ldr	r3, [r7, #28]
 800683c:	3301      	adds	r3, #1
 800683e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006846:	b29b      	uxth	r3, r3
 8006848:	3b01      	subs	r3, #1
 800684a:	b29a      	uxth	r2, r3
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006858:	b29b      	uxth	r3, r3
 800685a:	2b00      	cmp	r3, #0
 800685c:	d1c8      	bne.n	80067f0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	9300      	str	r3, [sp, #0]
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	2200      	movs	r2, #0
 8006866:	2140      	movs	r1, #64	@ 0x40
 8006868:	68f8      	ldr	r0, [r7, #12]
 800686a:	f001 fabf 	bl	8007dec <UART_WaitOnFlagUntilTimeout>
 800686e:	4603      	mov	r3, r0
 8006870:	2b00      	cmp	r3, #0
 8006872:	d005      	beq.n	8006880 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2220      	movs	r2, #32
 8006878:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800687c:	2303      	movs	r3, #3
 800687e:	e006      	b.n	800688e <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2220      	movs	r2, #32
 8006884:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006888:	2300      	movs	r3, #0
 800688a:	e000      	b.n	800688e <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800688c:	2302      	movs	r3, #2
  }
}
 800688e:	4618      	mov	r0, r3
 8006890:	3720      	adds	r7, #32
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}
	...

08006898 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b0ba      	sub	sp, #232	@ 0xe8
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	69db      	ldr	r3, [r3, #28]
 80068a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80068be:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80068c2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80068c6:	4013      	ands	r3, r2
 80068c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80068cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d11b      	bne.n	800690c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80068d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068d8:	f003 0320 	and.w	r3, r3, #32
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d015      	beq.n	800690c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80068e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068e4:	f003 0320 	and.w	r3, r3, #32
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d105      	bne.n	80068f8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80068ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d009      	beq.n	800690c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	f000 8393 	beq.w	8007028 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	4798      	blx	r3
      }
      return;
 800690a:	e38d      	b.n	8007028 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800690c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006910:	2b00      	cmp	r3, #0
 8006912:	f000 8123 	beq.w	8006b5c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006916:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800691a:	4b8d      	ldr	r3, [pc, #564]	@ (8006b50 <HAL_UART_IRQHandler+0x2b8>)
 800691c:	4013      	ands	r3, r2
 800691e:	2b00      	cmp	r3, #0
 8006920:	d106      	bne.n	8006930 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006922:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006926:	4b8b      	ldr	r3, [pc, #556]	@ (8006b54 <HAL_UART_IRQHandler+0x2bc>)
 8006928:	4013      	ands	r3, r2
 800692a:	2b00      	cmp	r3, #0
 800692c:	f000 8116 	beq.w	8006b5c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006930:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006934:	f003 0301 	and.w	r3, r3, #1
 8006938:	2b00      	cmp	r3, #0
 800693a:	d011      	beq.n	8006960 <HAL_UART_IRQHandler+0xc8>
 800693c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006940:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006944:	2b00      	cmp	r3, #0
 8006946:	d00b      	beq.n	8006960 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	2201      	movs	r2, #1
 800694e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006956:	f043 0201 	orr.w	r2, r3, #1
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006960:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006964:	f003 0302 	and.w	r3, r3, #2
 8006968:	2b00      	cmp	r3, #0
 800696a:	d011      	beq.n	8006990 <HAL_UART_IRQHandler+0xf8>
 800696c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006970:	f003 0301 	and.w	r3, r3, #1
 8006974:	2b00      	cmp	r3, #0
 8006976:	d00b      	beq.n	8006990 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	2202      	movs	r2, #2
 800697e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006986:	f043 0204 	orr.w	r2, r3, #4
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006990:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006994:	f003 0304 	and.w	r3, r3, #4
 8006998:	2b00      	cmp	r3, #0
 800699a:	d011      	beq.n	80069c0 <HAL_UART_IRQHandler+0x128>
 800699c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80069a0:	f003 0301 	and.w	r3, r3, #1
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d00b      	beq.n	80069c0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	2204      	movs	r2, #4
 80069ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069b6:	f043 0202 	orr.w	r2, r3, #2
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80069c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069c4:	f003 0308 	and.w	r3, r3, #8
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d017      	beq.n	80069fc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80069cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069d0:	f003 0320 	and.w	r3, r3, #32
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d105      	bne.n	80069e4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80069d8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80069dc:	4b5c      	ldr	r3, [pc, #368]	@ (8006b50 <HAL_UART_IRQHandler+0x2b8>)
 80069de:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d00b      	beq.n	80069fc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	2208      	movs	r2, #8
 80069ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069f2:	f043 0208 	orr.w	r2, r3, #8
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80069fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d012      	beq.n	8006a2e <HAL_UART_IRQHandler+0x196>
 8006a08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a0c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d00c      	beq.n	8006a2e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006a1c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a24:	f043 0220 	orr.w	r2, r3, #32
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	f000 82f9 	beq.w	800702c <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a3e:	f003 0320 	and.w	r3, r3, #32
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d013      	beq.n	8006a6e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006a46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a4a:	f003 0320 	and.w	r3, r3, #32
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d105      	bne.n	8006a5e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006a52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d007      	beq.n	8006a6e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d003      	beq.n	8006a6e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a74:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a82:	2b40      	cmp	r3, #64	@ 0x40
 8006a84:	d005      	beq.n	8006a92 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006a86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006a8a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d054      	beq.n	8006b3c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f001 fa18 	bl	8007ec8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006aa2:	2b40      	cmp	r3, #64	@ 0x40
 8006aa4:	d146      	bne.n	8006b34 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	3308      	adds	r3, #8
 8006aac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006ab4:	e853 3f00 	ldrex	r3, [r3]
 8006ab8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006abc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006ac0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ac4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	3308      	adds	r3, #8
 8006ace:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006ad2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006ad6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ada:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006ade:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006ae2:	e841 2300 	strex	r3, r2, [r1]
 8006ae6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006aea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d1d9      	bne.n	8006aa6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d017      	beq.n	8006b2c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b02:	4a15      	ldr	r2, [pc, #84]	@ (8006b58 <HAL_UART_IRQHandler+0x2c0>)
 8006b04:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f7fb f885 	bl	8001c1c <HAL_DMA_Abort_IT>
 8006b12:	4603      	mov	r3, r0
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d019      	beq.n	8006b4c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006b26:	4610      	mov	r0, r2
 8006b28:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b2a:	e00f      	b.n	8006b4c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f000 fa93 	bl	8007058 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b32:	e00b      	b.n	8006b4c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f000 fa8f 	bl	8007058 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b3a:	e007      	b.n	8006b4c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f000 fa8b 	bl	8007058 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2200      	movs	r2, #0
 8006b46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006b4a:	e26f      	b.n	800702c <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b4c:	bf00      	nop
    return;
 8006b4e:	e26d      	b.n	800702c <HAL_UART_IRQHandler+0x794>
 8006b50:	10000001 	.word	0x10000001
 8006b54:	04000120 	.word	0x04000120
 8006b58:	08007f95 	.word	0x08007f95

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	f040 8203 	bne.w	8006f6c <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006b66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b6a:	f003 0310 	and.w	r3, r3, #16
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	f000 81fc 	beq.w	8006f6c <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006b74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b78:	f003 0310 	and.w	r3, r3, #16
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	f000 81f5 	beq.w	8006f6c <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	2210      	movs	r2, #16
 8006b88:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b94:	2b40      	cmp	r3, #64	@ 0x40
 8006b96:	f040 816d 	bne.w	8006e74 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4aa4      	ldr	r2, [pc, #656]	@ (8006e34 <HAL_UART_IRQHandler+0x59c>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d068      	beq.n	8006c7a <HAL_UART_IRQHandler+0x3e2>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4aa1      	ldr	r2, [pc, #644]	@ (8006e38 <HAL_UART_IRQHandler+0x5a0>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d061      	beq.n	8006c7a <HAL_UART_IRQHandler+0x3e2>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a9f      	ldr	r2, [pc, #636]	@ (8006e3c <HAL_UART_IRQHandler+0x5a4>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d05a      	beq.n	8006c7a <HAL_UART_IRQHandler+0x3e2>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a9c      	ldr	r2, [pc, #624]	@ (8006e40 <HAL_UART_IRQHandler+0x5a8>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d053      	beq.n	8006c7a <HAL_UART_IRQHandler+0x3e2>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a9a      	ldr	r2, [pc, #616]	@ (8006e44 <HAL_UART_IRQHandler+0x5ac>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d04c      	beq.n	8006c7a <HAL_UART_IRQHandler+0x3e2>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a97      	ldr	r2, [pc, #604]	@ (8006e48 <HAL_UART_IRQHandler+0x5b0>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d045      	beq.n	8006c7a <HAL_UART_IRQHandler+0x3e2>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a95      	ldr	r2, [pc, #596]	@ (8006e4c <HAL_UART_IRQHandler+0x5b4>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d03e      	beq.n	8006c7a <HAL_UART_IRQHandler+0x3e2>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a92      	ldr	r2, [pc, #584]	@ (8006e50 <HAL_UART_IRQHandler+0x5b8>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d037      	beq.n	8006c7a <HAL_UART_IRQHandler+0x3e2>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a90      	ldr	r2, [pc, #576]	@ (8006e54 <HAL_UART_IRQHandler+0x5bc>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d030      	beq.n	8006c7a <HAL_UART_IRQHandler+0x3e2>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a8d      	ldr	r2, [pc, #564]	@ (8006e58 <HAL_UART_IRQHandler+0x5c0>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d029      	beq.n	8006c7a <HAL_UART_IRQHandler+0x3e2>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a8b      	ldr	r2, [pc, #556]	@ (8006e5c <HAL_UART_IRQHandler+0x5c4>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d022      	beq.n	8006c7a <HAL_UART_IRQHandler+0x3e2>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a88      	ldr	r2, [pc, #544]	@ (8006e60 <HAL_UART_IRQHandler+0x5c8>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d01b      	beq.n	8006c7a <HAL_UART_IRQHandler+0x3e2>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a86      	ldr	r2, [pc, #536]	@ (8006e64 <HAL_UART_IRQHandler+0x5cc>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d014      	beq.n	8006c7a <HAL_UART_IRQHandler+0x3e2>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a83      	ldr	r2, [pc, #524]	@ (8006e68 <HAL_UART_IRQHandler+0x5d0>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d00d      	beq.n	8006c7a <HAL_UART_IRQHandler+0x3e2>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a81      	ldr	r2, [pc, #516]	@ (8006e6c <HAL_UART_IRQHandler+0x5d4>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d006      	beq.n	8006c7a <HAL_UART_IRQHandler+0x3e2>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a7e      	ldr	r2, [pc, #504]	@ (8006e70 <HAL_UART_IRQHandler+0x5d8>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d106      	bne.n	8006c88 <HAL_UART_IRQHandler+0x3f0>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	e005      	b.n	8006c94 <HAL_UART_IRQHandler+0x3fc>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006c98:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	f000 80ad 	beq.w	8006dfc <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006ca8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006cac:	429a      	cmp	r2, r3
 8006cae:	f080 80a5 	bcs.w	8006dfc <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006cb8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006cc2:	69db      	ldr	r3, [r3, #28]
 8006cc4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006cc8:	f000 8087 	beq.w	8006dda <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006cd8:	e853 3f00 	ldrex	r3, [r3]
 8006cdc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006ce0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006ce4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ce8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006cf6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006cfa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cfe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006d02:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006d06:	e841 2300 	strex	r3, r2, [r1]
 8006d0a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006d0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d1da      	bne.n	8006ccc <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	3308      	adds	r3, #8
 8006d1c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d1e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006d20:	e853 3f00 	ldrex	r3, [r3]
 8006d24:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006d26:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006d28:	f023 0301 	bic.w	r3, r3, #1
 8006d2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	3308      	adds	r3, #8
 8006d36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006d3a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006d3e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d40:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006d42:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006d46:	e841 2300 	strex	r3, r2, [r1]
 8006d4a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006d4c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d1e1      	bne.n	8006d16 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	3308      	adds	r3, #8
 8006d58:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006d5c:	e853 3f00 	ldrex	r3, [r3]
 8006d60:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006d62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006d64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d68:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	3308      	adds	r3, #8
 8006d72:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006d76:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006d78:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d7a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006d7c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006d7e:	e841 2300 	strex	r3, r2, [r1]
 8006d82:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006d84:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d1e3      	bne.n	8006d52 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2220      	movs	r2, #32
 8006d8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006da0:	e853 3f00 	ldrex	r3, [r3]
 8006da4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006da6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006da8:	f023 0310 	bic.w	r3, r3, #16
 8006dac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	461a      	mov	r2, r3
 8006db6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006dba:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006dbc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dbe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006dc0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006dc2:	e841 2300 	strex	r3, r2, [r1]
 8006dc6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006dc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d1e4      	bne.n	8006d98 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f7fa fc03 	bl	80015e0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2202      	movs	r2, #2
 8006dde:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	1ad3      	subs	r3, r2, r3
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	4619      	mov	r1, r3
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f000 f939 	bl	800706c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006dfa:	e119      	b.n	8007030 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006e02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006e06:	429a      	cmp	r2, r3
 8006e08:	f040 8112 	bne.w	8007030 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e12:	69db      	ldr	r3, [r3, #28]
 8006e14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e18:	f040 810a 	bne.w	8007030 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2202      	movs	r2, #2
 8006e20:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006e28:	4619      	mov	r1, r3
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 f91e 	bl	800706c <HAL_UARTEx_RxEventCallback>
      return;
 8006e30:	e0fe      	b.n	8007030 <HAL_UART_IRQHandler+0x798>
 8006e32:	bf00      	nop
 8006e34:	40020010 	.word	0x40020010
 8006e38:	40020028 	.word	0x40020028
 8006e3c:	40020040 	.word	0x40020040
 8006e40:	40020058 	.word	0x40020058
 8006e44:	40020070 	.word	0x40020070
 8006e48:	40020088 	.word	0x40020088
 8006e4c:	400200a0 	.word	0x400200a0
 8006e50:	400200b8 	.word	0x400200b8
 8006e54:	40020410 	.word	0x40020410
 8006e58:	40020428 	.word	0x40020428
 8006e5c:	40020440 	.word	0x40020440
 8006e60:	40020458 	.word	0x40020458
 8006e64:	40020470 	.word	0x40020470
 8006e68:	40020488 	.word	0x40020488
 8006e6c:	400204a0 	.word	0x400204a0
 8006e70:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	1ad3      	subs	r3, r2, r3
 8006e84:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	f000 80cf 	beq.w	8007034 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8006e96:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	f000 80ca 	beq.w	8007034 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ea8:	e853 3f00 	ldrex	r3, [r3]
 8006eac:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006eae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006eb0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006eb4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	461a      	mov	r2, r3
 8006ebe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006ec2:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ec4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006ec8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006eca:	e841 2300 	strex	r3, r2, [r1]
 8006ece:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006ed0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d1e4      	bne.n	8006ea0 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	3308      	adds	r3, #8
 8006edc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ee0:	e853 3f00 	ldrex	r3, [r3]
 8006ee4:	623b      	str	r3, [r7, #32]
   return(result);
 8006ee6:	6a3a      	ldr	r2, [r7, #32]
 8006ee8:	4b55      	ldr	r3, [pc, #340]	@ (8007040 <HAL_UART_IRQHandler+0x7a8>)
 8006eea:	4013      	ands	r3, r2
 8006eec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	3308      	adds	r3, #8
 8006ef6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006efa:	633a      	str	r2, [r7, #48]	@ 0x30
 8006efc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006efe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f02:	e841 2300 	strex	r3, r2, [r1]
 8006f06:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d1e3      	bne.n	8006ed6 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2220      	movs	r2, #32
 8006f12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	e853 3f00 	ldrex	r3, [r3]
 8006f2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f023 0310 	bic.w	r3, r3, #16
 8006f36:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	461a      	mov	r2, r3
 8006f40:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006f44:	61fb      	str	r3, [r7, #28]
 8006f46:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f48:	69b9      	ldr	r1, [r7, #24]
 8006f4a:	69fa      	ldr	r2, [r7, #28]
 8006f4c:	e841 2300 	strex	r3, r2, [r1]
 8006f50:	617b      	str	r3, [r7, #20]
   return(result);
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d1e4      	bne.n	8006f22 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2202      	movs	r2, #2
 8006f5c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006f5e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006f62:	4619      	mov	r1, r3
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 f881 	bl	800706c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006f6a:	e063      	b.n	8007034 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006f6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f70:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d00e      	beq.n	8006f96 <HAL_UART_IRQHandler+0x6fe>
 8006f78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f7c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d008      	beq.n	8006f96 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006f8c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f001 f83d 	bl	800800e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006f94:	e051      	b.n	800703a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006f96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d014      	beq.n	8006fcc <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006fa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d105      	bne.n	8006fba <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006fae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006fb2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d008      	beq.n	8006fcc <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d03a      	beq.n	8007038 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	4798      	blx	r3
    }
    return;
 8006fca:	e035      	b.n	8007038 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006fcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d009      	beq.n	8006fec <HAL_UART_IRQHandler+0x754>
 8006fd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d003      	beq.n	8006fec <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f000 ffe7 	bl	8007fb8 <UART_EndTransmit_IT>
    return;
 8006fea:	e026      	b.n	800703a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006fec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ff0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d009      	beq.n	800700c <HAL_UART_IRQHandler+0x774>
 8006ff8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ffc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007000:	2b00      	cmp	r3, #0
 8007002:	d003      	beq.n	800700c <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f001 f816 	bl	8008036 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800700a:	e016      	b.n	800703a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800700c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007010:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007014:	2b00      	cmp	r3, #0
 8007016:	d010      	beq.n	800703a <HAL_UART_IRQHandler+0x7a2>
 8007018:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800701c:	2b00      	cmp	r3, #0
 800701e:	da0c      	bge.n	800703a <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f000 fffe 	bl	8008022 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007026:	e008      	b.n	800703a <HAL_UART_IRQHandler+0x7a2>
      return;
 8007028:	bf00      	nop
 800702a:	e006      	b.n	800703a <HAL_UART_IRQHandler+0x7a2>
    return;
 800702c:	bf00      	nop
 800702e:	e004      	b.n	800703a <HAL_UART_IRQHandler+0x7a2>
      return;
 8007030:	bf00      	nop
 8007032:	e002      	b.n	800703a <HAL_UART_IRQHandler+0x7a2>
      return;
 8007034:	bf00      	nop
 8007036:	e000      	b.n	800703a <HAL_UART_IRQHandler+0x7a2>
    return;
 8007038:	bf00      	nop
  }
}
 800703a:	37e8      	adds	r7, #232	@ 0xe8
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}
 8007040:	effffffe 	.word	0xeffffffe

08007044 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007044:	b480      	push	{r7}
 8007046:	b083      	sub	sp, #12
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800704c:	bf00      	nop
 800704e:	370c      	adds	r7, #12
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr

08007058 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007058:	b480      	push	{r7}
 800705a:	b083      	sub	sp, #12
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007060:	bf00      	nop
 8007062:	370c      	adds	r7, #12
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr

0800706c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800706c:	b480      	push	{r7}
 800706e:	b083      	sub	sp, #12
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	460b      	mov	r3, r1
 8007076:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007078:	bf00      	nop
 800707a:	370c      	adds	r7, #12
 800707c:	46bd      	mov	sp, r7
 800707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007082:	4770      	bx	lr

08007084 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007084:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007088:	b092      	sub	sp, #72	@ 0x48
 800708a:	af00      	add	r7, sp, #0
 800708c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800708e:	2300      	movs	r3, #0
 8007090:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	689a      	ldr	r2, [r3, #8]
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	691b      	ldr	r3, [r3, #16]
 800709c:	431a      	orrs	r2, r3
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	695b      	ldr	r3, [r3, #20]
 80070a2:	431a      	orrs	r2, r3
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	69db      	ldr	r3, [r3, #28]
 80070a8:	4313      	orrs	r3, r2
 80070aa:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	681a      	ldr	r2, [r3, #0]
 80070b2:	4bbe      	ldr	r3, [pc, #760]	@ (80073ac <UART_SetConfig+0x328>)
 80070b4:	4013      	ands	r3, r2
 80070b6:	697a      	ldr	r2, [r7, #20]
 80070b8:	6812      	ldr	r2, [r2, #0]
 80070ba:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80070bc:	430b      	orrs	r3, r1
 80070be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	68da      	ldr	r2, [r3, #12]
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	430a      	orrs	r2, r1
 80070d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	699b      	ldr	r3, [r3, #24]
 80070da:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4ab3      	ldr	r2, [pc, #716]	@ (80073b0 <UART_SetConfig+0x32c>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d004      	beq.n	80070f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	6a1b      	ldr	r3, [r3, #32]
 80070ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80070ec:	4313      	orrs	r3, r2
 80070ee:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	689a      	ldr	r2, [r3, #8]
 80070f6:	4baf      	ldr	r3, [pc, #700]	@ (80073b4 <UART_SetConfig+0x330>)
 80070f8:	4013      	ands	r3, r2
 80070fa:	697a      	ldr	r2, [r7, #20]
 80070fc:	6812      	ldr	r2, [r2, #0]
 80070fe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007100:	430b      	orrs	r3, r1
 8007102:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800710a:	f023 010f 	bic.w	r1, r3, #15
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	430a      	orrs	r2, r1
 8007118:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4aa6      	ldr	r2, [pc, #664]	@ (80073b8 <UART_SetConfig+0x334>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d177      	bne.n	8007214 <UART_SetConfig+0x190>
 8007124:	4ba5      	ldr	r3, [pc, #660]	@ (80073bc <UART_SetConfig+0x338>)
 8007126:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007128:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800712c:	2b28      	cmp	r3, #40	@ 0x28
 800712e:	d86d      	bhi.n	800720c <UART_SetConfig+0x188>
 8007130:	a201      	add	r2, pc, #4	@ (adr r2, 8007138 <UART_SetConfig+0xb4>)
 8007132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007136:	bf00      	nop
 8007138:	080071dd 	.word	0x080071dd
 800713c:	0800720d 	.word	0x0800720d
 8007140:	0800720d 	.word	0x0800720d
 8007144:	0800720d 	.word	0x0800720d
 8007148:	0800720d 	.word	0x0800720d
 800714c:	0800720d 	.word	0x0800720d
 8007150:	0800720d 	.word	0x0800720d
 8007154:	0800720d 	.word	0x0800720d
 8007158:	080071e5 	.word	0x080071e5
 800715c:	0800720d 	.word	0x0800720d
 8007160:	0800720d 	.word	0x0800720d
 8007164:	0800720d 	.word	0x0800720d
 8007168:	0800720d 	.word	0x0800720d
 800716c:	0800720d 	.word	0x0800720d
 8007170:	0800720d 	.word	0x0800720d
 8007174:	0800720d 	.word	0x0800720d
 8007178:	080071ed 	.word	0x080071ed
 800717c:	0800720d 	.word	0x0800720d
 8007180:	0800720d 	.word	0x0800720d
 8007184:	0800720d 	.word	0x0800720d
 8007188:	0800720d 	.word	0x0800720d
 800718c:	0800720d 	.word	0x0800720d
 8007190:	0800720d 	.word	0x0800720d
 8007194:	0800720d 	.word	0x0800720d
 8007198:	080071f5 	.word	0x080071f5
 800719c:	0800720d 	.word	0x0800720d
 80071a0:	0800720d 	.word	0x0800720d
 80071a4:	0800720d 	.word	0x0800720d
 80071a8:	0800720d 	.word	0x0800720d
 80071ac:	0800720d 	.word	0x0800720d
 80071b0:	0800720d 	.word	0x0800720d
 80071b4:	0800720d 	.word	0x0800720d
 80071b8:	080071fd 	.word	0x080071fd
 80071bc:	0800720d 	.word	0x0800720d
 80071c0:	0800720d 	.word	0x0800720d
 80071c4:	0800720d 	.word	0x0800720d
 80071c8:	0800720d 	.word	0x0800720d
 80071cc:	0800720d 	.word	0x0800720d
 80071d0:	0800720d 	.word	0x0800720d
 80071d4:	0800720d 	.word	0x0800720d
 80071d8:	08007205 	.word	0x08007205
 80071dc:	2301      	movs	r3, #1
 80071de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071e2:	e222      	b.n	800762a <UART_SetConfig+0x5a6>
 80071e4:	2304      	movs	r3, #4
 80071e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071ea:	e21e      	b.n	800762a <UART_SetConfig+0x5a6>
 80071ec:	2308      	movs	r3, #8
 80071ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071f2:	e21a      	b.n	800762a <UART_SetConfig+0x5a6>
 80071f4:	2310      	movs	r3, #16
 80071f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071fa:	e216      	b.n	800762a <UART_SetConfig+0x5a6>
 80071fc:	2320      	movs	r3, #32
 80071fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007202:	e212      	b.n	800762a <UART_SetConfig+0x5a6>
 8007204:	2340      	movs	r3, #64	@ 0x40
 8007206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800720a:	e20e      	b.n	800762a <UART_SetConfig+0x5a6>
 800720c:	2380      	movs	r3, #128	@ 0x80
 800720e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007212:	e20a      	b.n	800762a <UART_SetConfig+0x5a6>
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a69      	ldr	r2, [pc, #420]	@ (80073c0 <UART_SetConfig+0x33c>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d130      	bne.n	8007280 <UART_SetConfig+0x1fc>
 800721e:	4b67      	ldr	r3, [pc, #412]	@ (80073bc <UART_SetConfig+0x338>)
 8007220:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007222:	f003 0307 	and.w	r3, r3, #7
 8007226:	2b05      	cmp	r3, #5
 8007228:	d826      	bhi.n	8007278 <UART_SetConfig+0x1f4>
 800722a:	a201      	add	r2, pc, #4	@ (adr r2, 8007230 <UART_SetConfig+0x1ac>)
 800722c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007230:	08007249 	.word	0x08007249
 8007234:	08007251 	.word	0x08007251
 8007238:	08007259 	.word	0x08007259
 800723c:	08007261 	.word	0x08007261
 8007240:	08007269 	.word	0x08007269
 8007244:	08007271 	.word	0x08007271
 8007248:	2300      	movs	r3, #0
 800724a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800724e:	e1ec      	b.n	800762a <UART_SetConfig+0x5a6>
 8007250:	2304      	movs	r3, #4
 8007252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007256:	e1e8      	b.n	800762a <UART_SetConfig+0x5a6>
 8007258:	2308      	movs	r3, #8
 800725a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800725e:	e1e4      	b.n	800762a <UART_SetConfig+0x5a6>
 8007260:	2310      	movs	r3, #16
 8007262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007266:	e1e0      	b.n	800762a <UART_SetConfig+0x5a6>
 8007268:	2320      	movs	r3, #32
 800726a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800726e:	e1dc      	b.n	800762a <UART_SetConfig+0x5a6>
 8007270:	2340      	movs	r3, #64	@ 0x40
 8007272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007276:	e1d8      	b.n	800762a <UART_SetConfig+0x5a6>
 8007278:	2380      	movs	r3, #128	@ 0x80
 800727a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800727e:	e1d4      	b.n	800762a <UART_SetConfig+0x5a6>
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a4f      	ldr	r2, [pc, #316]	@ (80073c4 <UART_SetConfig+0x340>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d130      	bne.n	80072ec <UART_SetConfig+0x268>
 800728a:	4b4c      	ldr	r3, [pc, #304]	@ (80073bc <UART_SetConfig+0x338>)
 800728c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800728e:	f003 0307 	and.w	r3, r3, #7
 8007292:	2b05      	cmp	r3, #5
 8007294:	d826      	bhi.n	80072e4 <UART_SetConfig+0x260>
 8007296:	a201      	add	r2, pc, #4	@ (adr r2, 800729c <UART_SetConfig+0x218>)
 8007298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800729c:	080072b5 	.word	0x080072b5
 80072a0:	080072bd 	.word	0x080072bd
 80072a4:	080072c5 	.word	0x080072c5
 80072a8:	080072cd 	.word	0x080072cd
 80072ac:	080072d5 	.word	0x080072d5
 80072b0:	080072dd 	.word	0x080072dd
 80072b4:	2300      	movs	r3, #0
 80072b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072ba:	e1b6      	b.n	800762a <UART_SetConfig+0x5a6>
 80072bc:	2304      	movs	r3, #4
 80072be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072c2:	e1b2      	b.n	800762a <UART_SetConfig+0x5a6>
 80072c4:	2308      	movs	r3, #8
 80072c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072ca:	e1ae      	b.n	800762a <UART_SetConfig+0x5a6>
 80072cc:	2310      	movs	r3, #16
 80072ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072d2:	e1aa      	b.n	800762a <UART_SetConfig+0x5a6>
 80072d4:	2320      	movs	r3, #32
 80072d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072da:	e1a6      	b.n	800762a <UART_SetConfig+0x5a6>
 80072dc:	2340      	movs	r3, #64	@ 0x40
 80072de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072e2:	e1a2      	b.n	800762a <UART_SetConfig+0x5a6>
 80072e4:	2380      	movs	r3, #128	@ 0x80
 80072e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072ea:	e19e      	b.n	800762a <UART_SetConfig+0x5a6>
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a35      	ldr	r2, [pc, #212]	@ (80073c8 <UART_SetConfig+0x344>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d130      	bne.n	8007358 <UART_SetConfig+0x2d4>
 80072f6:	4b31      	ldr	r3, [pc, #196]	@ (80073bc <UART_SetConfig+0x338>)
 80072f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072fa:	f003 0307 	and.w	r3, r3, #7
 80072fe:	2b05      	cmp	r3, #5
 8007300:	d826      	bhi.n	8007350 <UART_SetConfig+0x2cc>
 8007302:	a201      	add	r2, pc, #4	@ (adr r2, 8007308 <UART_SetConfig+0x284>)
 8007304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007308:	08007321 	.word	0x08007321
 800730c:	08007329 	.word	0x08007329
 8007310:	08007331 	.word	0x08007331
 8007314:	08007339 	.word	0x08007339
 8007318:	08007341 	.word	0x08007341
 800731c:	08007349 	.word	0x08007349
 8007320:	2300      	movs	r3, #0
 8007322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007326:	e180      	b.n	800762a <UART_SetConfig+0x5a6>
 8007328:	2304      	movs	r3, #4
 800732a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800732e:	e17c      	b.n	800762a <UART_SetConfig+0x5a6>
 8007330:	2308      	movs	r3, #8
 8007332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007336:	e178      	b.n	800762a <UART_SetConfig+0x5a6>
 8007338:	2310      	movs	r3, #16
 800733a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800733e:	e174      	b.n	800762a <UART_SetConfig+0x5a6>
 8007340:	2320      	movs	r3, #32
 8007342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007346:	e170      	b.n	800762a <UART_SetConfig+0x5a6>
 8007348:	2340      	movs	r3, #64	@ 0x40
 800734a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800734e:	e16c      	b.n	800762a <UART_SetConfig+0x5a6>
 8007350:	2380      	movs	r3, #128	@ 0x80
 8007352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007356:	e168      	b.n	800762a <UART_SetConfig+0x5a6>
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a1b      	ldr	r2, [pc, #108]	@ (80073cc <UART_SetConfig+0x348>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d142      	bne.n	80073e8 <UART_SetConfig+0x364>
 8007362:	4b16      	ldr	r3, [pc, #88]	@ (80073bc <UART_SetConfig+0x338>)
 8007364:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007366:	f003 0307 	and.w	r3, r3, #7
 800736a:	2b05      	cmp	r3, #5
 800736c:	d838      	bhi.n	80073e0 <UART_SetConfig+0x35c>
 800736e:	a201      	add	r2, pc, #4	@ (adr r2, 8007374 <UART_SetConfig+0x2f0>)
 8007370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007374:	0800738d 	.word	0x0800738d
 8007378:	08007395 	.word	0x08007395
 800737c:	0800739d 	.word	0x0800739d
 8007380:	080073a5 	.word	0x080073a5
 8007384:	080073d1 	.word	0x080073d1
 8007388:	080073d9 	.word	0x080073d9
 800738c:	2300      	movs	r3, #0
 800738e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007392:	e14a      	b.n	800762a <UART_SetConfig+0x5a6>
 8007394:	2304      	movs	r3, #4
 8007396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800739a:	e146      	b.n	800762a <UART_SetConfig+0x5a6>
 800739c:	2308      	movs	r3, #8
 800739e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073a2:	e142      	b.n	800762a <UART_SetConfig+0x5a6>
 80073a4:	2310      	movs	r3, #16
 80073a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073aa:	e13e      	b.n	800762a <UART_SetConfig+0x5a6>
 80073ac:	cfff69f3 	.word	0xcfff69f3
 80073b0:	58000c00 	.word	0x58000c00
 80073b4:	11fff4ff 	.word	0x11fff4ff
 80073b8:	40011000 	.word	0x40011000
 80073bc:	58024400 	.word	0x58024400
 80073c0:	40004400 	.word	0x40004400
 80073c4:	40004800 	.word	0x40004800
 80073c8:	40004c00 	.word	0x40004c00
 80073cc:	40005000 	.word	0x40005000
 80073d0:	2320      	movs	r3, #32
 80073d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073d6:	e128      	b.n	800762a <UART_SetConfig+0x5a6>
 80073d8:	2340      	movs	r3, #64	@ 0x40
 80073da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073de:	e124      	b.n	800762a <UART_SetConfig+0x5a6>
 80073e0:	2380      	movs	r3, #128	@ 0x80
 80073e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073e6:	e120      	b.n	800762a <UART_SetConfig+0x5a6>
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4acb      	ldr	r2, [pc, #812]	@ (800771c <UART_SetConfig+0x698>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d176      	bne.n	80074e0 <UART_SetConfig+0x45c>
 80073f2:	4bcb      	ldr	r3, [pc, #812]	@ (8007720 <UART_SetConfig+0x69c>)
 80073f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80073fa:	2b28      	cmp	r3, #40	@ 0x28
 80073fc:	d86c      	bhi.n	80074d8 <UART_SetConfig+0x454>
 80073fe:	a201      	add	r2, pc, #4	@ (adr r2, 8007404 <UART_SetConfig+0x380>)
 8007400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007404:	080074a9 	.word	0x080074a9
 8007408:	080074d9 	.word	0x080074d9
 800740c:	080074d9 	.word	0x080074d9
 8007410:	080074d9 	.word	0x080074d9
 8007414:	080074d9 	.word	0x080074d9
 8007418:	080074d9 	.word	0x080074d9
 800741c:	080074d9 	.word	0x080074d9
 8007420:	080074d9 	.word	0x080074d9
 8007424:	080074b1 	.word	0x080074b1
 8007428:	080074d9 	.word	0x080074d9
 800742c:	080074d9 	.word	0x080074d9
 8007430:	080074d9 	.word	0x080074d9
 8007434:	080074d9 	.word	0x080074d9
 8007438:	080074d9 	.word	0x080074d9
 800743c:	080074d9 	.word	0x080074d9
 8007440:	080074d9 	.word	0x080074d9
 8007444:	080074b9 	.word	0x080074b9
 8007448:	080074d9 	.word	0x080074d9
 800744c:	080074d9 	.word	0x080074d9
 8007450:	080074d9 	.word	0x080074d9
 8007454:	080074d9 	.word	0x080074d9
 8007458:	080074d9 	.word	0x080074d9
 800745c:	080074d9 	.word	0x080074d9
 8007460:	080074d9 	.word	0x080074d9
 8007464:	080074c1 	.word	0x080074c1
 8007468:	080074d9 	.word	0x080074d9
 800746c:	080074d9 	.word	0x080074d9
 8007470:	080074d9 	.word	0x080074d9
 8007474:	080074d9 	.word	0x080074d9
 8007478:	080074d9 	.word	0x080074d9
 800747c:	080074d9 	.word	0x080074d9
 8007480:	080074d9 	.word	0x080074d9
 8007484:	080074c9 	.word	0x080074c9
 8007488:	080074d9 	.word	0x080074d9
 800748c:	080074d9 	.word	0x080074d9
 8007490:	080074d9 	.word	0x080074d9
 8007494:	080074d9 	.word	0x080074d9
 8007498:	080074d9 	.word	0x080074d9
 800749c:	080074d9 	.word	0x080074d9
 80074a0:	080074d9 	.word	0x080074d9
 80074a4:	080074d1 	.word	0x080074d1
 80074a8:	2301      	movs	r3, #1
 80074aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074ae:	e0bc      	b.n	800762a <UART_SetConfig+0x5a6>
 80074b0:	2304      	movs	r3, #4
 80074b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074b6:	e0b8      	b.n	800762a <UART_SetConfig+0x5a6>
 80074b8:	2308      	movs	r3, #8
 80074ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074be:	e0b4      	b.n	800762a <UART_SetConfig+0x5a6>
 80074c0:	2310      	movs	r3, #16
 80074c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074c6:	e0b0      	b.n	800762a <UART_SetConfig+0x5a6>
 80074c8:	2320      	movs	r3, #32
 80074ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074ce:	e0ac      	b.n	800762a <UART_SetConfig+0x5a6>
 80074d0:	2340      	movs	r3, #64	@ 0x40
 80074d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074d6:	e0a8      	b.n	800762a <UART_SetConfig+0x5a6>
 80074d8:	2380      	movs	r3, #128	@ 0x80
 80074da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074de:	e0a4      	b.n	800762a <UART_SetConfig+0x5a6>
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a8f      	ldr	r2, [pc, #572]	@ (8007724 <UART_SetConfig+0x6a0>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d130      	bne.n	800754c <UART_SetConfig+0x4c8>
 80074ea:	4b8d      	ldr	r3, [pc, #564]	@ (8007720 <UART_SetConfig+0x69c>)
 80074ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074ee:	f003 0307 	and.w	r3, r3, #7
 80074f2:	2b05      	cmp	r3, #5
 80074f4:	d826      	bhi.n	8007544 <UART_SetConfig+0x4c0>
 80074f6:	a201      	add	r2, pc, #4	@ (adr r2, 80074fc <UART_SetConfig+0x478>)
 80074f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074fc:	08007515 	.word	0x08007515
 8007500:	0800751d 	.word	0x0800751d
 8007504:	08007525 	.word	0x08007525
 8007508:	0800752d 	.word	0x0800752d
 800750c:	08007535 	.word	0x08007535
 8007510:	0800753d 	.word	0x0800753d
 8007514:	2300      	movs	r3, #0
 8007516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800751a:	e086      	b.n	800762a <UART_SetConfig+0x5a6>
 800751c:	2304      	movs	r3, #4
 800751e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007522:	e082      	b.n	800762a <UART_SetConfig+0x5a6>
 8007524:	2308      	movs	r3, #8
 8007526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800752a:	e07e      	b.n	800762a <UART_SetConfig+0x5a6>
 800752c:	2310      	movs	r3, #16
 800752e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007532:	e07a      	b.n	800762a <UART_SetConfig+0x5a6>
 8007534:	2320      	movs	r3, #32
 8007536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800753a:	e076      	b.n	800762a <UART_SetConfig+0x5a6>
 800753c:	2340      	movs	r3, #64	@ 0x40
 800753e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007542:	e072      	b.n	800762a <UART_SetConfig+0x5a6>
 8007544:	2380      	movs	r3, #128	@ 0x80
 8007546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800754a:	e06e      	b.n	800762a <UART_SetConfig+0x5a6>
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a75      	ldr	r2, [pc, #468]	@ (8007728 <UART_SetConfig+0x6a4>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d130      	bne.n	80075b8 <UART_SetConfig+0x534>
 8007556:	4b72      	ldr	r3, [pc, #456]	@ (8007720 <UART_SetConfig+0x69c>)
 8007558:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800755a:	f003 0307 	and.w	r3, r3, #7
 800755e:	2b05      	cmp	r3, #5
 8007560:	d826      	bhi.n	80075b0 <UART_SetConfig+0x52c>
 8007562:	a201      	add	r2, pc, #4	@ (adr r2, 8007568 <UART_SetConfig+0x4e4>)
 8007564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007568:	08007581 	.word	0x08007581
 800756c:	08007589 	.word	0x08007589
 8007570:	08007591 	.word	0x08007591
 8007574:	08007599 	.word	0x08007599
 8007578:	080075a1 	.word	0x080075a1
 800757c:	080075a9 	.word	0x080075a9
 8007580:	2300      	movs	r3, #0
 8007582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007586:	e050      	b.n	800762a <UART_SetConfig+0x5a6>
 8007588:	2304      	movs	r3, #4
 800758a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800758e:	e04c      	b.n	800762a <UART_SetConfig+0x5a6>
 8007590:	2308      	movs	r3, #8
 8007592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007596:	e048      	b.n	800762a <UART_SetConfig+0x5a6>
 8007598:	2310      	movs	r3, #16
 800759a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800759e:	e044      	b.n	800762a <UART_SetConfig+0x5a6>
 80075a0:	2320      	movs	r3, #32
 80075a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075a6:	e040      	b.n	800762a <UART_SetConfig+0x5a6>
 80075a8:	2340      	movs	r3, #64	@ 0x40
 80075aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075ae:	e03c      	b.n	800762a <UART_SetConfig+0x5a6>
 80075b0:	2380      	movs	r3, #128	@ 0x80
 80075b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075b6:	e038      	b.n	800762a <UART_SetConfig+0x5a6>
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a5b      	ldr	r2, [pc, #364]	@ (800772c <UART_SetConfig+0x6a8>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d130      	bne.n	8007624 <UART_SetConfig+0x5a0>
 80075c2:	4b57      	ldr	r3, [pc, #348]	@ (8007720 <UART_SetConfig+0x69c>)
 80075c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075c6:	f003 0307 	and.w	r3, r3, #7
 80075ca:	2b05      	cmp	r3, #5
 80075cc:	d826      	bhi.n	800761c <UART_SetConfig+0x598>
 80075ce:	a201      	add	r2, pc, #4	@ (adr r2, 80075d4 <UART_SetConfig+0x550>)
 80075d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075d4:	080075ed 	.word	0x080075ed
 80075d8:	080075f5 	.word	0x080075f5
 80075dc:	080075fd 	.word	0x080075fd
 80075e0:	08007605 	.word	0x08007605
 80075e4:	0800760d 	.word	0x0800760d
 80075e8:	08007615 	.word	0x08007615
 80075ec:	2302      	movs	r3, #2
 80075ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075f2:	e01a      	b.n	800762a <UART_SetConfig+0x5a6>
 80075f4:	2304      	movs	r3, #4
 80075f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075fa:	e016      	b.n	800762a <UART_SetConfig+0x5a6>
 80075fc:	2308      	movs	r3, #8
 80075fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007602:	e012      	b.n	800762a <UART_SetConfig+0x5a6>
 8007604:	2310      	movs	r3, #16
 8007606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800760a:	e00e      	b.n	800762a <UART_SetConfig+0x5a6>
 800760c:	2320      	movs	r3, #32
 800760e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007612:	e00a      	b.n	800762a <UART_SetConfig+0x5a6>
 8007614:	2340      	movs	r3, #64	@ 0x40
 8007616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800761a:	e006      	b.n	800762a <UART_SetConfig+0x5a6>
 800761c:	2380      	movs	r3, #128	@ 0x80
 800761e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007622:	e002      	b.n	800762a <UART_SetConfig+0x5a6>
 8007624:	2380      	movs	r3, #128	@ 0x80
 8007626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a3f      	ldr	r2, [pc, #252]	@ (800772c <UART_SetConfig+0x6a8>)
 8007630:	4293      	cmp	r3, r2
 8007632:	f040 80f8 	bne.w	8007826 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007636:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800763a:	2b20      	cmp	r3, #32
 800763c:	dc46      	bgt.n	80076cc <UART_SetConfig+0x648>
 800763e:	2b02      	cmp	r3, #2
 8007640:	f2c0 8082 	blt.w	8007748 <UART_SetConfig+0x6c4>
 8007644:	3b02      	subs	r3, #2
 8007646:	2b1e      	cmp	r3, #30
 8007648:	d87e      	bhi.n	8007748 <UART_SetConfig+0x6c4>
 800764a:	a201      	add	r2, pc, #4	@ (adr r2, 8007650 <UART_SetConfig+0x5cc>)
 800764c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007650:	080076d3 	.word	0x080076d3
 8007654:	08007749 	.word	0x08007749
 8007658:	080076db 	.word	0x080076db
 800765c:	08007749 	.word	0x08007749
 8007660:	08007749 	.word	0x08007749
 8007664:	08007749 	.word	0x08007749
 8007668:	080076eb 	.word	0x080076eb
 800766c:	08007749 	.word	0x08007749
 8007670:	08007749 	.word	0x08007749
 8007674:	08007749 	.word	0x08007749
 8007678:	08007749 	.word	0x08007749
 800767c:	08007749 	.word	0x08007749
 8007680:	08007749 	.word	0x08007749
 8007684:	08007749 	.word	0x08007749
 8007688:	080076fb 	.word	0x080076fb
 800768c:	08007749 	.word	0x08007749
 8007690:	08007749 	.word	0x08007749
 8007694:	08007749 	.word	0x08007749
 8007698:	08007749 	.word	0x08007749
 800769c:	08007749 	.word	0x08007749
 80076a0:	08007749 	.word	0x08007749
 80076a4:	08007749 	.word	0x08007749
 80076a8:	08007749 	.word	0x08007749
 80076ac:	08007749 	.word	0x08007749
 80076b0:	08007749 	.word	0x08007749
 80076b4:	08007749 	.word	0x08007749
 80076b8:	08007749 	.word	0x08007749
 80076bc:	08007749 	.word	0x08007749
 80076c0:	08007749 	.word	0x08007749
 80076c4:	08007749 	.word	0x08007749
 80076c8:	0800773b 	.word	0x0800773b
 80076cc:	2b40      	cmp	r3, #64	@ 0x40
 80076ce:	d037      	beq.n	8007740 <UART_SetConfig+0x6bc>
 80076d0:	e03a      	b.n	8007748 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80076d2:	f7fd f91b 	bl	800490c <HAL_RCCEx_GetD3PCLK1Freq>
 80076d6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80076d8:	e03c      	b.n	8007754 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80076de:	4618      	mov	r0, r3
 80076e0:	f7fd f92a 	bl	8004938 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80076e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076e8:	e034      	b.n	8007754 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80076ea:	f107 0318 	add.w	r3, r7, #24
 80076ee:	4618      	mov	r0, r3
 80076f0:	f7fd fa76 	bl	8004be0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80076f4:	69fb      	ldr	r3, [r7, #28]
 80076f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076f8:	e02c      	b.n	8007754 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80076fa:	4b09      	ldr	r3, [pc, #36]	@ (8007720 <UART_SetConfig+0x69c>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f003 0320 	and.w	r3, r3, #32
 8007702:	2b00      	cmp	r3, #0
 8007704:	d016      	beq.n	8007734 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007706:	4b06      	ldr	r3, [pc, #24]	@ (8007720 <UART_SetConfig+0x69c>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	08db      	lsrs	r3, r3, #3
 800770c:	f003 0303 	and.w	r3, r3, #3
 8007710:	4a07      	ldr	r2, [pc, #28]	@ (8007730 <UART_SetConfig+0x6ac>)
 8007712:	fa22 f303 	lsr.w	r3, r2, r3
 8007716:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007718:	e01c      	b.n	8007754 <UART_SetConfig+0x6d0>
 800771a:	bf00      	nop
 800771c:	40011400 	.word	0x40011400
 8007720:	58024400 	.word	0x58024400
 8007724:	40007800 	.word	0x40007800
 8007728:	40007c00 	.word	0x40007c00
 800772c:	58000c00 	.word	0x58000c00
 8007730:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007734:	4b9d      	ldr	r3, [pc, #628]	@ (80079ac <UART_SetConfig+0x928>)
 8007736:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007738:	e00c      	b.n	8007754 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800773a:	4b9d      	ldr	r3, [pc, #628]	@ (80079b0 <UART_SetConfig+0x92c>)
 800773c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800773e:	e009      	b.n	8007754 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007740:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007744:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007746:	e005      	b.n	8007754 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007748:	2300      	movs	r3, #0
 800774a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800774c:	2301      	movs	r3, #1
 800774e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007752:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007754:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007756:	2b00      	cmp	r3, #0
 8007758:	f000 81de 	beq.w	8007b18 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007760:	4a94      	ldr	r2, [pc, #592]	@ (80079b4 <UART_SetConfig+0x930>)
 8007762:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007766:	461a      	mov	r2, r3
 8007768:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800776a:	fbb3 f3f2 	udiv	r3, r3, r2
 800776e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	685a      	ldr	r2, [r3, #4]
 8007774:	4613      	mov	r3, r2
 8007776:	005b      	lsls	r3, r3, #1
 8007778:	4413      	add	r3, r2
 800777a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800777c:	429a      	cmp	r2, r3
 800777e:	d305      	bcc.n	800778c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007786:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007788:	429a      	cmp	r2, r3
 800778a:	d903      	bls.n	8007794 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800778c:	2301      	movs	r3, #1
 800778e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007792:	e1c1      	b.n	8007b18 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007794:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007796:	2200      	movs	r2, #0
 8007798:	60bb      	str	r3, [r7, #8]
 800779a:	60fa      	str	r2, [r7, #12]
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077a0:	4a84      	ldr	r2, [pc, #528]	@ (80079b4 <UART_SetConfig+0x930>)
 80077a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	2200      	movs	r2, #0
 80077aa:	603b      	str	r3, [r7, #0]
 80077ac:	607a      	str	r2, [r7, #4]
 80077ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80077b6:	f7f8 fd8f 	bl	80002d8 <__aeabi_uldivmod>
 80077ba:	4602      	mov	r2, r0
 80077bc:	460b      	mov	r3, r1
 80077be:	4610      	mov	r0, r2
 80077c0:	4619      	mov	r1, r3
 80077c2:	f04f 0200 	mov.w	r2, #0
 80077c6:	f04f 0300 	mov.w	r3, #0
 80077ca:	020b      	lsls	r3, r1, #8
 80077cc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80077d0:	0202      	lsls	r2, r0, #8
 80077d2:	6979      	ldr	r1, [r7, #20]
 80077d4:	6849      	ldr	r1, [r1, #4]
 80077d6:	0849      	lsrs	r1, r1, #1
 80077d8:	2000      	movs	r0, #0
 80077da:	460c      	mov	r4, r1
 80077dc:	4605      	mov	r5, r0
 80077de:	eb12 0804 	adds.w	r8, r2, r4
 80077e2:	eb43 0905 	adc.w	r9, r3, r5
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	2200      	movs	r2, #0
 80077ec:	469a      	mov	sl, r3
 80077ee:	4693      	mov	fp, r2
 80077f0:	4652      	mov	r2, sl
 80077f2:	465b      	mov	r3, fp
 80077f4:	4640      	mov	r0, r8
 80077f6:	4649      	mov	r1, r9
 80077f8:	f7f8 fd6e 	bl	80002d8 <__aeabi_uldivmod>
 80077fc:	4602      	mov	r2, r0
 80077fe:	460b      	mov	r3, r1
 8007800:	4613      	mov	r3, r2
 8007802:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007806:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800780a:	d308      	bcc.n	800781e <UART_SetConfig+0x79a>
 800780c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800780e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007812:	d204      	bcs.n	800781e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800781a:	60da      	str	r2, [r3, #12]
 800781c:	e17c      	b.n	8007b18 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800781e:	2301      	movs	r3, #1
 8007820:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007824:	e178      	b.n	8007b18 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	69db      	ldr	r3, [r3, #28]
 800782a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800782e:	f040 80c5 	bne.w	80079bc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007832:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007836:	2b20      	cmp	r3, #32
 8007838:	dc48      	bgt.n	80078cc <UART_SetConfig+0x848>
 800783a:	2b00      	cmp	r3, #0
 800783c:	db7b      	blt.n	8007936 <UART_SetConfig+0x8b2>
 800783e:	2b20      	cmp	r3, #32
 8007840:	d879      	bhi.n	8007936 <UART_SetConfig+0x8b2>
 8007842:	a201      	add	r2, pc, #4	@ (adr r2, 8007848 <UART_SetConfig+0x7c4>)
 8007844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007848:	080078d3 	.word	0x080078d3
 800784c:	080078db 	.word	0x080078db
 8007850:	08007937 	.word	0x08007937
 8007854:	08007937 	.word	0x08007937
 8007858:	080078e3 	.word	0x080078e3
 800785c:	08007937 	.word	0x08007937
 8007860:	08007937 	.word	0x08007937
 8007864:	08007937 	.word	0x08007937
 8007868:	080078f3 	.word	0x080078f3
 800786c:	08007937 	.word	0x08007937
 8007870:	08007937 	.word	0x08007937
 8007874:	08007937 	.word	0x08007937
 8007878:	08007937 	.word	0x08007937
 800787c:	08007937 	.word	0x08007937
 8007880:	08007937 	.word	0x08007937
 8007884:	08007937 	.word	0x08007937
 8007888:	08007903 	.word	0x08007903
 800788c:	08007937 	.word	0x08007937
 8007890:	08007937 	.word	0x08007937
 8007894:	08007937 	.word	0x08007937
 8007898:	08007937 	.word	0x08007937
 800789c:	08007937 	.word	0x08007937
 80078a0:	08007937 	.word	0x08007937
 80078a4:	08007937 	.word	0x08007937
 80078a8:	08007937 	.word	0x08007937
 80078ac:	08007937 	.word	0x08007937
 80078b0:	08007937 	.word	0x08007937
 80078b4:	08007937 	.word	0x08007937
 80078b8:	08007937 	.word	0x08007937
 80078bc:	08007937 	.word	0x08007937
 80078c0:	08007937 	.word	0x08007937
 80078c4:	08007937 	.word	0x08007937
 80078c8:	08007929 	.word	0x08007929
 80078cc:	2b40      	cmp	r3, #64	@ 0x40
 80078ce:	d02e      	beq.n	800792e <UART_SetConfig+0x8aa>
 80078d0:	e031      	b.n	8007936 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078d2:	f7fb fde5 	bl	80034a0 <HAL_RCC_GetPCLK1Freq>
 80078d6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80078d8:	e033      	b.n	8007942 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80078da:	f7fb fdf7 	bl	80034cc <HAL_RCC_GetPCLK2Freq>
 80078de:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80078e0:	e02f      	b.n	8007942 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80078e6:	4618      	mov	r0, r3
 80078e8:	f7fd f826 	bl	8004938 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80078ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078f0:	e027      	b.n	8007942 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078f2:	f107 0318 	add.w	r3, r7, #24
 80078f6:	4618      	mov	r0, r3
 80078f8:	f7fd f972 	bl	8004be0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80078fc:	69fb      	ldr	r3, [r7, #28]
 80078fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007900:	e01f      	b.n	8007942 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007902:	4b2d      	ldr	r3, [pc, #180]	@ (80079b8 <UART_SetConfig+0x934>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f003 0320 	and.w	r3, r3, #32
 800790a:	2b00      	cmp	r3, #0
 800790c:	d009      	beq.n	8007922 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800790e:	4b2a      	ldr	r3, [pc, #168]	@ (80079b8 <UART_SetConfig+0x934>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	08db      	lsrs	r3, r3, #3
 8007914:	f003 0303 	and.w	r3, r3, #3
 8007918:	4a24      	ldr	r2, [pc, #144]	@ (80079ac <UART_SetConfig+0x928>)
 800791a:	fa22 f303 	lsr.w	r3, r2, r3
 800791e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007920:	e00f      	b.n	8007942 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007922:	4b22      	ldr	r3, [pc, #136]	@ (80079ac <UART_SetConfig+0x928>)
 8007924:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007926:	e00c      	b.n	8007942 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007928:	4b21      	ldr	r3, [pc, #132]	@ (80079b0 <UART_SetConfig+0x92c>)
 800792a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800792c:	e009      	b.n	8007942 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800792e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007932:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007934:	e005      	b.n	8007942 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007936:	2300      	movs	r3, #0
 8007938:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800793a:	2301      	movs	r3, #1
 800793c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007940:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007942:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007944:	2b00      	cmp	r3, #0
 8007946:	f000 80e7 	beq.w	8007b18 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800794e:	4a19      	ldr	r2, [pc, #100]	@ (80079b4 <UART_SetConfig+0x930>)
 8007950:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007954:	461a      	mov	r2, r3
 8007956:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007958:	fbb3 f3f2 	udiv	r3, r3, r2
 800795c:	005a      	lsls	r2, r3, #1
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	085b      	lsrs	r3, r3, #1
 8007964:	441a      	add	r2, r3
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	685b      	ldr	r3, [r3, #4]
 800796a:	fbb2 f3f3 	udiv	r3, r2, r3
 800796e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007972:	2b0f      	cmp	r3, #15
 8007974:	d916      	bls.n	80079a4 <UART_SetConfig+0x920>
 8007976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007978:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800797c:	d212      	bcs.n	80079a4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800797e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007980:	b29b      	uxth	r3, r3
 8007982:	f023 030f 	bic.w	r3, r3, #15
 8007986:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800798a:	085b      	lsrs	r3, r3, #1
 800798c:	b29b      	uxth	r3, r3
 800798e:	f003 0307 	and.w	r3, r3, #7
 8007992:	b29a      	uxth	r2, r3
 8007994:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007996:	4313      	orrs	r3, r2
 8007998:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80079a0:	60da      	str	r2, [r3, #12]
 80079a2:	e0b9      	b.n	8007b18 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80079a4:	2301      	movs	r3, #1
 80079a6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80079aa:	e0b5      	b.n	8007b18 <UART_SetConfig+0xa94>
 80079ac:	03d09000 	.word	0x03d09000
 80079b0:	003d0900 	.word	0x003d0900
 80079b4:	08008c34 	.word	0x08008c34
 80079b8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80079bc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80079c0:	2b20      	cmp	r3, #32
 80079c2:	dc49      	bgt.n	8007a58 <UART_SetConfig+0x9d4>
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	db7c      	blt.n	8007ac2 <UART_SetConfig+0xa3e>
 80079c8:	2b20      	cmp	r3, #32
 80079ca:	d87a      	bhi.n	8007ac2 <UART_SetConfig+0xa3e>
 80079cc:	a201      	add	r2, pc, #4	@ (adr r2, 80079d4 <UART_SetConfig+0x950>)
 80079ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079d2:	bf00      	nop
 80079d4:	08007a5f 	.word	0x08007a5f
 80079d8:	08007a67 	.word	0x08007a67
 80079dc:	08007ac3 	.word	0x08007ac3
 80079e0:	08007ac3 	.word	0x08007ac3
 80079e4:	08007a6f 	.word	0x08007a6f
 80079e8:	08007ac3 	.word	0x08007ac3
 80079ec:	08007ac3 	.word	0x08007ac3
 80079f0:	08007ac3 	.word	0x08007ac3
 80079f4:	08007a7f 	.word	0x08007a7f
 80079f8:	08007ac3 	.word	0x08007ac3
 80079fc:	08007ac3 	.word	0x08007ac3
 8007a00:	08007ac3 	.word	0x08007ac3
 8007a04:	08007ac3 	.word	0x08007ac3
 8007a08:	08007ac3 	.word	0x08007ac3
 8007a0c:	08007ac3 	.word	0x08007ac3
 8007a10:	08007ac3 	.word	0x08007ac3
 8007a14:	08007a8f 	.word	0x08007a8f
 8007a18:	08007ac3 	.word	0x08007ac3
 8007a1c:	08007ac3 	.word	0x08007ac3
 8007a20:	08007ac3 	.word	0x08007ac3
 8007a24:	08007ac3 	.word	0x08007ac3
 8007a28:	08007ac3 	.word	0x08007ac3
 8007a2c:	08007ac3 	.word	0x08007ac3
 8007a30:	08007ac3 	.word	0x08007ac3
 8007a34:	08007ac3 	.word	0x08007ac3
 8007a38:	08007ac3 	.word	0x08007ac3
 8007a3c:	08007ac3 	.word	0x08007ac3
 8007a40:	08007ac3 	.word	0x08007ac3
 8007a44:	08007ac3 	.word	0x08007ac3
 8007a48:	08007ac3 	.word	0x08007ac3
 8007a4c:	08007ac3 	.word	0x08007ac3
 8007a50:	08007ac3 	.word	0x08007ac3
 8007a54:	08007ab5 	.word	0x08007ab5
 8007a58:	2b40      	cmp	r3, #64	@ 0x40
 8007a5a:	d02e      	beq.n	8007aba <UART_SetConfig+0xa36>
 8007a5c:	e031      	b.n	8007ac2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a5e:	f7fb fd1f 	bl	80034a0 <HAL_RCC_GetPCLK1Freq>
 8007a62:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007a64:	e033      	b.n	8007ace <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a66:	f7fb fd31 	bl	80034cc <HAL_RCC_GetPCLK2Freq>
 8007a6a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007a6c:	e02f      	b.n	8007ace <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007a72:	4618      	mov	r0, r3
 8007a74:	f7fc ff60 	bl	8004938 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a7c:	e027      	b.n	8007ace <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a7e:	f107 0318 	add.w	r3, r7, #24
 8007a82:	4618      	mov	r0, r3
 8007a84:	f7fd f8ac 	bl	8004be0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007a88:	69fb      	ldr	r3, [r7, #28]
 8007a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a8c:	e01f      	b.n	8007ace <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a8e:	4b2d      	ldr	r3, [pc, #180]	@ (8007b44 <UART_SetConfig+0xac0>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f003 0320 	and.w	r3, r3, #32
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d009      	beq.n	8007aae <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007a9a:	4b2a      	ldr	r3, [pc, #168]	@ (8007b44 <UART_SetConfig+0xac0>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	08db      	lsrs	r3, r3, #3
 8007aa0:	f003 0303 	and.w	r3, r3, #3
 8007aa4:	4a28      	ldr	r2, [pc, #160]	@ (8007b48 <UART_SetConfig+0xac4>)
 8007aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8007aaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007aac:	e00f      	b.n	8007ace <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007aae:	4b26      	ldr	r3, [pc, #152]	@ (8007b48 <UART_SetConfig+0xac4>)
 8007ab0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ab2:	e00c      	b.n	8007ace <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007ab4:	4b25      	ldr	r3, [pc, #148]	@ (8007b4c <UART_SetConfig+0xac8>)
 8007ab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ab8:	e009      	b.n	8007ace <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007aba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ac0:	e005      	b.n	8007ace <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007acc:	bf00      	nop
    }

    if (pclk != 0U)
 8007ace:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d021      	beq.n	8007b18 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ad8:	4a1d      	ldr	r2, [pc, #116]	@ (8007b50 <UART_SetConfig+0xacc>)
 8007ada:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ade:	461a      	mov	r2, r3
 8007ae0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ae2:	fbb3 f2f2 	udiv	r2, r3, r2
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	085b      	lsrs	r3, r3, #1
 8007aec:	441a      	add	r2, r3
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007af6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007af8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007afa:	2b0f      	cmp	r3, #15
 8007afc:	d909      	bls.n	8007b12 <UART_SetConfig+0xa8e>
 8007afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b04:	d205      	bcs.n	8007b12 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007b06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b08:	b29a      	uxth	r2, r3
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	60da      	str	r2, [r3, #12]
 8007b10:	e002      	b.n	8007b18 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007b12:	2301      	movs	r3, #1
 8007b14:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	2201      	movs	r2, #1
 8007b24:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	2200      	movs	r2, #0
 8007b32:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007b34:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3748      	adds	r7, #72	@ 0x48
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b42:	bf00      	nop
 8007b44:	58024400 	.word	0x58024400
 8007b48:	03d09000 	.word	0x03d09000
 8007b4c:	003d0900 	.word	0x003d0900
 8007b50:	08008c34 	.word	0x08008c34

08007b54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b083      	sub	sp, #12
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b60:	f003 0308 	and.w	r3, r3, #8
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d00a      	beq.n	8007b7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	430a      	orrs	r2, r1
 8007b7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b82:	f003 0301 	and.w	r3, r3, #1
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d00a      	beq.n	8007ba0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	430a      	orrs	r2, r1
 8007b9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ba4:	f003 0302 	and.w	r3, r3, #2
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d00a      	beq.n	8007bc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	685b      	ldr	r3, [r3, #4]
 8007bb2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	430a      	orrs	r2, r1
 8007bc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bc6:	f003 0304 	and.w	r3, r3, #4
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d00a      	beq.n	8007be4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	430a      	orrs	r2, r1
 8007be2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007be8:	f003 0310 	and.w	r3, r3, #16
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d00a      	beq.n	8007c06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	689b      	ldr	r3, [r3, #8]
 8007bf6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	430a      	orrs	r2, r1
 8007c04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c0a:	f003 0320 	and.w	r3, r3, #32
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d00a      	beq.n	8007c28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	430a      	orrs	r2, r1
 8007c26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d01a      	beq.n	8007c6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	430a      	orrs	r2, r1
 8007c48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c52:	d10a      	bne.n	8007c6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	430a      	orrs	r2, r1
 8007c68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d00a      	beq.n	8007c8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	430a      	orrs	r2, r1
 8007c8a:	605a      	str	r2, [r3, #4]
  }
}
 8007c8c:	bf00      	nop
 8007c8e:	370c      	adds	r7, #12
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr

08007c98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b098      	sub	sp, #96	@ 0x60
 8007c9c:	af02      	add	r7, sp, #8
 8007c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007ca8:	f7f9 fad6 	bl	8001258 <HAL_GetTick>
 8007cac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f003 0308 	and.w	r3, r3, #8
 8007cb8:	2b08      	cmp	r3, #8
 8007cba:	d12f      	bne.n	8007d1c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007cbc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007cc0:	9300      	str	r3, [sp, #0]
 8007cc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 f88e 	bl	8007dec <UART_WaitOnFlagUntilTimeout>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d022      	beq.n	8007d1c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cde:	e853 3f00 	ldrex	r3, [r3]
 8007ce2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007ce4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ce6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007cea:	653b      	str	r3, [r7, #80]	@ 0x50
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	461a      	mov	r2, r3
 8007cf2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007cf4:	647b      	str	r3, [r7, #68]	@ 0x44
 8007cf6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007cfa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007cfc:	e841 2300 	strex	r3, r2, [r1]
 8007d00:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007d02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d1e6      	bne.n	8007cd6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2220      	movs	r2, #32
 8007d0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2200      	movs	r2, #0
 8007d14:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d18:	2303      	movs	r3, #3
 8007d1a:	e063      	b.n	8007de4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f003 0304 	and.w	r3, r3, #4
 8007d26:	2b04      	cmp	r3, #4
 8007d28:	d149      	bne.n	8007dbe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d2a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007d2e:	9300      	str	r3, [sp, #0]
 8007d30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d32:	2200      	movs	r2, #0
 8007d34:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f000 f857 	bl	8007dec <UART_WaitOnFlagUntilTimeout>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d03c      	beq.n	8007dbe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d4c:	e853 3f00 	ldrex	r3, [r3]
 8007d50:	623b      	str	r3, [r7, #32]
   return(result);
 8007d52:	6a3b      	ldr	r3, [r7, #32]
 8007d54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d58:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	461a      	mov	r2, r3
 8007d60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d62:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d64:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d6a:	e841 2300 	strex	r3, r2, [r1]
 8007d6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d1e6      	bne.n	8007d44 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	3308      	adds	r3, #8
 8007d7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	e853 3f00 	ldrex	r3, [r3]
 8007d84:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	f023 0301 	bic.w	r3, r3, #1
 8007d8c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	3308      	adds	r3, #8
 8007d94:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007d96:	61fa      	str	r2, [r7, #28]
 8007d98:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d9a:	69b9      	ldr	r1, [r7, #24]
 8007d9c:	69fa      	ldr	r2, [r7, #28]
 8007d9e:	e841 2300 	strex	r3, r2, [r1]
 8007da2:	617b      	str	r3, [r7, #20]
   return(result);
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d1e5      	bne.n	8007d76 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2220      	movs	r2, #32
 8007dae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2200      	movs	r2, #0
 8007db6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007dba:	2303      	movs	r3, #3
 8007dbc:	e012      	b.n	8007de4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2220      	movs	r2, #32
 8007dc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2220      	movs	r2, #32
 8007dca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007de2:	2300      	movs	r3, #0
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3758      	adds	r7, #88	@ 0x58
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}

08007dec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b084      	sub	sp, #16
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	60f8      	str	r0, [r7, #12]
 8007df4:	60b9      	str	r1, [r7, #8]
 8007df6:	603b      	str	r3, [r7, #0]
 8007df8:	4613      	mov	r3, r2
 8007dfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007dfc:	e04f      	b.n	8007e9e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007dfe:	69bb      	ldr	r3, [r7, #24]
 8007e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e04:	d04b      	beq.n	8007e9e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e06:	f7f9 fa27 	bl	8001258 <HAL_GetTick>
 8007e0a:	4602      	mov	r2, r0
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	1ad3      	subs	r3, r2, r3
 8007e10:	69ba      	ldr	r2, [r7, #24]
 8007e12:	429a      	cmp	r2, r3
 8007e14:	d302      	bcc.n	8007e1c <UART_WaitOnFlagUntilTimeout+0x30>
 8007e16:	69bb      	ldr	r3, [r7, #24]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d101      	bne.n	8007e20 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007e1c:	2303      	movs	r3, #3
 8007e1e:	e04e      	b.n	8007ebe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f003 0304 	and.w	r3, r3, #4
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d037      	beq.n	8007e9e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	2b80      	cmp	r3, #128	@ 0x80
 8007e32:	d034      	beq.n	8007e9e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	2b40      	cmp	r3, #64	@ 0x40
 8007e38:	d031      	beq.n	8007e9e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	69db      	ldr	r3, [r3, #28]
 8007e40:	f003 0308 	and.w	r3, r3, #8
 8007e44:	2b08      	cmp	r3, #8
 8007e46:	d110      	bne.n	8007e6a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	2208      	movs	r2, #8
 8007e4e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007e50:	68f8      	ldr	r0, [r7, #12]
 8007e52:	f000 f839 	bl	8007ec8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2208      	movs	r2, #8
 8007e5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2200      	movs	r2, #0
 8007e62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007e66:	2301      	movs	r3, #1
 8007e68:	e029      	b.n	8007ebe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	69db      	ldr	r3, [r3, #28]
 8007e70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007e74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e78:	d111      	bne.n	8007e9e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007e82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007e84:	68f8      	ldr	r0, [r7, #12]
 8007e86:	f000 f81f 	bl	8007ec8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2220      	movs	r2, #32
 8007e8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2200      	movs	r2, #0
 8007e96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007e9a:	2303      	movs	r3, #3
 8007e9c:	e00f      	b.n	8007ebe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	69da      	ldr	r2, [r3, #28]
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	4013      	ands	r3, r2
 8007ea8:	68ba      	ldr	r2, [r7, #8]
 8007eaa:	429a      	cmp	r2, r3
 8007eac:	bf0c      	ite	eq
 8007eae:	2301      	moveq	r3, #1
 8007eb0:	2300      	movne	r3, #0
 8007eb2:	b2db      	uxtb	r3, r3
 8007eb4:	461a      	mov	r2, r3
 8007eb6:	79fb      	ldrb	r3, [r7, #7]
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	d0a0      	beq.n	8007dfe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ebc:	2300      	movs	r3, #0
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3710      	adds	r7, #16
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}
	...

08007ec8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b095      	sub	sp, #84	@ 0x54
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ed6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ed8:	e853 3f00 	ldrex	r3, [r3]
 8007edc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ee0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ee4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	461a      	mov	r2, r3
 8007eec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007eee:	643b      	str	r3, [r7, #64]	@ 0x40
 8007ef0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ef2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007ef4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007ef6:	e841 2300 	strex	r3, r2, [r1]
 8007efa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007efc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d1e6      	bne.n	8007ed0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	3308      	adds	r3, #8
 8007f08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f0a:	6a3b      	ldr	r3, [r7, #32]
 8007f0c:	e853 3f00 	ldrex	r3, [r3]
 8007f10:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f12:	69fa      	ldr	r2, [r7, #28]
 8007f14:	4b1e      	ldr	r3, [pc, #120]	@ (8007f90 <UART_EndRxTransfer+0xc8>)
 8007f16:	4013      	ands	r3, r2
 8007f18:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	3308      	adds	r3, #8
 8007f20:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007f22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007f24:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f26:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007f28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f2a:	e841 2300 	strex	r3, r2, [r1]
 8007f2e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d1e5      	bne.n	8007f02 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f3a:	2b01      	cmp	r3, #1
 8007f3c:	d118      	bne.n	8007f70 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	e853 3f00 	ldrex	r3, [r3]
 8007f4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	f023 0310 	bic.w	r3, r3, #16
 8007f52:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	461a      	mov	r2, r3
 8007f5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f5c:	61bb      	str	r3, [r7, #24]
 8007f5e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f60:	6979      	ldr	r1, [r7, #20]
 8007f62:	69ba      	ldr	r2, [r7, #24]
 8007f64:	e841 2300 	strex	r3, r2, [r1]
 8007f68:	613b      	str	r3, [r7, #16]
   return(result);
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d1e6      	bne.n	8007f3e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2220      	movs	r2, #32
 8007f74:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2200      	movs	r2, #0
 8007f82:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007f84:	bf00      	nop
 8007f86:	3754      	adds	r7, #84	@ 0x54
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr
 8007f90:	effffffe 	.word	0xeffffffe

08007f94 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b084      	sub	sp, #16
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fa0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007faa:	68f8      	ldr	r0, [r7, #12]
 8007fac:	f7ff f854 	bl	8007058 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007fb0:	bf00      	nop
 8007fb2:	3710      	adds	r7, #16
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}

08007fb8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b088      	sub	sp, #32
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	e853 3f00 	ldrex	r3, [r3]
 8007fcc:	60bb      	str	r3, [r7, #8]
   return(result);
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007fd4:	61fb      	str	r3, [r7, #28]
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	461a      	mov	r2, r3
 8007fdc:	69fb      	ldr	r3, [r7, #28]
 8007fde:	61bb      	str	r3, [r7, #24]
 8007fe0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe2:	6979      	ldr	r1, [r7, #20]
 8007fe4:	69ba      	ldr	r2, [r7, #24]
 8007fe6:	e841 2300 	strex	r3, r2, [r1]
 8007fea:	613b      	str	r3, [r7, #16]
   return(result);
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d1e6      	bne.n	8007fc0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2220      	movs	r2, #32
 8007ff6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f7ff f81f 	bl	8007044 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008006:	bf00      	nop
 8008008:	3720      	adds	r7, #32
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}

0800800e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800800e:	b480      	push	{r7}
 8008010:	b083      	sub	sp, #12
 8008012:	af00      	add	r7, sp, #0
 8008014:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008016:	bf00      	nop
 8008018:	370c      	adds	r7, #12
 800801a:	46bd      	mov	sp, r7
 800801c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008020:	4770      	bx	lr

08008022 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008022:	b480      	push	{r7}
 8008024:	b083      	sub	sp, #12
 8008026:	af00      	add	r7, sp, #0
 8008028:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800802a:	bf00      	nop
 800802c:	370c      	adds	r7, #12
 800802e:	46bd      	mov	sp, r7
 8008030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008034:	4770      	bx	lr

08008036 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008036:	b480      	push	{r7}
 8008038:	b083      	sub	sp, #12
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800803e:	bf00      	nop
 8008040:	370c      	adds	r7, #12
 8008042:	46bd      	mov	sp, r7
 8008044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008048:	4770      	bx	lr

0800804a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800804a:	b480      	push	{r7}
 800804c:	b085      	sub	sp, #20
 800804e:	af00      	add	r7, sp, #0
 8008050:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008058:	2b01      	cmp	r3, #1
 800805a:	d101      	bne.n	8008060 <HAL_UARTEx_DisableFifoMode+0x16>
 800805c:	2302      	movs	r3, #2
 800805e:	e027      	b.n	80080b0 <HAL_UARTEx_DisableFifoMode+0x66>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2201      	movs	r2, #1
 8008064:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2224      	movs	r2, #36	@ 0x24
 800806c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	681a      	ldr	r2, [r3, #0]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f022 0201 	bic.w	r2, r2, #1
 8008086:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800808e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2200      	movs	r2, #0
 8008094:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	68fa      	ldr	r2, [r7, #12]
 800809c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2220      	movs	r2, #32
 80080a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2200      	movs	r2, #0
 80080aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80080ae:	2300      	movs	r3, #0
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	3714      	adds	r7, #20
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr

080080bc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b084      	sub	sp, #16
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
 80080c4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80080cc:	2b01      	cmp	r3, #1
 80080ce:	d101      	bne.n	80080d4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80080d0:	2302      	movs	r3, #2
 80080d2:	e02d      	b.n	8008130 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2201      	movs	r2, #1
 80080d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2224      	movs	r2, #36	@ 0x24
 80080e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	681a      	ldr	r2, [r3, #0]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f022 0201 	bic.w	r2, r2, #1
 80080fa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	689b      	ldr	r3, [r3, #8]
 8008102:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	683a      	ldr	r2, [r7, #0]
 800810c:	430a      	orrs	r2, r1
 800810e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f000 f84f 	bl	80081b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	68fa      	ldr	r2, [r7, #12]
 800811c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2220      	movs	r2, #32
 8008122:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2200      	movs	r2, #0
 800812a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800812e:	2300      	movs	r3, #0
}
 8008130:	4618      	mov	r0, r3
 8008132:	3710      	adds	r7, #16
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b084      	sub	sp, #16
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008148:	2b01      	cmp	r3, #1
 800814a:	d101      	bne.n	8008150 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800814c:	2302      	movs	r3, #2
 800814e:	e02d      	b.n	80081ac <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2201      	movs	r2, #1
 8008154:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2224      	movs	r2, #36	@ 0x24
 800815c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	681a      	ldr	r2, [r3, #0]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f022 0201 	bic.w	r2, r2, #1
 8008176:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	689b      	ldr	r3, [r3, #8]
 800817e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	683a      	ldr	r2, [r7, #0]
 8008188:	430a      	orrs	r2, r1
 800818a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f000 f811 	bl	80081b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	68fa      	ldr	r2, [r7, #12]
 8008198:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2220      	movs	r2, #32
 800819e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2200      	movs	r2, #0
 80081a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80081aa:	2300      	movs	r3, #0
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3710      	adds	r7, #16
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b085      	sub	sp, #20
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d108      	bne.n	80081d6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2201      	movs	r2, #1
 80081c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2201      	movs	r2, #1
 80081d0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80081d4:	e031      	b.n	800823a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80081d6:	2310      	movs	r3, #16
 80081d8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80081da:	2310      	movs	r3, #16
 80081dc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	689b      	ldr	r3, [r3, #8]
 80081e4:	0e5b      	lsrs	r3, r3, #25
 80081e6:	b2db      	uxtb	r3, r3
 80081e8:	f003 0307 	and.w	r3, r3, #7
 80081ec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	689b      	ldr	r3, [r3, #8]
 80081f4:	0f5b      	lsrs	r3, r3, #29
 80081f6:	b2db      	uxtb	r3, r3
 80081f8:	f003 0307 	and.w	r3, r3, #7
 80081fc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80081fe:	7bbb      	ldrb	r3, [r7, #14]
 8008200:	7b3a      	ldrb	r2, [r7, #12]
 8008202:	4911      	ldr	r1, [pc, #68]	@ (8008248 <UARTEx_SetNbDataToProcess+0x94>)
 8008204:	5c8a      	ldrb	r2, [r1, r2]
 8008206:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800820a:	7b3a      	ldrb	r2, [r7, #12]
 800820c:	490f      	ldr	r1, [pc, #60]	@ (800824c <UARTEx_SetNbDataToProcess+0x98>)
 800820e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008210:	fb93 f3f2 	sdiv	r3, r3, r2
 8008214:	b29a      	uxth	r2, r3
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800821c:	7bfb      	ldrb	r3, [r7, #15]
 800821e:	7b7a      	ldrb	r2, [r7, #13]
 8008220:	4909      	ldr	r1, [pc, #36]	@ (8008248 <UARTEx_SetNbDataToProcess+0x94>)
 8008222:	5c8a      	ldrb	r2, [r1, r2]
 8008224:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008228:	7b7a      	ldrb	r2, [r7, #13]
 800822a:	4908      	ldr	r1, [pc, #32]	@ (800824c <UARTEx_SetNbDataToProcess+0x98>)
 800822c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800822e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008232:	b29a      	uxth	r2, r3
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800823a:	bf00      	nop
 800823c:	3714      	adds	r7, #20
 800823e:	46bd      	mov	sp, r7
 8008240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008244:	4770      	bx	lr
 8008246:	bf00      	nop
 8008248:	08008c4c 	.word	0x08008c4c
 800824c:	08008c54 	.word	0x08008c54

08008250 <HAL_WWDG_IRQHandler>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
void HAL_WWDG_IRQHandler(WWDG_HandleTypeDef *hwwdg)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b082      	sub	sp, #8
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
  /* Check if Early Wakeup Interrupt is enable */
  if (__HAL_WWDG_GET_IT_SOURCE(hwwdg, WWDG_IT_EWI) != RESET)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008262:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008266:	d10e      	bne.n	8008286 <HAL_WWDG_IRQHandler+0x36>
  {
    /* Check if WWDG Early Wakeup Interrupt occurred */
    if (__HAL_WWDG_GET_FLAG(hwwdg, WWDG_FLAG_EWIF) != RESET)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	689b      	ldr	r3, [r3, #8]
 800826e:	f003 0301 	and.w	r3, r3, #1
 8008272:	2b01      	cmp	r3, #1
 8008274:	d107      	bne.n	8008286 <HAL_WWDG_IRQHandler+0x36>
    {
      /* Clear the WWDG Early Wakeup flag */
      __HAL_WWDG_CLEAR_FLAG(hwwdg, WWDG_FLAG_EWIF);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f06f 0201 	mvn.w	r2, #1
 800827e:	609a      	str	r2, [r3, #8]
#if (USE_HAL_WWDG_REGISTER_CALLBACKS == 1)
      /* Early Wakeup registered callback */
      hwwdg->EwiCallback(hwwdg);
#else
      /* Early Wakeup callback */
      HAL_WWDG_EarlyWakeupCallback(hwwdg);
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f000 f804 	bl	800828e <HAL_WWDG_EarlyWakeupCallback>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */
    }
  }
}
 8008286:	bf00      	nop
 8008288:	3708      	adds	r7, #8
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}

0800828e <HAL_WWDG_EarlyWakeupCallback>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
__weak void HAL_WWDG_EarlyWakeupCallback(WWDG_HandleTypeDef *hwwdg)
{
 800828e:	b480      	push	{r7}
 8008290:	b083      	sub	sp, #12
 8008292:	af00      	add	r7, sp, #0
 8008294:	6078      	str	r0, [r7, #4]
  UNUSED(hwwdg);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_WWDG_EarlyWakeupCallback could be implemented in the user file
   */
}
 8008296:	bf00      	nop
 8008298:	370c      	adds	r7, #12
 800829a:	46bd      	mov	sp, r7
 800829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a0:	4770      	bx	lr
	...

080082a4 <std>:
 80082a4:	2300      	movs	r3, #0
 80082a6:	b510      	push	{r4, lr}
 80082a8:	4604      	mov	r4, r0
 80082aa:	e9c0 3300 	strd	r3, r3, [r0]
 80082ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80082b2:	6083      	str	r3, [r0, #8]
 80082b4:	8181      	strh	r1, [r0, #12]
 80082b6:	6643      	str	r3, [r0, #100]	@ 0x64
 80082b8:	81c2      	strh	r2, [r0, #14]
 80082ba:	6183      	str	r3, [r0, #24]
 80082bc:	4619      	mov	r1, r3
 80082be:	2208      	movs	r2, #8
 80082c0:	305c      	adds	r0, #92	@ 0x5c
 80082c2:	f000 f9e7 	bl	8008694 <memset>
 80082c6:	4b0d      	ldr	r3, [pc, #52]	@ (80082fc <std+0x58>)
 80082c8:	6263      	str	r3, [r4, #36]	@ 0x24
 80082ca:	4b0d      	ldr	r3, [pc, #52]	@ (8008300 <std+0x5c>)
 80082cc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80082ce:	4b0d      	ldr	r3, [pc, #52]	@ (8008304 <std+0x60>)
 80082d0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80082d2:	4b0d      	ldr	r3, [pc, #52]	@ (8008308 <std+0x64>)
 80082d4:	6323      	str	r3, [r4, #48]	@ 0x30
 80082d6:	4b0d      	ldr	r3, [pc, #52]	@ (800830c <std+0x68>)
 80082d8:	6224      	str	r4, [r4, #32]
 80082da:	429c      	cmp	r4, r3
 80082dc:	d006      	beq.n	80082ec <std+0x48>
 80082de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80082e2:	4294      	cmp	r4, r2
 80082e4:	d002      	beq.n	80082ec <std+0x48>
 80082e6:	33d0      	adds	r3, #208	@ 0xd0
 80082e8:	429c      	cmp	r4, r3
 80082ea:	d105      	bne.n	80082f8 <std+0x54>
 80082ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80082f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082f4:	f000 ba46 	b.w	8008784 <__retarget_lock_init_recursive>
 80082f8:	bd10      	pop	{r4, pc}
 80082fa:	bf00      	nop
 80082fc:	080084e5 	.word	0x080084e5
 8008300:	08008507 	.word	0x08008507
 8008304:	0800853f 	.word	0x0800853f
 8008308:	08008563 	.word	0x08008563
 800830c:	240001f4 	.word	0x240001f4

08008310 <stdio_exit_handler>:
 8008310:	4a02      	ldr	r2, [pc, #8]	@ (800831c <stdio_exit_handler+0xc>)
 8008312:	4903      	ldr	r1, [pc, #12]	@ (8008320 <stdio_exit_handler+0x10>)
 8008314:	4803      	ldr	r0, [pc, #12]	@ (8008324 <stdio_exit_handler+0x14>)
 8008316:	f000 b869 	b.w	80083ec <_fwalk_sglue>
 800831a:	bf00      	nop
 800831c:	24000010 	.word	0x24000010
 8008320:	08008a85 	.word	0x08008a85
 8008324:	24000020 	.word	0x24000020

08008328 <cleanup_stdio>:
 8008328:	6841      	ldr	r1, [r0, #4]
 800832a:	4b0c      	ldr	r3, [pc, #48]	@ (800835c <cleanup_stdio+0x34>)
 800832c:	4299      	cmp	r1, r3
 800832e:	b510      	push	{r4, lr}
 8008330:	4604      	mov	r4, r0
 8008332:	d001      	beq.n	8008338 <cleanup_stdio+0x10>
 8008334:	f000 fba6 	bl	8008a84 <_fflush_r>
 8008338:	68a1      	ldr	r1, [r4, #8]
 800833a:	4b09      	ldr	r3, [pc, #36]	@ (8008360 <cleanup_stdio+0x38>)
 800833c:	4299      	cmp	r1, r3
 800833e:	d002      	beq.n	8008346 <cleanup_stdio+0x1e>
 8008340:	4620      	mov	r0, r4
 8008342:	f000 fb9f 	bl	8008a84 <_fflush_r>
 8008346:	68e1      	ldr	r1, [r4, #12]
 8008348:	4b06      	ldr	r3, [pc, #24]	@ (8008364 <cleanup_stdio+0x3c>)
 800834a:	4299      	cmp	r1, r3
 800834c:	d004      	beq.n	8008358 <cleanup_stdio+0x30>
 800834e:	4620      	mov	r0, r4
 8008350:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008354:	f000 bb96 	b.w	8008a84 <_fflush_r>
 8008358:	bd10      	pop	{r4, pc}
 800835a:	bf00      	nop
 800835c:	240001f4 	.word	0x240001f4
 8008360:	2400025c 	.word	0x2400025c
 8008364:	240002c4 	.word	0x240002c4

08008368 <global_stdio_init.part.0>:
 8008368:	b510      	push	{r4, lr}
 800836a:	4b0b      	ldr	r3, [pc, #44]	@ (8008398 <global_stdio_init.part.0+0x30>)
 800836c:	4c0b      	ldr	r4, [pc, #44]	@ (800839c <global_stdio_init.part.0+0x34>)
 800836e:	4a0c      	ldr	r2, [pc, #48]	@ (80083a0 <global_stdio_init.part.0+0x38>)
 8008370:	601a      	str	r2, [r3, #0]
 8008372:	4620      	mov	r0, r4
 8008374:	2200      	movs	r2, #0
 8008376:	2104      	movs	r1, #4
 8008378:	f7ff ff94 	bl	80082a4 <std>
 800837c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008380:	2201      	movs	r2, #1
 8008382:	2109      	movs	r1, #9
 8008384:	f7ff ff8e 	bl	80082a4 <std>
 8008388:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800838c:	2202      	movs	r2, #2
 800838e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008392:	2112      	movs	r1, #18
 8008394:	f7ff bf86 	b.w	80082a4 <std>
 8008398:	2400032c 	.word	0x2400032c
 800839c:	240001f4 	.word	0x240001f4
 80083a0:	08008311 	.word	0x08008311

080083a4 <__sfp_lock_acquire>:
 80083a4:	4801      	ldr	r0, [pc, #4]	@ (80083ac <__sfp_lock_acquire+0x8>)
 80083a6:	f000 b9ee 	b.w	8008786 <__retarget_lock_acquire_recursive>
 80083aa:	bf00      	nop
 80083ac:	24000335 	.word	0x24000335

080083b0 <__sfp_lock_release>:
 80083b0:	4801      	ldr	r0, [pc, #4]	@ (80083b8 <__sfp_lock_release+0x8>)
 80083b2:	f000 b9e9 	b.w	8008788 <__retarget_lock_release_recursive>
 80083b6:	bf00      	nop
 80083b8:	24000335 	.word	0x24000335

080083bc <__sinit>:
 80083bc:	b510      	push	{r4, lr}
 80083be:	4604      	mov	r4, r0
 80083c0:	f7ff fff0 	bl	80083a4 <__sfp_lock_acquire>
 80083c4:	6a23      	ldr	r3, [r4, #32]
 80083c6:	b11b      	cbz	r3, 80083d0 <__sinit+0x14>
 80083c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083cc:	f7ff bff0 	b.w	80083b0 <__sfp_lock_release>
 80083d0:	4b04      	ldr	r3, [pc, #16]	@ (80083e4 <__sinit+0x28>)
 80083d2:	6223      	str	r3, [r4, #32]
 80083d4:	4b04      	ldr	r3, [pc, #16]	@ (80083e8 <__sinit+0x2c>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d1f5      	bne.n	80083c8 <__sinit+0xc>
 80083dc:	f7ff ffc4 	bl	8008368 <global_stdio_init.part.0>
 80083e0:	e7f2      	b.n	80083c8 <__sinit+0xc>
 80083e2:	bf00      	nop
 80083e4:	08008329 	.word	0x08008329
 80083e8:	2400032c 	.word	0x2400032c

080083ec <_fwalk_sglue>:
 80083ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083f0:	4607      	mov	r7, r0
 80083f2:	4688      	mov	r8, r1
 80083f4:	4614      	mov	r4, r2
 80083f6:	2600      	movs	r6, #0
 80083f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80083fc:	f1b9 0901 	subs.w	r9, r9, #1
 8008400:	d505      	bpl.n	800840e <_fwalk_sglue+0x22>
 8008402:	6824      	ldr	r4, [r4, #0]
 8008404:	2c00      	cmp	r4, #0
 8008406:	d1f7      	bne.n	80083f8 <_fwalk_sglue+0xc>
 8008408:	4630      	mov	r0, r6
 800840a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800840e:	89ab      	ldrh	r3, [r5, #12]
 8008410:	2b01      	cmp	r3, #1
 8008412:	d907      	bls.n	8008424 <_fwalk_sglue+0x38>
 8008414:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008418:	3301      	adds	r3, #1
 800841a:	d003      	beq.n	8008424 <_fwalk_sglue+0x38>
 800841c:	4629      	mov	r1, r5
 800841e:	4638      	mov	r0, r7
 8008420:	47c0      	blx	r8
 8008422:	4306      	orrs	r6, r0
 8008424:	3568      	adds	r5, #104	@ 0x68
 8008426:	e7e9      	b.n	80083fc <_fwalk_sglue+0x10>

08008428 <_puts_r>:
 8008428:	6a03      	ldr	r3, [r0, #32]
 800842a:	b570      	push	{r4, r5, r6, lr}
 800842c:	6884      	ldr	r4, [r0, #8]
 800842e:	4605      	mov	r5, r0
 8008430:	460e      	mov	r6, r1
 8008432:	b90b      	cbnz	r3, 8008438 <_puts_r+0x10>
 8008434:	f7ff ffc2 	bl	80083bc <__sinit>
 8008438:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800843a:	07db      	lsls	r3, r3, #31
 800843c:	d405      	bmi.n	800844a <_puts_r+0x22>
 800843e:	89a3      	ldrh	r3, [r4, #12]
 8008440:	0598      	lsls	r0, r3, #22
 8008442:	d402      	bmi.n	800844a <_puts_r+0x22>
 8008444:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008446:	f000 f99e 	bl	8008786 <__retarget_lock_acquire_recursive>
 800844a:	89a3      	ldrh	r3, [r4, #12]
 800844c:	0719      	lsls	r1, r3, #28
 800844e:	d502      	bpl.n	8008456 <_puts_r+0x2e>
 8008450:	6923      	ldr	r3, [r4, #16]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d135      	bne.n	80084c2 <_puts_r+0x9a>
 8008456:	4621      	mov	r1, r4
 8008458:	4628      	mov	r0, r5
 800845a:	f000 f8c5 	bl	80085e8 <__swsetup_r>
 800845e:	b380      	cbz	r0, 80084c2 <_puts_r+0x9a>
 8008460:	f04f 35ff 	mov.w	r5, #4294967295
 8008464:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008466:	07da      	lsls	r2, r3, #31
 8008468:	d405      	bmi.n	8008476 <_puts_r+0x4e>
 800846a:	89a3      	ldrh	r3, [r4, #12]
 800846c:	059b      	lsls	r3, r3, #22
 800846e:	d402      	bmi.n	8008476 <_puts_r+0x4e>
 8008470:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008472:	f000 f989 	bl	8008788 <__retarget_lock_release_recursive>
 8008476:	4628      	mov	r0, r5
 8008478:	bd70      	pop	{r4, r5, r6, pc}
 800847a:	2b00      	cmp	r3, #0
 800847c:	da04      	bge.n	8008488 <_puts_r+0x60>
 800847e:	69a2      	ldr	r2, [r4, #24]
 8008480:	429a      	cmp	r2, r3
 8008482:	dc17      	bgt.n	80084b4 <_puts_r+0x8c>
 8008484:	290a      	cmp	r1, #10
 8008486:	d015      	beq.n	80084b4 <_puts_r+0x8c>
 8008488:	6823      	ldr	r3, [r4, #0]
 800848a:	1c5a      	adds	r2, r3, #1
 800848c:	6022      	str	r2, [r4, #0]
 800848e:	7019      	strb	r1, [r3, #0]
 8008490:	68a3      	ldr	r3, [r4, #8]
 8008492:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008496:	3b01      	subs	r3, #1
 8008498:	60a3      	str	r3, [r4, #8]
 800849a:	2900      	cmp	r1, #0
 800849c:	d1ed      	bne.n	800847a <_puts_r+0x52>
 800849e:	2b00      	cmp	r3, #0
 80084a0:	da11      	bge.n	80084c6 <_puts_r+0x9e>
 80084a2:	4622      	mov	r2, r4
 80084a4:	210a      	movs	r1, #10
 80084a6:	4628      	mov	r0, r5
 80084a8:	f000 f85f 	bl	800856a <__swbuf_r>
 80084ac:	3001      	adds	r0, #1
 80084ae:	d0d7      	beq.n	8008460 <_puts_r+0x38>
 80084b0:	250a      	movs	r5, #10
 80084b2:	e7d7      	b.n	8008464 <_puts_r+0x3c>
 80084b4:	4622      	mov	r2, r4
 80084b6:	4628      	mov	r0, r5
 80084b8:	f000 f857 	bl	800856a <__swbuf_r>
 80084bc:	3001      	adds	r0, #1
 80084be:	d1e7      	bne.n	8008490 <_puts_r+0x68>
 80084c0:	e7ce      	b.n	8008460 <_puts_r+0x38>
 80084c2:	3e01      	subs	r6, #1
 80084c4:	e7e4      	b.n	8008490 <_puts_r+0x68>
 80084c6:	6823      	ldr	r3, [r4, #0]
 80084c8:	1c5a      	adds	r2, r3, #1
 80084ca:	6022      	str	r2, [r4, #0]
 80084cc:	220a      	movs	r2, #10
 80084ce:	701a      	strb	r2, [r3, #0]
 80084d0:	e7ee      	b.n	80084b0 <_puts_r+0x88>
	...

080084d4 <puts>:
 80084d4:	4b02      	ldr	r3, [pc, #8]	@ (80084e0 <puts+0xc>)
 80084d6:	4601      	mov	r1, r0
 80084d8:	6818      	ldr	r0, [r3, #0]
 80084da:	f7ff bfa5 	b.w	8008428 <_puts_r>
 80084de:	bf00      	nop
 80084e0:	2400001c 	.word	0x2400001c

080084e4 <__sread>:
 80084e4:	b510      	push	{r4, lr}
 80084e6:	460c      	mov	r4, r1
 80084e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084ec:	f000 f8fc 	bl	80086e8 <_read_r>
 80084f0:	2800      	cmp	r0, #0
 80084f2:	bfab      	itete	ge
 80084f4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80084f6:	89a3      	ldrhlt	r3, [r4, #12]
 80084f8:	181b      	addge	r3, r3, r0
 80084fa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80084fe:	bfac      	ite	ge
 8008500:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008502:	81a3      	strhlt	r3, [r4, #12]
 8008504:	bd10      	pop	{r4, pc}

08008506 <__swrite>:
 8008506:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800850a:	461f      	mov	r7, r3
 800850c:	898b      	ldrh	r3, [r1, #12]
 800850e:	05db      	lsls	r3, r3, #23
 8008510:	4605      	mov	r5, r0
 8008512:	460c      	mov	r4, r1
 8008514:	4616      	mov	r6, r2
 8008516:	d505      	bpl.n	8008524 <__swrite+0x1e>
 8008518:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800851c:	2302      	movs	r3, #2
 800851e:	2200      	movs	r2, #0
 8008520:	f000 f8d0 	bl	80086c4 <_lseek_r>
 8008524:	89a3      	ldrh	r3, [r4, #12]
 8008526:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800852a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800852e:	81a3      	strh	r3, [r4, #12]
 8008530:	4632      	mov	r2, r6
 8008532:	463b      	mov	r3, r7
 8008534:	4628      	mov	r0, r5
 8008536:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800853a:	f000 b8e7 	b.w	800870c <_write_r>

0800853e <__sseek>:
 800853e:	b510      	push	{r4, lr}
 8008540:	460c      	mov	r4, r1
 8008542:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008546:	f000 f8bd 	bl	80086c4 <_lseek_r>
 800854a:	1c43      	adds	r3, r0, #1
 800854c:	89a3      	ldrh	r3, [r4, #12]
 800854e:	bf15      	itete	ne
 8008550:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008552:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008556:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800855a:	81a3      	strheq	r3, [r4, #12]
 800855c:	bf18      	it	ne
 800855e:	81a3      	strhne	r3, [r4, #12]
 8008560:	bd10      	pop	{r4, pc}

08008562 <__sclose>:
 8008562:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008566:	f000 b89d 	b.w	80086a4 <_close_r>

0800856a <__swbuf_r>:
 800856a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800856c:	460e      	mov	r6, r1
 800856e:	4614      	mov	r4, r2
 8008570:	4605      	mov	r5, r0
 8008572:	b118      	cbz	r0, 800857c <__swbuf_r+0x12>
 8008574:	6a03      	ldr	r3, [r0, #32]
 8008576:	b90b      	cbnz	r3, 800857c <__swbuf_r+0x12>
 8008578:	f7ff ff20 	bl	80083bc <__sinit>
 800857c:	69a3      	ldr	r3, [r4, #24]
 800857e:	60a3      	str	r3, [r4, #8]
 8008580:	89a3      	ldrh	r3, [r4, #12]
 8008582:	071a      	lsls	r2, r3, #28
 8008584:	d501      	bpl.n	800858a <__swbuf_r+0x20>
 8008586:	6923      	ldr	r3, [r4, #16]
 8008588:	b943      	cbnz	r3, 800859c <__swbuf_r+0x32>
 800858a:	4621      	mov	r1, r4
 800858c:	4628      	mov	r0, r5
 800858e:	f000 f82b 	bl	80085e8 <__swsetup_r>
 8008592:	b118      	cbz	r0, 800859c <__swbuf_r+0x32>
 8008594:	f04f 37ff 	mov.w	r7, #4294967295
 8008598:	4638      	mov	r0, r7
 800859a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800859c:	6823      	ldr	r3, [r4, #0]
 800859e:	6922      	ldr	r2, [r4, #16]
 80085a0:	1a98      	subs	r0, r3, r2
 80085a2:	6963      	ldr	r3, [r4, #20]
 80085a4:	b2f6      	uxtb	r6, r6
 80085a6:	4283      	cmp	r3, r0
 80085a8:	4637      	mov	r7, r6
 80085aa:	dc05      	bgt.n	80085b8 <__swbuf_r+0x4e>
 80085ac:	4621      	mov	r1, r4
 80085ae:	4628      	mov	r0, r5
 80085b0:	f000 fa68 	bl	8008a84 <_fflush_r>
 80085b4:	2800      	cmp	r0, #0
 80085b6:	d1ed      	bne.n	8008594 <__swbuf_r+0x2a>
 80085b8:	68a3      	ldr	r3, [r4, #8]
 80085ba:	3b01      	subs	r3, #1
 80085bc:	60a3      	str	r3, [r4, #8]
 80085be:	6823      	ldr	r3, [r4, #0]
 80085c0:	1c5a      	adds	r2, r3, #1
 80085c2:	6022      	str	r2, [r4, #0]
 80085c4:	701e      	strb	r6, [r3, #0]
 80085c6:	6962      	ldr	r2, [r4, #20]
 80085c8:	1c43      	adds	r3, r0, #1
 80085ca:	429a      	cmp	r2, r3
 80085cc:	d004      	beq.n	80085d8 <__swbuf_r+0x6e>
 80085ce:	89a3      	ldrh	r3, [r4, #12]
 80085d0:	07db      	lsls	r3, r3, #31
 80085d2:	d5e1      	bpl.n	8008598 <__swbuf_r+0x2e>
 80085d4:	2e0a      	cmp	r6, #10
 80085d6:	d1df      	bne.n	8008598 <__swbuf_r+0x2e>
 80085d8:	4621      	mov	r1, r4
 80085da:	4628      	mov	r0, r5
 80085dc:	f000 fa52 	bl	8008a84 <_fflush_r>
 80085e0:	2800      	cmp	r0, #0
 80085e2:	d0d9      	beq.n	8008598 <__swbuf_r+0x2e>
 80085e4:	e7d6      	b.n	8008594 <__swbuf_r+0x2a>
	...

080085e8 <__swsetup_r>:
 80085e8:	b538      	push	{r3, r4, r5, lr}
 80085ea:	4b29      	ldr	r3, [pc, #164]	@ (8008690 <__swsetup_r+0xa8>)
 80085ec:	4605      	mov	r5, r0
 80085ee:	6818      	ldr	r0, [r3, #0]
 80085f0:	460c      	mov	r4, r1
 80085f2:	b118      	cbz	r0, 80085fc <__swsetup_r+0x14>
 80085f4:	6a03      	ldr	r3, [r0, #32]
 80085f6:	b90b      	cbnz	r3, 80085fc <__swsetup_r+0x14>
 80085f8:	f7ff fee0 	bl	80083bc <__sinit>
 80085fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008600:	0719      	lsls	r1, r3, #28
 8008602:	d422      	bmi.n	800864a <__swsetup_r+0x62>
 8008604:	06da      	lsls	r2, r3, #27
 8008606:	d407      	bmi.n	8008618 <__swsetup_r+0x30>
 8008608:	2209      	movs	r2, #9
 800860a:	602a      	str	r2, [r5, #0]
 800860c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008610:	81a3      	strh	r3, [r4, #12]
 8008612:	f04f 30ff 	mov.w	r0, #4294967295
 8008616:	e033      	b.n	8008680 <__swsetup_r+0x98>
 8008618:	0758      	lsls	r0, r3, #29
 800861a:	d512      	bpl.n	8008642 <__swsetup_r+0x5a>
 800861c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800861e:	b141      	cbz	r1, 8008632 <__swsetup_r+0x4a>
 8008620:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008624:	4299      	cmp	r1, r3
 8008626:	d002      	beq.n	800862e <__swsetup_r+0x46>
 8008628:	4628      	mov	r0, r5
 800862a:	f000 f8af 	bl	800878c <_free_r>
 800862e:	2300      	movs	r3, #0
 8008630:	6363      	str	r3, [r4, #52]	@ 0x34
 8008632:	89a3      	ldrh	r3, [r4, #12]
 8008634:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008638:	81a3      	strh	r3, [r4, #12]
 800863a:	2300      	movs	r3, #0
 800863c:	6063      	str	r3, [r4, #4]
 800863e:	6923      	ldr	r3, [r4, #16]
 8008640:	6023      	str	r3, [r4, #0]
 8008642:	89a3      	ldrh	r3, [r4, #12]
 8008644:	f043 0308 	orr.w	r3, r3, #8
 8008648:	81a3      	strh	r3, [r4, #12]
 800864a:	6923      	ldr	r3, [r4, #16]
 800864c:	b94b      	cbnz	r3, 8008662 <__swsetup_r+0x7a>
 800864e:	89a3      	ldrh	r3, [r4, #12]
 8008650:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008654:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008658:	d003      	beq.n	8008662 <__swsetup_r+0x7a>
 800865a:	4621      	mov	r1, r4
 800865c:	4628      	mov	r0, r5
 800865e:	f000 fa5f 	bl	8008b20 <__smakebuf_r>
 8008662:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008666:	f013 0201 	ands.w	r2, r3, #1
 800866a:	d00a      	beq.n	8008682 <__swsetup_r+0x9a>
 800866c:	2200      	movs	r2, #0
 800866e:	60a2      	str	r2, [r4, #8]
 8008670:	6962      	ldr	r2, [r4, #20]
 8008672:	4252      	negs	r2, r2
 8008674:	61a2      	str	r2, [r4, #24]
 8008676:	6922      	ldr	r2, [r4, #16]
 8008678:	b942      	cbnz	r2, 800868c <__swsetup_r+0xa4>
 800867a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800867e:	d1c5      	bne.n	800860c <__swsetup_r+0x24>
 8008680:	bd38      	pop	{r3, r4, r5, pc}
 8008682:	0799      	lsls	r1, r3, #30
 8008684:	bf58      	it	pl
 8008686:	6962      	ldrpl	r2, [r4, #20]
 8008688:	60a2      	str	r2, [r4, #8]
 800868a:	e7f4      	b.n	8008676 <__swsetup_r+0x8e>
 800868c:	2000      	movs	r0, #0
 800868e:	e7f7      	b.n	8008680 <__swsetup_r+0x98>
 8008690:	2400001c 	.word	0x2400001c

08008694 <memset>:
 8008694:	4402      	add	r2, r0
 8008696:	4603      	mov	r3, r0
 8008698:	4293      	cmp	r3, r2
 800869a:	d100      	bne.n	800869e <memset+0xa>
 800869c:	4770      	bx	lr
 800869e:	f803 1b01 	strb.w	r1, [r3], #1
 80086a2:	e7f9      	b.n	8008698 <memset+0x4>

080086a4 <_close_r>:
 80086a4:	b538      	push	{r3, r4, r5, lr}
 80086a6:	4d06      	ldr	r5, [pc, #24]	@ (80086c0 <_close_r+0x1c>)
 80086a8:	2300      	movs	r3, #0
 80086aa:	4604      	mov	r4, r0
 80086ac:	4608      	mov	r0, r1
 80086ae:	602b      	str	r3, [r5, #0]
 80086b0:	f7f8 f9e5 	bl	8000a7e <_close>
 80086b4:	1c43      	adds	r3, r0, #1
 80086b6:	d102      	bne.n	80086be <_close_r+0x1a>
 80086b8:	682b      	ldr	r3, [r5, #0]
 80086ba:	b103      	cbz	r3, 80086be <_close_r+0x1a>
 80086bc:	6023      	str	r3, [r4, #0]
 80086be:	bd38      	pop	{r3, r4, r5, pc}
 80086c0:	24000330 	.word	0x24000330

080086c4 <_lseek_r>:
 80086c4:	b538      	push	{r3, r4, r5, lr}
 80086c6:	4d07      	ldr	r5, [pc, #28]	@ (80086e4 <_lseek_r+0x20>)
 80086c8:	4604      	mov	r4, r0
 80086ca:	4608      	mov	r0, r1
 80086cc:	4611      	mov	r1, r2
 80086ce:	2200      	movs	r2, #0
 80086d0:	602a      	str	r2, [r5, #0]
 80086d2:	461a      	mov	r2, r3
 80086d4:	f7f8 f9fa 	bl	8000acc <_lseek>
 80086d8:	1c43      	adds	r3, r0, #1
 80086da:	d102      	bne.n	80086e2 <_lseek_r+0x1e>
 80086dc:	682b      	ldr	r3, [r5, #0]
 80086de:	b103      	cbz	r3, 80086e2 <_lseek_r+0x1e>
 80086e0:	6023      	str	r3, [r4, #0]
 80086e2:	bd38      	pop	{r3, r4, r5, pc}
 80086e4:	24000330 	.word	0x24000330

080086e8 <_read_r>:
 80086e8:	b538      	push	{r3, r4, r5, lr}
 80086ea:	4d07      	ldr	r5, [pc, #28]	@ (8008708 <_read_r+0x20>)
 80086ec:	4604      	mov	r4, r0
 80086ee:	4608      	mov	r0, r1
 80086f0:	4611      	mov	r1, r2
 80086f2:	2200      	movs	r2, #0
 80086f4:	602a      	str	r2, [r5, #0]
 80086f6:	461a      	mov	r2, r3
 80086f8:	f7f8 f988 	bl	8000a0c <_read>
 80086fc:	1c43      	adds	r3, r0, #1
 80086fe:	d102      	bne.n	8008706 <_read_r+0x1e>
 8008700:	682b      	ldr	r3, [r5, #0]
 8008702:	b103      	cbz	r3, 8008706 <_read_r+0x1e>
 8008704:	6023      	str	r3, [r4, #0]
 8008706:	bd38      	pop	{r3, r4, r5, pc}
 8008708:	24000330 	.word	0x24000330

0800870c <_write_r>:
 800870c:	b538      	push	{r3, r4, r5, lr}
 800870e:	4d07      	ldr	r5, [pc, #28]	@ (800872c <_write_r+0x20>)
 8008710:	4604      	mov	r4, r0
 8008712:	4608      	mov	r0, r1
 8008714:	4611      	mov	r1, r2
 8008716:	2200      	movs	r2, #0
 8008718:	602a      	str	r2, [r5, #0]
 800871a:	461a      	mov	r2, r3
 800871c:	f7f8 f993 	bl	8000a46 <_write>
 8008720:	1c43      	adds	r3, r0, #1
 8008722:	d102      	bne.n	800872a <_write_r+0x1e>
 8008724:	682b      	ldr	r3, [r5, #0]
 8008726:	b103      	cbz	r3, 800872a <_write_r+0x1e>
 8008728:	6023      	str	r3, [r4, #0]
 800872a:	bd38      	pop	{r3, r4, r5, pc}
 800872c:	24000330 	.word	0x24000330

08008730 <__errno>:
 8008730:	4b01      	ldr	r3, [pc, #4]	@ (8008738 <__errno+0x8>)
 8008732:	6818      	ldr	r0, [r3, #0]
 8008734:	4770      	bx	lr
 8008736:	bf00      	nop
 8008738:	2400001c 	.word	0x2400001c

0800873c <__libc_init_array>:
 800873c:	b570      	push	{r4, r5, r6, lr}
 800873e:	4d0d      	ldr	r5, [pc, #52]	@ (8008774 <__libc_init_array+0x38>)
 8008740:	4c0d      	ldr	r4, [pc, #52]	@ (8008778 <__libc_init_array+0x3c>)
 8008742:	1b64      	subs	r4, r4, r5
 8008744:	10a4      	asrs	r4, r4, #2
 8008746:	2600      	movs	r6, #0
 8008748:	42a6      	cmp	r6, r4
 800874a:	d109      	bne.n	8008760 <__libc_init_array+0x24>
 800874c:	4d0b      	ldr	r5, [pc, #44]	@ (800877c <__libc_init_array+0x40>)
 800874e:	4c0c      	ldr	r4, [pc, #48]	@ (8008780 <__libc_init_array+0x44>)
 8008750:	f000 fa54 	bl	8008bfc <_init>
 8008754:	1b64      	subs	r4, r4, r5
 8008756:	10a4      	asrs	r4, r4, #2
 8008758:	2600      	movs	r6, #0
 800875a:	42a6      	cmp	r6, r4
 800875c:	d105      	bne.n	800876a <__libc_init_array+0x2e>
 800875e:	bd70      	pop	{r4, r5, r6, pc}
 8008760:	f855 3b04 	ldr.w	r3, [r5], #4
 8008764:	4798      	blx	r3
 8008766:	3601      	adds	r6, #1
 8008768:	e7ee      	b.n	8008748 <__libc_init_array+0xc>
 800876a:	f855 3b04 	ldr.w	r3, [r5], #4
 800876e:	4798      	blx	r3
 8008770:	3601      	adds	r6, #1
 8008772:	e7f2      	b.n	800875a <__libc_init_array+0x1e>
 8008774:	08008c64 	.word	0x08008c64
 8008778:	08008c64 	.word	0x08008c64
 800877c:	08008c64 	.word	0x08008c64
 8008780:	08008c68 	.word	0x08008c68

08008784 <__retarget_lock_init_recursive>:
 8008784:	4770      	bx	lr

08008786 <__retarget_lock_acquire_recursive>:
 8008786:	4770      	bx	lr

08008788 <__retarget_lock_release_recursive>:
 8008788:	4770      	bx	lr
	...

0800878c <_free_r>:
 800878c:	b538      	push	{r3, r4, r5, lr}
 800878e:	4605      	mov	r5, r0
 8008790:	2900      	cmp	r1, #0
 8008792:	d041      	beq.n	8008818 <_free_r+0x8c>
 8008794:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008798:	1f0c      	subs	r4, r1, #4
 800879a:	2b00      	cmp	r3, #0
 800879c:	bfb8      	it	lt
 800879e:	18e4      	addlt	r4, r4, r3
 80087a0:	f000 f8e0 	bl	8008964 <__malloc_lock>
 80087a4:	4a1d      	ldr	r2, [pc, #116]	@ (800881c <_free_r+0x90>)
 80087a6:	6813      	ldr	r3, [r2, #0]
 80087a8:	b933      	cbnz	r3, 80087b8 <_free_r+0x2c>
 80087aa:	6063      	str	r3, [r4, #4]
 80087ac:	6014      	str	r4, [r2, #0]
 80087ae:	4628      	mov	r0, r5
 80087b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80087b4:	f000 b8dc 	b.w	8008970 <__malloc_unlock>
 80087b8:	42a3      	cmp	r3, r4
 80087ba:	d908      	bls.n	80087ce <_free_r+0x42>
 80087bc:	6820      	ldr	r0, [r4, #0]
 80087be:	1821      	adds	r1, r4, r0
 80087c0:	428b      	cmp	r3, r1
 80087c2:	bf01      	itttt	eq
 80087c4:	6819      	ldreq	r1, [r3, #0]
 80087c6:	685b      	ldreq	r3, [r3, #4]
 80087c8:	1809      	addeq	r1, r1, r0
 80087ca:	6021      	streq	r1, [r4, #0]
 80087cc:	e7ed      	b.n	80087aa <_free_r+0x1e>
 80087ce:	461a      	mov	r2, r3
 80087d0:	685b      	ldr	r3, [r3, #4]
 80087d2:	b10b      	cbz	r3, 80087d8 <_free_r+0x4c>
 80087d4:	42a3      	cmp	r3, r4
 80087d6:	d9fa      	bls.n	80087ce <_free_r+0x42>
 80087d8:	6811      	ldr	r1, [r2, #0]
 80087da:	1850      	adds	r0, r2, r1
 80087dc:	42a0      	cmp	r0, r4
 80087de:	d10b      	bne.n	80087f8 <_free_r+0x6c>
 80087e0:	6820      	ldr	r0, [r4, #0]
 80087e2:	4401      	add	r1, r0
 80087e4:	1850      	adds	r0, r2, r1
 80087e6:	4283      	cmp	r3, r0
 80087e8:	6011      	str	r1, [r2, #0]
 80087ea:	d1e0      	bne.n	80087ae <_free_r+0x22>
 80087ec:	6818      	ldr	r0, [r3, #0]
 80087ee:	685b      	ldr	r3, [r3, #4]
 80087f0:	6053      	str	r3, [r2, #4]
 80087f2:	4408      	add	r0, r1
 80087f4:	6010      	str	r0, [r2, #0]
 80087f6:	e7da      	b.n	80087ae <_free_r+0x22>
 80087f8:	d902      	bls.n	8008800 <_free_r+0x74>
 80087fa:	230c      	movs	r3, #12
 80087fc:	602b      	str	r3, [r5, #0]
 80087fe:	e7d6      	b.n	80087ae <_free_r+0x22>
 8008800:	6820      	ldr	r0, [r4, #0]
 8008802:	1821      	adds	r1, r4, r0
 8008804:	428b      	cmp	r3, r1
 8008806:	bf04      	itt	eq
 8008808:	6819      	ldreq	r1, [r3, #0]
 800880a:	685b      	ldreq	r3, [r3, #4]
 800880c:	6063      	str	r3, [r4, #4]
 800880e:	bf04      	itt	eq
 8008810:	1809      	addeq	r1, r1, r0
 8008812:	6021      	streq	r1, [r4, #0]
 8008814:	6054      	str	r4, [r2, #4]
 8008816:	e7ca      	b.n	80087ae <_free_r+0x22>
 8008818:	bd38      	pop	{r3, r4, r5, pc}
 800881a:	bf00      	nop
 800881c:	2400033c 	.word	0x2400033c

08008820 <sbrk_aligned>:
 8008820:	b570      	push	{r4, r5, r6, lr}
 8008822:	4e0f      	ldr	r6, [pc, #60]	@ (8008860 <sbrk_aligned+0x40>)
 8008824:	460c      	mov	r4, r1
 8008826:	6831      	ldr	r1, [r6, #0]
 8008828:	4605      	mov	r5, r0
 800882a:	b911      	cbnz	r1, 8008832 <sbrk_aligned+0x12>
 800882c:	f000 f9d6 	bl	8008bdc <_sbrk_r>
 8008830:	6030      	str	r0, [r6, #0]
 8008832:	4621      	mov	r1, r4
 8008834:	4628      	mov	r0, r5
 8008836:	f000 f9d1 	bl	8008bdc <_sbrk_r>
 800883a:	1c43      	adds	r3, r0, #1
 800883c:	d103      	bne.n	8008846 <sbrk_aligned+0x26>
 800883e:	f04f 34ff 	mov.w	r4, #4294967295
 8008842:	4620      	mov	r0, r4
 8008844:	bd70      	pop	{r4, r5, r6, pc}
 8008846:	1cc4      	adds	r4, r0, #3
 8008848:	f024 0403 	bic.w	r4, r4, #3
 800884c:	42a0      	cmp	r0, r4
 800884e:	d0f8      	beq.n	8008842 <sbrk_aligned+0x22>
 8008850:	1a21      	subs	r1, r4, r0
 8008852:	4628      	mov	r0, r5
 8008854:	f000 f9c2 	bl	8008bdc <_sbrk_r>
 8008858:	3001      	adds	r0, #1
 800885a:	d1f2      	bne.n	8008842 <sbrk_aligned+0x22>
 800885c:	e7ef      	b.n	800883e <sbrk_aligned+0x1e>
 800885e:	bf00      	nop
 8008860:	24000338 	.word	0x24000338

08008864 <_malloc_r>:
 8008864:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008868:	1ccd      	adds	r5, r1, #3
 800886a:	f025 0503 	bic.w	r5, r5, #3
 800886e:	3508      	adds	r5, #8
 8008870:	2d0c      	cmp	r5, #12
 8008872:	bf38      	it	cc
 8008874:	250c      	movcc	r5, #12
 8008876:	2d00      	cmp	r5, #0
 8008878:	4606      	mov	r6, r0
 800887a:	db01      	blt.n	8008880 <_malloc_r+0x1c>
 800887c:	42a9      	cmp	r1, r5
 800887e:	d904      	bls.n	800888a <_malloc_r+0x26>
 8008880:	230c      	movs	r3, #12
 8008882:	6033      	str	r3, [r6, #0]
 8008884:	2000      	movs	r0, #0
 8008886:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800888a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008960 <_malloc_r+0xfc>
 800888e:	f000 f869 	bl	8008964 <__malloc_lock>
 8008892:	f8d8 3000 	ldr.w	r3, [r8]
 8008896:	461c      	mov	r4, r3
 8008898:	bb44      	cbnz	r4, 80088ec <_malloc_r+0x88>
 800889a:	4629      	mov	r1, r5
 800889c:	4630      	mov	r0, r6
 800889e:	f7ff ffbf 	bl	8008820 <sbrk_aligned>
 80088a2:	1c43      	adds	r3, r0, #1
 80088a4:	4604      	mov	r4, r0
 80088a6:	d158      	bne.n	800895a <_malloc_r+0xf6>
 80088a8:	f8d8 4000 	ldr.w	r4, [r8]
 80088ac:	4627      	mov	r7, r4
 80088ae:	2f00      	cmp	r7, #0
 80088b0:	d143      	bne.n	800893a <_malloc_r+0xd6>
 80088b2:	2c00      	cmp	r4, #0
 80088b4:	d04b      	beq.n	800894e <_malloc_r+0xea>
 80088b6:	6823      	ldr	r3, [r4, #0]
 80088b8:	4639      	mov	r1, r7
 80088ba:	4630      	mov	r0, r6
 80088bc:	eb04 0903 	add.w	r9, r4, r3
 80088c0:	f000 f98c 	bl	8008bdc <_sbrk_r>
 80088c4:	4581      	cmp	r9, r0
 80088c6:	d142      	bne.n	800894e <_malloc_r+0xea>
 80088c8:	6821      	ldr	r1, [r4, #0]
 80088ca:	1a6d      	subs	r5, r5, r1
 80088cc:	4629      	mov	r1, r5
 80088ce:	4630      	mov	r0, r6
 80088d0:	f7ff ffa6 	bl	8008820 <sbrk_aligned>
 80088d4:	3001      	adds	r0, #1
 80088d6:	d03a      	beq.n	800894e <_malloc_r+0xea>
 80088d8:	6823      	ldr	r3, [r4, #0]
 80088da:	442b      	add	r3, r5
 80088dc:	6023      	str	r3, [r4, #0]
 80088de:	f8d8 3000 	ldr.w	r3, [r8]
 80088e2:	685a      	ldr	r2, [r3, #4]
 80088e4:	bb62      	cbnz	r2, 8008940 <_malloc_r+0xdc>
 80088e6:	f8c8 7000 	str.w	r7, [r8]
 80088ea:	e00f      	b.n	800890c <_malloc_r+0xa8>
 80088ec:	6822      	ldr	r2, [r4, #0]
 80088ee:	1b52      	subs	r2, r2, r5
 80088f0:	d420      	bmi.n	8008934 <_malloc_r+0xd0>
 80088f2:	2a0b      	cmp	r2, #11
 80088f4:	d917      	bls.n	8008926 <_malloc_r+0xc2>
 80088f6:	1961      	adds	r1, r4, r5
 80088f8:	42a3      	cmp	r3, r4
 80088fa:	6025      	str	r5, [r4, #0]
 80088fc:	bf18      	it	ne
 80088fe:	6059      	strne	r1, [r3, #4]
 8008900:	6863      	ldr	r3, [r4, #4]
 8008902:	bf08      	it	eq
 8008904:	f8c8 1000 	streq.w	r1, [r8]
 8008908:	5162      	str	r2, [r4, r5]
 800890a:	604b      	str	r3, [r1, #4]
 800890c:	4630      	mov	r0, r6
 800890e:	f000 f82f 	bl	8008970 <__malloc_unlock>
 8008912:	f104 000b 	add.w	r0, r4, #11
 8008916:	1d23      	adds	r3, r4, #4
 8008918:	f020 0007 	bic.w	r0, r0, #7
 800891c:	1ac2      	subs	r2, r0, r3
 800891e:	bf1c      	itt	ne
 8008920:	1a1b      	subne	r3, r3, r0
 8008922:	50a3      	strne	r3, [r4, r2]
 8008924:	e7af      	b.n	8008886 <_malloc_r+0x22>
 8008926:	6862      	ldr	r2, [r4, #4]
 8008928:	42a3      	cmp	r3, r4
 800892a:	bf0c      	ite	eq
 800892c:	f8c8 2000 	streq.w	r2, [r8]
 8008930:	605a      	strne	r2, [r3, #4]
 8008932:	e7eb      	b.n	800890c <_malloc_r+0xa8>
 8008934:	4623      	mov	r3, r4
 8008936:	6864      	ldr	r4, [r4, #4]
 8008938:	e7ae      	b.n	8008898 <_malloc_r+0x34>
 800893a:	463c      	mov	r4, r7
 800893c:	687f      	ldr	r7, [r7, #4]
 800893e:	e7b6      	b.n	80088ae <_malloc_r+0x4a>
 8008940:	461a      	mov	r2, r3
 8008942:	685b      	ldr	r3, [r3, #4]
 8008944:	42a3      	cmp	r3, r4
 8008946:	d1fb      	bne.n	8008940 <_malloc_r+0xdc>
 8008948:	2300      	movs	r3, #0
 800894a:	6053      	str	r3, [r2, #4]
 800894c:	e7de      	b.n	800890c <_malloc_r+0xa8>
 800894e:	230c      	movs	r3, #12
 8008950:	6033      	str	r3, [r6, #0]
 8008952:	4630      	mov	r0, r6
 8008954:	f000 f80c 	bl	8008970 <__malloc_unlock>
 8008958:	e794      	b.n	8008884 <_malloc_r+0x20>
 800895a:	6005      	str	r5, [r0, #0]
 800895c:	e7d6      	b.n	800890c <_malloc_r+0xa8>
 800895e:	bf00      	nop
 8008960:	2400033c 	.word	0x2400033c

08008964 <__malloc_lock>:
 8008964:	4801      	ldr	r0, [pc, #4]	@ (800896c <__malloc_lock+0x8>)
 8008966:	f7ff bf0e 	b.w	8008786 <__retarget_lock_acquire_recursive>
 800896a:	bf00      	nop
 800896c:	24000334 	.word	0x24000334

08008970 <__malloc_unlock>:
 8008970:	4801      	ldr	r0, [pc, #4]	@ (8008978 <__malloc_unlock+0x8>)
 8008972:	f7ff bf09 	b.w	8008788 <__retarget_lock_release_recursive>
 8008976:	bf00      	nop
 8008978:	24000334 	.word	0x24000334

0800897c <__sflush_r>:
 800897c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008984:	0716      	lsls	r6, r2, #28
 8008986:	4605      	mov	r5, r0
 8008988:	460c      	mov	r4, r1
 800898a:	d454      	bmi.n	8008a36 <__sflush_r+0xba>
 800898c:	684b      	ldr	r3, [r1, #4]
 800898e:	2b00      	cmp	r3, #0
 8008990:	dc02      	bgt.n	8008998 <__sflush_r+0x1c>
 8008992:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008994:	2b00      	cmp	r3, #0
 8008996:	dd48      	ble.n	8008a2a <__sflush_r+0xae>
 8008998:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800899a:	2e00      	cmp	r6, #0
 800899c:	d045      	beq.n	8008a2a <__sflush_r+0xae>
 800899e:	2300      	movs	r3, #0
 80089a0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80089a4:	682f      	ldr	r7, [r5, #0]
 80089a6:	6a21      	ldr	r1, [r4, #32]
 80089a8:	602b      	str	r3, [r5, #0]
 80089aa:	d030      	beq.n	8008a0e <__sflush_r+0x92>
 80089ac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80089ae:	89a3      	ldrh	r3, [r4, #12]
 80089b0:	0759      	lsls	r1, r3, #29
 80089b2:	d505      	bpl.n	80089c0 <__sflush_r+0x44>
 80089b4:	6863      	ldr	r3, [r4, #4]
 80089b6:	1ad2      	subs	r2, r2, r3
 80089b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80089ba:	b10b      	cbz	r3, 80089c0 <__sflush_r+0x44>
 80089bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80089be:	1ad2      	subs	r2, r2, r3
 80089c0:	2300      	movs	r3, #0
 80089c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80089c4:	6a21      	ldr	r1, [r4, #32]
 80089c6:	4628      	mov	r0, r5
 80089c8:	47b0      	blx	r6
 80089ca:	1c43      	adds	r3, r0, #1
 80089cc:	89a3      	ldrh	r3, [r4, #12]
 80089ce:	d106      	bne.n	80089de <__sflush_r+0x62>
 80089d0:	6829      	ldr	r1, [r5, #0]
 80089d2:	291d      	cmp	r1, #29
 80089d4:	d82b      	bhi.n	8008a2e <__sflush_r+0xb2>
 80089d6:	4a2a      	ldr	r2, [pc, #168]	@ (8008a80 <__sflush_r+0x104>)
 80089d8:	40ca      	lsrs	r2, r1
 80089da:	07d6      	lsls	r6, r2, #31
 80089dc:	d527      	bpl.n	8008a2e <__sflush_r+0xb2>
 80089de:	2200      	movs	r2, #0
 80089e0:	6062      	str	r2, [r4, #4]
 80089e2:	04d9      	lsls	r1, r3, #19
 80089e4:	6922      	ldr	r2, [r4, #16]
 80089e6:	6022      	str	r2, [r4, #0]
 80089e8:	d504      	bpl.n	80089f4 <__sflush_r+0x78>
 80089ea:	1c42      	adds	r2, r0, #1
 80089ec:	d101      	bne.n	80089f2 <__sflush_r+0x76>
 80089ee:	682b      	ldr	r3, [r5, #0]
 80089f0:	b903      	cbnz	r3, 80089f4 <__sflush_r+0x78>
 80089f2:	6560      	str	r0, [r4, #84]	@ 0x54
 80089f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80089f6:	602f      	str	r7, [r5, #0]
 80089f8:	b1b9      	cbz	r1, 8008a2a <__sflush_r+0xae>
 80089fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80089fe:	4299      	cmp	r1, r3
 8008a00:	d002      	beq.n	8008a08 <__sflush_r+0x8c>
 8008a02:	4628      	mov	r0, r5
 8008a04:	f7ff fec2 	bl	800878c <_free_r>
 8008a08:	2300      	movs	r3, #0
 8008a0a:	6363      	str	r3, [r4, #52]	@ 0x34
 8008a0c:	e00d      	b.n	8008a2a <__sflush_r+0xae>
 8008a0e:	2301      	movs	r3, #1
 8008a10:	4628      	mov	r0, r5
 8008a12:	47b0      	blx	r6
 8008a14:	4602      	mov	r2, r0
 8008a16:	1c50      	adds	r0, r2, #1
 8008a18:	d1c9      	bne.n	80089ae <__sflush_r+0x32>
 8008a1a:	682b      	ldr	r3, [r5, #0]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d0c6      	beq.n	80089ae <__sflush_r+0x32>
 8008a20:	2b1d      	cmp	r3, #29
 8008a22:	d001      	beq.n	8008a28 <__sflush_r+0xac>
 8008a24:	2b16      	cmp	r3, #22
 8008a26:	d11e      	bne.n	8008a66 <__sflush_r+0xea>
 8008a28:	602f      	str	r7, [r5, #0]
 8008a2a:	2000      	movs	r0, #0
 8008a2c:	e022      	b.n	8008a74 <__sflush_r+0xf8>
 8008a2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a32:	b21b      	sxth	r3, r3
 8008a34:	e01b      	b.n	8008a6e <__sflush_r+0xf2>
 8008a36:	690f      	ldr	r7, [r1, #16]
 8008a38:	2f00      	cmp	r7, #0
 8008a3a:	d0f6      	beq.n	8008a2a <__sflush_r+0xae>
 8008a3c:	0793      	lsls	r3, r2, #30
 8008a3e:	680e      	ldr	r6, [r1, #0]
 8008a40:	bf08      	it	eq
 8008a42:	694b      	ldreq	r3, [r1, #20]
 8008a44:	600f      	str	r7, [r1, #0]
 8008a46:	bf18      	it	ne
 8008a48:	2300      	movne	r3, #0
 8008a4a:	eba6 0807 	sub.w	r8, r6, r7
 8008a4e:	608b      	str	r3, [r1, #8]
 8008a50:	f1b8 0f00 	cmp.w	r8, #0
 8008a54:	dde9      	ble.n	8008a2a <__sflush_r+0xae>
 8008a56:	6a21      	ldr	r1, [r4, #32]
 8008a58:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008a5a:	4643      	mov	r3, r8
 8008a5c:	463a      	mov	r2, r7
 8008a5e:	4628      	mov	r0, r5
 8008a60:	47b0      	blx	r6
 8008a62:	2800      	cmp	r0, #0
 8008a64:	dc08      	bgt.n	8008a78 <__sflush_r+0xfc>
 8008a66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a6e:	81a3      	strh	r3, [r4, #12]
 8008a70:	f04f 30ff 	mov.w	r0, #4294967295
 8008a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a78:	4407      	add	r7, r0
 8008a7a:	eba8 0800 	sub.w	r8, r8, r0
 8008a7e:	e7e7      	b.n	8008a50 <__sflush_r+0xd4>
 8008a80:	20400001 	.word	0x20400001

08008a84 <_fflush_r>:
 8008a84:	b538      	push	{r3, r4, r5, lr}
 8008a86:	690b      	ldr	r3, [r1, #16]
 8008a88:	4605      	mov	r5, r0
 8008a8a:	460c      	mov	r4, r1
 8008a8c:	b913      	cbnz	r3, 8008a94 <_fflush_r+0x10>
 8008a8e:	2500      	movs	r5, #0
 8008a90:	4628      	mov	r0, r5
 8008a92:	bd38      	pop	{r3, r4, r5, pc}
 8008a94:	b118      	cbz	r0, 8008a9e <_fflush_r+0x1a>
 8008a96:	6a03      	ldr	r3, [r0, #32]
 8008a98:	b90b      	cbnz	r3, 8008a9e <_fflush_r+0x1a>
 8008a9a:	f7ff fc8f 	bl	80083bc <__sinit>
 8008a9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d0f3      	beq.n	8008a8e <_fflush_r+0xa>
 8008aa6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008aa8:	07d0      	lsls	r0, r2, #31
 8008aaa:	d404      	bmi.n	8008ab6 <_fflush_r+0x32>
 8008aac:	0599      	lsls	r1, r3, #22
 8008aae:	d402      	bmi.n	8008ab6 <_fflush_r+0x32>
 8008ab0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008ab2:	f7ff fe68 	bl	8008786 <__retarget_lock_acquire_recursive>
 8008ab6:	4628      	mov	r0, r5
 8008ab8:	4621      	mov	r1, r4
 8008aba:	f7ff ff5f 	bl	800897c <__sflush_r>
 8008abe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008ac0:	07da      	lsls	r2, r3, #31
 8008ac2:	4605      	mov	r5, r0
 8008ac4:	d4e4      	bmi.n	8008a90 <_fflush_r+0xc>
 8008ac6:	89a3      	ldrh	r3, [r4, #12]
 8008ac8:	059b      	lsls	r3, r3, #22
 8008aca:	d4e1      	bmi.n	8008a90 <_fflush_r+0xc>
 8008acc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008ace:	f7ff fe5b 	bl	8008788 <__retarget_lock_release_recursive>
 8008ad2:	e7dd      	b.n	8008a90 <_fflush_r+0xc>

08008ad4 <__swhatbuf_r>:
 8008ad4:	b570      	push	{r4, r5, r6, lr}
 8008ad6:	460c      	mov	r4, r1
 8008ad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008adc:	2900      	cmp	r1, #0
 8008ade:	b096      	sub	sp, #88	@ 0x58
 8008ae0:	4615      	mov	r5, r2
 8008ae2:	461e      	mov	r6, r3
 8008ae4:	da0d      	bge.n	8008b02 <__swhatbuf_r+0x2e>
 8008ae6:	89a3      	ldrh	r3, [r4, #12]
 8008ae8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008aec:	f04f 0100 	mov.w	r1, #0
 8008af0:	bf14      	ite	ne
 8008af2:	2340      	movne	r3, #64	@ 0x40
 8008af4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008af8:	2000      	movs	r0, #0
 8008afa:	6031      	str	r1, [r6, #0]
 8008afc:	602b      	str	r3, [r5, #0]
 8008afe:	b016      	add	sp, #88	@ 0x58
 8008b00:	bd70      	pop	{r4, r5, r6, pc}
 8008b02:	466a      	mov	r2, sp
 8008b04:	f000 f848 	bl	8008b98 <_fstat_r>
 8008b08:	2800      	cmp	r0, #0
 8008b0a:	dbec      	blt.n	8008ae6 <__swhatbuf_r+0x12>
 8008b0c:	9901      	ldr	r1, [sp, #4]
 8008b0e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008b12:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008b16:	4259      	negs	r1, r3
 8008b18:	4159      	adcs	r1, r3
 8008b1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008b1e:	e7eb      	b.n	8008af8 <__swhatbuf_r+0x24>

08008b20 <__smakebuf_r>:
 8008b20:	898b      	ldrh	r3, [r1, #12]
 8008b22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b24:	079d      	lsls	r5, r3, #30
 8008b26:	4606      	mov	r6, r0
 8008b28:	460c      	mov	r4, r1
 8008b2a:	d507      	bpl.n	8008b3c <__smakebuf_r+0x1c>
 8008b2c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008b30:	6023      	str	r3, [r4, #0]
 8008b32:	6123      	str	r3, [r4, #16]
 8008b34:	2301      	movs	r3, #1
 8008b36:	6163      	str	r3, [r4, #20]
 8008b38:	b003      	add	sp, #12
 8008b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b3c:	ab01      	add	r3, sp, #4
 8008b3e:	466a      	mov	r2, sp
 8008b40:	f7ff ffc8 	bl	8008ad4 <__swhatbuf_r>
 8008b44:	9f00      	ldr	r7, [sp, #0]
 8008b46:	4605      	mov	r5, r0
 8008b48:	4639      	mov	r1, r7
 8008b4a:	4630      	mov	r0, r6
 8008b4c:	f7ff fe8a 	bl	8008864 <_malloc_r>
 8008b50:	b948      	cbnz	r0, 8008b66 <__smakebuf_r+0x46>
 8008b52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b56:	059a      	lsls	r2, r3, #22
 8008b58:	d4ee      	bmi.n	8008b38 <__smakebuf_r+0x18>
 8008b5a:	f023 0303 	bic.w	r3, r3, #3
 8008b5e:	f043 0302 	orr.w	r3, r3, #2
 8008b62:	81a3      	strh	r3, [r4, #12]
 8008b64:	e7e2      	b.n	8008b2c <__smakebuf_r+0xc>
 8008b66:	89a3      	ldrh	r3, [r4, #12]
 8008b68:	6020      	str	r0, [r4, #0]
 8008b6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b6e:	81a3      	strh	r3, [r4, #12]
 8008b70:	9b01      	ldr	r3, [sp, #4]
 8008b72:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008b76:	b15b      	cbz	r3, 8008b90 <__smakebuf_r+0x70>
 8008b78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b7c:	4630      	mov	r0, r6
 8008b7e:	f000 f81d 	bl	8008bbc <_isatty_r>
 8008b82:	b128      	cbz	r0, 8008b90 <__smakebuf_r+0x70>
 8008b84:	89a3      	ldrh	r3, [r4, #12]
 8008b86:	f023 0303 	bic.w	r3, r3, #3
 8008b8a:	f043 0301 	orr.w	r3, r3, #1
 8008b8e:	81a3      	strh	r3, [r4, #12]
 8008b90:	89a3      	ldrh	r3, [r4, #12]
 8008b92:	431d      	orrs	r5, r3
 8008b94:	81a5      	strh	r5, [r4, #12]
 8008b96:	e7cf      	b.n	8008b38 <__smakebuf_r+0x18>

08008b98 <_fstat_r>:
 8008b98:	b538      	push	{r3, r4, r5, lr}
 8008b9a:	4d07      	ldr	r5, [pc, #28]	@ (8008bb8 <_fstat_r+0x20>)
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	4604      	mov	r4, r0
 8008ba0:	4608      	mov	r0, r1
 8008ba2:	4611      	mov	r1, r2
 8008ba4:	602b      	str	r3, [r5, #0]
 8008ba6:	f7f7 ff76 	bl	8000a96 <_fstat>
 8008baa:	1c43      	adds	r3, r0, #1
 8008bac:	d102      	bne.n	8008bb4 <_fstat_r+0x1c>
 8008bae:	682b      	ldr	r3, [r5, #0]
 8008bb0:	b103      	cbz	r3, 8008bb4 <_fstat_r+0x1c>
 8008bb2:	6023      	str	r3, [r4, #0]
 8008bb4:	bd38      	pop	{r3, r4, r5, pc}
 8008bb6:	bf00      	nop
 8008bb8:	24000330 	.word	0x24000330

08008bbc <_isatty_r>:
 8008bbc:	b538      	push	{r3, r4, r5, lr}
 8008bbe:	4d06      	ldr	r5, [pc, #24]	@ (8008bd8 <_isatty_r+0x1c>)
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	4604      	mov	r4, r0
 8008bc4:	4608      	mov	r0, r1
 8008bc6:	602b      	str	r3, [r5, #0]
 8008bc8:	f7f7 ff75 	bl	8000ab6 <_isatty>
 8008bcc:	1c43      	adds	r3, r0, #1
 8008bce:	d102      	bne.n	8008bd6 <_isatty_r+0x1a>
 8008bd0:	682b      	ldr	r3, [r5, #0]
 8008bd2:	b103      	cbz	r3, 8008bd6 <_isatty_r+0x1a>
 8008bd4:	6023      	str	r3, [r4, #0]
 8008bd6:	bd38      	pop	{r3, r4, r5, pc}
 8008bd8:	24000330 	.word	0x24000330

08008bdc <_sbrk_r>:
 8008bdc:	b538      	push	{r3, r4, r5, lr}
 8008bde:	4d06      	ldr	r5, [pc, #24]	@ (8008bf8 <_sbrk_r+0x1c>)
 8008be0:	2300      	movs	r3, #0
 8008be2:	4604      	mov	r4, r0
 8008be4:	4608      	mov	r0, r1
 8008be6:	602b      	str	r3, [r5, #0]
 8008be8:	f7f7 ff7e 	bl	8000ae8 <_sbrk>
 8008bec:	1c43      	adds	r3, r0, #1
 8008bee:	d102      	bne.n	8008bf6 <_sbrk_r+0x1a>
 8008bf0:	682b      	ldr	r3, [r5, #0]
 8008bf2:	b103      	cbz	r3, 8008bf6 <_sbrk_r+0x1a>
 8008bf4:	6023      	str	r3, [r4, #0]
 8008bf6:	bd38      	pop	{r3, r4, r5, pc}
 8008bf8:	24000330 	.word	0x24000330

08008bfc <_init>:
 8008bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bfe:	bf00      	nop
 8008c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c02:	bc08      	pop	{r3}
 8008c04:	469e      	mov	lr, r3
 8008c06:	4770      	bx	lr

08008c08 <_fini>:
 8008c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c0a:	bf00      	nop
 8008c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c0e:	bc08      	pop	{r3}
 8008c10:	469e      	mov	lr, r3
 8008c12:	4770      	bx	lr
