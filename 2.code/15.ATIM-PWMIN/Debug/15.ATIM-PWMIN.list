
15.ATIM-PWMIN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b668  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004fc  0800b908  0800b908  0000c908  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800be04  0800be04  0000ce04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800be0c  0800be0c  0000ce0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800be10  0800be10  0000ce10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001d8  24000000  0800be14  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002c8  240001d8  0800bfec  0000d1d8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240004a0  0800bfec  0000d4a0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000d1d8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00018893  00000000  00000000  0000d206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000033d8  00000000  00000000  00025a99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001280  00000000  00000000  00028e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000e4c  00000000  00000000  0002a0f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a25f  00000000  00000000  0002af44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001ee25  00000000  00000000  000651a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00168854  00000000  00000000  00083fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001ec81c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005a60  00000000  00000000  001ec860  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005a  00000000  00000000  001f22c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d8 	.word	0x240001d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b8f0 	.word	0x0800b8f0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001dc 	.word	0x240001dc
 80002dc:	0800b8f0 	.word	0x0800b8f0

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <MX_BEEP_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_BEEP_GPIO_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b086      	sub	sp, #24
 80006c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006d0:	4b12      	ldr	r3, [pc, #72]	@ (800071c <MX_BEEP_GPIO_Init+0x60>)
 80006d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006d6:	4a11      	ldr	r2, [pc, #68]	@ (800071c <MX_BEEP_GPIO_Init+0x60>)
 80006d8:	f043 0310 	orr.w	r3, r3, #16
 80006dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006e0:	4b0e      	ldr	r3, [pc, #56]	@ (800071c <MX_BEEP_GPIO_Init+0x60>)
 80006e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006e6:	f003 0310 	and.w	r3, r3, #16
 80006ea:	603b      	str	r3, [r7, #0]
 80006ec:	683b      	ldr	r3, [r7, #0]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BEEP_GPIO_Port, BEEP_Pin, GPIO_PIN_RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	2110      	movs	r1, #16
 80006f2:	480b      	ldr	r0, [pc, #44]	@ (8000720 <MX_BEEP_GPIO_Init+0x64>)
 80006f4:	f002 f91c 	bl	8002930 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BEEP_Pin */
  GPIO_InitStruct.Pin = BEEP_Pin;
 80006f8:	2310      	movs	r3, #16
 80006fa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fc:	2301      	movs	r3, #1
 80006fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	2300      	movs	r3, #0
 8000702:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000704:	2300      	movs	r3, #0
 8000706:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000708:	1d3b      	adds	r3, r7, #4
 800070a:	4619      	mov	r1, r3
 800070c:	4804      	ldr	r0, [pc, #16]	@ (8000720 <MX_BEEP_GPIO_Init+0x64>)
 800070e:	f001 ff5f 	bl	80025d0 <HAL_GPIO_Init>
}
 8000712:	bf00      	nop
 8000714:	3718      	adds	r7, #24
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	58024400 	.word	0x58024400
 8000720:	58021000 	.word	0x58021000

08000724 <MX_KEY_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_KEY_GPIO_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b086      	sub	sp, #24
 8000728:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]
 8000736:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000738:	4b14      	ldr	r3, [pc, #80]	@ (800078c <MX_KEY_GPIO_Init+0x68>)
 800073a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800073e:	4a13      	ldr	r2, [pc, #76]	@ (800078c <MX_KEY_GPIO_Init+0x68>)
 8000740:	f043 0301 	orr.w	r3, r3, #1
 8000744:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000748:	4b10      	ldr	r3, [pc, #64]	@ (800078c <MX_KEY_GPIO_Init+0x68>)
 800074a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	603b      	str	r3, [r7, #0]
 8000754:	683b      	ldr	r3, [r7, #0]
  /*Configure GPIO pin : WK_UP_Pin */
  GPIO_InitStruct.Pin = WK_UP_Pin;
 8000756:	2301      	movs	r3, #1
 8000758:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800075a:	2300      	movs	r3, #0
 800075c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800075e:	2302      	movs	r3, #2
 8000760:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(WK_UP_GPIO_Port, &GPIO_InitStruct);
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	4619      	mov	r1, r3
 8000766:	480a      	ldr	r0, [pc, #40]	@ (8000790 <MX_KEY_GPIO_Init+0x6c>)
 8000768:	f001 ff32 	bl	80025d0 <HAL_GPIO_Init>
  /*Configure GPIO pins : KEY0_Pin KEY1_Pin */
  GPIO_InitStruct.Pin = KEY0_Pin|KEY1_Pin;
 800076c:	f248 0302 	movw	r3, #32770	@ 0x8002
 8000770:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000772:	2300      	movs	r3, #0
 8000774:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000776:	2301      	movs	r3, #1
 8000778:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800077a:	1d3b      	adds	r3, r7, #4
 800077c:	4619      	mov	r1, r3
 800077e:	4804      	ldr	r0, [pc, #16]	@ (8000790 <MX_KEY_GPIO_Init+0x6c>)
 8000780:	f001 ff26 	bl	80025d0 <HAL_GPIO_Init>
}
 8000784:	bf00      	nop
 8000786:	3718      	adds	r7, #24
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	58024400 	.word	0x58024400
 8000790:	58020000 	.word	0x58020000

08000794 <MX_LED_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_LED_GPIO_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b088      	sub	sp, #32
 8000798:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079a:	f107 030c 	add.w	r3, r7, #12
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
 80007a8:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007aa:	4b24      	ldr	r3, [pc, #144]	@ (800083c <MX_LED_GPIO_Init+0xa8>)
 80007ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007b0:	4a22      	ldr	r2, [pc, #136]	@ (800083c <MX_LED_GPIO_Init+0xa8>)
 80007b2:	f043 0310 	orr.w	r3, r3, #16
 80007b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007ba:	4b20      	ldr	r3, [pc, #128]	@ (800083c <MX_LED_GPIO_Init+0xa8>)
 80007bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007c0:	f003 0310 	and.w	r3, r3, #16
 80007c4:	60bb      	str	r3, [r7, #8]
 80007c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c8:	4b1c      	ldr	r3, [pc, #112]	@ (800083c <MX_LED_GPIO_Init+0xa8>)
 80007ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007ce:	4a1b      	ldr	r2, [pc, #108]	@ (800083c <MX_LED_GPIO_Init+0xa8>)
 80007d0:	f043 0302 	orr.w	r3, r3, #2
 80007d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007d8:	4b18      	ldr	r3, [pc, #96]	@ (800083c <MX_LED_GPIO_Init+0xa8>)
 80007da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007de:	f003 0302 	and.w	r3, r3, #2
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_Pin|LED2_Pin, GPIO_PIN_SET);
 80007e6:	2201      	movs	r2, #1
 80007e8:	2160      	movs	r1, #96	@ 0x60
 80007ea:	4815      	ldr	r0, [pc, #84]	@ (8000840 <MX_LED_GPIO_Init+0xac>)
 80007ec:	f002 f8a0 	bl	8002930 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 80007f0:	2201      	movs	r2, #1
 80007f2:	2110      	movs	r1, #16
 80007f4:	4813      	ldr	r0, [pc, #76]	@ (8000844 <MX_LED_GPIO_Init+0xb0>)
 80007f6:	f002 f89b 	bl	8002930 <HAL_GPIO_WritePin>
  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 80007fa:	2360      	movs	r3, #96	@ 0x60
 80007fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fe:	2301      	movs	r3, #1
 8000800:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000806:	2300      	movs	r3, #0
 8000808:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800080a:	f107 030c 	add.w	r3, r7, #12
 800080e:	4619      	mov	r1, r3
 8000810:	480b      	ldr	r0, [pc, #44]	@ (8000840 <MX_LED_GPIO_Init+0xac>)
 8000812:	f001 fedd 	bl	80025d0 <HAL_GPIO_Init>
  /*Configure GPIO pin : LED0_Pin */
  GPIO_InitStruct.Pin = LED0_Pin;
 8000816:	2310      	movs	r3, #16
 8000818:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081a:	2301      	movs	r3, #1
 800081c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000822:	2300      	movs	r3, #0
 8000824:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8000826:	f107 030c 	add.w	r3, r7, #12
 800082a:	4619      	mov	r1, r3
 800082c:	4805      	ldr	r0, [pc, #20]	@ (8000844 <MX_LED_GPIO_Init+0xb0>)
 800082e:	f001 fecf 	bl	80025d0 <HAL_GPIO_Init>
}
 8000832:	bf00      	nop
 8000834:	3720      	adds	r7, #32
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	58024400 	.word	0x58024400
 8000840:	58021000 	.word	0x58021000
 8000844:	58020400 	.word	0x58020400

08000848 <bsp_init>:
#include "bsp_init.h"

void bsp_init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
	MX_LED_GPIO_Init();
 800084c:	f7ff ffa2 	bl	8000794 <MX_LED_GPIO_Init>
	MX_BEEP_GPIO_Init();
 8000850:	f7ff ff34 	bl	80006bc <MX_BEEP_GPIO_Init>
	MX_KEY_GPIO_Init();
 8000854:	f7ff ff66 	bl	8000724 <MX_KEY_GPIO_Init>
	// MX_EXTI_GPIO_Init();
	MX_USART1_UART_Init();
 8000858:	f000 fe10 	bl	800147c <MX_USART1_UART_Init>
	// MX_IWDG1_Init(); // 溢出时间约1s
	// MX_TIM6_Init(); // 溢出时间约500ms
}
 800085c:	bf00      	nop
 800085e:	bd80      	pop	{r7, pc}

08000860 <main>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* USER CODE END 0 */

int main(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  MPU_Config();
 8000864:	f000 f8c6 	bl	80009f4 <MPU_Config>
  HAL_Init();
 8000868:	f000 ff04 	bl	8001674 <HAL_Init>
  SystemClock_Config();
 800086c:	f000 f846 	bl	80008fc <SystemClock_Config>
  bsp_init();
 8000870:	f7ff ffea 	bl	8000848 <bsp_init>
  printf("ATIM PWM-IN Test\r\n");
 8000874:	4819      	ldr	r0, [pc, #100]	@ (80008dc <main+0x7c>)
 8000876:	f009 f93b 	bl	8009af0 <puts>
  // 打印时钟信息
  printf("SystemCoreClock: %lu Hz\r\n", SystemCoreClock);
 800087a:	4b19      	ldr	r3, [pc, #100]	@ (80008e0 <main+0x80>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4619      	mov	r1, r3
 8000880:	4818      	ldr	r0, [pc, #96]	@ (80008e4 <main+0x84>)
 8000882:	f009 f8cd 	bl	8009a20 <iprintf>
  printf("HCLK Frequency: %lu Hz\r\n", HAL_RCC_GetHCLKFreq());
 8000886:	f003 f86f 	bl	8003968 <HAL_RCC_GetHCLKFreq>
 800088a:	4603      	mov	r3, r0
 800088c:	4619      	mov	r1, r3
 800088e:	4816      	ldr	r0, [pc, #88]	@ (80008e8 <main+0x88>)
 8000890:	f009 f8c6 	bl	8009a20 <iprintf>
  printf("PCLK1 Frequency: %lu Hz\r\n", HAL_RCC_GetPCLK1Freq());
 8000894:	f003 f898 	bl	80039c8 <HAL_RCC_GetPCLK1Freq>
 8000898:	4603      	mov	r3, r0
 800089a:	4619      	mov	r1, r3
 800089c:	4813      	ldr	r0, [pc, #76]	@ (80008ec <main+0x8c>)
 800089e:	f009 f8bf 	bl	8009a20 <iprintf>
  printf("PCLK2 Frequency: %lu Hz\r\n", HAL_RCC_GetPCLK2Freq());
 80008a2:	f003 f8a7 	bl	80039f4 <HAL_RCC_GetPCLK2Freq>
 80008a6:	4603      	mov	r3, r0
 80008a8:	4619      	mov	r1, r3
 80008aa:	4811      	ldr	r0, [pc, #68]	@ (80008f0 <main+0x90>)
 80008ac:	f009 f8b8 	bl	8009a20 <iprintf>
  MX_TIM12_Init(); // PWM Output
 80008b0:	f000 fb38 	bl	8000f24 <MX_TIM12_Init>
  MX_TIM1_Init();  // PWM Input
 80008b4:	f000 fabe 	bl	8000e34 <MX_TIM1_Init>
  // 设置PWM输出为10kHz，50%占空比
  Set_PWM_Output(10000, 50.0);
 80008b8:	ed9f 0a0e 	vldr	s0, [pc, #56]	@ 80008f4 <main+0x94>
 80008bc:	f242 7010 	movw	r0, #10000	@ 0x2710
 80008c0:	f000 fcb6 	bl	8001230 <Set_PWM_Output>
  // 启动PWM输入捕获
  Start_PWM_Input_Capture();
 80008c4:	f000 fc6a 	bl	800119c <Start_PWM_Input_Capture>
  while (1)
  {
    HAL_GPIO_TogglePin(LED_RED_Port, LED_RED_Pin);
 80008c8:	2140      	movs	r1, #64	@ 0x40
 80008ca:	480b      	ldr	r0, [pc, #44]	@ (80008f8 <main+0x98>)
 80008cc:	f002 f849 	bl	8002962 <HAL_GPIO_TogglePin>
    HAL_Delay(500);
 80008d0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80008d4:	f000 ff60 	bl	8001798 <HAL_Delay>
    HAL_GPIO_TogglePin(LED_RED_Port, LED_RED_Pin);
 80008d8:	bf00      	nop
 80008da:	e7f5      	b.n	80008c8 <main+0x68>
 80008dc:	0800b908 	.word	0x0800b908
 80008e0:	24000000 	.word	0x24000000
 80008e4:	0800b91c 	.word	0x0800b91c
 80008e8:	0800b938 	.word	0x0800b938
 80008ec:	0800b954 	.word	0x0800b954
 80008f0:	0800b970 	.word	0x0800b970
 80008f4:	42480000 	.word	0x42480000
 80008f8:	58021000 	.word	0x58021000

080008fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b09c      	sub	sp, #112	@ 0x70
 8000900:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000902:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000906:	224c      	movs	r2, #76	@ 0x4c
 8000908:	2100      	movs	r1, #0
 800090a:	4618      	mov	r0, r3
 800090c:	f009 f9d0 	bl	8009cb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000910:	1d3b      	adds	r3, r7, #4
 8000912:	2220      	movs	r2, #32
 8000914:	2100      	movs	r1, #0
 8000916:	4618      	mov	r0, r3
 8000918:	f009 f9ca 	bl	8009cb0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800091c:	2002      	movs	r0, #2
 800091e:	f002 f85f 	bl	80029e0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000922:	2300      	movs	r3, #0
 8000924:	603b      	str	r3, [r7, #0]
 8000926:	4b31      	ldr	r3, [pc, #196]	@ (80009ec <SystemClock_Config+0xf0>)
 8000928:	699b      	ldr	r3, [r3, #24]
 800092a:	4a30      	ldr	r2, [pc, #192]	@ (80009ec <SystemClock_Config+0xf0>)
 800092c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000930:	6193      	str	r3, [r2, #24]
 8000932:	4b2e      	ldr	r3, [pc, #184]	@ (80009ec <SystemClock_Config+0xf0>)
 8000934:	699b      	ldr	r3, [r3, #24]
 8000936:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800093a:	603b      	str	r3, [r7, #0]
 800093c:	4b2c      	ldr	r3, [pc, #176]	@ (80009f0 <SystemClock_Config+0xf4>)
 800093e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000940:	4a2b      	ldr	r2, [pc, #172]	@ (80009f0 <SystemClock_Config+0xf4>)
 8000942:	f043 0301 	orr.w	r3, r3, #1
 8000946:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000948:	4b29      	ldr	r3, [pc, #164]	@ (80009f0 <SystemClock_Config+0xf4>)
 800094a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800094c:	f003 0301 	and.w	r3, r3, #1
 8000950:	603b      	str	r3, [r7, #0]
 8000952:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000954:	bf00      	nop
 8000956:	4b25      	ldr	r3, [pc, #148]	@ (80009ec <SystemClock_Config+0xf0>)
 8000958:	699b      	ldr	r3, [r3, #24]
 800095a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800095e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000962:	d1f8      	bne.n	8000956 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000964:	2309      	movs	r3, #9
 8000966:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000968:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800096c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800096e:	2301      	movs	r3, #1
 8000970:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000972:	2302      	movs	r3, #2
 8000974:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000976:	2302      	movs	r3, #2
 8000978:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 800097a:	2302      	movs	r3, #2
 800097c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 800097e:	23f0      	movs	r3, #240	@ 0xf0
 8000980:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000982:	2302      	movs	r3, #2
 8000984:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000986:	2302      	movs	r3, #2
 8000988:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800098a:	2302      	movs	r3, #2
 800098c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800098e:	2308      	movs	r3, #8
 8000990:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000992:	2300      	movs	r3, #0
 8000994:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000996:	2300      	movs	r3, #0
 8000998:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800099a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800099e:	4618      	mov	r0, r3
 80009a0:	f002 f858 	bl	8002a54 <HAL_RCC_OscConfig>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80009aa:	f000 f84f 	bl	8000a4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ae:	233f      	movs	r3, #63	@ 0x3f
 80009b0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009b2:	2303      	movs	r3, #3
 80009b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009b6:	2300      	movs	r3, #0
 80009b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80009ba:	2308      	movs	r3, #8
 80009bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80009be:	2340      	movs	r3, #64	@ 0x40
 80009c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009c2:	2340      	movs	r3, #64	@ 0x40
 80009c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80009c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009ca:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80009cc:	2340      	movs	r3, #64	@ 0x40
 80009ce:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009d0:	1d3b      	adds	r3, r7, #4
 80009d2:	2104      	movs	r1, #4
 80009d4:	4618      	mov	r0, r3
 80009d6:	f002 fc97 	bl	8003308 <HAL_RCC_ClockConfig>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80009e0:	f000 f834 	bl	8000a4c <Error_Handler>
  }
}
 80009e4:	bf00      	nop
 80009e6:	3770      	adds	r7, #112	@ 0x70
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	58024800 	.word	0x58024800
 80009f0:	58000400 	.word	0x58000400

080009f4 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80009fa:	463b      	mov	r3, r7
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000a06:	f001 f807 	bl	8001a18 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000a12:	2300      	movs	r3, #0
 8000a14:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000a16:	231f      	movs	r3, #31
 8000a18:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000a1a:	2387      	movs	r3, #135	@ 0x87
 8000a1c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000a22:	2300      	movs	r3, #0
 8000a24:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000a26:	2301      	movs	r3, #1
 8000a28:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000a32:	2300      	movs	r3, #0
 8000a34:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a36:	463b      	mov	r3, r7
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f001 f825 	bl	8001a88 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000a3e:	2004      	movs	r0, #4
 8000a40:	f001 f802 	bl	8001a48 <HAL_MPU_Enable>

}
 8000a44:	bf00      	nop
 8000a46:	3710      	adds	r7, #16
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a50:	b672      	cpsid	i
}
 8000a52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a54:	bf00      	nop
 8000a56:	e7fd      	b.n	8000a54 <Error_Handler+0x8>

08000a58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a88 <HAL_MspInit+0x30>)
 8000a60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a64:	4a08      	ldr	r2, [pc, #32]	@ (8000a88 <HAL_MspInit+0x30>)
 8000a66:	f043 0302 	orr.w	r3, r3, #2
 8000a6a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000a6e:	4b06      	ldr	r3, [pc, #24]	@ (8000a88 <HAL_MspInit+0x30>)
 8000a70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a74:	f003 0302 	and.w	r3, r3, #2
 8000a78:	607b      	str	r3, [r7, #4]
 8000a7a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a7c:	bf00      	nop
 8000a7e:	370c      	adds	r7, #12
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr
 8000a88:	58024400 	.word	0x58024400

08000a8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a90:	bf00      	nop
 8000a92:	e7fd      	b.n	8000a90 <NMI_Handler+0x4>

08000a94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a98:	bf00      	nop
 8000a9a:	e7fd      	b.n	8000a98 <HardFault_Handler+0x4>

08000a9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa0:	bf00      	nop
 8000aa2:	e7fd      	b.n	8000aa0 <MemManage_Handler+0x4>

08000aa4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aa8:	bf00      	nop
 8000aaa:	e7fd      	b.n	8000aa8 <BusFault_Handler+0x4>

08000aac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab0:	bf00      	nop
 8000ab2:	e7fd      	b.n	8000ab0 <UsageFault_Handler+0x4>

08000ab4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr

08000ac2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr

08000ad0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr

08000ade <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ae2:	f000 fe39 	bl	8001758 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
	...

08000aec <WWDG_IRQHandler>:

/**
  * @brief This function handles Window watchdog interrupt.
  */
void WWDG_IRQHandler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN WWDG_IRQn 0 */

  /* USER CODE END WWDG_IRQn 0 */
  HAL_WWDG_IRQHandler(&hwwdg1);
 8000af0:	4802      	ldr	r0, [pc, #8]	@ (8000afc <WWDG_IRQHandler+0x10>)
 8000af2:	f008 fa73 	bl	8008fdc <HAL_WWDG_IRQHandler>
  /* USER CODE BEGIN WWDG_IRQn 1 */
  /* USER CODE END WWDG_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	2400033c 	.word	0x2400033c

08000b00 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI_KEY1_Pin);
 8000b04:	2002      	movs	r0, #2
 8000b06:	f001 ff46 	bl	8002996 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
	...

08000b10 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b14:	4802      	ldr	r0, [pc, #8]	@ (8000b20 <TIM1_CC_IRQHandler+0x10>)
 8000b16:	f005 fa7b 	bl	8006010 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	24000210 	.word	0x24000210

08000b24 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b28:	4802      	ldr	r0, [pc, #8]	@ (8000b34 <USART1_IRQHandler+0x10>)
 8000b2a:	f006 fd7b 	bl	8007624 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	240002a8 	.word	0x240002a8

08000b38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  return 1;
 8000b3c:	2301      	movs	r3, #1
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <_kill>:

int _kill(int pid, int sig)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000b52:	f009 f8ff 	bl	8009d54 <__errno>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2216      	movs	r2, #22
 8000b5a:	601a      	str	r2, [r3, #0]
  return -1;
 8000b5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <_exit>:

void _exit (int status)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000b70:	f04f 31ff 	mov.w	r1, #4294967295
 8000b74:	6878      	ldr	r0, [r7, #4]
 8000b76:	f7ff ffe7 	bl	8000b48 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000b7a:	bf00      	nop
 8000b7c:	e7fd      	b.n	8000b7a <_exit+0x12>

08000b7e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b086      	sub	sp, #24
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	60f8      	str	r0, [r7, #12]
 8000b86:	60b9      	str	r1, [r7, #8]
 8000b88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	617b      	str	r3, [r7, #20]
 8000b8e:	e00a      	b.n	8000ba6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b90:	f3af 8000 	nop.w
 8000b94:	4601      	mov	r1, r0
 8000b96:	68bb      	ldr	r3, [r7, #8]
 8000b98:	1c5a      	adds	r2, r3, #1
 8000b9a:	60ba      	str	r2, [r7, #8]
 8000b9c:	b2ca      	uxtb	r2, r1
 8000b9e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	617b      	str	r3, [r7, #20]
 8000ba6:	697a      	ldr	r2, [r7, #20]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	429a      	cmp	r2, r3
 8000bac:	dbf0      	blt.n	8000b90 <_read+0x12>
  }

  return len;
 8000bae:	687b      	ldr	r3, [r7, #4]
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	3718      	adds	r7, #24
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60f8      	str	r0, [r7, #12]
 8000bc0:	60b9      	str	r1, [r7, #8]
 8000bc2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	617b      	str	r3, [r7, #20]
 8000bc8:	e009      	b.n	8000bde <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000bca:	68bb      	ldr	r3, [r7, #8]
 8000bcc:	1c5a      	adds	r2, r3, #1
 8000bce:	60ba      	str	r2, [r7, #8]
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f000 fd10 	bl	80015f8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	617b      	str	r3, [r7, #20]
 8000bde:	697a      	ldr	r2, [r7, #20]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	429a      	cmp	r2, r3
 8000be4:	dbf1      	blt.n	8000bca <_write+0x12>
  }
  return len;
 8000be6:	687b      	ldr	r3, [r7, #4]
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3718      	adds	r7, #24
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <_close>:

int _close(int file)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bf8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c18:	605a      	str	r2, [r3, #4]
  return 0;
 8000c1a:	2300      	movs	r3, #0
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <_isatty>:

int _isatty(int file)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c30:	2301      	movs	r3, #1
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	b085      	sub	sp, #20
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	60f8      	str	r0, [r7, #12]
 8000c46:	60b9      	str	r1, [r7, #8]
 8000c48:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c4a:	2300      	movs	r3, #0
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3714      	adds	r7, #20
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c60:	4a14      	ldr	r2, [pc, #80]	@ (8000cb4 <_sbrk+0x5c>)
 8000c62:	4b15      	ldr	r3, [pc, #84]	@ (8000cb8 <_sbrk+0x60>)
 8000c64:	1ad3      	subs	r3, r2, r3
 8000c66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c6c:	4b13      	ldr	r3, [pc, #76]	@ (8000cbc <_sbrk+0x64>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d102      	bne.n	8000c7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c74:	4b11      	ldr	r3, [pc, #68]	@ (8000cbc <_sbrk+0x64>)
 8000c76:	4a12      	ldr	r2, [pc, #72]	@ (8000cc0 <_sbrk+0x68>)
 8000c78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c7a:	4b10      	ldr	r3, [pc, #64]	@ (8000cbc <_sbrk+0x64>)
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4413      	add	r3, r2
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d207      	bcs.n	8000c98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c88:	f009 f864 	bl	8009d54 <__errno>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	220c      	movs	r2, #12
 8000c90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c92:	f04f 33ff 	mov.w	r3, #4294967295
 8000c96:	e009      	b.n	8000cac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c98:	4b08      	ldr	r3, [pc, #32]	@ (8000cbc <_sbrk+0x64>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c9e:	4b07      	ldr	r3, [pc, #28]	@ (8000cbc <_sbrk+0x64>)
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	4a05      	ldr	r2, [pc, #20]	@ (8000cbc <_sbrk+0x64>)
 8000ca8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000caa:	68fb      	ldr	r3, [r7, #12]
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3718      	adds	r7, #24
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	24080000 	.word	0x24080000
 8000cb8:	00000400 	.word	0x00000400
 8000cbc:	240001f4 	.word	0x240001f4
 8000cc0:	240004a0 	.word	0x240004a0

08000cc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000cc8:	4b43      	ldr	r3, [pc, #268]	@ (8000dd8 <SystemInit+0x114>)
 8000cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cce:	4a42      	ldr	r2, [pc, #264]	@ (8000dd8 <SystemInit+0x114>)
 8000cd0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cd4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000cd8:	4b40      	ldr	r3, [pc, #256]	@ (8000ddc <SystemInit+0x118>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f003 030f 	and.w	r3, r3, #15
 8000ce0:	2b06      	cmp	r3, #6
 8000ce2:	d807      	bhi.n	8000cf4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ce4:	4b3d      	ldr	r3, [pc, #244]	@ (8000ddc <SystemInit+0x118>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f023 030f 	bic.w	r3, r3, #15
 8000cec:	4a3b      	ldr	r2, [pc, #236]	@ (8000ddc <SystemInit+0x118>)
 8000cee:	f043 0307 	orr.w	r3, r3, #7
 8000cf2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000cf4:	4b3a      	ldr	r3, [pc, #232]	@ (8000de0 <SystemInit+0x11c>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a39      	ldr	r2, [pc, #228]	@ (8000de0 <SystemInit+0x11c>)
 8000cfa:	f043 0301 	orr.w	r3, r3, #1
 8000cfe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d00:	4b37      	ldr	r3, [pc, #220]	@ (8000de0 <SystemInit+0x11c>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000d06:	4b36      	ldr	r3, [pc, #216]	@ (8000de0 <SystemInit+0x11c>)
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	4935      	ldr	r1, [pc, #212]	@ (8000de0 <SystemInit+0x11c>)
 8000d0c:	4b35      	ldr	r3, [pc, #212]	@ (8000de4 <SystemInit+0x120>)
 8000d0e:	4013      	ands	r3, r2
 8000d10:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d12:	4b32      	ldr	r3, [pc, #200]	@ (8000ddc <SystemInit+0x118>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f003 0308 	and.w	r3, r3, #8
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d007      	beq.n	8000d2e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d1e:	4b2f      	ldr	r3, [pc, #188]	@ (8000ddc <SystemInit+0x118>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f023 030f 	bic.w	r3, r3, #15
 8000d26:	4a2d      	ldr	r2, [pc, #180]	@ (8000ddc <SystemInit+0x118>)
 8000d28:	f043 0307 	orr.w	r3, r3, #7
 8000d2c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000d2e:	4b2c      	ldr	r3, [pc, #176]	@ (8000de0 <SystemInit+0x11c>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000d34:	4b2a      	ldr	r3, [pc, #168]	@ (8000de0 <SystemInit+0x11c>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000d3a:	4b29      	ldr	r3, [pc, #164]	@ (8000de0 <SystemInit+0x11c>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000d40:	4b27      	ldr	r3, [pc, #156]	@ (8000de0 <SystemInit+0x11c>)
 8000d42:	4a29      	ldr	r2, [pc, #164]	@ (8000de8 <SystemInit+0x124>)
 8000d44:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000d46:	4b26      	ldr	r3, [pc, #152]	@ (8000de0 <SystemInit+0x11c>)
 8000d48:	4a28      	ldr	r2, [pc, #160]	@ (8000dec <SystemInit+0x128>)
 8000d4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000d4c:	4b24      	ldr	r3, [pc, #144]	@ (8000de0 <SystemInit+0x11c>)
 8000d4e:	4a28      	ldr	r2, [pc, #160]	@ (8000df0 <SystemInit+0x12c>)
 8000d50:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000d52:	4b23      	ldr	r3, [pc, #140]	@ (8000de0 <SystemInit+0x11c>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000d58:	4b21      	ldr	r3, [pc, #132]	@ (8000de0 <SystemInit+0x11c>)
 8000d5a:	4a25      	ldr	r2, [pc, #148]	@ (8000df0 <SystemInit+0x12c>)
 8000d5c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000d5e:	4b20      	ldr	r3, [pc, #128]	@ (8000de0 <SystemInit+0x11c>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000d64:	4b1e      	ldr	r3, [pc, #120]	@ (8000de0 <SystemInit+0x11c>)
 8000d66:	4a22      	ldr	r2, [pc, #136]	@ (8000df0 <SystemInit+0x12c>)
 8000d68:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000d6a:	4b1d      	ldr	r3, [pc, #116]	@ (8000de0 <SystemInit+0x11c>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d70:	4b1b      	ldr	r3, [pc, #108]	@ (8000de0 <SystemInit+0x11c>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a1a      	ldr	r2, [pc, #104]	@ (8000de0 <SystemInit+0x11c>)
 8000d76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d7a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000d7c:	4b18      	ldr	r3, [pc, #96]	@ (8000de0 <SystemInit+0x11c>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000d82:	4b1c      	ldr	r3, [pc, #112]	@ (8000df4 <SystemInit+0x130>)
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	4b1c      	ldr	r3, [pc, #112]	@ (8000df8 <SystemInit+0x134>)
 8000d88:	4013      	ands	r3, r2
 8000d8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000d8e:	d202      	bcs.n	8000d96 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000d90:	4b1a      	ldr	r3, [pc, #104]	@ (8000dfc <SystemInit+0x138>)
 8000d92:	2201      	movs	r2, #1
 8000d94:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000d96:	4b12      	ldr	r3, [pc, #72]	@ (8000de0 <SystemInit+0x11c>)
 8000d98:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000d9c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d113      	bne.n	8000dcc <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000da4:	4b0e      	ldr	r3, [pc, #56]	@ (8000de0 <SystemInit+0x11c>)
 8000da6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000daa:	4a0d      	ldr	r2, [pc, #52]	@ (8000de0 <SystemInit+0x11c>)
 8000dac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000db0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000db4:	4b12      	ldr	r3, [pc, #72]	@ (8000e00 <SystemInit+0x13c>)
 8000db6:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000dba:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000dbc:	4b08      	ldr	r3, [pc, #32]	@ (8000de0 <SystemInit+0x11c>)
 8000dbe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000dc2:	4a07      	ldr	r2, [pc, #28]	@ (8000de0 <SystemInit+0x11c>)
 8000dc4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000dc8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	e000ed00 	.word	0xe000ed00
 8000ddc:	52002000 	.word	0x52002000
 8000de0:	58024400 	.word	0x58024400
 8000de4:	eaf6ed7f 	.word	0xeaf6ed7f
 8000de8:	02020200 	.word	0x02020200
 8000dec:	01ff0000 	.word	0x01ff0000
 8000df0:	01010280 	.word	0x01010280
 8000df4:	5c001000 	.word	0x5c001000
 8000df8:	ffff0000 	.word	0xffff0000
 8000dfc:	51008108 	.word	0x51008108
 8000e00:	52004000 	.word	0x52004000

08000e04 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000e08:	4b09      	ldr	r3, [pc, #36]	@ (8000e30 <ExitRun0Mode+0x2c>)
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	4a08      	ldr	r2, [pc, #32]	@ (8000e30 <ExitRun0Mode+0x2c>)
 8000e0e:	f043 0302 	orr.w	r3, r3, #2
 8000e12:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000e14:	bf00      	nop
 8000e16:	4b06      	ldr	r3, [pc, #24]	@ (8000e30 <ExitRun0Mode+0x2c>)
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d0f9      	beq.n	8000e16 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000e22:	bf00      	nop
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	58024800 	.word	0x58024800

08000e34 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08c      	sub	sp, #48	@ 0x30
 8000e38:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e3a:	f107 0320 	add.w	r3, r7, #32
 8000e3e:	2200      	movs	r2, #0
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	605a      	str	r2, [r3, #4]
 8000e44:	609a      	str	r2, [r3, #8]
 8000e46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e48:	f107 0314 	add.w	r3, r7, #20
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000e54:	1d3b      	adds	r3, r7, #4
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	605a      	str	r2, [r3, #4]
 8000e5c:	609a      	str	r2, [r3, #8]
 8000e5e:	60da      	str	r2, [r3, #12]

  htim1.Instance = TIM1;
 8000e60:	4b2e      	ldr	r3, [pc, #184]	@ (8000f1c <MX_TIM1_Init+0xe8>)
 8000e62:	4a2f      	ldr	r2, [pc, #188]	@ (8000f20 <MX_TIM1_Init+0xec>)
 8000e64:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 479; // 480MHz / (479+1) = 1MHz
 8000e66:	4b2d      	ldr	r3, [pc, #180]	@ (8000f1c <MX_TIM1_Init+0xe8>)
 8000e68:	f240 12df 	movw	r2, #479	@ 0x1df
 8000e6c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e6e:	4b2b      	ldr	r3, [pc, #172]	@ (8000f1c <MX_TIM1_Init+0xe8>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xFFFF; // 最大计数值
 8000e74:	4b29      	ldr	r3, [pc, #164]	@ (8000f1c <MX_TIM1_Init+0xe8>)
 8000e76:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e7a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e7c:	4b27      	ldr	r3, [pc, #156]	@ (8000f1c <MX_TIM1_Init+0xe8>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e82:	4b26      	ldr	r3, [pc, #152]	@ (8000f1c <MX_TIM1_Init+0xe8>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e88:	4b24      	ldr	r3, [pc, #144]	@ (8000f1c <MX_TIM1_Init+0xe8>)
 8000e8a:	2280      	movs	r2, #128	@ 0x80
 8000e8c:	619a      	str	r2, [r3, #24]

  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e8e:	4823      	ldr	r0, [pc, #140]	@ (8000f1c <MX_TIM1_Init+0xe8>)
 8000e90:	f004 fbf2 	bl	8005678 <HAL_TIM_Base_Init>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8000e9a:	f7ff fdd7 	bl	8000a4c <Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ea2:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ea4:	f107 0320 	add.w	r3, r7, #32
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	481c      	ldr	r0, [pc, #112]	@ (8000f1c <MX_TIM1_Init+0xe8>)
 8000eac:	f005 fb68 	bl	8006580 <HAL_TIM_ConfigClockSource>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_TIM1_Init+0x86>
  {
    Error_Handler();
 8000eb6:	f7ff fdc9 	bl	8000a4c <Error_Handler>
  }

  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000eba:	4818      	ldr	r0, [pc, #96]	@ (8000f1c <MX_TIM1_Init+0xe8>)
 8000ebc:	f004 fe38 	bl	8005b30 <HAL_TIM_IC_Init>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000ec6:	f7ff fdc1 	bl	8000a4c <Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ed6:	f107 0314 	add.w	r3, r7, #20
 8000eda:	4619      	mov	r1, r3
 8000edc:	480f      	ldr	r0, [pc, #60]	@ (8000f1c <MX_TIM1_Init+0xe8>)
 8000ede:	f006 fa17 	bl	8007310 <HAL_TIMEx_MasterConfigSynchronization>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 8000ee8:	f7ff fdb0 	bl	8000a4c <Error_Handler>
  }

  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000eec:	2300      	movs	r3, #0
 8000eee:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0; // 减少滤波，提高响应速度
 8000ef8:	2300      	movs	r3, #0
 8000efa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000efc:	1d3b      	adds	r3, r7, #4
 8000efe:	2200      	movs	r2, #0
 8000f00:	4619      	mov	r1, r3
 8000f02:	4806      	ldr	r0, [pc, #24]	@ (8000f1c <MX_TIM1_Init+0xe8>)
 8000f04:	f005 f98b 	bl	800621e <HAL_TIM_IC_ConfigChannel>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 8000f0e:	f7ff fd9d 	bl	8000a4c <Error_Handler>
  }
}
 8000f12:	bf00      	nop
 8000f14:	3730      	adds	r7, #48	@ 0x30
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	24000210 	.word	0x24000210
 8000f20:	40010000 	.word	0x40010000

08000f24 <MX_TIM12_Init>:

/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b08e      	sub	sp, #56	@ 0x38
 8000f28:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f2a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]
 8000f36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f38:	f107 031c 	add.w	r3, r7, #28
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f44:	463b      	mov	r3, r7
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]
 8000f4c:	609a      	str	r2, [r3, #8]
 8000f4e:	60da      	str	r2, [r3, #12]
 8000f50:	611a      	str	r2, [r3, #16]
 8000f52:	615a      	str	r2, [r3, #20]
 8000f54:	619a      	str	r2, [r3, #24]

  htim12.Instance = TIM12;
 8000f56:	4b2b      	ldr	r3, [pc, #172]	@ (8001004 <MX_TIM12_Init+0xe0>)
 8000f58:	4a2b      	ldr	r2, [pc, #172]	@ (8001008 <MX_TIM12_Init+0xe4>)
 8000f5a:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 479; // 480MHz / (479+1) = 1MHz
 8000f5c:	4b29      	ldr	r3, [pc, #164]	@ (8001004 <MX_TIM12_Init+0xe0>)
 8000f5e:	f240 12df 	movw	r2, #479	@ 0x1df
 8000f62:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f64:	4b27      	ldr	r3, [pc, #156]	@ (8001004 <MX_TIM12_Init+0xe0>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 99;     // 1MHz / 100 = 10kHz
 8000f6a:	4b26      	ldr	r3, [pc, #152]	@ (8001004 <MX_TIM12_Init+0xe0>)
 8000f6c:	2263      	movs	r2, #99	@ 0x63
 8000f6e:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f70:	4b24      	ldr	r3, [pc, #144]	@ (8001004 <MX_TIM12_Init+0xe0>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	611a      	str	r2, [r3, #16]
  // htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;

  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8000f76:	4823      	ldr	r0, [pc, #140]	@ (8001004 <MX_TIM12_Init+0xe0>)
 8000f78:	f004 fb7e 	bl	8005678 <HAL_TIM_Base_Init>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 8000f82:	f7ff fd63 	bl	8000a4c <Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f86:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8000f8c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f90:	4619      	mov	r1, r3
 8000f92:	481c      	ldr	r0, [pc, #112]	@ (8001004 <MX_TIM12_Init+0xe0>)
 8000f94:	f005 faf4 	bl	8006580 <HAL_TIM_ConfigClockSource>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_TIM12_Init+0x7e>
  {
    Error_Handler();
 8000f9e:	f7ff fd55 	bl	8000a4c <Error_Handler>
  }

  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8000fa2:	4818      	ldr	r0, [pc, #96]	@ (8001004 <MX_TIM12_Init+0xe0>)
 8000fa4:	f004 fbbf 	bl	8005726 <HAL_TIM_PWM_Init>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_TIM12_Init+0x8e>
  {
    Error_Handler();
 8000fae:	f7ff fd4d 	bl	8000a4c <Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim12, &sMasterConfig) != HAL_OK)
 8000fba:	f107 031c 	add.w	r3, r7, #28
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4810      	ldr	r0, [pc, #64]	@ (8001004 <MX_TIM12_Init+0xe0>)
 8000fc2:	f006 f9a5 	bl	8007310 <HAL_TIMEx_MasterConfigSynchronization>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_TIM12_Init+0xac>
  {
    Error_Handler();
 8000fcc:	f7ff fd3e 	bl	8000a4c <Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fd0:	2360      	movs	r3, #96	@ 0x60
 8000fd2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50; // 50% 占空比
 8000fd4:	2332      	movs	r3, #50	@ 0x32
 8000fd6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE; // 禁用快速模式
 8000fdc:	2300      	movs	r3, #0
 8000fde:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fe0:	463b      	mov	r3, r7
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4807      	ldr	r0, [pc, #28]	@ (8001004 <MX_TIM12_Init+0xe0>)
 8000fe8:	f005 f9b6 	bl	8006358 <HAL_TIM_PWM_ConfigChannel>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_TIM12_Init+0xd2>
  {
    Error_Handler();
 8000ff2:	f7ff fd2b 	bl	8000a4c <Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim12);
 8000ff6:	4803      	ldr	r0, [pc, #12]	@ (8001004 <MX_TIM12_Init+0xe0>)
 8000ff8:	f000 fa04 	bl	8001404 <HAL_TIM_MspPostInit>
}
 8000ffc:	bf00      	nop
 8000ffe:	3738      	adds	r7, #56	@ 0x38
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	2400025c 	.word	0x2400025c
 8001008:	40001800 	.word	0x40001800

0800100c <HAL_TIM_IC_CaptureCallback>:

// 简化后的回调函数
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b088      	sub	sp, #32
 8001010:	af02      	add	r7, sp, #8
 8001012:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM1)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a56      	ldr	r2, [pc, #344]	@ (8001174 <HAL_TIM_IC_CaptureCallback+0x168>)
 800101a:	4293      	cmp	r3, r2
 800101c:	f040 80a6 	bne.w	800116c <HAL_TIM_IC_CaptureCallback+0x160>
  {
    capture_count++;
 8001020:	4b55      	ldr	r3, [pc, #340]	@ (8001178 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	3301      	adds	r3, #1
 8001026:	4a54      	ldr	r2, [pc, #336]	@ (8001178 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8001028:	6013      	str	r3, [r2, #0]

    switch(capture_state)
 800102a:	4b54      	ldr	r3, [pc, #336]	@ (800117c <HAL_TIM_IC_CaptureCallback+0x170>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	b2db      	uxtb	r3, r3
 8001030:	2b02      	cmp	r3, #2
 8001032:	d03b      	beq.n	80010ac <HAL_TIM_IC_CaptureCallback+0xa0>
 8001034:	2b02      	cmp	r3, #2
 8001036:	f300 8099 	bgt.w	800116c <HAL_TIM_IC_CaptureCallback+0x160>
 800103a:	2b00      	cmp	r3, #0
 800103c:	d002      	beq.n	8001044 <HAL_TIM_IC_CaptureCallback+0x38>
 800103e:	2b01      	cmp	r3, #1
 8001040:	d01b      	beq.n	800107a <HAL_TIM_IC_CaptureCallback+0x6e>

        capture_state = 0; // 重置状态
        break;
    }
  }
}
 8001042:	e093      	b.n	800116c <HAL_TIM_IC_CaptureCallback+0x160>
        IC_Value1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001044:	2100      	movs	r1, #0
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f005 fb92 	bl	8006770 <HAL_TIM_ReadCapturedValue>
 800104c:	4603      	mov	r3, r0
 800104e:	4a4c      	ldr	r2, [pc, #304]	@ (8001180 <HAL_TIM_IC_CaptureCallback+0x174>)
 8001050:	6013      	str	r3, [r2, #0]
        capture_state = 1;
 8001052:	4b4a      	ldr	r3, [pc, #296]	@ (800117c <HAL_TIM_IC_CaptureCallback+0x170>)
 8001054:	2201      	movs	r2, #1
 8001056:	701a      	strb	r2, [r3, #0]
        __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	6a1a      	ldr	r2, [r3, #32]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f022 020a 	bic.w	r2, r2, #10
 8001066:	621a      	str	r2, [r3, #32]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	6a1a      	ldr	r2, [r3, #32]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f042 0202 	orr.w	r2, r2, #2
 8001076:	621a      	str	r2, [r3, #32]
        break;
 8001078:	e078      	b.n	800116c <HAL_TIM_IC_CaptureCallback+0x160>
        IC_Value2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800107a:	2100      	movs	r1, #0
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f005 fb77 	bl	8006770 <HAL_TIM_ReadCapturedValue>
 8001082:	4603      	mov	r3, r0
 8001084:	4a3f      	ldr	r2, [pc, #252]	@ (8001184 <HAL_TIM_IC_CaptureCallback+0x178>)
 8001086:	6013      	str	r3, [r2, #0]
        capture_state = 2;
 8001088:	4b3c      	ldr	r3, [pc, #240]	@ (800117c <HAL_TIM_IC_CaptureCallback+0x170>)
 800108a:	2202      	movs	r2, #2
 800108c:	701a      	strb	r2, [r3, #0]
        __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	6a1a      	ldr	r2, [r3, #32]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f022 020a 	bic.w	r2, r2, #10
 800109c:	621a      	str	r2, [r3, #32]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	6a12      	ldr	r2, [r2, #32]
 80010a8:	621a      	str	r2, [r3, #32]
        break;
 80010aa:	e05f      	b.n	800116c <HAL_TIM_IC_CaptureCallback+0x160>
        IC_Value3 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80010ac:	2100      	movs	r1, #0
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f005 fb5e 	bl	8006770 <HAL_TIM_ReadCapturedValue>
 80010b4:	4603      	mov	r3, r0
 80010b6:	4a34      	ldr	r2, [pc, #208]	@ (8001188 <HAL_TIM_IC_CaptureCallback+0x17c>)
 80010b8:	6013      	str	r3, [r2, #0]
        if (IC_Value3 > IC_Value1)
 80010ba:	4b33      	ldr	r3, [pc, #204]	@ (8001188 <HAL_TIM_IC_CaptureCallback+0x17c>)
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	4b30      	ldr	r3, [pc, #192]	@ (8001180 <HAL_TIM_IC_CaptureCallback+0x174>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	429a      	cmp	r2, r3
 80010c4:	d906      	bls.n	80010d4 <HAL_TIM_IC_CaptureCallback+0xc8>
          period = IC_Value3 - IC_Value1;
 80010c6:	4b30      	ldr	r3, [pc, #192]	@ (8001188 <HAL_TIM_IC_CaptureCallback+0x17c>)
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	4b2d      	ldr	r3, [pc, #180]	@ (8001180 <HAL_TIM_IC_CaptureCallback+0x174>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	1ad3      	subs	r3, r2, r3
 80010d0:	617b      	str	r3, [r7, #20]
 80010d2:	e008      	b.n	80010e6 <HAL_TIM_IC_CaptureCallback+0xda>
          period = (0xFFFF - IC_Value1) + IC_Value3;
 80010d4:	4b2c      	ldr	r3, [pc, #176]	@ (8001188 <HAL_TIM_IC_CaptureCallback+0x17c>)
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	4b29      	ldr	r3, [pc, #164]	@ (8001180 <HAL_TIM_IC_CaptureCallback+0x174>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	1ad2      	subs	r2, r2, r3
 80010de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010e2:	4413      	add	r3, r2
 80010e4:	617b      	str	r3, [r7, #20]
        if (IC_Value2 > IC_Value1)
 80010e6:	4b27      	ldr	r3, [pc, #156]	@ (8001184 <HAL_TIM_IC_CaptureCallback+0x178>)
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	4b25      	ldr	r3, [pc, #148]	@ (8001180 <HAL_TIM_IC_CaptureCallback+0x174>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	429a      	cmp	r2, r3
 80010f0:	d906      	bls.n	8001100 <HAL_TIM_IC_CaptureCallback+0xf4>
          high_time = IC_Value2 - IC_Value1;
 80010f2:	4b24      	ldr	r3, [pc, #144]	@ (8001184 <HAL_TIM_IC_CaptureCallback+0x178>)
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	4b22      	ldr	r3, [pc, #136]	@ (8001180 <HAL_TIM_IC_CaptureCallback+0x174>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	1ad3      	subs	r3, r2, r3
 80010fc:	613b      	str	r3, [r7, #16]
 80010fe:	e008      	b.n	8001112 <HAL_TIM_IC_CaptureCallback+0x106>
          high_time = (0xFFFF - IC_Value1) + IC_Value2;
 8001100:	4b20      	ldr	r3, [pc, #128]	@ (8001184 <HAL_TIM_IC_CaptureCallback+0x178>)
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	4b1e      	ldr	r3, [pc, #120]	@ (8001180 <HAL_TIM_IC_CaptureCallback+0x174>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	1ad2      	subs	r2, r2, r3
 800110a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800110e:	4413      	add	r3, r2
 8001110:	613b      	str	r3, [r7, #16]
        if (period > 0)
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d025      	beq.n	8001164 <HAL_TIM_IC_CaptureCallback+0x158>
          Frequency = 1000000 / period;
 8001118:	4a1c      	ldr	r2, [pc, #112]	@ (800118c <HAL_TIM_IC_CaptureCallback+0x180>)
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001120:	4a1b      	ldr	r2, [pc, #108]	@ (8001190 <HAL_TIM_IC_CaptureCallback+0x184>)
 8001122:	6013      	str	r3, [r2, #0]
          float duty_cycle_percent = (float)high_time / period * 100;
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	ee07 3a90 	vmov	s15, r3
 800112a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	ee07 3a90 	vmov	s15, r3
 8001134:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001138:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800113c:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8001194 <HAL_TIM_IC_CaptureCallback+0x188>
 8001140:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001144:	edc7 7a03 	vstr	s15, [r7, #12]
          printf("Capture #%lu: Freq=%lu Hz, Duty=%.2f%%\r\n",
 8001148:	4b0b      	ldr	r3, [pc, #44]	@ (8001178 <HAL_TIM_IC_CaptureCallback+0x16c>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a10      	ldr	r2, [pc, #64]	@ (8001190 <HAL_TIM_IC_CaptureCallback+0x184>)
 800114e:	6812      	ldr	r2, [r2, #0]
 8001150:	edd7 7a03 	vldr	s15, [r7, #12]
 8001154:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001158:	ed8d 7b00 	vstr	d7, [sp]
 800115c:	4619      	mov	r1, r3
 800115e:	480e      	ldr	r0, [pc, #56]	@ (8001198 <HAL_TIM_IC_CaptureCallback+0x18c>)
 8001160:	f008 fc5e 	bl	8009a20 <iprintf>
        capture_state = 0; // 重置状态
 8001164:	4b05      	ldr	r3, [pc, #20]	@ (800117c <HAL_TIM_IC_CaptureCallback+0x170>)
 8001166:	2200      	movs	r2, #0
 8001168:	701a      	strb	r2, [r3, #0]
        break;
 800116a:	bf00      	nop
}
 800116c:	bf00      	nop
 800116e:	3718      	adds	r7, #24
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40010000 	.word	0x40010000
 8001178:	2400020c 	.word	0x2400020c
 800117c:	24000208 	.word	0x24000208
 8001180:	240001f8 	.word	0x240001f8
 8001184:	240001fc 	.word	0x240001fc
 8001188:	24000200 	.word	0x24000200
 800118c:	000f4240 	.word	0x000f4240
 8001190:	24000204 	.word	0x24000204
 8001194:	42c80000 	.word	0x42c80000
 8001198:	0800b98c 	.word	0x0800b98c

0800119c <Start_PWM_Input_Capture>:

// 启动PWM输入捕获
void Start_PWM_Input_Capture(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  // 先停止可能正在运行的捕获
  HAL_TIM_IC_Stop_IT(&htim1, TIM_CHANNEL_1);
 80011a0:	2100      	movs	r1, #0
 80011a2:	4817      	ldr	r0, [pc, #92]	@ (8001200 <Start_PWM_Input_Capture+0x64>)
 80011a4:	f004 fe76 	bl	8005e94 <HAL_TIM_IC_Stop_IT>

  // 重置状态
  capture_state = 0;
 80011a8:	4b16      	ldr	r3, [pc, #88]	@ (8001204 <Start_PWM_Input_Capture+0x68>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	701a      	strb	r2, [r3, #0]
  capture_count = 0;
 80011ae:	4b16      	ldr	r3, [pc, #88]	@ (8001208 <Start_PWM_Input_Capture+0x6c>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
  IC_Value1 = 0;
 80011b4:	4b15      	ldr	r3, [pc, #84]	@ (800120c <Start_PWM_Input_Capture+0x70>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
  IC_Value2 = 0;
 80011ba:	4b15      	ldr	r3, [pc, #84]	@ (8001210 <Start_PWM_Input_Capture+0x74>)
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
  IC_Value3 = 0;
 80011c0:	4b14      	ldr	r3, [pc, #80]	@ (8001214 <Start_PWM_Input_Capture+0x78>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]

  // 设置为上升沿捕获
  __HAL_TIM_SET_CAPTUREPOLARITY(&htim1, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 80011c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001200 <Start_PWM_Input_Capture+0x64>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	6a1a      	ldr	r2, [r3, #32]
 80011cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001200 <Start_PWM_Input_Capture+0x64>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f022 020a 	bic.w	r2, r2, #10
 80011d4:	621a      	str	r2, [r3, #32]
 80011d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001200 <Start_PWM_Input_Capture+0x64>)
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	4b09      	ldr	r3, [pc, #36]	@ (8001200 <Start_PWM_Input_Capture+0x64>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	6a12      	ldr	r2, [r2, #32]
 80011e0:	621a      	str	r2, [r3, #32]

  // 清除可能挂起的中断标志
  __HAL_TIM_CLEAR_FLAG(&htim1, TIM_FLAG_CC1);
 80011e2:	4b07      	ldr	r3, [pc, #28]	@ (8001200 <Start_PWM_Input_Capture+0x64>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f06f 0202 	mvn.w	r2, #2
 80011ea:	611a      	str	r2, [r3, #16]

  // 启动输入捕获中断
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 80011ec:	2100      	movs	r1, #0
 80011ee:	4804      	ldr	r0, [pc, #16]	@ (8001200 <Start_PWM_Input_Capture+0x64>)
 80011f0:	f004 fd00 	bl	8005bf4 <HAL_TIM_IC_Start_IT>

  printf("PWM Input Capture Started\r\n");
 80011f4:	4808      	ldr	r0, [pc, #32]	@ (8001218 <Start_PWM_Input_Capture+0x7c>)
 80011f6:	f008 fc7b 	bl	8009af0 <puts>
}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	24000210 	.word	0x24000210
 8001204:	24000208 	.word	0x24000208
 8001208:	2400020c 	.word	0x2400020c
 800120c:	240001f8 	.word	0x240001f8
 8001210:	240001fc 	.word	0x240001fc
 8001214:	24000200 	.word	0x24000200
 8001218:	0800b9b8 	.word	0x0800b9b8

0800121c <Stop_PWM_Output>:
  printf("PWM Output Started: 10kHz, 50%% duty\r\n");
}

// 停止PWM输出
void Stop_PWM_Output(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Stop(&htim12, TIM_CHANNEL_1);
 8001220:	2100      	movs	r1, #0
 8001222:	4802      	ldr	r0, [pc, #8]	@ (800122c <Stop_PWM_Output+0x10>)
 8001224:	f004 fbee 	bl	8005a04 <HAL_TIM_PWM_Stop>
}
 8001228:	bf00      	nop
 800122a:	bd80      	pop	{r7, pc}
 800122c:	2400025c 	.word	0x2400025c

08001230 <Set_PWM_Output>:

// 设置PWM输出频率和占空比
void Set_PWM_Output(uint32_t frequency, float duty_cycle)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	ed87 0a00 	vstr	s0, [r7]
  // 停止PWM输出
  Stop_PWM_Output();
 800123c:	f7ff ffee 	bl	800121c <Stop_PWM_Output>

  // 计算新的ARR和CCR值
  // 定时器时钟为1MHz (480MHz/(479+1))
  uint32_t arr_value = 1000000 / frequency - 1;
 8001240:	4a1a      	ldr	r2, [pc, #104]	@ (80012ac <Set_PWM_Output+0x7c>)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	fbb2 f3f3 	udiv	r3, r2, r3
 8001248:	3b01      	subs	r3, #1
 800124a:	60fb      	str	r3, [r7, #12]
  uint32_t ccr_value = (arr_value + 1) * duty_cycle / 100;
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	3301      	adds	r3, #1
 8001250:	ee07 3a90 	vmov	s15, r3
 8001254:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001258:	edd7 7a00 	vldr	s15, [r7]
 800125c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001260:	eddf 6a13 	vldr	s13, [pc, #76]	@ 80012b0 <Set_PWM_Output+0x80>
 8001264:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001268:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800126c:	ee17 3a90 	vmov	r3, s15
 8001270:	60bb      	str	r3, [r7, #8]

  // 设置新的ARR和CCR值
  __HAL_TIM_SET_AUTORELOAD(&htim12, arr_value);
 8001272:	4b10      	ldr	r3, [pc, #64]	@ (80012b4 <Set_PWM_Output+0x84>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	68fa      	ldr	r2, [r7, #12]
 8001278:	62da      	str	r2, [r3, #44]	@ 0x2c
 800127a:	4a0e      	ldr	r2, [pc, #56]	@ (80012b4 <Set_PWM_Output+0x84>)
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, ccr_value);
 8001280:	4b0c      	ldr	r3, [pc, #48]	@ (80012b4 <Set_PWM_Output+0x84>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	68ba      	ldr	r2, [r7, #8]
 8001286:	635a      	str	r2, [r3, #52]	@ 0x34

  // 重新启动PWM输出
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8001288:	2100      	movs	r1, #0
 800128a:	480a      	ldr	r0, [pc, #40]	@ (80012b4 <Set_PWM_Output+0x84>)
 800128c:	f004 faac 	bl	80057e8 <HAL_TIM_PWM_Start>

  printf("PWM Output Set: %lu Hz, %.1f%% duty\r\n", frequency, duty_cycle);
 8001290:	edd7 7a00 	vldr	s15, [r7]
 8001294:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001298:	ec53 2b17 	vmov	r2, r3, d7
 800129c:	6879      	ldr	r1, [r7, #4]
 800129e:	4806      	ldr	r0, [pc, #24]	@ (80012b8 <Set_PWM_Output+0x88>)
 80012a0:	f008 fbbe 	bl	8009a20 <iprintf>
}
 80012a4:	bf00      	nop
 80012a6:	3710      	adds	r7, #16
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	000f4240 	.word	0x000f4240
 80012b0:	42c80000 	.word	0x42c80000
 80012b4:	2400025c 	.word	0x2400025c
 80012b8:	0800b9fc 	.word	0x0800b9fc

080012bc <TIM1_UP_IRQHandler>:

// 添加定时器更新中断处理
void TIM1_UP_IRQHandler(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim1);
 80012c0:	4814      	ldr	r0, [pc, #80]	@ (8001314 <TIM1_UP_IRQHandler+0x58>)
 80012c2:	f004 fea5 	bl	8006010 <HAL_TIM_IRQHandler>

  // 检查是否发生溢出
  if (__HAL_TIM_GET_FLAG(&htim1, TIM_FLAG_UPDATE) != RESET)
 80012c6:	4b13      	ldr	r3, [pc, #76]	@ (8001314 <TIM1_UP_IRQHandler+0x58>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	691b      	ldr	r3, [r3, #16]
 80012cc:	f003 0301 	and.w	r3, r3, #1
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d11d      	bne.n	8001310 <TIM1_UP_IRQHandler+0x54>
  {
    __HAL_TIM_CLEAR_FLAG(&htim1, TIM_FLAG_UPDATE);
 80012d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001314 <TIM1_UP_IRQHandler+0x58>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f06f 0201 	mvn.w	r2, #1
 80012dc:	611a      	str	r2, [r3, #16]

    // 如果发生溢出，重置捕获状态
    if (capture_state != 0)
 80012de:	4b0e      	ldr	r3, [pc, #56]	@ (8001318 <TIM1_UP_IRQHandler+0x5c>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d013      	beq.n	8001310 <TIM1_UP_IRQHandler+0x54>
    {
      capture_state = 0;
 80012e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001318 <TIM1_UP_IRQHandler+0x5c>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	701a      	strb	r2, [r3, #0]
      __HAL_TIM_SET_CAPTUREPOLARITY(&htim1, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 80012ee:	4b09      	ldr	r3, [pc, #36]	@ (8001314 <TIM1_UP_IRQHandler+0x58>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	6a1a      	ldr	r2, [r3, #32]
 80012f4:	4b07      	ldr	r3, [pc, #28]	@ (8001314 <TIM1_UP_IRQHandler+0x58>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f022 020a 	bic.w	r2, r2, #10
 80012fc:	621a      	str	r2, [r3, #32]
 80012fe:	4b05      	ldr	r3, [pc, #20]	@ (8001314 <TIM1_UP_IRQHandler+0x58>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	4b04      	ldr	r3, [pc, #16]	@ (8001314 <TIM1_UP_IRQHandler+0x58>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	6a12      	ldr	r2, [r2, #32]
 8001308:	621a      	str	r2, [r3, #32]
      printf("Timer overflow detected, resetting capture state\r\n");
 800130a:	4804      	ldr	r0, [pc, #16]	@ (800131c <TIM1_UP_IRQHandler+0x60>)
 800130c:	f008 fbf0 	bl	8009af0 <puts>
    }
  }
}
 8001310:	bf00      	nop
 8001312:	bd80      	pop	{r7, pc}
 8001314:	24000210 	.word	0x24000210
 8001318:	24000208 	.word	0x24000208
 800131c:	0800ba24 	.word	0x0800ba24

08001320 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08a      	sub	sp, #40	@ 0x28
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001328:	f107 0314 	add.w	r3, r7, #20
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]
	if(tim_baseHandle->Instance==TIM1)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a2d      	ldr	r2, [pc, #180]	@ (80013f4 <HAL_TIM_Base_MspInit+0xd4>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d13f      	bne.n	80013c2 <HAL_TIM_Base_MspInit+0xa2>
	{
		__HAL_RCC_TIM1_CLK_ENABLE();
 8001342:	4b2d      	ldr	r3, [pc, #180]	@ (80013f8 <HAL_TIM_Base_MspInit+0xd8>)
 8001344:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001348:	4a2b      	ldr	r2, [pc, #172]	@ (80013f8 <HAL_TIM_Base_MspInit+0xd8>)
 800134a:	f043 0301 	orr.w	r3, r3, #1
 800134e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001352:	4b29      	ldr	r3, [pc, #164]	@ (80013f8 <HAL_TIM_Base_MspInit+0xd8>)
 8001354:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001358:	f003 0301 	and.w	r3, r3, #1
 800135c:	613b      	str	r3, [r7, #16]
 800135e:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOE_CLK_ENABLE();
 8001360:	4b25      	ldr	r3, [pc, #148]	@ (80013f8 <HAL_TIM_Base_MspInit+0xd8>)
 8001362:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001366:	4a24      	ldr	r2, [pc, #144]	@ (80013f8 <HAL_TIM_Base_MspInit+0xd8>)
 8001368:	f043 0310 	orr.w	r3, r3, #16
 800136c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001370:	4b21      	ldr	r3, [pc, #132]	@ (80013f8 <HAL_TIM_Base_MspInit+0xd8>)
 8001372:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001376:	f003 0310 	and.w	r3, r3, #16
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]
		GPIO_InitStruct.Pin = PWM_CH1IN_Pin;
 800137e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001382:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001384:	2302      	movs	r3, #2
 8001386:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800138c:	2302      	movs	r3, #2
 800138e:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001390:	2301      	movs	r3, #1
 8001392:	627b      	str	r3, [r7, #36]	@ 0x24
		HAL_GPIO_Init(PWM_CH1IN_GPIO_Port, &GPIO_InitStruct);
 8001394:	f107 0314 	add.w	r3, r7, #20
 8001398:	4619      	mov	r1, r3
 800139a:	4818      	ldr	r0, [pc, #96]	@ (80013fc <HAL_TIM_Base_MspInit+0xdc>)
 800139c:	f001 f918 	bl	80025d0 <HAL_GPIO_Init>
		HAL_NVIC_SetPriority(TIM1_UP_IRQn, 1, 3);
 80013a0:	2203      	movs	r2, #3
 80013a2:	2101      	movs	r1, #1
 80013a4:	2019      	movs	r0, #25
 80013a6:	f000 fb02 	bl	80019ae <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80013aa:	2019      	movs	r0, #25
 80013ac:	f000 fb19 	bl	80019e2 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(TIM1_CC_IRQn, 1, 3);
 80013b0:	2203      	movs	r2, #3
 80013b2:	2101      	movs	r1, #1
 80013b4:	201b      	movs	r0, #27
 80013b6:	f000 fafa 	bl	80019ae <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80013ba:	201b      	movs	r0, #27
 80013bc:	f000 fb11 	bl	80019e2 <HAL_NVIC_EnableIRQ>
	}
	else if(tim_baseHandle->Instance==TIM12)
	{
		__HAL_RCC_TIM12_CLK_ENABLE();
	}
}
 80013c0:	e013      	b.n	80013ea <HAL_TIM_Base_MspInit+0xca>
	else if(tim_baseHandle->Instance==TIM12)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a0e      	ldr	r2, [pc, #56]	@ (8001400 <HAL_TIM_Base_MspInit+0xe0>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d10e      	bne.n	80013ea <HAL_TIM_Base_MspInit+0xca>
		__HAL_RCC_TIM12_CLK_ENABLE();
 80013cc:	4b0a      	ldr	r3, [pc, #40]	@ (80013f8 <HAL_TIM_Base_MspInit+0xd8>)
 80013ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013d2:	4a09      	ldr	r2, [pc, #36]	@ (80013f8 <HAL_TIM_Base_MspInit+0xd8>)
 80013d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013d8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80013dc:	4b06      	ldr	r3, [pc, #24]	@ (80013f8 <HAL_TIM_Base_MspInit+0xd8>)
 80013de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013e6:	60bb      	str	r3, [r7, #8]
 80013e8:	68bb      	ldr	r3, [r7, #8]
}
 80013ea:	bf00      	nop
 80013ec:	3728      	adds	r7, #40	@ 0x28
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40010000 	.word	0x40010000
 80013f8:	58024400 	.word	0x58024400
 80013fc:	58021000 	.word	0x58021000
 8001400:	40001800 	.word	0x40001800

08001404 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b088      	sub	sp, #32
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140c:	f107 030c 	add.w	r3, r7, #12
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	60da      	str	r2, [r3, #12]
 800141a:	611a      	str	r2, [r3, #16]
	if(timHandle->Instance==TIM12)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a13      	ldr	r2, [pc, #76]	@ (8001470 <HAL_TIM_MspPostInit+0x6c>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d11f      	bne.n	8001466 <HAL_TIM_MspPostInit+0x62>
	{
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8001426:	4b13      	ldr	r3, [pc, #76]	@ (8001474 <HAL_TIM_MspPostInit+0x70>)
 8001428:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800142c:	4a11      	ldr	r2, [pc, #68]	@ (8001474 <HAL_TIM_MspPostInit+0x70>)
 800142e:	f043 0302 	orr.w	r3, r3, #2
 8001432:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001436:	4b0f      	ldr	r3, [pc, #60]	@ (8001474 <HAL_TIM_MspPostInit+0x70>)
 8001438:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800143c:	f003 0302 	and.w	r3, r3, #2
 8001440:	60bb      	str	r3, [r7, #8]
 8001442:	68bb      	ldr	r3, [r7, #8]
		GPIO_InitStruct.Pin = PWM_CH1_Pin;
 8001444:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001448:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144a:	2302      	movs	r3, #2
 800144c:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001452:	2302      	movs	r3, #2
 8001454:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8001456:	2302      	movs	r3, #2
 8001458:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(PWM_CH1_GPIO_Port, &GPIO_InitStruct);
 800145a:	f107 030c 	add.w	r3, r7, #12
 800145e:	4619      	mov	r1, r3
 8001460:	4805      	ldr	r0, [pc, #20]	@ (8001478 <HAL_TIM_MspPostInit+0x74>)
 8001462:	f001 f8b5 	bl	80025d0 <HAL_GPIO_Init>
	}
}
 8001466:	bf00      	nop
 8001468:	3720      	adds	r7, #32
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40001800 	.word	0x40001800
 8001474:	58024400 	.word	0x58024400
 8001478:	58020400 	.word	0x58020400

0800147c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001480:	4b22      	ldr	r3, [pc, #136]	@ (800150c <MX_USART1_UART_Init+0x90>)
 8001482:	4a23      	ldr	r2, [pc, #140]	@ (8001510 <MX_USART1_UART_Init+0x94>)
 8001484:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001486:	4b21      	ldr	r3, [pc, #132]	@ (800150c <MX_USART1_UART_Init+0x90>)
 8001488:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800148c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800148e:	4b1f      	ldr	r3, [pc, #124]	@ (800150c <MX_USART1_UART_Init+0x90>)
 8001490:	2200      	movs	r2, #0
 8001492:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001494:	4b1d      	ldr	r3, [pc, #116]	@ (800150c <MX_USART1_UART_Init+0x90>)
 8001496:	2200      	movs	r2, #0
 8001498:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800149a:	4b1c      	ldr	r3, [pc, #112]	@ (800150c <MX_USART1_UART_Init+0x90>)
 800149c:	2200      	movs	r2, #0
 800149e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014a0:	4b1a      	ldr	r3, [pc, #104]	@ (800150c <MX_USART1_UART_Init+0x90>)
 80014a2:	220c      	movs	r2, #12
 80014a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014a6:	4b19      	ldr	r3, [pc, #100]	@ (800150c <MX_USART1_UART_Init+0x90>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014ac:	4b17      	ldr	r3, [pc, #92]	@ (800150c <MX_USART1_UART_Init+0x90>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014b2:	4b16      	ldr	r3, [pc, #88]	@ (800150c <MX_USART1_UART_Init+0x90>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014b8:	4b14      	ldr	r3, [pc, #80]	@ (800150c <MX_USART1_UART_Init+0x90>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014be:	4b13      	ldr	r3, [pc, #76]	@ (800150c <MX_USART1_UART_Init+0x90>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014c4:	4811      	ldr	r0, [pc, #68]	@ (800150c <MX_USART1_UART_Init+0x90>)
 80014c6:	f005 ffcf 	bl	8007468 <HAL_UART_Init>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80014d0:	f7ff fabc 	bl	8000a4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014d4:	2100      	movs	r1, #0
 80014d6:	480d      	ldr	r0, [pc, #52]	@ (800150c <MX_USART1_UART_Init+0x90>)
 80014d8:	f007 fcb6 	bl	8008e48 <HAL_UARTEx_SetTxFifoThreshold>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80014e2:	f7ff fab3 	bl	8000a4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014e6:	2100      	movs	r1, #0
 80014e8:	4808      	ldr	r0, [pc, #32]	@ (800150c <MX_USART1_UART_Init+0x90>)
 80014ea:	f007 fceb 	bl	8008ec4 <HAL_UARTEx_SetRxFifoThreshold>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80014f4:	f7ff faaa 	bl	8000a4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80014f8:	4804      	ldr	r0, [pc, #16]	@ (800150c <MX_USART1_UART_Init+0x90>)
 80014fa:	f007 fc6c 	bl	8008dd6 <HAL_UARTEx_DisableFifoMode>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001504:	f7ff faa2 	bl	8000a4c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001508:	bf00      	nop
 800150a:	bd80      	pop	{r7, pc}
 800150c:	240002a8 	.word	0x240002a8
 8001510:	40011000 	.word	0x40011000

08001514 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b0ba      	sub	sp, #232	@ 0xe8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	60da      	str	r2, [r3, #12]
 800152a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800152c:	f107 0310 	add.w	r3, r7, #16
 8001530:	22c0      	movs	r2, #192	@ 0xc0
 8001532:	2100      	movs	r1, #0
 8001534:	4618      	mov	r0, r3
 8001536:	f008 fbbb 	bl	8009cb0 <memset>
  if(uartHandle->Instance==USART1)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a2b      	ldr	r2, [pc, #172]	@ (80015ec <HAL_UART_MspInit+0xd8>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d14e      	bne.n	80015e2 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001544:	f04f 0201 	mov.w	r2, #1
 8001548:	f04f 0300 	mov.w	r3, #0
 800154c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001550:	2300      	movs	r3, #0
 8001552:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001556:	f107 0310 	add.w	r3, r7, #16
 800155a:	4618      	mov	r0, r3
 800155c:	f002 fa60 	bl	8003a20 <HAL_RCCEx_PeriphCLKConfig>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001566:	f7ff fa71 	bl	8000a4c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800156a:	4b21      	ldr	r3, [pc, #132]	@ (80015f0 <HAL_UART_MspInit+0xdc>)
 800156c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001570:	4a1f      	ldr	r2, [pc, #124]	@ (80015f0 <HAL_UART_MspInit+0xdc>)
 8001572:	f043 0310 	orr.w	r3, r3, #16
 8001576:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800157a:	4b1d      	ldr	r3, [pc, #116]	@ (80015f0 <HAL_UART_MspInit+0xdc>)
 800157c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001580:	f003 0310 	and.w	r3, r3, #16
 8001584:	60fb      	str	r3, [r7, #12]
 8001586:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001588:	4b19      	ldr	r3, [pc, #100]	@ (80015f0 <HAL_UART_MspInit+0xdc>)
 800158a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800158e:	4a18      	ldr	r2, [pc, #96]	@ (80015f0 <HAL_UART_MspInit+0xdc>)
 8001590:	f043 0301 	orr.w	r3, r3, #1
 8001594:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001598:	4b15      	ldr	r3, [pc, #84]	@ (80015f0 <HAL_UART_MspInit+0xdc>)
 800159a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	60bb      	str	r3, [r7, #8]
 80015a4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80015a6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80015aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ae:	2302      	movs	r3, #2
 80015b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015b4:	2301      	movs	r3, #1
 80015b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015ba:	2302      	movs	r3, #2
 80015bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015c0:	2307      	movs	r3, #7
 80015c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80015ca:	4619      	mov	r1, r3
 80015cc:	4809      	ldr	r0, [pc, #36]	@ (80015f4 <HAL_UART_MspInit+0xe0>)
 80015ce:	f000 ffff 	bl	80025d0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80015d2:	2200      	movs	r2, #0
 80015d4:	2100      	movs	r1, #0
 80015d6:	2025      	movs	r0, #37	@ 0x25
 80015d8:	f000 f9e9 	bl	80019ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80015dc:	2025      	movs	r0, #37	@ 0x25
 80015de:	f000 fa00 	bl	80019e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80015e2:	bf00      	nop
 80015e4:	37e8      	adds	r7, #232	@ 0xe8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40011000 	.word	0x40011000
 80015f0:	58024400 	.word	0x58024400
 80015f4:	58020000 	.word	0x58020000

080015f8 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

/* printf重定向 */
PUTCHAR_PROTOTYPE
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001600:	1d39      	adds	r1, r7, #4
 8001602:	f04f 33ff 	mov.w	r3, #4294967295
 8001606:	2201      	movs	r2, #1
 8001608:	4803      	ldr	r0, [pc, #12]	@ (8001618 <__io_putchar+0x20>)
 800160a:	f005 ff7d 	bl	8007508 <HAL_UART_Transmit>
    return ch;
 800160e:	687b      	ldr	r3, [r7, #4]
}
 8001610:	4618      	mov	r0, r3
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	240002a8 	.word	0x240002a8

0800161c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800161c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001658 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001620:	f7ff fbf0 	bl	8000e04 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001624:	f7ff fb4e 	bl	8000cc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001628:	480c      	ldr	r0, [pc, #48]	@ (800165c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800162a:	490d      	ldr	r1, [pc, #52]	@ (8001660 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800162c:	4a0d      	ldr	r2, [pc, #52]	@ (8001664 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800162e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001630:	e002      	b.n	8001638 <LoopCopyDataInit>

08001632 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001632:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001634:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001636:	3304      	adds	r3, #4

08001638 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001638:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800163a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800163c:	d3f9      	bcc.n	8001632 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800163e:	4a0a      	ldr	r2, [pc, #40]	@ (8001668 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001640:	4c0a      	ldr	r4, [pc, #40]	@ (800166c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001642:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001644:	e001      	b.n	800164a <LoopFillZerobss>

08001646 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001646:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001648:	3204      	adds	r2, #4

0800164a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800164a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800164c:	d3fb      	bcc.n	8001646 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800164e:	f008 fb87 	bl	8009d60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001652:	f7ff f905 	bl	8000860 <main>
  bx  lr
 8001656:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001658:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800165c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001660:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 8001664:	0800be14 	.word	0x0800be14
  ldr r2, =_sbss
 8001668:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 800166c:	240004a0 	.word	0x240004a0

08001670 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001670:	e7fe      	b.n	8001670 <ADC3_IRQHandler>
	...

08001674 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800167a:	2003      	movs	r0, #3
 800167c:	f000 f98c 	bl	8001998 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001680:	f001 fff8 	bl	8003674 <HAL_RCC_GetSysClockFreq>
 8001684:	4602      	mov	r2, r0
 8001686:	4b15      	ldr	r3, [pc, #84]	@ (80016dc <HAL_Init+0x68>)
 8001688:	699b      	ldr	r3, [r3, #24]
 800168a:	0a1b      	lsrs	r3, r3, #8
 800168c:	f003 030f 	and.w	r3, r3, #15
 8001690:	4913      	ldr	r1, [pc, #76]	@ (80016e0 <HAL_Init+0x6c>)
 8001692:	5ccb      	ldrb	r3, [r1, r3]
 8001694:	f003 031f 	and.w	r3, r3, #31
 8001698:	fa22 f303 	lsr.w	r3, r2, r3
 800169c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800169e:	4b0f      	ldr	r3, [pc, #60]	@ (80016dc <HAL_Init+0x68>)
 80016a0:	699b      	ldr	r3, [r3, #24]
 80016a2:	f003 030f 	and.w	r3, r3, #15
 80016a6:	4a0e      	ldr	r2, [pc, #56]	@ (80016e0 <HAL_Init+0x6c>)
 80016a8:	5cd3      	ldrb	r3, [r2, r3]
 80016aa:	f003 031f 	and.w	r3, r3, #31
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	fa22 f303 	lsr.w	r3, r2, r3
 80016b4:	4a0b      	ldr	r2, [pc, #44]	@ (80016e4 <HAL_Init+0x70>)
 80016b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80016b8:	4a0b      	ldr	r2, [pc, #44]	@ (80016e8 <HAL_Init+0x74>)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016be:	200f      	movs	r0, #15
 80016c0:	f000 f814 	bl	80016ec <HAL_InitTick>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e002      	b.n	80016d4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80016ce:	f7ff f9c3 	bl	8000a58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016d2:	2300      	movs	r3, #0
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	58024400 	.word	0x58024400
 80016e0:	0800ba58 	.word	0x0800ba58
 80016e4:	24000004 	.word	0x24000004
 80016e8:	24000000 	.word	0x24000000

080016ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80016f4:	4b15      	ldr	r3, [pc, #84]	@ (800174c <HAL_InitTick+0x60>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d101      	bne.n	8001700 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e021      	b.n	8001744 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001700:	4b13      	ldr	r3, [pc, #76]	@ (8001750 <HAL_InitTick+0x64>)
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	4b11      	ldr	r3, [pc, #68]	@ (800174c <HAL_InitTick+0x60>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	4619      	mov	r1, r3
 800170a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800170e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001712:	fbb2 f3f3 	udiv	r3, r2, r3
 8001716:	4618      	mov	r0, r3
 8001718:	f000 f971 	bl	80019fe <HAL_SYSTICK_Config>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e00e      	b.n	8001744 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2b0f      	cmp	r3, #15
 800172a:	d80a      	bhi.n	8001742 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800172c:	2200      	movs	r2, #0
 800172e:	6879      	ldr	r1, [r7, #4]
 8001730:	f04f 30ff 	mov.w	r0, #4294967295
 8001734:	f000 f93b 	bl	80019ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001738:	4a06      	ldr	r2, [pc, #24]	@ (8001754 <HAL_InitTick+0x68>)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800173e:	2300      	movs	r3, #0
 8001740:	e000      	b.n	8001744 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
}
 8001744:	4618      	mov	r0, r3
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	2400000c 	.word	0x2400000c
 8001750:	24000000 	.word	0x24000000
 8001754:	24000008 	.word	0x24000008

08001758 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800175c:	4b06      	ldr	r3, [pc, #24]	@ (8001778 <HAL_IncTick+0x20>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	461a      	mov	r2, r3
 8001762:	4b06      	ldr	r3, [pc, #24]	@ (800177c <HAL_IncTick+0x24>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4413      	add	r3, r2
 8001768:	4a04      	ldr	r2, [pc, #16]	@ (800177c <HAL_IncTick+0x24>)
 800176a:	6013      	str	r3, [r2, #0]
}
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	2400000c 	.word	0x2400000c
 800177c:	24000350 	.word	0x24000350

08001780 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  return uwTick;
 8001784:	4b03      	ldr	r3, [pc, #12]	@ (8001794 <HAL_GetTick+0x14>)
 8001786:	681b      	ldr	r3, [r3, #0]
}
 8001788:	4618      	mov	r0, r3
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	24000350 	.word	0x24000350

08001798 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017a0:	f7ff ffee 	bl	8001780 <HAL_GetTick>
 80017a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017b0:	d005      	beq.n	80017be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017b2:	4b0a      	ldr	r3, [pc, #40]	@ (80017dc <HAL_Delay+0x44>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	461a      	mov	r2, r3
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	4413      	add	r3, r2
 80017bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017be:	bf00      	nop
 80017c0:	f7ff ffde 	bl	8001780 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	68fa      	ldr	r2, [r7, #12]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d8f7      	bhi.n	80017c0 <HAL_Delay+0x28>
  {
  }
}
 80017d0:	bf00      	nop
 80017d2:	bf00      	nop
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	2400000c 	.word	0x2400000c

080017e0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80017e4:	4b03      	ldr	r3, [pc, #12]	@ (80017f4 <HAL_GetREVID+0x14>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	0c1b      	lsrs	r3, r3, #16
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	5c001000 	.word	0x5c001000

080017f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f003 0307 	and.w	r3, r3, #7
 8001806:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001808:	4b0b      	ldr	r3, [pc, #44]	@ (8001838 <__NVIC_SetPriorityGrouping+0x40>)
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800180e:	68ba      	ldr	r2, [r7, #8]
 8001810:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001814:	4013      	ands	r3, r2
 8001816:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001820:	4b06      	ldr	r3, [pc, #24]	@ (800183c <__NVIC_SetPriorityGrouping+0x44>)
 8001822:	4313      	orrs	r3, r2
 8001824:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001826:	4a04      	ldr	r2, [pc, #16]	@ (8001838 <__NVIC_SetPriorityGrouping+0x40>)
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	60d3      	str	r3, [r2, #12]
}
 800182c:	bf00      	nop
 800182e:	3714      	adds	r7, #20
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr
 8001838:	e000ed00 	.word	0xe000ed00
 800183c:	05fa0000 	.word	0x05fa0000

08001840 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001844:	4b04      	ldr	r3, [pc, #16]	@ (8001858 <__NVIC_GetPriorityGrouping+0x18>)
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	0a1b      	lsrs	r3, r3, #8
 800184a:	f003 0307 	and.w	r3, r3, #7
}
 800184e:	4618      	mov	r0, r3
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	e000ed00 	.word	0xe000ed00

0800185c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001866:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800186a:	2b00      	cmp	r3, #0
 800186c:	db0b      	blt.n	8001886 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800186e:	88fb      	ldrh	r3, [r7, #6]
 8001870:	f003 021f 	and.w	r2, r3, #31
 8001874:	4907      	ldr	r1, [pc, #28]	@ (8001894 <__NVIC_EnableIRQ+0x38>)
 8001876:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800187a:	095b      	lsrs	r3, r3, #5
 800187c:	2001      	movs	r0, #1
 800187e:	fa00 f202 	lsl.w	r2, r0, r2
 8001882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	e000e100 	.word	0xe000e100

08001898 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	4603      	mov	r3, r0
 80018a0:	6039      	str	r1, [r7, #0]
 80018a2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	db0a      	blt.n	80018c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	b2da      	uxtb	r2, r3
 80018b0:	490c      	ldr	r1, [pc, #48]	@ (80018e4 <__NVIC_SetPriority+0x4c>)
 80018b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018b6:	0112      	lsls	r2, r2, #4
 80018b8:	b2d2      	uxtb	r2, r2
 80018ba:	440b      	add	r3, r1
 80018bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018c0:	e00a      	b.n	80018d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	b2da      	uxtb	r2, r3
 80018c6:	4908      	ldr	r1, [pc, #32]	@ (80018e8 <__NVIC_SetPriority+0x50>)
 80018c8:	88fb      	ldrh	r3, [r7, #6]
 80018ca:	f003 030f 	and.w	r3, r3, #15
 80018ce:	3b04      	subs	r3, #4
 80018d0:	0112      	lsls	r2, r2, #4
 80018d2:	b2d2      	uxtb	r2, r2
 80018d4:	440b      	add	r3, r1
 80018d6:	761a      	strb	r2, [r3, #24]
}
 80018d8:	bf00      	nop
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	e000e100 	.word	0xe000e100
 80018e8:	e000ed00 	.word	0xe000ed00

080018ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b089      	sub	sp, #36	@ 0x24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f003 0307 	and.w	r3, r3, #7
 80018fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	f1c3 0307 	rsb	r3, r3, #7
 8001906:	2b04      	cmp	r3, #4
 8001908:	bf28      	it	cs
 800190a:	2304      	movcs	r3, #4
 800190c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	3304      	adds	r3, #4
 8001912:	2b06      	cmp	r3, #6
 8001914:	d902      	bls.n	800191c <NVIC_EncodePriority+0x30>
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	3b03      	subs	r3, #3
 800191a:	e000      	b.n	800191e <NVIC_EncodePriority+0x32>
 800191c:	2300      	movs	r3, #0
 800191e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001920:	f04f 32ff 	mov.w	r2, #4294967295
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	43da      	mvns	r2, r3
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	401a      	ands	r2, r3
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001934:	f04f 31ff 	mov.w	r1, #4294967295
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	fa01 f303 	lsl.w	r3, r1, r3
 800193e:	43d9      	mvns	r1, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001944:	4313      	orrs	r3, r2
         );
}
 8001946:	4618      	mov	r0, r3
 8001948:	3724      	adds	r7, #36	@ 0x24
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
	...

08001954 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	3b01      	subs	r3, #1
 8001960:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001964:	d301      	bcc.n	800196a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001966:	2301      	movs	r3, #1
 8001968:	e00f      	b.n	800198a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800196a:	4a0a      	ldr	r2, [pc, #40]	@ (8001994 <SysTick_Config+0x40>)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	3b01      	subs	r3, #1
 8001970:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001972:	210f      	movs	r1, #15
 8001974:	f04f 30ff 	mov.w	r0, #4294967295
 8001978:	f7ff ff8e 	bl	8001898 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800197c:	4b05      	ldr	r3, [pc, #20]	@ (8001994 <SysTick_Config+0x40>)
 800197e:	2200      	movs	r2, #0
 8001980:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001982:	4b04      	ldr	r3, [pc, #16]	@ (8001994 <SysTick_Config+0x40>)
 8001984:	2207      	movs	r2, #7
 8001986:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	e000e010 	.word	0xe000e010

08001998 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f7ff ff29 	bl	80017f8 <__NVIC_SetPriorityGrouping>
}
 80019a6:	bf00      	nop
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b086      	sub	sp, #24
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	4603      	mov	r3, r0
 80019b6:	60b9      	str	r1, [r7, #8]
 80019b8:	607a      	str	r2, [r7, #4]
 80019ba:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019bc:	f7ff ff40 	bl	8001840 <__NVIC_GetPriorityGrouping>
 80019c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	68b9      	ldr	r1, [r7, #8]
 80019c6:	6978      	ldr	r0, [r7, #20]
 80019c8:	f7ff ff90 	bl	80018ec <NVIC_EncodePriority>
 80019cc:	4602      	mov	r2, r0
 80019ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019d2:	4611      	mov	r1, r2
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7ff ff5f 	bl	8001898 <__NVIC_SetPriority>
}
 80019da:	bf00      	nop
 80019dc:	3718      	adds	r7, #24
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b082      	sub	sp, #8
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	4603      	mov	r3, r0
 80019ea:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff ff33 	bl	800185c <__NVIC_EnableIRQ>
}
 80019f6:	bf00      	nop
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b082      	sub	sp, #8
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f7ff ffa4 	bl	8001954 <SysTick_Config>
 8001a0c:	4603      	mov	r3, r0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
	...

08001a18 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001a1c:	f3bf 8f5f 	dmb	sy
}
 8001a20:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001a22:	4b07      	ldr	r3, [pc, #28]	@ (8001a40 <HAL_MPU_Disable+0x28>)
 8001a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a26:	4a06      	ldr	r2, [pc, #24]	@ (8001a40 <HAL_MPU_Disable+0x28>)
 8001a28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a2c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001a2e:	4b05      	ldr	r3, [pc, #20]	@ (8001a44 <HAL_MPU_Disable+0x2c>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	605a      	str	r2, [r3, #4]
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	e000ed00 	.word	0xe000ed00
 8001a44:	e000ed90 	.word	0xe000ed90

08001a48 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001a50:	4a0b      	ldr	r2, [pc, #44]	@ (8001a80 <HAL_MPU_Enable+0x38>)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f043 0301 	orr.w	r3, r3, #1
 8001a58:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001a5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a84 <HAL_MPU_Enable+0x3c>)
 8001a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a5e:	4a09      	ldr	r2, [pc, #36]	@ (8001a84 <HAL_MPU_Enable+0x3c>)
 8001a60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a64:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001a66:	f3bf 8f4f 	dsb	sy
}
 8001a6a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001a6c:	f3bf 8f6f 	isb	sy
}
 8001a70:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001a72:	bf00      	nop
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	e000ed90 	.word	0xe000ed90
 8001a84:	e000ed00 	.word	0xe000ed00

08001a88 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	785a      	ldrb	r2, [r3, #1]
 8001a94:	4b1b      	ldr	r3, [pc, #108]	@ (8001b04 <HAL_MPU_ConfigRegion+0x7c>)
 8001a96:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001a98:	4b1a      	ldr	r3, [pc, #104]	@ (8001b04 <HAL_MPU_ConfigRegion+0x7c>)
 8001a9a:	691b      	ldr	r3, [r3, #16]
 8001a9c:	4a19      	ldr	r2, [pc, #100]	@ (8001b04 <HAL_MPU_ConfigRegion+0x7c>)
 8001a9e:	f023 0301 	bic.w	r3, r3, #1
 8001aa2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001aa4:	4a17      	ldr	r2, [pc, #92]	@ (8001b04 <HAL_MPU_ConfigRegion+0x7c>)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	7b1b      	ldrb	r3, [r3, #12]
 8001ab0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	7adb      	ldrb	r3, [r3, #11]
 8001ab6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ab8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	7a9b      	ldrb	r3, [r3, #10]
 8001abe:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001ac0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	7b5b      	ldrb	r3, [r3, #13]
 8001ac6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001ac8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	7b9b      	ldrb	r3, [r3, #14]
 8001ace:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001ad0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	7bdb      	ldrb	r3, [r3, #15]
 8001ad6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001ad8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	7a5b      	ldrb	r3, [r3, #9]
 8001ade:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001ae0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	7a1b      	ldrb	r3, [r3, #8]
 8001ae6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001ae8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	7812      	ldrb	r2, [r2, #0]
 8001aee:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001af0:	4a04      	ldr	r2, [pc, #16]	@ (8001b04 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001af2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001af4:	6113      	str	r3, [r2, #16]
}
 8001af6:	bf00      	nop
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	e000ed90 	.word	0xe000ed90

08001b08 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001b10:	f7ff fe36 	bl	8001780 <HAL_GetTick>
 8001b14:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d101      	bne.n	8001b20 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e2dc      	b.n	80020da <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d008      	beq.n	8001b3e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2280      	movs	r2, #128	@ 0x80
 8001b30:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e2cd      	b.n	80020da <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a76      	ldr	r2, [pc, #472]	@ (8001d1c <HAL_DMA_Abort+0x214>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d04a      	beq.n	8001bde <HAL_DMA_Abort+0xd6>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a74      	ldr	r2, [pc, #464]	@ (8001d20 <HAL_DMA_Abort+0x218>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d045      	beq.n	8001bde <HAL_DMA_Abort+0xd6>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a73      	ldr	r2, [pc, #460]	@ (8001d24 <HAL_DMA_Abort+0x21c>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d040      	beq.n	8001bde <HAL_DMA_Abort+0xd6>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a71      	ldr	r2, [pc, #452]	@ (8001d28 <HAL_DMA_Abort+0x220>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d03b      	beq.n	8001bde <HAL_DMA_Abort+0xd6>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a70      	ldr	r2, [pc, #448]	@ (8001d2c <HAL_DMA_Abort+0x224>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d036      	beq.n	8001bde <HAL_DMA_Abort+0xd6>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a6e      	ldr	r2, [pc, #440]	@ (8001d30 <HAL_DMA_Abort+0x228>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d031      	beq.n	8001bde <HAL_DMA_Abort+0xd6>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a6d      	ldr	r2, [pc, #436]	@ (8001d34 <HAL_DMA_Abort+0x22c>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d02c      	beq.n	8001bde <HAL_DMA_Abort+0xd6>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a6b      	ldr	r2, [pc, #428]	@ (8001d38 <HAL_DMA_Abort+0x230>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d027      	beq.n	8001bde <HAL_DMA_Abort+0xd6>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a6a      	ldr	r2, [pc, #424]	@ (8001d3c <HAL_DMA_Abort+0x234>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d022      	beq.n	8001bde <HAL_DMA_Abort+0xd6>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a68      	ldr	r2, [pc, #416]	@ (8001d40 <HAL_DMA_Abort+0x238>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d01d      	beq.n	8001bde <HAL_DMA_Abort+0xd6>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a67      	ldr	r2, [pc, #412]	@ (8001d44 <HAL_DMA_Abort+0x23c>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d018      	beq.n	8001bde <HAL_DMA_Abort+0xd6>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a65      	ldr	r2, [pc, #404]	@ (8001d48 <HAL_DMA_Abort+0x240>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d013      	beq.n	8001bde <HAL_DMA_Abort+0xd6>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a64      	ldr	r2, [pc, #400]	@ (8001d4c <HAL_DMA_Abort+0x244>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d00e      	beq.n	8001bde <HAL_DMA_Abort+0xd6>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a62      	ldr	r2, [pc, #392]	@ (8001d50 <HAL_DMA_Abort+0x248>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d009      	beq.n	8001bde <HAL_DMA_Abort+0xd6>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a61      	ldr	r2, [pc, #388]	@ (8001d54 <HAL_DMA_Abort+0x24c>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d004      	beq.n	8001bde <HAL_DMA_Abort+0xd6>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a5f      	ldr	r2, [pc, #380]	@ (8001d58 <HAL_DMA_Abort+0x250>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d101      	bne.n	8001be2 <HAL_DMA_Abort+0xda>
 8001bde:	2301      	movs	r3, #1
 8001be0:	e000      	b.n	8001be4 <HAL_DMA_Abort+0xdc>
 8001be2:	2300      	movs	r3, #0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d013      	beq.n	8001c10 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f022 021e 	bic.w	r2, r2, #30
 8001bf6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	695a      	ldr	r2, [r3, #20]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001c06:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	617b      	str	r3, [r7, #20]
 8001c0e:	e00a      	b.n	8001c26 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f022 020e 	bic.w	r2, r2, #14
 8001c1e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a3c      	ldr	r2, [pc, #240]	@ (8001d1c <HAL_DMA_Abort+0x214>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d072      	beq.n	8001d16 <HAL_DMA_Abort+0x20e>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a3a      	ldr	r2, [pc, #232]	@ (8001d20 <HAL_DMA_Abort+0x218>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d06d      	beq.n	8001d16 <HAL_DMA_Abort+0x20e>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a39      	ldr	r2, [pc, #228]	@ (8001d24 <HAL_DMA_Abort+0x21c>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d068      	beq.n	8001d16 <HAL_DMA_Abort+0x20e>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a37      	ldr	r2, [pc, #220]	@ (8001d28 <HAL_DMA_Abort+0x220>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d063      	beq.n	8001d16 <HAL_DMA_Abort+0x20e>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a36      	ldr	r2, [pc, #216]	@ (8001d2c <HAL_DMA_Abort+0x224>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d05e      	beq.n	8001d16 <HAL_DMA_Abort+0x20e>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a34      	ldr	r2, [pc, #208]	@ (8001d30 <HAL_DMA_Abort+0x228>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d059      	beq.n	8001d16 <HAL_DMA_Abort+0x20e>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a33      	ldr	r2, [pc, #204]	@ (8001d34 <HAL_DMA_Abort+0x22c>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d054      	beq.n	8001d16 <HAL_DMA_Abort+0x20e>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a31      	ldr	r2, [pc, #196]	@ (8001d38 <HAL_DMA_Abort+0x230>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d04f      	beq.n	8001d16 <HAL_DMA_Abort+0x20e>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a30      	ldr	r2, [pc, #192]	@ (8001d3c <HAL_DMA_Abort+0x234>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d04a      	beq.n	8001d16 <HAL_DMA_Abort+0x20e>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a2e      	ldr	r2, [pc, #184]	@ (8001d40 <HAL_DMA_Abort+0x238>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d045      	beq.n	8001d16 <HAL_DMA_Abort+0x20e>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a2d      	ldr	r2, [pc, #180]	@ (8001d44 <HAL_DMA_Abort+0x23c>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d040      	beq.n	8001d16 <HAL_DMA_Abort+0x20e>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a2b      	ldr	r2, [pc, #172]	@ (8001d48 <HAL_DMA_Abort+0x240>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d03b      	beq.n	8001d16 <HAL_DMA_Abort+0x20e>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a2a      	ldr	r2, [pc, #168]	@ (8001d4c <HAL_DMA_Abort+0x244>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d036      	beq.n	8001d16 <HAL_DMA_Abort+0x20e>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a28      	ldr	r2, [pc, #160]	@ (8001d50 <HAL_DMA_Abort+0x248>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d031      	beq.n	8001d16 <HAL_DMA_Abort+0x20e>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a27      	ldr	r2, [pc, #156]	@ (8001d54 <HAL_DMA_Abort+0x24c>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d02c      	beq.n	8001d16 <HAL_DMA_Abort+0x20e>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a25      	ldr	r2, [pc, #148]	@ (8001d58 <HAL_DMA_Abort+0x250>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d027      	beq.n	8001d16 <HAL_DMA_Abort+0x20e>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a24      	ldr	r2, [pc, #144]	@ (8001d5c <HAL_DMA_Abort+0x254>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d022      	beq.n	8001d16 <HAL_DMA_Abort+0x20e>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a22      	ldr	r2, [pc, #136]	@ (8001d60 <HAL_DMA_Abort+0x258>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d01d      	beq.n	8001d16 <HAL_DMA_Abort+0x20e>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a21      	ldr	r2, [pc, #132]	@ (8001d64 <HAL_DMA_Abort+0x25c>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d018      	beq.n	8001d16 <HAL_DMA_Abort+0x20e>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a1f      	ldr	r2, [pc, #124]	@ (8001d68 <HAL_DMA_Abort+0x260>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d013      	beq.n	8001d16 <HAL_DMA_Abort+0x20e>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a1e      	ldr	r2, [pc, #120]	@ (8001d6c <HAL_DMA_Abort+0x264>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d00e      	beq.n	8001d16 <HAL_DMA_Abort+0x20e>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a1c      	ldr	r2, [pc, #112]	@ (8001d70 <HAL_DMA_Abort+0x268>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d009      	beq.n	8001d16 <HAL_DMA_Abort+0x20e>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a1b      	ldr	r2, [pc, #108]	@ (8001d74 <HAL_DMA_Abort+0x26c>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d004      	beq.n	8001d16 <HAL_DMA_Abort+0x20e>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a19      	ldr	r2, [pc, #100]	@ (8001d78 <HAL_DMA_Abort+0x270>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d132      	bne.n	8001d7c <HAL_DMA_Abort+0x274>
 8001d16:	2301      	movs	r3, #1
 8001d18:	e031      	b.n	8001d7e <HAL_DMA_Abort+0x276>
 8001d1a:	bf00      	nop
 8001d1c:	40020010 	.word	0x40020010
 8001d20:	40020028 	.word	0x40020028
 8001d24:	40020040 	.word	0x40020040
 8001d28:	40020058 	.word	0x40020058
 8001d2c:	40020070 	.word	0x40020070
 8001d30:	40020088 	.word	0x40020088
 8001d34:	400200a0 	.word	0x400200a0
 8001d38:	400200b8 	.word	0x400200b8
 8001d3c:	40020410 	.word	0x40020410
 8001d40:	40020428 	.word	0x40020428
 8001d44:	40020440 	.word	0x40020440
 8001d48:	40020458 	.word	0x40020458
 8001d4c:	40020470 	.word	0x40020470
 8001d50:	40020488 	.word	0x40020488
 8001d54:	400204a0 	.word	0x400204a0
 8001d58:	400204b8 	.word	0x400204b8
 8001d5c:	58025408 	.word	0x58025408
 8001d60:	5802541c 	.word	0x5802541c
 8001d64:	58025430 	.word	0x58025430
 8001d68:	58025444 	.word	0x58025444
 8001d6c:	58025458 	.word	0x58025458
 8001d70:	5802546c 	.word	0x5802546c
 8001d74:	58025480 	.word	0x58025480
 8001d78:	58025494 	.word	0x58025494
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d007      	beq.n	8001d92 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d8c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d90:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a6d      	ldr	r2, [pc, #436]	@ (8001f4c <HAL_DMA_Abort+0x444>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d04a      	beq.n	8001e32 <HAL_DMA_Abort+0x32a>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a6b      	ldr	r2, [pc, #428]	@ (8001f50 <HAL_DMA_Abort+0x448>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d045      	beq.n	8001e32 <HAL_DMA_Abort+0x32a>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a6a      	ldr	r2, [pc, #424]	@ (8001f54 <HAL_DMA_Abort+0x44c>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d040      	beq.n	8001e32 <HAL_DMA_Abort+0x32a>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a68      	ldr	r2, [pc, #416]	@ (8001f58 <HAL_DMA_Abort+0x450>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d03b      	beq.n	8001e32 <HAL_DMA_Abort+0x32a>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a67      	ldr	r2, [pc, #412]	@ (8001f5c <HAL_DMA_Abort+0x454>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d036      	beq.n	8001e32 <HAL_DMA_Abort+0x32a>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a65      	ldr	r2, [pc, #404]	@ (8001f60 <HAL_DMA_Abort+0x458>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d031      	beq.n	8001e32 <HAL_DMA_Abort+0x32a>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a64      	ldr	r2, [pc, #400]	@ (8001f64 <HAL_DMA_Abort+0x45c>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d02c      	beq.n	8001e32 <HAL_DMA_Abort+0x32a>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a62      	ldr	r2, [pc, #392]	@ (8001f68 <HAL_DMA_Abort+0x460>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d027      	beq.n	8001e32 <HAL_DMA_Abort+0x32a>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a61      	ldr	r2, [pc, #388]	@ (8001f6c <HAL_DMA_Abort+0x464>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d022      	beq.n	8001e32 <HAL_DMA_Abort+0x32a>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a5f      	ldr	r2, [pc, #380]	@ (8001f70 <HAL_DMA_Abort+0x468>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d01d      	beq.n	8001e32 <HAL_DMA_Abort+0x32a>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a5e      	ldr	r2, [pc, #376]	@ (8001f74 <HAL_DMA_Abort+0x46c>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d018      	beq.n	8001e32 <HAL_DMA_Abort+0x32a>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a5c      	ldr	r2, [pc, #368]	@ (8001f78 <HAL_DMA_Abort+0x470>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d013      	beq.n	8001e32 <HAL_DMA_Abort+0x32a>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a5b      	ldr	r2, [pc, #364]	@ (8001f7c <HAL_DMA_Abort+0x474>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d00e      	beq.n	8001e32 <HAL_DMA_Abort+0x32a>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a59      	ldr	r2, [pc, #356]	@ (8001f80 <HAL_DMA_Abort+0x478>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d009      	beq.n	8001e32 <HAL_DMA_Abort+0x32a>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a58      	ldr	r2, [pc, #352]	@ (8001f84 <HAL_DMA_Abort+0x47c>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d004      	beq.n	8001e32 <HAL_DMA_Abort+0x32a>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a56      	ldr	r2, [pc, #344]	@ (8001f88 <HAL_DMA_Abort+0x480>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d108      	bne.n	8001e44 <HAL_DMA_Abort+0x33c>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f022 0201 	bic.w	r2, r2, #1
 8001e40:	601a      	str	r2, [r3, #0]
 8001e42:	e007      	b.n	8001e54 <HAL_DMA_Abort+0x34c>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f022 0201 	bic.w	r2, r2, #1
 8001e52:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001e54:	e013      	b.n	8001e7e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e56:	f7ff fc93 	bl	8001780 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	2b05      	cmp	r3, #5
 8001e62:	d90c      	bls.n	8001e7e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2220      	movs	r2, #32
 8001e68:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2203      	movs	r2, #3
 8001e6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e12d      	b.n	80020da <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d1e5      	bne.n	8001e56 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a2f      	ldr	r2, [pc, #188]	@ (8001f4c <HAL_DMA_Abort+0x444>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d04a      	beq.n	8001f2a <HAL_DMA_Abort+0x422>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a2d      	ldr	r2, [pc, #180]	@ (8001f50 <HAL_DMA_Abort+0x448>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d045      	beq.n	8001f2a <HAL_DMA_Abort+0x422>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a2c      	ldr	r2, [pc, #176]	@ (8001f54 <HAL_DMA_Abort+0x44c>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d040      	beq.n	8001f2a <HAL_DMA_Abort+0x422>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a2a      	ldr	r2, [pc, #168]	@ (8001f58 <HAL_DMA_Abort+0x450>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d03b      	beq.n	8001f2a <HAL_DMA_Abort+0x422>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a29      	ldr	r2, [pc, #164]	@ (8001f5c <HAL_DMA_Abort+0x454>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d036      	beq.n	8001f2a <HAL_DMA_Abort+0x422>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a27      	ldr	r2, [pc, #156]	@ (8001f60 <HAL_DMA_Abort+0x458>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d031      	beq.n	8001f2a <HAL_DMA_Abort+0x422>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a26      	ldr	r2, [pc, #152]	@ (8001f64 <HAL_DMA_Abort+0x45c>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d02c      	beq.n	8001f2a <HAL_DMA_Abort+0x422>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a24      	ldr	r2, [pc, #144]	@ (8001f68 <HAL_DMA_Abort+0x460>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d027      	beq.n	8001f2a <HAL_DMA_Abort+0x422>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a23      	ldr	r2, [pc, #140]	@ (8001f6c <HAL_DMA_Abort+0x464>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d022      	beq.n	8001f2a <HAL_DMA_Abort+0x422>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a21      	ldr	r2, [pc, #132]	@ (8001f70 <HAL_DMA_Abort+0x468>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d01d      	beq.n	8001f2a <HAL_DMA_Abort+0x422>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a20      	ldr	r2, [pc, #128]	@ (8001f74 <HAL_DMA_Abort+0x46c>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d018      	beq.n	8001f2a <HAL_DMA_Abort+0x422>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a1e      	ldr	r2, [pc, #120]	@ (8001f78 <HAL_DMA_Abort+0x470>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d013      	beq.n	8001f2a <HAL_DMA_Abort+0x422>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a1d      	ldr	r2, [pc, #116]	@ (8001f7c <HAL_DMA_Abort+0x474>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d00e      	beq.n	8001f2a <HAL_DMA_Abort+0x422>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a1b      	ldr	r2, [pc, #108]	@ (8001f80 <HAL_DMA_Abort+0x478>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d009      	beq.n	8001f2a <HAL_DMA_Abort+0x422>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a1a      	ldr	r2, [pc, #104]	@ (8001f84 <HAL_DMA_Abort+0x47c>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d004      	beq.n	8001f2a <HAL_DMA_Abort+0x422>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a18      	ldr	r2, [pc, #96]	@ (8001f88 <HAL_DMA_Abort+0x480>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d101      	bne.n	8001f2e <HAL_DMA_Abort+0x426>
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e000      	b.n	8001f30 <HAL_DMA_Abort+0x428>
 8001f2e:	2300      	movs	r3, #0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d02b      	beq.n	8001f8c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f38:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f3e:	f003 031f 	and.w	r3, r3, #31
 8001f42:	223f      	movs	r2, #63	@ 0x3f
 8001f44:	409a      	lsls	r2, r3
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	609a      	str	r2, [r3, #8]
 8001f4a:	e02a      	b.n	8001fa2 <HAL_DMA_Abort+0x49a>
 8001f4c:	40020010 	.word	0x40020010
 8001f50:	40020028 	.word	0x40020028
 8001f54:	40020040 	.word	0x40020040
 8001f58:	40020058 	.word	0x40020058
 8001f5c:	40020070 	.word	0x40020070
 8001f60:	40020088 	.word	0x40020088
 8001f64:	400200a0 	.word	0x400200a0
 8001f68:	400200b8 	.word	0x400200b8
 8001f6c:	40020410 	.word	0x40020410
 8001f70:	40020428 	.word	0x40020428
 8001f74:	40020440 	.word	0x40020440
 8001f78:	40020458 	.word	0x40020458
 8001f7c:	40020470 	.word	0x40020470
 8001f80:	40020488 	.word	0x40020488
 8001f84:	400204a0 	.word	0x400204a0
 8001f88:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f90:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f96:	f003 031f 	and.w	r3, r3, #31
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	409a      	lsls	r2, r3
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a4f      	ldr	r2, [pc, #316]	@ (80020e4 <HAL_DMA_Abort+0x5dc>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d072      	beq.n	8002092 <HAL_DMA_Abort+0x58a>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a4d      	ldr	r2, [pc, #308]	@ (80020e8 <HAL_DMA_Abort+0x5e0>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d06d      	beq.n	8002092 <HAL_DMA_Abort+0x58a>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a4c      	ldr	r2, [pc, #304]	@ (80020ec <HAL_DMA_Abort+0x5e4>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d068      	beq.n	8002092 <HAL_DMA_Abort+0x58a>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a4a      	ldr	r2, [pc, #296]	@ (80020f0 <HAL_DMA_Abort+0x5e8>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d063      	beq.n	8002092 <HAL_DMA_Abort+0x58a>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a49      	ldr	r2, [pc, #292]	@ (80020f4 <HAL_DMA_Abort+0x5ec>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d05e      	beq.n	8002092 <HAL_DMA_Abort+0x58a>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a47      	ldr	r2, [pc, #284]	@ (80020f8 <HAL_DMA_Abort+0x5f0>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d059      	beq.n	8002092 <HAL_DMA_Abort+0x58a>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a46      	ldr	r2, [pc, #280]	@ (80020fc <HAL_DMA_Abort+0x5f4>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d054      	beq.n	8002092 <HAL_DMA_Abort+0x58a>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a44      	ldr	r2, [pc, #272]	@ (8002100 <HAL_DMA_Abort+0x5f8>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d04f      	beq.n	8002092 <HAL_DMA_Abort+0x58a>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a43      	ldr	r2, [pc, #268]	@ (8002104 <HAL_DMA_Abort+0x5fc>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d04a      	beq.n	8002092 <HAL_DMA_Abort+0x58a>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a41      	ldr	r2, [pc, #260]	@ (8002108 <HAL_DMA_Abort+0x600>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d045      	beq.n	8002092 <HAL_DMA_Abort+0x58a>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a40      	ldr	r2, [pc, #256]	@ (800210c <HAL_DMA_Abort+0x604>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d040      	beq.n	8002092 <HAL_DMA_Abort+0x58a>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a3e      	ldr	r2, [pc, #248]	@ (8002110 <HAL_DMA_Abort+0x608>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d03b      	beq.n	8002092 <HAL_DMA_Abort+0x58a>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a3d      	ldr	r2, [pc, #244]	@ (8002114 <HAL_DMA_Abort+0x60c>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d036      	beq.n	8002092 <HAL_DMA_Abort+0x58a>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a3b      	ldr	r2, [pc, #236]	@ (8002118 <HAL_DMA_Abort+0x610>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d031      	beq.n	8002092 <HAL_DMA_Abort+0x58a>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a3a      	ldr	r2, [pc, #232]	@ (800211c <HAL_DMA_Abort+0x614>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d02c      	beq.n	8002092 <HAL_DMA_Abort+0x58a>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a38      	ldr	r2, [pc, #224]	@ (8002120 <HAL_DMA_Abort+0x618>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d027      	beq.n	8002092 <HAL_DMA_Abort+0x58a>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a37      	ldr	r2, [pc, #220]	@ (8002124 <HAL_DMA_Abort+0x61c>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d022      	beq.n	8002092 <HAL_DMA_Abort+0x58a>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a35      	ldr	r2, [pc, #212]	@ (8002128 <HAL_DMA_Abort+0x620>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d01d      	beq.n	8002092 <HAL_DMA_Abort+0x58a>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a34      	ldr	r2, [pc, #208]	@ (800212c <HAL_DMA_Abort+0x624>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d018      	beq.n	8002092 <HAL_DMA_Abort+0x58a>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a32      	ldr	r2, [pc, #200]	@ (8002130 <HAL_DMA_Abort+0x628>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d013      	beq.n	8002092 <HAL_DMA_Abort+0x58a>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a31      	ldr	r2, [pc, #196]	@ (8002134 <HAL_DMA_Abort+0x62c>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d00e      	beq.n	8002092 <HAL_DMA_Abort+0x58a>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a2f      	ldr	r2, [pc, #188]	@ (8002138 <HAL_DMA_Abort+0x630>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d009      	beq.n	8002092 <HAL_DMA_Abort+0x58a>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a2e      	ldr	r2, [pc, #184]	@ (800213c <HAL_DMA_Abort+0x634>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d004      	beq.n	8002092 <HAL_DMA_Abort+0x58a>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a2c      	ldr	r2, [pc, #176]	@ (8002140 <HAL_DMA_Abort+0x638>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d101      	bne.n	8002096 <HAL_DMA_Abort+0x58e>
 8002092:	2301      	movs	r3, #1
 8002094:	e000      	b.n	8002098 <HAL_DMA_Abort+0x590>
 8002096:	2300      	movs	r3, #0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d015      	beq.n	80020c8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80020a4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d00c      	beq.n	80020c8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80020bc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80020c6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3718      	adds	r7, #24
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40020010 	.word	0x40020010
 80020e8:	40020028 	.word	0x40020028
 80020ec:	40020040 	.word	0x40020040
 80020f0:	40020058 	.word	0x40020058
 80020f4:	40020070 	.word	0x40020070
 80020f8:	40020088 	.word	0x40020088
 80020fc:	400200a0 	.word	0x400200a0
 8002100:	400200b8 	.word	0x400200b8
 8002104:	40020410 	.word	0x40020410
 8002108:	40020428 	.word	0x40020428
 800210c:	40020440 	.word	0x40020440
 8002110:	40020458 	.word	0x40020458
 8002114:	40020470 	.word	0x40020470
 8002118:	40020488 	.word	0x40020488
 800211c:	400204a0 	.word	0x400204a0
 8002120:	400204b8 	.word	0x400204b8
 8002124:	58025408 	.word	0x58025408
 8002128:	5802541c 	.word	0x5802541c
 800212c:	58025430 	.word	0x58025430
 8002130:	58025444 	.word	0x58025444
 8002134:	58025458 	.word	0x58025458
 8002138:	5802546c 	.word	0x5802546c
 800213c:	58025480 	.word	0x58025480
 8002140:	58025494 	.word	0x58025494

08002144 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d101      	bne.n	8002156 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e237      	b.n	80025c6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800215c:	b2db      	uxtb	r3, r3
 800215e:	2b02      	cmp	r3, #2
 8002160:	d004      	beq.n	800216c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2280      	movs	r2, #128	@ 0x80
 8002166:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e22c      	b.n	80025c6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a5c      	ldr	r2, [pc, #368]	@ (80022e4 <HAL_DMA_Abort_IT+0x1a0>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d04a      	beq.n	800220c <HAL_DMA_Abort_IT+0xc8>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a5b      	ldr	r2, [pc, #364]	@ (80022e8 <HAL_DMA_Abort_IT+0x1a4>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d045      	beq.n	800220c <HAL_DMA_Abort_IT+0xc8>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a59      	ldr	r2, [pc, #356]	@ (80022ec <HAL_DMA_Abort_IT+0x1a8>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d040      	beq.n	800220c <HAL_DMA_Abort_IT+0xc8>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a58      	ldr	r2, [pc, #352]	@ (80022f0 <HAL_DMA_Abort_IT+0x1ac>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d03b      	beq.n	800220c <HAL_DMA_Abort_IT+0xc8>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a56      	ldr	r2, [pc, #344]	@ (80022f4 <HAL_DMA_Abort_IT+0x1b0>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d036      	beq.n	800220c <HAL_DMA_Abort_IT+0xc8>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a55      	ldr	r2, [pc, #340]	@ (80022f8 <HAL_DMA_Abort_IT+0x1b4>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d031      	beq.n	800220c <HAL_DMA_Abort_IT+0xc8>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a53      	ldr	r2, [pc, #332]	@ (80022fc <HAL_DMA_Abort_IT+0x1b8>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d02c      	beq.n	800220c <HAL_DMA_Abort_IT+0xc8>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a52      	ldr	r2, [pc, #328]	@ (8002300 <HAL_DMA_Abort_IT+0x1bc>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d027      	beq.n	800220c <HAL_DMA_Abort_IT+0xc8>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a50      	ldr	r2, [pc, #320]	@ (8002304 <HAL_DMA_Abort_IT+0x1c0>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d022      	beq.n	800220c <HAL_DMA_Abort_IT+0xc8>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a4f      	ldr	r2, [pc, #316]	@ (8002308 <HAL_DMA_Abort_IT+0x1c4>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d01d      	beq.n	800220c <HAL_DMA_Abort_IT+0xc8>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a4d      	ldr	r2, [pc, #308]	@ (800230c <HAL_DMA_Abort_IT+0x1c8>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d018      	beq.n	800220c <HAL_DMA_Abort_IT+0xc8>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a4c      	ldr	r2, [pc, #304]	@ (8002310 <HAL_DMA_Abort_IT+0x1cc>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d013      	beq.n	800220c <HAL_DMA_Abort_IT+0xc8>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a4a      	ldr	r2, [pc, #296]	@ (8002314 <HAL_DMA_Abort_IT+0x1d0>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d00e      	beq.n	800220c <HAL_DMA_Abort_IT+0xc8>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a49      	ldr	r2, [pc, #292]	@ (8002318 <HAL_DMA_Abort_IT+0x1d4>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d009      	beq.n	800220c <HAL_DMA_Abort_IT+0xc8>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a47      	ldr	r2, [pc, #284]	@ (800231c <HAL_DMA_Abort_IT+0x1d8>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d004      	beq.n	800220c <HAL_DMA_Abort_IT+0xc8>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a46      	ldr	r2, [pc, #280]	@ (8002320 <HAL_DMA_Abort_IT+0x1dc>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d101      	bne.n	8002210 <HAL_DMA_Abort_IT+0xcc>
 800220c:	2301      	movs	r3, #1
 800220e:	e000      	b.n	8002212 <HAL_DMA_Abort_IT+0xce>
 8002210:	2300      	movs	r3, #0
 8002212:	2b00      	cmp	r3, #0
 8002214:	f000 8086 	beq.w	8002324 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2204      	movs	r2, #4
 800221c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a2f      	ldr	r2, [pc, #188]	@ (80022e4 <HAL_DMA_Abort_IT+0x1a0>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d04a      	beq.n	80022c0 <HAL_DMA_Abort_IT+0x17c>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a2e      	ldr	r2, [pc, #184]	@ (80022e8 <HAL_DMA_Abort_IT+0x1a4>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d045      	beq.n	80022c0 <HAL_DMA_Abort_IT+0x17c>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a2c      	ldr	r2, [pc, #176]	@ (80022ec <HAL_DMA_Abort_IT+0x1a8>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d040      	beq.n	80022c0 <HAL_DMA_Abort_IT+0x17c>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a2b      	ldr	r2, [pc, #172]	@ (80022f0 <HAL_DMA_Abort_IT+0x1ac>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d03b      	beq.n	80022c0 <HAL_DMA_Abort_IT+0x17c>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a29      	ldr	r2, [pc, #164]	@ (80022f4 <HAL_DMA_Abort_IT+0x1b0>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d036      	beq.n	80022c0 <HAL_DMA_Abort_IT+0x17c>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a28      	ldr	r2, [pc, #160]	@ (80022f8 <HAL_DMA_Abort_IT+0x1b4>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d031      	beq.n	80022c0 <HAL_DMA_Abort_IT+0x17c>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a26      	ldr	r2, [pc, #152]	@ (80022fc <HAL_DMA_Abort_IT+0x1b8>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d02c      	beq.n	80022c0 <HAL_DMA_Abort_IT+0x17c>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a25      	ldr	r2, [pc, #148]	@ (8002300 <HAL_DMA_Abort_IT+0x1bc>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d027      	beq.n	80022c0 <HAL_DMA_Abort_IT+0x17c>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a23      	ldr	r2, [pc, #140]	@ (8002304 <HAL_DMA_Abort_IT+0x1c0>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d022      	beq.n	80022c0 <HAL_DMA_Abort_IT+0x17c>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a22      	ldr	r2, [pc, #136]	@ (8002308 <HAL_DMA_Abort_IT+0x1c4>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d01d      	beq.n	80022c0 <HAL_DMA_Abort_IT+0x17c>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a20      	ldr	r2, [pc, #128]	@ (800230c <HAL_DMA_Abort_IT+0x1c8>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d018      	beq.n	80022c0 <HAL_DMA_Abort_IT+0x17c>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a1f      	ldr	r2, [pc, #124]	@ (8002310 <HAL_DMA_Abort_IT+0x1cc>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d013      	beq.n	80022c0 <HAL_DMA_Abort_IT+0x17c>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a1d      	ldr	r2, [pc, #116]	@ (8002314 <HAL_DMA_Abort_IT+0x1d0>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d00e      	beq.n	80022c0 <HAL_DMA_Abort_IT+0x17c>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a1c      	ldr	r2, [pc, #112]	@ (8002318 <HAL_DMA_Abort_IT+0x1d4>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d009      	beq.n	80022c0 <HAL_DMA_Abort_IT+0x17c>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a1a      	ldr	r2, [pc, #104]	@ (800231c <HAL_DMA_Abort_IT+0x1d8>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d004      	beq.n	80022c0 <HAL_DMA_Abort_IT+0x17c>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a19      	ldr	r2, [pc, #100]	@ (8002320 <HAL_DMA_Abort_IT+0x1dc>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d108      	bne.n	80022d2 <HAL_DMA_Abort_IT+0x18e>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f022 0201 	bic.w	r2, r2, #1
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	e178      	b.n	80025c4 <HAL_DMA_Abort_IT+0x480>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f022 0201 	bic.w	r2, r2, #1
 80022e0:	601a      	str	r2, [r3, #0]
 80022e2:	e16f      	b.n	80025c4 <HAL_DMA_Abort_IT+0x480>
 80022e4:	40020010 	.word	0x40020010
 80022e8:	40020028 	.word	0x40020028
 80022ec:	40020040 	.word	0x40020040
 80022f0:	40020058 	.word	0x40020058
 80022f4:	40020070 	.word	0x40020070
 80022f8:	40020088 	.word	0x40020088
 80022fc:	400200a0 	.word	0x400200a0
 8002300:	400200b8 	.word	0x400200b8
 8002304:	40020410 	.word	0x40020410
 8002308:	40020428 	.word	0x40020428
 800230c:	40020440 	.word	0x40020440
 8002310:	40020458 	.word	0x40020458
 8002314:	40020470 	.word	0x40020470
 8002318:	40020488 	.word	0x40020488
 800231c:	400204a0 	.word	0x400204a0
 8002320:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f022 020e 	bic.w	r2, r2, #14
 8002332:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a6c      	ldr	r2, [pc, #432]	@ (80024ec <HAL_DMA_Abort_IT+0x3a8>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d04a      	beq.n	80023d4 <HAL_DMA_Abort_IT+0x290>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a6b      	ldr	r2, [pc, #428]	@ (80024f0 <HAL_DMA_Abort_IT+0x3ac>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d045      	beq.n	80023d4 <HAL_DMA_Abort_IT+0x290>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a69      	ldr	r2, [pc, #420]	@ (80024f4 <HAL_DMA_Abort_IT+0x3b0>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d040      	beq.n	80023d4 <HAL_DMA_Abort_IT+0x290>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a68      	ldr	r2, [pc, #416]	@ (80024f8 <HAL_DMA_Abort_IT+0x3b4>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d03b      	beq.n	80023d4 <HAL_DMA_Abort_IT+0x290>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a66      	ldr	r2, [pc, #408]	@ (80024fc <HAL_DMA_Abort_IT+0x3b8>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d036      	beq.n	80023d4 <HAL_DMA_Abort_IT+0x290>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a65      	ldr	r2, [pc, #404]	@ (8002500 <HAL_DMA_Abort_IT+0x3bc>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d031      	beq.n	80023d4 <HAL_DMA_Abort_IT+0x290>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a63      	ldr	r2, [pc, #396]	@ (8002504 <HAL_DMA_Abort_IT+0x3c0>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d02c      	beq.n	80023d4 <HAL_DMA_Abort_IT+0x290>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a62      	ldr	r2, [pc, #392]	@ (8002508 <HAL_DMA_Abort_IT+0x3c4>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d027      	beq.n	80023d4 <HAL_DMA_Abort_IT+0x290>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a60      	ldr	r2, [pc, #384]	@ (800250c <HAL_DMA_Abort_IT+0x3c8>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d022      	beq.n	80023d4 <HAL_DMA_Abort_IT+0x290>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a5f      	ldr	r2, [pc, #380]	@ (8002510 <HAL_DMA_Abort_IT+0x3cc>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d01d      	beq.n	80023d4 <HAL_DMA_Abort_IT+0x290>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a5d      	ldr	r2, [pc, #372]	@ (8002514 <HAL_DMA_Abort_IT+0x3d0>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d018      	beq.n	80023d4 <HAL_DMA_Abort_IT+0x290>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a5c      	ldr	r2, [pc, #368]	@ (8002518 <HAL_DMA_Abort_IT+0x3d4>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d013      	beq.n	80023d4 <HAL_DMA_Abort_IT+0x290>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a5a      	ldr	r2, [pc, #360]	@ (800251c <HAL_DMA_Abort_IT+0x3d8>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d00e      	beq.n	80023d4 <HAL_DMA_Abort_IT+0x290>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a59      	ldr	r2, [pc, #356]	@ (8002520 <HAL_DMA_Abort_IT+0x3dc>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d009      	beq.n	80023d4 <HAL_DMA_Abort_IT+0x290>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a57      	ldr	r2, [pc, #348]	@ (8002524 <HAL_DMA_Abort_IT+0x3e0>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d004      	beq.n	80023d4 <HAL_DMA_Abort_IT+0x290>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a56      	ldr	r2, [pc, #344]	@ (8002528 <HAL_DMA_Abort_IT+0x3e4>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d108      	bne.n	80023e6 <HAL_DMA_Abort_IT+0x2a2>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f022 0201 	bic.w	r2, r2, #1
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	e007      	b.n	80023f6 <HAL_DMA_Abort_IT+0x2b2>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f022 0201 	bic.w	r2, r2, #1
 80023f4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a3c      	ldr	r2, [pc, #240]	@ (80024ec <HAL_DMA_Abort_IT+0x3a8>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d072      	beq.n	80024e6 <HAL_DMA_Abort_IT+0x3a2>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a3a      	ldr	r2, [pc, #232]	@ (80024f0 <HAL_DMA_Abort_IT+0x3ac>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d06d      	beq.n	80024e6 <HAL_DMA_Abort_IT+0x3a2>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a39      	ldr	r2, [pc, #228]	@ (80024f4 <HAL_DMA_Abort_IT+0x3b0>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d068      	beq.n	80024e6 <HAL_DMA_Abort_IT+0x3a2>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a37      	ldr	r2, [pc, #220]	@ (80024f8 <HAL_DMA_Abort_IT+0x3b4>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d063      	beq.n	80024e6 <HAL_DMA_Abort_IT+0x3a2>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a36      	ldr	r2, [pc, #216]	@ (80024fc <HAL_DMA_Abort_IT+0x3b8>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d05e      	beq.n	80024e6 <HAL_DMA_Abort_IT+0x3a2>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a34      	ldr	r2, [pc, #208]	@ (8002500 <HAL_DMA_Abort_IT+0x3bc>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d059      	beq.n	80024e6 <HAL_DMA_Abort_IT+0x3a2>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a33      	ldr	r2, [pc, #204]	@ (8002504 <HAL_DMA_Abort_IT+0x3c0>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d054      	beq.n	80024e6 <HAL_DMA_Abort_IT+0x3a2>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a31      	ldr	r2, [pc, #196]	@ (8002508 <HAL_DMA_Abort_IT+0x3c4>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d04f      	beq.n	80024e6 <HAL_DMA_Abort_IT+0x3a2>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a30      	ldr	r2, [pc, #192]	@ (800250c <HAL_DMA_Abort_IT+0x3c8>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d04a      	beq.n	80024e6 <HAL_DMA_Abort_IT+0x3a2>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a2e      	ldr	r2, [pc, #184]	@ (8002510 <HAL_DMA_Abort_IT+0x3cc>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d045      	beq.n	80024e6 <HAL_DMA_Abort_IT+0x3a2>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a2d      	ldr	r2, [pc, #180]	@ (8002514 <HAL_DMA_Abort_IT+0x3d0>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d040      	beq.n	80024e6 <HAL_DMA_Abort_IT+0x3a2>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a2b      	ldr	r2, [pc, #172]	@ (8002518 <HAL_DMA_Abort_IT+0x3d4>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d03b      	beq.n	80024e6 <HAL_DMA_Abort_IT+0x3a2>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a2a      	ldr	r2, [pc, #168]	@ (800251c <HAL_DMA_Abort_IT+0x3d8>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d036      	beq.n	80024e6 <HAL_DMA_Abort_IT+0x3a2>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a28      	ldr	r2, [pc, #160]	@ (8002520 <HAL_DMA_Abort_IT+0x3dc>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d031      	beq.n	80024e6 <HAL_DMA_Abort_IT+0x3a2>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a27      	ldr	r2, [pc, #156]	@ (8002524 <HAL_DMA_Abort_IT+0x3e0>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d02c      	beq.n	80024e6 <HAL_DMA_Abort_IT+0x3a2>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a25      	ldr	r2, [pc, #148]	@ (8002528 <HAL_DMA_Abort_IT+0x3e4>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d027      	beq.n	80024e6 <HAL_DMA_Abort_IT+0x3a2>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a24      	ldr	r2, [pc, #144]	@ (800252c <HAL_DMA_Abort_IT+0x3e8>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d022      	beq.n	80024e6 <HAL_DMA_Abort_IT+0x3a2>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a22      	ldr	r2, [pc, #136]	@ (8002530 <HAL_DMA_Abort_IT+0x3ec>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d01d      	beq.n	80024e6 <HAL_DMA_Abort_IT+0x3a2>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a21      	ldr	r2, [pc, #132]	@ (8002534 <HAL_DMA_Abort_IT+0x3f0>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d018      	beq.n	80024e6 <HAL_DMA_Abort_IT+0x3a2>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a1f      	ldr	r2, [pc, #124]	@ (8002538 <HAL_DMA_Abort_IT+0x3f4>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d013      	beq.n	80024e6 <HAL_DMA_Abort_IT+0x3a2>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a1e      	ldr	r2, [pc, #120]	@ (800253c <HAL_DMA_Abort_IT+0x3f8>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d00e      	beq.n	80024e6 <HAL_DMA_Abort_IT+0x3a2>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a1c      	ldr	r2, [pc, #112]	@ (8002540 <HAL_DMA_Abort_IT+0x3fc>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d009      	beq.n	80024e6 <HAL_DMA_Abort_IT+0x3a2>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a1b      	ldr	r2, [pc, #108]	@ (8002544 <HAL_DMA_Abort_IT+0x400>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d004      	beq.n	80024e6 <HAL_DMA_Abort_IT+0x3a2>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a19      	ldr	r2, [pc, #100]	@ (8002548 <HAL_DMA_Abort_IT+0x404>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d132      	bne.n	800254c <HAL_DMA_Abort_IT+0x408>
 80024e6:	2301      	movs	r3, #1
 80024e8:	e031      	b.n	800254e <HAL_DMA_Abort_IT+0x40a>
 80024ea:	bf00      	nop
 80024ec:	40020010 	.word	0x40020010
 80024f0:	40020028 	.word	0x40020028
 80024f4:	40020040 	.word	0x40020040
 80024f8:	40020058 	.word	0x40020058
 80024fc:	40020070 	.word	0x40020070
 8002500:	40020088 	.word	0x40020088
 8002504:	400200a0 	.word	0x400200a0
 8002508:	400200b8 	.word	0x400200b8
 800250c:	40020410 	.word	0x40020410
 8002510:	40020428 	.word	0x40020428
 8002514:	40020440 	.word	0x40020440
 8002518:	40020458 	.word	0x40020458
 800251c:	40020470 	.word	0x40020470
 8002520:	40020488 	.word	0x40020488
 8002524:	400204a0 	.word	0x400204a0
 8002528:	400204b8 	.word	0x400204b8
 800252c:	58025408 	.word	0x58025408
 8002530:	5802541c 	.word	0x5802541c
 8002534:	58025430 	.word	0x58025430
 8002538:	58025444 	.word	0x58025444
 800253c:	58025458 	.word	0x58025458
 8002540:	5802546c 	.word	0x5802546c
 8002544:	58025480 	.word	0x58025480
 8002548:	58025494 	.word	0x58025494
 800254c:	2300      	movs	r3, #0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d028      	beq.n	80025a4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800255c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002560:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002566:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800256c:	f003 031f 	and.w	r3, r3, #31
 8002570:	2201      	movs	r2, #1
 8002572:	409a      	lsls	r2, r3
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002580:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002586:	2b00      	cmp	r3, #0
 8002588:	d00c      	beq.n	80025a4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002594:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002598:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80025a2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d003      	beq.n	80025c4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop

080025d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b089      	sub	sp, #36	@ 0x24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80025da:	2300      	movs	r3, #0
 80025dc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80025de:	4b89      	ldr	r3, [pc, #548]	@ (8002804 <HAL_GPIO_Init+0x234>)
 80025e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80025e2:	e194      	b.n	800290e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	2101      	movs	r1, #1
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	fa01 f303 	lsl.w	r3, r1, r3
 80025f0:	4013      	ands	r3, r2
 80025f2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f000 8186 	beq.w	8002908 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f003 0303 	and.w	r3, r3, #3
 8002604:	2b01      	cmp	r3, #1
 8002606:	d005      	beq.n	8002614 <HAL_GPIO_Init+0x44>
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f003 0303 	and.w	r3, r3, #3
 8002610:	2b02      	cmp	r3, #2
 8002612:	d130      	bne.n	8002676 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	2203      	movs	r2, #3
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	43db      	mvns	r3, r3
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	4013      	ands	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	68da      	ldr	r2, [r3, #12]
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4313      	orrs	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800264a:	2201      	movs	r2, #1
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	fa02 f303 	lsl.w	r3, r2, r3
 8002652:	43db      	mvns	r3, r3
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	4013      	ands	r3, r2
 8002658:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	091b      	lsrs	r3, r3, #4
 8002660:	f003 0201 	and.w	r2, r3, #1
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	fa02 f303 	lsl.w	r3, r2, r3
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	4313      	orrs	r3, r2
 800266e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f003 0303 	and.w	r3, r3, #3
 800267e:	2b03      	cmp	r3, #3
 8002680:	d017      	beq.n	80026b2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	2203      	movs	r2, #3
 800268e:	fa02 f303 	lsl.w	r3, r2, r3
 8002692:	43db      	mvns	r3, r3
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	4013      	ands	r3, r2
 8002698:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	689a      	ldr	r2, [r3, #8]
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f003 0303 	and.w	r3, r3, #3
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d123      	bne.n	8002706 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	08da      	lsrs	r2, r3, #3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	3208      	adds	r2, #8
 80026c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	f003 0307 	and.w	r3, r3, #7
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	220f      	movs	r2, #15
 80026d6:	fa02 f303 	lsl.w	r3, r2, r3
 80026da:	43db      	mvns	r3, r3
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	4013      	ands	r3, r2
 80026e0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	691a      	ldr	r2, [r3, #16]
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	f003 0307 	and.w	r3, r3, #7
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	fa02 f303 	lsl.w	r3, r2, r3
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	08da      	lsrs	r2, r3, #3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	3208      	adds	r2, #8
 8002700:	69b9      	ldr	r1, [r7, #24]
 8002702:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	2203      	movs	r2, #3
 8002712:	fa02 f303 	lsl.w	r3, r2, r3
 8002716:	43db      	mvns	r3, r3
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	4013      	ands	r3, r2
 800271c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f003 0203 	and.w	r2, r3, #3
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	fa02 f303 	lsl.w	r3, r2, r3
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	4313      	orrs	r3, r2
 8002732:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002742:	2b00      	cmp	r3, #0
 8002744:	f000 80e0 	beq.w	8002908 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002748:	4b2f      	ldr	r3, [pc, #188]	@ (8002808 <HAL_GPIO_Init+0x238>)
 800274a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800274e:	4a2e      	ldr	r2, [pc, #184]	@ (8002808 <HAL_GPIO_Init+0x238>)
 8002750:	f043 0302 	orr.w	r3, r3, #2
 8002754:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002758:	4b2b      	ldr	r3, [pc, #172]	@ (8002808 <HAL_GPIO_Init+0x238>)
 800275a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	60fb      	str	r3, [r7, #12]
 8002764:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002766:	4a29      	ldr	r2, [pc, #164]	@ (800280c <HAL_GPIO_Init+0x23c>)
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	089b      	lsrs	r3, r3, #2
 800276c:	3302      	adds	r3, #2
 800276e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002772:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	f003 0303 	and.w	r3, r3, #3
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	220f      	movs	r2, #15
 800277e:	fa02 f303 	lsl.w	r3, r2, r3
 8002782:	43db      	mvns	r3, r3
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	4013      	ands	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a20      	ldr	r2, [pc, #128]	@ (8002810 <HAL_GPIO_Init+0x240>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d052      	beq.n	8002838 <HAL_GPIO_Init+0x268>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a1f      	ldr	r2, [pc, #124]	@ (8002814 <HAL_GPIO_Init+0x244>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d031      	beq.n	80027fe <HAL_GPIO_Init+0x22e>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a1e      	ldr	r2, [pc, #120]	@ (8002818 <HAL_GPIO_Init+0x248>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d02b      	beq.n	80027fa <HAL_GPIO_Init+0x22a>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a1d      	ldr	r2, [pc, #116]	@ (800281c <HAL_GPIO_Init+0x24c>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d025      	beq.n	80027f6 <HAL_GPIO_Init+0x226>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a1c      	ldr	r2, [pc, #112]	@ (8002820 <HAL_GPIO_Init+0x250>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d01f      	beq.n	80027f2 <HAL_GPIO_Init+0x222>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a1b      	ldr	r2, [pc, #108]	@ (8002824 <HAL_GPIO_Init+0x254>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d019      	beq.n	80027ee <HAL_GPIO_Init+0x21e>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a1a      	ldr	r2, [pc, #104]	@ (8002828 <HAL_GPIO_Init+0x258>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d013      	beq.n	80027ea <HAL_GPIO_Init+0x21a>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a19      	ldr	r2, [pc, #100]	@ (800282c <HAL_GPIO_Init+0x25c>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d00d      	beq.n	80027e6 <HAL_GPIO_Init+0x216>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a18      	ldr	r2, [pc, #96]	@ (8002830 <HAL_GPIO_Init+0x260>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d007      	beq.n	80027e2 <HAL_GPIO_Init+0x212>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a17      	ldr	r2, [pc, #92]	@ (8002834 <HAL_GPIO_Init+0x264>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d101      	bne.n	80027de <HAL_GPIO_Init+0x20e>
 80027da:	2309      	movs	r3, #9
 80027dc:	e02d      	b.n	800283a <HAL_GPIO_Init+0x26a>
 80027de:	230a      	movs	r3, #10
 80027e0:	e02b      	b.n	800283a <HAL_GPIO_Init+0x26a>
 80027e2:	2308      	movs	r3, #8
 80027e4:	e029      	b.n	800283a <HAL_GPIO_Init+0x26a>
 80027e6:	2307      	movs	r3, #7
 80027e8:	e027      	b.n	800283a <HAL_GPIO_Init+0x26a>
 80027ea:	2306      	movs	r3, #6
 80027ec:	e025      	b.n	800283a <HAL_GPIO_Init+0x26a>
 80027ee:	2305      	movs	r3, #5
 80027f0:	e023      	b.n	800283a <HAL_GPIO_Init+0x26a>
 80027f2:	2304      	movs	r3, #4
 80027f4:	e021      	b.n	800283a <HAL_GPIO_Init+0x26a>
 80027f6:	2303      	movs	r3, #3
 80027f8:	e01f      	b.n	800283a <HAL_GPIO_Init+0x26a>
 80027fa:	2302      	movs	r3, #2
 80027fc:	e01d      	b.n	800283a <HAL_GPIO_Init+0x26a>
 80027fe:	2301      	movs	r3, #1
 8002800:	e01b      	b.n	800283a <HAL_GPIO_Init+0x26a>
 8002802:	bf00      	nop
 8002804:	58000080 	.word	0x58000080
 8002808:	58024400 	.word	0x58024400
 800280c:	58000400 	.word	0x58000400
 8002810:	58020000 	.word	0x58020000
 8002814:	58020400 	.word	0x58020400
 8002818:	58020800 	.word	0x58020800
 800281c:	58020c00 	.word	0x58020c00
 8002820:	58021000 	.word	0x58021000
 8002824:	58021400 	.word	0x58021400
 8002828:	58021800 	.word	0x58021800
 800282c:	58021c00 	.word	0x58021c00
 8002830:	58022000 	.word	0x58022000
 8002834:	58022400 	.word	0x58022400
 8002838:	2300      	movs	r3, #0
 800283a:	69fa      	ldr	r2, [r7, #28]
 800283c:	f002 0203 	and.w	r2, r2, #3
 8002840:	0092      	lsls	r2, r2, #2
 8002842:	4093      	lsls	r3, r2
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	4313      	orrs	r3, r2
 8002848:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800284a:	4938      	ldr	r1, [pc, #224]	@ (800292c <HAL_GPIO_Init+0x35c>)
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	089b      	lsrs	r3, r3, #2
 8002850:	3302      	adds	r3, #2
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002858:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	43db      	mvns	r3, r3
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	4013      	ands	r3, r2
 8002868:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d003      	beq.n	800287e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002876:	69ba      	ldr	r2, [r7, #24]
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	4313      	orrs	r3, r2
 800287c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800287e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002886:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	43db      	mvns	r3, r3
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	4013      	ands	r3, r2
 8002896:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d003      	beq.n	80028ac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80028ac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	43db      	mvns	r3, r3
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	4013      	ands	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d003      	beq.n	80028d8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	69ba      	ldr	r2, [r7, #24]
 80028dc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	43db      	mvns	r3, r3
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	4013      	ands	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d003      	beq.n	8002902 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	4313      	orrs	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	3301      	adds	r3, #1
 800290c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	fa22 f303 	lsr.w	r3, r2, r3
 8002918:	2b00      	cmp	r3, #0
 800291a:	f47f ae63 	bne.w	80025e4 <HAL_GPIO_Init+0x14>
  }
}
 800291e:	bf00      	nop
 8002920:	bf00      	nop
 8002922:	3724      	adds	r7, #36	@ 0x24
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr
 800292c:	58000400 	.word	0x58000400

08002930 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	460b      	mov	r3, r1
 800293a:	807b      	strh	r3, [r7, #2]
 800293c:	4613      	mov	r3, r2
 800293e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002940:	787b      	ldrb	r3, [r7, #1]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d003      	beq.n	800294e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002946:	887a      	ldrh	r2, [r7, #2]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800294c:	e003      	b.n	8002956 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800294e:	887b      	ldrh	r3, [r7, #2]
 8002950:	041a      	lsls	r2, r3, #16
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	619a      	str	r2, [r3, #24]
}
 8002956:	bf00      	nop
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr

08002962 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002962:	b480      	push	{r7}
 8002964:	b085      	sub	sp, #20
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
 800296a:	460b      	mov	r3, r1
 800296c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002974:	887a      	ldrh	r2, [r7, #2]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	4013      	ands	r3, r2
 800297a:	041a      	lsls	r2, r3, #16
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	43d9      	mvns	r1, r3
 8002980:	887b      	ldrh	r3, [r7, #2]
 8002982:	400b      	ands	r3, r1
 8002984:	431a      	orrs	r2, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	619a      	str	r2, [r3, #24]
}
 800298a:	bf00      	nop
 800298c:	3714      	adds	r7, #20
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr

08002996 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002996:	b580      	push	{r7, lr}
 8002998:	b082      	sub	sp, #8
 800299a:	af00      	add	r7, sp, #0
 800299c:	4603      	mov	r3, r0
 800299e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80029a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029a4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80029a8:	88fb      	ldrh	r3, [r7, #6]
 80029aa:	4013      	ands	r3, r2
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d008      	beq.n	80029c2 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80029b0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80029b4:	88fb      	ldrh	r3, [r7, #6]
 80029b6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80029ba:	88fb      	ldrh	r3, [r7, #6]
 80029bc:	4618      	mov	r0, r3
 80029be:	f000 f804 	bl	80029ca <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80029c2:	bf00      	nop
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b083      	sub	sp, #12
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	4603      	mov	r3, r0
 80029d2:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80029e8:	4b19      	ldr	r3, [pc, #100]	@ (8002a50 <HAL_PWREx_ConfigSupply+0x70>)
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	f003 0304 	and.w	r3, r3, #4
 80029f0:	2b04      	cmp	r3, #4
 80029f2:	d00a      	beq.n	8002a0a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80029f4:	4b16      	ldr	r3, [pc, #88]	@ (8002a50 <HAL_PWREx_ConfigSupply+0x70>)
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	f003 0307 	and.w	r3, r3, #7
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d001      	beq.n	8002a06 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e01f      	b.n	8002a46 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002a06:	2300      	movs	r3, #0
 8002a08:	e01d      	b.n	8002a46 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002a0a:	4b11      	ldr	r3, [pc, #68]	@ (8002a50 <HAL_PWREx_ConfigSupply+0x70>)
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	f023 0207 	bic.w	r2, r3, #7
 8002a12:	490f      	ldr	r1, [pc, #60]	@ (8002a50 <HAL_PWREx_ConfigSupply+0x70>)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002a1a:	f7fe feb1 	bl	8001780 <HAL_GetTick>
 8002a1e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002a20:	e009      	b.n	8002a36 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002a22:	f7fe fead 	bl	8001780 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002a30:	d901      	bls.n	8002a36 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e007      	b.n	8002a46 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002a36:	4b06      	ldr	r3, [pc, #24]	@ (8002a50 <HAL_PWREx_ConfigSupply+0x70>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a42:	d1ee      	bne.n	8002a22 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3710      	adds	r7, #16
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	58024800 	.word	0x58024800

08002a54 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b08c      	sub	sp, #48	@ 0x30
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d102      	bne.n	8002a68 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	f000 bc48 	b.w	80032f8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0301 	and.w	r3, r3, #1
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	f000 8088 	beq.w	8002b86 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a76:	4b99      	ldr	r3, [pc, #612]	@ (8002cdc <HAL_RCC_OscConfig+0x288>)
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a80:	4b96      	ldr	r3, [pc, #600]	@ (8002cdc <HAL_RCC_OscConfig+0x288>)
 8002a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a84:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002a86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a88:	2b10      	cmp	r3, #16
 8002a8a:	d007      	beq.n	8002a9c <HAL_RCC_OscConfig+0x48>
 8002a8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a8e:	2b18      	cmp	r3, #24
 8002a90:	d111      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x62>
 8002a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a94:	f003 0303 	and.w	r3, r3, #3
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d10c      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a9c:	4b8f      	ldr	r3, [pc, #572]	@ (8002cdc <HAL_RCC_OscConfig+0x288>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d06d      	beq.n	8002b84 <HAL_RCC_OscConfig+0x130>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d169      	bne.n	8002b84 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	f000 bc21 	b.w	80032f8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002abe:	d106      	bne.n	8002ace <HAL_RCC_OscConfig+0x7a>
 8002ac0:	4b86      	ldr	r3, [pc, #536]	@ (8002cdc <HAL_RCC_OscConfig+0x288>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a85      	ldr	r2, [pc, #532]	@ (8002cdc <HAL_RCC_OscConfig+0x288>)
 8002ac6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002aca:	6013      	str	r3, [r2, #0]
 8002acc:	e02e      	b.n	8002b2c <HAL_RCC_OscConfig+0xd8>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d10c      	bne.n	8002af0 <HAL_RCC_OscConfig+0x9c>
 8002ad6:	4b81      	ldr	r3, [pc, #516]	@ (8002cdc <HAL_RCC_OscConfig+0x288>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a80      	ldr	r2, [pc, #512]	@ (8002cdc <HAL_RCC_OscConfig+0x288>)
 8002adc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ae0:	6013      	str	r3, [r2, #0]
 8002ae2:	4b7e      	ldr	r3, [pc, #504]	@ (8002cdc <HAL_RCC_OscConfig+0x288>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a7d      	ldr	r2, [pc, #500]	@ (8002cdc <HAL_RCC_OscConfig+0x288>)
 8002ae8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002aec:	6013      	str	r3, [r2, #0]
 8002aee:	e01d      	b.n	8002b2c <HAL_RCC_OscConfig+0xd8>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002af8:	d10c      	bne.n	8002b14 <HAL_RCC_OscConfig+0xc0>
 8002afa:	4b78      	ldr	r3, [pc, #480]	@ (8002cdc <HAL_RCC_OscConfig+0x288>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a77      	ldr	r2, [pc, #476]	@ (8002cdc <HAL_RCC_OscConfig+0x288>)
 8002b00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b04:	6013      	str	r3, [r2, #0]
 8002b06:	4b75      	ldr	r3, [pc, #468]	@ (8002cdc <HAL_RCC_OscConfig+0x288>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a74      	ldr	r2, [pc, #464]	@ (8002cdc <HAL_RCC_OscConfig+0x288>)
 8002b0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b10:	6013      	str	r3, [r2, #0]
 8002b12:	e00b      	b.n	8002b2c <HAL_RCC_OscConfig+0xd8>
 8002b14:	4b71      	ldr	r3, [pc, #452]	@ (8002cdc <HAL_RCC_OscConfig+0x288>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a70      	ldr	r2, [pc, #448]	@ (8002cdc <HAL_RCC_OscConfig+0x288>)
 8002b1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b1e:	6013      	str	r3, [r2, #0]
 8002b20:	4b6e      	ldr	r3, [pc, #440]	@ (8002cdc <HAL_RCC_OscConfig+0x288>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a6d      	ldr	r2, [pc, #436]	@ (8002cdc <HAL_RCC_OscConfig+0x288>)
 8002b26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d013      	beq.n	8002b5c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b34:	f7fe fe24 	bl	8001780 <HAL_GetTick>
 8002b38:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b3a:	e008      	b.n	8002b4e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b3c:	f7fe fe20 	bl	8001780 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b64      	cmp	r3, #100	@ 0x64
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e3d4      	b.n	80032f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b4e:	4b63      	ldr	r3, [pc, #396]	@ (8002cdc <HAL_RCC_OscConfig+0x288>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d0f0      	beq.n	8002b3c <HAL_RCC_OscConfig+0xe8>
 8002b5a:	e014      	b.n	8002b86 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b5c:	f7fe fe10 	bl	8001780 <HAL_GetTick>
 8002b60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002b62:	e008      	b.n	8002b76 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b64:	f7fe fe0c 	bl	8001780 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b64      	cmp	r3, #100	@ 0x64
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e3c0      	b.n	80032f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002b76:	4b59      	ldr	r3, [pc, #356]	@ (8002cdc <HAL_RCC_OscConfig+0x288>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d1f0      	bne.n	8002b64 <HAL_RCC_OscConfig+0x110>
 8002b82:	e000      	b.n	8002b86 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f000 80ca 	beq.w	8002d28 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b94:	4b51      	ldr	r3, [pc, #324]	@ (8002cdc <HAL_RCC_OscConfig+0x288>)
 8002b96:	691b      	ldr	r3, [r3, #16]
 8002b98:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002b9c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002b9e:	4b4f      	ldr	r3, [pc, #316]	@ (8002cdc <HAL_RCC_OscConfig+0x288>)
 8002ba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ba2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002ba4:	6a3b      	ldr	r3, [r7, #32]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d007      	beq.n	8002bba <HAL_RCC_OscConfig+0x166>
 8002baa:	6a3b      	ldr	r3, [r7, #32]
 8002bac:	2b18      	cmp	r3, #24
 8002bae:	d156      	bne.n	8002c5e <HAL_RCC_OscConfig+0x20a>
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	f003 0303 	and.w	r3, r3, #3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d151      	bne.n	8002c5e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bba:	4b48      	ldr	r3, [pc, #288]	@ (8002cdc <HAL_RCC_OscConfig+0x288>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0304 	and.w	r3, r3, #4
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d005      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x17e>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d101      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e392      	b.n	80032f8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002bd2:	4b42      	ldr	r3, [pc, #264]	@ (8002cdc <HAL_RCC_OscConfig+0x288>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f023 0219 	bic.w	r2, r3, #25
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	493f      	ldr	r1, [pc, #252]	@ (8002cdc <HAL_RCC_OscConfig+0x288>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be4:	f7fe fdcc 	bl	8001780 <HAL_GetTick>
 8002be8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002bea:	e008      	b.n	8002bfe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bec:	f7fe fdc8 	bl	8001780 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e37c      	b.n	80032f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002bfe:	4b37      	ldr	r3, [pc, #220]	@ (8002cdc <HAL_RCC_OscConfig+0x288>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0304 	and.w	r3, r3, #4
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d0f0      	beq.n	8002bec <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c0a:	f7fe fde9 	bl	80017e0 <HAL_GetREVID>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d817      	bhi.n	8002c48 <HAL_RCC_OscConfig+0x1f4>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	691b      	ldr	r3, [r3, #16]
 8002c1c:	2b40      	cmp	r3, #64	@ 0x40
 8002c1e:	d108      	bne.n	8002c32 <HAL_RCC_OscConfig+0x1de>
 8002c20:	4b2e      	ldr	r3, [pc, #184]	@ (8002cdc <HAL_RCC_OscConfig+0x288>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002c28:	4a2c      	ldr	r2, [pc, #176]	@ (8002cdc <HAL_RCC_OscConfig+0x288>)
 8002c2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c2e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c30:	e07a      	b.n	8002d28 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c32:	4b2a      	ldr	r3, [pc, #168]	@ (8002cdc <HAL_RCC_OscConfig+0x288>)
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	031b      	lsls	r3, r3, #12
 8002c40:	4926      	ldr	r1, [pc, #152]	@ (8002cdc <HAL_RCC_OscConfig+0x288>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c46:	e06f      	b.n	8002d28 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c48:	4b24      	ldr	r3, [pc, #144]	@ (8002cdc <HAL_RCC_OscConfig+0x288>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	691b      	ldr	r3, [r3, #16]
 8002c54:	061b      	lsls	r3, r3, #24
 8002c56:	4921      	ldr	r1, [pc, #132]	@ (8002cdc <HAL_RCC_OscConfig+0x288>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c5c:	e064      	b.n	8002d28 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d047      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002c66:	4b1d      	ldr	r3, [pc, #116]	@ (8002cdc <HAL_RCC_OscConfig+0x288>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f023 0219 	bic.w	r2, r3, #25
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	491a      	ldr	r1, [pc, #104]	@ (8002cdc <HAL_RCC_OscConfig+0x288>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c78:	f7fe fd82 	bl	8001780 <HAL_GetTick>
 8002c7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c7e:	e008      	b.n	8002c92 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c80:	f7fe fd7e 	bl	8001780 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e332      	b.n	80032f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c92:	4b12      	ldr	r3, [pc, #72]	@ (8002cdc <HAL_RCC_OscConfig+0x288>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0304 	and.w	r3, r3, #4
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d0f0      	beq.n	8002c80 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c9e:	f7fe fd9f 	bl	80017e0 <HAL_GetREVID>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d819      	bhi.n	8002ce0 <HAL_RCC_OscConfig+0x28c>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	691b      	ldr	r3, [r3, #16]
 8002cb0:	2b40      	cmp	r3, #64	@ 0x40
 8002cb2:	d108      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x272>
 8002cb4:	4b09      	ldr	r3, [pc, #36]	@ (8002cdc <HAL_RCC_OscConfig+0x288>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002cbc:	4a07      	ldr	r2, [pc, #28]	@ (8002cdc <HAL_RCC_OscConfig+0x288>)
 8002cbe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cc2:	6053      	str	r3, [r2, #4]
 8002cc4:	e030      	b.n	8002d28 <HAL_RCC_OscConfig+0x2d4>
 8002cc6:	4b05      	ldr	r3, [pc, #20]	@ (8002cdc <HAL_RCC_OscConfig+0x288>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	031b      	lsls	r3, r3, #12
 8002cd4:	4901      	ldr	r1, [pc, #4]	@ (8002cdc <HAL_RCC_OscConfig+0x288>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	604b      	str	r3, [r1, #4]
 8002cda:	e025      	b.n	8002d28 <HAL_RCC_OscConfig+0x2d4>
 8002cdc:	58024400 	.word	0x58024400
 8002ce0:	4b9a      	ldr	r3, [pc, #616]	@ (8002f4c <HAL_RCC_OscConfig+0x4f8>)
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	061b      	lsls	r3, r3, #24
 8002cee:	4997      	ldr	r1, [pc, #604]	@ (8002f4c <HAL_RCC_OscConfig+0x4f8>)
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	604b      	str	r3, [r1, #4]
 8002cf4:	e018      	b.n	8002d28 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cf6:	4b95      	ldr	r3, [pc, #596]	@ (8002f4c <HAL_RCC_OscConfig+0x4f8>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a94      	ldr	r2, [pc, #592]	@ (8002f4c <HAL_RCC_OscConfig+0x4f8>)
 8002cfc:	f023 0301 	bic.w	r3, r3, #1
 8002d00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d02:	f7fe fd3d 	bl	8001780 <HAL_GetTick>
 8002d06:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d08:	e008      	b.n	8002d1c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d0a:	f7fe fd39 	bl	8001780 <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d901      	bls.n	8002d1c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e2ed      	b.n	80032f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d1c:	4b8b      	ldr	r3, [pc, #556]	@ (8002f4c <HAL_RCC_OscConfig+0x4f8>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0304 	and.w	r3, r3, #4
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d1f0      	bne.n	8002d0a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0310 	and.w	r3, r3, #16
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	f000 80a9 	beq.w	8002e88 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d36:	4b85      	ldr	r3, [pc, #532]	@ (8002f4c <HAL_RCC_OscConfig+0x4f8>)
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d3e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002d40:	4b82      	ldr	r3, [pc, #520]	@ (8002f4c <HAL_RCC_OscConfig+0x4f8>)
 8002d42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d44:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	2b08      	cmp	r3, #8
 8002d4a:	d007      	beq.n	8002d5c <HAL_RCC_OscConfig+0x308>
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	2b18      	cmp	r3, #24
 8002d50:	d13a      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x374>
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	f003 0303 	and.w	r3, r3, #3
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d135      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d5c:	4b7b      	ldr	r3, [pc, #492]	@ (8002f4c <HAL_RCC_OscConfig+0x4f8>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d005      	beq.n	8002d74 <HAL_RCC_OscConfig+0x320>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	69db      	ldr	r3, [r3, #28]
 8002d6c:	2b80      	cmp	r3, #128	@ 0x80
 8002d6e:	d001      	beq.n	8002d74 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e2c1      	b.n	80032f8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002d74:	f7fe fd34 	bl	80017e0 <HAL_GetREVID>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d817      	bhi.n	8002db2 <HAL_RCC_OscConfig+0x35e>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a1b      	ldr	r3, [r3, #32]
 8002d86:	2b20      	cmp	r3, #32
 8002d88:	d108      	bne.n	8002d9c <HAL_RCC_OscConfig+0x348>
 8002d8a:	4b70      	ldr	r3, [pc, #448]	@ (8002f4c <HAL_RCC_OscConfig+0x4f8>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002d92:	4a6e      	ldr	r2, [pc, #440]	@ (8002f4c <HAL_RCC_OscConfig+0x4f8>)
 8002d94:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002d98:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d9a:	e075      	b.n	8002e88 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002d9c:	4b6b      	ldr	r3, [pc, #428]	@ (8002f4c <HAL_RCC_OscConfig+0x4f8>)
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a1b      	ldr	r3, [r3, #32]
 8002da8:	069b      	lsls	r3, r3, #26
 8002daa:	4968      	ldr	r1, [pc, #416]	@ (8002f4c <HAL_RCC_OscConfig+0x4f8>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002db0:	e06a      	b.n	8002e88 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002db2:	4b66      	ldr	r3, [pc, #408]	@ (8002f4c <HAL_RCC_OscConfig+0x4f8>)
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a1b      	ldr	r3, [r3, #32]
 8002dbe:	061b      	lsls	r3, r3, #24
 8002dc0:	4962      	ldr	r1, [pc, #392]	@ (8002f4c <HAL_RCC_OscConfig+0x4f8>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002dc6:	e05f      	b.n	8002e88 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	69db      	ldr	r3, [r3, #28]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d042      	beq.n	8002e56 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002dd0:	4b5e      	ldr	r3, [pc, #376]	@ (8002f4c <HAL_RCC_OscConfig+0x4f8>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a5d      	ldr	r2, [pc, #372]	@ (8002f4c <HAL_RCC_OscConfig+0x4f8>)
 8002dd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002dda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ddc:	f7fe fcd0 	bl	8001780 <HAL_GetTick>
 8002de0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002de2:	e008      	b.n	8002df6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002de4:	f7fe fccc 	bl	8001780 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e280      	b.n	80032f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002df6:	4b55      	ldr	r3, [pc, #340]	@ (8002f4c <HAL_RCC_OscConfig+0x4f8>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d0f0      	beq.n	8002de4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e02:	f7fe fced 	bl	80017e0 <HAL_GetREVID>
 8002e06:	4603      	mov	r3, r0
 8002e08:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d817      	bhi.n	8002e40 <HAL_RCC_OscConfig+0x3ec>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a1b      	ldr	r3, [r3, #32]
 8002e14:	2b20      	cmp	r3, #32
 8002e16:	d108      	bne.n	8002e2a <HAL_RCC_OscConfig+0x3d6>
 8002e18:	4b4c      	ldr	r3, [pc, #304]	@ (8002f4c <HAL_RCC_OscConfig+0x4f8>)
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002e20:	4a4a      	ldr	r2, [pc, #296]	@ (8002f4c <HAL_RCC_OscConfig+0x4f8>)
 8002e22:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002e26:	6053      	str	r3, [r2, #4]
 8002e28:	e02e      	b.n	8002e88 <HAL_RCC_OscConfig+0x434>
 8002e2a:	4b48      	ldr	r3, [pc, #288]	@ (8002f4c <HAL_RCC_OscConfig+0x4f8>)
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a1b      	ldr	r3, [r3, #32]
 8002e36:	069b      	lsls	r3, r3, #26
 8002e38:	4944      	ldr	r1, [pc, #272]	@ (8002f4c <HAL_RCC_OscConfig+0x4f8>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	604b      	str	r3, [r1, #4]
 8002e3e:	e023      	b.n	8002e88 <HAL_RCC_OscConfig+0x434>
 8002e40:	4b42      	ldr	r3, [pc, #264]	@ (8002f4c <HAL_RCC_OscConfig+0x4f8>)
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a1b      	ldr	r3, [r3, #32]
 8002e4c:	061b      	lsls	r3, r3, #24
 8002e4e:	493f      	ldr	r1, [pc, #252]	@ (8002f4c <HAL_RCC_OscConfig+0x4f8>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	60cb      	str	r3, [r1, #12]
 8002e54:	e018      	b.n	8002e88 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002e56:	4b3d      	ldr	r3, [pc, #244]	@ (8002f4c <HAL_RCC_OscConfig+0x4f8>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a3c      	ldr	r2, [pc, #240]	@ (8002f4c <HAL_RCC_OscConfig+0x4f8>)
 8002e5c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e62:	f7fe fc8d 	bl	8001780 <HAL_GetTick>
 8002e66:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002e68:	e008      	b.n	8002e7c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002e6a:	f7fe fc89 	bl	8001780 <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d901      	bls.n	8002e7c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e23d      	b.n	80032f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002e7c:	4b33      	ldr	r3, [pc, #204]	@ (8002f4c <HAL_RCC_OscConfig+0x4f8>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d1f0      	bne.n	8002e6a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0308 	and.w	r3, r3, #8
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d036      	beq.n	8002f02 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	695b      	ldr	r3, [r3, #20]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d019      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e9c:	4b2b      	ldr	r3, [pc, #172]	@ (8002f4c <HAL_RCC_OscConfig+0x4f8>)
 8002e9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ea0:	4a2a      	ldr	r2, [pc, #168]	@ (8002f4c <HAL_RCC_OscConfig+0x4f8>)
 8002ea2:	f043 0301 	orr.w	r3, r3, #1
 8002ea6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea8:	f7fe fc6a 	bl	8001780 <HAL_GetTick>
 8002eac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002eae:	e008      	b.n	8002ec2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eb0:	f7fe fc66 	bl	8001780 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e21a      	b.n	80032f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002ec2:	4b22      	ldr	r3, [pc, #136]	@ (8002f4c <HAL_RCC_OscConfig+0x4f8>)
 8002ec4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d0f0      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x45c>
 8002ece:	e018      	b.n	8002f02 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ed0:	4b1e      	ldr	r3, [pc, #120]	@ (8002f4c <HAL_RCC_OscConfig+0x4f8>)
 8002ed2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ed4:	4a1d      	ldr	r2, [pc, #116]	@ (8002f4c <HAL_RCC_OscConfig+0x4f8>)
 8002ed6:	f023 0301 	bic.w	r3, r3, #1
 8002eda:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002edc:	f7fe fc50 	bl	8001780 <HAL_GetTick>
 8002ee0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ee2:	e008      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ee4:	f7fe fc4c 	bl	8001780 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e200      	b.n	80032f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ef6:	4b15      	ldr	r3, [pc, #84]	@ (8002f4c <HAL_RCC_OscConfig+0x4f8>)
 8002ef8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d1f0      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0320 	and.w	r3, r3, #32
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d039      	beq.n	8002f82 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d01c      	beq.n	8002f50 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f16:	4b0d      	ldr	r3, [pc, #52]	@ (8002f4c <HAL_RCC_OscConfig+0x4f8>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a0c      	ldr	r2, [pc, #48]	@ (8002f4c <HAL_RCC_OscConfig+0x4f8>)
 8002f1c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002f20:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002f22:	f7fe fc2d 	bl	8001780 <HAL_GetTick>
 8002f26:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002f28:	e008      	b.n	8002f3c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f2a:	f7fe fc29 	bl	8001780 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d901      	bls.n	8002f3c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e1dd      	b.n	80032f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002f3c:	4b03      	ldr	r3, [pc, #12]	@ (8002f4c <HAL_RCC_OscConfig+0x4f8>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d0f0      	beq.n	8002f2a <HAL_RCC_OscConfig+0x4d6>
 8002f48:	e01b      	b.n	8002f82 <HAL_RCC_OscConfig+0x52e>
 8002f4a:	bf00      	nop
 8002f4c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002f50:	4b9b      	ldr	r3, [pc, #620]	@ (80031c0 <HAL_RCC_OscConfig+0x76c>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a9a      	ldr	r2, [pc, #616]	@ (80031c0 <HAL_RCC_OscConfig+0x76c>)
 8002f56:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002f5a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002f5c:	f7fe fc10 	bl	8001780 <HAL_GetTick>
 8002f60:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002f62:	e008      	b.n	8002f76 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f64:	f7fe fc0c 	bl	8001780 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e1c0      	b.n	80032f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002f76:	4b92      	ldr	r3, [pc, #584]	@ (80031c0 <HAL_RCC_OscConfig+0x76c>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1f0      	bne.n	8002f64 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0304 	and.w	r3, r3, #4
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	f000 8081 	beq.w	8003092 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002f90:	4b8c      	ldr	r3, [pc, #560]	@ (80031c4 <HAL_RCC_OscConfig+0x770>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a8b      	ldr	r2, [pc, #556]	@ (80031c4 <HAL_RCC_OscConfig+0x770>)
 8002f96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f9a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f9c:	f7fe fbf0 	bl	8001780 <HAL_GetTick>
 8002fa0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002fa2:	e008      	b.n	8002fb6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fa4:	f7fe fbec 	bl	8001780 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b64      	cmp	r3, #100	@ 0x64
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e1a0      	b.n	80032f8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002fb6:	4b83      	ldr	r3, [pc, #524]	@ (80031c4 <HAL_RCC_OscConfig+0x770>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d0f0      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d106      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x584>
 8002fca:	4b7d      	ldr	r3, [pc, #500]	@ (80031c0 <HAL_RCC_OscConfig+0x76c>)
 8002fcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fce:	4a7c      	ldr	r2, [pc, #496]	@ (80031c0 <HAL_RCC_OscConfig+0x76c>)
 8002fd0:	f043 0301 	orr.w	r3, r3, #1
 8002fd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fd6:	e02d      	b.n	8003034 <HAL_RCC_OscConfig+0x5e0>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d10c      	bne.n	8002ffa <HAL_RCC_OscConfig+0x5a6>
 8002fe0:	4b77      	ldr	r3, [pc, #476]	@ (80031c0 <HAL_RCC_OscConfig+0x76c>)
 8002fe2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fe4:	4a76      	ldr	r2, [pc, #472]	@ (80031c0 <HAL_RCC_OscConfig+0x76c>)
 8002fe6:	f023 0301 	bic.w	r3, r3, #1
 8002fea:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fec:	4b74      	ldr	r3, [pc, #464]	@ (80031c0 <HAL_RCC_OscConfig+0x76c>)
 8002fee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ff0:	4a73      	ldr	r2, [pc, #460]	@ (80031c0 <HAL_RCC_OscConfig+0x76c>)
 8002ff2:	f023 0304 	bic.w	r3, r3, #4
 8002ff6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ff8:	e01c      	b.n	8003034 <HAL_RCC_OscConfig+0x5e0>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	2b05      	cmp	r3, #5
 8003000:	d10c      	bne.n	800301c <HAL_RCC_OscConfig+0x5c8>
 8003002:	4b6f      	ldr	r3, [pc, #444]	@ (80031c0 <HAL_RCC_OscConfig+0x76c>)
 8003004:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003006:	4a6e      	ldr	r2, [pc, #440]	@ (80031c0 <HAL_RCC_OscConfig+0x76c>)
 8003008:	f043 0304 	orr.w	r3, r3, #4
 800300c:	6713      	str	r3, [r2, #112]	@ 0x70
 800300e:	4b6c      	ldr	r3, [pc, #432]	@ (80031c0 <HAL_RCC_OscConfig+0x76c>)
 8003010:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003012:	4a6b      	ldr	r2, [pc, #428]	@ (80031c0 <HAL_RCC_OscConfig+0x76c>)
 8003014:	f043 0301 	orr.w	r3, r3, #1
 8003018:	6713      	str	r3, [r2, #112]	@ 0x70
 800301a:	e00b      	b.n	8003034 <HAL_RCC_OscConfig+0x5e0>
 800301c:	4b68      	ldr	r3, [pc, #416]	@ (80031c0 <HAL_RCC_OscConfig+0x76c>)
 800301e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003020:	4a67      	ldr	r2, [pc, #412]	@ (80031c0 <HAL_RCC_OscConfig+0x76c>)
 8003022:	f023 0301 	bic.w	r3, r3, #1
 8003026:	6713      	str	r3, [r2, #112]	@ 0x70
 8003028:	4b65      	ldr	r3, [pc, #404]	@ (80031c0 <HAL_RCC_OscConfig+0x76c>)
 800302a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800302c:	4a64      	ldr	r2, [pc, #400]	@ (80031c0 <HAL_RCC_OscConfig+0x76c>)
 800302e:	f023 0304 	bic.w	r3, r3, #4
 8003032:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d015      	beq.n	8003068 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800303c:	f7fe fba0 	bl	8001780 <HAL_GetTick>
 8003040:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003042:	e00a      	b.n	800305a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003044:	f7fe fb9c 	bl	8001780 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003052:	4293      	cmp	r3, r2
 8003054:	d901      	bls.n	800305a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e14e      	b.n	80032f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800305a:	4b59      	ldr	r3, [pc, #356]	@ (80031c0 <HAL_RCC_OscConfig+0x76c>)
 800305c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d0ee      	beq.n	8003044 <HAL_RCC_OscConfig+0x5f0>
 8003066:	e014      	b.n	8003092 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003068:	f7fe fb8a 	bl	8001780 <HAL_GetTick>
 800306c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800306e:	e00a      	b.n	8003086 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003070:	f7fe fb86 	bl	8001780 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800307e:	4293      	cmp	r3, r2
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e138      	b.n	80032f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003086:	4b4e      	ldr	r3, [pc, #312]	@ (80031c0 <HAL_RCC_OscConfig+0x76c>)
 8003088:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1ee      	bne.n	8003070 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003096:	2b00      	cmp	r3, #0
 8003098:	f000 812d 	beq.w	80032f6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800309c:	4b48      	ldr	r3, [pc, #288]	@ (80031c0 <HAL_RCC_OscConfig+0x76c>)
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80030a4:	2b18      	cmp	r3, #24
 80030a6:	f000 80bd 	beq.w	8003224 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	f040 809e 	bne.w	80031f0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030b4:	4b42      	ldr	r3, [pc, #264]	@ (80031c0 <HAL_RCC_OscConfig+0x76c>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a41      	ldr	r2, [pc, #260]	@ (80031c0 <HAL_RCC_OscConfig+0x76c>)
 80030ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80030be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c0:	f7fe fb5e 	bl	8001780 <HAL_GetTick>
 80030c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030c6:	e008      	b.n	80030da <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030c8:	f7fe fb5a 	bl	8001780 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e10e      	b.n	80032f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030da:	4b39      	ldr	r3, [pc, #228]	@ (80031c0 <HAL_RCC_OscConfig+0x76c>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1f0      	bne.n	80030c8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030e6:	4b36      	ldr	r3, [pc, #216]	@ (80031c0 <HAL_RCC_OscConfig+0x76c>)
 80030e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80030ea:	4b37      	ldr	r3, [pc, #220]	@ (80031c8 <HAL_RCC_OscConfig+0x774>)
 80030ec:	4013      	ands	r3, r2
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80030f6:	0112      	lsls	r2, r2, #4
 80030f8:	430a      	orrs	r2, r1
 80030fa:	4931      	ldr	r1, [pc, #196]	@ (80031c0 <HAL_RCC_OscConfig+0x76c>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	628b      	str	r3, [r1, #40]	@ 0x28
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003104:	3b01      	subs	r3, #1
 8003106:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800310e:	3b01      	subs	r3, #1
 8003110:	025b      	lsls	r3, r3, #9
 8003112:	b29b      	uxth	r3, r3
 8003114:	431a      	orrs	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800311a:	3b01      	subs	r3, #1
 800311c:	041b      	lsls	r3, r3, #16
 800311e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003122:	431a      	orrs	r2, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003128:	3b01      	subs	r3, #1
 800312a:	061b      	lsls	r3, r3, #24
 800312c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003130:	4923      	ldr	r1, [pc, #140]	@ (80031c0 <HAL_RCC_OscConfig+0x76c>)
 8003132:	4313      	orrs	r3, r2
 8003134:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003136:	4b22      	ldr	r3, [pc, #136]	@ (80031c0 <HAL_RCC_OscConfig+0x76c>)
 8003138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800313a:	4a21      	ldr	r2, [pc, #132]	@ (80031c0 <HAL_RCC_OscConfig+0x76c>)
 800313c:	f023 0301 	bic.w	r3, r3, #1
 8003140:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003142:	4b1f      	ldr	r3, [pc, #124]	@ (80031c0 <HAL_RCC_OscConfig+0x76c>)
 8003144:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003146:	4b21      	ldr	r3, [pc, #132]	@ (80031cc <HAL_RCC_OscConfig+0x778>)
 8003148:	4013      	ands	r3, r2
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800314e:	00d2      	lsls	r2, r2, #3
 8003150:	491b      	ldr	r1, [pc, #108]	@ (80031c0 <HAL_RCC_OscConfig+0x76c>)
 8003152:	4313      	orrs	r3, r2
 8003154:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003156:	4b1a      	ldr	r3, [pc, #104]	@ (80031c0 <HAL_RCC_OscConfig+0x76c>)
 8003158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800315a:	f023 020c 	bic.w	r2, r3, #12
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003162:	4917      	ldr	r1, [pc, #92]	@ (80031c0 <HAL_RCC_OscConfig+0x76c>)
 8003164:	4313      	orrs	r3, r2
 8003166:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003168:	4b15      	ldr	r3, [pc, #84]	@ (80031c0 <HAL_RCC_OscConfig+0x76c>)
 800316a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800316c:	f023 0202 	bic.w	r2, r3, #2
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003174:	4912      	ldr	r1, [pc, #72]	@ (80031c0 <HAL_RCC_OscConfig+0x76c>)
 8003176:	4313      	orrs	r3, r2
 8003178:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800317a:	4b11      	ldr	r3, [pc, #68]	@ (80031c0 <HAL_RCC_OscConfig+0x76c>)
 800317c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800317e:	4a10      	ldr	r2, [pc, #64]	@ (80031c0 <HAL_RCC_OscConfig+0x76c>)
 8003180:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003184:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003186:	4b0e      	ldr	r3, [pc, #56]	@ (80031c0 <HAL_RCC_OscConfig+0x76c>)
 8003188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800318a:	4a0d      	ldr	r2, [pc, #52]	@ (80031c0 <HAL_RCC_OscConfig+0x76c>)
 800318c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003190:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003192:	4b0b      	ldr	r3, [pc, #44]	@ (80031c0 <HAL_RCC_OscConfig+0x76c>)
 8003194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003196:	4a0a      	ldr	r2, [pc, #40]	@ (80031c0 <HAL_RCC_OscConfig+0x76c>)
 8003198:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800319c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800319e:	4b08      	ldr	r3, [pc, #32]	@ (80031c0 <HAL_RCC_OscConfig+0x76c>)
 80031a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031a2:	4a07      	ldr	r2, [pc, #28]	@ (80031c0 <HAL_RCC_OscConfig+0x76c>)
 80031a4:	f043 0301 	orr.w	r3, r3, #1
 80031a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031aa:	4b05      	ldr	r3, [pc, #20]	@ (80031c0 <HAL_RCC_OscConfig+0x76c>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a04      	ldr	r2, [pc, #16]	@ (80031c0 <HAL_RCC_OscConfig+0x76c>)
 80031b0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b6:	f7fe fae3 	bl	8001780 <HAL_GetTick>
 80031ba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80031bc:	e011      	b.n	80031e2 <HAL_RCC_OscConfig+0x78e>
 80031be:	bf00      	nop
 80031c0:	58024400 	.word	0x58024400
 80031c4:	58024800 	.word	0x58024800
 80031c8:	fffffc0c 	.word	0xfffffc0c
 80031cc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031d0:	f7fe fad6 	bl	8001780 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e08a      	b.n	80032f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80031e2:	4b47      	ldr	r3, [pc, #284]	@ (8003300 <HAL_RCC_OscConfig+0x8ac>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d0f0      	beq.n	80031d0 <HAL_RCC_OscConfig+0x77c>
 80031ee:	e082      	b.n	80032f6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031f0:	4b43      	ldr	r3, [pc, #268]	@ (8003300 <HAL_RCC_OscConfig+0x8ac>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a42      	ldr	r2, [pc, #264]	@ (8003300 <HAL_RCC_OscConfig+0x8ac>)
 80031f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80031fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031fc:	f7fe fac0 	bl	8001780 <HAL_GetTick>
 8003200:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003202:	e008      	b.n	8003216 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003204:	f7fe fabc 	bl	8001780 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b02      	cmp	r3, #2
 8003210:	d901      	bls.n	8003216 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e070      	b.n	80032f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003216:	4b3a      	ldr	r3, [pc, #232]	@ (8003300 <HAL_RCC_OscConfig+0x8ac>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1f0      	bne.n	8003204 <HAL_RCC_OscConfig+0x7b0>
 8003222:	e068      	b.n	80032f6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003224:	4b36      	ldr	r3, [pc, #216]	@ (8003300 <HAL_RCC_OscConfig+0x8ac>)
 8003226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003228:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800322a:	4b35      	ldr	r3, [pc, #212]	@ (8003300 <HAL_RCC_OscConfig+0x8ac>)
 800322c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800322e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003234:	2b01      	cmp	r3, #1
 8003236:	d031      	beq.n	800329c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	f003 0203 	and.w	r2, r3, #3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003242:	429a      	cmp	r2, r3
 8003244:	d12a      	bne.n	800329c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	091b      	lsrs	r3, r3, #4
 800324a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003252:	429a      	cmp	r2, r3
 8003254:	d122      	bne.n	800329c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003260:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003262:	429a      	cmp	r2, r3
 8003264:	d11a      	bne.n	800329c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	0a5b      	lsrs	r3, r3, #9
 800326a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003272:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003274:	429a      	cmp	r2, r3
 8003276:	d111      	bne.n	800329c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	0c1b      	lsrs	r3, r3, #16
 800327c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003284:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003286:	429a      	cmp	r2, r3
 8003288:	d108      	bne.n	800329c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	0e1b      	lsrs	r3, r3, #24
 800328e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003296:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003298:	429a      	cmp	r2, r3
 800329a:	d001      	beq.n	80032a0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e02b      	b.n	80032f8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80032a0:	4b17      	ldr	r3, [pc, #92]	@ (8003300 <HAL_RCC_OscConfig+0x8ac>)
 80032a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032a4:	08db      	lsrs	r3, r3, #3
 80032a6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80032aa:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032b0:	693a      	ldr	r2, [r7, #16]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d01f      	beq.n	80032f6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80032b6:	4b12      	ldr	r3, [pc, #72]	@ (8003300 <HAL_RCC_OscConfig+0x8ac>)
 80032b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ba:	4a11      	ldr	r2, [pc, #68]	@ (8003300 <HAL_RCC_OscConfig+0x8ac>)
 80032bc:	f023 0301 	bic.w	r3, r3, #1
 80032c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80032c2:	f7fe fa5d 	bl	8001780 <HAL_GetTick>
 80032c6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80032c8:	bf00      	nop
 80032ca:	f7fe fa59 	bl	8001780 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d0f9      	beq.n	80032ca <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80032d6:	4b0a      	ldr	r3, [pc, #40]	@ (8003300 <HAL_RCC_OscConfig+0x8ac>)
 80032d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032da:	4b0a      	ldr	r3, [pc, #40]	@ (8003304 <HAL_RCC_OscConfig+0x8b0>)
 80032dc:	4013      	ands	r3, r2
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80032e2:	00d2      	lsls	r2, r2, #3
 80032e4:	4906      	ldr	r1, [pc, #24]	@ (8003300 <HAL_RCC_OscConfig+0x8ac>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80032ea:	4b05      	ldr	r3, [pc, #20]	@ (8003300 <HAL_RCC_OscConfig+0x8ac>)
 80032ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ee:	4a04      	ldr	r2, [pc, #16]	@ (8003300 <HAL_RCC_OscConfig+0x8ac>)
 80032f0:	f043 0301 	orr.w	r3, r3, #1
 80032f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3730      	adds	r7, #48	@ 0x30
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	58024400 	.word	0x58024400
 8003304:	ffff0007 	.word	0xffff0007

08003308 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b086      	sub	sp, #24
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d101      	bne.n	800331c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e19c      	b.n	8003656 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800331c:	4b8a      	ldr	r3, [pc, #552]	@ (8003548 <HAL_RCC_ClockConfig+0x240>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 030f 	and.w	r3, r3, #15
 8003324:	683a      	ldr	r2, [r7, #0]
 8003326:	429a      	cmp	r2, r3
 8003328:	d910      	bls.n	800334c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800332a:	4b87      	ldr	r3, [pc, #540]	@ (8003548 <HAL_RCC_ClockConfig+0x240>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f023 020f 	bic.w	r2, r3, #15
 8003332:	4985      	ldr	r1, [pc, #532]	@ (8003548 <HAL_RCC_ClockConfig+0x240>)
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	4313      	orrs	r3, r2
 8003338:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800333a:	4b83      	ldr	r3, [pc, #524]	@ (8003548 <HAL_RCC_ClockConfig+0x240>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 030f 	and.w	r3, r3, #15
 8003342:	683a      	ldr	r2, [r7, #0]
 8003344:	429a      	cmp	r2, r3
 8003346:	d001      	beq.n	800334c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e184      	b.n	8003656 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0304 	and.w	r3, r3, #4
 8003354:	2b00      	cmp	r3, #0
 8003356:	d010      	beq.n	800337a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	691a      	ldr	r2, [r3, #16]
 800335c:	4b7b      	ldr	r3, [pc, #492]	@ (800354c <HAL_RCC_ClockConfig+0x244>)
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003364:	429a      	cmp	r2, r3
 8003366:	d908      	bls.n	800337a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003368:	4b78      	ldr	r3, [pc, #480]	@ (800354c <HAL_RCC_ClockConfig+0x244>)
 800336a:	699b      	ldr	r3, [r3, #24]
 800336c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	691b      	ldr	r3, [r3, #16]
 8003374:	4975      	ldr	r1, [pc, #468]	@ (800354c <HAL_RCC_ClockConfig+0x244>)
 8003376:	4313      	orrs	r3, r2
 8003378:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0308 	and.w	r3, r3, #8
 8003382:	2b00      	cmp	r3, #0
 8003384:	d010      	beq.n	80033a8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	695a      	ldr	r2, [r3, #20]
 800338a:	4b70      	ldr	r3, [pc, #448]	@ (800354c <HAL_RCC_ClockConfig+0x244>)
 800338c:	69db      	ldr	r3, [r3, #28]
 800338e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003392:	429a      	cmp	r2, r3
 8003394:	d908      	bls.n	80033a8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003396:	4b6d      	ldr	r3, [pc, #436]	@ (800354c <HAL_RCC_ClockConfig+0x244>)
 8003398:	69db      	ldr	r3, [r3, #28]
 800339a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	496a      	ldr	r1, [pc, #424]	@ (800354c <HAL_RCC_ClockConfig+0x244>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0310 	and.w	r3, r3, #16
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d010      	beq.n	80033d6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	699a      	ldr	r2, [r3, #24]
 80033b8:	4b64      	ldr	r3, [pc, #400]	@ (800354c <HAL_RCC_ClockConfig+0x244>)
 80033ba:	69db      	ldr	r3, [r3, #28]
 80033bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d908      	bls.n	80033d6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80033c4:	4b61      	ldr	r3, [pc, #388]	@ (800354c <HAL_RCC_ClockConfig+0x244>)
 80033c6:	69db      	ldr	r3, [r3, #28]
 80033c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	699b      	ldr	r3, [r3, #24]
 80033d0:	495e      	ldr	r1, [pc, #376]	@ (800354c <HAL_RCC_ClockConfig+0x244>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0320 	and.w	r3, r3, #32
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d010      	beq.n	8003404 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	69da      	ldr	r2, [r3, #28]
 80033e6:	4b59      	ldr	r3, [pc, #356]	@ (800354c <HAL_RCC_ClockConfig+0x244>)
 80033e8:	6a1b      	ldr	r3, [r3, #32]
 80033ea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d908      	bls.n	8003404 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80033f2:	4b56      	ldr	r3, [pc, #344]	@ (800354c <HAL_RCC_ClockConfig+0x244>)
 80033f4:	6a1b      	ldr	r3, [r3, #32]
 80033f6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	69db      	ldr	r3, [r3, #28]
 80033fe:	4953      	ldr	r1, [pc, #332]	@ (800354c <HAL_RCC_ClockConfig+0x244>)
 8003400:	4313      	orrs	r3, r2
 8003402:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0302 	and.w	r3, r3, #2
 800340c:	2b00      	cmp	r3, #0
 800340e:	d010      	beq.n	8003432 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	68da      	ldr	r2, [r3, #12]
 8003414:	4b4d      	ldr	r3, [pc, #308]	@ (800354c <HAL_RCC_ClockConfig+0x244>)
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	f003 030f 	and.w	r3, r3, #15
 800341c:	429a      	cmp	r2, r3
 800341e:	d908      	bls.n	8003432 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003420:	4b4a      	ldr	r3, [pc, #296]	@ (800354c <HAL_RCC_ClockConfig+0x244>)
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	f023 020f 	bic.w	r2, r3, #15
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	4947      	ldr	r1, [pc, #284]	@ (800354c <HAL_RCC_ClockConfig+0x244>)
 800342e:	4313      	orrs	r3, r2
 8003430:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	2b00      	cmp	r3, #0
 800343c:	d055      	beq.n	80034ea <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800343e:	4b43      	ldr	r3, [pc, #268]	@ (800354c <HAL_RCC_ClockConfig+0x244>)
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	4940      	ldr	r1, [pc, #256]	@ (800354c <HAL_RCC_ClockConfig+0x244>)
 800344c:	4313      	orrs	r3, r2
 800344e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	2b02      	cmp	r3, #2
 8003456:	d107      	bne.n	8003468 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003458:	4b3c      	ldr	r3, [pc, #240]	@ (800354c <HAL_RCC_ClockConfig+0x244>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d121      	bne.n	80034a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e0f6      	b.n	8003656 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	2b03      	cmp	r3, #3
 800346e:	d107      	bne.n	8003480 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003470:	4b36      	ldr	r3, [pc, #216]	@ (800354c <HAL_RCC_ClockConfig+0x244>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d115      	bne.n	80034a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e0ea      	b.n	8003656 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	2b01      	cmp	r3, #1
 8003486:	d107      	bne.n	8003498 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003488:	4b30      	ldr	r3, [pc, #192]	@ (800354c <HAL_RCC_ClockConfig+0x244>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003490:	2b00      	cmp	r3, #0
 8003492:	d109      	bne.n	80034a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e0de      	b.n	8003656 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003498:	4b2c      	ldr	r3, [pc, #176]	@ (800354c <HAL_RCC_ClockConfig+0x244>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0304 	and.w	r3, r3, #4
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d101      	bne.n	80034a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e0d6      	b.n	8003656 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80034a8:	4b28      	ldr	r3, [pc, #160]	@ (800354c <HAL_RCC_ClockConfig+0x244>)
 80034aa:	691b      	ldr	r3, [r3, #16]
 80034ac:	f023 0207 	bic.w	r2, r3, #7
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	4925      	ldr	r1, [pc, #148]	@ (800354c <HAL_RCC_ClockConfig+0x244>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034ba:	f7fe f961 	bl	8001780 <HAL_GetTick>
 80034be:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034c0:	e00a      	b.n	80034d8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034c2:	f7fe f95d 	bl	8001780 <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d901      	bls.n	80034d8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e0be      	b.n	8003656 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034d8:	4b1c      	ldr	r3, [pc, #112]	@ (800354c <HAL_RCC_ClockConfig+0x244>)
 80034da:	691b      	ldr	r3, [r3, #16]
 80034dc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	00db      	lsls	r3, r3, #3
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d1eb      	bne.n	80034c2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d010      	beq.n	8003518 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	68da      	ldr	r2, [r3, #12]
 80034fa:	4b14      	ldr	r3, [pc, #80]	@ (800354c <HAL_RCC_ClockConfig+0x244>)
 80034fc:	699b      	ldr	r3, [r3, #24]
 80034fe:	f003 030f 	and.w	r3, r3, #15
 8003502:	429a      	cmp	r2, r3
 8003504:	d208      	bcs.n	8003518 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003506:	4b11      	ldr	r3, [pc, #68]	@ (800354c <HAL_RCC_ClockConfig+0x244>)
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	f023 020f 	bic.w	r2, r3, #15
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	490e      	ldr	r1, [pc, #56]	@ (800354c <HAL_RCC_ClockConfig+0x244>)
 8003514:	4313      	orrs	r3, r2
 8003516:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003518:	4b0b      	ldr	r3, [pc, #44]	@ (8003548 <HAL_RCC_ClockConfig+0x240>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 030f 	and.w	r3, r3, #15
 8003520:	683a      	ldr	r2, [r7, #0]
 8003522:	429a      	cmp	r2, r3
 8003524:	d214      	bcs.n	8003550 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003526:	4b08      	ldr	r3, [pc, #32]	@ (8003548 <HAL_RCC_ClockConfig+0x240>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f023 020f 	bic.w	r2, r3, #15
 800352e:	4906      	ldr	r1, [pc, #24]	@ (8003548 <HAL_RCC_ClockConfig+0x240>)
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	4313      	orrs	r3, r2
 8003534:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003536:	4b04      	ldr	r3, [pc, #16]	@ (8003548 <HAL_RCC_ClockConfig+0x240>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 030f 	and.w	r3, r3, #15
 800353e:	683a      	ldr	r2, [r7, #0]
 8003540:	429a      	cmp	r2, r3
 8003542:	d005      	beq.n	8003550 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e086      	b.n	8003656 <HAL_RCC_ClockConfig+0x34e>
 8003548:	52002000 	.word	0x52002000
 800354c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0304 	and.w	r3, r3, #4
 8003558:	2b00      	cmp	r3, #0
 800355a:	d010      	beq.n	800357e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	691a      	ldr	r2, [r3, #16]
 8003560:	4b3f      	ldr	r3, [pc, #252]	@ (8003660 <HAL_RCC_ClockConfig+0x358>)
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003568:	429a      	cmp	r2, r3
 800356a:	d208      	bcs.n	800357e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800356c:	4b3c      	ldr	r3, [pc, #240]	@ (8003660 <HAL_RCC_ClockConfig+0x358>)
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	691b      	ldr	r3, [r3, #16]
 8003578:	4939      	ldr	r1, [pc, #228]	@ (8003660 <HAL_RCC_ClockConfig+0x358>)
 800357a:	4313      	orrs	r3, r2
 800357c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0308 	and.w	r3, r3, #8
 8003586:	2b00      	cmp	r3, #0
 8003588:	d010      	beq.n	80035ac <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	695a      	ldr	r2, [r3, #20]
 800358e:	4b34      	ldr	r3, [pc, #208]	@ (8003660 <HAL_RCC_ClockConfig+0x358>)
 8003590:	69db      	ldr	r3, [r3, #28]
 8003592:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003596:	429a      	cmp	r2, r3
 8003598:	d208      	bcs.n	80035ac <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800359a:	4b31      	ldr	r3, [pc, #196]	@ (8003660 <HAL_RCC_ClockConfig+0x358>)
 800359c:	69db      	ldr	r3, [r3, #28]
 800359e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	492e      	ldr	r1, [pc, #184]	@ (8003660 <HAL_RCC_ClockConfig+0x358>)
 80035a8:	4313      	orrs	r3, r2
 80035aa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0310 	and.w	r3, r3, #16
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d010      	beq.n	80035da <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	699a      	ldr	r2, [r3, #24]
 80035bc:	4b28      	ldr	r3, [pc, #160]	@ (8003660 <HAL_RCC_ClockConfig+0x358>)
 80035be:	69db      	ldr	r3, [r3, #28]
 80035c0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d208      	bcs.n	80035da <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80035c8:	4b25      	ldr	r3, [pc, #148]	@ (8003660 <HAL_RCC_ClockConfig+0x358>)
 80035ca:	69db      	ldr	r3, [r3, #28]
 80035cc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	699b      	ldr	r3, [r3, #24]
 80035d4:	4922      	ldr	r1, [pc, #136]	@ (8003660 <HAL_RCC_ClockConfig+0x358>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0320 	and.w	r3, r3, #32
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d010      	beq.n	8003608 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	69da      	ldr	r2, [r3, #28]
 80035ea:	4b1d      	ldr	r3, [pc, #116]	@ (8003660 <HAL_RCC_ClockConfig+0x358>)
 80035ec:	6a1b      	ldr	r3, [r3, #32]
 80035ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d208      	bcs.n	8003608 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80035f6:	4b1a      	ldr	r3, [pc, #104]	@ (8003660 <HAL_RCC_ClockConfig+0x358>)
 80035f8:	6a1b      	ldr	r3, [r3, #32]
 80035fa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	69db      	ldr	r3, [r3, #28]
 8003602:	4917      	ldr	r1, [pc, #92]	@ (8003660 <HAL_RCC_ClockConfig+0x358>)
 8003604:	4313      	orrs	r3, r2
 8003606:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003608:	f000 f834 	bl	8003674 <HAL_RCC_GetSysClockFreq>
 800360c:	4602      	mov	r2, r0
 800360e:	4b14      	ldr	r3, [pc, #80]	@ (8003660 <HAL_RCC_ClockConfig+0x358>)
 8003610:	699b      	ldr	r3, [r3, #24]
 8003612:	0a1b      	lsrs	r3, r3, #8
 8003614:	f003 030f 	and.w	r3, r3, #15
 8003618:	4912      	ldr	r1, [pc, #72]	@ (8003664 <HAL_RCC_ClockConfig+0x35c>)
 800361a:	5ccb      	ldrb	r3, [r1, r3]
 800361c:	f003 031f 	and.w	r3, r3, #31
 8003620:	fa22 f303 	lsr.w	r3, r2, r3
 8003624:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003626:	4b0e      	ldr	r3, [pc, #56]	@ (8003660 <HAL_RCC_ClockConfig+0x358>)
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	f003 030f 	and.w	r3, r3, #15
 800362e:	4a0d      	ldr	r2, [pc, #52]	@ (8003664 <HAL_RCC_ClockConfig+0x35c>)
 8003630:	5cd3      	ldrb	r3, [r2, r3]
 8003632:	f003 031f 	and.w	r3, r3, #31
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	fa22 f303 	lsr.w	r3, r2, r3
 800363c:	4a0a      	ldr	r2, [pc, #40]	@ (8003668 <HAL_RCC_ClockConfig+0x360>)
 800363e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003640:	4a0a      	ldr	r2, [pc, #40]	@ (800366c <HAL_RCC_ClockConfig+0x364>)
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003646:	4b0a      	ldr	r3, [pc, #40]	@ (8003670 <HAL_RCC_ClockConfig+0x368>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4618      	mov	r0, r3
 800364c:	f7fe f84e 	bl	80016ec <HAL_InitTick>
 8003650:	4603      	mov	r3, r0
 8003652:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003654:	7bfb      	ldrb	r3, [r7, #15]
}
 8003656:	4618      	mov	r0, r3
 8003658:	3718      	adds	r7, #24
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	58024400 	.word	0x58024400
 8003664:	0800ba58 	.word	0x0800ba58
 8003668:	24000004 	.word	0x24000004
 800366c:	24000000 	.word	0x24000000
 8003670:	24000008 	.word	0x24000008

08003674 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003674:	b480      	push	{r7}
 8003676:	b089      	sub	sp, #36	@ 0x24
 8003678:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800367a:	4bb3      	ldr	r3, [pc, #716]	@ (8003948 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003682:	2b18      	cmp	r3, #24
 8003684:	f200 8155 	bhi.w	8003932 <HAL_RCC_GetSysClockFreq+0x2be>
 8003688:	a201      	add	r2, pc, #4	@ (adr r2, 8003690 <HAL_RCC_GetSysClockFreq+0x1c>)
 800368a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800368e:	bf00      	nop
 8003690:	080036f5 	.word	0x080036f5
 8003694:	08003933 	.word	0x08003933
 8003698:	08003933 	.word	0x08003933
 800369c:	08003933 	.word	0x08003933
 80036a0:	08003933 	.word	0x08003933
 80036a4:	08003933 	.word	0x08003933
 80036a8:	08003933 	.word	0x08003933
 80036ac:	08003933 	.word	0x08003933
 80036b0:	0800371b 	.word	0x0800371b
 80036b4:	08003933 	.word	0x08003933
 80036b8:	08003933 	.word	0x08003933
 80036bc:	08003933 	.word	0x08003933
 80036c0:	08003933 	.word	0x08003933
 80036c4:	08003933 	.word	0x08003933
 80036c8:	08003933 	.word	0x08003933
 80036cc:	08003933 	.word	0x08003933
 80036d0:	08003721 	.word	0x08003721
 80036d4:	08003933 	.word	0x08003933
 80036d8:	08003933 	.word	0x08003933
 80036dc:	08003933 	.word	0x08003933
 80036e0:	08003933 	.word	0x08003933
 80036e4:	08003933 	.word	0x08003933
 80036e8:	08003933 	.word	0x08003933
 80036ec:	08003933 	.word	0x08003933
 80036f0:	08003727 	.word	0x08003727
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80036f4:	4b94      	ldr	r3, [pc, #592]	@ (8003948 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0320 	and.w	r3, r3, #32
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d009      	beq.n	8003714 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003700:	4b91      	ldr	r3, [pc, #580]	@ (8003948 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	08db      	lsrs	r3, r3, #3
 8003706:	f003 0303 	and.w	r3, r3, #3
 800370a:	4a90      	ldr	r2, [pc, #576]	@ (800394c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800370c:	fa22 f303 	lsr.w	r3, r2, r3
 8003710:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003712:	e111      	b.n	8003938 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003714:	4b8d      	ldr	r3, [pc, #564]	@ (800394c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003716:	61bb      	str	r3, [r7, #24]
      break;
 8003718:	e10e      	b.n	8003938 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800371a:	4b8d      	ldr	r3, [pc, #564]	@ (8003950 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800371c:	61bb      	str	r3, [r7, #24]
      break;
 800371e:	e10b      	b.n	8003938 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003720:	4b8c      	ldr	r3, [pc, #560]	@ (8003954 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003722:	61bb      	str	r3, [r7, #24]
      break;
 8003724:	e108      	b.n	8003938 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003726:	4b88      	ldr	r3, [pc, #544]	@ (8003948 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800372a:	f003 0303 	and.w	r3, r3, #3
 800372e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003730:	4b85      	ldr	r3, [pc, #532]	@ (8003948 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003734:	091b      	lsrs	r3, r3, #4
 8003736:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800373a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800373c:	4b82      	ldr	r3, [pc, #520]	@ (8003948 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800373e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003740:	f003 0301 	and.w	r3, r3, #1
 8003744:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003746:	4b80      	ldr	r3, [pc, #512]	@ (8003948 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003748:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800374a:	08db      	lsrs	r3, r3, #3
 800374c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003750:	68fa      	ldr	r2, [r7, #12]
 8003752:	fb02 f303 	mul.w	r3, r2, r3
 8003756:	ee07 3a90 	vmov	s15, r3
 800375a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800375e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	2b00      	cmp	r3, #0
 8003766:	f000 80e1 	beq.w	800392c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	2b02      	cmp	r3, #2
 800376e:	f000 8083 	beq.w	8003878 <HAL_RCC_GetSysClockFreq+0x204>
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	2b02      	cmp	r3, #2
 8003776:	f200 80a1 	bhi.w	80038bc <HAL_RCC_GetSysClockFreq+0x248>
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d003      	beq.n	8003788 <HAL_RCC_GetSysClockFreq+0x114>
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	2b01      	cmp	r3, #1
 8003784:	d056      	beq.n	8003834 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003786:	e099      	b.n	80038bc <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003788:	4b6f      	ldr	r3, [pc, #444]	@ (8003948 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0320 	and.w	r3, r3, #32
 8003790:	2b00      	cmp	r3, #0
 8003792:	d02d      	beq.n	80037f0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003794:	4b6c      	ldr	r3, [pc, #432]	@ (8003948 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	08db      	lsrs	r3, r3, #3
 800379a:	f003 0303 	and.w	r3, r3, #3
 800379e:	4a6b      	ldr	r2, [pc, #428]	@ (800394c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80037a0:	fa22 f303 	lsr.w	r3, r2, r3
 80037a4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	ee07 3a90 	vmov	s15, r3
 80037ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	ee07 3a90 	vmov	s15, r3
 80037b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037be:	4b62      	ldr	r3, [pc, #392]	@ (8003948 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037c6:	ee07 3a90 	vmov	s15, r3
 80037ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80037d2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003958 <HAL_RCC_GetSysClockFreq+0x2e4>
 80037d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80037e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037ea:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80037ee:	e087      	b.n	8003900 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	ee07 3a90 	vmov	s15, r3
 80037f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037fa:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800395c <HAL_RCC_GetSysClockFreq+0x2e8>
 80037fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003802:	4b51      	ldr	r3, [pc, #324]	@ (8003948 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003806:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800380a:	ee07 3a90 	vmov	s15, r3
 800380e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003812:	ed97 6a02 	vldr	s12, [r7, #8]
 8003816:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003958 <HAL_RCC_GetSysClockFreq+0x2e4>
 800381a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800381e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003822:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003826:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800382a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800382e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003832:	e065      	b.n	8003900 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	ee07 3a90 	vmov	s15, r3
 800383a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800383e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003960 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003842:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003846:	4b40      	ldr	r3, [pc, #256]	@ (8003948 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800384a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800384e:	ee07 3a90 	vmov	s15, r3
 8003852:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003856:	ed97 6a02 	vldr	s12, [r7, #8]
 800385a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003958 <HAL_RCC_GetSysClockFreq+0x2e4>
 800385e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003862:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003866:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800386a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800386e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003872:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003876:	e043      	b.n	8003900 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	ee07 3a90 	vmov	s15, r3
 800387e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003882:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003964 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003886:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800388a:	4b2f      	ldr	r3, [pc, #188]	@ (8003948 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800388c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800388e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003892:	ee07 3a90 	vmov	s15, r3
 8003896:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800389a:	ed97 6a02 	vldr	s12, [r7, #8]
 800389e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003958 <HAL_RCC_GetSysClockFreq+0x2e4>
 80038a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80038ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80038ba:	e021      	b.n	8003900 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	ee07 3a90 	vmov	s15, r3
 80038c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038c6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003960 <HAL_RCC_GetSysClockFreq+0x2ec>
 80038ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038ce:	4b1e      	ldr	r3, [pc, #120]	@ (8003948 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038d6:	ee07 3a90 	vmov	s15, r3
 80038da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038de:	ed97 6a02 	vldr	s12, [r7, #8]
 80038e2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003958 <HAL_RCC_GetSysClockFreq+0x2e4>
 80038e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80038f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80038fe:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003900:	4b11      	ldr	r3, [pc, #68]	@ (8003948 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003904:	0a5b      	lsrs	r3, r3, #9
 8003906:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800390a:	3301      	adds	r3, #1
 800390c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	ee07 3a90 	vmov	s15, r3
 8003914:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003918:	edd7 6a07 	vldr	s13, [r7, #28]
 800391c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003920:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003924:	ee17 3a90 	vmov	r3, s15
 8003928:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800392a:	e005      	b.n	8003938 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800392c:	2300      	movs	r3, #0
 800392e:	61bb      	str	r3, [r7, #24]
      break;
 8003930:	e002      	b.n	8003938 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003932:	4b07      	ldr	r3, [pc, #28]	@ (8003950 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003934:	61bb      	str	r3, [r7, #24]
      break;
 8003936:	bf00      	nop
  }

  return sysclockfreq;
 8003938:	69bb      	ldr	r3, [r7, #24]
}
 800393a:	4618      	mov	r0, r3
 800393c:	3724      	adds	r7, #36	@ 0x24
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	58024400 	.word	0x58024400
 800394c:	03d09000 	.word	0x03d09000
 8003950:	003d0900 	.word	0x003d0900
 8003954:	007a1200 	.word	0x007a1200
 8003958:	46000000 	.word	0x46000000
 800395c:	4c742400 	.word	0x4c742400
 8003960:	4a742400 	.word	0x4a742400
 8003964:	4af42400 	.word	0x4af42400

08003968 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800396e:	f7ff fe81 	bl	8003674 <HAL_RCC_GetSysClockFreq>
 8003972:	4602      	mov	r2, r0
 8003974:	4b10      	ldr	r3, [pc, #64]	@ (80039b8 <HAL_RCC_GetHCLKFreq+0x50>)
 8003976:	699b      	ldr	r3, [r3, #24]
 8003978:	0a1b      	lsrs	r3, r3, #8
 800397a:	f003 030f 	and.w	r3, r3, #15
 800397e:	490f      	ldr	r1, [pc, #60]	@ (80039bc <HAL_RCC_GetHCLKFreq+0x54>)
 8003980:	5ccb      	ldrb	r3, [r1, r3]
 8003982:	f003 031f 	and.w	r3, r3, #31
 8003986:	fa22 f303 	lsr.w	r3, r2, r3
 800398a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800398c:	4b0a      	ldr	r3, [pc, #40]	@ (80039b8 <HAL_RCC_GetHCLKFreq+0x50>)
 800398e:	699b      	ldr	r3, [r3, #24]
 8003990:	f003 030f 	and.w	r3, r3, #15
 8003994:	4a09      	ldr	r2, [pc, #36]	@ (80039bc <HAL_RCC_GetHCLKFreq+0x54>)
 8003996:	5cd3      	ldrb	r3, [r2, r3]
 8003998:	f003 031f 	and.w	r3, r3, #31
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	fa22 f303 	lsr.w	r3, r2, r3
 80039a2:	4a07      	ldr	r2, [pc, #28]	@ (80039c0 <HAL_RCC_GetHCLKFreq+0x58>)
 80039a4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80039a6:	4a07      	ldr	r2, [pc, #28]	@ (80039c4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80039ac:	4b04      	ldr	r3, [pc, #16]	@ (80039c0 <HAL_RCC_GetHCLKFreq+0x58>)
 80039ae:	681b      	ldr	r3, [r3, #0]
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3708      	adds	r7, #8
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	58024400 	.word	0x58024400
 80039bc:	0800ba58 	.word	0x0800ba58
 80039c0:	24000004 	.word	0x24000004
 80039c4:	24000000 	.word	0x24000000

080039c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80039cc:	f7ff ffcc 	bl	8003968 <HAL_RCC_GetHCLKFreq>
 80039d0:	4602      	mov	r2, r0
 80039d2:	4b06      	ldr	r3, [pc, #24]	@ (80039ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80039d4:	69db      	ldr	r3, [r3, #28]
 80039d6:	091b      	lsrs	r3, r3, #4
 80039d8:	f003 0307 	and.w	r3, r3, #7
 80039dc:	4904      	ldr	r1, [pc, #16]	@ (80039f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80039de:	5ccb      	ldrb	r3, [r1, r3]
 80039e0:	f003 031f 	and.w	r3, r3, #31
 80039e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	58024400 	.word	0x58024400
 80039f0:	0800ba58 	.word	0x0800ba58

080039f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80039f8:	f7ff ffb6 	bl	8003968 <HAL_RCC_GetHCLKFreq>
 80039fc:	4602      	mov	r2, r0
 80039fe:	4b06      	ldr	r3, [pc, #24]	@ (8003a18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a00:	69db      	ldr	r3, [r3, #28]
 8003a02:	0a1b      	lsrs	r3, r3, #8
 8003a04:	f003 0307 	and.w	r3, r3, #7
 8003a08:	4904      	ldr	r1, [pc, #16]	@ (8003a1c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a0a:	5ccb      	ldrb	r3, [r1, r3]
 8003a0c:	f003 031f 	and.w	r3, r3, #31
 8003a10:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	58024400 	.word	0x58024400
 8003a1c:	0800ba58 	.word	0x0800ba58

08003a20 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a24:	b0ca      	sub	sp, #296	@ 0x128
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a32:	2300      	movs	r3, #0
 8003a34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a40:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003a44:	2500      	movs	r5, #0
 8003a46:	ea54 0305 	orrs.w	r3, r4, r5
 8003a4a:	d049      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003a4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a50:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a52:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003a56:	d02f      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003a58:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003a5c:	d828      	bhi.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003a5e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a62:	d01a      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003a64:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a68:	d822      	bhi.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d003      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003a6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a72:	d007      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003a74:	e01c      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a76:	4bb8      	ldr	r3, [pc, #736]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a7a:	4ab7      	ldr	r2, [pc, #732]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a80:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003a82:	e01a      	b.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a88:	3308      	adds	r3, #8
 8003a8a:	2102      	movs	r1, #2
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f001 fc8f 	bl	80053b0 <RCCEx_PLL2_Config>
 8003a92:	4603      	mov	r3, r0
 8003a94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003a98:	e00f      	b.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a9e:	3328      	adds	r3, #40	@ 0x28
 8003aa0:	2102      	movs	r1, #2
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f001 fd36 	bl	8005514 <RCCEx_PLL3_Config>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003aae:	e004      	b.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ab6:	e000      	b.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003ab8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003aba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d10a      	bne.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003ac2:	4ba5      	ldr	r3, [pc, #660]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ac4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ac6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ace:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ad0:	4aa1      	ldr	r2, [pc, #644]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ad2:	430b      	orrs	r3, r1
 8003ad4:	6513      	str	r3, [r2, #80]	@ 0x50
 8003ad6:	e003      	b.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ad8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003adc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ae8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003aec:	f04f 0900 	mov.w	r9, #0
 8003af0:	ea58 0309 	orrs.w	r3, r8, r9
 8003af4:	d047      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003afa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003afc:	2b04      	cmp	r3, #4
 8003afe:	d82a      	bhi.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003b00:	a201      	add	r2, pc, #4	@ (adr r2, 8003b08 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b06:	bf00      	nop
 8003b08:	08003b1d 	.word	0x08003b1d
 8003b0c:	08003b2b 	.word	0x08003b2b
 8003b10:	08003b41 	.word	0x08003b41
 8003b14:	08003b5f 	.word	0x08003b5f
 8003b18:	08003b5f 	.word	0x08003b5f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b1c:	4b8e      	ldr	r3, [pc, #568]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b20:	4a8d      	ldr	r2, [pc, #564]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003b28:	e01a      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b2e:	3308      	adds	r3, #8
 8003b30:	2100      	movs	r1, #0
 8003b32:	4618      	mov	r0, r3
 8003b34:	f001 fc3c 	bl	80053b0 <RCCEx_PLL2_Config>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003b3e:	e00f      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b44:	3328      	adds	r3, #40	@ 0x28
 8003b46:	2100      	movs	r1, #0
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f001 fce3 	bl	8005514 <RCCEx_PLL3_Config>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003b54:	e004      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b5c:	e000      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003b5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d10a      	bne.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b68:	4b7b      	ldr	r3, [pc, #492]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b6c:	f023 0107 	bic.w	r1, r3, #7
 8003b70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b76:	4a78      	ldr	r2, [pc, #480]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b78:	430b      	orrs	r3, r1
 8003b7a:	6513      	str	r3, [r2, #80]	@ 0x50
 8003b7c:	e003      	b.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b82:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b8e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003b92:	f04f 0b00 	mov.w	fp, #0
 8003b96:	ea5a 030b 	orrs.w	r3, sl, fp
 8003b9a:	d04c      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003b9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ba0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ba2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ba6:	d030      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003ba8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bac:	d829      	bhi.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003bae:	2bc0      	cmp	r3, #192	@ 0xc0
 8003bb0:	d02d      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003bb2:	2bc0      	cmp	r3, #192	@ 0xc0
 8003bb4:	d825      	bhi.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003bb6:	2b80      	cmp	r3, #128	@ 0x80
 8003bb8:	d018      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003bba:	2b80      	cmp	r3, #128	@ 0x80
 8003bbc:	d821      	bhi.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d002      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003bc2:	2b40      	cmp	r3, #64	@ 0x40
 8003bc4:	d007      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003bc6:	e01c      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bc8:	4b63      	ldr	r3, [pc, #396]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bcc:	4a62      	ldr	r2, [pc, #392]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003bce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bd2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003bd4:	e01c      	b.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bda:	3308      	adds	r3, #8
 8003bdc:	2100      	movs	r1, #0
 8003bde:	4618      	mov	r0, r3
 8003be0:	f001 fbe6 	bl	80053b0 <RCCEx_PLL2_Config>
 8003be4:	4603      	mov	r3, r0
 8003be6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003bea:	e011      	b.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bf0:	3328      	adds	r3, #40	@ 0x28
 8003bf2:	2100      	movs	r1, #0
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f001 fc8d 	bl	8005514 <RCCEx_PLL3_Config>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003c00:	e006      	b.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c08:	e002      	b.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003c0a:	bf00      	nop
 8003c0c:	e000      	b.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003c0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d10a      	bne.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003c18:	4b4f      	ldr	r3, [pc, #316]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c1c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003c20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c26:	4a4c      	ldr	r2, [pc, #304]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c28:	430b      	orrs	r3, r1
 8003c2a:	6513      	str	r3, [r2, #80]	@ 0x50
 8003c2c:	e003      	b.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c3e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003c42:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003c46:	2300      	movs	r3, #0
 8003c48:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003c4c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003c50:	460b      	mov	r3, r1
 8003c52:	4313      	orrs	r3, r2
 8003c54:	d053      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003c56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c5a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003c5e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003c62:	d035      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003c64:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003c68:	d82e      	bhi.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003c6a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003c6e:	d031      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003c70:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003c74:	d828      	bhi.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003c76:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c7a:	d01a      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003c7c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c80:	d822      	bhi.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d003      	beq.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003c86:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003c8a:	d007      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003c8c:	e01c      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c8e:	4b32      	ldr	r3, [pc, #200]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c92:	4a31      	ldr	r2, [pc, #196]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c98:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c9a:	e01c      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ca0:	3308      	adds	r3, #8
 8003ca2:	2100      	movs	r1, #0
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f001 fb83 	bl	80053b0 <RCCEx_PLL2_Config>
 8003caa:	4603      	mov	r3, r0
 8003cac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003cb0:	e011      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cb6:	3328      	adds	r3, #40	@ 0x28
 8003cb8:	2100      	movs	r1, #0
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f001 fc2a 	bl	8005514 <RCCEx_PLL3_Config>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003cc6:	e006      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003cce:	e002      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003cd0:	bf00      	nop
 8003cd2:	e000      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003cd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d10b      	bne.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003cde:	4b1e      	ldr	r3, [pc, #120]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ce0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ce2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003cee:	4a1a      	ldr	r2, [pc, #104]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003cf0:	430b      	orrs	r3, r1
 8003cf2:	6593      	str	r3, [r2, #88]	@ 0x58
 8003cf4:	e003      	b.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cf6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cfa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d06:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003d0a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003d0e:	2300      	movs	r3, #0
 8003d10:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003d14:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003d18:	460b      	mov	r3, r1
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	d056      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d22:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003d26:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003d2a:	d038      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003d2c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003d30:	d831      	bhi.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003d32:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003d36:	d034      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003d38:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003d3c:	d82b      	bhi.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003d3e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003d42:	d01d      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003d44:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003d48:	d825      	bhi.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d006      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003d4e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d52:	d00a      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003d54:	e01f      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003d56:	bf00      	nop
 8003d58:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d5c:	4ba2      	ldr	r3, [pc, #648]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d60:	4aa1      	ldr	r2, [pc, #644]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d68:	e01c      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d6e:	3308      	adds	r3, #8
 8003d70:	2100      	movs	r1, #0
 8003d72:	4618      	mov	r0, r3
 8003d74:	f001 fb1c 	bl	80053b0 <RCCEx_PLL2_Config>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003d7e:	e011      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003d80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d84:	3328      	adds	r3, #40	@ 0x28
 8003d86:	2100      	movs	r1, #0
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f001 fbc3 	bl	8005514 <RCCEx_PLL3_Config>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d94:	e006      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d9c:	e002      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003d9e:	bf00      	nop
 8003da0:	e000      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003da2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003da4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d10b      	bne.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003dac:	4b8e      	ldr	r3, [pc, #568]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003dae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003db0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003db8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003dbc:	4a8a      	ldr	r2, [pc, #552]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003dbe:	430b      	orrs	r3, r1
 8003dc0:	6593      	str	r3, [r2, #88]	@ 0x58
 8003dc2:	e003      	b.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dc8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003dd8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003ddc:	2300      	movs	r3, #0
 8003dde:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003de2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003de6:	460b      	mov	r3, r1
 8003de8:	4313      	orrs	r3, r2
 8003dea:	d03a      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003df0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003df2:	2b30      	cmp	r3, #48	@ 0x30
 8003df4:	d01f      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003df6:	2b30      	cmp	r3, #48	@ 0x30
 8003df8:	d819      	bhi.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003dfa:	2b20      	cmp	r3, #32
 8003dfc:	d00c      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003dfe:	2b20      	cmp	r3, #32
 8003e00:	d815      	bhi.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d019      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003e06:	2b10      	cmp	r3, #16
 8003e08:	d111      	bne.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e0a:	4b77      	ldr	r3, [pc, #476]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e0e:	4a76      	ldr	r2, [pc, #472]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e14:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003e16:	e011      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e1c:	3308      	adds	r3, #8
 8003e1e:	2102      	movs	r1, #2
 8003e20:	4618      	mov	r0, r3
 8003e22:	f001 fac5 	bl	80053b0 <RCCEx_PLL2_Config>
 8003e26:	4603      	mov	r3, r0
 8003e28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003e2c:	e006      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e34:	e002      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003e36:	bf00      	nop
 8003e38:	e000      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003e3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d10a      	bne.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003e44:	4b68      	ldr	r3, [pc, #416]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e48:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003e4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e52:	4a65      	ldr	r2, [pc, #404]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e54:	430b      	orrs	r3, r1
 8003e56:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e58:	e003      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e6a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003e6e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003e72:	2300      	movs	r3, #0
 8003e74:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003e78:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	d051      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e88:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e8c:	d035      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003e8e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e92:	d82e      	bhi.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003e94:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003e98:	d031      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003e9a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003e9e:	d828      	bhi.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003ea0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ea4:	d01a      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003ea6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003eaa:	d822      	bhi.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d003      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003eb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003eb4:	d007      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003eb6:	e01c      	b.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003eb8:	4b4b      	ldr	r3, [pc, #300]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ebc:	4a4a      	ldr	r2, [pc, #296]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ebe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ec2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003ec4:	e01c      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eca:	3308      	adds	r3, #8
 8003ecc:	2100      	movs	r1, #0
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f001 fa6e 	bl	80053b0 <RCCEx_PLL2_Config>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003eda:	e011      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003edc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ee0:	3328      	adds	r3, #40	@ 0x28
 8003ee2:	2100      	movs	r1, #0
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f001 fb15 	bl	8005514 <RCCEx_PLL3_Config>
 8003eea:	4603      	mov	r3, r0
 8003eec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003ef0:	e006      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ef8:	e002      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003efa:	bf00      	nop
 8003efc:	e000      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003efe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d10a      	bne.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003f08:	4b37      	ldr	r3, [pc, #220]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f0c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f16:	4a34      	ldr	r2, [pc, #208]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f18:	430b      	orrs	r3, r1
 8003f1a:	6513      	str	r3, [r2, #80]	@ 0x50
 8003f1c:	e003      	b.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f2e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003f32:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003f36:	2300      	movs	r3, #0
 8003f38:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003f3c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003f40:	460b      	mov	r3, r1
 8003f42:	4313      	orrs	r3, r2
 8003f44:	d056      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f50:	d033      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003f52:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f56:	d82c      	bhi.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003f58:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003f5c:	d02f      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003f5e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003f62:	d826      	bhi.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003f64:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003f68:	d02b      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003f6a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003f6e:	d820      	bhi.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003f70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003f74:	d012      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003f76:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003f7a:	d81a      	bhi.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d022      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003f80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f84:	d115      	bne.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f8a:	3308      	adds	r3, #8
 8003f8c:	2101      	movs	r1, #1
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f001 fa0e 	bl	80053b0 <RCCEx_PLL2_Config>
 8003f94:	4603      	mov	r3, r0
 8003f96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003f9a:	e015      	b.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fa0:	3328      	adds	r3, #40	@ 0x28
 8003fa2:	2101      	movs	r1, #1
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f001 fab5 	bl	8005514 <RCCEx_PLL3_Config>
 8003faa:	4603      	mov	r3, r0
 8003fac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003fb0:	e00a      	b.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003fb8:	e006      	b.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003fba:	bf00      	nop
 8003fbc:	e004      	b.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003fbe:	bf00      	nop
 8003fc0:	e002      	b.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003fc2:	bf00      	nop
 8003fc4:	e000      	b.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003fc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fc8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d10d      	bne.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003fd0:	4b05      	ldr	r3, [pc, #20]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003fd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fd4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fdc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003fde:	4a02      	ldr	r2, [pc, #8]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003fe0:	430b      	orrs	r3, r1
 8003fe2:	6513      	str	r3, [r2, #80]	@ 0x50
 8003fe4:	e006      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003fe6:	bf00      	nop
 8003fe8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ff0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ffc:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004000:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004004:	2300      	movs	r3, #0
 8004006:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800400a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800400e:	460b      	mov	r3, r1
 8004010:	4313      	orrs	r3, r2
 8004012:	d055      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004014:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004018:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800401c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004020:	d033      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004022:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004026:	d82c      	bhi.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004028:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800402c:	d02f      	beq.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800402e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004032:	d826      	bhi.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004034:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004038:	d02b      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800403a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800403e:	d820      	bhi.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004040:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004044:	d012      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004046:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800404a:	d81a      	bhi.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800404c:	2b00      	cmp	r3, #0
 800404e:	d022      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004050:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004054:	d115      	bne.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004056:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800405a:	3308      	adds	r3, #8
 800405c:	2101      	movs	r1, #1
 800405e:	4618      	mov	r0, r3
 8004060:	f001 f9a6 	bl	80053b0 <RCCEx_PLL2_Config>
 8004064:	4603      	mov	r3, r0
 8004066:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800406a:	e015      	b.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800406c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004070:	3328      	adds	r3, #40	@ 0x28
 8004072:	2101      	movs	r1, #1
 8004074:	4618      	mov	r0, r3
 8004076:	f001 fa4d 	bl	8005514 <RCCEx_PLL3_Config>
 800407a:	4603      	mov	r3, r0
 800407c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004080:	e00a      	b.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004088:	e006      	b.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800408a:	bf00      	nop
 800408c:	e004      	b.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800408e:	bf00      	nop
 8004090:	e002      	b.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004092:	bf00      	nop
 8004094:	e000      	b.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004096:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004098:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800409c:	2b00      	cmp	r3, #0
 800409e:	d10b      	bne.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80040a0:	4ba3      	ldr	r3, [pc, #652]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040a4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80040a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80040b0:	4a9f      	ldr	r2, [pc, #636]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040b2:	430b      	orrs	r3, r1
 80040b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80040b6:	e003      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80040c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80040cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80040d0:	2300      	movs	r3, #0
 80040d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80040d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80040da:	460b      	mov	r3, r1
 80040dc:	4313      	orrs	r3, r2
 80040de:	d037      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80040e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040ea:	d00e      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80040ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040f0:	d816      	bhi.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d018      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80040f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80040fa:	d111      	bne.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040fc:	4b8c      	ldr	r3, [pc, #560]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004100:	4a8b      	ldr	r2, [pc, #556]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004102:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004106:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004108:	e00f      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800410a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800410e:	3308      	adds	r3, #8
 8004110:	2101      	movs	r1, #1
 8004112:	4618      	mov	r0, r3
 8004114:	f001 f94c 	bl	80053b0 <RCCEx_PLL2_Config>
 8004118:	4603      	mov	r3, r0
 800411a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800411e:	e004      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004126:	e000      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004128:	bf00      	nop
    }

    if (ret == HAL_OK)
 800412a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10a      	bne.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004132:	4b7f      	ldr	r3, [pc, #508]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004134:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004136:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800413a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800413e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004140:	4a7b      	ldr	r2, [pc, #492]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004142:	430b      	orrs	r3, r1
 8004144:	6513      	str	r3, [r2, #80]	@ 0x50
 8004146:	e003      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004148:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800414c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004150:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004158:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800415c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004160:	2300      	movs	r3, #0
 8004162:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004166:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800416a:	460b      	mov	r3, r1
 800416c:	4313      	orrs	r3, r2
 800416e:	d039      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004170:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004174:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004176:	2b03      	cmp	r3, #3
 8004178:	d81c      	bhi.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800417a:	a201      	add	r2, pc, #4	@ (adr r2, 8004180 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800417c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004180:	080041bd 	.word	0x080041bd
 8004184:	08004191 	.word	0x08004191
 8004188:	0800419f 	.word	0x0800419f
 800418c:	080041bd 	.word	0x080041bd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004190:	4b67      	ldr	r3, [pc, #412]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004194:	4a66      	ldr	r2, [pc, #408]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004196:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800419a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800419c:	e00f      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800419e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041a2:	3308      	adds	r3, #8
 80041a4:	2102      	movs	r1, #2
 80041a6:	4618      	mov	r0, r3
 80041a8:	f001 f902 	bl	80053b0 <RCCEx_PLL2_Config>
 80041ac:	4603      	mov	r3, r0
 80041ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80041b2:	e004      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041ba:	e000      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80041bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d10a      	bne.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80041c6:	4b5a      	ldr	r3, [pc, #360]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041ca:	f023 0103 	bic.w	r1, r3, #3
 80041ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041d4:	4a56      	ldr	r2, [pc, #344]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041d6:	430b      	orrs	r3, r1
 80041d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80041da:	e003      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ec:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80041f0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80041f4:	2300      	movs	r3, #0
 80041f6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80041fa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80041fe:	460b      	mov	r3, r1
 8004200:	4313      	orrs	r3, r2
 8004202:	f000 809f 	beq.w	8004344 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004206:	4b4b      	ldr	r3, [pc, #300]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a4a      	ldr	r2, [pc, #296]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800420c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004210:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004212:	f7fd fab5 	bl	8001780 <HAL_GetTick>
 8004216:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800421a:	e00b      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800421c:	f7fd fab0 	bl	8001780 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	2b64      	cmp	r3, #100	@ 0x64
 800422a:	d903      	bls.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004232:	e005      	b.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004234:	4b3f      	ldr	r3, [pc, #252]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800423c:	2b00      	cmp	r3, #0
 800423e:	d0ed      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004240:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004244:	2b00      	cmp	r3, #0
 8004246:	d179      	bne.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004248:	4b39      	ldr	r3, [pc, #228]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800424a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800424c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004250:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004254:	4053      	eors	r3, r2
 8004256:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800425a:	2b00      	cmp	r3, #0
 800425c:	d015      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800425e:	4b34      	ldr	r3, [pc, #208]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004260:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004262:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004266:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800426a:	4b31      	ldr	r3, [pc, #196]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800426c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800426e:	4a30      	ldr	r2, [pc, #192]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004270:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004274:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004276:	4b2e      	ldr	r3, [pc, #184]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004278:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800427a:	4a2d      	ldr	r2, [pc, #180]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800427c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004280:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004282:	4a2b      	ldr	r2, [pc, #172]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004284:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004288:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800428a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800428e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004292:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004296:	d118      	bne.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004298:	f7fd fa72 	bl	8001780 <HAL_GetTick>
 800429c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042a0:	e00d      	b.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042a2:	f7fd fa6d 	bl	8001780 <HAL_GetTick>
 80042a6:	4602      	mov	r2, r0
 80042a8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80042ac:	1ad2      	subs	r2, r2, r3
 80042ae:	f241 3388 	movw	r3, #5000	@ 0x1388
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d903      	bls.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80042bc:	e005      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042be:	4b1c      	ldr	r3, [pc, #112]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d0eb      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80042ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d129      	bne.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80042da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042e2:	d10e      	bne.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80042e4:	4b12      	ldr	r3, [pc, #72]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80042ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80042f4:	091a      	lsrs	r2, r3, #4
 80042f6:	4b10      	ldr	r3, [pc, #64]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80042f8:	4013      	ands	r3, r2
 80042fa:	4a0d      	ldr	r2, [pc, #52]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042fc:	430b      	orrs	r3, r1
 80042fe:	6113      	str	r3, [r2, #16]
 8004300:	e005      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004302:	4b0b      	ldr	r3, [pc, #44]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	4a0a      	ldr	r2, [pc, #40]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004308:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800430c:	6113      	str	r3, [r2, #16]
 800430e:	4b08      	ldr	r3, [pc, #32]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004310:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004312:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004316:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800431a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800431e:	4a04      	ldr	r2, [pc, #16]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004320:	430b      	orrs	r3, r1
 8004322:	6713      	str	r3, [r2, #112]	@ 0x70
 8004324:	e00e      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004326:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800432a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800432e:	e009      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004330:	58024400 	.word	0x58024400
 8004334:	58024800 	.word	0x58024800
 8004338:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800433c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004340:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004344:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800434c:	f002 0301 	and.w	r3, r2, #1
 8004350:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004354:	2300      	movs	r3, #0
 8004356:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800435a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800435e:	460b      	mov	r3, r1
 8004360:	4313      	orrs	r3, r2
 8004362:	f000 8089 	beq.w	8004478 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004366:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800436a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800436c:	2b28      	cmp	r3, #40	@ 0x28
 800436e:	d86b      	bhi.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004370:	a201      	add	r2, pc, #4	@ (adr r2, 8004378 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004376:	bf00      	nop
 8004378:	08004451 	.word	0x08004451
 800437c:	08004449 	.word	0x08004449
 8004380:	08004449 	.word	0x08004449
 8004384:	08004449 	.word	0x08004449
 8004388:	08004449 	.word	0x08004449
 800438c:	08004449 	.word	0x08004449
 8004390:	08004449 	.word	0x08004449
 8004394:	08004449 	.word	0x08004449
 8004398:	0800441d 	.word	0x0800441d
 800439c:	08004449 	.word	0x08004449
 80043a0:	08004449 	.word	0x08004449
 80043a4:	08004449 	.word	0x08004449
 80043a8:	08004449 	.word	0x08004449
 80043ac:	08004449 	.word	0x08004449
 80043b0:	08004449 	.word	0x08004449
 80043b4:	08004449 	.word	0x08004449
 80043b8:	08004433 	.word	0x08004433
 80043bc:	08004449 	.word	0x08004449
 80043c0:	08004449 	.word	0x08004449
 80043c4:	08004449 	.word	0x08004449
 80043c8:	08004449 	.word	0x08004449
 80043cc:	08004449 	.word	0x08004449
 80043d0:	08004449 	.word	0x08004449
 80043d4:	08004449 	.word	0x08004449
 80043d8:	08004451 	.word	0x08004451
 80043dc:	08004449 	.word	0x08004449
 80043e0:	08004449 	.word	0x08004449
 80043e4:	08004449 	.word	0x08004449
 80043e8:	08004449 	.word	0x08004449
 80043ec:	08004449 	.word	0x08004449
 80043f0:	08004449 	.word	0x08004449
 80043f4:	08004449 	.word	0x08004449
 80043f8:	08004451 	.word	0x08004451
 80043fc:	08004449 	.word	0x08004449
 8004400:	08004449 	.word	0x08004449
 8004404:	08004449 	.word	0x08004449
 8004408:	08004449 	.word	0x08004449
 800440c:	08004449 	.word	0x08004449
 8004410:	08004449 	.word	0x08004449
 8004414:	08004449 	.word	0x08004449
 8004418:	08004451 	.word	0x08004451
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800441c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004420:	3308      	adds	r3, #8
 8004422:	2101      	movs	r1, #1
 8004424:	4618      	mov	r0, r3
 8004426:	f000 ffc3 	bl	80053b0 <RCCEx_PLL2_Config>
 800442a:	4603      	mov	r3, r0
 800442c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004430:	e00f      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004432:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004436:	3328      	adds	r3, #40	@ 0x28
 8004438:	2101      	movs	r1, #1
 800443a:	4618      	mov	r0, r3
 800443c:	f001 f86a 	bl	8005514 <RCCEx_PLL3_Config>
 8004440:	4603      	mov	r3, r0
 8004442:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004446:	e004      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800444e:	e000      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004450:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004452:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004456:	2b00      	cmp	r3, #0
 8004458:	d10a      	bne.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800445a:	4bbf      	ldr	r3, [pc, #764]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800445c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800445e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004462:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004466:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004468:	4abb      	ldr	r2, [pc, #748]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800446a:	430b      	orrs	r3, r1
 800446c:	6553      	str	r3, [r2, #84]	@ 0x54
 800446e:	e003      	b.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004470:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004474:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004478:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800447c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004480:	f002 0302 	and.w	r3, r2, #2
 8004484:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004488:	2300      	movs	r3, #0
 800448a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800448e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004492:	460b      	mov	r3, r1
 8004494:	4313      	orrs	r3, r2
 8004496:	d041      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004498:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800449c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800449e:	2b05      	cmp	r3, #5
 80044a0:	d824      	bhi.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80044a2:	a201      	add	r2, pc, #4	@ (adr r2, 80044a8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80044a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a8:	080044f5 	.word	0x080044f5
 80044ac:	080044c1 	.word	0x080044c1
 80044b0:	080044d7 	.word	0x080044d7
 80044b4:	080044f5 	.word	0x080044f5
 80044b8:	080044f5 	.word	0x080044f5
 80044bc:	080044f5 	.word	0x080044f5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80044c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044c4:	3308      	adds	r3, #8
 80044c6:	2101      	movs	r1, #1
 80044c8:	4618      	mov	r0, r3
 80044ca:	f000 ff71 	bl	80053b0 <RCCEx_PLL2_Config>
 80044ce:	4603      	mov	r3, r0
 80044d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80044d4:	e00f      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80044d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044da:	3328      	adds	r3, #40	@ 0x28
 80044dc:	2101      	movs	r1, #1
 80044de:	4618      	mov	r0, r3
 80044e0:	f001 f818 	bl	8005514 <RCCEx_PLL3_Config>
 80044e4:	4603      	mov	r3, r0
 80044e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80044ea:	e004      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80044f2:	e000      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80044f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d10a      	bne.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80044fe:	4b96      	ldr	r3, [pc, #600]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004500:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004502:	f023 0107 	bic.w	r1, r3, #7
 8004506:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800450a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800450c:	4a92      	ldr	r2, [pc, #584]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800450e:	430b      	orrs	r3, r1
 8004510:	6553      	str	r3, [r2, #84]	@ 0x54
 8004512:	e003      	b.n	800451c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004514:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004518:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800451c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004524:	f002 0304 	and.w	r3, r2, #4
 8004528:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800452c:	2300      	movs	r3, #0
 800452e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004532:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004536:	460b      	mov	r3, r1
 8004538:	4313      	orrs	r3, r2
 800453a:	d044      	beq.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800453c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004540:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004544:	2b05      	cmp	r3, #5
 8004546:	d825      	bhi.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004548:	a201      	add	r2, pc, #4	@ (adr r2, 8004550 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800454a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800454e:	bf00      	nop
 8004550:	0800459d 	.word	0x0800459d
 8004554:	08004569 	.word	0x08004569
 8004558:	0800457f 	.word	0x0800457f
 800455c:	0800459d 	.word	0x0800459d
 8004560:	0800459d 	.word	0x0800459d
 8004564:	0800459d 	.word	0x0800459d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004568:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800456c:	3308      	adds	r3, #8
 800456e:	2101      	movs	r1, #1
 8004570:	4618      	mov	r0, r3
 8004572:	f000 ff1d 	bl	80053b0 <RCCEx_PLL2_Config>
 8004576:	4603      	mov	r3, r0
 8004578:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800457c:	e00f      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800457e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004582:	3328      	adds	r3, #40	@ 0x28
 8004584:	2101      	movs	r1, #1
 8004586:	4618      	mov	r0, r3
 8004588:	f000 ffc4 	bl	8005514 <RCCEx_PLL3_Config>
 800458c:	4603      	mov	r3, r0
 800458e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004592:	e004      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800459a:	e000      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800459c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800459e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d10b      	bne.n	80045be <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80045a6:	4b6c      	ldr	r3, [pc, #432]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80045a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045aa:	f023 0107 	bic.w	r1, r3, #7
 80045ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045b6:	4a68      	ldr	r2, [pc, #416]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80045b8:	430b      	orrs	r3, r1
 80045ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80045bc:	e003      	b.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80045c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ce:	f002 0320 	and.w	r3, r2, #32
 80045d2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80045d6:	2300      	movs	r3, #0
 80045d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80045dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80045e0:	460b      	mov	r3, r1
 80045e2:	4313      	orrs	r3, r2
 80045e4:	d055      	beq.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80045e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80045f2:	d033      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80045f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80045f8:	d82c      	bhi.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80045fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045fe:	d02f      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004600:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004604:	d826      	bhi.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004606:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800460a:	d02b      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800460c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004610:	d820      	bhi.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004612:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004616:	d012      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004618:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800461c:	d81a      	bhi.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800461e:	2b00      	cmp	r3, #0
 8004620:	d022      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004622:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004626:	d115      	bne.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004628:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800462c:	3308      	adds	r3, #8
 800462e:	2100      	movs	r1, #0
 8004630:	4618      	mov	r0, r3
 8004632:	f000 febd 	bl	80053b0 <RCCEx_PLL2_Config>
 8004636:	4603      	mov	r3, r0
 8004638:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800463c:	e015      	b.n	800466a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800463e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004642:	3328      	adds	r3, #40	@ 0x28
 8004644:	2102      	movs	r1, #2
 8004646:	4618      	mov	r0, r3
 8004648:	f000 ff64 	bl	8005514 <RCCEx_PLL3_Config>
 800464c:	4603      	mov	r3, r0
 800464e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004652:	e00a      	b.n	800466a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800465a:	e006      	b.n	800466a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800465c:	bf00      	nop
 800465e:	e004      	b.n	800466a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004660:	bf00      	nop
 8004662:	e002      	b.n	800466a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004664:	bf00      	nop
 8004666:	e000      	b.n	800466a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004668:	bf00      	nop
    }

    if (ret == HAL_OK)
 800466a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800466e:	2b00      	cmp	r3, #0
 8004670:	d10b      	bne.n	800468a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004672:	4b39      	ldr	r3, [pc, #228]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004674:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004676:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800467a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800467e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004682:	4a35      	ldr	r2, [pc, #212]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004684:	430b      	orrs	r3, r1
 8004686:	6553      	str	r3, [r2, #84]	@ 0x54
 8004688:	e003      	b.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800468a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800468e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004692:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800469a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800469e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80046a2:	2300      	movs	r3, #0
 80046a4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80046a8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80046ac:	460b      	mov	r3, r1
 80046ae:	4313      	orrs	r3, r2
 80046b0:	d058      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80046b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80046ba:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80046be:	d033      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80046c0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80046c4:	d82c      	bhi.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80046c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046ca:	d02f      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80046cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046d0:	d826      	bhi.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80046d2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80046d6:	d02b      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80046d8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80046dc:	d820      	bhi.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80046de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046e2:	d012      	beq.n	800470a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80046e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046e8:	d81a      	bhi.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d022      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80046ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046f2:	d115      	bne.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046f8:	3308      	adds	r3, #8
 80046fa:	2100      	movs	r1, #0
 80046fc:	4618      	mov	r0, r3
 80046fe:	f000 fe57 	bl	80053b0 <RCCEx_PLL2_Config>
 8004702:	4603      	mov	r3, r0
 8004704:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004708:	e015      	b.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800470a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800470e:	3328      	adds	r3, #40	@ 0x28
 8004710:	2102      	movs	r1, #2
 8004712:	4618      	mov	r0, r3
 8004714:	f000 fefe 	bl	8005514 <RCCEx_PLL3_Config>
 8004718:	4603      	mov	r3, r0
 800471a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800471e:	e00a      	b.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004726:	e006      	b.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004728:	bf00      	nop
 800472a:	e004      	b.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800472c:	bf00      	nop
 800472e:	e002      	b.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004730:	bf00      	nop
 8004732:	e000      	b.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004734:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004736:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800473a:	2b00      	cmp	r3, #0
 800473c:	d10e      	bne.n	800475c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800473e:	4b06      	ldr	r3, [pc, #24]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004740:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004742:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004746:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800474a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800474e:	4a02      	ldr	r2, [pc, #8]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004750:	430b      	orrs	r3, r1
 8004752:	6593      	str	r3, [r2, #88]	@ 0x58
 8004754:	e006      	b.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004756:	bf00      	nop
 8004758:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800475c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004760:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004764:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800476c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004770:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004774:	2300      	movs	r3, #0
 8004776:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800477a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800477e:	460b      	mov	r3, r1
 8004780:	4313      	orrs	r3, r2
 8004782:	d055      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004784:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004788:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800478c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004790:	d033      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004792:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004796:	d82c      	bhi.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004798:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800479c:	d02f      	beq.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800479e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047a2:	d826      	bhi.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80047a4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80047a8:	d02b      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80047aa:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80047ae:	d820      	bhi.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80047b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80047b4:	d012      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80047b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80047ba:	d81a      	bhi.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d022      	beq.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80047c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047c4:	d115      	bne.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80047c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ca:	3308      	adds	r3, #8
 80047cc:	2100      	movs	r1, #0
 80047ce:	4618      	mov	r0, r3
 80047d0:	f000 fdee 	bl	80053b0 <RCCEx_PLL2_Config>
 80047d4:	4603      	mov	r3, r0
 80047d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80047da:	e015      	b.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80047dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047e0:	3328      	adds	r3, #40	@ 0x28
 80047e2:	2102      	movs	r1, #2
 80047e4:	4618      	mov	r0, r3
 80047e6:	f000 fe95 	bl	8005514 <RCCEx_PLL3_Config>
 80047ea:	4603      	mov	r3, r0
 80047ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80047f0:	e00a      	b.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80047f8:	e006      	b.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80047fa:	bf00      	nop
 80047fc:	e004      	b.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80047fe:	bf00      	nop
 8004800:	e002      	b.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004802:	bf00      	nop
 8004804:	e000      	b.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004806:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004808:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800480c:	2b00      	cmp	r3, #0
 800480e:	d10b      	bne.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004810:	4ba1      	ldr	r3, [pc, #644]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004812:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004814:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004818:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800481c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004820:	4a9d      	ldr	r2, [pc, #628]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004822:	430b      	orrs	r3, r1
 8004824:	6593      	str	r3, [r2, #88]	@ 0x58
 8004826:	e003      	b.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004828:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800482c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004830:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004838:	f002 0308 	and.w	r3, r2, #8
 800483c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004840:	2300      	movs	r3, #0
 8004842:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004846:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800484a:	460b      	mov	r3, r1
 800484c:	4313      	orrs	r3, r2
 800484e:	d01e      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004850:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004854:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004858:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800485c:	d10c      	bne.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800485e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004862:	3328      	adds	r3, #40	@ 0x28
 8004864:	2102      	movs	r1, #2
 8004866:	4618      	mov	r0, r3
 8004868:	f000 fe54 	bl	8005514 <RCCEx_PLL3_Config>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d002      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004878:	4b87      	ldr	r3, [pc, #540]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800487a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800487c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004880:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004884:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004888:	4a83      	ldr	r2, [pc, #524]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800488a:	430b      	orrs	r3, r1
 800488c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800488e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004896:	f002 0310 	and.w	r3, r2, #16
 800489a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800489e:	2300      	movs	r3, #0
 80048a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80048a4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80048a8:	460b      	mov	r3, r1
 80048aa:	4313      	orrs	r3, r2
 80048ac:	d01e      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80048ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80048b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048ba:	d10c      	bne.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80048bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048c0:	3328      	adds	r3, #40	@ 0x28
 80048c2:	2102      	movs	r1, #2
 80048c4:	4618      	mov	r0, r3
 80048c6:	f000 fe25 	bl	8005514 <RCCEx_PLL3_Config>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d002      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80048d6:	4b70      	ldr	r3, [pc, #448]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80048d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048da:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80048de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80048e6:	4a6c      	ldr	r2, [pc, #432]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80048e8:	430b      	orrs	r3, r1
 80048ea:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80048ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80048f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80048fc:	2300      	movs	r3, #0
 80048fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004902:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004906:	460b      	mov	r3, r1
 8004908:	4313      	orrs	r3, r2
 800490a:	d03e      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800490c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004910:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004914:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004918:	d022      	beq.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800491a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800491e:	d81b      	bhi.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004920:	2b00      	cmp	r3, #0
 8004922:	d003      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004924:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004928:	d00b      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800492a:	e015      	b.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800492c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004930:	3308      	adds	r3, #8
 8004932:	2100      	movs	r1, #0
 8004934:	4618      	mov	r0, r3
 8004936:	f000 fd3b 	bl	80053b0 <RCCEx_PLL2_Config>
 800493a:	4603      	mov	r3, r0
 800493c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004940:	e00f      	b.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004942:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004946:	3328      	adds	r3, #40	@ 0x28
 8004948:	2102      	movs	r1, #2
 800494a:	4618      	mov	r0, r3
 800494c:	f000 fde2 	bl	8005514 <RCCEx_PLL3_Config>
 8004950:	4603      	mov	r3, r0
 8004952:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004956:	e004      	b.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800495e:	e000      	b.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004960:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004962:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004966:	2b00      	cmp	r3, #0
 8004968:	d10b      	bne.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800496a:	4b4b      	ldr	r3, [pc, #300]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800496c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800496e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004972:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004976:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800497a:	4a47      	ldr	r2, [pc, #284]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800497c:	430b      	orrs	r3, r1
 800497e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004980:	e003      	b.n	800498a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004982:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004986:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800498a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800498e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004992:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004996:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004998:	2300      	movs	r3, #0
 800499a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800499c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80049a0:	460b      	mov	r3, r1
 80049a2:	4313      	orrs	r3, r2
 80049a4:	d03b      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80049a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049ae:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80049b2:	d01f      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80049b4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80049b8:	d818      	bhi.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80049ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049be:	d003      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80049c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80049c4:	d007      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80049c6:	e011      	b.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049c8:	4b33      	ldr	r3, [pc, #204]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049cc:	4a32      	ldr	r2, [pc, #200]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80049d4:	e00f      	b.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80049d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049da:	3328      	adds	r3, #40	@ 0x28
 80049dc:	2101      	movs	r1, #1
 80049de:	4618      	mov	r0, r3
 80049e0:	f000 fd98 	bl	8005514 <RCCEx_PLL3_Config>
 80049e4:	4603      	mov	r3, r0
 80049e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80049ea:	e004      	b.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80049f2:	e000      	b.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80049f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d10b      	bne.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80049fe:	4b26      	ldr	r3, [pc, #152]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a02:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a0e:	4a22      	ldr	r2, [pc, #136]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a10:	430b      	orrs	r3, r1
 8004a12:	6553      	str	r3, [r2, #84]	@ 0x54
 8004a14:	e003      	b.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a26:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004a2a:	673b      	str	r3, [r7, #112]	@ 0x70
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	677b      	str	r3, [r7, #116]	@ 0x74
 8004a30:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004a34:	460b      	mov	r3, r1
 8004a36:	4313      	orrs	r3, r2
 8004a38:	d034      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d003      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004a44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a48:	d007      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004a4a:	e011      	b.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a4c:	4b12      	ldr	r3, [pc, #72]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a50:	4a11      	ldr	r2, [pc, #68]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004a58:	e00e      	b.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a5e:	3308      	adds	r3, #8
 8004a60:	2102      	movs	r1, #2
 8004a62:	4618      	mov	r0, r3
 8004a64:	f000 fca4 	bl	80053b0 <RCCEx_PLL2_Config>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004a6e:	e003      	b.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d10d      	bne.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004a80:	4b05      	ldr	r3, [pc, #20]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a84:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a8e:	4a02      	ldr	r2, [pc, #8]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a90:	430b      	orrs	r3, r1
 8004a92:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004a94:	e006      	b.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004a96:	bf00      	nop
 8004a98:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004aa0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aac:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004ab0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004ab6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004aba:	460b      	mov	r3, r1
 8004abc:	4313      	orrs	r3, r2
 8004abe:	d00c      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ac4:	3328      	adds	r3, #40	@ 0x28
 8004ac6:	2102      	movs	r1, #2
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f000 fd23 	bl	8005514 <RCCEx_PLL3_Config>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d002      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004ae6:	663b      	str	r3, [r7, #96]	@ 0x60
 8004ae8:	2300      	movs	r3, #0
 8004aea:	667b      	str	r3, [r7, #100]	@ 0x64
 8004aec:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004af0:	460b      	mov	r3, r1
 8004af2:	4313      	orrs	r3, r2
 8004af4:	d038      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004afa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004afe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b02:	d018      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004b04:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b08:	d811      	bhi.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004b0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b0e:	d014      	beq.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004b10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b14:	d80b      	bhi.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d011      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004b1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b1e:	d106      	bne.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b20:	4bc3      	ldr	r3, [pc, #780]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b24:	4ac2      	ldr	r2, [pc, #776]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004b2c:	e008      	b.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b34:	e004      	b.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004b36:	bf00      	nop
 8004b38:	e002      	b.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004b3a:	bf00      	nop
 8004b3c:	e000      	b.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004b3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d10b      	bne.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b48:	4bb9      	ldr	r3, [pc, #740]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b4c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004b50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b58:	4ab5      	ldr	r2, [pc, #724]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b5a:	430b      	orrs	r3, r1
 8004b5c:	6553      	str	r3, [r2, #84]	@ 0x54
 8004b5e:	e003      	b.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b70:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004b74:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004b76:	2300      	movs	r3, #0
 8004b78:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b7a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004b7e:	460b      	mov	r3, r1
 8004b80:	4313      	orrs	r3, r2
 8004b82:	d009      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004b84:	4baa      	ldr	r3, [pc, #680]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b88:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b92:	4aa7      	ldr	r2, [pc, #668]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b94:	430b      	orrs	r3, r1
 8004b96:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004ba4:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	657b      	str	r3, [r7, #84]	@ 0x54
 8004baa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004bae:	460b      	mov	r3, r1
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	d00a      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004bb4:	4b9e      	ldr	r3, [pc, #632]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bb6:	691b      	ldr	r3, [r3, #16]
 8004bb8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bc0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004bc4:	4a9a      	ldr	r2, [pc, #616]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bc6:	430b      	orrs	r3, r1
 8004bc8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bd2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004bd6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004bd8:	2300      	movs	r3, #0
 8004bda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004bdc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004be0:	460b      	mov	r3, r1
 8004be2:	4313      	orrs	r3, r2
 8004be4:	d009      	beq.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004be6:	4b92      	ldr	r3, [pc, #584]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004be8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bea:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bf2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004bf4:	4a8e      	ldr	r2, [pc, #568]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bf6:	430b      	orrs	r3, r1
 8004bf8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c02:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004c06:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c08:	2300      	movs	r3, #0
 8004c0a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c0c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004c10:	460b      	mov	r3, r1
 8004c12:	4313      	orrs	r3, r2
 8004c14:	d00e      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004c16:	4b86      	ldr	r3, [pc, #536]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	4a85      	ldr	r2, [pc, #532]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c1c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004c20:	6113      	str	r3, [r2, #16]
 8004c22:	4b83      	ldr	r3, [pc, #524]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c24:	6919      	ldr	r1, [r3, #16]
 8004c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c2a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004c2e:	4a80      	ldr	r2, [pc, #512]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c30:	430b      	orrs	r3, r1
 8004c32:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004c34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c3c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004c40:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004c42:	2300      	movs	r3, #0
 8004c44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c46:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004c4a:	460b      	mov	r3, r1
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	d009      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004c50:	4b77      	ldr	r3, [pc, #476]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c54:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c5e:	4a74      	ldr	r2, [pc, #464]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c60:	430b      	orrs	r3, r1
 8004c62:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c6c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004c70:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c72:	2300      	movs	r3, #0
 8004c74:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c76:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	d00a      	beq.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004c80:	4b6b      	ldr	r3, [pc, #428]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c84:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004c88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c90:	4a67      	ldr	r2, [pc, #412]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c92:	430b      	orrs	r3, r1
 8004c94:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c9e:	2100      	movs	r1, #0
 8004ca0:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004ca2:	f003 0301 	and.w	r3, r3, #1
 8004ca6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ca8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004cac:	460b      	mov	r3, r1
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	d011      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cb6:	3308      	adds	r3, #8
 8004cb8:	2100      	movs	r1, #0
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f000 fb78 	bl	80053b0 <RCCEx_PLL2_Config>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004cc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d003      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cd2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cde:	2100      	movs	r1, #0
 8004ce0:	6239      	str	r1, [r7, #32]
 8004ce2:	f003 0302 	and.w	r3, r3, #2
 8004ce6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ce8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004cec:	460b      	mov	r3, r1
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	d011      	beq.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cf6:	3308      	adds	r3, #8
 8004cf8:	2101      	movs	r1, #1
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f000 fb58 	bl	80053b0 <RCCEx_PLL2_Config>
 8004d00:	4603      	mov	r3, r0
 8004d02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004d06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d003      	beq.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d1e:	2100      	movs	r1, #0
 8004d20:	61b9      	str	r1, [r7, #24]
 8004d22:	f003 0304 	and.w	r3, r3, #4
 8004d26:	61fb      	str	r3, [r7, #28]
 8004d28:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004d2c:	460b      	mov	r3, r1
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	d011      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004d32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d36:	3308      	adds	r3, #8
 8004d38:	2102      	movs	r1, #2
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f000 fb38 	bl	80053b0 <RCCEx_PLL2_Config>
 8004d40:	4603      	mov	r3, r0
 8004d42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004d46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d003      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d5e:	2100      	movs	r1, #0
 8004d60:	6139      	str	r1, [r7, #16]
 8004d62:	f003 0308 	and.w	r3, r3, #8
 8004d66:	617b      	str	r3, [r7, #20]
 8004d68:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004d6c:	460b      	mov	r3, r1
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	d011      	beq.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d76:	3328      	adds	r3, #40	@ 0x28
 8004d78:	2100      	movs	r1, #0
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f000 fbca 	bl	8005514 <RCCEx_PLL3_Config>
 8004d80:	4603      	mov	r3, r0
 8004d82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004d86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d003      	beq.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d9e:	2100      	movs	r1, #0
 8004da0:	60b9      	str	r1, [r7, #8]
 8004da2:	f003 0310 	and.w	r3, r3, #16
 8004da6:	60fb      	str	r3, [r7, #12]
 8004da8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004dac:	460b      	mov	r3, r1
 8004dae:	4313      	orrs	r3, r2
 8004db0:	d011      	beq.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004db6:	3328      	adds	r3, #40	@ 0x28
 8004db8:	2101      	movs	r1, #1
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f000 fbaa 	bl	8005514 <RCCEx_PLL3_Config>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004dc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d003      	beq.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dd2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dde:	2100      	movs	r1, #0
 8004de0:	6039      	str	r1, [r7, #0]
 8004de2:	f003 0320 	and.w	r3, r3, #32
 8004de6:	607b      	str	r3, [r7, #4]
 8004de8:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004dec:	460b      	mov	r3, r1
 8004dee:	4313      	orrs	r3, r2
 8004df0:	d011      	beq.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004df6:	3328      	adds	r3, #40	@ 0x28
 8004df8:	2102      	movs	r1, #2
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f000 fb8a 	bl	8005514 <RCCEx_PLL3_Config>
 8004e00:	4603      	mov	r3, r0
 8004e02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004e06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d003      	beq.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004e16:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d101      	bne.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	e000      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e30:	58024400 	.word	0x58024400

08004e34 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004e38:	f7fe fd96 	bl	8003968 <HAL_RCC_GetHCLKFreq>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	4b06      	ldr	r3, [pc, #24]	@ (8004e58 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004e40:	6a1b      	ldr	r3, [r3, #32]
 8004e42:	091b      	lsrs	r3, r3, #4
 8004e44:	f003 0307 	and.w	r3, r3, #7
 8004e48:	4904      	ldr	r1, [pc, #16]	@ (8004e5c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004e4a:	5ccb      	ldrb	r3, [r1, r3]
 8004e4c:	f003 031f 	and.w	r3, r3, #31
 8004e50:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	58024400 	.word	0x58024400
 8004e5c:	0800ba58 	.word	0x0800ba58

08004e60 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b089      	sub	sp, #36	@ 0x24
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004e68:	4ba1      	ldr	r3, [pc, #644]	@ (80050f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e6c:	f003 0303 	and.w	r3, r3, #3
 8004e70:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004e72:	4b9f      	ldr	r3, [pc, #636]	@ (80050f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e76:	0b1b      	lsrs	r3, r3, #12
 8004e78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e7c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004e7e:	4b9c      	ldr	r3, [pc, #624]	@ (80050f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e82:	091b      	lsrs	r3, r3, #4
 8004e84:	f003 0301 	and.w	r3, r3, #1
 8004e88:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004e8a:	4b99      	ldr	r3, [pc, #612]	@ (80050f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e8e:	08db      	lsrs	r3, r3, #3
 8004e90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e94:	693a      	ldr	r2, [r7, #16]
 8004e96:	fb02 f303 	mul.w	r3, r2, r3
 8004e9a:	ee07 3a90 	vmov	s15, r3
 8004e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ea2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	f000 8111 	beq.w	80050d0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	f000 8083 	beq.w	8004fbc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	f200 80a1 	bhi.w	8005000 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d003      	beq.n	8004ecc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d056      	beq.n	8004f78 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004eca:	e099      	b.n	8005000 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ecc:	4b88      	ldr	r3, [pc, #544]	@ (80050f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0320 	and.w	r3, r3, #32
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d02d      	beq.n	8004f34 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ed8:	4b85      	ldr	r3, [pc, #532]	@ (80050f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	08db      	lsrs	r3, r3, #3
 8004ede:	f003 0303 	and.w	r3, r3, #3
 8004ee2:	4a84      	ldr	r2, [pc, #528]	@ (80050f4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004ee4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ee8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	ee07 3a90 	vmov	s15, r3
 8004ef0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	ee07 3a90 	vmov	s15, r3
 8004efa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004efe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f02:	4b7b      	ldr	r3, [pc, #492]	@ (80050f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f0a:	ee07 3a90 	vmov	s15, r3
 8004f0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f12:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f16:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80050f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f2e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004f32:	e087      	b.n	8005044 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	ee07 3a90 	vmov	s15, r3
 8004f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f3e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80050fc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004f42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f46:	4b6a      	ldr	r3, [pc, #424]	@ (80050f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f4e:	ee07 3a90 	vmov	s15, r3
 8004f52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f56:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f5a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80050f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f76:	e065      	b.n	8005044 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	ee07 3a90 	vmov	s15, r3
 8004f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f82:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005100 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004f86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f8a:	4b59      	ldr	r3, [pc, #356]	@ (80050f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f92:	ee07 3a90 	vmov	s15, r3
 8004f96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f9e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80050f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004fa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004faa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004fae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004fba:	e043      	b.n	8005044 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	ee07 3a90 	vmov	s15, r3
 8004fc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fc6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005104 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004fca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fce:	4b48      	ldr	r3, [pc, #288]	@ (80050f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fd6:	ee07 3a90 	vmov	s15, r3
 8004fda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fde:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fe2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80050f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004fe6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ff2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ffa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ffe:	e021      	b.n	8005044 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	ee07 3a90 	vmov	s15, r3
 8005006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800500a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005100 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800500e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005012:	4b37      	ldr	r3, [pc, #220]	@ (80050f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005016:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800501a:	ee07 3a90 	vmov	s15, r3
 800501e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005022:	ed97 6a03 	vldr	s12, [r7, #12]
 8005026:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80050f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800502a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800502e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005032:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005036:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800503a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800503e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005042:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005044:	4b2a      	ldr	r3, [pc, #168]	@ (80050f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005048:	0a5b      	lsrs	r3, r3, #9
 800504a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800504e:	ee07 3a90 	vmov	s15, r3
 8005052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005056:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800505a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800505e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005062:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005066:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800506a:	ee17 2a90 	vmov	r2, s15
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005072:	4b1f      	ldr	r3, [pc, #124]	@ (80050f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005074:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005076:	0c1b      	lsrs	r3, r3, #16
 8005078:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800507c:	ee07 3a90 	vmov	s15, r3
 8005080:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005084:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005088:	ee37 7a87 	vadd.f32	s14, s15, s14
 800508c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005090:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005094:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005098:	ee17 2a90 	vmov	r2, s15
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80050a0:	4b13      	ldr	r3, [pc, #76]	@ (80050f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050a4:	0e1b      	lsrs	r3, r3, #24
 80050a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050aa:	ee07 3a90 	vmov	s15, r3
 80050ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80050b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80050be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050c6:	ee17 2a90 	vmov	r2, s15
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80050ce:	e008      	b.n	80050e2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2200      	movs	r2, #0
 80050e0:	609a      	str	r2, [r3, #8]
}
 80050e2:	bf00      	nop
 80050e4:	3724      	adds	r7, #36	@ 0x24
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr
 80050ee:	bf00      	nop
 80050f0:	58024400 	.word	0x58024400
 80050f4:	03d09000 	.word	0x03d09000
 80050f8:	46000000 	.word	0x46000000
 80050fc:	4c742400 	.word	0x4c742400
 8005100:	4a742400 	.word	0x4a742400
 8005104:	4af42400 	.word	0x4af42400

08005108 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005108:	b480      	push	{r7}
 800510a:	b089      	sub	sp, #36	@ 0x24
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005110:	4ba1      	ldr	r3, [pc, #644]	@ (8005398 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005114:	f003 0303 	and.w	r3, r3, #3
 8005118:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800511a:	4b9f      	ldr	r3, [pc, #636]	@ (8005398 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800511c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800511e:	0d1b      	lsrs	r3, r3, #20
 8005120:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005124:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005126:	4b9c      	ldr	r3, [pc, #624]	@ (8005398 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800512a:	0a1b      	lsrs	r3, r3, #8
 800512c:	f003 0301 	and.w	r3, r3, #1
 8005130:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005132:	4b99      	ldr	r3, [pc, #612]	@ (8005398 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005136:	08db      	lsrs	r3, r3, #3
 8005138:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800513c:	693a      	ldr	r2, [r7, #16]
 800513e:	fb02 f303 	mul.w	r3, r2, r3
 8005142:	ee07 3a90 	vmov	s15, r3
 8005146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800514a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	2b00      	cmp	r3, #0
 8005152:	f000 8111 	beq.w	8005378 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	2b02      	cmp	r3, #2
 800515a:	f000 8083 	beq.w	8005264 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	2b02      	cmp	r3, #2
 8005162:	f200 80a1 	bhi.w	80052a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d003      	beq.n	8005174 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	2b01      	cmp	r3, #1
 8005170:	d056      	beq.n	8005220 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005172:	e099      	b.n	80052a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005174:	4b88      	ldr	r3, [pc, #544]	@ (8005398 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0320 	and.w	r3, r3, #32
 800517c:	2b00      	cmp	r3, #0
 800517e:	d02d      	beq.n	80051dc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005180:	4b85      	ldr	r3, [pc, #532]	@ (8005398 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	08db      	lsrs	r3, r3, #3
 8005186:	f003 0303 	and.w	r3, r3, #3
 800518a:	4a84      	ldr	r2, [pc, #528]	@ (800539c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800518c:	fa22 f303 	lsr.w	r3, r2, r3
 8005190:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	ee07 3a90 	vmov	s15, r3
 8005198:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	ee07 3a90 	vmov	s15, r3
 80051a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051aa:	4b7b      	ldr	r3, [pc, #492]	@ (8005398 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051b2:	ee07 3a90 	vmov	s15, r3
 80051b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80051be:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80053a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80051c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051d6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80051da:	e087      	b.n	80052ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	ee07 3a90 	vmov	s15, r3
 80051e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051e6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80053a4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80051ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051ee:	4b6a      	ldr	r3, [pc, #424]	@ (8005398 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051f6:	ee07 3a90 	vmov	s15, r3
 80051fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005202:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80053a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005206:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800520a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800520e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005212:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800521a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800521e:	e065      	b.n	80052ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	ee07 3a90 	vmov	s15, r3
 8005226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800522a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80053a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800522e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005232:	4b59      	ldr	r3, [pc, #356]	@ (8005398 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005236:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800523a:	ee07 3a90 	vmov	s15, r3
 800523e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005242:	ed97 6a03 	vldr	s12, [r7, #12]
 8005246:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80053a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800524a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800524e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005252:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005256:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800525a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800525e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005262:	e043      	b.n	80052ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	ee07 3a90 	vmov	s15, r3
 800526a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800526e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80053ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005272:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005276:	4b48      	ldr	r3, [pc, #288]	@ (8005398 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800527a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800527e:	ee07 3a90 	vmov	s15, r3
 8005282:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005286:	ed97 6a03 	vldr	s12, [r7, #12]
 800528a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80053a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800528e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005292:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005296:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800529a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800529e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80052a6:	e021      	b.n	80052ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	ee07 3a90 	vmov	s15, r3
 80052ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052b2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80053a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80052b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052ba:	4b37      	ldr	r3, [pc, #220]	@ (8005398 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052c2:	ee07 3a90 	vmov	s15, r3
 80052c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80052ce:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80053a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80052d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80052ea:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80052ec:	4b2a      	ldr	r3, [pc, #168]	@ (8005398 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052f0:	0a5b      	lsrs	r3, r3, #9
 80052f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052f6:	ee07 3a90 	vmov	s15, r3
 80052fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005302:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005306:	edd7 6a07 	vldr	s13, [r7, #28]
 800530a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800530e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005312:	ee17 2a90 	vmov	r2, s15
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800531a:	4b1f      	ldr	r3, [pc, #124]	@ (8005398 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800531c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800531e:	0c1b      	lsrs	r3, r3, #16
 8005320:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005324:	ee07 3a90 	vmov	s15, r3
 8005328:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800532c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005330:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005334:	edd7 6a07 	vldr	s13, [r7, #28]
 8005338:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800533c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005340:	ee17 2a90 	vmov	r2, s15
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005348:	4b13      	ldr	r3, [pc, #76]	@ (8005398 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800534a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800534c:	0e1b      	lsrs	r3, r3, #24
 800534e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005352:	ee07 3a90 	vmov	s15, r3
 8005356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800535a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800535e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005362:	edd7 6a07 	vldr	s13, [r7, #28]
 8005366:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800536a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800536e:	ee17 2a90 	vmov	r2, s15
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005376:	e008      	b.n	800538a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	609a      	str	r2, [r3, #8]
}
 800538a:	bf00      	nop
 800538c:	3724      	adds	r7, #36	@ 0x24
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr
 8005396:	bf00      	nop
 8005398:	58024400 	.word	0x58024400
 800539c:	03d09000 	.word	0x03d09000
 80053a0:	46000000 	.word	0x46000000
 80053a4:	4c742400 	.word	0x4c742400
 80053a8:	4a742400 	.word	0x4a742400
 80053ac:	4af42400 	.word	0x4af42400

080053b0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b084      	sub	sp, #16
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80053ba:	2300      	movs	r3, #0
 80053bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80053be:	4b53      	ldr	r3, [pc, #332]	@ (800550c <RCCEx_PLL2_Config+0x15c>)
 80053c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053c2:	f003 0303 	and.w	r3, r3, #3
 80053c6:	2b03      	cmp	r3, #3
 80053c8:	d101      	bne.n	80053ce <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e099      	b.n	8005502 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80053ce:	4b4f      	ldr	r3, [pc, #316]	@ (800550c <RCCEx_PLL2_Config+0x15c>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a4e      	ldr	r2, [pc, #312]	@ (800550c <RCCEx_PLL2_Config+0x15c>)
 80053d4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80053d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053da:	f7fc f9d1 	bl	8001780 <HAL_GetTick>
 80053de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80053e0:	e008      	b.n	80053f4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80053e2:	f7fc f9cd 	bl	8001780 <HAL_GetTick>
 80053e6:	4602      	mov	r2, r0
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d901      	bls.n	80053f4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80053f0:	2303      	movs	r3, #3
 80053f2:	e086      	b.n	8005502 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80053f4:	4b45      	ldr	r3, [pc, #276]	@ (800550c <RCCEx_PLL2_Config+0x15c>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d1f0      	bne.n	80053e2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005400:	4b42      	ldr	r3, [pc, #264]	@ (800550c <RCCEx_PLL2_Config+0x15c>)
 8005402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005404:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	031b      	lsls	r3, r3, #12
 800540e:	493f      	ldr	r1, [pc, #252]	@ (800550c <RCCEx_PLL2_Config+0x15c>)
 8005410:	4313      	orrs	r3, r2
 8005412:	628b      	str	r3, [r1, #40]	@ 0x28
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	3b01      	subs	r3, #1
 800541a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	3b01      	subs	r3, #1
 8005424:	025b      	lsls	r3, r3, #9
 8005426:	b29b      	uxth	r3, r3
 8005428:	431a      	orrs	r2, r3
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	3b01      	subs	r3, #1
 8005430:	041b      	lsls	r3, r3, #16
 8005432:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005436:	431a      	orrs	r2, r3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	691b      	ldr	r3, [r3, #16]
 800543c:	3b01      	subs	r3, #1
 800543e:	061b      	lsls	r3, r3, #24
 8005440:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005444:	4931      	ldr	r1, [pc, #196]	@ (800550c <RCCEx_PLL2_Config+0x15c>)
 8005446:	4313      	orrs	r3, r2
 8005448:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800544a:	4b30      	ldr	r3, [pc, #192]	@ (800550c <RCCEx_PLL2_Config+0x15c>)
 800544c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800544e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	695b      	ldr	r3, [r3, #20]
 8005456:	492d      	ldr	r1, [pc, #180]	@ (800550c <RCCEx_PLL2_Config+0x15c>)
 8005458:	4313      	orrs	r3, r2
 800545a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800545c:	4b2b      	ldr	r3, [pc, #172]	@ (800550c <RCCEx_PLL2_Config+0x15c>)
 800545e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005460:	f023 0220 	bic.w	r2, r3, #32
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	699b      	ldr	r3, [r3, #24]
 8005468:	4928      	ldr	r1, [pc, #160]	@ (800550c <RCCEx_PLL2_Config+0x15c>)
 800546a:	4313      	orrs	r3, r2
 800546c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800546e:	4b27      	ldr	r3, [pc, #156]	@ (800550c <RCCEx_PLL2_Config+0x15c>)
 8005470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005472:	4a26      	ldr	r2, [pc, #152]	@ (800550c <RCCEx_PLL2_Config+0x15c>)
 8005474:	f023 0310 	bic.w	r3, r3, #16
 8005478:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800547a:	4b24      	ldr	r3, [pc, #144]	@ (800550c <RCCEx_PLL2_Config+0x15c>)
 800547c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800547e:	4b24      	ldr	r3, [pc, #144]	@ (8005510 <RCCEx_PLL2_Config+0x160>)
 8005480:	4013      	ands	r3, r2
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	69d2      	ldr	r2, [r2, #28]
 8005486:	00d2      	lsls	r2, r2, #3
 8005488:	4920      	ldr	r1, [pc, #128]	@ (800550c <RCCEx_PLL2_Config+0x15c>)
 800548a:	4313      	orrs	r3, r2
 800548c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800548e:	4b1f      	ldr	r3, [pc, #124]	@ (800550c <RCCEx_PLL2_Config+0x15c>)
 8005490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005492:	4a1e      	ldr	r2, [pc, #120]	@ (800550c <RCCEx_PLL2_Config+0x15c>)
 8005494:	f043 0310 	orr.w	r3, r3, #16
 8005498:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d106      	bne.n	80054ae <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80054a0:	4b1a      	ldr	r3, [pc, #104]	@ (800550c <RCCEx_PLL2_Config+0x15c>)
 80054a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054a4:	4a19      	ldr	r2, [pc, #100]	@ (800550c <RCCEx_PLL2_Config+0x15c>)
 80054a6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80054aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80054ac:	e00f      	b.n	80054ce <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d106      	bne.n	80054c2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80054b4:	4b15      	ldr	r3, [pc, #84]	@ (800550c <RCCEx_PLL2_Config+0x15c>)
 80054b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054b8:	4a14      	ldr	r2, [pc, #80]	@ (800550c <RCCEx_PLL2_Config+0x15c>)
 80054ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80054be:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80054c0:	e005      	b.n	80054ce <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80054c2:	4b12      	ldr	r3, [pc, #72]	@ (800550c <RCCEx_PLL2_Config+0x15c>)
 80054c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054c6:	4a11      	ldr	r2, [pc, #68]	@ (800550c <RCCEx_PLL2_Config+0x15c>)
 80054c8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80054cc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80054ce:	4b0f      	ldr	r3, [pc, #60]	@ (800550c <RCCEx_PLL2_Config+0x15c>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a0e      	ldr	r2, [pc, #56]	@ (800550c <RCCEx_PLL2_Config+0x15c>)
 80054d4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80054d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054da:	f7fc f951 	bl	8001780 <HAL_GetTick>
 80054de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80054e0:	e008      	b.n	80054f4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80054e2:	f7fc f94d 	bl	8001780 <HAL_GetTick>
 80054e6:	4602      	mov	r2, r0
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	1ad3      	subs	r3, r2, r3
 80054ec:	2b02      	cmp	r3, #2
 80054ee:	d901      	bls.n	80054f4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80054f0:	2303      	movs	r3, #3
 80054f2:	e006      	b.n	8005502 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80054f4:	4b05      	ldr	r3, [pc, #20]	@ (800550c <RCCEx_PLL2_Config+0x15c>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d0f0      	beq.n	80054e2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005500:	7bfb      	ldrb	r3, [r7, #15]
}
 8005502:	4618      	mov	r0, r3
 8005504:	3710      	adds	r7, #16
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	58024400 	.word	0x58024400
 8005510:	ffff0007 	.word	0xffff0007

08005514 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b084      	sub	sp, #16
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800551e:	2300      	movs	r3, #0
 8005520:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005522:	4b53      	ldr	r3, [pc, #332]	@ (8005670 <RCCEx_PLL3_Config+0x15c>)
 8005524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005526:	f003 0303 	and.w	r3, r3, #3
 800552a:	2b03      	cmp	r3, #3
 800552c:	d101      	bne.n	8005532 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e099      	b.n	8005666 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005532:	4b4f      	ldr	r3, [pc, #316]	@ (8005670 <RCCEx_PLL3_Config+0x15c>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a4e      	ldr	r2, [pc, #312]	@ (8005670 <RCCEx_PLL3_Config+0x15c>)
 8005538:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800553c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800553e:	f7fc f91f 	bl	8001780 <HAL_GetTick>
 8005542:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005544:	e008      	b.n	8005558 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005546:	f7fc f91b 	bl	8001780 <HAL_GetTick>
 800554a:	4602      	mov	r2, r0
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	2b02      	cmp	r3, #2
 8005552:	d901      	bls.n	8005558 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005554:	2303      	movs	r3, #3
 8005556:	e086      	b.n	8005666 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005558:	4b45      	ldr	r3, [pc, #276]	@ (8005670 <RCCEx_PLL3_Config+0x15c>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005560:	2b00      	cmp	r3, #0
 8005562:	d1f0      	bne.n	8005546 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005564:	4b42      	ldr	r3, [pc, #264]	@ (8005670 <RCCEx_PLL3_Config+0x15c>)
 8005566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005568:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	051b      	lsls	r3, r3, #20
 8005572:	493f      	ldr	r1, [pc, #252]	@ (8005670 <RCCEx_PLL3_Config+0x15c>)
 8005574:	4313      	orrs	r3, r2
 8005576:	628b      	str	r3, [r1, #40]	@ 0x28
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	3b01      	subs	r3, #1
 800557e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	3b01      	subs	r3, #1
 8005588:	025b      	lsls	r3, r3, #9
 800558a:	b29b      	uxth	r3, r3
 800558c:	431a      	orrs	r2, r3
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	3b01      	subs	r3, #1
 8005594:	041b      	lsls	r3, r3, #16
 8005596:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800559a:	431a      	orrs	r2, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	3b01      	subs	r3, #1
 80055a2:	061b      	lsls	r3, r3, #24
 80055a4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80055a8:	4931      	ldr	r1, [pc, #196]	@ (8005670 <RCCEx_PLL3_Config+0x15c>)
 80055aa:	4313      	orrs	r3, r2
 80055ac:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80055ae:	4b30      	ldr	r3, [pc, #192]	@ (8005670 <RCCEx_PLL3_Config+0x15c>)
 80055b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055b2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	695b      	ldr	r3, [r3, #20]
 80055ba:	492d      	ldr	r1, [pc, #180]	@ (8005670 <RCCEx_PLL3_Config+0x15c>)
 80055bc:	4313      	orrs	r3, r2
 80055be:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80055c0:	4b2b      	ldr	r3, [pc, #172]	@ (8005670 <RCCEx_PLL3_Config+0x15c>)
 80055c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055c4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	699b      	ldr	r3, [r3, #24]
 80055cc:	4928      	ldr	r1, [pc, #160]	@ (8005670 <RCCEx_PLL3_Config+0x15c>)
 80055ce:	4313      	orrs	r3, r2
 80055d0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80055d2:	4b27      	ldr	r3, [pc, #156]	@ (8005670 <RCCEx_PLL3_Config+0x15c>)
 80055d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055d6:	4a26      	ldr	r2, [pc, #152]	@ (8005670 <RCCEx_PLL3_Config+0x15c>)
 80055d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80055dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80055de:	4b24      	ldr	r3, [pc, #144]	@ (8005670 <RCCEx_PLL3_Config+0x15c>)
 80055e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80055e2:	4b24      	ldr	r3, [pc, #144]	@ (8005674 <RCCEx_PLL3_Config+0x160>)
 80055e4:	4013      	ands	r3, r2
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	69d2      	ldr	r2, [r2, #28]
 80055ea:	00d2      	lsls	r2, r2, #3
 80055ec:	4920      	ldr	r1, [pc, #128]	@ (8005670 <RCCEx_PLL3_Config+0x15c>)
 80055ee:	4313      	orrs	r3, r2
 80055f0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80055f2:	4b1f      	ldr	r3, [pc, #124]	@ (8005670 <RCCEx_PLL3_Config+0x15c>)
 80055f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055f6:	4a1e      	ldr	r2, [pc, #120]	@ (8005670 <RCCEx_PLL3_Config+0x15c>)
 80055f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d106      	bne.n	8005612 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005604:	4b1a      	ldr	r3, [pc, #104]	@ (8005670 <RCCEx_PLL3_Config+0x15c>)
 8005606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005608:	4a19      	ldr	r2, [pc, #100]	@ (8005670 <RCCEx_PLL3_Config+0x15c>)
 800560a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800560e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005610:	e00f      	b.n	8005632 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	2b01      	cmp	r3, #1
 8005616:	d106      	bne.n	8005626 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005618:	4b15      	ldr	r3, [pc, #84]	@ (8005670 <RCCEx_PLL3_Config+0x15c>)
 800561a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800561c:	4a14      	ldr	r2, [pc, #80]	@ (8005670 <RCCEx_PLL3_Config+0x15c>)
 800561e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005622:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005624:	e005      	b.n	8005632 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005626:	4b12      	ldr	r3, [pc, #72]	@ (8005670 <RCCEx_PLL3_Config+0x15c>)
 8005628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800562a:	4a11      	ldr	r2, [pc, #68]	@ (8005670 <RCCEx_PLL3_Config+0x15c>)
 800562c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005630:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005632:	4b0f      	ldr	r3, [pc, #60]	@ (8005670 <RCCEx_PLL3_Config+0x15c>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a0e      	ldr	r2, [pc, #56]	@ (8005670 <RCCEx_PLL3_Config+0x15c>)
 8005638:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800563c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800563e:	f7fc f89f 	bl	8001780 <HAL_GetTick>
 8005642:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005644:	e008      	b.n	8005658 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005646:	f7fc f89b 	bl	8001780 <HAL_GetTick>
 800564a:	4602      	mov	r2, r0
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	1ad3      	subs	r3, r2, r3
 8005650:	2b02      	cmp	r3, #2
 8005652:	d901      	bls.n	8005658 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005654:	2303      	movs	r3, #3
 8005656:	e006      	b.n	8005666 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005658:	4b05      	ldr	r3, [pc, #20]	@ (8005670 <RCCEx_PLL3_Config+0x15c>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005660:	2b00      	cmp	r3, #0
 8005662:	d0f0      	beq.n	8005646 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005664:	7bfb      	ldrb	r3, [r7, #15]
}
 8005666:	4618      	mov	r0, r3
 8005668:	3710      	adds	r7, #16
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	58024400 	.word	0x58024400
 8005674:	ffff0007 	.word	0xffff0007

08005678 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b082      	sub	sp, #8
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d101      	bne.n	800568a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e049      	b.n	800571e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005690:	b2db      	uxtb	r3, r3
 8005692:	2b00      	cmp	r3, #0
 8005694:	d106      	bne.n	80056a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f7fb fe3e 	bl	8001320 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2202      	movs	r2, #2
 80056a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	3304      	adds	r3, #4
 80056b4:	4619      	mov	r1, r3
 80056b6:	4610      	mov	r0, r2
 80056b8:	f001 f8c6 	bl	8006848 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800571c:	2300      	movs	r3, #0
}
 800571e:	4618      	mov	r0, r3
 8005720:	3708      	adds	r7, #8
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}

08005726 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005726:	b580      	push	{r7, lr}
 8005728:	b082      	sub	sp, #8
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d101      	bne.n	8005738 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	e049      	b.n	80057cc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800573e:	b2db      	uxtb	r3, r3
 8005740:	2b00      	cmp	r3, #0
 8005742:	d106      	bne.n	8005752 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 f841 	bl	80057d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2202      	movs	r2, #2
 8005756:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	3304      	adds	r3, #4
 8005762:	4619      	mov	r1, r3
 8005764:	4610      	mov	r0, r2
 8005766:	f001 f86f 	bl	8006848 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2201      	movs	r2, #1
 800576e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2201      	movs	r2, #1
 8005776:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2201      	movs	r2, #1
 800577e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2201      	movs	r2, #1
 8005786:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2201      	movs	r2, #1
 800578e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2201      	movs	r2, #1
 8005796:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2201      	movs	r2, #1
 800579e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2201      	movs	r2, #1
 80057a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2201      	movs	r2, #1
 80057ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2201      	movs	r2, #1
 80057b6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2201      	movs	r2, #1
 80057be:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2201      	movs	r2, #1
 80057c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80057ca:	2300      	movs	r3, #0
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3708      	adds	r7, #8
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}

080057d4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b083      	sub	sp, #12
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80057dc:	bf00      	nop
 80057de:	370c      	adds	r7, #12
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr

080057e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b084      	sub	sp, #16
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d109      	bne.n	800580c <HAL_TIM_PWM_Start+0x24>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	2b01      	cmp	r3, #1
 8005802:	bf14      	ite	ne
 8005804:	2301      	movne	r3, #1
 8005806:	2300      	moveq	r3, #0
 8005808:	b2db      	uxtb	r3, r3
 800580a:	e03c      	b.n	8005886 <HAL_TIM_PWM_Start+0x9e>
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	2b04      	cmp	r3, #4
 8005810:	d109      	bne.n	8005826 <HAL_TIM_PWM_Start+0x3e>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005818:	b2db      	uxtb	r3, r3
 800581a:	2b01      	cmp	r3, #1
 800581c:	bf14      	ite	ne
 800581e:	2301      	movne	r3, #1
 8005820:	2300      	moveq	r3, #0
 8005822:	b2db      	uxtb	r3, r3
 8005824:	e02f      	b.n	8005886 <HAL_TIM_PWM_Start+0x9e>
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	2b08      	cmp	r3, #8
 800582a:	d109      	bne.n	8005840 <HAL_TIM_PWM_Start+0x58>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005832:	b2db      	uxtb	r3, r3
 8005834:	2b01      	cmp	r3, #1
 8005836:	bf14      	ite	ne
 8005838:	2301      	movne	r3, #1
 800583a:	2300      	moveq	r3, #0
 800583c:	b2db      	uxtb	r3, r3
 800583e:	e022      	b.n	8005886 <HAL_TIM_PWM_Start+0x9e>
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	2b0c      	cmp	r3, #12
 8005844:	d109      	bne.n	800585a <HAL_TIM_PWM_Start+0x72>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800584c:	b2db      	uxtb	r3, r3
 800584e:	2b01      	cmp	r3, #1
 8005850:	bf14      	ite	ne
 8005852:	2301      	movne	r3, #1
 8005854:	2300      	moveq	r3, #0
 8005856:	b2db      	uxtb	r3, r3
 8005858:	e015      	b.n	8005886 <HAL_TIM_PWM_Start+0x9e>
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	2b10      	cmp	r3, #16
 800585e:	d109      	bne.n	8005874 <HAL_TIM_PWM_Start+0x8c>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005866:	b2db      	uxtb	r3, r3
 8005868:	2b01      	cmp	r3, #1
 800586a:	bf14      	ite	ne
 800586c:	2301      	movne	r3, #1
 800586e:	2300      	moveq	r3, #0
 8005870:	b2db      	uxtb	r3, r3
 8005872:	e008      	b.n	8005886 <HAL_TIM_PWM_Start+0x9e>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800587a:	b2db      	uxtb	r3, r3
 800587c:	2b01      	cmp	r3, #1
 800587e:	bf14      	ite	ne
 8005880:	2301      	movne	r3, #1
 8005882:	2300      	moveq	r3, #0
 8005884:	b2db      	uxtb	r3, r3
 8005886:	2b00      	cmp	r3, #0
 8005888:	d001      	beq.n	800588e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e0a1      	b.n	80059d2 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d104      	bne.n	800589e <HAL_TIM_PWM_Start+0xb6>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2202      	movs	r2, #2
 8005898:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800589c:	e023      	b.n	80058e6 <HAL_TIM_PWM_Start+0xfe>
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	2b04      	cmp	r3, #4
 80058a2:	d104      	bne.n	80058ae <HAL_TIM_PWM_Start+0xc6>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2202      	movs	r2, #2
 80058a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80058ac:	e01b      	b.n	80058e6 <HAL_TIM_PWM_Start+0xfe>
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	2b08      	cmp	r3, #8
 80058b2:	d104      	bne.n	80058be <HAL_TIM_PWM_Start+0xd6>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2202      	movs	r2, #2
 80058b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80058bc:	e013      	b.n	80058e6 <HAL_TIM_PWM_Start+0xfe>
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	2b0c      	cmp	r3, #12
 80058c2:	d104      	bne.n	80058ce <HAL_TIM_PWM_Start+0xe6>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2202      	movs	r2, #2
 80058c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80058cc:	e00b      	b.n	80058e6 <HAL_TIM_PWM_Start+0xfe>
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	2b10      	cmp	r3, #16
 80058d2:	d104      	bne.n	80058de <HAL_TIM_PWM_Start+0xf6>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2202      	movs	r2, #2
 80058d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80058dc:	e003      	b.n	80058e6 <HAL_TIM_PWM_Start+0xfe>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2202      	movs	r2, #2
 80058e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2201      	movs	r2, #1
 80058ec:	6839      	ldr	r1, [r7, #0]
 80058ee:	4618      	mov	r0, r3
 80058f0:	f001 fce8 	bl	80072c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a38      	ldr	r2, [pc, #224]	@ (80059dc <HAL_TIM_PWM_Start+0x1f4>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d013      	beq.n	8005926 <HAL_TIM_PWM_Start+0x13e>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a37      	ldr	r2, [pc, #220]	@ (80059e0 <HAL_TIM_PWM_Start+0x1f8>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d00e      	beq.n	8005926 <HAL_TIM_PWM_Start+0x13e>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a35      	ldr	r2, [pc, #212]	@ (80059e4 <HAL_TIM_PWM_Start+0x1fc>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d009      	beq.n	8005926 <HAL_TIM_PWM_Start+0x13e>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a34      	ldr	r2, [pc, #208]	@ (80059e8 <HAL_TIM_PWM_Start+0x200>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d004      	beq.n	8005926 <HAL_TIM_PWM_Start+0x13e>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a32      	ldr	r2, [pc, #200]	@ (80059ec <HAL_TIM_PWM_Start+0x204>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d101      	bne.n	800592a <HAL_TIM_PWM_Start+0x142>
 8005926:	2301      	movs	r3, #1
 8005928:	e000      	b.n	800592c <HAL_TIM_PWM_Start+0x144>
 800592a:	2300      	movs	r3, #0
 800592c:	2b00      	cmp	r3, #0
 800592e:	d007      	beq.n	8005940 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800593e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a25      	ldr	r2, [pc, #148]	@ (80059dc <HAL_TIM_PWM_Start+0x1f4>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d022      	beq.n	8005990 <HAL_TIM_PWM_Start+0x1a8>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005952:	d01d      	beq.n	8005990 <HAL_TIM_PWM_Start+0x1a8>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a25      	ldr	r2, [pc, #148]	@ (80059f0 <HAL_TIM_PWM_Start+0x208>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d018      	beq.n	8005990 <HAL_TIM_PWM_Start+0x1a8>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a24      	ldr	r2, [pc, #144]	@ (80059f4 <HAL_TIM_PWM_Start+0x20c>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d013      	beq.n	8005990 <HAL_TIM_PWM_Start+0x1a8>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a22      	ldr	r2, [pc, #136]	@ (80059f8 <HAL_TIM_PWM_Start+0x210>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d00e      	beq.n	8005990 <HAL_TIM_PWM_Start+0x1a8>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a1a      	ldr	r2, [pc, #104]	@ (80059e0 <HAL_TIM_PWM_Start+0x1f8>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d009      	beq.n	8005990 <HAL_TIM_PWM_Start+0x1a8>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a1e      	ldr	r2, [pc, #120]	@ (80059fc <HAL_TIM_PWM_Start+0x214>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d004      	beq.n	8005990 <HAL_TIM_PWM_Start+0x1a8>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a16      	ldr	r2, [pc, #88]	@ (80059e4 <HAL_TIM_PWM_Start+0x1fc>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d115      	bne.n	80059bc <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	689a      	ldr	r2, [r3, #8]
 8005996:	4b1a      	ldr	r3, [pc, #104]	@ (8005a00 <HAL_TIM_PWM_Start+0x218>)
 8005998:	4013      	ands	r3, r2
 800599a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2b06      	cmp	r3, #6
 80059a0:	d015      	beq.n	80059ce <HAL_TIM_PWM_Start+0x1e6>
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059a8:	d011      	beq.n	80059ce <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f042 0201 	orr.w	r2, r2, #1
 80059b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059ba:	e008      	b.n	80059ce <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f042 0201 	orr.w	r2, r2, #1
 80059ca:	601a      	str	r2, [r3, #0]
 80059cc:	e000      	b.n	80059d0 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80059d0:	2300      	movs	r3, #0
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3710      	adds	r7, #16
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	bf00      	nop
 80059dc:	40010000 	.word	0x40010000
 80059e0:	40010400 	.word	0x40010400
 80059e4:	40014000 	.word	0x40014000
 80059e8:	40014400 	.word	0x40014400
 80059ec:	40014800 	.word	0x40014800
 80059f0:	40000400 	.word	0x40000400
 80059f4:	40000800 	.word	0x40000800
 80059f8:	40000c00 	.word	0x40000c00
 80059fc:	40001800 	.word	0x40001800
 8005a00:	00010007 	.word	0x00010007

08005a04 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2200      	movs	r2, #0
 8005a14:	6839      	ldr	r1, [r7, #0]
 8005a16:	4618      	mov	r0, r3
 8005a18:	f001 fc54 	bl	80072c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a3e      	ldr	r2, [pc, #248]	@ (8005b1c <HAL_TIM_PWM_Stop+0x118>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d013      	beq.n	8005a4e <HAL_TIM_PWM_Stop+0x4a>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a3d      	ldr	r2, [pc, #244]	@ (8005b20 <HAL_TIM_PWM_Stop+0x11c>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d00e      	beq.n	8005a4e <HAL_TIM_PWM_Stop+0x4a>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a3b      	ldr	r2, [pc, #236]	@ (8005b24 <HAL_TIM_PWM_Stop+0x120>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d009      	beq.n	8005a4e <HAL_TIM_PWM_Stop+0x4a>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a3a      	ldr	r2, [pc, #232]	@ (8005b28 <HAL_TIM_PWM_Stop+0x124>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d004      	beq.n	8005a4e <HAL_TIM_PWM_Stop+0x4a>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a38      	ldr	r2, [pc, #224]	@ (8005b2c <HAL_TIM_PWM_Stop+0x128>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d101      	bne.n	8005a52 <HAL_TIM_PWM_Stop+0x4e>
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e000      	b.n	8005a54 <HAL_TIM_PWM_Stop+0x50>
 8005a52:	2300      	movs	r3, #0
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d017      	beq.n	8005a88 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	6a1a      	ldr	r2, [r3, #32]
 8005a5e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005a62:	4013      	ands	r3, r2
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d10f      	bne.n	8005a88 <HAL_TIM_PWM_Stop+0x84>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	6a1a      	ldr	r2, [r3, #32]
 8005a6e:	f240 4344 	movw	r3, #1092	@ 0x444
 8005a72:	4013      	ands	r3, r2
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d107      	bne.n	8005a88 <HAL_TIM_PWM_Stop+0x84>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005a86:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	6a1a      	ldr	r2, [r3, #32]
 8005a8e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005a92:	4013      	ands	r3, r2
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d10f      	bne.n	8005ab8 <HAL_TIM_PWM_Stop+0xb4>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	6a1a      	ldr	r2, [r3, #32]
 8005a9e:	f240 4344 	movw	r3, #1092	@ 0x444
 8005aa2:	4013      	ands	r3, r2
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d107      	bne.n	8005ab8 <HAL_TIM_PWM_Stop+0xb4>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f022 0201 	bic.w	r2, r2, #1
 8005ab6:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d104      	bne.n	8005ac8 <HAL_TIM_PWM_Stop+0xc4>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ac6:	e023      	b.n	8005b10 <HAL_TIM_PWM_Stop+0x10c>
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	2b04      	cmp	r3, #4
 8005acc:	d104      	bne.n	8005ad8 <HAL_TIM_PWM_Stop+0xd4>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ad6:	e01b      	b.n	8005b10 <HAL_TIM_PWM_Stop+0x10c>
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	2b08      	cmp	r3, #8
 8005adc:	d104      	bne.n	8005ae8 <HAL_TIM_PWM_Stop+0xe4>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ae6:	e013      	b.n	8005b10 <HAL_TIM_PWM_Stop+0x10c>
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	2b0c      	cmp	r3, #12
 8005aec:	d104      	bne.n	8005af8 <HAL_TIM_PWM_Stop+0xf4>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2201      	movs	r2, #1
 8005af2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005af6:	e00b      	b.n	8005b10 <HAL_TIM_PWM_Stop+0x10c>
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	2b10      	cmp	r3, #16
 8005afc:	d104      	bne.n	8005b08 <HAL_TIM_PWM_Stop+0x104>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2201      	movs	r2, #1
 8005b02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b06:	e003      	b.n	8005b10 <HAL_TIM_PWM_Stop+0x10c>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8005b10:	2300      	movs	r3, #0
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3708      	adds	r7, #8
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	40010000 	.word	0x40010000
 8005b20:	40010400 	.word	0x40010400
 8005b24:	40014000 	.word	0x40014000
 8005b28:	40014400 	.word	0x40014400
 8005b2c:	40014800 	.word	0x40014800

08005b30 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b082      	sub	sp, #8
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d101      	bne.n	8005b42 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e049      	b.n	8005bd6 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d106      	bne.n	8005b5c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 f841 	bl	8005bde <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2202      	movs	r2, #2
 8005b60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	3304      	adds	r3, #4
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	4610      	mov	r0, r2
 8005b70:	f000 fe6a 	bl	8006848 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005bd4:	2300      	movs	r3, #0
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3708      	adds	r7, #8
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}

08005bde <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005bde:	b480      	push	{r7}
 8005be0:	b083      	sub	sp, #12
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005be6:	bf00      	nop
 8005be8:	370c      	adds	r7, #12
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr
	...

08005bf4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b084      	sub	sp, #16
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d104      	bne.n	8005c12 <HAL_TIM_IC_Start_IT+0x1e>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	e023      	b.n	8005c5a <HAL_TIM_IC_Start_IT+0x66>
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	2b04      	cmp	r3, #4
 8005c16:	d104      	bne.n	8005c22 <HAL_TIM_IC_Start_IT+0x2e>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	e01b      	b.n	8005c5a <HAL_TIM_IC_Start_IT+0x66>
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	2b08      	cmp	r3, #8
 8005c26:	d104      	bne.n	8005c32 <HAL_TIM_IC_Start_IT+0x3e>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	e013      	b.n	8005c5a <HAL_TIM_IC_Start_IT+0x66>
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	2b0c      	cmp	r3, #12
 8005c36:	d104      	bne.n	8005c42 <HAL_TIM_IC_Start_IT+0x4e>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	e00b      	b.n	8005c5a <HAL_TIM_IC_Start_IT+0x66>
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	2b10      	cmp	r3, #16
 8005c46:	d104      	bne.n	8005c52 <HAL_TIM_IC_Start_IT+0x5e>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	e003      	b.n	8005c5a <HAL_TIM_IC_Start_IT+0x66>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d104      	bne.n	8005c6c <HAL_TIM_IC_Start_IT+0x78>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	e013      	b.n	8005c94 <HAL_TIM_IC_Start_IT+0xa0>
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	2b04      	cmp	r3, #4
 8005c70:	d104      	bne.n	8005c7c <HAL_TIM_IC_Start_IT+0x88>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	e00b      	b.n	8005c94 <HAL_TIM_IC_Start_IT+0xa0>
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	2b08      	cmp	r3, #8
 8005c80:	d104      	bne.n	8005c8c <HAL_TIM_IC_Start_IT+0x98>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	e003      	b.n	8005c94 <HAL_TIM_IC_Start_IT+0xa0>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c96:	7bbb      	ldrb	r3, [r7, #14]
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d102      	bne.n	8005ca2 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005c9c:	7b7b      	ldrb	r3, [r7, #13]
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d001      	beq.n	8005ca6 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e0e2      	b.n	8005e6c <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d104      	bne.n	8005cb6 <HAL_TIM_IC_Start_IT+0xc2>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2202      	movs	r2, #2
 8005cb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005cb4:	e023      	b.n	8005cfe <HAL_TIM_IC_Start_IT+0x10a>
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	2b04      	cmp	r3, #4
 8005cba:	d104      	bne.n	8005cc6 <HAL_TIM_IC_Start_IT+0xd2>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2202      	movs	r2, #2
 8005cc0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005cc4:	e01b      	b.n	8005cfe <HAL_TIM_IC_Start_IT+0x10a>
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	2b08      	cmp	r3, #8
 8005cca:	d104      	bne.n	8005cd6 <HAL_TIM_IC_Start_IT+0xe2>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2202      	movs	r2, #2
 8005cd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005cd4:	e013      	b.n	8005cfe <HAL_TIM_IC_Start_IT+0x10a>
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	2b0c      	cmp	r3, #12
 8005cda:	d104      	bne.n	8005ce6 <HAL_TIM_IC_Start_IT+0xf2>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2202      	movs	r2, #2
 8005ce0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005ce4:	e00b      	b.n	8005cfe <HAL_TIM_IC_Start_IT+0x10a>
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	2b10      	cmp	r3, #16
 8005cea:	d104      	bne.n	8005cf6 <HAL_TIM_IC_Start_IT+0x102>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2202      	movs	r2, #2
 8005cf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005cf4:	e003      	b.n	8005cfe <HAL_TIM_IC_Start_IT+0x10a>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2202      	movs	r2, #2
 8005cfa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d104      	bne.n	8005d0e <HAL_TIM_IC_Start_IT+0x11a>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2202      	movs	r2, #2
 8005d08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d0c:	e013      	b.n	8005d36 <HAL_TIM_IC_Start_IT+0x142>
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	2b04      	cmp	r3, #4
 8005d12:	d104      	bne.n	8005d1e <HAL_TIM_IC_Start_IT+0x12a>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2202      	movs	r2, #2
 8005d18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005d1c:	e00b      	b.n	8005d36 <HAL_TIM_IC_Start_IT+0x142>
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	2b08      	cmp	r3, #8
 8005d22:	d104      	bne.n	8005d2e <HAL_TIM_IC_Start_IT+0x13a>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2202      	movs	r2, #2
 8005d28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005d2c:	e003      	b.n	8005d36 <HAL_TIM_IC_Start_IT+0x142>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2202      	movs	r2, #2
 8005d32:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	2b0c      	cmp	r3, #12
 8005d3a:	d841      	bhi.n	8005dc0 <HAL_TIM_IC_Start_IT+0x1cc>
 8005d3c:	a201      	add	r2, pc, #4	@ (adr r2, 8005d44 <HAL_TIM_IC_Start_IT+0x150>)
 8005d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d42:	bf00      	nop
 8005d44:	08005d79 	.word	0x08005d79
 8005d48:	08005dc1 	.word	0x08005dc1
 8005d4c:	08005dc1 	.word	0x08005dc1
 8005d50:	08005dc1 	.word	0x08005dc1
 8005d54:	08005d8b 	.word	0x08005d8b
 8005d58:	08005dc1 	.word	0x08005dc1
 8005d5c:	08005dc1 	.word	0x08005dc1
 8005d60:	08005dc1 	.word	0x08005dc1
 8005d64:	08005d9d 	.word	0x08005d9d
 8005d68:	08005dc1 	.word	0x08005dc1
 8005d6c:	08005dc1 	.word	0x08005dc1
 8005d70:	08005dc1 	.word	0x08005dc1
 8005d74:	08005daf 	.word	0x08005daf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	68da      	ldr	r2, [r3, #12]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f042 0202 	orr.w	r2, r2, #2
 8005d86:	60da      	str	r2, [r3, #12]
      break;
 8005d88:	e01d      	b.n	8005dc6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	68da      	ldr	r2, [r3, #12]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f042 0204 	orr.w	r2, r2, #4
 8005d98:	60da      	str	r2, [r3, #12]
      break;
 8005d9a:	e014      	b.n	8005dc6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	68da      	ldr	r2, [r3, #12]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f042 0208 	orr.w	r2, r2, #8
 8005daa:	60da      	str	r2, [r3, #12]
      break;
 8005dac:	e00b      	b.n	8005dc6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	68da      	ldr	r2, [r3, #12]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f042 0210 	orr.w	r2, r2, #16
 8005dbc:	60da      	str	r2, [r3, #12]
      break;
 8005dbe:	e002      	b.n	8005dc6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	73fb      	strb	r3, [r7, #15]
      break;
 8005dc4:	bf00      	nop
  }

  if (status == HAL_OK)
 8005dc6:	7bfb      	ldrb	r3, [r7, #15]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d14e      	bne.n	8005e6a <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	6839      	ldr	r1, [r7, #0]
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f001 fa75 	bl	80072c4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a25      	ldr	r2, [pc, #148]	@ (8005e74 <HAL_TIM_IC_Start_IT+0x280>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d022      	beq.n	8005e2a <HAL_TIM_IC_Start_IT+0x236>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dec:	d01d      	beq.n	8005e2a <HAL_TIM_IC_Start_IT+0x236>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a21      	ldr	r2, [pc, #132]	@ (8005e78 <HAL_TIM_IC_Start_IT+0x284>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d018      	beq.n	8005e2a <HAL_TIM_IC_Start_IT+0x236>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a1f      	ldr	r2, [pc, #124]	@ (8005e7c <HAL_TIM_IC_Start_IT+0x288>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d013      	beq.n	8005e2a <HAL_TIM_IC_Start_IT+0x236>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a1e      	ldr	r2, [pc, #120]	@ (8005e80 <HAL_TIM_IC_Start_IT+0x28c>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d00e      	beq.n	8005e2a <HAL_TIM_IC_Start_IT+0x236>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a1c      	ldr	r2, [pc, #112]	@ (8005e84 <HAL_TIM_IC_Start_IT+0x290>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d009      	beq.n	8005e2a <HAL_TIM_IC_Start_IT+0x236>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a1b      	ldr	r2, [pc, #108]	@ (8005e88 <HAL_TIM_IC_Start_IT+0x294>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d004      	beq.n	8005e2a <HAL_TIM_IC_Start_IT+0x236>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a19      	ldr	r2, [pc, #100]	@ (8005e8c <HAL_TIM_IC_Start_IT+0x298>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d115      	bne.n	8005e56 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	689a      	ldr	r2, [r3, #8]
 8005e30:	4b17      	ldr	r3, [pc, #92]	@ (8005e90 <HAL_TIM_IC_Start_IT+0x29c>)
 8005e32:	4013      	ands	r3, r2
 8005e34:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	2b06      	cmp	r3, #6
 8005e3a:	d015      	beq.n	8005e68 <HAL_TIM_IC_Start_IT+0x274>
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e42:	d011      	beq.n	8005e68 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f042 0201 	orr.w	r2, r2, #1
 8005e52:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e54:	e008      	b.n	8005e68 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f042 0201 	orr.w	r2, r2, #1
 8005e64:	601a      	str	r2, [r3, #0]
 8005e66:	e000      	b.n	8005e6a <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e68:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8005e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3710      	adds	r7, #16
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}
 8005e74:	40010000 	.word	0x40010000
 8005e78:	40000400 	.word	0x40000400
 8005e7c:	40000800 	.word	0x40000800
 8005e80:	40000c00 	.word	0x40000c00
 8005e84:	40010400 	.word	0x40010400
 8005e88:	40001800 	.word	0x40001800
 8005e8c:	40014000 	.word	0x40014000
 8005e90:	00010007 	.word	0x00010007

08005e94 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b084      	sub	sp, #16
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	2b0c      	cmp	r3, #12
 8005ea6:	d841      	bhi.n	8005f2c <HAL_TIM_IC_Stop_IT+0x98>
 8005ea8:	a201      	add	r2, pc, #4	@ (adr r2, 8005eb0 <HAL_TIM_IC_Stop_IT+0x1c>)
 8005eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eae:	bf00      	nop
 8005eb0:	08005ee5 	.word	0x08005ee5
 8005eb4:	08005f2d 	.word	0x08005f2d
 8005eb8:	08005f2d 	.word	0x08005f2d
 8005ebc:	08005f2d 	.word	0x08005f2d
 8005ec0:	08005ef7 	.word	0x08005ef7
 8005ec4:	08005f2d 	.word	0x08005f2d
 8005ec8:	08005f2d 	.word	0x08005f2d
 8005ecc:	08005f2d 	.word	0x08005f2d
 8005ed0:	08005f09 	.word	0x08005f09
 8005ed4:	08005f2d 	.word	0x08005f2d
 8005ed8:	08005f2d 	.word	0x08005f2d
 8005edc:	08005f2d 	.word	0x08005f2d
 8005ee0:	08005f1b 	.word	0x08005f1b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	68da      	ldr	r2, [r3, #12]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f022 0202 	bic.w	r2, r2, #2
 8005ef2:	60da      	str	r2, [r3, #12]
      break;
 8005ef4:	e01d      	b.n	8005f32 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	68da      	ldr	r2, [r3, #12]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f022 0204 	bic.w	r2, r2, #4
 8005f04:	60da      	str	r2, [r3, #12]
      break;
 8005f06:	e014      	b.n	8005f32 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	68da      	ldr	r2, [r3, #12]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f022 0208 	bic.w	r2, r2, #8
 8005f16:	60da      	str	r2, [r3, #12]
      break;
 8005f18:	e00b      	b.n	8005f32 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	68da      	ldr	r2, [r3, #12]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f022 0210 	bic.w	r2, r2, #16
 8005f28:	60da      	str	r2, [r3, #12]
      break;
 8005f2a:	e002      	b.n	8005f32 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	73fb      	strb	r3, [r7, #15]
      break;
 8005f30:	bf00      	nop
  }

  if (status == HAL_OK)
 8005f32:	7bfb      	ldrb	r3, [r7, #15]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d166      	bne.n	8006006 <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	6839      	ldr	r1, [r7, #0]
 8005f40:	4618      	mov	r0, r3
 8005f42:	f001 f9bf 	bl	80072c4 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	6a1a      	ldr	r2, [r3, #32]
 8005f4c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005f50:	4013      	ands	r3, r2
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d10f      	bne.n	8005f76 <HAL_TIM_IC_Stop_IT+0xe2>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	6a1a      	ldr	r2, [r3, #32]
 8005f5c:	f240 4344 	movw	r3, #1092	@ 0x444
 8005f60:	4013      	ands	r3, r2
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d107      	bne.n	8005f76 <HAL_TIM_IC_Stop_IT+0xe2>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f022 0201 	bic.w	r2, r2, #1
 8005f74:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d104      	bne.n	8005f86 <HAL_TIM_IC_Stop_IT+0xf2>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f84:	e023      	b.n	8005fce <HAL_TIM_IC_Stop_IT+0x13a>
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	2b04      	cmp	r3, #4
 8005f8a:	d104      	bne.n	8005f96 <HAL_TIM_IC_Stop_IT+0x102>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f94:	e01b      	b.n	8005fce <HAL_TIM_IC_Stop_IT+0x13a>
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	2b08      	cmp	r3, #8
 8005f9a:	d104      	bne.n	8005fa6 <HAL_TIM_IC_Stop_IT+0x112>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005fa4:	e013      	b.n	8005fce <HAL_TIM_IC_Stop_IT+0x13a>
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	2b0c      	cmp	r3, #12
 8005faa:	d104      	bne.n	8005fb6 <HAL_TIM_IC_Stop_IT+0x122>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005fb4:	e00b      	b.n	8005fce <HAL_TIM_IC_Stop_IT+0x13a>
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	2b10      	cmp	r3, #16
 8005fba:	d104      	bne.n	8005fc6 <HAL_TIM_IC_Stop_IT+0x132>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005fc4:	e003      	b.n	8005fce <HAL_TIM_IC_Stop_IT+0x13a>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2201      	movs	r2, #1
 8005fca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d104      	bne.n	8005fde <HAL_TIM_IC_Stop_IT+0x14a>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005fdc:	e013      	b.n	8006006 <HAL_TIM_IC_Stop_IT+0x172>
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	2b04      	cmp	r3, #4
 8005fe2:	d104      	bne.n	8005fee <HAL_TIM_IC_Stop_IT+0x15a>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005fec:	e00b      	b.n	8006006 <HAL_TIM_IC_Stop_IT+0x172>
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	2b08      	cmp	r3, #8
 8005ff2:	d104      	bne.n	8005ffe <HAL_TIM_IC_Stop_IT+0x16a>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005ffc:	e003      	b.n	8006006 <HAL_TIM_IC_Stop_IT+0x172>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2201      	movs	r2, #1
 8006002:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
  }

  /* Return function status */
  return status;
 8006006:	7bfb      	ldrb	r3, [r7, #15]
}
 8006008:	4618      	mov	r0, r3
 800600a:	3710      	adds	r7, #16
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	691b      	ldr	r3, [r3, #16]
 8006026:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	f003 0302 	and.w	r3, r3, #2
 800602e:	2b00      	cmp	r3, #0
 8006030:	d020      	beq.n	8006074 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f003 0302 	and.w	r3, r3, #2
 8006038:	2b00      	cmp	r3, #0
 800603a:	d01b      	beq.n	8006074 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f06f 0202 	mvn.w	r2, #2
 8006044:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2201      	movs	r2, #1
 800604a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	699b      	ldr	r3, [r3, #24]
 8006052:	f003 0303 	and.w	r3, r3, #3
 8006056:	2b00      	cmp	r3, #0
 8006058:	d003      	beq.n	8006062 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f7fa ffd6 	bl	800100c <HAL_TIM_IC_CaptureCallback>
 8006060:	e005      	b.n	800606e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 fbd2 	bl	800680c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f000 fbd9 	bl	8006820 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2200      	movs	r2, #0
 8006072:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	f003 0304 	and.w	r3, r3, #4
 800607a:	2b00      	cmp	r3, #0
 800607c:	d020      	beq.n	80060c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f003 0304 	and.w	r3, r3, #4
 8006084:	2b00      	cmp	r3, #0
 8006086:	d01b      	beq.n	80060c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f06f 0204 	mvn.w	r2, #4
 8006090:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2202      	movs	r2, #2
 8006096:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	699b      	ldr	r3, [r3, #24]
 800609e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d003      	beq.n	80060ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f7fa ffb0 	bl	800100c <HAL_TIM_IC_CaptureCallback>
 80060ac:	e005      	b.n	80060ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 fbac 	bl	800680c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f000 fbb3 	bl	8006820 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	f003 0308 	and.w	r3, r3, #8
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d020      	beq.n	800610c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f003 0308 	and.w	r3, r3, #8
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d01b      	beq.n	800610c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f06f 0208 	mvn.w	r2, #8
 80060dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2204      	movs	r2, #4
 80060e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	69db      	ldr	r3, [r3, #28]
 80060ea:	f003 0303 	and.w	r3, r3, #3
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d003      	beq.n	80060fa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f7fa ff8a 	bl	800100c <HAL_TIM_IC_CaptureCallback>
 80060f8:	e005      	b.n	8006106 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 fb86 	bl	800680c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f000 fb8d 	bl	8006820 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2200      	movs	r2, #0
 800610a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	f003 0310 	and.w	r3, r3, #16
 8006112:	2b00      	cmp	r3, #0
 8006114:	d020      	beq.n	8006158 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	f003 0310 	and.w	r3, r3, #16
 800611c:	2b00      	cmp	r3, #0
 800611e:	d01b      	beq.n	8006158 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f06f 0210 	mvn.w	r2, #16
 8006128:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2208      	movs	r2, #8
 800612e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	69db      	ldr	r3, [r3, #28]
 8006136:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800613a:	2b00      	cmp	r3, #0
 800613c:	d003      	beq.n	8006146 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f7fa ff64 	bl	800100c <HAL_TIM_IC_CaptureCallback>
 8006144:	e005      	b.n	8006152 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f000 fb60 	bl	800680c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f000 fb67 	bl	8006820 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2200      	movs	r2, #0
 8006156:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	f003 0301 	and.w	r3, r3, #1
 800615e:	2b00      	cmp	r3, #0
 8006160:	d00c      	beq.n	800617c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f003 0301 	and.w	r3, r3, #1
 8006168:	2b00      	cmp	r3, #0
 800616a:	d007      	beq.n	800617c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f06f 0201 	mvn.w	r2, #1
 8006174:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 fb3e 	bl	80067f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006182:	2b00      	cmp	r3, #0
 8006184:	d104      	bne.n	8006190 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800618c:	2b00      	cmp	r3, #0
 800618e:	d00c      	beq.n	80061aa <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006196:	2b00      	cmp	r3, #0
 8006198:	d007      	beq.n	80061aa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80061a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f001 f94b 	bl	8007440 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d00c      	beq.n	80061ce <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d007      	beq.n	80061ce <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80061c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f001 f943 	bl	8007454 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d00c      	beq.n	80061f2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d007      	beq.n	80061f2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80061ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f000 fb21 	bl	8006834 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	f003 0320 	and.w	r3, r3, #32
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d00c      	beq.n	8006216 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f003 0320 	and.w	r3, r3, #32
 8006202:	2b00      	cmp	r3, #0
 8006204:	d007      	beq.n	8006216 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f06f 0220 	mvn.w	r2, #32
 800620e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f001 f90b 	bl	800742c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006216:	bf00      	nop
 8006218:	3710      	adds	r7, #16
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}

0800621e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800621e:	b580      	push	{r7, lr}
 8006220:	b086      	sub	sp, #24
 8006222:	af00      	add	r7, sp, #0
 8006224:	60f8      	str	r0, [r7, #12]
 8006226:	60b9      	str	r1, [r7, #8]
 8006228:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800622a:	2300      	movs	r3, #0
 800622c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006234:	2b01      	cmp	r3, #1
 8006236:	d101      	bne.n	800623c <HAL_TIM_IC_ConfigChannel+0x1e>
 8006238:	2302      	movs	r3, #2
 800623a:	e088      	b.n	800634e <HAL_TIM_IC_ConfigChannel+0x130>
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2201      	movs	r2, #1
 8006240:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d11b      	bne.n	8006282 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800625a:	f000 fe6b 	bl	8006f34 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	699a      	ldr	r2, [r3, #24]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f022 020c 	bic.w	r2, r2, #12
 800626c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	6999      	ldr	r1, [r3, #24]
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	689a      	ldr	r2, [r3, #8]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	430a      	orrs	r2, r1
 800627e:	619a      	str	r2, [r3, #24]
 8006280:	e060      	b.n	8006344 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2b04      	cmp	r3, #4
 8006286:	d11c      	bne.n	80062c2 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8006298:	f000 feef 	bl	800707a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	699a      	ldr	r2, [r3, #24]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80062aa:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	6999      	ldr	r1, [r3, #24]
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	021a      	lsls	r2, r3, #8
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	430a      	orrs	r2, r1
 80062be:	619a      	str	r2, [r3, #24]
 80062c0:	e040      	b.n	8006344 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2b08      	cmp	r3, #8
 80062c6:	d11b      	bne.n	8006300 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80062d8:	f000 ff3c 	bl	8007154 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	69da      	ldr	r2, [r3, #28]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f022 020c 	bic.w	r2, r2, #12
 80062ea:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	69d9      	ldr	r1, [r3, #28]
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	689a      	ldr	r2, [r3, #8]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	430a      	orrs	r2, r1
 80062fc:	61da      	str	r2, [r3, #28]
 80062fe:	e021      	b.n	8006344 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2b0c      	cmp	r3, #12
 8006304:	d11c      	bne.n	8006340 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8006316:	f000 ff59 	bl	80071cc <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	69da      	ldr	r2, [r3, #28]
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006328:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	69d9      	ldr	r1, [r3, #28]
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	021a      	lsls	r2, r3, #8
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	430a      	orrs	r2, r1
 800633c:	61da      	str	r2, [r3, #28]
 800633e:	e001      	b.n	8006344 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2200      	movs	r2, #0
 8006348:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800634c:	7dfb      	ldrb	r3, [r7, #23]
}
 800634e:	4618      	mov	r0, r3
 8006350:	3718      	adds	r7, #24
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
	...

08006358 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b086      	sub	sp, #24
 800635c:	af00      	add	r7, sp, #0
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	60b9      	str	r1, [r7, #8]
 8006362:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006364:	2300      	movs	r3, #0
 8006366:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800636e:	2b01      	cmp	r3, #1
 8006370:	d101      	bne.n	8006376 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006372:	2302      	movs	r3, #2
 8006374:	e0ff      	b.n	8006576 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2201      	movs	r2, #1
 800637a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2b14      	cmp	r3, #20
 8006382:	f200 80f0 	bhi.w	8006566 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006386:	a201      	add	r2, pc, #4	@ (adr r2, 800638c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800638c:	080063e1 	.word	0x080063e1
 8006390:	08006567 	.word	0x08006567
 8006394:	08006567 	.word	0x08006567
 8006398:	08006567 	.word	0x08006567
 800639c:	08006421 	.word	0x08006421
 80063a0:	08006567 	.word	0x08006567
 80063a4:	08006567 	.word	0x08006567
 80063a8:	08006567 	.word	0x08006567
 80063ac:	08006463 	.word	0x08006463
 80063b0:	08006567 	.word	0x08006567
 80063b4:	08006567 	.word	0x08006567
 80063b8:	08006567 	.word	0x08006567
 80063bc:	080064a3 	.word	0x080064a3
 80063c0:	08006567 	.word	0x08006567
 80063c4:	08006567 	.word	0x08006567
 80063c8:	08006567 	.word	0x08006567
 80063cc:	080064e5 	.word	0x080064e5
 80063d0:	08006567 	.word	0x08006567
 80063d4:	08006567 	.word	0x08006567
 80063d8:	08006567 	.word	0x08006567
 80063dc:	08006525 	.word	0x08006525
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	68b9      	ldr	r1, [r7, #8]
 80063e6:	4618      	mov	r0, r3
 80063e8:	f000 face 	bl	8006988 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	699a      	ldr	r2, [r3, #24]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f042 0208 	orr.w	r2, r2, #8
 80063fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	699a      	ldr	r2, [r3, #24]
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f022 0204 	bic.w	r2, r2, #4
 800640a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	6999      	ldr	r1, [r3, #24]
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	691a      	ldr	r2, [r3, #16]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	430a      	orrs	r2, r1
 800641c:	619a      	str	r2, [r3, #24]
      break;
 800641e:	e0a5      	b.n	800656c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	68b9      	ldr	r1, [r7, #8]
 8006426:	4618      	mov	r0, r3
 8006428:	f000 fb3e 	bl	8006aa8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	699a      	ldr	r2, [r3, #24]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800643a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	699a      	ldr	r2, [r3, #24]
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800644a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	6999      	ldr	r1, [r3, #24]
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	021a      	lsls	r2, r3, #8
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	430a      	orrs	r2, r1
 800645e:	619a      	str	r2, [r3, #24]
      break;
 8006460:	e084      	b.n	800656c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	68b9      	ldr	r1, [r7, #8]
 8006468:	4618      	mov	r0, r3
 800646a:	f000 fba7 	bl	8006bbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	69da      	ldr	r2, [r3, #28]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f042 0208 	orr.w	r2, r2, #8
 800647c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	69da      	ldr	r2, [r3, #28]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f022 0204 	bic.w	r2, r2, #4
 800648c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	69d9      	ldr	r1, [r3, #28]
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	691a      	ldr	r2, [r3, #16]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	430a      	orrs	r2, r1
 800649e:	61da      	str	r2, [r3, #28]
      break;
 80064a0:	e064      	b.n	800656c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	68b9      	ldr	r1, [r7, #8]
 80064a8:	4618      	mov	r0, r3
 80064aa:	f000 fc0f 	bl	8006ccc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	69da      	ldr	r2, [r3, #28]
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80064bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	69da      	ldr	r2, [r3, #28]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80064cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	69d9      	ldr	r1, [r3, #28]
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	691b      	ldr	r3, [r3, #16]
 80064d8:	021a      	lsls	r2, r3, #8
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	430a      	orrs	r2, r1
 80064e0:	61da      	str	r2, [r3, #28]
      break;
 80064e2:	e043      	b.n	800656c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	68b9      	ldr	r1, [r7, #8]
 80064ea:	4618      	mov	r0, r3
 80064ec:	f000 fc58 	bl	8006da0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f042 0208 	orr.w	r2, r2, #8
 80064fe:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f022 0204 	bic.w	r2, r2, #4
 800650e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	691a      	ldr	r2, [r3, #16]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	430a      	orrs	r2, r1
 8006520:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006522:	e023      	b.n	800656c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	68b9      	ldr	r1, [r7, #8]
 800652a:	4618      	mov	r0, r3
 800652c:	f000 fc9c 	bl	8006e68 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800653e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800654e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	691b      	ldr	r3, [r3, #16]
 800655a:	021a      	lsls	r2, r3, #8
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	430a      	orrs	r2, r1
 8006562:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006564:	e002      	b.n	800656c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	75fb      	strb	r3, [r7, #23]
      break;
 800656a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2200      	movs	r2, #0
 8006570:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006574:	7dfb      	ldrb	r3, [r7, #23]
}
 8006576:	4618      	mov	r0, r3
 8006578:	3718      	adds	r7, #24
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}
 800657e:	bf00      	nop

08006580 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b084      	sub	sp, #16
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800658a:	2300      	movs	r3, #0
 800658c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006594:	2b01      	cmp	r3, #1
 8006596:	d101      	bne.n	800659c <HAL_TIM_ConfigClockSource+0x1c>
 8006598:	2302      	movs	r3, #2
 800659a:	e0dc      	b.n	8006756 <HAL_TIM_ConfigClockSource+0x1d6>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2201      	movs	r2, #1
 80065a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2202      	movs	r2, #2
 80065a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80065b4:	68ba      	ldr	r2, [r7, #8]
 80065b6:	4b6a      	ldr	r3, [pc, #424]	@ (8006760 <HAL_TIM_ConfigClockSource+0x1e0>)
 80065b8:	4013      	ands	r3, r2
 80065ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80065c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	68ba      	ldr	r2, [r7, #8]
 80065ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a64      	ldr	r2, [pc, #400]	@ (8006764 <HAL_TIM_ConfigClockSource+0x1e4>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	f000 80a9 	beq.w	800672a <HAL_TIM_ConfigClockSource+0x1aa>
 80065d8:	4a62      	ldr	r2, [pc, #392]	@ (8006764 <HAL_TIM_ConfigClockSource+0x1e4>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	f200 80ae 	bhi.w	800673c <HAL_TIM_ConfigClockSource+0x1bc>
 80065e0:	4a61      	ldr	r2, [pc, #388]	@ (8006768 <HAL_TIM_ConfigClockSource+0x1e8>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	f000 80a1 	beq.w	800672a <HAL_TIM_ConfigClockSource+0x1aa>
 80065e8:	4a5f      	ldr	r2, [pc, #380]	@ (8006768 <HAL_TIM_ConfigClockSource+0x1e8>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	f200 80a6 	bhi.w	800673c <HAL_TIM_ConfigClockSource+0x1bc>
 80065f0:	4a5e      	ldr	r2, [pc, #376]	@ (800676c <HAL_TIM_ConfigClockSource+0x1ec>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	f000 8099 	beq.w	800672a <HAL_TIM_ConfigClockSource+0x1aa>
 80065f8:	4a5c      	ldr	r2, [pc, #368]	@ (800676c <HAL_TIM_ConfigClockSource+0x1ec>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	f200 809e 	bhi.w	800673c <HAL_TIM_ConfigClockSource+0x1bc>
 8006600:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006604:	f000 8091 	beq.w	800672a <HAL_TIM_ConfigClockSource+0x1aa>
 8006608:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800660c:	f200 8096 	bhi.w	800673c <HAL_TIM_ConfigClockSource+0x1bc>
 8006610:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006614:	f000 8089 	beq.w	800672a <HAL_TIM_ConfigClockSource+0x1aa>
 8006618:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800661c:	f200 808e 	bhi.w	800673c <HAL_TIM_ConfigClockSource+0x1bc>
 8006620:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006624:	d03e      	beq.n	80066a4 <HAL_TIM_ConfigClockSource+0x124>
 8006626:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800662a:	f200 8087 	bhi.w	800673c <HAL_TIM_ConfigClockSource+0x1bc>
 800662e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006632:	f000 8086 	beq.w	8006742 <HAL_TIM_ConfigClockSource+0x1c2>
 8006636:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800663a:	d87f      	bhi.n	800673c <HAL_TIM_ConfigClockSource+0x1bc>
 800663c:	2b70      	cmp	r3, #112	@ 0x70
 800663e:	d01a      	beq.n	8006676 <HAL_TIM_ConfigClockSource+0xf6>
 8006640:	2b70      	cmp	r3, #112	@ 0x70
 8006642:	d87b      	bhi.n	800673c <HAL_TIM_ConfigClockSource+0x1bc>
 8006644:	2b60      	cmp	r3, #96	@ 0x60
 8006646:	d050      	beq.n	80066ea <HAL_TIM_ConfigClockSource+0x16a>
 8006648:	2b60      	cmp	r3, #96	@ 0x60
 800664a:	d877      	bhi.n	800673c <HAL_TIM_ConfigClockSource+0x1bc>
 800664c:	2b50      	cmp	r3, #80	@ 0x50
 800664e:	d03c      	beq.n	80066ca <HAL_TIM_ConfigClockSource+0x14a>
 8006650:	2b50      	cmp	r3, #80	@ 0x50
 8006652:	d873      	bhi.n	800673c <HAL_TIM_ConfigClockSource+0x1bc>
 8006654:	2b40      	cmp	r3, #64	@ 0x40
 8006656:	d058      	beq.n	800670a <HAL_TIM_ConfigClockSource+0x18a>
 8006658:	2b40      	cmp	r3, #64	@ 0x40
 800665a:	d86f      	bhi.n	800673c <HAL_TIM_ConfigClockSource+0x1bc>
 800665c:	2b30      	cmp	r3, #48	@ 0x30
 800665e:	d064      	beq.n	800672a <HAL_TIM_ConfigClockSource+0x1aa>
 8006660:	2b30      	cmp	r3, #48	@ 0x30
 8006662:	d86b      	bhi.n	800673c <HAL_TIM_ConfigClockSource+0x1bc>
 8006664:	2b20      	cmp	r3, #32
 8006666:	d060      	beq.n	800672a <HAL_TIM_ConfigClockSource+0x1aa>
 8006668:	2b20      	cmp	r3, #32
 800666a:	d867      	bhi.n	800673c <HAL_TIM_ConfigClockSource+0x1bc>
 800666c:	2b00      	cmp	r3, #0
 800666e:	d05c      	beq.n	800672a <HAL_TIM_ConfigClockSource+0x1aa>
 8006670:	2b10      	cmp	r3, #16
 8006672:	d05a      	beq.n	800672a <HAL_TIM_ConfigClockSource+0x1aa>
 8006674:	e062      	b.n	800673c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006686:	f000 fdfd 	bl	8007284 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006698:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	68ba      	ldr	r2, [r7, #8]
 80066a0:	609a      	str	r2, [r3, #8]
      break;
 80066a2:	e04f      	b.n	8006744 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80066b4:	f000 fde6 	bl	8007284 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	689a      	ldr	r2, [r3, #8]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80066c6:	609a      	str	r2, [r3, #8]
      break;
 80066c8:	e03c      	b.n	8006744 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066d6:	461a      	mov	r2, r3
 80066d8:	f000 fca0 	bl	800701c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	2150      	movs	r1, #80	@ 0x50
 80066e2:	4618      	mov	r0, r3
 80066e4:	f000 fdb0 	bl	8007248 <TIM_ITRx_SetConfig>
      break;
 80066e8:	e02c      	b.n	8006744 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80066f6:	461a      	mov	r2, r3
 80066f8:	f000 fcfc 	bl	80070f4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	2160      	movs	r1, #96	@ 0x60
 8006702:	4618      	mov	r0, r3
 8006704:	f000 fda0 	bl	8007248 <TIM_ITRx_SetConfig>
      break;
 8006708:	e01c      	b.n	8006744 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006716:	461a      	mov	r2, r3
 8006718:	f000 fc80 	bl	800701c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	2140      	movs	r1, #64	@ 0x40
 8006722:	4618      	mov	r0, r3
 8006724:	f000 fd90 	bl	8007248 <TIM_ITRx_SetConfig>
      break;
 8006728:	e00c      	b.n	8006744 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4619      	mov	r1, r3
 8006734:	4610      	mov	r0, r2
 8006736:	f000 fd87 	bl	8007248 <TIM_ITRx_SetConfig>
      break;
 800673a:	e003      	b.n	8006744 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800673c:	2301      	movs	r3, #1
 800673e:	73fb      	strb	r3, [r7, #15]
      break;
 8006740:	e000      	b.n	8006744 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8006742:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2201      	movs	r2, #1
 8006748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006754:	7bfb      	ldrb	r3, [r7, #15]
}
 8006756:	4618      	mov	r0, r3
 8006758:	3710      	adds	r7, #16
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
 800675e:	bf00      	nop
 8006760:	ffceff88 	.word	0xffceff88
 8006764:	00100040 	.word	0x00100040
 8006768:	00100030 	.word	0x00100030
 800676c:	00100020 	.word	0x00100020

08006770 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006770:	b480      	push	{r7}
 8006772:	b085      	sub	sp, #20
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800677a:	2300      	movs	r3, #0
 800677c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	2b0c      	cmp	r3, #12
 8006782:	d831      	bhi.n	80067e8 <HAL_TIM_ReadCapturedValue+0x78>
 8006784:	a201      	add	r2, pc, #4	@ (adr r2, 800678c <HAL_TIM_ReadCapturedValue+0x1c>)
 8006786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800678a:	bf00      	nop
 800678c:	080067c1 	.word	0x080067c1
 8006790:	080067e9 	.word	0x080067e9
 8006794:	080067e9 	.word	0x080067e9
 8006798:	080067e9 	.word	0x080067e9
 800679c:	080067cb 	.word	0x080067cb
 80067a0:	080067e9 	.word	0x080067e9
 80067a4:	080067e9 	.word	0x080067e9
 80067a8:	080067e9 	.word	0x080067e9
 80067ac:	080067d5 	.word	0x080067d5
 80067b0:	080067e9 	.word	0x080067e9
 80067b4:	080067e9 	.word	0x080067e9
 80067b8:	080067e9 	.word	0x080067e9
 80067bc:	080067df 	.word	0x080067df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067c6:	60fb      	str	r3, [r7, #12]

      break;
 80067c8:	e00f      	b.n	80067ea <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067d0:	60fb      	str	r3, [r7, #12]

      break;
 80067d2:	e00a      	b.n	80067ea <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067da:	60fb      	str	r3, [r7, #12]

      break;
 80067dc:	e005      	b.n	80067ea <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067e4:	60fb      	str	r3, [r7, #12]

      break;
 80067e6:	e000      	b.n	80067ea <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80067e8:	bf00      	nop
  }

  return tmpreg;
 80067ea:	68fb      	ldr	r3, [r7, #12]
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3714      	adds	r7, #20
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr

080067f8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b083      	sub	sp, #12
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006800:	bf00      	nop
 8006802:	370c      	adds	r7, #12
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr

0800680c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800680c:	b480      	push	{r7}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006814:	bf00      	nop
 8006816:	370c      	adds	r7, #12
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr

08006820 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006828:	bf00      	nop
 800682a:	370c      	adds	r7, #12
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr

08006834 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006834:	b480      	push	{r7}
 8006836:	b083      	sub	sp, #12
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800683c:	bf00      	nop
 800683e:	370c      	adds	r7, #12
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006848:	b480      	push	{r7}
 800684a:	b085      	sub	sp, #20
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	4a43      	ldr	r2, [pc, #268]	@ (8006968 <TIM_Base_SetConfig+0x120>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d013      	beq.n	8006888 <TIM_Base_SetConfig+0x40>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006866:	d00f      	beq.n	8006888 <TIM_Base_SetConfig+0x40>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4a40      	ldr	r2, [pc, #256]	@ (800696c <TIM_Base_SetConfig+0x124>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d00b      	beq.n	8006888 <TIM_Base_SetConfig+0x40>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	4a3f      	ldr	r2, [pc, #252]	@ (8006970 <TIM_Base_SetConfig+0x128>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d007      	beq.n	8006888 <TIM_Base_SetConfig+0x40>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	4a3e      	ldr	r2, [pc, #248]	@ (8006974 <TIM_Base_SetConfig+0x12c>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d003      	beq.n	8006888 <TIM_Base_SetConfig+0x40>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4a3d      	ldr	r2, [pc, #244]	@ (8006978 <TIM_Base_SetConfig+0x130>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d108      	bne.n	800689a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800688e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	68fa      	ldr	r2, [r7, #12]
 8006896:	4313      	orrs	r3, r2
 8006898:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4a32      	ldr	r2, [pc, #200]	@ (8006968 <TIM_Base_SetConfig+0x120>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d01f      	beq.n	80068e2 <TIM_Base_SetConfig+0x9a>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068a8:	d01b      	beq.n	80068e2 <TIM_Base_SetConfig+0x9a>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	4a2f      	ldr	r2, [pc, #188]	@ (800696c <TIM_Base_SetConfig+0x124>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d017      	beq.n	80068e2 <TIM_Base_SetConfig+0x9a>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	4a2e      	ldr	r2, [pc, #184]	@ (8006970 <TIM_Base_SetConfig+0x128>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d013      	beq.n	80068e2 <TIM_Base_SetConfig+0x9a>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	4a2d      	ldr	r2, [pc, #180]	@ (8006974 <TIM_Base_SetConfig+0x12c>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d00f      	beq.n	80068e2 <TIM_Base_SetConfig+0x9a>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	4a2c      	ldr	r2, [pc, #176]	@ (8006978 <TIM_Base_SetConfig+0x130>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d00b      	beq.n	80068e2 <TIM_Base_SetConfig+0x9a>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	4a2b      	ldr	r2, [pc, #172]	@ (800697c <TIM_Base_SetConfig+0x134>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d007      	beq.n	80068e2 <TIM_Base_SetConfig+0x9a>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	4a2a      	ldr	r2, [pc, #168]	@ (8006980 <TIM_Base_SetConfig+0x138>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d003      	beq.n	80068e2 <TIM_Base_SetConfig+0x9a>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	4a29      	ldr	r2, [pc, #164]	@ (8006984 <TIM_Base_SetConfig+0x13c>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d108      	bne.n	80068f4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	68db      	ldr	r3, [r3, #12]
 80068ee:	68fa      	ldr	r2, [r7, #12]
 80068f0:	4313      	orrs	r3, r2
 80068f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	695b      	ldr	r3, [r3, #20]
 80068fe:	4313      	orrs	r3, r2
 8006900:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	689a      	ldr	r2, [r3, #8]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	4a14      	ldr	r2, [pc, #80]	@ (8006968 <TIM_Base_SetConfig+0x120>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d00f      	beq.n	800693a <TIM_Base_SetConfig+0xf2>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	4a16      	ldr	r2, [pc, #88]	@ (8006978 <TIM_Base_SetConfig+0x130>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d00b      	beq.n	800693a <TIM_Base_SetConfig+0xf2>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	4a15      	ldr	r2, [pc, #84]	@ (800697c <TIM_Base_SetConfig+0x134>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d007      	beq.n	800693a <TIM_Base_SetConfig+0xf2>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	4a14      	ldr	r2, [pc, #80]	@ (8006980 <TIM_Base_SetConfig+0x138>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d003      	beq.n	800693a <TIM_Base_SetConfig+0xf2>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	4a13      	ldr	r2, [pc, #76]	@ (8006984 <TIM_Base_SetConfig+0x13c>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d103      	bne.n	8006942 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	691a      	ldr	r2, [r3, #16]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f043 0204 	orr.w	r2, r3, #4
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2201      	movs	r2, #1
 8006952:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	68fa      	ldr	r2, [r7, #12]
 8006958:	601a      	str	r2, [r3, #0]
}
 800695a:	bf00      	nop
 800695c:	3714      	adds	r7, #20
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr
 8006966:	bf00      	nop
 8006968:	40010000 	.word	0x40010000
 800696c:	40000400 	.word	0x40000400
 8006970:	40000800 	.word	0x40000800
 8006974:	40000c00 	.word	0x40000c00
 8006978:	40010400 	.word	0x40010400
 800697c:	40014000 	.word	0x40014000
 8006980:	40014400 	.word	0x40014400
 8006984:	40014800 	.word	0x40014800

08006988 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006988:	b480      	push	{r7}
 800698a:	b087      	sub	sp, #28
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6a1b      	ldr	r3, [r3, #32]
 8006996:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6a1b      	ldr	r3, [r3, #32]
 800699c:	f023 0201 	bic.w	r2, r3, #1
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	699b      	ldr	r3, [r3, #24]
 80069ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80069b0:	68fa      	ldr	r2, [r7, #12]
 80069b2:	4b37      	ldr	r3, [pc, #220]	@ (8006a90 <TIM_OC1_SetConfig+0x108>)
 80069b4:	4013      	ands	r3, r2
 80069b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f023 0303 	bic.w	r3, r3, #3
 80069be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	68fa      	ldr	r2, [r7, #12]
 80069c6:	4313      	orrs	r3, r2
 80069c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	f023 0302 	bic.w	r3, r3, #2
 80069d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	697a      	ldr	r2, [r7, #20]
 80069d8:	4313      	orrs	r3, r2
 80069da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	4a2d      	ldr	r2, [pc, #180]	@ (8006a94 <TIM_OC1_SetConfig+0x10c>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d00f      	beq.n	8006a04 <TIM_OC1_SetConfig+0x7c>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4a2c      	ldr	r2, [pc, #176]	@ (8006a98 <TIM_OC1_SetConfig+0x110>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d00b      	beq.n	8006a04 <TIM_OC1_SetConfig+0x7c>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	4a2b      	ldr	r2, [pc, #172]	@ (8006a9c <TIM_OC1_SetConfig+0x114>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d007      	beq.n	8006a04 <TIM_OC1_SetConfig+0x7c>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	4a2a      	ldr	r2, [pc, #168]	@ (8006aa0 <TIM_OC1_SetConfig+0x118>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d003      	beq.n	8006a04 <TIM_OC1_SetConfig+0x7c>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	4a29      	ldr	r2, [pc, #164]	@ (8006aa4 <TIM_OC1_SetConfig+0x11c>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d10c      	bne.n	8006a1e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	f023 0308 	bic.w	r3, r3, #8
 8006a0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	697a      	ldr	r2, [r7, #20]
 8006a12:	4313      	orrs	r3, r2
 8006a14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	f023 0304 	bic.w	r3, r3, #4
 8006a1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	4a1c      	ldr	r2, [pc, #112]	@ (8006a94 <TIM_OC1_SetConfig+0x10c>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d00f      	beq.n	8006a46 <TIM_OC1_SetConfig+0xbe>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	4a1b      	ldr	r2, [pc, #108]	@ (8006a98 <TIM_OC1_SetConfig+0x110>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d00b      	beq.n	8006a46 <TIM_OC1_SetConfig+0xbe>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	4a1a      	ldr	r2, [pc, #104]	@ (8006a9c <TIM_OC1_SetConfig+0x114>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d007      	beq.n	8006a46 <TIM_OC1_SetConfig+0xbe>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4a19      	ldr	r2, [pc, #100]	@ (8006aa0 <TIM_OC1_SetConfig+0x118>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d003      	beq.n	8006a46 <TIM_OC1_SetConfig+0xbe>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4a18      	ldr	r2, [pc, #96]	@ (8006aa4 <TIM_OC1_SetConfig+0x11c>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d111      	bne.n	8006a6a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006a54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	695b      	ldr	r3, [r3, #20]
 8006a5a:	693a      	ldr	r2, [r7, #16]
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	699b      	ldr	r3, [r3, #24]
 8006a64:	693a      	ldr	r2, [r7, #16]
 8006a66:	4313      	orrs	r3, r2
 8006a68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	693a      	ldr	r2, [r7, #16]
 8006a6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	68fa      	ldr	r2, [r7, #12]
 8006a74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	685a      	ldr	r2, [r3, #4]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	697a      	ldr	r2, [r7, #20]
 8006a82:	621a      	str	r2, [r3, #32]
}
 8006a84:	bf00      	nop
 8006a86:	371c      	adds	r7, #28
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr
 8006a90:	fffeff8f 	.word	0xfffeff8f
 8006a94:	40010000 	.word	0x40010000
 8006a98:	40010400 	.word	0x40010400
 8006a9c:	40014000 	.word	0x40014000
 8006aa0:	40014400 	.word	0x40014400
 8006aa4:	40014800 	.word	0x40014800

08006aa8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b087      	sub	sp, #28
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
 8006ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6a1b      	ldr	r3, [r3, #32]
 8006ab6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6a1b      	ldr	r3, [r3, #32]
 8006abc:	f023 0210 	bic.w	r2, r3, #16
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	699b      	ldr	r3, [r3, #24]
 8006ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ad0:	68fa      	ldr	r2, [r7, #12]
 8006ad2:	4b34      	ldr	r3, [pc, #208]	@ (8006ba4 <TIM_OC2_SetConfig+0xfc>)
 8006ad4:	4013      	ands	r3, r2
 8006ad6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ade:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	021b      	lsls	r3, r3, #8
 8006ae6:	68fa      	ldr	r2, [r7, #12]
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	f023 0320 	bic.w	r3, r3, #32
 8006af2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	011b      	lsls	r3, r3, #4
 8006afa:	697a      	ldr	r2, [r7, #20]
 8006afc:	4313      	orrs	r3, r2
 8006afe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	4a29      	ldr	r2, [pc, #164]	@ (8006ba8 <TIM_OC2_SetConfig+0x100>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d003      	beq.n	8006b10 <TIM_OC2_SetConfig+0x68>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	4a28      	ldr	r2, [pc, #160]	@ (8006bac <TIM_OC2_SetConfig+0x104>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d10d      	bne.n	8006b2c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	68db      	ldr	r3, [r3, #12]
 8006b1c:	011b      	lsls	r3, r3, #4
 8006b1e:	697a      	ldr	r2, [r7, #20]
 8006b20:	4313      	orrs	r3, r2
 8006b22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b2a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	4a1e      	ldr	r2, [pc, #120]	@ (8006ba8 <TIM_OC2_SetConfig+0x100>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d00f      	beq.n	8006b54 <TIM_OC2_SetConfig+0xac>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	4a1d      	ldr	r2, [pc, #116]	@ (8006bac <TIM_OC2_SetConfig+0x104>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d00b      	beq.n	8006b54 <TIM_OC2_SetConfig+0xac>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	4a1c      	ldr	r2, [pc, #112]	@ (8006bb0 <TIM_OC2_SetConfig+0x108>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d007      	beq.n	8006b54 <TIM_OC2_SetConfig+0xac>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	4a1b      	ldr	r2, [pc, #108]	@ (8006bb4 <TIM_OC2_SetConfig+0x10c>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d003      	beq.n	8006b54 <TIM_OC2_SetConfig+0xac>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	4a1a      	ldr	r2, [pc, #104]	@ (8006bb8 <TIM_OC2_SetConfig+0x110>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d113      	bne.n	8006b7c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006b5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006b62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	695b      	ldr	r3, [r3, #20]
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	693a      	ldr	r2, [r7, #16]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	699b      	ldr	r3, [r3, #24]
 8006b74:	009b      	lsls	r3, r3, #2
 8006b76:	693a      	ldr	r2, [r7, #16]
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	693a      	ldr	r2, [r7, #16]
 8006b80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	68fa      	ldr	r2, [r7, #12]
 8006b86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	685a      	ldr	r2, [r3, #4]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	697a      	ldr	r2, [r7, #20]
 8006b94:	621a      	str	r2, [r3, #32]
}
 8006b96:	bf00      	nop
 8006b98:	371c      	adds	r7, #28
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr
 8006ba2:	bf00      	nop
 8006ba4:	feff8fff 	.word	0xfeff8fff
 8006ba8:	40010000 	.word	0x40010000
 8006bac:	40010400 	.word	0x40010400
 8006bb0:	40014000 	.word	0x40014000
 8006bb4:	40014400 	.word	0x40014400
 8006bb8:	40014800 	.word	0x40014800

08006bbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b087      	sub	sp, #28
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6a1b      	ldr	r3, [r3, #32]
 8006bca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6a1b      	ldr	r3, [r3, #32]
 8006bd0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	69db      	ldr	r3, [r3, #28]
 8006be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006be4:	68fa      	ldr	r2, [r7, #12]
 8006be6:	4b33      	ldr	r3, [pc, #204]	@ (8006cb4 <TIM_OC3_SetConfig+0xf8>)
 8006be8:	4013      	ands	r3, r2
 8006bea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f023 0303 	bic.w	r3, r3, #3
 8006bf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	68fa      	ldr	r2, [r7, #12]
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006c04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	021b      	lsls	r3, r3, #8
 8006c0c:	697a      	ldr	r2, [r7, #20]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	4a28      	ldr	r2, [pc, #160]	@ (8006cb8 <TIM_OC3_SetConfig+0xfc>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d003      	beq.n	8006c22 <TIM_OC3_SetConfig+0x66>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	4a27      	ldr	r2, [pc, #156]	@ (8006cbc <TIM_OC3_SetConfig+0x100>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d10d      	bne.n	8006c3e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006c28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	68db      	ldr	r3, [r3, #12]
 8006c2e:	021b      	lsls	r3, r3, #8
 8006c30:	697a      	ldr	r2, [r7, #20]
 8006c32:	4313      	orrs	r3, r2
 8006c34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006c3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	4a1d      	ldr	r2, [pc, #116]	@ (8006cb8 <TIM_OC3_SetConfig+0xfc>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d00f      	beq.n	8006c66 <TIM_OC3_SetConfig+0xaa>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4a1c      	ldr	r2, [pc, #112]	@ (8006cbc <TIM_OC3_SetConfig+0x100>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d00b      	beq.n	8006c66 <TIM_OC3_SetConfig+0xaa>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4a1b      	ldr	r2, [pc, #108]	@ (8006cc0 <TIM_OC3_SetConfig+0x104>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d007      	beq.n	8006c66 <TIM_OC3_SetConfig+0xaa>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	4a1a      	ldr	r2, [pc, #104]	@ (8006cc4 <TIM_OC3_SetConfig+0x108>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d003      	beq.n	8006c66 <TIM_OC3_SetConfig+0xaa>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	4a19      	ldr	r2, [pc, #100]	@ (8006cc8 <TIM_OC3_SetConfig+0x10c>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d113      	bne.n	8006c8e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006c6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006c74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	695b      	ldr	r3, [r3, #20]
 8006c7a:	011b      	lsls	r3, r3, #4
 8006c7c:	693a      	ldr	r2, [r7, #16]
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	699b      	ldr	r3, [r3, #24]
 8006c86:	011b      	lsls	r3, r3, #4
 8006c88:	693a      	ldr	r2, [r7, #16]
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	693a      	ldr	r2, [r7, #16]
 8006c92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	68fa      	ldr	r2, [r7, #12]
 8006c98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	685a      	ldr	r2, [r3, #4]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	697a      	ldr	r2, [r7, #20]
 8006ca6:	621a      	str	r2, [r3, #32]
}
 8006ca8:	bf00      	nop
 8006caa:	371c      	adds	r7, #28
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr
 8006cb4:	fffeff8f 	.word	0xfffeff8f
 8006cb8:	40010000 	.word	0x40010000
 8006cbc:	40010400 	.word	0x40010400
 8006cc0:	40014000 	.word	0x40014000
 8006cc4:	40014400 	.word	0x40014400
 8006cc8:	40014800 	.word	0x40014800

08006ccc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b087      	sub	sp, #28
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6a1b      	ldr	r3, [r3, #32]
 8006cda:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6a1b      	ldr	r3, [r3, #32]
 8006ce0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	69db      	ldr	r3, [r3, #28]
 8006cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006cf4:	68fa      	ldr	r2, [r7, #12]
 8006cf6:	4b24      	ldr	r3, [pc, #144]	@ (8006d88 <TIM_OC4_SetConfig+0xbc>)
 8006cf8:	4013      	ands	r3, r2
 8006cfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	021b      	lsls	r3, r3, #8
 8006d0a:	68fa      	ldr	r2, [r7, #12]
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006d16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	031b      	lsls	r3, r3, #12
 8006d1e:	693a      	ldr	r2, [r7, #16]
 8006d20:	4313      	orrs	r3, r2
 8006d22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	4a19      	ldr	r2, [pc, #100]	@ (8006d8c <TIM_OC4_SetConfig+0xc0>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d00f      	beq.n	8006d4c <TIM_OC4_SetConfig+0x80>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	4a18      	ldr	r2, [pc, #96]	@ (8006d90 <TIM_OC4_SetConfig+0xc4>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d00b      	beq.n	8006d4c <TIM_OC4_SetConfig+0x80>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	4a17      	ldr	r2, [pc, #92]	@ (8006d94 <TIM_OC4_SetConfig+0xc8>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d007      	beq.n	8006d4c <TIM_OC4_SetConfig+0x80>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	4a16      	ldr	r2, [pc, #88]	@ (8006d98 <TIM_OC4_SetConfig+0xcc>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d003      	beq.n	8006d4c <TIM_OC4_SetConfig+0x80>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	4a15      	ldr	r2, [pc, #84]	@ (8006d9c <TIM_OC4_SetConfig+0xd0>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d109      	bne.n	8006d60 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	695b      	ldr	r3, [r3, #20]
 8006d58:	019b      	lsls	r3, r3, #6
 8006d5a:	697a      	ldr	r2, [r7, #20]
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	697a      	ldr	r2, [r7, #20]
 8006d64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	68fa      	ldr	r2, [r7, #12]
 8006d6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	685a      	ldr	r2, [r3, #4]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	693a      	ldr	r2, [r7, #16]
 8006d78:	621a      	str	r2, [r3, #32]
}
 8006d7a:	bf00      	nop
 8006d7c:	371c      	adds	r7, #28
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr
 8006d86:	bf00      	nop
 8006d88:	feff8fff 	.word	0xfeff8fff
 8006d8c:	40010000 	.word	0x40010000
 8006d90:	40010400 	.word	0x40010400
 8006d94:	40014000 	.word	0x40014000
 8006d98:	40014400 	.word	0x40014400
 8006d9c:	40014800 	.word	0x40014800

08006da0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b087      	sub	sp, #28
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6a1b      	ldr	r3, [r3, #32]
 8006dae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6a1b      	ldr	r3, [r3, #32]
 8006db4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006dc8:	68fa      	ldr	r2, [r7, #12]
 8006dca:	4b21      	ldr	r3, [pc, #132]	@ (8006e50 <TIM_OC5_SetConfig+0xb0>)
 8006dcc:	4013      	ands	r3, r2
 8006dce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	68fa      	ldr	r2, [r7, #12]
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006de0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	041b      	lsls	r3, r3, #16
 8006de8:	693a      	ldr	r2, [r7, #16]
 8006dea:	4313      	orrs	r3, r2
 8006dec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	4a18      	ldr	r2, [pc, #96]	@ (8006e54 <TIM_OC5_SetConfig+0xb4>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d00f      	beq.n	8006e16 <TIM_OC5_SetConfig+0x76>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	4a17      	ldr	r2, [pc, #92]	@ (8006e58 <TIM_OC5_SetConfig+0xb8>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d00b      	beq.n	8006e16 <TIM_OC5_SetConfig+0x76>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	4a16      	ldr	r2, [pc, #88]	@ (8006e5c <TIM_OC5_SetConfig+0xbc>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d007      	beq.n	8006e16 <TIM_OC5_SetConfig+0x76>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	4a15      	ldr	r2, [pc, #84]	@ (8006e60 <TIM_OC5_SetConfig+0xc0>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d003      	beq.n	8006e16 <TIM_OC5_SetConfig+0x76>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	4a14      	ldr	r2, [pc, #80]	@ (8006e64 <TIM_OC5_SetConfig+0xc4>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d109      	bne.n	8006e2a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e1c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	695b      	ldr	r3, [r3, #20]
 8006e22:	021b      	lsls	r3, r3, #8
 8006e24:	697a      	ldr	r2, [r7, #20]
 8006e26:	4313      	orrs	r3, r2
 8006e28:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	697a      	ldr	r2, [r7, #20]
 8006e2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	68fa      	ldr	r2, [r7, #12]
 8006e34:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	685a      	ldr	r2, [r3, #4]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	693a      	ldr	r2, [r7, #16]
 8006e42:	621a      	str	r2, [r3, #32]
}
 8006e44:	bf00      	nop
 8006e46:	371c      	adds	r7, #28
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr
 8006e50:	fffeff8f 	.word	0xfffeff8f
 8006e54:	40010000 	.word	0x40010000
 8006e58:	40010400 	.word	0x40010400
 8006e5c:	40014000 	.word	0x40014000
 8006e60:	40014400 	.word	0x40014400
 8006e64:	40014800 	.word	0x40014800

08006e68 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b087      	sub	sp, #28
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6a1b      	ldr	r3, [r3, #32]
 8006e76:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6a1b      	ldr	r3, [r3, #32]
 8006e7c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006e90:	68fa      	ldr	r2, [r7, #12]
 8006e92:	4b22      	ldr	r3, [pc, #136]	@ (8006f1c <TIM_OC6_SetConfig+0xb4>)
 8006e94:	4013      	ands	r3, r2
 8006e96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	021b      	lsls	r3, r3, #8
 8006e9e:	68fa      	ldr	r2, [r7, #12]
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006eaa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	051b      	lsls	r3, r3, #20
 8006eb2:	693a      	ldr	r2, [r7, #16]
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	4a19      	ldr	r2, [pc, #100]	@ (8006f20 <TIM_OC6_SetConfig+0xb8>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d00f      	beq.n	8006ee0 <TIM_OC6_SetConfig+0x78>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	4a18      	ldr	r2, [pc, #96]	@ (8006f24 <TIM_OC6_SetConfig+0xbc>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d00b      	beq.n	8006ee0 <TIM_OC6_SetConfig+0x78>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	4a17      	ldr	r2, [pc, #92]	@ (8006f28 <TIM_OC6_SetConfig+0xc0>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d007      	beq.n	8006ee0 <TIM_OC6_SetConfig+0x78>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	4a16      	ldr	r2, [pc, #88]	@ (8006f2c <TIM_OC6_SetConfig+0xc4>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d003      	beq.n	8006ee0 <TIM_OC6_SetConfig+0x78>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	4a15      	ldr	r2, [pc, #84]	@ (8006f30 <TIM_OC6_SetConfig+0xc8>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d109      	bne.n	8006ef4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006ee6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	695b      	ldr	r3, [r3, #20]
 8006eec:	029b      	lsls	r3, r3, #10
 8006eee:	697a      	ldr	r2, [r7, #20]
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	697a      	ldr	r2, [r7, #20]
 8006ef8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	68fa      	ldr	r2, [r7, #12]
 8006efe:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	685a      	ldr	r2, [r3, #4]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	693a      	ldr	r2, [r7, #16]
 8006f0c:	621a      	str	r2, [r3, #32]
}
 8006f0e:	bf00      	nop
 8006f10:	371c      	adds	r7, #28
 8006f12:	46bd      	mov	sp, r7
 8006f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f18:	4770      	bx	lr
 8006f1a:	bf00      	nop
 8006f1c:	feff8fff 	.word	0xfeff8fff
 8006f20:	40010000 	.word	0x40010000
 8006f24:	40010400 	.word	0x40010400
 8006f28:	40014000 	.word	0x40014000
 8006f2c:	40014400 	.word	0x40014400
 8006f30:	40014800 	.word	0x40014800

08006f34 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b087      	sub	sp, #28
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	60f8      	str	r0, [r7, #12]
 8006f3c:	60b9      	str	r1, [r7, #8]
 8006f3e:	607a      	str	r2, [r7, #4]
 8006f40:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	6a1b      	ldr	r3, [r3, #32]
 8006f46:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6a1b      	ldr	r3, [r3, #32]
 8006f4c:	f023 0201 	bic.w	r2, r3, #1
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	699b      	ldr	r3, [r3, #24]
 8006f58:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	4a28      	ldr	r2, [pc, #160]	@ (8007000 <TIM_TI1_SetConfig+0xcc>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d01b      	beq.n	8006f9a <TIM_TI1_SetConfig+0x66>
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f68:	d017      	beq.n	8006f9a <TIM_TI1_SetConfig+0x66>
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	4a25      	ldr	r2, [pc, #148]	@ (8007004 <TIM_TI1_SetConfig+0xd0>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d013      	beq.n	8006f9a <TIM_TI1_SetConfig+0x66>
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	4a24      	ldr	r2, [pc, #144]	@ (8007008 <TIM_TI1_SetConfig+0xd4>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d00f      	beq.n	8006f9a <TIM_TI1_SetConfig+0x66>
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	4a23      	ldr	r2, [pc, #140]	@ (800700c <TIM_TI1_SetConfig+0xd8>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d00b      	beq.n	8006f9a <TIM_TI1_SetConfig+0x66>
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	4a22      	ldr	r2, [pc, #136]	@ (8007010 <TIM_TI1_SetConfig+0xdc>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d007      	beq.n	8006f9a <TIM_TI1_SetConfig+0x66>
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	4a21      	ldr	r2, [pc, #132]	@ (8007014 <TIM_TI1_SetConfig+0xe0>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d003      	beq.n	8006f9a <TIM_TI1_SetConfig+0x66>
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	4a20      	ldr	r2, [pc, #128]	@ (8007018 <TIM_TI1_SetConfig+0xe4>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d101      	bne.n	8006f9e <TIM_TI1_SetConfig+0x6a>
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	e000      	b.n	8006fa0 <TIM_TI1_SetConfig+0x6c>
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d008      	beq.n	8006fb6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	f023 0303 	bic.w	r3, r3, #3
 8006faa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006fac:	697a      	ldr	r2, [r7, #20]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	617b      	str	r3, [r7, #20]
 8006fb4:	e003      	b.n	8006fbe <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	f043 0301 	orr.w	r3, r3, #1
 8006fbc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006fc4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	011b      	lsls	r3, r3, #4
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	697a      	ldr	r2, [r7, #20]
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	f023 030a 	bic.w	r3, r3, #10
 8006fd8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	f003 030a 	and.w	r3, r3, #10
 8006fe0:	693a      	ldr	r2, [r7, #16]
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	697a      	ldr	r2, [r7, #20]
 8006fea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	693a      	ldr	r2, [r7, #16]
 8006ff0:	621a      	str	r2, [r3, #32]
}
 8006ff2:	bf00      	nop
 8006ff4:	371c      	adds	r7, #28
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr
 8006ffe:	bf00      	nop
 8007000:	40010000 	.word	0x40010000
 8007004:	40000400 	.word	0x40000400
 8007008:	40000800 	.word	0x40000800
 800700c:	40000c00 	.word	0x40000c00
 8007010:	40010400 	.word	0x40010400
 8007014:	40001800 	.word	0x40001800
 8007018:	40014000 	.word	0x40014000

0800701c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800701c:	b480      	push	{r7}
 800701e:	b087      	sub	sp, #28
 8007020:	af00      	add	r7, sp, #0
 8007022:	60f8      	str	r0, [r7, #12]
 8007024:	60b9      	str	r1, [r7, #8]
 8007026:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	6a1b      	ldr	r3, [r3, #32]
 800702c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	6a1b      	ldr	r3, [r3, #32]
 8007032:	f023 0201 	bic.w	r2, r3, #1
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	699b      	ldr	r3, [r3, #24]
 800703e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007046:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	011b      	lsls	r3, r3, #4
 800704c:	693a      	ldr	r2, [r7, #16]
 800704e:	4313      	orrs	r3, r2
 8007050:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	f023 030a 	bic.w	r3, r3, #10
 8007058:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800705a:	697a      	ldr	r2, [r7, #20]
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	4313      	orrs	r3, r2
 8007060:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	693a      	ldr	r2, [r7, #16]
 8007066:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	697a      	ldr	r2, [r7, #20]
 800706c:	621a      	str	r2, [r3, #32]
}
 800706e:	bf00      	nop
 8007070:	371c      	adds	r7, #28
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr

0800707a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800707a:	b480      	push	{r7}
 800707c:	b087      	sub	sp, #28
 800707e:	af00      	add	r7, sp, #0
 8007080:	60f8      	str	r0, [r7, #12]
 8007082:	60b9      	str	r1, [r7, #8]
 8007084:	607a      	str	r2, [r7, #4]
 8007086:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	6a1b      	ldr	r3, [r3, #32]
 800708c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	6a1b      	ldr	r3, [r3, #32]
 8007092:	f023 0210 	bic.w	r2, r3, #16
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	699b      	ldr	r3, [r3, #24]
 800709e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80070a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	021b      	lsls	r3, r3, #8
 80070ac:	693a      	ldr	r2, [r7, #16]
 80070ae:	4313      	orrs	r3, r2
 80070b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80070b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	031b      	lsls	r3, r3, #12
 80070be:	b29b      	uxth	r3, r3
 80070c0:	693a      	ldr	r2, [r7, #16]
 80070c2:	4313      	orrs	r3, r2
 80070c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80070cc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	011b      	lsls	r3, r3, #4
 80070d2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80070d6:	697a      	ldr	r2, [r7, #20]
 80070d8:	4313      	orrs	r3, r2
 80070da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	693a      	ldr	r2, [r7, #16]
 80070e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	697a      	ldr	r2, [r7, #20]
 80070e6:	621a      	str	r2, [r3, #32]
}
 80070e8:	bf00      	nop
 80070ea:	371c      	adds	r7, #28
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr

080070f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b087      	sub	sp, #28
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	60f8      	str	r0, [r7, #12]
 80070fc:	60b9      	str	r1, [r7, #8]
 80070fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	6a1b      	ldr	r3, [r3, #32]
 8007104:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	6a1b      	ldr	r3, [r3, #32]
 800710a:	f023 0210 	bic.w	r2, r3, #16
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	699b      	ldr	r3, [r3, #24]
 8007116:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800711e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	031b      	lsls	r3, r3, #12
 8007124:	693a      	ldr	r2, [r7, #16]
 8007126:	4313      	orrs	r3, r2
 8007128:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007130:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	011b      	lsls	r3, r3, #4
 8007136:	697a      	ldr	r2, [r7, #20]
 8007138:	4313      	orrs	r3, r2
 800713a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	693a      	ldr	r2, [r7, #16]
 8007140:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	697a      	ldr	r2, [r7, #20]
 8007146:	621a      	str	r2, [r3, #32]
}
 8007148:	bf00      	nop
 800714a:	371c      	adds	r7, #28
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr

08007154 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007154:	b480      	push	{r7}
 8007156:	b087      	sub	sp, #28
 8007158:	af00      	add	r7, sp, #0
 800715a:	60f8      	str	r0, [r7, #12]
 800715c:	60b9      	str	r1, [r7, #8]
 800715e:	607a      	str	r2, [r7, #4]
 8007160:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	6a1b      	ldr	r3, [r3, #32]
 8007166:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	6a1b      	ldr	r3, [r3, #32]
 800716c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	69db      	ldr	r3, [r3, #28]
 8007178:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	f023 0303 	bic.w	r3, r3, #3
 8007180:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8007182:	693a      	ldr	r2, [r7, #16]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	4313      	orrs	r3, r2
 8007188:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007190:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	011b      	lsls	r3, r3, #4
 8007196:	b2db      	uxtb	r3, r3
 8007198:	693a      	ldr	r2, [r7, #16]
 800719a:	4313      	orrs	r3, r2
 800719c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80071a4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	021b      	lsls	r3, r3, #8
 80071aa:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80071ae:	697a      	ldr	r2, [r7, #20]
 80071b0:	4313      	orrs	r3, r2
 80071b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	693a      	ldr	r2, [r7, #16]
 80071b8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	697a      	ldr	r2, [r7, #20]
 80071be:	621a      	str	r2, [r3, #32]
}
 80071c0:	bf00      	nop
 80071c2:	371c      	adds	r7, #28
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr

080071cc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b087      	sub	sp, #28
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	60f8      	str	r0, [r7, #12]
 80071d4:	60b9      	str	r1, [r7, #8]
 80071d6:	607a      	str	r2, [r7, #4]
 80071d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	6a1b      	ldr	r3, [r3, #32]
 80071de:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	6a1b      	ldr	r3, [r3, #32]
 80071e4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	69db      	ldr	r3, [r3, #28]
 80071f0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80071f8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	021b      	lsls	r3, r3, #8
 80071fe:	693a      	ldr	r2, [r7, #16]
 8007200:	4313      	orrs	r3, r2
 8007202:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800720a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	031b      	lsls	r3, r3, #12
 8007210:	b29b      	uxth	r3, r3
 8007212:	693a      	ldr	r2, [r7, #16]
 8007214:	4313      	orrs	r3, r2
 8007216:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800721e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	031b      	lsls	r3, r3, #12
 8007224:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8007228:	697a      	ldr	r2, [r7, #20]
 800722a:	4313      	orrs	r3, r2
 800722c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	693a      	ldr	r2, [r7, #16]
 8007232:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	697a      	ldr	r2, [r7, #20]
 8007238:	621a      	str	r2, [r3, #32]
}
 800723a:	bf00      	nop
 800723c:	371c      	adds	r7, #28
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr
	...

08007248 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007248:	b480      	push	{r7}
 800724a:	b085      	sub	sp, #20
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	689b      	ldr	r3, [r3, #8]
 8007256:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007258:	68fa      	ldr	r2, [r7, #12]
 800725a:	4b09      	ldr	r3, [pc, #36]	@ (8007280 <TIM_ITRx_SetConfig+0x38>)
 800725c:	4013      	ands	r3, r2
 800725e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007260:	683a      	ldr	r2, [r7, #0]
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	4313      	orrs	r3, r2
 8007266:	f043 0307 	orr.w	r3, r3, #7
 800726a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	68fa      	ldr	r2, [r7, #12]
 8007270:	609a      	str	r2, [r3, #8]
}
 8007272:	bf00      	nop
 8007274:	3714      	adds	r7, #20
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr
 800727e:	bf00      	nop
 8007280:	ffcfff8f 	.word	0xffcfff8f

08007284 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007284:	b480      	push	{r7}
 8007286:	b087      	sub	sp, #28
 8007288:	af00      	add	r7, sp, #0
 800728a:	60f8      	str	r0, [r7, #12]
 800728c:	60b9      	str	r1, [r7, #8]
 800728e:	607a      	str	r2, [r7, #4]
 8007290:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800729e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	021a      	lsls	r2, r3, #8
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	431a      	orrs	r2, r3
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	4313      	orrs	r3, r2
 80072ac:	697a      	ldr	r2, [r7, #20]
 80072ae:	4313      	orrs	r3, r2
 80072b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	697a      	ldr	r2, [r7, #20]
 80072b6:	609a      	str	r2, [r3, #8]
}
 80072b8:	bf00      	nop
 80072ba:	371c      	adds	r7, #28
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr

080072c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b087      	sub	sp, #28
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	60f8      	str	r0, [r7, #12]
 80072cc:	60b9      	str	r1, [r7, #8]
 80072ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	f003 031f 	and.w	r3, r3, #31
 80072d6:	2201      	movs	r2, #1
 80072d8:	fa02 f303 	lsl.w	r3, r2, r3
 80072dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	6a1a      	ldr	r2, [r3, #32]
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	43db      	mvns	r3, r3
 80072e6:	401a      	ands	r2, r3
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	6a1a      	ldr	r2, [r3, #32]
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	f003 031f 	and.w	r3, r3, #31
 80072f6:	6879      	ldr	r1, [r7, #4]
 80072f8:	fa01 f303 	lsl.w	r3, r1, r3
 80072fc:	431a      	orrs	r2, r3
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	621a      	str	r2, [r3, #32]
}
 8007302:	bf00      	nop
 8007304:	371c      	adds	r7, #28
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr
	...

08007310 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007310:	b480      	push	{r7}
 8007312:	b085      	sub	sp, #20
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007320:	2b01      	cmp	r3, #1
 8007322:	d101      	bne.n	8007328 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007324:	2302      	movs	r3, #2
 8007326:	e06d      	b.n	8007404 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2201      	movs	r2, #1
 800732c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2202      	movs	r2, #2
 8007334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a30      	ldr	r2, [pc, #192]	@ (8007410 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d004      	beq.n	800735c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a2f      	ldr	r2, [pc, #188]	@ (8007414 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d108      	bne.n	800736e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007362:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	68fa      	ldr	r2, [r7, #12]
 800736a:	4313      	orrs	r3, r2
 800736c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007374:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	68fa      	ldr	r2, [r7, #12]
 800737c:	4313      	orrs	r3, r2
 800737e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	68fa      	ldr	r2, [r7, #12]
 8007386:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a20      	ldr	r2, [pc, #128]	@ (8007410 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d022      	beq.n	80073d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800739a:	d01d      	beq.n	80073d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a1d      	ldr	r2, [pc, #116]	@ (8007418 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d018      	beq.n	80073d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a1c      	ldr	r2, [pc, #112]	@ (800741c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d013      	beq.n	80073d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a1a      	ldr	r2, [pc, #104]	@ (8007420 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d00e      	beq.n	80073d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a15      	ldr	r2, [pc, #84]	@ (8007414 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d009      	beq.n	80073d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a16      	ldr	r2, [pc, #88]	@ (8007424 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d004      	beq.n	80073d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a15      	ldr	r2, [pc, #84]	@ (8007428 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d10c      	bne.n	80073f2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80073de:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	68ba      	ldr	r2, [r7, #8]
 80073e6:	4313      	orrs	r3, r2
 80073e8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	68ba      	ldr	r2, [r7, #8]
 80073f0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2201      	movs	r2, #1
 80073f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2200      	movs	r2, #0
 80073fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007402:	2300      	movs	r3, #0
}
 8007404:	4618      	mov	r0, r3
 8007406:	3714      	adds	r7, #20
 8007408:	46bd      	mov	sp, r7
 800740a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740e:	4770      	bx	lr
 8007410:	40010000 	.word	0x40010000
 8007414:	40010400 	.word	0x40010400
 8007418:	40000400 	.word	0x40000400
 800741c:	40000800 	.word	0x40000800
 8007420:	40000c00 	.word	0x40000c00
 8007424:	40001800 	.word	0x40001800
 8007428:	40014000 	.word	0x40014000

0800742c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800742c:	b480      	push	{r7}
 800742e:	b083      	sub	sp, #12
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007434:	bf00      	nop
 8007436:	370c      	adds	r7, #12
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr

08007440 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007440:	b480      	push	{r7}
 8007442:	b083      	sub	sp, #12
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007448:	bf00      	nop
 800744a:	370c      	adds	r7, #12
 800744c:	46bd      	mov	sp, r7
 800744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007452:	4770      	bx	lr

08007454 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007454:	b480      	push	{r7}
 8007456:	b083      	sub	sp, #12
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800745c:	bf00      	nop
 800745e:	370c      	adds	r7, #12
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr

08007468 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b082      	sub	sp, #8
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d101      	bne.n	800747a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	e042      	b.n	8007500 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007480:	2b00      	cmp	r3, #0
 8007482:	d106      	bne.n	8007492 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f7fa f841 	bl	8001514 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2224      	movs	r2, #36	@ 0x24
 8007496:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f022 0201 	bic.w	r2, r2, #1
 80074a8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d002      	beq.n	80074b8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f001 fa14 	bl	80088e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f000 fca9 	bl	8007e10 <UART_SetConfig>
 80074be:	4603      	mov	r3, r0
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d101      	bne.n	80074c8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80074c4:	2301      	movs	r3, #1
 80074c6:	e01b      	b.n	8007500 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	685a      	ldr	r2, [r3, #4]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80074d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	689a      	ldr	r2, [r3, #8]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80074e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f042 0201 	orr.w	r2, r2, #1
 80074f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f001 fa93 	bl	8008a24 <UART_CheckIdleState>
 80074fe:	4603      	mov	r3, r0
}
 8007500:	4618      	mov	r0, r3
 8007502:	3708      	adds	r7, #8
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b08a      	sub	sp, #40	@ 0x28
 800750c:	af02      	add	r7, sp, #8
 800750e:	60f8      	str	r0, [r7, #12]
 8007510:	60b9      	str	r1, [r7, #8]
 8007512:	603b      	str	r3, [r7, #0]
 8007514:	4613      	mov	r3, r2
 8007516:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800751e:	2b20      	cmp	r3, #32
 8007520:	d17b      	bne.n	800761a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d002      	beq.n	800752e <HAL_UART_Transmit+0x26>
 8007528:	88fb      	ldrh	r3, [r7, #6]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d101      	bne.n	8007532 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800752e:	2301      	movs	r3, #1
 8007530:	e074      	b.n	800761c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2200      	movs	r2, #0
 8007536:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2221      	movs	r2, #33	@ 0x21
 800753e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007542:	f7fa f91d 	bl	8001780 <HAL_GetTick>
 8007546:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	88fa      	ldrh	r2, [r7, #6]
 800754c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	88fa      	ldrh	r2, [r7, #6]
 8007554:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	689b      	ldr	r3, [r3, #8]
 800755c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007560:	d108      	bne.n	8007574 <HAL_UART_Transmit+0x6c>
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	691b      	ldr	r3, [r3, #16]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d104      	bne.n	8007574 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800756a:	2300      	movs	r3, #0
 800756c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	61bb      	str	r3, [r7, #24]
 8007572:	e003      	b.n	800757c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007578:	2300      	movs	r3, #0
 800757a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800757c:	e030      	b.n	80075e0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	9300      	str	r3, [sp, #0]
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	2200      	movs	r2, #0
 8007586:	2180      	movs	r1, #128	@ 0x80
 8007588:	68f8      	ldr	r0, [r7, #12]
 800758a:	f001 faf5 	bl	8008b78 <UART_WaitOnFlagUntilTimeout>
 800758e:	4603      	mov	r3, r0
 8007590:	2b00      	cmp	r3, #0
 8007592:	d005      	beq.n	80075a0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2220      	movs	r2, #32
 8007598:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800759c:	2303      	movs	r3, #3
 800759e:	e03d      	b.n	800761c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80075a0:	69fb      	ldr	r3, [r7, #28]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d10b      	bne.n	80075be <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80075a6:	69bb      	ldr	r3, [r7, #24]
 80075a8:	881b      	ldrh	r3, [r3, #0]
 80075aa:	461a      	mov	r2, r3
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80075b4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80075b6:	69bb      	ldr	r3, [r7, #24]
 80075b8:	3302      	adds	r3, #2
 80075ba:	61bb      	str	r3, [r7, #24]
 80075bc:	e007      	b.n	80075ce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80075be:	69fb      	ldr	r3, [r7, #28]
 80075c0:	781a      	ldrb	r2, [r3, #0]
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80075c8:	69fb      	ldr	r3, [r7, #28]
 80075ca:	3301      	adds	r3, #1
 80075cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	3b01      	subs	r3, #1
 80075d8:	b29a      	uxth	r2, r3
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d1c8      	bne.n	800757e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	9300      	str	r3, [sp, #0]
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	2200      	movs	r2, #0
 80075f4:	2140      	movs	r1, #64	@ 0x40
 80075f6:	68f8      	ldr	r0, [r7, #12]
 80075f8:	f001 fabe 	bl	8008b78 <UART_WaitOnFlagUntilTimeout>
 80075fc:	4603      	mov	r3, r0
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d005      	beq.n	800760e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2220      	movs	r2, #32
 8007606:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800760a:	2303      	movs	r3, #3
 800760c:	e006      	b.n	800761c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2220      	movs	r2, #32
 8007612:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007616:	2300      	movs	r3, #0
 8007618:	e000      	b.n	800761c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800761a:	2302      	movs	r3, #2
  }
}
 800761c:	4618      	mov	r0, r3
 800761e:	3720      	adds	r7, #32
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}

08007624 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b0ba      	sub	sp, #232	@ 0xe8
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	69db      	ldr	r3, [r3, #28]
 8007632:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	689b      	ldr	r3, [r3, #8]
 8007646:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800764a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800764e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007652:	4013      	ands	r3, r2
 8007654:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007658:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800765c:	2b00      	cmp	r3, #0
 800765e:	d11b      	bne.n	8007698 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007660:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007664:	f003 0320 	and.w	r3, r3, #32
 8007668:	2b00      	cmp	r3, #0
 800766a:	d015      	beq.n	8007698 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800766c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007670:	f003 0320 	and.w	r3, r3, #32
 8007674:	2b00      	cmp	r3, #0
 8007676:	d105      	bne.n	8007684 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007678:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800767c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007680:	2b00      	cmp	r3, #0
 8007682:	d009      	beq.n	8007698 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007688:	2b00      	cmp	r3, #0
 800768a:	f000 8393 	beq.w	8007db4 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	4798      	blx	r3
      }
      return;
 8007696:	e38d      	b.n	8007db4 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007698:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800769c:	2b00      	cmp	r3, #0
 800769e:	f000 8123 	beq.w	80078e8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80076a2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80076a6:	4b8d      	ldr	r3, [pc, #564]	@ (80078dc <HAL_UART_IRQHandler+0x2b8>)
 80076a8:	4013      	ands	r3, r2
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d106      	bne.n	80076bc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80076ae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80076b2:	4b8b      	ldr	r3, [pc, #556]	@ (80078e0 <HAL_UART_IRQHandler+0x2bc>)
 80076b4:	4013      	ands	r3, r2
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	f000 8116 	beq.w	80078e8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80076bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076c0:	f003 0301 	and.w	r3, r3, #1
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d011      	beq.n	80076ec <HAL_UART_IRQHandler+0xc8>
 80076c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80076cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d00b      	beq.n	80076ec <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	2201      	movs	r2, #1
 80076da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076e2:	f043 0201 	orr.w	r2, r3, #1
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80076ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076f0:	f003 0302 	and.w	r3, r3, #2
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d011      	beq.n	800771c <HAL_UART_IRQHandler+0xf8>
 80076f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80076fc:	f003 0301 	and.w	r3, r3, #1
 8007700:	2b00      	cmp	r3, #0
 8007702:	d00b      	beq.n	800771c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	2202      	movs	r2, #2
 800770a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007712:	f043 0204 	orr.w	r2, r3, #4
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800771c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007720:	f003 0304 	and.w	r3, r3, #4
 8007724:	2b00      	cmp	r3, #0
 8007726:	d011      	beq.n	800774c <HAL_UART_IRQHandler+0x128>
 8007728:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800772c:	f003 0301 	and.w	r3, r3, #1
 8007730:	2b00      	cmp	r3, #0
 8007732:	d00b      	beq.n	800774c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	2204      	movs	r2, #4
 800773a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007742:	f043 0202 	orr.w	r2, r3, #2
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800774c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007750:	f003 0308 	and.w	r3, r3, #8
 8007754:	2b00      	cmp	r3, #0
 8007756:	d017      	beq.n	8007788 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007758:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800775c:	f003 0320 	and.w	r3, r3, #32
 8007760:	2b00      	cmp	r3, #0
 8007762:	d105      	bne.n	8007770 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007764:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007768:	4b5c      	ldr	r3, [pc, #368]	@ (80078dc <HAL_UART_IRQHandler+0x2b8>)
 800776a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800776c:	2b00      	cmp	r3, #0
 800776e:	d00b      	beq.n	8007788 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	2208      	movs	r2, #8
 8007776:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800777e:	f043 0208 	orr.w	r2, r3, #8
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007788:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800778c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007790:	2b00      	cmp	r3, #0
 8007792:	d012      	beq.n	80077ba <HAL_UART_IRQHandler+0x196>
 8007794:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007798:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800779c:	2b00      	cmp	r3, #0
 800779e:	d00c      	beq.n	80077ba <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80077a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077b0:	f043 0220 	orr.w	r2, r3, #32
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	f000 82f9 	beq.w	8007db8 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80077c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077ca:	f003 0320 	and.w	r3, r3, #32
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d013      	beq.n	80077fa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80077d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077d6:	f003 0320 	and.w	r3, r3, #32
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d105      	bne.n	80077ea <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80077de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80077e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d007      	beq.n	80077fa <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d003      	beq.n	80077fa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007800:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800780e:	2b40      	cmp	r3, #64	@ 0x40
 8007810:	d005      	beq.n	800781e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007812:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007816:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800781a:	2b00      	cmp	r3, #0
 800781c:	d054      	beq.n	80078c8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f001 fa18 	bl	8008c54 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	689b      	ldr	r3, [r3, #8]
 800782a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800782e:	2b40      	cmp	r3, #64	@ 0x40
 8007830:	d146      	bne.n	80078c0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	3308      	adds	r3, #8
 8007838:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800783c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007840:	e853 3f00 	ldrex	r3, [r3]
 8007844:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007848:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800784c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007850:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	3308      	adds	r3, #8
 800785a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800785e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007862:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007866:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800786a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800786e:	e841 2300 	strex	r3, r2, [r1]
 8007872:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007876:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800787a:	2b00      	cmp	r3, #0
 800787c:	d1d9      	bne.n	8007832 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007884:	2b00      	cmp	r3, #0
 8007886:	d017      	beq.n	80078b8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800788e:	4a15      	ldr	r2, [pc, #84]	@ (80078e4 <HAL_UART_IRQHandler+0x2c0>)
 8007890:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007898:	4618      	mov	r0, r3
 800789a:	f7fa fc53 	bl	8002144 <HAL_DMA_Abort_IT>
 800789e:	4603      	mov	r3, r0
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d019      	beq.n	80078d8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078ac:	687a      	ldr	r2, [r7, #4]
 80078ae:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80078b2:	4610      	mov	r0, r2
 80078b4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078b6:	e00f      	b.n	80078d8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 fa93 	bl	8007de4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078be:	e00b      	b.n	80078d8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 fa8f 	bl	8007de4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078c6:	e007      	b.n	80078d8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 fa8b 	bl	8007de4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2200      	movs	r2, #0
 80078d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80078d6:	e26f      	b.n	8007db8 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078d8:	bf00      	nop
    return;
 80078da:	e26d      	b.n	8007db8 <HAL_UART_IRQHandler+0x794>
 80078dc:	10000001 	.word	0x10000001
 80078e0:	04000120 	.word	0x04000120
 80078e4:	08008d21 	.word	0x08008d21

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	f040 8203 	bne.w	8007cf8 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80078f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078f6:	f003 0310 	and.w	r3, r3, #16
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	f000 81fc 	beq.w	8007cf8 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007900:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007904:	f003 0310 	and.w	r3, r3, #16
 8007908:	2b00      	cmp	r3, #0
 800790a:	f000 81f5 	beq.w	8007cf8 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	2210      	movs	r2, #16
 8007914:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007920:	2b40      	cmp	r3, #64	@ 0x40
 8007922:	f040 816d 	bne.w	8007c00 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4aa4      	ldr	r2, [pc, #656]	@ (8007bc0 <HAL_UART_IRQHandler+0x59c>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d068      	beq.n	8007a06 <HAL_UART_IRQHandler+0x3e2>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4aa1      	ldr	r2, [pc, #644]	@ (8007bc4 <HAL_UART_IRQHandler+0x5a0>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d061      	beq.n	8007a06 <HAL_UART_IRQHandler+0x3e2>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a9f      	ldr	r2, [pc, #636]	@ (8007bc8 <HAL_UART_IRQHandler+0x5a4>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d05a      	beq.n	8007a06 <HAL_UART_IRQHandler+0x3e2>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a9c      	ldr	r2, [pc, #624]	@ (8007bcc <HAL_UART_IRQHandler+0x5a8>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d053      	beq.n	8007a06 <HAL_UART_IRQHandler+0x3e2>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a9a      	ldr	r2, [pc, #616]	@ (8007bd0 <HAL_UART_IRQHandler+0x5ac>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d04c      	beq.n	8007a06 <HAL_UART_IRQHandler+0x3e2>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4a97      	ldr	r2, [pc, #604]	@ (8007bd4 <HAL_UART_IRQHandler+0x5b0>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d045      	beq.n	8007a06 <HAL_UART_IRQHandler+0x3e2>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a95      	ldr	r2, [pc, #596]	@ (8007bd8 <HAL_UART_IRQHandler+0x5b4>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d03e      	beq.n	8007a06 <HAL_UART_IRQHandler+0x3e2>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a92      	ldr	r2, [pc, #584]	@ (8007bdc <HAL_UART_IRQHandler+0x5b8>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d037      	beq.n	8007a06 <HAL_UART_IRQHandler+0x3e2>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a90      	ldr	r2, [pc, #576]	@ (8007be0 <HAL_UART_IRQHandler+0x5bc>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d030      	beq.n	8007a06 <HAL_UART_IRQHandler+0x3e2>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a8d      	ldr	r2, [pc, #564]	@ (8007be4 <HAL_UART_IRQHandler+0x5c0>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d029      	beq.n	8007a06 <HAL_UART_IRQHandler+0x3e2>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4a8b      	ldr	r2, [pc, #556]	@ (8007be8 <HAL_UART_IRQHandler+0x5c4>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d022      	beq.n	8007a06 <HAL_UART_IRQHandler+0x3e2>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a88      	ldr	r2, [pc, #544]	@ (8007bec <HAL_UART_IRQHandler+0x5c8>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d01b      	beq.n	8007a06 <HAL_UART_IRQHandler+0x3e2>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a86      	ldr	r2, [pc, #536]	@ (8007bf0 <HAL_UART_IRQHandler+0x5cc>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d014      	beq.n	8007a06 <HAL_UART_IRQHandler+0x3e2>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a83      	ldr	r2, [pc, #524]	@ (8007bf4 <HAL_UART_IRQHandler+0x5d0>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d00d      	beq.n	8007a06 <HAL_UART_IRQHandler+0x3e2>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4a81      	ldr	r2, [pc, #516]	@ (8007bf8 <HAL_UART_IRQHandler+0x5d4>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d006      	beq.n	8007a06 <HAL_UART_IRQHandler+0x3e2>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a7e      	ldr	r2, [pc, #504]	@ (8007bfc <HAL_UART_IRQHandler+0x5d8>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d106      	bne.n	8007a14 <HAL_UART_IRQHandler+0x3f0>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	e005      	b.n	8007a20 <HAL_UART_IRQHandler+0x3fc>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007a24:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	f000 80ad 	beq.w	8007b88 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007a34:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	f080 80a5 	bcs.w	8007b88 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007a44:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a4e:	69db      	ldr	r3, [r3, #28]
 8007a50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a54:	f000 8087 	beq.w	8007b66 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a60:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007a64:	e853 3f00 	ldrex	r3, [r3]
 8007a68:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007a6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007a70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a74:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007a82:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007a86:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a8a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007a8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007a92:	e841 2300 	strex	r3, r2, [r1]
 8007a96:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007a9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d1da      	bne.n	8007a58 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	3308      	adds	r3, #8
 8007aa8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aaa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007aac:	e853 3f00 	ldrex	r3, [r3]
 8007ab0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007ab2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007ab4:	f023 0301 	bic.w	r3, r3, #1
 8007ab8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	3308      	adds	r3, #8
 8007ac2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007ac6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007aca:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007acc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007ace:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007ad2:	e841 2300 	strex	r3, r2, [r1]
 8007ad6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007ad8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d1e1      	bne.n	8007aa2 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	3308      	adds	r3, #8
 8007ae4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007ae8:	e853 3f00 	ldrex	r3, [r3]
 8007aec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007aee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007af0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007af4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	3308      	adds	r3, #8
 8007afe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007b02:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007b04:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b06:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007b08:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007b0a:	e841 2300 	strex	r3, r2, [r1]
 8007b0e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007b10:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d1e3      	bne.n	8007ade <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2220      	movs	r2, #32
 8007b1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2200      	movs	r2, #0
 8007b22:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b2c:	e853 3f00 	ldrex	r3, [r3]
 8007b30:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007b32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b34:	f023 0310 	bic.w	r3, r3, #16
 8007b38:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	461a      	mov	r2, r3
 8007b42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b46:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007b48:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b4a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007b4c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007b4e:	e841 2300 	strex	r3, r2, [r1]
 8007b52:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007b54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d1e4      	bne.n	8007b24 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b60:	4618      	mov	r0, r3
 8007b62:	f7f9 ffd1 	bl	8001b08 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2202      	movs	r2, #2
 8007b6a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007b78:	b29b      	uxth	r3, r3
 8007b7a:	1ad3      	subs	r3, r2, r3
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	4619      	mov	r1, r3
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f000 f939 	bl	8007df8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007b86:	e119      	b.n	8007dbc <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007b8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007b92:	429a      	cmp	r2, r3
 8007b94:	f040 8112 	bne.w	8007dbc <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b9e:	69db      	ldr	r3, [r3, #28]
 8007ba0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ba4:	f040 810a 	bne.w	8007dbc <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2202      	movs	r2, #2
 8007bac:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 f91e 	bl	8007df8 <HAL_UARTEx_RxEventCallback>
      return;
 8007bbc:	e0fe      	b.n	8007dbc <HAL_UART_IRQHandler+0x798>
 8007bbe:	bf00      	nop
 8007bc0:	40020010 	.word	0x40020010
 8007bc4:	40020028 	.word	0x40020028
 8007bc8:	40020040 	.word	0x40020040
 8007bcc:	40020058 	.word	0x40020058
 8007bd0:	40020070 	.word	0x40020070
 8007bd4:	40020088 	.word	0x40020088
 8007bd8:	400200a0 	.word	0x400200a0
 8007bdc:	400200b8 	.word	0x400200b8
 8007be0:	40020410 	.word	0x40020410
 8007be4:	40020428 	.word	0x40020428
 8007be8:	40020440 	.word	0x40020440
 8007bec:	40020458 	.word	0x40020458
 8007bf0:	40020470 	.word	0x40020470
 8007bf4:	40020488 	.word	0x40020488
 8007bf8:	400204a0 	.word	0x400204a0
 8007bfc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	1ad3      	subs	r3, r2, r3
 8007c10:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007c1a:	b29b      	uxth	r3, r3
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	f000 80cf 	beq.w	8007dc0 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8007c22:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	f000 80ca 	beq.w	8007dc0 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c34:	e853 3f00 	ldrex	r3, [r3]
 8007c38:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007c3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c3c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007c40:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	461a      	mov	r2, r3
 8007c4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007c4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c50:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c52:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007c54:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007c56:	e841 2300 	strex	r3, r2, [r1]
 8007c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007c5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d1e4      	bne.n	8007c2c <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	3308      	adds	r3, #8
 8007c68:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c6c:	e853 3f00 	ldrex	r3, [r3]
 8007c70:	623b      	str	r3, [r7, #32]
   return(result);
 8007c72:	6a3a      	ldr	r2, [r7, #32]
 8007c74:	4b55      	ldr	r3, [pc, #340]	@ (8007dcc <HAL_UART_IRQHandler+0x7a8>)
 8007c76:	4013      	ands	r3, r2
 8007c78:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	3308      	adds	r3, #8
 8007c82:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007c86:	633a      	str	r2, [r7, #48]	@ 0x30
 8007c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007c8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c8e:	e841 2300 	strex	r3, r2, [r1]
 8007c92:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007c94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d1e3      	bne.n	8007c62 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2220      	movs	r2, #32
 8007c9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2200      	movs	r2, #0
 8007cac:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	e853 3f00 	ldrex	r3, [r3]
 8007cba:	60fb      	str	r3, [r7, #12]
   return(result);
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f023 0310 	bic.w	r3, r3, #16
 8007cc2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	461a      	mov	r2, r3
 8007ccc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007cd0:	61fb      	str	r3, [r7, #28]
 8007cd2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd4:	69b9      	ldr	r1, [r7, #24]
 8007cd6:	69fa      	ldr	r2, [r7, #28]
 8007cd8:	e841 2300 	strex	r3, r2, [r1]
 8007cdc:	617b      	str	r3, [r7, #20]
   return(result);
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d1e4      	bne.n	8007cae <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2202      	movs	r2, #2
 8007ce8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007cea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007cee:	4619      	mov	r1, r3
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f000 f881 	bl	8007df8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007cf6:	e063      	b.n	8007dc0 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007cf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cfc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d00e      	beq.n	8007d22 <HAL_UART_IRQHandler+0x6fe>
 8007d04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d08:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d008      	beq.n	8007d22 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007d18:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f001 f83d 	bl	8008d9a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007d20:	e051      	b.n	8007dc6 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d014      	beq.n	8007d58 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007d2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d105      	bne.n	8007d46 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007d3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d3e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d008      	beq.n	8007d58 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d03a      	beq.n	8007dc4 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	4798      	blx	r3
    }
    return;
 8007d56:	e035      	b.n	8007dc4 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007d58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d009      	beq.n	8007d78 <HAL_UART_IRQHandler+0x754>
 8007d64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d003      	beq.n	8007d78 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f000 ffe7 	bl	8008d44 <UART_EndTransmit_IT>
    return;
 8007d76:	e026      	b.n	8007dc6 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007d78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d7c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d009      	beq.n	8007d98 <HAL_UART_IRQHandler+0x774>
 8007d84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d88:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d003      	beq.n	8007d98 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f001 f816 	bl	8008dc2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007d96:	e016      	b.n	8007dc6 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007d98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d9c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d010      	beq.n	8007dc6 <HAL_UART_IRQHandler+0x7a2>
 8007da4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	da0c      	bge.n	8007dc6 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f000 fffe 	bl	8008dae <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007db2:	e008      	b.n	8007dc6 <HAL_UART_IRQHandler+0x7a2>
      return;
 8007db4:	bf00      	nop
 8007db6:	e006      	b.n	8007dc6 <HAL_UART_IRQHandler+0x7a2>
    return;
 8007db8:	bf00      	nop
 8007dba:	e004      	b.n	8007dc6 <HAL_UART_IRQHandler+0x7a2>
      return;
 8007dbc:	bf00      	nop
 8007dbe:	e002      	b.n	8007dc6 <HAL_UART_IRQHandler+0x7a2>
      return;
 8007dc0:	bf00      	nop
 8007dc2:	e000      	b.n	8007dc6 <HAL_UART_IRQHandler+0x7a2>
    return;
 8007dc4:	bf00      	nop
  }
}
 8007dc6:	37e8      	adds	r7, #232	@ 0xe8
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}
 8007dcc:	effffffe 	.word	0xeffffffe

08007dd0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b083      	sub	sp, #12
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007dd8:	bf00      	nop
 8007dda:	370c      	adds	r7, #12
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr

08007de4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b083      	sub	sp, #12
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007dec:	bf00      	nop
 8007dee:	370c      	adds	r7, #12
 8007df0:	46bd      	mov	sp, r7
 8007df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df6:	4770      	bx	lr

08007df8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b083      	sub	sp, #12
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	460b      	mov	r3, r1
 8007e02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007e04:	bf00      	nop
 8007e06:	370c      	adds	r7, #12
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr

08007e10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e14:	b092      	sub	sp, #72	@ 0x48
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	689a      	ldr	r2, [r3, #8]
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	691b      	ldr	r3, [r3, #16]
 8007e28:	431a      	orrs	r2, r3
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	695b      	ldr	r3, [r3, #20]
 8007e2e:	431a      	orrs	r2, r3
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	69db      	ldr	r3, [r3, #28]
 8007e34:	4313      	orrs	r3, r2
 8007e36:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	681a      	ldr	r2, [r3, #0]
 8007e3e:	4bbe      	ldr	r3, [pc, #760]	@ (8008138 <UART_SetConfig+0x328>)
 8007e40:	4013      	ands	r3, r2
 8007e42:	697a      	ldr	r2, [r7, #20]
 8007e44:	6812      	ldr	r2, [r2, #0]
 8007e46:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007e48:	430b      	orrs	r3, r1
 8007e4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	68da      	ldr	r2, [r3, #12]
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	430a      	orrs	r2, r1
 8007e60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	699b      	ldr	r3, [r3, #24]
 8007e66:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4ab3      	ldr	r2, [pc, #716]	@ (800813c <UART_SetConfig+0x32c>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d004      	beq.n	8007e7c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	6a1b      	ldr	r3, [r3, #32]
 8007e76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	689a      	ldr	r2, [r3, #8]
 8007e82:	4baf      	ldr	r3, [pc, #700]	@ (8008140 <UART_SetConfig+0x330>)
 8007e84:	4013      	ands	r3, r2
 8007e86:	697a      	ldr	r2, [r7, #20]
 8007e88:	6812      	ldr	r2, [r2, #0]
 8007e8a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007e8c:	430b      	orrs	r3, r1
 8007e8e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e96:	f023 010f 	bic.w	r1, r3, #15
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	430a      	orrs	r2, r1
 8007ea4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4aa6      	ldr	r2, [pc, #664]	@ (8008144 <UART_SetConfig+0x334>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d177      	bne.n	8007fa0 <UART_SetConfig+0x190>
 8007eb0:	4ba5      	ldr	r3, [pc, #660]	@ (8008148 <UART_SetConfig+0x338>)
 8007eb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007eb4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007eb8:	2b28      	cmp	r3, #40	@ 0x28
 8007eba:	d86d      	bhi.n	8007f98 <UART_SetConfig+0x188>
 8007ebc:	a201      	add	r2, pc, #4	@ (adr r2, 8007ec4 <UART_SetConfig+0xb4>)
 8007ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ec2:	bf00      	nop
 8007ec4:	08007f69 	.word	0x08007f69
 8007ec8:	08007f99 	.word	0x08007f99
 8007ecc:	08007f99 	.word	0x08007f99
 8007ed0:	08007f99 	.word	0x08007f99
 8007ed4:	08007f99 	.word	0x08007f99
 8007ed8:	08007f99 	.word	0x08007f99
 8007edc:	08007f99 	.word	0x08007f99
 8007ee0:	08007f99 	.word	0x08007f99
 8007ee4:	08007f71 	.word	0x08007f71
 8007ee8:	08007f99 	.word	0x08007f99
 8007eec:	08007f99 	.word	0x08007f99
 8007ef0:	08007f99 	.word	0x08007f99
 8007ef4:	08007f99 	.word	0x08007f99
 8007ef8:	08007f99 	.word	0x08007f99
 8007efc:	08007f99 	.word	0x08007f99
 8007f00:	08007f99 	.word	0x08007f99
 8007f04:	08007f79 	.word	0x08007f79
 8007f08:	08007f99 	.word	0x08007f99
 8007f0c:	08007f99 	.word	0x08007f99
 8007f10:	08007f99 	.word	0x08007f99
 8007f14:	08007f99 	.word	0x08007f99
 8007f18:	08007f99 	.word	0x08007f99
 8007f1c:	08007f99 	.word	0x08007f99
 8007f20:	08007f99 	.word	0x08007f99
 8007f24:	08007f81 	.word	0x08007f81
 8007f28:	08007f99 	.word	0x08007f99
 8007f2c:	08007f99 	.word	0x08007f99
 8007f30:	08007f99 	.word	0x08007f99
 8007f34:	08007f99 	.word	0x08007f99
 8007f38:	08007f99 	.word	0x08007f99
 8007f3c:	08007f99 	.word	0x08007f99
 8007f40:	08007f99 	.word	0x08007f99
 8007f44:	08007f89 	.word	0x08007f89
 8007f48:	08007f99 	.word	0x08007f99
 8007f4c:	08007f99 	.word	0x08007f99
 8007f50:	08007f99 	.word	0x08007f99
 8007f54:	08007f99 	.word	0x08007f99
 8007f58:	08007f99 	.word	0x08007f99
 8007f5c:	08007f99 	.word	0x08007f99
 8007f60:	08007f99 	.word	0x08007f99
 8007f64:	08007f91 	.word	0x08007f91
 8007f68:	2301      	movs	r3, #1
 8007f6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f6e:	e222      	b.n	80083b6 <UART_SetConfig+0x5a6>
 8007f70:	2304      	movs	r3, #4
 8007f72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f76:	e21e      	b.n	80083b6 <UART_SetConfig+0x5a6>
 8007f78:	2308      	movs	r3, #8
 8007f7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f7e:	e21a      	b.n	80083b6 <UART_SetConfig+0x5a6>
 8007f80:	2310      	movs	r3, #16
 8007f82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f86:	e216      	b.n	80083b6 <UART_SetConfig+0x5a6>
 8007f88:	2320      	movs	r3, #32
 8007f8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f8e:	e212      	b.n	80083b6 <UART_SetConfig+0x5a6>
 8007f90:	2340      	movs	r3, #64	@ 0x40
 8007f92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f96:	e20e      	b.n	80083b6 <UART_SetConfig+0x5a6>
 8007f98:	2380      	movs	r3, #128	@ 0x80
 8007f9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f9e:	e20a      	b.n	80083b6 <UART_SetConfig+0x5a6>
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a69      	ldr	r2, [pc, #420]	@ (800814c <UART_SetConfig+0x33c>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d130      	bne.n	800800c <UART_SetConfig+0x1fc>
 8007faa:	4b67      	ldr	r3, [pc, #412]	@ (8008148 <UART_SetConfig+0x338>)
 8007fac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fae:	f003 0307 	and.w	r3, r3, #7
 8007fb2:	2b05      	cmp	r3, #5
 8007fb4:	d826      	bhi.n	8008004 <UART_SetConfig+0x1f4>
 8007fb6:	a201      	add	r2, pc, #4	@ (adr r2, 8007fbc <UART_SetConfig+0x1ac>)
 8007fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fbc:	08007fd5 	.word	0x08007fd5
 8007fc0:	08007fdd 	.word	0x08007fdd
 8007fc4:	08007fe5 	.word	0x08007fe5
 8007fc8:	08007fed 	.word	0x08007fed
 8007fcc:	08007ff5 	.word	0x08007ff5
 8007fd0:	08007ffd 	.word	0x08007ffd
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fda:	e1ec      	b.n	80083b6 <UART_SetConfig+0x5a6>
 8007fdc:	2304      	movs	r3, #4
 8007fde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fe2:	e1e8      	b.n	80083b6 <UART_SetConfig+0x5a6>
 8007fe4:	2308      	movs	r3, #8
 8007fe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fea:	e1e4      	b.n	80083b6 <UART_SetConfig+0x5a6>
 8007fec:	2310      	movs	r3, #16
 8007fee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ff2:	e1e0      	b.n	80083b6 <UART_SetConfig+0x5a6>
 8007ff4:	2320      	movs	r3, #32
 8007ff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ffa:	e1dc      	b.n	80083b6 <UART_SetConfig+0x5a6>
 8007ffc:	2340      	movs	r3, #64	@ 0x40
 8007ffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008002:	e1d8      	b.n	80083b6 <UART_SetConfig+0x5a6>
 8008004:	2380      	movs	r3, #128	@ 0x80
 8008006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800800a:	e1d4      	b.n	80083b6 <UART_SetConfig+0x5a6>
 800800c:	697b      	ldr	r3, [r7, #20]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a4f      	ldr	r2, [pc, #316]	@ (8008150 <UART_SetConfig+0x340>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d130      	bne.n	8008078 <UART_SetConfig+0x268>
 8008016:	4b4c      	ldr	r3, [pc, #304]	@ (8008148 <UART_SetConfig+0x338>)
 8008018:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800801a:	f003 0307 	and.w	r3, r3, #7
 800801e:	2b05      	cmp	r3, #5
 8008020:	d826      	bhi.n	8008070 <UART_SetConfig+0x260>
 8008022:	a201      	add	r2, pc, #4	@ (adr r2, 8008028 <UART_SetConfig+0x218>)
 8008024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008028:	08008041 	.word	0x08008041
 800802c:	08008049 	.word	0x08008049
 8008030:	08008051 	.word	0x08008051
 8008034:	08008059 	.word	0x08008059
 8008038:	08008061 	.word	0x08008061
 800803c:	08008069 	.word	0x08008069
 8008040:	2300      	movs	r3, #0
 8008042:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008046:	e1b6      	b.n	80083b6 <UART_SetConfig+0x5a6>
 8008048:	2304      	movs	r3, #4
 800804a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800804e:	e1b2      	b.n	80083b6 <UART_SetConfig+0x5a6>
 8008050:	2308      	movs	r3, #8
 8008052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008056:	e1ae      	b.n	80083b6 <UART_SetConfig+0x5a6>
 8008058:	2310      	movs	r3, #16
 800805a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800805e:	e1aa      	b.n	80083b6 <UART_SetConfig+0x5a6>
 8008060:	2320      	movs	r3, #32
 8008062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008066:	e1a6      	b.n	80083b6 <UART_SetConfig+0x5a6>
 8008068:	2340      	movs	r3, #64	@ 0x40
 800806a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800806e:	e1a2      	b.n	80083b6 <UART_SetConfig+0x5a6>
 8008070:	2380      	movs	r3, #128	@ 0x80
 8008072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008076:	e19e      	b.n	80083b6 <UART_SetConfig+0x5a6>
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a35      	ldr	r2, [pc, #212]	@ (8008154 <UART_SetConfig+0x344>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d130      	bne.n	80080e4 <UART_SetConfig+0x2d4>
 8008082:	4b31      	ldr	r3, [pc, #196]	@ (8008148 <UART_SetConfig+0x338>)
 8008084:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008086:	f003 0307 	and.w	r3, r3, #7
 800808a:	2b05      	cmp	r3, #5
 800808c:	d826      	bhi.n	80080dc <UART_SetConfig+0x2cc>
 800808e:	a201      	add	r2, pc, #4	@ (adr r2, 8008094 <UART_SetConfig+0x284>)
 8008090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008094:	080080ad 	.word	0x080080ad
 8008098:	080080b5 	.word	0x080080b5
 800809c:	080080bd 	.word	0x080080bd
 80080a0:	080080c5 	.word	0x080080c5
 80080a4:	080080cd 	.word	0x080080cd
 80080a8:	080080d5 	.word	0x080080d5
 80080ac:	2300      	movs	r3, #0
 80080ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080b2:	e180      	b.n	80083b6 <UART_SetConfig+0x5a6>
 80080b4:	2304      	movs	r3, #4
 80080b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080ba:	e17c      	b.n	80083b6 <UART_SetConfig+0x5a6>
 80080bc:	2308      	movs	r3, #8
 80080be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080c2:	e178      	b.n	80083b6 <UART_SetConfig+0x5a6>
 80080c4:	2310      	movs	r3, #16
 80080c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080ca:	e174      	b.n	80083b6 <UART_SetConfig+0x5a6>
 80080cc:	2320      	movs	r3, #32
 80080ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080d2:	e170      	b.n	80083b6 <UART_SetConfig+0x5a6>
 80080d4:	2340      	movs	r3, #64	@ 0x40
 80080d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080da:	e16c      	b.n	80083b6 <UART_SetConfig+0x5a6>
 80080dc:	2380      	movs	r3, #128	@ 0x80
 80080de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080e2:	e168      	b.n	80083b6 <UART_SetConfig+0x5a6>
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4a1b      	ldr	r2, [pc, #108]	@ (8008158 <UART_SetConfig+0x348>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d142      	bne.n	8008174 <UART_SetConfig+0x364>
 80080ee:	4b16      	ldr	r3, [pc, #88]	@ (8008148 <UART_SetConfig+0x338>)
 80080f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080f2:	f003 0307 	and.w	r3, r3, #7
 80080f6:	2b05      	cmp	r3, #5
 80080f8:	d838      	bhi.n	800816c <UART_SetConfig+0x35c>
 80080fa:	a201      	add	r2, pc, #4	@ (adr r2, 8008100 <UART_SetConfig+0x2f0>)
 80080fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008100:	08008119 	.word	0x08008119
 8008104:	08008121 	.word	0x08008121
 8008108:	08008129 	.word	0x08008129
 800810c:	08008131 	.word	0x08008131
 8008110:	0800815d 	.word	0x0800815d
 8008114:	08008165 	.word	0x08008165
 8008118:	2300      	movs	r3, #0
 800811a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800811e:	e14a      	b.n	80083b6 <UART_SetConfig+0x5a6>
 8008120:	2304      	movs	r3, #4
 8008122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008126:	e146      	b.n	80083b6 <UART_SetConfig+0x5a6>
 8008128:	2308      	movs	r3, #8
 800812a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800812e:	e142      	b.n	80083b6 <UART_SetConfig+0x5a6>
 8008130:	2310      	movs	r3, #16
 8008132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008136:	e13e      	b.n	80083b6 <UART_SetConfig+0x5a6>
 8008138:	cfff69f3 	.word	0xcfff69f3
 800813c:	58000c00 	.word	0x58000c00
 8008140:	11fff4ff 	.word	0x11fff4ff
 8008144:	40011000 	.word	0x40011000
 8008148:	58024400 	.word	0x58024400
 800814c:	40004400 	.word	0x40004400
 8008150:	40004800 	.word	0x40004800
 8008154:	40004c00 	.word	0x40004c00
 8008158:	40005000 	.word	0x40005000
 800815c:	2320      	movs	r3, #32
 800815e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008162:	e128      	b.n	80083b6 <UART_SetConfig+0x5a6>
 8008164:	2340      	movs	r3, #64	@ 0x40
 8008166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800816a:	e124      	b.n	80083b6 <UART_SetConfig+0x5a6>
 800816c:	2380      	movs	r3, #128	@ 0x80
 800816e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008172:	e120      	b.n	80083b6 <UART_SetConfig+0x5a6>
 8008174:	697b      	ldr	r3, [r7, #20]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	4acb      	ldr	r2, [pc, #812]	@ (80084a8 <UART_SetConfig+0x698>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d176      	bne.n	800826c <UART_SetConfig+0x45c>
 800817e:	4bcb      	ldr	r3, [pc, #812]	@ (80084ac <UART_SetConfig+0x69c>)
 8008180:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008182:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008186:	2b28      	cmp	r3, #40	@ 0x28
 8008188:	d86c      	bhi.n	8008264 <UART_SetConfig+0x454>
 800818a:	a201      	add	r2, pc, #4	@ (adr r2, 8008190 <UART_SetConfig+0x380>)
 800818c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008190:	08008235 	.word	0x08008235
 8008194:	08008265 	.word	0x08008265
 8008198:	08008265 	.word	0x08008265
 800819c:	08008265 	.word	0x08008265
 80081a0:	08008265 	.word	0x08008265
 80081a4:	08008265 	.word	0x08008265
 80081a8:	08008265 	.word	0x08008265
 80081ac:	08008265 	.word	0x08008265
 80081b0:	0800823d 	.word	0x0800823d
 80081b4:	08008265 	.word	0x08008265
 80081b8:	08008265 	.word	0x08008265
 80081bc:	08008265 	.word	0x08008265
 80081c0:	08008265 	.word	0x08008265
 80081c4:	08008265 	.word	0x08008265
 80081c8:	08008265 	.word	0x08008265
 80081cc:	08008265 	.word	0x08008265
 80081d0:	08008245 	.word	0x08008245
 80081d4:	08008265 	.word	0x08008265
 80081d8:	08008265 	.word	0x08008265
 80081dc:	08008265 	.word	0x08008265
 80081e0:	08008265 	.word	0x08008265
 80081e4:	08008265 	.word	0x08008265
 80081e8:	08008265 	.word	0x08008265
 80081ec:	08008265 	.word	0x08008265
 80081f0:	0800824d 	.word	0x0800824d
 80081f4:	08008265 	.word	0x08008265
 80081f8:	08008265 	.word	0x08008265
 80081fc:	08008265 	.word	0x08008265
 8008200:	08008265 	.word	0x08008265
 8008204:	08008265 	.word	0x08008265
 8008208:	08008265 	.word	0x08008265
 800820c:	08008265 	.word	0x08008265
 8008210:	08008255 	.word	0x08008255
 8008214:	08008265 	.word	0x08008265
 8008218:	08008265 	.word	0x08008265
 800821c:	08008265 	.word	0x08008265
 8008220:	08008265 	.word	0x08008265
 8008224:	08008265 	.word	0x08008265
 8008228:	08008265 	.word	0x08008265
 800822c:	08008265 	.word	0x08008265
 8008230:	0800825d 	.word	0x0800825d
 8008234:	2301      	movs	r3, #1
 8008236:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800823a:	e0bc      	b.n	80083b6 <UART_SetConfig+0x5a6>
 800823c:	2304      	movs	r3, #4
 800823e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008242:	e0b8      	b.n	80083b6 <UART_SetConfig+0x5a6>
 8008244:	2308      	movs	r3, #8
 8008246:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800824a:	e0b4      	b.n	80083b6 <UART_SetConfig+0x5a6>
 800824c:	2310      	movs	r3, #16
 800824e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008252:	e0b0      	b.n	80083b6 <UART_SetConfig+0x5a6>
 8008254:	2320      	movs	r3, #32
 8008256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800825a:	e0ac      	b.n	80083b6 <UART_SetConfig+0x5a6>
 800825c:	2340      	movs	r3, #64	@ 0x40
 800825e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008262:	e0a8      	b.n	80083b6 <UART_SetConfig+0x5a6>
 8008264:	2380      	movs	r3, #128	@ 0x80
 8008266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800826a:	e0a4      	b.n	80083b6 <UART_SetConfig+0x5a6>
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a8f      	ldr	r2, [pc, #572]	@ (80084b0 <UART_SetConfig+0x6a0>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d130      	bne.n	80082d8 <UART_SetConfig+0x4c8>
 8008276:	4b8d      	ldr	r3, [pc, #564]	@ (80084ac <UART_SetConfig+0x69c>)
 8008278:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800827a:	f003 0307 	and.w	r3, r3, #7
 800827e:	2b05      	cmp	r3, #5
 8008280:	d826      	bhi.n	80082d0 <UART_SetConfig+0x4c0>
 8008282:	a201      	add	r2, pc, #4	@ (adr r2, 8008288 <UART_SetConfig+0x478>)
 8008284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008288:	080082a1 	.word	0x080082a1
 800828c:	080082a9 	.word	0x080082a9
 8008290:	080082b1 	.word	0x080082b1
 8008294:	080082b9 	.word	0x080082b9
 8008298:	080082c1 	.word	0x080082c1
 800829c:	080082c9 	.word	0x080082c9
 80082a0:	2300      	movs	r3, #0
 80082a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082a6:	e086      	b.n	80083b6 <UART_SetConfig+0x5a6>
 80082a8:	2304      	movs	r3, #4
 80082aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082ae:	e082      	b.n	80083b6 <UART_SetConfig+0x5a6>
 80082b0:	2308      	movs	r3, #8
 80082b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082b6:	e07e      	b.n	80083b6 <UART_SetConfig+0x5a6>
 80082b8:	2310      	movs	r3, #16
 80082ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082be:	e07a      	b.n	80083b6 <UART_SetConfig+0x5a6>
 80082c0:	2320      	movs	r3, #32
 80082c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082c6:	e076      	b.n	80083b6 <UART_SetConfig+0x5a6>
 80082c8:	2340      	movs	r3, #64	@ 0x40
 80082ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082ce:	e072      	b.n	80083b6 <UART_SetConfig+0x5a6>
 80082d0:	2380      	movs	r3, #128	@ 0x80
 80082d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082d6:	e06e      	b.n	80083b6 <UART_SetConfig+0x5a6>
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a75      	ldr	r2, [pc, #468]	@ (80084b4 <UART_SetConfig+0x6a4>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d130      	bne.n	8008344 <UART_SetConfig+0x534>
 80082e2:	4b72      	ldr	r3, [pc, #456]	@ (80084ac <UART_SetConfig+0x69c>)
 80082e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082e6:	f003 0307 	and.w	r3, r3, #7
 80082ea:	2b05      	cmp	r3, #5
 80082ec:	d826      	bhi.n	800833c <UART_SetConfig+0x52c>
 80082ee:	a201      	add	r2, pc, #4	@ (adr r2, 80082f4 <UART_SetConfig+0x4e4>)
 80082f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082f4:	0800830d 	.word	0x0800830d
 80082f8:	08008315 	.word	0x08008315
 80082fc:	0800831d 	.word	0x0800831d
 8008300:	08008325 	.word	0x08008325
 8008304:	0800832d 	.word	0x0800832d
 8008308:	08008335 	.word	0x08008335
 800830c:	2300      	movs	r3, #0
 800830e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008312:	e050      	b.n	80083b6 <UART_SetConfig+0x5a6>
 8008314:	2304      	movs	r3, #4
 8008316:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800831a:	e04c      	b.n	80083b6 <UART_SetConfig+0x5a6>
 800831c:	2308      	movs	r3, #8
 800831e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008322:	e048      	b.n	80083b6 <UART_SetConfig+0x5a6>
 8008324:	2310      	movs	r3, #16
 8008326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800832a:	e044      	b.n	80083b6 <UART_SetConfig+0x5a6>
 800832c:	2320      	movs	r3, #32
 800832e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008332:	e040      	b.n	80083b6 <UART_SetConfig+0x5a6>
 8008334:	2340      	movs	r3, #64	@ 0x40
 8008336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800833a:	e03c      	b.n	80083b6 <UART_SetConfig+0x5a6>
 800833c:	2380      	movs	r3, #128	@ 0x80
 800833e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008342:	e038      	b.n	80083b6 <UART_SetConfig+0x5a6>
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4a5b      	ldr	r2, [pc, #364]	@ (80084b8 <UART_SetConfig+0x6a8>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d130      	bne.n	80083b0 <UART_SetConfig+0x5a0>
 800834e:	4b57      	ldr	r3, [pc, #348]	@ (80084ac <UART_SetConfig+0x69c>)
 8008350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008352:	f003 0307 	and.w	r3, r3, #7
 8008356:	2b05      	cmp	r3, #5
 8008358:	d826      	bhi.n	80083a8 <UART_SetConfig+0x598>
 800835a:	a201      	add	r2, pc, #4	@ (adr r2, 8008360 <UART_SetConfig+0x550>)
 800835c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008360:	08008379 	.word	0x08008379
 8008364:	08008381 	.word	0x08008381
 8008368:	08008389 	.word	0x08008389
 800836c:	08008391 	.word	0x08008391
 8008370:	08008399 	.word	0x08008399
 8008374:	080083a1 	.word	0x080083a1
 8008378:	2302      	movs	r3, #2
 800837a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800837e:	e01a      	b.n	80083b6 <UART_SetConfig+0x5a6>
 8008380:	2304      	movs	r3, #4
 8008382:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008386:	e016      	b.n	80083b6 <UART_SetConfig+0x5a6>
 8008388:	2308      	movs	r3, #8
 800838a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800838e:	e012      	b.n	80083b6 <UART_SetConfig+0x5a6>
 8008390:	2310      	movs	r3, #16
 8008392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008396:	e00e      	b.n	80083b6 <UART_SetConfig+0x5a6>
 8008398:	2320      	movs	r3, #32
 800839a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800839e:	e00a      	b.n	80083b6 <UART_SetConfig+0x5a6>
 80083a0:	2340      	movs	r3, #64	@ 0x40
 80083a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083a6:	e006      	b.n	80083b6 <UART_SetConfig+0x5a6>
 80083a8:	2380      	movs	r3, #128	@ 0x80
 80083aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083ae:	e002      	b.n	80083b6 <UART_SetConfig+0x5a6>
 80083b0:	2380      	movs	r3, #128	@ 0x80
 80083b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4a3f      	ldr	r2, [pc, #252]	@ (80084b8 <UART_SetConfig+0x6a8>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	f040 80f8 	bne.w	80085b2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80083c2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80083c6:	2b20      	cmp	r3, #32
 80083c8:	dc46      	bgt.n	8008458 <UART_SetConfig+0x648>
 80083ca:	2b02      	cmp	r3, #2
 80083cc:	f2c0 8082 	blt.w	80084d4 <UART_SetConfig+0x6c4>
 80083d0:	3b02      	subs	r3, #2
 80083d2:	2b1e      	cmp	r3, #30
 80083d4:	d87e      	bhi.n	80084d4 <UART_SetConfig+0x6c4>
 80083d6:	a201      	add	r2, pc, #4	@ (adr r2, 80083dc <UART_SetConfig+0x5cc>)
 80083d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083dc:	0800845f 	.word	0x0800845f
 80083e0:	080084d5 	.word	0x080084d5
 80083e4:	08008467 	.word	0x08008467
 80083e8:	080084d5 	.word	0x080084d5
 80083ec:	080084d5 	.word	0x080084d5
 80083f0:	080084d5 	.word	0x080084d5
 80083f4:	08008477 	.word	0x08008477
 80083f8:	080084d5 	.word	0x080084d5
 80083fc:	080084d5 	.word	0x080084d5
 8008400:	080084d5 	.word	0x080084d5
 8008404:	080084d5 	.word	0x080084d5
 8008408:	080084d5 	.word	0x080084d5
 800840c:	080084d5 	.word	0x080084d5
 8008410:	080084d5 	.word	0x080084d5
 8008414:	08008487 	.word	0x08008487
 8008418:	080084d5 	.word	0x080084d5
 800841c:	080084d5 	.word	0x080084d5
 8008420:	080084d5 	.word	0x080084d5
 8008424:	080084d5 	.word	0x080084d5
 8008428:	080084d5 	.word	0x080084d5
 800842c:	080084d5 	.word	0x080084d5
 8008430:	080084d5 	.word	0x080084d5
 8008434:	080084d5 	.word	0x080084d5
 8008438:	080084d5 	.word	0x080084d5
 800843c:	080084d5 	.word	0x080084d5
 8008440:	080084d5 	.word	0x080084d5
 8008444:	080084d5 	.word	0x080084d5
 8008448:	080084d5 	.word	0x080084d5
 800844c:	080084d5 	.word	0x080084d5
 8008450:	080084d5 	.word	0x080084d5
 8008454:	080084c7 	.word	0x080084c7
 8008458:	2b40      	cmp	r3, #64	@ 0x40
 800845a:	d037      	beq.n	80084cc <UART_SetConfig+0x6bc>
 800845c:	e03a      	b.n	80084d4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800845e:	f7fc fce9 	bl	8004e34 <HAL_RCCEx_GetD3PCLK1Freq>
 8008462:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008464:	e03c      	b.n	80084e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008466:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800846a:	4618      	mov	r0, r3
 800846c:	f7fc fcf8 	bl	8004e60 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008472:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008474:	e034      	b.n	80084e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008476:	f107 0318 	add.w	r3, r7, #24
 800847a:	4618      	mov	r0, r3
 800847c:	f7fc fe44 	bl	8005108 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008480:	69fb      	ldr	r3, [r7, #28]
 8008482:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008484:	e02c      	b.n	80084e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008486:	4b09      	ldr	r3, [pc, #36]	@ (80084ac <UART_SetConfig+0x69c>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f003 0320 	and.w	r3, r3, #32
 800848e:	2b00      	cmp	r3, #0
 8008490:	d016      	beq.n	80084c0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008492:	4b06      	ldr	r3, [pc, #24]	@ (80084ac <UART_SetConfig+0x69c>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	08db      	lsrs	r3, r3, #3
 8008498:	f003 0303 	and.w	r3, r3, #3
 800849c:	4a07      	ldr	r2, [pc, #28]	@ (80084bc <UART_SetConfig+0x6ac>)
 800849e:	fa22 f303 	lsr.w	r3, r2, r3
 80084a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80084a4:	e01c      	b.n	80084e0 <UART_SetConfig+0x6d0>
 80084a6:	bf00      	nop
 80084a8:	40011400 	.word	0x40011400
 80084ac:	58024400 	.word	0x58024400
 80084b0:	40007800 	.word	0x40007800
 80084b4:	40007c00 	.word	0x40007c00
 80084b8:	58000c00 	.word	0x58000c00
 80084bc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80084c0:	4b9d      	ldr	r3, [pc, #628]	@ (8008738 <UART_SetConfig+0x928>)
 80084c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084c4:	e00c      	b.n	80084e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80084c6:	4b9d      	ldr	r3, [pc, #628]	@ (800873c <UART_SetConfig+0x92c>)
 80084c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084ca:	e009      	b.n	80084e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80084cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80084d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084d2:	e005      	b.n	80084e0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80084d4:	2300      	movs	r3, #0
 80084d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80084d8:	2301      	movs	r3, #1
 80084da:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80084de:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80084e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	f000 81de 	beq.w	80088a4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084ec:	4a94      	ldr	r2, [pc, #592]	@ (8008740 <UART_SetConfig+0x930>)
 80084ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084f2:	461a      	mov	r2, r3
 80084f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80084fa:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	685a      	ldr	r2, [r3, #4]
 8008500:	4613      	mov	r3, r2
 8008502:	005b      	lsls	r3, r3, #1
 8008504:	4413      	add	r3, r2
 8008506:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008508:	429a      	cmp	r2, r3
 800850a:	d305      	bcc.n	8008518 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	685b      	ldr	r3, [r3, #4]
 8008510:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008512:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008514:	429a      	cmp	r2, r3
 8008516:	d903      	bls.n	8008520 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008518:	2301      	movs	r3, #1
 800851a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800851e:	e1c1      	b.n	80088a4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008520:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008522:	2200      	movs	r2, #0
 8008524:	60bb      	str	r3, [r7, #8]
 8008526:	60fa      	str	r2, [r7, #12]
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800852c:	4a84      	ldr	r2, [pc, #528]	@ (8008740 <UART_SetConfig+0x930>)
 800852e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008532:	b29b      	uxth	r3, r3
 8008534:	2200      	movs	r2, #0
 8008536:	603b      	str	r3, [r7, #0]
 8008538:	607a      	str	r2, [r7, #4]
 800853a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800853e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008542:	f7f7 ff25 	bl	8000390 <__aeabi_uldivmod>
 8008546:	4602      	mov	r2, r0
 8008548:	460b      	mov	r3, r1
 800854a:	4610      	mov	r0, r2
 800854c:	4619      	mov	r1, r3
 800854e:	f04f 0200 	mov.w	r2, #0
 8008552:	f04f 0300 	mov.w	r3, #0
 8008556:	020b      	lsls	r3, r1, #8
 8008558:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800855c:	0202      	lsls	r2, r0, #8
 800855e:	6979      	ldr	r1, [r7, #20]
 8008560:	6849      	ldr	r1, [r1, #4]
 8008562:	0849      	lsrs	r1, r1, #1
 8008564:	2000      	movs	r0, #0
 8008566:	460c      	mov	r4, r1
 8008568:	4605      	mov	r5, r0
 800856a:	eb12 0804 	adds.w	r8, r2, r4
 800856e:	eb43 0905 	adc.w	r9, r3, r5
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	2200      	movs	r2, #0
 8008578:	469a      	mov	sl, r3
 800857a:	4693      	mov	fp, r2
 800857c:	4652      	mov	r2, sl
 800857e:	465b      	mov	r3, fp
 8008580:	4640      	mov	r0, r8
 8008582:	4649      	mov	r1, r9
 8008584:	f7f7 ff04 	bl	8000390 <__aeabi_uldivmod>
 8008588:	4602      	mov	r2, r0
 800858a:	460b      	mov	r3, r1
 800858c:	4613      	mov	r3, r2
 800858e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008592:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008596:	d308      	bcc.n	80085aa <UART_SetConfig+0x79a>
 8008598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800859a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800859e:	d204      	bcs.n	80085aa <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80085a6:	60da      	str	r2, [r3, #12]
 80085a8:	e17c      	b.n	80088a4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80085aa:	2301      	movs	r3, #1
 80085ac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80085b0:	e178      	b.n	80088a4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	69db      	ldr	r3, [r3, #28]
 80085b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80085ba:	f040 80c5 	bne.w	8008748 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80085be:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80085c2:	2b20      	cmp	r3, #32
 80085c4:	dc48      	bgt.n	8008658 <UART_SetConfig+0x848>
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	db7b      	blt.n	80086c2 <UART_SetConfig+0x8b2>
 80085ca:	2b20      	cmp	r3, #32
 80085cc:	d879      	bhi.n	80086c2 <UART_SetConfig+0x8b2>
 80085ce:	a201      	add	r2, pc, #4	@ (adr r2, 80085d4 <UART_SetConfig+0x7c4>)
 80085d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085d4:	0800865f 	.word	0x0800865f
 80085d8:	08008667 	.word	0x08008667
 80085dc:	080086c3 	.word	0x080086c3
 80085e0:	080086c3 	.word	0x080086c3
 80085e4:	0800866f 	.word	0x0800866f
 80085e8:	080086c3 	.word	0x080086c3
 80085ec:	080086c3 	.word	0x080086c3
 80085f0:	080086c3 	.word	0x080086c3
 80085f4:	0800867f 	.word	0x0800867f
 80085f8:	080086c3 	.word	0x080086c3
 80085fc:	080086c3 	.word	0x080086c3
 8008600:	080086c3 	.word	0x080086c3
 8008604:	080086c3 	.word	0x080086c3
 8008608:	080086c3 	.word	0x080086c3
 800860c:	080086c3 	.word	0x080086c3
 8008610:	080086c3 	.word	0x080086c3
 8008614:	0800868f 	.word	0x0800868f
 8008618:	080086c3 	.word	0x080086c3
 800861c:	080086c3 	.word	0x080086c3
 8008620:	080086c3 	.word	0x080086c3
 8008624:	080086c3 	.word	0x080086c3
 8008628:	080086c3 	.word	0x080086c3
 800862c:	080086c3 	.word	0x080086c3
 8008630:	080086c3 	.word	0x080086c3
 8008634:	080086c3 	.word	0x080086c3
 8008638:	080086c3 	.word	0x080086c3
 800863c:	080086c3 	.word	0x080086c3
 8008640:	080086c3 	.word	0x080086c3
 8008644:	080086c3 	.word	0x080086c3
 8008648:	080086c3 	.word	0x080086c3
 800864c:	080086c3 	.word	0x080086c3
 8008650:	080086c3 	.word	0x080086c3
 8008654:	080086b5 	.word	0x080086b5
 8008658:	2b40      	cmp	r3, #64	@ 0x40
 800865a:	d02e      	beq.n	80086ba <UART_SetConfig+0x8aa>
 800865c:	e031      	b.n	80086c2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800865e:	f7fb f9b3 	bl	80039c8 <HAL_RCC_GetPCLK1Freq>
 8008662:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008664:	e033      	b.n	80086ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008666:	f7fb f9c5 	bl	80039f4 <HAL_RCC_GetPCLK2Freq>
 800866a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800866c:	e02f      	b.n	80086ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800866e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008672:	4618      	mov	r0, r3
 8008674:	f7fc fbf4 	bl	8004e60 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800867a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800867c:	e027      	b.n	80086ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800867e:	f107 0318 	add.w	r3, r7, #24
 8008682:	4618      	mov	r0, r3
 8008684:	f7fc fd40 	bl	8005108 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008688:	69fb      	ldr	r3, [r7, #28]
 800868a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800868c:	e01f      	b.n	80086ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800868e:	4b2d      	ldr	r3, [pc, #180]	@ (8008744 <UART_SetConfig+0x934>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f003 0320 	and.w	r3, r3, #32
 8008696:	2b00      	cmp	r3, #0
 8008698:	d009      	beq.n	80086ae <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800869a:	4b2a      	ldr	r3, [pc, #168]	@ (8008744 <UART_SetConfig+0x934>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	08db      	lsrs	r3, r3, #3
 80086a0:	f003 0303 	and.w	r3, r3, #3
 80086a4:	4a24      	ldr	r2, [pc, #144]	@ (8008738 <UART_SetConfig+0x928>)
 80086a6:	fa22 f303 	lsr.w	r3, r2, r3
 80086aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80086ac:	e00f      	b.n	80086ce <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80086ae:	4b22      	ldr	r3, [pc, #136]	@ (8008738 <UART_SetConfig+0x928>)
 80086b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086b2:	e00c      	b.n	80086ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80086b4:	4b21      	ldr	r3, [pc, #132]	@ (800873c <UART_SetConfig+0x92c>)
 80086b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086b8:	e009      	b.n	80086ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80086be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086c0:	e005      	b.n	80086ce <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80086c2:	2300      	movs	r3, #0
 80086c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80086c6:	2301      	movs	r3, #1
 80086c8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80086cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80086ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	f000 80e7 	beq.w	80088a4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086da:	4a19      	ldr	r2, [pc, #100]	@ (8008740 <UART_SetConfig+0x930>)
 80086dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086e0:	461a      	mov	r2, r3
 80086e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80086e8:	005a      	lsls	r2, r3, #1
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	685b      	ldr	r3, [r3, #4]
 80086ee:	085b      	lsrs	r3, r3, #1
 80086f0:	441a      	add	r2, r3
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80086fa:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80086fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086fe:	2b0f      	cmp	r3, #15
 8008700:	d916      	bls.n	8008730 <UART_SetConfig+0x920>
 8008702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008704:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008708:	d212      	bcs.n	8008730 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800870a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800870c:	b29b      	uxth	r3, r3
 800870e:	f023 030f 	bic.w	r3, r3, #15
 8008712:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008716:	085b      	lsrs	r3, r3, #1
 8008718:	b29b      	uxth	r3, r3
 800871a:	f003 0307 	and.w	r3, r3, #7
 800871e:	b29a      	uxth	r2, r3
 8008720:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008722:	4313      	orrs	r3, r2
 8008724:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800872c:	60da      	str	r2, [r3, #12]
 800872e:	e0b9      	b.n	80088a4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008730:	2301      	movs	r3, #1
 8008732:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008736:	e0b5      	b.n	80088a4 <UART_SetConfig+0xa94>
 8008738:	03d09000 	.word	0x03d09000
 800873c:	003d0900 	.word	0x003d0900
 8008740:	0800ba68 	.word	0x0800ba68
 8008744:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008748:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800874c:	2b20      	cmp	r3, #32
 800874e:	dc49      	bgt.n	80087e4 <UART_SetConfig+0x9d4>
 8008750:	2b00      	cmp	r3, #0
 8008752:	db7c      	blt.n	800884e <UART_SetConfig+0xa3e>
 8008754:	2b20      	cmp	r3, #32
 8008756:	d87a      	bhi.n	800884e <UART_SetConfig+0xa3e>
 8008758:	a201      	add	r2, pc, #4	@ (adr r2, 8008760 <UART_SetConfig+0x950>)
 800875a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800875e:	bf00      	nop
 8008760:	080087eb 	.word	0x080087eb
 8008764:	080087f3 	.word	0x080087f3
 8008768:	0800884f 	.word	0x0800884f
 800876c:	0800884f 	.word	0x0800884f
 8008770:	080087fb 	.word	0x080087fb
 8008774:	0800884f 	.word	0x0800884f
 8008778:	0800884f 	.word	0x0800884f
 800877c:	0800884f 	.word	0x0800884f
 8008780:	0800880b 	.word	0x0800880b
 8008784:	0800884f 	.word	0x0800884f
 8008788:	0800884f 	.word	0x0800884f
 800878c:	0800884f 	.word	0x0800884f
 8008790:	0800884f 	.word	0x0800884f
 8008794:	0800884f 	.word	0x0800884f
 8008798:	0800884f 	.word	0x0800884f
 800879c:	0800884f 	.word	0x0800884f
 80087a0:	0800881b 	.word	0x0800881b
 80087a4:	0800884f 	.word	0x0800884f
 80087a8:	0800884f 	.word	0x0800884f
 80087ac:	0800884f 	.word	0x0800884f
 80087b0:	0800884f 	.word	0x0800884f
 80087b4:	0800884f 	.word	0x0800884f
 80087b8:	0800884f 	.word	0x0800884f
 80087bc:	0800884f 	.word	0x0800884f
 80087c0:	0800884f 	.word	0x0800884f
 80087c4:	0800884f 	.word	0x0800884f
 80087c8:	0800884f 	.word	0x0800884f
 80087cc:	0800884f 	.word	0x0800884f
 80087d0:	0800884f 	.word	0x0800884f
 80087d4:	0800884f 	.word	0x0800884f
 80087d8:	0800884f 	.word	0x0800884f
 80087dc:	0800884f 	.word	0x0800884f
 80087e0:	08008841 	.word	0x08008841
 80087e4:	2b40      	cmp	r3, #64	@ 0x40
 80087e6:	d02e      	beq.n	8008846 <UART_SetConfig+0xa36>
 80087e8:	e031      	b.n	800884e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80087ea:	f7fb f8ed 	bl	80039c8 <HAL_RCC_GetPCLK1Freq>
 80087ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80087f0:	e033      	b.n	800885a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80087f2:	f7fb f8ff 	bl	80039f4 <HAL_RCC_GetPCLK2Freq>
 80087f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80087f8:	e02f      	b.n	800885a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80087fe:	4618      	mov	r0, r3
 8008800:	f7fc fb2e 	bl	8004e60 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008806:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008808:	e027      	b.n	800885a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800880a:	f107 0318 	add.w	r3, r7, #24
 800880e:	4618      	mov	r0, r3
 8008810:	f7fc fc7a 	bl	8005108 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008814:	69fb      	ldr	r3, [r7, #28]
 8008816:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008818:	e01f      	b.n	800885a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800881a:	4b2d      	ldr	r3, [pc, #180]	@ (80088d0 <UART_SetConfig+0xac0>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f003 0320 	and.w	r3, r3, #32
 8008822:	2b00      	cmp	r3, #0
 8008824:	d009      	beq.n	800883a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008826:	4b2a      	ldr	r3, [pc, #168]	@ (80088d0 <UART_SetConfig+0xac0>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	08db      	lsrs	r3, r3, #3
 800882c:	f003 0303 	and.w	r3, r3, #3
 8008830:	4a28      	ldr	r2, [pc, #160]	@ (80088d4 <UART_SetConfig+0xac4>)
 8008832:	fa22 f303 	lsr.w	r3, r2, r3
 8008836:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008838:	e00f      	b.n	800885a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800883a:	4b26      	ldr	r3, [pc, #152]	@ (80088d4 <UART_SetConfig+0xac4>)
 800883c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800883e:	e00c      	b.n	800885a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008840:	4b25      	ldr	r3, [pc, #148]	@ (80088d8 <UART_SetConfig+0xac8>)
 8008842:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008844:	e009      	b.n	800885a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008846:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800884a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800884c:	e005      	b.n	800885a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800884e:	2300      	movs	r3, #0
 8008850:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008852:	2301      	movs	r3, #1
 8008854:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008858:	bf00      	nop
    }

    if (pclk != 0U)
 800885a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800885c:	2b00      	cmp	r3, #0
 800885e:	d021      	beq.n	80088a4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008860:	697b      	ldr	r3, [r7, #20]
 8008862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008864:	4a1d      	ldr	r2, [pc, #116]	@ (80088dc <UART_SetConfig+0xacc>)
 8008866:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800886a:	461a      	mov	r2, r3
 800886c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800886e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	685b      	ldr	r3, [r3, #4]
 8008876:	085b      	lsrs	r3, r3, #1
 8008878:	441a      	add	r2, r3
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	685b      	ldr	r3, [r3, #4]
 800887e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008882:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008886:	2b0f      	cmp	r3, #15
 8008888:	d909      	bls.n	800889e <UART_SetConfig+0xa8e>
 800888a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800888c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008890:	d205      	bcs.n	800889e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008894:	b29a      	uxth	r2, r3
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	60da      	str	r2, [r3, #12]
 800889c:	e002      	b.n	80088a4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800889e:	2301      	movs	r3, #1
 80088a0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	2201      	movs	r2, #1
 80088a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	2201      	movs	r2, #1
 80088b0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	2200      	movs	r2, #0
 80088b8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	2200      	movs	r2, #0
 80088be:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80088c0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	3748      	adds	r7, #72	@ 0x48
 80088c8:	46bd      	mov	sp, r7
 80088ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80088ce:	bf00      	nop
 80088d0:	58024400 	.word	0x58024400
 80088d4:	03d09000 	.word	0x03d09000
 80088d8:	003d0900 	.word	0x003d0900
 80088dc:	0800ba68 	.word	0x0800ba68

080088e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b083      	sub	sp, #12
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088ec:	f003 0308 	and.w	r3, r3, #8
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d00a      	beq.n	800890a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	430a      	orrs	r2, r1
 8008908:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800890e:	f003 0301 	and.w	r3, r3, #1
 8008912:	2b00      	cmp	r3, #0
 8008914:	d00a      	beq.n	800892c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	685b      	ldr	r3, [r3, #4]
 800891c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	430a      	orrs	r2, r1
 800892a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008930:	f003 0302 	and.w	r3, r3, #2
 8008934:	2b00      	cmp	r3, #0
 8008936:	d00a      	beq.n	800894e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	685b      	ldr	r3, [r3, #4]
 800893e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	430a      	orrs	r2, r1
 800894c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008952:	f003 0304 	and.w	r3, r3, #4
 8008956:	2b00      	cmp	r3, #0
 8008958:	d00a      	beq.n	8008970 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	430a      	orrs	r2, r1
 800896e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008974:	f003 0310 	and.w	r3, r3, #16
 8008978:	2b00      	cmp	r3, #0
 800897a:	d00a      	beq.n	8008992 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	689b      	ldr	r3, [r3, #8]
 8008982:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	430a      	orrs	r2, r1
 8008990:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008996:	f003 0320 	and.w	r3, r3, #32
 800899a:	2b00      	cmp	r3, #0
 800899c:	d00a      	beq.n	80089b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	689b      	ldr	r3, [r3, #8]
 80089a4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	430a      	orrs	r2, r1
 80089b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d01a      	beq.n	80089f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	685b      	ldr	r3, [r3, #4]
 80089c6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	430a      	orrs	r2, r1
 80089d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80089de:	d10a      	bne.n	80089f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	685b      	ldr	r3, [r3, #4]
 80089e6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	430a      	orrs	r2, r1
 80089f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d00a      	beq.n	8008a18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	685b      	ldr	r3, [r3, #4]
 8008a08:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	430a      	orrs	r2, r1
 8008a16:	605a      	str	r2, [r3, #4]
  }
}
 8008a18:	bf00      	nop
 8008a1a:	370c      	adds	r7, #12
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a22:	4770      	bx	lr

08008a24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b098      	sub	sp, #96	@ 0x60
 8008a28:	af02      	add	r7, sp, #8
 8008a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008a34:	f7f8 fea4 	bl	8001780 <HAL_GetTick>
 8008a38:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f003 0308 	and.w	r3, r3, #8
 8008a44:	2b08      	cmp	r3, #8
 8008a46:	d12f      	bne.n	8008aa8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a48:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008a4c:	9300      	str	r3, [sp, #0]
 8008a4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008a50:	2200      	movs	r2, #0
 8008a52:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f000 f88e 	bl	8008b78 <UART_WaitOnFlagUntilTimeout>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d022      	beq.n	8008aa8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a6a:	e853 3f00 	ldrex	r3, [r3]
 8008a6e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008a70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a76:	653b      	str	r3, [r7, #80]	@ 0x50
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	461a      	mov	r2, r3
 8008a7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a80:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a82:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a84:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008a86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008a88:	e841 2300 	strex	r3, r2, [r1]
 8008a8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008a8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d1e6      	bne.n	8008a62 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2220      	movs	r2, #32
 8008a98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008aa4:	2303      	movs	r3, #3
 8008aa6:	e063      	b.n	8008b70 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f003 0304 	and.w	r3, r3, #4
 8008ab2:	2b04      	cmp	r3, #4
 8008ab4:	d149      	bne.n	8008b4a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ab6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008aba:	9300      	str	r3, [sp, #0]
 8008abc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008abe:	2200      	movs	r2, #0
 8008ac0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f000 f857 	bl	8008b78 <UART_WaitOnFlagUntilTimeout>
 8008aca:	4603      	mov	r3, r0
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d03c      	beq.n	8008b4a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ad8:	e853 3f00 	ldrex	r3, [r3]
 8008adc:	623b      	str	r3, [r7, #32]
   return(result);
 8008ade:	6a3b      	ldr	r3, [r7, #32]
 8008ae0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008ae4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	461a      	mov	r2, r3
 8008aec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008aee:	633b      	str	r3, [r7, #48]	@ 0x30
 8008af0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008af2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008af4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008af6:	e841 2300 	strex	r3, r2, [r1]
 8008afa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d1e6      	bne.n	8008ad0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	3308      	adds	r3, #8
 8008b08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	e853 3f00 	ldrex	r3, [r3]
 8008b10:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	f023 0301 	bic.w	r3, r3, #1
 8008b18:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	3308      	adds	r3, #8
 8008b20:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008b22:	61fa      	str	r2, [r7, #28]
 8008b24:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b26:	69b9      	ldr	r1, [r7, #24]
 8008b28:	69fa      	ldr	r2, [r7, #28]
 8008b2a:	e841 2300 	strex	r3, r2, [r1]
 8008b2e:	617b      	str	r3, [r7, #20]
   return(result);
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d1e5      	bne.n	8008b02 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2220      	movs	r2, #32
 8008b3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2200      	movs	r2, #0
 8008b42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b46:	2303      	movs	r3, #3
 8008b48:	e012      	b.n	8008b70 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2220      	movs	r2, #32
 8008b4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2220      	movs	r2, #32
 8008b56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2200      	movs	r2, #0
 8008b64:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008b6e:	2300      	movs	r3, #0
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3758      	adds	r7, #88	@ 0x58
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}

08008b78 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b084      	sub	sp, #16
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	60f8      	str	r0, [r7, #12]
 8008b80:	60b9      	str	r1, [r7, #8]
 8008b82:	603b      	str	r3, [r7, #0]
 8008b84:	4613      	mov	r3, r2
 8008b86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b88:	e04f      	b.n	8008c2a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b8a:	69bb      	ldr	r3, [r7, #24]
 8008b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b90:	d04b      	beq.n	8008c2a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b92:	f7f8 fdf5 	bl	8001780 <HAL_GetTick>
 8008b96:	4602      	mov	r2, r0
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	1ad3      	subs	r3, r2, r3
 8008b9c:	69ba      	ldr	r2, [r7, #24]
 8008b9e:	429a      	cmp	r2, r3
 8008ba0:	d302      	bcc.n	8008ba8 <UART_WaitOnFlagUntilTimeout+0x30>
 8008ba2:	69bb      	ldr	r3, [r7, #24]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d101      	bne.n	8008bac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008ba8:	2303      	movs	r3, #3
 8008baa:	e04e      	b.n	8008c4a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f003 0304 	and.w	r3, r3, #4
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d037      	beq.n	8008c2a <UART_WaitOnFlagUntilTimeout+0xb2>
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	2b80      	cmp	r3, #128	@ 0x80
 8008bbe:	d034      	beq.n	8008c2a <UART_WaitOnFlagUntilTimeout+0xb2>
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	2b40      	cmp	r3, #64	@ 0x40
 8008bc4:	d031      	beq.n	8008c2a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	69db      	ldr	r3, [r3, #28]
 8008bcc:	f003 0308 	and.w	r3, r3, #8
 8008bd0:	2b08      	cmp	r3, #8
 8008bd2:	d110      	bne.n	8008bf6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	2208      	movs	r2, #8
 8008bda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008bdc:	68f8      	ldr	r0, [r7, #12]
 8008bde:	f000 f839 	bl	8008c54 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	2208      	movs	r2, #8
 8008be6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	2200      	movs	r2, #0
 8008bee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	e029      	b.n	8008c4a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	69db      	ldr	r3, [r3, #28]
 8008bfc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008c00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008c04:	d111      	bne.n	8008c2a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008c0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008c10:	68f8      	ldr	r0, [r7, #12]
 8008c12:	f000 f81f 	bl	8008c54 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	2220      	movs	r2, #32
 8008c1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	2200      	movs	r2, #0
 8008c22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008c26:	2303      	movs	r3, #3
 8008c28:	e00f      	b.n	8008c4a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	69da      	ldr	r2, [r3, #28]
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	4013      	ands	r3, r2
 8008c34:	68ba      	ldr	r2, [r7, #8]
 8008c36:	429a      	cmp	r2, r3
 8008c38:	bf0c      	ite	eq
 8008c3a:	2301      	moveq	r3, #1
 8008c3c:	2300      	movne	r3, #0
 8008c3e:	b2db      	uxtb	r3, r3
 8008c40:	461a      	mov	r2, r3
 8008c42:	79fb      	ldrb	r3, [r7, #7]
 8008c44:	429a      	cmp	r2, r3
 8008c46:	d0a0      	beq.n	8008b8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008c48:	2300      	movs	r3, #0
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3710      	adds	r7, #16
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}
	...

08008c54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b095      	sub	sp, #84	@ 0x54
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c64:	e853 3f00 	ldrex	r3, [r3]
 8008c68:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c6c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c70:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	461a      	mov	r2, r3
 8008c78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c7a:	643b      	str	r3, [r7, #64]	@ 0x40
 8008c7c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c7e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008c80:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008c82:	e841 2300 	strex	r3, r2, [r1]
 8008c86:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d1e6      	bne.n	8008c5c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	3308      	adds	r3, #8
 8008c94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c96:	6a3b      	ldr	r3, [r7, #32]
 8008c98:	e853 3f00 	ldrex	r3, [r3]
 8008c9c:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c9e:	69fa      	ldr	r2, [r7, #28]
 8008ca0:	4b1e      	ldr	r3, [pc, #120]	@ (8008d1c <UART_EndRxTransfer+0xc8>)
 8008ca2:	4013      	ands	r3, r2
 8008ca4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	3308      	adds	r3, #8
 8008cac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008cae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008cb0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cb2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008cb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008cb6:	e841 2300 	strex	r3, r2, [r1]
 8008cba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d1e5      	bne.n	8008c8e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008cc6:	2b01      	cmp	r3, #1
 8008cc8:	d118      	bne.n	8008cfc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	e853 3f00 	ldrex	r3, [r3]
 8008cd6:	60bb      	str	r3, [r7, #8]
   return(result);
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	f023 0310 	bic.w	r3, r3, #16
 8008cde:	647b      	str	r3, [r7, #68]	@ 0x44
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	461a      	mov	r2, r3
 8008ce6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008ce8:	61bb      	str	r3, [r7, #24]
 8008cea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cec:	6979      	ldr	r1, [r7, #20]
 8008cee:	69ba      	ldr	r2, [r7, #24]
 8008cf0:	e841 2300 	strex	r3, r2, [r1]
 8008cf4:	613b      	str	r3, [r7, #16]
   return(result);
 8008cf6:	693b      	ldr	r3, [r7, #16]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d1e6      	bne.n	8008cca <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2220      	movs	r2, #32
 8008d00:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2200      	movs	r2, #0
 8008d08:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008d10:	bf00      	nop
 8008d12:	3754      	adds	r7, #84	@ 0x54
 8008d14:	46bd      	mov	sp, r7
 8008d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1a:	4770      	bx	lr
 8008d1c:	effffffe 	.word	0xeffffffe

08008d20 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b084      	sub	sp, #16
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d2c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	2200      	movs	r2, #0
 8008d32:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008d36:	68f8      	ldr	r0, [r7, #12]
 8008d38:	f7ff f854 	bl	8007de4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d3c:	bf00      	nop
 8008d3e:	3710      	adds	r7, #16
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}

08008d44 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b088      	sub	sp, #32
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	e853 3f00 	ldrex	r3, [r3]
 8008d58:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d60:	61fb      	str	r3, [r7, #28]
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	461a      	mov	r2, r3
 8008d68:	69fb      	ldr	r3, [r7, #28]
 8008d6a:	61bb      	str	r3, [r7, #24]
 8008d6c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d6e:	6979      	ldr	r1, [r7, #20]
 8008d70:	69ba      	ldr	r2, [r7, #24]
 8008d72:	e841 2300 	strex	r3, r2, [r1]
 8008d76:	613b      	str	r3, [r7, #16]
   return(result);
 8008d78:	693b      	ldr	r3, [r7, #16]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d1e6      	bne.n	8008d4c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2220      	movs	r2, #32
 8008d82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f7ff f81f 	bl	8007dd0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d92:	bf00      	nop
 8008d94:	3720      	adds	r7, #32
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}

08008d9a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008d9a:	b480      	push	{r7}
 8008d9c:	b083      	sub	sp, #12
 8008d9e:	af00      	add	r7, sp, #0
 8008da0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008da2:	bf00      	nop
 8008da4:	370c      	adds	r7, #12
 8008da6:	46bd      	mov	sp, r7
 8008da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dac:	4770      	bx	lr

08008dae <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008dae:	b480      	push	{r7}
 8008db0:	b083      	sub	sp, #12
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008db6:	bf00      	nop
 8008db8:	370c      	adds	r7, #12
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc0:	4770      	bx	lr

08008dc2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008dc2:	b480      	push	{r7}
 8008dc4:	b083      	sub	sp, #12
 8008dc6:	af00      	add	r7, sp, #0
 8008dc8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008dca:	bf00      	nop
 8008dcc:	370c      	adds	r7, #12
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd4:	4770      	bx	lr

08008dd6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008dd6:	b480      	push	{r7}
 8008dd8:	b085      	sub	sp, #20
 8008dda:	af00      	add	r7, sp, #0
 8008ddc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008de4:	2b01      	cmp	r3, #1
 8008de6:	d101      	bne.n	8008dec <HAL_UARTEx_DisableFifoMode+0x16>
 8008de8:	2302      	movs	r3, #2
 8008dea:	e027      	b.n	8008e3c <HAL_UARTEx_DisableFifoMode+0x66>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2201      	movs	r2, #1
 8008df0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2224      	movs	r2, #36	@ 0x24
 8008df8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	681a      	ldr	r2, [r3, #0]
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f022 0201 	bic.w	r2, r2, #1
 8008e12:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008e1a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2200      	movs	r2, #0
 8008e20:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	68fa      	ldr	r2, [r7, #12]
 8008e28:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2220      	movs	r2, #32
 8008e2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2200      	movs	r2, #0
 8008e36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008e3a:	2300      	movs	r3, #0
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3714      	adds	r7, #20
 8008e40:	46bd      	mov	sp, r7
 8008e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e46:	4770      	bx	lr

08008e48 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b084      	sub	sp, #16
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008e58:	2b01      	cmp	r3, #1
 8008e5a:	d101      	bne.n	8008e60 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008e5c:	2302      	movs	r3, #2
 8008e5e:	e02d      	b.n	8008ebc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2201      	movs	r2, #1
 8008e64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2224      	movs	r2, #36	@ 0x24
 8008e6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	681a      	ldr	r2, [r3, #0]
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f022 0201 	bic.w	r2, r2, #1
 8008e86:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	689b      	ldr	r3, [r3, #8]
 8008e8e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	683a      	ldr	r2, [r7, #0]
 8008e98:	430a      	orrs	r2, r1
 8008e9a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f000 f84f 	bl	8008f40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	68fa      	ldr	r2, [r7, #12]
 8008ea8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2220      	movs	r2, #32
 8008eae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008eba:	2300      	movs	r3, #0
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3710      	adds	r7, #16
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}

08008ec4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b084      	sub	sp, #16
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008ed4:	2b01      	cmp	r3, #1
 8008ed6:	d101      	bne.n	8008edc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008ed8:	2302      	movs	r3, #2
 8008eda:	e02d      	b.n	8008f38 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2201      	movs	r2, #1
 8008ee0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2224      	movs	r2, #36	@ 0x24
 8008ee8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	681a      	ldr	r2, [r3, #0]
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f022 0201 	bic.w	r2, r2, #1
 8008f02:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	689b      	ldr	r3, [r3, #8]
 8008f0a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	683a      	ldr	r2, [r7, #0]
 8008f14:	430a      	orrs	r2, r1
 8008f16:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f000 f811 	bl	8008f40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	68fa      	ldr	r2, [r7, #12]
 8008f24:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2220      	movs	r2, #32
 8008f2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2200      	movs	r2, #0
 8008f32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008f36:	2300      	movs	r3, #0
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	3710      	adds	r7, #16
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}

08008f40 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008f40:	b480      	push	{r7}
 8008f42:	b085      	sub	sp, #20
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d108      	bne.n	8008f62 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2201      	movs	r2, #1
 8008f54:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008f60:	e031      	b.n	8008fc6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008f62:	2310      	movs	r3, #16
 8008f64:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008f66:	2310      	movs	r3, #16
 8008f68:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	689b      	ldr	r3, [r3, #8]
 8008f70:	0e5b      	lsrs	r3, r3, #25
 8008f72:	b2db      	uxtb	r3, r3
 8008f74:	f003 0307 	and.w	r3, r3, #7
 8008f78:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	689b      	ldr	r3, [r3, #8]
 8008f80:	0f5b      	lsrs	r3, r3, #29
 8008f82:	b2db      	uxtb	r3, r3
 8008f84:	f003 0307 	and.w	r3, r3, #7
 8008f88:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008f8a:	7bbb      	ldrb	r3, [r7, #14]
 8008f8c:	7b3a      	ldrb	r2, [r7, #12]
 8008f8e:	4911      	ldr	r1, [pc, #68]	@ (8008fd4 <UARTEx_SetNbDataToProcess+0x94>)
 8008f90:	5c8a      	ldrb	r2, [r1, r2]
 8008f92:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008f96:	7b3a      	ldrb	r2, [r7, #12]
 8008f98:	490f      	ldr	r1, [pc, #60]	@ (8008fd8 <UARTEx_SetNbDataToProcess+0x98>)
 8008f9a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008f9c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008fa0:	b29a      	uxth	r2, r3
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008fa8:	7bfb      	ldrb	r3, [r7, #15]
 8008faa:	7b7a      	ldrb	r2, [r7, #13]
 8008fac:	4909      	ldr	r1, [pc, #36]	@ (8008fd4 <UARTEx_SetNbDataToProcess+0x94>)
 8008fae:	5c8a      	ldrb	r2, [r1, r2]
 8008fb0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008fb4:	7b7a      	ldrb	r2, [r7, #13]
 8008fb6:	4908      	ldr	r1, [pc, #32]	@ (8008fd8 <UARTEx_SetNbDataToProcess+0x98>)
 8008fb8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008fba:	fb93 f3f2 	sdiv	r3, r3, r2
 8008fbe:	b29a      	uxth	r2, r3
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008fc6:	bf00      	nop
 8008fc8:	3714      	adds	r7, #20
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd0:	4770      	bx	lr
 8008fd2:	bf00      	nop
 8008fd4:	0800ba80 	.word	0x0800ba80
 8008fd8:	0800ba88 	.word	0x0800ba88

08008fdc <HAL_WWDG_IRQHandler>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
void HAL_WWDG_IRQHandler(WWDG_HandleTypeDef *hwwdg)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b082      	sub	sp, #8
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
  /* Check if Early Wakeup Interrupt is enable */
  if (__HAL_WWDG_GET_IT_SOURCE(hwwdg, WWDG_IT_EWI) != RESET)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	685b      	ldr	r3, [r3, #4]
 8008fea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008fee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ff2:	d10e      	bne.n	8009012 <HAL_WWDG_IRQHandler+0x36>
  {
    /* Check if WWDG Early Wakeup Interrupt occurred */
    if (__HAL_WWDG_GET_FLAG(hwwdg, WWDG_FLAG_EWIF) != RESET)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	689b      	ldr	r3, [r3, #8]
 8008ffa:	f003 0301 	and.w	r3, r3, #1
 8008ffe:	2b01      	cmp	r3, #1
 8009000:	d107      	bne.n	8009012 <HAL_WWDG_IRQHandler+0x36>
    {
      /* Clear the WWDG Early Wakeup flag */
      __HAL_WWDG_CLEAR_FLAG(hwwdg, WWDG_FLAG_EWIF);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f06f 0201 	mvn.w	r2, #1
 800900a:	609a      	str	r2, [r3, #8]
#if (USE_HAL_WWDG_REGISTER_CALLBACKS == 1)
      /* Early Wakeup registered callback */
      hwwdg->EwiCallback(hwwdg);
#else
      /* Early Wakeup callback */
      HAL_WWDG_EarlyWakeupCallback(hwwdg);
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f000 f804 	bl	800901a <HAL_WWDG_EarlyWakeupCallback>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */
    }
  }
}
 8009012:	bf00      	nop
 8009014:	3708      	adds	r7, #8
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}

0800901a <HAL_WWDG_EarlyWakeupCallback>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
__weak void HAL_WWDG_EarlyWakeupCallback(WWDG_HandleTypeDef *hwwdg)
{
 800901a:	b480      	push	{r7}
 800901c:	b083      	sub	sp, #12
 800901e:	af00      	add	r7, sp, #0
 8009020:	6078      	str	r0, [r7, #4]
  UNUSED(hwwdg);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_WWDG_EarlyWakeupCallback could be implemented in the user file
   */
}
 8009022:	bf00      	nop
 8009024:	370c      	adds	r7, #12
 8009026:	46bd      	mov	sp, r7
 8009028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902c:	4770      	bx	lr

0800902e <__cvt>:
 800902e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009030:	ed2d 8b02 	vpush	{d8}
 8009034:	eeb0 8b40 	vmov.f64	d8, d0
 8009038:	b085      	sub	sp, #20
 800903a:	4617      	mov	r7, r2
 800903c:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800903e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009040:	ee18 2a90 	vmov	r2, s17
 8009044:	f025 0520 	bic.w	r5, r5, #32
 8009048:	2a00      	cmp	r2, #0
 800904a:	bfb6      	itet	lt
 800904c:	222d      	movlt	r2, #45	@ 0x2d
 800904e:	2200      	movge	r2, #0
 8009050:	eeb1 8b40 	vneglt.f64	d8, d0
 8009054:	2d46      	cmp	r5, #70	@ 0x46
 8009056:	460c      	mov	r4, r1
 8009058:	701a      	strb	r2, [r3, #0]
 800905a:	d004      	beq.n	8009066 <__cvt+0x38>
 800905c:	2d45      	cmp	r5, #69	@ 0x45
 800905e:	d100      	bne.n	8009062 <__cvt+0x34>
 8009060:	3401      	adds	r4, #1
 8009062:	2102      	movs	r1, #2
 8009064:	e000      	b.n	8009068 <__cvt+0x3a>
 8009066:	2103      	movs	r1, #3
 8009068:	ab03      	add	r3, sp, #12
 800906a:	9301      	str	r3, [sp, #4]
 800906c:	ab02      	add	r3, sp, #8
 800906e:	9300      	str	r3, [sp, #0]
 8009070:	4622      	mov	r2, r4
 8009072:	4633      	mov	r3, r6
 8009074:	eeb0 0b48 	vmov.f64	d0, d8
 8009078:	f000 ff22 	bl	8009ec0 <_dtoa_r>
 800907c:	2d47      	cmp	r5, #71	@ 0x47
 800907e:	d114      	bne.n	80090aa <__cvt+0x7c>
 8009080:	07fb      	lsls	r3, r7, #31
 8009082:	d50a      	bpl.n	800909a <__cvt+0x6c>
 8009084:	1902      	adds	r2, r0, r4
 8009086:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800908a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800908e:	bf08      	it	eq
 8009090:	9203      	streq	r2, [sp, #12]
 8009092:	2130      	movs	r1, #48	@ 0x30
 8009094:	9b03      	ldr	r3, [sp, #12]
 8009096:	4293      	cmp	r3, r2
 8009098:	d319      	bcc.n	80090ce <__cvt+0xa0>
 800909a:	9b03      	ldr	r3, [sp, #12]
 800909c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800909e:	1a1b      	subs	r3, r3, r0
 80090a0:	6013      	str	r3, [r2, #0]
 80090a2:	b005      	add	sp, #20
 80090a4:	ecbd 8b02 	vpop	{d8}
 80090a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090aa:	2d46      	cmp	r5, #70	@ 0x46
 80090ac:	eb00 0204 	add.w	r2, r0, r4
 80090b0:	d1e9      	bne.n	8009086 <__cvt+0x58>
 80090b2:	7803      	ldrb	r3, [r0, #0]
 80090b4:	2b30      	cmp	r3, #48	@ 0x30
 80090b6:	d107      	bne.n	80090c8 <__cvt+0x9a>
 80090b8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80090bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090c0:	bf1c      	itt	ne
 80090c2:	f1c4 0401 	rsbne	r4, r4, #1
 80090c6:	6034      	strne	r4, [r6, #0]
 80090c8:	6833      	ldr	r3, [r6, #0]
 80090ca:	441a      	add	r2, r3
 80090cc:	e7db      	b.n	8009086 <__cvt+0x58>
 80090ce:	1c5c      	adds	r4, r3, #1
 80090d0:	9403      	str	r4, [sp, #12]
 80090d2:	7019      	strb	r1, [r3, #0]
 80090d4:	e7de      	b.n	8009094 <__cvt+0x66>

080090d6 <__exponent>:
 80090d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090d8:	2900      	cmp	r1, #0
 80090da:	bfba      	itte	lt
 80090dc:	4249      	neglt	r1, r1
 80090de:	232d      	movlt	r3, #45	@ 0x2d
 80090e0:	232b      	movge	r3, #43	@ 0x2b
 80090e2:	2909      	cmp	r1, #9
 80090e4:	7002      	strb	r2, [r0, #0]
 80090e6:	7043      	strb	r3, [r0, #1]
 80090e8:	dd29      	ble.n	800913e <__exponent+0x68>
 80090ea:	f10d 0307 	add.w	r3, sp, #7
 80090ee:	461d      	mov	r5, r3
 80090f0:	270a      	movs	r7, #10
 80090f2:	461a      	mov	r2, r3
 80090f4:	fbb1 f6f7 	udiv	r6, r1, r7
 80090f8:	fb07 1416 	mls	r4, r7, r6, r1
 80090fc:	3430      	adds	r4, #48	@ 0x30
 80090fe:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009102:	460c      	mov	r4, r1
 8009104:	2c63      	cmp	r4, #99	@ 0x63
 8009106:	f103 33ff 	add.w	r3, r3, #4294967295
 800910a:	4631      	mov	r1, r6
 800910c:	dcf1      	bgt.n	80090f2 <__exponent+0x1c>
 800910e:	3130      	adds	r1, #48	@ 0x30
 8009110:	1e94      	subs	r4, r2, #2
 8009112:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009116:	1c41      	adds	r1, r0, #1
 8009118:	4623      	mov	r3, r4
 800911a:	42ab      	cmp	r3, r5
 800911c:	d30a      	bcc.n	8009134 <__exponent+0x5e>
 800911e:	f10d 0309 	add.w	r3, sp, #9
 8009122:	1a9b      	subs	r3, r3, r2
 8009124:	42ac      	cmp	r4, r5
 8009126:	bf88      	it	hi
 8009128:	2300      	movhi	r3, #0
 800912a:	3302      	adds	r3, #2
 800912c:	4403      	add	r3, r0
 800912e:	1a18      	subs	r0, r3, r0
 8009130:	b003      	add	sp, #12
 8009132:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009134:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009138:	f801 6f01 	strb.w	r6, [r1, #1]!
 800913c:	e7ed      	b.n	800911a <__exponent+0x44>
 800913e:	2330      	movs	r3, #48	@ 0x30
 8009140:	3130      	adds	r1, #48	@ 0x30
 8009142:	7083      	strb	r3, [r0, #2]
 8009144:	70c1      	strb	r1, [r0, #3]
 8009146:	1d03      	adds	r3, r0, #4
 8009148:	e7f1      	b.n	800912e <__exponent+0x58>
 800914a:	0000      	movs	r0, r0
 800914c:	0000      	movs	r0, r0
	...

08009150 <_printf_float>:
 8009150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009154:	b08d      	sub	sp, #52	@ 0x34
 8009156:	460c      	mov	r4, r1
 8009158:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800915c:	4616      	mov	r6, r2
 800915e:	461f      	mov	r7, r3
 8009160:	4605      	mov	r5, r0
 8009162:	f000 fdad 	bl	8009cc0 <_localeconv_r>
 8009166:	f8d0 b000 	ldr.w	fp, [r0]
 800916a:	4658      	mov	r0, fp
 800916c:	f7f7 f908 	bl	8000380 <strlen>
 8009170:	2300      	movs	r3, #0
 8009172:	930a      	str	r3, [sp, #40]	@ 0x28
 8009174:	f8d8 3000 	ldr.w	r3, [r8]
 8009178:	f894 9018 	ldrb.w	r9, [r4, #24]
 800917c:	6822      	ldr	r2, [r4, #0]
 800917e:	9005      	str	r0, [sp, #20]
 8009180:	3307      	adds	r3, #7
 8009182:	f023 0307 	bic.w	r3, r3, #7
 8009186:	f103 0108 	add.w	r1, r3, #8
 800918a:	f8c8 1000 	str.w	r1, [r8]
 800918e:	ed93 0b00 	vldr	d0, [r3]
 8009192:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 80093f0 <_printf_float+0x2a0>
 8009196:	eeb0 7bc0 	vabs.f64	d7, d0
 800919a:	eeb4 7b46 	vcmp.f64	d7, d6
 800919e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091a2:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 80091a6:	dd24      	ble.n	80091f2 <_printf_float+0xa2>
 80091a8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80091ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091b0:	d502      	bpl.n	80091b8 <_printf_float+0x68>
 80091b2:	232d      	movs	r3, #45	@ 0x2d
 80091b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80091b8:	498f      	ldr	r1, [pc, #572]	@ (80093f8 <_printf_float+0x2a8>)
 80091ba:	4b90      	ldr	r3, [pc, #576]	@ (80093fc <_printf_float+0x2ac>)
 80091bc:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 80091c0:	bf8c      	ite	hi
 80091c2:	4688      	movhi	r8, r1
 80091c4:	4698      	movls	r8, r3
 80091c6:	f022 0204 	bic.w	r2, r2, #4
 80091ca:	2303      	movs	r3, #3
 80091cc:	6123      	str	r3, [r4, #16]
 80091ce:	6022      	str	r2, [r4, #0]
 80091d0:	f04f 0a00 	mov.w	sl, #0
 80091d4:	9700      	str	r7, [sp, #0]
 80091d6:	4633      	mov	r3, r6
 80091d8:	aa0b      	add	r2, sp, #44	@ 0x2c
 80091da:	4621      	mov	r1, r4
 80091dc:	4628      	mov	r0, r5
 80091de:	f000 f9d1 	bl	8009584 <_printf_common>
 80091e2:	3001      	adds	r0, #1
 80091e4:	f040 8089 	bne.w	80092fa <_printf_float+0x1aa>
 80091e8:	f04f 30ff 	mov.w	r0, #4294967295
 80091ec:	b00d      	add	sp, #52	@ 0x34
 80091ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091f2:	eeb4 0b40 	vcmp.f64	d0, d0
 80091f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091fa:	d709      	bvc.n	8009210 <_printf_float+0xc0>
 80091fc:	ee10 3a90 	vmov	r3, s1
 8009200:	2b00      	cmp	r3, #0
 8009202:	bfbc      	itt	lt
 8009204:	232d      	movlt	r3, #45	@ 0x2d
 8009206:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800920a:	497d      	ldr	r1, [pc, #500]	@ (8009400 <_printf_float+0x2b0>)
 800920c:	4b7d      	ldr	r3, [pc, #500]	@ (8009404 <_printf_float+0x2b4>)
 800920e:	e7d5      	b.n	80091bc <_printf_float+0x6c>
 8009210:	6863      	ldr	r3, [r4, #4]
 8009212:	1c59      	adds	r1, r3, #1
 8009214:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8009218:	d139      	bne.n	800928e <_printf_float+0x13e>
 800921a:	2306      	movs	r3, #6
 800921c:	6063      	str	r3, [r4, #4]
 800921e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009222:	2300      	movs	r3, #0
 8009224:	6022      	str	r2, [r4, #0]
 8009226:	9303      	str	r3, [sp, #12]
 8009228:	ab0a      	add	r3, sp, #40	@ 0x28
 800922a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800922e:	ab09      	add	r3, sp, #36	@ 0x24
 8009230:	9300      	str	r3, [sp, #0]
 8009232:	6861      	ldr	r1, [r4, #4]
 8009234:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009238:	4628      	mov	r0, r5
 800923a:	f7ff fef8 	bl	800902e <__cvt>
 800923e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009242:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009244:	4680      	mov	r8, r0
 8009246:	d129      	bne.n	800929c <_printf_float+0x14c>
 8009248:	1cc8      	adds	r0, r1, #3
 800924a:	db02      	blt.n	8009252 <_printf_float+0x102>
 800924c:	6863      	ldr	r3, [r4, #4]
 800924e:	4299      	cmp	r1, r3
 8009250:	dd41      	ble.n	80092d6 <_printf_float+0x186>
 8009252:	f1a9 0902 	sub.w	r9, r9, #2
 8009256:	fa5f f989 	uxtb.w	r9, r9
 800925a:	3901      	subs	r1, #1
 800925c:	464a      	mov	r2, r9
 800925e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009262:	9109      	str	r1, [sp, #36]	@ 0x24
 8009264:	f7ff ff37 	bl	80090d6 <__exponent>
 8009268:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800926a:	1813      	adds	r3, r2, r0
 800926c:	2a01      	cmp	r2, #1
 800926e:	4682      	mov	sl, r0
 8009270:	6123      	str	r3, [r4, #16]
 8009272:	dc02      	bgt.n	800927a <_printf_float+0x12a>
 8009274:	6822      	ldr	r2, [r4, #0]
 8009276:	07d2      	lsls	r2, r2, #31
 8009278:	d501      	bpl.n	800927e <_printf_float+0x12e>
 800927a:	3301      	adds	r3, #1
 800927c:	6123      	str	r3, [r4, #16]
 800927e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009282:	2b00      	cmp	r3, #0
 8009284:	d0a6      	beq.n	80091d4 <_printf_float+0x84>
 8009286:	232d      	movs	r3, #45	@ 0x2d
 8009288:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800928c:	e7a2      	b.n	80091d4 <_printf_float+0x84>
 800928e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009292:	d1c4      	bne.n	800921e <_printf_float+0xce>
 8009294:	2b00      	cmp	r3, #0
 8009296:	d1c2      	bne.n	800921e <_printf_float+0xce>
 8009298:	2301      	movs	r3, #1
 800929a:	e7bf      	b.n	800921c <_printf_float+0xcc>
 800929c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80092a0:	d9db      	bls.n	800925a <_printf_float+0x10a>
 80092a2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 80092a6:	d118      	bne.n	80092da <_printf_float+0x18a>
 80092a8:	2900      	cmp	r1, #0
 80092aa:	6863      	ldr	r3, [r4, #4]
 80092ac:	dd0b      	ble.n	80092c6 <_printf_float+0x176>
 80092ae:	6121      	str	r1, [r4, #16]
 80092b0:	b913      	cbnz	r3, 80092b8 <_printf_float+0x168>
 80092b2:	6822      	ldr	r2, [r4, #0]
 80092b4:	07d0      	lsls	r0, r2, #31
 80092b6:	d502      	bpl.n	80092be <_printf_float+0x16e>
 80092b8:	3301      	adds	r3, #1
 80092ba:	440b      	add	r3, r1
 80092bc:	6123      	str	r3, [r4, #16]
 80092be:	65a1      	str	r1, [r4, #88]	@ 0x58
 80092c0:	f04f 0a00 	mov.w	sl, #0
 80092c4:	e7db      	b.n	800927e <_printf_float+0x12e>
 80092c6:	b913      	cbnz	r3, 80092ce <_printf_float+0x17e>
 80092c8:	6822      	ldr	r2, [r4, #0]
 80092ca:	07d2      	lsls	r2, r2, #31
 80092cc:	d501      	bpl.n	80092d2 <_printf_float+0x182>
 80092ce:	3302      	adds	r3, #2
 80092d0:	e7f4      	b.n	80092bc <_printf_float+0x16c>
 80092d2:	2301      	movs	r3, #1
 80092d4:	e7f2      	b.n	80092bc <_printf_float+0x16c>
 80092d6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 80092da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80092dc:	4299      	cmp	r1, r3
 80092de:	db05      	blt.n	80092ec <_printf_float+0x19c>
 80092e0:	6823      	ldr	r3, [r4, #0]
 80092e2:	6121      	str	r1, [r4, #16]
 80092e4:	07d8      	lsls	r0, r3, #31
 80092e6:	d5ea      	bpl.n	80092be <_printf_float+0x16e>
 80092e8:	1c4b      	adds	r3, r1, #1
 80092ea:	e7e7      	b.n	80092bc <_printf_float+0x16c>
 80092ec:	2900      	cmp	r1, #0
 80092ee:	bfd4      	ite	le
 80092f0:	f1c1 0202 	rsble	r2, r1, #2
 80092f4:	2201      	movgt	r2, #1
 80092f6:	4413      	add	r3, r2
 80092f8:	e7e0      	b.n	80092bc <_printf_float+0x16c>
 80092fa:	6823      	ldr	r3, [r4, #0]
 80092fc:	055a      	lsls	r2, r3, #21
 80092fe:	d407      	bmi.n	8009310 <_printf_float+0x1c0>
 8009300:	6923      	ldr	r3, [r4, #16]
 8009302:	4642      	mov	r2, r8
 8009304:	4631      	mov	r1, r6
 8009306:	4628      	mov	r0, r5
 8009308:	47b8      	blx	r7
 800930a:	3001      	adds	r0, #1
 800930c:	d12a      	bne.n	8009364 <_printf_float+0x214>
 800930e:	e76b      	b.n	80091e8 <_printf_float+0x98>
 8009310:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8009314:	f240 80e0 	bls.w	80094d8 <_printf_float+0x388>
 8009318:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800931c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009324:	d133      	bne.n	800938e <_printf_float+0x23e>
 8009326:	4a38      	ldr	r2, [pc, #224]	@ (8009408 <_printf_float+0x2b8>)
 8009328:	2301      	movs	r3, #1
 800932a:	4631      	mov	r1, r6
 800932c:	4628      	mov	r0, r5
 800932e:	47b8      	blx	r7
 8009330:	3001      	adds	r0, #1
 8009332:	f43f af59 	beq.w	80091e8 <_printf_float+0x98>
 8009336:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800933a:	4543      	cmp	r3, r8
 800933c:	db02      	blt.n	8009344 <_printf_float+0x1f4>
 800933e:	6823      	ldr	r3, [r4, #0]
 8009340:	07d8      	lsls	r0, r3, #31
 8009342:	d50f      	bpl.n	8009364 <_printf_float+0x214>
 8009344:	9b05      	ldr	r3, [sp, #20]
 8009346:	465a      	mov	r2, fp
 8009348:	4631      	mov	r1, r6
 800934a:	4628      	mov	r0, r5
 800934c:	47b8      	blx	r7
 800934e:	3001      	adds	r0, #1
 8009350:	f43f af4a 	beq.w	80091e8 <_printf_float+0x98>
 8009354:	f04f 0900 	mov.w	r9, #0
 8009358:	f108 38ff 	add.w	r8, r8, #4294967295
 800935c:	f104 0a1a 	add.w	sl, r4, #26
 8009360:	45c8      	cmp	r8, r9
 8009362:	dc09      	bgt.n	8009378 <_printf_float+0x228>
 8009364:	6823      	ldr	r3, [r4, #0]
 8009366:	079b      	lsls	r3, r3, #30
 8009368:	f100 8107 	bmi.w	800957a <_printf_float+0x42a>
 800936c:	68e0      	ldr	r0, [r4, #12]
 800936e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009370:	4298      	cmp	r0, r3
 8009372:	bfb8      	it	lt
 8009374:	4618      	movlt	r0, r3
 8009376:	e739      	b.n	80091ec <_printf_float+0x9c>
 8009378:	2301      	movs	r3, #1
 800937a:	4652      	mov	r2, sl
 800937c:	4631      	mov	r1, r6
 800937e:	4628      	mov	r0, r5
 8009380:	47b8      	blx	r7
 8009382:	3001      	adds	r0, #1
 8009384:	f43f af30 	beq.w	80091e8 <_printf_float+0x98>
 8009388:	f109 0901 	add.w	r9, r9, #1
 800938c:	e7e8      	b.n	8009360 <_printf_float+0x210>
 800938e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009390:	2b00      	cmp	r3, #0
 8009392:	dc3b      	bgt.n	800940c <_printf_float+0x2bc>
 8009394:	4a1c      	ldr	r2, [pc, #112]	@ (8009408 <_printf_float+0x2b8>)
 8009396:	2301      	movs	r3, #1
 8009398:	4631      	mov	r1, r6
 800939a:	4628      	mov	r0, r5
 800939c:	47b8      	blx	r7
 800939e:	3001      	adds	r0, #1
 80093a0:	f43f af22 	beq.w	80091e8 <_printf_float+0x98>
 80093a4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80093a8:	ea59 0303 	orrs.w	r3, r9, r3
 80093ac:	d102      	bne.n	80093b4 <_printf_float+0x264>
 80093ae:	6823      	ldr	r3, [r4, #0]
 80093b0:	07d9      	lsls	r1, r3, #31
 80093b2:	d5d7      	bpl.n	8009364 <_printf_float+0x214>
 80093b4:	9b05      	ldr	r3, [sp, #20]
 80093b6:	465a      	mov	r2, fp
 80093b8:	4631      	mov	r1, r6
 80093ba:	4628      	mov	r0, r5
 80093bc:	47b8      	blx	r7
 80093be:	3001      	adds	r0, #1
 80093c0:	f43f af12 	beq.w	80091e8 <_printf_float+0x98>
 80093c4:	f04f 0a00 	mov.w	sl, #0
 80093c8:	f104 0b1a 	add.w	fp, r4, #26
 80093cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093ce:	425b      	negs	r3, r3
 80093d0:	4553      	cmp	r3, sl
 80093d2:	dc01      	bgt.n	80093d8 <_printf_float+0x288>
 80093d4:	464b      	mov	r3, r9
 80093d6:	e794      	b.n	8009302 <_printf_float+0x1b2>
 80093d8:	2301      	movs	r3, #1
 80093da:	465a      	mov	r2, fp
 80093dc:	4631      	mov	r1, r6
 80093de:	4628      	mov	r0, r5
 80093e0:	47b8      	blx	r7
 80093e2:	3001      	adds	r0, #1
 80093e4:	f43f af00 	beq.w	80091e8 <_printf_float+0x98>
 80093e8:	f10a 0a01 	add.w	sl, sl, #1
 80093ec:	e7ee      	b.n	80093cc <_printf_float+0x27c>
 80093ee:	bf00      	nop
 80093f0:	ffffffff 	.word	0xffffffff
 80093f4:	7fefffff 	.word	0x7fefffff
 80093f8:	0800ba94 	.word	0x0800ba94
 80093fc:	0800ba90 	.word	0x0800ba90
 8009400:	0800ba9c 	.word	0x0800ba9c
 8009404:	0800ba98 	.word	0x0800ba98
 8009408:	0800baa0 	.word	0x0800baa0
 800940c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800940e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009412:	4553      	cmp	r3, sl
 8009414:	bfa8      	it	ge
 8009416:	4653      	movge	r3, sl
 8009418:	2b00      	cmp	r3, #0
 800941a:	4699      	mov	r9, r3
 800941c:	dc37      	bgt.n	800948e <_printf_float+0x33e>
 800941e:	2300      	movs	r3, #0
 8009420:	9307      	str	r3, [sp, #28]
 8009422:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009426:	f104 021a 	add.w	r2, r4, #26
 800942a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800942c:	9907      	ldr	r1, [sp, #28]
 800942e:	9306      	str	r3, [sp, #24]
 8009430:	eba3 0309 	sub.w	r3, r3, r9
 8009434:	428b      	cmp	r3, r1
 8009436:	dc31      	bgt.n	800949c <_printf_float+0x34c>
 8009438:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800943a:	459a      	cmp	sl, r3
 800943c:	dc3b      	bgt.n	80094b6 <_printf_float+0x366>
 800943e:	6823      	ldr	r3, [r4, #0]
 8009440:	07da      	lsls	r2, r3, #31
 8009442:	d438      	bmi.n	80094b6 <_printf_float+0x366>
 8009444:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009446:	ebaa 0903 	sub.w	r9, sl, r3
 800944a:	9b06      	ldr	r3, [sp, #24]
 800944c:	ebaa 0303 	sub.w	r3, sl, r3
 8009450:	4599      	cmp	r9, r3
 8009452:	bfa8      	it	ge
 8009454:	4699      	movge	r9, r3
 8009456:	f1b9 0f00 	cmp.w	r9, #0
 800945a:	dc34      	bgt.n	80094c6 <_printf_float+0x376>
 800945c:	f04f 0800 	mov.w	r8, #0
 8009460:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009464:	f104 0b1a 	add.w	fp, r4, #26
 8009468:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800946a:	ebaa 0303 	sub.w	r3, sl, r3
 800946e:	eba3 0309 	sub.w	r3, r3, r9
 8009472:	4543      	cmp	r3, r8
 8009474:	f77f af76 	ble.w	8009364 <_printf_float+0x214>
 8009478:	2301      	movs	r3, #1
 800947a:	465a      	mov	r2, fp
 800947c:	4631      	mov	r1, r6
 800947e:	4628      	mov	r0, r5
 8009480:	47b8      	blx	r7
 8009482:	3001      	adds	r0, #1
 8009484:	f43f aeb0 	beq.w	80091e8 <_printf_float+0x98>
 8009488:	f108 0801 	add.w	r8, r8, #1
 800948c:	e7ec      	b.n	8009468 <_printf_float+0x318>
 800948e:	4642      	mov	r2, r8
 8009490:	4631      	mov	r1, r6
 8009492:	4628      	mov	r0, r5
 8009494:	47b8      	blx	r7
 8009496:	3001      	adds	r0, #1
 8009498:	d1c1      	bne.n	800941e <_printf_float+0x2ce>
 800949a:	e6a5      	b.n	80091e8 <_printf_float+0x98>
 800949c:	2301      	movs	r3, #1
 800949e:	4631      	mov	r1, r6
 80094a0:	4628      	mov	r0, r5
 80094a2:	9206      	str	r2, [sp, #24]
 80094a4:	47b8      	blx	r7
 80094a6:	3001      	adds	r0, #1
 80094a8:	f43f ae9e 	beq.w	80091e8 <_printf_float+0x98>
 80094ac:	9b07      	ldr	r3, [sp, #28]
 80094ae:	9a06      	ldr	r2, [sp, #24]
 80094b0:	3301      	adds	r3, #1
 80094b2:	9307      	str	r3, [sp, #28]
 80094b4:	e7b9      	b.n	800942a <_printf_float+0x2da>
 80094b6:	9b05      	ldr	r3, [sp, #20]
 80094b8:	465a      	mov	r2, fp
 80094ba:	4631      	mov	r1, r6
 80094bc:	4628      	mov	r0, r5
 80094be:	47b8      	blx	r7
 80094c0:	3001      	adds	r0, #1
 80094c2:	d1bf      	bne.n	8009444 <_printf_float+0x2f4>
 80094c4:	e690      	b.n	80091e8 <_printf_float+0x98>
 80094c6:	9a06      	ldr	r2, [sp, #24]
 80094c8:	464b      	mov	r3, r9
 80094ca:	4442      	add	r2, r8
 80094cc:	4631      	mov	r1, r6
 80094ce:	4628      	mov	r0, r5
 80094d0:	47b8      	blx	r7
 80094d2:	3001      	adds	r0, #1
 80094d4:	d1c2      	bne.n	800945c <_printf_float+0x30c>
 80094d6:	e687      	b.n	80091e8 <_printf_float+0x98>
 80094d8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80094dc:	f1b9 0f01 	cmp.w	r9, #1
 80094e0:	dc01      	bgt.n	80094e6 <_printf_float+0x396>
 80094e2:	07db      	lsls	r3, r3, #31
 80094e4:	d536      	bpl.n	8009554 <_printf_float+0x404>
 80094e6:	2301      	movs	r3, #1
 80094e8:	4642      	mov	r2, r8
 80094ea:	4631      	mov	r1, r6
 80094ec:	4628      	mov	r0, r5
 80094ee:	47b8      	blx	r7
 80094f0:	3001      	adds	r0, #1
 80094f2:	f43f ae79 	beq.w	80091e8 <_printf_float+0x98>
 80094f6:	9b05      	ldr	r3, [sp, #20]
 80094f8:	465a      	mov	r2, fp
 80094fa:	4631      	mov	r1, r6
 80094fc:	4628      	mov	r0, r5
 80094fe:	47b8      	blx	r7
 8009500:	3001      	adds	r0, #1
 8009502:	f43f ae71 	beq.w	80091e8 <_printf_float+0x98>
 8009506:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800950a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800950e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009512:	f109 39ff 	add.w	r9, r9, #4294967295
 8009516:	d018      	beq.n	800954a <_printf_float+0x3fa>
 8009518:	464b      	mov	r3, r9
 800951a:	f108 0201 	add.w	r2, r8, #1
 800951e:	4631      	mov	r1, r6
 8009520:	4628      	mov	r0, r5
 8009522:	47b8      	blx	r7
 8009524:	3001      	adds	r0, #1
 8009526:	d10c      	bne.n	8009542 <_printf_float+0x3f2>
 8009528:	e65e      	b.n	80091e8 <_printf_float+0x98>
 800952a:	2301      	movs	r3, #1
 800952c:	465a      	mov	r2, fp
 800952e:	4631      	mov	r1, r6
 8009530:	4628      	mov	r0, r5
 8009532:	47b8      	blx	r7
 8009534:	3001      	adds	r0, #1
 8009536:	f43f ae57 	beq.w	80091e8 <_printf_float+0x98>
 800953a:	f108 0801 	add.w	r8, r8, #1
 800953e:	45c8      	cmp	r8, r9
 8009540:	dbf3      	blt.n	800952a <_printf_float+0x3da>
 8009542:	4653      	mov	r3, sl
 8009544:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009548:	e6dc      	b.n	8009304 <_printf_float+0x1b4>
 800954a:	f04f 0800 	mov.w	r8, #0
 800954e:	f104 0b1a 	add.w	fp, r4, #26
 8009552:	e7f4      	b.n	800953e <_printf_float+0x3ee>
 8009554:	2301      	movs	r3, #1
 8009556:	4642      	mov	r2, r8
 8009558:	e7e1      	b.n	800951e <_printf_float+0x3ce>
 800955a:	2301      	movs	r3, #1
 800955c:	464a      	mov	r2, r9
 800955e:	4631      	mov	r1, r6
 8009560:	4628      	mov	r0, r5
 8009562:	47b8      	blx	r7
 8009564:	3001      	adds	r0, #1
 8009566:	f43f ae3f 	beq.w	80091e8 <_printf_float+0x98>
 800956a:	f108 0801 	add.w	r8, r8, #1
 800956e:	68e3      	ldr	r3, [r4, #12]
 8009570:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009572:	1a5b      	subs	r3, r3, r1
 8009574:	4543      	cmp	r3, r8
 8009576:	dcf0      	bgt.n	800955a <_printf_float+0x40a>
 8009578:	e6f8      	b.n	800936c <_printf_float+0x21c>
 800957a:	f04f 0800 	mov.w	r8, #0
 800957e:	f104 0919 	add.w	r9, r4, #25
 8009582:	e7f4      	b.n	800956e <_printf_float+0x41e>

08009584 <_printf_common>:
 8009584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009588:	4616      	mov	r6, r2
 800958a:	4698      	mov	r8, r3
 800958c:	688a      	ldr	r2, [r1, #8]
 800958e:	690b      	ldr	r3, [r1, #16]
 8009590:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009594:	4293      	cmp	r3, r2
 8009596:	bfb8      	it	lt
 8009598:	4613      	movlt	r3, r2
 800959a:	6033      	str	r3, [r6, #0]
 800959c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80095a0:	4607      	mov	r7, r0
 80095a2:	460c      	mov	r4, r1
 80095a4:	b10a      	cbz	r2, 80095aa <_printf_common+0x26>
 80095a6:	3301      	adds	r3, #1
 80095a8:	6033      	str	r3, [r6, #0]
 80095aa:	6823      	ldr	r3, [r4, #0]
 80095ac:	0699      	lsls	r1, r3, #26
 80095ae:	bf42      	ittt	mi
 80095b0:	6833      	ldrmi	r3, [r6, #0]
 80095b2:	3302      	addmi	r3, #2
 80095b4:	6033      	strmi	r3, [r6, #0]
 80095b6:	6825      	ldr	r5, [r4, #0]
 80095b8:	f015 0506 	ands.w	r5, r5, #6
 80095bc:	d106      	bne.n	80095cc <_printf_common+0x48>
 80095be:	f104 0a19 	add.w	sl, r4, #25
 80095c2:	68e3      	ldr	r3, [r4, #12]
 80095c4:	6832      	ldr	r2, [r6, #0]
 80095c6:	1a9b      	subs	r3, r3, r2
 80095c8:	42ab      	cmp	r3, r5
 80095ca:	dc26      	bgt.n	800961a <_printf_common+0x96>
 80095cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80095d0:	6822      	ldr	r2, [r4, #0]
 80095d2:	3b00      	subs	r3, #0
 80095d4:	bf18      	it	ne
 80095d6:	2301      	movne	r3, #1
 80095d8:	0692      	lsls	r2, r2, #26
 80095da:	d42b      	bmi.n	8009634 <_printf_common+0xb0>
 80095dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80095e0:	4641      	mov	r1, r8
 80095e2:	4638      	mov	r0, r7
 80095e4:	47c8      	blx	r9
 80095e6:	3001      	adds	r0, #1
 80095e8:	d01e      	beq.n	8009628 <_printf_common+0xa4>
 80095ea:	6823      	ldr	r3, [r4, #0]
 80095ec:	6922      	ldr	r2, [r4, #16]
 80095ee:	f003 0306 	and.w	r3, r3, #6
 80095f2:	2b04      	cmp	r3, #4
 80095f4:	bf02      	ittt	eq
 80095f6:	68e5      	ldreq	r5, [r4, #12]
 80095f8:	6833      	ldreq	r3, [r6, #0]
 80095fa:	1aed      	subeq	r5, r5, r3
 80095fc:	68a3      	ldr	r3, [r4, #8]
 80095fe:	bf0c      	ite	eq
 8009600:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009604:	2500      	movne	r5, #0
 8009606:	4293      	cmp	r3, r2
 8009608:	bfc4      	itt	gt
 800960a:	1a9b      	subgt	r3, r3, r2
 800960c:	18ed      	addgt	r5, r5, r3
 800960e:	2600      	movs	r6, #0
 8009610:	341a      	adds	r4, #26
 8009612:	42b5      	cmp	r5, r6
 8009614:	d11a      	bne.n	800964c <_printf_common+0xc8>
 8009616:	2000      	movs	r0, #0
 8009618:	e008      	b.n	800962c <_printf_common+0xa8>
 800961a:	2301      	movs	r3, #1
 800961c:	4652      	mov	r2, sl
 800961e:	4641      	mov	r1, r8
 8009620:	4638      	mov	r0, r7
 8009622:	47c8      	blx	r9
 8009624:	3001      	adds	r0, #1
 8009626:	d103      	bne.n	8009630 <_printf_common+0xac>
 8009628:	f04f 30ff 	mov.w	r0, #4294967295
 800962c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009630:	3501      	adds	r5, #1
 8009632:	e7c6      	b.n	80095c2 <_printf_common+0x3e>
 8009634:	18e1      	adds	r1, r4, r3
 8009636:	1c5a      	adds	r2, r3, #1
 8009638:	2030      	movs	r0, #48	@ 0x30
 800963a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800963e:	4422      	add	r2, r4
 8009640:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009644:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009648:	3302      	adds	r3, #2
 800964a:	e7c7      	b.n	80095dc <_printf_common+0x58>
 800964c:	2301      	movs	r3, #1
 800964e:	4622      	mov	r2, r4
 8009650:	4641      	mov	r1, r8
 8009652:	4638      	mov	r0, r7
 8009654:	47c8      	blx	r9
 8009656:	3001      	adds	r0, #1
 8009658:	d0e6      	beq.n	8009628 <_printf_common+0xa4>
 800965a:	3601      	adds	r6, #1
 800965c:	e7d9      	b.n	8009612 <_printf_common+0x8e>
	...

08009660 <_printf_i>:
 8009660:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009664:	7e0f      	ldrb	r7, [r1, #24]
 8009666:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009668:	2f78      	cmp	r7, #120	@ 0x78
 800966a:	4691      	mov	r9, r2
 800966c:	4680      	mov	r8, r0
 800966e:	460c      	mov	r4, r1
 8009670:	469a      	mov	sl, r3
 8009672:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009676:	d807      	bhi.n	8009688 <_printf_i+0x28>
 8009678:	2f62      	cmp	r7, #98	@ 0x62
 800967a:	d80a      	bhi.n	8009692 <_printf_i+0x32>
 800967c:	2f00      	cmp	r7, #0
 800967e:	f000 80d1 	beq.w	8009824 <_printf_i+0x1c4>
 8009682:	2f58      	cmp	r7, #88	@ 0x58
 8009684:	f000 80b8 	beq.w	80097f8 <_printf_i+0x198>
 8009688:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800968c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009690:	e03a      	b.n	8009708 <_printf_i+0xa8>
 8009692:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009696:	2b15      	cmp	r3, #21
 8009698:	d8f6      	bhi.n	8009688 <_printf_i+0x28>
 800969a:	a101      	add	r1, pc, #4	@ (adr r1, 80096a0 <_printf_i+0x40>)
 800969c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80096a0:	080096f9 	.word	0x080096f9
 80096a4:	0800970d 	.word	0x0800970d
 80096a8:	08009689 	.word	0x08009689
 80096ac:	08009689 	.word	0x08009689
 80096b0:	08009689 	.word	0x08009689
 80096b4:	08009689 	.word	0x08009689
 80096b8:	0800970d 	.word	0x0800970d
 80096bc:	08009689 	.word	0x08009689
 80096c0:	08009689 	.word	0x08009689
 80096c4:	08009689 	.word	0x08009689
 80096c8:	08009689 	.word	0x08009689
 80096cc:	0800980b 	.word	0x0800980b
 80096d0:	08009737 	.word	0x08009737
 80096d4:	080097c5 	.word	0x080097c5
 80096d8:	08009689 	.word	0x08009689
 80096dc:	08009689 	.word	0x08009689
 80096e0:	0800982d 	.word	0x0800982d
 80096e4:	08009689 	.word	0x08009689
 80096e8:	08009737 	.word	0x08009737
 80096ec:	08009689 	.word	0x08009689
 80096f0:	08009689 	.word	0x08009689
 80096f4:	080097cd 	.word	0x080097cd
 80096f8:	6833      	ldr	r3, [r6, #0]
 80096fa:	1d1a      	adds	r2, r3, #4
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	6032      	str	r2, [r6, #0]
 8009700:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009704:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009708:	2301      	movs	r3, #1
 800970a:	e09c      	b.n	8009846 <_printf_i+0x1e6>
 800970c:	6833      	ldr	r3, [r6, #0]
 800970e:	6820      	ldr	r0, [r4, #0]
 8009710:	1d19      	adds	r1, r3, #4
 8009712:	6031      	str	r1, [r6, #0]
 8009714:	0606      	lsls	r6, r0, #24
 8009716:	d501      	bpl.n	800971c <_printf_i+0xbc>
 8009718:	681d      	ldr	r5, [r3, #0]
 800971a:	e003      	b.n	8009724 <_printf_i+0xc4>
 800971c:	0645      	lsls	r5, r0, #25
 800971e:	d5fb      	bpl.n	8009718 <_printf_i+0xb8>
 8009720:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009724:	2d00      	cmp	r5, #0
 8009726:	da03      	bge.n	8009730 <_printf_i+0xd0>
 8009728:	232d      	movs	r3, #45	@ 0x2d
 800972a:	426d      	negs	r5, r5
 800972c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009730:	4858      	ldr	r0, [pc, #352]	@ (8009894 <_printf_i+0x234>)
 8009732:	230a      	movs	r3, #10
 8009734:	e011      	b.n	800975a <_printf_i+0xfa>
 8009736:	6821      	ldr	r1, [r4, #0]
 8009738:	6833      	ldr	r3, [r6, #0]
 800973a:	0608      	lsls	r0, r1, #24
 800973c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009740:	d402      	bmi.n	8009748 <_printf_i+0xe8>
 8009742:	0649      	lsls	r1, r1, #25
 8009744:	bf48      	it	mi
 8009746:	b2ad      	uxthmi	r5, r5
 8009748:	2f6f      	cmp	r7, #111	@ 0x6f
 800974a:	4852      	ldr	r0, [pc, #328]	@ (8009894 <_printf_i+0x234>)
 800974c:	6033      	str	r3, [r6, #0]
 800974e:	bf14      	ite	ne
 8009750:	230a      	movne	r3, #10
 8009752:	2308      	moveq	r3, #8
 8009754:	2100      	movs	r1, #0
 8009756:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800975a:	6866      	ldr	r6, [r4, #4]
 800975c:	60a6      	str	r6, [r4, #8]
 800975e:	2e00      	cmp	r6, #0
 8009760:	db05      	blt.n	800976e <_printf_i+0x10e>
 8009762:	6821      	ldr	r1, [r4, #0]
 8009764:	432e      	orrs	r6, r5
 8009766:	f021 0104 	bic.w	r1, r1, #4
 800976a:	6021      	str	r1, [r4, #0]
 800976c:	d04b      	beq.n	8009806 <_printf_i+0x1a6>
 800976e:	4616      	mov	r6, r2
 8009770:	fbb5 f1f3 	udiv	r1, r5, r3
 8009774:	fb03 5711 	mls	r7, r3, r1, r5
 8009778:	5dc7      	ldrb	r7, [r0, r7]
 800977a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800977e:	462f      	mov	r7, r5
 8009780:	42bb      	cmp	r3, r7
 8009782:	460d      	mov	r5, r1
 8009784:	d9f4      	bls.n	8009770 <_printf_i+0x110>
 8009786:	2b08      	cmp	r3, #8
 8009788:	d10b      	bne.n	80097a2 <_printf_i+0x142>
 800978a:	6823      	ldr	r3, [r4, #0]
 800978c:	07df      	lsls	r7, r3, #31
 800978e:	d508      	bpl.n	80097a2 <_printf_i+0x142>
 8009790:	6923      	ldr	r3, [r4, #16]
 8009792:	6861      	ldr	r1, [r4, #4]
 8009794:	4299      	cmp	r1, r3
 8009796:	bfde      	ittt	le
 8009798:	2330      	movle	r3, #48	@ 0x30
 800979a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800979e:	f106 36ff 	addle.w	r6, r6, #4294967295
 80097a2:	1b92      	subs	r2, r2, r6
 80097a4:	6122      	str	r2, [r4, #16]
 80097a6:	f8cd a000 	str.w	sl, [sp]
 80097aa:	464b      	mov	r3, r9
 80097ac:	aa03      	add	r2, sp, #12
 80097ae:	4621      	mov	r1, r4
 80097b0:	4640      	mov	r0, r8
 80097b2:	f7ff fee7 	bl	8009584 <_printf_common>
 80097b6:	3001      	adds	r0, #1
 80097b8:	d14a      	bne.n	8009850 <_printf_i+0x1f0>
 80097ba:	f04f 30ff 	mov.w	r0, #4294967295
 80097be:	b004      	add	sp, #16
 80097c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097c4:	6823      	ldr	r3, [r4, #0]
 80097c6:	f043 0320 	orr.w	r3, r3, #32
 80097ca:	6023      	str	r3, [r4, #0]
 80097cc:	4832      	ldr	r0, [pc, #200]	@ (8009898 <_printf_i+0x238>)
 80097ce:	2778      	movs	r7, #120	@ 0x78
 80097d0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80097d4:	6823      	ldr	r3, [r4, #0]
 80097d6:	6831      	ldr	r1, [r6, #0]
 80097d8:	061f      	lsls	r7, r3, #24
 80097da:	f851 5b04 	ldr.w	r5, [r1], #4
 80097de:	d402      	bmi.n	80097e6 <_printf_i+0x186>
 80097e0:	065f      	lsls	r7, r3, #25
 80097e2:	bf48      	it	mi
 80097e4:	b2ad      	uxthmi	r5, r5
 80097e6:	6031      	str	r1, [r6, #0]
 80097e8:	07d9      	lsls	r1, r3, #31
 80097ea:	bf44      	itt	mi
 80097ec:	f043 0320 	orrmi.w	r3, r3, #32
 80097f0:	6023      	strmi	r3, [r4, #0]
 80097f2:	b11d      	cbz	r5, 80097fc <_printf_i+0x19c>
 80097f4:	2310      	movs	r3, #16
 80097f6:	e7ad      	b.n	8009754 <_printf_i+0xf4>
 80097f8:	4826      	ldr	r0, [pc, #152]	@ (8009894 <_printf_i+0x234>)
 80097fa:	e7e9      	b.n	80097d0 <_printf_i+0x170>
 80097fc:	6823      	ldr	r3, [r4, #0]
 80097fe:	f023 0320 	bic.w	r3, r3, #32
 8009802:	6023      	str	r3, [r4, #0]
 8009804:	e7f6      	b.n	80097f4 <_printf_i+0x194>
 8009806:	4616      	mov	r6, r2
 8009808:	e7bd      	b.n	8009786 <_printf_i+0x126>
 800980a:	6833      	ldr	r3, [r6, #0]
 800980c:	6825      	ldr	r5, [r4, #0]
 800980e:	6961      	ldr	r1, [r4, #20]
 8009810:	1d18      	adds	r0, r3, #4
 8009812:	6030      	str	r0, [r6, #0]
 8009814:	062e      	lsls	r6, r5, #24
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	d501      	bpl.n	800981e <_printf_i+0x1be>
 800981a:	6019      	str	r1, [r3, #0]
 800981c:	e002      	b.n	8009824 <_printf_i+0x1c4>
 800981e:	0668      	lsls	r0, r5, #25
 8009820:	d5fb      	bpl.n	800981a <_printf_i+0x1ba>
 8009822:	8019      	strh	r1, [r3, #0]
 8009824:	2300      	movs	r3, #0
 8009826:	6123      	str	r3, [r4, #16]
 8009828:	4616      	mov	r6, r2
 800982a:	e7bc      	b.n	80097a6 <_printf_i+0x146>
 800982c:	6833      	ldr	r3, [r6, #0]
 800982e:	1d1a      	adds	r2, r3, #4
 8009830:	6032      	str	r2, [r6, #0]
 8009832:	681e      	ldr	r6, [r3, #0]
 8009834:	6862      	ldr	r2, [r4, #4]
 8009836:	2100      	movs	r1, #0
 8009838:	4630      	mov	r0, r6
 800983a:	f7f6 fd51 	bl	80002e0 <memchr>
 800983e:	b108      	cbz	r0, 8009844 <_printf_i+0x1e4>
 8009840:	1b80      	subs	r0, r0, r6
 8009842:	6060      	str	r0, [r4, #4]
 8009844:	6863      	ldr	r3, [r4, #4]
 8009846:	6123      	str	r3, [r4, #16]
 8009848:	2300      	movs	r3, #0
 800984a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800984e:	e7aa      	b.n	80097a6 <_printf_i+0x146>
 8009850:	6923      	ldr	r3, [r4, #16]
 8009852:	4632      	mov	r2, r6
 8009854:	4649      	mov	r1, r9
 8009856:	4640      	mov	r0, r8
 8009858:	47d0      	blx	sl
 800985a:	3001      	adds	r0, #1
 800985c:	d0ad      	beq.n	80097ba <_printf_i+0x15a>
 800985e:	6823      	ldr	r3, [r4, #0]
 8009860:	079b      	lsls	r3, r3, #30
 8009862:	d413      	bmi.n	800988c <_printf_i+0x22c>
 8009864:	68e0      	ldr	r0, [r4, #12]
 8009866:	9b03      	ldr	r3, [sp, #12]
 8009868:	4298      	cmp	r0, r3
 800986a:	bfb8      	it	lt
 800986c:	4618      	movlt	r0, r3
 800986e:	e7a6      	b.n	80097be <_printf_i+0x15e>
 8009870:	2301      	movs	r3, #1
 8009872:	4632      	mov	r2, r6
 8009874:	4649      	mov	r1, r9
 8009876:	4640      	mov	r0, r8
 8009878:	47d0      	blx	sl
 800987a:	3001      	adds	r0, #1
 800987c:	d09d      	beq.n	80097ba <_printf_i+0x15a>
 800987e:	3501      	adds	r5, #1
 8009880:	68e3      	ldr	r3, [r4, #12]
 8009882:	9903      	ldr	r1, [sp, #12]
 8009884:	1a5b      	subs	r3, r3, r1
 8009886:	42ab      	cmp	r3, r5
 8009888:	dcf2      	bgt.n	8009870 <_printf_i+0x210>
 800988a:	e7eb      	b.n	8009864 <_printf_i+0x204>
 800988c:	2500      	movs	r5, #0
 800988e:	f104 0619 	add.w	r6, r4, #25
 8009892:	e7f5      	b.n	8009880 <_printf_i+0x220>
 8009894:	0800baa2 	.word	0x0800baa2
 8009898:	0800bab3 	.word	0x0800bab3

0800989c <std>:
 800989c:	2300      	movs	r3, #0
 800989e:	b510      	push	{r4, lr}
 80098a0:	4604      	mov	r4, r0
 80098a2:	e9c0 3300 	strd	r3, r3, [r0]
 80098a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80098aa:	6083      	str	r3, [r0, #8]
 80098ac:	8181      	strh	r1, [r0, #12]
 80098ae:	6643      	str	r3, [r0, #100]	@ 0x64
 80098b0:	81c2      	strh	r2, [r0, #14]
 80098b2:	6183      	str	r3, [r0, #24]
 80098b4:	4619      	mov	r1, r3
 80098b6:	2208      	movs	r2, #8
 80098b8:	305c      	adds	r0, #92	@ 0x5c
 80098ba:	f000 f9f9 	bl	8009cb0 <memset>
 80098be:	4b0d      	ldr	r3, [pc, #52]	@ (80098f4 <std+0x58>)
 80098c0:	6263      	str	r3, [r4, #36]	@ 0x24
 80098c2:	4b0d      	ldr	r3, [pc, #52]	@ (80098f8 <std+0x5c>)
 80098c4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80098c6:	4b0d      	ldr	r3, [pc, #52]	@ (80098fc <std+0x60>)
 80098c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80098ca:	4b0d      	ldr	r3, [pc, #52]	@ (8009900 <std+0x64>)
 80098cc:	6323      	str	r3, [r4, #48]	@ 0x30
 80098ce:	4b0d      	ldr	r3, [pc, #52]	@ (8009904 <std+0x68>)
 80098d0:	6224      	str	r4, [r4, #32]
 80098d2:	429c      	cmp	r4, r3
 80098d4:	d006      	beq.n	80098e4 <std+0x48>
 80098d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80098da:	4294      	cmp	r4, r2
 80098dc:	d002      	beq.n	80098e4 <std+0x48>
 80098de:	33d0      	adds	r3, #208	@ 0xd0
 80098e0:	429c      	cmp	r4, r3
 80098e2:	d105      	bne.n	80098f0 <std+0x54>
 80098e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80098e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098ec:	f000 ba5c 	b.w	8009da8 <__retarget_lock_init_recursive>
 80098f0:	bd10      	pop	{r4, pc}
 80098f2:	bf00      	nop
 80098f4:	08009b01 	.word	0x08009b01
 80098f8:	08009b23 	.word	0x08009b23
 80098fc:	08009b5b 	.word	0x08009b5b
 8009900:	08009b7f 	.word	0x08009b7f
 8009904:	24000354 	.word	0x24000354

08009908 <stdio_exit_handler>:
 8009908:	4a02      	ldr	r2, [pc, #8]	@ (8009914 <stdio_exit_handler+0xc>)
 800990a:	4903      	ldr	r1, [pc, #12]	@ (8009918 <stdio_exit_handler+0x10>)
 800990c:	4803      	ldr	r0, [pc, #12]	@ (800991c <stdio_exit_handler+0x14>)
 800990e:	f000 b869 	b.w	80099e4 <_fwalk_sglue>
 8009912:	bf00      	nop
 8009914:	24000010 	.word	0x24000010
 8009918:	0800b5fd 	.word	0x0800b5fd
 800991c:	24000020 	.word	0x24000020

08009920 <cleanup_stdio>:
 8009920:	6841      	ldr	r1, [r0, #4]
 8009922:	4b0c      	ldr	r3, [pc, #48]	@ (8009954 <cleanup_stdio+0x34>)
 8009924:	4299      	cmp	r1, r3
 8009926:	b510      	push	{r4, lr}
 8009928:	4604      	mov	r4, r0
 800992a:	d001      	beq.n	8009930 <cleanup_stdio+0x10>
 800992c:	f001 fe66 	bl	800b5fc <_fflush_r>
 8009930:	68a1      	ldr	r1, [r4, #8]
 8009932:	4b09      	ldr	r3, [pc, #36]	@ (8009958 <cleanup_stdio+0x38>)
 8009934:	4299      	cmp	r1, r3
 8009936:	d002      	beq.n	800993e <cleanup_stdio+0x1e>
 8009938:	4620      	mov	r0, r4
 800993a:	f001 fe5f 	bl	800b5fc <_fflush_r>
 800993e:	68e1      	ldr	r1, [r4, #12]
 8009940:	4b06      	ldr	r3, [pc, #24]	@ (800995c <cleanup_stdio+0x3c>)
 8009942:	4299      	cmp	r1, r3
 8009944:	d004      	beq.n	8009950 <cleanup_stdio+0x30>
 8009946:	4620      	mov	r0, r4
 8009948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800994c:	f001 be56 	b.w	800b5fc <_fflush_r>
 8009950:	bd10      	pop	{r4, pc}
 8009952:	bf00      	nop
 8009954:	24000354 	.word	0x24000354
 8009958:	240003bc 	.word	0x240003bc
 800995c:	24000424 	.word	0x24000424

08009960 <global_stdio_init.part.0>:
 8009960:	b510      	push	{r4, lr}
 8009962:	4b0b      	ldr	r3, [pc, #44]	@ (8009990 <global_stdio_init.part.0+0x30>)
 8009964:	4c0b      	ldr	r4, [pc, #44]	@ (8009994 <global_stdio_init.part.0+0x34>)
 8009966:	4a0c      	ldr	r2, [pc, #48]	@ (8009998 <global_stdio_init.part.0+0x38>)
 8009968:	601a      	str	r2, [r3, #0]
 800996a:	4620      	mov	r0, r4
 800996c:	2200      	movs	r2, #0
 800996e:	2104      	movs	r1, #4
 8009970:	f7ff ff94 	bl	800989c <std>
 8009974:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009978:	2201      	movs	r2, #1
 800997a:	2109      	movs	r1, #9
 800997c:	f7ff ff8e 	bl	800989c <std>
 8009980:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009984:	2202      	movs	r2, #2
 8009986:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800998a:	2112      	movs	r1, #18
 800998c:	f7ff bf86 	b.w	800989c <std>
 8009990:	2400048c 	.word	0x2400048c
 8009994:	24000354 	.word	0x24000354
 8009998:	08009909 	.word	0x08009909

0800999c <__sfp_lock_acquire>:
 800999c:	4801      	ldr	r0, [pc, #4]	@ (80099a4 <__sfp_lock_acquire+0x8>)
 800999e:	f000 ba04 	b.w	8009daa <__retarget_lock_acquire_recursive>
 80099a2:	bf00      	nop
 80099a4:	24000495 	.word	0x24000495

080099a8 <__sfp_lock_release>:
 80099a8:	4801      	ldr	r0, [pc, #4]	@ (80099b0 <__sfp_lock_release+0x8>)
 80099aa:	f000 b9ff 	b.w	8009dac <__retarget_lock_release_recursive>
 80099ae:	bf00      	nop
 80099b0:	24000495 	.word	0x24000495

080099b4 <__sinit>:
 80099b4:	b510      	push	{r4, lr}
 80099b6:	4604      	mov	r4, r0
 80099b8:	f7ff fff0 	bl	800999c <__sfp_lock_acquire>
 80099bc:	6a23      	ldr	r3, [r4, #32]
 80099be:	b11b      	cbz	r3, 80099c8 <__sinit+0x14>
 80099c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099c4:	f7ff bff0 	b.w	80099a8 <__sfp_lock_release>
 80099c8:	4b04      	ldr	r3, [pc, #16]	@ (80099dc <__sinit+0x28>)
 80099ca:	6223      	str	r3, [r4, #32]
 80099cc:	4b04      	ldr	r3, [pc, #16]	@ (80099e0 <__sinit+0x2c>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d1f5      	bne.n	80099c0 <__sinit+0xc>
 80099d4:	f7ff ffc4 	bl	8009960 <global_stdio_init.part.0>
 80099d8:	e7f2      	b.n	80099c0 <__sinit+0xc>
 80099da:	bf00      	nop
 80099dc:	08009921 	.word	0x08009921
 80099e0:	2400048c 	.word	0x2400048c

080099e4 <_fwalk_sglue>:
 80099e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099e8:	4607      	mov	r7, r0
 80099ea:	4688      	mov	r8, r1
 80099ec:	4614      	mov	r4, r2
 80099ee:	2600      	movs	r6, #0
 80099f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80099f4:	f1b9 0901 	subs.w	r9, r9, #1
 80099f8:	d505      	bpl.n	8009a06 <_fwalk_sglue+0x22>
 80099fa:	6824      	ldr	r4, [r4, #0]
 80099fc:	2c00      	cmp	r4, #0
 80099fe:	d1f7      	bne.n	80099f0 <_fwalk_sglue+0xc>
 8009a00:	4630      	mov	r0, r6
 8009a02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a06:	89ab      	ldrh	r3, [r5, #12]
 8009a08:	2b01      	cmp	r3, #1
 8009a0a:	d907      	bls.n	8009a1c <_fwalk_sglue+0x38>
 8009a0c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009a10:	3301      	adds	r3, #1
 8009a12:	d003      	beq.n	8009a1c <_fwalk_sglue+0x38>
 8009a14:	4629      	mov	r1, r5
 8009a16:	4638      	mov	r0, r7
 8009a18:	47c0      	blx	r8
 8009a1a:	4306      	orrs	r6, r0
 8009a1c:	3568      	adds	r5, #104	@ 0x68
 8009a1e:	e7e9      	b.n	80099f4 <_fwalk_sglue+0x10>

08009a20 <iprintf>:
 8009a20:	b40f      	push	{r0, r1, r2, r3}
 8009a22:	b507      	push	{r0, r1, r2, lr}
 8009a24:	4906      	ldr	r1, [pc, #24]	@ (8009a40 <iprintf+0x20>)
 8009a26:	ab04      	add	r3, sp, #16
 8009a28:	6808      	ldr	r0, [r1, #0]
 8009a2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a2e:	6881      	ldr	r1, [r0, #8]
 8009a30:	9301      	str	r3, [sp, #4]
 8009a32:	f001 fc47 	bl	800b2c4 <_vfiprintf_r>
 8009a36:	b003      	add	sp, #12
 8009a38:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a3c:	b004      	add	sp, #16
 8009a3e:	4770      	bx	lr
 8009a40:	2400001c 	.word	0x2400001c

08009a44 <_puts_r>:
 8009a44:	6a03      	ldr	r3, [r0, #32]
 8009a46:	b570      	push	{r4, r5, r6, lr}
 8009a48:	6884      	ldr	r4, [r0, #8]
 8009a4a:	4605      	mov	r5, r0
 8009a4c:	460e      	mov	r6, r1
 8009a4e:	b90b      	cbnz	r3, 8009a54 <_puts_r+0x10>
 8009a50:	f7ff ffb0 	bl	80099b4 <__sinit>
 8009a54:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009a56:	07db      	lsls	r3, r3, #31
 8009a58:	d405      	bmi.n	8009a66 <_puts_r+0x22>
 8009a5a:	89a3      	ldrh	r3, [r4, #12]
 8009a5c:	0598      	lsls	r0, r3, #22
 8009a5e:	d402      	bmi.n	8009a66 <_puts_r+0x22>
 8009a60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009a62:	f000 f9a2 	bl	8009daa <__retarget_lock_acquire_recursive>
 8009a66:	89a3      	ldrh	r3, [r4, #12]
 8009a68:	0719      	lsls	r1, r3, #28
 8009a6a:	d502      	bpl.n	8009a72 <_puts_r+0x2e>
 8009a6c:	6923      	ldr	r3, [r4, #16]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d135      	bne.n	8009ade <_puts_r+0x9a>
 8009a72:	4621      	mov	r1, r4
 8009a74:	4628      	mov	r0, r5
 8009a76:	f000 f8c5 	bl	8009c04 <__swsetup_r>
 8009a7a:	b380      	cbz	r0, 8009ade <_puts_r+0x9a>
 8009a7c:	f04f 35ff 	mov.w	r5, #4294967295
 8009a80:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009a82:	07da      	lsls	r2, r3, #31
 8009a84:	d405      	bmi.n	8009a92 <_puts_r+0x4e>
 8009a86:	89a3      	ldrh	r3, [r4, #12]
 8009a88:	059b      	lsls	r3, r3, #22
 8009a8a:	d402      	bmi.n	8009a92 <_puts_r+0x4e>
 8009a8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009a8e:	f000 f98d 	bl	8009dac <__retarget_lock_release_recursive>
 8009a92:	4628      	mov	r0, r5
 8009a94:	bd70      	pop	{r4, r5, r6, pc}
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	da04      	bge.n	8009aa4 <_puts_r+0x60>
 8009a9a:	69a2      	ldr	r2, [r4, #24]
 8009a9c:	429a      	cmp	r2, r3
 8009a9e:	dc17      	bgt.n	8009ad0 <_puts_r+0x8c>
 8009aa0:	290a      	cmp	r1, #10
 8009aa2:	d015      	beq.n	8009ad0 <_puts_r+0x8c>
 8009aa4:	6823      	ldr	r3, [r4, #0]
 8009aa6:	1c5a      	adds	r2, r3, #1
 8009aa8:	6022      	str	r2, [r4, #0]
 8009aaa:	7019      	strb	r1, [r3, #0]
 8009aac:	68a3      	ldr	r3, [r4, #8]
 8009aae:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009ab2:	3b01      	subs	r3, #1
 8009ab4:	60a3      	str	r3, [r4, #8]
 8009ab6:	2900      	cmp	r1, #0
 8009ab8:	d1ed      	bne.n	8009a96 <_puts_r+0x52>
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	da11      	bge.n	8009ae2 <_puts_r+0x9e>
 8009abe:	4622      	mov	r2, r4
 8009ac0:	210a      	movs	r1, #10
 8009ac2:	4628      	mov	r0, r5
 8009ac4:	f000 f85f 	bl	8009b86 <__swbuf_r>
 8009ac8:	3001      	adds	r0, #1
 8009aca:	d0d7      	beq.n	8009a7c <_puts_r+0x38>
 8009acc:	250a      	movs	r5, #10
 8009ace:	e7d7      	b.n	8009a80 <_puts_r+0x3c>
 8009ad0:	4622      	mov	r2, r4
 8009ad2:	4628      	mov	r0, r5
 8009ad4:	f000 f857 	bl	8009b86 <__swbuf_r>
 8009ad8:	3001      	adds	r0, #1
 8009ada:	d1e7      	bne.n	8009aac <_puts_r+0x68>
 8009adc:	e7ce      	b.n	8009a7c <_puts_r+0x38>
 8009ade:	3e01      	subs	r6, #1
 8009ae0:	e7e4      	b.n	8009aac <_puts_r+0x68>
 8009ae2:	6823      	ldr	r3, [r4, #0]
 8009ae4:	1c5a      	adds	r2, r3, #1
 8009ae6:	6022      	str	r2, [r4, #0]
 8009ae8:	220a      	movs	r2, #10
 8009aea:	701a      	strb	r2, [r3, #0]
 8009aec:	e7ee      	b.n	8009acc <_puts_r+0x88>
	...

08009af0 <puts>:
 8009af0:	4b02      	ldr	r3, [pc, #8]	@ (8009afc <puts+0xc>)
 8009af2:	4601      	mov	r1, r0
 8009af4:	6818      	ldr	r0, [r3, #0]
 8009af6:	f7ff bfa5 	b.w	8009a44 <_puts_r>
 8009afa:	bf00      	nop
 8009afc:	2400001c 	.word	0x2400001c

08009b00 <__sread>:
 8009b00:	b510      	push	{r4, lr}
 8009b02:	460c      	mov	r4, r1
 8009b04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b08:	f000 f900 	bl	8009d0c <_read_r>
 8009b0c:	2800      	cmp	r0, #0
 8009b0e:	bfab      	itete	ge
 8009b10:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009b12:	89a3      	ldrhlt	r3, [r4, #12]
 8009b14:	181b      	addge	r3, r3, r0
 8009b16:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009b1a:	bfac      	ite	ge
 8009b1c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009b1e:	81a3      	strhlt	r3, [r4, #12]
 8009b20:	bd10      	pop	{r4, pc}

08009b22 <__swrite>:
 8009b22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b26:	461f      	mov	r7, r3
 8009b28:	898b      	ldrh	r3, [r1, #12]
 8009b2a:	05db      	lsls	r3, r3, #23
 8009b2c:	4605      	mov	r5, r0
 8009b2e:	460c      	mov	r4, r1
 8009b30:	4616      	mov	r6, r2
 8009b32:	d505      	bpl.n	8009b40 <__swrite+0x1e>
 8009b34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b38:	2302      	movs	r3, #2
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	f000 f8d4 	bl	8009ce8 <_lseek_r>
 8009b40:	89a3      	ldrh	r3, [r4, #12]
 8009b42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b46:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009b4a:	81a3      	strh	r3, [r4, #12]
 8009b4c:	4632      	mov	r2, r6
 8009b4e:	463b      	mov	r3, r7
 8009b50:	4628      	mov	r0, r5
 8009b52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b56:	f000 b8eb 	b.w	8009d30 <_write_r>

08009b5a <__sseek>:
 8009b5a:	b510      	push	{r4, lr}
 8009b5c:	460c      	mov	r4, r1
 8009b5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b62:	f000 f8c1 	bl	8009ce8 <_lseek_r>
 8009b66:	1c43      	adds	r3, r0, #1
 8009b68:	89a3      	ldrh	r3, [r4, #12]
 8009b6a:	bf15      	itete	ne
 8009b6c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009b6e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009b72:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009b76:	81a3      	strheq	r3, [r4, #12]
 8009b78:	bf18      	it	ne
 8009b7a:	81a3      	strhne	r3, [r4, #12]
 8009b7c:	bd10      	pop	{r4, pc}

08009b7e <__sclose>:
 8009b7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b82:	f000 b8a1 	b.w	8009cc8 <_close_r>

08009b86 <__swbuf_r>:
 8009b86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b88:	460e      	mov	r6, r1
 8009b8a:	4614      	mov	r4, r2
 8009b8c:	4605      	mov	r5, r0
 8009b8e:	b118      	cbz	r0, 8009b98 <__swbuf_r+0x12>
 8009b90:	6a03      	ldr	r3, [r0, #32]
 8009b92:	b90b      	cbnz	r3, 8009b98 <__swbuf_r+0x12>
 8009b94:	f7ff ff0e 	bl	80099b4 <__sinit>
 8009b98:	69a3      	ldr	r3, [r4, #24]
 8009b9a:	60a3      	str	r3, [r4, #8]
 8009b9c:	89a3      	ldrh	r3, [r4, #12]
 8009b9e:	071a      	lsls	r2, r3, #28
 8009ba0:	d501      	bpl.n	8009ba6 <__swbuf_r+0x20>
 8009ba2:	6923      	ldr	r3, [r4, #16]
 8009ba4:	b943      	cbnz	r3, 8009bb8 <__swbuf_r+0x32>
 8009ba6:	4621      	mov	r1, r4
 8009ba8:	4628      	mov	r0, r5
 8009baa:	f000 f82b 	bl	8009c04 <__swsetup_r>
 8009bae:	b118      	cbz	r0, 8009bb8 <__swbuf_r+0x32>
 8009bb0:	f04f 37ff 	mov.w	r7, #4294967295
 8009bb4:	4638      	mov	r0, r7
 8009bb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bb8:	6823      	ldr	r3, [r4, #0]
 8009bba:	6922      	ldr	r2, [r4, #16]
 8009bbc:	1a98      	subs	r0, r3, r2
 8009bbe:	6963      	ldr	r3, [r4, #20]
 8009bc0:	b2f6      	uxtb	r6, r6
 8009bc2:	4283      	cmp	r3, r0
 8009bc4:	4637      	mov	r7, r6
 8009bc6:	dc05      	bgt.n	8009bd4 <__swbuf_r+0x4e>
 8009bc8:	4621      	mov	r1, r4
 8009bca:	4628      	mov	r0, r5
 8009bcc:	f001 fd16 	bl	800b5fc <_fflush_r>
 8009bd0:	2800      	cmp	r0, #0
 8009bd2:	d1ed      	bne.n	8009bb0 <__swbuf_r+0x2a>
 8009bd4:	68a3      	ldr	r3, [r4, #8]
 8009bd6:	3b01      	subs	r3, #1
 8009bd8:	60a3      	str	r3, [r4, #8]
 8009bda:	6823      	ldr	r3, [r4, #0]
 8009bdc:	1c5a      	adds	r2, r3, #1
 8009bde:	6022      	str	r2, [r4, #0]
 8009be0:	701e      	strb	r6, [r3, #0]
 8009be2:	6962      	ldr	r2, [r4, #20]
 8009be4:	1c43      	adds	r3, r0, #1
 8009be6:	429a      	cmp	r2, r3
 8009be8:	d004      	beq.n	8009bf4 <__swbuf_r+0x6e>
 8009bea:	89a3      	ldrh	r3, [r4, #12]
 8009bec:	07db      	lsls	r3, r3, #31
 8009bee:	d5e1      	bpl.n	8009bb4 <__swbuf_r+0x2e>
 8009bf0:	2e0a      	cmp	r6, #10
 8009bf2:	d1df      	bne.n	8009bb4 <__swbuf_r+0x2e>
 8009bf4:	4621      	mov	r1, r4
 8009bf6:	4628      	mov	r0, r5
 8009bf8:	f001 fd00 	bl	800b5fc <_fflush_r>
 8009bfc:	2800      	cmp	r0, #0
 8009bfe:	d0d9      	beq.n	8009bb4 <__swbuf_r+0x2e>
 8009c00:	e7d6      	b.n	8009bb0 <__swbuf_r+0x2a>
	...

08009c04 <__swsetup_r>:
 8009c04:	b538      	push	{r3, r4, r5, lr}
 8009c06:	4b29      	ldr	r3, [pc, #164]	@ (8009cac <__swsetup_r+0xa8>)
 8009c08:	4605      	mov	r5, r0
 8009c0a:	6818      	ldr	r0, [r3, #0]
 8009c0c:	460c      	mov	r4, r1
 8009c0e:	b118      	cbz	r0, 8009c18 <__swsetup_r+0x14>
 8009c10:	6a03      	ldr	r3, [r0, #32]
 8009c12:	b90b      	cbnz	r3, 8009c18 <__swsetup_r+0x14>
 8009c14:	f7ff fece 	bl	80099b4 <__sinit>
 8009c18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c1c:	0719      	lsls	r1, r3, #28
 8009c1e:	d422      	bmi.n	8009c66 <__swsetup_r+0x62>
 8009c20:	06da      	lsls	r2, r3, #27
 8009c22:	d407      	bmi.n	8009c34 <__swsetup_r+0x30>
 8009c24:	2209      	movs	r2, #9
 8009c26:	602a      	str	r2, [r5, #0]
 8009c28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c2c:	81a3      	strh	r3, [r4, #12]
 8009c2e:	f04f 30ff 	mov.w	r0, #4294967295
 8009c32:	e033      	b.n	8009c9c <__swsetup_r+0x98>
 8009c34:	0758      	lsls	r0, r3, #29
 8009c36:	d512      	bpl.n	8009c5e <__swsetup_r+0x5a>
 8009c38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009c3a:	b141      	cbz	r1, 8009c4e <__swsetup_r+0x4a>
 8009c3c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009c40:	4299      	cmp	r1, r3
 8009c42:	d002      	beq.n	8009c4a <__swsetup_r+0x46>
 8009c44:	4628      	mov	r0, r5
 8009c46:	f000 fe99 	bl	800a97c <_free_r>
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	6363      	str	r3, [r4, #52]	@ 0x34
 8009c4e:	89a3      	ldrh	r3, [r4, #12]
 8009c50:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009c54:	81a3      	strh	r3, [r4, #12]
 8009c56:	2300      	movs	r3, #0
 8009c58:	6063      	str	r3, [r4, #4]
 8009c5a:	6923      	ldr	r3, [r4, #16]
 8009c5c:	6023      	str	r3, [r4, #0]
 8009c5e:	89a3      	ldrh	r3, [r4, #12]
 8009c60:	f043 0308 	orr.w	r3, r3, #8
 8009c64:	81a3      	strh	r3, [r4, #12]
 8009c66:	6923      	ldr	r3, [r4, #16]
 8009c68:	b94b      	cbnz	r3, 8009c7e <__swsetup_r+0x7a>
 8009c6a:	89a3      	ldrh	r3, [r4, #12]
 8009c6c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009c70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c74:	d003      	beq.n	8009c7e <__swsetup_r+0x7a>
 8009c76:	4621      	mov	r1, r4
 8009c78:	4628      	mov	r0, r5
 8009c7a:	f001 fd0d 	bl	800b698 <__smakebuf_r>
 8009c7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c82:	f013 0201 	ands.w	r2, r3, #1
 8009c86:	d00a      	beq.n	8009c9e <__swsetup_r+0x9a>
 8009c88:	2200      	movs	r2, #0
 8009c8a:	60a2      	str	r2, [r4, #8]
 8009c8c:	6962      	ldr	r2, [r4, #20]
 8009c8e:	4252      	negs	r2, r2
 8009c90:	61a2      	str	r2, [r4, #24]
 8009c92:	6922      	ldr	r2, [r4, #16]
 8009c94:	b942      	cbnz	r2, 8009ca8 <__swsetup_r+0xa4>
 8009c96:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009c9a:	d1c5      	bne.n	8009c28 <__swsetup_r+0x24>
 8009c9c:	bd38      	pop	{r3, r4, r5, pc}
 8009c9e:	0799      	lsls	r1, r3, #30
 8009ca0:	bf58      	it	pl
 8009ca2:	6962      	ldrpl	r2, [r4, #20]
 8009ca4:	60a2      	str	r2, [r4, #8]
 8009ca6:	e7f4      	b.n	8009c92 <__swsetup_r+0x8e>
 8009ca8:	2000      	movs	r0, #0
 8009caa:	e7f7      	b.n	8009c9c <__swsetup_r+0x98>
 8009cac:	2400001c 	.word	0x2400001c

08009cb0 <memset>:
 8009cb0:	4402      	add	r2, r0
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	4293      	cmp	r3, r2
 8009cb6:	d100      	bne.n	8009cba <memset+0xa>
 8009cb8:	4770      	bx	lr
 8009cba:	f803 1b01 	strb.w	r1, [r3], #1
 8009cbe:	e7f9      	b.n	8009cb4 <memset+0x4>

08009cc0 <_localeconv_r>:
 8009cc0:	4800      	ldr	r0, [pc, #0]	@ (8009cc4 <_localeconv_r+0x4>)
 8009cc2:	4770      	bx	lr
 8009cc4:	2400015c 	.word	0x2400015c

08009cc8 <_close_r>:
 8009cc8:	b538      	push	{r3, r4, r5, lr}
 8009cca:	4d06      	ldr	r5, [pc, #24]	@ (8009ce4 <_close_r+0x1c>)
 8009ccc:	2300      	movs	r3, #0
 8009cce:	4604      	mov	r4, r0
 8009cd0:	4608      	mov	r0, r1
 8009cd2:	602b      	str	r3, [r5, #0]
 8009cd4:	f7f6 ff8c 	bl	8000bf0 <_close>
 8009cd8:	1c43      	adds	r3, r0, #1
 8009cda:	d102      	bne.n	8009ce2 <_close_r+0x1a>
 8009cdc:	682b      	ldr	r3, [r5, #0]
 8009cde:	b103      	cbz	r3, 8009ce2 <_close_r+0x1a>
 8009ce0:	6023      	str	r3, [r4, #0]
 8009ce2:	bd38      	pop	{r3, r4, r5, pc}
 8009ce4:	24000490 	.word	0x24000490

08009ce8 <_lseek_r>:
 8009ce8:	b538      	push	{r3, r4, r5, lr}
 8009cea:	4d07      	ldr	r5, [pc, #28]	@ (8009d08 <_lseek_r+0x20>)
 8009cec:	4604      	mov	r4, r0
 8009cee:	4608      	mov	r0, r1
 8009cf0:	4611      	mov	r1, r2
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	602a      	str	r2, [r5, #0]
 8009cf6:	461a      	mov	r2, r3
 8009cf8:	f7f6 ffa1 	bl	8000c3e <_lseek>
 8009cfc:	1c43      	adds	r3, r0, #1
 8009cfe:	d102      	bne.n	8009d06 <_lseek_r+0x1e>
 8009d00:	682b      	ldr	r3, [r5, #0]
 8009d02:	b103      	cbz	r3, 8009d06 <_lseek_r+0x1e>
 8009d04:	6023      	str	r3, [r4, #0]
 8009d06:	bd38      	pop	{r3, r4, r5, pc}
 8009d08:	24000490 	.word	0x24000490

08009d0c <_read_r>:
 8009d0c:	b538      	push	{r3, r4, r5, lr}
 8009d0e:	4d07      	ldr	r5, [pc, #28]	@ (8009d2c <_read_r+0x20>)
 8009d10:	4604      	mov	r4, r0
 8009d12:	4608      	mov	r0, r1
 8009d14:	4611      	mov	r1, r2
 8009d16:	2200      	movs	r2, #0
 8009d18:	602a      	str	r2, [r5, #0]
 8009d1a:	461a      	mov	r2, r3
 8009d1c:	f7f6 ff2f 	bl	8000b7e <_read>
 8009d20:	1c43      	adds	r3, r0, #1
 8009d22:	d102      	bne.n	8009d2a <_read_r+0x1e>
 8009d24:	682b      	ldr	r3, [r5, #0]
 8009d26:	b103      	cbz	r3, 8009d2a <_read_r+0x1e>
 8009d28:	6023      	str	r3, [r4, #0]
 8009d2a:	bd38      	pop	{r3, r4, r5, pc}
 8009d2c:	24000490 	.word	0x24000490

08009d30 <_write_r>:
 8009d30:	b538      	push	{r3, r4, r5, lr}
 8009d32:	4d07      	ldr	r5, [pc, #28]	@ (8009d50 <_write_r+0x20>)
 8009d34:	4604      	mov	r4, r0
 8009d36:	4608      	mov	r0, r1
 8009d38:	4611      	mov	r1, r2
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	602a      	str	r2, [r5, #0]
 8009d3e:	461a      	mov	r2, r3
 8009d40:	f7f6 ff3a 	bl	8000bb8 <_write>
 8009d44:	1c43      	adds	r3, r0, #1
 8009d46:	d102      	bne.n	8009d4e <_write_r+0x1e>
 8009d48:	682b      	ldr	r3, [r5, #0]
 8009d4a:	b103      	cbz	r3, 8009d4e <_write_r+0x1e>
 8009d4c:	6023      	str	r3, [r4, #0]
 8009d4e:	bd38      	pop	{r3, r4, r5, pc}
 8009d50:	24000490 	.word	0x24000490

08009d54 <__errno>:
 8009d54:	4b01      	ldr	r3, [pc, #4]	@ (8009d5c <__errno+0x8>)
 8009d56:	6818      	ldr	r0, [r3, #0]
 8009d58:	4770      	bx	lr
 8009d5a:	bf00      	nop
 8009d5c:	2400001c 	.word	0x2400001c

08009d60 <__libc_init_array>:
 8009d60:	b570      	push	{r4, r5, r6, lr}
 8009d62:	4d0d      	ldr	r5, [pc, #52]	@ (8009d98 <__libc_init_array+0x38>)
 8009d64:	4c0d      	ldr	r4, [pc, #52]	@ (8009d9c <__libc_init_array+0x3c>)
 8009d66:	1b64      	subs	r4, r4, r5
 8009d68:	10a4      	asrs	r4, r4, #2
 8009d6a:	2600      	movs	r6, #0
 8009d6c:	42a6      	cmp	r6, r4
 8009d6e:	d109      	bne.n	8009d84 <__libc_init_array+0x24>
 8009d70:	4d0b      	ldr	r5, [pc, #44]	@ (8009da0 <__libc_init_array+0x40>)
 8009d72:	4c0c      	ldr	r4, [pc, #48]	@ (8009da4 <__libc_init_array+0x44>)
 8009d74:	f001 fdbc 	bl	800b8f0 <_init>
 8009d78:	1b64      	subs	r4, r4, r5
 8009d7a:	10a4      	asrs	r4, r4, #2
 8009d7c:	2600      	movs	r6, #0
 8009d7e:	42a6      	cmp	r6, r4
 8009d80:	d105      	bne.n	8009d8e <__libc_init_array+0x2e>
 8009d82:	bd70      	pop	{r4, r5, r6, pc}
 8009d84:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d88:	4798      	blx	r3
 8009d8a:	3601      	adds	r6, #1
 8009d8c:	e7ee      	b.n	8009d6c <__libc_init_array+0xc>
 8009d8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d92:	4798      	blx	r3
 8009d94:	3601      	adds	r6, #1
 8009d96:	e7f2      	b.n	8009d7e <__libc_init_array+0x1e>
 8009d98:	0800be0c 	.word	0x0800be0c
 8009d9c:	0800be0c 	.word	0x0800be0c
 8009da0:	0800be0c 	.word	0x0800be0c
 8009da4:	0800be10 	.word	0x0800be10

08009da8 <__retarget_lock_init_recursive>:
 8009da8:	4770      	bx	lr

08009daa <__retarget_lock_acquire_recursive>:
 8009daa:	4770      	bx	lr

08009dac <__retarget_lock_release_recursive>:
 8009dac:	4770      	bx	lr

08009dae <quorem>:
 8009dae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009db2:	6903      	ldr	r3, [r0, #16]
 8009db4:	690c      	ldr	r4, [r1, #16]
 8009db6:	42a3      	cmp	r3, r4
 8009db8:	4607      	mov	r7, r0
 8009dba:	db7e      	blt.n	8009eba <quorem+0x10c>
 8009dbc:	3c01      	subs	r4, #1
 8009dbe:	f101 0814 	add.w	r8, r1, #20
 8009dc2:	00a3      	lsls	r3, r4, #2
 8009dc4:	f100 0514 	add.w	r5, r0, #20
 8009dc8:	9300      	str	r3, [sp, #0]
 8009dca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009dce:	9301      	str	r3, [sp, #4]
 8009dd0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009dd4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009dd8:	3301      	adds	r3, #1
 8009dda:	429a      	cmp	r2, r3
 8009ddc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009de0:	fbb2 f6f3 	udiv	r6, r2, r3
 8009de4:	d32e      	bcc.n	8009e44 <quorem+0x96>
 8009de6:	f04f 0a00 	mov.w	sl, #0
 8009dea:	46c4      	mov	ip, r8
 8009dec:	46ae      	mov	lr, r5
 8009dee:	46d3      	mov	fp, sl
 8009df0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009df4:	b298      	uxth	r0, r3
 8009df6:	fb06 a000 	mla	r0, r6, r0, sl
 8009dfa:	0c02      	lsrs	r2, r0, #16
 8009dfc:	0c1b      	lsrs	r3, r3, #16
 8009dfe:	fb06 2303 	mla	r3, r6, r3, r2
 8009e02:	f8de 2000 	ldr.w	r2, [lr]
 8009e06:	b280      	uxth	r0, r0
 8009e08:	b292      	uxth	r2, r2
 8009e0a:	1a12      	subs	r2, r2, r0
 8009e0c:	445a      	add	r2, fp
 8009e0e:	f8de 0000 	ldr.w	r0, [lr]
 8009e12:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009e16:	b29b      	uxth	r3, r3
 8009e18:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009e1c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009e20:	b292      	uxth	r2, r2
 8009e22:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009e26:	45e1      	cmp	r9, ip
 8009e28:	f84e 2b04 	str.w	r2, [lr], #4
 8009e2c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009e30:	d2de      	bcs.n	8009df0 <quorem+0x42>
 8009e32:	9b00      	ldr	r3, [sp, #0]
 8009e34:	58eb      	ldr	r3, [r5, r3]
 8009e36:	b92b      	cbnz	r3, 8009e44 <quorem+0x96>
 8009e38:	9b01      	ldr	r3, [sp, #4]
 8009e3a:	3b04      	subs	r3, #4
 8009e3c:	429d      	cmp	r5, r3
 8009e3e:	461a      	mov	r2, r3
 8009e40:	d32f      	bcc.n	8009ea2 <quorem+0xf4>
 8009e42:	613c      	str	r4, [r7, #16]
 8009e44:	4638      	mov	r0, r7
 8009e46:	f001 f90b 	bl	800b060 <__mcmp>
 8009e4a:	2800      	cmp	r0, #0
 8009e4c:	db25      	blt.n	8009e9a <quorem+0xec>
 8009e4e:	4629      	mov	r1, r5
 8009e50:	2000      	movs	r0, #0
 8009e52:	f858 2b04 	ldr.w	r2, [r8], #4
 8009e56:	f8d1 c000 	ldr.w	ip, [r1]
 8009e5a:	fa1f fe82 	uxth.w	lr, r2
 8009e5e:	fa1f f38c 	uxth.w	r3, ip
 8009e62:	eba3 030e 	sub.w	r3, r3, lr
 8009e66:	4403      	add	r3, r0
 8009e68:	0c12      	lsrs	r2, r2, #16
 8009e6a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009e6e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009e72:	b29b      	uxth	r3, r3
 8009e74:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e78:	45c1      	cmp	r9, r8
 8009e7a:	f841 3b04 	str.w	r3, [r1], #4
 8009e7e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009e82:	d2e6      	bcs.n	8009e52 <quorem+0xa4>
 8009e84:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009e88:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009e8c:	b922      	cbnz	r2, 8009e98 <quorem+0xea>
 8009e8e:	3b04      	subs	r3, #4
 8009e90:	429d      	cmp	r5, r3
 8009e92:	461a      	mov	r2, r3
 8009e94:	d30b      	bcc.n	8009eae <quorem+0x100>
 8009e96:	613c      	str	r4, [r7, #16]
 8009e98:	3601      	adds	r6, #1
 8009e9a:	4630      	mov	r0, r6
 8009e9c:	b003      	add	sp, #12
 8009e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ea2:	6812      	ldr	r2, [r2, #0]
 8009ea4:	3b04      	subs	r3, #4
 8009ea6:	2a00      	cmp	r2, #0
 8009ea8:	d1cb      	bne.n	8009e42 <quorem+0x94>
 8009eaa:	3c01      	subs	r4, #1
 8009eac:	e7c6      	b.n	8009e3c <quorem+0x8e>
 8009eae:	6812      	ldr	r2, [r2, #0]
 8009eb0:	3b04      	subs	r3, #4
 8009eb2:	2a00      	cmp	r2, #0
 8009eb4:	d1ef      	bne.n	8009e96 <quorem+0xe8>
 8009eb6:	3c01      	subs	r4, #1
 8009eb8:	e7ea      	b.n	8009e90 <quorem+0xe2>
 8009eba:	2000      	movs	r0, #0
 8009ebc:	e7ee      	b.n	8009e9c <quorem+0xee>
	...

08009ec0 <_dtoa_r>:
 8009ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ec4:	ed2d 8b02 	vpush	{d8}
 8009ec8:	69c7      	ldr	r7, [r0, #28]
 8009eca:	b091      	sub	sp, #68	@ 0x44
 8009ecc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009ed0:	ec55 4b10 	vmov	r4, r5, d0
 8009ed4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8009ed6:	9107      	str	r1, [sp, #28]
 8009ed8:	4681      	mov	r9, r0
 8009eda:	9209      	str	r2, [sp, #36]	@ 0x24
 8009edc:	930d      	str	r3, [sp, #52]	@ 0x34
 8009ede:	b97f      	cbnz	r7, 8009f00 <_dtoa_r+0x40>
 8009ee0:	2010      	movs	r0, #16
 8009ee2:	f000 fd95 	bl	800aa10 <malloc>
 8009ee6:	4602      	mov	r2, r0
 8009ee8:	f8c9 001c 	str.w	r0, [r9, #28]
 8009eec:	b920      	cbnz	r0, 8009ef8 <_dtoa_r+0x38>
 8009eee:	4ba0      	ldr	r3, [pc, #640]	@ (800a170 <_dtoa_r+0x2b0>)
 8009ef0:	21ef      	movs	r1, #239	@ 0xef
 8009ef2:	48a0      	ldr	r0, [pc, #640]	@ (800a174 <_dtoa_r+0x2b4>)
 8009ef4:	f001 fc4c 	bl	800b790 <__assert_func>
 8009ef8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009efc:	6007      	str	r7, [r0, #0]
 8009efe:	60c7      	str	r7, [r0, #12]
 8009f00:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009f04:	6819      	ldr	r1, [r3, #0]
 8009f06:	b159      	cbz	r1, 8009f20 <_dtoa_r+0x60>
 8009f08:	685a      	ldr	r2, [r3, #4]
 8009f0a:	604a      	str	r2, [r1, #4]
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	4093      	lsls	r3, r2
 8009f10:	608b      	str	r3, [r1, #8]
 8009f12:	4648      	mov	r0, r9
 8009f14:	f000 fe72 	bl	800abfc <_Bfree>
 8009f18:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	601a      	str	r2, [r3, #0]
 8009f20:	1e2b      	subs	r3, r5, #0
 8009f22:	bfbb      	ittet	lt
 8009f24:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009f28:	9303      	strlt	r3, [sp, #12]
 8009f2a:	2300      	movge	r3, #0
 8009f2c:	2201      	movlt	r2, #1
 8009f2e:	bfac      	ite	ge
 8009f30:	6033      	strge	r3, [r6, #0]
 8009f32:	6032      	strlt	r2, [r6, #0]
 8009f34:	4b90      	ldr	r3, [pc, #576]	@ (800a178 <_dtoa_r+0x2b8>)
 8009f36:	9e03      	ldr	r6, [sp, #12]
 8009f38:	43b3      	bics	r3, r6
 8009f3a:	d110      	bne.n	8009f5e <_dtoa_r+0x9e>
 8009f3c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009f3e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009f42:	6013      	str	r3, [r2, #0]
 8009f44:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8009f48:	4323      	orrs	r3, r4
 8009f4a:	f000 84e6 	beq.w	800a91a <_dtoa_r+0xa5a>
 8009f4e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009f50:	4f8a      	ldr	r7, [pc, #552]	@ (800a17c <_dtoa_r+0x2bc>)
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	f000 84e8 	beq.w	800a928 <_dtoa_r+0xa68>
 8009f58:	1cfb      	adds	r3, r7, #3
 8009f5a:	f000 bce3 	b.w	800a924 <_dtoa_r+0xa64>
 8009f5e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8009f62:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f6a:	d10a      	bne.n	8009f82 <_dtoa_r+0xc2>
 8009f6c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009f6e:	2301      	movs	r3, #1
 8009f70:	6013      	str	r3, [r2, #0]
 8009f72:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009f74:	b113      	cbz	r3, 8009f7c <_dtoa_r+0xbc>
 8009f76:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8009f78:	4b81      	ldr	r3, [pc, #516]	@ (800a180 <_dtoa_r+0x2c0>)
 8009f7a:	6013      	str	r3, [r2, #0]
 8009f7c:	4f81      	ldr	r7, [pc, #516]	@ (800a184 <_dtoa_r+0x2c4>)
 8009f7e:	f000 bcd3 	b.w	800a928 <_dtoa_r+0xa68>
 8009f82:	aa0e      	add	r2, sp, #56	@ 0x38
 8009f84:	a90f      	add	r1, sp, #60	@ 0x3c
 8009f86:	4648      	mov	r0, r9
 8009f88:	eeb0 0b48 	vmov.f64	d0, d8
 8009f8c:	f001 f918 	bl	800b1c0 <__d2b>
 8009f90:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8009f94:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009f96:	9001      	str	r0, [sp, #4]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d045      	beq.n	800a028 <_dtoa_r+0x168>
 8009f9c:	eeb0 7b48 	vmov.f64	d7, d8
 8009fa0:	ee18 1a90 	vmov	r1, s17
 8009fa4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009fa8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8009fac:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8009fb0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8009fb4:	2500      	movs	r5, #0
 8009fb6:	ee07 1a90 	vmov	s15, r1
 8009fba:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8009fbe:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800a158 <_dtoa_r+0x298>
 8009fc2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009fc6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800a160 <_dtoa_r+0x2a0>
 8009fca:	eea7 6b05 	vfma.f64	d6, d7, d5
 8009fce:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800a168 <_dtoa_r+0x2a8>
 8009fd2:	ee07 3a90 	vmov	s15, r3
 8009fd6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8009fda:	eeb0 7b46 	vmov.f64	d7, d6
 8009fde:	eea4 7b05 	vfma.f64	d7, d4, d5
 8009fe2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8009fe6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8009fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fee:	ee16 8a90 	vmov	r8, s13
 8009ff2:	d508      	bpl.n	800a006 <_dtoa_r+0x146>
 8009ff4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8009ff8:	eeb4 6b47 	vcmp.f64	d6, d7
 8009ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a000:	bf18      	it	ne
 800a002:	f108 38ff 	addne.w	r8, r8, #4294967295
 800a006:	f1b8 0f16 	cmp.w	r8, #22
 800a00a:	d82b      	bhi.n	800a064 <_dtoa_r+0x1a4>
 800a00c:	495e      	ldr	r1, [pc, #376]	@ (800a188 <_dtoa_r+0x2c8>)
 800a00e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800a012:	ed91 7b00 	vldr	d7, [r1]
 800a016:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800a01a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a01e:	d501      	bpl.n	800a024 <_dtoa_r+0x164>
 800a020:	f108 38ff 	add.w	r8, r8, #4294967295
 800a024:	2100      	movs	r1, #0
 800a026:	e01e      	b.n	800a066 <_dtoa_r+0x1a6>
 800a028:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a02a:	4413      	add	r3, r2
 800a02c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800a030:	2920      	cmp	r1, #32
 800a032:	bfc1      	itttt	gt
 800a034:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800a038:	408e      	lslgt	r6, r1
 800a03a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800a03e:	fa24 f101 	lsrgt.w	r1, r4, r1
 800a042:	bfd6      	itet	le
 800a044:	f1c1 0120 	rsble	r1, r1, #32
 800a048:	4331      	orrgt	r1, r6
 800a04a:	fa04 f101 	lslle.w	r1, r4, r1
 800a04e:	ee07 1a90 	vmov	s15, r1
 800a052:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a056:	3b01      	subs	r3, #1
 800a058:	ee17 1a90 	vmov	r1, s15
 800a05c:	2501      	movs	r5, #1
 800a05e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800a062:	e7a8      	b.n	8009fb6 <_dtoa_r+0xf6>
 800a064:	2101      	movs	r1, #1
 800a066:	1ad2      	subs	r2, r2, r3
 800a068:	1e53      	subs	r3, r2, #1
 800a06a:	9306      	str	r3, [sp, #24]
 800a06c:	bf45      	ittet	mi
 800a06e:	f1c2 0301 	rsbmi	r3, r2, #1
 800a072:	9304      	strmi	r3, [sp, #16]
 800a074:	2300      	movpl	r3, #0
 800a076:	2300      	movmi	r3, #0
 800a078:	bf4c      	ite	mi
 800a07a:	9306      	strmi	r3, [sp, #24]
 800a07c:	9304      	strpl	r3, [sp, #16]
 800a07e:	f1b8 0f00 	cmp.w	r8, #0
 800a082:	910c      	str	r1, [sp, #48]	@ 0x30
 800a084:	db18      	blt.n	800a0b8 <_dtoa_r+0x1f8>
 800a086:	9b06      	ldr	r3, [sp, #24]
 800a088:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800a08c:	4443      	add	r3, r8
 800a08e:	9306      	str	r3, [sp, #24]
 800a090:	2300      	movs	r3, #0
 800a092:	9a07      	ldr	r2, [sp, #28]
 800a094:	2a09      	cmp	r2, #9
 800a096:	d845      	bhi.n	800a124 <_dtoa_r+0x264>
 800a098:	2a05      	cmp	r2, #5
 800a09a:	bfc4      	itt	gt
 800a09c:	3a04      	subgt	r2, #4
 800a09e:	9207      	strgt	r2, [sp, #28]
 800a0a0:	9a07      	ldr	r2, [sp, #28]
 800a0a2:	f1a2 0202 	sub.w	r2, r2, #2
 800a0a6:	bfcc      	ite	gt
 800a0a8:	2400      	movgt	r4, #0
 800a0aa:	2401      	movle	r4, #1
 800a0ac:	2a03      	cmp	r2, #3
 800a0ae:	d844      	bhi.n	800a13a <_dtoa_r+0x27a>
 800a0b0:	e8df f002 	tbb	[pc, r2]
 800a0b4:	0b173634 	.word	0x0b173634
 800a0b8:	9b04      	ldr	r3, [sp, #16]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	eba3 0308 	sub.w	r3, r3, r8
 800a0c0:	9304      	str	r3, [sp, #16]
 800a0c2:	920a      	str	r2, [sp, #40]	@ 0x28
 800a0c4:	f1c8 0300 	rsb	r3, r8, #0
 800a0c8:	e7e3      	b.n	800a092 <_dtoa_r+0x1d2>
 800a0ca:	2201      	movs	r2, #1
 800a0cc:	9208      	str	r2, [sp, #32]
 800a0ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a0d0:	eb08 0b02 	add.w	fp, r8, r2
 800a0d4:	f10b 0a01 	add.w	sl, fp, #1
 800a0d8:	4652      	mov	r2, sl
 800a0da:	2a01      	cmp	r2, #1
 800a0dc:	bfb8      	it	lt
 800a0de:	2201      	movlt	r2, #1
 800a0e0:	e006      	b.n	800a0f0 <_dtoa_r+0x230>
 800a0e2:	2201      	movs	r2, #1
 800a0e4:	9208      	str	r2, [sp, #32]
 800a0e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a0e8:	2a00      	cmp	r2, #0
 800a0ea:	dd29      	ble.n	800a140 <_dtoa_r+0x280>
 800a0ec:	4693      	mov	fp, r2
 800a0ee:	4692      	mov	sl, r2
 800a0f0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800a0f4:	2100      	movs	r1, #0
 800a0f6:	2004      	movs	r0, #4
 800a0f8:	f100 0614 	add.w	r6, r0, #20
 800a0fc:	4296      	cmp	r6, r2
 800a0fe:	d926      	bls.n	800a14e <_dtoa_r+0x28e>
 800a100:	6079      	str	r1, [r7, #4]
 800a102:	4648      	mov	r0, r9
 800a104:	9305      	str	r3, [sp, #20]
 800a106:	f000 fd39 	bl	800ab7c <_Balloc>
 800a10a:	9b05      	ldr	r3, [sp, #20]
 800a10c:	4607      	mov	r7, r0
 800a10e:	2800      	cmp	r0, #0
 800a110:	d13e      	bne.n	800a190 <_dtoa_r+0x2d0>
 800a112:	4b1e      	ldr	r3, [pc, #120]	@ (800a18c <_dtoa_r+0x2cc>)
 800a114:	4602      	mov	r2, r0
 800a116:	f240 11af 	movw	r1, #431	@ 0x1af
 800a11a:	e6ea      	b.n	8009ef2 <_dtoa_r+0x32>
 800a11c:	2200      	movs	r2, #0
 800a11e:	e7e1      	b.n	800a0e4 <_dtoa_r+0x224>
 800a120:	2200      	movs	r2, #0
 800a122:	e7d3      	b.n	800a0cc <_dtoa_r+0x20c>
 800a124:	2401      	movs	r4, #1
 800a126:	2200      	movs	r2, #0
 800a128:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800a12c:	f04f 3bff 	mov.w	fp, #4294967295
 800a130:	2100      	movs	r1, #0
 800a132:	46da      	mov	sl, fp
 800a134:	2212      	movs	r2, #18
 800a136:	9109      	str	r1, [sp, #36]	@ 0x24
 800a138:	e7da      	b.n	800a0f0 <_dtoa_r+0x230>
 800a13a:	2201      	movs	r2, #1
 800a13c:	9208      	str	r2, [sp, #32]
 800a13e:	e7f5      	b.n	800a12c <_dtoa_r+0x26c>
 800a140:	f04f 0b01 	mov.w	fp, #1
 800a144:	46da      	mov	sl, fp
 800a146:	465a      	mov	r2, fp
 800a148:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800a14c:	e7d0      	b.n	800a0f0 <_dtoa_r+0x230>
 800a14e:	3101      	adds	r1, #1
 800a150:	0040      	lsls	r0, r0, #1
 800a152:	e7d1      	b.n	800a0f8 <_dtoa_r+0x238>
 800a154:	f3af 8000 	nop.w
 800a158:	636f4361 	.word	0x636f4361
 800a15c:	3fd287a7 	.word	0x3fd287a7
 800a160:	8b60c8b3 	.word	0x8b60c8b3
 800a164:	3fc68a28 	.word	0x3fc68a28
 800a168:	509f79fb 	.word	0x509f79fb
 800a16c:	3fd34413 	.word	0x3fd34413
 800a170:	0800bad1 	.word	0x0800bad1
 800a174:	0800bae8 	.word	0x0800bae8
 800a178:	7ff00000 	.word	0x7ff00000
 800a17c:	0800bacd 	.word	0x0800bacd
 800a180:	0800baa1 	.word	0x0800baa1
 800a184:	0800baa0 	.word	0x0800baa0
 800a188:	0800bc38 	.word	0x0800bc38
 800a18c:	0800bb40 	.word	0x0800bb40
 800a190:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800a194:	f1ba 0f0e 	cmp.w	sl, #14
 800a198:	6010      	str	r0, [r2, #0]
 800a19a:	d86e      	bhi.n	800a27a <_dtoa_r+0x3ba>
 800a19c:	2c00      	cmp	r4, #0
 800a19e:	d06c      	beq.n	800a27a <_dtoa_r+0x3ba>
 800a1a0:	f1b8 0f00 	cmp.w	r8, #0
 800a1a4:	f340 80b4 	ble.w	800a310 <_dtoa_r+0x450>
 800a1a8:	4ac8      	ldr	r2, [pc, #800]	@ (800a4cc <_dtoa_r+0x60c>)
 800a1aa:	f008 010f 	and.w	r1, r8, #15
 800a1ae:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800a1b2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800a1b6:	ed92 7b00 	vldr	d7, [r2]
 800a1ba:	ea4f 1128 	mov.w	r1, r8, asr #4
 800a1be:	f000 809b 	beq.w	800a2f8 <_dtoa_r+0x438>
 800a1c2:	4ac3      	ldr	r2, [pc, #780]	@ (800a4d0 <_dtoa_r+0x610>)
 800a1c4:	ed92 6b08 	vldr	d6, [r2, #32]
 800a1c8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800a1cc:	ed8d 6b02 	vstr	d6, [sp, #8]
 800a1d0:	f001 010f 	and.w	r1, r1, #15
 800a1d4:	2203      	movs	r2, #3
 800a1d6:	48be      	ldr	r0, [pc, #760]	@ (800a4d0 <_dtoa_r+0x610>)
 800a1d8:	2900      	cmp	r1, #0
 800a1da:	f040 808f 	bne.w	800a2fc <_dtoa_r+0x43c>
 800a1de:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a1e2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a1e6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a1ea:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a1ec:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a1f0:	2900      	cmp	r1, #0
 800a1f2:	f000 80b3 	beq.w	800a35c <_dtoa_r+0x49c>
 800a1f6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800a1fa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a1fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a202:	f140 80ab 	bpl.w	800a35c <_dtoa_r+0x49c>
 800a206:	f1ba 0f00 	cmp.w	sl, #0
 800a20a:	f000 80a7 	beq.w	800a35c <_dtoa_r+0x49c>
 800a20e:	f1bb 0f00 	cmp.w	fp, #0
 800a212:	dd30      	ble.n	800a276 <_dtoa_r+0x3b6>
 800a214:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800a218:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a21c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a220:	f108 31ff 	add.w	r1, r8, #4294967295
 800a224:	9105      	str	r1, [sp, #20]
 800a226:	3201      	adds	r2, #1
 800a228:	465c      	mov	r4, fp
 800a22a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a22e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800a232:	ee07 2a90 	vmov	s15, r2
 800a236:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a23a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800a23e:	ee15 2a90 	vmov	r2, s11
 800a242:	ec51 0b15 	vmov	r0, r1, d5
 800a246:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800a24a:	2c00      	cmp	r4, #0
 800a24c:	f040 808a 	bne.w	800a364 <_dtoa_r+0x4a4>
 800a250:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800a254:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a258:	ec41 0b17 	vmov	d7, r0, r1
 800a25c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a264:	f300 826a 	bgt.w	800a73c <_dtoa_r+0x87c>
 800a268:	eeb1 7b47 	vneg.f64	d7, d7
 800a26c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a274:	d423      	bmi.n	800a2be <_dtoa_r+0x3fe>
 800a276:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a27a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a27c:	2a00      	cmp	r2, #0
 800a27e:	f2c0 8129 	blt.w	800a4d4 <_dtoa_r+0x614>
 800a282:	f1b8 0f0e 	cmp.w	r8, #14
 800a286:	f300 8125 	bgt.w	800a4d4 <_dtoa_r+0x614>
 800a28a:	4b90      	ldr	r3, [pc, #576]	@ (800a4cc <_dtoa_r+0x60c>)
 800a28c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a290:	ed93 6b00 	vldr	d6, [r3]
 800a294:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a296:	2b00      	cmp	r3, #0
 800a298:	f280 80c8 	bge.w	800a42c <_dtoa_r+0x56c>
 800a29c:	f1ba 0f00 	cmp.w	sl, #0
 800a2a0:	f300 80c4 	bgt.w	800a42c <_dtoa_r+0x56c>
 800a2a4:	d10b      	bne.n	800a2be <_dtoa_r+0x3fe>
 800a2a6:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800a2aa:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a2ae:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a2b2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a2b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2ba:	f2c0 823c 	blt.w	800a736 <_dtoa_r+0x876>
 800a2be:	2400      	movs	r4, #0
 800a2c0:	4625      	mov	r5, r4
 800a2c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2c4:	43db      	mvns	r3, r3
 800a2c6:	9305      	str	r3, [sp, #20]
 800a2c8:	463e      	mov	r6, r7
 800a2ca:	f04f 0800 	mov.w	r8, #0
 800a2ce:	4621      	mov	r1, r4
 800a2d0:	4648      	mov	r0, r9
 800a2d2:	f000 fc93 	bl	800abfc <_Bfree>
 800a2d6:	2d00      	cmp	r5, #0
 800a2d8:	f000 80a2 	beq.w	800a420 <_dtoa_r+0x560>
 800a2dc:	f1b8 0f00 	cmp.w	r8, #0
 800a2e0:	d005      	beq.n	800a2ee <_dtoa_r+0x42e>
 800a2e2:	45a8      	cmp	r8, r5
 800a2e4:	d003      	beq.n	800a2ee <_dtoa_r+0x42e>
 800a2e6:	4641      	mov	r1, r8
 800a2e8:	4648      	mov	r0, r9
 800a2ea:	f000 fc87 	bl	800abfc <_Bfree>
 800a2ee:	4629      	mov	r1, r5
 800a2f0:	4648      	mov	r0, r9
 800a2f2:	f000 fc83 	bl	800abfc <_Bfree>
 800a2f6:	e093      	b.n	800a420 <_dtoa_r+0x560>
 800a2f8:	2202      	movs	r2, #2
 800a2fa:	e76c      	b.n	800a1d6 <_dtoa_r+0x316>
 800a2fc:	07cc      	lsls	r4, r1, #31
 800a2fe:	d504      	bpl.n	800a30a <_dtoa_r+0x44a>
 800a300:	ed90 6b00 	vldr	d6, [r0]
 800a304:	3201      	adds	r2, #1
 800a306:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a30a:	1049      	asrs	r1, r1, #1
 800a30c:	3008      	adds	r0, #8
 800a30e:	e763      	b.n	800a1d8 <_dtoa_r+0x318>
 800a310:	d022      	beq.n	800a358 <_dtoa_r+0x498>
 800a312:	f1c8 0100 	rsb	r1, r8, #0
 800a316:	4a6d      	ldr	r2, [pc, #436]	@ (800a4cc <_dtoa_r+0x60c>)
 800a318:	f001 000f 	and.w	r0, r1, #15
 800a31c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a320:	ed92 7b00 	vldr	d7, [r2]
 800a324:	ee28 7b07 	vmul.f64	d7, d8, d7
 800a328:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a32c:	4868      	ldr	r0, [pc, #416]	@ (800a4d0 <_dtoa_r+0x610>)
 800a32e:	1109      	asrs	r1, r1, #4
 800a330:	2400      	movs	r4, #0
 800a332:	2202      	movs	r2, #2
 800a334:	b929      	cbnz	r1, 800a342 <_dtoa_r+0x482>
 800a336:	2c00      	cmp	r4, #0
 800a338:	f43f af57 	beq.w	800a1ea <_dtoa_r+0x32a>
 800a33c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a340:	e753      	b.n	800a1ea <_dtoa_r+0x32a>
 800a342:	07ce      	lsls	r6, r1, #31
 800a344:	d505      	bpl.n	800a352 <_dtoa_r+0x492>
 800a346:	ed90 6b00 	vldr	d6, [r0]
 800a34a:	3201      	adds	r2, #1
 800a34c:	2401      	movs	r4, #1
 800a34e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a352:	1049      	asrs	r1, r1, #1
 800a354:	3008      	adds	r0, #8
 800a356:	e7ed      	b.n	800a334 <_dtoa_r+0x474>
 800a358:	2202      	movs	r2, #2
 800a35a:	e746      	b.n	800a1ea <_dtoa_r+0x32a>
 800a35c:	f8cd 8014 	str.w	r8, [sp, #20]
 800a360:	4654      	mov	r4, sl
 800a362:	e762      	b.n	800a22a <_dtoa_r+0x36a>
 800a364:	4a59      	ldr	r2, [pc, #356]	@ (800a4cc <_dtoa_r+0x60c>)
 800a366:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800a36a:	ed12 4b02 	vldr	d4, [r2, #-8]
 800a36e:	9a08      	ldr	r2, [sp, #32]
 800a370:	ec41 0b17 	vmov	d7, r0, r1
 800a374:	443c      	add	r4, r7
 800a376:	b34a      	cbz	r2, 800a3cc <_dtoa_r+0x50c>
 800a378:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800a37c:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800a380:	463e      	mov	r6, r7
 800a382:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800a386:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800a38a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a38e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a392:	ee14 2a90 	vmov	r2, s9
 800a396:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a39a:	3230      	adds	r2, #48	@ 0x30
 800a39c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a3a0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a3a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3a8:	f806 2b01 	strb.w	r2, [r6], #1
 800a3ac:	d438      	bmi.n	800a420 <_dtoa_r+0x560>
 800a3ae:	ee32 5b46 	vsub.f64	d5, d2, d6
 800a3b2:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800a3b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3ba:	d46e      	bmi.n	800a49a <_dtoa_r+0x5da>
 800a3bc:	42a6      	cmp	r6, r4
 800a3be:	f43f af5a 	beq.w	800a276 <_dtoa_r+0x3b6>
 800a3c2:	ee27 7b03 	vmul.f64	d7, d7, d3
 800a3c6:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a3ca:	e7e0      	b.n	800a38e <_dtoa_r+0x4ce>
 800a3cc:	4621      	mov	r1, r4
 800a3ce:	463e      	mov	r6, r7
 800a3d0:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a3d4:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800a3d8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a3dc:	ee14 2a90 	vmov	r2, s9
 800a3e0:	3230      	adds	r2, #48	@ 0x30
 800a3e2:	f806 2b01 	strb.w	r2, [r6], #1
 800a3e6:	42a6      	cmp	r6, r4
 800a3e8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a3ec:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a3f0:	d119      	bne.n	800a426 <_dtoa_r+0x566>
 800a3f2:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800a3f6:	ee37 4b05 	vadd.f64	d4, d7, d5
 800a3fa:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800a3fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a402:	dc4a      	bgt.n	800a49a <_dtoa_r+0x5da>
 800a404:	ee35 5b47 	vsub.f64	d5, d5, d7
 800a408:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800a40c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a410:	f57f af31 	bpl.w	800a276 <_dtoa_r+0x3b6>
 800a414:	460e      	mov	r6, r1
 800a416:	3901      	subs	r1, #1
 800a418:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a41c:	2b30      	cmp	r3, #48	@ 0x30
 800a41e:	d0f9      	beq.n	800a414 <_dtoa_r+0x554>
 800a420:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800a424:	e027      	b.n	800a476 <_dtoa_r+0x5b6>
 800a426:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a42a:	e7d5      	b.n	800a3d8 <_dtoa_r+0x518>
 800a42c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a430:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800a434:	463e      	mov	r6, r7
 800a436:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800a43a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800a43e:	ee15 3a10 	vmov	r3, s10
 800a442:	3330      	adds	r3, #48	@ 0x30
 800a444:	f806 3b01 	strb.w	r3, [r6], #1
 800a448:	1bf3      	subs	r3, r6, r7
 800a44a:	459a      	cmp	sl, r3
 800a44c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800a450:	eea3 7b46 	vfms.f64	d7, d3, d6
 800a454:	d132      	bne.n	800a4bc <_dtoa_r+0x5fc>
 800a456:	ee37 7b07 	vadd.f64	d7, d7, d7
 800a45a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a45e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a462:	dc18      	bgt.n	800a496 <_dtoa_r+0x5d6>
 800a464:	eeb4 7b46 	vcmp.f64	d7, d6
 800a468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a46c:	d103      	bne.n	800a476 <_dtoa_r+0x5b6>
 800a46e:	ee15 3a10 	vmov	r3, s10
 800a472:	07db      	lsls	r3, r3, #31
 800a474:	d40f      	bmi.n	800a496 <_dtoa_r+0x5d6>
 800a476:	9901      	ldr	r1, [sp, #4]
 800a478:	4648      	mov	r0, r9
 800a47a:	f000 fbbf 	bl	800abfc <_Bfree>
 800a47e:	2300      	movs	r3, #0
 800a480:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a482:	7033      	strb	r3, [r6, #0]
 800a484:	f108 0301 	add.w	r3, r8, #1
 800a488:	6013      	str	r3, [r2, #0]
 800a48a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	f000 824b 	beq.w	800a928 <_dtoa_r+0xa68>
 800a492:	601e      	str	r6, [r3, #0]
 800a494:	e248      	b.n	800a928 <_dtoa_r+0xa68>
 800a496:	f8cd 8014 	str.w	r8, [sp, #20]
 800a49a:	4633      	mov	r3, r6
 800a49c:	461e      	mov	r6, r3
 800a49e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a4a2:	2a39      	cmp	r2, #57	@ 0x39
 800a4a4:	d106      	bne.n	800a4b4 <_dtoa_r+0x5f4>
 800a4a6:	429f      	cmp	r7, r3
 800a4a8:	d1f8      	bne.n	800a49c <_dtoa_r+0x5dc>
 800a4aa:	9a05      	ldr	r2, [sp, #20]
 800a4ac:	3201      	adds	r2, #1
 800a4ae:	9205      	str	r2, [sp, #20]
 800a4b0:	2230      	movs	r2, #48	@ 0x30
 800a4b2:	703a      	strb	r2, [r7, #0]
 800a4b4:	781a      	ldrb	r2, [r3, #0]
 800a4b6:	3201      	adds	r2, #1
 800a4b8:	701a      	strb	r2, [r3, #0]
 800a4ba:	e7b1      	b.n	800a420 <_dtoa_r+0x560>
 800a4bc:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a4c0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a4c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4c8:	d1b5      	bne.n	800a436 <_dtoa_r+0x576>
 800a4ca:	e7d4      	b.n	800a476 <_dtoa_r+0x5b6>
 800a4cc:	0800bc38 	.word	0x0800bc38
 800a4d0:	0800bc10 	.word	0x0800bc10
 800a4d4:	9908      	ldr	r1, [sp, #32]
 800a4d6:	2900      	cmp	r1, #0
 800a4d8:	f000 80e9 	beq.w	800a6ae <_dtoa_r+0x7ee>
 800a4dc:	9907      	ldr	r1, [sp, #28]
 800a4de:	2901      	cmp	r1, #1
 800a4e0:	f300 80cb 	bgt.w	800a67a <_dtoa_r+0x7ba>
 800a4e4:	2d00      	cmp	r5, #0
 800a4e6:	f000 80c4 	beq.w	800a672 <_dtoa_r+0x7b2>
 800a4ea:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a4ee:	9e04      	ldr	r6, [sp, #16]
 800a4f0:	461c      	mov	r4, r3
 800a4f2:	9305      	str	r3, [sp, #20]
 800a4f4:	9b04      	ldr	r3, [sp, #16]
 800a4f6:	4413      	add	r3, r2
 800a4f8:	9304      	str	r3, [sp, #16]
 800a4fa:	9b06      	ldr	r3, [sp, #24]
 800a4fc:	2101      	movs	r1, #1
 800a4fe:	4413      	add	r3, r2
 800a500:	4648      	mov	r0, r9
 800a502:	9306      	str	r3, [sp, #24]
 800a504:	f000 fc2e 	bl	800ad64 <__i2b>
 800a508:	9b05      	ldr	r3, [sp, #20]
 800a50a:	4605      	mov	r5, r0
 800a50c:	b166      	cbz	r6, 800a528 <_dtoa_r+0x668>
 800a50e:	9a06      	ldr	r2, [sp, #24]
 800a510:	2a00      	cmp	r2, #0
 800a512:	dd09      	ble.n	800a528 <_dtoa_r+0x668>
 800a514:	42b2      	cmp	r2, r6
 800a516:	9904      	ldr	r1, [sp, #16]
 800a518:	bfa8      	it	ge
 800a51a:	4632      	movge	r2, r6
 800a51c:	1a89      	subs	r1, r1, r2
 800a51e:	9104      	str	r1, [sp, #16]
 800a520:	9906      	ldr	r1, [sp, #24]
 800a522:	1ab6      	subs	r6, r6, r2
 800a524:	1a8a      	subs	r2, r1, r2
 800a526:	9206      	str	r2, [sp, #24]
 800a528:	b30b      	cbz	r3, 800a56e <_dtoa_r+0x6ae>
 800a52a:	9a08      	ldr	r2, [sp, #32]
 800a52c:	2a00      	cmp	r2, #0
 800a52e:	f000 80c5 	beq.w	800a6bc <_dtoa_r+0x7fc>
 800a532:	2c00      	cmp	r4, #0
 800a534:	f000 80bf 	beq.w	800a6b6 <_dtoa_r+0x7f6>
 800a538:	4629      	mov	r1, r5
 800a53a:	4622      	mov	r2, r4
 800a53c:	4648      	mov	r0, r9
 800a53e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a540:	f000 fcc8 	bl	800aed4 <__pow5mult>
 800a544:	9a01      	ldr	r2, [sp, #4]
 800a546:	4601      	mov	r1, r0
 800a548:	4605      	mov	r5, r0
 800a54a:	4648      	mov	r0, r9
 800a54c:	f000 fc20 	bl	800ad90 <__multiply>
 800a550:	9901      	ldr	r1, [sp, #4]
 800a552:	9005      	str	r0, [sp, #20]
 800a554:	4648      	mov	r0, r9
 800a556:	f000 fb51 	bl	800abfc <_Bfree>
 800a55a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a55c:	1b1b      	subs	r3, r3, r4
 800a55e:	f000 80b0 	beq.w	800a6c2 <_dtoa_r+0x802>
 800a562:	9905      	ldr	r1, [sp, #20]
 800a564:	461a      	mov	r2, r3
 800a566:	4648      	mov	r0, r9
 800a568:	f000 fcb4 	bl	800aed4 <__pow5mult>
 800a56c:	9001      	str	r0, [sp, #4]
 800a56e:	2101      	movs	r1, #1
 800a570:	4648      	mov	r0, r9
 800a572:	f000 fbf7 	bl	800ad64 <__i2b>
 800a576:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a578:	4604      	mov	r4, r0
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	f000 81da 	beq.w	800a934 <_dtoa_r+0xa74>
 800a580:	461a      	mov	r2, r3
 800a582:	4601      	mov	r1, r0
 800a584:	4648      	mov	r0, r9
 800a586:	f000 fca5 	bl	800aed4 <__pow5mult>
 800a58a:	9b07      	ldr	r3, [sp, #28]
 800a58c:	2b01      	cmp	r3, #1
 800a58e:	4604      	mov	r4, r0
 800a590:	f300 80a0 	bgt.w	800a6d4 <_dtoa_r+0x814>
 800a594:	9b02      	ldr	r3, [sp, #8]
 800a596:	2b00      	cmp	r3, #0
 800a598:	f040 8096 	bne.w	800a6c8 <_dtoa_r+0x808>
 800a59c:	9b03      	ldr	r3, [sp, #12]
 800a59e:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800a5a2:	2a00      	cmp	r2, #0
 800a5a4:	f040 8092 	bne.w	800a6cc <_dtoa_r+0x80c>
 800a5a8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800a5ac:	0d12      	lsrs	r2, r2, #20
 800a5ae:	0512      	lsls	r2, r2, #20
 800a5b0:	2a00      	cmp	r2, #0
 800a5b2:	f000 808d 	beq.w	800a6d0 <_dtoa_r+0x810>
 800a5b6:	9b04      	ldr	r3, [sp, #16]
 800a5b8:	3301      	adds	r3, #1
 800a5ba:	9304      	str	r3, [sp, #16]
 800a5bc:	9b06      	ldr	r3, [sp, #24]
 800a5be:	3301      	adds	r3, #1
 800a5c0:	9306      	str	r3, [sp, #24]
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a5c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	f000 81b9 	beq.w	800a940 <_dtoa_r+0xa80>
 800a5ce:	6922      	ldr	r2, [r4, #16]
 800a5d0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a5d4:	6910      	ldr	r0, [r2, #16]
 800a5d6:	f000 fb79 	bl	800accc <__hi0bits>
 800a5da:	f1c0 0020 	rsb	r0, r0, #32
 800a5de:	9b06      	ldr	r3, [sp, #24]
 800a5e0:	4418      	add	r0, r3
 800a5e2:	f010 001f 	ands.w	r0, r0, #31
 800a5e6:	f000 8081 	beq.w	800a6ec <_dtoa_r+0x82c>
 800a5ea:	f1c0 0220 	rsb	r2, r0, #32
 800a5ee:	2a04      	cmp	r2, #4
 800a5f0:	dd73      	ble.n	800a6da <_dtoa_r+0x81a>
 800a5f2:	9b04      	ldr	r3, [sp, #16]
 800a5f4:	f1c0 001c 	rsb	r0, r0, #28
 800a5f8:	4403      	add	r3, r0
 800a5fa:	9304      	str	r3, [sp, #16]
 800a5fc:	9b06      	ldr	r3, [sp, #24]
 800a5fe:	4406      	add	r6, r0
 800a600:	4403      	add	r3, r0
 800a602:	9306      	str	r3, [sp, #24]
 800a604:	9b04      	ldr	r3, [sp, #16]
 800a606:	2b00      	cmp	r3, #0
 800a608:	dd05      	ble.n	800a616 <_dtoa_r+0x756>
 800a60a:	9901      	ldr	r1, [sp, #4]
 800a60c:	461a      	mov	r2, r3
 800a60e:	4648      	mov	r0, r9
 800a610:	f000 fcba 	bl	800af88 <__lshift>
 800a614:	9001      	str	r0, [sp, #4]
 800a616:	9b06      	ldr	r3, [sp, #24]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	dd05      	ble.n	800a628 <_dtoa_r+0x768>
 800a61c:	4621      	mov	r1, r4
 800a61e:	461a      	mov	r2, r3
 800a620:	4648      	mov	r0, r9
 800a622:	f000 fcb1 	bl	800af88 <__lshift>
 800a626:	4604      	mov	r4, r0
 800a628:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d060      	beq.n	800a6f0 <_dtoa_r+0x830>
 800a62e:	9801      	ldr	r0, [sp, #4]
 800a630:	4621      	mov	r1, r4
 800a632:	f000 fd15 	bl	800b060 <__mcmp>
 800a636:	2800      	cmp	r0, #0
 800a638:	da5a      	bge.n	800a6f0 <_dtoa_r+0x830>
 800a63a:	f108 33ff 	add.w	r3, r8, #4294967295
 800a63e:	9305      	str	r3, [sp, #20]
 800a640:	9901      	ldr	r1, [sp, #4]
 800a642:	2300      	movs	r3, #0
 800a644:	220a      	movs	r2, #10
 800a646:	4648      	mov	r0, r9
 800a648:	f000 fafa 	bl	800ac40 <__multadd>
 800a64c:	9b08      	ldr	r3, [sp, #32]
 800a64e:	9001      	str	r0, [sp, #4]
 800a650:	2b00      	cmp	r3, #0
 800a652:	f000 8177 	beq.w	800a944 <_dtoa_r+0xa84>
 800a656:	4629      	mov	r1, r5
 800a658:	2300      	movs	r3, #0
 800a65a:	220a      	movs	r2, #10
 800a65c:	4648      	mov	r0, r9
 800a65e:	f000 faef 	bl	800ac40 <__multadd>
 800a662:	f1bb 0f00 	cmp.w	fp, #0
 800a666:	4605      	mov	r5, r0
 800a668:	dc6e      	bgt.n	800a748 <_dtoa_r+0x888>
 800a66a:	9b07      	ldr	r3, [sp, #28]
 800a66c:	2b02      	cmp	r3, #2
 800a66e:	dc48      	bgt.n	800a702 <_dtoa_r+0x842>
 800a670:	e06a      	b.n	800a748 <_dtoa_r+0x888>
 800a672:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a674:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a678:	e739      	b.n	800a4ee <_dtoa_r+0x62e>
 800a67a:	f10a 34ff 	add.w	r4, sl, #4294967295
 800a67e:	42a3      	cmp	r3, r4
 800a680:	db07      	blt.n	800a692 <_dtoa_r+0x7d2>
 800a682:	f1ba 0f00 	cmp.w	sl, #0
 800a686:	eba3 0404 	sub.w	r4, r3, r4
 800a68a:	db0b      	blt.n	800a6a4 <_dtoa_r+0x7e4>
 800a68c:	9e04      	ldr	r6, [sp, #16]
 800a68e:	4652      	mov	r2, sl
 800a690:	e72f      	b.n	800a4f2 <_dtoa_r+0x632>
 800a692:	1ae2      	subs	r2, r4, r3
 800a694:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a696:	9e04      	ldr	r6, [sp, #16]
 800a698:	4413      	add	r3, r2
 800a69a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a69c:	4652      	mov	r2, sl
 800a69e:	4623      	mov	r3, r4
 800a6a0:	2400      	movs	r4, #0
 800a6a2:	e726      	b.n	800a4f2 <_dtoa_r+0x632>
 800a6a4:	9a04      	ldr	r2, [sp, #16]
 800a6a6:	eba2 060a 	sub.w	r6, r2, sl
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	e721      	b.n	800a4f2 <_dtoa_r+0x632>
 800a6ae:	9e04      	ldr	r6, [sp, #16]
 800a6b0:	9d08      	ldr	r5, [sp, #32]
 800a6b2:	461c      	mov	r4, r3
 800a6b4:	e72a      	b.n	800a50c <_dtoa_r+0x64c>
 800a6b6:	9a01      	ldr	r2, [sp, #4]
 800a6b8:	9205      	str	r2, [sp, #20]
 800a6ba:	e752      	b.n	800a562 <_dtoa_r+0x6a2>
 800a6bc:	9901      	ldr	r1, [sp, #4]
 800a6be:	461a      	mov	r2, r3
 800a6c0:	e751      	b.n	800a566 <_dtoa_r+0x6a6>
 800a6c2:	9b05      	ldr	r3, [sp, #20]
 800a6c4:	9301      	str	r3, [sp, #4]
 800a6c6:	e752      	b.n	800a56e <_dtoa_r+0x6ae>
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	e77b      	b.n	800a5c4 <_dtoa_r+0x704>
 800a6cc:	9b02      	ldr	r3, [sp, #8]
 800a6ce:	e779      	b.n	800a5c4 <_dtoa_r+0x704>
 800a6d0:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a6d2:	e778      	b.n	800a5c6 <_dtoa_r+0x706>
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a6d8:	e779      	b.n	800a5ce <_dtoa_r+0x70e>
 800a6da:	d093      	beq.n	800a604 <_dtoa_r+0x744>
 800a6dc:	9b04      	ldr	r3, [sp, #16]
 800a6de:	321c      	adds	r2, #28
 800a6e0:	4413      	add	r3, r2
 800a6e2:	9304      	str	r3, [sp, #16]
 800a6e4:	9b06      	ldr	r3, [sp, #24]
 800a6e6:	4416      	add	r6, r2
 800a6e8:	4413      	add	r3, r2
 800a6ea:	e78a      	b.n	800a602 <_dtoa_r+0x742>
 800a6ec:	4602      	mov	r2, r0
 800a6ee:	e7f5      	b.n	800a6dc <_dtoa_r+0x81c>
 800a6f0:	f1ba 0f00 	cmp.w	sl, #0
 800a6f4:	f8cd 8014 	str.w	r8, [sp, #20]
 800a6f8:	46d3      	mov	fp, sl
 800a6fa:	dc21      	bgt.n	800a740 <_dtoa_r+0x880>
 800a6fc:	9b07      	ldr	r3, [sp, #28]
 800a6fe:	2b02      	cmp	r3, #2
 800a700:	dd1e      	ble.n	800a740 <_dtoa_r+0x880>
 800a702:	f1bb 0f00 	cmp.w	fp, #0
 800a706:	f47f addc 	bne.w	800a2c2 <_dtoa_r+0x402>
 800a70a:	4621      	mov	r1, r4
 800a70c:	465b      	mov	r3, fp
 800a70e:	2205      	movs	r2, #5
 800a710:	4648      	mov	r0, r9
 800a712:	f000 fa95 	bl	800ac40 <__multadd>
 800a716:	4601      	mov	r1, r0
 800a718:	4604      	mov	r4, r0
 800a71a:	9801      	ldr	r0, [sp, #4]
 800a71c:	f000 fca0 	bl	800b060 <__mcmp>
 800a720:	2800      	cmp	r0, #0
 800a722:	f77f adce 	ble.w	800a2c2 <_dtoa_r+0x402>
 800a726:	463e      	mov	r6, r7
 800a728:	2331      	movs	r3, #49	@ 0x31
 800a72a:	f806 3b01 	strb.w	r3, [r6], #1
 800a72e:	9b05      	ldr	r3, [sp, #20]
 800a730:	3301      	adds	r3, #1
 800a732:	9305      	str	r3, [sp, #20]
 800a734:	e5c9      	b.n	800a2ca <_dtoa_r+0x40a>
 800a736:	f8cd 8014 	str.w	r8, [sp, #20]
 800a73a:	4654      	mov	r4, sl
 800a73c:	4625      	mov	r5, r4
 800a73e:	e7f2      	b.n	800a726 <_dtoa_r+0x866>
 800a740:	9b08      	ldr	r3, [sp, #32]
 800a742:	2b00      	cmp	r3, #0
 800a744:	f000 8102 	beq.w	800a94c <_dtoa_r+0xa8c>
 800a748:	2e00      	cmp	r6, #0
 800a74a:	dd05      	ble.n	800a758 <_dtoa_r+0x898>
 800a74c:	4629      	mov	r1, r5
 800a74e:	4632      	mov	r2, r6
 800a750:	4648      	mov	r0, r9
 800a752:	f000 fc19 	bl	800af88 <__lshift>
 800a756:	4605      	mov	r5, r0
 800a758:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d058      	beq.n	800a810 <_dtoa_r+0x950>
 800a75e:	6869      	ldr	r1, [r5, #4]
 800a760:	4648      	mov	r0, r9
 800a762:	f000 fa0b 	bl	800ab7c <_Balloc>
 800a766:	4606      	mov	r6, r0
 800a768:	b928      	cbnz	r0, 800a776 <_dtoa_r+0x8b6>
 800a76a:	4b82      	ldr	r3, [pc, #520]	@ (800a974 <_dtoa_r+0xab4>)
 800a76c:	4602      	mov	r2, r0
 800a76e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a772:	f7ff bbbe 	b.w	8009ef2 <_dtoa_r+0x32>
 800a776:	692a      	ldr	r2, [r5, #16]
 800a778:	3202      	adds	r2, #2
 800a77a:	0092      	lsls	r2, r2, #2
 800a77c:	f105 010c 	add.w	r1, r5, #12
 800a780:	300c      	adds	r0, #12
 800a782:	f000 fff7 	bl	800b774 <memcpy>
 800a786:	2201      	movs	r2, #1
 800a788:	4631      	mov	r1, r6
 800a78a:	4648      	mov	r0, r9
 800a78c:	f000 fbfc 	bl	800af88 <__lshift>
 800a790:	1c7b      	adds	r3, r7, #1
 800a792:	9304      	str	r3, [sp, #16]
 800a794:	eb07 030b 	add.w	r3, r7, fp
 800a798:	9309      	str	r3, [sp, #36]	@ 0x24
 800a79a:	9b02      	ldr	r3, [sp, #8]
 800a79c:	f003 0301 	and.w	r3, r3, #1
 800a7a0:	46a8      	mov	r8, r5
 800a7a2:	9308      	str	r3, [sp, #32]
 800a7a4:	4605      	mov	r5, r0
 800a7a6:	9b04      	ldr	r3, [sp, #16]
 800a7a8:	9801      	ldr	r0, [sp, #4]
 800a7aa:	4621      	mov	r1, r4
 800a7ac:	f103 3bff 	add.w	fp, r3, #4294967295
 800a7b0:	f7ff fafd 	bl	8009dae <quorem>
 800a7b4:	4641      	mov	r1, r8
 800a7b6:	9002      	str	r0, [sp, #8]
 800a7b8:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800a7bc:	9801      	ldr	r0, [sp, #4]
 800a7be:	f000 fc4f 	bl	800b060 <__mcmp>
 800a7c2:	462a      	mov	r2, r5
 800a7c4:	9006      	str	r0, [sp, #24]
 800a7c6:	4621      	mov	r1, r4
 800a7c8:	4648      	mov	r0, r9
 800a7ca:	f000 fc65 	bl	800b098 <__mdiff>
 800a7ce:	68c2      	ldr	r2, [r0, #12]
 800a7d0:	4606      	mov	r6, r0
 800a7d2:	b9fa      	cbnz	r2, 800a814 <_dtoa_r+0x954>
 800a7d4:	4601      	mov	r1, r0
 800a7d6:	9801      	ldr	r0, [sp, #4]
 800a7d8:	f000 fc42 	bl	800b060 <__mcmp>
 800a7dc:	4602      	mov	r2, r0
 800a7de:	4631      	mov	r1, r6
 800a7e0:	4648      	mov	r0, r9
 800a7e2:	920a      	str	r2, [sp, #40]	@ 0x28
 800a7e4:	f000 fa0a 	bl	800abfc <_Bfree>
 800a7e8:	9b07      	ldr	r3, [sp, #28]
 800a7ea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a7ec:	9e04      	ldr	r6, [sp, #16]
 800a7ee:	ea42 0103 	orr.w	r1, r2, r3
 800a7f2:	9b08      	ldr	r3, [sp, #32]
 800a7f4:	4319      	orrs	r1, r3
 800a7f6:	d10f      	bne.n	800a818 <_dtoa_r+0x958>
 800a7f8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800a7fc:	d028      	beq.n	800a850 <_dtoa_r+0x990>
 800a7fe:	9b06      	ldr	r3, [sp, #24]
 800a800:	2b00      	cmp	r3, #0
 800a802:	dd02      	ble.n	800a80a <_dtoa_r+0x94a>
 800a804:	9b02      	ldr	r3, [sp, #8]
 800a806:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800a80a:	f88b a000 	strb.w	sl, [fp]
 800a80e:	e55e      	b.n	800a2ce <_dtoa_r+0x40e>
 800a810:	4628      	mov	r0, r5
 800a812:	e7bd      	b.n	800a790 <_dtoa_r+0x8d0>
 800a814:	2201      	movs	r2, #1
 800a816:	e7e2      	b.n	800a7de <_dtoa_r+0x91e>
 800a818:	9b06      	ldr	r3, [sp, #24]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	db04      	blt.n	800a828 <_dtoa_r+0x968>
 800a81e:	9907      	ldr	r1, [sp, #28]
 800a820:	430b      	orrs	r3, r1
 800a822:	9908      	ldr	r1, [sp, #32]
 800a824:	430b      	orrs	r3, r1
 800a826:	d120      	bne.n	800a86a <_dtoa_r+0x9aa>
 800a828:	2a00      	cmp	r2, #0
 800a82a:	ddee      	ble.n	800a80a <_dtoa_r+0x94a>
 800a82c:	9901      	ldr	r1, [sp, #4]
 800a82e:	2201      	movs	r2, #1
 800a830:	4648      	mov	r0, r9
 800a832:	f000 fba9 	bl	800af88 <__lshift>
 800a836:	4621      	mov	r1, r4
 800a838:	9001      	str	r0, [sp, #4]
 800a83a:	f000 fc11 	bl	800b060 <__mcmp>
 800a83e:	2800      	cmp	r0, #0
 800a840:	dc03      	bgt.n	800a84a <_dtoa_r+0x98a>
 800a842:	d1e2      	bne.n	800a80a <_dtoa_r+0x94a>
 800a844:	f01a 0f01 	tst.w	sl, #1
 800a848:	d0df      	beq.n	800a80a <_dtoa_r+0x94a>
 800a84a:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800a84e:	d1d9      	bne.n	800a804 <_dtoa_r+0x944>
 800a850:	2339      	movs	r3, #57	@ 0x39
 800a852:	f88b 3000 	strb.w	r3, [fp]
 800a856:	4633      	mov	r3, r6
 800a858:	461e      	mov	r6, r3
 800a85a:	3b01      	subs	r3, #1
 800a85c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a860:	2a39      	cmp	r2, #57	@ 0x39
 800a862:	d052      	beq.n	800a90a <_dtoa_r+0xa4a>
 800a864:	3201      	adds	r2, #1
 800a866:	701a      	strb	r2, [r3, #0]
 800a868:	e531      	b.n	800a2ce <_dtoa_r+0x40e>
 800a86a:	2a00      	cmp	r2, #0
 800a86c:	dd07      	ble.n	800a87e <_dtoa_r+0x9be>
 800a86e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800a872:	d0ed      	beq.n	800a850 <_dtoa_r+0x990>
 800a874:	f10a 0301 	add.w	r3, sl, #1
 800a878:	f88b 3000 	strb.w	r3, [fp]
 800a87c:	e527      	b.n	800a2ce <_dtoa_r+0x40e>
 800a87e:	9b04      	ldr	r3, [sp, #16]
 800a880:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a882:	f803 ac01 	strb.w	sl, [r3, #-1]
 800a886:	4293      	cmp	r3, r2
 800a888:	d029      	beq.n	800a8de <_dtoa_r+0xa1e>
 800a88a:	9901      	ldr	r1, [sp, #4]
 800a88c:	2300      	movs	r3, #0
 800a88e:	220a      	movs	r2, #10
 800a890:	4648      	mov	r0, r9
 800a892:	f000 f9d5 	bl	800ac40 <__multadd>
 800a896:	45a8      	cmp	r8, r5
 800a898:	9001      	str	r0, [sp, #4]
 800a89a:	f04f 0300 	mov.w	r3, #0
 800a89e:	f04f 020a 	mov.w	r2, #10
 800a8a2:	4641      	mov	r1, r8
 800a8a4:	4648      	mov	r0, r9
 800a8a6:	d107      	bne.n	800a8b8 <_dtoa_r+0x9f8>
 800a8a8:	f000 f9ca 	bl	800ac40 <__multadd>
 800a8ac:	4680      	mov	r8, r0
 800a8ae:	4605      	mov	r5, r0
 800a8b0:	9b04      	ldr	r3, [sp, #16]
 800a8b2:	3301      	adds	r3, #1
 800a8b4:	9304      	str	r3, [sp, #16]
 800a8b6:	e776      	b.n	800a7a6 <_dtoa_r+0x8e6>
 800a8b8:	f000 f9c2 	bl	800ac40 <__multadd>
 800a8bc:	4629      	mov	r1, r5
 800a8be:	4680      	mov	r8, r0
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	220a      	movs	r2, #10
 800a8c4:	4648      	mov	r0, r9
 800a8c6:	f000 f9bb 	bl	800ac40 <__multadd>
 800a8ca:	4605      	mov	r5, r0
 800a8cc:	e7f0      	b.n	800a8b0 <_dtoa_r+0x9f0>
 800a8ce:	f1bb 0f00 	cmp.w	fp, #0
 800a8d2:	bfcc      	ite	gt
 800a8d4:	465e      	movgt	r6, fp
 800a8d6:	2601      	movle	r6, #1
 800a8d8:	443e      	add	r6, r7
 800a8da:	f04f 0800 	mov.w	r8, #0
 800a8de:	9901      	ldr	r1, [sp, #4]
 800a8e0:	2201      	movs	r2, #1
 800a8e2:	4648      	mov	r0, r9
 800a8e4:	f000 fb50 	bl	800af88 <__lshift>
 800a8e8:	4621      	mov	r1, r4
 800a8ea:	9001      	str	r0, [sp, #4]
 800a8ec:	f000 fbb8 	bl	800b060 <__mcmp>
 800a8f0:	2800      	cmp	r0, #0
 800a8f2:	dcb0      	bgt.n	800a856 <_dtoa_r+0x996>
 800a8f4:	d102      	bne.n	800a8fc <_dtoa_r+0xa3c>
 800a8f6:	f01a 0f01 	tst.w	sl, #1
 800a8fa:	d1ac      	bne.n	800a856 <_dtoa_r+0x996>
 800a8fc:	4633      	mov	r3, r6
 800a8fe:	461e      	mov	r6, r3
 800a900:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a904:	2a30      	cmp	r2, #48	@ 0x30
 800a906:	d0fa      	beq.n	800a8fe <_dtoa_r+0xa3e>
 800a908:	e4e1      	b.n	800a2ce <_dtoa_r+0x40e>
 800a90a:	429f      	cmp	r7, r3
 800a90c:	d1a4      	bne.n	800a858 <_dtoa_r+0x998>
 800a90e:	9b05      	ldr	r3, [sp, #20]
 800a910:	3301      	adds	r3, #1
 800a912:	9305      	str	r3, [sp, #20]
 800a914:	2331      	movs	r3, #49	@ 0x31
 800a916:	703b      	strb	r3, [r7, #0]
 800a918:	e4d9      	b.n	800a2ce <_dtoa_r+0x40e>
 800a91a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a91c:	4f16      	ldr	r7, [pc, #88]	@ (800a978 <_dtoa_r+0xab8>)
 800a91e:	b11b      	cbz	r3, 800a928 <_dtoa_r+0xa68>
 800a920:	f107 0308 	add.w	r3, r7, #8
 800a924:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800a926:	6013      	str	r3, [r2, #0]
 800a928:	4638      	mov	r0, r7
 800a92a:	b011      	add	sp, #68	@ 0x44
 800a92c:	ecbd 8b02 	vpop	{d8}
 800a930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a934:	9b07      	ldr	r3, [sp, #28]
 800a936:	2b01      	cmp	r3, #1
 800a938:	f77f ae2c 	ble.w	800a594 <_dtoa_r+0x6d4>
 800a93c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a93e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a940:	2001      	movs	r0, #1
 800a942:	e64c      	b.n	800a5de <_dtoa_r+0x71e>
 800a944:	f1bb 0f00 	cmp.w	fp, #0
 800a948:	f77f aed8 	ble.w	800a6fc <_dtoa_r+0x83c>
 800a94c:	463e      	mov	r6, r7
 800a94e:	9801      	ldr	r0, [sp, #4]
 800a950:	4621      	mov	r1, r4
 800a952:	f7ff fa2c 	bl	8009dae <quorem>
 800a956:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800a95a:	f806 ab01 	strb.w	sl, [r6], #1
 800a95e:	1bf2      	subs	r2, r6, r7
 800a960:	4593      	cmp	fp, r2
 800a962:	ddb4      	ble.n	800a8ce <_dtoa_r+0xa0e>
 800a964:	9901      	ldr	r1, [sp, #4]
 800a966:	2300      	movs	r3, #0
 800a968:	220a      	movs	r2, #10
 800a96a:	4648      	mov	r0, r9
 800a96c:	f000 f968 	bl	800ac40 <__multadd>
 800a970:	9001      	str	r0, [sp, #4]
 800a972:	e7ec      	b.n	800a94e <_dtoa_r+0xa8e>
 800a974:	0800bb40 	.word	0x0800bb40
 800a978:	0800bac4 	.word	0x0800bac4

0800a97c <_free_r>:
 800a97c:	b538      	push	{r3, r4, r5, lr}
 800a97e:	4605      	mov	r5, r0
 800a980:	2900      	cmp	r1, #0
 800a982:	d041      	beq.n	800aa08 <_free_r+0x8c>
 800a984:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a988:	1f0c      	subs	r4, r1, #4
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	bfb8      	it	lt
 800a98e:	18e4      	addlt	r4, r4, r3
 800a990:	f000 f8e8 	bl	800ab64 <__malloc_lock>
 800a994:	4a1d      	ldr	r2, [pc, #116]	@ (800aa0c <_free_r+0x90>)
 800a996:	6813      	ldr	r3, [r2, #0]
 800a998:	b933      	cbnz	r3, 800a9a8 <_free_r+0x2c>
 800a99a:	6063      	str	r3, [r4, #4]
 800a99c:	6014      	str	r4, [r2, #0]
 800a99e:	4628      	mov	r0, r5
 800a9a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a9a4:	f000 b8e4 	b.w	800ab70 <__malloc_unlock>
 800a9a8:	42a3      	cmp	r3, r4
 800a9aa:	d908      	bls.n	800a9be <_free_r+0x42>
 800a9ac:	6820      	ldr	r0, [r4, #0]
 800a9ae:	1821      	adds	r1, r4, r0
 800a9b0:	428b      	cmp	r3, r1
 800a9b2:	bf01      	itttt	eq
 800a9b4:	6819      	ldreq	r1, [r3, #0]
 800a9b6:	685b      	ldreq	r3, [r3, #4]
 800a9b8:	1809      	addeq	r1, r1, r0
 800a9ba:	6021      	streq	r1, [r4, #0]
 800a9bc:	e7ed      	b.n	800a99a <_free_r+0x1e>
 800a9be:	461a      	mov	r2, r3
 800a9c0:	685b      	ldr	r3, [r3, #4]
 800a9c2:	b10b      	cbz	r3, 800a9c8 <_free_r+0x4c>
 800a9c4:	42a3      	cmp	r3, r4
 800a9c6:	d9fa      	bls.n	800a9be <_free_r+0x42>
 800a9c8:	6811      	ldr	r1, [r2, #0]
 800a9ca:	1850      	adds	r0, r2, r1
 800a9cc:	42a0      	cmp	r0, r4
 800a9ce:	d10b      	bne.n	800a9e8 <_free_r+0x6c>
 800a9d0:	6820      	ldr	r0, [r4, #0]
 800a9d2:	4401      	add	r1, r0
 800a9d4:	1850      	adds	r0, r2, r1
 800a9d6:	4283      	cmp	r3, r0
 800a9d8:	6011      	str	r1, [r2, #0]
 800a9da:	d1e0      	bne.n	800a99e <_free_r+0x22>
 800a9dc:	6818      	ldr	r0, [r3, #0]
 800a9de:	685b      	ldr	r3, [r3, #4]
 800a9e0:	6053      	str	r3, [r2, #4]
 800a9e2:	4408      	add	r0, r1
 800a9e4:	6010      	str	r0, [r2, #0]
 800a9e6:	e7da      	b.n	800a99e <_free_r+0x22>
 800a9e8:	d902      	bls.n	800a9f0 <_free_r+0x74>
 800a9ea:	230c      	movs	r3, #12
 800a9ec:	602b      	str	r3, [r5, #0]
 800a9ee:	e7d6      	b.n	800a99e <_free_r+0x22>
 800a9f0:	6820      	ldr	r0, [r4, #0]
 800a9f2:	1821      	adds	r1, r4, r0
 800a9f4:	428b      	cmp	r3, r1
 800a9f6:	bf04      	itt	eq
 800a9f8:	6819      	ldreq	r1, [r3, #0]
 800a9fa:	685b      	ldreq	r3, [r3, #4]
 800a9fc:	6063      	str	r3, [r4, #4]
 800a9fe:	bf04      	itt	eq
 800aa00:	1809      	addeq	r1, r1, r0
 800aa02:	6021      	streq	r1, [r4, #0]
 800aa04:	6054      	str	r4, [r2, #4]
 800aa06:	e7ca      	b.n	800a99e <_free_r+0x22>
 800aa08:	bd38      	pop	{r3, r4, r5, pc}
 800aa0a:	bf00      	nop
 800aa0c:	2400049c 	.word	0x2400049c

0800aa10 <malloc>:
 800aa10:	4b02      	ldr	r3, [pc, #8]	@ (800aa1c <malloc+0xc>)
 800aa12:	4601      	mov	r1, r0
 800aa14:	6818      	ldr	r0, [r3, #0]
 800aa16:	f000 b825 	b.w	800aa64 <_malloc_r>
 800aa1a:	bf00      	nop
 800aa1c:	2400001c 	.word	0x2400001c

0800aa20 <sbrk_aligned>:
 800aa20:	b570      	push	{r4, r5, r6, lr}
 800aa22:	4e0f      	ldr	r6, [pc, #60]	@ (800aa60 <sbrk_aligned+0x40>)
 800aa24:	460c      	mov	r4, r1
 800aa26:	6831      	ldr	r1, [r6, #0]
 800aa28:	4605      	mov	r5, r0
 800aa2a:	b911      	cbnz	r1, 800aa32 <sbrk_aligned+0x12>
 800aa2c:	f000 fe92 	bl	800b754 <_sbrk_r>
 800aa30:	6030      	str	r0, [r6, #0]
 800aa32:	4621      	mov	r1, r4
 800aa34:	4628      	mov	r0, r5
 800aa36:	f000 fe8d 	bl	800b754 <_sbrk_r>
 800aa3a:	1c43      	adds	r3, r0, #1
 800aa3c:	d103      	bne.n	800aa46 <sbrk_aligned+0x26>
 800aa3e:	f04f 34ff 	mov.w	r4, #4294967295
 800aa42:	4620      	mov	r0, r4
 800aa44:	bd70      	pop	{r4, r5, r6, pc}
 800aa46:	1cc4      	adds	r4, r0, #3
 800aa48:	f024 0403 	bic.w	r4, r4, #3
 800aa4c:	42a0      	cmp	r0, r4
 800aa4e:	d0f8      	beq.n	800aa42 <sbrk_aligned+0x22>
 800aa50:	1a21      	subs	r1, r4, r0
 800aa52:	4628      	mov	r0, r5
 800aa54:	f000 fe7e 	bl	800b754 <_sbrk_r>
 800aa58:	3001      	adds	r0, #1
 800aa5a:	d1f2      	bne.n	800aa42 <sbrk_aligned+0x22>
 800aa5c:	e7ef      	b.n	800aa3e <sbrk_aligned+0x1e>
 800aa5e:	bf00      	nop
 800aa60:	24000498 	.word	0x24000498

0800aa64 <_malloc_r>:
 800aa64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa68:	1ccd      	adds	r5, r1, #3
 800aa6a:	f025 0503 	bic.w	r5, r5, #3
 800aa6e:	3508      	adds	r5, #8
 800aa70:	2d0c      	cmp	r5, #12
 800aa72:	bf38      	it	cc
 800aa74:	250c      	movcc	r5, #12
 800aa76:	2d00      	cmp	r5, #0
 800aa78:	4606      	mov	r6, r0
 800aa7a:	db01      	blt.n	800aa80 <_malloc_r+0x1c>
 800aa7c:	42a9      	cmp	r1, r5
 800aa7e:	d904      	bls.n	800aa8a <_malloc_r+0x26>
 800aa80:	230c      	movs	r3, #12
 800aa82:	6033      	str	r3, [r6, #0]
 800aa84:	2000      	movs	r0, #0
 800aa86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa8a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ab60 <_malloc_r+0xfc>
 800aa8e:	f000 f869 	bl	800ab64 <__malloc_lock>
 800aa92:	f8d8 3000 	ldr.w	r3, [r8]
 800aa96:	461c      	mov	r4, r3
 800aa98:	bb44      	cbnz	r4, 800aaec <_malloc_r+0x88>
 800aa9a:	4629      	mov	r1, r5
 800aa9c:	4630      	mov	r0, r6
 800aa9e:	f7ff ffbf 	bl	800aa20 <sbrk_aligned>
 800aaa2:	1c43      	adds	r3, r0, #1
 800aaa4:	4604      	mov	r4, r0
 800aaa6:	d158      	bne.n	800ab5a <_malloc_r+0xf6>
 800aaa8:	f8d8 4000 	ldr.w	r4, [r8]
 800aaac:	4627      	mov	r7, r4
 800aaae:	2f00      	cmp	r7, #0
 800aab0:	d143      	bne.n	800ab3a <_malloc_r+0xd6>
 800aab2:	2c00      	cmp	r4, #0
 800aab4:	d04b      	beq.n	800ab4e <_malloc_r+0xea>
 800aab6:	6823      	ldr	r3, [r4, #0]
 800aab8:	4639      	mov	r1, r7
 800aaba:	4630      	mov	r0, r6
 800aabc:	eb04 0903 	add.w	r9, r4, r3
 800aac0:	f000 fe48 	bl	800b754 <_sbrk_r>
 800aac4:	4581      	cmp	r9, r0
 800aac6:	d142      	bne.n	800ab4e <_malloc_r+0xea>
 800aac8:	6821      	ldr	r1, [r4, #0]
 800aaca:	1a6d      	subs	r5, r5, r1
 800aacc:	4629      	mov	r1, r5
 800aace:	4630      	mov	r0, r6
 800aad0:	f7ff ffa6 	bl	800aa20 <sbrk_aligned>
 800aad4:	3001      	adds	r0, #1
 800aad6:	d03a      	beq.n	800ab4e <_malloc_r+0xea>
 800aad8:	6823      	ldr	r3, [r4, #0]
 800aada:	442b      	add	r3, r5
 800aadc:	6023      	str	r3, [r4, #0]
 800aade:	f8d8 3000 	ldr.w	r3, [r8]
 800aae2:	685a      	ldr	r2, [r3, #4]
 800aae4:	bb62      	cbnz	r2, 800ab40 <_malloc_r+0xdc>
 800aae6:	f8c8 7000 	str.w	r7, [r8]
 800aaea:	e00f      	b.n	800ab0c <_malloc_r+0xa8>
 800aaec:	6822      	ldr	r2, [r4, #0]
 800aaee:	1b52      	subs	r2, r2, r5
 800aaf0:	d420      	bmi.n	800ab34 <_malloc_r+0xd0>
 800aaf2:	2a0b      	cmp	r2, #11
 800aaf4:	d917      	bls.n	800ab26 <_malloc_r+0xc2>
 800aaf6:	1961      	adds	r1, r4, r5
 800aaf8:	42a3      	cmp	r3, r4
 800aafa:	6025      	str	r5, [r4, #0]
 800aafc:	bf18      	it	ne
 800aafe:	6059      	strne	r1, [r3, #4]
 800ab00:	6863      	ldr	r3, [r4, #4]
 800ab02:	bf08      	it	eq
 800ab04:	f8c8 1000 	streq.w	r1, [r8]
 800ab08:	5162      	str	r2, [r4, r5]
 800ab0a:	604b      	str	r3, [r1, #4]
 800ab0c:	4630      	mov	r0, r6
 800ab0e:	f000 f82f 	bl	800ab70 <__malloc_unlock>
 800ab12:	f104 000b 	add.w	r0, r4, #11
 800ab16:	1d23      	adds	r3, r4, #4
 800ab18:	f020 0007 	bic.w	r0, r0, #7
 800ab1c:	1ac2      	subs	r2, r0, r3
 800ab1e:	bf1c      	itt	ne
 800ab20:	1a1b      	subne	r3, r3, r0
 800ab22:	50a3      	strne	r3, [r4, r2]
 800ab24:	e7af      	b.n	800aa86 <_malloc_r+0x22>
 800ab26:	6862      	ldr	r2, [r4, #4]
 800ab28:	42a3      	cmp	r3, r4
 800ab2a:	bf0c      	ite	eq
 800ab2c:	f8c8 2000 	streq.w	r2, [r8]
 800ab30:	605a      	strne	r2, [r3, #4]
 800ab32:	e7eb      	b.n	800ab0c <_malloc_r+0xa8>
 800ab34:	4623      	mov	r3, r4
 800ab36:	6864      	ldr	r4, [r4, #4]
 800ab38:	e7ae      	b.n	800aa98 <_malloc_r+0x34>
 800ab3a:	463c      	mov	r4, r7
 800ab3c:	687f      	ldr	r7, [r7, #4]
 800ab3e:	e7b6      	b.n	800aaae <_malloc_r+0x4a>
 800ab40:	461a      	mov	r2, r3
 800ab42:	685b      	ldr	r3, [r3, #4]
 800ab44:	42a3      	cmp	r3, r4
 800ab46:	d1fb      	bne.n	800ab40 <_malloc_r+0xdc>
 800ab48:	2300      	movs	r3, #0
 800ab4a:	6053      	str	r3, [r2, #4]
 800ab4c:	e7de      	b.n	800ab0c <_malloc_r+0xa8>
 800ab4e:	230c      	movs	r3, #12
 800ab50:	6033      	str	r3, [r6, #0]
 800ab52:	4630      	mov	r0, r6
 800ab54:	f000 f80c 	bl	800ab70 <__malloc_unlock>
 800ab58:	e794      	b.n	800aa84 <_malloc_r+0x20>
 800ab5a:	6005      	str	r5, [r0, #0]
 800ab5c:	e7d6      	b.n	800ab0c <_malloc_r+0xa8>
 800ab5e:	bf00      	nop
 800ab60:	2400049c 	.word	0x2400049c

0800ab64 <__malloc_lock>:
 800ab64:	4801      	ldr	r0, [pc, #4]	@ (800ab6c <__malloc_lock+0x8>)
 800ab66:	f7ff b920 	b.w	8009daa <__retarget_lock_acquire_recursive>
 800ab6a:	bf00      	nop
 800ab6c:	24000494 	.word	0x24000494

0800ab70 <__malloc_unlock>:
 800ab70:	4801      	ldr	r0, [pc, #4]	@ (800ab78 <__malloc_unlock+0x8>)
 800ab72:	f7ff b91b 	b.w	8009dac <__retarget_lock_release_recursive>
 800ab76:	bf00      	nop
 800ab78:	24000494 	.word	0x24000494

0800ab7c <_Balloc>:
 800ab7c:	b570      	push	{r4, r5, r6, lr}
 800ab7e:	69c6      	ldr	r6, [r0, #28]
 800ab80:	4604      	mov	r4, r0
 800ab82:	460d      	mov	r5, r1
 800ab84:	b976      	cbnz	r6, 800aba4 <_Balloc+0x28>
 800ab86:	2010      	movs	r0, #16
 800ab88:	f7ff ff42 	bl	800aa10 <malloc>
 800ab8c:	4602      	mov	r2, r0
 800ab8e:	61e0      	str	r0, [r4, #28]
 800ab90:	b920      	cbnz	r0, 800ab9c <_Balloc+0x20>
 800ab92:	4b18      	ldr	r3, [pc, #96]	@ (800abf4 <_Balloc+0x78>)
 800ab94:	4818      	ldr	r0, [pc, #96]	@ (800abf8 <_Balloc+0x7c>)
 800ab96:	216b      	movs	r1, #107	@ 0x6b
 800ab98:	f000 fdfa 	bl	800b790 <__assert_func>
 800ab9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aba0:	6006      	str	r6, [r0, #0]
 800aba2:	60c6      	str	r6, [r0, #12]
 800aba4:	69e6      	ldr	r6, [r4, #28]
 800aba6:	68f3      	ldr	r3, [r6, #12]
 800aba8:	b183      	cbz	r3, 800abcc <_Balloc+0x50>
 800abaa:	69e3      	ldr	r3, [r4, #28]
 800abac:	68db      	ldr	r3, [r3, #12]
 800abae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800abb2:	b9b8      	cbnz	r0, 800abe4 <_Balloc+0x68>
 800abb4:	2101      	movs	r1, #1
 800abb6:	fa01 f605 	lsl.w	r6, r1, r5
 800abba:	1d72      	adds	r2, r6, #5
 800abbc:	0092      	lsls	r2, r2, #2
 800abbe:	4620      	mov	r0, r4
 800abc0:	f000 fe04 	bl	800b7cc <_calloc_r>
 800abc4:	b160      	cbz	r0, 800abe0 <_Balloc+0x64>
 800abc6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800abca:	e00e      	b.n	800abea <_Balloc+0x6e>
 800abcc:	2221      	movs	r2, #33	@ 0x21
 800abce:	2104      	movs	r1, #4
 800abd0:	4620      	mov	r0, r4
 800abd2:	f000 fdfb 	bl	800b7cc <_calloc_r>
 800abd6:	69e3      	ldr	r3, [r4, #28]
 800abd8:	60f0      	str	r0, [r6, #12]
 800abda:	68db      	ldr	r3, [r3, #12]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d1e4      	bne.n	800abaa <_Balloc+0x2e>
 800abe0:	2000      	movs	r0, #0
 800abe2:	bd70      	pop	{r4, r5, r6, pc}
 800abe4:	6802      	ldr	r2, [r0, #0]
 800abe6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800abea:	2300      	movs	r3, #0
 800abec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800abf0:	e7f7      	b.n	800abe2 <_Balloc+0x66>
 800abf2:	bf00      	nop
 800abf4:	0800bad1 	.word	0x0800bad1
 800abf8:	0800bb51 	.word	0x0800bb51

0800abfc <_Bfree>:
 800abfc:	b570      	push	{r4, r5, r6, lr}
 800abfe:	69c6      	ldr	r6, [r0, #28]
 800ac00:	4605      	mov	r5, r0
 800ac02:	460c      	mov	r4, r1
 800ac04:	b976      	cbnz	r6, 800ac24 <_Bfree+0x28>
 800ac06:	2010      	movs	r0, #16
 800ac08:	f7ff ff02 	bl	800aa10 <malloc>
 800ac0c:	4602      	mov	r2, r0
 800ac0e:	61e8      	str	r0, [r5, #28]
 800ac10:	b920      	cbnz	r0, 800ac1c <_Bfree+0x20>
 800ac12:	4b09      	ldr	r3, [pc, #36]	@ (800ac38 <_Bfree+0x3c>)
 800ac14:	4809      	ldr	r0, [pc, #36]	@ (800ac3c <_Bfree+0x40>)
 800ac16:	218f      	movs	r1, #143	@ 0x8f
 800ac18:	f000 fdba 	bl	800b790 <__assert_func>
 800ac1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac20:	6006      	str	r6, [r0, #0]
 800ac22:	60c6      	str	r6, [r0, #12]
 800ac24:	b13c      	cbz	r4, 800ac36 <_Bfree+0x3a>
 800ac26:	69eb      	ldr	r3, [r5, #28]
 800ac28:	6862      	ldr	r2, [r4, #4]
 800ac2a:	68db      	ldr	r3, [r3, #12]
 800ac2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ac30:	6021      	str	r1, [r4, #0]
 800ac32:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ac36:	bd70      	pop	{r4, r5, r6, pc}
 800ac38:	0800bad1 	.word	0x0800bad1
 800ac3c:	0800bb51 	.word	0x0800bb51

0800ac40 <__multadd>:
 800ac40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac44:	690d      	ldr	r5, [r1, #16]
 800ac46:	4607      	mov	r7, r0
 800ac48:	460c      	mov	r4, r1
 800ac4a:	461e      	mov	r6, r3
 800ac4c:	f101 0c14 	add.w	ip, r1, #20
 800ac50:	2000      	movs	r0, #0
 800ac52:	f8dc 3000 	ldr.w	r3, [ip]
 800ac56:	b299      	uxth	r1, r3
 800ac58:	fb02 6101 	mla	r1, r2, r1, r6
 800ac5c:	0c1e      	lsrs	r6, r3, #16
 800ac5e:	0c0b      	lsrs	r3, r1, #16
 800ac60:	fb02 3306 	mla	r3, r2, r6, r3
 800ac64:	b289      	uxth	r1, r1
 800ac66:	3001      	adds	r0, #1
 800ac68:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ac6c:	4285      	cmp	r5, r0
 800ac6e:	f84c 1b04 	str.w	r1, [ip], #4
 800ac72:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ac76:	dcec      	bgt.n	800ac52 <__multadd+0x12>
 800ac78:	b30e      	cbz	r6, 800acbe <__multadd+0x7e>
 800ac7a:	68a3      	ldr	r3, [r4, #8]
 800ac7c:	42ab      	cmp	r3, r5
 800ac7e:	dc19      	bgt.n	800acb4 <__multadd+0x74>
 800ac80:	6861      	ldr	r1, [r4, #4]
 800ac82:	4638      	mov	r0, r7
 800ac84:	3101      	adds	r1, #1
 800ac86:	f7ff ff79 	bl	800ab7c <_Balloc>
 800ac8a:	4680      	mov	r8, r0
 800ac8c:	b928      	cbnz	r0, 800ac9a <__multadd+0x5a>
 800ac8e:	4602      	mov	r2, r0
 800ac90:	4b0c      	ldr	r3, [pc, #48]	@ (800acc4 <__multadd+0x84>)
 800ac92:	480d      	ldr	r0, [pc, #52]	@ (800acc8 <__multadd+0x88>)
 800ac94:	21ba      	movs	r1, #186	@ 0xba
 800ac96:	f000 fd7b 	bl	800b790 <__assert_func>
 800ac9a:	6922      	ldr	r2, [r4, #16]
 800ac9c:	3202      	adds	r2, #2
 800ac9e:	f104 010c 	add.w	r1, r4, #12
 800aca2:	0092      	lsls	r2, r2, #2
 800aca4:	300c      	adds	r0, #12
 800aca6:	f000 fd65 	bl	800b774 <memcpy>
 800acaa:	4621      	mov	r1, r4
 800acac:	4638      	mov	r0, r7
 800acae:	f7ff ffa5 	bl	800abfc <_Bfree>
 800acb2:	4644      	mov	r4, r8
 800acb4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800acb8:	3501      	adds	r5, #1
 800acba:	615e      	str	r6, [r3, #20]
 800acbc:	6125      	str	r5, [r4, #16]
 800acbe:	4620      	mov	r0, r4
 800acc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acc4:	0800bb40 	.word	0x0800bb40
 800acc8:	0800bb51 	.word	0x0800bb51

0800accc <__hi0bits>:
 800accc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800acd0:	4603      	mov	r3, r0
 800acd2:	bf36      	itet	cc
 800acd4:	0403      	lslcc	r3, r0, #16
 800acd6:	2000      	movcs	r0, #0
 800acd8:	2010      	movcc	r0, #16
 800acda:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800acde:	bf3c      	itt	cc
 800ace0:	021b      	lslcc	r3, r3, #8
 800ace2:	3008      	addcc	r0, #8
 800ace4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ace8:	bf3c      	itt	cc
 800acea:	011b      	lslcc	r3, r3, #4
 800acec:	3004      	addcc	r0, #4
 800acee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800acf2:	bf3c      	itt	cc
 800acf4:	009b      	lslcc	r3, r3, #2
 800acf6:	3002      	addcc	r0, #2
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	db05      	blt.n	800ad08 <__hi0bits+0x3c>
 800acfc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ad00:	f100 0001 	add.w	r0, r0, #1
 800ad04:	bf08      	it	eq
 800ad06:	2020      	moveq	r0, #32
 800ad08:	4770      	bx	lr

0800ad0a <__lo0bits>:
 800ad0a:	6803      	ldr	r3, [r0, #0]
 800ad0c:	4602      	mov	r2, r0
 800ad0e:	f013 0007 	ands.w	r0, r3, #7
 800ad12:	d00b      	beq.n	800ad2c <__lo0bits+0x22>
 800ad14:	07d9      	lsls	r1, r3, #31
 800ad16:	d421      	bmi.n	800ad5c <__lo0bits+0x52>
 800ad18:	0798      	lsls	r0, r3, #30
 800ad1a:	bf49      	itett	mi
 800ad1c:	085b      	lsrmi	r3, r3, #1
 800ad1e:	089b      	lsrpl	r3, r3, #2
 800ad20:	2001      	movmi	r0, #1
 800ad22:	6013      	strmi	r3, [r2, #0]
 800ad24:	bf5c      	itt	pl
 800ad26:	6013      	strpl	r3, [r2, #0]
 800ad28:	2002      	movpl	r0, #2
 800ad2a:	4770      	bx	lr
 800ad2c:	b299      	uxth	r1, r3
 800ad2e:	b909      	cbnz	r1, 800ad34 <__lo0bits+0x2a>
 800ad30:	0c1b      	lsrs	r3, r3, #16
 800ad32:	2010      	movs	r0, #16
 800ad34:	b2d9      	uxtb	r1, r3
 800ad36:	b909      	cbnz	r1, 800ad3c <__lo0bits+0x32>
 800ad38:	3008      	adds	r0, #8
 800ad3a:	0a1b      	lsrs	r3, r3, #8
 800ad3c:	0719      	lsls	r1, r3, #28
 800ad3e:	bf04      	itt	eq
 800ad40:	091b      	lsreq	r3, r3, #4
 800ad42:	3004      	addeq	r0, #4
 800ad44:	0799      	lsls	r1, r3, #30
 800ad46:	bf04      	itt	eq
 800ad48:	089b      	lsreq	r3, r3, #2
 800ad4a:	3002      	addeq	r0, #2
 800ad4c:	07d9      	lsls	r1, r3, #31
 800ad4e:	d403      	bmi.n	800ad58 <__lo0bits+0x4e>
 800ad50:	085b      	lsrs	r3, r3, #1
 800ad52:	f100 0001 	add.w	r0, r0, #1
 800ad56:	d003      	beq.n	800ad60 <__lo0bits+0x56>
 800ad58:	6013      	str	r3, [r2, #0]
 800ad5a:	4770      	bx	lr
 800ad5c:	2000      	movs	r0, #0
 800ad5e:	4770      	bx	lr
 800ad60:	2020      	movs	r0, #32
 800ad62:	4770      	bx	lr

0800ad64 <__i2b>:
 800ad64:	b510      	push	{r4, lr}
 800ad66:	460c      	mov	r4, r1
 800ad68:	2101      	movs	r1, #1
 800ad6a:	f7ff ff07 	bl	800ab7c <_Balloc>
 800ad6e:	4602      	mov	r2, r0
 800ad70:	b928      	cbnz	r0, 800ad7e <__i2b+0x1a>
 800ad72:	4b05      	ldr	r3, [pc, #20]	@ (800ad88 <__i2b+0x24>)
 800ad74:	4805      	ldr	r0, [pc, #20]	@ (800ad8c <__i2b+0x28>)
 800ad76:	f240 1145 	movw	r1, #325	@ 0x145
 800ad7a:	f000 fd09 	bl	800b790 <__assert_func>
 800ad7e:	2301      	movs	r3, #1
 800ad80:	6144      	str	r4, [r0, #20]
 800ad82:	6103      	str	r3, [r0, #16]
 800ad84:	bd10      	pop	{r4, pc}
 800ad86:	bf00      	nop
 800ad88:	0800bb40 	.word	0x0800bb40
 800ad8c:	0800bb51 	.word	0x0800bb51

0800ad90 <__multiply>:
 800ad90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad94:	4617      	mov	r7, r2
 800ad96:	690a      	ldr	r2, [r1, #16]
 800ad98:	693b      	ldr	r3, [r7, #16]
 800ad9a:	429a      	cmp	r2, r3
 800ad9c:	bfa8      	it	ge
 800ad9e:	463b      	movge	r3, r7
 800ada0:	4689      	mov	r9, r1
 800ada2:	bfa4      	itt	ge
 800ada4:	460f      	movge	r7, r1
 800ada6:	4699      	movge	r9, r3
 800ada8:	693d      	ldr	r5, [r7, #16]
 800adaa:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800adae:	68bb      	ldr	r3, [r7, #8]
 800adb0:	6879      	ldr	r1, [r7, #4]
 800adb2:	eb05 060a 	add.w	r6, r5, sl
 800adb6:	42b3      	cmp	r3, r6
 800adb8:	b085      	sub	sp, #20
 800adba:	bfb8      	it	lt
 800adbc:	3101      	addlt	r1, #1
 800adbe:	f7ff fedd 	bl	800ab7c <_Balloc>
 800adc2:	b930      	cbnz	r0, 800add2 <__multiply+0x42>
 800adc4:	4602      	mov	r2, r0
 800adc6:	4b41      	ldr	r3, [pc, #260]	@ (800aecc <__multiply+0x13c>)
 800adc8:	4841      	ldr	r0, [pc, #260]	@ (800aed0 <__multiply+0x140>)
 800adca:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800adce:	f000 fcdf 	bl	800b790 <__assert_func>
 800add2:	f100 0414 	add.w	r4, r0, #20
 800add6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800adda:	4623      	mov	r3, r4
 800addc:	2200      	movs	r2, #0
 800adde:	4573      	cmp	r3, lr
 800ade0:	d320      	bcc.n	800ae24 <__multiply+0x94>
 800ade2:	f107 0814 	add.w	r8, r7, #20
 800ade6:	f109 0114 	add.w	r1, r9, #20
 800adea:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800adee:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800adf2:	9302      	str	r3, [sp, #8]
 800adf4:	1beb      	subs	r3, r5, r7
 800adf6:	3b15      	subs	r3, #21
 800adf8:	f023 0303 	bic.w	r3, r3, #3
 800adfc:	3304      	adds	r3, #4
 800adfe:	3715      	adds	r7, #21
 800ae00:	42bd      	cmp	r5, r7
 800ae02:	bf38      	it	cc
 800ae04:	2304      	movcc	r3, #4
 800ae06:	9301      	str	r3, [sp, #4]
 800ae08:	9b02      	ldr	r3, [sp, #8]
 800ae0a:	9103      	str	r1, [sp, #12]
 800ae0c:	428b      	cmp	r3, r1
 800ae0e:	d80c      	bhi.n	800ae2a <__multiply+0x9a>
 800ae10:	2e00      	cmp	r6, #0
 800ae12:	dd03      	ble.n	800ae1c <__multiply+0x8c>
 800ae14:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d055      	beq.n	800aec8 <__multiply+0x138>
 800ae1c:	6106      	str	r6, [r0, #16]
 800ae1e:	b005      	add	sp, #20
 800ae20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae24:	f843 2b04 	str.w	r2, [r3], #4
 800ae28:	e7d9      	b.n	800adde <__multiply+0x4e>
 800ae2a:	f8b1 a000 	ldrh.w	sl, [r1]
 800ae2e:	f1ba 0f00 	cmp.w	sl, #0
 800ae32:	d01f      	beq.n	800ae74 <__multiply+0xe4>
 800ae34:	46c4      	mov	ip, r8
 800ae36:	46a1      	mov	r9, r4
 800ae38:	2700      	movs	r7, #0
 800ae3a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ae3e:	f8d9 3000 	ldr.w	r3, [r9]
 800ae42:	fa1f fb82 	uxth.w	fp, r2
 800ae46:	b29b      	uxth	r3, r3
 800ae48:	fb0a 330b 	mla	r3, sl, fp, r3
 800ae4c:	443b      	add	r3, r7
 800ae4e:	f8d9 7000 	ldr.w	r7, [r9]
 800ae52:	0c12      	lsrs	r2, r2, #16
 800ae54:	0c3f      	lsrs	r7, r7, #16
 800ae56:	fb0a 7202 	mla	r2, sl, r2, r7
 800ae5a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800ae5e:	b29b      	uxth	r3, r3
 800ae60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ae64:	4565      	cmp	r5, ip
 800ae66:	f849 3b04 	str.w	r3, [r9], #4
 800ae6a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800ae6e:	d8e4      	bhi.n	800ae3a <__multiply+0xaa>
 800ae70:	9b01      	ldr	r3, [sp, #4]
 800ae72:	50e7      	str	r7, [r4, r3]
 800ae74:	9b03      	ldr	r3, [sp, #12]
 800ae76:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ae7a:	3104      	adds	r1, #4
 800ae7c:	f1b9 0f00 	cmp.w	r9, #0
 800ae80:	d020      	beq.n	800aec4 <__multiply+0x134>
 800ae82:	6823      	ldr	r3, [r4, #0]
 800ae84:	4647      	mov	r7, r8
 800ae86:	46a4      	mov	ip, r4
 800ae88:	f04f 0a00 	mov.w	sl, #0
 800ae8c:	f8b7 b000 	ldrh.w	fp, [r7]
 800ae90:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800ae94:	fb09 220b 	mla	r2, r9, fp, r2
 800ae98:	4452      	add	r2, sl
 800ae9a:	b29b      	uxth	r3, r3
 800ae9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aea0:	f84c 3b04 	str.w	r3, [ip], #4
 800aea4:	f857 3b04 	ldr.w	r3, [r7], #4
 800aea8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aeac:	f8bc 3000 	ldrh.w	r3, [ip]
 800aeb0:	fb09 330a 	mla	r3, r9, sl, r3
 800aeb4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800aeb8:	42bd      	cmp	r5, r7
 800aeba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aebe:	d8e5      	bhi.n	800ae8c <__multiply+0xfc>
 800aec0:	9a01      	ldr	r2, [sp, #4]
 800aec2:	50a3      	str	r3, [r4, r2]
 800aec4:	3404      	adds	r4, #4
 800aec6:	e79f      	b.n	800ae08 <__multiply+0x78>
 800aec8:	3e01      	subs	r6, #1
 800aeca:	e7a1      	b.n	800ae10 <__multiply+0x80>
 800aecc:	0800bb40 	.word	0x0800bb40
 800aed0:	0800bb51 	.word	0x0800bb51

0800aed4 <__pow5mult>:
 800aed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aed8:	4615      	mov	r5, r2
 800aeda:	f012 0203 	ands.w	r2, r2, #3
 800aede:	4607      	mov	r7, r0
 800aee0:	460e      	mov	r6, r1
 800aee2:	d007      	beq.n	800aef4 <__pow5mult+0x20>
 800aee4:	4c25      	ldr	r4, [pc, #148]	@ (800af7c <__pow5mult+0xa8>)
 800aee6:	3a01      	subs	r2, #1
 800aee8:	2300      	movs	r3, #0
 800aeea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aeee:	f7ff fea7 	bl	800ac40 <__multadd>
 800aef2:	4606      	mov	r6, r0
 800aef4:	10ad      	asrs	r5, r5, #2
 800aef6:	d03d      	beq.n	800af74 <__pow5mult+0xa0>
 800aef8:	69fc      	ldr	r4, [r7, #28]
 800aefa:	b97c      	cbnz	r4, 800af1c <__pow5mult+0x48>
 800aefc:	2010      	movs	r0, #16
 800aefe:	f7ff fd87 	bl	800aa10 <malloc>
 800af02:	4602      	mov	r2, r0
 800af04:	61f8      	str	r0, [r7, #28]
 800af06:	b928      	cbnz	r0, 800af14 <__pow5mult+0x40>
 800af08:	4b1d      	ldr	r3, [pc, #116]	@ (800af80 <__pow5mult+0xac>)
 800af0a:	481e      	ldr	r0, [pc, #120]	@ (800af84 <__pow5mult+0xb0>)
 800af0c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800af10:	f000 fc3e 	bl	800b790 <__assert_func>
 800af14:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800af18:	6004      	str	r4, [r0, #0]
 800af1a:	60c4      	str	r4, [r0, #12]
 800af1c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800af20:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800af24:	b94c      	cbnz	r4, 800af3a <__pow5mult+0x66>
 800af26:	f240 2171 	movw	r1, #625	@ 0x271
 800af2a:	4638      	mov	r0, r7
 800af2c:	f7ff ff1a 	bl	800ad64 <__i2b>
 800af30:	2300      	movs	r3, #0
 800af32:	f8c8 0008 	str.w	r0, [r8, #8]
 800af36:	4604      	mov	r4, r0
 800af38:	6003      	str	r3, [r0, #0]
 800af3a:	f04f 0900 	mov.w	r9, #0
 800af3e:	07eb      	lsls	r3, r5, #31
 800af40:	d50a      	bpl.n	800af58 <__pow5mult+0x84>
 800af42:	4631      	mov	r1, r6
 800af44:	4622      	mov	r2, r4
 800af46:	4638      	mov	r0, r7
 800af48:	f7ff ff22 	bl	800ad90 <__multiply>
 800af4c:	4631      	mov	r1, r6
 800af4e:	4680      	mov	r8, r0
 800af50:	4638      	mov	r0, r7
 800af52:	f7ff fe53 	bl	800abfc <_Bfree>
 800af56:	4646      	mov	r6, r8
 800af58:	106d      	asrs	r5, r5, #1
 800af5a:	d00b      	beq.n	800af74 <__pow5mult+0xa0>
 800af5c:	6820      	ldr	r0, [r4, #0]
 800af5e:	b938      	cbnz	r0, 800af70 <__pow5mult+0x9c>
 800af60:	4622      	mov	r2, r4
 800af62:	4621      	mov	r1, r4
 800af64:	4638      	mov	r0, r7
 800af66:	f7ff ff13 	bl	800ad90 <__multiply>
 800af6a:	6020      	str	r0, [r4, #0]
 800af6c:	f8c0 9000 	str.w	r9, [r0]
 800af70:	4604      	mov	r4, r0
 800af72:	e7e4      	b.n	800af3e <__pow5mult+0x6a>
 800af74:	4630      	mov	r0, r6
 800af76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af7a:	bf00      	nop
 800af7c:	0800bc04 	.word	0x0800bc04
 800af80:	0800bad1 	.word	0x0800bad1
 800af84:	0800bb51 	.word	0x0800bb51

0800af88 <__lshift>:
 800af88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af8c:	460c      	mov	r4, r1
 800af8e:	6849      	ldr	r1, [r1, #4]
 800af90:	6923      	ldr	r3, [r4, #16]
 800af92:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800af96:	68a3      	ldr	r3, [r4, #8]
 800af98:	4607      	mov	r7, r0
 800af9a:	4691      	mov	r9, r2
 800af9c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800afa0:	f108 0601 	add.w	r6, r8, #1
 800afa4:	42b3      	cmp	r3, r6
 800afa6:	db0b      	blt.n	800afc0 <__lshift+0x38>
 800afa8:	4638      	mov	r0, r7
 800afaa:	f7ff fde7 	bl	800ab7c <_Balloc>
 800afae:	4605      	mov	r5, r0
 800afb0:	b948      	cbnz	r0, 800afc6 <__lshift+0x3e>
 800afb2:	4602      	mov	r2, r0
 800afb4:	4b28      	ldr	r3, [pc, #160]	@ (800b058 <__lshift+0xd0>)
 800afb6:	4829      	ldr	r0, [pc, #164]	@ (800b05c <__lshift+0xd4>)
 800afb8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800afbc:	f000 fbe8 	bl	800b790 <__assert_func>
 800afc0:	3101      	adds	r1, #1
 800afc2:	005b      	lsls	r3, r3, #1
 800afc4:	e7ee      	b.n	800afa4 <__lshift+0x1c>
 800afc6:	2300      	movs	r3, #0
 800afc8:	f100 0114 	add.w	r1, r0, #20
 800afcc:	f100 0210 	add.w	r2, r0, #16
 800afd0:	4618      	mov	r0, r3
 800afd2:	4553      	cmp	r3, sl
 800afd4:	db33      	blt.n	800b03e <__lshift+0xb6>
 800afd6:	6920      	ldr	r0, [r4, #16]
 800afd8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800afdc:	f104 0314 	add.w	r3, r4, #20
 800afe0:	f019 091f 	ands.w	r9, r9, #31
 800afe4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800afe8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800afec:	d02b      	beq.n	800b046 <__lshift+0xbe>
 800afee:	f1c9 0e20 	rsb	lr, r9, #32
 800aff2:	468a      	mov	sl, r1
 800aff4:	2200      	movs	r2, #0
 800aff6:	6818      	ldr	r0, [r3, #0]
 800aff8:	fa00 f009 	lsl.w	r0, r0, r9
 800affc:	4310      	orrs	r0, r2
 800affe:	f84a 0b04 	str.w	r0, [sl], #4
 800b002:	f853 2b04 	ldr.w	r2, [r3], #4
 800b006:	459c      	cmp	ip, r3
 800b008:	fa22 f20e 	lsr.w	r2, r2, lr
 800b00c:	d8f3      	bhi.n	800aff6 <__lshift+0x6e>
 800b00e:	ebac 0304 	sub.w	r3, ip, r4
 800b012:	3b15      	subs	r3, #21
 800b014:	f023 0303 	bic.w	r3, r3, #3
 800b018:	3304      	adds	r3, #4
 800b01a:	f104 0015 	add.w	r0, r4, #21
 800b01e:	4560      	cmp	r0, ip
 800b020:	bf88      	it	hi
 800b022:	2304      	movhi	r3, #4
 800b024:	50ca      	str	r2, [r1, r3]
 800b026:	b10a      	cbz	r2, 800b02c <__lshift+0xa4>
 800b028:	f108 0602 	add.w	r6, r8, #2
 800b02c:	3e01      	subs	r6, #1
 800b02e:	4638      	mov	r0, r7
 800b030:	612e      	str	r6, [r5, #16]
 800b032:	4621      	mov	r1, r4
 800b034:	f7ff fde2 	bl	800abfc <_Bfree>
 800b038:	4628      	mov	r0, r5
 800b03a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b03e:	f842 0f04 	str.w	r0, [r2, #4]!
 800b042:	3301      	adds	r3, #1
 800b044:	e7c5      	b.n	800afd2 <__lshift+0x4a>
 800b046:	3904      	subs	r1, #4
 800b048:	f853 2b04 	ldr.w	r2, [r3], #4
 800b04c:	f841 2f04 	str.w	r2, [r1, #4]!
 800b050:	459c      	cmp	ip, r3
 800b052:	d8f9      	bhi.n	800b048 <__lshift+0xc0>
 800b054:	e7ea      	b.n	800b02c <__lshift+0xa4>
 800b056:	bf00      	nop
 800b058:	0800bb40 	.word	0x0800bb40
 800b05c:	0800bb51 	.word	0x0800bb51

0800b060 <__mcmp>:
 800b060:	690a      	ldr	r2, [r1, #16]
 800b062:	4603      	mov	r3, r0
 800b064:	6900      	ldr	r0, [r0, #16]
 800b066:	1a80      	subs	r0, r0, r2
 800b068:	b530      	push	{r4, r5, lr}
 800b06a:	d10e      	bne.n	800b08a <__mcmp+0x2a>
 800b06c:	3314      	adds	r3, #20
 800b06e:	3114      	adds	r1, #20
 800b070:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b074:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b078:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b07c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b080:	4295      	cmp	r5, r2
 800b082:	d003      	beq.n	800b08c <__mcmp+0x2c>
 800b084:	d205      	bcs.n	800b092 <__mcmp+0x32>
 800b086:	f04f 30ff 	mov.w	r0, #4294967295
 800b08a:	bd30      	pop	{r4, r5, pc}
 800b08c:	42a3      	cmp	r3, r4
 800b08e:	d3f3      	bcc.n	800b078 <__mcmp+0x18>
 800b090:	e7fb      	b.n	800b08a <__mcmp+0x2a>
 800b092:	2001      	movs	r0, #1
 800b094:	e7f9      	b.n	800b08a <__mcmp+0x2a>
	...

0800b098 <__mdiff>:
 800b098:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b09c:	4689      	mov	r9, r1
 800b09e:	4606      	mov	r6, r0
 800b0a0:	4611      	mov	r1, r2
 800b0a2:	4648      	mov	r0, r9
 800b0a4:	4614      	mov	r4, r2
 800b0a6:	f7ff ffdb 	bl	800b060 <__mcmp>
 800b0aa:	1e05      	subs	r5, r0, #0
 800b0ac:	d112      	bne.n	800b0d4 <__mdiff+0x3c>
 800b0ae:	4629      	mov	r1, r5
 800b0b0:	4630      	mov	r0, r6
 800b0b2:	f7ff fd63 	bl	800ab7c <_Balloc>
 800b0b6:	4602      	mov	r2, r0
 800b0b8:	b928      	cbnz	r0, 800b0c6 <__mdiff+0x2e>
 800b0ba:	4b3f      	ldr	r3, [pc, #252]	@ (800b1b8 <__mdiff+0x120>)
 800b0bc:	f240 2137 	movw	r1, #567	@ 0x237
 800b0c0:	483e      	ldr	r0, [pc, #248]	@ (800b1bc <__mdiff+0x124>)
 800b0c2:	f000 fb65 	bl	800b790 <__assert_func>
 800b0c6:	2301      	movs	r3, #1
 800b0c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b0cc:	4610      	mov	r0, r2
 800b0ce:	b003      	add	sp, #12
 800b0d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0d4:	bfbc      	itt	lt
 800b0d6:	464b      	movlt	r3, r9
 800b0d8:	46a1      	movlt	r9, r4
 800b0da:	4630      	mov	r0, r6
 800b0dc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b0e0:	bfba      	itte	lt
 800b0e2:	461c      	movlt	r4, r3
 800b0e4:	2501      	movlt	r5, #1
 800b0e6:	2500      	movge	r5, #0
 800b0e8:	f7ff fd48 	bl	800ab7c <_Balloc>
 800b0ec:	4602      	mov	r2, r0
 800b0ee:	b918      	cbnz	r0, 800b0f8 <__mdiff+0x60>
 800b0f0:	4b31      	ldr	r3, [pc, #196]	@ (800b1b8 <__mdiff+0x120>)
 800b0f2:	f240 2145 	movw	r1, #581	@ 0x245
 800b0f6:	e7e3      	b.n	800b0c0 <__mdiff+0x28>
 800b0f8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b0fc:	6926      	ldr	r6, [r4, #16]
 800b0fe:	60c5      	str	r5, [r0, #12]
 800b100:	f109 0310 	add.w	r3, r9, #16
 800b104:	f109 0514 	add.w	r5, r9, #20
 800b108:	f104 0e14 	add.w	lr, r4, #20
 800b10c:	f100 0b14 	add.w	fp, r0, #20
 800b110:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b114:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b118:	9301      	str	r3, [sp, #4]
 800b11a:	46d9      	mov	r9, fp
 800b11c:	f04f 0c00 	mov.w	ip, #0
 800b120:	9b01      	ldr	r3, [sp, #4]
 800b122:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b126:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b12a:	9301      	str	r3, [sp, #4]
 800b12c:	fa1f f38a 	uxth.w	r3, sl
 800b130:	4619      	mov	r1, r3
 800b132:	b283      	uxth	r3, r0
 800b134:	1acb      	subs	r3, r1, r3
 800b136:	0c00      	lsrs	r0, r0, #16
 800b138:	4463      	add	r3, ip
 800b13a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b13e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b142:	b29b      	uxth	r3, r3
 800b144:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b148:	4576      	cmp	r6, lr
 800b14a:	f849 3b04 	str.w	r3, [r9], #4
 800b14e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b152:	d8e5      	bhi.n	800b120 <__mdiff+0x88>
 800b154:	1b33      	subs	r3, r6, r4
 800b156:	3b15      	subs	r3, #21
 800b158:	f023 0303 	bic.w	r3, r3, #3
 800b15c:	3415      	adds	r4, #21
 800b15e:	3304      	adds	r3, #4
 800b160:	42a6      	cmp	r6, r4
 800b162:	bf38      	it	cc
 800b164:	2304      	movcc	r3, #4
 800b166:	441d      	add	r5, r3
 800b168:	445b      	add	r3, fp
 800b16a:	461e      	mov	r6, r3
 800b16c:	462c      	mov	r4, r5
 800b16e:	4544      	cmp	r4, r8
 800b170:	d30e      	bcc.n	800b190 <__mdiff+0xf8>
 800b172:	f108 0103 	add.w	r1, r8, #3
 800b176:	1b49      	subs	r1, r1, r5
 800b178:	f021 0103 	bic.w	r1, r1, #3
 800b17c:	3d03      	subs	r5, #3
 800b17e:	45a8      	cmp	r8, r5
 800b180:	bf38      	it	cc
 800b182:	2100      	movcc	r1, #0
 800b184:	440b      	add	r3, r1
 800b186:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b18a:	b191      	cbz	r1, 800b1b2 <__mdiff+0x11a>
 800b18c:	6117      	str	r7, [r2, #16]
 800b18e:	e79d      	b.n	800b0cc <__mdiff+0x34>
 800b190:	f854 1b04 	ldr.w	r1, [r4], #4
 800b194:	46e6      	mov	lr, ip
 800b196:	0c08      	lsrs	r0, r1, #16
 800b198:	fa1c fc81 	uxtah	ip, ip, r1
 800b19c:	4471      	add	r1, lr
 800b19e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b1a2:	b289      	uxth	r1, r1
 800b1a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b1a8:	f846 1b04 	str.w	r1, [r6], #4
 800b1ac:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b1b0:	e7dd      	b.n	800b16e <__mdiff+0xd6>
 800b1b2:	3f01      	subs	r7, #1
 800b1b4:	e7e7      	b.n	800b186 <__mdiff+0xee>
 800b1b6:	bf00      	nop
 800b1b8:	0800bb40 	.word	0x0800bb40
 800b1bc:	0800bb51 	.word	0x0800bb51

0800b1c0 <__d2b>:
 800b1c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b1c4:	460f      	mov	r7, r1
 800b1c6:	2101      	movs	r1, #1
 800b1c8:	ec59 8b10 	vmov	r8, r9, d0
 800b1cc:	4616      	mov	r6, r2
 800b1ce:	f7ff fcd5 	bl	800ab7c <_Balloc>
 800b1d2:	4604      	mov	r4, r0
 800b1d4:	b930      	cbnz	r0, 800b1e4 <__d2b+0x24>
 800b1d6:	4602      	mov	r2, r0
 800b1d8:	4b23      	ldr	r3, [pc, #140]	@ (800b268 <__d2b+0xa8>)
 800b1da:	4824      	ldr	r0, [pc, #144]	@ (800b26c <__d2b+0xac>)
 800b1dc:	f240 310f 	movw	r1, #783	@ 0x30f
 800b1e0:	f000 fad6 	bl	800b790 <__assert_func>
 800b1e4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b1e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b1ec:	b10d      	cbz	r5, 800b1f2 <__d2b+0x32>
 800b1ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b1f2:	9301      	str	r3, [sp, #4]
 800b1f4:	f1b8 0300 	subs.w	r3, r8, #0
 800b1f8:	d023      	beq.n	800b242 <__d2b+0x82>
 800b1fa:	4668      	mov	r0, sp
 800b1fc:	9300      	str	r3, [sp, #0]
 800b1fe:	f7ff fd84 	bl	800ad0a <__lo0bits>
 800b202:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b206:	b1d0      	cbz	r0, 800b23e <__d2b+0x7e>
 800b208:	f1c0 0320 	rsb	r3, r0, #32
 800b20c:	fa02 f303 	lsl.w	r3, r2, r3
 800b210:	430b      	orrs	r3, r1
 800b212:	40c2      	lsrs	r2, r0
 800b214:	6163      	str	r3, [r4, #20]
 800b216:	9201      	str	r2, [sp, #4]
 800b218:	9b01      	ldr	r3, [sp, #4]
 800b21a:	61a3      	str	r3, [r4, #24]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	bf0c      	ite	eq
 800b220:	2201      	moveq	r2, #1
 800b222:	2202      	movne	r2, #2
 800b224:	6122      	str	r2, [r4, #16]
 800b226:	b1a5      	cbz	r5, 800b252 <__d2b+0x92>
 800b228:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b22c:	4405      	add	r5, r0
 800b22e:	603d      	str	r5, [r7, #0]
 800b230:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b234:	6030      	str	r0, [r6, #0]
 800b236:	4620      	mov	r0, r4
 800b238:	b003      	add	sp, #12
 800b23a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b23e:	6161      	str	r1, [r4, #20]
 800b240:	e7ea      	b.n	800b218 <__d2b+0x58>
 800b242:	a801      	add	r0, sp, #4
 800b244:	f7ff fd61 	bl	800ad0a <__lo0bits>
 800b248:	9b01      	ldr	r3, [sp, #4]
 800b24a:	6163      	str	r3, [r4, #20]
 800b24c:	3020      	adds	r0, #32
 800b24e:	2201      	movs	r2, #1
 800b250:	e7e8      	b.n	800b224 <__d2b+0x64>
 800b252:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b256:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b25a:	6038      	str	r0, [r7, #0]
 800b25c:	6918      	ldr	r0, [r3, #16]
 800b25e:	f7ff fd35 	bl	800accc <__hi0bits>
 800b262:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b266:	e7e5      	b.n	800b234 <__d2b+0x74>
 800b268:	0800bb40 	.word	0x0800bb40
 800b26c:	0800bb51 	.word	0x0800bb51

0800b270 <__sfputc_r>:
 800b270:	6893      	ldr	r3, [r2, #8]
 800b272:	3b01      	subs	r3, #1
 800b274:	2b00      	cmp	r3, #0
 800b276:	b410      	push	{r4}
 800b278:	6093      	str	r3, [r2, #8]
 800b27a:	da08      	bge.n	800b28e <__sfputc_r+0x1e>
 800b27c:	6994      	ldr	r4, [r2, #24]
 800b27e:	42a3      	cmp	r3, r4
 800b280:	db01      	blt.n	800b286 <__sfputc_r+0x16>
 800b282:	290a      	cmp	r1, #10
 800b284:	d103      	bne.n	800b28e <__sfputc_r+0x1e>
 800b286:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b28a:	f7fe bc7c 	b.w	8009b86 <__swbuf_r>
 800b28e:	6813      	ldr	r3, [r2, #0]
 800b290:	1c58      	adds	r0, r3, #1
 800b292:	6010      	str	r0, [r2, #0]
 800b294:	7019      	strb	r1, [r3, #0]
 800b296:	4608      	mov	r0, r1
 800b298:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b29c:	4770      	bx	lr

0800b29e <__sfputs_r>:
 800b29e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2a0:	4606      	mov	r6, r0
 800b2a2:	460f      	mov	r7, r1
 800b2a4:	4614      	mov	r4, r2
 800b2a6:	18d5      	adds	r5, r2, r3
 800b2a8:	42ac      	cmp	r4, r5
 800b2aa:	d101      	bne.n	800b2b0 <__sfputs_r+0x12>
 800b2ac:	2000      	movs	r0, #0
 800b2ae:	e007      	b.n	800b2c0 <__sfputs_r+0x22>
 800b2b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2b4:	463a      	mov	r2, r7
 800b2b6:	4630      	mov	r0, r6
 800b2b8:	f7ff ffda 	bl	800b270 <__sfputc_r>
 800b2bc:	1c43      	adds	r3, r0, #1
 800b2be:	d1f3      	bne.n	800b2a8 <__sfputs_r+0xa>
 800b2c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b2c4 <_vfiprintf_r>:
 800b2c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2c8:	460d      	mov	r5, r1
 800b2ca:	b09d      	sub	sp, #116	@ 0x74
 800b2cc:	4614      	mov	r4, r2
 800b2ce:	4698      	mov	r8, r3
 800b2d0:	4606      	mov	r6, r0
 800b2d2:	b118      	cbz	r0, 800b2dc <_vfiprintf_r+0x18>
 800b2d4:	6a03      	ldr	r3, [r0, #32]
 800b2d6:	b90b      	cbnz	r3, 800b2dc <_vfiprintf_r+0x18>
 800b2d8:	f7fe fb6c 	bl	80099b4 <__sinit>
 800b2dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b2de:	07d9      	lsls	r1, r3, #31
 800b2e0:	d405      	bmi.n	800b2ee <_vfiprintf_r+0x2a>
 800b2e2:	89ab      	ldrh	r3, [r5, #12]
 800b2e4:	059a      	lsls	r2, r3, #22
 800b2e6:	d402      	bmi.n	800b2ee <_vfiprintf_r+0x2a>
 800b2e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b2ea:	f7fe fd5e 	bl	8009daa <__retarget_lock_acquire_recursive>
 800b2ee:	89ab      	ldrh	r3, [r5, #12]
 800b2f0:	071b      	lsls	r3, r3, #28
 800b2f2:	d501      	bpl.n	800b2f8 <_vfiprintf_r+0x34>
 800b2f4:	692b      	ldr	r3, [r5, #16]
 800b2f6:	b99b      	cbnz	r3, 800b320 <_vfiprintf_r+0x5c>
 800b2f8:	4629      	mov	r1, r5
 800b2fa:	4630      	mov	r0, r6
 800b2fc:	f7fe fc82 	bl	8009c04 <__swsetup_r>
 800b300:	b170      	cbz	r0, 800b320 <_vfiprintf_r+0x5c>
 800b302:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b304:	07dc      	lsls	r4, r3, #31
 800b306:	d504      	bpl.n	800b312 <_vfiprintf_r+0x4e>
 800b308:	f04f 30ff 	mov.w	r0, #4294967295
 800b30c:	b01d      	add	sp, #116	@ 0x74
 800b30e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b312:	89ab      	ldrh	r3, [r5, #12]
 800b314:	0598      	lsls	r0, r3, #22
 800b316:	d4f7      	bmi.n	800b308 <_vfiprintf_r+0x44>
 800b318:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b31a:	f7fe fd47 	bl	8009dac <__retarget_lock_release_recursive>
 800b31e:	e7f3      	b.n	800b308 <_vfiprintf_r+0x44>
 800b320:	2300      	movs	r3, #0
 800b322:	9309      	str	r3, [sp, #36]	@ 0x24
 800b324:	2320      	movs	r3, #32
 800b326:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b32a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b32e:	2330      	movs	r3, #48	@ 0x30
 800b330:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b4e0 <_vfiprintf_r+0x21c>
 800b334:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b338:	f04f 0901 	mov.w	r9, #1
 800b33c:	4623      	mov	r3, r4
 800b33e:	469a      	mov	sl, r3
 800b340:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b344:	b10a      	cbz	r2, 800b34a <_vfiprintf_r+0x86>
 800b346:	2a25      	cmp	r2, #37	@ 0x25
 800b348:	d1f9      	bne.n	800b33e <_vfiprintf_r+0x7a>
 800b34a:	ebba 0b04 	subs.w	fp, sl, r4
 800b34e:	d00b      	beq.n	800b368 <_vfiprintf_r+0xa4>
 800b350:	465b      	mov	r3, fp
 800b352:	4622      	mov	r2, r4
 800b354:	4629      	mov	r1, r5
 800b356:	4630      	mov	r0, r6
 800b358:	f7ff ffa1 	bl	800b29e <__sfputs_r>
 800b35c:	3001      	adds	r0, #1
 800b35e:	f000 80a7 	beq.w	800b4b0 <_vfiprintf_r+0x1ec>
 800b362:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b364:	445a      	add	r2, fp
 800b366:	9209      	str	r2, [sp, #36]	@ 0x24
 800b368:	f89a 3000 	ldrb.w	r3, [sl]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	f000 809f 	beq.w	800b4b0 <_vfiprintf_r+0x1ec>
 800b372:	2300      	movs	r3, #0
 800b374:	f04f 32ff 	mov.w	r2, #4294967295
 800b378:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b37c:	f10a 0a01 	add.w	sl, sl, #1
 800b380:	9304      	str	r3, [sp, #16]
 800b382:	9307      	str	r3, [sp, #28]
 800b384:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b388:	931a      	str	r3, [sp, #104]	@ 0x68
 800b38a:	4654      	mov	r4, sl
 800b38c:	2205      	movs	r2, #5
 800b38e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b392:	4853      	ldr	r0, [pc, #332]	@ (800b4e0 <_vfiprintf_r+0x21c>)
 800b394:	f7f4 ffa4 	bl	80002e0 <memchr>
 800b398:	9a04      	ldr	r2, [sp, #16]
 800b39a:	b9d8      	cbnz	r0, 800b3d4 <_vfiprintf_r+0x110>
 800b39c:	06d1      	lsls	r1, r2, #27
 800b39e:	bf44      	itt	mi
 800b3a0:	2320      	movmi	r3, #32
 800b3a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b3a6:	0713      	lsls	r3, r2, #28
 800b3a8:	bf44      	itt	mi
 800b3aa:	232b      	movmi	r3, #43	@ 0x2b
 800b3ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b3b0:	f89a 3000 	ldrb.w	r3, [sl]
 800b3b4:	2b2a      	cmp	r3, #42	@ 0x2a
 800b3b6:	d015      	beq.n	800b3e4 <_vfiprintf_r+0x120>
 800b3b8:	9a07      	ldr	r2, [sp, #28]
 800b3ba:	4654      	mov	r4, sl
 800b3bc:	2000      	movs	r0, #0
 800b3be:	f04f 0c0a 	mov.w	ip, #10
 800b3c2:	4621      	mov	r1, r4
 800b3c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b3c8:	3b30      	subs	r3, #48	@ 0x30
 800b3ca:	2b09      	cmp	r3, #9
 800b3cc:	d94b      	bls.n	800b466 <_vfiprintf_r+0x1a2>
 800b3ce:	b1b0      	cbz	r0, 800b3fe <_vfiprintf_r+0x13a>
 800b3d0:	9207      	str	r2, [sp, #28]
 800b3d2:	e014      	b.n	800b3fe <_vfiprintf_r+0x13a>
 800b3d4:	eba0 0308 	sub.w	r3, r0, r8
 800b3d8:	fa09 f303 	lsl.w	r3, r9, r3
 800b3dc:	4313      	orrs	r3, r2
 800b3de:	9304      	str	r3, [sp, #16]
 800b3e0:	46a2      	mov	sl, r4
 800b3e2:	e7d2      	b.n	800b38a <_vfiprintf_r+0xc6>
 800b3e4:	9b03      	ldr	r3, [sp, #12]
 800b3e6:	1d19      	adds	r1, r3, #4
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	9103      	str	r1, [sp, #12]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	bfbb      	ittet	lt
 800b3f0:	425b      	neglt	r3, r3
 800b3f2:	f042 0202 	orrlt.w	r2, r2, #2
 800b3f6:	9307      	strge	r3, [sp, #28]
 800b3f8:	9307      	strlt	r3, [sp, #28]
 800b3fa:	bfb8      	it	lt
 800b3fc:	9204      	strlt	r2, [sp, #16]
 800b3fe:	7823      	ldrb	r3, [r4, #0]
 800b400:	2b2e      	cmp	r3, #46	@ 0x2e
 800b402:	d10a      	bne.n	800b41a <_vfiprintf_r+0x156>
 800b404:	7863      	ldrb	r3, [r4, #1]
 800b406:	2b2a      	cmp	r3, #42	@ 0x2a
 800b408:	d132      	bne.n	800b470 <_vfiprintf_r+0x1ac>
 800b40a:	9b03      	ldr	r3, [sp, #12]
 800b40c:	1d1a      	adds	r2, r3, #4
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	9203      	str	r2, [sp, #12]
 800b412:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b416:	3402      	adds	r4, #2
 800b418:	9305      	str	r3, [sp, #20]
 800b41a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b4f0 <_vfiprintf_r+0x22c>
 800b41e:	7821      	ldrb	r1, [r4, #0]
 800b420:	2203      	movs	r2, #3
 800b422:	4650      	mov	r0, sl
 800b424:	f7f4 ff5c 	bl	80002e0 <memchr>
 800b428:	b138      	cbz	r0, 800b43a <_vfiprintf_r+0x176>
 800b42a:	9b04      	ldr	r3, [sp, #16]
 800b42c:	eba0 000a 	sub.w	r0, r0, sl
 800b430:	2240      	movs	r2, #64	@ 0x40
 800b432:	4082      	lsls	r2, r0
 800b434:	4313      	orrs	r3, r2
 800b436:	3401      	adds	r4, #1
 800b438:	9304      	str	r3, [sp, #16]
 800b43a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b43e:	4829      	ldr	r0, [pc, #164]	@ (800b4e4 <_vfiprintf_r+0x220>)
 800b440:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b444:	2206      	movs	r2, #6
 800b446:	f7f4 ff4b 	bl	80002e0 <memchr>
 800b44a:	2800      	cmp	r0, #0
 800b44c:	d03f      	beq.n	800b4ce <_vfiprintf_r+0x20a>
 800b44e:	4b26      	ldr	r3, [pc, #152]	@ (800b4e8 <_vfiprintf_r+0x224>)
 800b450:	bb1b      	cbnz	r3, 800b49a <_vfiprintf_r+0x1d6>
 800b452:	9b03      	ldr	r3, [sp, #12]
 800b454:	3307      	adds	r3, #7
 800b456:	f023 0307 	bic.w	r3, r3, #7
 800b45a:	3308      	adds	r3, #8
 800b45c:	9303      	str	r3, [sp, #12]
 800b45e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b460:	443b      	add	r3, r7
 800b462:	9309      	str	r3, [sp, #36]	@ 0x24
 800b464:	e76a      	b.n	800b33c <_vfiprintf_r+0x78>
 800b466:	fb0c 3202 	mla	r2, ip, r2, r3
 800b46a:	460c      	mov	r4, r1
 800b46c:	2001      	movs	r0, #1
 800b46e:	e7a8      	b.n	800b3c2 <_vfiprintf_r+0xfe>
 800b470:	2300      	movs	r3, #0
 800b472:	3401      	adds	r4, #1
 800b474:	9305      	str	r3, [sp, #20]
 800b476:	4619      	mov	r1, r3
 800b478:	f04f 0c0a 	mov.w	ip, #10
 800b47c:	4620      	mov	r0, r4
 800b47e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b482:	3a30      	subs	r2, #48	@ 0x30
 800b484:	2a09      	cmp	r2, #9
 800b486:	d903      	bls.n	800b490 <_vfiprintf_r+0x1cc>
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d0c6      	beq.n	800b41a <_vfiprintf_r+0x156>
 800b48c:	9105      	str	r1, [sp, #20]
 800b48e:	e7c4      	b.n	800b41a <_vfiprintf_r+0x156>
 800b490:	fb0c 2101 	mla	r1, ip, r1, r2
 800b494:	4604      	mov	r4, r0
 800b496:	2301      	movs	r3, #1
 800b498:	e7f0      	b.n	800b47c <_vfiprintf_r+0x1b8>
 800b49a:	ab03      	add	r3, sp, #12
 800b49c:	9300      	str	r3, [sp, #0]
 800b49e:	462a      	mov	r2, r5
 800b4a0:	4b12      	ldr	r3, [pc, #72]	@ (800b4ec <_vfiprintf_r+0x228>)
 800b4a2:	a904      	add	r1, sp, #16
 800b4a4:	4630      	mov	r0, r6
 800b4a6:	f7fd fe53 	bl	8009150 <_printf_float>
 800b4aa:	4607      	mov	r7, r0
 800b4ac:	1c78      	adds	r0, r7, #1
 800b4ae:	d1d6      	bne.n	800b45e <_vfiprintf_r+0x19a>
 800b4b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b4b2:	07d9      	lsls	r1, r3, #31
 800b4b4:	d405      	bmi.n	800b4c2 <_vfiprintf_r+0x1fe>
 800b4b6:	89ab      	ldrh	r3, [r5, #12]
 800b4b8:	059a      	lsls	r2, r3, #22
 800b4ba:	d402      	bmi.n	800b4c2 <_vfiprintf_r+0x1fe>
 800b4bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b4be:	f7fe fc75 	bl	8009dac <__retarget_lock_release_recursive>
 800b4c2:	89ab      	ldrh	r3, [r5, #12]
 800b4c4:	065b      	lsls	r3, r3, #25
 800b4c6:	f53f af1f 	bmi.w	800b308 <_vfiprintf_r+0x44>
 800b4ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b4cc:	e71e      	b.n	800b30c <_vfiprintf_r+0x48>
 800b4ce:	ab03      	add	r3, sp, #12
 800b4d0:	9300      	str	r3, [sp, #0]
 800b4d2:	462a      	mov	r2, r5
 800b4d4:	4b05      	ldr	r3, [pc, #20]	@ (800b4ec <_vfiprintf_r+0x228>)
 800b4d6:	a904      	add	r1, sp, #16
 800b4d8:	4630      	mov	r0, r6
 800b4da:	f7fe f8c1 	bl	8009660 <_printf_i>
 800b4de:	e7e4      	b.n	800b4aa <_vfiprintf_r+0x1e6>
 800b4e0:	0800bbaa 	.word	0x0800bbaa
 800b4e4:	0800bbb4 	.word	0x0800bbb4
 800b4e8:	08009151 	.word	0x08009151
 800b4ec:	0800b29f 	.word	0x0800b29f
 800b4f0:	0800bbb0 	.word	0x0800bbb0

0800b4f4 <__sflush_r>:
 800b4f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b4f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4fc:	0716      	lsls	r6, r2, #28
 800b4fe:	4605      	mov	r5, r0
 800b500:	460c      	mov	r4, r1
 800b502:	d454      	bmi.n	800b5ae <__sflush_r+0xba>
 800b504:	684b      	ldr	r3, [r1, #4]
 800b506:	2b00      	cmp	r3, #0
 800b508:	dc02      	bgt.n	800b510 <__sflush_r+0x1c>
 800b50a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	dd48      	ble.n	800b5a2 <__sflush_r+0xae>
 800b510:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b512:	2e00      	cmp	r6, #0
 800b514:	d045      	beq.n	800b5a2 <__sflush_r+0xae>
 800b516:	2300      	movs	r3, #0
 800b518:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b51c:	682f      	ldr	r7, [r5, #0]
 800b51e:	6a21      	ldr	r1, [r4, #32]
 800b520:	602b      	str	r3, [r5, #0]
 800b522:	d030      	beq.n	800b586 <__sflush_r+0x92>
 800b524:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b526:	89a3      	ldrh	r3, [r4, #12]
 800b528:	0759      	lsls	r1, r3, #29
 800b52a:	d505      	bpl.n	800b538 <__sflush_r+0x44>
 800b52c:	6863      	ldr	r3, [r4, #4]
 800b52e:	1ad2      	subs	r2, r2, r3
 800b530:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b532:	b10b      	cbz	r3, 800b538 <__sflush_r+0x44>
 800b534:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b536:	1ad2      	subs	r2, r2, r3
 800b538:	2300      	movs	r3, #0
 800b53a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b53c:	6a21      	ldr	r1, [r4, #32]
 800b53e:	4628      	mov	r0, r5
 800b540:	47b0      	blx	r6
 800b542:	1c43      	adds	r3, r0, #1
 800b544:	89a3      	ldrh	r3, [r4, #12]
 800b546:	d106      	bne.n	800b556 <__sflush_r+0x62>
 800b548:	6829      	ldr	r1, [r5, #0]
 800b54a:	291d      	cmp	r1, #29
 800b54c:	d82b      	bhi.n	800b5a6 <__sflush_r+0xb2>
 800b54e:	4a2a      	ldr	r2, [pc, #168]	@ (800b5f8 <__sflush_r+0x104>)
 800b550:	40ca      	lsrs	r2, r1
 800b552:	07d6      	lsls	r6, r2, #31
 800b554:	d527      	bpl.n	800b5a6 <__sflush_r+0xb2>
 800b556:	2200      	movs	r2, #0
 800b558:	6062      	str	r2, [r4, #4]
 800b55a:	04d9      	lsls	r1, r3, #19
 800b55c:	6922      	ldr	r2, [r4, #16]
 800b55e:	6022      	str	r2, [r4, #0]
 800b560:	d504      	bpl.n	800b56c <__sflush_r+0x78>
 800b562:	1c42      	adds	r2, r0, #1
 800b564:	d101      	bne.n	800b56a <__sflush_r+0x76>
 800b566:	682b      	ldr	r3, [r5, #0]
 800b568:	b903      	cbnz	r3, 800b56c <__sflush_r+0x78>
 800b56a:	6560      	str	r0, [r4, #84]	@ 0x54
 800b56c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b56e:	602f      	str	r7, [r5, #0]
 800b570:	b1b9      	cbz	r1, 800b5a2 <__sflush_r+0xae>
 800b572:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b576:	4299      	cmp	r1, r3
 800b578:	d002      	beq.n	800b580 <__sflush_r+0x8c>
 800b57a:	4628      	mov	r0, r5
 800b57c:	f7ff f9fe 	bl	800a97c <_free_r>
 800b580:	2300      	movs	r3, #0
 800b582:	6363      	str	r3, [r4, #52]	@ 0x34
 800b584:	e00d      	b.n	800b5a2 <__sflush_r+0xae>
 800b586:	2301      	movs	r3, #1
 800b588:	4628      	mov	r0, r5
 800b58a:	47b0      	blx	r6
 800b58c:	4602      	mov	r2, r0
 800b58e:	1c50      	adds	r0, r2, #1
 800b590:	d1c9      	bne.n	800b526 <__sflush_r+0x32>
 800b592:	682b      	ldr	r3, [r5, #0]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d0c6      	beq.n	800b526 <__sflush_r+0x32>
 800b598:	2b1d      	cmp	r3, #29
 800b59a:	d001      	beq.n	800b5a0 <__sflush_r+0xac>
 800b59c:	2b16      	cmp	r3, #22
 800b59e:	d11e      	bne.n	800b5de <__sflush_r+0xea>
 800b5a0:	602f      	str	r7, [r5, #0]
 800b5a2:	2000      	movs	r0, #0
 800b5a4:	e022      	b.n	800b5ec <__sflush_r+0xf8>
 800b5a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b5aa:	b21b      	sxth	r3, r3
 800b5ac:	e01b      	b.n	800b5e6 <__sflush_r+0xf2>
 800b5ae:	690f      	ldr	r7, [r1, #16]
 800b5b0:	2f00      	cmp	r7, #0
 800b5b2:	d0f6      	beq.n	800b5a2 <__sflush_r+0xae>
 800b5b4:	0793      	lsls	r3, r2, #30
 800b5b6:	680e      	ldr	r6, [r1, #0]
 800b5b8:	bf08      	it	eq
 800b5ba:	694b      	ldreq	r3, [r1, #20]
 800b5bc:	600f      	str	r7, [r1, #0]
 800b5be:	bf18      	it	ne
 800b5c0:	2300      	movne	r3, #0
 800b5c2:	eba6 0807 	sub.w	r8, r6, r7
 800b5c6:	608b      	str	r3, [r1, #8]
 800b5c8:	f1b8 0f00 	cmp.w	r8, #0
 800b5cc:	dde9      	ble.n	800b5a2 <__sflush_r+0xae>
 800b5ce:	6a21      	ldr	r1, [r4, #32]
 800b5d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b5d2:	4643      	mov	r3, r8
 800b5d4:	463a      	mov	r2, r7
 800b5d6:	4628      	mov	r0, r5
 800b5d8:	47b0      	blx	r6
 800b5da:	2800      	cmp	r0, #0
 800b5dc:	dc08      	bgt.n	800b5f0 <__sflush_r+0xfc>
 800b5de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b5e6:	81a3      	strh	r3, [r4, #12]
 800b5e8:	f04f 30ff 	mov.w	r0, #4294967295
 800b5ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5f0:	4407      	add	r7, r0
 800b5f2:	eba8 0800 	sub.w	r8, r8, r0
 800b5f6:	e7e7      	b.n	800b5c8 <__sflush_r+0xd4>
 800b5f8:	20400001 	.word	0x20400001

0800b5fc <_fflush_r>:
 800b5fc:	b538      	push	{r3, r4, r5, lr}
 800b5fe:	690b      	ldr	r3, [r1, #16]
 800b600:	4605      	mov	r5, r0
 800b602:	460c      	mov	r4, r1
 800b604:	b913      	cbnz	r3, 800b60c <_fflush_r+0x10>
 800b606:	2500      	movs	r5, #0
 800b608:	4628      	mov	r0, r5
 800b60a:	bd38      	pop	{r3, r4, r5, pc}
 800b60c:	b118      	cbz	r0, 800b616 <_fflush_r+0x1a>
 800b60e:	6a03      	ldr	r3, [r0, #32]
 800b610:	b90b      	cbnz	r3, 800b616 <_fflush_r+0x1a>
 800b612:	f7fe f9cf 	bl	80099b4 <__sinit>
 800b616:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d0f3      	beq.n	800b606 <_fflush_r+0xa>
 800b61e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b620:	07d0      	lsls	r0, r2, #31
 800b622:	d404      	bmi.n	800b62e <_fflush_r+0x32>
 800b624:	0599      	lsls	r1, r3, #22
 800b626:	d402      	bmi.n	800b62e <_fflush_r+0x32>
 800b628:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b62a:	f7fe fbbe 	bl	8009daa <__retarget_lock_acquire_recursive>
 800b62e:	4628      	mov	r0, r5
 800b630:	4621      	mov	r1, r4
 800b632:	f7ff ff5f 	bl	800b4f4 <__sflush_r>
 800b636:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b638:	07da      	lsls	r2, r3, #31
 800b63a:	4605      	mov	r5, r0
 800b63c:	d4e4      	bmi.n	800b608 <_fflush_r+0xc>
 800b63e:	89a3      	ldrh	r3, [r4, #12]
 800b640:	059b      	lsls	r3, r3, #22
 800b642:	d4e1      	bmi.n	800b608 <_fflush_r+0xc>
 800b644:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b646:	f7fe fbb1 	bl	8009dac <__retarget_lock_release_recursive>
 800b64a:	e7dd      	b.n	800b608 <_fflush_r+0xc>

0800b64c <__swhatbuf_r>:
 800b64c:	b570      	push	{r4, r5, r6, lr}
 800b64e:	460c      	mov	r4, r1
 800b650:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b654:	2900      	cmp	r1, #0
 800b656:	b096      	sub	sp, #88	@ 0x58
 800b658:	4615      	mov	r5, r2
 800b65a:	461e      	mov	r6, r3
 800b65c:	da0d      	bge.n	800b67a <__swhatbuf_r+0x2e>
 800b65e:	89a3      	ldrh	r3, [r4, #12]
 800b660:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b664:	f04f 0100 	mov.w	r1, #0
 800b668:	bf14      	ite	ne
 800b66a:	2340      	movne	r3, #64	@ 0x40
 800b66c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b670:	2000      	movs	r0, #0
 800b672:	6031      	str	r1, [r6, #0]
 800b674:	602b      	str	r3, [r5, #0]
 800b676:	b016      	add	sp, #88	@ 0x58
 800b678:	bd70      	pop	{r4, r5, r6, pc}
 800b67a:	466a      	mov	r2, sp
 800b67c:	f000 f848 	bl	800b710 <_fstat_r>
 800b680:	2800      	cmp	r0, #0
 800b682:	dbec      	blt.n	800b65e <__swhatbuf_r+0x12>
 800b684:	9901      	ldr	r1, [sp, #4]
 800b686:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b68a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b68e:	4259      	negs	r1, r3
 800b690:	4159      	adcs	r1, r3
 800b692:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b696:	e7eb      	b.n	800b670 <__swhatbuf_r+0x24>

0800b698 <__smakebuf_r>:
 800b698:	898b      	ldrh	r3, [r1, #12]
 800b69a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b69c:	079d      	lsls	r5, r3, #30
 800b69e:	4606      	mov	r6, r0
 800b6a0:	460c      	mov	r4, r1
 800b6a2:	d507      	bpl.n	800b6b4 <__smakebuf_r+0x1c>
 800b6a4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b6a8:	6023      	str	r3, [r4, #0]
 800b6aa:	6123      	str	r3, [r4, #16]
 800b6ac:	2301      	movs	r3, #1
 800b6ae:	6163      	str	r3, [r4, #20]
 800b6b0:	b003      	add	sp, #12
 800b6b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6b4:	ab01      	add	r3, sp, #4
 800b6b6:	466a      	mov	r2, sp
 800b6b8:	f7ff ffc8 	bl	800b64c <__swhatbuf_r>
 800b6bc:	9f00      	ldr	r7, [sp, #0]
 800b6be:	4605      	mov	r5, r0
 800b6c0:	4639      	mov	r1, r7
 800b6c2:	4630      	mov	r0, r6
 800b6c4:	f7ff f9ce 	bl	800aa64 <_malloc_r>
 800b6c8:	b948      	cbnz	r0, 800b6de <__smakebuf_r+0x46>
 800b6ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6ce:	059a      	lsls	r2, r3, #22
 800b6d0:	d4ee      	bmi.n	800b6b0 <__smakebuf_r+0x18>
 800b6d2:	f023 0303 	bic.w	r3, r3, #3
 800b6d6:	f043 0302 	orr.w	r3, r3, #2
 800b6da:	81a3      	strh	r3, [r4, #12]
 800b6dc:	e7e2      	b.n	800b6a4 <__smakebuf_r+0xc>
 800b6de:	89a3      	ldrh	r3, [r4, #12]
 800b6e0:	6020      	str	r0, [r4, #0]
 800b6e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b6e6:	81a3      	strh	r3, [r4, #12]
 800b6e8:	9b01      	ldr	r3, [sp, #4]
 800b6ea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b6ee:	b15b      	cbz	r3, 800b708 <__smakebuf_r+0x70>
 800b6f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b6f4:	4630      	mov	r0, r6
 800b6f6:	f000 f81d 	bl	800b734 <_isatty_r>
 800b6fa:	b128      	cbz	r0, 800b708 <__smakebuf_r+0x70>
 800b6fc:	89a3      	ldrh	r3, [r4, #12]
 800b6fe:	f023 0303 	bic.w	r3, r3, #3
 800b702:	f043 0301 	orr.w	r3, r3, #1
 800b706:	81a3      	strh	r3, [r4, #12]
 800b708:	89a3      	ldrh	r3, [r4, #12]
 800b70a:	431d      	orrs	r5, r3
 800b70c:	81a5      	strh	r5, [r4, #12]
 800b70e:	e7cf      	b.n	800b6b0 <__smakebuf_r+0x18>

0800b710 <_fstat_r>:
 800b710:	b538      	push	{r3, r4, r5, lr}
 800b712:	4d07      	ldr	r5, [pc, #28]	@ (800b730 <_fstat_r+0x20>)
 800b714:	2300      	movs	r3, #0
 800b716:	4604      	mov	r4, r0
 800b718:	4608      	mov	r0, r1
 800b71a:	4611      	mov	r1, r2
 800b71c:	602b      	str	r3, [r5, #0]
 800b71e:	f7f5 fa73 	bl	8000c08 <_fstat>
 800b722:	1c43      	adds	r3, r0, #1
 800b724:	d102      	bne.n	800b72c <_fstat_r+0x1c>
 800b726:	682b      	ldr	r3, [r5, #0]
 800b728:	b103      	cbz	r3, 800b72c <_fstat_r+0x1c>
 800b72a:	6023      	str	r3, [r4, #0]
 800b72c:	bd38      	pop	{r3, r4, r5, pc}
 800b72e:	bf00      	nop
 800b730:	24000490 	.word	0x24000490

0800b734 <_isatty_r>:
 800b734:	b538      	push	{r3, r4, r5, lr}
 800b736:	4d06      	ldr	r5, [pc, #24]	@ (800b750 <_isatty_r+0x1c>)
 800b738:	2300      	movs	r3, #0
 800b73a:	4604      	mov	r4, r0
 800b73c:	4608      	mov	r0, r1
 800b73e:	602b      	str	r3, [r5, #0]
 800b740:	f7f5 fa72 	bl	8000c28 <_isatty>
 800b744:	1c43      	adds	r3, r0, #1
 800b746:	d102      	bne.n	800b74e <_isatty_r+0x1a>
 800b748:	682b      	ldr	r3, [r5, #0]
 800b74a:	b103      	cbz	r3, 800b74e <_isatty_r+0x1a>
 800b74c:	6023      	str	r3, [r4, #0]
 800b74e:	bd38      	pop	{r3, r4, r5, pc}
 800b750:	24000490 	.word	0x24000490

0800b754 <_sbrk_r>:
 800b754:	b538      	push	{r3, r4, r5, lr}
 800b756:	4d06      	ldr	r5, [pc, #24]	@ (800b770 <_sbrk_r+0x1c>)
 800b758:	2300      	movs	r3, #0
 800b75a:	4604      	mov	r4, r0
 800b75c:	4608      	mov	r0, r1
 800b75e:	602b      	str	r3, [r5, #0]
 800b760:	f7f5 fa7a 	bl	8000c58 <_sbrk>
 800b764:	1c43      	adds	r3, r0, #1
 800b766:	d102      	bne.n	800b76e <_sbrk_r+0x1a>
 800b768:	682b      	ldr	r3, [r5, #0]
 800b76a:	b103      	cbz	r3, 800b76e <_sbrk_r+0x1a>
 800b76c:	6023      	str	r3, [r4, #0]
 800b76e:	bd38      	pop	{r3, r4, r5, pc}
 800b770:	24000490 	.word	0x24000490

0800b774 <memcpy>:
 800b774:	440a      	add	r2, r1
 800b776:	4291      	cmp	r1, r2
 800b778:	f100 33ff 	add.w	r3, r0, #4294967295
 800b77c:	d100      	bne.n	800b780 <memcpy+0xc>
 800b77e:	4770      	bx	lr
 800b780:	b510      	push	{r4, lr}
 800b782:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b786:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b78a:	4291      	cmp	r1, r2
 800b78c:	d1f9      	bne.n	800b782 <memcpy+0xe>
 800b78e:	bd10      	pop	{r4, pc}

0800b790 <__assert_func>:
 800b790:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b792:	4614      	mov	r4, r2
 800b794:	461a      	mov	r2, r3
 800b796:	4b09      	ldr	r3, [pc, #36]	@ (800b7bc <__assert_func+0x2c>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	4605      	mov	r5, r0
 800b79c:	68d8      	ldr	r0, [r3, #12]
 800b79e:	b14c      	cbz	r4, 800b7b4 <__assert_func+0x24>
 800b7a0:	4b07      	ldr	r3, [pc, #28]	@ (800b7c0 <__assert_func+0x30>)
 800b7a2:	9100      	str	r1, [sp, #0]
 800b7a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b7a8:	4906      	ldr	r1, [pc, #24]	@ (800b7c4 <__assert_func+0x34>)
 800b7aa:	462b      	mov	r3, r5
 800b7ac:	f000 f842 	bl	800b834 <fiprintf>
 800b7b0:	f000 f852 	bl	800b858 <abort>
 800b7b4:	4b04      	ldr	r3, [pc, #16]	@ (800b7c8 <__assert_func+0x38>)
 800b7b6:	461c      	mov	r4, r3
 800b7b8:	e7f3      	b.n	800b7a2 <__assert_func+0x12>
 800b7ba:	bf00      	nop
 800b7bc:	2400001c 	.word	0x2400001c
 800b7c0:	0800bbc5 	.word	0x0800bbc5
 800b7c4:	0800bbd2 	.word	0x0800bbd2
 800b7c8:	0800bc00 	.word	0x0800bc00

0800b7cc <_calloc_r>:
 800b7cc:	b570      	push	{r4, r5, r6, lr}
 800b7ce:	fba1 5402 	umull	r5, r4, r1, r2
 800b7d2:	b934      	cbnz	r4, 800b7e2 <_calloc_r+0x16>
 800b7d4:	4629      	mov	r1, r5
 800b7d6:	f7ff f945 	bl	800aa64 <_malloc_r>
 800b7da:	4606      	mov	r6, r0
 800b7dc:	b928      	cbnz	r0, 800b7ea <_calloc_r+0x1e>
 800b7de:	4630      	mov	r0, r6
 800b7e0:	bd70      	pop	{r4, r5, r6, pc}
 800b7e2:	220c      	movs	r2, #12
 800b7e4:	6002      	str	r2, [r0, #0]
 800b7e6:	2600      	movs	r6, #0
 800b7e8:	e7f9      	b.n	800b7de <_calloc_r+0x12>
 800b7ea:	462a      	mov	r2, r5
 800b7ec:	4621      	mov	r1, r4
 800b7ee:	f7fe fa5f 	bl	8009cb0 <memset>
 800b7f2:	e7f4      	b.n	800b7de <_calloc_r+0x12>

0800b7f4 <__ascii_mbtowc>:
 800b7f4:	b082      	sub	sp, #8
 800b7f6:	b901      	cbnz	r1, 800b7fa <__ascii_mbtowc+0x6>
 800b7f8:	a901      	add	r1, sp, #4
 800b7fa:	b142      	cbz	r2, 800b80e <__ascii_mbtowc+0x1a>
 800b7fc:	b14b      	cbz	r3, 800b812 <__ascii_mbtowc+0x1e>
 800b7fe:	7813      	ldrb	r3, [r2, #0]
 800b800:	600b      	str	r3, [r1, #0]
 800b802:	7812      	ldrb	r2, [r2, #0]
 800b804:	1e10      	subs	r0, r2, #0
 800b806:	bf18      	it	ne
 800b808:	2001      	movne	r0, #1
 800b80a:	b002      	add	sp, #8
 800b80c:	4770      	bx	lr
 800b80e:	4610      	mov	r0, r2
 800b810:	e7fb      	b.n	800b80a <__ascii_mbtowc+0x16>
 800b812:	f06f 0001 	mvn.w	r0, #1
 800b816:	e7f8      	b.n	800b80a <__ascii_mbtowc+0x16>

0800b818 <__ascii_wctomb>:
 800b818:	4603      	mov	r3, r0
 800b81a:	4608      	mov	r0, r1
 800b81c:	b141      	cbz	r1, 800b830 <__ascii_wctomb+0x18>
 800b81e:	2aff      	cmp	r2, #255	@ 0xff
 800b820:	d904      	bls.n	800b82c <__ascii_wctomb+0x14>
 800b822:	228a      	movs	r2, #138	@ 0x8a
 800b824:	601a      	str	r2, [r3, #0]
 800b826:	f04f 30ff 	mov.w	r0, #4294967295
 800b82a:	4770      	bx	lr
 800b82c:	700a      	strb	r2, [r1, #0]
 800b82e:	2001      	movs	r0, #1
 800b830:	4770      	bx	lr
	...

0800b834 <fiprintf>:
 800b834:	b40e      	push	{r1, r2, r3}
 800b836:	b503      	push	{r0, r1, lr}
 800b838:	4601      	mov	r1, r0
 800b83a:	ab03      	add	r3, sp, #12
 800b83c:	4805      	ldr	r0, [pc, #20]	@ (800b854 <fiprintf+0x20>)
 800b83e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b842:	6800      	ldr	r0, [r0, #0]
 800b844:	9301      	str	r3, [sp, #4]
 800b846:	f7ff fd3d 	bl	800b2c4 <_vfiprintf_r>
 800b84a:	b002      	add	sp, #8
 800b84c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b850:	b003      	add	sp, #12
 800b852:	4770      	bx	lr
 800b854:	2400001c 	.word	0x2400001c

0800b858 <abort>:
 800b858:	b508      	push	{r3, lr}
 800b85a:	2006      	movs	r0, #6
 800b85c:	f000 f82c 	bl	800b8b8 <raise>
 800b860:	2001      	movs	r0, #1
 800b862:	f7f5 f981 	bl	8000b68 <_exit>

0800b866 <_raise_r>:
 800b866:	291f      	cmp	r1, #31
 800b868:	b538      	push	{r3, r4, r5, lr}
 800b86a:	4605      	mov	r5, r0
 800b86c:	460c      	mov	r4, r1
 800b86e:	d904      	bls.n	800b87a <_raise_r+0x14>
 800b870:	2316      	movs	r3, #22
 800b872:	6003      	str	r3, [r0, #0]
 800b874:	f04f 30ff 	mov.w	r0, #4294967295
 800b878:	bd38      	pop	{r3, r4, r5, pc}
 800b87a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b87c:	b112      	cbz	r2, 800b884 <_raise_r+0x1e>
 800b87e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b882:	b94b      	cbnz	r3, 800b898 <_raise_r+0x32>
 800b884:	4628      	mov	r0, r5
 800b886:	f000 f831 	bl	800b8ec <_getpid_r>
 800b88a:	4622      	mov	r2, r4
 800b88c:	4601      	mov	r1, r0
 800b88e:	4628      	mov	r0, r5
 800b890:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b894:	f000 b818 	b.w	800b8c8 <_kill_r>
 800b898:	2b01      	cmp	r3, #1
 800b89a:	d00a      	beq.n	800b8b2 <_raise_r+0x4c>
 800b89c:	1c59      	adds	r1, r3, #1
 800b89e:	d103      	bne.n	800b8a8 <_raise_r+0x42>
 800b8a0:	2316      	movs	r3, #22
 800b8a2:	6003      	str	r3, [r0, #0]
 800b8a4:	2001      	movs	r0, #1
 800b8a6:	e7e7      	b.n	800b878 <_raise_r+0x12>
 800b8a8:	2100      	movs	r1, #0
 800b8aa:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b8ae:	4620      	mov	r0, r4
 800b8b0:	4798      	blx	r3
 800b8b2:	2000      	movs	r0, #0
 800b8b4:	e7e0      	b.n	800b878 <_raise_r+0x12>
	...

0800b8b8 <raise>:
 800b8b8:	4b02      	ldr	r3, [pc, #8]	@ (800b8c4 <raise+0xc>)
 800b8ba:	4601      	mov	r1, r0
 800b8bc:	6818      	ldr	r0, [r3, #0]
 800b8be:	f7ff bfd2 	b.w	800b866 <_raise_r>
 800b8c2:	bf00      	nop
 800b8c4:	2400001c 	.word	0x2400001c

0800b8c8 <_kill_r>:
 800b8c8:	b538      	push	{r3, r4, r5, lr}
 800b8ca:	4d07      	ldr	r5, [pc, #28]	@ (800b8e8 <_kill_r+0x20>)
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	4604      	mov	r4, r0
 800b8d0:	4608      	mov	r0, r1
 800b8d2:	4611      	mov	r1, r2
 800b8d4:	602b      	str	r3, [r5, #0]
 800b8d6:	f7f5 f937 	bl	8000b48 <_kill>
 800b8da:	1c43      	adds	r3, r0, #1
 800b8dc:	d102      	bne.n	800b8e4 <_kill_r+0x1c>
 800b8de:	682b      	ldr	r3, [r5, #0]
 800b8e0:	b103      	cbz	r3, 800b8e4 <_kill_r+0x1c>
 800b8e2:	6023      	str	r3, [r4, #0]
 800b8e4:	bd38      	pop	{r3, r4, r5, pc}
 800b8e6:	bf00      	nop
 800b8e8:	24000490 	.word	0x24000490

0800b8ec <_getpid_r>:
 800b8ec:	f7f5 b924 	b.w	8000b38 <_getpid>

0800b8f0 <_init>:
 800b8f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8f2:	bf00      	nop
 800b8f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8f6:	bc08      	pop	{r3}
 800b8f8:	469e      	mov	lr, r3
 800b8fa:	4770      	bx	lr

0800b8fc <_fini>:
 800b8fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8fe:	bf00      	nop
 800b900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b902:	bc08      	pop	{r3}
 800b904:	469e      	mov	lr, r3
 800b906:	4770      	bx	lr
