
7.BTIM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007890  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08007b28  08007b28  00008b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007b7c  08007b7c  00008b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007b84  08007b84  00008b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08007b88  08007b88  00008b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  24000000  08007b8c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000264  2400006c  08007bf8  0000906c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240002d0  08007bf8  000092d0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001819b  00000000  00000000  0000909a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000032b3  00000000  00000000  00021235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001240  00000000  00000000  000244e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000e15  00000000  00000000  00025728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a1dc  00000000  00000000  0002653d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001eb19  00000000  00000000  00060719  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001686ce  00000000  00000000  0007f232  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001e7900  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000511c  00000000  00000000  001e7944  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005a  00000000  00000000  001eca60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2400006c 	.word	0x2400006c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08007b10 	.word	0x08007b10

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000070 	.word	0x24000070
 80002d4:	08007b10 	.word	0x08007b10

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b988 	b.w	8000600 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	468e      	mov	lr, r1
 8000310:	4604      	mov	r4, r0
 8000312:	4688      	mov	r8, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d962      	bls.n	80003e4 <__udivmoddi4+0xdc>
 800031e:	fab2 f682 	clz	r6, r2
 8000322:	b14e      	cbz	r6, 8000338 <__udivmoddi4+0x30>
 8000324:	f1c6 0320 	rsb	r3, r6, #32
 8000328:	fa01 f806 	lsl.w	r8, r1, r6
 800032c:	fa20 f303 	lsr.w	r3, r0, r3
 8000330:	40b7      	lsls	r7, r6
 8000332:	ea43 0808 	orr.w	r8, r3, r8
 8000336:	40b4      	lsls	r4, r6
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	fbb8 f1fe 	udiv	r1, r8, lr
 8000344:	0c23      	lsrs	r3, r4, #16
 8000346:	fb0e 8811 	mls	r8, lr, r1, r8
 800034a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034e:	fb01 f20c 	mul.w	r2, r1, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d909      	bls.n	800036a <__udivmoddi4+0x62>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f101 30ff 	add.w	r0, r1, #4294967295
 800035c:	f080 80ea 	bcs.w	8000534 <__udivmoddi4+0x22c>
 8000360:	429a      	cmp	r2, r3
 8000362:	f240 80e7 	bls.w	8000534 <__udivmoddi4+0x22c>
 8000366:	3902      	subs	r1, #2
 8000368:	443b      	add	r3, r7
 800036a:	1a9a      	subs	r2, r3, r2
 800036c:	b2a3      	uxth	r3, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800037a:	fb00 fc0c 	mul.w	ip, r0, ip
 800037e:	459c      	cmp	ip, r3
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x8e>
 8000382:	18fb      	adds	r3, r7, r3
 8000384:	f100 32ff 	add.w	r2, r0, #4294967295
 8000388:	f080 80d6 	bcs.w	8000538 <__udivmoddi4+0x230>
 800038c:	459c      	cmp	ip, r3
 800038e:	f240 80d3 	bls.w	8000538 <__udivmoddi4+0x230>
 8000392:	443b      	add	r3, r7
 8000394:	3802      	subs	r0, #2
 8000396:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039a:	eba3 030c 	sub.w	r3, r3, ip
 800039e:	2100      	movs	r1, #0
 80003a0:	b11d      	cbz	r5, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40f3      	lsrs	r3, r6
 80003a4:	2200      	movs	r2, #0
 80003a6:	e9c5 3200 	strd	r3, r2, [r5]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d905      	bls.n	80003be <__udivmoddi4+0xb6>
 80003b2:	b10d      	cbz	r5, 80003b8 <__udivmoddi4+0xb0>
 80003b4:	e9c5 0100 	strd	r0, r1, [r5]
 80003b8:	2100      	movs	r1, #0
 80003ba:	4608      	mov	r0, r1
 80003bc:	e7f5      	b.n	80003aa <__udivmoddi4+0xa2>
 80003be:	fab3 f183 	clz	r1, r3
 80003c2:	2900      	cmp	r1, #0
 80003c4:	d146      	bne.n	8000454 <__udivmoddi4+0x14c>
 80003c6:	4573      	cmp	r3, lr
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xc8>
 80003ca:	4282      	cmp	r2, r0
 80003cc:	f200 8105 	bhi.w	80005da <__udivmoddi4+0x2d2>
 80003d0:	1a84      	subs	r4, r0, r2
 80003d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	4690      	mov	r8, r2
 80003da:	2d00      	cmp	r5, #0
 80003dc:	d0e5      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003de:	e9c5 4800 	strd	r4, r8, [r5]
 80003e2:	e7e2      	b.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	2a00      	cmp	r2, #0
 80003e6:	f000 8090 	beq.w	800050a <__udivmoddi4+0x202>
 80003ea:	fab2 f682 	clz	r6, r2
 80003ee:	2e00      	cmp	r6, #0
 80003f0:	f040 80a4 	bne.w	800053c <__udivmoddi4+0x234>
 80003f4:	1a8a      	subs	r2, r1, r2
 80003f6:	0c03      	lsrs	r3, r0, #16
 80003f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fc:	b280      	uxth	r0, r0
 80003fe:	b2bc      	uxth	r4, r7
 8000400:	2101      	movs	r1, #1
 8000402:	fbb2 fcfe 	udiv	ip, r2, lr
 8000406:	fb0e 221c 	mls	r2, lr, ip, r2
 800040a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800040e:	fb04 f20c 	mul.w	r2, r4, ip
 8000412:	429a      	cmp	r2, r3
 8000414:	d907      	bls.n	8000426 <__udivmoddi4+0x11e>
 8000416:	18fb      	adds	r3, r7, r3
 8000418:	f10c 38ff 	add.w	r8, ip, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x11c>
 800041e:	429a      	cmp	r2, r3
 8000420:	f200 80e0 	bhi.w	80005e4 <__udivmoddi4+0x2dc>
 8000424:	46c4      	mov	ip, r8
 8000426:	1a9b      	subs	r3, r3, r2
 8000428:	fbb3 f2fe 	udiv	r2, r3, lr
 800042c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000430:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000434:	fb02 f404 	mul.w	r4, r2, r4
 8000438:	429c      	cmp	r4, r3
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x144>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x142>
 8000444:	429c      	cmp	r4, r3
 8000446:	f200 80ca 	bhi.w	80005de <__udivmoddi4+0x2d6>
 800044a:	4602      	mov	r2, r0
 800044c:	1b1b      	subs	r3, r3, r4
 800044e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000452:	e7a5      	b.n	80003a0 <__udivmoddi4+0x98>
 8000454:	f1c1 0620 	rsb	r6, r1, #32
 8000458:	408b      	lsls	r3, r1
 800045a:	fa22 f706 	lsr.w	r7, r2, r6
 800045e:	431f      	orrs	r7, r3
 8000460:	fa0e f401 	lsl.w	r4, lr, r1
 8000464:	fa20 f306 	lsr.w	r3, r0, r6
 8000468:	fa2e fe06 	lsr.w	lr, lr, r6
 800046c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000470:	4323      	orrs	r3, r4
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	fa1f fc87 	uxth.w	ip, r7
 800047a:	fbbe f0f9 	udiv	r0, lr, r9
 800047e:	0c1c      	lsrs	r4, r3, #16
 8000480:	fb09 ee10 	mls	lr, r9, r0, lr
 8000484:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000488:	fb00 fe0c 	mul.w	lr, r0, ip
 800048c:	45a6      	cmp	lr, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	d909      	bls.n	80004a8 <__udivmoddi4+0x1a0>
 8000494:	193c      	adds	r4, r7, r4
 8000496:	f100 3aff 	add.w	sl, r0, #4294967295
 800049a:	f080 809c 	bcs.w	80005d6 <__udivmoddi4+0x2ce>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f240 8099 	bls.w	80005d6 <__udivmoddi4+0x2ce>
 80004a4:	3802      	subs	r0, #2
 80004a6:	443c      	add	r4, r7
 80004a8:	eba4 040e 	sub.w	r4, r4, lr
 80004ac:	fa1f fe83 	uxth.w	lr, r3
 80004b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b4:	fb09 4413 	mls	r4, r9, r3, r4
 80004b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c0:	45a4      	cmp	ip, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x1ce>
 80004c4:	193c      	adds	r4, r7, r4
 80004c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80004ca:	f080 8082 	bcs.w	80005d2 <__udivmoddi4+0x2ca>
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d97f      	bls.n	80005d2 <__udivmoddi4+0x2ca>
 80004d2:	3b02      	subs	r3, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	fba0 ec02 	umull	lr, ip, r0, r2
 80004e2:	4564      	cmp	r4, ip
 80004e4:	4673      	mov	r3, lr
 80004e6:	46e1      	mov	r9, ip
 80004e8:	d362      	bcc.n	80005b0 <__udivmoddi4+0x2a8>
 80004ea:	d05f      	beq.n	80005ac <__udivmoddi4+0x2a4>
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x1fe>
 80004ee:	ebb8 0203 	subs.w	r2, r8, r3
 80004f2:	eb64 0409 	sbc.w	r4, r4, r9
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	431e      	orrs	r6, r3
 8000500:	40cc      	lsrs	r4, r1
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e74f      	b.n	80003aa <__udivmoddi4+0xa2>
 800050a:	fbb1 fcf2 	udiv	ip, r1, r2
 800050e:	0c01      	lsrs	r1, r0, #16
 8000510:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000514:	b280      	uxth	r0, r0
 8000516:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800051a:	463b      	mov	r3, r7
 800051c:	4638      	mov	r0, r7
 800051e:	463c      	mov	r4, r7
 8000520:	46b8      	mov	r8, r7
 8000522:	46be      	mov	lr, r7
 8000524:	2620      	movs	r6, #32
 8000526:	fbb1 f1f7 	udiv	r1, r1, r7
 800052a:	eba2 0208 	sub.w	r2, r2, r8
 800052e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000532:	e766      	b.n	8000402 <__udivmoddi4+0xfa>
 8000534:	4601      	mov	r1, r0
 8000536:	e718      	b.n	800036a <__udivmoddi4+0x62>
 8000538:	4610      	mov	r0, r2
 800053a:	e72c      	b.n	8000396 <__udivmoddi4+0x8e>
 800053c:	f1c6 0220 	rsb	r2, r6, #32
 8000540:	fa2e f302 	lsr.w	r3, lr, r2
 8000544:	40b7      	lsls	r7, r6
 8000546:	40b1      	lsls	r1, r6
 8000548:	fa20 f202 	lsr.w	r2, r0, r2
 800054c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000550:	430a      	orrs	r2, r1
 8000552:	fbb3 f8fe 	udiv	r8, r3, lr
 8000556:	b2bc      	uxth	r4, r7
 8000558:	fb0e 3318 	mls	r3, lr, r8, r3
 800055c:	0c11      	lsrs	r1, r2, #16
 800055e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000562:	fb08 f904 	mul.w	r9, r8, r4
 8000566:	40b0      	lsls	r0, r6
 8000568:	4589      	cmp	r9, r1
 800056a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800056e:	b280      	uxth	r0, r0
 8000570:	d93e      	bls.n	80005f0 <__udivmoddi4+0x2e8>
 8000572:	1879      	adds	r1, r7, r1
 8000574:	f108 3cff 	add.w	ip, r8, #4294967295
 8000578:	d201      	bcs.n	800057e <__udivmoddi4+0x276>
 800057a:	4589      	cmp	r9, r1
 800057c:	d81f      	bhi.n	80005be <__udivmoddi4+0x2b6>
 800057e:	eba1 0109 	sub.w	r1, r1, r9
 8000582:	fbb1 f9fe 	udiv	r9, r1, lr
 8000586:	fb09 f804 	mul.w	r8, r9, r4
 800058a:	fb0e 1119 	mls	r1, lr, r9, r1
 800058e:	b292      	uxth	r2, r2
 8000590:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000594:	4542      	cmp	r2, r8
 8000596:	d229      	bcs.n	80005ec <__udivmoddi4+0x2e4>
 8000598:	18ba      	adds	r2, r7, r2
 800059a:	f109 31ff 	add.w	r1, r9, #4294967295
 800059e:	d2c4      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a0:	4542      	cmp	r2, r8
 80005a2:	d2c2      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a4:	f1a9 0102 	sub.w	r1, r9, #2
 80005a8:	443a      	add	r2, r7
 80005aa:	e7be      	b.n	800052a <__udivmoddi4+0x222>
 80005ac:	45f0      	cmp	r8, lr
 80005ae:	d29d      	bcs.n	80004ec <__udivmoddi4+0x1e4>
 80005b0:	ebbe 0302 	subs.w	r3, lr, r2
 80005b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005b8:	3801      	subs	r0, #1
 80005ba:	46e1      	mov	r9, ip
 80005bc:	e796      	b.n	80004ec <__udivmoddi4+0x1e4>
 80005be:	eba7 0909 	sub.w	r9, r7, r9
 80005c2:	4449      	add	r1, r9
 80005c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80005c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80005cc:	fb09 f804 	mul.w	r8, r9, r4
 80005d0:	e7db      	b.n	800058a <__udivmoddi4+0x282>
 80005d2:	4673      	mov	r3, lr
 80005d4:	e77f      	b.n	80004d6 <__udivmoddi4+0x1ce>
 80005d6:	4650      	mov	r0, sl
 80005d8:	e766      	b.n	80004a8 <__udivmoddi4+0x1a0>
 80005da:	4608      	mov	r0, r1
 80005dc:	e6fd      	b.n	80003da <__udivmoddi4+0xd2>
 80005de:	443b      	add	r3, r7
 80005e0:	3a02      	subs	r2, #2
 80005e2:	e733      	b.n	800044c <__udivmoddi4+0x144>
 80005e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e8:	443b      	add	r3, r7
 80005ea:	e71c      	b.n	8000426 <__udivmoddi4+0x11e>
 80005ec:	4649      	mov	r1, r9
 80005ee:	e79c      	b.n	800052a <__udivmoddi4+0x222>
 80005f0:	eba1 0109 	sub.w	r1, r1, r9
 80005f4:	46c4      	mov	ip, r8
 80005f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80005fa:	fb09 f804 	mul.w	r8, r9, r4
 80005fe:	e7c4      	b.n	800058a <__udivmoddi4+0x282>

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <MX_BEEP_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_BEEP_GPIO_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b086      	sub	sp, #24
 8000608:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
 8000616:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000618:	4b12      	ldr	r3, [pc, #72]	@ (8000664 <MX_BEEP_GPIO_Init+0x60>)
 800061a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800061e:	4a11      	ldr	r2, [pc, #68]	@ (8000664 <MX_BEEP_GPIO_Init+0x60>)
 8000620:	f043 0310 	orr.w	r3, r3, #16
 8000624:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000628:	4b0e      	ldr	r3, [pc, #56]	@ (8000664 <MX_BEEP_GPIO_Init+0x60>)
 800062a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800062e:	f003 0310 	and.w	r3, r3, #16
 8000632:	603b      	str	r3, [r7, #0]
 8000634:	683b      	ldr	r3, [r7, #0]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BEEP_GPIO_Port, BEEP_Pin, GPIO_PIN_RESET);
 8000636:	2200      	movs	r2, #0
 8000638:	2110      	movs	r1, #16
 800063a:	480b      	ldr	r0, [pc, #44]	@ (8000668 <MX_BEEP_GPIO_Init+0x64>)
 800063c:	f001 fdde 	bl	80021fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BEEP_Pin */
  GPIO_InitStruct.Pin = BEEP_Pin;
 8000640:	2310      	movs	r3, #16
 8000642:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000644:	2301      	movs	r3, #1
 8000646:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000648:	2300      	movs	r3, #0
 800064a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064c:	2300      	movs	r3, #0
 800064e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000650:	1d3b      	adds	r3, r7, #4
 8000652:	4619      	mov	r1, r3
 8000654:	4804      	ldr	r0, [pc, #16]	@ (8000668 <MX_BEEP_GPIO_Init+0x64>)
 8000656:	f001 fc21 	bl	8001e9c <HAL_GPIO_Init>
}
 800065a:	bf00      	nop
 800065c:	3718      	adds	r7, #24
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	58024400 	.word	0x58024400
 8000668:	58021000 	.word	0x58021000

0800066c <MX_KEY_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_KEY_GPIO_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b086      	sub	sp, #24
 8000670:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000672:	1d3b      	adds	r3, r7, #4
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000680:	4b14      	ldr	r3, [pc, #80]	@ (80006d4 <MX_KEY_GPIO_Init+0x68>)
 8000682:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000686:	4a13      	ldr	r2, [pc, #76]	@ (80006d4 <MX_KEY_GPIO_Init+0x68>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000690:	4b10      	ldr	r3, [pc, #64]	@ (80006d4 <MX_KEY_GPIO_Init+0x68>)
 8000692:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	603b      	str	r3, [r7, #0]
 800069c:	683b      	ldr	r3, [r7, #0]
  /*Configure GPIO pin : WK_UP_Pin */
  GPIO_InitStruct.Pin = WK_UP_Pin;
 800069e:	2301      	movs	r3, #1
 80006a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006a2:	2300      	movs	r3, #0
 80006a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006a6:	2302      	movs	r3, #2
 80006a8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(WK_UP_GPIO_Port, &GPIO_InitStruct);
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	4619      	mov	r1, r3
 80006ae:	480a      	ldr	r0, [pc, #40]	@ (80006d8 <MX_KEY_GPIO_Init+0x6c>)
 80006b0:	f001 fbf4 	bl	8001e9c <HAL_GPIO_Init>
  /*Configure GPIO pins : KEY0_Pin KEY1_Pin */
  GPIO_InitStruct.Pin = KEY0_Pin|KEY1_Pin;
 80006b4:	f248 0302 	movw	r3, #32770	@ 0x8002
 80006b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ba:	2300      	movs	r3, #0
 80006bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006be:	2301      	movs	r3, #1
 80006c0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	4619      	mov	r1, r3
 80006c6:	4804      	ldr	r0, [pc, #16]	@ (80006d8 <MX_KEY_GPIO_Init+0x6c>)
 80006c8:	f001 fbe8 	bl	8001e9c <HAL_GPIO_Init>
}
 80006cc:	bf00      	nop
 80006ce:	3718      	adds	r7, #24
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	58024400 	.word	0x58024400
 80006d8:	58020000 	.word	0x58020000

080006dc <MX_LED_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_LED_GPIO_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b088      	sub	sp, #32
 80006e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e2:	f107 030c 	add.w	r3, r7, #12
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
 80006f0:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006f2:	4b24      	ldr	r3, [pc, #144]	@ (8000784 <MX_LED_GPIO_Init+0xa8>)
 80006f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006f8:	4a22      	ldr	r2, [pc, #136]	@ (8000784 <MX_LED_GPIO_Init+0xa8>)
 80006fa:	f043 0310 	orr.w	r3, r3, #16
 80006fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000702:	4b20      	ldr	r3, [pc, #128]	@ (8000784 <MX_LED_GPIO_Init+0xa8>)
 8000704:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000708:	f003 0310 	and.w	r3, r3, #16
 800070c:	60bb      	str	r3, [r7, #8]
 800070e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000710:	4b1c      	ldr	r3, [pc, #112]	@ (8000784 <MX_LED_GPIO_Init+0xa8>)
 8000712:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000716:	4a1b      	ldr	r2, [pc, #108]	@ (8000784 <MX_LED_GPIO_Init+0xa8>)
 8000718:	f043 0302 	orr.w	r3, r3, #2
 800071c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000720:	4b18      	ldr	r3, [pc, #96]	@ (8000784 <MX_LED_GPIO_Init+0xa8>)
 8000722:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000726:	f003 0302 	and.w	r3, r3, #2
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_Pin|LED2_Pin, GPIO_PIN_SET);
 800072e:	2201      	movs	r2, #1
 8000730:	2160      	movs	r1, #96	@ 0x60
 8000732:	4815      	ldr	r0, [pc, #84]	@ (8000788 <MX_LED_GPIO_Init+0xac>)
 8000734:	f001 fd62 	bl	80021fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 8000738:	2201      	movs	r2, #1
 800073a:	2110      	movs	r1, #16
 800073c:	4813      	ldr	r0, [pc, #76]	@ (800078c <MX_LED_GPIO_Init+0xb0>)
 800073e:	f001 fd5d 	bl	80021fc <HAL_GPIO_WritePin>
  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000742:	2360      	movs	r3, #96	@ 0x60
 8000744:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000746:	2301      	movs	r3, #1
 8000748:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074e:	2300      	movs	r3, #0
 8000750:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000752:	f107 030c 	add.w	r3, r7, #12
 8000756:	4619      	mov	r1, r3
 8000758:	480b      	ldr	r0, [pc, #44]	@ (8000788 <MX_LED_GPIO_Init+0xac>)
 800075a:	f001 fb9f 	bl	8001e9c <HAL_GPIO_Init>
  /*Configure GPIO pin : LED0_Pin */
  GPIO_InitStruct.Pin = LED0_Pin;
 800075e:	2310      	movs	r3, #16
 8000760:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000762:	2301      	movs	r3, #1
 8000764:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076a:	2300      	movs	r3, #0
 800076c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 800076e:	f107 030c 	add.w	r3, r7, #12
 8000772:	4619      	mov	r1, r3
 8000774:	4805      	ldr	r0, [pc, #20]	@ (800078c <MX_LED_GPIO_Init+0xb0>)
 8000776:	f001 fb91 	bl	8001e9c <HAL_GPIO_Init>
}
 800077a:	bf00      	nop
 800077c:	3720      	adds	r7, #32
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	58024400 	.word	0x58024400
 8000788:	58021000 	.word	0x58021000
 800078c:	58020400 	.word	0x58020400

08000790 <bsp_init>:
#include "bsp_init.h"

void bsp_init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
	MX_LED_GPIO_Init();
 8000794:	f7ff ffa2 	bl	80006dc <MX_LED_GPIO_Init>
	MX_BEEP_GPIO_Init();
 8000798:	f7ff ff34 	bl	8000604 <MX_BEEP_GPIO_Init>
	MX_KEY_GPIO_Init();
 800079c:	f7ff ff66 	bl	800066c <MX_KEY_GPIO_Init>
	// MX_EXTI_GPIO_Init();
	MX_USART1_UART_Init();
 80007a0:	f000 faf6 	bl	8000d90 <MX_USART1_UART_Init>
	// MX_IWDG1_Init(); // 溢出时间约1s
}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80007ac:	f000 f886 	bl	80008bc <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b0:	f000 fbea 	bl	8000f88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b4:	f000 f806 	bl	80007c4 <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  bsp_init();
 80007b8:	f7ff ffea 	bl	8000790 <bsp_init>
  MX_TIM6_Init(); // 溢出时间约500ms
 80007bc:	f000 fa86 	bl	8000ccc <MX_TIM6_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007c0:	bf00      	nop
 80007c2:	e7fd      	b.n	80007c0 <main+0x18>

080007c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b09c      	sub	sp, #112	@ 0x70
 80007c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007ce:	224c      	movs	r2, #76	@ 0x4c
 80007d0:	2100      	movs	r1, #0
 80007d2:	4618      	mov	r0, r3
 80007d4:	f006 fee8 	bl	80075a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d8:	1d3b      	adds	r3, r7, #4
 80007da:	2220      	movs	r2, #32
 80007dc:	2100      	movs	r1, #0
 80007de:	4618      	mov	r0, r3
 80007e0:	f006 fee2 	bl	80075a8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007e4:	2002      	movs	r0, #2
 80007e6:	f001 fd61 	bl	80022ac <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80007ea:	2300      	movs	r3, #0
 80007ec:	603b      	str	r3, [r7, #0]
 80007ee:	4b31      	ldr	r3, [pc, #196]	@ (80008b4 <SystemClock_Config+0xf0>)
 80007f0:	699b      	ldr	r3, [r3, #24]
 80007f2:	4a30      	ldr	r2, [pc, #192]	@ (80008b4 <SystemClock_Config+0xf0>)
 80007f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80007f8:	6193      	str	r3, [r2, #24]
 80007fa:	4b2e      	ldr	r3, [pc, #184]	@ (80008b4 <SystemClock_Config+0xf0>)
 80007fc:	699b      	ldr	r3, [r3, #24]
 80007fe:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000802:	603b      	str	r3, [r7, #0]
 8000804:	4b2c      	ldr	r3, [pc, #176]	@ (80008b8 <SystemClock_Config+0xf4>)
 8000806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000808:	4a2b      	ldr	r2, [pc, #172]	@ (80008b8 <SystemClock_Config+0xf4>)
 800080a:	f043 0301 	orr.w	r3, r3, #1
 800080e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000810:	4b29      	ldr	r3, [pc, #164]	@ (80008b8 <SystemClock_Config+0xf4>)
 8000812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000814:	f003 0301 	and.w	r3, r3, #1
 8000818:	603b      	str	r3, [r7, #0]
 800081a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800081c:	bf00      	nop
 800081e:	4b25      	ldr	r3, [pc, #148]	@ (80008b4 <SystemClock_Config+0xf0>)
 8000820:	699b      	ldr	r3, [r3, #24]
 8000822:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000826:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800082a:	d1f8      	bne.n	800081e <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800082c:	2309      	movs	r3, #9
 800082e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000830:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000834:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000836:	2301      	movs	r3, #1
 8000838:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800083a:	2302      	movs	r3, #2
 800083c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800083e:	2302      	movs	r3, #2
 8000840:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000842:	2302      	movs	r3, #2
 8000844:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 8000846:	23f0      	movs	r3, #240	@ 0xf0
 8000848:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800084a:	2302      	movs	r3, #2
 800084c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800084e:	2302      	movs	r3, #2
 8000850:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000852:	2302      	movs	r3, #2
 8000854:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000856:	2308      	movs	r3, #8
 8000858:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800085a:	2300      	movs	r3, #0
 800085c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800085e:	2300      	movs	r3, #0
 8000860:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000862:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000866:	4618      	mov	r0, r3
 8000868:	f001 fd5a 	bl	8002320 <HAL_RCC_OscConfig>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000872:	f000 f84f 	bl	8000914 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000876:	233f      	movs	r3, #63	@ 0x3f
 8000878:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800087a:	2303      	movs	r3, #3
 800087c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800087e:	2300      	movs	r3, #0
 8000880:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000882:	2308      	movs	r3, #8
 8000884:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000886:	2340      	movs	r3, #64	@ 0x40
 8000888:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800088a:	2340      	movs	r3, #64	@ 0x40
 800088c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800088e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000892:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000894:	2340      	movs	r3, #64	@ 0x40
 8000896:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	2104      	movs	r1, #4
 800089c:	4618      	mov	r0, r3
 800089e:	f002 f999 	bl	8002bd4 <HAL_RCC_ClockConfig>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80008a8:	f000 f834 	bl	8000914 <Error_Handler>
  }
}
 80008ac:	bf00      	nop
 80008ae:	3770      	adds	r7, #112	@ 0x70
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	58024800 	.word	0x58024800
 80008b8:	58000400 	.word	0x58000400

080008bc <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80008c2:	463b      	mov	r3, r7
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
 80008cc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80008ce:	f000 fd09 	bl	80012e4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80008d2:	2301      	movs	r3, #1
 80008d4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80008d6:	2300      	movs	r3, #0
 80008d8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80008da:	2300      	movs	r3, #0
 80008dc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80008de:	231f      	movs	r3, #31
 80008e0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80008e2:	2387      	movs	r3, #135	@ 0x87
 80008e4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80008ea:	2300      	movs	r3, #0
 80008ec:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80008ee:	2301      	movs	r3, #1
 80008f0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80008f2:	2301      	movs	r3, #1
 80008f4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80008f6:	2300      	movs	r3, #0
 80008f8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80008fa:	2300      	movs	r3, #0
 80008fc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80008fe:	463b      	mov	r3, r7
 8000900:	4618      	mov	r0, r3
 8000902:	f000 fd27 	bl	8001354 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000906:	2004      	movs	r0, #4
 8000908:	f000 fd04 	bl	8001314 <HAL_MPU_Enable>

}
 800090c:	bf00      	nop
 800090e:	3710      	adds	r7, #16
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}

08000914 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000918:	b672      	cpsid	i
}
 800091a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800091c:	bf00      	nop
 800091e:	e7fd      	b.n	800091c <Error_Handler+0x8>

08000920 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000926:	4b0a      	ldr	r3, [pc, #40]	@ (8000950 <HAL_MspInit+0x30>)
 8000928:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800092c:	4a08      	ldr	r2, [pc, #32]	@ (8000950 <HAL_MspInit+0x30>)
 800092e:	f043 0302 	orr.w	r3, r3, #2
 8000932:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000936:	4b06      	ldr	r3, [pc, #24]	@ (8000950 <HAL_MspInit+0x30>)
 8000938:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800093c:	f003 0302 	and.w	r3, r3, #2
 8000940:	607b      	str	r3, [r7, #4]
 8000942:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000944:	bf00      	nop
 8000946:	370c      	adds	r7, #12
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr
 8000950:	58024400 	.word	0x58024400

08000954 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000958:	bf00      	nop
 800095a:	e7fd      	b.n	8000958 <NMI_Handler+0x4>

0800095c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000960:	bf00      	nop
 8000962:	e7fd      	b.n	8000960 <HardFault_Handler+0x4>

08000964 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000968:	bf00      	nop
 800096a:	e7fd      	b.n	8000968 <MemManage_Handler+0x4>

0800096c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000970:	bf00      	nop
 8000972:	e7fd      	b.n	8000970 <BusFault_Handler+0x4>

08000974 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000978:	bf00      	nop
 800097a:	e7fd      	b.n	8000978 <UsageFault_Handler+0x4>

0800097c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr

0800098a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr

080009a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009a6:	b580      	push	{r7, lr}
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009aa:	f000 fb5f 	bl	800106c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
	...

080009b4 <WWDG_IRQHandler>:

/**
  * @brief This function handles Window watchdog interrupt.
  */
void WWDG_IRQHandler(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN WWDG_IRQn 0 */

  /* USER CODE END WWDG_IRQn 0 */
  HAL_WWDG_IRQHandler(&hwwdg1);
 80009b8:	4802      	ldr	r0, [pc, #8]	@ (80009c4 <WWDG_IRQHandler+0x10>)
 80009ba:	f006 fbd3 	bl	8007164 <HAL_WWDG_IRQHandler>
  /* USER CODE BEGIN WWDG_IRQn 1 */
  /* USER CODE END WWDG_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	2400016c 	.word	0x2400016c

080009c8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI_KEY1_Pin);
 80009cc:	2002      	movs	r0, #2
 80009ce:	f001 fc48 	bl	8002262 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
	...

080009d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80009dc:	4802      	ldr	r0, [pc, #8]	@ (80009e8 <USART1_IRQHandler+0x10>)
 80009de:	f004 fee5 	bl	80057ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	240000d8 	.word	0x240000d8

080009ec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80009f0:	4805      	ldr	r0, [pc, #20]	@ (8000a08 <TIM6_DAC_IRQHandler+0x1c>)
 80009f2:	f004 fb77 	bl	80050e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  HAL_GPIO_TogglePin(LED_RED_Port, LED_RED_Pin);
 80009f6:	2140      	movs	r1, #64	@ 0x40
 80009f8:	4804      	ldr	r0, [pc, #16]	@ (8000a0c <TIM6_DAC_IRQHandler+0x20>)
 80009fa:	f001 fc18 	bl	800222e <HAL_GPIO_TogglePin>
  printf("TIM6 Interrupt Triggered!\n");
 80009fe:	4804      	ldr	r0, [pc, #16]	@ (8000a10 <TIM6_DAC_IRQHandler+0x24>)
 8000a00:	f006 fcf2 	bl	80073e8 <puts>
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a04:	bf00      	nop
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	2400008c 	.word	0x2400008c
 8000a0c:	58021000 	.word	0x58021000
 8000a10:	08007b28 	.word	0x08007b28

08000a14 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b086      	sub	sp, #24
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	60f8      	str	r0, [r7, #12]
 8000a1c:	60b9      	str	r1, [r7, #8]
 8000a1e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a20:	2300      	movs	r3, #0
 8000a22:	617b      	str	r3, [r7, #20]
 8000a24:	e00a      	b.n	8000a3c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a26:	f3af 8000 	nop.w
 8000a2a:	4601      	mov	r1, r0
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	1c5a      	adds	r2, r3, #1
 8000a30:	60ba      	str	r2, [r7, #8]
 8000a32:	b2ca      	uxtb	r2, r1
 8000a34:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	3301      	adds	r3, #1
 8000a3a:	617b      	str	r3, [r7, #20]
 8000a3c:	697a      	ldr	r2, [r7, #20]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	429a      	cmp	r2, r3
 8000a42:	dbf0      	blt.n	8000a26 <_read+0x12>
  }

  return len;
 8000a44:	687b      	ldr	r3, [r7, #4]
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3718      	adds	r7, #24
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}

08000a4e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a4e:	b580      	push	{r7, lr}
 8000a50:	b086      	sub	sp, #24
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	60f8      	str	r0, [r7, #12]
 8000a56:	60b9      	str	r1, [r7, #8]
 8000a58:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	617b      	str	r3, [r7, #20]
 8000a5e:	e009      	b.n	8000a74 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	1c5a      	adds	r2, r3, #1
 8000a64:	60ba      	str	r2, [r7, #8]
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f000 fa4f 	bl	8000f0c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a6e:	697b      	ldr	r3, [r7, #20]
 8000a70:	3301      	adds	r3, #1
 8000a72:	617b      	str	r3, [r7, #20]
 8000a74:	697a      	ldr	r2, [r7, #20]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	dbf1      	blt.n	8000a60 <_write+0x12>
  }
  return len;
 8000a7c:	687b      	ldr	r3, [r7, #4]
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3718      	adds	r7, #24
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}

08000a86 <_close>:

int _close(int file)
{
 8000a86:	b480      	push	{r7}
 8000a88:	b083      	sub	sp, #12
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	370c      	adds	r7, #12
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr

08000a9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	b083      	sub	sp, #12
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	6078      	str	r0, [r7, #4]
 8000aa6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000aae:	605a      	str	r2, [r3, #4]
  return 0;
 8000ab0:	2300      	movs	r3, #0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	370c      	adds	r7, #12
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr

08000abe <_isatty>:

int _isatty(int file)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	b083      	sub	sp, #12
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ac6:	2301      	movs	r3, #1
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	370c      	adds	r7, #12
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b085      	sub	sp, #20
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	60f8      	str	r0, [r7, #12]
 8000adc:	60b9      	str	r1, [r7, #8]
 8000ade:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ae0:	2300      	movs	r3, #0
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3714      	adds	r7, #20
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
	...

08000af0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b086      	sub	sp, #24
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000af8:	4a14      	ldr	r2, [pc, #80]	@ (8000b4c <_sbrk+0x5c>)
 8000afa:	4b15      	ldr	r3, [pc, #84]	@ (8000b50 <_sbrk+0x60>)
 8000afc:	1ad3      	subs	r3, r2, r3
 8000afe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b04:	4b13      	ldr	r3, [pc, #76]	@ (8000b54 <_sbrk+0x64>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d102      	bne.n	8000b12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b0c:	4b11      	ldr	r3, [pc, #68]	@ (8000b54 <_sbrk+0x64>)
 8000b0e:	4a12      	ldr	r2, [pc, #72]	@ (8000b58 <_sbrk+0x68>)
 8000b10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b12:	4b10      	ldr	r3, [pc, #64]	@ (8000b54 <_sbrk+0x64>)
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	4413      	add	r3, r2
 8000b1a:	693a      	ldr	r2, [r7, #16]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d207      	bcs.n	8000b30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b20:	f006 fd90 	bl	8007644 <__errno>
 8000b24:	4603      	mov	r3, r0
 8000b26:	220c      	movs	r2, #12
 8000b28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b2e:	e009      	b.n	8000b44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b30:	4b08      	ldr	r3, [pc, #32]	@ (8000b54 <_sbrk+0x64>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b36:	4b07      	ldr	r3, [pc, #28]	@ (8000b54 <_sbrk+0x64>)
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	4a05      	ldr	r2, [pc, #20]	@ (8000b54 <_sbrk+0x64>)
 8000b40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b42:	68fb      	ldr	r3, [r7, #12]
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	3718      	adds	r7, #24
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	24080000 	.word	0x24080000
 8000b50:	00000400 	.word	0x00000400
 8000b54:	24000088 	.word	0x24000088
 8000b58:	240002d0 	.word	0x240002d0

08000b5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b60:	4b43      	ldr	r3, [pc, #268]	@ (8000c70 <SystemInit+0x114>)
 8000b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b66:	4a42      	ldr	r2, [pc, #264]	@ (8000c70 <SystemInit+0x114>)
 8000b68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b70:	4b40      	ldr	r3, [pc, #256]	@ (8000c74 <SystemInit+0x118>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f003 030f 	and.w	r3, r3, #15
 8000b78:	2b06      	cmp	r3, #6
 8000b7a:	d807      	bhi.n	8000b8c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b7c:	4b3d      	ldr	r3, [pc, #244]	@ (8000c74 <SystemInit+0x118>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f023 030f 	bic.w	r3, r3, #15
 8000b84:	4a3b      	ldr	r2, [pc, #236]	@ (8000c74 <SystemInit+0x118>)
 8000b86:	f043 0307 	orr.w	r3, r3, #7
 8000b8a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000b8c:	4b3a      	ldr	r3, [pc, #232]	@ (8000c78 <SystemInit+0x11c>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a39      	ldr	r2, [pc, #228]	@ (8000c78 <SystemInit+0x11c>)
 8000b92:	f043 0301 	orr.w	r3, r3, #1
 8000b96:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b98:	4b37      	ldr	r3, [pc, #220]	@ (8000c78 <SystemInit+0x11c>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000b9e:	4b36      	ldr	r3, [pc, #216]	@ (8000c78 <SystemInit+0x11c>)
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	4935      	ldr	r1, [pc, #212]	@ (8000c78 <SystemInit+0x11c>)
 8000ba4:	4b35      	ldr	r3, [pc, #212]	@ (8000c7c <SystemInit+0x120>)
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000baa:	4b32      	ldr	r3, [pc, #200]	@ (8000c74 <SystemInit+0x118>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f003 0308 	and.w	r3, r3, #8
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d007      	beq.n	8000bc6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bb6:	4b2f      	ldr	r3, [pc, #188]	@ (8000c74 <SystemInit+0x118>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f023 030f 	bic.w	r3, r3, #15
 8000bbe:	4a2d      	ldr	r2, [pc, #180]	@ (8000c74 <SystemInit+0x118>)
 8000bc0:	f043 0307 	orr.w	r3, r3, #7
 8000bc4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000bc6:	4b2c      	ldr	r3, [pc, #176]	@ (8000c78 <SystemInit+0x11c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000bcc:	4b2a      	ldr	r3, [pc, #168]	@ (8000c78 <SystemInit+0x11c>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000bd2:	4b29      	ldr	r3, [pc, #164]	@ (8000c78 <SystemInit+0x11c>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000bd8:	4b27      	ldr	r3, [pc, #156]	@ (8000c78 <SystemInit+0x11c>)
 8000bda:	4a29      	ldr	r2, [pc, #164]	@ (8000c80 <SystemInit+0x124>)
 8000bdc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000bde:	4b26      	ldr	r3, [pc, #152]	@ (8000c78 <SystemInit+0x11c>)
 8000be0:	4a28      	ldr	r2, [pc, #160]	@ (8000c84 <SystemInit+0x128>)
 8000be2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000be4:	4b24      	ldr	r3, [pc, #144]	@ (8000c78 <SystemInit+0x11c>)
 8000be6:	4a28      	ldr	r2, [pc, #160]	@ (8000c88 <SystemInit+0x12c>)
 8000be8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000bea:	4b23      	ldr	r3, [pc, #140]	@ (8000c78 <SystemInit+0x11c>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000bf0:	4b21      	ldr	r3, [pc, #132]	@ (8000c78 <SystemInit+0x11c>)
 8000bf2:	4a25      	ldr	r2, [pc, #148]	@ (8000c88 <SystemInit+0x12c>)
 8000bf4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000bf6:	4b20      	ldr	r3, [pc, #128]	@ (8000c78 <SystemInit+0x11c>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000bfc:	4b1e      	ldr	r3, [pc, #120]	@ (8000c78 <SystemInit+0x11c>)
 8000bfe:	4a22      	ldr	r2, [pc, #136]	@ (8000c88 <SystemInit+0x12c>)
 8000c00:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c02:	4b1d      	ldr	r3, [pc, #116]	@ (8000c78 <SystemInit+0x11c>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c08:	4b1b      	ldr	r3, [pc, #108]	@ (8000c78 <SystemInit+0x11c>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a1a      	ldr	r2, [pc, #104]	@ (8000c78 <SystemInit+0x11c>)
 8000c0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c12:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c14:	4b18      	ldr	r3, [pc, #96]	@ (8000c78 <SystemInit+0x11c>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000c1a:	4b1c      	ldr	r3, [pc, #112]	@ (8000c8c <SystemInit+0x130>)
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	4b1c      	ldr	r3, [pc, #112]	@ (8000c90 <SystemInit+0x134>)
 8000c20:	4013      	ands	r3, r2
 8000c22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000c26:	d202      	bcs.n	8000c2e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000c28:	4b1a      	ldr	r3, [pc, #104]	@ (8000c94 <SystemInit+0x138>)
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000c2e:	4b12      	ldr	r3, [pc, #72]	@ (8000c78 <SystemInit+0x11c>)
 8000c30:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000c34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d113      	bne.n	8000c64 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000c3c:	4b0e      	ldr	r3, [pc, #56]	@ (8000c78 <SystemInit+0x11c>)
 8000c3e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000c42:	4a0d      	ldr	r2, [pc, #52]	@ (8000c78 <SystemInit+0x11c>)
 8000c44:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c48:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000c4c:	4b12      	ldr	r3, [pc, #72]	@ (8000c98 <SystemInit+0x13c>)
 8000c4e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000c52:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000c54:	4b08      	ldr	r3, [pc, #32]	@ (8000c78 <SystemInit+0x11c>)
 8000c56:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000c5a:	4a07      	ldr	r2, [pc, #28]	@ (8000c78 <SystemInit+0x11c>)
 8000c5c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000c60:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	e000ed00 	.word	0xe000ed00
 8000c74:	52002000 	.word	0x52002000
 8000c78:	58024400 	.word	0x58024400
 8000c7c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000c80:	02020200 	.word	0x02020200
 8000c84:	01ff0000 	.word	0x01ff0000
 8000c88:	01010280 	.word	0x01010280
 8000c8c:	5c001000 	.word	0x5c001000
 8000c90:	ffff0000 	.word	0xffff0000
 8000c94:	51008108 	.word	0x51008108
 8000c98:	52004000 	.word	0x52004000

08000c9c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000ca0:	4b09      	ldr	r3, [pc, #36]	@ (8000cc8 <ExitRun0Mode+0x2c>)
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	4a08      	ldr	r2, [pc, #32]	@ (8000cc8 <ExitRun0Mode+0x2c>)
 8000ca6:	f043 0302 	orr.w	r3, r3, #2
 8000caa:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000cac:	bf00      	nop
 8000cae:	4b06      	ldr	r3, [pc, #24]	@ (8000cc8 <ExitRun0Mode+0x2c>)
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d0f9      	beq.n	8000cae <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000cba:	bf00      	nop
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	58024800 	.word	0x58024800

08000ccc <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cd2:	1d3b      	adds	r3, r7, #4
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000cdc:	4b16      	ldr	r3, [pc, #88]	@ (8000d38 <MX_TIM6_Init+0x6c>)
 8000cde:	4a17      	ldr	r2, [pc, #92]	@ (8000d3c <MX_TIM6_Init+0x70>)
 8000ce0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9999;
 8000ce2:	4b15      	ldr	r3, [pc, #84]	@ (8000d38 <MX_TIM6_Init+0x6c>)
 8000ce4:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000ce8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cea:	4b13      	ldr	r3, [pc, #76]	@ (8000d38 <MX_TIM6_Init+0x6c>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 11999;
 8000cf0:	4b11      	ldr	r3, [pc, #68]	@ (8000d38 <MX_TIM6_Init+0x6c>)
 8000cf2:	f642 62df 	movw	r2, #11999	@ 0x2edf
 8000cf6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cf8:	4b0f      	ldr	r3, [pc, #60]	@ (8000d38 <MX_TIM6_Init+0x6c>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000cfe:	480e      	ldr	r0, [pc, #56]	@ (8000d38 <MX_TIM6_Init+0x6c>)
 8000d00:	f004 f920 	bl	8004f44 <HAL_TIM_Base_Init>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000d0a:	f7ff fe03 	bl	8000914 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d12:	2300      	movs	r3, #0
 8000d14:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000d16:	1d3b      	adds	r3, r7, #4
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4807      	ldr	r0, [pc, #28]	@ (8000d38 <MX_TIM6_Init+0x6c>)
 8000d1c:	f004 fbbc 	bl	8005498 <HAL_TIMEx_MasterConfigSynchronization>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000d26:	f7ff fdf5 	bl	8000914 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  HAL_TIM_Base_Start_IT(&htim6); // 启动定时器6及其中断
 8000d2a:	4803      	ldr	r0, [pc, #12]	@ (8000d38 <MX_TIM6_Init+0x6c>)
 8000d2c:	f004 f962 	bl	8004ff4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM6_Init 2 */

}
 8000d30:	bf00      	nop
 8000d32:	3710      	adds	r7, #16
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	2400008c 	.word	0x2400008c
 8000d3c:	40001000 	.word	0x40001000

08000d40 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a0e      	ldr	r2, [pc, #56]	@ (8000d88 <HAL_TIM_Base_MspInit+0x48>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d116      	bne.n	8000d80 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000d52:	4b0e      	ldr	r3, [pc, #56]	@ (8000d8c <HAL_TIM_Base_MspInit+0x4c>)
 8000d54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d58:	4a0c      	ldr	r2, [pc, #48]	@ (8000d8c <HAL_TIM_Base_MspInit+0x4c>)
 8000d5a:	f043 0310 	orr.w	r3, r3, #16
 8000d5e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000d62:	4b0a      	ldr	r3, [pc, #40]	@ (8000d8c <HAL_TIM_Base_MspInit+0x4c>)
 8000d64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d68:	f003 0310 	and.w	r3, r3, #16
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 3);
 8000d70:	2203      	movs	r2, #3
 8000d72:	2101      	movs	r1, #1
 8000d74:	2036      	movs	r0, #54	@ 0x36
 8000d76:	f000 fa80 	bl	800127a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d7a:	2036      	movs	r0, #54	@ 0x36
 8000d7c:	f000 fa97 	bl	80012ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000d80:	bf00      	nop
 8000d82:	3710      	adds	r7, #16
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	40001000 	.word	0x40001000
 8000d8c:	58024400 	.word	0x58024400

08000d90 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d94:	4b22      	ldr	r3, [pc, #136]	@ (8000e20 <MX_USART1_UART_Init+0x90>)
 8000d96:	4a23      	ldr	r2, [pc, #140]	@ (8000e24 <MX_USART1_UART_Init+0x94>)
 8000d98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d9a:	4b21      	ldr	r3, [pc, #132]	@ (8000e20 <MX_USART1_UART_Init+0x90>)
 8000d9c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000da0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000da2:	4b1f      	ldr	r3, [pc, #124]	@ (8000e20 <MX_USART1_UART_Init+0x90>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000da8:	4b1d      	ldr	r3, [pc, #116]	@ (8000e20 <MX_USART1_UART_Init+0x90>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dae:	4b1c      	ldr	r3, [pc, #112]	@ (8000e20 <MX_USART1_UART_Init+0x90>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000db4:	4b1a      	ldr	r3, [pc, #104]	@ (8000e20 <MX_USART1_UART_Init+0x90>)
 8000db6:	220c      	movs	r2, #12
 8000db8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dba:	4b19      	ldr	r3, [pc, #100]	@ (8000e20 <MX_USART1_UART_Init+0x90>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dc0:	4b17      	ldr	r3, [pc, #92]	@ (8000e20 <MX_USART1_UART_Init+0x90>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dc6:	4b16      	ldr	r3, [pc, #88]	@ (8000e20 <MX_USART1_UART_Init+0x90>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000dcc:	4b14      	ldr	r3, [pc, #80]	@ (8000e20 <MX_USART1_UART_Init+0x90>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dd2:	4b13      	ldr	r3, [pc, #76]	@ (8000e20 <MX_USART1_UART_Init+0x90>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dd8:	4811      	ldr	r0, [pc, #68]	@ (8000e20 <MX_USART1_UART_Init+0x90>)
 8000dda:	f004 fc09 	bl	80055f0 <HAL_UART_Init>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000de4:	f7ff fd96 	bl	8000914 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000de8:	2100      	movs	r1, #0
 8000dea:	480d      	ldr	r0, [pc, #52]	@ (8000e20 <MX_USART1_UART_Init+0x90>)
 8000dec:	f006 f8f0 	bl	8006fd0 <HAL_UARTEx_SetTxFifoThreshold>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000df6:	f7ff fd8d 	bl	8000914 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	4808      	ldr	r0, [pc, #32]	@ (8000e20 <MX_USART1_UART_Init+0x90>)
 8000dfe:	f006 f925 	bl	800704c <HAL_UARTEx_SetRxFifoThreshold>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000e08:	f7ff fd84 	bl	8000914 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000e0c:	4804      	ldr	r0, [pc, #16]	@ (8000e20 <MX_USART1_UART_Init+0x90>)
 8000e0e:	f006 f8a6 	bl	8006f5e <HAL_UARTEx_DisableFifoMode>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000e18:	f7ff fd7c 	bl	8000914 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e1c:	bf00      	nop
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	240000d8 	.word	0x240000d8
 8000e24:	40011000 	.word	0x40011000

08000e28 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b0ba      	sub	sp, #232	@ 0xe8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e30:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e40:	f107 0310 	add.w	r3, r7, #16
 8000e44:	22c0      	movs	r2, #192	@ 0xc0
 8000e46:	2100      	movs	r1, #0
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f006 fbad 	bl	80075a8 <memset>
  if(uartHandle->Instance==USART1)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a2b      	ldr	r2, [pc, #172]	@ (8000f00 <HAL_UART_MspInit+0xd8>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d14e      	bne.n	8000ef6 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e58:	f04f 0201 	mov.w	r2, #1
 8000e5c:	f04f 0300 	mov.w	r3, #0
 8000e60:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000e64:	2300      	movs	r3, #0
 8000e66:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e6a:	f107 0310 	add.w	r3, r7, #16
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f002 fa3c 	bl	80032ec <HAL_RCCEx_PeriphCLKConfig>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000e7a:	f7ff fd4b 	bl	8000914 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e7e:	4b21      	ldr	r3, [pc, #132]	@ (8000f04 <HAL_UART_MspInit+0xdc>)
 8000e80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000e84:	4a1f      	ldr	r2, [pc, #124]	@ (8000f04 <HAL_UART_MspInit+0xdc>)
 8000e86:	f043 0310 	orr.w	r3, r3, #16
 8000e8a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000e8e:	4b1d      	ldr	r3, [pc, #116]	@ (8000f04 <HAL_UART_MspInit+0xdc>)
 8000e90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000e94:	f003 0310 	and.w	r3, r3, #16
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9c:	4b19      	ldr	r3, [pc, #100]	@ (8000f04 <HAL_UART_MspInit+0xdc>)
 8000e9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ea2:	4a18      	ldr	r2, [pc, #96]	@ (8000f04 <HAL_UART_MspInit+0xdc>)
 8000ea4:	f043 0301 	orr.w	r3, r3, #1
 8000ea8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000eac:	4b15      	ldr	r3, [pc, #84]	@ (8000f04 <HAL_UART_MspInit+0xdc>)
 8000eae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	60bb      	str	r3, [r7, #8]
 8000eb8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000eba:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000ebe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ed4:	2307      	movs	r3, #7
 8000ed6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eda:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4809      	ldr	r0, [pc, #36]	@ (8000f08 <HAL_UART_MspInit+0xe0>)
 8000ee2:	f000 ffdb 	bl	8001e9c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2100      	movs	r1, #0
 8000eea:	2025      	movs	r0, #37	@ 0x25
 8000eec:	f000 f9c5 	bl	800127a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ef0:	2025      	movs	r0, #37	@ 0x25
 8000ef2:	f000 f9dc 	bl	80012ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000ef6:	bf00      	nop
 8000ef8:	37e8      	adds	r7, #232	@ 0xe8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40011000 	.word	0x40011000
 8000f04:	58024400 	.word	0x58024400
 8000f08:	58020000 	.word	0x58020000

08000f0c <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

/* printf重定向 */
PUTCHAR_PROTOTYPE
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000f14:	1d39      	adds	r1, r7, #4
 8000f16:	f04f 33ff 	mov.w	r3, #4294967295
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	4803      	ldr	r0, [pc, #12]	@ (8000f2c <__io_putchar+0x20>)
 8000f1e:	f004 fbb7 	bl	8005690 <HAL_UART_Transmit>
    return ch;
 8000f22:	687b      	ldr	r3, [r7, #4]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	240000d8 	.word	0x240000d8

08000f30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000f30:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000f6c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000f34:	f7ff feb2 	bl	8000c9c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f38:	f7ff fe10 	bl	8000b5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f3c:	480c      	ldr	r0, [pc, #48]	@ (8000f70 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f3e:	490d      	ldr	r1, [pc, #52]	@ (8000f74 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f40:	4a0d      	ldr	r2, [pc, #52]	@ (8000f78 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f44:	e002      	b.n	8000f4c <LoopCopyDataInit>

08000f46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f4a:	3304      	adds	r3, #4

08000f4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f50:	d3f9      	bcc.n	8000f46 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f52:	4a0a      	ldr	r2, [pc, #40]	@ (8000f7c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f54:	4c0a      	ldr	r4, [pc, #40]	@ (8000f80 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f58:	e001      	b.n	8000f5e <LoopFillZerobss>

08000f5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f5c:	3204      	adds	r2, #4

08000f5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f60:	d3fb      	bcc.n	8000f5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f62:	f006 fb75 	bl	8007650 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f66:	f7ff fc1f 	bl	80007a8 <main>
  bx  lr
 8000f6a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f6c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000f70:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f74:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8000f78:	08007b8c 	.word	0x08007b8c
  ldr r2, =_sbss
 8000f7c:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 8000f80:	240002d0 	.word	0x240002d0

08000f84 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f84:	e7fe      	b.n	8000f84 <ADC3_IRQHandler>
	...

08000f88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f8e:	2003      	movs	r0, #3
 8000f90:	f000 f968 	bl	8001264 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000f94:	f001 ffd4 	bl	8002f40 <HAL_RCC_GetSysClockFreq>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	4b15      	ldr	r3, [pc, #84]	@ (8000ff0 <HAL_Init+0x68>)
 8000f9c:	699b      	ldr	r3, [r3, #24]
 8000f9e:	0a1b      	lsrs	r3, r3, #8
 8000fa0:	f003 030f 	and.w	r3, r3, #15
 8000fa4:	4913      	ldr	r1, [pc, #76]	@ (8000ff4 <HAL_Init+0x6c>)
 8000fa6:	5ccb      	ldrb	r3, [r1, r3]
 8000fa8:	f003 031f 	and.w	r3, r3, #31
 8000fac:	fa22 f303 	lsr.w	r3, r2, r3
 8000fb0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000fb2:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff0 <HAL_Init+0x68>)
 8000fb4:	699b      	ldr	r3, [r3, #24]
 8000fb6:	f003 030f 	and.w	r3, r3, #15
 8000fba:	4a0e      	ldr	r2, [pc, #56]	@ (8000ff4 <HAL_Init+0x6c>)
 8000fbc:	5cd3      	ldrb	r3, [r2, r3]
 8000fbe:	f003 031f 	and.w	r3, r3, #31
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8000fc8:	4a0b      	ldr	r2, [pc, #44]	@ (8000ff8 <HAL_Init+0x70>)
 8000fca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000fcc:	4a0b      	ldr	r2, [pc, #44]	@ (8000ffc <HAL_Init+0x74>)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fd2:	200f      	movs	r0, #15
 8000fd4:	f000 f814 	bl	8001000 <HAL_InitTick>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e002      	b.n	8000fe8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000fe2:	f7ff fc9d 	bl	8000920 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fe6:	2300      	movs	r3, #0
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	58024400 	.word	0x58024400
 8000ff4:	08007b44 	.word	0x08007b44
 8000ff8:	24000004 	.word	0x24000004
 8000ffc:	24000000 	.word	0x24000000

08001000 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001008:	4b15      	ldr	r3, [pc, #84]	@ (8001060 <HAL_InitTick+0x60>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d101      	bne.n	8001014 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001010:	2301      	movs	r3, #1
 8001012:	e021      	b.n	8001058 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001014:	4b13      	ldr	r3, [pc, #76]	@ (8001064 <HAL_InitTick+0x64>)
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	4b11      	ldr	r3, [pc, #68]	@ (8001060 <HAL_InitTick+0x60>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	4619      	mov	r1, r3
 800101e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001022:	fbb3 f3f1 	udiv	r3, r3, r1
 8001026:	fbb2 f3f3 	udiv	r3, r2, r3
 800102a:	4618      	mov	r0, r3
 800102c:	f000 f94d 	bl	80012ca <HAL_SYSTICK_Config>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	e00e      	b.n	8001058 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2b0f      	cmp	r3, #15
 800103e:	d80a      	bhi.n	8001056 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001040:	2200      	movs	r2, #0
 8001042:	6879      	ldr	r1, [r7, #4]
 8001044:	f04f 30ff 	mov.w	r0, #4294967295
 8001048:	f000 f917 	bl	800127a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800104c:	4a06      	ldr	r2, [pc, #24]	@ (8001068 <HAL_InitTick+0x68>)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001052:	2300      	movs	r3, #0
 8001054:	e000      	b.n	8001058 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
}
 8001058:	4618      	mov	r0, r3
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	2400000c 	.word	0x2400000c
 8001064:	24000000 	.word	0x24000000
 8001068:	24000008 	.word	0x24000008

0800106c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001070:	4b06      	ldr	r3, [pc, #24]	@ (800108c <HAL_IncTick+0x20>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	461a      	mov	r2, r3
 8001076:	4b06      	ldr	r3, [pc, #24]	@ (8001090 <HAL_IncTick+0x24>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4413      	add	r3, r2
 800107c:	4a04      	ldr	r2, [pc, #16]	@ (8001090 <HAL_IncTick+0x24>)
 800107e:	6013      	str	r3, [r2, #0]
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	2400000c 	.word	0x2400000c
 8001090:	24000180 	.word	0x24000180

08001094 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  return uwTick;
 8001098:	4b03      	ldr	r3, [pc, #12]	@ (80010a8 <HAL_GetTick+0x14>)
 800109a:	681b      	ldr	r3, [r3, #0]
}
 800109c:	4618      	mov	r0, r3
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	24000180 	.word	0x24000180

080010ac <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80010b0:	4b03      	ldr	r3, [pc, #12]	@ (80010c0 <HAL_GetREVID+0x14>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	0c1b      	lsrs	r3, r3, #16
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	5c001000 	.word	0x5c001000

080010c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f003 0307 	and.w	r3, r3, #7
 80010d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001104 <__NVIC_SetPriorityGrouping+0x40>)
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010da:	68ba      	ldr	r2, [r7, #8]
 80010dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010e0:	4013      	ands	r3, r2
 80010e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010ec:	4b06      	ldr	r3, [pc, #24]	@ (8001108 <__NVIC_SetPriorityGrouping+0x44>)
 80010ee:	4313      	orrs	r3, r2
 80010f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010f2:	4a04      	ldr	r2, [pc, #16]	@ (8001104 <__NVIC_SetPriorityGrouping+0x40>)
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	60d3      	str	r3, [r2, #12]
}
 80010f8:	bf00      	nop
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000ed00 	.word	0xe000ed00
 8001108:	05fa0000 	.word	0x05fa0000

0800110c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001110:	4b04      	ldr	r3, [pc, #16]	@ (8001124 <__NVIC_GetPriorityGrouping+0x18>)
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	0a1b      	lsrs	r3, r3, #8
 8001116:	f003 0307 	and.w	r3, r3, #7
}
 800111a:	4618      	mov	r0, r3
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	e000ed00 	.word	0xe000ed00

08001128 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001132:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001136:	2b00      	cmp	r3, #0
 8001138:	db0b      	blt.n	8001152 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800113a:	88fb      	ldrh	r3, [r7, #6]
 800113c:	f003 021f 	and.w	r2, r3, #31
 8001140:	4907      	ldr	r1, [pc, #28]	@ (8001160 <__NVIC_EnableIRQ+0x38>)
 8001142:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001146:	095b      	lsrs	r3, r3, #5
 8001148:	2001      	movs	r0, #1
 800114a:	fa00 f202 	lsl.w	r2, r0, r2
 800114e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001152:	bf00      	nop
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	e000e100 	.word	0xe000e100

08001164 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	6039      	str	r1, [r7, #0]
 800116e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001170:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001174:	2b00      	cmp	r3, #0
 8001176:	db0a      	blt.n	800118e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	b2da      	uxtb	r2, r3
 800117c:	490c      	ldr	r1, [pc, #48]	@ (80011b0 <__NVIC_SetPriority+0x4c>)
 800117e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001182:	0112      	lsls	r2, r2, #4
 8001184:	b2d2      	uxtb	r2, r2
 8001186:	440b      	add	r3, r1
 8001188:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800118c:	e00a      	b.n	80011a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	b2da      	uxtb	r2, r3
 8001192:	4908      	ldr	r1, [pc, #32]	@ (80011b4 <__NVIC_SetPriority+0x50>)
 8001194:	88fb      	ldrh	r3, [r7, #6]
 8001196:	f003 030f 	and.w	r3, r3, #15
 800119a:	3b04      	subs	r3, #4
 800119c:	0112      	lsls	r2, r2, #4
 800119e:	b2d2      	uxtb	r2, r2
 80011a0:	440b      	add	r3, r1
 80011a2:	761a      	strb	r2, [r3, #24]
}
 80011a4:	bf00      	nop
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	e000e100 	.word	0xe000e100
 80011b4:	e000ed00 	.word	0xe000ed00

080011b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b089      	sub	sp, #36	@ 0x24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f003 0307 	and.w	r3, r3, #7
 80011ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	f1c3 0307 	rsb	r3, r3, #7
 80011d2:	2b04      	cmp	r3, #4
 80011d4:	bf28      	it	cs
 80011d6:	2304      	movcs	r3, #4
 80011d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	3304      	adds	r3, #4
 80011de:	2b06      	cmp	r3, #6
 80011e0:	d902      	bls.n	80011e8 <NVIC_EncodePriority+0x30>
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	3b03      	subs	r3, #3
 80011e6:	e000      	b.n	80011ea <NVIC_EncodePriority+0x32>
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011ec:	f04f 32ff 	mov.w	r2, #4294967295
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	43da      	mvns	r2, r3
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	401a      	ands	r2, r3
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001200:	f04f 31ff 	mov.w	r1, #4294967295
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	fa01 f303 	lsl.w	r3, r1, r3
 800120a:	43d9      	mvns	r1, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001210:	4313      	orrs	r3, r2
         );
}
 8001212:	4618      	mov	r0, r3
 8001214:	3724      	adds	r7, #36	@ 0x24
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
	...

08001220 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3b01      	subs	r3, #1
 800122c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001230:	d301      	bcc.n	8001236 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001232:	2301      	movs	r3, #1
 8001234:	e00f      	b.n	8001256 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001236:	4a0a      	ldr	r2, [pc, #40]	@ (8001260 <SysTick_Config+0x40>)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3b01      	subs	r3, #1
 800123c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800123e:	210f      	movs	r1, #15
 8001240:	f04f 30ff 	mov.w	r0, #4294967295
 8001244:	f7ff ff8e 	bl	8001164 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001248:	4b05      	ldr	r3, [pc, #20]	@ (8001260 <SysTick_Config+0x40>)
 800124a:	2200      	movs	r2, #0
 800124c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800124e:	4b04      	ldr	r3, [pc, #16]	@ (8001260 <SysTick_Config+0x40>)
 8001250:	2207      	movs	r2, #7
 8001252:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	e000e010 	.word	0xe000e010

08001264 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f7ff ff29 	bl	80010c4 <__NVIC_SetPriorityGrouping>
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b086      	sub	sp, #24
 800127e:	af00      	add	r7, sp, #0
 8001280:	4603      	mov	r3, r0
 8001282:	60b9      	str	r1, [r7, #8]
 8001284:	607a      	str	r2, [r7, #4]
 8001286:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001288:	f7ff ff40 	bl	800110c <__NVIC_GetPriorityGrouping>
 800128c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	68b9      	ldr	r1, [r7, #8]
 8001292:	6978      	ldr	r0, [r7, #20]
 8001294:	f7ff ff90 	bl	80011b8 <NVIC_EncodePriority>
 8001298:	4602      	mov	r2, r0
 800129a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800129e:	4611      	mov	r1, r2
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff ff5f 	bl	8001164 <__NVIC_SetPriority>
}
 80012a6:	bf00      	nop
 80012a8:	3718      	adds	r7, #24
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b082      	sub	sp, #8
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	4603      	mov	r3, r0
 80012b6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff ff33 	bl	8001128 <__NVIC_EnableIRQ>
}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b082      	sub	sp, #8
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff ffa4 	bl	8001220 <SysTick_Config>
 80012d8:	4603      	mov	r3, r0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
	...

080012e4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80012e8:	f3bf 8f5f 	dmb	sy
}
 80012ec:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80012ee:	4b07      	ldr	r3, [pc, #28]	@ (800130c <HAL_MPU_Disable+0x28>)
 80012f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012f2:	4a06      	ldr	r2, [pc, #24]	@ (800130c <HAL_MPU_Disable+0x28>)
 80012f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012f8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80012fa:	4b05      	ldr	r3, [pc, #20]	@ (8001310 <HAL_MPU_Disable+0x2c>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	605a      	str	r2, [r3, #4]
}
 8001300:	bf00      	nop
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	e000ed00 	.word	0xe000ed00
 8001310:	e000ed90 	.word	0xe000ed90

08001314 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800131c:	4a0b      	ldr	r2, [pc, #44]	@ (800134c <HAL_MPU_Enable+0x38>)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	f043 0301 	orr.w	r3, r3, #1
 8001324:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001326:	4b0a      	ldr	r3, [pc, #40]	@ (8001350 <HAL_MPU_Enable+0x3c>)
 8001328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800132a:	4a09      	ldr	r2, [pc, #36]	@ (8001350 <HAL_MPU_Enable+0x3c>)
 800132c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001330:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001332:	f3bf 8f4f 	dsb	sy
}
 8001336:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001338:	f3bf 8f6f 	isb	sy
}
 800133c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	e000ed90 	.word	0xe000ed90
 8001350:	e000ed00 	.word	0xe000ed00

08001354 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	785a      	ldrb	r2, [r3, #1]
 8001360:	4b1b      	ldr	r3, [pc, #108]	@ (80013d0 <HAL_MPU_ConfigRegion+0x7c>)
 8001362:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001364:	4b1a      	ldr	r3, [pc, #104]	@ (80013d0 <HAL_MPU_ConfigRegion+0x7c>)
 8001366:	691b      	ldr	r3, [r3, #16]
 8001368:	4a19      	ldr	r2, [pc, #100]	@ (80013d0 <HAL_MPU_ConfigRegion+0x7c>)
 800136a:	f023 0301 	bic.w	r3, r3, #1
 800136e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001370:	4a17      	ldr	r2, [pc, #92]	@ (80013d0 <HAL_MPU_ConfigRegion+0x7c>)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	7b1b      	ldrb	r3, [r3, #12]
 800137c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	7adb      	ldrb	r3, [r3, #11]
 8001382:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001384:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	7a9b      	ldrb	r3, [r3, #10]
 800138a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800138c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	7b5b      	ldrb	r3, [r3, #13]
 8001392:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001394:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	7b9b      	ldrb	r3, [r3, #14]
 800139a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800139c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	7bdb      	ldrb	r3, [r3, #15]
 80013a2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80013a4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	7a5b      	ldrb	r3, [r3, #9]
 80013aa:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80013ac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	7a1b      	ldrb	r3, [r3, #8]
 80013b2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80013b4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	7812      	ldrb	r2, [r2, #0]
 80013ba:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80013bc:	4a04      	ldr	r2, [pc, #16]	@ (80013d0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80013be:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80013c0:	6113      	str	r3, [r2, #16]
}
 80013c2:	bf00      	nop
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	e000ed90 	.word	0xe000ed90

080013d4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80013dc:	f7ff fe5a 	bl	8001094 <HAL_GetTick>
 80013e0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d101      	bne.n	80013ec <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	e2dc      	b.n	80019a6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d008      	beq.n	800140a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2280      	movs	r2, #128	@ 0x80
 80013fc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2200      	movs	r2, #0
 8001402:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e2cd      	b.n	80019a6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a76      	ldr	r2, [pc, #472]	@ (80015e8 <HAL_DMA_Abort+0x214>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d04a      	beq.n	80014aa <HAL_DMA_Abort+0xd6>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a74      	ldr	r2, [pc, #464]	@ (80015ec <HAL_DMA_Abort+0x218>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d045      	beq.n	80014aa <HAL_DMA_Abort+0xd6>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a73      	ldr	r2, [pc, #460]	@ (80015f0 <HAL_DMA_Abort+0x21c>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d040      	beq.n	80014aa <HAL_DMA_Abort+0xd6>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a71      	ldr	r2, [pc, #452]	@ (80015f4 <HAL_DMA_Abort+0x220>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d03b      	beq.n	80014aa <HAL_DMA_Abort+0xd6>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a70      	ldr	r2, [pc, #448]	@ (80015f8 <HAL_DMA_Abort+0x224>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d036      	beq.n	80014aa <HAL_DMA_Abort+0xd6>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a6e      	ldr	r2, [pc, #440]	@ (80015fc <HAL_DMA_Abort+0x228>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d031      	beq.n	80014aa <HAL_DMA_Abort+0xd6>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a6d      	ldr	r2, [pc, #436]	@ (8001600 <HAL_DMA_Abort+0x22c>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d02c      	beq.n	80014aa <HAL_DMA_Abort+0xd6>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a6b      	ldr	r2, [pc, #428]	@ (8001604 <HAL_DMA_Abort+0x230>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d027      	beq.n	80014aa <HAL_DMA_Abort+0xd6>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a6a      	ldr	r2, [pc, #424]	@ (8001608 <HAL_DMA_Abort+0x234>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d022      	beq.n	80014aa <HAL_DMA_Abort+0xd6>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a68      	ldr	r2, [pc, #416]	@ (800160c <HAL_DMA_Abort+0x238>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d01d      	beq.n	80014aa <HAL_DMA_Abort+0xd6>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a67      	ldr	r2, [pc, #412]	@ (8001610 <HAL_DMA_Abort+0x23c>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d018      	beq.n	80014aa <HAL_DMA_Abort+0xd6>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a65      	ldr	r2, [pc, #404]	@ (8001614 <HAL_DMA_Abort+0x240>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d013      	beq.n	80014aa <HAL_DMA_Abort+0xd6>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a64      	ldr	r2, [pc, #400]	@ (8001618 <HAL_DMA_Abort+0x244>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d00e      	beq.n	80014aa <HAL_DMA_Abort+0xd6>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a62      	ldr	r2, [pc, #392]	@ (800161c <HAL_DMA_Abort+0x248>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d009      	beq.n	80014aa <HAL_DMA_Abort+0xd6>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a61      	ldr	r2, [pc, #388]	@ (8001620 <HAL_DMA_Abort+0x24c>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d004      	beq.n	80014aa <HAL_DMA_Abort+0xd6>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a5f      	ldr	r2, [pc, #380]	@ (8001624 <HAL_DMA_Abort+0x250>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d101      	bne.n	80014ae <HAL_DMA_Abort+0xda>
 80014aa:	2301      	movs	r3, #1
 80014ac:	e000      	b.n	80014b0 <HAL_DMA_Abort+0xdc>
 80014ae:	2300      	movs	r3, #0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d013      	beq.n	80014dc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f022 021e 	bic.w	r2, r2, #30
 80014c2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	695a      	ldr	r2, [r3, #20]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80014d2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	617b      	str	r3, [r7, #20]
 80014da:	e00a      	b.n	80014f2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f022 020e 	bic.w	r2, r2, #14
 80014ea:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a3c      	ldr	r2, [pc, #240]	@ (80015e8 <HAL_DMA_Abort+0x214>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d072      	beq.n	80015e2 <HAL_DMA_Abort+0x20e>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a3a      	ldr	r2, [pc, #232]	@ (80015ec <HAL_DMA_Abort+0x218>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d06d      	beq.n	80015e2 <HAL_DMA_Abort+0x20e>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a39      	ldr	r2, [pc, #228]	@ (80015f0 <HAL_DMA_Abort+0x21c>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d068      	beq.n	80015e2 <HAL_DMA_Abort+0x20e>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a37      	ldr	r2, [pc, #220]	@ (80015f4 <HAL_DMA_Abort+0x220>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d063      	beq.n	80015e2 <HAL_DMA_Abort+0x20e>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a36      	ldr	r2, [pc, #216]	@ (80015f8 <HAL_DMA_Abort+0x224>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d05e      	beq.n	80015e2 <HAL_DMA_Abort+0x20e>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a34      	ldr	r2, [pc, #208]	@ (80015fc <HAL_DMA_Abort+0x228>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d059      	beq.n	80015e2 <HAL_DMA_Abort+0x20e>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a33      	ldr	r2, [pc, #204]	@ (8001600 <HAL_DMA_Abort+0x22c>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d054      	beq.n	80015e2 <HAL_DMA_Abort+0x20e>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a31      	ldr	r2, [pc, #196]	@ (8001604 <HAL_DMA_Abort+0x230>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d04f      	beq.n	80015e2 <HAL_DMA_Abort+0x20e>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a30      	ldr	r2, [pc, #192]	@ (8001608 <HAL_DMA_Abort+0x234>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d04a      	beq.n	80015e2 <HAL_DMA_Abort+0x20e>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a2e      	ldr	r2, [pc, #184]	@ (800160c <HAL_DMA_Abort+0x238>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d045      	beq.n	80015e2 <HAL_DMA_Abort+0x20e>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a2d      	ldr	r2, [pc, #180]	@ (8001610 <HAL_DMA_Abort+0x23c>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d040      	beq.n	80015e2 <HAL_DMA_Abort+0x20e>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a2b      	ldr	r2, [pc, #172]	@ (8001614 <HAL_DMA_Abort+0x240>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d03b      	beq.n	80015e2 <HAL_DMA_Abort+0x20e>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a2a      	ldr	r2, [pc, #168]	@ (8001618 <HAL_DMA_Abort+0x244>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d036      	beq.n	80015e2 <HAL_DMA_Abort+0x20e>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a28      	ldr	r2, [pc, #160]	@ (800161c <HAL_DMA_Abort+0x248>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d031      	beq.n	80015e2 <HAL_DMA_Abort+0x20e>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a27      	ldr	r2, [pc, #156]	@ (8001620 <HAL_DMA_Abort+0x24c>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d02c      	beq.n	80015e2 <HAL_DMA_Abort+0x20e>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a25      	ldr	r2, [pc, #148]	@ (8001624 <HAL_DMA_Abort+0x250>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d027      	beq.n	80015e2 <HAL_DMA_Abort+0x20e>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a24      	ldr	r2, [pc, #144]	@ (8001628 <HAL_DMA_Abort+0x254>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d022      	beq.n	80015e2 <HAL_DMA_Abort+0x20e>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a22      	ldr	r2, [pc, #136]	@ (800162c <HAL_DMA_Abort+0x258>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d01d      	beq.n	80015e2 <HAL_DMA_Abort+0x20e>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a21      	ldr	r2, [pc, #132]	@ (8001630 <HAL_DMA_Abort+0x25c>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d018      	beq.n	80015e2 <HAL_DMA_Abort+0x20e>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a1f      	ldr	r2, [pc, #124]	@ (8001634 <HAL_DMA_Abort+0x260>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d013      	beq.n	80015e2 <HAL_DMA_Abort+0x20e>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a1e      	ldr	r2, [pc, #120]	@ (8001638 <HAL_DMA_Abort+0x264>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d00e      	beq.n	80015e2 <HAL_DMA_Abort+0x20e>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a1c      	ldr	r2, [pc, #112]	@ (800163c <HAL_DMA_Abort+0x268>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d009      	beq.n	80015e2 <HAL_DMA_Abort+0x20e>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a1b      	ldr	r2, [pc, #108]	@ (8001640 <HAL_DMA_Abort+0x26c>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d004      	beq.n	80015e2 <HAL_DMA_Abort+0x20e>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a19      	ldr	r2, [pc, #100]	@ (8001644 <HAL_DMA_Abort+0x270>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d132      	bne.n	8001648 <HAL_DMA_Abort+0x274>
 80015e2:	2301      	movs	r3, #1
 80015e4:	e031      	b.n	800164a <HAL_DMA_Abort+0x276>
 80015e6:	bf00      	nop
 80015e8:	40020010 	.word	0x40020010
 80015ec:	40020028 	.word	0x40020028
 80015f0:	40020040 	.word	0x40020040
 80015f4:	40020058 	.word	0x40020058
 80015f8:	40020070 	.word	0x40020070
 80015fc:	40020088 	.word	0x40020088
 8001600:	400200a0 	.word	0x400200a0
 8001604:	400200b8 	.word	0x400200b8
 8001608:	40020410 	.word	0x40020410
 800160c:	40020428 	.word	0x40020428
 8001610:	40020440 	.word	0x40020440
 8001614:	40020458 	.word	0x40020458
 8001618:	40020470 	.word	0x40020470
 800161c:	40020488 	.word	0x40020488
 8001620:	400204a0 	.word	0x400204a0
 8001624:	400204b8 	.word	0x400204b8
 8001628:	58025408 	.word	0x58025408
 800162c:	5802541c 	.word	0x5802541c
 8001630:	58025430 	.word	0x58025430
 8001634:	58025444 	.word	0x58025444
 8001638:	58025458 	.word	0x58025458
 800163c:	5802546c 	.word	0x5802546c
 8001640:	58025480 	.word	0x58025480
 8001644:	58025494 	.word	0x58025494
 8001648:	2300      	movs	r3, #0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d007      	beq.n	800165e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001658:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800165c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a6d      	ldr	r2, [pc, #436]	@ (8001818 <HAL_DMA_Abort+0x444>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d04a      	beq.n	80016fe <HAL_DMA_Abort+0x32a>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a6b      	ldr	r2, [pc, #428]	@ (800181c <HAL_DMA_Abort+0x448>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d045      	beq.n	80016fe <HAL_DMA_Abort+0x32a>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a6a      	ldr	r2, [pc, #424]	@ (8001820 <HAL_DMA_Abort+0x44c>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d040      	beq.n	80016fe <HAL_DMA_Abort+0x32a>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a68      	ldr	r2, [pc, #416]	@ (8001824 <HAL_DMA_Abort+0x450>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d03b      	beq.n	80016fe <HAL_DMA_Abort+0x32a>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a67      	ldr	r2, [pc, #412]	@ (8001828 <HAL_DMA_Abort+0x454>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d036      	beq.n	80016fe <HAL_DMA_Abort+0x32a>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a65      	ldr	r2, [pc, #404]	@ (800182c <HAL_DMA_Abort+0x458>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d031      	beq.n	80016fe <HAL_DMA_Abort+0x32a>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a64      	ldr	r2, [pc, #400]	@ (8001830 <HAL_DMA_Abort+0x45c>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d02c      	beq.n	80016fe <HAL_DMA_Abort+0x32a>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a62      	ldr	r2, [pc, #392]	@ (8001834 <HAL_DMA_Abort+0x460>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d027      	beq.n	80016fe <HAL_DMA_Abort+0x32a>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a61      	ldr	r2, [pc, #388]	@ (8001838 <HAL_DMA_Abort+0x464>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d022      	beq.n	80016fe <HAL_DMA_Abort+0x32a>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a5f      	ldr	r2, [pc, #380]	@ (800183c <HAL_DMA_Abort+0x468>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d01d      	beq.n	80016fe <HAL_DMA_Abort+0x32a>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a5e      	ldr	r2, [pc, #376]	@ (8001840 <HAL_DMA_Abort+0x46c>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d018      	beq.n	80016fe <HAL_DMA_Abort+0x32a>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a5c      	ldr	r2, [pc, #368]	@ (8001844 <HAL_DMA_Abort+0x470>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d013      	beq.n	80016fe <HAL_DMA_Abort+0x32a>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a5b      	ldr	r2, [pc, #364]	@ (8001848 <HAL_DMA_Abort+0x474>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d00e      	beq.n	80016fe <HAL_DMA_Abort+0x32a>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a59      	ldr	r2, [pc, #356]	@ (800184c <HAL_DMA_Abort+0x478>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d009      	beq.n	80016fe <HAL_DMA_Abort+0x32a>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a58      	ldr	r2, [pc, #352]	@ (8001850 <HAL_DMA_Abort+0x47c>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d004      	beq.n	80016fe <HAL_DMA_Abort+0x32a>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a56      	ldr	r2, [pc, #344]	@ (8001854 <HAL_DMA_Abort+0x480>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d108      	bne.n	8001710 <HAL_DMA_Abort+0x33c>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f022 0201 	bic.w	r2, r2, #1
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	e007      	b.n	8001720 <HAL_DMA_Abort+0x34c>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f022 0201 	bic.w	r2, r2, #1
 800171e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001720:	e013      	b.n	800174a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001722:	f7ff fcb7 	bl	8001094 <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b05      	cmp	r3, #5
 800172e:	d90c      	bls.n	800174a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2220      	movs	r2, #32
 8001734:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2203      	movs	r2, #3
 800173a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e12d      	b.n	80019a6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	2b00      	cmp	r3, #0
 8001754:	d1e5      	bne.n	8001722 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a2f      	ldr	r2, [pc, #188]	@ (8001818 <HAL_DMA_Abort+0x444>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d04a      	beq.n	80017f6 <HAL_DMA_Abort+0x422>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a2d      	ldr	r2, [pc, #180]	@ (800181c <HAL_DMA_Abort+0x448>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d045      	beq.n	80017f6 <HAL_DMA_Abort+0x422>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a2c      	ldr	r2, [pc, #176]	@ (8001820 <HAL_DMA_Abort+0x44c>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d040      	beq.n	80017f6 <HAL_DMA_Abort+0x422>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a2a      	ldr	r2, [pc, #168]	@ (8001824 <HAL_DMA_Abort+0x450>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d03b      	beq.n	80017f6 <HAL_DMA_Abort+0x422>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a29      	ldr	r2, [pc, #164]	@ (8001828 <HAL_DMA_Abort+0x454>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d036      	beq.n	80017f6 <HAL_DMA_Abort+0x422>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a27      	ldr	r2, [pc, #156]	@ (800182c <HAL_DMA_Abort+0x458>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d031      	beq.n	80017f6 <HAL_DMA_Abort+0x422>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a26      	ldr	r2, [pc, #152]	@ (8001830 <HAL_DMA_Abort+0x45c>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d02c      	beq.n	80017f6 <HAL_DMA_Abort+0x422>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a24      	ldr	r2, [pc, #144]	@ (8001834 <HAL_DMA_Abort+0x460>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d027      	beq.n	80017f6 <HAL_DMA_Abort+0x422>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a23      	ldr	r2, [pc, #140]	@ (8001838 <HAL_DMA_Abort+0x464>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d022      	beq.n	80017f6 <HAL_DMA_Abort+0x422>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a21      	ldr	r2, [pc, #132]	@ (800183c <HAL_DMA_Abort+0x468>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d01d      	beq.n	80017f6 <HAL_DMA_Abort+0x422>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a20      	ldr	r2, [pc, #128]	@ (8001840 <HAL_DMA_Abort+0x46c>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d018      	beq.n	80017f6 <HAL_DMA_Abort+0x422>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a1e      	ldr	r2, [pc, #120]	@ (8001844 <HAL_DMA_Abort+0x470>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d013      	beq.n	80017f6 <HAL_DMA_Abort+0x422>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a1d      	ldr	r2, [pc, #116]	@ (8001848 <HAL_DMA_Abort+0x474>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d00e      	beq.n	80017f6 <HAL_DMA_Abort+0x422>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a1b      	ldr	r2, [pc, #108]	@ (800184c <HAL_DMA_Abort+0x478>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d009      	beq.n	80017f6 <HAL_DMA_Abort+0x422>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a1a      	ldr	r2, [pc, #104]	@ (8001850 <HAL_DMA_Abort+0x47c>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d004      	beq.n	80017f6 <HAL_DMA_Abort+0x422>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a18      	ldr	r2, [pc, #96]	@ (8001854 <HAL_DMA_Abort+0x480>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d101      	bne.n	80017fa <HAL_DMA_Abort+0x426>
 80017f6:	2301      	movs	r3, #1
 80017f8:	e000      	b.n	80017fc <HAL_DMA_Abort+0x428>
 80017fa:	2300      	movs	r3, #0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d02b      	beq.n	8001858 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001804:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800180a:	f003 031f 	and.w	r3, r3, #31
 800180e:	223f      	movs	r2, #63	@ 0x3f
 8001810:	409a      	lsls	r2, r3
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	609a      	str	r2, [r3, #8]
 8001816:	e02a      	b.n	800186e <HAL_DMA_Abort+0x49a>
 8001818:	40020010 	.word	0x40020010
 800181c:	40020028 	.word	0x40020028
 8001820:	40020040 	.word	0x40020040
 8001824:	40020058 	.word	0x40020058
 8001828:	40020070 	.word	0x40020070
 800182c:	40020088 	.word	0x40020088
 8001830:	400200a0 	.word	0x400200a0
 8001834:	400200b8 	.word	0x400200b8
 8001838:	40020410 	.word	0x40020410
 800183c:	40020428 	.word	0x40020428
 8001840:	40020440 	.word	0x40020440
 8001844:	40020458 	.word	0x40020458
 8001848:	40020470 	.word	0x40020470
 800184c:	40020488 	.word	0x40020488
 8001850:	400204a0 	.word	0x400204a0
 8001854:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800185c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001862:	f003 031f 	and.w	r3, r3, #31
 8001866:	2201      	movs	r2, #1
 8001868:	409a      	lsls	r2, r3
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a4f      	ldr	r2, [pc, #316]	@ (80019b0 <HAL_DMA_Abort+0x5dc>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d072      	beq.n	800195e <HAL_DMA_Abort+0x58a>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a4d      	ldr	r2, [pc, #308]	@ (80019b4 <HAL_DMA_Abort+0x5e0>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d06d      	beq.n	800195e <HAL_DMA_Abort+0x58a>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a4c      	ldr	r2, [pc, #304]	@ (80019b8 <HAL_DMA_Abort+0x5e4>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d068      	beq.n	800195e <HAL_DMA_Abort+0x58a>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a4a      	ldr	r2, [pc, #296]	@ (80019bc <HAL_DMA_Abort+0x5e8>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d063      	beq.n	800195e <HAL_DMA_Abort+0x58a>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a49      	ldr	r2, [pc, #292]	@ (80019c0 <HAL_DMA_Abort+0x5ec>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d05e      	beq.n	800195e <HAL_DMA_Abort+0x58a>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a47      	ldr	r2, [pc, #284]	@ (80019c4 <HAL_DMA_Abort+0x5f0>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d059      	beq.n	800195e <HAL_DMA_Abort+0x58a>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a46      	ldr	r2, [pc, #280]	@ (80019c8 <HAL_DMA_Abort+0x5f4>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d054      	beq.n	800195e <HAL_DMA_Abort+0x58a>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a44      	ldr	r2, [pc, #272]	@ (80019cc <HAL_DMA_Abort+0x5f8>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d04f      	beq.n	800195e <HAL_DMA_Abort+0x58a>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a43      	ldr	r2, [pc, #268]	@ (80019d0 <HAL_DMA_Abort+0x5fc>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d04a      	beq.n	800195e <HAL_DMA_Abort+0x58a>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a41      	ldr	r2, [pc, #260]	@ (80019d4 <HAL_DMA_Abort+0x600>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d045      	beq.n	800195e <HAL_DMA_Abort+0x58a>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a40      	ldr	r2, [pc, #256]	@ (80019d8 <HAL_DMA_Abort+0x604>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d040      	beq.n	800195e <HAL_DMA_Abort+0x58a>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a3e      	ldr	r2, [pc, #248]	@ (80019dc <HAL_DMA_Abort+0x608>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d03b      	beq.n	800195e <HAL_DMA_Abort+0x58a>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a3d      	ldr	r2, [pc, #244]	@ (80019e0 <HAL_DMA_Abort+0x60c>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d036      	beq.n	800195e <HAL_DMA_Abort+0x58a>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a3b      	ldr	r2, [pc, #236]	@ (80019e4 <HAL_DMA_Abort+0x610>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d031      	beq.n	800195e <HAL_DMA_Abort+0x58a>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a3a      	ldr	r2, [pc, #232]	@ (80019e8 <HAL_DMA_Abort+0x614>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d02c      	beq.n	800195e <HAL_DMA_Abort+0x58a>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a38      	ldr	r2, [pc, #224]	@ (80019ec <HAL_DMA_Abort+0x618>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d027      	beq.n	800195e <HAL_DMA_Abort+0x58a>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a37      	ldr	r2, [pc, #220]	@ (80019f0 <HAL_DMA_Abort+0x61c>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d022      	beq.n	800195e <HAL_DMA_Abort+0x58a>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a35      	ldr	r2, [pc, #212]	@ (80019f4 <HAL_DMA_Abort+0x620>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d01d      	beq.n	800195e <HAL_DMA_Abort+0x58a>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a34      	ldr	r2, [pc, #208]	@ (80019f8 <HAL_DMA_Abort+0x624>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d018      	beq.n	800195e <HAL_DMA_Abort+0x58a>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a32      	ldr	r2, [pc, #200]	@ (80019fc <HAL_DMA_Abort+0x628>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d013      	beq.n	800195e <HAL_DMA_Abort+0x58a>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a31      	ldr	r2, [pc, #196]	@ (8001a00 <HAL_DMA_Abort+0x62c>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d00e      	beq.n	800195e <HAL_DMA_Abort+0x58a>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a2f      	ldr	r2, [pc, #188]	@ (8001a04 <HAL_DMA_Abort+0x630>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d009      	beq.n	800195e <HAL_DMA_Abort+0x58a>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a2e      	ldr	r2, [pc, #184]	@ (8001a08 <HAL_DMA_Abort+0x634>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d004      	beq.n	800195e <HAL_DMA_Abort+0x58a>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a2c      	ldr	r2, [pc, #176]	@ (8001a0c <HAL_DMA_Abort+0x638>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d101      	bne.n	8001962 <HAL_DMA_Abort+0x58e>
 800195e:	2301      	movs	r3, #1
 8001960:	e000      	b.n	8001964 <HAL_DMA_Abort+0x590>
 8001962:	2300      	movs	r3, #0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d015      	beq.n	8001994 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001970:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001976:	2b00      	cmp	r3, #0
 8001978:	d00c      	beq.n	8001994 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001984:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001988:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001992:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2201      	movs	r2, #1
 8001998:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2200      	movs	r2, #0
 80019a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3718      	adds	r7, #24
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	40020010 	.word	0x40020010
 80019b4:	40020028 	.word	0x40020028
 80019b8:	40020040 	.word	0x40020040
 80019bc:	40020058 	.word	0x40020058
 80019c0:	40020070 	.word	0x40020070
 80019c4:	40020088 	.word	0x40020088
 80019c8:	400200a0 	.word	0x400200a0
 80019cc:	400200b8 	.word	0x400200b8
 80019d0:	40020410 	.word	0x40020410
 80019d4:	40020428 	.word	0x40020428
 80019d8:	40020440 	.word	0x40020440
 80019dc:	40020458 	.word	0x40020458
 80019e0:	40020470 	.word	0x40020470
 80019e4:	40020488 	.word	0x40020488
 80019e8:	400204a0 	.word	0x400204a0
 80019ec:	400204b8 	.word	0x400204b8
 80019f0:	58025408 	.word	0x58025408
 80019f4:	5802541c 	.word	0x5802541c
 80019f8:	58025430 	.word	0x58025430
 80019fc:	58025444 	.word	0x58025444
 8001a00:	58025458 	.word	0x58025458
 8001a04:	5802546c 	.word	0x5802546c
 8001a08:	58025480 	.word	0x58025480
 8001a0c:	58025494 	.word	0x58025494

08001a10 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d101      	bne.n	8001a22 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e237      	b.n	8001e92 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d004      	beq.n	8001a38 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2280      	movs	r2, #128	@ 0x80
 8001a32:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e22c      	b.n	8001e92 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a5c      	ldr	r2, [pc, #368]	@ (8001bb0 <HAL_DMA_Abort_IT+0x1a0>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d04a      	beq.n	8001ad8 <HAL_DMA_Abort_IT+0xc8>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a5b      	ldr	r2, [pc, #364]	@ (8001bb4 <HAL_DMA_Abort_IT+0x1a4>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d045      	beq.n	8001ad8 <HAL_DMA_Abort_IT+0xc8>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a59      	ldr	r2, [pc, #356]	@ (8001bb8 <HAL_DMA_Abort_IT+0x1a8>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d040      	beq.n	8001ad8 <HAL_DMA_Abort_IT+0xc8>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a58      	ldr	r2, [pc, #352]	@ (8001bbc <HAL_DMA_Abort_IT+0x1ac>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d03b      	beq.n	8001ad8 <HAL_DMA_Abort_IT+0xc8>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a56      	ldr	r2, [pc, #344]	@ (8001bc0 <HAL_DMA_Abort_IT+0x1b0>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d036      	beq.n	8001ad8 <HAL_DMA_Abort_IT+0xc8>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a55      	ldr	r2, [pc, #340]	@ (8001bc4 <HAL_DMA_Abort_IT+0x1b4>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d031      	beq.n	8001ad8 <HAL_DMA_Abort_IT+0xc8>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a53      	ldr	r2, [pc, #332]	@ (8001bc8 <HAL_DMA_Abort_IT+0x1b8>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d02c      	beq.n	8001ad8 <HAL_DMA_Abort_IT+0xc8>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a52      	ldr	r2, [pc, #328]	@ (8001bcc <HAL_DMA_Abort_IT+0x1bc>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d027      	beq.n	8001ad8 <HAL_DMA_Abort_IT+0xc8>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a50      	ldr	r2, [pc, #320]	@ (8001bd0 <HAL_DMA_Abort_IT+0x1c0>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d022      	beq.n	8001ad8 <HAL_DMA_Abort_IT+0xc8>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a4f      	ldr	r2, [pc, #316]	@ (8001bd4 <HAL_DMA_Abort_IT+0x1c4>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d01d      	beq.n	8001ad8 <HAL_DMA_Abort_IT+0xc8>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a4d      	ldr	r2, [pc, #308]	@ (8001bd8 <HAL_DMA_Abort_IT+0x1c8>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d018      	beq.n	8001ad8 <HAL_DMA_Abort_IT+0xc8>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a4c      	ldr	r2, [pc, #304]	@ (8001bdc <HAL_DMA_Abort_IT+0x1cc>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d013      	beq.n	8001ad8 <HAL_DMA_Abort_IT+0xc8>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a4a      	ldr	r2, [pc, #296]	@ (8001be0 <HAL_DMA_Abort_IT+0x1d0>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d00e      	beq.n	8001ad8 <HAL_DMA_Abort_IT+0xc8>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a49      	ldr	r2, [pc, #292]	@ (8001be4 <HAL_DMA_Abort_IT+0x1d4>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d009      	beq.n	8001ad8 <HAL_DMA_Abort_IT+0xc8>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a47      	ldr	r2, [pc, #284]	@ (8001be8 <HAL_DMA_Abort_IT+0x1d8>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d004      	beq.n	8001ad8 <HAL_DMA_Abort_IT+0xc8>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a46      	ldr	r2, [pc, #280]	@ (8001bec <HAL_DMA_Abort_IT+0x1dc>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d101      	bne.n	8001adc <HAL_DMA_Abort_IT+0xcc>
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e000      	b.n	8001ade <HAL_DMA_Abort_IT+0xce>
 8001adc:	2300      	movs	r3, #0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	f000 8086 	beq.w	8001bf0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2204      	movs	r2, #4
 8001ae8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a2f      	ldr	r2, [pc, #188]	@ (8001bb0 <HAL_DMA_Abort_IT+0x1a0>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d04a      	beq.n	8001b8c <HAL_DMA_Abort_IT+0x17c>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a2e      	ldr	r2, [pc, #184]	@ (8001bb4 <HAL_DMA_Abort_IT+0x1a4>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d045      	beq.n	8001b8c <HAL_DMA_Abort_IT+0x17c>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a2c      	ldr	r2, [pc, #176]	@ (8001bb8 <HAL_DMA_Abort_IT+0x1a8>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d040      	beq.n	8001b8c <HAL_DMA_Abort_IT+0x17c>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a2b      	ldr	r2, [pc, #172]	@ (8001bbc <HAL_DMA_Abort_IT+0x1ac>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d03b      	beq.n	8001b8c <HAL_DMA_Abort_IT+0x17c>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a29      	ldr	r2, [pc, #164]	@ (8001bc0 <HAL_DMA_Abort_IT+0x1b0>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d036      	beq.n	8001b8c <HAL_DMA_Abort_IT+0x17c>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a28      	ldr	r2, [pc, #160]	@ (8001bc4 <HAL_DMA_Abort_IT+0x1b4>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d031      	beq.n	8001b8c <HAL_DMA_Abort_IT+0x17c>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a26      	ldr	r2, [pc, #152]	@ (8001bc8 <HAL_DMA_Abort_IT+0x1b8>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d02c      	beq.n	8001b8c <HAL_DMA_Abort_IT+0x17c>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a25      	ldr	r2, [pc, #148]	@ (8001bcc <HAL_DMA_Abort_IT+0x1bc>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d027      	beq.n	8001b8c <HAL_DMA_Abort_IT+0x17c>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a23      	ldr	r2, [pc, #140]	@ (8001bd0 <HAL_DMA_Abort_IT+0x1c0>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d022      	beq.n	8001b8c <HAL_DMA_Abort_IT+0x17c>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a22      	ldr	r2, [pc, #136]	@ (8001bd4 <HAL_DMA_Abort_IT+0x1c4>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d01d      	beq.n	8001b8c <HAL_DMA_Abort_IT+0x17c>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a20      	ldr	r2, [pc, #128]	@ (8001bd8 <HAL_DMA_Abort_IT+0x1c8>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d018      	beq.n	8001b8c <HAL_DMA_Abort_IT+0x17c>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a1f      	ldr	r2, [pc, #124]	@ (8001bdc <HAL_DMA_Abort_IT+0x1cc>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d013      	beq.n	8001b8c <HAL_DMA_Abort_IT+0x17c>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a1d      	ldr	r2, [pc, #116]	@ (8001be0 <HAL_DMA_Abort_IT+0x1d0>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d00e      	beq.n	8001b8c <HAL_DMA_Abort_IT+0x17c>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a1c      	ldr	r2, [pc, #112]	@ (8001be4 <HAL_DMA_Abort_IT+0x1d4>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d009      	beq.n	8001b8c <HAL_DMA_Abort_IT+0x17c>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a1a      	ldr	r2, [pc, #104]	@ (8001be8 <HAL_DMA_Abort_IT+0x1d8>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d004      	beq.n	8001b8c <HAL_DMA_Abort_IT+0x17c>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a19      	ldr	r2, [pc, #100]	@ (8001bec <HAL_DMA_Abort_IT+0x1dc>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d108      	bne.n	8001b9e <HAL_DMA_Abort_IT+0x18e>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f022 0201 	bic.w	r2, r2, #1
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	e178      	b.n	8001e90 <HAL_DMA_Abort_IT+0x480>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f022 0201 	bic.w	r2, r2, #1
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	e16f      	b.n	8001e90 <HAL_DMA_Abort_IT+0x480>
 8001bb0:	40020010 	.word	0x40020010
 8001bb4:	40020028 	.word	0x40020028
 8001bb8:	40020040 	.word	0x40020040
 8001bbc:	40020058 	.word	0x40020058
 8001bc0:	40020070 	.word	0x40020070
 8001bc4:	40020088 	.word	0x40020088
 8001bc8:	400200a0 	.word	0x400200a0
 8001bcc:	400200b8 	.word	0x400200b8
 8001bd0:	40020410 	.word	0x40020410
 8001bd4:	40020428 	.word	0x40020428
 8001bd8:	40020440 	.word	0x40020440
 8001bdc:	40020458 	.word	0x40020458
 8001be0:	40020470 	.word	0x40020470
 8001be4:	40020488 	.word	0x40020488
 8001be8:	400204a0 	.word	0x400204a0
 8001bec:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f022 020e 	bic.w	r2, r2, #14
 8001bfe:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a6c      	ldr	r2, [pc, #432]	@ (8001db8 <HAL_DMA_Abort_IT+0x3a8>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d04a      	beq.n	8001ca0 <HAL_DMA_Abort_IT+0x290>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a6b      	ldr	r2, [pc, #428]	@ (8001dbc <HAL_DMA_Abort_IT+0x3ac>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d045      	beq.n	8001ca0 <HAL_DMA_Abort_IT+0x290>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a69      	ldr	r2, [pc, #420]	@ (8001dc0 <HAL_DMA_Abort_IT+0x3b0>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d040      	beq.n	8001ca0 <HAL_DMA_Abort_IT+0x290>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a68      	ldr	r2, [pc, #416]	@ (8001dc4 <HAL_DMA_Abort_IT+0x3b4>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d03b      	beq.n	8001ca0 <HAL_DMA_Abort_IT+0x290>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a66      	ldr	r2, [pc, #408]	@ (8001dc8 <HAL_DMA_Abort_IT+0x3b8>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d036      	beq.n	8001ca0 <HAL_DMA_Abort_IT+0x290>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a65      	ldr	r2, [pc, #404]	@ (8001dcc <HAL_DMA_Abort_IT+0x3bc>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d031      	beq.n	8001ca0 <HAL_DMA_Abort_IT+0x290>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a63      	ldr	r2, [pc, #396]	@ (8001dd0 <HAL_DMA_Abort_IT+0x3c0>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d02c      	beq.n	8001ca0 <HAL_DMA_Abort_IT+0x290>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a62      	ldr	r2, [pc, #392]	@ (8001dd4 <HAL_DMA_Abort_IT+0x3c4>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d027      	beq.n	8001ca0 <HAL_DMA_Abort_IT+0x290>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a60      	ldr	r2, [pc, #384]	@ (8001dd8 <HAL_DMA_Abort_IT+0x3c8>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d022      	beq.n	8001ca0 <HAL_DMA_Abort_IT+0x290>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a5f      	ldr	r2, [pc, #380]	@ (8001ddc <HAL_DMA_Abort_IT+0x3cc>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d01d      	beq.n	8001ca0 <HAL_DMA_Abort_IT+0x290>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a5d      	ldr	r2, [pc, #372]	@ (8001de0 <HAL_DMA_Abort_IT+0x3d0>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d018      	beq.n	8001ca0 <HAL_DMA_Abort_IT+0x290>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a5c      	ldr	r2, [pc, #368]	@ (8001de4 <HAL_DMA_Abort_IT+0x3d4>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d013      	beq.n	8001ca0 <HAL_DMA_Abort_IT+0x290>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a5a      	ldr	r2, [pc, #360]	@ (8001de8 <HAL_DMA_Abort_IT+0x3d8>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d00e      	beq.n	8001ca0 <HAL_DMA_Abort_IT+0x290>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a59      	ldr	r2, [pc, #356]	@ (8001dec <HAL_DMA_Abort_IT+0x3dc>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d009      	beq.n	8001ca0 <HAL_DMA_Abort_IT+0x290>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a57      	ldr	r2, [pc, #348]	@ (8001df0 <HAL_DMA_Abort_IT+0x3e0>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d004      	beq.n	8001ca0 <HAL_DMA_Abort_IT+0x290>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a56      	ldr	r2, [pc, #344]	@ (8001df4 <HAL_DMA_Abort_IT+0x3e4>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d108      	bne.n	8001cb2 <HAL_DMA_Abort_IT+0x2a2>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f022 0201 	bic.w	r2, r2, #1
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	e007      	b.n	8001cc2 <HAL_DMA_Abort_IT+0x2b2>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f022 0201 	bic.w	r2, r2, #1
 8001cc0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a3c      	ldr	r2, [pc, #240]	@ (8001db8 <HAL_DMA_Abort_IT+0x3a8>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d072      	beq.n	8001db2 <HAL_DMA_Abort_IT+0x3a2>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a3a      	ldr	r2, [pc, #232]	@ (8001dbc <HAL_DMA_Abort_IT+0x3ac>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d06d      	beq.n	8001db2 <HAL_DMA_Abort_IT+0x3a2>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a39      	ldr	r2, [pc, #228]	@ (8001dc0 <HAL_DMA_Abort_IT+0x3b0>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d068      	beq.n	8001db2 <HAL_DMA_Abort_IT+0x3a2>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a37      	ldr	r2, [pc, #220]	@ (8001dc4 <HAL_DMA_Abort_IT+0x3b4>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d063      	beq.n	8001db2 <HAL_DMA_Abort_IT+0x3a2>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a36      	ldr	r2, [pc, #216]	@ (8001dc8 <HAL_DMA_Abort_IT+0x3b8>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d05e      	beq.n	8001db2 <HAL_DMA_Abort_IT+0x3a2>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a34      	ldr	r2, [pc, #208]	@ (8001dcc <HAL_DMA_Abort_IT+0x3bc>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d059      	beq.n	8001db2 <HAL_DMA_Abort_IT+0x3a2>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a33      	ldr	r2, [pc, #204]	@ (8001dd0 <HAL_DMA_Abort_IT+0x3c0>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d054      	beq.n	8001db2 <HAL_DMA_Abort_IT+0x3a2>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a31      	ldr	r2, [pc, #196]	@ (8001dd4 <HAL_DMA_Abort_IT+0x3c4>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d04f      	beq.n	8001db2 <HAL_DMA_Abort_IT+0x3a2>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a30      	ldr	r2, [pc, #192]	@ (8001dd8 <HAL_DMA_Abort_IT+0x3c8>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d04a      	beq.n	8001db2 <HAL_DMA_Abort_IT+0x3a2>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a2e      	ldr	r2, [pc, #184]	@ (8001ddc <HAL_DMA_Abort_IT+0x3cc>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d045      	beq.n	8001db2 <HAL_DMA_Abort_IT+0x3a2>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a2d      	ldr	r2, [pc, #180]	@ (8001de0 <HAL_DMA_Abort_IT+0x3d0>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d040      	beq.n	8001db2 <HAL_DMA_Abort_IT+0x3a2>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a2b      	ldr	r2, [pc, #172]	@ (8001de4 <HAL_DMA_Abort_IT+0x3d4>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d03b      	beq.n	8001db2 <HAL_DMA_Abort_IT+0x3a2>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a2a      	ldr	r2, [pc, #168]	@ (8001de8 <HAL_DMA_Abort_IT+0x3d8>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d036      	beq.n	8001db2 <HAL_DMA_Abort_IT+0x3a2>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a28      	ldr	r2, [pc, #160]	@ (8001dec <HAL_DMA_Abort_IT+0x3dc>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d031      	beq.n	8001db2 <HAL_DMA_Abort_IT+0x3a2>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a27      	ldr	r2, [pc, #156]	@ (8001df0 <HAL_DMA_Abort_IT+0x3e0>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d02c      	beq.n	8001db2 <HAL_DMA_Abort_IT+0x3a2>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a25      	ldr	r2, [pc, #148]	@ (8001df4 <HAL_DMA_Abort_IT+0x3e4>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d027      	beq.n	8001db2 <HAL_DMA_Abort_IT+0x3a2>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a24      	ldr	r2, [pc, #144]	@ (8001df8 <HAL_DMA_Abort_IT+0x3e8>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d022      	beq.n	8001db2 <HAL_DMA_Abort_IT+0x3a2>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a22      	ldr	r2, [pc, #136]	@ (8001dfc <HAL_DMA_Abort_IT+0x3ec>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d01d      	beq.n	8001db2 <HAL_DMA_Abort_IT+0x3a2>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a21      	ldr	r2, [pc, #132]	@ (8001e00 <HAL_DMA_Abort_IT+0x3f0>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d018      	beq.n	8001db2 <HAL_DMA_Abort_IT+0x3a2>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a1f      	ldr	r2, [pc, #124]	@ (8001e04 <HAL_DMA_Abort_IT+0x3f4>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d013      	beq.n	8001db2 <HAL_DMA_Abort_IT+0x3a2>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a1e      	ldr	r2, [pc, #120]	@ (8001e08 <HAL_DMA_Abort_IT+0x3f8>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d00e      	beq.n	8001db2 <HAL_DMA_Abort_IT+0x3a2>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a1c      	ldr	r2, [pc, #112]	@ (8001e0c <HAL_DMA_Abort_IT+0x3fc>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d009      	beq.n	8001db2 <HAL_DMA_Abort_IT+0x3a2>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a1b      	ldr	r2, [pc, #108]	@ (8001e10 <HAL_DMA_Abort_IT+0x400>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d004      	beq.n	8001db2 <HAL_DMA_Abort_IT+0x3a2>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a19      	ldr	r2, [pc, #100]	@ (8001e14 <HAL_DMA_Abort_IT+0x404>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d132      	bne.n	8001e18 <HAL_DMA_Abort_IT+0x408>
 8001db2:	2301      	movs	r3, #1
 8001db4:	e031      	b.n	8001e1a <HAL_DMA_Abort_IT+0x40a>
 8001db6:	bf00      	nop
 8001db8:	40020010 	.word	0x40020010
 8001dbc:	40020028 	.word	0x40020028
 8001dc0:	40020040 	.word	0x40020040
 8001dc4:	40020058 	.word	0x40020058
 8001dc8:	40020070 	.word	0x40020070
 8001dcc:	40020088 	.word	0x40020088
 8001dd0:	400200a0 	.word	0x400200a0
 8001dd4:	400200b8 	.word	0x400200b8
 8001dd8:	40020410 	.word	0x40020410
 8001ddc:	40020428 	.word	0x40020428
 8001de0:	40020440 	.word	0x40020440
 8001de4:	40020458 	.word	0x40020458
 8001de8:	40020470 	.word	0x40020470
 8001dec:	40020488 	.word	0x40020488
 8001df0:	400204a0 	.word	0x400204a0
 8001df4:	400204b8 	.word	0x400204b8
 8001df8:	58025408 	.word	0x58025408
 8001dfc:	5802541c 	.word	0x5802541c
 8001e00:	58025430 	.word	0x58025430
 8001e04:	58025444 	.word	0x58025444
 8001e08:	58025458 	.word	0x58025458
 8001e0c:	5802546c 	.word	0x5802546c
 8001e10:	58025480 	.word	0x58025480
 8001e14:	58025494 	.word	0x58025494
 8001e18:	2300      	movs	r3, #0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d028      	beq.n	8001e70 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e2c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e32:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e38:	f003 031f 	and.w	r3, r3, #31
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	409a      	lsls	r2, r3
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001e4c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d00c      	beq.n	8001e70 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e60:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e64:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001e6e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d003      	beq.n	8001e90 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3710      	adds	r7, #16
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop

08001e9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b089      	sub	sp, #36	@ 0x24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001eaa:	4b89      	ldr	r3, [pc, #548]	@ (80020d0 <HAL_GPIO_Init+0x234>)
 8001eac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001eae:	e194      	b.n	80021da <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	2101      	movs	r1, #1
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	f000 8186 	beq.w	80021d4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f003 0303 	and.w	r3, r3, #3
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d005      	beq.n	8001ee0 <HAL_GPIO_Init+0x44>
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f003 0303 	and.w	r3, r3, #3
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d130      	bne.n	8001f42 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	2203      	movs	r2, #3
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	68da      	ldr	r2, [r3, #12]
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f16:	2201      	movs	r2, #1
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	43db      	mvns	r3, r3
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	4013      	ands	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	091b      	lsrs	r3, r3, #4
 8001f2c:	f003 0201 	and.w	r2, r3, #1
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f003 0303 	and.w	r3, r3, #3
 8001f4a:	2b03      	cmp	r3, #3
 8001f4c:	d017      	beq.n	8001f7e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	2203      	movs	r2, #3
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	43db      	mvns	r3, r3
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	4013      	ands	r3, r2
 8001f64:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	689a      	ldr	r2, [r3, #8]
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f003 0303 	and.w	r3, r3, #3
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d123      	bne.n	8001fd2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	08da      	lsrs	r2, r3, #3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	3208      	adds	r2, #8
 8001f92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	220f      	movs	r2, #15
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	43db      	mvns	r3, r3
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	4013      	ands	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	691a      	ldr	r2, [r3, #16]
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	f003 0307 	and.w	r3, r3, #7
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	08da      	lsrs	r2, r3, #3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	3208      	adds	r2, #8
 8001fcc:	69b9      	ldr	r1, [r7, #24]
 8001fce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	2203      	movs	r2, #3
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	43db      	mvns	r3, r3
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f003 0203 	and.w	r2, r3, #3
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800200e:	2b00      	cmp	r3, #0
 8002010:	f000 80e0 	beq.w	80021d4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002014:	4b2f      	ldr	r3, [pc, #188]	@ (80020d4 <HAL_GPIO_Init+0x238>)
 8002016:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800201a:	4a2e      	ldr	r2, [pc, #184]	@ (80020d4 <HAL_GPIO_Init+0x238>)
 800201c:	f043 0302 	orr.w	r3, r3, #2
 8002020:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002024:	4b2b      	ldr	r3, [pc, #172]	@ (80020d4 <HAL_GPIO_Init+0x238>)
 8002026:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	60fb      	str	r3, [r7, #12]
 8002030:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002032:	4a29      	ldr	r2, [pc, #164]	@ (80020d8 <HAL_GPIO_Init+0x23c>)
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	089b      	lsrs	r3, r3, #2
 8002038:	3302      	adds	r3, #2
 800203a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800203e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	f003 0303 	and.w	r3, r3, #3
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	220f      	movs	r2, #15
 800204a:	fa02 f303 	lsl.w	r3, r2, r3
 800204e:	43db      	mvns	r3, r3
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	4013      	ands	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a20      	ldr	r2, [pc, #128]	@ (80020dc <HAL_GPIO_Init+0x240>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d052      	beq.n	8002104 <HAL_GPIO_Init+0x268>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a1f      	ldr	r2, [pc, #124]	@ (80020e0 <HAL_GPIO_Init+0x244>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d031      	beq.n	80020ca <HAL_GPIO_Init+0x22e>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a1e      	ldr	r2, [pc, #120]	@ (80020e4 <HAL_GPIO_Init+0x248>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d02b      	beq.n	80020c6 <HAL_GPIO_Init+0x22a>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a1d      	ldr	r2, [pc, #116]	@ (80020e8 <HAL_GPIO_Init+0x24c>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d025      	beq.n	80020c2 <HAL_GPIO_Init+0x226>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a1c      	ldr	r2, [pc, #112]	@ (80020ec <HAL_GPIO_Init+0x250>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d01f      	beq.n	80020be <HAL_GPIO_Init+0x222>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a1b      	ldr	r2, [pc, #108]	@ (80020f0 <HAL_GPIO_Init+0x254>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d019      	beq.n	80020ba <HAL_GPIO_Init+0x21e>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a1a      	ldr	r2, [pc, #104]	@ (80020f4 <HAL_GPIO_Init+0x258>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d013      	beq.n	80020b6 <HAL_GPIO_Init+0x21a>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a19      	ldr	r2, [pc, #100]	@ (80020f8 <HAL_GPIO_Init+0x25c>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d00d      	beq.n	80020b2 <HAL_GPIO_Init+0x216>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a18      	ldr	r2, [pc, #96]	@ (80020fc <HAL_GPIO_Init+0x260>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d007      	beq.n	80020ae <HAL_GPIO_Init+0x212>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a17      	ldr	r2, [pc, #92]	@ (8002100 <HAL_GPIO_Init+0x264>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d101      	bne.n	80020aa <HAL_GPIO_Init+0x20e>
 80020a6:	2309      	movs	r3, #9
 80020a8:	e02d      	b.n	8002106 <HAL_GPIO_Init+0x26a>
 80020aa:	230a      	movs	r3, #10
 80020ac:	e02b      	b.n	8002106 <HAL_GPIO_Init+0x26a>
 80020ae:	2308      	movs	r3, #8
 80020b0:	e029      	b.n	8002106 <HAL_GPIO_Init+0x26a>
 80020b2:	2307      	movs	r3, #7
 80020b4:	e027      	b.n	8002106 <HAL_GPIO_Init+0x26a>
 80020b6:	2306      	movs	r3, #6
 80020b8:	e025      	b.n	8002106 <HAL_GPIO_Init+0x26a>
 80020ba:	2305      	movs	r3, #5
 80020bc:	e023      	b.n	8002106 <HAL_GPIO_Init+0x26a>
 80020be:	2304      	movs	r3, #4
 80020c0:	e021      	b.n	8002106 <HAL_GPIO_Init+0x26a>
 80020c2:	2303      	movs	r3, #3
 80020c4:	e01f      	b.n	8002106 <HAL_GPIO_Init+0x26a>
 80020c6:	2302      	movs	r3, #2
 80020c8:	e01d      	b.n	8002106 <HAL_GPIO_Init+0x26a>
 80020ca:	2301      	movs	r3, #1
 80020cc:	e01b      	b.n	8002106 <HAL_GPIO_Init+0x26a>
 80020ce:	bf00      	nop
 80020d0:	58000080 	.word	0x58000080
 80020d4:	58024400 	.word	0x58024400
 80020d8:	58000400 	.word	0x58000400
 80020dc:	58020000 	.word	0x58020000
 80020e0:	58020400 	.word	0x58020400
 80020e4:	58020800 	.word	0x58020800
 80020e8:	58020c00 	.word	0x58020c00
 80020ec:	58021000 	.word	0x58021000
 80020f0:	58021400 	.word	0x58021400
 80020f4:	58021800 	.word	0x58021800
 80020f8:	58021c00 	.word	0x58021c00
 80020fc:	58022000 	.word	0x58022000
 8002100:	58022400 	.word	0x58022400
 8002104:	2300      	movs	r3, #0
 8002106:	69fa      	ldr	r2, [r7, #28]
 8002108:	f002 0203 	and.w	r2, r2, #3
 800210c:	0092      	lsls	r2, r2, #2
 800210e:	4093      	lsls	r3, r2
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	4313      	orrs	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002116:	4938      	ldr	r1, [pc, #224]	@ (80021f8 <HAL_GPIO_Init+0x35c>)
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	089b      	lsrs	r3, r3, #2
 800211c:	3302      	adds	r3, #2
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002124:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	43db      	mvns	r3, r3
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	4013      	ands	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d003      	beq.n	800214a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	4313      	orrs	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800214a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002152:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	43db      	mvns	r3, r3
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	4013      	ands	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d003      	beq.n	8002178 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	4313      	orrs	r3, r2
 8002176:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002178:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	43db      	mvns	r3, r3
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	4013      	ands	r3, r2
 800218e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d003      	beq.n	80021a4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	43db      	mvns	r3, r3
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	4013      	ands	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d003      	beq.n	80021ce <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	3301      	adds	r3, #1
 80021d8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	fa22 f303 	lsr.w	r3, r2, r3
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	f47f ae63 	bne.w	8001eb0 <HAL_GPIO_Init+0x14>
  }
}
 80021ea:	bf00      	nop
 80021ec:	bf00      	nop
 80021ee:	3724      	adds	r7, #36	@ 0x24
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr
 80021f8:	58000400 	.word	0x58000400

080021fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	460b      	mov	r3, r1
 8002206:	807b      	strh	r3, [r7, #2]
 8002208:	4613      	mov	r3, r2
 800220a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800220c:	787b      	ldrb	r3, [r7, #1]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d003      	beq.n	800221a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002212:	887a      	ldrh	r2, [r7, #2]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002218:	e003      	b.n	8002222 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800221a:	887b      	ldrh	r3, [r7, #2]
 800221c:	041a      	lsls	r2, r3, #16
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	619a      	str	r2, [r3, #24]
}
 8002222:	bf00      	nop
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr

0800222e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800222e:	b480      	push	{r7}
 8002230:	b085      	sub	sp, #20
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
 8002236:	460b      	mov	r3, r1
 8002238:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	695b      	ldr	r3, [r3, #20]
 800223e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002240:	887a      	ldrh	r2, [r7, #2]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	4013      	ands	r3, r2
 8002246:	041a      	lsls	r2, r3, #16
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	43d9      	mvns	r1, r3
 800224c:	887b      	ldrh	r3, [r7, #2]
 800224e:	400b      	ands	r3, r1
 8002250:	431a      	orrs	r2, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	619a      	str	r2, [r3, #24]
}
 8002256:	bf00      	nop
 8002258:	3714      	adds	r7, #20
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr

08002262 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002262:	b580      	push	{r7, lr}
 8002264:	b082      	sub	sp, #8
 8002266:	af00      	add	r7, sp, #0
 8002268:	4603      	mov	r3, r0
 800226a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800226c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002270:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002274:	88fb      	ldrh	r3, [r7, #6]
 8002276:	4013      	ands	r3, r2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d008      	beq.n	800228e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800227c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002280:	88fb      	ldrh	r3, [r7, #6]
 8002282:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002286:	88fb      	ldrh	r3, [r7, #6]
 8002288:	4618      	mov	r0, r3
 800228a:	f000 f804 	bl	8002296 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800228e:	bf00      	nop
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002296:	b480      	push	{r7}
 8002298:	b083      	sub	sp, #12
 800229a:	af00      	add	r7, sp, #0
 800229c:	4603      	mov	r3, r0
 800229e:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80022b4:	4b19      	ldr	r3, [pc, #100]	@ (800231c <HAL_PWREx_ConfigSupply+0x70>)
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	f003 0304 	and.w	r3, r3, #4
 80022bc:	2b04      	cmp	r3, #4
 80022be:	d00a      	beq.n	80022d6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80022c0:	4b16      	ldr	r3, [pc, #88]	@ (800231c <HAL_PWREx_ConfigSupply+0x70>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	f003 0307 	and.w	r3, r3, #7
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d001      	beq.n	80022d2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e01f      	b.n	8002312 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80022d2:	2300      	movs	r3, #0
 80022d4:	e01d      	b.n	8002312 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80022d6:	4b11      	ldr	r3, [pc, #68]	@ (800231c <HAL_PWREx_ConfigSupply+0x70>)
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	f023 0207 	bic.w	r2, r3, #7
 80022de:	490f      	ldr	r1, [pc, #60]	@ (800231c <HAL_PWREx_ConfigSupply+0x70>)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80022e6:	f7fe fed5 	bl	8001094 <HAL_GetTick>
 80022ea:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80022ec:	e009      	b.n	8002302 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80022ee:	f7fe fed1 	bl	8001094 <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80022fc:	d901      	bls.n	8002302 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e007      	b.n	8002312 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002302:	4b06      	ldr	r3, [pc, #24]	@ (800231c <HAL_PWREx_ConfigSupply+0x70>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800230a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800230e:	d1ee      	bne.n	80022ee <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	58024800 	.word	0x58024800

08002320 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b08c      	sub	sp, #48	@ 0x30
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d102      	bne.n	8002334 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	f000 bc48 	b.w	8002bc4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	2b00      	cmp	r3, #0
 800233e:	f000 8088 	beq.w	8002452 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002342:	4b99      	ldr	r3, [pc, #612]	@ (80025a8 <HAL_RCC_OscConfig+0x288>)
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800234a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800234c:	4b96      	ldr	r3, [pc, #600]	@ (80025a8 <HAL_RCC_OscConfig+0x288>)
 800234e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002350:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002352:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002354:	2b10      	cmp	r3, #16
 8002356:	d007      	beq.n	8002368 <HAL_RCC_OscConfig+0x48>
 8002358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800235a:	2b18      	cmp	r3, #24
 800235c:	d111      	bne.n	8002382 <HAL_RCC_OscConfig+0x62>
 800235e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002360:	f003 0303 	and.w	r3, r3, #3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d10c      	bne.n	8002382 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002368:	4b8f      	ldr	r3, [pc, #572]	@ (80025a8 <HAL_RCC_OscConfig+0x288>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d06d      	beq.n	8002450 <HAL_RCC_OscConfig+0x130>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d169      	bne.n	8002450 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	f000 bc21 	b.w	8002bc4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800238a:	d106      	bne.n	800239a <HAL_RCC_OscConfig+0x7a>
 800238c:	4b86      	ldr	r3, [pc, #536]	@ (80025a8 <HAL_RCC_OscConfig+0x288>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a85      	ldr	r2, [pc, #532]	@ (80025a8 <HAL_RCC_OscConfig+0x288>)
 8002392:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002396:	6013      	str	r3, [r2, #0]
 8002398:	e02e      	b.n	80023f8 <HAL_RCC_OscConfig+0xd8>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d10c      	bne.n	80023bc <HAL_RCC_OscConfig+0x9c>
 80023a2:	4b81      	ldr	r3, [pc, #516]	@ (80025a8 <HAL_RCC_OscConfig+0x288>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a80      	ldr	r2, [pc, #512]	@ (80025a8 <HAL_RCC_OscConfig+0x288>)
 80023a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023ac:	6013      	str	r3, [r2, #0]
 80023ae:	4b7e      	ldr	r3, [pc, #504]	@ (80025a8 <HAL_RCC_OscConfig+0x288>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a7d      	ldr	r2, [pc, #500]	@ (80025a8 <HAL_RCC_OscConfig+0x288>)
 80023b4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023b8:	6013      	str	r3, [r2, #0]
 80023ba:	e01d      	b.n	80023f8 <HAL_RCC_OscConfig+0xd8>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80023c4:	d10c      	bne.n	80023e0 <HAL_RCC_OscConfig+0xc0>
 80023c6:	4b78      	ldr	r3, [pc, #480]	@ (80025a8 <HAL_RCC_OscConfig+0x288>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a77      	ldr	r2, [pc, #476]	@ (80025a8 <HAL_RCC_OscConfig+0x288>)
 80023cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023d0:	6013      	str	r3, [r2, #0]
 80023d2:	4b75      	ldr	r3, [pc, #468]	@ (80025a8 <HAL_RCC_OscConfig+0x288>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a74      	ldr	r2, [pc, #464]	@ (80025a8 <HAL_RCC_OscConfig+0x288>)
 80023d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023dc:	6013      	str	r3, [r2, #0]
 80023de:	e00b      	b.n	80023f8 <HAL_RCC_OscConfig+0xd8>
 80023e0:	4b71      	ldr	r3, [pc, #452]	@ (80025a8 <HAL_RCC_OscConfig+0x288>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a70      	ldr	r2, [pc, #448]	@ (80025a8 <HAL_RCC_OscConfig+0x288>)
 80023e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023ea:	6013      	str	r3, [r2, #0]
 80023ec:	4b6e      	ldr	r3, [pc, #440]	@ (80025a8 <HAL_RCC_OscConfig+0x288>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a6d      	ldr	r2, [pc, #436]	@ (80025a8 <HAL_RCC_OscConfig+0x288>)
 80023f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d013      	beq.n	8002428 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002400:	f7fe fe48 	bl	8001094 <HAL_GetTick>
 8002404:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002406:	e008      	b.n	800241a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002408:	f7fe fe44 	bl	8001094 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b64      	cmp	r3, #100	@ 0x64
 8002414:	d901      	bls.n	800241a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e3d4      	b.n	8002bc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800241a:	4b63      	ldr	r3, [pc, #396]	@ (80025a8 <HAL_RCC_OscConfig+0x288>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d0f0      	beq.n	8002408 <HAL_RCC_OscConfig+0xe8>
 8002426:	e014      	b.n	8002452 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002428:	f7fe fe34 	bl	8001094 <HAL_GetTick>
 800242c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800242e:	e008      	b.n	8002442 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002430:	f7fe fe30 	bl	8001094 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b64      	cmp	r3, #100	@ 0x64
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e3c0      	b.n	8002bc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002442:	4b59      	ldr	r3, [pc, #356]	@ (80025a8 <HAL_RCC_OscConfig+0x288>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d1f0      	bne.n	8002430 <HAL_RCC_OscConfig+0x110>
 800244e:	e000      	b.n	8002452 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002450:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0302 	and.w	r3, r3, #2
 800245a:	2b00      	cmp	r3, #0
 800245c:	f000 80ca 	beq.w	80025f4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002460:	4b51      	ldr	r3, [pc, #324]	@ (80025a8 <HAL_RCC_OscConfig+0x288>)
 8002462:	691b      	ldr	r3, [r3, #16]
 8002464:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002468:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800246a:	4b4f      	ldr	r3, [pc, #316]	@ (80025a8 <HAL_RCC_OscConfig+0x288>)
 800246c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800246e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002470:	6a3b      	ldr	r3, [r7, #32]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d007      	beq.n	8002486 <HAL_RCC_OscConfig+0x166>
 8002476:	6a3b      	ldr	r3, [r7, #32]
 8002478:	2b18      	cmp	r3, #24
 800247a:	d156      	bne.n	800252a <HAL_RCC_OscConfig+0x20a>
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	f003 0303 	and.w	r3, r3, #3
 8002482:	2b00      	cmp	r3, #0
 8002484:	d151      	bne.n	800252a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002486:	4b48      	ldr	r3, [pc, #288]	@ (80025a8 <HAL_RCC_OscConfig+0x288>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0304 	and.w	r3, r3, #4
 800248e:	2b00      	cmp	r3, #0
 8002490:	d005      	beq.n	800249e <HAL_RCC_OscConfig+0x17e>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e392      	b.n	8002bc4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800249e:	4b42      	ldr	r3, [pc, #264]	@ (80025a8 <HAL_RCC_OscConfig+0x288>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f023 0219 	bic.w	r2, r3, #25
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	493f      	ldr	r1, [pc, #252]	@ (80025a8 <HAL_RCC_OscConfig+0x288>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b0:	f7fe fdf0 	bl	8001094 <HAL_GetTick>
 80024b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024b6:	e008      	b.n	80024ca <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024b8:	f7fe fdec 	bl	8001094 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e37c      	b.n	8002bc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024ca:	4b37      	ldr	r3, [pc, #220]	@ (80025a8 <HAL_RCC_OscConfig+0x288>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0304 	and.w	r3, r3, #4
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d0f0      	beq.n	80024b8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d6:	f7fe fde9 	bl	80010ac <HAL_GetREVID>
 80024da:	4603      	mov	r3, r0
 80024dc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d817      	bhi.n	8002514 <HAL_RCC_OscConfig+0x1f4>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	691b      	ldr	r3, [r3, #16]
 80024e8:	2b40      	cmp	r3, #64	@ 0x40
 80024ea:	d108      	bne.n	80024fe <HAL_RCC_OscConfig+0x1de>
 80024ec:	4b2e      	ldr	r3, [pc, #184]	@ (80025a8 <HAL_RCC_OscConfig+0x288>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80024f4:	4a2c      	ldr	r2, [pc, #176]	@ (80025a8 <HAL_RCC_OscConfig+0x288>)
 80024f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024fa:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024fc:	e07a      	b.n	80025f4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024fe:	4b2a      	ldr	r3, [pc, #168]	@ (80025a8 <HAL_RCC_OscConfig+0x288>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	031b      	lsls	r3, r3, #12
 800250c:	4926      	ldr	r1, [pc, #152]	@ (80025a8 <HAL_RCC_OscConfig+0x288>)
 800250e:	4313      	orrs	r3, r2
 8002510:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002512:	e06f      	b.n	80025f4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002514:	4b24      	ldr	r3, [pc, #144]	@ (80025a8 <HAL_RCC_OscConfig+0x288>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	061b      	lsls	r3, r3, #24
 8002522:	4921      	ldr	r1, [pc, #132]	@ (80025a8 <HAL_RCC_OscConfig+0x288>)
 8002524:	4313      	orrs	r3, r2
 8002526:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002528:	e064      	b.n	80025f4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d047      	beq.n	80025c2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002532:	4b1d      	ldr	r3, [pc, #116]	@ (80025a8 <HAL_RCC_OscConfig+0x288>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f023 0219 	bic.w	r2, r3, #25
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	491a      	ldr	r1, [pc, #104]	@ (80025a8 <HAL_RCC_OscConfig+0x288>)
 8002540:	4313      	orrs	r3, r2
 8002542:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002544:	f7fe fda6 	bl	8001094 <HAL_GetTick>
 8002548:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800254a:	e008      	b.n	800255e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800254c:	f7fe fda2 	bl	8001094 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e332      	b.n	8002bc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800255e:	4b12      	ldr	r3, [pc, #72]	@ (80025a8 <HAL_RCC_OscConfig+0x288>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0304 	and.w	r3, r3, #4
 8002566:	2b00      	cmp	r3, #0
 8002568:	d0f0      	beq.n	800254c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800256a:	f7fe fd9f 	bl	80010ac <HAL_GetREVID>
 800256e:	4603      	mov	r3, r0
 8002570:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002574:	4293      	cmp	r3, r2
 8002576:	d819      	bhi.n	80025ac <HAL_RCC_OscConfig+0x28c>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	2b40      	cmp	r3, #64	@ 0x40
 800257e:	d108      	bne.n	8002592 <HAL_RCC_OscConfig+0x272>
 8002580:	4b09      	ldr	r3, [pc, #36]	@ (80025a8 <HAL_RCC_OscConfig+0x288>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002588:	4a07      	ldr	r2, [pc, #28]	@ (80025a8 <HAL_RCC_OscConfig+0x288>)
 800258a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800258e:	6053      	str	r3, [r2, #4]
 8002590:	e030      	b.n	80025f4 <HAL_RCC_OscConfig+0x2d4>
 8002592:	4b05      	ldr	r3, [pc, #20]	@ (80025a8 <HAL_RCC_OscConfig+0x288>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	031b      	lsls	r3, r3, #12
 80025a0:	4901      	ldr	r1, [pc, #4]	@ (80025a8 <HAL_RCC_OscConfig+0x288>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	604b      	str	r3, [r1, #4]
 80025a6:	e025      	b.n	80025f4 <HAL_RCC_OscConfig+0x2d4>
 80025a8:	58024400 	.word	0x58024400
 80025ac:	4b9a      	ldr	r3, [pc, #616]	@ (8002818 <HAL_RCC_OscConfig+0x4f8>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	061b      	lsls	r3, r3, #24
 80025ba:	4997      	ldr	r1, [pc, #604]	@ (8002818 <HAL_RCC_OscConfig+0x4f8>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	604b      	str	r3, [r1, #4]
 80025c0:	e018      	b.n	80025f4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025c2:	4b95      	ldr	r3, [pc, #596]	@ (8002818 <HAL_RCC_OscConfig+0x4f8>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a94      	ldr	r2, [pc, #592]	@ (8002818 <HAL_RCC_OscConfig+0x4f8>)
 80025c8:	f023 0301 	bic.w	r3, r3, #1
 80025cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ce:	f7fe fd61 	bl	8001094 <HAL_GetTick>
 80025d2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80025d4:	e008      	b.n	80025e8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025d6:	f7fe fd5d 	bl	8001094 <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d901      	bls.n	80025e8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e2ed      	b.n	8002bc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80025e8:	4b8b      	ldr	r3, [pc, #556]	@ (8002818 <HAL_RCC_OscConfig+0x4f8>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0304 	and.w	r3, r3, #4
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d1f0      	bne.n	80025d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0310 	and.w	r3, r3, #16
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f000 80a9 	beq.w	8002754 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002602:	4b85      	ldr	r3, [pc, #532]	@ (8002818 <HAL_RCC_OscConfig+0x4f8>)
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800260a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800260c:	4b82      	ldr	r3, [pc, #520]	@ (8002818 <HAL_RCC_OscConfig+0x4f8>)
 800260e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002610:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	2b08      	cmp	r3, #8
 8002616:	d007      	beq.n	8002628 <HAL_RCC_OscConfig+0x308>
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	2b18      	cmp	r3, #24
 800261c:	d13a      	bne.n	8002694 <HAL_RCC_OscConfig+0x374>
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	f003 0303 	and.w	r3, r3, #3
 8002624:	2b01      	cmp	r3, #1
 8002626:	d135      	bne.n	8002694 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002628:	4b7b      	ldr	r3, [pc, #492]	@ (8002818 <HAL_RCC_OscConfig+0x4f8>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002630:	2b00      	cmp	r3, #0
 8002632:	d005      	beq.n	8002640 <HAL_RCC_OscConfig+0x320>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	69db      	ldr	r3, [r3, #28]
 8002638:	2b80      	cmp	r3, #128	@ 0x80
 800263a:	d001      	beq.n	8002640 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e2c1      	b.n	8002bc4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002640:	f7fe fd34 	bl	80010ac <HAL_GetREVID>
 8002644:	4603      	mov	r3, r0
 8002646:	f241 0203 	movw	r2, #4099	@ 0x1003
 800264a:	4293      	cmp	r3, r2
 800264c:	d817      	bhi.n	800267e <HAL_RCC_OscConfig+0x35e>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a1b      	ldr	r3, [r3, #32]
 8002652:	2b20      	cmp	r3, #32
 8002654:	d108      	bne.n	8002668 <HAL_RCC_OscConfig+0x348>
 8002656:	4b70      	ldr	r3, [pc, #448]	@ (8002818 <HAL_RCC_OscConfig+0x4f8>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800265e:	4a6e      	ldr	r2, [pc, #440]	@ (8002818 <HAL_RCC_OscConfig+0x4f8>)
 8002660:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002664:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002666:	e075      	b.n	8002754 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002668:	4b6b      	ldr	r3, [pc, #428]	@ (8002818 <HAL_RCC_OscConfig+0x4f8>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a1b      	ldr	r3, [r3, #32]
 8002674:	069b      	lsls	r3, r3, #26
 8002676:	4968      	ldr	r1, [pc, #416]	@ (8002818 <HAL_RCC_OscConfig+0x4f8>)
 8002678:	4313      	orrs	r3, r2
 800267a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800267c:	e06a      	b.n	8002754 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800267e:	4b66      	ldr	r3, [pc, #408]	@ (8002818 <HAL_RCC_OscConfig+0x4f8>)
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6a1b      	ldr	r3, [r3, #32]
 800268a:	061b      	lsls	r3, r3, #24
 800268c:	4962      	ldr	r1, [pc, #392]	@ (8002818 <HAL_RCC_OscConfig+0x4f8>)
 800268e:	4313      	orrs	r3, r2
 8002690:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002692:	e05f      	b.n	8002754 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	69db      	ldr	r3, [r3, #28]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d042      	beq.n	8002722 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800269c:	4b5e      	ldr	r3, [pc, #376]	@ (8002818 <HAL_RCC_OscConfig+0x4f8>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a5d      	ldr	r2, [pc, #372]	@ (8002818 <HAL_RCC_OscConfig+0x4f8>)
 80026a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a8:	f7fe fcf4 	bl	8001094 <HAL_GetTick>
 80026ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80026ae:	e008      	b.n	80026c2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80026b0:	f7fe fcf0 	bl	8001094 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e280      	b.n	8002bc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80026c2:	4b55      	ldr	r3, [pc, #340]	@ (8002818 <HAL_RCC_OscConfig+0x4f8>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d0f0      	beq.n	80026b0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026ce:	f7fe fced 	bl	80010ac <HAL_GetREVID>
 80026d2:	4603      	mov	r3, r0
 80026d4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80026d8:	4293      	cmp	r3, r2
 80026da:	d817      	bhi.n	800270c <HAL_RCC_OscConfig+0x3ec>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a1b      	ldr	r3, [r3, #32]
 80026e0:	2b20      	cmp	r3, #32
 80026e2:	d108      	bne.n	80026f6 <HAL_RCC_OscConfig+0x3d6>
 80026e4:	4b4c      	ldr	r3, [pc, #304]	@ (8002818 <HAL_RCC_OscConfig+0x4f8>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80026ec:	4a4a      	ldr	r2, [pc, #296]	@ (8002818 <HAL_RCC_OscConfig+0x4f8>)
 80026ee:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80026f2:	6053      	str	r3, [r2, #4]
 80026f4:	e02e      	b.n	8002754 <HAL_RCC_OscConfig+0x434>
 80026f6:	4b48      	ldr	r3, [pc, #288]	@ (8002818 <HAL_RCC_OscConfig+0x4f8>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a1b      	ldr	r3, [r3, #32]
 8002702:	069b      	lsls	r3, r3, #26
 8002704:	4944      	ldr	r1, [pc, #272]	@ (8002818 <HAL_RCC_OscConfig+0x4f8>)
 8002706:	4313      	orrs	r3, r2
 8002708:	604b      	str	r3, [r1, #4]
 800270a:	e023      	b.n	8002754 <HAL_RCC_OscConfig+0x434>
 800270c:	4b42      	ldr	r3, [pc, #264]	@ (8002818 <HAL_RCC_OscConfig+0x4f8>)
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a1b      	ldr	r3, [r3, #32]
 8002718:	061b      	lsls	r3, r3, #24
 800271a:	493f      	ldr	r1, [pc, #252]	@ (8002818 <HAL_RCC_OscConfig+0x4f8>)
 800271c:	4313      	orrs	r3, r2
 800271e:	60cb      	str	r3, [r1, #12]
 8002720:	e018      	b.n	8002754 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002722:	4b3d      	ldr	r3, [pc, #244]	@ (8002818 <HAL_RCC_OscConfig+0x4f8>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a3c      	ldr	r2, [pc, #240]	@ (8002818 <HAL_RCC_OscConfig+0x4f8>)
 8002728:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800272c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800272e:	f7fe fcb1 	bl	8001094 <HAL_GetTick>
 8002732:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002734:	e008      	b.n	8002748 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002736:	f7fe fcad 	bl	8001094 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	2b02      	cmp	r3, #2
 8002742:	d901      	bls.n	8002748 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e23d      	b.n	8002bc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002748:	4b33      	ldr	r3, [pc, #204]	@ (8002818 <HAL_RCC_OscConfig+0x4f8>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002750:	2b00      	cmp	r3, #0
 8002752:	d1f0      	bne.n	8002736 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0308 	and.w	r3, r3, #8
 800275c:	2b00      	cmp	r3, #0
 800275e:	d036      	beq.n	80027ce <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	695b      	ldr	r3, [r3, #20]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d019      	beq.n	800279c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002768:	4b2b      	ldr	r3, [pc, #172]	@ (8002818 <HAL_RCC_OscConfig+0x4f8>)
 800276a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800276c:	4a2a      	ldr	r2, [pc, #168]	@ (8002818 <HAL_RCC_OscConfig+0x4f8>)
 800276e:	f043 0301 	orr.w	r3, r3, #1
 8002772:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002774:	f7fe fc8e 	bl	8001094 <HAL_GetTick>
 8002778:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800277a:	e008      	b.n	800278e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800277c:	f7fe fc8a 	bl	8001094 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b02      	cmp	r3, #2
 8002788:	d901      	bls.n	800278e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e21a      	b.n	8002bc4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800278e:	4b22      	ldr	r3, [pc, #136]	@ (8002818 <HAL_RCC_OscConfig+0x4f8>)
 8002790:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d0f0      	beq.n	800277c <HAL_RCC_OscConfig+0x45c>
 800279a:	e018      	b.n	80027ce <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800279c:	4b1e      	ldr	r3, [pc, #120]	@ (8002818 <HAL_RCC_OscConfig+0x4f8>)
 800279e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027a0:	4a1d      	ldr	r2, [pc, #116]	@ (8002818 <HAL_RCC_OscConfig+0x4f8>)
 80027a2:	f023 0301 	bic.w	r3, r3, #1
 80027a6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a8:	f7fe fc74 	bl	8001094 <HAL_GetTick>
 80027ac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80027ae:	e008      	b.n	80027c2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027b0:	f7fe fc70 	bl	8001094 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e200      	b.n	8002bc4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80027c2:	4b15      	ldr	r3, [pc, #84]	@ (8002818 <HAL_RCC_OscConfig+0x4f8>)
 80027c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1f0      	bne.n	80027b0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0320 	and.w	r3, r3, #32
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d039      	beq.n	800284e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	699b      	ldr	r3, [r3, #24]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d01c      	beq.n	800281c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80027e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002818 <HAL_RCC_OscConfig+0x4f8>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a0c      	ldr	r2, [pc, #48]	@ (8002818 <HAL_RCC_OscConfig+0x4f8>)
 80027e8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80027ec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80027ee:	f7fe fc51 	bl	8001094 <HAL_GetTick>
 80027f2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80027f4:	e008      	b.n	8002808 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027f6:	f7fe fc4d 	bl	8001094 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	2b02      	cmp	r3, #2
 8002802:	d901      	bls.n	8002808 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e1dd      	b.n	8002bc4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002808:	4b03      	ldr	r3, [pc, #12]	@ (8002818 <HAL_RCC_OscConfig+0x4f8>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d0f0      	beq.n	80027f6 <HAL_RCC_OscConfig+0x4d6>
 8002814:	e01b      	b.n	800284e <HAL_RCC_OscConfig+0x52e>
 8002816:	bf00      	nop
 8002818:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800281c:	4b9b      	ldr	r3, [pc, #620]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a9a      	ldr	r2, [pc, #616]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 8002822:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002826:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002828:	f7fe fc34 	bl	8001094 <HAL_GetTick>
 800282c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800282e:	e008      	b.n	8002842 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002830:	f7fe fc30 	bl	8001094 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e1c0      	b.n	8002bc4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002842:	4b92      	ldr	r3, [pc, #584]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1f0      	bne.n	8002830 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0304 	and.w	r3, r3, #4
 8002856:	2b00      	cmp	r3, #0
 8002858:	f000 8081 	beq.w	800295e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800285c:	4b8c      	ldr	r3, [pc, #560]	@ (8002a90 <HAL_RCC_OscConfig+0x770>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a8b      	ldr	r2, [pc, #556]	@ (8002a90 <HAL_RCC_OscConfig+0x770>)
 8002862:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002866:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002868:	f7fe fc14 	bl	8001094 <HAL_GetTick>
 800286c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800286e:	e008      	b.n	8002882 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002870:	f7fe fc10 	bl	8001094 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b64      	cmp	r3, #100	@ 0x64
 800287c:	d901      	bls.n	8002882 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e1a0      	b.n	8002bc4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002882:	4b83      	ldr	r3, [pc, #524]	@ (8002a90 <HAL_RCC_OscConfig+0x770>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800288a:	2b00      	cmp	r3, #0
 800288c:	d0f0      	beq.n	8002870 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	2b01      	cmp	r3, #1
 8002894:	d106      	bne.n	80028a4 <HAL_RCC_OscConfig+0x584>
 8002896:	4b7d      	ldr	r3, [pc, #500]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 8002898:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800289a:	4a7c      	ldr	r2, [pc, #496]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 800289c:	f043 0301 	orr.w	r3, r3, #1
 80028a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80028a2:	e02d      	b.n	8002900 <HAL_RCC_OscConfig+0x5e0>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d10c      	bne.n	80028c6 <HAL_RCC_OscConfig+0x5a6>
 80028ac:	4b77      	ldr	r3, [pc, #476]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 80028ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028b0:	4a76      	ldr	r2, [pc, #472]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 80028b2:	f023 0301 	bic.w	r3, r3, #1
 80028b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80028b8:	4b74      	ldr	r3, [pc, #464]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 80028ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028bc:	4a73      	ldr	r2, [pc, #460]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 80028be:	f023 0304 	bic.w	r3, r3, #4
 80028c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80028c4:	e01c      	b.n	8002900 <HAL_RCC_OscConfig+0x5e0>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	2b05      	cmp	r3, #5
 80028cc:	d10c      	bne.n	80028e8 <HAL_RCC_OscConfig+0x5c8>
 80028ce:	4b6f      	ldr	r3, [pc, #444]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 80028d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028d2:	4a6e      	ldr	r2, [pc, #440]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 80028d4:	f043 0304 	orr.w	r3, r3, #4
 80028d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80028da:	4b6c      	ldr	r3, [pc, #432]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 80028dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028de:	4a6b      	ldr	r2, [pc, #428]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 80028e0:	f043 0301 	orr.w	r3, r3, #1
 80028e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80028e6:	e00b      	b.n	8002900 <HAL_RCC_OscConfig+0x5e0>
 80028e8:	4b68      	ldr	r3, [pc, #416]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 80028ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028ec:	4a67      	ldr	r2, [pc, #412]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 80028ee:	f023 0301 	bic.w	r3, r3, #1
 80028f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80028f4:	4b65      	ldr	r3, [pc, #404]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 80028f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028f8:	4a64      	ldr	r2, [pc, #400]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 80028fa:	f023 0304 	bic.w	r3, r3, #4
 80028fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d015      	beq.n	8002934 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002908:	f7fe fbc4 	bl	8001094 <HAL_GetTick>
 800290c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800290e:	e00a      	b.n	8002926 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002910:	f7fe fbc0 	bl	8001094 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800291e:	4293      	cmp	r3, r2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e14e      	b.n	8002bc4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002926:	4b59      	ldr	r3, [pc, #356]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 8002928:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d0ee      	beq.n	8002910 <HAL_RCC_OscConfig+0x5f0>
 8002932:	e014      	b.n	800295e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002934:	f7fe fbae 	bl	8001094 <HAL_GetTick>
 8002938:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800293a:	e00a      	b.n	8002952 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800293c:	f7fe fbaa 	bl	8001094 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	f241 3288 	movw	r2, #5000	@ 0x1388
 800294a:	4293      	cmp	r3, r2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e138      	b.n	8002bc4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002952:	4b4e      	ldr	r3, [pc, #312]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 8002954:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d1ee      	bne.n	800293c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002962:	2b00      	cmp	r3, #0
 8002964:	f000 812d 	beq.w	8002bc2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002968:	4b48      	ldr	r3, [pc, #288]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 800296a:	691b      	ldr	r3, [r3, #16]
 800296c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002970:	2b18      	cmp	r3, #24
 8002972:	f000 80bd 	beq.w	8002af0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800297a:	2b02      	cmp	r3, #2
 800297c:	f040 809e 	bne.w	8002abc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002980:	4b42      	ldr	r3, [pc, #264]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a41      	ldr	r2, [pc, #260]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 8002986:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800298a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800298c:	f7fe fb82 	bl	8001094 <HAL_GetTick>
 8002990:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002992:	e008      	b.n	80029a6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002994:	f7fe fb7e 	bl	8001094 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e10e      	b.n	8002bc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029a6:	4b39      	ldr	r3, [pc, #228]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1f0      	bne.n	8002994 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029b2:	4b36      	ldr	r3, [pc, #216]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 80029b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80029b6:	4b37      	ldr	r3, [pc, #220]	@ (8002a94 <HAL_RCC_OscConfig+0x774>)
 80029b8:	4013      	ands	r3, r2
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80029c2:	0112      	lsls	r2, r2, #4
 80029c4:	430a      	orrs	r2, r1
 80029c6:	4931      	ldr	r1, [pc, #196]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	628b      	str	r3, [r1, #40]	@ 0x28
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d0:	3b01      	subs	r3, #1
 80029d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029da:	3b01      	subs	r3, #1
 80029dc:	025b      	lsls	r3, r3, #9
 80029de:	b29b      	uxth	r3, r3
 80029e0:	431a      	orrs	r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029e6:	3b01      	subs	r3, #1
 80029e8:	041b      	lsls	r3, r3, #16
 80029ea:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80029ee:	431a      	orrs	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029f4:	3b01      	subs	r3, #1
 80029f6:	061b      	lsls	r3, r3, #24
 80029f8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80029fc:	4923      	ldr	r1, [pc, #140]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002a02:	4b22      	ldr	r3, [pc, #136]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 8002a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a06:	4a21      	ldr	r2, [pc, #132]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 8002a08:	f023 0301 	bic.w	r3, r3, #1
 8002a0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002a0e:	4b1f      	ldr	r3, [pc, #124]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 8002a10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a12:	4b21      	ldr	r3, [pc, #132]	@ (8002a98 <HAL_RCC_OscConfig+0x778>)
 8002a14:	4013      	ands	r3, r2
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002a1a:	00d2      	lsls	r2, r2, #3
 8002a1c:	491b      	ldr	r1, [pc, #108]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002a22:	4b1a      	ldr	r3, [pc, #104]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 8002a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a26:	f023 020c 	bic.w	r2, r3, #12
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a2e:	4917      	ldr	r1, [pc, #92]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002a34:	4b15      	ldr	r3, [pc, #84]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 8002a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a38:	f023 0202 	bic.w	r2, r3, #2
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a40:	4912      	ldr	r1, [pc, #72]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002a46:	4b11      	ldr	r3, [pc, #68]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 8002a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a4a:	4a10      	ldr	r2, [pc, #64]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 8002a4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a50:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a52:	4b0e      	ldr	r3, [pc, #56]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 8002a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a56:	4a0d      	ldr	r2, [pc, #52]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 8002a58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 8002a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a62:	4a0a      	ldr	r2, [pc, #40]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 8002a64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a68:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002a6a:	4b08      	ldr	r3, [pc, #32]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 8002a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a6e:	4a07      	ldr	r2, [pc, #28]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 8002a70:	f043 0301 	orr.w	r3, r3, #1
 8002a74:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a76:	4b05      	ldr	r3, [pc, #20]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a04      	ldr	r2, [pc, #16]	@ (8002a8c <HAL_RCC_OscConfig+0x76c>)
 8002a7c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a82:	f7fe fb07 	bl	8001094 <HAL_GetTick>
 8002a86:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a88:	e011      	b.n	8002aae <HAL_RCC_OscConfig+0x78e>
 8002a8a:	bf00      	nop
 8002a8c:	58024400 	.word	0x58024400
 8002a90:	58024800 	.word	0x58024800
 8002a94:	fffffc0c 	.word	0xfffffc0c
 8002a98:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a9c:	f7fe fafa 	bl	8001094 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e08a      	b.n	8002bc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002aae:	4b47      	ldr	r3, [pc, #284]	@ (8002bcc <HAL_RCC_OscConfig+0x8ac>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d0f0      	beq.n	8002a9c <HAL_RCC_OscConfig+0x77c>
 8002aba:	e082      	b.n	8002bc2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002abc:	4b43      	ldr	r3, [pc, #268]	@ (8002bcc <HAL_RCC_OscConfig+0x8ac>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a42      	ldr	r2, [pc, #264]	@ (8002bcc <HAL_RCC_OscConfig+0x8ac>)
 8002ac2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ac6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac8:	f7fe fae4 	bl	8001094 <HAL_GetTick>
 8002acc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ace:	e008      	b.n	8002ae2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ad0:	f7fe fae0 	bl	8001094 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e070      	b.n	8002bc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ae2:	4b3a      	ldr	r3, [pc, #232]	@ (8002bcc <HAL_RCC_OscConfig+0x8ac>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1f0      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x7b0>
 8002aee:	e068      	b.n	8002bc2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002af0:	4b36      	ldr	r3, [pc, #216]	@ (8002bcc <HAL_RCC_OscConfig+0x8ac>)
 8002af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002af4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002af6:	4b35      	ldr	r3, [pc, #212]	@ (8002bcc <HAL_RCC_OscConfig+0x8ac>)
 8002af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002afa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d031      	beq.n	8002b68 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	f003 0203 	and.w	r2, r3, #3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d12a      	bne.n	8002b68 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	091b      	lsrs	r3, r3, #4
 8002b16:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d122      	bne.n	8002b68 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b2c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d11a      	bne.n	8002b68 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	0a5b      	lsrs	r3, r3, #9
 8002b36:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b3e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d111      	bne.n	8002b68 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	0c1b      	lsrs	r3, r3, #16
 8002b48:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b50:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d108      	bne.n	8002b68 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	0e1b      	lsrs	r3, r3, #24
 8002b5a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b62:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d001      	beq.n	8002b6c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e02b      	b.n	8002bc4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002b6c:	4b17      	ldr	r3, [pc, #92]	@ (8002bcc <HAL_RCC_OscConfig+0x8ac>)
 8002b6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b70:	08db      	lsrs	r3, r3, #3
 8002b72:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002b76:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b7c:	693a      	ldr	r2, [r7, #16]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d01f      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002b82:	4b12      	ldr	r3, [pc, #72]	@ (8002bcc <HAL_RCC_OscConfig+0x8ac>)
 8002b84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b86:	4a11      	ldr	r2, [pc, #68]	@ (8002bcc <HAL_RCC_OscConfig+0x8ac>)
 8002b88:	f023 0301 	bic.w	r3, r3, #1
 8002b8c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b8e:	f7fe fa81 	bl	8001094 <HAL_GetTick>
 8002b92:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002b94:	bf00      	nop
 8002b96:	f7fe fa7d 	bl	8001094 <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d0f9      	beq.n	8002b96 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8002bcc <HAL_RCC_OscConfig+0x8ac>)
 8002ba4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ba6:	4b0a      	ldr	r3, [pc, #40]	@ (8002bd0 <HAL_RCC_OscConfig+0x8b0>)
 8002ba8:	4013      	ands	r3, r2
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002bae:	00d2      	lsls	r2, r2, #3
 8002bb0:	4906      	ldr	r1, [pc, #24]	@ (8002bcc <HAL_RCC_OscConfig+0x8ac>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002bb6:	4b05      	ldr	r3, [pc, #20]	@ (8002bcc <HAL_RCC_OscConfig+0x8ac>)
 8002bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bba:	4a04      	ldr	r2, [pc, #16]	@ (8002bcc <HAL_RCC_OscConfig+0x8ac>)
 8002bbc:	f043 0301 	orr.w	r3, r3, #1
 8002bc0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002bc2:	2300      	movs	r3, #0
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3730      	adds	r7, #48	@ 0x30
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	58024400 	.word	0x58024400
 8002bd0:	ffff0007 	.word	0xffff0007

08002bd4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b086      	sub	sp, #24
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d101      	bne.n	8002be8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e19c      	b.n	8002f22 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002be8:	4b8a      	ldr	r3, [pc, #552]	@ (8002e14 <HAL_RCC_ClockConfig+0x240>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 030f 	and.w	r3, r3, #15
 8002bf0:	683a      	ldr	r2, [r7, #0]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d910      	bls.n	8002c18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bf6:	4b87      	ldr	r3, [pc, #540]	@ (8002e14 <HAL_RCC_ClockConfig+0x240>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f023 020f 	bic.w	r2, r3, #15
 8002bfe:	4985      	ldr	r1, [pc, #532]	@ (8002e14 <HAL_RCC_ClockConfig+0x240>)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c06:	4b83      	ldr	r3, [pc, #524]	@ (8002e14 <HAL_RCC_ClockConfig+0x240>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 030f 	and.w	r3, r3, #15
 8002c0e:	683a      	ldr	r2, [r7, #0]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d001      	beq.n	8002c18 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e184      	b.n	8002f22 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0304 	and.w	r3, r3, #4
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d010      	beq.n	8002c46 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	691a      	ldr	r2, [r3, #16]
 8002c28:	4b7b      	ldr	r3, [pc, #492]	@ (8002e18 <HAL_RCC_ClockConfig+0x244>)
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d908      	bls.n	8002c46 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002c34:	4b78      	ldr	r3, [pc, #480]	@ (8002e18 <HAL_RCC_ClockConfig+0x244>)
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	4975      	ldr	r1, [pc, #468]	@ (8002e18 <HAL_RCC_ClockConfig+0x244>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0308 	and.w	r3, r3, #8
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d010      	beq.n	8002c74 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	695a      	ldr	r2, [r3, #20]
 8002c56:	4b70      	ldr	r3, [pc, #448]	@ (8002e18 <HAL_RCC_ClockConfig+0x244>)
 8002c58:	69db      	ldr	r3, [r3, #28]
 8002c5a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d908      	bls.n	8002c74 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002c62:	4b6d      	ldr	r3, [pc, #436]	@ (8002e18 <HAL_RCC_ClockConfig+0x244>)
 8002c64:	69db      	ldr	r3, [r3, #28]
 8002c66:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	496a      	ldr	r1, [pc, #424]	@ (8002e18 <HAL_RCC_ClockConfig+0x244>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0310 	and.w	r3, r3, #16
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d010      	beq.n	8002ca2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	699a      	ldr	r2, [r3, #24]
 8002c84:	4b64      	ldr	r3, [pc, #400]	@ (8002e18 <HAL_RCC_ClockConfig+0x244>)
 8002c86:	69db      	ldr	r3, [r3, #28]
 8002c88:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d908      	bls.n	8002ca2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002c90:	4b61      	ldr	r3, [pc, #388]	@ (8002e18 <HAL_RCC_ClockConfig+0x244>)
 8002c92:	69db      	ldr	r3, [r3, #28]
 8002c94:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	699b      	ldr	r3, [r3, #24]
 8002c9c:	495e      	ldr	r1, [pc, #376]	@ (8002e18 <HAL_RCC_ClockConfig+0x244>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0320 	and.w	r3, r3, #32
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d010      	beq.n	8002cd0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	69da      	ldr	r2, [r3, #28]
 8002cb2:	4b59      	ldr	r3, [pc, #356]	@ (8002e18 <HAL_RCC_ClockConfig+0x244>)
 8002cb4:	6a1b      	ldr	r3, [r3, #32]
 8002cb6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d908      	bls.n	8002cd0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002cbe:	4b56      	ldr	r3, [pc, #344]	@ (8002e18 <HAL_RCC_ClockConfig+0x244>)
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
 8002cc2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	69db      	ldr	r3, [r3, #28]
 8002cca:	4953      	ldr	r1, [pc, #332]	@ (8002e18 <HAL_RCC_ClockConfig+0x244>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0302 	and.w	r3, r3, #2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d010      	beq.n	8002cfe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	68da      	ldr	r2, [r3, #12]
 8002ce0:	4b4d      	ldr	r3, [pc, #308]	@ (8002e18 <HAL_RCC_ClockConfig+0x244>)
 8002ce2:	699b      	ldr	r3, [r3, #24]
 8002ce4:	f003 030f 	and.w	r3, r3, #15
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d908      	bls.n	8002cfe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cec:	4b4a      	ldr	r3, [pc, #296]	@ (8002e18 <HAL_RCC_ClockConfig+0x244>)
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	f023 020f 	bic.w	r2, r3, #15
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	4947      	ldr	r1, [pc, #284]	@ (8002e18 <HAL_RCC_ClockConfig+0x244>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d055      	beq.n	8002db6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002d0a:	4b43      	ldr	r3, [pc, #268]	@ (8002e18 <HAL_RCC_ClockConfig+0x244>)
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	4940      	ldr	r1, [pc, #256]	@ (8002e18 <HAL_RCC_ClockConfig+0x244>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d107      	bne.n	8002d34 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d24:	4b3c      	ldr	r3, [pc, #240]	@ (8002e18 <HAL_RCC_ClockConfig+0x244>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d121      	bne.n	8002d74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e0f6      	b.n	8002f22 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	2b03      	cmp	r3, #3
 8002d3a:	d107      	bne.n	8002d4c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d3c:	4b36      	ldr	r3, [pc, #216]	@ (8002e18 <HAL_RCC_ClockConfig+0x244>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d115      	bne.n	8002d74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e0ea      	b.n	8002f22 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d107      	bne.n	8002d64 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d54:	4b30      	ldr	r3, [pc, #192]	@ (8002e18 <HAL_RCC_ClockConfig+0x244>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d109      	bne.n	8002d74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e0de      	b.n	8002f22 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d64:	4b2c      	ldr	r3, [pc, #176]	@ (8002e18 <HAL_RCC_ClockConfig+0x244>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0304 	and.w	r3, r3, #4
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d101      	bne.n	8002d74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e0d6      	b.n	8002f22 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d74:	4b28      	ldr	r3, [pc, #160]	@ (8002e18 <HAL_RCC_ClockConfig+0x244>)
 8002d76:	691b      	ldr	r3, [r3, #16]
 8002d78:	f023 0207 	bic.w	r2, r3, #7
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	4925      	ldr	r1, [pc, #148]	@ (8002e18 <HAL_RCC_ClockConfig+0x244>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d86:	f7fe f985 	bl	8001094 <HAL_GetTick>
 8002d8a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d8c:	e00a      	b.n	8002da4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d8e:	f7fe f981 	bl	8001094 <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e0be      	b.n	8002f22 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002da4:	4b1c      	ldr	r3, [pc, #112]	@ (8002e18 <HAL_RCC_ClockConfig+0x244>)
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	00db      	lsls	r3, r3, #3
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d1eb      	bne.n	8002d8e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0302 	and.w	r3, r3, #2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d010      	beq.n	8002de4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	68da      	ldr	r2, [r3, #12]
 8002dc6:	4b14      	ldr	r3, [pc, #80]	@ (8002e18 <HAL_RCC_ClockConfig+0x244>)
 8002dc8:	699b      	ldr	r3, [r3, #24]
 8002dca:	f003 030f 	and.w	r3, r3, #15
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d208      	bcs.n	8002de4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dd2:	4b11      	ldr	r3, [pc, #68]	@ (8002e18 <HAL_RCC_ClockConfig+0x244>)
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	f023 020f 	bic.w	r2, r3, #15
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	490e      	ldr	r1, [pc, #56]	@ (8002e18 <HAL_RCC_ClockConfig+0x244>)
 8002de0:	4313      	orrs	r3, r2
 8002de2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002de4:	4b0b      	ldr	r3, [pc, #44]	@ (8002e14 <HAL_RCC_ClockConfig+0x240>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 030f 	and.w	r3, r3, #15
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d214      	bcs.n	8002e1c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002df2:	4b08      	ldr	r3, [pc, #32]	@ (8002e14 <HAL_RCC_ClockConfig+0x240>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f023 020f 	bic.w	r2, r3, #15
 8002dfa:	4906      	ldr	r1, [pc, #24]	@ (8002e14 <HAL_RCC_ClockConfig+0x240>)
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e02:	4b04      	ldr	r3, [pc, #16]	@ (8002e14 <HAL_RCC_ClockConfig+0x240>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 030f 	and.w	r3, r3, #15
 8002e0a:	683a      	ldr	r2, [r7, #0]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d005      	beq.n	8002e1c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e086      	b.n	8002f22 <HAL_RCC_ClockConfig+0x34e>
 8002e14:	52002000 	.word	0x52002000
 8002e18:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0304 	and.w	r3, r3, #4
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d010      	beq.n	8002e4a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	691a      	ldr	r2, [r3, #16]
 8002e2c:	4b3f      	ldr	r3, [pc, #252]	@ (8002f2c <HAL_RCC_ClockConfig+0x358>)
 8002e2e:	699b      	ldr	r3, [r3, #24]
 8002e30:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d208      	bcs.n	8002e4a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002e38:	4b3c      	ldr	r3, [pc, #240]	@ (8002f2c <HAL_RCC_ClockConfig+0x358>)
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	691b      	ldr	r3, [r3, #16]
 8002e44:	4939      	ldr	r1, [pc, #228]	@ (8002f2c <HAL_RCC_ClockConfig+0x358>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0308 	and.w	r3, r3, #8
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d010      	beq.n	8002e78 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	695a      	ldr	r2, [r3, #20]
 8002e5a:	4b34      	ldr	r3, [pc, #208]	@ (8002f2c <HAL_RCC_ClockConfig+0x358>)
 8002e5c:	69db      	ldr	r3, [r3, #28]
 8002e5e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d208      	bcs.n	8002e78 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002e66:	4b31      	ldr	r3, [pc, #196]	@ (8002f2c <HAL_RCC_ClockConfig+0x358>)
 8002e68:	69db      	ldr	r3, [r3, #28]
 8002e6a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	695b      	ldr	r3, [r3, #20]
 8002e72:	492e      	ldr	r1, [pc, #184]	@ (8002f2c <HAL_RCC_ClockConfig+0x358>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0310 	and.w	r3, r3, #16
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d010      	beq.n	8002ea6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	699a      	ldr	r2, [r3, #24]
 8002e88:	4b28      	ldr	r3, [pc, #160]	@ (8002f2c <HAL_RCC_ClockConfig+0x358>)
 8002e8a:	69db      	ldr	r3, [r3, #28]
 8002e8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d208      	bcs.n	8002ea6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002e94:	4b25      	ldr	r3, [pc, #148]	@ (8002f2c <HAL_RCC_ClockConfig+0x358>)
 8002e96:	69db      	ldr	r3, [r3, #28]
 8002e98:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	4922      	ldr	r1, [pc, #136]	@ (8002f2c <HAL_RCC_ClockConfig+0x358>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0320 	and.w	r3, r3, #32
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d010      	beq.n	8002ed4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	69da      	ldr	r2, [r3, #28]
 8002eb6:	4b1d      	ldr	r3, [pc, #116]	@ (8002f2c <HAL_RCC_ClockConfig+0x358>)
 8002eb8:	6a1b      	ldr	r3, [r3, #32]
 8002eba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d208      	bcs.n	8002ed4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002ec2:	4b1a      	ldr	r3, [pc, #104]	@ (8002f2c <HAL_RCC_ClockConfig+0x358>)
 8002ec4:	6a1b      	ldr	r3, [r3, #32]
 8002ec6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	69db      	ldr	r3, [r3, #28]
 8002ece:	4917      	ldr	r1, [pc, #92]	@ (8002f2c <HAL_RCC_ClockConfig+0x358>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002ed4:	f000 f834 	bl	8002f40 <HAL_RCC_GetSysClockFreq>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	4b14      	ldr	r3, [pc, #80]	@ (8002f2c <HAL_RCC_ClockConfig+0x358>)
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	0a1b      	lsrs	r3, r3, #8
 8002ee0:	f003 030f 	and.w	r3, r3, #15
 8002ee4:	4912      	ldr	r1, [pc, #72]	@ (8002f30 <HAL_RCC_ClockConfig+0x35c>)
 8002ee6:	5ccb      	ldrb	r3, [r1, r3]
 8002ee8:	f003 031f 	and.w	r3, r3, #31
 8002eec:	fa22 f303 	lsr.w	r3, r2, r3
 8002ef0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002ef2:	4b0e      	ldr	r3, [pc, #56]	@ (8002f2c <HAL_RCC_ClockConfig+0x358>)
 8002ef4:	699b      	ldr	r3, [r3, #24]
 8002ef6:	f003 030f 	and.w	r3, r3, #15
 8002efa:	4a0d      	ldr	r2, [pc, #52]	@ (8002f30 <HAL_RCC_ClockConfig+0x35c>)
 8002efc:	5cd3      	ldrb	r3, [r2, r3]
 8002efe:	f003 031f 	and.w	r3, r3, #31
 8002f02:	693a      	ldr	r2, [r7, #16]
 8002f04:	fa22 f303 	lsr.w	r3, r2, r3
 8002f08:	4a0a      	ldr	r2, [pc, #40]	@ (8002f34 <HAL_RCC_ClockConfig+0x360>)
 8002f0a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f0c:	4a0a      	ldr	r2, [pc, #40]	@ (8002f38 <HAL_RCC_ClockConfig+0x364>)
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002f12:	4b0a      	ldr	r3, [pc, #40]	@ (8002f3c <HAL_RCC_ClockConfig+0x368>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7fe f872 	bl	8001000 <HAL_InitTick>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3718      	adds	r7, #24
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	58024400 	.word	0x58024400
 8002f30:	08007b44 	.word	0x08007b44
 8002f34:	24000004 	.word	0x24000004
 8002f38:	24000000 	.word	0x24000000
 8002f3c:	24000008 	.word	0x24000008

08002f40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b089      	sub	sp, #36	@ 0x24
 8002f44:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f46:	4bb3      	ldr	r3, [pc, #716]	@ (8003214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002f4e:	2b18      	cmp	r3, #24
 8002f50:	f200 8155 	bhi.w	80031fe <HAL_RCC_GetSysClockFreq+0x2be>
 8002f54:	a201      	add	r2, pc, #4	@ (adr r2, 8002f5c <HAL_RCC_GetSysClockFreq+0x1c>)
 8002f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f5a:	bf00      	nop
 8002f5c:	08002fc1 	.word	0x08002fc1
 8002f60:	080031ff 	.word	0x080031ff
 8002f64:	080031ff 	.word	0x080031ff
 8002f68:	080031ff 	.word	0x080031ff
 8002f6c:	080031ff 	.word	0x080031ff
 8002f70:	080031ff 	.word	0x080031ff
 8002f74:	080031ff 	.word	0x080031ff
 8002f78:	080031ff 	.word	0x080031ff
 8002f7c:	08002fe7 	.word	0x08002fe7
 8002f80:	080031ff 	.word	0x080031ff
 8002f84:	080031ff 	.word	0x080031ff
 8002f88:	080031ff 	.word	0x080031ff
 8002f8c:	080031ff 	.word	0x080031ff
 8002f90:	080031ff 	.word	0x080031ff
 8002f94:	080031ff 	.word	0x080031ff
 8002f98:	080031ff 	.word	0x080031ff
 8002f9c:	08002fed 	.word	0x08002fed
 8002fa0:	080031ff 	.word	0x080031ff
 8002fa4:	080031ff 	.word	0x080031ff
 8002fa8:	080031ff 	.word	0x080031ff
 8002fac:	080031ff 	.word	0x080031ff
 8002fb0:	080031ff 	.word	0x080031ff
 8002fb4:	080031ff 	.word	0x080031ff
 8002fb8:	080031ff 	.word	0x080031ff
 8002fbc:	08002ff3 	.word	0x08002ff3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002fc0:	4b94      	ldr	r3, [pc, #592]	@ (8003214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0320 	and.w	r3, r3, #32
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d009      	beq.n	8002fe0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002fcc:	4b91      	ldr	r3, [pc, #580]	@ (8003214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	08db      	lsrs	r3, r3, #3
 8002fd2:	f003 0303 	and.w	r3, r3, #3
 8002fd6:	4a90      	ldr	r2, [pc, #576]	@ (8003218 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002fd8:	fa22 f303 	lsr.w	r3, r2, r3
 8002fdc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002fde:	e111      	b.n	8003204 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002fe0:	4b8d      	ldr	r3, [pc, #564]	@ (8003218 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002fe2:	61bb      	str	r3, [r7, #24]
      break;
 8002fe4:	e10e      	b.n	8003204 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002fe6:	4b8d      	ldr	r3, [pc, #564]	@ (800321c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002fe8:	61bb      	str	r3, [r7, #24]
      break;
 8002fea:	e10b      	b.n	8003204 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002fec:	4b8c      	ldr	r3, [pc, #560]	@ (8003220 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002fee:	61bb      	str	r3, [r7, #24]
      break;
 8002ff0:	e108      	b.n	8003204 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002ff2:	4b88      	ldr	r3, [pc, #544]	@ (8003214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ff6:	f003 0303 	and.w	r3, r3, #3
 8002ffa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002ffc:	4b85      	ldr	r3, [pc, #532]	@ (8003214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003000:	091b      	lsrs	r3, r3, #4
 8003002:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003006:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003008:	4b82      	ldr	r3, [pc, #520]	@ (8003214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800300a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800300c:	f003 0301 	and.w	r3, r3, #1
 8003010:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003012:	4b80      	ldr	r3, [pc, #512]	@ (8003214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003014:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003016:	08db      	lsrs	r3, r3, #3
 8003018:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800301c:	68fa      	ldr	r2, [r7, #12]
 800301e:	fb02 f303 	mul.w	r3, r2, r3
 8003022:	ee07 3a90 	vmov	s15, r3
 8003026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800302a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	2b00      	cmp	r3, #0
 8003032:	f000 80e1 	beq.w	80031f8 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	2b02      	cmp	r3, #2
 800303a:	f000 8083 	beq.w	8003144 <HAL_RCC_GetSysClockFreq+0x204>
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	2b02      	cmp	r3, #2
 8003042:	f200 80a1 	bhi.w	8003188 <HAL_RCC_GetSysClockFreq+0x248>
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d003      	beq.n	8003054 <HAL_RCC_GetSysClockFreq+0x114>
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d056      	beq.n	8003100 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003052:	e099      	b.n	8003188 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003054:	4b6f      	ldr	r3, [pc, #444]	@ (8003214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0320 	and.w	r3, r3, #32
 800305c:	2b00      	cmp	r3, #0
 800305e:	d02d      	beq.n	80030bc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003060:	4b6c      	ldr	r3, [pc, #432]	@ (8003214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	08db      	lsrs	r3, r3, #3
 8003066:	f003 0303 	and.w	r3, r3, #3
 800306a:	4a6b      	ldr	r2, [pc, #428]	@ (8003218 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800306c:	fa22 f303 	lsr.w	r3, r2, r3
 8003070:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	ee07 3a90 	vmov	s15, r3
 8003078:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	ee07 3a90 	vmov	s15, r3
 8003082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003086:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800308a:	4b62      	ldr	r3, [pc, #392]	@ (8003214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800308c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800308e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003092:	ee07 3a90 	vmov	s15, r3
 8003096:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800309a:	ed97 6a02 	vldr	s12, [r7, #8]
 800309e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003224 <HAL_RCC_GetSysClockFreq+0x2e4>
 80030a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030b6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80030ba:	e087      	b.n	80031cc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	ee07 3a90 	vmov	s15, r3
 80030c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030c6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003228 <HAL_RCC_GetSysClockFreq+0x2e8>
 80030ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030ce:	4b51      	ldr	r3, [pc, #324]	@ (8003214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030d6:	ee07 3a90 	vmov	s15, r3
 80030da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030de:	ed97 6a02 	vldr	s12, [r7, #8]
 80030e2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003224 <HAL_RCC_GetSysClockFreq+0x2e4>
 80030e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80030fe:	e065      	b.n	80031cc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	ee07 3a90 	vmov	s15, r3
 8003106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800310a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800322c <HAL_RCC_GetSysClockFreq+0x2ec>
 800310e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003112:	4b40      	ldr	r3, [pc, #256]	@ (8003214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003116:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800311a:	ee07 3a90 	vmov	s15, r3
 800311e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003122:	ed97 6a02 	vldr	s12, [r7, #8]
 8003126:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003224 <HAL_RCC_GetSysClockFreq+0x2e4>
 800312a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800312e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003132:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003136:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800313a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800313e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003142:	e043      	b.n	80031cc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	ee07 3a90 	vmov	s15, r3
 800314a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800314e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003230 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003152:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003156:	4b2f      	ldr	r3, [pc, #188]	@ (8003214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800315a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800315e:	ee07 3a90 	vmov	s15, r3
 8003162:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003166:	ed97 6a02 	vldr	s12, [r7, #8]
 800316a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003224 <HAL_RCC_GetSysClockFreq+0x2e4>
 800316e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003172:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003176:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800317a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800317e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003182:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003186:	e021      	b.n	80031cc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	ee07 3a90 	vmov	s15, r3
 800318e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003192:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800322c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003196:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800319a:	4b1e      	ldr	r3, [pc, #120]	@ (8003214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800319c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800319e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031a2:	ee07 3a90 	vmov	s15, r3
 80031a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80031ae:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003224 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80031ca:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80031cc:	4b11      	ldr	r3, [pc, #68]	@ (8003214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031d0:	0a5b      	lsrs	r3, r3, #9
 80031d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80031d6:	3301      	adds	r3, #1
 80031d8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	ee07 3a90 	vmov	s15, r3
 80031e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80031e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80031e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031f0:	ee17 3a90 	vmov	r3, s15
 80031f4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80031f6:	e005      	b.n	8003204 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80031f8:	2300      	movs	r3, #0
 80031fa:	61bb      	str	r3, [r7, #24]
      break;
 80031fc:	e002      	b.n	8003204 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80031fe:	4b07      	ldr	r3, [pc, #28]	@ (800321c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003200:	61bb      	str	r3, [r7, #24]
      break;
 8003202:	bf00      	nop
  }

  return sysclockfreq;
 8003204:	69bb      	ldr	r3, [r7, #24]
}
 8003206:	4618      	mov	r0, r3
 8003208:	3724      	adds	r7, #36	@ 0x24
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	58024400 	.word	0x58024400
 8003218:	03d09000 	.word	0x03d09000
 800321c:	003d0900 	.word	0x003d0900
 8003220:	007a1200 	.word	0x007a1200
 8003224:	46000000 	.word	0x46000000
 8003228:	4c742400 	.word	0x4c742400
 800322c:	4a742400 	.word	0x4a742400
 8003230:	4af42400 	.word	0x4af42400

08003234 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800323a:	f7ff fe81 	bl	8002f40 <HAL_RCC_GetSysClockFreq>
 800323e:	4602      	mov	r2, r0
 8003240:	4b10      	ldr	r3, [pc, #64]	@ (8003284 <HAL_RCC_GetHCLKFreq+0x50>)
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	0a1b      	lsrs	r3, r3, #8
 8003246:	f003 030f 	and.w	r3, r3, #15
 800324a:	490f      	ldr	r1, [pc, #60]	@ (8003288 <HAL_RCC_GetHCLKFreq+0x54>)
 800324c:	5ccb      	ldrb	r3, [r1, r3]
 800324e:	f003 031f 	and.w	r3, r3, #31
 8003252:	fa22 f303 	lsr.w	r3, r2, r3
 8003256:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003258:	4b0a      	ldr	r3, [pc, #40]	@ (8003284 <HAL_RCC_GetHCLKFreq+0x50>)
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	f003 030f 	and.w	r3, r3, #15
 8003260:	4a09      	ldr	r2, [pc, #36]	@ (8003288 <HAL_RCC_GetHCLKFreq+0x54>)
 8003262:	5cd3      	ldrb	r3, [r2, r3]
 8003264:	f003 031f 	and.w	r3, r3, #31
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	fa22 f303 	lsr.w	r3, r2, r3
 800326e:	4a07      	ldr	r2, [pc, #28]	@ (800328c <HAL_RCC_GetHCLKFreq+0x58>)
 8003270:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003272:	4a07      	ldr	r2, [pc, #28]	@ (8003290 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003278:	4b04      	ldr	r3, [pc, #16]	@ (800328c <HAL_RCC_GetHCLKFreq+0x58>)
 800327a:	681b      	ldr	r3, [r3, #0]
}
 800327c:	4618      	mov	r0, r3
 800327e:	3708      	adds	r7, #8
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	58024400 	.word	0x58024400
 8003288:	08007b44 	.word	0x08007b44
 800328c:	24000004 	.word	0x24000004
 8003290:	24000000 	.word	0x24000000

08003294 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003298:	f7ff ffcc 	bl	8003234 <HAL_RCC_GetHCLKFreq>
 800329c:	4602      	mov	r2, r0
 800329e:	4b06      	ldr	r3, [pc, #24]	@ (80032b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032a0:	69db      	ldr	r3, [r3, #28]
 80032a2:	091b      	lsrs	r3, r3, #4
 80032a4:	f003 0307 	and.w	r3, r3, #7
 80032a8:	4904      	ldr	r1, [pc, #16]	@ (80032bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80032aa:	5ccb      	ldrb	r3, [r1, r3]
 80032ac:	f003 031f 	and.w	r3, r3, #31
 80032b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	58024400 	.word	0x58024400
 80032bc:	08007b44 	.word	0x08007b44

080032c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80032c4:	f7ff ffb6 	bl	8003234 <HAL_RCC_GetHCLKFreq>
 80032c8:	4602      	mov	r2, r0
 80032ca:	4b06      	ldr	r3, [pc, #24]	@ (80032e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032cc:	69db      	ldr	r3, [r3, #28]
 80032ce:	0a1b      	lsrs	r3, r3, #8
 80032d0:	f003 0307 	and.w	r3, r3, #7
 80032d4:	4904      	ldr	r1, [pc, #16]	@ (80032e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80032d6:	5ccb      	ldrb	r3, [r1, r3]
 80032d8:	f003 031f 	and.w	r3, r3, #31
 80032dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	58024400 	.word	0x58024400
 80032e8:	08007b44 	.word	0x08007b44

080032ec <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032f0:	b0ca      	sub	sp, #296	@ 0x128
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032f8:	2300      	movs	r3, #0
 80032fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032fe:	2300      	movs	r3, #0
 8003300:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003304:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800330c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003310:	2500      	movs	r5, #0
 8003312:	ea54 0305 	orrs.w	r3, r4, r5
 8003316:	d049      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003318:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800331c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800331e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003322:	d02f      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003324:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003328:	d828      	bhi.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800332a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800332e:	d01a      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003330:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003334:	d822      	bhi.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003336:	2b00      	cmp	r3, #0
 8003338:	d003      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800333a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800333e:	d007      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003340:	e01c      	b.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003342:	4bb8      	ldr	r3, [pc, #736]	@ (8003624 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003346:	4ab7      	ldr	r2, [pc, #732]	@ (8003624 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003348:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800334c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800334e:	e01a      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003350:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003354:	3308      	adds	r3, #8
 8003356:	2102      	movs	r1, #2
 8003358:	4618      	mov	r0, r3
 800335a:	f001 fc8f 	bl	8004c7c <RCCEx_PLL2_Config>
 800335e:	4603      	mov	r3, r0
 8003360:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003364:	e00f      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003366:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800336a:	3328      	adds	r3, #40	@ 0x28
 800336c:	2102      	movs	r1, #2
 800336e:	4618      	mov	r0, r3
 8003370:	f001 fd36 	bl	8004de0 <RCCEx_PLL3_Config>
 8003374:	4603      	mov	r3, r0
 8003376:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800337a:	e004      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003382:	e000      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003384:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003386:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800338a:	2b00      	cmp	r3, #0
 800338c:	d10a      	bne.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800338e:	4ba5      	ldr	r3, [pc, #660]	@ (8003624 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003390:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003392:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003396:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800339a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800339c:	4aa1      	ldr	r2, [pc, #644]	@ (8003624 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800339e:	430b      	orrs	r3, r1
 80033a0:	6513      	str	r3, [r2, #80]	@ 0x50
 80033a2:	e003      	b.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80033ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80033b8:	f04f 0900 	mov.w	r9, #0
 80033bc:	ea58 0309 	orrs.w	r3, r8, r9
 80033c0:	d047      	beq.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80033c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033c8:	2b04      	cmp	r3, #4
 80033ca:	d82a      	bhi.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80033cc:	a201      	add	r2, pc, #4	@ (adr r2, 80033d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80033ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033d2:	bf00      	nop
 80033d4:	080033e9 	.word	0x080033e9
 80033d8:	080033f7 	.word	0x080033f7
 80033dc:	0800340d 	.word	0x0800340d
 80033e0:	0800342b 	.word	0x0800342b
 80033e4:	0800342b 	.word	0x0800342b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033e8:	4b8e      	ldr	r3, [pc, #568]	@ (8003624 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ec:	4a8d      	ldr	r2, [pc, #564]	@ (8003624 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80033f4:	e01a      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80033f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033fa:	3308      	adds	r3, #8
 80033fc:	2100      	movs	r1, #0
 80033fe:	4618      	mov	r0, r3
 8003400:	f001 fc3c 	bl	8004c7c <RCCEx_PLL2_Config>
 8003404:	4603      	mov	r3, r0
 8003406:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800340a:	e00f      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800340c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003410:	3328      	adds	r3, #40	@ 0x28
 8003412:	2100      	movs	r1, #0
 8003414:	4618      	mov	r0, r3
 8003416:	f001 fce3 	bl	8004de0 <RCCEx_PLL3_Config>
 800341a:	4603      	mov	r3, r0
 800341c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003420:	e004      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003428:	e000      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800342a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800342c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003430:	2b00      	cmp	r3, #0
 8003432:	d10a      	bne.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003434:	4b7b      	ldr	r3, [pc, #492]	@ (8003624 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003436:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003438:	f023 0107 	bic.w	r1, r3, #7
 800343c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003440:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003442:	4a78      	ldr	r2, [pc, #480]	@ (8003624 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003444:	430b      	orrs	r3, r1
 8003446:	6513      	str	r3, [r2, #80]	@ 0x50
 8003448:	e003      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800344a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800344e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003452:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800345a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800345e:	f04f 0b00 	mov.w	fp, #0
 8003462:	ea5a 030b 	orrs.w	r3, sl, fp
 8003466:	d04c      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003468:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800346c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800346e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003472:	d030      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003474:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003478:	d829      	bhi.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800347a:	2bc0      	cmp	r3, #192	@ 0xc0
 800347c:	d02d      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800347e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003480:	d825      	bhi.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003482:	2b80      	cmp	r3, #128	@ 0x80
 8003484:	d018      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003486:	2b80      	cmp	r3, #128	@ 0x80
 8003488:	d821      	bhi.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800348a:	2b00      	cmp	r3, #0
 800348c:	d002      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800348e:	2b40      	cmp	r3, #64	@ 0x40
 8003490:	d007      	beq.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003492:	e01c      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003494:	4b63      	ldr	r3, [pc, #396]	@ (8003624 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003498:	4a62      	ldr	r2, [pc, #392]	@ (8003624 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800349a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800349e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80034a0:	e01c      	b.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034a6:	3308      	adds	r3, #8
 80034a8:	2100      	movs	r1, #0
 80034aa:	4618      	mov	r0, r3
 80034ac:	f001 fbe6 	bl	8004c7c <RCCEx_PLL2_Config>
 80034b0:	4603      	mov	r3, r0
 80034b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80034b6:	e011      	b.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80034b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034bc:	3328      	adds	r3, #40	@ 0x28
 80034be:	2100      	movs	r1, #0
 80034c0:	4618      	mov	r0, r3
 80034c2:	f001 fc8d 	bl	8004de0 <RCCEx_PLL3_Config>
 80034c6:	4603      	mov	r3, r0
 80034c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80034cc:	e006      	b.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80034d4:	e002      	b.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80034d6:	bf00      	nop
 80034d8:	e000      	b.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80034da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d10a      	bne.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80034e4:	4b4f      	ldr	r3, [pc, #316]	@ (8003624 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034e8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80034ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034f2:	4a4c      	ldr	r2, [pc, #304]	@ (8003624 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034f4:	430b      	orrs	r3, r1
 80034f6:	6513      	str	r3, [r2, #80]	@ 0x50
 80034f8:	e003      	b.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003502:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800350a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800350e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003512:	2300      	movs	r3, #0
 8003514:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003518:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800351c:	460b      	mov	r3, r1
 800351e:	4313      	orrs	r3, r2
 8003520:	d053      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003522:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003526:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800352a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800352e:	d035      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003530:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003534:	d82e      	bhi.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003536:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800353a:	d031      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800353c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003540:	d828      	bhi.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003542:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003546:	d01a      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003548:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800354c:	d822      	bhi.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800354e:	2b00      	cmp	r3, #0
 8003550:	d003      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003552:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003556:	d007      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003558:	e01c      	b.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800355a:	4b32      	ldr	r3, [pc, #200]	@ (8003624 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800355c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800355e:	4a31      	ldr	r2, [pc, #196]	@ (8003624 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003560:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003564:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003566:	e01c      	b.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003568:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800356c:	3308      	adds	r3, #8
 800356e:	2100      	movs	r1, #0
 8003570:	4618      	mov	r0, r3
 8003572:	f001 fb83 	bl	8004c7c <RCCEx_PLL2_Config>
 8003576:	4603      	mov	r3, r0
 8003578:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800357c:	e011      	b.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800357e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003582:	3328      	adds	r3, #40	@ 0x28
 8003584:	2100      	movs	r1, #0
 8003586:	4618      	mov	r0, r3
 8003588:	f001 fc2a 	bl	8004de0 <RCCEx_PLL3_Config>
 800358c:	4603      	mov	r3, r0
 800358e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003592:	e006      	b.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800359a:	e002      	b.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800359c:	bf00      	nop
 800359e:	e000      	b.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80035a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d10b      	bne.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80035aa:	4b1e      	ldr	r3, [pc, #120]	@ (8003624 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035ae:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80035b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80035ba:	4a1a      	ldr	r2, [pc, #104]	@ (8003624 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035bc:	430b      	orrs	r3, r1
 80035be:	6593      	str	r3, [r2, #88]	@ 0x58
 80035c0:	e003      	b.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80035ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80035d6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80035da:	2300      	movs	r3, #0
 80035dc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80035e0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80035e4:	460b      	mov	r3, r1
 80035e6:	4313      	orrs	r3, r2
 80035e8:	d056      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80035ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80035f2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80035f6:	d038      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80035f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80035fc:	d831      	bhi.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80035fe:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003602:	d034      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003604:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003608:	d82b      	bhi.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800360a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800360e:	d01d      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003610:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003614:	d825      	bhi.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003616:	2b00      	cmp	r3, #0
 8003618:	d006      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800361a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800361e:	d00a      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003620:	e01f      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003622:	bf00      	nop
 8003624:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003628:	4ba2      	ldr	r3, [pc, #648]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800362a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800362c:	4aa1      	ldr	r2, [pc, #644]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800362e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003632:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003634:	e01c      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003636:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800363a:	3308      	adds	r3, #8
 800363c:	2100      	movs	r1, #0
 800363e:	4618      	mov	r0, r3
 8003640:	f001 fb1c 	bl	8004c7c <RCCEx_PLL2_Config>
 8003644:	4603      	mov	r3, r0
 8003646:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800364a:	e011      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800364c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003650:	3328      	adds	r3, #40	@ 0x28
 8003652:	2100      	movs	r1, #0
 8003654:	4618      	mov	r0, r3
 8003656:	f001 fbc3 	bl	8004de0 <RCCEx_PLL3_Config>
 800365a:	4603      	mov	r3, r0
 800365c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003660:	e006      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003668:	e002      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800366a:	bf00      	nop
 800366c:	e000      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800366e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003670:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003674:	2b00      	cmp	r3, #0
 8003676:	d10b      	bne.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003678:	4b8e      	ldr	r3, [pc, #568]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800367a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800367c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003680:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003684:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003688:	4a8a      	ldr	r2, [pc, #552]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800368a:	430b      	orrs	r3, r1
 800368c:	6593      	str	r3, [r2, #88]	@ 0x58
 800368e:	e003      	b.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003690:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003694:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003698:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800369c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80036a4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80036a8:	2300      	movs	r3, #0
 80036aa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80036ae:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80036b2:	460b      	mov	r3, r1
 80036b4:	4313      	orrs	r3, r2
 80036b6:	d03a      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80036b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036be:	2b30      	cmp	r3, #48	@ 0x30
 80036c0:	d01f      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80036c2:	2b30      	cmp	r3, #48	@ 0x30
 80036c4:	d819      	bhi.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80036c6:	2b20      	cmp	r3, #32
 80036c8:	d00c      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80036ca:	2b20      	cmp	r3, #32
 80036cc:	d815      	bhi.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d019      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80036d2:	2b10      	cmp	r3, #16
 80036d4:	d111      	bne.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036d6:	4b77      	ldr	r3, [pc, #476]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036da:	4a76      	ldr	r2, [pc, #472]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80036e2:	e011      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80036e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036e8:	3308      	adds	r3, #8
 80036ea:	2102      	movs	r1, #2
 80036ec:	4618      	mov	r0, r3
 80036ee:	f001 fac5 	bl	8004c7c <RCCEx_PLL2_Config>
 80036f2:	4603      	mov	r3, r0
 80036f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80036f8:	e006      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003700:	e002      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003702:	bf00      	nop
 8003704:	e000      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003706:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003708:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800370c:	2b00      	cmp	r3, #0
 800370e:	d10a      	bne.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003710:	4b68      	ldr	r3, [pc, #416]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003712:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003714:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003718:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800371c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800371e:	4a65      	ldr	r2, [pc, #404]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003720:	430b      	orrs	r3, r1
 8003722:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003724:	e003      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003726:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800372a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800372e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003736:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800373a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800373e:	2300      	movs	r3, #0
 8003740:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003744:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003748:	460b      	mov	r3, r1
 800374a:	4313      	orrs	r3, r2
 800374c:	d051      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800374e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003752:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003754:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003758:	d035      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800375a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800375e:	d82e      	bhi.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003760:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003764:	d031      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003766:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800376a:	d828      	bhi.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800376c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003770:	d01a      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003772:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003776:	d822      	bhi.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003778:	2b00      	cmp	r3, #0
 800377a:	d003      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800377c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003780:	d007      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003782:	e01c      	b.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003784:	4b4b      	ldr	r3, [pc, #300]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003788:	4a4a      	ldr	r2, [pc, #296]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800378a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800378e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003790:	e01c      	b.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003792:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003796:	3308      	adds	r3, #8
 8003798:	2100      	movs	r1, #0
 800379a:	4618      	mov	r0, r3
 800379c:	f001 fa6e 	bl	8004c7c <RCCEx_PLL2_Config>
 80037a0:	4603      	mov	r3, r0
 80037a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80037a6:	e011      	b.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037ac:	3328      	adds	r3, #40	@ 0x28
 80037ae:	2100      	movs	r1, #0
 80037b0:	4618      	mov	r0, r3
 80037b2:	f001 fb15 	bl	8004de0 <RCCEx_PLL3_Config>
 80037b6:	4603      	mov	r3, r0
 80037b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80037bc:	e006      	b.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037c4:	e002      	b.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80037c6:	bf00      	nop
 80037c8:	e000      	b.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80037ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d10a      	bne.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80037d4:	4b37      	ldr	r3, [pc, #220]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037d8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80037dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037e2:	4a34      	ldr	r2, [pc, #208]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037e4:	430b      	orrs	r3, r1
 80037e6:	6513      	str	r3, [r2, #80]	@ 0x50
 80037e8:	e003      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80037f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037fa:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80037fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003802:	2300      	movs	r3, #0
 8003804:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003808:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800380c:	460b      	mov	r3, r1
 800380e:	4313      	orrs	r3, r2
 8003810:	d056      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003812:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003816:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003818:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800381c:	d033      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800381e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003822:	d82c      	bhi.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003824:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003828:	d02f      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800382a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800382e:	d826      	bhi.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003830:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003834:	d02b      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003836:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800383a:	d820      	bhi.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800383c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003840:	d012      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003842:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003846:	d81a      	bhi.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003848:	2b00      	cmp	r3, #0
 800384a:	d022      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800384c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003850:	d115      	bne.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003852:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003856:	3308      	adds	r3, #8
 8003858:	2101      	movs	r1, #1
 800385a:	4618      	mov	r0, r3
 800385c:	f001 fa0e 	bl	8004c7c <RCCEx_PLL2_Config>
 8003860:	4603      	mov	r3, r0
 8003862:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003866:	e015      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003868:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800386c:	3328      	adds	r3, #40	@ 0x28
 800386e:	2101      	movs	r1, #1
 8003870:	4618      	mov	r0, r3
 8003872:	f001 fab5 	bl	8004de0 <RCCEx_PLL3_Config>
 8003876:	4603      	mov	r3, r0
 8003878:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800387c:	e00a      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003884:	e006      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003886:	bf00      	nop
 8003888:	e004      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800388a:	bf00      	nop
 800388c:	e002      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800388e:	bf00      	nop
 8003890:	e000      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003892:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003894:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003898:	2b00      	cmp	r3, #0
 800389a:	d10d      	bne.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800389c:	4b05      	ldr	r3, [pc, #20]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800389e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038a0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80038a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038aa:	4a02      	ldr	r2, [pc, #8]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038ac:	430b      	orrs	r3, r1
 80038ae:	6513      	str	r3, [r2, #80]	@ 0x50
 80038b0:	e006      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80038b2:	bf00      	nop
 80038b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80038c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80038cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80038d0:	2300      	movs	r3, #0
 80038d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80038d6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80038da:	460b      	mov	r3, r1
 80038dc:	4313      	orrs	r3, r2
 80038de:	d055      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80038e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80038e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038ec:	d033      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80038ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038f2:	d82c      	bhi.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80038f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038f8:	d02f      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80038fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038fe:	d826      	bhi.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003900:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003904:	d02b      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003906:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800390a:	d820      	bhi.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800390c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003910:	d012      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003912:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003916:	d81a      	bhi.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003918:	2b00      	cmp	r3, #0
 800391a:	d022      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800391c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003920:	d115      	bne.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003922:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003926:	3308      	adds	r3, #8
 8003928:	2101      	movs	r1, #1
 800392a:	4618      	mov	r0, r3
 800392c:	f001 f9a6 	bl	8004c7c <RCCEx_PLL2_Config>
 8003930:	4603      	mov	r3, r0
 8003932:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003936:	e015      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003938:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800393c:	3328      	adds	r3, #40	@ 0x28
 800393e:	2101      	movs	r1, #1
 8003940:	4618      	mov	r0, r3
 8003942:	f001 fa4d 	bl	8004de0 <RCCEx_PLL3_Config>
 8003946:	4603      	mov	r3, r0
 8003948:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800394c:	e00a      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003954:	e006      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003956:	bf00      	nop
 8003958:	e004      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800395a:	bf00      	nop
 800395c:	e002      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800395e:	bf00      	nop
 8003960:	e000      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003962:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003964:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003968:	2b00      	cmp	r3, #0
 800396a:	d10b      	bne.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800396c:	4ba3      	ldr	r3, [pc, #652]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800396e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003970:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003974:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003978:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800397c:	4a9f      	ldr	r2, [pc, #636]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800397e:	430b      	orrs	r3, r1
 8003980:	6593      	str	r3, [r2, #88]	@ 0x58
 8003982:	e003      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003984:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003988:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800398c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003994:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003998:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800399c:	2300      	movs	r3, #0
 800399e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80039a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80039a6:	460b      	mov	r3, r1
 80039a8:	4313      	orrs	r3, r2
 80039aa:	d037      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80039ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039b6:	d00e      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80039b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039bc:	d816      	bhi.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x700>
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d018      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80039c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80039c6:	d111      	bne.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039c8:	4b8c      	ldr	r3, [pc, #560]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039cc:	4a8b      	ldr	r2, [pc, #556]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80039d4:	e00f      	b.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80039d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039da:	3308      	adds	r3, #8
 80039dc:	2101      	movs	r1, #1
 80039de:	4618      	mov	r0, r3
 80039e0:	f001 f94c 	bl	8004c7c <RCCEx_PLL2_Config>
 80039e4:	4603      	mov	r3, r0
 80039e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80039ea:	e004      	b.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80039f2:	e000      	b.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80039f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d10a      	bne.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80039fe:	4b7f      	ldr	r3, [pc, #508]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a02:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a0c:	4a7b      	ldr	r2, [pc, #492]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a0e:	430b      	orrs	r3, r1
 8003a10:	6513      	str	r3, [r2, #80]	@ 0x50
 8003a12:	e003      	b.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003a1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a24:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003a28:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003a32:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003a36:	460b      	mov	r3, r1
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	d039      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a42:	2b03      	cmp	r3, #3
 8003a44:	d81c      	bhi.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003a46:	a201      	add	r2, pc, #4	@ (adr r2, 8003a4c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a4c:	08003a89 	.word	0x08003a89
 8003a50:	08003a5d 	.word	0x08003a5d
 8003a54:	08003a6b 	.word	0x08003a6b
 8003a58:	08003a89 	.word	0x08003a89
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a5c:	4b67      	ldr	r3, [pc, #412]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a60:	4a66      	ldr	r2, [pc, #408]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003a68:	e00f      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a6e:	3308      	adds	r3, #8
 8003a70:	2102      	movs	r1, #2
 8003a72:	4618      	mov	r0, r3
 8003a74:	f001 f902 	bl	8004c7c <RCCEx_PLL2_Config>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003a7e:	e004      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a86:	e000      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003a88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d10a      	bne.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003a92:	4b5a      	ldr	r3, [pc, #360]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a96:	f023 0103 	bic.w	r1, r3, #3
 8003a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003aa0:	4a56      	ldr	r2, [pc, #344]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003aa2:	430b      	orrs	r3, r1
 8003aa4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003aa6:	e003      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aa8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003aac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003abc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003ac6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003aca:	460b      	mov	r3, r1
 8003acc:	4313      	orrs	r3, r2
 8003ace:	f000 809f 	beq.w	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ad2:	4b4b      	ldr	r3, [pc, #300]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a4a      	ldr	r2, [pc, #296]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003ad8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003adc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ade:	f7fd fad9 	bl	8001094 <HAL_GetTick>
 8003ae2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ae6:	e00b      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ae8:	f7fd fad4 	bl	8001094 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	2b64      	cmp	r3, #100	@ 0x64
 8003af6:	d903      	bls.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003afe:	e005      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b00:	4b3f      	ldr	r3, [pc, #252]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d0ed      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003b0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d179      	bne.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003b14:	4b39      	ldr	r3, [pc, #228]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b16:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003b18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b1c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003b20:	4053      	eors	r3, r2
 8003b22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d015      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b2a:	4b34      	ldr	r3, [pc, #208]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b32:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b36:	4b31      	ldr	r3, [pc, #196]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b3a:	4a30      	ldr	r2, [pc, #192]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b40:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b42:	4b2e      	ldr	r3, [pc, #184]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b46:	4a2d      	ldr	r2, [pc, #180]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b4c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003b4e:	4a2b      	ldr	r2, [pc, #172]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b50:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b54:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b5a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003b5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b62:	d118      	bne.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b64:	f7fd fa96 	bl	8001094 <HAL_GetTick>
 8003b68:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b6c:	e00d      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b6e:	f7fd fa91 	bl	8001094 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003b78:	1ad2      	subs	r2, r2, r3
 8003b7a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d903      	bls.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003b88:	e005      	b.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b8a:	4b1c      	ldr	r3, [pc, #112]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b8e:	f003 0302 	and.w	r3, r3, #2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d0eb      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003b96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d129      	bne.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ba2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003ba6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003baa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bae:	d10e      	bne.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003bb0:	4b12      	ldr	r3, [pc, #72]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003bb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bbc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003bc0:	091a      	lsrs	r2, r3, #4
 8003bc2:	4b10      	ldr	r3, [pc, #64]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	4a0d      	ldr	r2, [pc, #52]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bc8:	430b      	orrs	r3, r1
 8003bca:	6113      	str	r3, [r2, #16]
 8003bcc:	e005      	b.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003bce:	4b0b      	ldr	r3, [pc, #44]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	4a0a      	ldr	r2, [pc, #40]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bd4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003bd8:	6113      	str	r3, [r2, #16]
 8003bda:	4b08      	ldr	r3, [pc, #32]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bdc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003be2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003be6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bea:	4a04      	ldr	r2, [pc, #16]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bec:	430b      	orrs	r3, r1
 8003bee:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bf0:	e00e      	b.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003bf2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bf6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003bfa:	e009      	b.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003bfc:	58024400 	.word	0x58024400
 8003c00:	58024800 	.word	0x58024800
 8003c04:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c18:	f002 0301 	and.w	r3, r2, #1
 8003c1c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003c20:	2300      	movs	r3, #0
 8003c22:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003c26:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	f000 8089 	beq.w	8003d44 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c36:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c38:	2b28      	cmp	r3, #40	@ 0x28
 8003c3a:	d86b      	bhi.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003c3c:	a201      	add	r2, pc, #4	@ (adr r2, 8003c44 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c42:	bf00      	nop
 8003c44:	08003d1d 	.word	0x08003d1d
 8003c48:	08003d15 	.word	0x08003d15
 8003c4c:	08003d15 	.word	0x08003d15
 8003c50:	08003d15 	.word	0x08003d15
 8003c54:	08003d15 	.word	0x08003d15
 8003c58:	08003d15 	.word	0x08003d15
 8003c5c:	08003d15 	.word	0x08003d15
 8003c60:	08003d15 	.word	0x08003d15
 8003c64:	08003ce9 	.word	0x08003ce9
 8003c68:	08003d15 	.word	0x08003d15
 8003c6c:	08003d15 	.word	0x08003d15
 8003c70:	08003d15 	.word	0x08003d15
 8003c74:	08003d15 	.word	0x08003d15
 8003c78:	08003d15 	.word	0x08003d15
 8003c7c:	08003d15 	.word	0x08003d15
 8003c80:	08003d15 	.word	0x08003d15
 8003c84:	08003cff 	.word	0x08003cff
 8003c88:	08003d15 	.word	0x08003d15
 8003c8c:	08003d15 	.word	0x08003d15
 8003c90:	08003d15 	.word	0x08003d15
 8003c94:	08003d15 	.word	0x08003d15
 8003c98:	08003d15 	.word	0x08003d15
 8003c9c:	08003d15 	.word	0x08003d15
 8003ca0:	08003d15 	.word	0x08003d15
 8003ca4:	08003d1d 	.word	0x08003d1d
 8003ca8:	08003d15 	.word	0x08003d15
 8003cac:	08003d15 	.word	0x08003d15
 8003cb0:	08003d15 	.word	0x08003d15
 8003cb4:	08003d15 	.word	0x08003d15
 8003cb8:	08003d15 	.word	0x08003d15
 8003cbc:	08003d15 	.word	0x08003d15
 8003cc0:	08003d15 	.word	0x08003d15
 8003cc4:	08003d1d 	.word	0x08003d1d
 8003cc8:	08003d15 	.word	0x08003d15
 8003ccc:	08003d15 	.word	0x08003d15
 8003cd0:	08003d15 	.word	0x08003d15
 8003cd4:	08003d15 	.word	0x08003d15
 8003cd8:	08003d15 	.word	0x08003d15
 8003cdc:	08003d15 	.word	0x08003d15
 8003ce0:	08003d15 	.word	0x08003d15
 8003ce4:	08003d1d 	.word	0x08003d1d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cec:	3308      	adds	r3, #8
 8003cee:	2101      	movs	r1, #1
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f000 ffc3 	bl	8004c7c <RCCEx_PLL2_Config>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003cfc:	e00f      	b.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d02:	3328      	adds	r3, #40	@ 0x28
 8003d04:	2101      	movs	r1, #1
 8003d06:	4618      	mov	r0, r3
 8003d08:	f001 f86a 	bl	8004de0 <RCCEx_PLL3_Config>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003d12:	e004      	b.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d1a:	e000      	b.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003d1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d10a      	bne.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003d26:	4bbf      	ldr	r3, [pc, #764]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d2a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d32:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d34:	4abb      	ldr	r2, [pc, #748]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d36:	430b      	orrs	r3, r1
 8003d38:	6553      	str	r3, [r2, #84]	@ 0x54
 8003d3a:	e003      	b.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d40:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003d44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d4c:	f002 0302 	and.w	r3, r2, #2
 8003d50:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003d54:	2300      	movs	r3, #0
 8003d56:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003d5a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003d5e:	460b      	mov	r3, r1
 8003d60:	4313      	orrs	r3, r2
 8003d62:	d041      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003d64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d68:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d6a:	2b05      	cmp	r3, #5
 8003d6c:	d824      	bhi.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003d6e:	a201      	add	r2, pc, #4	@ (adr r2, 8003d74 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d74:	08003dc1 	.word	0x08003dc1
 8003d78:	08003d8d 	.word	0x08003d8d
 8003d7c:	08003da3 	.word	0x08003da3
 8003d80:	08003dc1 	.word	0x08003dc1
 8003d84:	08003dc1 	.word	0x08003dc1
 8003d88:	08003dc1 	.word	0x08003dc1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d90:	3308      	adds	r3, #8
 8003d92:	2101      	movs	r1, #1
 8003d94:	4618      	mov	r0, r3
 8003d96:	f000 ff71 	bl	8004c7c <RCCEx_PLL2_Config>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003da0:	e00f      	b.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003da6:	3328      	adds	r3, #40	@ 0x28
 8003da8:	2101      	movs	r1, #1
 8003daa:	4618      	mov	r0, r3
 8003dac:	f001 f818 	bl	8004de0 <RCCEx_PLL3_Config>
 8003db0:	4603      	mov	r3, r0
 8003db2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003db6:	e004      	b.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003dbe:	e000      	b.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003dc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d10a      	bne.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003dca:	4b96      	ldr	r3, [pc, #600]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003dcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dce:	f023 0107 	bic.w	r1, r3, #7
 8003dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dd6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003dd8:	4a92      	ldr	r2, [pc, #584]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003dda:	430b      	orrs	r3, r1
 8003ddc:	6553      	str	r3, [r2, #84]	@ 0x54
 8003dde:	e003      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003de0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003de4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003de8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df0:	f002 0304 	and.w	r3, r2, #4
 8003df4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003df8:	2300      	movs	r3, #0
 8003dfa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003dfe:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003e02:	460b      	mov	r3, r1
 8003e04:	4313      	orrs	r3, r2
 8003e06:	d044      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003e08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e10:	2b05      	cmp	r3, #5
 8003e12:	d825      	bhi.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003e14:	a201      	add	r2, pc, #4	@ (adr r2, 8003e1c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e1a:	bf00      	nop
 8003e1c:	08003e69 	.word	0x08003e69
 8003e20:	08003e35 	.word	0x08003e35
 8003e24:	08003e4b 	.word	0x08003e4b
 8003e28:	08003e69 	.word	0x08003e69
 8003e2c:	08003e69 	.word	0x08003e69
 8003e30:	08003e69 	.word	0x08003e69
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e38:	3308      	adds	r3, #8
 8003e3a:	2101      	movs	r1, #1
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f000 ff1d 	bl	8004c7c <RCCEx_PLL2_Config>
 8003e42:	4603      	mov	r3, r0
 8003e44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003e48:	e00f      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e4e:	3328      	adds	r3, #40	@ 0x28
 8003e50:	2101      	movs	r1, #1
 8003e52:	4618      	mov	r0, r3
 8003e54:	f000 ffc4 	bl	8004de0 <RCCEx_PLL3_Config>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003e5e:	e004      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e66:	e000      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003e68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d10b      	bne.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e72:	4b6c      	ldr	r3, [pc, #432]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e76:	f023 0107 	bic.w	r1, r3, #7
 8003e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e82:	4a68      	ldr	r2, [pc, #416]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e84:	430b      	orrs	r3, r1
 8003e86:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e88:	e003      	b.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e9a:	f002 0320 	and.w	r3, r2, #32
 8003e9e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003ea8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003eac:	460b      	mov	r3, r1
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	d055      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ebe:	d033      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003ec0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ec4:	d82c      	bhi.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003eca:	d02f      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ed0:	d826      	bhi.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003ed2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003ed6:	d02b      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003ed8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003edc:	d820      	bhi.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003ede:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ee2:	d012      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003ee4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ee8:	d81a      	bhi.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d022      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003eee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003ef2:	d115      	bne.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ef4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ef8:	3308      	adds	r3, #8
 8003efa:	2100      	movs	r1, #0
 8003efc:	4618      	mov	r0, r3
 8003efe:	f000 febd 	bl	8004c7c <RCCEx_PLL2_Config>
 8003f02:	4603      	mov	r3, r0
 8003f04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003f08:	e015      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f0e:	3328      	adds	r3, #40	@ 0x28
 8003f10:	2102      	movs	r1, #2
 8003f12:	4618      	mov	r0, r3
 8003f14:	f000 ff64 	bl	8004de0 <RCCEx_PLL3_Config>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003f1e:	e00a      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f26:	e006      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003f28:	bf00      	nop
 8003f2a:	e004      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003f2c:	bf00      	nop
 8003f2e:	e002      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003f30:	bf00      	nop
 8003f32:	e000      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003f34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d10b      	bne.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f3e:	4b39      	ldr	r3, [pc, #228]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f42:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f4e:	4a35      	ldr	r2, [pc, #212]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f50:	430b      	orrs	r3, r1
 8003f52:	6553      	str	r3, [r2, #84]	@ 0x54
 8003f54:	e003      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f66:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003f6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003f6e:	2300      	movs	r3, #0
 8003f70:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003f74:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003f78:	460b      	mov	r3, r1
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	d058      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f82:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f86:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003f8a:	d033      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003f8c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003f90:	d82c      	bhi.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003f92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f96:	d02f      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003f98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f9c:	d826      	bhi.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003f9e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003fa2:	d02b      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003fa4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003fa8:	d820      	bhi.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003faa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fae:	d012      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003fb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fb4:	d81a      	bhi.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d022      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003fba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fbe:	d115      	bne.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fc4:	3308      	adds	r3, #8
 8003fc6:	2100      	movs	r1, #0
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f000 fe57 	bl	8004c7c <RCCEx_PLL2_Config>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003fd4:	e015      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fda:	3328      	adds	r3, #40	@ 0x28
 8003fdc:	2102      	movs	r1, #2
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f000 fefe 	bl	8004de0 <RCCEx_PLL3_Config>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003fea:	e00a      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ff2:	e006      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003ff4:	bf00      	nop
 8003ff6:	e004      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003ff8:	bf00      	nop
 8003ffa:	e002      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003ffc:	bf00      	nop
 8003ffe:	e000      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004000:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004002:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004006:	2b00      	cmp	r3, #0
 8004008:	d10e      	bne.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800400a:	4b06      	ldr	r3, [pc, #24]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800400c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800400e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004012:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004016:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800401a:	4a02      	ldr	r2, [pc, #8]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800401c:	430b      	orrs	r3, r1
 800401e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004020:	e006      	b.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004022:	bf00      	nop
 8004024:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004028:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800402c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004030:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004038:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800403c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004040:	2300      	movs	r3, #0
 8004042:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004046:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800404a:	460b      	mov	r3, r1
 800404c:	4313      	orrs	r3, r2
 800404e:	d055      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004050:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004054:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004058:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800405c:	d033      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800405e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004062:	d82c      	bhi.n	80040be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004064:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004068:	d02f      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800406a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800406e:	d826      	bhi.n	80040be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004070:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004074:	d02b      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004076:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800407a:	d820      	bhi.n	80040be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800407c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004080:	d012      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004082:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004086:	d81a      	bhi.n	80040be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004088:	2b00      	cmp	r3, #0
 800408a:	d022      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800408c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004090:	d115      	bne.n	80040be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004092:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004096:	3308      	adds	r3, #8
 8004098:	2100      	movs	r1, #0
 800409a:	4618      	mov	r0, r3
 800409c:	f000 fdee 	bl	8004c7c <RCCEx_PLL2_Config>
 80040a0:	4603      	mov	r3, r0
 80040a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80040a6:	e015      	b.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80040a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ac:	3328      	adds	r3, #40	@ 0x28
 80040ae:	2102      	movs	r1, #2
 80040b0:	4618      	mov	r0, r3
 80040b2:	f000 fe95 	bl	8004de0 <RCCEx_PLL3_Config>
 80040b6:	4603      	mov	r3, r0
 80040b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80040bc:	e00a      	b.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80040c4:	e006      	b.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80040c6:	bf00      	nop
 80040c8:	e004      	b.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80040ca:	bf00      	nop
 80040cc:	e002      	b.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80040ce:	bf00      	nop
 80040d0:	e000      	b.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80040d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d10b      	bne.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80040dc:	4ba1      	ldr	r3, [pc, #644]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040e0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80040e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80040ec:	4a9d      	ldr	r2, [pc, #628]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040ee:	430b      	orrs	r3, r1
 80040f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80040f2:	e003      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80040fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004104:	f002 0308 	and.w	r3, r2, #8
 8004108:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800410c:	2300      	movs	r3, #0
 800410e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004112:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004116:	460b      	mov	r3, r1
 8004118:	4313      	orrs	r3, r2
 800411a:	d01e      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800411c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004120:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004124:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004128:	d10c      	bne.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800412a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800412e:	3328      	adds	r3, #40	@ 0x28
 8004130:	2102      	movs	r1, #2
 8004132:	4618      	mov	r0, r3
 8004134:	f000 fe54 	bl	8004de0 <RCCEx_PLL3_Config>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d002      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004144:	4b87      	ldr	r3, [pc, #540]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004146:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004148:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800414c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004150:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004154:	4a83      	ldr	r2, [pc, #524]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004156:	430b      	orrs	r3, r1
 8004158:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800415a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800415e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004162:	f002 0310 	and.w	r3, r2, #16
 8004166:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800416a:	2300      	movs	r3, #0
 800416c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004170:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004174:	460b      	mov	r3, r1
 8004176:	4313      	orrs	r3, r2
 8004178:	d01e      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800417a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800417e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004182:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004186:	d10c      	bne.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004188:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800418c:	3328      	adds	r3, #40	@ 0x28
 800418e:	2102      	movs	r1, #2
 8004190:	4618      	mov	r0, r3
 8004192:	f000 fe25 	bl	8004de0 <RCCEx_PLL3_Config>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	d002      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80041a2:	4b70      	ldr	r3, [pc, #448]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041a6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80041aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80041b2:	4a6c      	ldr	r2, [pc, #432]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041b4:	430b      	orrs	r3, r1
 80041b6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80041c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80041c8:	2300      	movs	r3, #0
 80041ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80041ce:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80041d2:	460b      	mov	r3, r1
 80041d4:	4313      	orrs	r3, r2
 80041d6:	d03e      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80041d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80041e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80041e4:	d022      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80041e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80041ea:	d81b      	bhi.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d003      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80041f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041f4:	d00b      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80041f6:	e015      	b.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041fc:	3308      	adds	r3, #8
 80041fe:	2100      	movs	r1, #0
 8004200:	4618      	mov	r0, r3
 8004202:	f000 fd3b 	bl	8004c7c <RCCEx_PLL2_Config>
 8004206:	4603      	mov	r3, r0
 8004208:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800420c:	e00f      	b.n	800422e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800420e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004212:	3328      	adds	r3, #40	@ 0x28
 8004214:	2102      	movs	r1, #2
 8004216:	4618      	mov	r0, r3
 8004218:	f000 fde2 	bl	8004de0 <RCCEx_PLL3_Config>
 800421c:	4603      	mov	r3, r0
 800421e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004222:	e004      	b.n	800422e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800422a:	e000      	b.n	800422e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800422c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800422e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004232:	2b00      	cmp	r3, #0
 8004234:	d10b      	bne.n	800424e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004236:	4b4b      	ldr	r3, [pc, #300]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800423a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800423e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004242:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004246:	4a47      	ldr	r2, [pc, #284]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004248:	430b      	orrs	r3, r1
 800424a:	6593      	str	r3, [r2, #88]	@ 0x58
 800424c:	e003      	b.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800424e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004252:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004256:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800425a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800425e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004262:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004264:	2300      	movs	r3, #0
 8004266:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004268:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800426c:	460b      	mov	r3, r1
 800426e:	4313      	orrs	r3, r2
 8004270:	d03b      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004272:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004276:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800427a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800427e:	d01f      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004280:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004284:	d818      	bhi.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004286:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800428a:	d003      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800428c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004290:	d007      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004292:	e011      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004294:	4b33      	ldr	r3, [pc, #204]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004298:	4a32      	ldr	r2, [pc, #200]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800429a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800429e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80042a0:	e00f      	b.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80042a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042a6:	3328      	adds	r3, #40	@ 0x28
 80042a8:	2101      	movs	r1, #1
 80042aa:	4618      	mov	r0, r3
 80042ac:	f000 fd98 	bl	8004de0 <RCCEx_PLL3_Config>
 80042b0:	4603      	mov	r3, r0
 80042b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80042b6:	e004      	b.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80042be:	e000      	b.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80042c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d10b      	bne.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042ca:	4b26      	ldr	r3, [pc, #152]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042ce:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80042d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042da:	4a22      	ldr	r2, [pc, #136]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042dc:	430b      	orrs	r3, r1
 80042de:	6553      	str	r3, [r2, #84]	@ 0x54
 80042e0:	e003      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80042ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80042f6:	673b      	str	r3, [r7, #112]	@ 0x70
 80042f8:	2300      	movs	r3, #0
 80042fa:	677b      	str	r3, [r7, #116]	@ 0x74
 80042fc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004300:	460b      	mov	r3, r1
 8004302:	4313      	orrs	r3, r2
 8004304:	d034      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004306:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800430a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800430c:	2b00      	cmp	r3, #0
 800430e:	d003      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004310:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004314:	d007      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004316:	e011      	b.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004318:	4b12      	ldr	r3, [pc, #72]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800431a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800431c:	4a11      	ldr	r2, [pc, #68]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800431e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004322:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004324:	e00e      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004326:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800432a:	3308      	adds	r3, #8
 800432c:	2102      	movs	r1, #2
 800432e:	4618      	mov	r0, r3
 8004330:	f000 fca4 	bl	8004c7c <RCCEx_PLL2_Config>
 8004334:	4603      	mov	r3, r0
 8004336:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800433a:	e003      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004342:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004344:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004348:	2b00      	cmp	r3, #0
 800434a:	d10d      	bne.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800434c:	4b05      	ldr	r3, [pc, #20]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800434e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004350:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004354:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004358:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800435a:	4a02      	ldr	r2, [pc, #8]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800435c:	430b      	orrs	r3, r1
 800435e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004360:	e006      	b.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004362:	bf00      	nop
 8004364:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004368:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800436c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004370:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004378:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800437c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800437e:	2300      	movs	r3, #0
 8004380:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004382:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004386:	460b      	mov	r3, r1
 8004388:	4313      	orrs	r3, r2
 800438a:	d00c      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800438c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004390:	3328      	adds	r3, #40	@ 0x28
 8004392:	2102      	movs	r1, #2
 8004394:	4618      	mov	r0, r3
 8004396:	f000 fd23 	bl	8004de0 <RCCEx_PLL3_Config>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d002      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80043a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ae:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80043b2:	663b      	str	r3, [r7, #96]	@ 0x60
 80043b4:	2300      	movs	r3, #0
 80043b6:	667b      	str	r3, [r7, #100]	@ 0x64
 80043b8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80043bc:	460b      	mov	r3, r1
 80043be:	4313      	orrs	r3, r2
 80043c0:	d038      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80043c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043ce:	d018      	beq.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80043d0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043d4:	d811      	bhi.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80043d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043da:	d014      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80043dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043e0:	d80b      	bhi.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d011      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80043e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043ea:	d106      	bne.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043ec:	4bc3      	ldr	r3, [pc, #780]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043f0:	4ac2      	ldr	r2, [pc, #776]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80043f8:	e008      	b.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004400:	e004      	b.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004402:	bf00      	nop
 8004404:	e002      	b.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004406:	bf00      	nop
 8004408:	e000      	b.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800440a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800440c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004410:	2b00      	cmp	r3, #0
 8004412:	d10b      	bne.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004414:	4bb9      	ldr	r3, [pc, #740]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004416:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004418:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800441c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004420:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004424:	4ab5      	ldr	r2, [pc, #724]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004426:	430b      	orrs	r3, r1
 8004428:	6553      	str	r3, [r2, #84]	@ 0x54
 800442a:	e003      	b.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800442c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004430:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004434:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800443c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004440:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004442:	2300      	movs	r3, #0
 8004444:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004446:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800444a:	460b      	mov	r3, r1
 800444c:	4313      	orrs	r3, r2
 800444e:	d009      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004450:	4baa      	ldr	r3, [pc, #680]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004452:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004454:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004458:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800445c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800445e:	4aa7      	ldr	r2, [pc, #668]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004460:	430b      	orrs	r3, r1
 8004462:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004464:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800446c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004470:	653b      	str	r3, [r7, #80]	@ 0x50
 8004472:	2300      	movs	r3, #0
 8004474:	657b      	str	r3, [r7, #84]	@ 0x54
 8004476:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800447a:	460b      	mov	r3, r1
 800447c:	4313      	orrs	r3, r2
 800447e:	d00a      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004480:	4b9e      	ldr	r3, [pc, #632]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004482:	691b      	ldr	r3, [r3, #16]
 8004484:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004488:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800448c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004490:	4a9a      	ldr	r2, [pc, #616]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004492:	430b      	orrs	r3, r1
 8004494:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004496:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800449a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800449e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80044a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044a4:	2300      	movs	r3, #0
 80044a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044a8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80044ac:	460b      	mov	r3, r1
 80044ae:	4313      	orrs	r3, r2
 80044b0:	d009      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80044b2:	4b92      	ldr	r3, [pc, #584]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044b6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80044ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044c0:	4a8e      	ldr	r2, [pc, #568]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044c2:	430b      	orrs	r3, r1
 80044c4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80044c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ce:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80044d2:	643b      	str	r3, [r7, #64]	@ 0x40
 80044d4:	2300      	movs	r3, #0
 80044d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80044d8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80044dc:	460b      	mov	r3, r1
 80044de:	4313      	orrs	r3, r2
 80044e0:	d00e      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80044e2:	4b86      	ldr	r3, [pc, #536]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	4a85      	ldr	r2, [pc, #532]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044e8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80044ec:	6113      	str	r3, [r2, #16]
 80044ee:	4b83      	ldr	r3, [pc, #524]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044f0:	6919      	ldr	r1, [r3, #16]
 80044f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044f6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80044fa:	4a80      	ldr	r2, [pc, #512]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044fc:	430b      	orrs	r3, r1
 80044fe:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004500:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004508:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800450c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800450e:	2300      	movs	r3, #0
 8004510:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004512:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004516:	460b      	mov	r3, r1
 8004518:	4313      	orrs	r3, r2
 800451a:	d009      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800451c:	4b77      	ldr	r3, [pc, #476]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800451e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004520:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004524:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004528:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800452a:	4a74      	ldr	r2, [pc, #464]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800452c:	430b      	orrs	r3, r1
 800452e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004530:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004538:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800453c:	633b      	str	r3, [r7, #48]	@ 0x30
 800453e:	2300      	movs	r3, #0
 8004540:	637b      	str	r3, [r7, #52]	@ 0x34
 8004542:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004546:	460b      	mov	r3, r1
 8004548:	4313      	orrs	r3, r2
 800454a:	d00a      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800454c:	4b6b      	ldr	r3, [pc, #428]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800454e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004550:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004554:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004558:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800455c:	4a67      	ldr	r2, [pc, #412]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800455e:	430b      	orrs	r3, r1
 8004560:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004562:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800456a:	2100      	movs	r1, #0
 800456c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800456e:	f003 0301 	and.w	r3, r3, #1
 8004572:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004574:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004578:	460b      	mov	r3, r1
 800457a:	4313      	orrs	r3, r2
 800457c:	d011      	beq.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800457e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004582:	3308      	adds	r3, #8
 8004584:	2100      	movs	r1, #0
 8004586:	4618      	mov	r0, r3
 8004588:	f000 fb78 	bl	8004c7c <RCCEx_PLL2_Config>
 800458c:	4603      	mov	r3, r0
 800458e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004592:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004596:	2b00      	cmp	r3, #0
 8004598:	d003      	beq.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800459a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800459e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80045a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045aa:	2100      	movs	r1, #0
 80045ac:	6239      	str	r1, [r7, #32]
 80045ae:	f003 0302 	and.w	r3, r3, #2
 80045b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80045b4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80045b8:	460b      	mov	r3, r1
 80045ba:	4313      	orrs	r3, r2
 80045bc:	d011      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80045be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045c2:	3308      	adds	r3, #8
 80045c4:	2101      	movs	r1, #1
 80045c6:	4618      	mov	r0, r3
 80045c8:	f000 fb58 	bl	8004c7c <RCCEx_PLL2_Config>
 80045cc:	4603      	mov	r3, r0
 80045ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80045d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d003      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80045e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ea:	2100      	movs	r1, #0
 80045ec:	61b9      	str	r1, [r7, #24]
 80045ee:	f003 0304 	and.w	r3, r3, #4
 80045f2:	61fb      	str	r3, [r7, #28]
 80045f4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80045f8:	460b      	mov	r3, r1
 80045fa:	4313      	orrs	r3, r2
 80045fc:	d011      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80045fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004602:	3308      	adds	r3, #8
 8004604:	2102      	movs	r1, #2
 8004606:	4618      	mov	r0, r3
 8004608:	f000 fb38 	bl	8004c7c <RCCEx_PLL2_Config>
 800460c:	4603      	mov	r3, r0
 800460e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004612:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004616:	2b00      	cmp	r3, #0
 8004618:	d003      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800461a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800461e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004622:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800462a:	2100      	movs	r1, #0
 800462c:	6139      	str	r1, [r7, #16]
 800462e:	f003 0308 	and.w	r3, r3, #8
 8004632:	617b      	str	r3, [r7, #20]
 8004634:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004638:	460b      	mov	r3, r1
 800463a:	4313      	orrs	r3, r2
 800463c:	d011      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800463e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004642:	3328      	adds	r3, #40	@ 0x28
 8004644:	2100      	movs	r1, #0
 8004646:	4618      	mov	r0, r3
 8004648:	f000 fbca 	bl	8004de0 <RCCEx_PLL3_Config>
 800464c:	4603      	mov	r3, r0
 800464e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004652:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004656:	2b00      	cmp	r3, #0
 8004658:	d003      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800465a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800465e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004662:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800466a:	2100      	movs	r1, #0
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	f003 0310 	and.w	r3, r3, #16
 8004672:	60fb      	str	r3, [r7, #12]
 8004674:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004678:	460b      	mov	r3, r1
 800467a:	4313      	orrs	r3, r2
 800467c:	d011      	beq.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800467e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004682:	3328      	adds	r3, #40	@ 0x28
 8004684:	2101      	movs	r1, #1
 8004686:	4618      	mov	r0, r3
 8004688:	f000 fbaa 	bl	8004de0 <RCCEx_PLL3_Config>
 800468c:	4603      	mov	r3, r0
 800468e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004692:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004696:	2b00      	cmp	r3, #0
 8004698:	d003      	beq.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800469a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800469e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80046a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046aa:	2100      	movs	r1, #0
 80046ac:	6039      	str	r1, [r7, #0]
 80046ae:	f003 0320 	and.w	r3, r3, #32
 80046b2:	607b      	str	r3, [r7, #4]
 80046b4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80046b8:	460b      	mov	r3, r1
 80046ba:	4313      	orrs	r3, r2
 80046bc:	d011      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80046be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046c2:	3328      	adds	r3, #40	@ 0x28
 80046c4:	2102      	movs	r1, #2
 80046c6:	4618      	mov	r0, r3
 80046c8:	f000 fb8a 	bl	8004de0 <RCCEx_PLL3_Config>
 80046cc:	4603      	mov	r3, r0
 80046ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80046d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d003      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80046e2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d101      	bne.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80046ea:	2300      	movs	r3, #0
 80046ec:	e000      	b.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80046f6:	46bd      	mov	sp, r7
 80046f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046fc:	58024400 	.word	0x58024400

08004700 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004704:	f7fe fd96 	bl	8003234 <HAL_RCC_GetHCLKFreq>
 8004708:	4602      	mov	r2, r0
 800470a:	4b06      	ldr	r3, [pc, #24]	@ (8004724 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800470c:	6a1b      	ldr	r3, [r3, #32]
 800470e:	091b      	lsrs	r3, r3, #4
 8004710:	f003 0307 	and.w	r3, r3, #7
 8004714:	4904      	ldr	r1, [pc, #16]	@ (8004728 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004716:	5ccb      	ldrb	r3, [r1, r3]
 8004718:	f003 031f 	and.w	r3, r3, #31
 800471c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004720:	4618      	mov	r0, r3
 8004722:	bd80      	pop	{r7, pc}
 8004724:	58024400 	.word	0x58024400
 8004728:	08007b44 	.word	0x08007b44

0800472c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800472c:	b480      	push	{r7}
 800472e:	b089      	sub	sp, #36	@ 0x24
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004734:	4ba1      	ldr	r3, [pc, #644]	@ (80049bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004738:	f003 0303 	and.w	r3, r3, #3
 800473c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800473e:	4b9f      	ldr	r3, [pc, #636]	@ (80049bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004742:	0b1b      	lsrs	r3, r3, #12
 8004744:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004748:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800474a:	4b9c      	ldr	r3, [pc, #624]	@ (80049bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800474c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800474e:	091b      	lsrs	r3, r3, #4
 8004750:	f003 0301 	and.w	r3, r3, #1
 8004754:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004756:	4b99      	ldr	r3, [pc, #612]	@ (80049bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004758:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800475a:	08db      	lsrs	r3, r3, #3
 800475c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004760:	693a      	ldr	r2, [r7, #16]
 8004762:	fb02 f303 	mul.w	r3, r2, r3
 8004766:	ee07 3a90 	vmov	s15, r3
 800476a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800476e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	2b00      	cmp	r3, #0
 8004776:	f000 8111 	beq.w	800499c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	2b02      	cmp	r3, #2
 800477e:	f000 8083 	beq.w	8004888 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	2b02      	cmp	r3, #2
 8004786:	f200 80a1 	bhi.w	80048cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d003      	beq.n	8004798 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004790:	69bb      	ldr	r3, [r7, #24]
 8004792:	2b01      	cmp	r3, #1
 8004794:	d056      	beq.n	8004844 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004796:	e099      	b.n	80048cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004798:	4b88      	ldr	r3, [pc, #544]	@ (80049bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 0320 	and.w	r3, r3, #32
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d02d      	beq.n	8004800 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80047a4:	4b85      	ldr	r3, [pc, #532]	@ (80049bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	08db      	lsrs	r3, r3, #3
 80047aa:	f003 0303 	and.w	r3, r3, #3
 80047ae:	4a84      	ldr	r2, [pc, #528]	@ (80049c0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80047b0:	fa22 f303 	lsr.w	r3, r2, r3
 80047b4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	ee07 3a90 	vmov	s15, r3
 80047bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	ee07 3a90 	vmov	s15, r3
 80047c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047ce:	4b7b      	ldr	r3, [pc, #492]	@ (80049bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047d6:	ee07 3a90 	vmov	s15, r3
 80047da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047de:	ed97 6a03 	vldr	s12, [r7, #12]
 80047e2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80049c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80047e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047fa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80047fe:	e087      	b.n	8004910 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	ee07 3a90 	vmov	s15, r3
 8004806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800480a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80049c8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800480e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004812:	4b6a      	ldr	r3, [pc, #424]	@ (80049bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004816:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800481a:	ee07 3a90 	vmov	s15, r3
 800481e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004822:	ed97 6a03 	vldr	s12, [r7, #12]
 8004826:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80049c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800482a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800482e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004832:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004836:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800483a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800483e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004842:	e065      	b.n	8004910 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	ee07 3a90 	vmov	s15, r3
 800484a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800484e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80049cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004852:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004856:	4b59      	ldr	r3, [pc, #356]	@ (80049bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004858:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800485a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800485e:	ee07 3a90 	vmov	s15, r3
 8004862:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004866:	ed97 6a03 	vldr	s12, [r7, #12]
 800486a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80049c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800486e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004872:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004876:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800487a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800487e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004882:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004886:	e043      	b.n	8004910 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	ee07 3a90 	vmov	s15, r3
 800488e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004892:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80049d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004896:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800489a:	4b48      	ldr	r3, [pc, #288]	@ (80049bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800489c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800489e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048a2:	ee07 3a90 	vmov	s15, r3
 80048a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80048ae:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80049c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048ca:	e021      	b.n	8004910 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	ee07 3a90 	vmov	s15, r3
 80048d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048d6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80049cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80048da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048de:	4b37      	ldr	r3, [pc, #220]	@ (80049bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048e6:	ee07 3a90 	vmov	s15, r3
 80048ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80048f2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80049c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004902:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004906:	ee67 7a27 	vmul.f32	s15, s14, s15
 800490a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800490e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004910:	4b2a      	ldr	r3, [pc, #168]	@ (80049bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004912:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004914:	0a5b      	lsrs	r3, r3, #9
 8004916:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800491a:	ee07 3a90 	vmov	s15, r3
 800491e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004922:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004926:	ee37 7a87 	vadd.f32	s14, s15, s14
 800492a:	edd7 6a07 	vldr	s13, [r7, #28]
 800492e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004932:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004936:	ee17 2a90 	vmov	r2, s15
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800493e:	4b1f      	ldr	r3, [pc, #124]	@ (80049bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004940:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004942:	0c1b      	lsrs	r3, r3, #16
 8004944:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004948:	ee07 3a90 	vmov	s15, r3
 800494c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004950:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004954:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004958:	edd7 6a07 	vldr	s13, [r7, #28]
 800495c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004960:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004964:	ee17 2a90 	vmov	r2, s15
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800496c:	4b13      	ldr	r3, [pc, #76]	@ (80049bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800496e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004970:	0e1b      	lsrs	r3, r3, #24
 8004972:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004976:	ee07 3a90 	vmov	s15, r3
 800497a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800497e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004982:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004986:	edd7 6a07 	vldr	s13, [r7, #28]
 800498a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800498e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004992:	ee17 2a90 	vmov	r2, s15
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800499a:	e008      	b.n	80049ae <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	609a      	str	r2, [r3, #8]
}
 80049ae:	bf00      	nop
 80049b0:	3724      	adds	r7, #36	@ 0x24
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	58024400 	.word	0x58024400
 80049c0:	03d09000 	.word	0x03d09000
 80049c4:	46000000 	.word	0x46000000
 80049c8:	4c742400 	.word	0x4c742400
 80049cc:	4a742400 	.word	0x4a742400
 80049d0:	4af42400 	.word	0x4af42400

080049d4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b089      	sub	sp, #36	@ 0x24
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80049dc:	4ba1      	ldr	r3, [pc, #644]	@ (8004c64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049e0:	f003 0303 	and.w	r3, r3, #3
 80049e4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80049e6:	4b9f      	ldr	r3, [pc, #636]	@ (8004c64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ea:	0d1b      	lsrs	r3, r3, #20
 80049ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80049f0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80049f2:	4b9c      	ldr	r3, [pc, #624]	@ (8004c64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049f6:	0a1b      	lsrs	r3, r3, #8
 80049f8:	f003 0301 	and.w	r3, r3, #1
 80049fc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80049fe:	4b99      	ldr	r3, [pc, #612]	@ (8004c64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a02:	08db      	lsrs	r3, r3, #3
 8004a04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a08:	693a      	ldr	r2, [r7, #16]
 8004a0a:	fb02 f303 	mul.w	r3, r2, r3
 8004a0e:	ee07 3a90 	vmov	s15, r3
 8004a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a16:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	f000 8111 	beq.w	8004c44 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	f000 8083 	beq.w	8004b30 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	f200 80a1 	bhi.w	8004b74 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d003      	beq.n	8004a40 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d056      	beq.n	8004aec <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004a3e:	e099      	b.n	8004b74 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a40:	4b88      	ldr	r3, [pc, #544]	@ (8004c64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0320 	and.w	r3, r3, #32
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d02d      	beq.n	8004aa8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a4c:	4b85      	ldr	r3, [pc, #532]	@ (8004c64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	08db      	lsrs	r3, r3, #3
 8004a52:	f003 0303 	and.w	r3, r3, #3
 8004a56:	4a84      	ldr	r2, [pc, #528]	@ (8004c68 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004a58:	fa22 f303 	lsr.w	r3, r2, r3
 8004a5c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	ee07 3a90 	vmov	s15, r3
 8004a64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	ee07 3a90 	vmov	s15, r3
 8004a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a76:	4b7b      	ldr	r3, [pc, #492]	@ (8004c64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a7e:	ee07 3a90 	vmov	s15, r3
 8004a82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a86:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a8a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004c6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aa2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004aa6:	e087      	b.n	8004bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	ee07 3a90 	vmov	s15, r3
 8004aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ab2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004c70 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004ab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004aba:	4b6a      	ldr	r3, [pc, #424]	@ (8004c64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ac2:	ee07 3a90 	vmov	s15, r3
 8004ac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aca:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ace:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004c6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ada:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ade:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ae6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004aea:	e065      	b.n	8004bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	ee07 3a90 	vmov	s15, r3
 8004af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004af6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004c74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004afa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004afe:	4b59      	ldr	r3, [pc, #356]	@ (8004c64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b06:	ee07 3a90 	vmov	s15, r3
 8004b0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b12:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004c6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b2e:	e043      	b.n	8004bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	ee07 3a90 	vmov	s15, r3
 8004b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b3a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004c78 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004b3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b42:	4b48      	ldr	r3, [pc, #288]	@ (8004c64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b4a:	ee07 3a90 	vmov	s15, r3
 8004b4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b52:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b56:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004c6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b72:	e021      	b.n	8004bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	ee07 3a90 	vmov	s15, r3
 8004b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b7e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004c74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004b82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b86:	4b37      	ldr	r3, [pc, #220]	@ (8004c64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b8e:	ee07 3a90 	vmov	s15, r3
 8004b92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b96:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b9a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004c6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ba2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ba6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004baa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bb6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004bb8:	4b2a      	ldr	r3, [pc, #168]	@ (8004c64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bbc:	0a5b      	lsrs	r3, r3, #9
 8004bbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bc2:	ee07 3a90 	vmov	s15, r3
 8004bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004bce:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bd2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bde:	ee17 2a90 	vmov	r2, s15
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004be6:	4b1f      	ldr	r3, [pc, #124]	@ (8004c64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bea:	0c1b      	lsrs	r3, r3, #16
 8004bec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bf0:	ee07 3a90 	vmov	s15, r3
 8004bf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bf8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004bfc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c00:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c0c:	ee17 2a90 	vmov	r2, s15
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004c14:	4b13      	ldr	r3, [pc, #76]	@ (8004c64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c18:	0e1b      	lsrs	r3, r3, #24
 8004c1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c1e:	ee07 3a90 	vmov	s15, r3
 8004c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c26:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c3a:	ee17 2a90 	vmov	r2, s15
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004c42:	e008      	b.n	8004c56 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	609a      	str	r2, [r3, #8]
}
 8004c56:	bf00      	nop
 8004c58:	3724      	adds	r7, #36	@ 0x24
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop
 8004c64:	58024400 	.word	0x58024400
 8004c68:	03d09000 	.word	0x03d09000
 8004c6c:	46000000 	.word	0x46000000
 8004c70:	4c742400 	.word	0x4c742400
 8004c74:	4a742400 	.word	0x4a742400
 8004c78:	4af42400 	.word	0x4af42400

08004c7c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c86:	2300      	movs	r3, #0
 8004c88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004c8a:	4b53      	ldr	r3, [pc, #332]	@ (8004dd8 <RCCEx_PLL2_Config+0x15c>)
 8004c8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c8e:	f003 0303 	and.w	r3, r3, #3
 8004c92:	2b03      	cmp	r3, #3
 8004c94:	d101      	bne.n	8004c9a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e099      	b.n	8004dce <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004c9a:	4b4f      	ldr	r3, [pc, #316]	@ (8004dd8 <RCCEx_PLL2_Config+0x15c>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a4e      	ldr	r2, [pc, #312]	@ (8004dd8 <RCCEx_PLL2_Config+0x15c>)
 8004ca0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004ca4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ca6:	f7fc f9f5 	bl	8001094 <HAL_GetTick>
 8004caa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004cac:	e008      	b.n	8004cc0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004cae:	f7fc f9f1 	bl	8001094 <HAL_GetTick>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	d901      	bls.n	8004cc0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004cbc:	2303      	movs	r3, #3
 8004cbe:	e086      	b.n	8004dce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004cc0:	4b45      	ldr	r3, [pc, #276]	@ (8004dd8 <RCCEx_PLL2_Config+0x15c>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d1f0      	bne.n	8004cae <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004ccc:	4b42      	ldr	r3, [pc, #264]	@ (8004dd8 <RCCEx_PLL2_Config+0x15c>)
 8004cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cd0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	031b      	lsls	r3, r3, #12
 8004cda:	493f      	ldr	r1, [pc, #252]	@ (8004dd8 <RCCEx_PLL2_Config+0x15c>)
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	628b      	str	r3, [r1, #40]	@ 0x28
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	3b01      	subs	r3, #1
 8004ce6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	3b01      	subs	r3, #1
 8004cf0:	025b      	lsls	r3, r3, #9
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	431a      	orrs	r2, r3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	041b      	lsls	r3, r3, #16
 8004cfe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004d02:	431a      	orrs	r2, r3
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	3b01      	subs	r3, #1
 8004d0a:	061b      	lsls	r3, r3, #24
 8004d0c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004d10:	4931      	ldr	r1, [pc, #196]	@ (8004dd8 <RCCEx_PLL2_Config+0x15c>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004d16:	4b30      	ldr	r3, [pc, #192]	@ (8004dd8 <RCCEx_PLL2_Config+0x15c>)
 8004d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d1a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	695b      	ldr	r3, [r3, #20]
 8004d22:	492d      	ldr	r1, [pc, #180]	@ (8004dd8 <RCCEx_PLL2_Config+0x15c>)
 8004d24:	4313      	orrs	r3, r2
 8004d26:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004d28:	4b2b      	ldr	r3, [pc, #172]	@ (8004dd8 <RCCEx_PLL2_Config+0x15c>)
 8004d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d2c:	f023 0220 	bic.w	r2, r3, #32
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	699b      	ldr	r3, [r3, #24]
 8004d34:	4928      	ldr	r1, [pc, #160]	@ (8004dd8 <RCCEx_PLL2_Config+0x15c>)
 8004d36:	4313      	orrs	r3, r2
 8004d38:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004d3a:	4b27      	ldr	r3, [pc, #156]	@ (8004dd8 <RCCEx_PLL2_Config+0x15c>)
 8004d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d3e:	4a26      	ldr	r2, [pc, #152]	@ (8004dd8 <RCCEx_PLL2_Config+0x15c>)
 8004d40:	f023 0310 	bic.w	r3, r3, #16
 8004d44:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004d46:	4b24      	ldr	r3, [pc, #144]	@ (8004dd8 <RCCEx_PLL2_Config+0x15c>)
 8004d48:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d4a:	4b24      	ldr	r3, [pc, #144]	@ (8004ddc <RCCEx_PLL2_Config+0x160>)
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	69d2      	ldr	r2, [r2, #28]
 8004d52:	00d2      	lsls	r2, r2, #3
 8004d54:	4920      	ldr	r1, [pc, #128]	@ (8004dd8 <RCCEx_PLL2_Config+0x15c>)
 8004d56:	4313      	orrs	r3, r2
 8004d58:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004d5a:	4b1f      	ldr	r3, [pc, #124]	@ (8004dd8 <RCCEx_PLL2_Config+0x15c>)
 8004d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d5e:	4a1e      	ldr	r2, [pc, #120]	@ (8004dd8 <RCCEx_PLL2_Config+0x15c>)
 8004d60:	f043 0310 	orr.w	r3, r3, #16
 8004d64:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d106      	bne.n	8004d7a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004d6c:	4b1a      	ldr	r3, [pc, #104]	@ (8004dd8 <RCCEx_PLL2_Config+0x15c>)
 8004d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d70:	4a19      	ldr	r2, [pc, #100]	@ (8004dd8 <RCCEx_PLL2_Config+0x15c>)
 8004d72:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004d76:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004d78:	e00f      	b.n	8004d9a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d106      	bne.n	8004d8e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004d80:	4b15      	ldr	r3, [pc, #84]	@ (8004dd8 <RCCEx_PLL2_Config+0x15c>)
 8004d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d84:	4a14      	ldr	r2, [pc, #80]	@ (8004dd8 <RCCEx_PLL2_Config+0x15c>)
 8004d86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d8a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004d8c:	e005      	b.n	8004d9a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004d8e:	4b12      	ldr	r3, [pc, #72]	@ (8004dd8 <RCCEx_PLL2_Config+0x15c>)
 8004d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d92:	4a11      	ldr	r2, [pc, #68]	@ (8004dd8 <RCCEx_PLL2_Config+0x15c>)
 8004d94:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004d98:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004d9a:	4b0f      	ldr	r3, [pc, #60]	@ (8004dd8 <RCCEx_PLL2_Config+0x15c>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a0e      	ldr	r2, [pc, #56]	@ (8004dd8 <RCCEx_PLL2_Config+0x15c>)
 8004da0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004da4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004da6:	f7fc f975 	bl	8001094 <HAL_GetTick>
 8004daa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004dac:	e008      	b.n	8004dc0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004dae:	f7fc f971 	bl	8001094 <HAL_GetTick>
 8004db2:	4602      	mov	r2, r0
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d901      	bls.n	8004dc0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	e006      	b.n	8004dce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004dc0:	4b05      	ldr	r3, [pc, #20]	@ (8004dd8 <RCCEx_PLL2_Config+0x15c>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d0f0      	beq.n	8004dae <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3710      	adds	r7, #16
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	58024400 	.word	0x58024400
 8004ddc:	ffff0007 	.word	0xffff0007

08004de0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004dea:	2300      	movs	r3, #0
 8004dec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004dee:	4b53      	ldr	r3, [pc, #332]	@ (8004f3c <RCCEx_PLL3_Config+0x15c>)
 8004df0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004df2:	f003 0303 	and.w	r3, r3, #3
 8004df6:	2b03      	cmp	r3, #3
 8004df8:	d101      	bne.n	8004dfe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e099      	b.n	8004f32 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004dfe:	4b4f      	ldr	r3, [pc, #316]	@ (8004f3c <RCCEx_PLL3_Config+0x15c>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a4e      	ldr	r2, [pc, #312]	@ (8004f3c <RCCEx_PLL3_Config+0x15c>)
 8004e04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e0a:	f7fc f943 	bl	8001094 <HAL_GetTick>
 8004e0e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004e10:	e008      	b.n	8004e24 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004e12:	f7fc f93f 	bl	8001094 <HAL_GetTick>
 8004e16:	4602      	mov	r2, r0
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	d901      	bls.n	8004e24 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	e086      	b.n	8004f32 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004e24:	4b45      	ldr	r3, [pc, #276]	@ (8004f3c <RCCEx_PLL3_Config+0x15c>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d1f0      	bne.n	8004e12 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004e30:	4b42      	ldr	r3, [pc, #264]	@ (8004f3c <RCCEx_PLL3_Config+0x15c>)
 8004e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e34:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	051b      	lsls	r3, r3, #20
 8004e3e:	493f      	ldr	r1, [pc, #252]	@ (8004f3c <RCCEx_PLL3_Config+0x15c>)
 8004e40:	4313      	orrs	r3, r2
 8004e42:	628b      	str	r3, [r1, #40]	@ 0x28
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	3b01      	subs	r3, #1
 8004e4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	3b01      	subs	r3, #1
 8004e54:	025b      	lsls	r3, r3, #9
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	431a      	orrs	r2, r3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	3b01      	subs	r3, #1
 8004e60:	041b      	lsls	r3, r3, #16
 8004e62:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004e66:	431a      	orrs	r2, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	691b      	ldr	r3, [r3, #16]
 8004e6c:	3b01      	subs	r3, #1
 8004e6e:	061b      	lsls	r3, r3, #24
 8004e70:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004e74:	4931      	ldr	r1, [pc, #196]	@ (8004f3c <RCCEx_PLL3_Config+0x15c>)
 8004e76:	4313      	orrs	r3, r2
 8004e78:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004e7a:	4b30      	ldr	r3, [pc, #192]	@ (8004f3c <RCCEx_PLL3_Config+0x15c>)
 8004e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e7e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	695b      	ldr	r3, [r3, #20]
 8004e86:	492d      	ldr	r1, [pc, #180]	@ (8004f3c <RCCEx_PLL3_Config+0x15c>)
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004e8c:	4b2b      	ldr	r3, [pc, #172]	@ (8004f3c <RCCEx_PLL3_Config+0x15c>)
 8004e8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e90:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	699b      	ldr	r3, [r3, #24]
 8004e98:	4928      	ldr	r1, [pc, #160]	@ (8004f3c <RCCEx_PLL3_Config+0x15c>)
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004e9e:	4b27      	ldr	r3, [pc, #156]	@ (8004f3c <RCCEx_PLL3_Config+0x15c>)
 8004ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ea2:	4a26      	ldr	r2, [pc, #152]	@ (8004f3c <RCCEx_PLL3_Config+0x15c>)
 8004ea4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ea8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004eaa:	4b24      	ldr	r3, [pc, #144]	@ (8004f3c <RCCEx_PLL3_Config+0x15c>)
 8004eac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004eae:	4b24      	ldr	r3, [pc, #144]	@ (8004f40 <RCCEx_PLL3_Config+0x160>)
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	69d2      	ldr	r2, [r2, #28]
 8004eb6:	00d2      	lsls	r2, r2, #3
 8004eb8:	4920      	ldr	r1, [pc, #128]	@ (8004f3c <RCCEx_PLL3_Config+0x15c>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004ebe:	4b1f      	ldr	r3, [pc, #124]	@ (8004f3c <RCCEx_PLL3_Config+0x15c>)
 8004ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec2:	4a1e      	ldr	r2, [pc, #120]	@ (8004f3c <RCCEx_PLL3_Config+0x15c>)
 8004ec4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ec8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d106      	bne.n	8004ede <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004ed0:	4b1a      	ldr	r3, [pc, #104]	@ (8004f3c <RCCEx_PLL3_Config+0x15c>)
 8004ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ed4:	4a19      	ldr	r2, [pc, #100]	@ (8004f3c <RCCEx_PLL3_Config+0x15c>)
 8004ed6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004eda:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004edc:	e00f      	b.n	8004efe <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d106      	bne.n	8004ef2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004ee4:	4b15      	ldr	r3, [pc, #84]	@ (8004f3c <RCCEx_PLL3_Config+0x15c>)
 8004ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ee8:	4a14      	ldr	r2, [pc, #80]	@ (8004f3c <RCCEx_PLL3_Config+0x15c>)
 8004eea:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004eee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004ef0:	e005      	b.n	8004efe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004ef2:	4b12      	ldr	r3, [pc, #72]	@ (8004f3c <RCCEx_PLL3_Config+0x15c>)
 8004ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ef6:	4a11      	ldr	r2, [pc, #68]	@ (8004f3c <RCCEx_PLL3_Config+0x15c>)
 8004ef8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004efc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004efe:	4b0f      	ldr	r3, [pc, #60]	@ (8004f3c <RCCEx_PLL3_Config+0x15c>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a0e      	ldr	r2, [pc, #56]	@ (8004f3c <RCCEx_PLL3_Config+0x15c>)
 8004f04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f0a:	f7fc f8c3 	bl	8001094 <HAL_GetTick>
 8004f0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004f10:	e008      	b.n	8004f24 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004f12:	f7fc f8bf 	bl	8001094 <HAL_GetTick>
 8004f16:	4602      	mov	r2, r0
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	d901      	bls.n	8004f24 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e006      	b.n	8004f32 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004f24:	4b05      	ldr	r3, [pc, #20]	@ (8004f3c <RCCEx_PLL3_Config+0x15c>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d0f0      	beq.n	8004f12 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3710      	adds	r7, #16
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	58024400 	.word	0x58024400
 8004f40:	ffff0007 	.word	0xffff0007

08004f44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b082      	sub	sp, #8
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d101      	bne.n	8004f56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e049      	b.n	8004fea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d106      	bne.n	8004f70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f7fb fee8 	bl	8000d40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2202      	movs	r2, #2
 8004f74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	3304      	adds	r3, #4
 8004f80:	4619      	mov	r1, r3
 8004f82:	4610      	mov	r0, r2
 8004f84:	f000 f9e8 	bl	8005358 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3708      	adds	r7, #8
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
	...

08004ff4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b085      	sub	sp, #20
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005002:	b2db      	uxtb	r3, r3
 8005004:	2b01      	cmp	r3, #1
 8005006:	d001      	beq.n	800500c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e054      	b.n	80050b6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2202      	movs	r2, #2
 8005010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	68da      	ldr	r2, [r3, #12]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f042 0201 	orr.w	r2, r2, #1
 8005022:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a26      	ldr	r2, [pc, #152]	@ (80050c4 <HAL_TIM_Base_Start_IT+0xd0>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d022      	beq.n	8005074 <HAL_TIM_Base_Start_IT+0x80>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005036:	d01d      	beq.n	8005074 <HAL_TIM_Base_Start_IT+0x80>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a22      	ldr	r2, [pc, #136]	@ (80050c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d018      	beq.n	8005074 <HAL_TIM_Base_Start_IT+0x80>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a21      	ldr	r2, [pc, #132]	@ (80050cc <HAL_TIM_Base_Start_IT+0xd8>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d013      	beq.n	8005074 <HAL_TIM_Base_Start_IT+0x80>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a1f      	ldr	r2, [pc, #124]	@ (80050d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d00e      	beq.n	8005074 <HAL_TIM_Base_Start_IT+0x80>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a1e      	ldr	r2, [pc, #120]	@ (80050d4 <HAL_TIM_Base_Start_IT+0xe0>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d009      	beq.n	8005074 <HAL_TIM_Base_Start_IT+0x80>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a1c      	ldr	r2, [pc, #112]	@ (80050d8 <HAL_TIM_Base_Start_IT+0xe4>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d004      	beq.n	8005074 <HAL_TIM_Base_Start_IT+0x80>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a1b      	ldr	r2, [pc, #108]	@ (80050dc <HAL_TIM_Base_Start_IT+0xe8>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d115      	bne.n	80050a0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	689a      	ldr	r2, [r3, #8]
 800507a:	4b19      	ldr	r3, [pc, #100]	@ (80050e0 <HAL_TIM_Base_Start_IT+0xec>)
 800507c:	4013      	ands	r3, r2
 800507e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2b06      	cmp	r3, #6
 8005084:	d015      	beq.n	80050b2 <HAL_TIM_Base_Start_IT+0xbe>
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800508c:	d011      	beq.n	80050b2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f042 0201 	orr.w	r2, r2, #1
 800509c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800509e:	e008      	b.n	80050b2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f042 0201 	orr.w	r2, r2, #1
 80050ae:	601a      	str	r2, [r3, #0]
 80050b0:	e000      	b.n	80050b4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80050b4:	2300      	movs	r3, #0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3714      	adds	r7, #20
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr
 80050c2:	bf00      	nop
 80050c4:	40010000 	.word	0x40010000
 80050c8:	40000400 	.word	0x40000400
 80050cc:	40000800 	.word	0x40000800
 80050d0:	40000c00 	.word	0x40000c00
 80050d4:	40010400 	.word	0x40010400
 80050d8:	40001800 	.word	0x40001800
 80050dc:	40014000 	.word	0x40014000
 80050e0:	00010007 	.word	0x00010007

080050e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	f003 0302 	and.w	r3, r3, #2
 8005102:	2b00      	cmp	r3, #0
 8005104:	d020      	beq.n	8005148 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f003 0302 	and.w	r3, r3, #2
 800510c:	2b00      	cmp	r3, #0
 800510e:	d01b      	beq.n	8005148 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f06f 0202 	mvn.w	r2, #2
 8005118:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2201      	movs	r2, #1
 800511e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	699b      	ldr	r3, [r3, #24]
 8005126:	f003 0303 	and.w	r3, r3, #3
 800512a:	2b00      	cmp	r3, #0
 800512c:	d003      	beq.n	8005136 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 f8f3 	bl	800531a <HAL_TIM_IC_CaptureCallback>
 8005134:	e005      	b.n	8005142 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 f8e5 	bl	8005306 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f000 f8f6 	bl	800532e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	f003 0304 	and.w	r3, r3, #4
 800514e:	2b00      	cmp	r3, #0
 8005150:	d020      	beq.n	8005194 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f003 0304 	and.w	r3, r3, #4
 8005158:	2b00      	cmp	r3, #0
 800515a:	d01b      	beq.n	8005194 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f06f 0204 	mvn.w	r2, #4
 8005164:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2202      	movs	r2, #2
 800516a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	699b      	ldr	r3, [r3, #24]
 8005172:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005176:	2b00      	cmp	r3, #0
 8005178:	d003      	beq.n	8005182 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 f8cd 	bl	800531a <HAL_TIM_IC_CaptureCallback>
 8005180:	e005      	b.n	800518e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 f8bf 	bl	8005306 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f000 f8d0 	bl	800532e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	f003 0308 	and.w	r3, r3, #8
 800519a:	2b00      	cmp	r3, #0
 800519c:	d020      	beq.n	80051e0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f003 0308 	and.w	r3, r3, #8
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d01b      	beq.n	80051e0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f06f 0208 	mvn.w	r2, #8
 80051b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2204      	movs	r2, #4
 80051b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	69db      	ldr	r3, [r3, #28]
 80051be:	f003 0303 	and.w	r3, r3, #3
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d003      	beq.n	80051ce <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 f8a7 	bl	800531a <HAL_TIM_IC_CaptureCallback>
 80051cc:	e005      	b.n	80051da <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 f899 	bl	8005306 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f000 f8aa 	bl	800532e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	f003 0310 	and.w	r3, r3, #16
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d020      	beq.n	800522c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f003 0310 	and.w	r3, r3, #16
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d01b      	beq.n	800522c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f06f 0210 	mvn.w	r2, #16
 80051fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2208      	movs	r2, #8
 8005202:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	69db      	ldr	r3, [r3, #28]
 800520a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800520e:	2b00      	cmp	r3, #0
 8005210:	d003      	beq.n	800521a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f000 f881 	bl	800531a <HAL_TIM_IC_CaptureCallback>
 8005218:	e005      	b.n	8005226 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 f873 	bl	8005306 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f000 f884 	bl	800532e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	f003 0301 	and.w	r3, r3, #1
 8005232:	2b00      	cmp	r3, #0
 8005234:	d00c      	beq.n	8005250 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f003 0301 	and.w	r3, r3, #1
 800523c:	2b00      	cmp	r3, #0
 800523e:	d007      	beq.n	8005250 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f06f 0201 	mvn.w	r2, #1
 8005248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 f851 	bl	80052f2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005256:	2b00      	cmp	r3, #0
 8005258:	d104      	bne.n	8005264 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005260:	2b00      	cmp	r3, #0
 8005262:	d00c      	beq.n	800527e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800526a:	2b00      	cmp	r3, #0
 800526c:	d007      	beq.n	800527e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005276:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f000 f9a5 	bl	80055c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005284:	2b00      	cmp	r3, #0
 8005286:	d00c      	beq.n	80052a2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800528e:	2b00      	cmp	r3, #0
 8005290:	d007      	beq.n	80052a2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800529a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f000 f99d 	bl	80055dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d00c      	beq.n	80052c6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d007      	beq.n	80052c6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80052be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f000 f83e 	bl	8005342 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	f003 0320 	and.w	r3, r3, #32
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d00c      	beq.n	80052ea <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f003 0320 	and.w	r3, r3, #32
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d007      	beq.n	80052ea <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f06f 0220 	mvn.w	r2, #32
 80052e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f000 f965 	bl	80055b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052ea:	bf00      	nop
 80052ec:	3710      	adds	r7, #16
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}

080052f2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052f2:	b480      	push	{r7}
 80052f4:	b083      	sub	sp, #12
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80052fa:	bf00      	nop
 80052fc:	370c      	adds	r7, #12
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr

08005306 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005306:	b480      	push	{r7}
 8005308:	b083      	sub	sp, #12
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800530e:	bf00      	nop
 8005310:	370c      	adds	r7, #12
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr

0800531a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800531a:	b480      	push	{r7}
 800531c:	b083      	sub	sp, #12
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005322:	bf00      	nop
 8005324:	370c      	adds	r7, #12
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr

0800532e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800532e:	b480      	push	{r7}
 8005330:	b083      	sub	sp, #12
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005336:	bf00      	nop
 8005338:	370c      	adds	r7, #12
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr

08005342 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005342:	b480      	push	{r7}
 8005344:	b083      	sub	sp, #12
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800534a:	bf00      	nop
 800534c:	370c      	adds	r7, #12
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr
	...

08005358 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005358:	b480      	push	{r7}
 800535a:	b085      	sub	sp, #20
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4a43      	ldr	r2, [pc, #268]	@ (8005478 <TIM_Base_SetConfig+0x120>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d013      	beq.n	8005398 <TIM_Base_SetConfig+0x40>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005376:	d00f      	beq.n	8005398 <TIM_Base_SetConfig+0x40>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4a40      	ldr	r2, [pc, #256]	@ (800547c <TIM_Base_SetConfig+0x124>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d00b      	beq.n	8005398 <TIM_Base_SetConfig+0x40>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4a3f      	ldr	r2, [pc, #252]	@ (8005480 <TIM_Base_SetConfig+0x128>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d007      	beq.n	8005398 <TIM_Base_SetConfig+0x40>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4a3e      	ldr	r2, [pc, #248]	@ (8005484 <TIM_Base_SetConfig+0x12c>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d003      	beq.n	8005398 <TIM_Base_SetConfig+0x40>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4a3d      	ldr	r2, [pc, #244]	@ (8005488 <TIM_Base_SetConfig+0x130>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d108      	bne.n	80053aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800539e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	68fa      	ldr	r2, [r7, #12]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a32      	ldr	r2, [pc, #200]	@ (8005478 <TIM_Base_SetConfig+0x120>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d01f      	beq.n	80053f2 <TIM_Base_SetConfig+0x9a>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053b8:	d01b      	beq.n	80053f2 <TIM_Base_SetConfig+0x9a>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4a2f      	ldr	r2, [pc, #188]	@ (800547c <TIM_Base_SetConfig+0x124>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d017      	beq.n	80053f2 <TIM_Base_SetConfig+0x9a>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a2e      	ldr	r2, [pc, #184]	@ (8005480 <TIM_Base_SetConfig+0x128>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d013      	beq.n	80053f2 <TIM_Base_SetConfig+0x9a>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a2d      	ldr	r2, [pc, #180]	@ (8005484 <TIM_Base_SetConfig+0x12c>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d00f      	beq.n	80053f2 <TIM_Base_SetConfig+0x9a>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4a2c      	ldr	r2, [pc, #176]	@ (8005488 <TIM_Base_SetConfig+0x130>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d00b      	beq.n	80053f2 <TIM_Base_SetConfig+0x9a>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4a2b      	ldr	r2, [pc, #172]	@ (800548c <TIM_Base_SetConfig+0x134>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d007      	beq.n	80053f2 <TIM_Base_SetConfig+0x9a>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a2a      	ldr	r2, [pc, #168]	@ (8005490 <TIM_Base_SetConfig+0x138>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d003      	beq.n	80053f2 <TIM_Base_SetConfig+0x9a>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a29      	ldr	r2, [pc, #164]	@ (8005494 <TIM_Base_SetConfig+0x13c>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d108      	bne.n	8005404 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	68db      	ldr	r3, [r3, #12]
 80053fe:	68fa      	ldr	r2, [r7, #12]
 8005400:	4313      	orrs	r3, r2
 8005402:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	695b      	ldr	r3, [r3, #20]
 800540e:	4313      	orrs	r3, r2
 8005410:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	689a      	ldr	r2, [r3, #8]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4a14      	ldr	r2, [pc, #80]	@ (8005478 <TIM_Base_SetConfig+0x120>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d00f      	beq.n	800544a <TIM_Base_SetConfig+0xf2>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4a16      	ldr	r2, [pc, #88]	@ (8005488 <TIM_Base_SetConfig+0x130>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d00b      	beq.n	800544a <TIM_Base_SetConfig+0xf2>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a15      	ldr	r2, [pc, #84]	@ (800548c <TIM_Base_SetConfig+0x134>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d007      	beq.n	800544a <TIM_Base_SetConfig+0xf2>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a14      	ldr	r2, [pc, #80]	@ (8005490 <TIM_Base_SetConfig+0x138>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d003      	beq.n	800544a <TIM_Base_SetConfig+0xf2>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a13      	ldr	r2, [pc, #76]	@ (8005494 <TIM_Base_SetConfig+0x13c>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d103      	bne.n	8005452 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	691a      	ldr	r2, [r3, #16]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f043 0204 	orr.w	r2, r3, #4
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2201      	movs	r2, #1
 8005462:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	68fa      	ldr	r2, [r7, #12]
 8005468:	601a      	str	r2, [r3, #0]
}
 800546a:	bf00      	nop
 800546c:	3714      	adds	r7, #20
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr
 8005476:	bf00      	nop
 8005478:	40010000 	.word	0x40010000
 800547c:	40000400 	.word	0x40000400
 8005480:	40000800 	.word	0x40000800
 8005484:	40000c00 	.word	0x40000c00
 8005488:	40010400 	.word	0x40010400
 800548c:	40014000 	.word	0x40014000
 8005490:	40014400 	.word	0x40014400
 8005494:	40014800 	.word	0x40014800

08005498 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005498:	b480      	push	{r7}
 800549a:	b085      	sub	sp, #20
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d101      	bne.n	80054b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054ac:	2302      	movs	r3, #2
 80054ae:	e06d      	b.n	800558c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2202      	movs	r2, #2
 80054bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a30      	ldr	r2, [pc, #192]	@ (8005598 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d004      	beq.n	80054e4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a2f      	ldr	r2, [pc, #188]	@ (800559c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d108      	bne.n	80054f6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80054ea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054fc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	4313      	orrs	r3, r2
 8005506:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	68fa      	ldr	r2, [r7, #12]
 800550e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a20      	ldr	r2, [pc, #128]	@ (8005598 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d022      	beq.n	8005560 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005522:	d01d      	beq.n	8005560 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a1d      	ldr	r2, [pc, #116]	@ (80055a0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d018      	beq.n	8005560 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a1c      	ldr	r2, [pc, #112]	@ (80055a4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d013      	beq.n	8005560 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a1a      	ldr	r2, [pc, #104]	@ (80055a8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d00e      	beq.n	8005560 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a15      	ldr	r2, [pc, #84]	@ (800559c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d009      	beq.n	8005560 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a16      	ldr	r2, [pc, #88]	@ (80055ac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d004      	beq.n	8005560 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a15      	ldr	r2, [pc, #84]	@ (80055b0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d10c      	bne.n	800557a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005566:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	68ba      	ldr	r2, [r7, #8]
 800556e:	4313      	orrs	r3, r2
 8005570:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	68ba      	ldr	r2, [r7, #8]
 8005578:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2201      	movs	r2, #1
 800557e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800558a:	2300      	movs	r3, #0
}
 800558c:	4618      	mov	r0, r3
 800558e:	3714      	adds	r7, #20
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr
 8005598:	40010000 	.word	0x40010000
 800559c:	40010400 	.word	0x40010400
 80055a0:	40000400 	.word	0x40000400
 80055a4:	40000800 	.word	0x40000800
 80055a8:	40000c00 	.word	0x40000c00
 80055ac:	40001800 	.word	0x40001800
 80055b0:	40014000 	.word	0x40014000

080055b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055bc:	bf00      	nop
 80055be:	370c      	adds	r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80055d0:	bf00      	nop
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr

080055dc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80055e4:	bf00      	nop
 80055e6:	370c      	adds	r7, #12
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr

080055f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b082      	sub	sp, #8
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d101      	bne.n	8005602 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e042      	b.n	8005688 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005608:	2b00      	cmp	r3, #0
 800560a:	d106      	bne.n	800561a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f7fb fc07 	bl	8000e28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2224      	movs	r2, #36	@ 0x24
 800561e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f022 0201 	bic.w	r2, r2, #1
 8005630:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005636:	2b00      	cmp	r3, #0
 8005638:	d002      	beq.n	8005640 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f001 fa14 	bl	8006a68 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f000 fca9 	bl	8005f98 <UART_SetConfig>
 8005646:	4603      	mov	r3, r0
 8005648:	2b01      	cmp	r3, #1
 800564a:	d101      	bne.n	8005650 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	e01b      	b.n	8005688 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	685a      	ldr	r2, [r3, #4]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800565e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	689a      	ldr	r2, [r3, #8]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800566e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f042 0201 	orr.w	r2, r2, #1
 800567e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f001 fa93 	bl	8006bac <UART_CheckIdleState>
 8005686:	4603      	mov	r3, r0
}
 8005688:	4618      	mov	r0, r3
 800568a:	3708      	adds	r7, #8
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}

08005690 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b08a      	sub	sp, #40	@ 0x28
 8005694:	af02      	add	r7, sp, #8
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	603b      	str	r3, [r7, #0]
 800569c:	4613      	mov	r3, r2
 800569e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056a6:	2b20      	cmp	r3, #32
 80056a8:	d17b      	bne.n	80057a2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d002      	beq.n	80056b6 <HAL_UART_Transmit+0x26>
 80056b0:	88fb      	ldrh	r3, [r7, #6]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d101      	bne.n	80056ba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e074      	b.n	80057a4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2200      	movs	r2, #0
 80056be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2221      	movs	r2, #33	@ 0x21
 80056c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056ca:	f7fb fce3 	bl	8001094 <HAL_GetTick>
 80056ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	88fa      	ldrh	r2, [r7, #6]
 80056d4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	88fa      	ldrh	r2, [r7, #6]
 80056dc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056e8:	d108      	bne.n	80056fc <HAL_UART_Transmit+0x6c>
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d104      	bne.n	80056fc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80056f2:	2300      	movs	r3, #0
 80056f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	61bb      	str	r3, [r7, #24]
 80056fa:	e003      	b.n	8005704 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005700:	2300      	movs	r3, #0
 8005702:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005704:	e030      	b.n	8005768 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	9300      	str	r3, [sp, #0]
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	2200      	movs	r2, #0
 800570e:	2180      	movs	r1, #128	@ 0x80
 8005710:	68f8      	ldr	r0, [r7, #12]
 8005712:	f001 faf5 	bl	8006d00 <UART_WaitOnFlagUntilTimeout>
 8005716:	4603      	mov	r3, r0
 8005718:	2b00      	cmp	r3, #0
 800571a:	d005      	beq.n	8005728 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2220      	movs	r2, #32
 8005720:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005724:	2303      	movs	r3, #3
 8005726:	e03d      	b.n	80057a4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005728:	69fb      	ldr	r3, [r7, #28]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d10b      	bne.n	8005746 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800572e:	69bb      	ldr	r3, [r7, #24]
 8005730:	881b      	ldrh	r3, [r3, #0]
 8005732:	461a      	mov	r2, r3
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800573c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800573e:	69bb      	ldr	r3, [r7, #24]
 8005740:	3302      	adds	r3, #2
 8005742:	61bb      	str	r3, [r7, #24]
 8005744:	e007      	b.n	8005756 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	781a      	ldrb	r2, [r3, #0]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	3301      	adds	r3, #1
 8005754:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800575c:	b29b      	uxth	r3, r3
 800575e:	3b01      	subs	r3, #1
 8005760:	b29a      	uxth	r2, r3
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800576e:	b29b      	uxth	r3, r3
 8005770:	2b00      	cmp	r3, #0
 8005772:	d1c8      	bne.n	8005706 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	9300      	str	r3, [sp, #0]
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	2200      	movs	r2, #0
 800577c:	2140      	movs	r1, #64	@ 0x40
 800577e:	68f8      	ldr	r0, [r7, #12]
 8005780:	f001 fabe 	bl	8006d00 <UART_WaitOnFlagUntilTimeout>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d005      	beq.n	8005796 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2220      	movs	r2, #32
 800578e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e006      	b.n	80057a4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2220      	movs	r2, #32
 800579a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800579e:	2300      	movs	r3, #0
 80057a0:	e000      	b.n	80057a4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80057a2:	2302      	movs	r3, #2
  }
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3720      	adds	r7, #32
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}

080057ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b0ba      	sub	sp, #232	@ 0xe8
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	69db      	ldr	r3, [r3, #28]
 80057ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80057d2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80057d6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80057da:	4013      	ands	r3, r2
 80057dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80057e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d11b      	bne.n	8005820 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80057e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057ec:	f003 0320 	and.w	r3, r3, #32
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d015      	beq.n	8005820 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80057f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057f8:	f003 0320 	and.w	r3, r3, #32
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d105      	bne.n	800580c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005800:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005804:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005808:	2b00      	cmp	r3, #0
 800580a:	d009      	beq.n	8005820 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005810:	2b00      	cmp	r3, #0
 8005812:	f000 8393 	beq.w	8005f3c <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	4798      	blx	r3
      }
      return;
 800581e:	e38d      	b.n	8005f3c <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005820:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005824:	2b00      	cmp	r3, #0
 8005826:	f000 8123 	beq.w	8005a70 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800582a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800582e:	4b8d      	ldr	r3, [pc, #564]	@ (8005a64 <HAL_UART_IRQHandler+0x2b8>)
 8005830:	4013      	ands	r3, r2
 8005832:	2b00      	cmp	r3, #0
 8005834:	d106      	bne.n	8005844 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005836:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800583a:	4b8b      	ldr	r3, [pc, #556]	@ (8005a68 <HAL_UART_IRQHandler+0x2bc>)
 800583c:	4013      	ands	r3, r2
 800583e:	2b00      	cmp	r3, #0
 8005840:	f000 8116 	beq.w	8005a70 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005844:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005848:	f003 0301 	and.w	r3, r3, #1
 800584c:	2b00      	cmp	r3, #0
 800584e:	d011      	beq.n	8005874 <HAL_UART_IRQHandler+0xc8>
 8005850:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005854:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005858:	2b00      	cmp	r3, #0
 800585a:	d00b      	beq.n	8005874 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	2201      	movs	r2, #1
 8005862:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800586a:	f043 0201 	orr.w	r2, r3, #1
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005874:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005878:	f003 0302 	and.w	r3, r3, #2
 800587c:	2b00      	cmp	r3, #0
 800587e:	d011      	beq.n	80058a4 <HAL_UART_IRQHandler+0xf8>
 8005880:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005884:	f003 0301 	and.w	r3, r3, #1
 8005888:	2b00      	cmp	r3, #0
 800588a:	d00b      	beq.n	80058a4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2202      	movs	r2, #2
 8005892:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800589a:	f043 0204 	orr.w	r2, r3, #4
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80058a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058a8:	f003 0304 	and.w	r3, r3, #4
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d011      	beq.n	80058d4 <HAL_UART_IRQHandler+0x128>
 80058b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80058b4:	f003 0301 	and.w	r3, r3, #1
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d00b      	beq.n	80058d4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2204      	movs	r2, #4
 80058c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058ca:	f043 0202 	orr.w	r2, r3, #2
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80058d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058d8:	f003 0308 	and.w	r3, r3, #8
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d017      	beq.n	8005910 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80058e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058e4:	f003 0320 	and.w	r3, r3, #32
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d105      	bne.n	80058f8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80058ec:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80058f0:	4b5c      	ldr	r3, [pc, #368]	@ (8005a64 <HAL_UART_IRQHandler+0x2b8>)
 80058f2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d00b      	beq.n	8005910 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	2208      	movs	r2, #8
 80058fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005906:	f043 0208 	orr.w	r2, r3, #8
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005910:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005914:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005918:	2b00      	cmp	r3, #0
 800591a:	d012      	beq.n	8005942 <HAL_UART_IRQHandler+0x196>
 800591c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005920:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005924:	2b00      	cmp	r3, #0
 8005926:	d00c      	beq.n	8005942 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005930:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005938:	f043 0220 	orr.w	r2, r3, #32
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005948:	2b00      	cmp	r3, #0
 800594a:	f000 82f9 	beq.w	8005f40 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800594e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005952:	f003 0320 	and.w	r3, r3, #32
 8005956:	2b00      	cmp	r3, #0
 8005958:	d013      	beq.n	8005982 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800595a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800595e:	f003 0320 	and.w	r3, r3, #32
 8005962:	2b00      	cmp	r3, #0
 8005964:	d105      	bne.n	8005972 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005966:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800596a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800596e:	2b00      	cmp	r3, #0
 8005970:	d007      	beq.n	8005982 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005976:	2b00      	cmp	r3, #0
 8005978:	d003      	beq.n	8005982 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005988:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005996:	2b40      	cmp	r3, #64	@ 0x40
 8005998:	d005      	beq.n	80059a6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800599a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800599e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d054      	beq.n	8005a50 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f001 fa18 	bl	8006ddc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059b6:	2b40      	cmp	r3, #64	@ 0x40
 80059b8:	d146      	bne.n	8005a48 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	3308      	adds	r3, #8
 80059c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80059c8:	e853 3f00 	ldrex	r3, [r3]
 80059cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80059d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80059d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	3308      	adds	r3, #8
 80059e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80059e6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80059ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80059f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80059f6:	e841 2300 	strex	r3, r2, [r1]
 80059fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80059fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d1d9      	bne.n	80059ba <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d017      	beq.n	8005a40 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a16:	4a15      	ldr	r2, [pc, #84]	@ (8005a6c <HAL_UART_IRQHandler+0x2c0>)
 8005a18:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a20:	4618      	mov	r0, r3
 8005a22:	f7fb fff5 	bl	8001a10 <HAL_DMA_Abort_IT>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d019      	beq.n	8005a60 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a34:	687a      	ldr	r2, [r7, #4]
 8005a36:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005a3a:	4610      	mov	r0, r2
 8005a3c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a3e:	e00f      	b.n	8005a60 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f000 fa93 	bl	8005f6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a46:	e00b      	b.n	8005a60 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f000 fa8f 	bl	8005f6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a4e:	e007      	b.n	8005a60 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 fa8b 	bl	8005f6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8005a5e:	e26f      	b.n	8005f40 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a60:	bf00      	nop
    return;
 8005a62:	e26d      	b.n	8005f40 <HAL_UART_IRQHandler+0x794>
 8005a64:	10000001 	.word	0x10000001
 8005a68:	04000120 	.word	0x04000120
 8005a6c:	08006ea9 	.word	0x08006ea9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	f040 8203 	bne.w	8005e80 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005a7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a7e:	f003 0310 	and.w	r3, r3, #16
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	f000 81fc 	beq.w	8005e80 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005a88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a8c:	f003 0310 	and.w	r3, r3, #16
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	f000 81f5 	beq.w	8005e80 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2210      	movs	r2, #16
 8005a9c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005aa8:	2b40      	cmp	r3, #64	@ 0x40
 8005aaa:	f040 816d 	bne.w	8005d88 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4aa4      	ldr	r2, [pc, #656]	@ (8005d48 <HAL_UART_IRQHandler+0x59c>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d068      	beq.n	8005b8e <HAL_UART_IRQHandler+0x3e2>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4aa1      	ldr	r2, [pc, #644]	@ (8005d4c <HAL_UART_IRQHandler+0x5a0>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d061      	beq.n	8005b8e <HAL_UART_IRQHandler+0x3e2>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a9f      	ldr	r2, [pc, #636]	@ (8005d50 <HAL_UART_IRQHandler+0x5a4>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d05a      	beq.n	8005b8e <HAL_UART_IRQHandler+0x3e2>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a9c      	ldr	r2, [pc, #624]	@ (8005d54 <HAL_UART_IRQHandler+0x5a8>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d053      	beq.n	8005b8e <HAL_UART_IRQHandler+0x3e2>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a9a      	ldr	r2, [pc, #616]	@ (8005d58 <HAL_UART_IRQHandler+0x5ac>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d04c      	beq.n	8005b8e <HAL_UART_IRQHandler+0x3e2>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a97      	ldr	r2, [pc, #604]	@ (8005d5c <HAL_UART_IRQHandler+0x5b0>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d045      	beq.n	8005b8e <HAL_UART_IRQHandler+0x3e2>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a95      	ldr	r2, [pc, #596]	@ (8005d60 <HAL_UART_IRQHandler+0x5b4>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d03e      	beq.n	8005b8e <HAL_UART_IRQHandler+0x3e2>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a92      	ldr	r2, [pc, #584]	@ (8005d64 <HAL_UART_IRQHandler+0x5b8>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d037      	beq.n	8005b8e <HAL_UART_IRQHandler+0x3e2>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a90      	ldr	r2, [pc, #576]	@ (8005d68 <HAL_UART_IRQHandler+0x5bc>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d030      	beq.n	8005b8e <HAL_UART_IRQHandler+0x3e2>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a8d      	ldr	r2, [pc, #564]	@ (8005d6c <HAL_UART_IRQHandler+0x5c0>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d029      	beq.n	8005b8e <HAL_UART_IRQHandler+0x3e2>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a8b      	ldr	r2, [pc, #556]	@ (8005d70 <HAL_UART_IRQHandler+0x5c4>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d022      	beq.n	8005b8e <HAL_UART_IRQHandler+0x3e2>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a88      	ldr	r2, [pc, #544]	@ (8005d74 <HAL_UART_IRQHandler+0x5c8>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d01b      	beq.n	8005b8e <HAL_UART_IRQHandler+0x3e2>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a86      	ldr	r2, [pc, #536]	@ (8005d78 <HAL_UART_IRQHandler+0x5cc>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d014      	beq.n	8005b8e <HAL_UART_IRQHandler+0x3e2>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a83      	ldr	r2, [pc, #524]	@ (8005d7c <HAL_UART_IRQHandler+0x5d0>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d00d      	beq.n	8005b8e <HAL_UART_IRQHandler+0x3e2>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a81      	ldr	r2, [pc, #516]	@ (8005d80 <HAL_UART_IRQHandler+0x5d4>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d006      	beq.n	8005b8e <HAL_UART_IRQHandler+0x3e2>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a7e      	ldr	r2, [pc, #504]	@ (8005d84 <HAL_UART_IRQHandler+0x5d8>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d106      	bne.n	8005b9c <HAL_UART_IRQHandler+0x3f0>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	e005      	b.n	8005ba8 <HAL_UART_IRQHandler+0x3fc>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005bac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	f000 80ad 	beq.w	8005d10 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005bbc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	f080 80a5 	bcs.w	8005d10 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005bcc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005bd6:	69db      	ldr	r3, [r3, #28]
 8005bd8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bdc:	f000 8087 	beq.w	8005cee <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005bec:	e853 3f00 	ldrex	r3, [r3]
 8005bf0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005bf4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005bf8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005bfc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	461a      	mov	r2, r3
 8005c06:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005c0a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005c0e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c12:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005c16:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005c1a:	e841 2300 	strex	r3, r2, [r1]
 8005c1e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005c22:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d1da      	bne.n	8005be0 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	3308      	adds	r3, #8
 8005c30:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c32:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005c34:	e853 3f00 	ldrex	r3, [r3]
 8005c38:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005c3a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005c3c:	f023 0301 	bic.w	r3, r3, #1
 8005c40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	3308      	adds	r3, #8
 8005c4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005c4e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005c52:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c54:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005c56:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005c5a:	e841 2300 	strex	r3, r2, [r1]
 8005c5e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005c60:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d1e1      	bne.n	8005c2a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	3308      	adds	r3, #8
 8005c6c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c6e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005c70:	e853 3f00 	ldrex	r3, [r3]
 8005c74:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005c76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c7c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	3308      	adds	r3, #8
 8005c86:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005c8a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005c8c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c8e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005c90:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005c92:	e841 2300 	strex	r3, r2, [r1]
 8005c96:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005c98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d1e3      	bne.n	8005c66 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2220      	movs	r2, #32
 8005ca2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cb4:	e853 3f00 	ldrex	r3, [r3]
 8005cb8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005cba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005cbc:	f023 0310 	bic.w	r3, r3, #16
 8005cc0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	461a      	mov	r2, r3
 8005cca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005cce:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005cd0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005cd4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005cd6:	e841 2300 	strex	r3, r2, [r1]
 8005cda:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005cdc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d1e4      	bne.n	8005cac <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f7fb fb73 	bl	80013d4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2202      	movs	r2, #2
 8005cf2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	1ad3      	subs	r3, r2, r3
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	4619      	mov	r1, r3
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f000 f939 	bl	8005f80 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005d0e:	e119      	b.n	8005f44 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005d16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	f040 8112 	bne.w	8005f44 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d26:	69db      	ldr	r3, [r3, #28]
 8005d28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d2c:	f040 810a 	bne.w	8005f44 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2202      	movs	r2, #2
 8005d34:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 f91e 	bl	8005f80 <HAL_UARTEx_RxEventCallback>
      return;
 8005d44:	e0fe      	b.n	8005f44 <HAL_UART_IRQHandler+0x798>
 8005d46:	bf00      	nop
 8005d48:	40020010 	.word	0x40020010
 8005d4c:	40020028 	.word	0x40020028
 8005d50:	40020040 	.word	0x40020040
 8005d54:	40020058 	.word	0x40020058
 8005d58:	40020070 	.word	0x40020070
 8005d5c:	40020088 	.word	0x40020088
 8005d60:	400200a0 	.word	0x400200a0
 8005d64:	400200b8 	.word	0x400200b8
 8005d68:	40020410 	.word	0x40020410
 8005d6c:	40020428 	.word	0x40020428
 8005d70:	40020440 	.word	0x40020440
 8005d74:	40020458 	.word	0x40020458
 8005d78:	40020470 	.word	0x40020470
 8005d7c:	40020488 	.word	0x40020488
 8005d80:	400204a0 	.word	0x400204a0
 8005d84:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	1ad3      	subs	r3, r2, r3
 8005d98:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	f000 80cf 	beq.w	8005f48 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8005daa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	f000 80ca 	beq.w	8005f48 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dbc:	e853 3f00 	ldrex	r3, [r3]
 8005dc0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005dc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dc4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005dc8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005dd6:	647b      	str	r3, [r7, #68]	@ 0x44
 8005dd8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dda:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005ddc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005dde:	e841 2300 	strex	r3, r2, [r1]
 8005de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005de4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d1e4      	bne.n	8005db4 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	3308      	adds	r3, #8
 8005df0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df4:	e853 3f00 	ldrex	r3, [r3]
 8005df8:	623b      	str	r3, [r7, #32]
   return(result);
 8005dfa:	6a3a      	ldr	r2, [r7, #32]
 8005dfc:	4b55      	ldr	r3, [pc, #340]	@ (8005f54 <HAL_UART_IRQHandler+0x7a8>)
 8005dfe:	4013      	ands	r3, r2
 8005e00:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	3308      	adds	r3, #8
 8005e0a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005e0e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e12:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005e14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e16:	e841 2300 	strex	r3, r2, [r1]
 8005e1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d1e3      	bne.n	8005dea <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2220      	movs	r2, #32
 8005e26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	e853 3f00 	ldrex	r3, [r3]
 8005e42:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f023 0310 	bic.w	r3, r3, #16
 8005e4a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	461a      	mov	r2, r3
 8005e54:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005e58:	61fb      	str	r3, [r7, #28]
 8005e5a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e5c:	69b9      	ldr	r1, [r7, #24]
 8005e5e:	69fa      	ldr	r2, [r7, #28]
 8005e60:	e841 2300 	strex	r3, r2, [r1]
 8005e64:	617b      	str	r3, [r7, #20]
   return(result);
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d1e4      	bne.n	8005e36 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2202      	movs	r2, #2
 8005e70:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e72:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005e76:	4619      	mov	r1, r3
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 f881 	bl	8005f80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005e7e:	e063      	b.n	8005f48 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005e80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e84:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d00e      	beq.n	8005eaa <HAL_UART_IRQHandler+0x6fe>
 8005e8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e90:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d008      	beq.n	8005eaa <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005ea0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f001 f83d 	bl	8006f22 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005ea8:	e051      	b.n	8005f4e <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005eae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d014      	beq.n	8005ee0 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005eb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005eba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d105      	bne.n	8005ece <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005ec2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ec6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d008      	beq.n	8005ee0 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d03a      	beq.n	8005f4c <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	4798      	blx	r3
    }
    return;
 8005ede:	e035      	b.n	8005f4c <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005ee0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ee4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d009      	beq.n	8005f00 <HAL_UART_IRQHandler+0x754>
 8005eec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ef0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d003      	beq.n	8005f00 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f000 ffe7 	bl	8006ecc <UART_EndTransmit_IT>
    return;
 8005efe:	e026      	b.n	8005f4e <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005f00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f04:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d009      	beq.n	8005f20 <HAL_UART_IRQHandler+0x774>
 8005f0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f10:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d003      	beq.n	8005f20 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f001 f816 	bl	8006f4a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005f1e:	e016      	b.n	8005f4e <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005f20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f24:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d010      	beq.n	8005f4e <HAL_UART_IRQHandler+0x7a2>
 8005f2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	da0c      	bge.n	8005f4e <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f000 fffe 	bl	8006f36 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005f3a:	e008      	b.n	8005f4e <HAL_UART_IRQHandler+0x7a2>
      return;
 8005f3c:	bf00      	nop
 8005f3e:	e006      	b.n	8005f4e <HAL_UART_IRQHandler+0x7a2>
    return;
 8005f40:	bf00      	nop
 8005f42:	e004      	b.n	8005f4e <HAL_UART_IRQHandler+0x7a2>
      return;
 8005f44:	bf00      	nop
 8005f46:	e002      	b.n	8005f4e <HAL_UART_IRQHandler+0x7a2>
      return;
 8005f48:	bf00      	nop
 8005f4a:	e000      	b.n	8005f4e <HAL_UART_IRQHandler+0x7a2>
    return;
 8005f4c:	bf00      	nop
  }
}
 8005f4e:	37e8      	adds	r7, #232	@ 0xe8
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	effffffe 	.word	0xeffffffe

08005f58 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b083      	sub	sp, #12
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005f60:	bf00      	nop
 8005f62:	370c      	adds	r7, #12
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005f74:	bf00      	nop
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b083      	sub	sp, #12
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	460b      	mov	r3, r1
 8005f8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005f8c:	bf00      	nop
 8005f8e:	370c      	adds	r7, #12
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr

08005f98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f9c:	b092      	sub	sp, #72	@ 0x48
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	689a      	ldr	r2, [r3, #8]
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	691b      	ldr	r3, [r3, #16]
 8005fb0:	431a      	orrs	r2, r3
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	695b      	ldr	r3, [r3, #20]
 8005fb6:	431a      	orrs	r2, r3
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	69db      	ldr	r3, [r3, #28]
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	4bbe      	ldr	r3, [pc, #760]	@ (80062c0 <UART_SetConfig+0x328>)
 8005fc8:	4013      	ands	r3, r2
 8005fca:	697a      	ldr	r2, [r7, #20]
 8005fcc:	6812      	ldr	r2, [r2, #0]
 8005fce:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005fd0:	430b      	orrs	r3, r1
 8005fd2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	68da      	ldr	r2, [r3, #12]
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	430a      	orrs	r2, r1
 8005fe8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	699b      	ldr	r3, [r3, #24]
 8005fee:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4ab3      	ldr	r2, [pc, #716]	@ (80062c4 <UART_SetConfig+0x32c>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d004      	beq.n	8006004 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	6a1b      	ldr	r3, [r3, #32]
 8005ffe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006000:	4313      	orrs	r3, r2
 8006002:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	689a      	ldr	r2, [r3, #8]
 800600a:	4baf      	ldr	r3, [pc, #700]	@ (80062c8 <UART_SetConfig+0x330>)
 800600c:	4013      	ands	r3, r2
 800600e:	697a      	ldr	r2, [r7, #20]
 8006010:	6812      	ldr	r2, [r2, #0]
 8006012:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006014:	430b      	orrs	r3, r1
 8006016:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800601e:	f023 010f 	bic.w	r1, r3, #15
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	430a      	orrs	r2, r1
 800602c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4aa6      	ldr	r2, [pc, #664]	@ (80062cc <UART_SetConfig+0x334>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d177      	bne.n	8006128 <UART_SetConfig+0x190>
 8006038:	4ba5      	ldr	r3, [pc, #660]	@ (80062d0 <UART_SetConfig+0x338>)
 800603a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800603c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006040:	2b28      	cmp	r3, #40	@ 0x28
 8006042:	d86d      	bhi.n	8006120 <UART_SetConfig+0x188>
 8006044:	a201      	add	r2, pc, #4	@ (adr r2, 800604c <UART_SetConfig+0xb4>)
 8006046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800604a:	bf00      	nop
 800604c:	080060f1 	.word	0x080060f1
 8006050:	08006121 	.word	0x08006121
 8006054:	08006121 	.word	0x08006121
 8006058:	08006121 	.word	0x08006121
 800605c:	08006121 	.word	0x08006121
 8006060:	08006121 	.word	0x08006121
 8006064:	08006121 	.word	0x08006121
 8006068:	08006121 	.word	0x08006121
 800606c:	080060f9 	.word	0x080060f9
 8006070:	08006121 	.word	0x08006121
 8006074:	08006121 	.word	0x08006121
 8006078:	08006121 	.word	0x08006121
 800607c:	08006121 	.word	0x08006121
 8006080:	08006121 	.word	0x08006121
 8006084:	08006121 	.word	0x08006121
 8006088:	08006121 	.word	0x08006121
 800608c:	08006101 	.word	0x08006101
 8006090:	08006121 	.word	0x08006121
 8006094:	08006121 	.word	0x08006121
 8006098:	08006121 	.word	0x08006121
 800609c:	08006121 	.word	0x08006121
 80060a0:	08006121 	.word	0x08006121
 80060a4:	08006121 	.word	0x08006121
 80060a8:	08006121 	.word	0x08006121
 80060ac:	08006109 	.word	0x08006109
 80060b0:	08006121 	.word	0x08006121
 80060b4:	08006121 	.word	0x08006121
 80060b8:	08006121 	.word	0x08006121
 80060bc:	08006121 	.word	0x08006121
 80060c0:	08006121 	.word	0x08006121
 80060c4:	08006121 	.word	0x08006121
 80060c8:	08006121 	.word	0x08006121
 80060cc:	08006111 	.word	0x08006111
 80060d0:	08006121 	.word	0x08006121
 80060d4:	08006121 	.word	0x08006121
 80060d8:	08006121 	.word	0x08006121
 80060dc:	08006121 	.word	0x08006121
 80060e0:	08006121 	.word	0x08006121
 80060e4:	08006121 	.word	0x08006121
 80060e8:	08006121 	.word	0x08006121
 80060ec:	08006119 	.word	0x08006119
 80060f0:	2301      	movs	r3, #1
 80060f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060f6:	e222      	b.n	800653e <UART_SetConfig+0x5a6>
 80060f8:	2304      	movs	r3, #4
 80060fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060fe:	e21e      	b.n	800653e <UART_SetConfig+0x5a6>
 8006100:	2308      	movs	r3, #8
 8006102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006106:	e21a      	b.n	800653e <UART_SetConfig+0x5a6>
 8006108:	2310      	movs	r3, #16
 800610a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800610e:	e216      	b.n	800653e <UART_SetConfig+0x5a6>
 8006110:	2320      	movs	r3, #32
 8006112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006116:	e212      	b.n	800653e <UART_SetConfig+0x5a6>
 8006118:	2340      	movs	r3, #64	@ 0x40
 800611a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800611e:	e20e      	b.n	800653e <UART_SetConfig+0x5a6>
 8006120:	2380      	movs	r3, #128	@ 0x80
 8006122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006126:	e20a      	b.n	800653e <UART_SetConfig+0x5a6>
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a69      	ldr	r2, [pc, #420]	@ (80062d4 <UART_SetConfig+0x33c>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d130      	bne.n	8006194 <UART_SetConfig+0x1fc>
 8006132:	4b67      	ldr	r3, [pc, #412]	@ (80062d0 <UART_SetConfig+0x338>)
 8006134:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006136:	f003 0307 	and.w	r3, r3, #7
 800613a:	2b05      	cmp	r3, #5
 800613c:	d826      	bhi.n	800618c <UART_SetConfig+0x1f4>
 800613e:	a201      	add	r2, pc, #4	@ (adr r2, 8006144 <UART_SetConfig+0x1ac>)
 8006140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006144:	0800615d 	.word	0x0800615d
 8006148:	08006165 	.word	0x08006165
 800614c:	0800616d 	.word	0x0800616d
 8006150:	08006175 	.word	0x08006175
 8006154:	0800617d 	.word	0x0800617d
 8006158:	08006185 	.word	0x08006185
 800615c:	2300      	movs	r3, #0
 800615e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006162:	e1ec      	b.n	800653e <UART_SetConfig+0x5a6>
 8006164:	2304      	movs	r3, #4
 8006166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800616a:	e1e8      	b.n	800653e <UART_SetConfig+0x5a6>
 800616c:	2308      	movs	r3, #8
 800616e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006172:	e1e4      	b.n	800653e <UART_SetConfig+0x5a6>
 8006174:	2310      	movs	r3, #16
 8006176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800617a:	e1e0      	b.n	800653e <UART_SetConfig+0x5a6>
 800617c:	2320      	movs	r3, #32
 800617e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006182:	e1dc      	b.n	800653e <UART_SetConfig+0x5a6>
 8006184:	2340      	movs	r3, #64	@ 0x40
 8006186:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800618a:	e1d8      	b.n	800653e <UART_SetConfig+0x5a6>
 800618c:	2380      	movs	r3, #128	@ 0x80
 800618e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006192:	e1d4      	b.n	800653e <UART_SetConfig+0x5a6>
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a4f      	ldr	r2, [pc, #316]	@ (80062d8 <UART_SetConfig+0x340>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d130      	bne.n	8006200 <UART_SetConfig+0x268>
 800619e:	4b4c      	ldr	r3, [pc, #304]	@ (80062d0 <UART_SetConfig+0x338>)
 80061a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061a2:	f003 0307 	and.w	r3, r3, #7
 80061a6:	2b05      	cmp	r3, #5
 80061a8:	d826      	bhi.n	80061f8 <UART_SetConfig+0x260>
 80061aa:	a201      	add	r2, pc, #4	@ (adr r2, 80061b0 <UART_SetConfig+0x218>)
 80061ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061b0:	080061c9 	.word	0x080061c9
 80061b4:	080061d1 	.word	0x080061d1
 80061b8:	080061d9 	.word	0x080061d9
 80061bc:	080061e1 	.word	0x080061e1
 80061c0:	080061e9 	.word	0x080061e9
 80061c4:	080061f1 	.word	0x080061f1
 80061c8:	2300      	movs	r3, #0
 80061ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061ce:	e1b6      	b.n	800653e <UART_SetConfig+0x5a6>
 80061d0:	2304      	movs	r3, #4
 80061d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061d6:	e1b2      	b.n	800653e <UART_SetConfig+0x5a6>
 80061d8:	2308      	movs	r3, #8
 80061da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061de:	e1ae      	b.n	800653e <UART_SetConfig+0x5a6>
 80061e0:	2310      	movs	r3, #16
 80061e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061e6:	e1aa      	b.n	800653e <UART_SetConfig+0x5a6>
 80061e8:	2320      	movs	r3, #32
 80061ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061ee:	e1a6      	b.n	800653e <UART_SetConfig+0x5a6>
 80061f0:	2340      	movs	r3, #64	@ 0x40
 80061f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061f6:	e1a2      	b.n	800653e <UART_SetConfig+0x5a6>
 80061f8:	2380      	movs	r3, #128	@ 0x80
 80061fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061fe:	e19e      	b.n	800653e <UART_SetConfig+0x5a6>
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a35      	ldr	r2, [pc, #212]	@ (80062dc <UART_SetConfig+0x344>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d130      	bne.n	800626c <UART_SetConfig+0x2d4>
 800620a:	4b31      	ldr	r3, [pc, #196]	@ (80062d0 <UART_SetConfig+0x338>)
 800620c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800620e:	f003 0307 	and.w	r3, r3, #7
 8006212:	2b05      	cmp	r3, #5
 8006214:	d826      	bhi.n	8006264 <UART_SetConfig+0x2cc>
 8006216:	a201      	add	r2, pc, #4	@ (adr r2, 800621c <UART_SetConfig+0x284>)
 8006218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800621c:	08006235 	.word	0x08006235
 8006220:	0800623d 	.word	0x0800623d
 8006224:	08006245 	.word	0x08006245
 8006228:	0800624d 	.word	0x0800624d
 800622c:	08006255 	.word	0x08006255
 8006230:	0800625d 	.word	0x0800625d
 8006234:	2300      	movs	r3, #0
 8006236:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800623a:	e180      	b.n	800653e <UART_SetConfig+0x5a6>
 800623c:	2304      	movs	r3, #4
 800623e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006242:	e17c      	b.n	800653e <UART_SetConfig+0x5a6>
 8006244:	2308      	movs	r3, #8
 8006246:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800624a:	e178      	b.n	800653e <UART_SetConfig+0x5a6>
 800624c:	2310      	movs	r3, #16
 800624e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006252:	e174      	b.n	800653e <UART_SetConfig+0x5a6>
 8006254:	2320      	movs	r3, #32
 8006256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800625a:	e170      	b.n	800653e <UART_SetConfig+0x5a6>
 800625c:	2340      	movs	r3, #64	@ 0x40
 800625e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006262:	e16c      	b.n	800653e <UART_SetConfig+0x5a6>
 8006264:	2380      	movs	r3, #128	@ 0x80
 8006266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800626a:	e168      	b.n	800653e <UART_SetConfig+0x5a6>
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a1b      	ldr	r2, [pc, #108]	@ (80062e0 <UART_SetConfig+0x348>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d142      	bne.n	80062fc <UART_SetConfig+0x364>
 8006276:	4b16      	ldr	r3, [pc, #88]	@ (80062d0 <UART_SetConfig+0x338>)
 8006278:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800627a:	f003 0307 	and.w	r3, r3, #7
 800627e:	2b05      	cmp	r3, #5
 8006280:	d838      	bhi.n	80062f4 <UART_SetConfig+0x35c>
 8006282:	a201      	add	r2, pc, #4	@ (adr r2, 8006288 <UART_SetConfig+0x2f0>)
 8006284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006288:	080062a1 	.word	0x080062a1
 800628c:	080062a9 	.word	0x080062a9
 8006290:	080062b1 	.word	0x080062b1
 8006294:	080062b9 	.word	0x080062b9
 8006298:	080062e5 	.word	0x080062e5
 800629c:	080062ed 	.word	0x080062ed
 80062a0:	2300      	movs	r3, #0
 80062a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062a6:	e14a      	b.n	800653e <UART_SetConfig+0x5a6>
 80062a8:	2304      	movs	r3, #4
 80062aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062ae:	e146      	b.n	800653e <UART_SetConfig+0x5a6>
 80062b0:	2308      	movs	r3, #8
 80062b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062b6:	e142      	b.n	800653e <UART_SetConfig+0x5a6>
 80062b8:	2310      	movs	r3, #16
 80062ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062be:	e13e      	b.n	800653e <UART_SetConfig+0x5a6>
 80062c0:	cfff69f3 	.word	0xcfff69f3
 80062c4:	58000c00 	.word	0x58000c00
 80062c8:	11fff4ff 	.word	0x11fff4ff
 80062cc:	40011000 	.word	0x40011000
 80062d0:	58024400 	.word	0x58024400
 80062d4:	40004400 	.word	0x40004400
 80062d8:	40004800 	.word	0x40004800
 80062dc:	40004c00 	.word	0x40004c00
 80062e0:	40005000 	.word	0x40005000
 80062e4:	2320      	movs	r3, #32
 80062e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062ea:	e128      	b.n	800653e <UART_SetConfig+0x5a6>
 80062ec:	2340      	movs	r3, #64	@ 0x40
 80062ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062f2:	e124      	b.n	800653e <UART_SetConfig+0x5a6>
 80062f4:	2380      	movs	r3, #128	@ 0x80
 80062f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062fa:	e120      	b.n	800653e <UART_SetConfig+0x5a6>
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4acb      	ldr	r2, [pc, #812]	@ (8006630 <UART_SetConfig+0x698>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d176      	bne.n	80063f4 <UART_SetConfig+0x45c>
 8006306:	4bcb      	ldr	r3, [pc, #812]	@ (8006634 <UART_SetConfig+0x69c>)
 8006308:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800630a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800630e:	2b28      	cmp	r3, #40	@ 0x28
 8006310:	d86c      	bhi.n	80063ec <UART_SetConfig+0x454>
 8006312:	a201      	add	r2, pc, #4	@ (adr r2, 8006318 <UART_SetConfig+0x380>)
 8006314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006318:	080063bd 	.word	0x080063bd
 800631c:	080063ed 	.word	0x080063ed
 8006320:	080063ed 	.word	0x080063ed
 8006324:	080063ed 	.word	0x080063ed
 8006328:	080063ed 	.word	0x080063ed
 800632c:	080063ed 	.word	0x080063ed
 8006330:	080063ed 	.word	0x080063ed
 8006334:	080063ed 	.word	0x080063ed
 8006338:	080063c5 	.word	0x080063c5
 800633c:	080063ed 	.word	0x080063ed
 8006340:	080063ed 	.word	0x080063ed
 8006344:	080063ed 	.word	0x080063ed
 8006348:	080063ed 	.word	0x080063ed
 800634c:	080063ed 	.word	0x080063ed
 8006350:	080063ed 	.word	0x080063ed
 8006354:	080063ed 	.word	0x080063ed
 8006358:	080063cd 	.word	0x080063cd
 800635c:	080063ed 	.word	0x080063ed
 8006360:	080063ed 	.word	0x080063ed
 8006364:	080063ed 	.word	0x080063ed
 8006368:	080063ed 	.word	0x080063ed
 800636c:	080063ed 	.word	0x080063ed
 8006370:	080063ed 	.word	0x080063ed
 8006374:	080063ed 	.word	0x080063ed
 8006378:	080063d5 	.word	0x080063d5
 800637c:	080063ed 	.word	0x080063ed
 8006380:	080063ed 	.word	0x080063ed
 8006384:	080063ed 	.word	0x080063ed
 8006388:	080063ed 	.word	0x080063ed
 800638c:	080063ed 	.word	0x080063ed
 8006390:	080063ed 	.word	0x080063ed
 8006394:	080063ed 	.word	0x080063ed
 8006398:	080063dd 	.word	0x080063dd
 800639c:	080063ed 	.word	0x080063ed
 80063a0:	080063ed 	.word	0x080063ed
 80063a4:	080063ed 	.word	0x080063ed
 80063a8:	080063ed 	.word	0x080063ed
 80063ac:	080063ed 	.word	0x080063ed
 80063b0:	080063ed 	.word	0x080063ed
 80063b4:	080063ed 	.word	0x080063ed
 80063b8:	080063e5 	.word	0x080063e5
 80063bc:	2301      	movs	r3, #1
 80063be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063c2:	e0bc      	b.n	800653e <UART_SetConfig+0x5a6>
 80063c4:	2304      	movs	r3, #4
 80063c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063ca:	e0b8      	b.n	800653e <UART_SetConfig+0x5a6>
 80063cc:	2308      	movs	r3, #8
 80063ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063d2:	e0b4      	b.n	800653e <UART_SetConfig+0x5a6>
 80063d4:	2310      	movs	r3, #16
 80063d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063da:	e0b0      	b.n	800653e <UART_SetConfig+0x5a6>
 80063dc:	2320      	movs	r3, #32
 80063de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063e2:	e0ac      	b.n	800653e <UART_SetConfig+0x5a6>
 80063e4:	2340      	movs	r3, #64	@ 0x40
 80063e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063ea:	e0a8      	b.n	800653e <UART_SetConfig+0x5a6>
 80063ec:	2380      	movs	r3, #128	@ 0x80
 80063ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063f2:	e0a4      	b.n	800653e <UART_SetConfig+0x5a6>
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a8f      	ldr	r2, [pc, #572]	@ (8006638 <UART_SetConfig+0x6a0>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d130      	bne.n	8006460 <UART_SetConfig+0x4c8>
 80063fe:	4b8d      	ldr	r3, [pc, #564]	@ (8006634 <UART_SetConfig+0x69c>)
 8006400:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006402:	f003 0307 	and.w	r3, r3, #7
 8006406:	2b05      	cmp	r3, #5
 8006408:	d826      	bhi.n	8006458 <UART_SetConfig+0x4c0>
 800640a:	a201      	add	r2, pc, #4	@ (adr r2, 8006410 <UART_SetConfig+0x478>)
 800640c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006410:	08006429 	.word	0x08006429
 8006414:	08006431 	.word	0x08006431
 8006418:	08006439 	.word	0x08006439
 800641c:	08006441 	.word	0x08006441
 8006420:	08006449 	.word	0x08006449
 8006424:	08006451 	.word	0x08006451
 8006428:	2300      	movs	r3, #0
 800642a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800642e:	e086      	b.n	800653e <UART_SetConfig+0x5a6>
 8006430:	2304      	movs	r3, #4
 8006432:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006436:	e082      	b.n	800653e <UART_SetConfig+0x5a6>
 8006438:	2308      	movs	r3, #8
 800643a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800643e:	e07e      	b.n	800653e <UART_SetConfig+0x5a6>
 8006440:	2310      	movs	r3, #16
 8006442:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006446:	e07a      	b.n	800653e <UART_SetConfig+0x5a6>
 8006448:	2320      	movs	r3, #32
 800644a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800644e:	e076      	b.n	800653e <UART_SetConfig+0x5a6>
 8006450:	2340      	movs	r3, #64	@ 0x40
 8006452:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006456:	e072      	b.n	800653e <UART_SetConfig+0x5a6>
 8006458:	2380      	movs	r3, #128	@ 0x80
 800645a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800645e:	e06e      	b.n	800653e <UART_SetConfig+0x5a6>
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a75      	ldr	r2, [pc, #468]	@ (800663c <UART_SetConfig+0x6a4>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d130      	bne.n	80064cc <UART_SetConfig+0x534>
 800646a:	4b72      	ldr	r3, [pc, #456]	@ (8006634 <UART_SetConfig+0x69c>)
 800646c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800646e:	f003 0307 	and.w	r3, r3, #7
 8006472:	2b05      	cmp	r3, #5
 8006474:	d826      	bhi.n	80064c4 <UART_SetConfig+0x52c>
 8006476:	a201      	add	r2, pc, #4	@ (adr r2, 800647c <UART_SetConfig+0x4e4>)
 8006478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800647c:	08006495 	.word	0x08006495
 8006480:	0800649d 	.word	0x0800649d
 8006484:	080064a5 	.word	0x080064a5
 8006488:	080064ad 	.word	0x080064ad
 800648c:	080064b5 	.word	0x080064b5
 8006490:	080064bd 	.word	0x080064bd
 8006494:	2300      	movs	r3, #0
 8006496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800649a:	e050      	b.n	800653e <UART_SetConfig+0x5a6>
 800649c:	2304      	movs	r3, #4
 800649e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064a2:	e04c      	b.n	800653e <UART_SetConfig+0x5a6>
 80064a4:	2308      	movs	r3, #8
 80064a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064aa:	e048      	b.n	800653e <UART_SetConfig+0x5a6>
 80064ac:	2310      	movs	r3, #16
 80064ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064b2:	e044      	b.n	800653e <UART_SetConfig+0x5a6>
 80064b4:	2320      	movs	r3, #32
 80064b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064ba:	e040      	b.n	800653e <UART_SetConfig+0x5a6>
 80064bc:	2340      	movs	r3, #64	@ 0x40
 80064be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064c2:	e03c      	b.n	800653e <UART_SetConfig+0x5a6>
 80064c4:	2380      	movs	r3, #128	@ 0x80
 80064c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064ca:	e038      	b.n	800653e <UART_SetConfig+0x5a6>
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a5b      	ldr	r2, [pc, #364]	@ (8006640 <UART_SetConfig+0x6a8>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d130      	bne.n	8006538 <UART_SetConfig+0x5a0>
 80064d6:	4b57      	ldr	r3, [pc, #348]	@ (8006634 <UART_SetConfig+0x69c>)
 80064d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064da:	f003 0307 	and.w	r3, r3, #7
 80064de:	2b05      	cmp	r3, #5
 80064e0:	d826      	bhi.n	8006530 <UART_SetConfig+0x598>
 80064e2:	a201      	add	r2, pc, #4	@ (adr r2, 80064e8 <UART_SetConfig+0x550>)
 80064e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064e8:	08006501 	.word	0x08006501
 80064ec:	08006509 	.word	0x08006509
 80064f0:	08006511 	.word	0x08006511
 80064f4:	08006519 	.word	0x08006519
 80064f8:	08006521 	.word	0x08006521
 80064fc:	08006529 	.word	0x08006529
 8006500:	2302      	movs	r3, #2
 8006502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006506:	e01a      	b.n	800653e <UART_SetConfig+0x5a6>
 8006508:	2304      	movs	r3, #4
 800650a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800650e:	e016      	b.n	800653e <UART_SetConfig+0x5a6>
 8006510:	2308      	movs	r3, #8
 8006512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006516:	e012      	b.n	800653e <UART_SetConfig+0x5a6>
 8006518:	2310      	movs	r3, #16
 800651a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800651e:	e00e      	b.n	800653e <UART_SetConfig+0x5a6>
 8006520:	2320      	movs	r3, #32
 8006522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006526:	e00a      	b.n	800653e <UART_SetConfig+0x5a6>
 8006528:	2340      	movs	r3, #64	@ 0x40
 800652a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800652e:	e006      	b.n	800653e <UART_SetConfig+0x5a6>
 8006530:	2380      	movs	r3, #128	@ 0x80
 8006532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006536:	e002      	b.n	800653e <UART_SetConfig+0x5a6>
 8006538:	2380      	movs	r3, #128	@ 0x80
 800653a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a3f      	ldr	r2, [pc, #252]	@ (8006640 <UART_SetConfig+0x6a8>)
 8006544:	4293      	cmp	r3, r2
 8006546:	f040 80f8 	bne.w	800673a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800654a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800654e:	2b20      	cmp	r3, #32
 8006550:	dc46      	bgt.n	80065e0 <UART_SetConfig+0x648>
 8006552:	2b02      	cmp	r3, #2
 8006554:	f2c0 8082 	blt.w	800665c <UART_SetConfig+0x6c4>
 8006558:	3b02      	subs	r3, #2
 800655a:	2b1e      	cmp	r3, #30
 800655c:	d87e      	bhi.n	800665c <UART_SetConfig+0x6c4>
 800655e:	a201      	add	r2, pc, #4	@ (adr r2, 8006564 <UART_SetConfig+0x5cc>)
 8006560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006564:	080065e7 	.word	0x080065e7
 8006568:	0800665d 	.word	0x0800665d
 800656c:	080065ef 	.word	0x080065ef
 8006570:	0800665d 	.word	0x0800665d
 8006574:	0800665d 	.word	0x0800665d
 8006578:	0800665d 	.word	0x0800665d
 800657c:	080065ff 	.word	0x080065ff
 8006580:	0800665d 	.word	0x0800665d
 8006584:	0800665d 	.word	0x0800665d
 8006588:	0800665d 	.word	0x0800665d
 800658c:	0800665d 	.word	0x0800665d
 8006590:	0800665d 	.word	0x0800665d
 8006594:	0800665d 	.word	0x0800665d
 8006598:	0800665d 	.word	0x0800665d
 800659c:	0800660f 	.word	0x0800660f
 80065a0:	0800665d 	.word	0x0800665d
 80065a4:	0800665d 	.word	0x0800665d
 80065a8:	0800665d 	.word	0x0800665d
 80065ac:	0800665d 	.word	0x0800665d
 80065b0:	0800665d 	.word	0x0800665d
 80065b4:	0800665d 	.word	0x0800665d
 80065b8:	0800665d 	.word	0x0800665d
 80065bc:	0800665d 	.word	0x0800665d
 80065c0:	0800665d 	.word	0x0800665d
 80065c4:	0800665d 	.word	0x0800665d
 80065c8:	0800665d 	.word	0x0800665d
 80065cc:	0800665d 	.word	0x0800665d
 80065d0:	0800665d 	.word	0x0800665d
 80065d4:	0800665d 	.word	0x0800665d
 80065d8:	0800665d 	.word	0x0800665d
 80065dc:	0800664f 	.word	0x0800664f
 80065e0:	2b40      	cmp	r3, #64	@ 0x40
 80065e2:	d037      	beq.n	8006654 <UART_SetConfig+0x6bc>
 80065e4:	e03a      	b.n	800665c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80065e6:	f7fe f88b 	bl	8004700 <HAL_RCCEx_GetD3PCLK1Freq>
 80065ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80065ec:	e03c      	b.n	8006668 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80065f2:	4618      	mov	r0, r3
 80065f4:	f7fe f89a 	bl	800472c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80065f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065fc:	e034      	b.n	8006668 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065fe:	f107 0318 	add.w	r3, r7, #24
 8006602:	4618      	mov	r0, r3
 8006604:	f7fe f9e6 	bl	80049d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006608:	69fb      	ldr	r3, [r7, #28]
 800660a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800660c:	e02c      	b.n	8006668 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800660e:	4b09      	ldr	r3, [pc, #36]	@ (8006634 <UART_SetConfig+0x69c>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 0320 	and.w	r3, r3, #32
 8006616:	2b00      	cmp	r3, #0
 8006618:	d016      	beq.n	8006648 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800661a:	4b06      	ldr	r3, [pc, #24]	@ (8006634 <UART_SetConfig+0x69c>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	08db      	lsrs	r3, r3, #3
 8006620:	f003 0303 	and.w	r3, r3, #3
 8006624:	4a07      	ldr	r2, [pc, #28]	@ (8006644 <UART_SetConfig+0x6ac>)
 8006626:	fa22 f303 	lsr.w	r3, r2, r3
 800662a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800662c:	e01c      	b.n	8006668 <UART_SetConfig+0x6d0>
 800662e:	bf00      	nop
 8006630:	40011400 	.word	0x40011400
 8006634:	58024400 	.word	0x58024400
 8006638:	40007800 	.word	0x40007800
 800663c:	40007c00 	.word	0x40007c00
 8006640:	58000c00 	.word	0x58000c00
 8006644:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006648:	4b9d      	ldr	r3, [pc, #628]	@ (80068c0 <UART_SetConfig+0x928>)
 800664a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800664c:	e00c      	b.n	8006668 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800664e:	4b9d      	ldr	r3, [pc, #628]	@ (80068c4 <UART_SetConfig+0x92c>)
 8006650:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006652:	e009      	b.n	8006668 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006654:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006658:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800665a:	e005      	b.n	8006668 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800665c:	2300      	movs	r3, #0
 800665e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006666:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006668:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800666a:	2b00      	cmp	r3, #0
 800666c:	f000 81de 	beq.w	8006a2c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006674:	4a94      	ldr	r2, [pc, #592]	@ (80068c8 <UART_SetConfig+0x930>)
 8006676:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800667a:	461a      	mov	r2, r3
 800667c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800667e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006682:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	685a      	ldr	r2, [r3, #4]
 8006688:	4613      	mov	r3, r2
 800668a:	005b      	lsls	r3, r3, #1
 800668c:	4413      	add	r3, r2
 800668e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006690:	429a      	cmp	r2, r3
 8006692:	d305      	bcc.n	80066a0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800669a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800669c:	429a      	cmp	r2, r3
 800669e:	d903      	bls.n	80066a8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80066a0:	2301      	movs	r3, #1
 80066a2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80066a6:	e1c1      	b.n	8006a2c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066aa:	2200      	movs	r2, #0
 80066ac:	60bb      	str	r3, [r7, #8]
 80066ae:	60fa      	str	r2, [r7, #12]
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066b4:	4a84      	ldr	r2, [pc, #528]	@ (80068c8 <UART_SetConfig+0x930>)
 80066b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	2200      	movs	r2, #0
 80066be:	603b      	str	r3, [r7, #0]
 80066c0:	607a      	str	r2, [r7, #4]
 80066c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80066ca:	f7f9 fe05 	bl	80002d8 <__aeabi_uldivmod>
 80066ce:	4602      	mov	r2, r0
 80066d0:	460b      	mov	r3, r1
 80066d2:	4610      	mov	r0, r2
 80066d4:	4619      	mov	r1, r3
 80066d6:	f04f 0200 	mov.w	r2, #0
 80066da:	f04f 0300 	mov.w	r3, #0
 80066de:	020b      	lsls	r3, r1, #8
 80066e0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80066e4:	0202      	lsls	r2, r0, #8
 80066e6:	6979      	ldr	r1, [r7, #20]
 80066e8:	6849      	ldr	r1, [r1, #4]
 80066ea:	0849      	lsrs	r1, r1, #1
 80066ec:	2000      	movs	r0, #0
 80066ee:	460c      	mov	r4, r1
 80066f0:	4605      	mov	r5, r0
 80066f2:	eb12 0804 	adds.w	r8, r2, r4
 80066f6:	eb43 0905 	adc.w	r9, r3, r5
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	2200      	movs	r2, #0
 8006700:	469a      	mov	sl, r3
 8006702:	4693      	mov	fp, r2
 8006704:	4652      	mov	r2, sl
 8006706:	465b      	mov	r3, fp
 8006708:	4640      	mov	r0, r8
 800670a:	4649      	mov	r1, r9
 800670c:	f7f9 fde4 	bl	80002d8 <__aeabi_uldivmod>
 8006710:	4602      	mov	r2, r0
 8006712:	460b      	mov	r3, r1
 8006714:	4613      	mov	r3, r2
 8006716:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800671a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800671e:	d308      	bcc.n	8006732 <UART_SetConfig+0x79a>
 8006720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006722:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006726:	d204      	bcs.n	8006732 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800672e:	60da      	str	r2, [r3, #12]
 8006730:	e17c      	b.n	8006a2c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006738:	e178      	b.n	8006a2c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	69db      	ldr	r3, [r3, #28]
 800673e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006742:	f040 80c5 	bne.w	80068d0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006746:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800674a:	2b20      	cmp	r3, #32
 800674c:	dc48      	bgt.n	80067e0 <UART_SetConfig+0x848>
 800674e:	2b00      	cmp	r3, #0
 8006750:	db7b      	blt.n	800684a <UART_SetConfig+0x8b2>
 8006752:	2b20      	cmp	r3, #32
 8006754:	d879      	bhi.n	800684a <UART_SetConfig+0x8b2>
 8006756:	a201      	add	r2, pc, #4	@ (adr r2, 800675c <UART_SetConfig+0x7c4>)
 8006758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800675c:	080067e7 	.word	0x080067e7
 8006760:	080067ef 	.word	0x080067ef
 8006764:	0800684b 	.word	0x0800684b
 8006768:	0800684b 	.word	0x0800684b
 800676c:	080067f7 	.word	0x080067f7
 8006770:	0800684b 	.word	0x0800684b
 8006774:	0800684b 	.word	0x0800684b
 8006778:	0800684b 	.word	0x0800684b
 800677c:	08006807 	.word	0x08006807
 8006780:	0800684b 	.word	0x0800684b
 8006784:	0800684b 	.word	0x0800684b
 8006788:	0800684b 	.word	0x0800684b
 800678c:	0800684b 	.word	0x0800684b
 8006790:	0800684b 	.word	0x0800684b
 8006794:	0800684b 	.word	0x0800684b
 8006798:	0800684b 	.word	0x0800684b
 800679c:	08006817 	.word	0x08006817
 80067a0:	0800684b 	.word	0x0800684b
 80067a4:	0800684b 	.word	0x0800684b
 80067a8:	0800684b 	.word	0x0800684b
 80067ac:	0800684b 	.word	0x0800684b
 80067b0:	0800684b 	.word	0x0800684b
 80067b4:	0800684b 	.word	0x0800684b
 80067b8:	0800684b 	.word	0x0800684b
 80067bc:	0800684b 	.word	0x0800684b
 80067c0:	0800684b 	.word	0x0800684b
 80067c4:	0800684b 	.word	0x0800684b
 80067c8:	0800684b 	.word	0x0800684b
 80067cc:	0800684b 	.word	0x0800684b
 80067d0:	0800684b 	.word	0x0800684b
 80067d4:	0800684b 	.word	0x0800684b
 80067d8:	0800684b 	.word	0x0800684b
 80067dc:	0800683d 	.word	0x0800683d
 80067e0:	2b40      	cmp	r3, #64	@ 0x40
 80067e2:	d02e      	beq.n	8006842 <UART_SetConfig+0x8aa>
 80067e4:	e031      	b.n	800684a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067e6:	f7fc fd55 	bl	8003294 <HAL_RCC_GetPCLK1Freq>
 80067ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80067ec:	e033      	b.n	8006856 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067ee:	f7fc fd67 	bl	80032c0 <HAL_RCC_GetPCLK2Freq>
 80067f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80067f4:	e02f      	b.n	8006856 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80067fa:	4618      	mov	r0, r3
 80067fc:	f7fd ff96 	bl	800472c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006802:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006804:	e027      	b.n	8006856 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006806:	f107 0318 	add.w	r3, r7, #24
 800680a:	4618      	mov	r0, r3
 800680c:	f7fe f8e2 	bl	80049d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006810:	69fb      	ldr	r3, [r7, #28]
 8006812:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006814:	e01f      	b.n	8006856 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006816:	4b2d      	ldr	r3, [pc, #180]	@ (80068cc <UART_SetConfig+0x934>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f003 0320 	and.w	r3, r3, #32
 800681e:	2b00      	cmp	r3, #0
 8006820:	d009      	beq.n	8006836 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006822:	4b2a      	ldr	r3, [pc, #168]	@ (80068cc <UART_SetConfig+0x934>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	08db      	lsrs	r3, r3, #3
 8006828:	f003 0303 	and.w	r3, r3, #3
 800682c:	4a24      	ldr	r2, [pc, #144]	@ (80068c0 <UART_SetConfig+0x928>)
 800682e:	fa22 f303 	lsr.w	r3, r2, r3
 8006832:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006834:	e00f      	b.n	8006856 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006836:	4b22      	ldr	r3, [pc, #136]	@ (80068c0 <UART_SetConfig+0x928>)
 8006838:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800683a:	e00c      	b.n	8006856 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800683c:	4b21      	ldr	r3, [pc, #132]	@ (80068c4 <UART_SetConfig+0x92c>)
 800683e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006840:	e009      	b.n	8006856 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006842:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006846:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006848:	e005      	b.n	8006856 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800684a:	2300      	movs	r3, #0
 800684c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006854:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006856:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006858:	2b00      	cmp	r3, #0
 800685a:	f000 80e7 	beq.w	8006a2c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006862:	4a19      	ldr	r2, [pc, #100]	@ (80068c8 <UART_SetConfig+0x930>)
 8006864:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006868:	461a      	mov	r2, r3
 800686a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800686c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006870:	005a      	lsls	r2, r3, #1
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	085b      	lsrs	r3, r3, #1
 8006878:	441a      	add	r2, r3
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006882:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006886:	2b0f      	cmp	r3, #15
 8006888:	d916      	bls.n	80068b8 <UART_SetConfig+0x920>
 800688a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800688c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006890:	d212      	bcs.n	80068b8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006894:	b29b      	uxth	r3, r3
 8006896:	f023 030f 	bic.w	r3, r3, #15
 800689a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800689c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800689e:	085b      	lsrs	r3, r3, #1
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	f003 0307 	and.w	r3, r3, #7
 80068a6:	b29a      	uxth	r2, r3
 80068a8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80068aa:	4313      	orrs	r3, r2
 80068ac:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80068b4:	60da      	str	r2, [r3, #12]
 80068b6:	e0b9      	b.n	8006a2c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80068be:	e0b5      	b.n	8006a2c <UART_SetConfig+0xa94>
 80068c0:	03d09000 	.word	0x03d09000
 80068c4:	003d0900 	.word	0x003d0900
 80068c8:	08007b54 	.word	0x08007b54
 80068cc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80068d0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80068d4:	2b20      	cmp	r3, #32
 80068d6:	dc49      	bgt.n	800696c <UART_SetConfig+0x9d4>
 80068d8:	2b00      	cmp	r3, #0
 80068da:	db7c      	blt.n	80069d6 <UART_SetConfig+0xa3e>
 80068dc:	2b20      	cmp	r3, #32
 80068de:	d87a      	bhi.n	80069d6 <UART_SetConfig+0xa3e>
 80068e0:	a201      	add	r2, pc, #4	@ (adr r2, 80068e8 <UART_SetConfig+0x950>)
 80068e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068e6:	bf00      	nop
 80068e8:	08006973 	.word	0x08006973
 80068ec:	0800697b 	.word	0x0800697b
 80068f0:	080069d7 	.word	0x080069d7
 80068f4:	080069d7 	.word	0x080069d7
 80068f8:	08006983 	.word	0x08006983
 80068fc:	080069d7 	.word	0x080069d7
 8006900:	080069d7 	.word	0x080069d7
 8006904:	080069d7 	.word	0x080069d7
 8006908:	08006993 	.word	0x08006993
 800690c:	080069d7 	.word	0x080069d7
 8006910:	080069d7 	.word	0x080069d7
 8006914:	080069d7 	.word	0x080069d7
 8006918:	080069d7 	.word	0x080069d7
 800691c:	080069d7 	.word	0x080069d7
 8006920:	080069d7 	.word	0x080069d7
 8006924:	080069d7 	.word	0x080069d7
 8006928:	080069a3 	.word	0x080069a3
 800692c:	080069d7 	.word	0x080069d7
 8006930:	080069d7 	.word	0x080069d7
 8006934:	080069d7 	.word	0x080069d7
 8006938:	080069d7 	.word	0x080069d7
 800693c:	080069d7 	.word	0x080069d7
 8006940:	080069d7 	.word	0x080069d7
 8006944:	080069d7 	.word	0x080069d7
 8006948:	080069d7 	.word	0x080069d7
 800694c:	080069d7 	.word	0x080069d7
 8006950:	080069d7 	.word	0x080069d7
 8006954:	080069d7 	.word	0x080069d7
 8006958:	080069d7 	.word	0x080069d7
 800695c:	080069d7 	.word	0x080069d7
 8006960:	080069d7 	.word	0x080069d7
 8006964:	080069d7 	.word	0x080069d7
 8006968:	080069c9 	.word	0x080069c9
 800696c:	2b40      	cmp	r3, #64	@ 0x40
 800696e:	d02e      	beq.n	80069ce <UART_SetConfig+0xa36>
 8006970:	e031      	b.n	80069d6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006972:	f7fc fc8f 	bl	8003294 <HAL_RCC_GetPCLK1Freq>
 8006976:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006978:	e033      	b.n	80069e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800697a:	f7fc fca1 	bl	80032c0 <HAL_RCC_GetPCLK2Freq>
 800697e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006980:	e02f      	b.n	80069e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006982:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006986:	4618      	mov	r0, r3
 8006988:	f7fd fed0 	bl	800472c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800698c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800698e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006990:	e027      	b.n	80069e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006992:	f107 0318 	add.w	r3, r7, #24
 8006996:	4618      	mov	r0, r3
 8006998:	f7fe f81c 	bl	80049d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800699c:	69fb      	ldr	r3, [r7, #28]
 800699e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069a0:	e01f      	b.n	80069e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80069a2:	4b2d      	ldr	r3, [pc, #180]	@ (8006a58 <UART_SetConfig+0xac0>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f003 0320 	and.w	r3, r3, #32
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d009      	beq.n	80069c2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80069ae:	4b2a      	ldr	r3, [pc, #168]	@ (8006a58 <UART_SetConfig+0xac0>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	08db      	lsrs	r3, r3, #3
 80069b4:	f003 0303 	and.w	r3, r3, #3
 80069b8:	4a28      	ldr	r2, [pc, #160]	@ (8006a5c <UART_SetConfig+0xac4>)
 80069ba:	fa22 f303 	lsr.w	r3, r2, r3
 80069be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80069c0:	e00f      	b.n	80069e2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80069c2:	4b26      	ldr	r3, [pc, #152]	@ (8006a5c <UART_SetConfig+0xac4>)
 80069c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069c6:	e00c      	b.n	80069e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80069c8:	4b25      	ldr	r3, [pc, #148]	@ (8006a60 <UART_SetConfig+0xac8>)
 80069ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069cc:	e009      	b.n	80069e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80069d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069d4:	e005      	b.n	80069e2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80069d6:	2300      	movs	r3, #0
 80069d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80069e0:	bf00      	nop
    }

    if (pclk != 0U)
 80069e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d021      	beq.n	8006a2c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ec:	4a1d      	ldr	r2, [pc, #116]	@ (8006a64 <UART_SetConfig+0xacc>)
 80069ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069f2:	461a      	mov	r2, r3
 80069f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069f6:	fbb3 f2f2 	udiv	r2, r3, r2
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	085b      	lsrs	r3, r3, #1
 8006a00:	441a      	add	r2, r3
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a0a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a0e:	2b0f      	cmp	r3, #15
 8006a10:	d909      	bls.n	8006a26 <UART_SetConfig+0xa8e>
 8006a12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a18:	d205      	bcs.n	8006a26 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a1c:	b29a      	uxth	r2, r3
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	60da      	str	r2, [r3, #12]
 8006a24:	e002      	b.n	8006a2c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	2201      	movs	r2, #1
 8006a38:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	2200      	movs	r2, #0
 8006a46:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006a48:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3748      	adds	r7, #72	@ 0x48
 8006a50:	46bd      	mov	sp, r7
 8006a52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a56:	bf00      	nop
 8006a58:	58024400 	.word	0x58024400
 8006a5c:	03d09000 	.word	0x03d09000
 8006a60:	003d0900 	.word	0x003d0900
 8006a64:	08007b54 	.word	0x08007b54

08006a68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b083      	sub	sp, #12
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a74:	f003 0308 	and.w	r3, r3, #8
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d00a      	beq.n	8006a92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	430a      	orrs	r2, r1
 8006a90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a96:	f003 0301 	and.w	r3, r3, #1
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d00a      	beq.n	8006ab4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	430a      	orrs	r2, r1
 8006ab2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ab8:	f003 0302 	and.w	r3, r3, #2
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d00a      	beq.n	8006ad6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	430a      	orrs	r2, r1
 8006ad4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ada:	f003 0304 	and.w	r3, r3, #4
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d00a      	beq.n	8006af8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	430a      	orrs	r2, r1
 8006af6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006afc:	f003 0310 	and.w	r3, r3, #16
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d00a      	beq.n	8006b1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	689b      	ldr	r3, [r3, #8]
 8006b0a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	430a      	orrs	r2, r1
 8006b18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b1e:	f003 0320 	and.w	r3, r3, #32
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d00a      	beq.n	8006b3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	430a      	orrs	r2, r1
 8006b3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d01a      	beq.n	8006b7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	430a      	orrs	r2, r1
 8006b5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b66:	d10a      	bne.n	8006b7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	430a      	orrs	r2, r1
 8006b7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d00a      	beq.n	8006ba0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	430a      	orrs	r2, r1
 8006b9e:	605a      	str	r2, [r3, #4]
  }
}
 8006ba0:	bf00      	nop
 8006ba2:	370c      	adds	r7, #12
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr

08006bac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b098      	sub	sp, #96	@ 0x60
 8006bb0:	af02      	add	r7, sp, #8
 8006bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006bbc:	f7fa fa6a 	bl	8001094 <HAL_GetTick>
 8006bc0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f003 0308 	and.w	r3, r3, #8
 8006bcc:	2b08      	cmp	r3, #8
 8006bce:	d12f      	bne.n	8006c30 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006bd0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006bd4:	9300      	str	r3, [sp, #0]
 8006bd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006bd8:	2200      	movs	r2, #0
 8006bda:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f000 f88e 	bl	8006d00 <UART_WaitOnFlagUntilTimeout>
 8006be4:	4603      	mov	r3, r0
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d022      	beq.n	8006c30 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bf2:	e853 3f00 	ldrex	r3, [r3]
 8006bf6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006bf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bfa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006bfe:	653b      	str	r3, [r7, #80]	@ 0x50
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	461a      	mov	r2, r3
 8006c06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c08:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c0a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c0c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006c0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c10:	e841 2300 	strex	r3, r2, [r1]
 8006c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006c16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d1e6      	bne.n	8006bea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2220      	movs	r2, #32
 8006c20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c2c:	2303      	movs	r3, #3
 8006c2e:	e063      	b.n	8006cf8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f003 0304 	and.w	r3, r3, #4
 8006c3a:	2b04      	cmp	r3, #4
 8006c3c:	d149      	bne.n	8006cd2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c3e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006c42:	9300      	str	r3, [sp, #0]
 8006c44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c46:	2200      	movs	r2, #0
 8006c48:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f000 f857 	bl	8006d00 <UART_WaitOnFlagUntilTimeout>
 8006c52:	4603      	mov	r3, r0
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d03c      	beq.n	8006cd2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c60:	e853 3f00 	ldrex	r3, [r3]
 8006c64:	623b      	str	r3, [r7, #32]
   return(result);
 8006c66:	6a3b      	ldr	r3, [r7, #32]
 8006c68:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	461a      	mov	r2, r3
 8006c74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c76:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c78:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c7e:	e841 2300 	strex	r3, r2, [r1]
 8006c82:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006c84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d1e6      	bne.n	8006c58 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	3308      	adds	r3, #8
 8006c90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	e853 3f00 	ldrex	r3, [r3]
 8006c98:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	f023 0301 	bic.w	r3, r3, #1
 8006ca0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	3308      	adds	r3, #8
 8006ca8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006caa:	61fa      	str	r2, [r7, #28]
 8006cac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cae:	69b9      	ldr	r1, [r7, #24]
 8006cb0:	69fa      	ldr	r2, [r7, #28]
 8006cb2:	e841 2300 	strex	r3, r2, [r1]
 8006cb6:	617b      	str	r3, [r7, #20]
   return(result);
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d1e5      	bne.n	8006c8a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2220      	movs	r2, #32
 8006cc2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006cce:	2303      	movs	r3, #3
 8006cd0:	e012      	b.n	8006cf8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2220      	movs	r2, #32
 8006cd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2220      	movs	r2, #32
 8006cde:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006cf6:	2300      	movs	r3, #0
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3758      	adds	r7, #88	@ 0x58
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b084      	sub	sp, #16
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	60f8      	str	r0, [r7, #12]
 8006d08:	60b9      	str	r1, [r7, #8]
 8006d0a:	603b      	str	r3, [r7, #0]
 8006d0c:	4613      	mov	r3, r2
 8006d0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d10:	e04f      	b.n	8006db2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d12:	69bb      	ldr	r3, [r7, #24]
 8006d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d18:	d04b      	beq.n	8006db2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d1a:	f7fa f9bb 	bl	8001094 <HAL_GetTick>
 8006d1e:	4602      	mov	r2, r0
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	1ad3      	subs	r3, r2, r3
 8006d24:	69ba      	ldr	r2, [r7, #24]
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d302      	bcc.n	8006d30 <UART_WaitOnFlagUntilTimeout+0x30>
 8006d2a:	69bb      	ldr	r3, [r7, #24]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d101      	bne.n	8006d34 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006d30:	2303      	movs	r3, #3
 8006d32:	e04e      	b.n	8006dd2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f003 0304 	and.w	r3, r3, #4
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d037      	beq.n	8006db2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	2b80      	cmp	r3, #128	@ 0x80
 8006d46:	d034      	beq.n	8006db2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	2b40      	cmp	r3, #64	@ 0x40
 8006d4c:	d031      	beq.n	8006db2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	69db      	ldr	r3, [r3, #28]
 8006d54:	f003 0308 	and.w	r3, r3, #8
 8006d58:	2b08      	cmp	r3, #8
 8006d5a:	d110      	bne.n	8006d7e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	2208      	movs	r2, #8
 8006d62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006d64:	68f8      	ldr	r0, [r7, #12]
 8006d66:	f000 f839 	bl	8006ddc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2208      	movs	r2, #8
 8006d6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2200      	movs	r2, #0
 8006d76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	e029      	b.n	8006dd2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	69db      	ldr	r3, [r3, #28]
 8006d84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006d88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d8c:	d111      	bne.n	8006db2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006d96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006d98:	68f8      	ldr	r0, [r7, #12]
 8006d9a:	f000 f81f 	bl	8006ddc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2220      	movs	r2, #32
 8006da2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2200      	movs	r2, #0
 8006daa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006dae:	2303      	movs	r3, #3
 8006db0:	e00f      	b.n	8006dd2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	69da      	ldr	r2, [r3, #28]
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	4013      	ands	r3, r2
 8006dbc:	68ba      	ldr	r2, [r7, #8]
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	bf0c      	ite	eq
 8006dc2:	2301      	moveq	r3, #1
 8006dc4:	2300      	movne	r3, #0
 8006dc6:	b2db      	uxtb	r3, r3
 8006dc8:	461a      	mov	r2, r3
 8006dca:	79fb      	ldrb	r3, [r7, #7]
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d0a0      	beq.n	8006d12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3710      	adds	r7, #16
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
	...

08006ddc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b095      	sub	sp, #84	@ 0x54
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dec:	e853 3f00 	ldrex	r3, [r3]
 8006df0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006df4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006df8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	461a      	mov	r2, r3
 8006e00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e02:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e04:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e06:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006e08:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006e0a:	e841 2300 	strex	r3, r2, [r1]
 8006e0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006e10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d1e6      	bne.n	8006de4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	3308      	adds	r3, #8
 8006e1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e1e:	6a3b      	ldr	r3, [r7, #32]
 8006e20:	e853 3f00 	ldrex	r3, [r3]
 8006e24:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e26:	69fa      	ldr	r2, [r7, #28]
 8006e28:	4b1e      	ldr	r3, [pc, #120]	@ (8006ea4 <UART_EndRxTransfer+0xc8>)
 8006e2a:	4013      	ands	r3, r2
 8006e2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	3308      	adds	r3, #8
 8006e34:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e36:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006e38:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e3a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e3e:	e841 2300 	strex	r3, r2, [r1]
 8006e42:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d1e5      	bne.n	8006e16 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d118      	bne.n	8006e84 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	e853 3f00 	ldrex	r3, [r3]
 8006e5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	f023 0310 	bic.w	r3, r3, #16
 8006e66:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e70:	61bb      	str	r3, [r7, #24]
 8006e72:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e74:	6979      	ldr	r1, [r7, #20]
 8006e76:	69ba      	ldr	r2, [r7, #24]
 8006e78:	e841 2300 	strex	r3, r2, [r1]
 8006e7c:	613b      	str	r3, [r7, #16]
   return(result);
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d1e6      	bne.n	8006e52 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2220      	movs	r2, #32
 8006e88:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2200      	movs	r2, #0
 8006e96:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006e98:	bf00      	nop
 8006e9a:	3754      	adds	r7, #84	@ 0x54
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr
 8006ea4:	effffffe 	.word	0xeffffffe

08006ea8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eb4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ebe:	68f8      	ldr	r0, [r7, #12]
 8006ec0:	f7ff f854 	bl	8005f6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ec4:	bf00      	nop
 8006ec6:	3710      	adds	r7, #16
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b088      	sub	sp, #32
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	e853 3f00 	ldrex	r3, [r3]
 8006ee0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ee8:	61fb      	str	r3, [r7, #28]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	461a      	mov	r2, r3
 8006ef0:	69fb      	ldr	r3, [r7, #28]
 8006ef2:	61bb      	str	r3, [r7, #24]
 8006ef4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef6:	6979      	ldr	r1, [r7, #20]
 8006ef8:	69ba      	ldr	r2, [r7, #24]
 8006efa:	e841 2300 	strex	r3, r2, [r1]
 8006efe:	613b      	str	r3, [r7, #16]
   return(result);
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d1e6      	bne.n	8006ed4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2220      	movs	r2, #32
 8006f0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2200      	movs	r2, #0
 8006f12:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f7ff f81f 	bl	8005f58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f1a:	bf00      	nop
 8006f1c:	3720      	adds	r7, #32
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}

08006f22 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006f22:	b480      	push	{r7}
 8006f24:	b083      	sub	sp, #12
 8006f26:	af00      	add	r7, sp, #0
 8006f28:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006f2a:	bf00      	nop
 8006f2c:	370c      	adds	r7, #12
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr

08006f36 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006f36:	b480      	push	{r7}
 8006f38:	b083      	sub	sp, #12
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006f3e:	bf00      	nop
 8006f40:	370c      	adds	r7, #12
 8006f42:	46bd      	mov	sp, r7
 8006f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f48:	4770      	bx	lr

08006f4a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006f4a:	b480      	push	{r7}
 8006f4c:	b083      	sub	sp, #12
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006f52:	bf00      	nop
 8006f54:	370c      	adds	r7, #12
 8006f56:	46bd      	mov	sp, r7
 8006f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5c:	4770      	bx	lr

08006f5e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006f5e:	b480      	push	{r7}
 8006f60:	b085      	sub	sp, #20
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d101      	bne.n	8006f74 <HAL_UARTEx_DisableFifoMode+0x16>
 8006f70:	2302      	movs	r3, #2
 8006f72:	e027      	b.n	8006fc4 <HAL_UARTEx_DisableFifoMode+0x66>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2201      	movs	r2, #1
 8006f78:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2224      	movs	r2, #36	@ 0x24
 8006f80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	681a      	ldr	r2, [r3, #0]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f022 0201 	bic.w	r2, r2, #1
 8006f9a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006fa2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	68fa      	ldr	r2, [r7, #12]
 8006fb0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2220      	movs	r2, #32
 8006fb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006fc2:	2300      	movs	r3, #0
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3714      	adds	r7, #20
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr

08006fd0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b084      	sub	sp, #16
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d101      	bne.n	8006fe8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006fe4:	2302      	movs	r3, #2
 8006fe6:	e02d      	b.n	8007044 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2201      	movs	r2, #1
 8006fec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2224      	movs	r2, #36	@ 0x24
 8006ff4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	681a      	ldr	r2, [r3, #0]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f022 0201 	bic.w	r2, r2, #1
 800700e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	683a      	ldr	r2, [r7, #0]
 8007020:	430a      	orrs	r2, r1
 8007022:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f000 f84f 	bl	80070c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	68fa      	ldr	r2, [r7, #12]
 8007030:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2220      	movs	r2, #32
 8007036:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2200      	movs	r2, #0
 800703e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007042:	2300      	movs	r3, #0
}
 8007044:	4618      	mov	r0, r3
 8007046:	3710      	adds	r7, #16
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}

0800704c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b084      	sub	sp, #16
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
 8007054:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800705c:	2b01      	cmp	r3, #1
 800705e:	d101      	bne.n	8007064 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007060:	2302      	movs	r3, #2
 8007062:	e02d      	b.n	80070c0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2201      	movs	r2, #1
 8007068:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2224      	movs	r2, #36	@ 0x24
 8007070:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f022 0201 	bic.w	r2, r2, #1
 800708a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	683a      	ldr	r2, [r7, #0]
 800709c:	430a      	orrs	r2, r1
 800709e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f000 f811 	bl	80070c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	68fa      	ldr	r2, [r7, #12]
 80070ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2220      	movs	r2, #32
 80070b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2200      	movs	r2, #0
 80070ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80070be:	2300      	movs	r3, #0
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3710      	adds	r7, #16
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b085      	sub	sp, #20
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d108      	bne.n	80070ea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2201      	movs	r2, #1
 80070dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2201      	movs	r2, #1
 80070e4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80070e8:	e031      	b.n	800714e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80070ea:	2310      	movs	r3, #16
 80070ec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80070ee:	2310      	movs	r3, #16
 80070f0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	0e5b      	lsrs	r3, r3, #25
 80070fa:	b2db      	uxtb	r3, r3
 80070fc:	f003 0307 	and.w	r3, r3, #7
 8007100:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	0f5b      	lsrs	r3, r3, #29
 800710a:	b2db      	uxtb	r3, r3
 800710c:	f003 0307 	and.w	r3, r3, #7
 8007110:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007112:	7bbb      	ldrb	r3, [r7, #14]
 8007114:	7b3a      	ldrb	r2, [r7, #12]
 8007116:	4911      	ldr	r1, [pc, #68]	@ (800715c <UARTEx_SetNbDataToProcess+0x94>)
 8007118:	5c8a      	ldrb	r2, [r1, r2]
 800711a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800711e:	7b3a      	ldrb	r2, [r7, #12]
 8007120:	490f      	ldr	r1, [pc, #60]	@ (8007160 <UARTEx_SetNbDataToProcess+0x98>)
 8007122:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007124:	fb93 f3f2 	sdiv	r3, r3, r2
 8007128:	b29a      	uxth	r2, r3
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007130:	7bfb      	ldrb	r3, [r7, #15]
 8007132:	7b7a      	ldrb	r2, [r7, #13]
 8007134:	4909      	ldr	r1, [pc, #36]	@ (800715c <UARTEx_SetNbDataToProcess+0x94>)
 8007136:	5c8a      	ldrb	r2, [r1, r2]
 8007138:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800713c:	7b7a      	ldrb	r2, [r7, #13]
 800713e:	4908      	ldr	r1, [pc, #32]	@ (8007160 <UARTEx_SetNbDataToProcess+0x98>)
 8007140:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007142:	fb93 f3f2 	sdiv	r3, r3, r2
 8007146:	b29a      	uxth	r2, r3
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800714e:	bf00      	nop
 8007150:	3714      	adds	r7, #20
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr
 800715a:	bf00      	nop
 800715c:	08007b6c 	.word	0x08007b6c
 8007160:	08007b74 	.word	0x08007b74

08007164 <HAL_WWDG_IRQHandler>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
void HAL_WWDG_IRQHandler(WWDG_HandleTypeDef *hwwdg)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b082      	sub	sp, #8
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  /* Check if Early Wakeup Interrupt is enable */
  if (__HAL_WWDG_GET_IT_SOURCE(hwwdg, WWDG_IT_EWI) != RESET)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007176:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800717a:	d10e      	bne.n	800719a <HAL_WWDG_IRQHandler+0x36>
  {
    /* Check if WWDG Early Wakeup Interrupt occurred */
    if (__HAL_WWDG_GET_FLAG(hwwdg, WWDG_FLAG_EWIF) != RESET)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	689b      	ldr	r3, [r3, #8]
 8007182:	f003 0301 	and.w	r3, r3, #1
 8007186:	2b01      	cmp	r3, #1
 8007188:	d107      	bne.n	800719a <HAL_WWDG_IRQHandler+0x36>
    {
      /* Clear the WWDG Early Wakeup flag */
      __HAL_WWDG_CLEAR_FLAG(hwwdg, WWDG_FLAG_EWIF);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f06f 0201 	mvn.w	r2, #1
 8007192:	609a      	str	r2, [r3, #8]
#if (USE_HAL_WWDG_REGISTER_CALLBACKS == 1)
      /* Early Wakeup registered callback */
      hwwdg->EwiCallback(hwwdg);
#else
      /* Early Wakeup callback */
      HAL_WWDG_EarlyWakeupCallback(hwwdg);
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f000 f804 	bl	80071a2 <HAL_WWDG_EarlyWakeupCallback>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */
    }
  }
}
 800719a:	bf00      	nop
 800719c:	3708      	adds	r7, #8
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}

080071a2 <HAL_WWDG_EarlyWakeupCallback>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
__weak void HAL_WWDG_EarlyWakeupCallback(WWDG_HandleTypeDef *hwwdg)
{
 80071a2:	b480      	push	{r7}
 80071a4:	b083      	sub	sp, #12
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	6078      	str	r0, [r7, #4]
  UNUSED(hwwdg);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_WWDG_EarlyWakeupCallback could be implemented in the user file
   */
}
 80071aa:	bf00      	nop
 80071ac:	370c      	adds	r7, #12
 80071ae:	46bd      	mov	sp, r7
 80071b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b4:	4770      	bx	lr
	...

080071b8 <std>:
 80071b8:	2300      	movs	r3, #0
 80071ba:	b510      	push	{r4, lr}
 80071bc:	4604      	mov	r4, r0
 80071be:	e9c0 3300 	strd	r3, r3, [r0]
 80071c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80071c6:	6083      	str	r3, [r0, #8]
 80071c8:	8181      	strh	r1, [r0, #12]
 80071ca:	6643      	str	r3, [r0, #100]	@ 0x64
 80071cc:	81c2      	strh	r2, [r0, #14]
 80071ce:	6183      	str	r3, [r0, #24]
 80071d0:	4619      	mov	r1, r3
 80071d2:	2208      	movs	r2, #8
 80071d4:	305c      	adds	r0, #92	@ 0x5c
 80071d6:	f000 f9e7 	bl	80075a8 <memset>
 80071da:	4b0d      	ldr	r3, [pc, #52]	@ (8007210 <std+0x58>)
 80071dc:	6263      	str	r3, [r4, #36]	@ 0x24
 80071de:	4b0d      	ldr	r3, [pc, #52]	@ (8007214 <std+0x5c>)
 80071e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80071e2:	4b0d      	ldr	r3, [pc, #52]	@ (8007218 <std+0x60>)
 80071e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80071e6:	4b0d      	ldr	r3, [pc, #52]	@ (800721c <std+0x64>)
 80071e8:	6323      	str	r3, [r4, #48]	@ 0x30
 80071ea:	4b0d      	ldr	r3, [pc, #52]	@ (8007220 <std+0x68>)
 80071ec:	6224      	str	r4, [r4, #32]
 80071ee:	429c      	cmp	r4, r3
 80071f0:	d006      	beq.n	8007200 <std+0x48>
 80071f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80071f6:	4294      	cmp	r4, r2
 80071f8:	d002      	beq.n	8007200 <std+0x48>
 80071fa:	33d0      	adds	r3, #208	@ 0xd0
 80071fc:	429c      	cmp	r4, r3
 80071fe:	d105      	bne.n	800720c <std+0x54>
 8007200:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007208:	f000 ba46 	b.w	8007698 <__retarget_lock_init_recursive>
 800720c:	bd10      	pop	{r4, pc}
 800720e:	bf00      	nop
 8007210:	080073f9 	.word	0x080073f9
 8007214:	0800741b 	.word	0x0800741b
 8007218:	08007453 	.word	0x08007453
 800721c:	08007477 	.word	0x08007477
 8007220:	24000184 	.word	0x24000184

08007224 <stdio_exit_handler>:
 8007224:	4a02      	ldr	r2, [pc, #8]	@ (8007230 <stdio_exit_handler+0xc>)
 8007226:	4903      	ldr	r1, [pc, #12]	@ (8007234 <stdio_exit_handler+0x10>)
 8007228:	4803      	ldr	r0, [pc, #12]	@ (8007238 <stdio_exit_handler+0x14>)
 800722a:	f000 b869 	b.w	8007300 <_fwalk_sglue>
 800722e:	bf00      	nop
 8007230:	24000010 	.word	0x24000010
 8007234:	08007999 	.word	0x08007999
 8007238:	24000020 	.word	0x24000020

0800723c <cleanup_stdio>:
 800723c:	6841      	ldr	r1, [r0, #4]
 800723e:	4b0c      	ldr	r3, [pc, #48]	@ (8007270 <cleanup_stdio+0x34>)
 8007240:	4299      	cmp	r1, r3
 8007242:	b510      	push	{r4, lr}
 8007244:	4604      	mov	r4, r0
 8007246:	d001      	beq.n	800724c <cleanup_stdio+0x10>
 8007248:	f000 fba6 	bl	8007998 <_fflush_r>
 800724c:	68a1      	ldr	r1, [r4, #8]
 800724e:	4b09      	ldr	r3, [pc, #36]	@ (8007274 <cleanup_stdio+0x38>)
 8007250:	4299      	cmp	r1, r3
 8007252:	d002      	beq.n	800725a <cleanup_stdio+0x1e>
 8007254:	4620      	mov	r0, r4
 8007256:	f000 fb9f 	bl	8007998 <_fflush_r>
 800725a:	68e1      	ldr	r1, [r4, #12]
 800725c:	4b06      	ldr	r3, [pc, #24]	@ (8007278 <cleanup_stdio+0x3c>)
 800725e:	4299      	cmp	r1, r3
 8007260:	d004      	beq.n	800726c <cleanup_stdio+0x30>
 8007262:	4620      	mov	r0, r4
 8007264:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007268:	f000 bb96 	b.w	8007998 <_fflush_r>
 800726c:	bd10      	pop	{r4, pc}
 800726e:	bf00      	nop
 8007270:	24000184 	.word	0x24000184
 8007274:	240001ec 	.word	0x240001ec
 8007278:	24000254 	.word	0x24000254

0800727c <global_stdio_init.part.0>:
 800727c:	b510      	push	{r4, lr}
 800727e:	4b0b      	ldr	r3, [pc, #44]	@ (80072ac <global_stdio_init.part.0+0x30>)
 8007280:	4c0b      	ldr	r4, [pc, #44]	@ (80072b0 <global_stdio_init.part.0+0x34>)
 8007282:	4a0c      	ldr	r2, [pc, #48]	@ (80072b4 <global_stdio_init.part.0+0x38>)
 8007284:	601a      	str	r2, [r3, #0]
 8007286:	4620      	mov	r0, r4
 8007288:	2200      	movs	r2, #0
 800728a:	2104      	movs	r1, #4
 800728c:	f7ff ff94 	bl	80071b8 <std>
 8007290:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007294:	2201      	movs	r2, #1
 8007296:	2109      	movs	r1, #9
 8007298:	f7ff ff8e 	bl	80071b8 <std>
 800729c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80072a0:	2202      	movs	r2, #2
 80072a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072a6:	2112      	movs	r1, #18
 80072a8:	f7ff bf86 	b.w	80071b8 <std>
 80072ac:	240002bc 	.word	0x240002bc
 80072b0:	24000184 	.word	0x24000184
 80072b4:	08007225 	.word	0x08007225

080072b8 <__sfp_lock_acquire>:
 80072b8:	4801      	ldr	r0, [pc, #4]	@ (80072c0 <__sfp_lock_acquire+0x8>)
 80072ba:	f000 b9ee 	b.w	800769a <__retarget_lock_acquire_recursive>
 80072be:	bf00      	nop
 80072c0:	240002c5 	.word	0x240002c5

080072c4 <__sfp_lock_release>:
 80072c4:	4801      	ldr	r0, [pc, #4]	@ (80072cc <__sfp_lock_release+0x8>)
 80072c6:	f000 b9e9 	b.w	800769c <__retarget_lock_release_recursive>
 80072ca:	bf00      	nop
 80072cc:	240002c5 	.word	0x240002c5

080072d0 <__sinit>:
 80072d0:	b510      	push	{r4, lr}
 80072d2:	4604      	mov	r4, r0
 80072d4:	f7ff fff0 	bl	80072b8 <__sfp_lock_acquire>
 80072d8:	6a23      	ldr	r3, [r4, #32]
 80072da:	b11b      	cbz	r3, 80072e4 <__sinit+0x14>
 80072dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072e0:	f7ff bff0 	b.w	80072c4 <__sfp_lock_release>
 80072e4:	4b04      	ldr	r3, [pc, #16]	@ (80072f8 <__sinit+0x28>)
 80072e6:	6223      	str	r3, [r4, #32]
 80072e8:	4b04      	ldr	r3, [pc, #16]	@ (80072fc <__sinit+0x2c>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d1f5      	bne.n	80072dc <__sinit+0xc>
 80072f0:	f7ff ffc4 	bl	800727c <global_stdio_init.part.0>
 80072f4:	e7f2      	b.n	80072dc <__sinit+0xc>
 80072f6:	bf00      	nop
 80072f8:	0800723d 	.word	0x0800723d
 80072fc:	240002bc 	.word	0x240002bc

08007300 <_fwalk_sglue>:
 8007300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007304:	4607      	mov	r7, r0
 8007306:	4688      	mov	r8, r1
 8007308:	4614      	mov	r4, r2
 800730a:	2600      	movs	r6, #0
 800730c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007310:	f1b9 0901 	subs.w	r9, r9, #1
 8007314:	d505      	bpl.n	8007322 <_fwalk_sglue+0x22>
 8007316:	6824      	ldr	r4, [r4, #0]
 8007318:	2c00      	cmp	r4, #0
 800731a:	d1f7      	bne.n	800730c <_fwalk_sglue+0xc>
 800731c:	4630      	mov	r0, r6
 800731e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007322:	89ab      	ldrh	r3, [r5, #12]
 8007324:	2b01      	cmp	r3, #1
 8007326:	d907      	bls.n	8007338 <_fwalk_sglue+0x38>
 8007328:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800732c:	3301      	adds	r3, #1
 800732e:	d003      	beq.n	8007338 <_fwalk_sglue+0x38>
 8007330:	4629      	mov	r1, r5
 8007332:	4638      	mov	r0, r7
 8007334:	47c0      	blx	r8
 8007336:	4306      	orrs	r6, r0
 8007338:	3568      	adds	r5, #104	@ 0x68
 800733a:	e7e9      	b.n	8007310 <_fwalk_sglue+0x10>

0800733c <_puts_r>:
 800733c:	6a03      	ldr	r3, [r0, #32]
 800733e:	b570      	push	{r4, r5, r6, lr}
 8007340:	6884      	ldr	r4, [r0, #8]
 8007342:	4605      	mov	r5, r0
 8007344:	460e      	mov	r6, r1
 8007346:	b90b      	cbnz	r3, 800734c <_puts_r+0x10>
 8007348:	f7ff ffc2 	bl	80072d0 <__sinit>
 800734c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800734e:	07db      	lsls	r3, r3, #31
 8007350:	d405      	bmi.n	800735e <_puts_r+0x22>
 8007352:	89a3      	ldrh	r3, [r4, #12]
 8007354:	0598      	lsls	r0, r3, #22
 8007356:	d402      	bmi.n	800735e <_puts_r+0x22>
 8007358:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800735a:	f000 f99e 	bl	800769a <__retarget_lock_acquire_recursive>
 800735e:	89a3      	ldrh	r3, [r4, #12]
 8007360:	0719      	lsls	r1, r3, #28
 8007362:	d502      	bpl.n	800736a <_puts_r+0x2e>
 8007364:	6923      	ldr	r3, [r4, #16]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d135      	bne.n	80073d6 <_puts_r+0x9a>
 800736a:	4621      	mov	r1, r4
 800736c:	4628      	mov	r0, r5
 800736e:	f000 f8c5 	bl	80074fc <__swsetup_r>
 8007372:	b380      	cbz	r0, 80073d6 <_puts_r+0x9a>
 8007374:	f04f 35ff 	mov.w	r5, #4294967295
 8007378:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800737a:	07da      	lsls	r2, r3, #31
 800737c:	d405      	bmi.n	800738a <_puts_r+0x4e>
 800737e:	89a3      	ldrh	r3, [r4, #12]
 8007380:	059b      	lsls	r3, r3, #22
 8007382:	d402      	bmi.n	800738a <_puts_r+0x4e>
 8007384:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007386:	f000 f989 	bl	800769c <__retarget_lock_release_recursive>
 800738a:	4628      	mov	r0, r5
 800738c:	bd70      	pop	{r4, r5, r6, pc}
 800738e:	2b00      	cmp	r3, #0
 8007390:	da04      	bge.n	800739c <_puts_r+0x60>
 8007392:	69a2      	ldr	r2, [r4, #24]
 8007394:	429a      	cmp	r2, r3
 8007396:	dc17      	bgt.n	80073c8 <_puts_r+0x8c>
 8007398:	290a      	cmp	r1, #10
 800739a:	d015      	beq.n	80073c8 <_puts_r+0x8c>
 800739c:	6823      	ldr	r3, [r4, #0]
 800739e:	1c5a      	adds	r2, r3, #1
 80073a0:	6022      	str	r2, [r4, #0]
 80073a2:	7019      	strb	r1, [r3, #0]
 80073a4:	68a3      	ldr	r3, [r4, #8]
 80073a6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80073aa:	3b01      	subs	r3, #1
 80073ac:	60a3      	str	r3, [r4, #8]
 80073ae:	2900      	cmp	r1, #0
 80073b0:	d1ed      	bne.n	800738e <_puts_r+0x52>
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	da11      	bge.n	80073da <_puts_r+0x9e>
 80073b6:	4622      	mov	r2, r4
 80073b8:	210a      	movs	r1, #10
 80073ba:	4628      	mov	r0, r5
 80073bc:	f000 f85f 	bl	800747e <__swbuf_r>
 80073c0:	3001      	adds	r0, #1
 80073c2:	d0d7      	beq.n	8007374 <_puts_r+0x38>
 80073c4:	250a      	movs	r5, #10
 80073c6:	e7d7      	b.n	8007378 <_puts_r+0x3c>
 80073c8:	4622      	mov	r2, r4
 80073ca:	4628      	mov	r0, r5
 80073cc:	f000 f857 	bl	800747e <__swbuf_r>
 80073d0:	3001      	adds	r0, #1
 80073d2:	d1e7      	bne.n	80073a4 <_puts_r+0x68>
 80073d4:	e7ce      	b.n	8007374 <_puts_r+0x38>
 80073d6:	3e01      	subs	r6, #1
 80073d8:	e7e4      	b.n	80073a4 <_puts_r+0x68>
 80073da:	6823      	ldr	r3, [r4, #0]
 80073dc:	1c5a      	adds	r2, r3, #1
 80073de:	6022      	str	r2, [r4, #0]
 80073e0:	220a      	movs	r2, #10
 80073e2:	701a      	strb	r2, [r3, #0]
 80073e4:	e7ee      	b.n	80073c4 <_puts_r+0x88>
	...

080073e8 <puts>:
 80073e8:	4b02      	ldr	r3, [pc, #8]	@ (80073f4 <puts+0xc>)
 80073ea:	4601      	mov	r1, r0
 80073ec:	6818      	ldr	r0, [r3, #0]
 80073ee:	f7ff bfa5 	b.w	800733c <_puts_r>
 80073f2:	bf00      	nop
 80073f4:	2400001c 	.word	0x2400001c

080073f8 <__sread>:
 80073f8:	b510      	push	{r4, lr}
 80073fa:	460c      	mov	r4, r1
 80073fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007400:	f000 f8fc 	bl	80075fc <_read_r>
 8007404:	2800      	cmp	r0, #0
 8007406:	bfab      	itete	ge
 8007408:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800740a:	89a3      	ldrhlt	r3, [r4, #12]
 800740c:	181b      	addge	r3, r3, r0
 800740e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007412:	bfac      	ite	ge
 8007414:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007416:	81a3      	strhlt	r3, [r4, #12]
 8007418:	bd10      	pop	{r4, pc}

0800741a <__swrite>:
 800741a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800741e:	461f      	mov	r7, r3
 8007420:	898b      	ldrh	r3, [r1, #12]
 8007422:	05db      	lsls	r3, r3, #23
 8007424:	4605      	mov	r5, r0
 8007426:	460c      	mov	r4, r1
 8007428:	4616      	mov	r6, r2
 800742a:	d505      	bpl.n	8007438 <__swrite+0x1e>
 800742c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007430:	2302      	movs	r3, #2
 8007432:	2200      	movs	r2, #0
 8007434:	f000 f8d0 	bl	80075d8 <_lseek_r>
 8007438:	89a3      	ldrh	r3, [r4, #12]
 800743a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800743e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007442:	81a3      	strh	r3, [r4, #12]
 8007444:	4632      	mov	r2, r6
 8007446:	463b      	mov	r3, r7
 8007448:	4628      	mov	r0, r5
 800744a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800744e:	f000 b8e7 	b.w	8007620 <_write_r>

08007452 <__sseek>:
 8007452:	b510      	push	{r4, lr}
 8007454:	460c      	mov	r4, r1
 8007456:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800745a:	f000 f8bd 	bl	80075d8 <_lseek_r>
 800745e:	1c43      	adds	r3, r0, #1
 8007460:	89a3      	ldrh	r3, [r4, #12]
 8007462:	bf15      	itete	ne
 8007464:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007466:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800746a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800746e:	81a3      	strheq	r3, [r4, #12]
 8007470:	bf18      	it	ne
 8007472:	81a3      	strhne	r3, [r4, #12]
 8007474:	bd10      	pop	{r4, pc}

08007476 <__sclose>:
 8007476:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800747a:	f000 b89d 	b.w	80075b8 <_close_r>

0800747e <__swbuf_r>:
 800747e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007480:	460e      	mov	r6, r1
 8007482:	4614      	mov	r4, r2
 8007484:	4605      	mov	r5, r0
 8007486:	b118      	cbz	r0, 8007490 <__swbuf_r+0x12>
 8007488:	6a03      	ldr	r3, [r0, #32]
 800748a:	b90b      	cbnz	r3, 8007490 <__swbuf_r+0x12>
 800748c:	f7ff ff20 	bl	80072d0 <__sinit>
 8007490:	69a3      	ldr	r3, [r4, #24]
 8007492:	60a3      	str	r3, [r4, #8]
 8007494:	89a3      	ldrh	r3, [r4, #12]
 8007496:	071a      	lsls	r2, r3, #28
 8007498:	d501      	bpl.n	800749e <__swbuf_r+0x20>
 800749a:	6923      	ldr	r3, [r4, #16]
 800749c:	b943      	cbnz	r3, 80074b0 <__swbuf_r+0x32>
 800749e:	4621      	mov	r1, r4
 80074a0:	4628      	mov	r0, r5
 80074a2:	f000 f82b 	bl	80074fc <__swsetup_r>
 80074a6:	b118      	cbz	r0, 80074b0 <__swbuf_r+0x32>
 80074a8:	f04f 37ff 	mov.w	r7, #4294967295
 80074ac:	4638      	mov	r0, r7
 80074ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074b0:	6823      	ldr	r3, [r4, #0]
 80074b2:	6922      	ldr	r2, [r4, #16]
 80074b4:	1a98      	subs	r0, r3, r2
 80074b6:	6963      	ldr	r3, [r4, #20]
 80074b8:	b2f6      	uxtb	r6, r6
 80074ba:	4283      	cmp	r3, r0
 80074bc:	4637      	mov	r7, r6
 80074be:	dc05      	bgt.n	80074cc <__swbuf_r+0x4e>
 80074c0:	4621      	mov	r1, r4
 80074c2:	4628      	mov	r0, r5
 80074c4:	f000 fa68 	bl	8007998 <_fflush_r>
 80074c8:	2800      	cmp	r0, #0
 80074ca:	d1ed      	bne.n	80074a8 <__swbuf_r+0x2a>
 80074cc:	68a3      	ldr	r3, [r4, #8]
 80074ce:	3b01      	subs	r3, #1
 80074d0:	60a3      	str	r3, [r4, #8]
 80074d2:	6823      	ldr	r3, [r4, #0]
 80074d4:	1c5a      	adds	r2, r3, #1
 80074d6:	6022      	str	r2, [r4, #0]
 80074d8:	701e      	strb	r6, [r3, #0]
 80074da:	6962      	ldr	r2, [r4, #20]
 80074dc:	1c43      	adds	r3, r0, #1
 80074de:	429a      	cmp	r2, r3
 80074e0:	d004      	beq.n	80074ec <__swbuf_r+0x6e>
 80074e2:	89a3      	ldrh	r3, [r4, #12]
 80074e4:	07db      	lsls	r3, r3, #31
 80074e6:	d5e1      	bpl.n	80074ac <__swbuf_r+0x2e>
 80074e8:	2e0a      	cmp	r6, #10
 80074ea:	d1df      	bne.n	80074ac <__swbuf_r+0x2e>
 80074ec:	4621      	mov	r1, r4
 80074ee:	4628      	mov	r0, r5
 80074f0:	f000 fa52 	bl	8007998 <_fflush_r>
 80074f4:	2800      	cmp	r0, #0
 80074f6:	d0d9      	beq.n	80074ac <__swbuf_r+0x2e>
 80074f8:	e7d6      	b.n	80074a8 <__swbuf_r+0x2a>
	...

080074fc <__swsetup_r>:
 80074fc:	b538      	push	{r3, r4, r5, lr}
 80074fe:	4b29      	ldr	r3, [pc, #164]	@ (80075a4 <__swsetup_r+0xa8>)
 8007500:	4605      	mov	r5, r0
 8007502:	6818      	ldr	r0, [r3, #0]
 8007504:	460c      	mov	r4, r1
 8007506:	b118      	cbz	r0, 8007510 <__swsetup_r+0x14>
 8007508:	6a03      	ldr	r3, [r0, #32]
 800750a:	b90b      	cbnz	r3, 8007510 <__swsetup_r+0x14>
 800750c:	f7ff fee0 	bl	80072d0 <__sinit>
 8007510:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007514:	0719      	lsls	r1, r3, #28
 8007516:	d422      	bmi.n	800755e <__swsetup_r+0x62>
 8007518:	06da      	lsls	r2, r3, #27
 800751a:	d407      	bmi.n	800752c <__swsetup_r+0x30>
 800751c:	2209      	movs	r2, #9
 800751e:	602a      	str	r2, [r5, #0]
 8007520:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007524:	81a3      	strh	r3, [r4, #12]
 8007526:	f04f 30ff 	mov.w	r0, #4294967295
 800752a:	e033      	b.n	8007594 <__swsetup_r+0x98>
 800752c:	0758      	lsls	r0, r3, #29
 800752e:	d512      	bpl.n	8007556 <__swsetup_r+0x5a>
 8007530:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007532:	b141      	cbz	r1, 8007546 <__swsetup_r+0x4a>
 8007534:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007538:	4299      	cmp	r1, r3
 800753a:	d002      	beq.n	8007542 <__swsetup_r+0x46>
 800753c:	4628      	mov	r0, r5
 800753e:	f000 f8af 	bl	80076a0 <_free_r>
 8007542:	2300      	movs	r3, #0
 8007544:	6363      	str	r3, [r4, #52]	@ 0x34
 8007546:	89a3      	ldrh	r3, [r4, #12]
 8007548:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800754c:	81a3      	strh	r3, [r4, #12]
 800754e:	2300      	movs	r3, #0
 8007550:	6063      	str	r3, [r4, #4]
 8007552:	6923      	ldr	r3, [r4, #16]
 8007554:	6023      	str	r3, [r4, #0]
 8007556:	89a3      	ldrh	r3, [r4, #12]
 8007558:	f043 0308 	orr.w	r3, r3, #8
 800755c:	81a3      	strh	r3, [r4, #12]
 800755e:	6923      	ldr	r3, [r4, #16]
 8007560:	b94b      	cbnz	r3, 8007576 <__swsetup_r+0x7a>
 8007562:	89a3      	ldrh	r3, [r4, #12]
 8007564:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007568:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800756c:	d003      	beq.n	8007576 <__swsetup_r+0x7a>
 800756e:	4621      	mov	r1, r4
 8007570:	4628      	mov	r0, r5
 8007572:	f000 fa5f 	bl	8007a34 <__smakebuf_r>
 8007576:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800757a:	f013 0201 	ands.w	r2, r3, #1
 800757e:	d00a      	beq.n	8007596 <__swsetup_r+0x9a>
 8007580:	2200      	movs	r2, #0
 8007582:	60a2      	str	r2, [r4, #8]
 8007584:	6962      	ldr	r2, [r4, #20]
 8007586:	4252      	negs	r2, r2
 8007588:	61a2      	str	r2, [r4, #24]
 800758a:	6922      	ldr	r2, [r4, #16]
 800758c:	b942      	cbnz	r2, 80075a0 <__swsetup_r+0xa4>
 800758e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007592:	d1c5      	bne.n	8007520 <__swsetup_r+0x24>
 8007594:	bd38      	pop	{r3, r4, r5, pc}
 8007596:	0799      	lsls	r1, r3, #30
 8007598:	bf58      	it	pl
 800759a:	6962      	ldrpl	r2, [r4, #20]
 800759c:	60a2      	str	r2, [r4, #8]
 800759e:	e7f4      	b.n	800758a <__swsetup_r+0x8e>
 80075a0:	2000      	movs	r0, #0
 80075a2:	e7f7      	b.n	8007594 <__swsetup_r+0x98>
 80075a4:	2400001c 	.word	0x2400001c

080075a8 <memset>:
 80075a8:	4402      	add	r2, r0
 80075aa:	4603      	mov	r3, r0
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d100      	bne.n	80075b2 <memset+0xa>
 80075b0:	4770      	bx	lr
 80075b2:	f803 1b01 	strb.w	r1, [r3], #1
 80075b6:	e7f9      	b.n	80075ac <memset+0x4>

080075b8 <_close_r>:
 80075b8:	b538      	push	{r3, r4, r5, lr}
 80075ba:	4d06      	ldr	r5, [pc, #24]	@ (80075d4 <_close_r+0x1c>)
 80075bc:	2300      	movs	r3, #0
 80075be:	4604      	mov	r4, r0
 80075c0:	4608      	mov	r0, r1
 80075c2:	602b      	str	r3, [r5, #0]
 80075c4:	f7f9 fa5f 	bl	8000a86 <_close>
 80075c8:	1c43      	adds	r3, r0, #1
 80075ca:	d102      	bne.n	80075d2 <_close_r+0x1a>
 80075cc:	682b      	ldr	r3, [r5, #0]
 80075ce:	b103      	cbz	r3, 80075d2 <_close_r+0x1a>
 80075d0:	6023      	str	r3, [r4, #0]
 80075d2:	bd38      	pop	{r3, r4, r5, pc}
 80075d4:	240002c0 	.word	0x240002c0

080075d8 <_lseek_r>:
 80075d8:	b538      	push	{r3, r4, r5, lr}
 80075da:	4d07      	ldr	r5, [pc, #28]	@ (80075f8 <_lseek_r+0x20>)
 80075dc:	4604      	mov	r4, r0
 80075de:	4608      	mov	r0, r1
 80075e0:	4611      	mov	r1, r2
 80075e2:	2200      	movs	r2, #0
 80075e4:	602a      	str	r2, [r5, #0]
 80075e6:	461a      	mov	r2, r3
 80075e8:	f7f9 fa74 	bl	8000ad4 <_lseek>
 80075ec:	1c43      	adds	r3, r0, #1
 80075ee:	d102      	bne.n	80075f6 <_lseek_r+0x1e>
 80075f0:	682b      	ldr	r3, [r5, #0]
 80075f2:	b103      	cbz	r3, 80075f6 <_lseek_r+0x1e>
 80075f4:	6023      	str	r3, [r4, #0]
 80075f6:	bd38      	pop	{r3, r4, r5, pc}
 80075f8:	240002c0 	.word	0x240002c0

080075fc <_read_r>:
 80075fc:	b538      	push	{r3, r4, r5, lr}
 80075fe:	4d07      	ldr	r5, [pc, #28]	@ (800761c <_read_r+0x20>)
 8007600:	4604      	mov	r4, r0
 8007602:	4608      	mov	r0, r1
 8007604:	4611      	mov	r1, r2
 8007606:	2200      	movs	r2, #0
 8007608:	602a      	str	r2, [r5, #0]
 800760a:	461a      	mov	r2, r3
 800760c:	f7f9 fa02 	bl	8000a14 <_read>
 8007610:	1c43      	adds	r3, r0, #1
 8007612:	d102      	bne.n	800761a <_read_r+0x1e>
 8007614:	682b      	ldr	r3, [r5, #0]
 8007616:	b103      	cbz	r3, 800761a <_read_r+0x1e>
 8007618:	6023      	str	r3, [r4, #0]
 800761a:	bd38      	pop	{r3, r4, r5, pc}
 800761c:	240002c0 	.word	0x240002c0

08007620 <_write_r>:
 8007620:	b538      	push	{r3, r4, r5, lr}
 8007622:	4d07      	ldr	r5, [pc, #28]	@ (8007640 <_write_r+0x20>)
 8007624:	4604      	mov	r4, r0
 8007626:	4608      	mov	r0, r1
 8007628:	4611      	mov	r1, r2
 800762a:	2200      	movs	r2, #0
 800762c:	602a      	str	r2, [r5, #0]
 800762e:	461a      	mov	r2, r3
 8007630:	f7f9 fa0d 	bl	8000a4e <_write>
 8007634:	1c43      	adds	r3, r0, #1
 8007636:	d102      	bne.n	800763e <_write_r+0x1e>
 8007638:	682b      	ldr	r3, [r5, #0]
 800763a:	b103      	cbz	r3, 800763e <_write_r+0x1e>
 800763c:	6023      	str	r3, [r4, #0]
 800763e:	bd38      	pop	{r3, r4, r5, pc}
 8007640:	240002c0 	.word	0x240002c0

08007644 <__errno>:
 8007644:	4b01      	ldr	r3, [pc, #4]	@ (800764c <__errno+0x8>)
 8007646:	6818      	ldr	r0, [r3, #0]
 8007648:	4770      	bx	lr
 800764a:	bf00      	nop
 800764c:	2400001c 	.word	0x2400001c

08007650 <__libc_init_array>:
 8007650:	b570      	push	{r4, r5, r6, lr}
 8007652:	4d0d      	ldr	r5, [pc, #52]	@ (8007688 <__libc_init_array+0x38>)
 8007654:	4c0d      	ldr	r4, [pc, #52]	@ (800768c <__libc_init_array+0x3c>)
 8007656:	1b64      	subs	r4, r4, r5
 8007658:	10a4      	asrs	r4, r4, #2
 800765a:	2600      	movs	r6, #0
 800765c:	42a6      	cmp	r6, r4
 800765e:	d109      	bne.n	8007674 <__libc_init_array+0x24>
 8007660:	4d0b      	ldr	r5, [pc, #44]	@ (8007690 <__libc_init_array+0x40>)
 8007662:	4c0c      	ldr	r4, [pc, #48]	@ (8007694 <__libc_init_array+0x44>)
 8007664:	f000 fa54 	bl	8007b10 <_init>
 8007668:	1b64      	subs	r4, r4, r5
 800766a:	10a4      	asrs	r4, r4, #2
 800766c:	2600      	movs	r6, #0
 800766e:	42a6      	cmp	r6, r4
 8007670:	d105      	bne.n	800767e <__libc_init_array+0x2e>
 8007672:	bd70      	pop	{r4, r5, r6, pc}
 8007674:	f855 3b04 	ldr.w	r3, [r5], #4
 8007678:	4798      	blx	r3
 800767a:	3601      	adds	r6, #1
 800767c:	e7ee      	b.n	800765c <__libc_init_array+0xc>
 800767e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007682:	4798      	blx	r3
 8007684:	3601      	adds	r6, #1
 8007686:	e7f2      	b.n	800766e <__libc_init_array+0x1e>
 8007688:	08007b84 	.word	0x08007b84
 800768c:	08007b84 	.word	0x08007b84
 8007690:	08007b84 	.word	0x08007b84
 8007694:	08007b88 	.word	0x08007b88

08007698 <__retarget_lock_init_recursive>:
 8007698:	4770      	bx	lr

0800769a <__retarget_lock_acquire_recursive>:
 800769a:	4770      	bx	lr

0800769c <__retarget_lock_release_recursive>:
 800769c:	4770      	bx	lr
	...

080076a0 <_free_r>:
 80076a0:	b538      	push	{r3, r4, r5, lr}
 80076a2:	4605      	mov	r5, r0
 80076a4:	2900      	cmp	r1, #0
 80076a6:	d041      	beq.n	800772c <_free_r+0x8c>
 80076a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076ac:	1f0c      	subs	r4, r1, #4
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	bfb8      	it	lt
 80076b2:	18e4      	addlt	r4, r4, r3
 80076b4:	f000 f8e0 	bl	8007878 <__malloc_lock>
 80076b8:	4a1d      	ldr	r2, [pc, #116]	@ (8007730 <_free_r+0x90>)
 80076ba:	6813      	ldr	r3, [r2, #0]
 80076bc:	b933      	cbnz	r3, 80076cc <_free_r+0x2c>
 80076be:	6063      	str	r3, [r4, #4]
 80076c0:	6014      	str	r4, [r2, #0]
 80076c2:	4628      	mov	r0, r5
 80076c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076c8:	f000 b8dc 	b.w	8007884 <__malloc_unlock>
 80076cc:	42a3      	cmp	r3, r4
 80076ce:	d908      	bls.n	80076e2 <_free_r+0x42>
 80076d0:	6820      	ldr	r0, [r4, #0]
 80076d2:	1821      	adds	r1, r4, r0
 80076d4:	428b      	cmp	r3, r1
 80076d6:	bf01      	itttt	eq
 80076d8:	6819      	ldreq	r1, [r3, #0]
 80076da:	685b      	ldreq	r3, [r3, #4]
 80076dc:	1809      	addeq	r1, r1, r0
 80076de:	6021      	streq	r1, [r4, #0]
 80076e0:	e7ed      	b.n	80076be <_free_r+0x1e>
 80076e2:	461a      	mov	r2, r3
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	b10b      	cbz	r3, 80076ec <_free_r+0x4c>
 80076e8:	42a3      	cmp	r3, r4
 80076ea:	d9fa      	bls.n	80076e2 <_free_r+0x42>
 80076ec:	6811      	ldr	r1, [r2, #0]
 80076ee:	1850      	adds	r0, r2, r1
 80076f0:	42a0      	cmp	r0, r4
 80076f2:	d10b      	bne.n	800770c <_free_r+0x6c>
 80076f4:	6820      	ldr	r0, [r4, #0]
 80076f6:	4401      	add	r1, r0
 80076f8:	1850      	adds	r0, r2, r1
 80076fa:	4283      	cmp	r3, r0
 80076fc:	6011      	str	r1, [r2, #0]
 80076fe:	d1e0      	bne.n	80076c2 <_free_r+0x22>
 8007700:	6818      	ldr	r0, [r3, #0]
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	6053      	str	r3, [r2, #4]
 8007706:	4408      	add	r0, r1
 8007708:	6010      	str	r0, [r2, #0]
 800770a:	e7da      	b.n	80076c2 <_free_r+0x22>
 800770c:	d902      	bls.n	8007714 <_free_r+0x74>
 800770e:	230c      	movs	r3, #12
 8007710:	602b      	str	r3, [r5, #0]
 8007712:	e7d6      	b.n	80076c2 <_free_r+0x22>
 8007714:	6820      	ldr	r0, [r4, #0]
 8007716:	1821      	adds	r1, r4, r0
 8007718:	428b      	cmp	r3, r1
 800771a:	bf04      	itt	eq
 800771c:	6819      	ldreq	r1, [r3, #0]
 800771e:	685b      	ldreq	r3, [r3, #4]
 8007720:	6063      	str	r3, [r4, #4]
 8007722:	bf04      	itt	eq
 8007724:	1809      	addeq	r1, r1, r0
 8007726:	6021      	streq	r1, [r4, #0]
 8007728:	6054      	str	r4, [r2, #4]
 800772a:	e7ca      	b.n	80076c2 <_free_r+0x22>
 800772c:	bd38      	pop	{r3, r4, r5, pc}
 800772e:	bf00      	nop
 8007730:	240002cc 	.word	0x240002cc

08007734 <sbrk_aligned>:
 8007734:	b570      	push	{r4, r5, r6, lr}
 8007736:	4e0f      	ldr	r6, [pc, #60]	@ (8007774 <sbrk_aligned+0x40>)
 8007738:	460c      	mov	r4, r1
 800773a:	6831      	ldr	r1, [r6, #0]
 800773c:	4605      	mov	r5, r0
 800773e:	b911      	cbnz	r1, 8007746 <sbrk_aligned+0x12>
 8007740:	f000 f9d6 	bl	8007af0 <_sbrk_r>
 8007744:	6030      	str	r0, [r6, #0]
 8007746:	4621      	mov	r1, r4
 8007748:	4628      	mov	r0, r5
 800774a:	f000 f9d1 	bl	8007af0 <_sbrk_r>
 800774e:	1c43      	adds	r3, r0, #1
 8007750:	d103      	bne.n	800775a <sbrk_aligned+0x26>
 8007752:	f04f 34ff 	mov.w	r4, #4294967295
 8007756:	4620      	mov	r0, r4
 8007758:	bd70      	pop	{r4, r5, r6, pc}
 800775a:	1cc4      	adds	r4, r0, #3
 800775c:	f024 0403 	bic.w	r4, r4, #3
 8007760:	42a0      	cmp	r0, r4
 8007762:	d0f8      	beq.n	8007756 <sbrk_aligned+0x22>
 8007764:	1a21      	subs	r1, r4, r0
 8007766:	4628      	mov	r0, r5
 8007768:	f000 f9c2 	bl	8007af0 <_sbrk_r>
 800776c:	3001      	adds	r0, #1
 800776e:	d1f2      	bne.n	8007756 <sbrk_aligned+0x22>
 8007770:	e7ef      	b.n	8007752 <sbrk_aligned+0x1e>
 8007772:	bf00      	nop
 8007774:	240002c8 	.word	0x240002c8

08007778 <_malloc_r>:
 8007778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800777c:	1ccd      	adds	r5, r1, #3
 800777e:	f025 0503 	bic.w	r5, r5, #3
 8007782:	3508      	adds	r5, #8
 8007784:	2d0c      	cmp	r5, #12
 8007786:	bf38      	it	cc
 8007788:	250c      	movcc	r5, #12
 800778a:	2d00      	cmp	r5, #0
 800778c:	4606      	mov	r6, r0
 800778e:	db01      	blt.n	8007794 <_malloc_r+0x1c>
 8007790:	42a9      	cmp	r1, r5
 8007792:	d904      	bls.n	800779e <_malloc_r+0x26>
 8007794:	230c      	movs	r3, #12
 8007796:	6033      	str	r3, [r6, #0]
 8007798:	2000      	movs	r0, #0
 800779a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800779e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007874 <_malloc_r+0xfc>
 80077a2:	f000 f869 	bl	8007878 <__malloc_lock>
 80077a6:	f8d8 3000 	ldr.w	r3, [r8]
 80077aa:	461c      	mov	r4, r3
 80077ac:	bb44      	cbnz	r4, 8007800 <_malloc_r+0x88>
 80077ae:	4629      	mov	r1, r5
 80077b0:	4630      	mov	r0, r6
 80077b2:	f7ff ffbf 	bl	8007734 <sbrk_aligned>
 80077b6:	1c43      	adds	r3, r0, #1
 80077b8:	4604      	mov	r4, r0
 80077ba:	d158      	bne.n	800786e <_malloc_r+0xf6>
 80077bc:	f8d8 4000 	ldr.w	r4, [r8]
 80077c0:	4627      	mov	r7, r4
 80077c2:	2f00      	cmp	r7, #0
 80077c4:	d143      	bne.n	800784e <_malloc_r+0xd6>
 80077c6:	2c00      	cmp	r4, #0
 80077c8:	d04b      	beq.n	8007862 <_malloc_r+0xea>
 80077ca:	6823      	ldr	r3, [r4, #0]
 80077cc:	4639      	mov	r1, r7
 80077ce:	4630      	mov	r0, r6
 80077d0:	eb04 0903 	add.w	r9, r4, r3
 80077d4:	f000 f98c 	bl	8007af0 <_sbrk_r>
 80077d8:	4581      	cmp	r9, r0
 80077da:	d142      	bne.n	8007862 <_malloc_r+0xea>
 80077dc:	6821      	ldr	r1, [r4, #0]
 80077de:	1a6d      	subs	r5, r5, r1
 80077e0:	4629      	mov	r1, r5
 80077e2:	4630      	mov	r0, r6
 80077e4:	f7ff ffa6 	bl	8007734 <sbrk_aligned>
 80077e8:	3001      	adds	r0, #1
 80077ea:	d03a      	beq.n	8007862 <_malloc_r+0xea>
 80077ec:	6823      	ldr	r3, [r4, #0]
 80077ee:	442b      	add	r3, r5
 80077f0:	6023      	str	r3, [r4, #0]
 80077f2:	f8d8 3000 	ldr.w	r3, [r8]
 80077f6:	685a      	ldr	r2, [r3, #4]
 80077f8:	bb62      	cbnz	r2, 8007854 <_malloc_r+0xdc>
 80077fa:	f8c8 7000 	str.w	r7, [r8]
 80077fe:	e00f      	b.n	8007820 <_malloc_r+0xa8>
 8007800:	6822      	ldr	r2, [r4, #0]
 8007802:	1b52      	subs	r2, r2, r5
 8007804:	d420      	bmi.n	8007848 <_malloc_r+0xd0>
 8007806:	2a0b      	cmp	r2, #11
 8007808:	d917      	bls.n	800783a <_malloc_r+0xc2>
 800780a:	1961      	adds	r1, r4, r5
 800780c:	42a3      	cmp	r3, r4
 800780e:	6025      	str	r5, [r4, #0]
 8007810:	bf18      	it	ne
 8007812:	6059      	strne	r1, [r3, #4]
 8007814:	6863      	ldr	r3, [r4, #4]
 8007816:	bf08      	it	eq
 8007818:	f8c8 1000 	streq.w	r1, [r8]
 800781c:	5162      	str	r2, [r4, r5]
 800781e:	604b      	str	r3, [r1, #4]
 8007820:	4630      	mov	r0, r6
 8007822:	f000 f82f 	bl	8007884 <__malloc_unlock>
 8007826:	f104 000b 	add.w	r0, r4, #11
 800782a:	1d23      	adds	r3, r4, #4
 800782c:	f020 0007 	bic.w	r0, r0, #7
 8007830:	1ac2      	subs	r2, r0, r3
 8007832:	bf1c      	itt	ne
 8007834:	1a1b      	subne	r3, r3, r0
 8007836:	50a3      	strne	r3, [r4, r2]
 8007838:	e7af      	b.n	800779a <_malloc_r+0x22>
 800783a:	6862      	ldr	r2, [r4, #4]
 800783c:	42a3      	cmp	r3, r4
 800783e:	bf0c      	ite	eq
 8007840:	f8c8 2000 	streq.w	r2, [r8]
 8007844:	605a      	strne	r2, [r3, #4]
 8007846:	e7eb      	b.n	8007820 <_malloc_r+0xa8>
 8007848:	4623      	mov	r3, r4
 800784a:	6864      	ldr	r4, [r4, #4]
 800784c:	e7ae      	b.n	80077ac <_malloc_r+0x34>
 800784e:	463c      	mov	r4, r7
 8007850:	687f      	ldr	r7, [r7, #4]
 8007852:	e7b6      	b.n	80077c2 <_malloc_r+0x4a>
 8007854:	461a      	mov	r2, r3
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	42a3      	cmp	r3, r4
 800785a:	d1fb      	bne.n	8007854 <_malloc_r+0xdc>
 800785c:	2300      	movs	r3, #0
 800785e:	6053      	str	r3, [r2, #4]
 8007860:	e7de      	b.n	8007820 <_malloc_r+0xa8>
 8007862:	230c      	movs	r3, #12
 8007864:	6033      	str	r3, [r6, #0]
 8007866:	4630      	mov	r0, r6
 8007868:	f000 f80c 	bl	8007884 <__malloc_unlock>
 800786c:	e794      	b.n	8007798 <_malloc_r+0x20>
 800786e:	6005      	str	r5, [r0, #0]
 8007870:	e7d6      	b.n	8007820 <_malloc_r+0xa8>
 8007872:	bf00      	nop
 8007874:	240002cc 	.word	0x240002cc

08007878 <__malloc_lock>:
 8007878:	4801      	ldr	r0, [pc, #4]	@ (8007880 <__malloc_lock+0x8>)
 800787a:	f7ff bf0e 	b.w	800769a <__retarget_lock_acquire_recursive>
 800787e:	bf00      	nop
 8007880:	240002c4 	.word	0x240002c4

08007884 <__malloc_unlock>:
 8007884:	4801      	ldr	r0, [pc, #4]	@ (800788c <__malloc_unlock+0x8>)
 8007886:	f7ff bf09 	b.w	800769c <__retarget_lock_release_recursive>
 800788a:	bf00      	nop
 800788c:	240002c4 	.word	0x240002c4

08007890 <__sflush_r>:
 8007890:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007898:	0716      	lsls	r6, r2, #28
 800789a:	4605      	mov	r5, r0
 800789c:	460c      	mov	r4, r1
 800789e:	d454      	bmi.n	800794a <__sflush_r+0xba>
 80078a0:	684b      	ldr	r3, [r1, #4]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	dc02      	bgt.n	80078ac <__sflush_r+0x1c>
 80078a6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	dd48      	ble.n	800793e <__sflush_r+0xae>
 80078ac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80078ae:	2e00      	cmp	r6, #0
 80078b0:	d045      	beq.n	800793e <__sflush_r+0xae>
 80078b2:	2300      	movs	r3, #0
 80078b4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80078b8:	682f      	ldr	r7, [r5, #0]
 80078ba:	6a21      	ldr	r1, [r4, #32]
 80078bc:	602b      	str	r3, [r5, #0]
 80078be:	d030      	beq.n	8007922 <__sflush_r+0x92>
 80078c0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80078c2:	89a3      	ldrh	r3, [r4, #12]
 80078c4:	0759      	lsls	r1, r3, #29
 80078c6:	d505      	bpl.n	80078d4 <__sflush_r+0x44>
 80078c8:	6863      	ldr	r3, [r4, #4]
 80078ca:	1ad2      	subs	r2, r2, r3
 80078cc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80078ce:	b10b      	cbz	r3, 80078d4 <__sflush_r+0x44>
 80078d0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80078d2:	1ad2      	subs	r2, r2, r3
 80078d4:	2300      	movs	r3, #0
 80078d6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80078d8:	6a21      	ldr	r1, [r4, #32]
 80078da:	4628      	mov	r0, r5
 80078dc:	47b0      	blx	r6
 80078de:	1c43      	adds	r3, r0, #1
 80078e0:	89a3      	ldrh	r3, [r4, #12]
 80078e2:	d106      	bne.n	80078f2 <__sflush_r+0x62>
 80078e4:	6829      	ldr	r1, [r5, #0]
 80078e6:	291d      	cmp	r1, #29
 80078e8:	d82b      	bhi.n	8007942 <__sflush_r+0xb2>
 80078ea:	4a2a      	ldr	r2, [pc, #168]	@ (8007994 <__sflush_r+0x104>)
 80078ec:	40ca      	lsrs	r2, r1
 80078ee:	07d6      	lsls	r6, r2, #31
 80078f0:	d527      	bpl.n	8007942 <__sflush_r+0xb2>
 80078f2:	2200      	movs	r2, #0
 80078f4:	6062      	str	r2, [r4, #4]
 80078f6:	04d9      	lsls	r1, r3, #19
 80078f8:	6922      	ldr	r2, [r4, #16]
 80078fa:	6022      	str	r2, [r4, #0]
 80078fc:	d504      	bpl.n	8007908 <__sflush_r+0x78>
 80078fe:	1c42      	adds	r2, r0, #1
 8007900:	d101      	bne.n	8007906 <__sflush_r+0x76>
 8007902:	682b      	ldr	r3, [r5, #0]
 8007904:	b903      	cbnz	r3, 8007908 <__sflush_r+0x78>
 8007906:	6560      	str	r0, [r4, #84]	@ 0x54
 8007908:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800790a:	602f      	str	r7, [r5, #0]
 800790c:	b1b9      	cbz	r1, 800793e <__sflush_r+0xae>
 800790e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007912:	4299      	cmp	r1, r3
 8007914:	d002      	beq.n	800791c <__sflush_r+0x8c>
 8007916:	4628      	mov	r0, r5
 8007918:	f7ff fec2 	bl	80076a0 <_free_r>
 800791c:	2300      	movs	r3, #0
 800791e:	6363      	str	r3, [r4, #52]	@ 0x34
 8007920:	e00d      	b.n	800793e <__sflush_r+0xae>
 8007922:	2301      	movs	r3, #1
 8007924:	4628      	mov	r0, r5
 8007926:	47b0      	blx	r6
 8007928:	4602      	mov	r2, r0
 800792a:	1c50      	adds	r0, r2, #1
 800792c:	d1c9      	bne.n	80078c2 <__sflush_r+0x32>
 800792e:	682b      	ldr	r3, [r5, #0]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d0c6      	beq.n	80078c2 <__sflush_r+0x32>
 8007934:	2b1d      	cmp	r3, #29
 8007936:	d001      	beq.n	800793c <__sflush_r+0xac>
 8007938:	2b16      	cmp	r3, #22
 800793a:	d11e      	bne.n	800797a <__sflush_r+0xea>
 800793c:	602f      	str	r7, [r5, #0]
 800793e:	2000      	movs	r0, #0
 8007940:	e022      	b.n	8007988 <__sflush_r+0xf8>
 8007942:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007946:	b21b      	sxth	r3, r3
 8007948:	e01b      	b.n	8007982 <__sflush_r+0xf2>
 800794a:	690f      	ldr	r7, [r1, #16]
 800794c:	2f00      	cmp	r7, #0
 800794e:	d0f6      	beq.n	800793e <__sflush_r+0xae>
 8007950:	0793      	lsls	r3, r2, #30
 8007952:	680e      	ldr	r6, [r1, #0]
 8007954:	bf08      	it	eq
 8007956:	694b      	ldreq	r3, [r1, #20]
 8007958:	600f      	str	r7, [r1, #0]
 800795a:	bf18      	it	ne
 800795c:	2300      	movne	r3, #0
 800795e:	eba6 0807 	sub.w	r8, r6, r7
 8007962:	608b      	str	r3, [r1, #8]
 8007964:	f1b8 0f00 	cmp.w	r8, #0
 8007968:	dde9      	ble.n	800793e <__sflush_r+0xae>
 800796a:	6a21      	ldr	r1, [r4, #32]
 800796c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800796e:	4643      	mov	r3, r8
 8007970:	463a      	mov	r2, r7
 8007972:	4628      	mov	r0, r5
 8007974:	47b0      	blx	r6
 8007976:	2800      	cmp	r0, #0
 8007978:	dc08      	bgt.n	800798c <__sflush_r+0xfc>
 800797a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800797e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007982:	81a3      	strh	r3, [r4, #12]
 8007984:	f04f 30ff 	mov.w	r0, #4294967295
 8007988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800798c:	4407      	add	r7, r0
 800798e:	eba8 0800 	sub.w	r8, r8, r0
 8007992:	e7e7      	b.n	8007964 <__sflush_r+0xd4>
 8007994:	20400001 	.word	0x20400001

08007998 <_fflush_r>:
 8007998:	b538      	push	{r3, r4, r5, lr}
 800799a:	690b      	ldr	r3, [r1, #16]
 800799c:	4605      	mov	r5, r0
 800799e:	460c      	mov	r4, r1
 80079a0:	b913      	cbnz	r3, 80079a8 <_fflush_r+0x10>
 80079a2:	2500      	movs	r5, #0
 80079a4:	4628      	mov	r0, r5
 80079a6:	bd38      	pop	{r3, r4, r5, pc}
 80079a8:	b118      	cbz	r0, 80079b2 <_fflush_r+0x1a>
 80079aa:	6a03      	ldr	r3, [r0, #32]
 80079ac:	b90b      	cbnz	r3, 80079b2 <_fflush_r+0x1a>
 80079ae:	f7ff fc8f 	bl	80072d0 <__sinit>
 80079b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d0f3      	beq.n	80079a2 <_fflush_r+0xa>
 80079ba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80079bc:	07d0      	lsls	r0, r2, #31
 80079be:	d404      	bmi.n	80079ca <_fflush_r+0x32>
 80079c0:	0599      	lsls	r1, r3, #22
 80079c2:	d402      	bmi.n	80079ca <_fflush_r+0x32>
 80079c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80079c6:	f7ff fe68 	bl	800769a <__retarget_lock_acquire_recursive>
 80079ca:	4628      	mov	r0, r5
 80079cc:	4621      	mov	r1, r4
 80079ce:	f7ff ff5f 	bl	8007890 <__sflush_r>
 80079d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80079d4:	07da      	lsls	r2, r3, #31
 80079d6:	4605      	mov	r5, r0
 80079d8:	d4e4      	bmi.n	80079a4 <_fflush_r+0xc>
 80079da:	89a3      	ldrh	r3, [r4, #12]
 80079dc:	059b      	lsls	r3, r3, #22
 80079de:	d4e1      	bmi.n	80079a4 <_fflush_r+0xc>
 80079e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80079e2:	f7ff fe5b 	bl	800769c <__retarget_lock_release_recursive>
 80079e6:	e7dd      	b.n	80079a4 <_fflush_r+0xc>

080079e8 <__swhatbuf_r>:
 80079e8:	b570      	push	{r4, r5, r6, lr}
 80079ea:	460c      	mov	r4, r1
 80079ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079f0:	2900      	cmp	r1, #0
 80079f2:	b096      	sub	sp, #88	@ 0x58
 80079f4:	4615      	mov	r5, r2
 80079f6:	461e      	mov	r6, r3
 80079f8:	da0d      	bge.n	8007a16 <__swhatbuf_r+0x2e>
 80079fa:	89a3      	ldrh	r3, [r4, #12]
 80079fc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007a00:	f04f 0100 	mov.w	r1, #0
 8007a04:	bf14      	ite	ne
 8007a06:	2340      	movne	r3, #64	@ 0x40
 8007a08:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007a0c:	2000      	movs	r0, #0
 8007a0e:	6031      	str	r1, [r6, #0]
 8007a10:	602b      	str	r3, [r5, #0]
 8007a12:	b016      	add	sp, #88	@ 0x58
 8007a14:	bd70      	pop	{r4, r5, r6, pc}
 8007a16:	466a      	mov	r2, sp
 8007a18:	f000 f848 	bl	8007aac <_fstat_r>
 8007a1c:	2800      	cmp	r0, #0
 8007a1e:	dbec      	blt.n	80079fa <__swhatbuf_r+0x12>
 8007a20:	9901      	ldr	r1, [sp, #4]
 8007a22:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007a26:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007a2a:	4259      	negs	r1, r3
 8007a2c:	4159      	adcs	r1, r3
 8007a2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007a32:	e7eb      	b.n	8007a0c <__swhatbuf_r+0x24>

08007a34 <__smakebuf_r>:
 8007a34:	898b      	ldrh	r3, [r1, #12]
 8007a36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a38:	079d      	lsls	r5, r3, #30
 8007a3a:	4606      	mov	r6, r0
 8007a3c:	460c      	mov	r4, r1
 8007a3e:	d507      	bpl.n	8007a50 <__smakebuf_r+0x1c>
 8007a40:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007a44:	6023      	str	r3, [r4, #0]
 8007a46:	6123      	str	r3, [r4, #16]
 8007a48:	2301      	movs	r3, #1
 8007a4a:	6163      	str	r3, [r4, #20]
 8007a4c:	b003      	add	sp, #12
 8007a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a50:	ab01      	add	r3, sp, #4
 8007a52:	466a      	mov	r2, sp
 8007a54:	f7ff ffc8 	bl	80079e8 <__swhatbuf_r>
 8007a58:	9f00      	ldr	r7, [sp, #0]
 8007a5a:	4605      	mov	r5, r0
 8007a5c:	4639      	mov	r1, r7
 8007a5e:	4630      	mov	r0, r6
 8007a60:	f7ff fe8a 	bl	8007778 <_malloc_r>
 8007a64:	b948      	cbnz	r0, 8007a7a <__smakebuf_r+0x46>
 8007a66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a6a:	059a      	lsls	r2, r3, #22
 8007a6c:	d4ee      	bmi.n	8007a4c <__smakebuf_r+0x18>
 8007a6e:	f023 0303 	bic.w	r3, r3, #3
 8007a72:	f043 0302 	orr.w	r3, r3, #2
 8007a76:	81a3      	strh	r3, [r4, #12]
 8007a78:	e7e2      	b.n	8007a40 <__smakebuf_r+0xc>
 8007a7a:	89a3      	ldrh	r3, [r4, #12]
 8007a7c:	6020      	str	r0, [r4, #0]
 8007a7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a82:	81a3      	strh	r3, [r4, #12]
 8007a84:	9b01      	ldr	r3, [sp, #4]
 8007a86:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007a8a:	b15b      	cbz	r3, 8007aa4 <__smakebuf_r+0x70>
 8007a8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a90:	4630      	mov	r0, r6
 8007a92:	f000 f81d 	bl	8007ad0 <_isatty_r>
 8007a96:	b128      	cbz	r0, 8007aa4 <__smakebuf_r+0x70>
 8007a98:	89a3      	ldrh	r3, [r4, #12]
 8007a9a:	f023 0303 	bic.w	r3, r3, #3
 8007a9e:	f043 0301 	orr.w	r3, r3, #1
 8007aa2:	81a3      	strh	r3, [r4, #12]
 8007aa4:	89a3      	ldrh	r3, [r4, #12]
 8007aa6:	431d      	orrs	r5, r3
 8007aa8:	81a5      	strh	r5, [r4, #12]
 8007aaa:	e7cf      	b.n	8007a4c <__smakebuf_r+0x18>

08007aac <_fstat_r>:
 8007aac:	b538      	push	{r3, r4, r5, lr}
 8007aae:	4d07      	ldr	r5, [pc, #28]	@ (8007acc <_fstat_r+0x20>)
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	4604      	mov	r4, r0
 8007ab4:	4608      	mov	r0, r1
 8007ab6:	4611      	mov	r1, r2
 8007ab8:	602b      	str	r3, [r5, #0]
 8007aba:	f7f8 fff0 	bl	8000a9e <_fstat>
 8007abe:	1c43      	adds	r3, r0, #1
 8007ac0:	d102      	bne.n	8007ac8 <_fstat_r+0x1c>
 8007ac2:	682b      	ldr	r3, [r5, #0]
 8007ac4:	b103      	cbz	r3, 8007ac8 <_fstat_r+0x1c>
 8007ac6:	6023      	str	r3, [r4, #0]
 8007ac8:	bd38      	pop	{r3, r4, r5, pc}
 8007aca:	bf00      	nop
 8007acc:	240002c0 	.word	0x240002c0

08007ad0 <_isatty_r>:
 8007ad0:	b538      	push	{r3, r4, r5, lr}
 8007ad2:	4d06      	ldr	r5, [pc, #24]	@ (8007aec <_isatty_r+0x1c>)
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	4604      	mov	r4, r0
 8007ad8:	4608      	mov	r0, r1
 8007ada:	602b      	str	r3, [r5, #0]
 8007adc:	f7f8 ffef 	bl	8000abe <_isatty>
 8007ae0:	1c43      	adds	r3, r0, #1
 8007ae2:	d102      	bne.n	8007aea <_isatty_r+0x1a>
 8007ae4:	682b      	ldr	r3, [r5, #0]
 8007ae6:	b103      	cbz	r3, 8007aea <_isatty_r+0x1a>
 8007ae8:	6023      	str	r3, [r4, #0]
 8007aea:	bd38      	pop	{r3, r4, r5, pc}
 8007aec:	240002c0 	.word	0x240002c0

08007af0 <_sbrk_r>:
 8007af0:	b538      	push	{r3, r4, r5, lr}
 8007af2:	4d06      	ldr	r5, [pc, #24]	@ (8007b0c <_sbrk_r+0x1c>)
 8007af4:	2300      	movs	r3, #0
 8007af6:	4604      	mov	r4, r0
 8007af8:	4608      	mov	r0, r1
 8007afa:	602b      	str	r3, [r5, #0]
 8007afc:	f7f8 fff8 	bl	8000af0 <_sbrk>
 8007b00:	1c43      	adds	r3, r0, #1
 8007b02:	d102      	bne.n	8007b0a <_sbrk_r+0x1a>
 8007b04:	682b      	ldr	r3, [r5, #0]
 8007b06:	b103      	cbz	r3, 8007b0a <_sbrk_r+0x1a>
 8007b08:	6023      	str	r3, [r4, #0]
 8007b0a:	bd38      	pop	{r3, r4, r5, pc}
 8007b0c:	240002c0 	.word	0x240002c0

08007b10 <_init>:
 8007b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b12:	bf00      	nop
 8007b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b16:	bc08      	pop	{r3}
 8007b18:	469e      	mov	lr, r3
 8007b1a:	4770      	bx	lr

08007b1c <_fini>:
 8007b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b1e:	bf00      	nop
 8007b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b22:	bc08      	pop	{r3}
 8007b24:	469e      	mov	lr, r3
 8007b26:	4770      	bx	lr
