
13.ATIM-Output compare.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a5c  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08008cf4  08008cf4  00009cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008d40  08008d40  00009d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008d48  08008d48  00009d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08008d4c  08008d4c  00009d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  24000000  08008d50  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003e0  2400006c  08008dbc  0000a06c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400044c  08008dbc  0000a44c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000a06c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00018974  00000000  00000000  0000a09a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003331  00000000  00000000  00022a0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001290  00000000  00000000  00025d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000e59  00000000  00000000  00026fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a2b2  00000000  00000000  00027e29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001f078  00000000  00000000  000620db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00168929  00000000  00000000  00081153  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001e9a7c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005264  00000000  00000000  001e9ac0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005a  00000000  00000000  001eed24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2400006c 	.word	0x2400006c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08008cdc 	.word	0x08008cdc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000070 	.word	0x24000070
 80002d4:	08008cdc 	.word	0x08008cdc

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b988 	b.w	8000600 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	468e      	mov	lr, r1
 8000310:	4604      	mov	r4, r0
 8000312:	4688      	mov	r8, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d962      	bls.n	80003e4 <__udivmoddi4+0xdc>
 800031e:	fab2 f682 	clz	r6, r2
 8000322:	b14e      	cbz	r6, 8000338 <__udivmoddi4+0x30>
 8000324:	f1c6 0320 	rsb	r3, r6, #32
 8000328:	fa01 f806 	lsl.w	r8, r1, r6
 800032c:	fa20 f303 	lsr.w	r3, r0, r3
 8000330:	40b7      	lsls	r7, r6
 8000332:	ea43 0808 	orr.w	r8, r3, r8
 8000336:	40b4      	lsls	r4, r6
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	fbb8 f1fe 	udiv	r1, r8, lr
 8000344:	0c23      	lsrs	r3, r4, #16
 8000346:	fb0e 8811 	mls	r8, lr, r1, r8
 800034a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034e:	fb01 f20c 	mul.w	r2, r1, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d909      	bls.n	800036a <__udivmoddi4+0x62>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f101 30ff 	add.w	r0, r1, #4294967295
 800035c:	f080 80ea 	bcs.w	8000534 <__udivmoddi4+0x22c>
 8000360:	429a      	cmp	r2, r3
 8000362:	f240 80e7 	bls.w	8000534 <__udivmoddi4+0x22c>
 8000366:	3902      	subs	r1, #2
 8000368:	443b      	add	r3, r7
 800036a:	1a9a      	subs	r2, r3, r2
 800036c:	b2a3      	uxth	r3, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800037a:	fb00 fc0c 	mul.w	ip, r0, ip
 800037e:	459c      	cmp	ip, r3
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x8e>
 8000382:	18fb      	adds	r3, r7, r3
 8000384:	f100 32ff 	add.w	r2, r0, #4294967295
 8000388:	f080 80d6 	bcs.w	8000538 <__udivmoddi4+0x230>
 800038c:	459c      	cmp	ip, r3
 800038e:	f240 80d3 	bls.w	8000538 <__udivmoddi4+0x230>
 8000392:	443b      	add	r3, r7
 8000394:	3802      	subs	r0, #2
 8000396:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039a:	eba3 030c 	sub.w	r3, r3, ip
 800039e:	2100      	movs	r1, #0
 80003a0:	b11d      	cbz	r5, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40f3      	lsrs	r3, r6
 80003a4:	2200      	movs	r2, #0
 80003a6:	e9c5 3200 	strd	r3, r2, [r5]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d905      	bls.n	80003be <__udivmoddi4+0xb6>
 80003b2:	b10d      	cbz	r5, 80003b8 <__udivmoddi4+0xb0>
 80003b4:	e9c5 0100 	strd	r0, r1, [r5]
 80003b8:	2100      	movs	r1, #0
 80003ba:	4608      	mov	r0, r1
 80003bc:	e7f5      	b.n	80003aa <__udivmoddi4+0xa2>
 80003be:	fab3 f183 	clz	r1, r3
 80003c2:	2900      	cmp	r1, #0
 80003c4:	d146      	bne.n	8000454 <__udivmoddi4+0x14c>
 80003c6:	4573      	cmp	r3, lr
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xc8>
 80003ca:	4282      	cmp	r2, r0
 80003cc:	f200 8105 	bhi.w	80005da <__udivmoddi4+0x2d2>
 80003d0:	1a84      	subs	r4, r0, r2
 80003d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	4690      	mov	r8, r2
 80003da:	2d00      	cmp	r5, #0
 80003dc:	d0e5      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003de:	e9c5 4800 	strd	r4, r8, [r5]
 80003e2:	e7e2      	b.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	2a00      	cmp	r2, #0
 80003e6:	f000 8090 	beq.w	800050a <__udivmoddi4+0x202>
 80003ea:	fab2 f682 	clz	r6, r2
 80003ee:	2e00      	cmp	r6, #0
 80003f0:	f040 80a4 	bne.w	800053c <__udivmoddi4+0x234>
 80003f4:	1a8a      	subs	r2, r1, r2
 80003f6:	0c03      	lsrs	r3, r0, #16
 80003f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fc:	b280      	uxth	r0, r0
 80003fe:	b2bc      	uxth	r4, r7
 8000400:	2101      	movs	r1, #1
 8000402:	fbb2 fcfe 	udiv	ip, r2, lr
 8000406:	fb0e 221c 	mls	r2, lr, ip, r2
 800040a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800040e:	fb04 f20c 	mul.w	r2, r4, ip
 8000412:	429a      	cmp	r2, r3
 8000414:	d907      	bls.n	8000426 <__udivmoddi4+0x11e>
 8000416:	18fb      	adds	r3, r7, r3
 8000418:	f10c 38ff 	add.w	r8, ip, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x11c>
 800041e:	429a      	cmp	r2, r3
 8000420:	f200 80e0 	bhi.w	80005e4 <__udivmoddi4+0x2dc>
 8000424:	46c4      	mov	ip, r8
 8000426:	1a9b      	subs	r3, r3, r2
 8000428:	fbb3 f2fe 	udiv	r2, r3, lr
 800042c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000430:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000434:	fb02 f404 	mul.w	r4, r2, r4
 8000438:	429c      	cmp	r4, r3
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x144>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x142>
 8000444:	429c      	cmp	r4, r3
 8000446:	f200 80ca 	bhi.w	80005de <__udivmoddi4+0x2d6>
 800044a:	4602      	mov	r2, r0
 800044c:	1b1b      	subs	r3, r3, r4
 800044e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000452:	e7a5      	b.n	80003a0 <__udivmoddi4+0x98>
 8000454:	f1c1 0620 	rsb	r6, r1, #32
 8000458:	408b      	lsls	r3, r1
 800045a:	fa22 f706 	lsr.w	r7, r2, r6
 800045e:	431f      	orrs	r7, r3
 8000460:	fa0e f401 	lsl.w	r4, lr, r1
 8000464:	fa20 f306 	lsr.w	r3, r0, r6
 8000468:	fa2e fe06 	lsr.w	lr, lr, r6
 800046c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000470:	4323      	orrs	r3, r4
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	fa1f fc87 	uxth.w	ip, r7
 800047a:	fbbe f0f9 	udiv	r0, lr, r9
 800047e:	0c1c      	lsrs	r4, r3, #16
 8000480:	fb09 ee10 	mls	lr, r9, r0, lr
 8000484:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000488:	fb00 fe0c 	mul.w	lr, r0, ip
 800048c:	45a6      	cmp	lr, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	d909      	bls.n	80004a8 <__udivmoddi4+0x1a0>
 8000494:	193c      	adds	r4, r7, r4
 8000496:	f100 3aff 	add.w	sl, r0, #4294967295
 800049a:	f080 809c 	bcs.w	80005d6 <__udivmoddi4+0x2ce>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f240 8099 	bls.w	80005d6 <__udivmoddi4+0x2ce>
 80004a4:	3802      	subs	r0, #2
 80004a6:	443c      	add	r4, r7
 80004a8:	eba4 040e 	sub.w	r4, r4, lr
 80004ac:	fa1f fe83 	uxth.w	lr, r3
 80004b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b4:	fb09 4413 	mls	r4, r9, r3, r4
 80004b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c0:	45a4      	cmp	ip, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x1ce>
 80004c4:	193c      	adds	r4, r7, r4
 80004c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80004ca:	f080 8082 	bcs.w	80005d2 <__udivmoddi4+0x2ca>
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d97f      	bls.n	80005d2 <__udivmoddi4+0x2ca>
 80004d2:	3b02      	subs	r3, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	fba0 ec02 	umull	lr, ip, r0, r2
 80004e2:	4564      	cmp	r4, ip
 80004e4:	4673      	mov	r3, lr
 80004e6:	46e1      	mov	r9, ip
 80004e8:	d362      	bcc.n	80005b0 <__udivmoddi4+0x2a8>
 80004ea:	d05f      	beq.n	80005ac <__udivmoddi4+0x2a4>
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x1fe>
 80004ee:	ebb8 0203 	subs.w	r2, r8, r3
 80004f2:	eb64 0409 	sbc.w	r4, r4, r9
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	431e      	orrs	r6, r3
 8000500:	40cc      	lsrs	r4, r1
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e74f      	b.n	80003aa <__udivmoddi4+0xa2>
 800050a:	fbb1 fcf2 	udiv	ip, r1, r2
 800050e:	0c01      	lsrs	r1, r0, #16
 8000510:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000514:	b280      	uxth	r0, r0
 8000516:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800051a:	463b      	mov	r3, r7
 800051c:	4638      	mov	r0, r7
 800051e:	463c      	mov	r4, r7
 8000520:	46b8      	mov	r8, r7
 8000522:	46be      	mov	lr, r7
 8000524:	2620      	movs	r6, #32
 8000526:	fbb1 f1f7 	udiv	r1, r1, r7
 800052a:	eba2 0208 	sub.w	r2, r2, r8
 800052e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000532:	e766      	b.n	8000402 <__udivmoddi4+0xfa>
 8000534:	4601      	mov	r1, r0
 8000536:	e718      	b.n	800036a <__udivmoddi4+0x62>
 8000538:	4610      	mov	r0, r2
 800053a:	e72c      	b.n	8000396 <__udivmoddi4+0x8e>
 800053c:	f1c6 0220 	rsb	r2, r6, #32
 8000540:	fa2e f302 	lsr.w	r3, lr, r2
 8000544:	40b7      	lsls	r7, r6
 8000546:	40b1      	lsls	r1, r6
 8000548:	fa20 f202 	lsr.w	r2, r0, r2
 800054c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000550:	430a      	orrs	r2, r1
 8000552:	fbb3 f8fe 	udiv	r8, r3, lr
 8000556:	b2bc      	uxth	r4, r7
 8000558:	fb0e 3318 	mls	r3, lr, r8, r3
 800055c:	0c11      	lsrs	r1, r2, #16
 800055e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000562:	fb08 f904 	mul.w	r9, r8, r4
 8000566:	40b0      	lsls	r0, r6
 8000568:	4589      	cmp	r9, r1
 800056a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800056e:	b280      	uxth	r0, r0
 8000570:	d93e      	bls.n	80005f0 <__udivmoddi4+0x2e8>
 8000572:	1879      	adds	r1, r7, r1
 8000574:	f108 3cff 	add.w	ip, r8, #4294967295
 8000578:	d201      	bcs.n	800057e <__udivmoddi4+0x276>
 800057a:	4589      	cmp	r9, r1
 800057c:	d81f      	bhi.n	80005be <__udivmoddi4+0x2b6>
 800057e:	eba1 0109 	sub.w	r1, r1, r9
 8000582:	fbb1 f9fe 	udiv	r9, r1, lr
 8000586:	fb09 f804 	mul.w	r8, r9, r4
 800058a:	fb0e 1119 	mls	r1, lr, r9, r1
 800058e:	b292      	uxth	r2, r2
 8000590:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000594:	4542      	cmp	r2, r8
 8000596:	d229      	bcs.n	80005ec <__udivmoddi4+0x2e4>
 8000598:	18ba      	adds	r2, r7, r2
 800059a:	f109 31ff 	add.w	r1, r9, #4294967295
 800059e:	d2c4      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a0:	4542      	cmp	r2, r8
 80005a2:	d2c2      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a4:	f1a9 0102 	sub.w	r1, r9, #2
 80005a8:	443a      	add	r2, r7
 80005aa:	e7be      	b.n	800052a <__udivmoddi4+0x222>
 80005ac:	45f0      	cmp	r8, lr
 80005ae:	d29d      	bcs.n	80004ec <__udivmoddi4+0x1e4>
 80005b0:	ebbe 0302 	subs.w	r3, lr, r2
 80005b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005b8:	3801      	subs	r0, #1
 80005ba:	46e1      	mov	r9, ip
 80005bc:	e796      	b.n	80004ec <__udivmoddi4+0x1e4>
 80005be:	eba7 0909 	sub.w	r9, r7, r9
 80005c2:	4449      	add	r1, r9
 80005c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80005c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80005cc:	fb09 f804 	mul.w	r8, r9, r4
 80005d0:	e7db      	b.n	800058a <__udivmoddi4+0x282>
 80005d2:	4673      	mov	r3, lr
 80005d4:	e77f      	b.n	80004d6 <__udivmoddi4+0x1ce>
 80005d6:	4650      	mov	r0, sl
 80005d8:	e766      	b.n	80004a8 <__udivmoddi4+0x1a0>
 80005da:	4608      	mov	r0, r1
 80005dc:	e6fd      	b.n	80003da <__udivmoddi4+0xd2>
 80005de:	443b      	add	r3, r7
 80005e0:	3a02      	subs	r2, #2
 80005e2:	e733      	b.n	800044c <__udivmoddi4+0x144>
 80005e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e8:	443b      	add	r3, r7
 80005ea:	e71c      	b.n	8000426 <__udivmoddi4+0x11e>
 80005ec:	4649      	mov	r1, r9
 80005ee:	e79c      	b.n	800052a <__udivmoddi4+0x222>
 80005f0:	eba1 0109 	sub.w	r1, r1, r9
 80005f4:	46c4      	mov	ip, r8
 80005f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80005fa:	fb09 f804 	mul.w	r8, r9, r4
 80005fe:	e7c4      	b.n	800058a <__udivmoddi4+0x282>

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <MX_BEEP_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_BEEP_GPIO_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b086      	sub	sp, #24
 8000608:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
 8000616:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000618:	4b12      	ldr	r3, [pc, #72]	@ (8000664 <MX_BEEP_GPIO_Init+0x60>)
 800061a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800061e:	4a11      	ldr	r2, [pc, #68]	@ (8000664 <MX_BEEP_GPIO_Init+0x60>)
 8000620:	f043 0310 	orr.w	r3, r3, #16
 8000624:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000628:	4b0e      	ldr	r3, [pc, #56]	@ (8000664 <MX_BEEP_GPIO_Init+0x60>)
 800062a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800062e:	f003 0310 	and.w	r3, r3, #16
 8000632:	603b      	str	r3, [r7, #0]
 8000634:	683b      	ldr	r3, [r7, #0]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BEEP_GPIO_Port, BEEP_Pin, GPIO_PIN_RESET);
 8000636:	2200      	movs	r2, #0
 8000638:	2110      	movs	r1, #16
 800063a:	480b      	ldr	r0, [pc, #44]	@ (8000668 <MX_BEEP_GPIO_Init+0x64>)
 800063c:	f002 f844 	bl	80026c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BEEP_Pin */
  GPIO_InitStruct.Pin = BEEP_Pin;
 8000640:	2310      	movs	r3, #16
 8000642:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000644:	2301      	movs	r3, #1
 8000646:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000648:	2300      	movs	r3, #0
 800064a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064c:	2300      	movs	r3, #0
 800064e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000650:	1d3b      	adds	r3, r7, #4
 8000652:	4619      	mov	r1, r3
 8000654:	4804      	ldr	r0, [pc, #16]	@ (8000668 <MX_BEEP_GPIO_Init+0x64>)
 8000656:	f001 fe87 	bl	8002368 <HAL_GPIO_Init>
}
 800065a:	bf00      	nop
 800065c:	3718      	adds	r7, #24
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	58024400 	.word	0x58024400
 8000668:	58021000 	.word	0x58021000

0800066c <MX_KEY_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_KEY_GPIO_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b086      	sub	sp, #24
 8000670:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000672:	1d3b      	adds	r3, r7, #4
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000680:	4b14      	ldr	r3, [pc, #80]	@ (80006d4 <MX_KEY_GPIO_Init+0x68>)
 8000682:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000686:	4a13      	ldr	r2, [pc, #76]	@ (80006d4 <MX_KEY_GPIO_Init+0x68>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000690:	4b10      	ldr	r3, [pc, #64]	@ (80006d4 <MX_KEY_GPIO_Init+0x68>)
 8000692:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	603b      	str	r3, [r7, #0]
 800069c:	683b      	ldr	r3, [r7, #0]
  /*Configure GPIO pin : WK_UP_Pin */
  GPIO_InitStruct.Pin = WK_UP_Pin;
 800069e:	2301      	movs	r3, #1
 80006a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006a2:	2300      	movs	r3, #0
 80006a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006a6:	2302      	movs	r3, #2
 80006a8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(WK_UP_GPIO_Port, &GPIO_InitStruct);
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	4619      	mov	r1, r3
 80006ae:	480a      	ldr	r0, [pc, #40]	@ (80006d8 <MX_KEY_GPIO_Init+0x6c>)
 80006b0:	f001 fe5a 	bl	8002368 <HAL_GPIO_Init>
  /*Configure GPIO pins : KEY0_Pin KEY1_Pin */
  GPIO_InitStruct.Pin = KEY0_Pin|KEY1_Pin;
 80006b4:	f248 0302 	movw	r3, #32770	@ 0x8002
 80006b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ba:	2300      	movs	r3, #0
 80006bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006be:	2301      	movs	r3, #1
 80006c0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	4619      	mov	r1, r3
 80006c6:	4804      	ldr	r0, [pc, #16]	@ (80006d8 <MX_KEY_GPIO_Init+0x6c>)
 80006c8:	f001 fe4e 	bl	8002368 <HAL_GPIO_Init>
}
 80006cc:	bf00      	nop
 80006ce:	3718      	adds	r7, #24
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	58024400 	.word	0x58024400
 80006d8:	58020000 	.word	0x58020000

080006dc <MX_LED_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_LED_GPIO_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b088      	sub	sp, #32
 80006e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e2:	f107 030c 	add.w	r3, r7, #12
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
 80006f0:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006f2:	4b24      	ldr	r3, [pc, #144]	@ (8000784 <MX_LED_GPIO_Init+0xa8>)
 80006f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006f8:	4a22      	ldr	r2, [pc, #136]	@ (8000784 <MX_LED_GPIO_Init+0xa8>)
 80006fa:	f043 0310 	orr.w	r3, r3, #16
 80006fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000702:	4b20      	ldr	r3, [pc, #128]	@ (8000784 <MX_LED_GPIO_Init+0xa8>)
 8000704:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000708:	f003 0310 	and.w	r3, r3, #16
 800070c:	60bb      	str	r3, [r7, #8]
 800070e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000710:	4b1c      	ldr	r3, [pc, #112]	@ (8000784 <MX_LED_GPIO_Init+0xa8>)
 8000712:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000716:	4a1b      	ldr	r2, [pc, #108]	@ (8000784 <MX_LED_GPIO_Init+0xa8>)
 8000718:	f043 0302 	orr.w	r3, r3, #2
 800071c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000720:	4b18      	ldr	r3, [pc, #96]	@ (8000784 <MX_LED_GPIO_Init+0xa8>)
 8000722:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000726:	f003 0302 	and.w	r3, r3, #2
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_Pin|LED2_Pin, GPIO_PIN_SET);
 800072e:	2201      	movs	r2, #1
 8000730:	2160      	movs	r1, #96	@ 0x60
 8000732:	4815      	ldr	r0, [pc, #84]	@ (8000788 <MX_LED_GPIO_Init+0xac>)
 8000734:	f001 ffc8 	bl	80026c8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 8000738:	2201      	movs	r2, #1
 800073a:	2110      	movs	r1, #16
 800073c:	4813      	ldr	r0, [pc, #76]	@ (800078c <MX_LED_GPIO_Init+0xb0>)
 800073e:	f001 ffc3 	bl	80026c8 <HAL_GPIO_WritePin>
  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000742:	2360      	movs	r3, #96	@ 0x60
 8000744:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000746:	2301      	movs	r3, #1
 8000748:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074e:	2300      	movs	r3, #0
 8000750:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000752:	f107 030c 	add.w	r3, r7, #12
 8000756:	4619      	mov	r1, r3
 8000758:	480b      	ldr	r0, [pc, #44]	@ (8000788 <MX_LED_GPIO_Init+0xac>)
 800075a:	f001 fe05 	bl	8002368 <HAL_GPIO_Init>
  /*Configure GPIO pin : LED0_Pin */
  GPIO_InitStruct.Pin = LED0_Pin;
 800075e:	2310      	movs	r3, #16
 8000760:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000762:	2301      	movs	r3, #1
 8000764:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076a:	2300      	movs	r3, #0
 800076c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 800076e:	f107 030c 	add.w	r3, r7, #12
 8000772:	4619      	mov	r1, r3
 8000774:	4805      	ldr	r0, [pc, #20]	@ (800078c <MX_LED_GPIO_Init+0xb0>)
 8000776:	f001 fdf7 	bl	8002368 <HAL_GPIO_Init>
}
 800077a:	bf00      	nop
 800077c:	3720      	adds	r7, #32
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	58024400 	.word	0x58024400
 8000788:	58021000 	.word	0x58021000
 800078c:	58020400 	.word	0x58020400

08000790 <bsp_init>:
#include "bsp_init.h"

void bsp_init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
	MX_LED_GPIO_Init();
 8000794:	f7ff ffa2 	bl	80006dc <MX_LED_GPIO_Init>
	MX_BEEP_GPIO_Init();
 8000798:	f7ff ff34 	bl	8000604 <MX_BEEP_GPIO_Init>
	MX_KEY_GPIO_Init();
 800079c:	f7ff ff66 	bl	800066c <MX_KEY_GPIO_Init>
	// MX_EXTI_GPIO_Init();
	MX_USART1_UART_Init();
 80007a0:	f000 fd38 	bl	8001214 <MX_USART1_UART_Init>
	// MX_IWDG1_Init(); // 溢出时间约1s
	// MX_TIM6_Init(); // 溢出时间约500ms
}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80007ac:	f000 f896 	bl	80008dc <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b0:	f000 fe2c 	bl	800140c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b4:	f000 f816 	bl	80007e4 <SystemClock_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

  /* USER CODE BEGIN 2 */
  bsp_init();
 80007b8:	f7ff ffea 	bl	8000790 <bsp_init>
  printf("ATIM Four PWM Test\r\n");
 80007bc:	4807      	ldr	r0, [pc, #28]	@ (80007dc <main+0x34>)
 80007be:	f007 fef9 	bl	80085b4 <puts>
  MX_TIM1_Init();
 80007c2:	f000 fab1 	bl	8000d28 <MX_TIM1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_GPIO_TogglePin(LED_RED_Port, LED_RED_Pin);
 80007c6:	2140      	movs	r1, #64	@ 0x40
 80007c8:	4805      	ldr	r0, [pc, #20]	@ (80007e0 <main+0x38>)
 80007ca:	f001 ff96 	bl	80026fa <HAL_GPIO_TogglePin>
    HAL_Delay(1000);
 80007ce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007d2:	f000 fead 	bl	8001530 <HAL_Delay>
	HAL_GPIO_TogglePin(LED_RED_Port, LED_RED_Pin);
 80007d6:	bf00      	nop
 80007d8:	e7f5      	b.n	80007c6 <main+0x1e>
 80007da:	bf00      	nop
 80007dc:	08008cf4 	.word	0x08008cf4
 80007e0:	58021000 	.word	0x58021000

080007e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b09c      	sub	sp, #112	@ 0x70
 80007e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007ee:	224c      	movs	r2, #76	@ 0x4c
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f007 ffbe 	bl	8008774 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f8:	1d3b      	adds	r3, r7, #4
 80007fa:	2220      	movs	r2, #32
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f007 ffb8 	bl	8008774 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000804:	2002      	movs	r0, #2
 8000806:	f001 ffb7 	bl	8002778 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800080a:	2300      	movs	r3, #0
 800080c:	603b      	str	r3, [r7, #0]
 800080e:	4b31      	ldr	r3, [pc, #196]	@ (80008d4 <SystemClock_Config+0xf0>)
 8000810:	699b      	ldr	r3, [r3, #24]
 8000812:	4a30      	ldr	r2, [pc, #192]	@ (80008d4 <SystemClock_Config+0xf0>)
 8000814:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000818:	6193      	str	r3, [r2, #24]
 800081a:	4b2e      	ldr	r3, [pc, #184]	@ (80008d4 <SystemClock_Config+0xf0>)
 800081c:	699b      	ldr	r3, [r3, #24]
 800081e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000822:	603b      	str	r3, [r7, #0]
 8000824:	4b2c      	ldr	r3, [pc, #176]	@ (80008d8 <SystemClock_Config+0xf4>)
 8000826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000828:	4a2b      	ldr	r2, [pc, #172]	@ (80008d8 <SystemClock_Config+0xf4>)
 800082a:	f043 0301 	orr.w	r3, r3, #1
 800082e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000830:	4b29      	ldr	r3, [pc, #164]	@ (80008d8 <SystemClock_Config+0xf4>)
 8000832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000834:	f003 0301 	and.w	r3, r3, #1
 8000838:	603b      	str	r3, [r7, #0]
 800083a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800083c:	bf00      	nop
 800083e:	4b25      	ldr	r3, [pc, #148]	@ (80008d4 <SystemClock_Config+0xf0>)
 8000840:	699b      	ldr	r3, [r3, #24]
 8000842:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000846:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800084a:	d1f8      	bne.n	800083e <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800084c:	2309      	movs	r3, #9
 800084e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000850:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000854:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000856:	2301      	movs	r3, #1
 8000858:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800085a:	2302      	movs	r3, #2
 800085c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800085e:	2302      	movs	r3, #2
 8000860:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000862:	2302      	movs	r3, #2
 8000864:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 8000866:	23f0      	movs	r3, #240	@ 0xf0
 8000868:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800086a:	2302      	movs	r3, #2
 800086c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800086e:	2302      	movs	r3, #2
 8000870:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000872:	2302      	movs	r3, #2
 8000874:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000876:	2308      	movs	r3, #8
 8000878:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800087a:	2300      	movs	r3, #0
 800087c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800087e:	2300      	movs	r3, #0
 8000880:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000882:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000886:	4618      	mov	r0, r3
 8000888:	f001 ffb0 	bl	80027ec <HAL_RCC_OscConfig>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000892:	f000 f84f 	bl	8000934 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000896:	233f      	movs	r3, #63	@ 0x3f
 8000898:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800089a:	2303      	movs	r3, #3
 800089c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800089e:	2300      	movs	r3, #0
 80008a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80008a2:	2308      	movs	r3, #8
 80008a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008a6:	2340      	movs	r3, #64	@ 0x40
 80008a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008aa:	2340      	movs	r3, #64	@ 0x40
 80008ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008b2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008b4:	2340      	movs	r3, #64	@ 0x40
 80008b6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008b8:	1d3b      	adds	r3, r7, #4
 80008ba:	2104      	movs	r1, #4
 80008bc:	4618      	mov	r0, r3
 80008be:	f002 fbef 	bl	80030a0 <HAL_RCC_ClockConfig>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80008c8:	f000 f834 	bl	8000934 <Error_Handler>
  }
}
 80008cc:	bf00      	nop
 80008ce:	3770      	adds	r7, #112	@ 0x70
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	58024800 	.word	0x58024800
 80008d8:	58000400 	.word	0x58000400

080008dc <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80008e2:	463b      	mov	r3, r7
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
 80008ec:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80008ee:	f000 ff5f 	bl	80017b0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80008f2:	2301      	movs	r3, #1
 80008f4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80008f6:	2300      	movs	r3, #0
 80008f8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80008fa:	2300      	movs	r3, #0
 80008fc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80008fe:	231f      	movs	r3, #31
 8000900:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000902:	2387      	movs	r3, #135	@ 0x87
 8000904:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000906:	2300      	movs	r3, #0
 8000908:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800090a:	2300      	movs	r3, #0
 800090c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800090e:	2301      	movs	r3, #1
 8000910:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000912:	2301      	movs	r3, #1
 8000914:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000916:	2300      	movs	r3, #0
 8000918:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800091a:	2300      	movs	r3, #0
 800091c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800091e:	463b      	mov	r3, r7
 8000920:	4618      	mov	r0, r3
 8000922:	f000 ff7d 	bl	8001820 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000926:	2004      	movs	r0, #4
 8000928:	f000 ff5a 	bl	80017e0 <HAL_MPU_Enable>

}
 800092c:	bf00      	nop
 800092e:	3710      	adds	r7, #16
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}

08000934 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000938:	b672      	cpsid	i
}
 800093a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800093c:	bf00      	nop
 800093e:	e7fd      	b.n	800093c <Error_Handler+0x8>

08000940 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000946:	4b0a      	ldr	r3, [pc, #40]	@ (8000970 <HAL_MspInit+0x30>)
 8000948:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800094c:	4a08      	ldr	r2, [pc, #32]	@ (8000970 <HAL_MspInit+0x30>)
 800094e:	f043 0302 	orr.w	r3, r3, #2
 8000952:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000956:	4b06      	ldr	r3, [pc, #24]	@ (8000970 <HAL_MspInit+0x30>)
 8000958:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800095c:	f003 0302 	and.w	r3, r3, #2
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000964:	bf00      	nop
 8000966:	370c      	adds	r7, #12
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr
 8000970:	58024400 	.word	0x58024400

08000974 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000978:	bf00      	nop
 800097a:	e7fd      	b.n	8000978 <NMI_Handler+0x4>

0800097c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000980:	bf00      	nop
 8000982:	e7fd      	b.n	8000980 <HardFault_Handler+0x4>

08000984 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000988:	bf00      	nop
 800098a:	e7fd      	b.n	8000988 <MemManage_Handler+0x4>

0800098c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000990:	bf00      	nop
 8000992:	e7fd      	b.n	8000990 <BusFault_Handler+0x4>

08000994 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000998:	bf00      	nop
 800099a:	e7fd      	b.n	8000998 <UsageFault_Handler+0x4>

0800099c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr

080009aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr

080009c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ca:	f000 fd91 	bl	80014f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
	...

080009d4 <WWDG_IRQHandler>:

/**
  * @brief This function handles Window watchdog interrupt.
  */
void WWDG_IRQHandler(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN WWDG_IRQn 0 */

  /* USER CODE END WWDG_IRQn 0 */
  HAL_WWDG_IRQHandler(&hwwdg1);
 80009d8:	4802      	ldr	r0, [pc, #8]	@ (80009e4 <WWDG_IRQHandler+0x10>)
 80009da:	f007 fca9 	bl	8008330 <HAL_WWDG_IRQHandler>
  /* USER CODE BEGIN WWDG_IRQn 1 */
  /* USER CODE END WWDG_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	240002e8 	.word	0x240002e8

080009e8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI_KEY1_Pin);
 80009ec:	2002      	movs	r0, #2
 80009ee:	f001 fe9e 	bl	800272e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
	...

080009f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80009fc:	4802      	ldr	r0, [pc, #8]	@ (8000a08 <TIM2_IRQHandler+0x10>)
 80009fe:	f004 fecd 	bl	800579c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	240000d8 	.word	0x240000d8

08000a0c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000a10:	4802      	ldr	r0, [pc, #8]	@ (8000a1c <TIM3_IRQHandler+0x10>)
 8000a12:	f004 fec3 	bl	800579c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  /* USER CODE END TIM3_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	24000124 	.word	0x24000124

08000a20 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a24:	4802      	ldr	r0, [pc, #8]	@ (8000a30 <USART1_IRQHandler+0x10>)
 8000a26:	f005 ffa7 	bl	8006978 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	24000254 	.word	0x24000254

08000a34 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000a38:	4802      	ldr	r0, [pc, #8]	@ (8000a44 <TIM5_IRQHandler+0x10>)
 8000a3a:	f004 feaf 	bl	800579c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	24000170 	.word	0x24000170

08000a48 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a4c:	4802      	ldr	r0, [pc, #8]	@ (8000a58 <TIM6_DAC_IRQHandler+0x10>)
 8000a4e:	f004 fea5 	bl	800579c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	240001bc 	.word	0x240001bc

08000a5c <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8000a60:	4802      	ldr	r0, [pc, #8]	@ (8000a6c <TIM15_IRQHandler+0x10>)
 8000a62:	f004 fe9b 	bl	800579c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	24000208 	.word	0x24000208

08000a70 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	60f8      	str	r0, [r7, #12]
 8000a78:	60b9      	str	r1, [r7, #8]
 8000a7a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	617b      	str	r3, [r7, #20]
 8000a80:	e00a      	b.n	8000a98 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a82:	f3af 8000 	nop.w
 8000a86:	4601      	mov	r1, r0
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	1c5a      	adds	r2, r3, #1
 8000a8c:	60ba      	str	r2, [r7, #8]
 8000a8e:	b2ca      	uxtb	r2, r1
 8000a90:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	3301      	adds	r3, #1
 8000a96:	617b      	str	r3, [r7, #20]
 8000a98:	697a      	ldr	r2, [r7, #20]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	dbf0      	blt.n	8000a82 <_read+0x12>
  }

  return len;
 8000aa0:	687b      	ldr	r3, [r7, #4]
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3718      	adds	r7, #24
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	b086      	sub	sp, #24
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	60f8      	str	r0, [r7, #12]
 8000ab2:	60b9      	str	r1, [r7, #8]
 8000ab4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	617b      	str	r3, [r7, #20]
 8000aba:	e009      	b.n	8000ad0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	1c5a      	adds	r2, r3, #1
 8000ac0:	60ba      	str	r2, [r7, #8]
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f000 fc63 	bl	8001390 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	3301      	adds	r3, #1
 8000ace:	617b      	str	r3, [r7, #20]
 8000ad0:	697a      	ldr	r2, [r7, #20]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	dbf1      	blt.n	8000abc <_write+0x12>
  }
  return len;
 8000ad8:	687b      	ldr	r3, [r7, #4]
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3718      	adds	r7, #24
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <_close>:

int _close(int file)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	b083      	sub	sp, #12
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000aea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr

08000afa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000afa:	b480      	push	{r7}
 8000afc:	b083      	sub	sp, #12
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
 8000b02:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b0a:	605a      	str	r2, [r3, #4]
  return 0;
 8000b0c:	2300      	movs	r3, #0
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr

08000b1a <_isatty>:

int _isatty(int file)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	b083      	sub	sp, #12
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b22:	2301      	movs	r3, #1
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr

08000b30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	60f8      	str	r0, [r7, #12]
 8000b38:	60b9      	str	r1, [r7, #8]
 8000b3a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b3c:	2300      	movs	r3, #0
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3714      	adds	r7, #20
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
	...

08000b4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b54:	4a14      	ldr	r2, [pc, #80]	@ (8000ba8 <_sbrk+0x5c>)
 8000b56:	4b15      	ldr	r3, [pc, #84]	@ (8000bac <_sbrk+0x60>)
 8000b58:	1ad3      	subs	r3, r2, r3
 8000b5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b60:	4b13      	ldr	r3, [pc, #76]	@ (8000bb0 <_sbrk+0x64>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d102      	bne.n	8000b6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b68:	4b11      	ldr	r3, [pc, #68]	@ (8000bb0 <_sbrk+0x64>)
 8000b6a:	4a12      	ldr	r2, [pc, #72]	@ (8000bb4 <_sbrk+0x68>)
 8000b6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b6e:	4b10      	ldr	r3, [pc, #64]	@ (8000bb0 <_sbrk+0x64>)
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4413      	add	r3, r2
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d207      	bcs.n	8000b8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b7c:	f007 fe48 	bl	8008810 <__errno>
 8000b80:	4603      	mov	r3, r0
 8000b82:	220c      	movs	r2, #12
 8000b84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b86:	f04f 33ff 	mov.w	r3, #4294967295
 8000b8a:	e009      	b.n	8000ba0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b8c:	4b08      	ldr	r3, [pc, #32]	@ (8000bb0 <_sbrk+0x64>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b92:	4b07      	ldr	r3, [pc, #28]	@ (8000bb0 <_sbrk+0x64>)
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4413      	add	r3, r2
 8000b9a:	4a05      	ldr	r2, [pc, #20]	@ (8000bb0 <_sbrk+0x64>)
 8000b9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b9e:	68fb      	ldr	r3, [r7, #12]
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3718      	adds	r7, #24
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	24080000 	.word	0x24080000
 8000bac:	00000400 	.word	0x00000400
 8000bb0:	24000088 	.word	0x24000088
 8000bb4:	24000450 	.word	0x24000450

08000bb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000bbc:	4b43      	ldr	r3, [pc, #268]	@ (8000ccc <SystemInit+0x114>)
 8000bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bc2:	4a42      	ldr	r2, [pc, #264]	@ (8000ccc <SystemInit+0x114>)
 8000bc4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bc8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bcc:	4b40      	ldr	r3, [pc, #256]	@ (8000cd0 <SystemInit+0x118>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f003 030f 	and.w	r3, r3, #15
 8000bd4:	2b06      	cmp	r3, #6
 8000bd6:	d807      	bhi.n	8000be8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bd8:	4b3d      	ldr	r3, [pc, #244]	@ (8000cd0 <SystemInit+0x118>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f023 030f 	bic.w	r3, r3, #15
 8000be0:	4a3b      	ldr	r2, [pc, #236]	@ (8000cd0 <SystemInit+0x118>)
 8000be2:	f043 0307 	orr.w	r3, r3, #7
 8000be6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000be8:	4b3a      	ldr	r3, [pc, #232]	@ (8000cd4 <SystemInit+0x11c>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a39      	ldr	r2, [pc, #228]	@ (8000cd4 <SystemInit+0x11c>)
 8000bee:	f043 0301 	orr.w	r3, r3, #1
 8000bf2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000bf4:	4b37      	ldr	r3, [pc, #220]	@ (8000cd4 <SystemInit+0x11c>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000bfa:	4b36      	ldr	r3, [pc, #216]	@ (8000cd4 <SystemInit+0x11c>)
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	4935      	ldr	r1, [pc, #212]	@ (8000cd4 <SystemInit+0x11c>)
 8000c00:	4b35      	ldr	r3, [pc, #212]	@ (8000cd8 <SystemInit+0x120>)
 8000c02:	4013      	ands	r3, r2
 8000c04:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c06:	4b32      	ldr	r3, [pc, #200]	@ (8000cd0 <SystemInit+0x118>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f003 0308 	and.w	r3, r3, #8
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d007      	beq.n	8000c22 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c12:	4b2f      	ldr	r3, [pc, #188]	@ (8000cd0 <SystemInit+0x118>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f023 030f 	bic.w	r3, r3, #15
 8000c1a:	4a2d      	ldr	r2, [pc, #180]	@ (8000cd0 <SystemInit+0x118>)
 8000c1c:	f043 0307 	orr.w	r3, r3, #7
 8000c20:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000c22:	4b2c      	ldr	r3, [pc, #176]	@ (8000cd4 <SystemInit+0x11c>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000c28:	4b2a      	ldr	r3, [pc, #168]	@ (8000cd4 <SystemInit+0x11c>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000c2e:	4b29      	ldr	r3, [pc, #164]	@ (8000cd4 <SystemInit+0x11c>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000c34:	4b27      	ldr	r3, [pc, #156]	@ (8000cd4 <SystemInit+0x11c>)
 8000c36:	4a29      	ldr	r2, [pc, #164]	@ (8000cdc <SystemInit+0x124>)
 8000c38:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000c3a:	4b26      	ldr	r3, [pc, #152]	@ (8000cd4 <SystemInit+0x11c>)
 8000c3c:	4a28      	ldr	r2, [pc, #160]	@ (8000ce0 <SystemInit+0x128>)
 8000c3e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000c40:	4b24      	ldr	r3, [pc, #144]	@ (8000cd4 <SystemInit+0x11c>)
 8000c42:	4a28      	ldr	r2, [pc, #160]	@ (8000ce4 <SystemInit+0x12c>)
 8000c44:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000c46:	4b23      	ldr	r3, [pc, #140]	@ (8000cd4 <SystemInit+0x11c>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000c4c:	4b21      	ldr	r3, [pc, #132]	@ (8000cd4 <SystemInit+0x11c>)
 8000c4e:	4a25      	ldr	r2, [pc, #148]	@ (8000ce4 <SystemInit+0x12c>)
 8000c50:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000c52:	4b20      	ldr	r3, [pc, #128]	@ (8000cd4 <SystemInit+0x11c>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c58:	4b1e      	ldr	r3, [pc, #120]	@ (8000cd4 <SystemInit+0x11c>)
 8000c5a:	4a22      	ldr	r2, [pc, #136]	@ (8000ce4 <SystemInit+0x12c>)
 8000c5c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c5e:	4b1d      	ldr	r3, [pc, #116]	@ (8000cd4 <SystemInit+0x11c>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c64:	4b1b      	ldr	r3, [pc, #108]	@ (8000cd4 <SystemInit+0x11c>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a1a      	ldr	r2, [pc, #104]	@ (8000cd4 <SystemInit+0x11c>)
 8000c6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c6e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c70:	4b18      	ldr	r3, [pc, #96]	@ (8000cd4 <SystemInit+0x11c>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000c76:	4b1c      	ldr	r3, [pc, #112]	@ (8000ce8 <SystemInit+0x130>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000cec <SystemInit+0x134>)
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000c82:	d202      	bcs.n	8000c8a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000c84:	4b1a      	ldr	r3, [pc, #104]	@ (8000cf0 <SystemInit+0x138>)
 8000c86:	2201      	movs	r2, #1
 8000c88:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000c8a:	4b12      	ldr	r3, [pc, #72]	@ (8000cd4 <SystemInit+0x11c>)
 8000c8c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000c90:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d113      	bne.n	8000cc0 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000c98:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd4 <SystemInit+0x11c>)
 8000c9a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000c9e:	4a0d      	ldr	r2, [pc, #52]	@ (8000cd4 <SystemInit+0x11c>)
 8000ca0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ca4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000ca8:	4b12      	ldr	r3, [pc, #72]	@ (8000cf4 <SystemInit+0x13c>)
 8000caa:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000cae:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000cb0:	4b08      	ldr	r3, [pc, #32]	@ (8000cd4 <SystemInit+0x11c>)
 8000cb2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000cb6:	4a07      	ldr	r2, [pc, #28]	@ (8000cd4 <SystemInit+0x11c>)
 8000cb8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000cbc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	e000ed00 	.word	0xe000ed00
 8000cd0:	52002000 	.word	0x52002000
 8000cd4:	58024400 	.word	0x58024400
 8000cd8:	eaf6ed7f 	.word	0xeaf6ed7f
 8000cdc:	02020200 	.word	0x02020200
 8000ce0:	01ff0000 	.word	0x01ff0000
 8000ce4:	01010280 	.word	0x01010280
 8000ce8:	5c001000 	.word	0x5c001000
 8000cec:	ffff0000 	.word	0xffff0000
 8000cf0:	51008108 	.word	0x51008108
 8000cf4:	52004000 	.word	0x52004000

08000cf8 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000cfc:	4b09      	ldr	r3, [pc, #36]	@ (8000d24 <ExitRun0Mode+0x2c>)
 8000cfe:	68db      	ldr	r3, [r3, #12]
 8000d00:	4a08      	ldr	r2, [pc, #32]	@ (8000d24 <ExitRun0Mode+0x2c>)
 8000d02:	f043 0302 	orr.w	r3, r3, #2
 8000d06:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000d08:	bf00      	nop
 8000d0a:	4b06      	ldr	r3, [pc, #24]	@ (8000d24 <ExitRun0Mode+0x2c>)
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d0f9      	beq.n	8000d0a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000d16:	bf00      	nop
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	58024800 	.word	0x58024800

08000d28 <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim15;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b09a      	sub	sp, #104	@ 0x68
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d2e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	605a      	str	r2, [r3, #4]
 8000d38:	609a      	str	r2, [r3, #8]
 8000d3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d3c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d48:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
 8000d56:	611a      	str	r2, [r3, #16]
 8000d58:	615a      	str	r2, [r3, #20]
 8000d5a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d5c:	1d3b      	adds	r3, r7, #4
 8000d5e:	222c      	movs	r2, #44	@ 0x2c
 8000d60:	2100      	movs	r1, #0
 8000d62:	4618      	mov	r0, r3
 8000d64:	f007 fd06 	bl	8008774 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d68:	4b71      	ldr	r3, [pc, #452]	@ (8000f30 <MX_TIM1_Init+0x208>)
 8000d6a:	4a72      	ldr	r2, [pc, #456]	@ (8000f34 <MX_TIM1_Init+0x20c>)
 8000d6c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 479;
 8000d6e:	4b70      	ldr	r3, [pc, #448]	@ (8000f30 <MX_TIM1_Init+0x208>)
 8000d70:	f240 12df 	movw	r2, #479	@ 0x1df
 8000d74:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d76:	4b6e      	ldr	r3, [pc, #440]	@ (8000f30 <MX_TIM1_Init+0x208>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 499;
 8000d7c:	4b6c      	ldr	r3, [pc, #432]	@ (8000f30 <MX_TIM1_Init+0x208>)
 8000d7e:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8000d82:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d84:	4b6a      	ldr	r3, [pc, #424]	@ (8000f30 <MX_TIM1_Init+0x208>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d8a:	4b69      	ldr	r3, [pc, #420]	@ (8000f30 <MX_TIM1_Init+0x208>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d90:	4b67      	ldr	r3, [pc, #412]	@ (8000f30 <MX_TIM1_Init+0x208>)
 8000d92:	2280      	movs	r2, #128	@ 0x80
 8000d94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d96:	4866      	ldr	r0, [pc, #408]	@ (8000f30 <MX_TIM1_Init+0x208>)
 8000d98:	f004 fb3a 	bl	8005410 <HAL_TIM_Base_Init>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000da2:	f7ff fdc7 	bl	8000934 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000da6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000daa:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000dac:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000db0:	4619      	mov	r1, r3
 8000db2:	485f      	ldr	r0, [pc, #380]	@ (8000f30 <MX_TIM1_Init+0x208>)
 8000db4:	f004 fe74 	bl	8005aa0 <HAL_TIM_ConfigClockSource>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8000dbe:	f7ff fdb9 	bl	8000934 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000dc2:	485b      	ldr	r0, [pc, #364]	@ (8000f30 <MX_TIM1_Init+0x208>)
 8000dc4:	f004 fb7b 	bl	80054be <HAL_TIM_OC_Init>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8000dce:	f7ff fdb1 	bl	8000934 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000dde:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000de2:	4619      	mov	r1, r3
 8000de4:	4852      	ldr	r0, [pc, #328]	@ (8000f30 <MX_TIM1_Init+0x208>)
 8000de6:	f005 fbbf 	bl	8006568 <HAL_TIMEx_MasterConfigSynchronization>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8000df0:	f7ff fda0 	bl	8000934 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000df4:	2330      	movs	r3, #48	@ 0x30
 8000df6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 125;
 8000df8:	237d      	movs	r3, #125	@ 0x7d
 8000dfa:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e00:	2300      	movs	r3, #0
 8000e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e04:	2300      	movs	r3, #0
 8000e06:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e10:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000e14:	2200      	movs	r2, #0
 8000e16:	4619      	mov	r1, r3
 8000e18:	4845      	ldr	r0, [pc, #276]	@ (8000f30 <MX_TIM1_Init+0x208>)
 8000e1a:	f004 fdc7 	bl	80059ac <HAL_TIM_OC_ConfigChannel>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000e24:	f7ff fd86 	bl	8000934 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_1);
 8000e28:	4b41      	ldr	r3, [pc, #260]	@ (8000f30 <MX_TIM1_Init+0x208>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	699a      	ldr	r2, [r3, #24]
 8000e2e:	4b40      	ldr	r3, [pc, #256]	@ (8000f30 <MX_TIM1_Init+0x208>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f042 0208 	orr.w	r2, r2, #8
 8000e36:	619a      	str	r2, [r3, #24]
  sConfigOC.Pulse = 250;
 8000e38:	23fa      	movs	r3, #250	@ 0xfa
 8000e3a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e3c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000e40:	2204      	movs	r2, #4
 8000e42:	4619      	mov	r1, r3
 8000e44:	483a      	ldr	r0, [pc, #232]	@ (8000f30 <MX_TIM1_Init+0x208>)
 8000e46:	f004 fdb1 	bl	80059ac <HAL_TIM_OC_ConfigChannel>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000e50:	f7ff fd70 	bl	8000934 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_2);
 8000e54:	4b36      	ldr	r3, [pc, #216]	@ (8000f30 <MX_TIM1_Init+0x208>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	699a      	ldr	r2, [r3, #24]
 8000e5a:	4b35      	ldr	r3, [pc, #212]	@ (8000f30 <MX_TIM1_Init+0x208>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000e62:	619a      	str	r2, [r3, #24]
  sConfigOC.Pulse = 375;
 8000e64:	f240 1377 	movw	r3, #375	@ 0x177
 8000e68:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e6a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000e6e:	2208      	movs	r2, #8
 8000e70:	4619      	mov	r1, r3
 8000e72:	482f      	ldr	r0, [pc, #188]	@ (8000f30 <MX_TIM1_Init+0x208>)
 8000e74:	f004 fd9a 	bl	80059ac <HAL_TIM_OC_ConfigChannel>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8000e7e:	f7ff fd59 	bl	8000934 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_3);
 8000e82:	4b2b      	ldr	r3, [pc, #172]	@ (8000f30 <MX_TIM1_Init+0x208>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	69da      	ldr	r2, [r3, #28]
 8000e88:	4b29      	ldr	r3, [pc, #164]	@ (8000f30 <MX_TIM1_Init+0x208>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f042 0208 	orr.w	r2, r2, #8
 8000e90:	61da      	str	r2, [r3, #28]
  sConfigOC.Pulse = 0;
 8000e92:	2300      	movs	r3, #0
 8000e94:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e96:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000e9a:	220c      	movs	r2, #12
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4824      	ldr	r0, [pc, #144]	@ (8000f30 <MX_TIM1_Init+0x208>)
 8000ea0:	f004 fd84 	bl	80059ac <HAL_TIM_OC_ConfigChannel>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_TIM1_Init+0x186>
  {
    Error_Handler();
 8000eaa:	f7ff fd43 	bl	8000934 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_4);
 8000eae:	4b20      	ldr	r3, [pc, #128]	@ (8000f30 <MX_TIM1_Init+0x208>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	69da      	ldr	r2, [r3, #28]
 8000eb4:	4b1e      	ldr	r3, [pc, #120]	@ (8000f30 <MX_TIM1_Init+0x208>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000ebc:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ed2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ed6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000edc:	2300      	movs	r3, #0
 8000ede:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ee0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000ee4:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000eea:	2300      	movs	r3, #0
 8000eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000eee:	1d3b      	adds	r3, r7, #4
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	480f      	ldr	r0, [pc, #60]	@ (8000f30 <MX_TIM1_Init+0x208>)
 8000ef4:	f005 fbc6 	bl	8006684 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_TIM1_Init+0x1da>
  {
    Error_Handler();
 8000efe:	f7ff fd19 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f02:	480b      	ldr	r0, [pc, #44]	@ (8000f30 <MX_TIM1_Init+0x208>)
 8000f04:	f000 f8fa 	bl	80010fc <HAL_TIM_MspPostInit>
  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_1);
 8000f08:	2100      	movs	r1, #0
 8000f0a:	4809      	ldr	r0, [pc, #36]	@ (8000f30 <MX_TIM1_Init+0x208>)
 8000f0c:	f004 fb38 	bl	8005580 <HAL_TIM_OC_Start>
  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_2);
 8000f10:	2104      	movs	r1, #4
 8000f12:	4807      	ldr	r0, [pc, #28]	@ (8000f30 <MX_TIM1_Init+0x208>)
 8000f14:	f004 fb34 	bl	8005580 <HAL_TIM_OC_Start>
  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_3);
 8000f18:	2108      	movs	r1, #8
 8000f1a:	4805      	ldr	r0, [pc, #20]	@ (8000f30 <MX_TIM1_Init+0x208>)
 8000f1c:	f004 fb30 	bl	8005580 <HAL_TIM_OC_Start>
  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_4);
 8000f20:	210c      	movs	r1, #12
 8000f22:	4803      	ldr	r0, [pc, #12]	@ (8000f30 <MX_TIM1_Init+0x208>)
 8000f24:	f004 fb2c 	bl	8005580 <HAL_TIM_OC_Start>
}
 8000f28:	bf00      	nop
 8000f2a:	3768      	adds	r7, #104	@ 0x68
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	2400008c 	.word	0x2400008c
 8000f34:	40010000 	.word	0x40010000

08000f38 <HAL_TIM_Base_MspInit>:
  HAL_TIM_MspPostInit(&htim15);

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08e      	sub	sp, #56	@ 0x38
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a62      	ldr	r2, [pc, #392]	@ (80010e0 <HAL_TIM_Base_MspInit+0x1a8>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d10f      	bne.n	8000f7a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f5a:	4b62      	ldr	r3, [pc, #392]	@ (80010e4 <HAL_TIM_Base_MspInit+0x1ac>)
 8000f5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000f60:	4a60      	ldr	r2, [pc, #384]	@ (80010e4 <HAL_TIM_Base_MspInit+0x1ac>)
 8000f62:	f043 0301 	orr.w	r3, r3, #1
 8000f66:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000f6a:	4b5e      	ldr	r3, [pc, #376]	@ (80010e4 <HAL_TIM_Base_MspInit+0x1ac>)
 8000f6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000f70:	f003 0301 	and.w	r3, r3, #1
 8000f74:	623b      	str	r3, [r7, #32]
 8000f76:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8000f78:	e0ae      	b.n	80010d8 <HAL_TIM_Base_MspInit+0x1a0>
  else if(tim_baseHandle->Instance==TIM2)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f82:	d136      	bne.n	8000ff2 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f84:	4b57      	ldr	r3, [pc, #348]	@ (80010e4 <HAL_TIM_Base_MspInit+0x1ac>)
 8000f86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f8a:	4a56      	ldr	r2, [pc, #344]	@ (80010e4 <HAL_TIM_Base_MspInit+0x1ac>)
 8000f8c:	f043 0301 	orr.w	r3, r3, #1
 8000f90:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000f94:	4b53      	ldr	r3, [pc, #332]	@ (80010e4 <HAL_TIM_Base_MspInit+0x1ac>)
 8000f96:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	61fb      	str	r3, [r7, #28]
 8000fa0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa2:	4b50      	ldr	r3, [pc, #320]	@ (80010e4 <HAL_TIM_Base_MspInit+0x1ac>)
 8000fa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fa8:	4a4e      	ldr	r2, [pc, #312]	@ (80010e4 <HAL_TIM_Base_MspInit+0x1ac>)
 8000faa:	f043 0301 	orr.w	r3, r3, #1
 8000fae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fb2:	4b4c      	ldr	r3, [pc, #304]	@ (80010e4 <HAL_TIM_Base_MspInit+0x1ac>)
 8000fb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fb8:	f003 0301 	and.w	r3, r3, #1
 8000fbc:	61bb      	str	r3, [r7, #24]
 8000fbe:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = TIM2_KEY_Pin;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(TIM2_KEY_GPIO_Port, &GPIO_InitStruct);
 8000fd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4843      	ldr	r0, [pc, #268]	@ (80010e8 <HAL_TIM_Base_MspInit+0x1b0>)
 8000fdc:	f001 f9c4 	bl	8002368 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	201c      	movs	r0, #28
 8000fe6:	f000 fbae 	bl	8001746 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fea:	201c      	movs	r0, #28
 8000fec:	f000 fbc5 	bl	800177a <HAL_NVIC_EnableIRQ>
}
 8000ff0:	e072      	b.n	80010d8 <HAL_TIM_Base_MspInit+0x1a0>
  else if(tim_baseHandle->Instance==TIM3)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a3d      	ldr	r2, [pc, #244]	@ (80010ec <HAL_TIM_Base_MspInit+0x1b4>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d117      	bne.n	800102c <HAL_TIM_Base_MspInit+0xf4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ffc:	4b39      	ldr	r3, [pc, #228]	@ (80010e4 <HAL_TIM_Base_MspInit+0x1ac>)
 8000ffe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001002:	4a38      	ldr	r2, [pc, #224]	@ (80010e4 <HAL_TIM_Base_MspInit+0x1ac>)
 8001004:	f043 0302 	orr.w	r3, r3, #2
 8001008:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800100c:	4b35      	ldr	r3, [pc, #212]	@ (80010e4 <HAL_TIM_Base_MspInit+0x1ac>)
 800100e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001012:	f003 0302 	and.w	r3, r3, #2
 8001016:	617b      	str	r3, [r7, #20]
 8001018:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800101a:	2200      	movs	r2, #0
 800101c:	2100      	movs	r1, #0
 800101e:	201d      	movs	r0, #29
 8001020:	f000 fb91 	bl	8001746 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001024:	201d      	movs	r0, #29
 8001026:	f000 fba8 	bl	800177a <HAL_NVIC_EnableIRQ>
}
 800102a:	e055      	b.n	80010d8 <HAL_TIM_Base_MspInit+0x1a0>
  else if(tim_baseHandle->Instance==TIM5)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a2f      	ldr	r2, [pc, #188]	@ (80010f0 <HAL_TIM_Base_MspInit+0x1b8>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d117      	bne.n	8001066 <HAL_TIM_Base_MspInit+0x12e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001036:	4b2b      	ldr	r3, [pc, #172]	@ (80010e4 <HAL_TIM_Base_MspInit+0x1ac>)
 8001038:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800103c:	4a29      	ldr	r2, [pc, #164]	@ (80010e4 <HAL_TIM_Base_MspInit+0x1ac>)
 800103e:	f043 0308 	orr.w	r3, r3, #8
 8001042:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001046:	4b27      	ldr	r3, [pc, #156]	@ (80010e4 <HAL_TIM_Base_MspInit+0x1ac>)
 8001048:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800104c:	f003 0308 	and.w	r3, r3, #8
 8001050:	613b      	str	r3, [r7, #16]
 8001052:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001054:	2200      	movs	r2, #0
 8001056:	2100      	movs	r1, #0
 8001058:	2032      	movs	r0, #50	@ 0x32
 800105a:	f000 fb74 	bl	8001746 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800105e:	2032      	movs	r0, #50	@ 0x32
 8001060:	f000 fb8b 	bl	800177a <HAL_NVIC_EnableIRQ>
}
 8001064:	e038      	b.n	80010d8 <HAL_TIM_Base_MspInit+0x1a0>
  else if(tim_baseHandle->Instance==TIM6)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a22      	ldr	r2, [pc, #136]	@ (80010f4 <HAL_TIM_Base_MspInit+0x1bc>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d117      	bne.n	80010a0 <HAL_TIM_Base_MspInit+0x168>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001070:	4b1c      	ldr	r3, [pc, #112]	@ (80010e4 <HAL_TIM_Base_MspInit+0x1ac>)
 8001072:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001076:	4a1b      	ldr	r2, [pc, #108]	@ (80010e4 <HAL_TIM_Base_MspInit+0x1ac>)
 8001078:	f043 0310 	orr.w	r3, r3, #16
 800107c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001080:	4b18      	ldr	r3, [pc, #96]	@ (80010e4 <HAL_TIM_Base_MspInit+0x1ac>)
 8001082:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001086:	f003 0310 	and.w	r3, r3, #16
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 800108e:	2200      	movs	r2, #0
 8001090:	2101      	movs	r1, #1
 8001092:	2036      	movs	r0, #54	@ 0x36
 8001094:	f000 fb57 	bl	8001746 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001098:	2036      	movs	r0, #54	@ 0x36
 800109a:	f000 fb6e 	bl	800177a <HAL_NVIC_EnableIRQ>
}
 800109e:	e01b      	b.n	80010d8 <HAL_TIM_Base_MspInit+0x1a0>
  else if(tim_baseHandle->Instance==TIM15)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a14      	ldr	r2, [pc, #80]	@ (80010f8 <HAL_TIM_Base_MspInit+0x1c0>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d116      	bne.n	80010d8 <HAL_TIM_Base_MspInit+0x1a0>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80010aa:	4b0e      	ldr	r3, [pc, #56]	@ (80010e4 <HAL_TIM_Base_MspInit+0x1ac>)
 80010ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80010b0:	4a0c      	ldr	r2, [pc, #48]	@ (80010e4 <HAL_TIM_Base_MspInit+0x1ac>)
 80010b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010b6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80010ba:	4b0a      	ldr	r3, [pc, #40]	@ (80010e4 <HAL_TIM_Base_MspInit+0x1ac>)
 80010bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80010c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010c4:	60bb      	str	r3, [r7, #8]
 80010c6:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 80010c8:	2200      	movs	r2, #0
 80010ca:	2100      	movs	r1, #0
 80010cc:	2074      	movs	r0, #116	@ 0x74
 80010ce:	f000 fb3a 	bl	8001746 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 80010d2:	2074      	movs	r0, #116	@ 0x74
 80010d4:	f000 fb51 	bl	800177a <HAL_NVIC_EnableIRQ>
}
 80010d8:	bf00      	nop
 80010da:	3738      	adds	r7, #56	@ 0x38
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40010000 	.word	0x40010000
 80010e4:	58024400 	.word	0x58024400
 80010e8:	58020000 	.word	0x58020000
 80010ec:	40000400 	.word	0x40000400
 80010f0:	40000c00 	.word	0x40000c00
 80010f4:	40001000 	.word	0x40001000
 80010f8:	40014000 	.word	0x40014000

080010fc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08a      	sub	sp, #40	@ 0x28
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001104:	f107 0314 	add.w	r3, r7, #20
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a38      	ldr	r2, [pc, #224]	@ (80011fc <HAL_TIM_MspPostInit+0x100>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d120      	bne.n	8001160 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800111e:	4b38      	ldr	r3, [pc, #224]	@ (8001200 <HAL_TIM_MspPostInit+0x104>)
 8001120:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001124:	4a36      	ldr	r2, [pc, #216]	@ (8001200 <HAL_TIM_MspPostInit+0x104>)
 8001126:	f043 0310 	orr.w	r3, r3, #16
 800112a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800112e:	4b34      	ldr	r3, [pc, #208]	@ (8001200 <HAL_TIM_MspPostInit+0x104>)
 8001130:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001134:	f003 0310 	and.w	r3, r3, #16
 8001138:	613b      	str	r3, [r7, #16]
 800113a:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = PWM_CH1_Pin|PWM_CH2_Pin|PWM_CH3_Pin|PWM_CH4_Pin;
 800113c:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 8001140:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001142:	2302      	movs	r3, #2
 8001144:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800114a:	2302      	movs	r3, #2
 800114c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800114e:	2301      	movs	r3, #1
 8001150:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001152:	f107 0314 	add.w	r3, r7, #20
 8001156:	4619      	mov	r1, r3
 8001158:	482a      	ldr	r0, [pc, #168]	@ (8001204 <HAL_TIM_MspPostInit+0x108>)
 800115a:	f001 f905 	bl	8002368 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 800115e:	e048      	b.n	80011f2 <HAL_TIM_MspPostInit+0xf6>
  else if(timHandle->Instance==TIM3)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a28      	ldr	r2, [pc, #160]	@ (8001208 <HAL_TIM_MspPostInit+0x10c>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d11f      	bne.n	80011aa <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800116a:	4b25      	ldr	r3, [pc, #148]	@ (8001200 <HAL_TIM_MspPostInit+0x104>)
 800116c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001170:	4a23      	ldr	r2, [pc, #140]	@ (8001200 <HAL_TIM_MspPostInit+0x104>)
 8001172:	f043 0302 	orr.w	r3, r3, #2
 8001176:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800117a:	4b21      	ldr	r3, [pc, #132]	@ (8001200 <HAL_TIM_MspPostInit+0x104>)
 800117c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001180:	f003 0302 	and.w	r3, r3, #2
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM_LED_Pin;
 8001188:	2310      	movs	r3, #16
 800118a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118c:	2302      	movs	r3, #2
 800118e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	2300      	movs	r3, #0
 8001192:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001194:	2300      	movs	r3, #0
 8001196:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001198:	2302      	movs	r3, #2
 800119a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(TIM_LED_GPIO_Port, &GPIO_InitStruct);
 800119c:	f107 0314 	add.w	r3, r7, #20
 80011a0:	4619      	mov	r1, r3
 80011a2:	481a      	ldr	r0, [pc, #104]	@ (800120c <HAL_TIM_MspPostInit+0x110>)
 80011a4:	f001 f8e0 	bl	8002368 <HAL_GPIO_Init>
}
 80011a8:	e023      	b.n	80011f2 <HAL_TIM_MspPostInit+0xf6>
  else if(timHandle->Instance==TIM15)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a18      	ldr	r2, [pc, #96]	@ (8001210 <HAL_TIM_MspPostInit+0x114>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d11e      	bne.n	80011f2 <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80011b4:	4b12      	ldr	r3, [pc, #72]	@ (8001200 <HAL_TIM_MspPostInit+0x104>)
 80011b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011ba:	4a11      	ldr	r2, [pc, #68]	@ (8001200 <HAL_TIM_MspPostInit+0x104>)
 80011bc:	f043 0310 	orr.w	r3, r3, #16
 80011c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001200 <HAL_TIM_MspPostInit+0x104>)
 80011c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011ca:	f003 0310 	and.w	r3, r3, #16
 80011ce:	60bb      	str	r3, [r7, #8]
 80011d0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM15_LED_Pin;
 80011d2:	2320      	movs	r3, #32
 80011d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d6:	2302      	movs	r3, #2
 80011d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011da:	2301      	movs	r3, #1
 80011dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011de:	2302      	movs	r3, #2
 80011e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 80011e2:	2304      	movs	r3, #4
 80011e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(TIM15_LED_GPIO_Port, &GPIO_InitStruct);
 80011e6:	f107 0314 	add.w	r3, r7, #20
 80011ea:	4619      	mov	r1, r3
 80011ec:	4805      	ldr	r0, [pc, #20]	@ (8001204 <HAL_TIM_MspPostInit+0x108>)
 80011ee:	f001 f8bb 	bl	8002368 <HAL_GPIO_Init>
}
 80011f2:	bf00      	nop
 80011f4:	3728      	adds	r7, #40	@ 0x28
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40010000 	.word	0x40010000
 8001200:	58024400 	.word	0x58024400
 8001204:	58021000 	.word	0x58021000
 8001208:	40000400 	.word	0x40000400
 800120c:	58020400 	.word	0x58020400
 8001210:	40014000 	.word	0x40014000

08001214 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001218:	4b22      	ldr	r3, [pc, #136]	@ (80012a4 <MX_USART1_UART_Init+0x90>)
 800121a:	4a23      	ldr	r2, [pc, #140]	@ (80012a8 <MX_USART1_UART_Init+0x94>)
 800121c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800121e:	4b21      	ldr	r3, [pc, #132]	@ (80012a4 <MX_USART1_UART_Init+0x90>)
 8001220:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001224:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001226:	4b1f      	ldr	r3, [pc, #124]	@ (80012a4 <MX_USART1_UART_Init+0x90>)
 8001228:	2200      	movs	r2, #0
 800122a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800122c:	4b1d      	ldr	r3, [pc, #116]	@ (80012a4 <MX_USART1_UART_Init+0x90>)
 800122e:	2200      	movs	r2, #0
 8001230:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001232:	4b1c      	ldr	r3, [pc, #112]	@ (80012a4 <MX_USART1_UART_Init+0x90>)
 8001234:	2200      	movs	r2, #0
 8001236:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001238:	4b1a      	ldr	r3, [pc, #104]	@ (80012a4 <MX_USART1_UART_Init+0x90>)
 800123a:	220c      	movs	r2, #12
 800123c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800123e:	4b19      	ldr	r3, [pc, #100]	@ (80012a4 <MX_USART1_UART_Init+0x90>)
 8001240:	2200      	movs	r2, #0
 8001242:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001244:	4b17      	ldr	r3, [pc, #92]	@ (80012a4 <MX_USART1_UART_Init+0x90>)
 8001246:	2200      	movs	r2, #0
 8001248:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800124a:	4b16      	ldr	r3, [pc, #88]	@ (80012a4 <MX_USART1_UART_Init+0x90>)
 800124c:	2200      	movs	r2, #0
 800124e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001250:	4b14      	ldr	r3, [pc, #80]	@ (80012a4 <MX_USART1_UART_Init+0x90>)
 8001252:	2200      	movs	r2, #0
 8001254:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001256:	4b13      	ldr	r3, [pc, #76]	@ (80012a4 <MX_USART1_UART_Init+0x90>)
 8001258:	2200      	movs	r2, #0
 800125a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800125c:	4811      	ldr	r0, [pc, #68]	@ (80012a4 <MX_USART1_UART_Init+0x90>)
 800125e:	f005 faad 	bl	80067bc <HAL_UART_Init>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001268:	f7ff fb64 	bl	8000934 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800126c:	2100      	movs	r1, #0
 800126e:	480d      	ldr	r0, [pc, #52]	@ (80012a4 <MX_USART1_UART_Init+0x90>)
 8001270:	f006 ff94 	bl	800819c <HAL_UARTEx_SetTxFifoThreshold>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800127a:	f7ff fb5b 	bl	8000934 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800127e:	2100      	movs	r1, #0
 8001280:	4808      	ldr	r0, [pc, #32]	@ (80012a4 <MX_USART1_UART_Init+0x90>)
 8001282:	f006 ffc9 	bl	8008218 <HAL_UARTEx_SetRxFifoThreshold>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800128c:	f7ff fb52 	bl	8000934 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001290:	4804      	ldr	r0, [pc, #16]	@ (80012a4 <MX_USART1_UART_Init+0x90>)
 8001292:	f006 ff4a 	bl	800812a <HAL_UARTEx_DisableFifoMode>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800129c:	f7ff fb4a 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012a0:	bf00      	nop
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	24000254 	.word	0x24000254
 80012a8:	40011000 	.word	0x40011000

080012ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b0ba      	sub	sp, #232	@ 0xe8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]
 80012c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012c4:	f107 0310 	add.w	r3, r7, #16
 80012c8:	22c0      	movs	r2, #192	@ 0xc0
 80012ca:	2100      	movs	r1, #0
 80012cc:	4618      	mov	r0, r3
 80012ce:	f007 fa51 	bl	8008774 <memset>
  if(uartHandle->Instance==USART1)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a2b      	ldr	r2, [pc, #172]	@ (8001384 <HAL_UART_MspInit+0xd8>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d14e      	bne.n	800137a <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80012dc:	f04f 0201 	mov.w	r2, #1
 80012e0:	f04f 0300 	mov.w	r3, #0
 80012e4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80012e8:	2300      	movs	r3, #0
 80012ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012ee:	f107 0310 	add.w	r3, r7, #16
 80012f2:	4618      	mov	r0, r3
 80012f4:	f002 fa60 	bl	80037b8 <HAL_RCCEx_PeriphCLKConfig>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80012fe:	f7ff fb19 	bl	8000934 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001302:	4b21      	ldr	r3, [pc, #132]	@ (8001388 <HAL_UART_MspInit+0xdc>)
 8001304:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001308:	4a1f      	ldr	r2, [pc, #124]	@ (8001388 <HAL_UART_MspInit+0xdc>)
 800130a:	f043 0310 	orr.w	r3, r3, #16
 800130e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001312:	4b1d      	ldr	r3, [pc, #116]	@ (8001388 <HAL_UART_MspInit+0xdc>)
 8001314:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001318:	f003 0310 	and.w	r3, r3, #16
 800131c:	60fb      	str	r3, [r7, #12]
 800131e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001320:	4b19      	ldr	r3, [pc, #100]	@ (8001388 <HAL_UART_MspInit+0xdc>)
 8001322:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001326:	4a18      	ldr	r2, [pc, #96]	@ (8001388 <HAL_UART_MspInit+0xdc>)
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001330:	4b15      	ldr	r3, [pc, #84]	@ (8001388 <HAL_UART_MspInit+0xdc>)
 8001332:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	60bb      	str	r3, [r7, #8]
 800133c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800133e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001342:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001346:	2302      	movs	r3, #2
 8001348:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800134c:	2301      	movs	r3, #1
 800134e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001352:	2302      	movs	r3, #2
 8001354:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001358:	2307      	movs	r3, #7
 800135a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001362:	4619      	mov	r1, r3
 8001364:	4809      	ldr	r0, [pc, #36]	@ (800138c <HAL_UART_MspInit+0xe0>)
 8001366:	f000 ffff 	bl	8002368 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800136a:	2200      	movs	r2, #0
 800136c:	2100      	movs	r1, #0
 800136e:	2025      	movs	r0, #37	@ 0x25
 8001370:	f000 f9e9 	bl	8001746 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001374:	2025      	movs	r0, #37	@ 0x25
 8001376:	f000 fa00 	bl	800177a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800137a:	bf00      	nop
 800137c:	37e8      	adds	r7, #232	@ 0xe8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40011000 	.word	0x40011000
 8001388:	58024400 	.word	0x58024400
 800138c:	58020000 	.word	0x58020000

08001390 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

/* printf重定向 */
PUTCHAR_PROTOTYPE
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001398:	1d39      	adds	r1, r7, #4
 800139a:	f04f 33ff 	mov.w	r3, #4294967295
 800139e:	2201      	movs	r2, #1
 80013a0:	4803      	ldr	r0, [pc, #12]	@ (80013b0 <__io_putchar+0x20>)
 80013a2:	f005 fa5b 	bl	800685c <HAL_UART_Transmit>
    return ch;
 80013a6:	687b      	ldr	r3, [r7, #4]
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3708      	adds	r7, #8
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	24000254 	.word	0x24000254

080013b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80013b4:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80013f0 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80013b8:	f7ff fc9e 	bl	8000cf8 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80013bc:	f7ff fbfc 	bl	8000bb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013c0:	480c      	ldr	r0, [pc, #48]	@ (80013f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013c2:	490d      	ldr	r1, [pc, #52]	@ (80013f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013c4:	4a0d      	ldr	r2, [pc, #52]	@ (80013fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013c8:	e002      	b.n	80013d0 <LoopCopyDataInit>

080013ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ce:	3304      	adds	r3, #4

080013d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013d4:	d3f9      	bcc.n	80013ca <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001400 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013d8:	4c0a      	ldr	r4, [pc, #40]	@ (8001404 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013dc:	e001      	b.n	80013e2 <LoopFillZerobss>

080013de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013e0:	3204      	adds	r2, #4

080013e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013e4:	d3fb      	bcc.n	80013de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013e6:	f007 fa19 	bl	800881c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013ea:	f7ff f9dd 	bl	80007a8 <main>
  bx  lr
 80013ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013f0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80013f4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80013f8:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 80013fc:	08008d50 	.word	0x08008d50
  ldr r2, =_sbss
 8001400:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 8001404:	2400044c 	.word	0x2400044c

08001408 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001408:	e7fe      	b.n	8001408 <ADC3_IRQHandler>
	...

0800140c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001412:	2003      	movs	r0, #3
 8001414:	f000 f98c 	bl	8001730 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001418:	f001 fff8 	bl	800340c <HAL_RCC_GetSysClockFreq>
 800141c:	4602      	mov	r2, r0
 800141e:	4b15      	ldr	r3, [pc, #84]	@ (8001474 <HAL_Init+0x68>)
 8001420:	699b      	ldr	r3, [r3, #24]
 8001422:	0a1b      	lsrs	r3, r3, #8
 8001424:	f003 030f 	and.w	r3, r3, #15
 8001428:	4913      	ldr	r1, [pc, #76]	@ (8001478 <HAL_Init+0x6c>)
 800142a:	5ccb      	ldrb	r3, [r1, r3]
 800142c:	f003 031f 	and.w	r3, r3, #31
 8001430:	fa22 f303 	lsr.w	r3, r2, r3
 8001434:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001436:	4b0f      	ldr	r3, [pc, #60]	@ (8001474 <HAL_Init+0x68>)
 8001438:	699b      	ldr	r3, [r3, #24]
 800143a:	f003 030f 	and.w	r3, r3, #15
 800143e:	4a0e      	ldr	r2, [pc, #56]	@ (8001478 <HAL_Init+0x6c>)
 8001440:	5cd3      	ldrb	r3, [r2, r3]
 8001442:	f003 031f 	and.w	r3, r3, #31
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	fa22 f303 	lsr.w	r3, r2, r3
 800144c:	4a0b      	ldr	r2, [pc, #44]	@ (800147c <HAL_Init+0x70>)
 800144e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001450:	4a0b      	ldr	r2, [pc, #44]	@ (8001480 <HAL_Init+0x74>)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001456:	200f      	movs	r0, #15
 8001458:	f000 f814 	bl	8001484 <HAL_InitTick>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e002      	b.n	800146c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001466:	f7ff fa6b 	bl	8000940 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800146a:	2300      	movs	r3, #0
}
 800146c:	4618      	mov	r0, r3
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	58024400 	.word	0x58024400
 8001478:	08008d08 	.word	0x08008d08
 800147c:	24000004 	.word	0x24000004
 8001480:	24000000 	.word	0x24000000

08001484 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800148c:	4b15      	ldr	r3, [pc, #84]	@ (80014e4 <HAL_InitTick+0x60>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d101      	bne.n	8001498 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e021      	b.n	80014dc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001498:	4b13      	ldr	r3, [pc, #76]	@ (80014e8 <HAL_InitTick+0x64>)
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	4b11      	ldr	r3, [pc, #68]	@ (80014e4 <HAL_InitTick+0x60>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	4619      	mov	r1, r3
 80014a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ae:	4618      	mov	r0, r3
 80014b0:	f000 f971 	bl	8001796 <HAL_SYSTICK_Config>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e00e      	b.n	80014dc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2b0f      	cmp	r3, #15
 80014c2:	d80a      	bhi.n	80014da <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014c4:	2200      	movs	r2, #0
 80014c6:	6879      	ldr	r1, [r7, #4]
 80014c8:	f04f 30ff 	mov.w	r0, #4294967295
 80014cc:	f000 f93b 	bl	8001746 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014d0:	4a06      	ldr	r2, [pc, #24]	@ (80014ec <HAL_InitTick+0x68>)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014d6:	2300      	movs	r3, #0
 80014d8:	e000      	b.n	80014dc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	2400000c 	.word	0x2400000c
 80014e8:	24000000 	.word	0x24000000
 80014ec:	24000008 	.word	0x24000008

080014f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014f4:	4b06      	ldr	r3, [pc, #24]	@ (8001510 <HAL_IncTick+0x20>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	461a      	mov	r2, r3
 80014fa:	4b06      	ldr	r3, [pc, #24]	@ (8001514 <HAL_IncTick+0x24>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4413      	add	r3, r2
 8001500:	4a04      	ldr	r2, [pc, #16]	@ (8001514 <HAL_IncTick+0x24>)
 8001502:	6013      	str	r3, [r2, #0]
}
 8001504:	bf00      	nop
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	2400000c 	.word	0x2400000c
 8001514:	240002fc 	.word	0x240002fc

08001518 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  return uwTick;
 800151c:	4b03      	ldr	r3, [pc, #12]	@ (800152c <HAL_GetTick+0x14>)
 800151e:	681b      	ldr	r3, [r3, #0]
}
 8001520:	4618      	mov	r0, r3
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	240002fc 	.word	0x240002fc

08001530 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001538:	f7ff ffee 	bl	8001518 <HAL_GetTick>
 800153c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001548:	d005      	beq.n	8001556 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800154a:	4b0a      	ldr	r3, [pc, #40]	@ (8001574 <HAL_Delay+0x44>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	461a      	mov	r2, r3
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	4413      	add	r3, r2
 8001554:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001556:	bf00      	nop
 8001558:	f7ff ffde 	bl	8001518 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	68fa      	ldr	r2, [r7, #12]
 8001564:	429a      	cmp	r2, r3
 8001566:	d8f7      	bhi.n	8001558 <HAL_Delay+0x28>
  {
  }
}
 8001568:	bf00      	nop
 800156a:	bf00      	nop
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	2400000c 	.word	0x2400000c

08001578 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800157c:	4b03      	ldr	r3, [pc, #12]	@ (800158c <HAL_GetREVID+0x14>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	0c1b      	lsrs	r3, r3, #16
}
 8001582:	4618      	mov	r0, r3
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	5c001000 	.word	0x5c001000

08001590 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001590:	b480      	push	{r7}
 8001592:	b085      	sub	sp, #20
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f003 0307 	and.w	r3, r3, #7
 800159e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015a0:	4b0b      	ldr	r3, [pc, #44]	@ (80015d0 <__NVIC_SetPriorityGrouping+0x40>)
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015a6:	68ba      	ldr	r2, [r7, #8]
 80015a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015ac:	4013      	ands	r3, r2
 80015ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80015b8:	4b06      	ldr	r3, [pc, #24]	@ (80015d4 <__NVIC_SetPriorityGrouping+0x44>)
 80015ba:	4313      	orrs	r3, r2
 80015bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015be:	4a04      	ldr	r2, [pc, #16]	@ (80015d0 <__NVIC_SetPriorityGrouping+0x40>)
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	60d3      	str	r3, [r2, #12]
}
 80015c4:	bf00      	nop
 80015c6:	3714      	adds	r7, #20
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	e000ed00 	.word	0xe000ed00
 80015d4:	05fa0000 	.word	0x05fa0000

080015d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015dc:	4b04      	ldr	r3, [pc, #16]	@ (80015f0 <__NVIC_GetPriorityGrouping+0x18>)
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	0a1b      	lsrs	r3, r3, #8
 80015e2:	f003 0307 	and.w	r3, r3, #7
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr
 80015f0:	e000ed00 	.word	0xe000ed00

080015f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001602:	2b00      	cmp	r3, #0
 8001604:	db0b      	blt.n	800161e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001606:	88fb      	ldrh	r3, [r7, #6]
 8001608:	f003 021f 	and.w	r2, r3, #31
 800160c:	4907      	ldr	r1, [pc, #28]	@ (800162c <__NVIC_EnableIRQ+0x38>)
 800160e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001612:	095b      	lsrs	r3, r3, #5
 8001614:	2001      	movs	r0, #1
 8001616:	fa00 f202 	lsl.w	r2, r0, r2
 800161a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800161e:	bf00      	nop
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	e000e100 	.word	0xe000e100

08001630 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	6039      	str	r1, [r7, #0]
 800163a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800163c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001640:	2b00      	cmp	r3, #0
 8001642:	db0a      	blt.n	800165a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	b2da      	uxtb	r2, r3
 8001648:	490c      	ldr	r1, [pc, #48]	@ (800167c <__NVIC_SetPriority+0x4c>)
 800164a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800164e:	0112      	lsls	r2, r2, #4
 8001650:	b2d2      	uxtb	r2, r2
 8001652:	440b      	add	r3, r1
 8001654:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001658:	e00a      	b.n	8001670 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	b2da      	uxtb	r2, r3
 800165e:	4908      	ldr	r1, [pc, #32]	@ (8001680 <__NVIC_SetPriority+0x50>)
 8001660:	88fb      	ldrh	r3, [r7, #6]
 8001662:	f003 030f 	and.w	r3, r3, #15
 8001666:	3b04      	subs	r3, #4
 8001668:	0112      	lsls	r2, r2, #4
 800166a:	b2d2      	uxtb	r2, r2
 800166c:	440b      	add	r3, r1
 800166e:	761a      	strb	r2, [r3, #24]
}
 8001670:	bf00      	nop
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	e000e100 	.word	0xe000e100
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001684:	b480      	push	{r7}
 8001686:	b089      	sub	sp, #36	@ 0x24
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f003 0307 	and.w	r3, r3, #7
 8001696:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	f1c3 0307 	rsb	r3, r3, #7
 800169e:	2b04      	cmp	r3, #4
 80016a0:	bf28      	it	cs
 80016a2:	2304      	movcs	r3, #4
 80016a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	3304      	adds	r3, #4
 80016aa:	2b06      	cmp	r3, #6
 80016ac:	d902      	bls.n	80016b4 <NVIC_EncodePriority+0x30>
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	3b03      	subs	r3, #3
 80016b2:	e000      	b.n	80016b6 <NVIC_EncodePriority+0x32>
 80016b4:	2300      	movs	r3, #0
 80016b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b8:	f04f 32ff 	mov.w	r2, #4294967295
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	43da      	mvns	r2, r3
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	401a      	ands	r2, r3
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016cc:	f04f 31ff 	mov.w	r1, #4294967295
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	fa01 f303 	lsl.w	r3, r1, r3
 80016d6:	43d9      	mvns	r1, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016dc:	4313      	orrs	r3, r2
         );
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3724      	adds	r7, #36	@ 0x24
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
	...

080016ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	3b01      	subs	r3, #1
 80016f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016fc:	d301      	bcc.n	8001702 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016fe:	2301      	movs	r3, #1
 8001700:	e00f      	b.n	8001722 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001702:	4a0a      	ldr	r2, [pc, #40]	@ (800172c <SysTick_Config+0x40>)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	3b01      	subs	r3, #1
 8001708:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800170a:	210f      	movs	r1, #15
 800170c:	f04f 30ff 	mov.w	r0, #4294967295
 8001710:	f7ff ff8e 	bl	8001630 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001714:	4b05      	ldr	r3, [pc, #20]	@ (800172c <SysTick_Config+0x40>)
 8001716:	2200      	movs	r2, #0
 8001718:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800171a:	4b04      	ldr	r3, [pc, #16]	@ (800172c <SysTick_Config+0x40>)
 800171c:	2207      	movs	r2, #7
 800171e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	e000e010 	.word	0xe000e010

08001730 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f7ff ff29 	bl	8001590 <__NVIC_SetPriorityGrouping>
}
 800173e:	bf00      	nop
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b086      	sub	sp, #24
 800174a:	af00      	add	r7, sp, #0
 800174c:	4603      	mov	r3, r0
 800174e:	60b9      	str	r1, [r7, #8]
 8001750:	607a      	str	r2, [r7, #4]
 8001752:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001754:	f7ff ff40 	bl	80015d8 <__NVIC_GetPriorityGrouping>
 8001758:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	68b9      	ldr	r1, [r7, #8]
 800175e:	6978      	ldr	r0, [r7, #20]
 8001760:	f7ff ff90 	bl	8001684 <NVIC_EncodePriority>
 8001764:	4602      	mov	r2, r0
 8001766:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800176a:	4611      	mov	r1, r2
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff ff5f 	bl	8001630 <__NVIC_SetPriority>
}
 8001772:	bf00      	nop
 8001774:	3718      	adds	r7, #24
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	b082      	sub	sp, #8
 800177e:	af00      	add	r7, sp, #0
 8001780:	4603      	mov	r3, r0
 8001782:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001784:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff ff33 	bl	80015f4 <__NVIC_EnableIRQ>
}
 800178e:	bf00      	nop
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b082      	sub	sp, #8
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f7ff ffa4 	bl	80016ec <SysTick_Config>
 80017a4:	4603      	mov	r3, r0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
	...

080017b0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80017b4:	f3bf 8f5f 	dmb	sy
}
 80017b8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80017ba:	4b07      	ldr	r3, [pc, #28]	@ (80017d8 <HAL_MPU_Disable+0x28>)
 80017bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017be:	4a06      	ldr	r2, [pc, #24]	@ (80017d8 <HAL_MPU_Disable+0x28>)
 80017c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017c4:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80017c6:	4b05      	ldr	r3, [pc, #20]	@ (80017dc <HAL_MPU_Disable+0x2c>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	605a      	str	r2, [r3, #4]
}
 80017cc:	bf00      	nop
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	e000ed00 	.word	0xe000ed00
 80017dc:	e000ed90 	.word	0xe000ed90

080017e0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80017e8:	4a0b      	ldr	r2, [pc, #44]	@ (8001818 <HAL_MPU_Enable+0x38>)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	f043 0301 	orr.w	r3, r3, #1
 80017f0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80017f2:	4b0a      	ldr	r3, [pc, #40]	@ (800181c <HAL_MPU_Enable+0x3c>)
 80017f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017f6:	4a09      	ldr	r2, [pc, #36]	@ (800181c <HAL_MPU_Enable+0x3c>)
 80017f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017fc:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80017fe:	f3bf 8f4f 	dsb	sy
}
 8001802:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001804:	f3bf 8f6f 	isb	sy
}
 8001808:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800180a:	bf00      	nop
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	e000ed90 	.word	0xe000ed90
 800181c:	e000ed00 	.word	0xe000ed00

08001820 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	785a      	ldrb	r2, [r3, #1]
 800182c:	4b1b      	ldr	r3, [pc, #108]	@ (800189c <HAL_MPU_ConfigRegion+0x7c>)
 800182e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001830:	4b1a      	ldr	r3, [pc, #104]	@ (800189c <HAL_MPU_ConfigRegion+0x7c>)
 8001832:	691b      	ldr	r3, [r3, #16]
 8001834:	4a19      	ldr	r2, [pc, #100]	@ (800189c <HAL_MPU_ConfigRegion+0x7c>)
 8001836:	f023 0301 	bic.w	r3, r3, #1
 800183a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800183c:	4a17      	ldr	r2, [pc, #92]	@ (800189c <HAL_MPU_ConfigRegion+0x7c>)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	7b1b      	ldrb	r3, [r3, #12]
 8001848:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	7adb      	ldrb	r3, [r3, #11]
 800184e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001850:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	7a9b      	ldrb	r3, [r3, #10]
 8001856:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001858:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	7b5b      	ldrb	r3, [r3, #13]
 800185e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001860:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	7b9b      	ldrb	r3, [r3, #14]
 8001866:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001868:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	7bdb      	ldrb	r3, [r3, #15]
 800186e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001870:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	7a5b      	ldrb	r3, [r3, #9]
 8001876:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001878:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	7a1b      	ldrb	r3, [r3, #8]
 800187e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001880:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	7812      	ldrb	r2, [r2, #0]
 8001886:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001888:	4a04      	ldr	r2, [pc, #16]	@ (800189c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800188a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800188c:	6113      	str	r3, [r2, #16]
}
 800188e:	bf00      	nop
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	e000ed90 	.word	0xe000ed90

080018a0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80018a8:	f7ff fe36 	bl	8001518 <HAL_GetTick>
 80018ac:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d101      	bne.n	80018b8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e2dc      	b.n	8001e72 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d008      	beq.n	80018d6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2280      	movs	r2, #128	@ 0x80
 80018c8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e2cd      	b.n	8001e72 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a76      	ldr	r2, [pc, #472]	@ (8001ab4 <HAL_DMA_Abort+0x214>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d04a      	beq.n	8001976 <HAL_DMA_Abort+0xd6>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a74      	ldr	r2, [pc, #464]	@ (8001ab8 <HAL_DMA_Abort+0x218>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d045      	beq.n	8001976 <HAL_DMA_Abort+0xd6>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a73      	ldr	r2, [pc, #460]	@ (8001abc <HAL_DMA_Abort+0x21c>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d040      	beq.n	8001976 <HAL_DMA_Abort+0xd6>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a71      	ldr	r2, [pc, #452]	@ (8001ac0 <HAL_DMA_Abort+0x220>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d03b      	beq.n	8001976 <HAL_DMA_Abort+0xd6>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a70      	ldr	r2, [pc, #448]	@ (8001ac4 <HAL_DMA_Abort+0x224>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d036      	beq.n	8001976 <HAL_DMA_Abort+0xd6>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a6e      	ldr	r2, [pc, #440]	@ (8001ac8 <HAL_DMA_Abort+0x228>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d031      	beq.n	8001976 <HAL_DMA_Abort+0xd6>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a6d      	ldr	r2, [pc, #436]	@ (8001acc <HAL_DMA_Abort+0x22c>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d02c      	beq.n	8001976 <HAL_DMA_Abort+0xd6>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a6b      	ldr	r2, [pc, #428]	@ (8001ad0 <HAL_DMA_Abort+0x230>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d027      	beq.n	8001976 <HAL_DMA_Abort+0xd6>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a6a      	ldr	r2, [pc, #424]	@ (8001ad4 <HAL_DMA_Abort+0x234>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d022      	beq.n	8001976 <HAL_DMA_Abort+0xd6>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a68      	ldr	r2, [pc, #416]	@ (8001ad8 <HAL_DMA_Abort+0x238>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d01d      	beq.n	8001976 <HAL_DMA_Abort+0xd6>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a67      	ldr	r2, [pc, #412]	@ (8001adc <HAL_DMA_Abort+0x23c>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d018      	beq.n	8001976 <HAL_DMA_Abort+0xd6>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a65      	ldr	r2, [pc, #404]	@ (8001ae0 <HAL_DMA_Abort+0x240>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d013      	beq.n	8001976 <HAL_DMA_Abort+0xd6>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a64      	ldr	r2, [pc, #400]	@ (8001ae4 <HAL_DMA_Abort+0x244>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d00e      	beq.n	8001976 <HAL_DMA_Abort+0xd6>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a62      	ldr	r2, [pc, #392]	@ (8001ae8 <HAL_DMA_Abort+0x248>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d009      	beq.n	8001976 <HAL_DMA_Abort+0xd6>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a61      	ldr	r2, [pc, #388]	@ (8001aec <HAL_DMA_Abort+0x24c>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d004      	beq.n	8001976 <HAL_DMA_Abort+0xd6>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a5f      	ldr	r2, [pc, #380]	@ (8001af0 <HAL_DMA_Abort+0x250>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d101      	bne.n	800197a <HAL_DMA_Abort+0xda>
 8001976:	2301      	movs	r3, #1
 8001978:	e000      	b.n	800197c <HAL_DMA_Abort+0xdc>
 800197a:	2300      	movs	r3, #0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d013      	beq.n	80019a8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f022 021e 	bic.w	r2, r2, #30
 800198e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	695a      	ldr	r2, [r3, #20]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800199e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	617b      	str	r3, [r7, #20]
 80019a6:	e00a      	b.n	80019be <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f022 020e 	bic.w	r2, r2, #14
 80019b6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a3c      	ldr	r2, [pc, #240]	@ (8001ab4 <HAL_DMA_Abort+0x214>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d072      	beq.n	8001aae <HAL_DMA_Abort+0x20e>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a3a      	ldr	r2, [pc, #232]	@ (8001ab8 <HAL_DMA_Abort+0x218>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d06d      	beq.n	8001aae <HAL_DMA_Abort+0x20e>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a39      	ldr	r2, [pc, #228]	@ (8001abc <HAL_DMA_Abort+0x21c>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d068      	beq.n	8001aae <HAL_DMA_Abort+0x20e>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a37      	ldr	r2, [pc, #220]	@ (8001ac0 <HAL_DMA_Abort+0x220>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d063      	beq.n	8001aae <HAL_DMA_Abort+0x20e>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a36      	ldr	r2, [pc, #216]	@ (8001ac4 <HAL_DMA_Abort+0x224>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d05e      	beq.n	8001aae <HAL_DMA_Abort+0x20e>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a34      	ldr	r2, [pc, #208]	@ (8001ac8 <HAL_DMA_Abort+0x228>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d059      	beq.n	8001aae <HAL_DMA_Abort+0x20e>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a33      	ldr	r2, [pc, #204]	@ (8001acc <HAL_DMA_Abort+0x22c>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d054      	beq.n	8001aae <HAL_DMA_Abort+0x20e>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a31      	ldr	r2, [pc, #196]	@ (8001ad0 <HAL_DMA_Abort+0x230>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d04f      	beq.n	8001aae <HAL_DMA_Abort+0x20e>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a30      	ldr	r2, [pc, #192]	@ (8001ad4 <HAL_DMA_Abort+0x234>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d04a      	beq.n	8001aae <HAL_DMA_Abort+0x20e>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a2e      	ldr	r2, [pc, #184]	@ (8001ad8 <HAL_DMA_Abort+0x238>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d045      	beq.n	8001aae <HAL_DMA_Abort+0x20e>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a2d      	ldr	r2, [pc, #180]	@ (8001adc <HAL_DMA_Abort+0x23c>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d040      	beq.n	8001aae <HAL_DMA_Abort+0x20e>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a2b      	ldr	r2, [pc, #172]	@ (8001ae0 <HAL_DMA_Abort+0x240>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d03b      	beq.n	8001aae <HAL_DMA_Abort+0x20e>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a2a      	ldr	r2, [pc, #168]	@ (8001ae4 <HAL_DMA_Abort+0x244>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d036      	beq.n	8001aae <HAL_DMA_Abort+0x20e>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a28      	ldr	r2, [pc, #160]	@ (8001ae8 <HAL_DMA_Abort+0x248>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d031      	beq.n	8001aae <HAL_DMA_Abort+0x20e>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a27      	ldr	r2, [pc, #156]	@ (8001aec <HAL_DMA_Abort+0x24c>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d02c      	beq.n	8001aae <HAL_DMA_Abort+0x20e>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a25      	ldr	r2, [pc, #148]	@ (8001af0 <HAL_DMA_Abort+0x250>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d027      	beq.n	8001aae <HAL_DMA_Abort+0x20e>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a24      	ldr	r2, [pc, #144]	@ (8001af4 <HAL_DMA_Abort+0x254>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d022      	beq.n	8001aae <HAL_DMA_Abort+0x20e>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a22      	ldr	r2, [pc, #136]	@ (8001af8 <HAL_DMA_Abort+0x258>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d01d      	beq.n	8001aae <HAL_DMA_Abort+0x20e>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a21      	ldr	r2, [pc, #132]	@ (8001afc <HAL_DMA_Abort+0x25c>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d018      	beq.n	8001aae <HAL_DMA_Abort+0x20e>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a1f      	ldr	r2, [pc, #124]	@ (8001b00 <HAL_DMA_Abort+0x260>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d013      	beq.n	8001aae <HAL_DMA_Abort+0x20e>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a1e      	ldr	r2, [pc, #120]	@ (8001b04 <HAL_DMA_Abort+0x264>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d00e      	beq.n	8001aae <HAL_DMA_Abort+0x20e>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a1c      	ldr	r2, [pc, #112]	@ (8001b08 <HAL_DMA_Abort+0x268>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d009      	beq.n	8001aae <HAL_DMA_Abort+0x20e>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a1b      	ldr	r2, [pc, #108]	@ (8001b0c <HAL_DMA_Abort+0x26c>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d004      	beq.n	8001aae <HAL_DMA_Abort+0x20e>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a19      	ldr	r2, [pc, #100]	@ (8001b10 <HAL_DMA_Abort+0x270>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d132      	bne.n	8001b14 <HAL_DMA_Abort+0x274>
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e031      	b.n	8001b16 <HAL_DMA_Abort+0x276>
 8001ab2:	bf00      	nop
 8001ab4:	40020010 	.word	0x40020010
 8001ab8:	40020028 	.word	0x40020028
 8001abc:	40020040 	.word	0x40020040
 8001ac0:	40020058 	.word	0x40020058
 8001ac4:	40020070 	.word	0x40020070
 8001ac8:	40020088 	.word	0x40020088
 8001acc:	400200a0 	.word	0x400200a0
 8001ad0:	400200b8 	.word	0x400200b8
 8001ad4:	40020410 	.word	0x40020410
 8001ad8:	40020428 	.word	0x40020428
 8001adc:	40020440 	.word	0x40020440
 8001ae0:	40020458 	.word	0x40020458
 8001ae4:	40020470 	.word	0x40020470
 8001ae8:	40020488 	.word	0x40020488
 8001aec:	400204a0 	.word	0x400204a0
 8001af0:	400204b8 	.word	0x400204b8
 8001af4:	58025408 	.word	0x58025408
 8001af8:	5802541c 	.word	0x5802541c
 8001afc:	58025430 	.word	0x58025430
 8001b00:	58025444 	.word	0x58025444
 8001b04:	58025458 	.word	0x58025458
 8001b08:	5802546c 	.word	0x5802546c
 8001b0c:	58025480 	.word	0x58025480
 8001b10:	58025494 	.word	0x58025494
 8001b14:	2300      	movs	r3, #0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d007      	beq.n	8001b2a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b24:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001b28:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a6d      	ldr	r2, [pc, #436]	@ (8001ce4 <HAL_DMA_Abort+0x444>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d04a      	beq.n	8001bca <HAL_DMA_Abort+0x32a>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a6b      	ldr	r2, [pc, #428]	@ (8001ce8 <HAL_DMA_Abort+0x448>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d045      	beq.n	8001bca <HAL_DMA_Abort+0x32a>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a6a      	ldr	r2, [pc, #424]	@ (8001cec <HAL_DMA_Abort+0x44c>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d040      	beq.n	8001bca <HAL_DMA_Abort+0x32a>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a68      	ldr	r2, [pc, #416]	@ (8001cf0 <HAL_DMA_Abort+0x450>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d03b      	beq.n	8001bca <HAL_DMA_Abort+0x32a>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a67      	ldr	r2, [pc, #412]	@ (8001cf4 <HAL_DMA_Abort+0x454>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d036      	beq.n	8001bca <HAL_DMA_Abort+0x32a>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a65      	ldr	r2, [pc, #404]	@ (8001cf8 <HAL_DMA_Abort+0x458>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d031      	beq.n	8001bca <HAL_DMA_Abort+0x32a>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a64      	ldr	r2, [pc, #400]	@ (8001cfc <HAL_DMA_Abort+0x45c>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d02c      	beq.n	8001bca <HAL_DMA_Abort+0x32a>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a62      	ldr	r2, [pc, #392]	@ (8001d00 <HAL_DMA_Abort+0x460>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d027      	beq.n	8001bca <HAL_DMA_Abort+0x32a>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a61      	ldr	r2, [pc, #388]	@ (8001d04 <HAL_DMA_Abort+0x464>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d022      	beq.n	8001bca <HAL_DMA_Abort+0x32a>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a5f      	ldr	r2, [pc, #380]	@ (8001d08 <HAL_DMA_Abort+0x468>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d01d      	beq.n	8001bca <HAL_DMA_Abort+0x32a>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a5e      	ldr	r2, [pc, #376]	@ (8001d0c <HAL_DMA_Abort+0x46c>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d018      	beq.n	8001bca <HAL_DMA_Abort+0x32a>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a5c      	ldr	r2, [pc, #368]	@ (8001d10 <HAL_DMA_Abort+0x470>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d013      	beq.n	8001bca <HAL_DMA_Abort+0x32a>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a5b      	ldr	r2, [pc, #364]	@ (8001d14 <HAL_DMA_Abort+0x474>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d00e      	beq.n	8001bca <HAL_DMA_Abort+0x32a>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a59      	ldr	r2, [pc, #356]	@ (8001d18 <HAL_DMA_Abort+0x478>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d009      	beq.n	8001bca <HAL_DMA_Abort+0x32a>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a58      	ldr	r2, [pc, #352]	@ (8001d1c <HAL_DMA_Abort+0x47c>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d004      	beq.n	8001bca <HAL_DMA_Abort+0x32a>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a56      	ldr	r2, [pc, #344]	@ (8001d20 <HAL_DMA_Abort+0x480>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d108      	bne.n	8001bdc <HAL_DMA_Abort+0x33c>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f022 0201 	bic.w	r2, r2, #1
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	e007      	b.n	8001bec <HAL_DMA_Abort+0x34c>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f022 0201 	bic.w	r2, r2, #1
 8001bea:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001bec:	e013      	b.n	8001c16 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bee:	f7ff fc93 	bl	8001518 <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	2b05      	cmp	r3, #5
 8001bfa:	d90c      	bls.n	8001c16 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2220      	movs	r2, #32
 8001c00:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2203      	movs	r2, #3
 8001c06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e12d      	b.n	8001e72 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1e5      	bne.n	8001bee <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a2f      	ldr	r2, [pc, #188]	@ (8001ce4 <HAL_DMA_Abort+0x444>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d04a      	beq.n	8001cc2 <HAL_DMA_Abort+0x422>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a2d      	ldr	r2, [pc, #180]	@ (8001ce8 <HAL_DMA_Abort+0x448>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d045      	beq.n	8001cc2 <HAL_DMA_Abort+0x422>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a2c      	ldr	r2, [pc, #176]	@ (8001cec <HAL_DMA_Abort+0x44c>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d040      	beq.n	8001cc2 <HAL_DMA_Abort+0x422>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a2a      	ldr	r2, [pc, #168]	@ (8001cf0 <HAL_DMA_Abort+0x450>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d03b      	beq.n	8001cc2 <HAL_DMA_Abort+0x422>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a29      	ldr	r2, [pc, #164]	@ (8001cf4 <HAL_DMA_Abort+0x454>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d036      	beq.n	8001cc2 <HAL_DMA_Abort+0x422>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a27      	ldr	r2, [pc, #156]	@ (8001cf8 <HAL_DMA_Abort+0x458>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d031      	beq.n	8001cc2 <HAL_DMA_Abort+0x422>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a26      	ldr	r2, [pc, #152]	@ (8001cfc <HAL_DMA_Abort+0x45c>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d02c      	beq.n	8001cc2 <HAL_DMA_Abort+0x422>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a24      	ldr	r2, [pc, #144]	@ (8001d00 <HAL_DMA_Abort+0x460>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d027      	beq.n	8001cc2 <HAL_DMA_Abort+0x422>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a23      	ldr	r2, [pc, #140]	@ (8001d04 <HAL_DMA_Abort+0x464>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d022      	beq.n	8001cc2 <HAL_DMA_Abort+0x422>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a21      	ldr	r2, [pc, #132]	@ (8001d08 <HAL_DMA_Abort+0x468>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d01d      	beq.n	8001cc2 <HAL_DMA_Abort+0x422>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a20      	ldr	r2, [pc, #128]	@ (8001d0c <HAL_DMA_Abort+0x46c>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d018      	beq.n	8001cc2 <HAL_DMA_Abort+0x422>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a1e      	ldr	r2, [pc, #120]	@ (8001d10 <HAL_DMA_Abort+0x470>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d013      	beq.n	8001cc2 <HAL_DMA_Abort+0x422>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a1d      	ldr	r2, [pc, #116]	@ (8001d14 <HAL_DMA_Abort+0x474>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d00e      	beq.n	8001cc2 <HAL_DMA_Abort+0x422>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a1b      	ldr	r2, [pc, #108]	@ (8001d18 <HAL_DMA_Abort+0x478>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d009      	beq.n	8001cc2 <HAL_DMA_Abort+0x422>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a1a      	ldr	r2, [pc, #104]	@ (8001d1c <HAL_DMA_Abort+0x47c>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d004      	beq.n	8001cc2 <HAL_DMA_Abort+0x422>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a18      	ldr	r2, [pc, #96]	@ (8001d20 <HAL_DMA_Abort+0x480>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d101      	bne.n	8001cc6 <HAL_DMA_Abort+0x426>
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e000      	b.n	8001cc8 <HAL_DMA_Abort+0x428>
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d02b      	beq.n	8001d24 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cd0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cd6:	f003 031f 	and.w	r3, r3, #31
 8001cda:	223f      	movs	r2, #63	@ 0x3f
 8001cdc:	409a      	lsls	r2, r3
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	609a      	str	r2, [r3, #8]
 8001ce2:	e02a      	b.n	8001d3a <HAL_DMA_Abort+0x49a>
 8001ce4:	40020010 	.word	0x40020010
 8001ce8:	40020028 	.word	0x40020028
 8001cec:	40020040 	.word	0x40020040
 8001cf0:	40020058 	.word	0x40020058
 8001cf4:	40020070 	.word	0x40020070
 8001cf8:	40020088 	.word	0x40020088
 8001cfc:	400200a0 	.word	0x400200a0
 8001d00:	400200b8 	.word	0x400200b8
 8001d04:	40020410 	.word	0x40020410
 8001d08:	40020428 	.word	0x40020428
 8001d0c:	40020440 	.word	0x40020440
 8001d10:	40020458 	.word	0x40020458
 8001d14:	40020470 	.word	0x40020470
 8001d18:	40020488 	.word	0x40020488
 8001d1c:	400204a0 	.word	0x400204a0
 8001d20:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d28:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d2e:	f003 031f 	and.w	r3, r3, #31
 8001d32:	2201      	movs	r2, #1
 8001d34:	409a      	lsls	r2, r3
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a4f      	ldr	r2, [pc, #316]	@ (8001e7c <HAL_DMA_Abort+0x5dc>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d072      	beq.n	8001e2a <HAL_DMA_Abort+0x58a>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a4d      	ldr	r2, [pc, #308]	@ (8001e80 <HAL_DMA_Abort+0x5e0>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d06d      	beq.n	8001e2a <HAL_DMA_Abort+0x58a>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a4c      	ldr	r2, [pc, #304]	@ (8001e84 <HAL_DMA_Abort+0x5e4>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d068      	beq.n	8001e2a <HAL_DMA_Abort+0x58a>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a4a      	ldr	r2, [pc, #296]	@ (8001e88 <HAL_DMA_Abort+0x5e8>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d063      	beq.n	8001e2a <HAL_DMA_Abort+0x58a>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a49      	ldr	r2, [pc, #292]	@ (8001e8c <HAL_DMA_Abort+0x5ec>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d05e      	beq.n	8001e2a <HAL_DMA_Abort+0x58a>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a47      	ldr	r2, [pc, #284]	@ (8001e90 <HAL_DMA_Abort+0x5f0>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d059      	beq.n	8001e2a <HAL_DMA_Abort+0x58a>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a46      	ldr	r2, [pc, #280]	@ (8001e94 <HAL_DMA_Abort+0x5f4>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d054      	beq.n	8001e2a <HAL_DMA_Abort+0x58a>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a44      	ldr	r2, [pc, #272]	@ (8001e98 <HAL_DMA_Abort+0x5f8>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d04f      	beq.n	8001e2a <HAL_DMA_Abort+0x58a>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a43      	ldr	r2, [pc, #268]	@ (8001e9c <HAL_DMA_Abort+0x5fc>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d04a      	beq.n	8001e2a <HAL_DMA_Abort+0x58a>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a41      	ldr	r2, [pc, #260]	@ (8001ea0 <HAL_DMA_Abort+0x600>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d045      	beq.n	8001e2a <HAL_DMA_Abort+0x58a>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a40      	ldr	r2, [pc, #256]	@ (8001ea4 <HAL_DMA_Abort+0x604>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d040      	beq.n	8001e2a <HAL_DMA_Abort+0x58a>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a3e      	ldr	r2, [pc, #248]	@ (8001ea8 <HAL_DMA_Abort+0x608>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d03b      	beq.n	8001e2a <HAL_DMA_Abort+0x58a>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a3d      	ldr	r2, [pc, #244]	@ (8001eac <HAL_DMA_Abort+0x60c>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d036      	beq.n	8001e2a <HAL_DMA_Abort+0x58a>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a3b      	ldr	r2, [pc, #236]	@ (8001eb0 <HAL_DMA_Abort+0x610>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d031      	beq.n	8001e2a <HAL_DMA_Abort+0x58a>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a3a      	ldr	r2, [pc, #232]	@ (8001eb4 <HAL_DMA_Abort+0x614>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d02c      	beq.n	8001e2a <HAL_DMA_Abort+0x58a>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a38      	ldr	r2, [pc, #224]	@ (8001eb8 <HAL_DMA_Abort+0x618>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d027      	beq.n	8001e2a <HAL_DMA_Abort+0x58a>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a37      	ldr	r2, [pc, #220]	@ (8001ebc <HAL_DMA_Abort+0x61c>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d022      	beq.n	8001e2a <HAL_DMA_Abort+0x58a>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a35      	ldr	r2, [pc, #212]	@ (8001ec0 <HAL_DMA_Abort+0x620>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d01d      	beq.n	8001e2a <HAL_DMA_Abort+0x58a>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a34      	ldr	r2, [pc, #208]	@ (8001ec4 <HAL_DMA_Abort+0x624>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d018      	beq.n	8001e2a <HAL_DMA_Abort+0x58a>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a32      	ldr	r2, [pc, #200]	@ (8001ec8 <HAL_DMA_Abort+0x628>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d013      	beq.n	8001e2a <HAL_DMA_Abort+0x58a>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a31      	ldr	r2, [pc, #196]	@ (8001ecc <HAL_DMA_Abort+0x62c>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d00e      	beq.n	8001e2a <HAL_DMA_Abort+0x58a>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a2f      	ldr	r2, [pc, #188]	@ (8001ed0 <HAL_DMA_Abort+0x630>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d009      	beq.n	8001e2a <HAL_DMA_Abort+0x58a>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a2e      	ldr	r2, [pc, #184]	@ (8001ed4 <HAL_DMA_Abort+0x634>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d004      	beq.n	8001e2a <HAL_DMA_Abort+0x58a>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a2c      	ldr	r2, [pc, #176]	@ (8001ed8 <HAL_DMA_Abort+0x638>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d101      	bne.n	8001e2e <HAL_DMA_Abort+0x58e>
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e000      	b.n	8001e30 <HAL_DMA_Abort+0x590>
 8001e2e:	2300      	movs	r3, #0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d015      	beq.n	8001e60 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001e3c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d00c      	beq.n	8001e60 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e50:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e54:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001e5e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3718      	adds	r7, #24
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40020010 	.word	0x40020010
 8001e80:	40020028 	.word	0x40020028
 8001e84:	40020040 	.word	0x40020040
 8001e88:	40020058 	.word	0x40020058
 8001e8c:	40020070 	.word	0x40020070
 8001e90:	40020088 	.word	0x40020088
 8001e94:	400200a0 	.word	0x400200a0
 8001e98:	400200b8 	.word	0x400200b8
 8001e9c:	40020410 	.word	0x40020410
 8001ea0:	40020428 	.word	0x40020428
 8001ea4:	40020440 	.word	0x40020440
 8001ea8:	40020458 	.word	0x40020458
 8001eac:	40020470 	.word	0x40020470
 8001eb0:	40020488 	.word	0x40020488
 8001eb4:	400204a0 	.word	0x400204a0
 8001eb8:	400204b8 	.word	0x400204b8
 8001ebc:	58025408 	.word	0x58025408
 8001ec0:	5802541c 	.word	0x5802541c
 8001ec4:	58025430 	.word	0x58025430
 8001ec8:	58025444 	.word	0x58025444
 8001ecc:	58025458 	.word	0x58025458
 8001ed0:	5802546c 	.word	0x5802546c
 8001ed4:	58025480 	.word	0x58025480
 8001ed8:	58025494 	.word	0x58025494

08001edc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d101      	bne.n	8001eee <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e237      	b.n	800235e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d004      	beq.n	8001f04 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2280      	movs	r2, #128	@ 0x80
 8001efe:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e22c      	b.n	800235e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a5c      	ldr	r2, [pc, #368]	@ (800207c <HAL_DMA_Abort_IT+0x1a0>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d04a      	beq.n	8001fa4 <HAL_DMA_Abort_IT+0xc8>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a5b      	ldr	r2, [pc, #364]	@ (8002080 <HAL_DMA_Abort_IT+0x1a4>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d045      	beq.n	8001fa4 <HAL_DMA_Abort_IT+0xc8>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a59      	ldr	r2, [pc, #356]	@ (8002084 <HAL_DMA_Abort_IT+0x1a8>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d040      	beq.n	8001fa4 <HAL_DMA_Abort_IT+0xc8>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a58      	ldr	r2, [pc, #352]	@ (8002088 <HAL_DMA_Abort_IT+0x1ac>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d03b      	beq.n	8001fa4 <HAL_DMA_Abort_IT+0xc8>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a56      	ldr	r2, [pc, #344]	@ (800208c <HAL_DMA_Abort_IT+0x1b0>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d036      	beq.n	8001fa4 <HAL_DMA_Abort_IT+0xc8>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a55      	ldr	r2, [pc, #340]	@ (8002090 <HAL_DMA_Abort_IT+0x1b4>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d031      	beq.n	8001fa4 <HAL_DMA_Abort_IT+0xc8>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a53      	ldr	r2, [pc, #332]	@ (8002094 <HAL_DMA_Abort_IT+0x1b8>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d02c      	beq.n	8001fa4 <HAL_DMA_Abort_IT+0xc8>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a52      	ldr	r2, [pc, #328]	@ (8002098 <HAL_DMA_Abort_IT+0x1bc>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d027      	beq.n	8001fa4 <HAL_DMA_Abort_IT+0xc8>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a50      	ldr	r2, [pc, #320]	@ (800209c <HAL_DMA_Abort_IT+0x1c0>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d022      	beq.n	8001fa4 <HAL_DMA_Abort_IT+0xc8>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a4f      	ldr	r2, [pc, #316]	@ (80020a0 <HAL_DMA_Abort_IT+0x1c4>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d01d      	beq.n	8001fa4 <HAL_DMA_Abort_IT+0xc8>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a4d      	ldr	r2, [pc, #308]	@ (80020a4 <HAL_DMA_Abort_IT+0x1c8>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d018      	beq.n	8001fa4 <HAL_DMA_Abort_IT+0xc8>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a4c      	ldr	r2, [pc, #304]	@ (80020a8 <HAL_DMA_Abort_IT+0x1cc>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d013      	beq.n	8001fa4 <HAL_DMA_Abort_IT+0xc8>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a4a      	ldr	r2, [pc, #296]	@ (80020ac <HAL_DMA_Abort_IT+0x1d0>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d00e      	beq.n	8001fa4 <HAL_DMA_Abort_IT+0xc8>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a49      	ldr	r2, [pc, #292]	@ (80020b0 <HAL_DMA_Abort_IT+0x1d4>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d009      	beq.n	8001fa4 <HAL_DMA_Abort_IT+0xc8>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a47      	ldr	r2, [pc, #284]	@ (80020b4 <HAL_DMA_Abort_IT+0x1d8>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d004      	beq.n	8001fa4 <HAL_DMA_Abort_IT+0xc8>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a46      	ldr	r2, [pc, #280]	@ (80020b8 <HAL_DMA_Abort_IT+0x1dc>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d101      	bne.n	8001fa8 <HAL_DMA_Abort_IT+0xcc>
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e000      	b.n	8001faa <HAL_DMA_Abort_IT+0xce>
 8001fa8:	2300      	movs	r3, #0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	f000 8086 	beq.w	80020bc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2204      	movs	r2, #4
 8001fb4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a2f      	ldr	r2, [pc, #188]	@ (800207c <HAL_DMA_Abort_IT+0x1a0>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d04a      	beq.n	8002058 <HAL_DMA_Abort_IT+0x17c>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a2e      	ldr	r2, [pc, #184]	@ (8002080 <HAL_DMA_Abort_IT+0x1a4>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d045      	beq.n	8002058 <HAL_DMA_Abort_IT+0x17c>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a2c      	ldr	r2, [pc, #176]	@ (8002084 <HAL_DMA_Abort_IT+0x1a8>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d040      	beq.n	8002058 <HAL_DMA_Abort_IT+0x17c>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a2b      	ldr	r2, [pc, #172]	@ (8002088 <HAL_DMA_Abort_IT+0x1ac>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d03b      	beq.n	8002058 <HAL_DMA_Abort_IT+0x17c>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a29      	ldr	r2, [pc, #164]	@ (800208c <HAL_DMA_Abort_IT+0x1b0>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d036      	beq.n	8002058 <HAL_DMA_Abort_IT+0x17c>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a28      	ldr	r2, [pc, #160]	@ (8002090 <HAL_DMA_Abort_IT+0x1b4>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d031      	beq.n	8002058 <HAL_DMA_Abort_IT+0x17c>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a26      	ldr	r2, [pc, #152]	@ (8002094 <HAL_DMA_Abort_IT+0x1b8>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d02c      	beq.n	8002058 <HAL_DMA_Abort_IT+0x17c>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a25      	ldr	r2, [pc, #148]	@ (8002098 <HAL_DMA_Abort_IT+0x1bc>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d027      	beq.n	8002058 <HAL_DMA_Abort_IT+0x17c>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a23      	ldr	r2, [pc, #140]	@ (800209c <HAL_DMA_Abort_IT+0x1c0>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d022      	beq.n	8002058 <HAL_DMA_Abort_IT+0x17c>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a22      	ldr	r2, [pc, #136]	@ (80020a0 <HAL_DMA_Abort_IT+0x1c4>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d01d      	beq.n	8002058 <HAL_DMA_Abort_IT+0x17c>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a20      	ldr	r2, [pc, #128]	@ (80020a4 <HAL_DMA_Abort_IT+0x1c8>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d018      	beq.n	8002058 <HAL_DMA_Abort_IT+0x17c>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a1f      	ldr	r2, [pc, #124]	@ (80020a8 <HAL_DMA_Abort_IT+0x1cc>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d013      	beq.n	8002058 <HAL_DMA_Abort_IT+0x17c>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a1d      	ldr	r2, [pc, #116]	@ (80020ac <HAL_DMA_Abort_IT+0x1d0>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d00e      	beq.n	8002058 <HAL_DMA_Abort_IT+0x17c>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a1c      	ldr	r2, [pc, #112]	@ (80020b0 <HAL_DMA_Abort_IT+0x1d4>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d009      	beq.n	8002058 <HAL_DMA_Abort_IT+0x17c>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a1a      	ldr	r2, [pc, #104]	@ (80020b4 <HAL_DMA_Abort_IT+0x1d8>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d004      	beq.n	8002058 <HAL_DMA_Abort_IT+0x17c>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a19      	ldr	r2, [pc, #100]	@ (80020b8 <HAL_DMA_Abort_IT+0x1dc>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d108      	bne.n	800206a <HAL_DMA_Abort_IT+0x18e>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f022 0201 	bic.w	r2, r2, #1
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	e178      	b.n	800235c <HAL_DMA_Abort_IT+0x480>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f022 0201 	bic.w	r2, r2, #1
 8002078:	601a      	str	r2, [r3, #0]
 800207a:	e16f      	b.n	800235c <HAL_DMA_Abort_IT+0x480>
 800207c:	40020010 	.word	0x40020010
 8002080:	40020028 	.word	0x40020028
 8002084:	40020040 	.word	0x40020040
 8002088:	40020058 	.word	0x40020058
 800208c:	40020070 	.word	0x40020070
 8002090:	40020088 	.word	0x40020088
 8002094:	400200a0 	.word	0x400200a0
 8002098:	400200b8 	.word	0x400200b8
 800209c:	40020410 	.word	0x40020410
 80020a0:	40020428 	.word	0x40020428
 80020a4:	40020440 	.word	0x40020440
 80020a8:	40020458 	.word	0x40020458
 80020ac:	40020470 	.word	0x40020470
 80020b0:	40020488 	.word	0x40020488
 80020b4:	400204a0 	.word	0x400204a0
 80020b8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f022 020e 	bic.w	r2, r2, #14
 80020ca:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a6c      	ldr	r2, [pc, #432]	@ (8002284 <HAL_DMA_Abort_IT+0x3a8>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d04a      	beq.n	800216c <HAL_DMA_Abort_IT+0x290>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a6b      	ldr	r2, [pc, #428]	@ (8002288 <HAL_DMA_Abort_IT+0x3ac>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d045      	beq.n	800216c <HAL_DMA_Abort_IT+0x290>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a69      	ldr	r2, [pc, #420]	@ (800228c <HAL_DMA_Abort_IT+0x3b0>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d040      	beq.n	800216c <HAL_DMA_Abort_IT+0x290>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a68      	ldr	r2, [pc, #416]	@ (8002290 <HAL_DMA_Abort_IT+0x3b4>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d03b      	beq.n	800216c <HAL_DMA_Abort_IT+0x290>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a66      	ldr	r2, [pc, #408]	@ (8002294 <HAL_DMA_Abort_IT+0x3b8>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d036      	beq.n	800216c <HAL_DMA_Abort_IT+0x290>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a65      	ldr	r2, [pc, #404]	@ (8002298 <HAL_DMA_Abort_IT+0x3bc>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d031      	beq.n	800216c <HAL_DMA_Abort_IT+0x290>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a63      	ldr	r2, [pc, #396]	@ (800229c <HAL_DMA_Abort_IT+0x3c0>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d02c      	beq.n	800216c <HAL_DMA_Abort_IT+0x290>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a62      	ldr	r2, [pc, #392]	@ (80022a0 <HAL_DMA_Abort_IT+0x3c4>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d027      	beq.n	800216c <HAL_DMA_Abort_IT+0x290>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a60      	ldr	r2, [pc, #384]	@ (80022a4 <HAL_DMA_Abort_IT+0x3c8>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d022      	beq.n	800216c <HAL_DMA_Abort_IT+0x290>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a5f      	ldr	r2, [pc, #380]	@ (80022a8 <HAL_DMA_Abort_IT+0x3cc>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d01d      	beq.n	800216c <HAL_DMA_Abort_IT+0x290>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a5d      	ldr	r2, [pc, #372]	@ (80022ac <HAL_DMA_Abort_IT+0x3d0>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d018      	beq.n	800216c <HAL_DMA_Abort_IT+0x290>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a5c      	ldr	r2, [pc, #368]	@ (80022b0 <HAL_DMA_Abort_IT+0x3d4>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d013      	beq.n	800216c <HAL_DMA_Abort_IT+0x290>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a5a      	ldr	r2, [pc, #360]	@ (80022b4 <HAL_DMA_Abort_IT+0x3d8>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d00e      	beq.n	800216c <HAL_DMA_Abort_IT+0x290>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a59      	ldr	r2, [pc, #356]	@ (80022b8 <HAL_DMA_Abort_IT+0x3dc>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d009      	beq.n	800216c <HAL_DMA_Abort_IT+0x290>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a57      	ldr	r2, [pc, #348]	@ (80022bc <HAL_DMA_Abort_IT+0x3e0>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d004      	beq.n	800216c <HAL_DMA_Abort_IT+0x290>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a56      	ldr	r2, [pc, #344]	@ (80022c0 <HAL_DMA_Abort_IT+0x3e4>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d108      	bne.n	800217e <HAL_DMA_Abort_IT+0x2a2>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f022 0201 	bic.w	r2, r2, #1
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	e007      	b.n	800218e <HAL_DMA_Abort_IT+0x2b2>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f022 0201 	bic.w	r2, r2, #1
 800218c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a3c      	ldr	r2, [pc, #240]	@ (8002284 <HAL_DMA_Abort_IT+0x3a8>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d072      	beq.n	800227e <HAL_DMA_Abort_IT+0x3a2>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a3a      	ldr	r2, [pc, #232]	@ (8002288 <HAL_DMA_Abort_IT+0x3ac>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d06d      	beq.n	800227e <HAL_DMA_Abort_IT+0x3a2>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a39      	ldr	r2, [pc, #228]	@ (800228c <HAL_DMA_Abort_IT+0x3b0>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d068      	beq.n	800227e <HAL_DMA_Abort_IT+0x3a2>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a37      	ldr	r2, [pc, #220]	@ (8002290 <HAL_DMA_Abort_IT+0x3b4>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d063      	beq.n	800227e <HAL_DMA_Abort_IT+0x3a2>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a36      	ldr	r2, [pc, #216]	@ (8002294 <HAL_DMA_Abort_IT+0x3b8>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d05e      	beq.n	800227e <HAL_DMA_Abort_IT+0x3a2>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a34      	ldr	r2, [pc, #208]	@ (8002298 <HAL_DMA_Abort_IT+0x3bc>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d059      	beq.n	800227e <HAL_DMA_Abort_IT+0x3a2>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a33      	ldr	r2, [pc, #204]	@ (800229c <HAL_DMA_Abort_IT+0x3c0>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d054      	beq.n	800227e <HAL_DMA_Abort_IT+0x3a2>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a31      	ldr	r2, [pc, #196]	@ (80022a0 <HAL_DMA_Abort_IT+0x3c4>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d04f      	beq.n	800227e <HAL_DMA_Abort_IT+0x3a2>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a30      	ldr	r2, [pc, #192]	@ (80022a4 <HAL_DMA_Abort_IT+0x3c8>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d04a      	beq.n	800227e <HAL_DMA_Abort_IT+0x3a2>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a2e      	ldr	r2, [pc, #184]	@ (80022a8 <HAL_DMA_Abort_IT+0x3cc>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d045      	beq.n	800227e <HAL_DMA_Abort_IT+0x3a2>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a2d      	ldr	r2, [pc, #180]	@ (80022ac <HAL_DMA_Abort_IT+0x3d0>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d040      	beq.n	800227e <HAL_DMA_Abort_IT+0x3a2>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a2b      	ldr	r2, [pc, #172]	@ (80022b0 <HAL_DMA_Abort_IT+0x3d4>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d03b      	beq.n	800227e <HAL_DMA_Abort_IT+0x3a2>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a2a      	ldr	r2, [pc, #168]	@ (80022b4 <HAL_DMA_Abort_IT+0x3d8>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d036      	beq.n	800227e <HAL_DMA_Abort_IT+0x3a2>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a28      	ldr	r2, [pc, #160]	@ (80022b8 <HAL_DMA_Abort_IT+0x3dc>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d031      	beq.n	800227e <HAL_DMA_Abort_IT+0x3a2>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a27      	ldr	r2, [pc, #156]	@ (80022bc <HAL_DMA_Abort_IT+0x3e0>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d02c      	beq.n	800227e <HAL_DMA_Abort_IT+0x3a2>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a25      	ldr	r2, [pc, #148]	@ (80022c0 <HAL_DMA_Abort_IT+0x3e4>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d027      	beq.n	800227e <HAL_DMA_Abort_IT+0x3a2>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a24      	ldr	r2, [pc, #144]	@ (80022c4 <HAL_DMA_Abort_IT+0x3e8>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d022      	beq.n	800227e <HAL_DMA_Abort_IT+0x3a2>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a22      	ldr	r2, [pc, #136]	@ (80022c8 <HAL_DMA_Abort_IT+0x3ec>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d01d      	beq.n	800227e <HAL_DMA_Abort_IT+0x3a2>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a21      	ldr	r2, [pc, #132]	@ (80022cc <HAL_DMA_Abort_IT+0x3f0>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d018      	beq.n	800227e <HAL_DMA_Abort_IT+0x3a2>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a1f      	ldr	r2, [pc, #124]	@ (80022d0 <HAL_DMA_Abort_IT+0x3f4>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d013      	beq.n	800227e <HAL_DMA_Abort_IT+0x3a2>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a1e      	ldr	r2, [pc, #120]	@ (80022d4 <HAL_DMA_Abort_IT+0x3f8>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d00e      	beq.n	800227e <HAL_DMA_Abort_IT+0x3a2>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a1c      	ldr	r2, [pc, #112]	@ (80022d8 <HAL_DMA_Abort_IT+0x3fc>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d009      	beq.n	800227e <HAL_DMA_Abort_IT+0x3a2>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a1b      	ldr	r2, [pc, #108]	@ (80022dc <HAL_DMA_Abort_IT+0x400>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d004      	beq.n	800227e <HAL_DMA_Abort_IT+0x3a2>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a19      	ldr	r2, [pc, #100]	@ (80022e0 <HAL_DMA_Abort_IT+0x404>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d132      	bne.n	80022e4 <HAL_DMA_Abort_IT+0x408>
 800227e:	2301      	movs	r3, #1
 8002280:	e031      	b.n	80022e6 <HAL_DMA_Abort_IT+0x40a>
 8002282:	bf00      	nop
 8002284:	40020010 	.word	0x40020010
 8002288:	40020028 	.word	0x40020028
 800228c:	40020040 	.word	0x40020040
 8002290:	40020058 	.word	0x40020058
 8002294:	40020070 	.word	0x40020070
 8002298:	40020088 	.word	0x40020088
 800229c:	400200a0 	.word	0x400200a0
 80022a0:	400200b8 	.word	0x400200b8
 80022a4:	40020410 	.word	0x40020410
 80022a8:	40020428 	.word	0x40020428
 80022ac:	40020440 	.word	0x40020440
 80022b0:	40020458 	.word	0x40020458
 80022b4:	40020470 	.word	0x40020470
 80022b8:	40020488 	.word	0x40020488
 80022bc:	400204a0 	.word	0x400204a0
 80022c0:	400204b8 	.word	0x400204b8
 80022c4:	58025408 	.word	0x58025408
 80022c8:	5802541c 	.word	0x5802541c
 80022cc:	58025430 	.word	0x58025430
 80022d0:	58025444 	.word	0x58025444
 80022d4:	58025458 	.word	0x58025458
 80022d8:	5802546c 	.word	0x5802546c
 80022dc:	58025480 	.word	0x58025480
 80022e0:	58025494 	.word	0x58025494
 80022e4:	2300      	movs	r3, #0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d028      	beq.n	800233c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80022f8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022fe:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002304:	f003 031f 	and.w	r3, r3, #31
 8002308:	2201      	movs	r2, #1
 800230a:	409a      	lsls	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002318:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800231e:	2b00      	cmp	r3, #0
 8002320:	d00c      	beq.n	800233c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800232c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002330:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800233a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002350:	2b00      	cmp	r3, #0
 8002352:	d003      	beq.n	800235c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3710      	adds	r7, #16
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop

08002368 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8002368:	b480      	push	{r7}
 800236a:	b089      	sub	sp, #36	@ 0x24
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002372:	2300      	movs	r3, #0
 8002374:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002376:	4b89      	ldr	r3, [pc, #548]	@ (800259c <HAL_GPIO_Init+0x234>)
 8002378:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800237a:	e194      	b.n	80026a6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	2101      	movs	r1, #1
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	fa01 f303 	lsl.w	r3, r1, r3
 8002388:	4013      	ands	r3, r2
 800238a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	2b00      	cmp	r3, #0
 8002390:	f000 8186 	beq.w	80026a0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f003 0303 	and.w	r3, r3, #3
 800239c:	2b01      	cmp	r3, #1
 800239e:	d005      	beq.n	80023ac <HAL_GPIO_Init+0x44>
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f003 0303 	and.w	r3, r3, #3
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d130      	bne.n	800240e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	2203      	movs	r2, #3
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	43db      	mvns	r3, r3
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	4013      	ands	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	68da      	ldr	r2, [r3, #12]
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023e2:	2201      	movs	r2, #1
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ea:	43db      	mvns	r3, r3
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	4013      	ands	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	091b      	lsrs	r3, r3, #4
 80023f8:	f003 0201 	and.w	r2, r3, #1
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	4313      	orrs	r3, r2
 8002406:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f003 0303 	and.w	r3, r3, #3
 8002416:	2b03      	cmp	r3, #3
 8002418:	d017      	beq.n	800244a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	2203      	movs	r2, #3
 8002426:	fa02 f303 	lsl.w	r3, r2, r3
 800242a:	43db      	mvns	r3, r3
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	4013      	ands	r3, r2
 8002430:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	689a      	ldr	r2, [r3, #8]
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	fa02 f303 	lsl.w	r3, r2, r3
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	4313      	orrs	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f003 0303 	and.w	r3, r3, #3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d123      	bne.n	800249e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	08da      	lsrs	r2, r3, #3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	3208      	adds	r2, #8
 800245e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002462:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	f003 0307 	and.w	r3, r3, #7
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	220f      	movs	r2, #15
 800246e:	fa02 f303 	lsl.w	r3, r2, r3
 8002472:	43db      	mvns	r3, r3
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	4013      	ands	r3, r2
 8002478:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	691a      	ldr	r2, [r3, #16]
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	f003 0307 	and.w	r3, r3, #7
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	4313      	orrs	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	08da      	lsrs	r2, r3, #3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	3208      	adds	r2, #8
 8002498:	69b9      	ldr	r1, [r7, #24]
 800249a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	2203      	movs	r2, #3
 80024aa:	fa02 f303 	lsl.w	r3, r2, r3
 80024ae:	43db      	mvns	r3, r3
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	4013      	ands	r3, r2
 80024b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f003 0203 	and.w	r2, r3, #3
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	fa02 f303 	lsl.w	r3, r2, r3
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	69ba      	ldr	r2, [r7, #24]
 80024d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f000 80e0 	beq.w	80026a0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024e0:	4b2f      	ldr	r3, [pc, #188]	@ (80025a0 <HAL_GPIO_Init+0x238>)
 80024e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80024e6:	4a2e      	ldr	r2, [pc, #184]	@ (80025a0 <HAL_GPIO_Init+0x238>)
 80024e8:	f043 0302 	orr.w	r3, r3, #2
 80024ec:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80024f0:	4b2b      	ldr	r3, [pc, #172]	@ (80025a0 <HAL_GPIO_Init+0x238>)
 80024f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	60fb      	str	r3, [r7, #12]
 80024fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024fe:	4a29      	ldr	r2, [pc, #164]	@ (80025a4 <HAL_GPIO_Init+0x23c>)
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	089b      	lsrs	r3, r3, #2
 8002504:	3302      	adds	r3, #2
 8002506:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800250a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	f003 0303 	and.w	r3, r3, #3
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	220f      	movs	r2, #15
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	43db      	mvns	r3, r3
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	4013      	ands	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a20      	ldr	r2, [pc, #128]	@ (80025a8 <HAL_GPIO_Init+0x240>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d052      	beq.n	80025d0 <HAL_GPIO_Init+0x268>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a1f      	ldr	r2, [pc, #124]	@ (80025ac <HAL_GPIO_Init+0x244>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d031      	beq.n	8002596 <HAL_GPIO_Init+0x22e>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a1e      	ldr	r2, [pc, #120]	@ (80025b0 <HAL_GPIO_Init+0x248>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d02b      	beq.n	8002592 <HAL_GPIO_Init+0x22a>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a1d      	ldr	r2, [pc, #116]	@ (80025b4 <HAL_GPIO_Init+0x24c>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d025      	beq.n	800258e <HAL_GPIO_Init+0x226>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a1c      	ldr	r2, [pc, #112]	@ (80025b8 <HAL_GPIO_Init+0x250>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d01f      	beq.n	800258a <HAL_GPIO_Init+0x222>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a1b      	ldr	r2, [pc, #108]	@ (80025bc <HAL_GPIO_Init+0x254>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d019      	beq.n	8002586 <HAL_GPIO_Init+0x21e>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a1a      	ldr	r2, [pc, #104]	@ (80025c0 <HAL_GPIO_Init+0x258>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d013      	beq.n	8002582 <HAL_GPIO_Init+0x21a>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a19      	ldr	r2, [pc, #100]	@ (80025c4 <HAL_GPIO_Init+0x25c>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d00d      	beq.n	800257e <HAL_GPIO_Init+0x216>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a18      	ldr	r2, [pc, #96]	@ (80025c8 <HAL_GPIO_Init+0x260>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d007      	beq.n	800257a <HAL_GPIO_Init+0x212>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a17      	ldr	r2, [pc, #92]	@ (80025cc <HAL_GPIO_Init+0x264>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d101      	bne.n	8002576 <HAL_GPIO_Init+0x20e>
 8002572:	2309      	movs	r3, #9
 8002574:	e02d      	b.n	80025d2 <HAL_GPIO_Init+0x26a>
 8002576:	230a      	movs	r3, #10
 8002578:	e02b      	b.n	80025d2 <HAL_GPIO_Init+0x26a>
 800257a:	2308      	movs	r3, #8
 800257c:	e029      	b.n	80025d2 <HAL_GPIO_Init+0x26a>
 800257e:	2307      	movs	r3, #7
 8002580:	e027      	b.n	80025d2 <HAL_GPIO_Init+0x26a>
 8002582:	2306      	movs	r3, #6
 8002584:	e025      	b.n	80025d2 <HAL_GPIO_Init+0x26a>
 8002586:	2305      	movs	r3, #5
 8002588:	e023      	b.n	80025d2 <HAL_GPIO_Init+0x26a>
 800258a:	2304      	movs	r3, #4
 800258c:	e021      	b.n	80025d2 <HAL_GPIO_Init+0x26a>
 800258e:	2303      	movs	r3, #3
 8002590:	e01f      	b.n	80025d2 <HAL_GPIO_Init+0x26a>
 8002592:	2302      	movs	r3, #2
 8002594:	e01d      	b.n	80025d2 <HAL_GPIO_Init+0x26a>
 8002596:	2301      	movs	r3, #1
 8002598:	e01b      	b.n	80025d2 <HAL_GPIO_Init+0x26a>
 800259a:	bf00      	nop
 800259c:	58000080 	.word	0x58000080
 80025a0:	58024400 	.word	0x58024400
 80025a4:	58000400 	.word	0x58000400
 80025a8:	58020000 	.word	0x58020000
 80025ac:	58020400 	.word	0x58020400
 80025b0:	58020800 	.word	0x58020800
 80025b4:	58020c00 	.word	0x58020c00
 80025b8:	58021000 	.word	0x58021000
 80025bc:	58021400 	.word	0x58021400
 80025c0:	58021800 	.word	0x58021800
 80025c4:	58021c00 	.word	0x58021c00
 80025c8:	58022000 	.word	0x58022000
 80025cc:	58022400 	.word	0x58022400
 80025d0:	2300      	movs	r3, #0
 80025d2:	69fa      	ldr	r2, [r7, #28]
 80025d4:	f002 0203 	and.w	r2, r2, #3
 80025d8:	0092      	lsls	r2, r2, #2
 80025da:	4093      	lsls	r3, r2
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	4313      	orrs	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025e2:	4938      	ldr	r1, [pc, #224]	@ (80026c4 <HAL_GPIO_Init+0x35c>)
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	089b      	lsrs	r3, r3, #2
 80025e8:	3302      	adds	r3, #2
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80025f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	43db      	mvns	r3, r3
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	4013      	ands	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d003      	beq.n	8002616 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	4313      	orrs	r3, r2
 8002614:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002616:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800261e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	43db      	mvns	r3, r3
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	4013      	ands	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d003      	beq.n	8002644 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	4313      	orrs	r3, r2
 8002642:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002644:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	43db      	mvns	r3, r3
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	4013      	ands	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d003      	beq.n	8002670 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	4313      	orrs	r3, r2
 800266e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	43db      	mvns	r3, r3
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	4013      	ands	r3, r2
 8002684:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d003      	beq.n	800269a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	4313      	orrs	r3, r2
 8002698:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	3301      	adds	r3, #1
 80026a4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	fa22 f303 	lsr.w	r3, r2, r3
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	f47f ae63 	bne.w	800237c <HAL_GPIO_Init+0x14>
  }
}
 80026b6:	bf00      	nop
 80026b8:	bf00      	nop
 80026ba:	3724      	adds	r7, #36	@ 0x24
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr
 80026c4:	58000400 	.word	0x58000400

080026c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	460b      	mov	r3, r1
 80026d2:	807b      	strh	r3, [r7, #2]
 80026d4:	4613      	mov	r3, r2
 80026d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026d8:	787b      	ldrb	r3, [r7, #1]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d003      	beq.n	80026e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026de:	887a      	ldrh	r2, [r7, #2]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80026e4:	e003      	b.n	80026ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80026e6:	887b      	ldrh	r3, [r7, #2]
 80026e8:	041a      	lsls	r2, r3, #16
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	619a      	str	r2, [r3, #24]
}
 80026ee:	bf00      	nop
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr

080026fa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80026fa:	b480      	push	{r7}
 80026fc:	b085      	sub	sp, #20
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
 8002702:	460b      	mov	r3, r1
 8002704:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800270c:	887a      	ldrh	r2, [r7, #2]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	4013      	ands	r3, r2
 8002712:	041a      	lsls	r2, r3, #16
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	43d9      	mvns	r1, r3
 8002718:	887b      	ldrh	r3, [r7, #2]
 800271a:	400b      	ands	r3, r1
 800271c:	431a      	orrs	r2, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	619a      	str	r2, [r3, #24]
}
 8002722:	bf00      	nop
 8002724:	3714      	adds	r7, #20
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr

0800272e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	b082      	sub	sp, #8
 8002732:	af00      	add	r7, sp, #0
 8002734:	4603      	mov	r3, r0
 8002736:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8002738:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800273c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002740:	88fb      	ldrh	r3, [r7, #6]
 8002742:	4013      	ands	r3, r2
 8002744:	2b00      	cmp	r3, #0
 8002746:	d008      	beq.n	800275a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002748:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800274c:	88fb      	ldrh	r3, [r7, #6]
 800274e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002752:	88fb      	ldrh	r3, [r7, #6]
 8002754:	4618      	mov	r0, r3
 8002756:	f000 f804 	bl	8002762 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800275a:	bf00      	nop
 800275c:	3708      	adds	r7, #8
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002762:	b480      	push	{r7}
 8002764:	b083      	sub	sp, #12
 8002766:	af00      	add	r7, sp, #0
 8002768:	4603      	mov	r3, r0
 800276a:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002780:	4b19      	ldr	r3, [pc, #100]	@ (80027e8 <HAL_PWREx_ConfigSupply+0x70>)
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	f003 0304 	and.w	r3, r3, #4
 8002788:	2b04      	cmp	r3, #4
 800278a:	d00a      	beq.n	80027a2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800278c:	4b16      	ldr	r3, [pc, #88]	@ (80027e8 <HAL_PWREx_ConfigSupply+0x70>)
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	f003 0307 	and.w	r3, r3, #7
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	429a      	cmp	r2, r3
 8002798:	d001      	beq.n	800279e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e01f      	b.n	80027de <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800279e:	2300      	movs	r3, #0
 80027a0:	e01d      	b.n	80027de <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80027a2:	4b11      	ldr	r3, [pc, #68]	@ (80027e8 <HAL_PWREx_ConfigSupply+0x70>)
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	f023 0207 	bic.w	r2, r3, #7
 80027aa:	490f      	ldr	r1, [pc, #60]	@ (80027e8 <HAL_PWREx_ConfigSupply+0x70>)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80027b2:	f7fe feb1 	bl	8001518 <HAL_GetTick>
 80027b6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80027b8:	e009      	b.n	80027ce <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80027ba:	f7fe fead 	bl	8001518 <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80027c8:	d901      	bls.n	80027ce <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e007      	b.n	80027de <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80027ce:	4b06      	ldr	r3, [pc, #24]	@ (80027e8 <HAL_PWREx_ConfigSupply+0x70>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027da:	d1ee      	bne.n	80027ba <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	58024800 	.word	0x58024800

080027ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b08c      	sub	sp, #48	@ 0x30
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d102      	bne.n	8002800 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	f000 bc48 	b.w	8003090 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0301 	and.w	r3, r3, #1
 8002808:	2b00      	cmp	r3, #0
 800280a:	f000 8088 	beq.w	800291e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800280e:	4b99      	ldr	r3, [pc, #612]	@ (8002a74 <HAL_RCC_OscConfig+0x288>)
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002816:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002818:	4b96      	ldr	r3, [pc, #600]	@ (8002a74 <HAL_RCC_OscConfig+0x288>)
 800281a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800281c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800281e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002820:	2b10      	cmp	r3, #16
 8002822:	d007      	beq.n	8002834 <HAL_RCC_OscConfig+0x48>
 8002824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002826:	2b18      	cmp	r3, #24
 8002828:	d111      	bne.n	800284e <HAL_RCC_OscConfig+0x62>
 800282a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800282c:	f003 0303 	and.w	r3, r3, #3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d10c      	bne.n	800284e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002834:	4b8f      	ldr	r3, [pc, #572]	@ (8002a74 <HAL_RCC_OscConfig+0x288>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d06d      	beq.n	800291c <HAL_RCC_OscConfig+0x130>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d169      	bne.n	800291c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	f000 bc21 	b.w	8003090 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002856:	d106      	bne.n	8002866 <HAL_RCC_OscConfig+0x7a>
 8002858:	4b86      	ldr	r3, [pc, #536]	@ (8002a74 <HAL_RCC_OscConfig+0x288>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a85      	ldr	r2, [pc, #532]	@ (8002a74 <HAL_RCC_OscConfig+0x288>)
 800285e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002862:	6013      	str	r3, [r2, #0]
 8002864:	e02e      	b.n	80028c4 <HAL_RCC_OscConfig+0xd8>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d10c      	bne.n	8002888 <HAL_RCC_OscConfig+0x9c>
 800286e:	4b81      	ldr	r3, [pc, #516]	@ (8002a74 <HAL_RCC_OscConfig+0x288>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a80      	ldr	r2, [pc, #512]	@ (8002a74 <HAL_RCC_OscConfig+0x288>)
 8002874:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002878:	6013      	str	r3, [r2, #0]
 800287a:	4b7e      	ldr	r3, [pc, #504]	@ (8002a74 <HAL_RCC_OscConfig+0x288>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a7d      	ldr	r2, [pc, #500]	@ (8002a74 <HAL_RCC_OscConfig+0x288>)
 8002880:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002884:	6013      	str	r3, [r2, #0]
 8002886:	e01d      	b.n	80028c4 <HAL_RCC_OscConfig+0xd8>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002890:	d10c      	bne.n	80028ac <HAL_RCC_OscConfig+0xc0>
 8002892:	4b78      	ldr	r3, [pc, #480]	@ (8002a74 <HAL_RCC_OscConfig+0x288>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a77      	ldr	r2, [pc, #476]	@ (8002a74 <HAL_RCC_OscConfig+0x288>)
 8002898:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800289c:	6013      	str	r3, [r2, #0]
 800289e:	4b75      	ldr	r3, [pc, #468]	@ (8002a74 <HAL_RCC_OscConfig+0x288>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a74      	ldr	r2, [pc, #464]	@ (8002a74 <HAL_RCC_OscConfig+0x288>)
 80028a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028a8:	6013      	str	r3, [r2, #0]
 80028aa:	e00b      	b.n	80028c4 <HAL_RCC_OscConfig+0xd8>
 80028ac:	4b71      	ldr	r3, [pc, #452]	@ (8002a74 <HAL_RCC_OscConfig+0x288>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a70      	ldr	r2, [pc, #448]	@ (8002a74 <HAL_RCC_OscConfig+0x288>)
 80028b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028b6:	6013      	str	r3, [r2, #0]
 80028b8:	4b6e      	ldr	r3, [pc, #440]	@ (8002a74 <HAL_RCC_OscConfig+0x288>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a6d      	ldr	r2, [pc, #436]	@ (8002a74 <HAL_RCC_OscConfig+0x288>)
 80028be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d013      	beq.n	80028f4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028cc:	f7fe fe24 	bl	8001518 <HAL_GetTick>
 80028d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028d2:	e008      	b.n	80028e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028d4:	f7fe fe20 	bl	8001518 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b64      	cmp	r3, #100	@ 0x64
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e3d4      	b.n	8003090 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028e6:	4b63      	ldr	r3, [pc, #396]	@ (8002a74 <HAL_RCC_OscConfig+0x288>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d0f0      	beq.n	80028d4 <HAL_RCC_OscConfig+0xe8>
 80028f2:	e014      	b.n	800291e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f4:	f7fe fe10 	bl	8001518 <HAL_GetTick>
 80028f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80028fa:	e008      	b.n	800290e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028fc:	f7fe fe0c 	bl	8001518 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b64      	cmp	r3, #100	@ 0x64
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e3c0      	b.n	8003090 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800290e:	4b59      	ldr	r3, [pc, #356]	@ (8002a74 <HAL_RCC_OscConfig+0x288>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1f0      	bne.n	80028fc <HAL_RCC_OscConfig+0x110>
 800291a:	e000      	b.n	800291e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800291c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b00      	cmp	r3, #0
 8002928:	f000 80ca 	beq.w	8002ac0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800292c:	4b51      	ldr	r3, [pc, #324]	@ (8002a74 <HAL_RCC_OscConfig+0x288>)
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002934:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002936:	4b4f      	ldr	r3, [pc, #316]	@ (8002a74 <HAL_RCC_OscConfig+0x288>)
 8002938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800293a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800293c:	6a3b      	ldr	r3, [r7, #32]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d007      	beq.n	8002952 <HAL_RCC_OscConfig+0x166>
 8002942:	6a3b      	ldr	r3, [r7, #32]
 8002944:	2b18      	cmp	r3, #24
 8002946:	d156      	bne.n	80029f6 <HAL_RCC_OscConfig+0x20a>
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	f003 0303 	and.w	r3, r3, #3
 800294e:	2b00      	cmp	r3, #0
 8002950:	d151      	bne.n	80029f6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002952:	4b48      	ldr	r3, [pc, #288]	@ (8002a74 <HAL_RCC_OscConfig+0x288>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0304 	and.w	r3, r3, #4
 800295a:	2b00      	cmp	r3, #0
 800295c:	d005      	beq.n	800296a <HAL_RCC_OscConfig+0x17e>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e392      	b.n	8003090 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800296a:	4b42      	ldr	r3, [pc, #264]	@ (8002a74 <HAL_RCC_OscConfig+0x288>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f023 0219 	bic.w	r2, r3, #25
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	493f      	ldr	r1, [pc, #252]	@ (8002a74 <HAL_RCC_OscConfig+0x288>)
 8002978:	4313      	orrs	r3, r2
 800297a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800297c:	f7fe fdcc 	bl	8001518 <HAL_GetTick>
 8002980:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002982:	e008      	b.n	8002996 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002984:	f7fe fdc8 	bl	8001518 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e37c      	b.n	8003090 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002996:	4b37      	ldr	r3, [pc, #220]	@ (8002a74 <HAL_RCC_OscConfig+0x288>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0304 	and.w	r3, r3, #4
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d0f0      	beq.n	8002984 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029a2:	f7fe fde9 	bl	8001578 <HAL_GetREVID>
 80029a6:	4603      	mov	r3, r0
 80029a8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d817      	bhi.n	80029e0 <HAL_RCC_OscConfig+0x1f4>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	2b40      	cmp	r3, #64	@ 0x40
 80029b6:	d108      	bne.n	80029ca <HAL_RCC_OscConfig+0x1de>
 80029b8:	4b2e      	ldr	r3, [pc, #184]	@ (8002a74 <HAL_RCC_OscConfig+0x288>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80029c0:	4a2c      	ldr	r2, [pc, #176]	@ (8002a74 <HAL_RCC_OscConfig+0x288>)
 80029c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029c6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029c8:	e07a      	b.n	8002ac0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ca:	4b2a      	ldr	r3, [pc, #168]	@ (8002a74 <HAL_RCC_OscConfig+0x288>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	031b      	lsls	r3, r3, #12
 80029d8:	4926      	ldr	r1, [pc, #152]	@ (8002a74 <HAL_RCC_OscConfig+0x288>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029de:	e06f      	b.n	8002ac0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029e0:	4b24      	ldr	r3, [pc, #144]	@ (8002a74 <HAL_RCC_OscConfig+0x288>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	691b      	ldr	r3, [r3, #16]
 80029ec:	061b      	lsls	r3, r3, #24
 80029ee:	4921      	ldr	r1, [pc, #132]	@ (8002a74 <HAL_RCC_OscConfig+0x288>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029f4:	e064      	b.n	8002ac0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d047      	beq.n	8002a8e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80029fe:	4b1d      	ldr	r3, [pc, #116]	@ (8002a74 <HAL_RCC_OscConfig+0x288>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f023 0219 	bic.w	r2, r3, #25
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	491a      	ldr	r1, [pc, #104]	@ (8002a74 <HAL_RCC_OscConfig+0x288>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a10:	f7fe fd82 	bl	8001518 <HAL_GetTick>
 8002a14:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a16:	e008      	b.n	8002a2a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a18:	f7fe fd7e 	bl	8001518 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e332      	b.n	8003090 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a2a:	4b12      	ldr	r3, [pc, #72]	@ (8002a74 <HAL_RCC_OscConfig+0x288>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0304 	and.w	r3, r3, #4
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d0f0      	beq.n	8002a18 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a36:	f7fe fd9f 	bl	8001578 <HAL_GetREVID>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d819      	bhi.n	8002a78 <HAL_RCC_OscConfig+0x28c>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	691b      	ldr	r3, [r3, #16]
 8002a48:	2b40      	cmp	r3, #64	@ 0x40
 8002a4a:	d108      	bne.n	8002a5e <HAL_RCC_OscConfig+0x272>
 8002a4c:	4b09      	ldr	r3, [pc, #36]	@ (8002a74 <HAL_RCC_OscConfig+0x288>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002a54:	4a07      	ldr	r2, [pc, #28]	@ (8002a74 <HAL_RCC_OscConfig+0x288>)
 8002a56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a5a:	6053      	str	r3, [r2, #4]
 8002a5c:	e030      	b.n	8002ac0 <HAL_RCC_OscConfig+0x2d4>
 8002a5e:	4b05      	ldr	r3, [pc, #20]	@ (8002a74 <HAL_RCC_OscConfig+0x288>)
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	031b      	lsls	r3, r3, #12
 8002a6c:	4901      	ldr	r1, [pc, #4]	@ (8002a74 <HAL_RCC_OscConfig+0x288>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	604b      	str	r3, [r1, #4]
 8002a72:	e025      	b.n	8002ac0 <HAL_RCC_OscConfig+0x2d4>
 8002a74:	58024400 	.word	0x58024400
 8002a78:	4b9a      	ldr	r3, [pc, #616]	@ (8002ce4 <HAL_RCC_OscConfig+0x4f8>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	061b      	lsls	r3, r3, #24
 8002a86:	4997      	ldr	r1, [pc, #604]	@ (8002ce4 <HAL_RCC_OscConfig+0x4f8>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	604b      	str	r3, [r1, #4]
 8002a8c:	e018      	b.n	8002ac0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a8e:	4b95      	ldr	r3, [pc, #596]	@ (8002ce4 <HAL_RCC_OscConfig+0x4f8>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a94      	ldr	r2, [pc, #592]	@ (8002ce4 <HAL_RCC_OscConfig+0x4f8>)
 8002a94:	f023 0301 	bic.w	r3, r3, #1
 8002a98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a9a:	f7fe fd3d 	bl	8001518 <HAL_GetTick>
 8002a9e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002aa0:	e008      	b.n	8002ab4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aa2:	f7fe fd39 	bl	8001518 <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d901      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e2ed      	b.n	8003090 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002ab4:	4b8b      	ldr	r3, [pc, #556]	@ (8002ce4 <HAL_RCC_OscConfig+0x4f8>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0304 	and.w	r3, r3, #4
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d1f0      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0310 	and.w	r3, r3, #16
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f000 80a9 	beq.w	8002c20 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ace:	4b85      	ldr	r3, [pc, #532]	@ (8002ce4 <HAL_RCC_OscConfig+0x4f8>)
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002ad6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002ad8:	4b82      	ldr	r3, [pc, #520]	@ (8002ce4 <HAL_RCC_OscConfig+0x4f8>)
 8002ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002adc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	2b08      	cmp	r3, #8
 8002ae2:	d007      	beq.n	8002af4 <HAL_RCC_OscConfig+0x308>
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	2b18      	cmp	r3, #24
 8002ae8:	d13a      	bne.n	8002b60 <HAL_RCC_OscConfig+0x374>
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	f003 0303 	and.w	r3, r3, #3
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d135      	bne.n	8002b60 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002af4:	4b7b      	ldr	r3, [pc, #492]	@ (8002ce4 <HAL_RCC_OscConfig+0x4f8>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d005      	beq.n	8002b0c <HAL_RCC_OscConfig+0x320>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	69db      	ldr	r3, [r3, #28]
 8002b04:	2b80      	cmp	r3, #128	@ 0x80
 8002b06:	d001      	beq.n	8002b0c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e2c1      	b.n	8003090 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b0c:	f7fe fd34 	bl	8001578 <HAL_GetREVID>
 8002b10:	4603      	mov	r3, r0
 8002b12:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d817      	bhi.n	8002b4a <HAL_RCC_OscConfig+0x35e>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a1b      	ldr	r3, [r3, #32]
 8002b1e:	2b20      	cmp	r3, #32
 8002b20:	d108      	bne.n	8002b34 <HAL_RCC_OscConfig+0x348>
 8002b22:	4b70      	ldr	r3, [pc, #448]	@ (8002ce4 <HAL_RCC_OscConfig+0x4f8>)
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002b2a:	4a6e      	ldr	r2, [pc, #440]	@ (8002ce4 <HAL_RCC_OscConfig+0x4f8>)
 8002b2c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002b30:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b32:	e075      	b.n	8002c20 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b34:	4b6b      	ldr	r3, [pc, #428]	@ (8002ce4 <HAL_RCC_OscConfig+0x4f8>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6a1b      	ldr	r3, [r3, #32]
 8002b40:	069b      	lsls	r3, r3, #26
 8002b42:	4968      	ldr	r1, [pc, #416]	@ (8002ce4 <HAL_RCC_OscConfig+0x4f8>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b48:	e06a      	b.n	8002c20 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b4a:	4b66      	ldr	r3, [pc, #408]	@ (8002ce4 <HAL_RCC_OscConfig+0x4f8>)
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a1b      	ldr	r3, [r3, #32]
 8002b56:	061b      	lsls	r3, r3, #24
 8002b58:	4962      	ldr	r1, [pc, #392]	@ (8002ce4 <HAL_RCC_OscConfig+0x4f8>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b5e:	e05f      	b.n	8002c20 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	69db      	ldr	r3, [r3, #28]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d042      	beq.n	8002bee <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002b68:	4b5e      	ldr	r3, [pc, #376]	@ (8002ce4 <HAL_RCC_OscConfig+0x4f8>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a5d      	ldr	r2, [pc, #372]	@ (8002ce4 <HAL_RCC_OscConfig+0x4f8>)
 8002b6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b74:	f7fe fcd0 	bl	8001518 <HAL_GetTick>
 8002b78:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b7a:	e008      	b.n	8002b8e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002b7c:	f7fe fccc 	bl	8001518 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e280      	b.n	8003090 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b8e:	4b55      	ldr	r3, [pc, #340]	@ (8002ce4 <HAL_RCC_OscConfig+0x4f8>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d0f0      	beq.n	8002b7c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b9a:	f7fe fced 	bl	8001578 <HAL_GetREVID>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d817      	bhi.n	8002bd8 <HAL_RCC_OscConfig+0x3ec>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a1b      	ldr	r3, [r3, #32]
 8002bac:	2b20      	cmp	r3, #32
 8002bae:	d108      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x3d6>
 8002bb0:	4b4c      	ldr	r3, [pc, #304]	@ (8002ce4 <HAL_RCC_OscConfig+0x4f8>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002bb8:	4a4a      	ldr	r2, [pc, #296]	@ (8002ce4 <HAL_RCC_OscConfig+0x4f8>)
 8002bba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002bbe:	6053      	str	r3, [r2, #4]
 8002bc0:	e02e      	b.n	8002c20 <HAL_RCC_OscConfig+0x434>
 8002bc2:	4b48      	ldr	r3, [pc, #288]	@ (8002ce4 <HAL_RCC_OscConfig+0x4f8>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a1b      	ldr	r3, [r3, #32]
 8002bce:	069b      	lsls	r3, r3, #26
 8002bd0:	4944      	ldr	r1, [pc, #272]	@ (8002ce4 <HAL_RCC_OscConfig+0x4f8>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	604b      	str	r3, [r1, #4]
 8002bd6:	e023      	b.n	8002c20 <HAL_RCC_OscConfig+0x434>
 8002bd8:	4b42      	ldr	r3, [pc, #264]	@ (8002ce4 <HAL_RCC_OscConfig+0x4f8>)
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a1b      	ldr	r3, [r3, #32]
 8002be4:	061b      	lsls	r3, r3, #24
 8002be6:	493f      	ldr	r1, [pc, #252]	@ (8002ce4 <HAL_RCC_OscConfig+0x4f8>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	60cb      	str	r3, [r1, #12]
 8002bec:	e018      	b.n	8002c20 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002bee:	4b3d      	ldr	r3, [pc, #244]	@ (8002ce4 <HAL_RCC_OscConfig+0x4f8>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a3c      	ldr	r2, [pc, #240]	@ (8002ce4 <HAL_RCC_OscConfig+0x4f8>)
 8002bf4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002bf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bfa:	f7fe fc8d 	bl	8001518 <HAL_GetTick>
 8002bfe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002c00:	e008      	b.n	8002c14 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002c02:	f7fe fc89 	bl	8001518 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d901      	bls.n	8002c14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e23d      	b.n	8003090 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002c14:	4b33      	ldr	r3, [pc, #204]	@ (8002ce4 <HAL_RCC_OscConfig+0x4f8>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d1f0      	bne.n	8002c02 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0308 	and.w	r3, r3, #8
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d036      	beq.n	8002c9a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	695b      	ldr	r3, [r3, #20]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d019      	beq.n	8002c68 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c34:	4b2b      	ldr	r3, [pc, #172]	@ (8002ce4 <HAL_RCC_OscConfig+0x4f8>)
 8002c36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c38:	4a2a      	ldr	r2, [pc, #168]	@ (8002ce4 <HAL_RCC_OscConfig+0x4f8>)
 8002c3a:	f043 0301 	orr.w	r3, r3, #1
 8002c3e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c40:	f7fe fc6a 	bl	8001518 <HAL_GetTick>
 8002c44:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c46:	e008      	b.n	8002c5a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c48:	f7fe fc66 	bl	8001518 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e21a      	b.n	8003090 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c5a:	4b22      	ldr	r3, [pc, #136]	@ (8002ce4 <HAL_RCC_OscConfig+0x4f8>)
 8002c5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d0f0      	beq.n	8002c48 <HAL_RCC_OscConfig+0x45c>
 8002c66:	e018      	b.n	8002c9a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c68:	4b1e      	ldr	r3, [pc, #120]	@ (8002ce4 <HAL_RCC_OscConfig+0x4f8>)
 8002c6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c6c:	4a1d      	ldr	r2, [pc, #116]	@ (8002ce4 <HAL_RCC_OscConfig+0x4f8>)
 8002c6e:	f023 0301 	bic.w	r3, r3, #1
 8002c72:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c74:	f7fe fc50 	bl	8001518 <HAL_GetTick>
 8002c78:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c7a:	e008      	b.n	8002c8e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c7c:	f7fe fc4c 	bl	8001518 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e200      	b.n	8003090 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c8e:	4b15      	ldr	r3, [pc, #84]	@ (8002ce4 <HAL_RCC_OscConfig+0x4f8>)
 8002c90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d1f0      	bne.n	8002c7c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0320 	and.w	r3, r3, #32
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d039      	beq.n	8002d1a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	699b      	ldr	r3, [r3, #24]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d01c      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002cae:	4b0d      	ldr	r3, [pc, #52]	@ (8002ce4 <HAL_RCC_OscConfig+0x4f8>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a0c      	ldr	r2, [pc, #48]	@ (8002ce4 <HAL_RCC_OscConfig+0x4f8>)
 8002cb4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002cb8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002cba:	f7fe fc2d 	bl	8001518 <HAL_GetTick>
 8002cbe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002cc0:	e008      	b.n	8002cd4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002cc2:	f7fe fc29 	bl	8001518 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d901      	bls.n	8002cd4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e1dd      	b.n	8003090 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002cd4:	4b03      	ldr	r3, [pc, #12]	@ (8002ce4 <HAL_RCC_OscConfig+0x4f8>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d0f0      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x4d6>
 8002ce0:	e01b      	b.n	8002d1a <HAL_RCC_OscConfig+0x52e>
 8002ce2:	bf00      	nop
 8002ce4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002ce8:	4b9b      	ldr	r3, [pc, #620]	@ (8002f58 <HAL_RCC_OscConfig+0x76c>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a9a      	ldr	r2, [pc, #616]	@ (8002f58 <HAL_RCC_OscConfig+0x76c>)
 8002cee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002cf2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002cf4:	f7fe fc10 	bl	8001518 <HAL_GetTick>
 8002cf8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002cfa:	e008      	b.n	8002d0e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002cfc:	f7fe fc0c 	bl	8001518 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e1c0      	b.n	8003090 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002d0e:	4b92      	ldr	r3, [pc, #584]	@ (8002f58 <HAL_RCC_OscConfig+0x76c>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1f0      	bne.n	8002cfc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0304 	and.w	r3, r3, #4
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	f000 8081 	beq.w	8002e2a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002d28:	4b8c      	ldr	r3, [pc, #560]	@ (8002f5c <HAL_RCC_OscConfig+0x770>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a8b      	ldr	r2, [pc, #556]	@ (8002f5c <HAL_RCC_OscConfig+0x770>)
 8002d2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d32:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d34:	f7fe fbf0 	bl	8001518 <HAL_GetTick>
 8002d38:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d3a:	e008      	b.n	8002d4e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d3c:	f7fe fbec 	bl	8001518 <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b64      	cmp	r3, #100	@ 0x64
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e1a0      	b.n	8003090 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d4e:	4b83      	ldr	r3, [pc, #524]	@ (8002f5c <HAL_RCC_OscConfig+0x770>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d0f0      	beq.n	8002d3c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d106      	bne.n	8002d70 <HAL_RCC_OscConfig+0x584>
 8002d62:	4b7d      	ldr	r3, [pc, #500]	@ (8002f58 <HAL_RCC_OscConfig+0x76c>)
 8002d64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d66:	4a7c      	ldr	r2, [pc, #496]	@ (8002f58 <HAL_RCC_OscConfig+0x76c>)
 8002d68:	f043 0301 	orr.w	r3, r3, #1
 8002d6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d6e:	e02d      	b.n	8002dcc <HAL_RCC_OscConfig+0x5e0>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d10c      	bne.n	8002d92 <HAL_RCC_OscConfig+0x5a6>
 8002d78:	4b77      	ldr	r3, [pc, #476]	@ (8002f58 <HAL_RCC_OscConfig+0x76c>)
 8002d7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d7c:	4a76      	ldr	r2, [pc, #472]	@ (8002f58 <HAL_RCC_OscConfig+0x76c>)
 8002d7e:	f023 0301 	bic.w	r3, r3, #1
 8002d82:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d84:	4b74      	ldr	r3, [pc, #464]	@ (8002f58 <HAL_RCC_OscConfig+0x76c>)
 8002d86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d88:	4a73      	ldr	r2, [pc, #460]	@ (8002f58 <HAL_RCC_OscConfig+0x76c>)
 8002d8a:	f023 0304 	bic.w	r3, r3, #4
 8002d8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d90:	e01c      	b.n	8002dcc <HAL_RCC_OscConfig+0x5e0>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	2b05      	cmp	r3, #5
 8002d98:	d10c      	bne.n	8002db4 <HAL_RCC_OscConfig+0x5c8>
 8002d9a:	4b6f      	ldr	r3, [pc, #444]	@ (8002f58 <HAL_RCC_OscConfig+0x76c>)
 8002d9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d9e:	4a6e      	ldr	r2, [pc, #440]	@ (8002f58 <HAL_RCC_OscConfig+0x76c>)
 8002da0:	f043 0304 	orr.w	r3, r3, #4
 8002da4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002da6:	4b6c      	ldr	r3, [pc, #432]	@ (8002f58 <HAL_RCC_OscConfig+0x76c>)
 8002da8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002daa:	4a6b      	ldr	r2, [pc, #428]	@ (8002f58 <HAL_RCC_OscConfig+0x76c>)
 8002dac:	f043 0301 	orr.w	r3, r3, #1
 8002db0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002db2:	e00b      	b.n	8002dcc <HAL_RCC_OscConfig+0x5e0>
 8002db4:	4b68      	ldr	r3, [pc, #416]	@ (8002f58 <HAL_RCC_OscConfig+0x76c>)
 8002db6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002db8:	4a67      	ldr	r2, [pc, #412]	@ (8002f58 <HAL_RCC_OscConfig+0x76c>)
 8002dba:	f023 0301 	bic.w	r3, r3, #1
 8002dbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dc0:	4b65      	ldr	r3, [pc, #404]	@ (8002f58 <HAL_RCC_OscConfig+0x76c>)
 8002dc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dc4:	4a64      	ldr	r2, [pc, #400]	@ (8002f58 <HAL_RCC_OscConfig+0x76c>)
 8002dc6:	f023 0304 	bic.w	r3, r3, #4
 8002dca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d015      	beq.n	8002e00 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dd4:	f7fe fba0 	bl	8001518 <HAL_GetTick>
 8002dd8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002dda:	e00a      	b.n	8002df2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ddc:	f7fe fb9c 	bl	8001518 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e14e      	b.n	8003090 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002df2:	4b59      	ldr	r3, [pc, #356]	@ (8002f58 <HAL_RCC_OscConfig+0x76c>)
 8002df4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d0ee      	beq.n	8002ddc <HAL_RCC_OscConfig+0x5f0>
 8002dfe:	e014      	b.n	8002e2a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e00:	f7fe fb8a 	bl	8001518 <HAL_GetTick>
 8002e04:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002e06:	e00a      	b.n	8002e1e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e08:	f7fe fb86 	bl	8001518 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e138      	b.n	8003090 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002e1e:	4b4e      	ldr	r3, [pc, #312]	@ (8002f58 <HAL_RCC_OscConfig+0x76c>)
 8002e20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d1ee      	bne.n	8002e08 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	f000 812d 	beq.w	800308e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002e34:	4b48      	ldr	r3, [pc, #288]	@ (8002f58 <HAL_RCC_OscConfig+0x76c>)
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e3c:	2b18      	cmp	r3, #24
 8002e3e:	f000 80bd 	beq.w	8002fbc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	f040 809e 	bne.w	8002f88 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e4c:	4b42      	ldr	r3, [pc, #264]	@ (8002f58 <HAL_RCC_OscConfig+0x76c>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a41      	ldr	r2, [pc, #260]	@ (8002f58 <HAL_RCC_OscConfig+0x76c>)
 8002e52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e58:	f7fe fb5e 	bl	8001518 <HAL_GetTick>
 8002e5c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e60:	f7fe fb5a 	bl	8001518 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e10e      	b.n	8003090 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e72:	4b39      	ldr	r3, [pc, #228]	@ (8002f58 <HAL_RCC_OscConfig+0x76c>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1f0      	bne.n	8002e60 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e7e:	4b36      	ldr	r3, [pc, #216]	@ (8002f58 <HAL_RCC_OscConfig+0x76c>)
 8002e80:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e82:	4b37      	ldr	r3, [pc, #220]	@ (8002f60 <HAL_RCC_OscConfig+0x774>)
 8002e84:	4013      	ands	r3, r2
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002e8e:	0112      	lsls	r2, r2, #4
 8002e90:	430a      	orrs	r2, r1
 8002e92:	4931      	ldr	r1, [pc, #196]	@ (8002f58 <HAL_RCC_OscConfig+0x76c>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	628b      	str	r3, [r1, #40]	@ 0x28
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e9c:	3b01      	subs	r3, #1
 8002e9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	025b      	lsls	r3, r3, #9
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	431a      	orrs	r2, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	041b      	lsls	r3, r3, #16
 8002eb6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002eba:	431a      	orrs	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ec0:	3b01      	subs	r3, #1
 8002ec2:	061b      	lsls	r3, r3, #24
 8002ec4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002ec8:	4923      	ldr	r1, [pc, #140]	@ (8002f58 <HAL_RCC_OscConfig+0x76c>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002ece:	4b22      	ldr	r3, [pc, #136]	@ (8002f58 <HAL_RCC_OscConfig+0x76c>)
 8002ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ed2:	4a21      	ldr	r2, [pc, #132]	@ (8002f58 <HAL_RCC_OscConfig+0x76c>)
 8002ed4:	f023 0301 	bic.w	r3, r3, #1
 8002ed8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002eda:	4b1f      	ldr	r3, [pc, #124]	@ (8002f58 <HAL_RCC_OscConfig+0x76c>)
 8002edc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ede:	4b21      	ldr	r3, [pc, #132]	@ (8002f64 <HAL_RCC_OscConfig+0x778>)
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002ee6:	00d2      	lsls	r2, r2, #3
 8002ee8:	491b      	ldr	r1, [pc, #108]	@ (8002f58 <HAL_RCC_OscConfig+0x76c>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002eee:	4b1a      	ldr	r3, [pc, #104]	@ (8002f58 <HAL_RCC_OscConfig+0x76c>)
 8002ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ef2:	f023 020c 	bic.w	r2, r3, #12
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002efa:	4917      	ldr	r1, [pc, #92]	@ (8002f58 <HAL_RCC_OscConfig+0x76c>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002f00:	4b15      	ldr	r3, [pc, #84]	@ (8002f58 <HAL_RCC_OscConfig+0x76c>)
 8002f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f04:	f023 0202 	bic.w	r2, r3, #2
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f0c:	4912      	ldr	r1, [pc, #72]	@ (8002f58 <HAL_RCC_OscConfig+0x76c>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002f12:	4b11      	ldr	r3, [pc, #68]	@ (8002f58 <HAL_RCC_OscConfig+0x76c>)
 8002f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f16:	4a10      	ldr	r2, [pc, #64]	@ (8002f58 <HAL_RCC_OscConfig+0x76c>)
 8002f18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f1e:	4b0e      	ldr	r3, [pc, #56]	@ (8002f58 <HAL_RCC_OscConfig+0x76c>)
 8002f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f22:	4a0d      	ldr	r2, [pc, #52]	@ (8002f58 <HAL_RCC_OscConfig+0x76c>)
 8002f24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f28:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002f2a:	4b0b      	ldr	r3, [pc, #44]	@ (8002f58 <HAL_RCC_OscConfig+0x76c>)
 8002f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f2e:	4a0a      	ldr	r2, [pc, #40]	@ (8002f58 <HAL_RCC_OscConfig+0x76c>)
 8002f30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f34:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002f36:	4b08      	ldr	r3, [pc, #32]	@ (8002f58 <HAL_RCC_OscConfig+0x76c>)
 8002f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f3a:	4a07      	ldr	r2, [pc, #28]	@ (8002f58 <HAL_RCC_OscConfig+0x76c>)
 8002f3c:	f043 0301 	orr.w	r3, r3, #1
 8002f40:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f42:	4b05      	ldr	r3, [pc, #20]	@ (8002f58 <HAL_RCC_OscConfig+0x76c>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a04      	ldr	r2, [pc, #16]	@ (8002f58 <HAL_RCC_OscConfig+0x76c>)
 8002f48:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f4e:	f7fe fae3 	bl	8001518 <HAL_GetTick>
 8002f52:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f54:	e011      	b.n	8002f7a <HAL_RCC_OscConfig+0x78e>
 8002f56:	bf00      	nop
 8002f58:	58024400 	.word	0x58024400
 8002f5c:	58024800 	.word	0x58024800
 8002f60:	fffffc0c 	.word	0xfffffc0c
 8002f64:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f68:	f7fe fad6 	bl	8001518 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e08a      	b.n	8003090 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f7a:	4b47      	ldr	r3, [pc, #284]	@ (8003098 <HAL_RCC_OscConfig+0x8ac>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d0f0      	beq.n	8002f68 <HAL_RCC_OscConfig+0x77c>
 8002f86:	e082      	b.n	800308e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f88:	4b43      	ldr	r3, [pc, #268]	@ (8003098 <HAL_RCC_OscConfig+0x8ac>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a42      	ldr	r2, [pc, #264]	@ (8003098 <HAL_RCC_OscConfig+0x8ac>)
 8002f8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f94:	f7fe fac0 	bl	8001518 <HAL_GetTick>
 8002f98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f9a:	e008      	b.n	8002fae <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f9c:	f7fe fabc 	bl	8001518 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e070      	b.n	8003090 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002fae:	4b3a      	ldr	r3, [pc, #232]	@ (8003098 <HAL_RCC_OscConfig+0x8ac>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1f0      	bne.n	8002f9c <HAL_RCC_OscConfig+0x7b0>
 8002fba:	e068      	b.n	800308e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002fbc:	4b36      	ldr	r3, [pc, #216]	@ (8003098 <HAL_RCC_OscConfig+0x8ac>)
 8002fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fc0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002fc2:	4b35      	ldr	r3, [pc, #212]	@ (8003098 <HAL_RCC_OscConfig+0x8ac>)
 8002fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fc6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d031      	beq.n	8003034 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	f003 0203 	and.w	r2, r3, #3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d12a      	bne.n	8003034 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	091b      	lsrs	r3, r3, #4
 8002fe2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d122      	bne.n	8003034 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ff8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d11a      	bne.n	8003034 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	0a5b      	lsrs	r3, r3, #9
 8003002:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800300a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800300c:	429a      	cmp	r2, r3
 800300e:	d111      	bne.n	8003034 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	0c1b      	lsrs	r3, r3, #16
 8003014:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800301c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800301e:	429a      	cmp	r2, r3
 8003020:	d108      	bne.n	8003034 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	0e1b      	lsrs	r3, r3, #24
 8003026:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800302e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003030:	429a      	cmp	r2, r3
 8003032:	d001      	beq.n	8003038 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e02b      	b.n	8003090 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003038:	4b17      	ldr	r3, [pc, #92]	@ (8003098 <HAL_RCC_OscConfig+0x8ac>)
 800303a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800303c:	08db      	lsrs	r3, r3, #3
 800303e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003042:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	429a      	cmp	r2, r3
 800304c:	d01f      	beq.n	800308e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800304e:	4b12      	ldr	r3, [pc, #72]	@ (8003098 <HAL_RCC_OscConfig+0x8ac>)
 8003050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003052:	4a11      	ldr	r2, [pc, #68]	@ (8003098 <HAL_RCC_OscConfig+0x8ac>)
 8003054:	f023 0301 	bic.w	r3, r3, #1
 8003058:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800305a:	f7fe fa5d 	bl	8001518 <HAL_GetTick>
 800305e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003060:	bf00      	nop
 8003062:	f7fe fa59 	bl	8001518 <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800306a:	4293      	cmp	r3, r2
 800306c:	d0f9      	beq.n	8003062 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800306e:	4b0a      	ldr	r3, [pc, #40]	@ (8003098 <HAL_RCC_OscConfig+0x8ac>)
 8003070:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003072:	4b0a      	ldr	r3, [pc, #40]	@ (800309c <HAL_RCC_OscConfig+0x8b0>)
 8003074:	4013      	ands	r3, r2
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800307a:	00d2      	lsls	r2, r2, #3
 800307c:	4906      	ldr	r1, [pc, #24]	@ (8003098 <HAL_RCC_OscConfig+0x8ac>)
 800307e:	4313      	orrs	r3, r2
 8003080:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003082:	4b05      	ldr	r3, [pc, #20]	@ (8003098 <HAL_RCC_OscConfig+0x8ac>)
 8003084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003086:	4a04      	ldr	r2, [pc, #16]	@ (8003098 <HAL_RCC_OscConfig+0x8ac>)
 8003088:	f043 0301 	orr.w	r3, r3, #1
 800308c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3730      	adds	r7, #48	@ 0x30
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	58024400 	.word	0x58024400
 800309c:	ffff0007 	.word	0xffff0007

080030a0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b086      	sub	sp, #24
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d101      	bne.n	80030b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e19c      	b.n	80033ee <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030b4:	4b8a      	ldr	r3, [pc, #552]	@ (80032e0 <HAL_RCC_ClockConfig+0x240>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 030f 	and.w	r3, r3, #15
 80030bc:	683a      	ldr	r2, [r7, #0]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d910      	bls.n	80030e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030c2:	4b87      	ldr	r3, [pc, #540]	@ (80032e0 <HAL_RCC_ClockConfig+0x240>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f023 020f 	bic.w	r2, r3, #15
 80030ca:	4985      	ldr	r1, [pc, #532]	@ (80032e0 <HAL_RCC_ClockConfig+0x240>)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030d2:	4b83      	ldr	r3, [pc, #524]	@ (80032e0 <HAL_RCC_ClockConfig+0x240>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 030f 	and.w	r3, r3, #15
 80030da:	683a      	ldr	r2, [r7, #0]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d001      	beq.n	80030e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e184      	b.n	80033ee <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0304 	and.w	r3, r3, #4
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d010      	beq.n	8003112 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	691a      	ldr	r2, [r3, #16]
 80030f4:	4b7b      	ldr	r3, [pc, #492]	@ (80032e4 <HAL_RCC_ClockConfig+0x244>)
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d908      	bls.n	8003112 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003100:	4b78      	ldr	r3, [pc, #480]	@ (80032e4 <HAL_RCC_ClockConfig+0x244>)
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	691b      	ldr	r3, [r3, #16]
 800310c:	4975      	ldr	r1, [pc, #468]	@ (80032e4 <HAL_RCC_ClockConfig+0x244>)
 800310e:	4313      	orrs	r3, r2
 8003110:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0308 	and.w	r3, r3, #8
 800311a:	2b00      	cmp	r3, #0
 800311c:	d010      	beq.n	8003140 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	695a      	ldr	r2, [r3, #20]
 8003122:	4b70      	ldr	r3, [pc, #448]	@ (80032e4 <HAL_RCC_ClockConfig+0x244>)
 8003124:	69db      	ldr	r3, [r3, #28]
 8003126:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800312a:	429a      	cmp	r2, r3
 800312c:	d908      	bls.n	8003140 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800312e:	4b6d      	ldr	r3, [pc, #436]	@ (80032e4 <HAL_RCC_ClockConfig+0x244>)
 8003130:	69db      	ldr	r3, [r3, #28]
 8003132:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	695b      	ldr	r3, [r3, #20]
 800313a:	496a      	ldr	r1, [pc, #424]	@ (80032e4 <HAL_RCC_ClockConfig+0x244>)
 800313c:	4313      	orrs	r3, r2
 800313e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0310 	and.w	r3, r3, #16
 8003148:	2b00      	cmp	r3, #0
 800314a:	d010      	beq.n	800316e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	699a      	ldr	r2, [r3, #24]
 8003150:	4b64      	ldr	r3, [pc, #400]	@ (80032e4 <HAL_RCC_ClockConfig+0x244>)
 8003152:	69db      	ldr	r3, [r3, #28]
 8003154:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003158:	429a      	cmp	r2, r3
 800315a:	d908      	bls.n	800316e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800315c:	4b61      	ldr	r3, [pc, #388]	@ (80032e4 <HAL_RCC_ClockConfig+0x244>)
 800315e:	69db      	ldr	r3, [r3, #28]
 8003160:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	699b      	ldr	r3, [r3, #24]
 8003168:	495e      	ldr	r1, [pc, #376]	@ (80032e4 <HAL_RCC_ClockConfig+0x244>)
 800316a:	4313      	orrs	r3, r2
 800316c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0320 	and.w	r3, r3, #32
 8003176:	2b00      	cmp	r3, #0
 8003178:	d010      	beq.n	800319c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	69da      	ldr	r2, [r3, #28]
 800317e:	4b59      	ldr	r3, [pc, #356]	@ (80032e4 <HAL_RCC_ClockConfig+0x244>)
 8003180:	6a1b      	ldr	r3, [r3, #32]
 8003182:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003186:	429a      	cmp	r2, r3
 8003188:	d908      	bls.n	800319c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800318a:	4b56      	ldr	r3, [pc, #344]	@ (80032e4 <HAL_RCC_ClockConfig+0x244>)
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	69db      	ldr	r3, [r3, #28]
 8003196:	4953      	ldr	r1, [pc, #332]	@ (80032e4 <HAL_RCC_ClockConfig+0x244>)
 8003198:	4313      	orrs	r3, r2
 800319a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d010      	beq.n	80031ca <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	68da      	ldr	r2, [r3, #12]
 80031ac:	4b4d      	ldr	r3, [pc, #308]	@ (80032e4 <HAL_RCC_ClockConfig+0x244>)
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	f003 030f 	and.w	r3, r3, #15
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d908      	bls.n	80031ca <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031b8:	4b4a      	ldr	r3, [pc, #296]	@ (80032e4 <HAL_RCC_ClockConfig+0x244>)
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	f023 020f 	bic.w	r2, r3, #15
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	4947      	ldr	r1, [pc, #284]	@ (80032e4 <HAL_RCC_ClockConfig+0x244>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d055      	beq.n	8003282 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80031d6:	4b43      	ldr	r3, [pc, #268]	@ (80032e4 <HAL_RCC_ClockConfig+0x244>)
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	4940      	ldr	r1, [pc, #256]	@ (80032e4 <HAL_RCC_ClockConfig+0x244>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d107      	bne.n	8003200 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80031f0:	4b3c      	ldr	r3, [pc, #240]	@ (80032e4 <HAL_RCC_ClockConfig+0x244>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d121      	bne.n	8003240 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e0f6      	b.n	80033ee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	2b03      	cmp	r3, #3
 8003206:	d107      	bne.n	8003218 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003208:	4b36      	ldr	r3, [pc, #216]	@ (80032e4 <HAL_RCC_ClockConfig+0x244>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d115      	bne.n	8003240 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e0ea      	b.n	80033ee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d107      	bne.n	8003230 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003220:	4b30      	ldr	r3, [pc, #192]	@ (80032e4 <HAL_RCC_ClockConfig+0x244>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003228:	2b00      	cmp	r3, #0
 800322a:	d109      	bne.n	8003240 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e0de      	b.n	80033ee <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003230:	4b2c      	ldr	r3, [pc, #176]	@ (80032e4 <HAL_RCC_ClockConfig+0x244>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0304 	and.w	r3, r3, #4
 8003238:	2b00      	cmp	r3, #0
 800323a:	d101      	bne.n	8003240 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e0d6      	b.n	80033ee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003240:	4b28      	ldr	r3, [pc, #160]	@ (80032e4 <HAL_RCC_ClockConfig+0x244>)
 8003242:	691b      	ldr	r3, [r3, #16]
 8003244:	f023 0207 	bic.w	r2, r3, #7
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	4925      	ldr	r1, [pc, #148]	@ (80032e4 <HAL_RCC_ClockConfig+0x244>)
 800324e:	4313      	orrs	r3, r2
 8003250:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003252:	f7fe f961 	bl	8001518 <HAL_GetTick>
 8003256:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003258:	e00a      	b.n	8003270 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800325a:	f7fe f95d 	bl	8001518 <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003268:	4293      	cmp	r3, r2
 800326a:	d901      	bls.n	8003270 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e0be      	b.n	80033ee <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003270:	4b1c      	ldr	r3, [pc, #112]	@ (80032e4 <HAL_RCC_ClockConfig+0x244>)
 8003272:	691b      	ldr	r3, [r3, #16]
 8003274:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	00db      	lsls	r3, r3, #3
 800327e:	429a      	cmp	r2, r3
 8003280:	d1eb      	bne.n	800325a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d010      	beq.n	80032b0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	68da      	ldr	r2, [r3, #12]
 8003292:	4b14      	ldr	r3, [pc, #80]	@ (80032e4 <HAL_RCC_ClockConfig+0x244>)
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	f003 030f 	and.w	r3, r3, #15
 800329a:	429a      	cmp	r2, r3
 800329c:	d208      	bcs.n	80032b0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800329e:	4b11      	ldr	r3, [pc, #68]	@ (80032e4 <HAL_RCC_ClockConfig+0x244>)
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	f023 020f 	bic.w	r2, r3, #15
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	490e      	ldr	r1, [pc, #56]	@ (80032e4 <HAL_RCC_ClockConfig+0x244>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032b0:	4b0b      	ldr	r3, [pc, #44]	@ (80032e0 <HAL_RCC_ClockConfig+0x240>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 030f 	and.w	r3, r3, #15
 80032b8:	683a      	ldr	r2, [r7, #0]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d214      	bcs.n	80032e8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032be:	4b08      	ldr	r3, [pc, #32]	@ (80032e0 <HAL_RCC_ClockConfig+0x240>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f023 020f 	bic.w	r2, r3, #15
 80032c6:	4906      	ldr	r1, [pc, #24]	@ (80032e0 <HAL_RCC_ClockConfig+0x240>)
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ce:	4b04      	ldr	r3, [pc, #16]	@ (80032e0 <HAL_RCC_ClockConfig+0x240>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 030f 	and.w	r3, r3, #15
 80032d6:	683a      	ldr	r2, [r7, #0]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d005      	beq.n	80032e8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e086      	b.n	80033ee <HAL_RCC_ClockConfig+0x34e>
 80032e0:	52002000 	.word	0x52002000
 80032e4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0304 	and.w	r3, r3, #4
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d010      	beq.n	8003316 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	691a      	ldr	r2, [r3, #16]
 80032f8:	4b3f      	ldr	r3, [pc, #252]	@ (80033f8 <HAL_RCC_ClockConfig+0x358>)
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003300:	429a      	cmp	r2, r3
 8003302:	d208      	bcs.n	8003316 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003304:	4b3c      	ldr	r3, [pc, #240]	@ (80033f8 <HAL_RCC_ClockConfig+0x358>)
 8003306:	699b      	ldr	r3, [r3, #24]
 8003308:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	691b      	ldr	r3, [r3, #16]
 8003310:	4939      	ldr	r1, [pc, #228]	@ (80033f8 <HAL_RCC_ClockConfig+0x358>)
 8003312:	4313      	orrs	r3, r2
 8003314:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0308 	and.w	r3, r3, #8
 800331e:	2b00      	cmp	r3, #0
 8003320:	d010      	beq.n	8003344 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	695a      	ldr	r2, [r3, #20]
 8003326:	4b34      	ldr	r3, [pc, #208]	@ (80033f8 <HAL_RCC_ClockConfig+0x358>)
 8003328:	69db      	ldr	r3, [r3, #28]
 800332a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800332e:	429a      	cmp	r2, r3
 8003330:	d208      	bcs.n	8003344 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003332:	4b31      	ldr	r3, [pc, #196]	@ (80033f8 <HAL_RCC_ClockConfig+0x358>)
 8003334:	69db      	ldr	r3, [r3, #28]
 8003336:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	492e      	ldr	r1, [pc, #184]	@ (80033f8 <HAL_RCC_ClockConfig+0x358>)
 8003340:	4313      	orrs	r3, r2
 8003342:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0310 	and.w	r3, r3, #16
 800334c:	2b00      	cmp	r3, #0
 800334e:	d010      	beq.n	8003372 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	699a      	ldr	r2, [r3, #24]
 8003354:	4b28      	ldr	r3, [pc, #160]	@ (80033f8 <HAL_RCC_ClockConfig+0x358>)
 8003356:	69db      	ldr	r3, [r3, #28]
 8003358:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800335c:	429a      	cmp	r2, r3
 800335e:	d208      	bcs.n	8003372 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003360:	4b25      	ldr	r3, [pc, #148]	@ (80033f8 <HAL_RCC_ClockConfig+0x358>)
 8003362:	69db      	ldr	r3, [r3, #28]
 8003364:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	699b      	ldr	r3, [r3, #24]
 800336c:	4922      	ldr	r1, [pc, #136]	@ (80033f8 <HAL_RCC_ClockConfig+0x358>)
 800336e:	4313      	orrs	r3, r2
 8003370:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0320 	and.w	r3, r3, #32
 800337a:	2b00      	cmp	r3, #0
 800337c:	d010      	beq.n	80033a0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	69da      	ldr	r2, [r3, #28]
 8003382:	4b1d      	ldr	r3, [pc, #116]	@ (80033f8 <HAL_RCC_ClockConfig+0x358>)
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800338a:	429a      	cmp	r2, r3
 800338c:	d208      	bcs.n	80033a0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800338e:	4b1a      	ldr	r3, [pc, #104]	@ (80033f8 <HAL_RCC_ClockConfig+0x358>)
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	69db      	ldr	r3, [r3, #28]
 800339a:	4917      	ldr	r1, [pc, #92]	@ (80033f8 <HAL_RCC_ClockConfig+0x358>)
 800339c:	4313      	orrs	r3, r2
 800339e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80033a0:	f000 f834 	bl	800340c <HAL_RCC_GetSysClockFreq>
 80033a4:	4602      	mov	r2, r0
 80033a6:	4b14      	ldr	r3, [pc, #80]	@ (80033f8 <HAL_RCC_ClockConfig+0x358>)
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	0a1b      	lsrs	r3, r3, #8
 80033ac:	f003 030f 	and.w	r3, r3, #15
 80033b0:	4912      	ldr	r1, [pc, #72]	@ (80033fc <HAL_RCC_ClockConfig+0x35c>)
 80033b2:	5ccb      	ldrb	r3, [r1, r3]
 80033b4:	f003 031f 	and.w	r3, r3, #31
 80033b8:	fa22 f303 	lsr.w	r3, r2, r3
 80033bc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80033be:	4b0e      	ldr	r3, [pc, #56]	@ (80033f8 <HAL_RCC_ClockConfig+0x358>)
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	f003 030f 	and.w	r3, r3, #15
 80033c6:	4a0d      	ldr	r2, [pc, #52]	@ (80033fc <HAL_RCC_ClockConfig+0x35c>)
 80033c8:	5cd3      	ldrb	r3, [r2, r3]
 80033ca:	f003 031f 	and.w	r3, r3, #31
 80033ce:	693a      	ldr	r2, [r7, #16]
 80033d0:	fa22 f303 	lsr.w	r3, r2, r3
 80033d4:	4a0a      	ldr	r2, [pc, #40]	@ (8003400 <HAL_RCC_ClockConfig+0x360>)
 80033d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80033d8:	4a0a      	ldr	r2, [pc, #40]	@ (8003404 <HAL_RCC_ClockConfig+0x364>)
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80033de:	4b0a      	ldr	r3, [pc, #40]	@ (8003408 <HAL_RCC_ClockConfig+0x368>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7fe f84e 	bl	8001484 <HAL_InitTick>
 80033e8:	4603      	mov	r3, r0
 80033ea:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80033ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3718      	adds	r7, #24
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	58024400 	.word	0x58024400
 80033fc:	08008d08 	.word	0x08008d08
 8003400:	24000004 	.word	0x24000004
 8003404:	24000000 	.word	0x24000000
 8003408:	24000008 	.word	0x24000008

0800340c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800340c:	b480      	push	{r7}
 800340e:	b089      	sub	sp, #36	@ 0x24
 8003410:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003412:	4bb3      	ldr	r3, [pc, #716]	@ (80036e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800341a:	2b18      	cmp	r3, #24
 800341c:	f200 8155 	bhi.w	80036ca <HAL_RCC_GetSysClockFreq+0x2be>
 8003420:	a201      	add	r2, pc, #4	@ (adr r2, 8003428 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003426:	bf00      	nop
 8003428:	0800348d 	.word	0x0800348d
 800342c:	080036cb 	.word	0x080036cb
 8003430:	080036cb 	.word	0x080036cb
 8003434:	080036cb 	.word	0x080036cb
 8003438:	080036cb 	.word	0x080036cb
 800343c:	080036cb 	.word	0x080036cb
 8003440:	080036cb 	.word	0x080036cb
 8003444:	080036cb 	.word	0x080036cb
 8003448:	080034b3 	.word	0x080034b3
 800344c:	080036cb 	.word	0x080036cb
 8003450:	080036cb 	.word	0x080036cb
 8003454:	080036cb 	.word	0x080036cb
 8003458:	080036cb 	.word	0x080036cb
 800345c:	080036cb 	.word	0x080036cb
 8003460:	080036cb 	.word	0x080036cb
 8003464:	080036cb 	.word	0x080036cb
 8003468:	080034b9 	.word	0x080034b9
 800346c:	080036cb 	.word	0x080036cb
 8003470:	080036cb 	.word	0x080036cb
 8003474:	080036cb 	.word	0x080036cb
 8003478:	080036cb 	.word	0x080036cb
 800347c:	080036cb 	.word	0x080036cb
 8003480:	080036cb 	.word	0x080036cb
 8003484:	080036cb 	.word	0x080036cb
 8003488:	080034bf 	.word	0x080034bf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800348c:	4b94      	ldr	r3, [pc, #592]	@ (80036e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0320 	and.w	r3, r3, #32
 8003494:	2b00      	cmp	r3, #0
 8003496:	d009      	beq.n	80034ac <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003498:	4b91      	ldr	r3, [pc, #580]	@ (80036e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	08db      	lsrs	r3, r3, #3
 800349e:	f003 0303 	and.w	r3, r3, #3
 80034a2:	4a90      	ldr	r2, [pc, #576]	@ (80036e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80034a4:	fa22 f303 	lsr.w	r3, r2, r3
 80034a8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80034aa:	e111      	b.n	80036d0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80034ac:	4b8d      	ldr	r3, [pc, #564]	@ (80036e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80034ae:	61bb      	str	r3, [r7, #24]
      break;
 80034b0:	e10e      	b.n	80036d0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80034b2:	4b8d      	ldr	r3, [pc, #564]	@ (80036e8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80034b4:	61bb      	str	r3, [r7, #24]
      break;
 80034b6:	e10b      	b.n	80036d0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80034b8:	4b8c      	ldr	r3, [pc, #560]	@ (80036ec <HAL_RCC_GetSysClockFreq+0x2e0>)
 80034ba:	61bb      	str	r3, [r7, #24]
      break;
 80034bc:	e108      	b.n	80036d0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80034be:	4b88      	ldr	r3, [pc, #544]	@ (80036e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034c2:	f003 0303 	and.w	r3, r3, #3
 80034c6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80034c8:	4b85      	ldr	r3, [pc, #532]	@ (80036e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034cc:	091b      	lsrs	r3, r3, #4
 80034ce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80034d2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80034d4:	4b82      	ldr	r3, [pc, #520]	@ (80036e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034d8:	f003 0301 	and.w	r3, r3, #1
 80034dc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80034de:	4b80      	ldr	r3, [pc, #512]	@ (80036e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034e2:	08db      	lsrs	r3, r3, #3
 80034e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80034e8:	68fa      	ldr	r2, [r7, #12]
 80034ea:	fb02 f303 	mul.w	r3, r2, r3
 80034ee:	ee07 3a90 	vmov	s15, r3
 80034f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034f6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f000 80e1 	beq.w	80036c4 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	2b02      	cmp	r3, #2
 8003506:	f000 8083 	beq.w	8003610 <HAL_RCC_GetSysClockFreq+0x204>
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	2b02      	cmp	r3, #2
 800350e:	f200 80a1 	bhi.w	8003654 <HAL_RCC_GetSysClockFreq+0x248>
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d003      	beq.n	8003520 <HAL_RCC_GetSysClockFreq+0x114>
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	2b01      	cmp	r3, #1
 800351c:	d056      	beq.n	80035cc <HAL_RCC_GetSysClockFreq+0x1c0>
 800351e:	e099      	b.n	8003654 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003520:	4b6f      	ldr	r3, [pc, #444]	@ (80036e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0320 	and.w	r3, r3, #32
 8003528:	2b00      	cmp	r3, #0
 800352a:	d02d      	beq.n	8003588 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800352c:	4b6c      	ldr	r3, [pc, #432]	@ (80036e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	08db      	lsrs	r3, r3, #3
 8003532:	f003 0303 	and.w	r3, r3, #3
 8003536:	4a6b      	ldr	r2, [pc, #428]	@ (80036e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003538:	fa22 f303 	lsr.w	r3, r2, r3
 800353c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	ee07 3a90 	vmov	s15, r3
 8003544:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	ee07 3a90 	vmov	s15, r3
 800354e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003552:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003556:	4b62      	ldr	r3, [pc, #392]	@ (80036e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800355a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800355e:	ee07 3a90 	vmov	s15, r3
 8003562:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003566:	ed97 6a02 	vldr	s12, [r7, #8]
 800356a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80036f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800356e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003572:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003576:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800357a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800357e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003582:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003586:	e087      	b.n	8003698 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	ee07 3a90 	vmov	s15, r3
 800358e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003592:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80036f4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003596:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800359a:	4b51      	ldr	r3, [pc, #324]	@ (80036e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800359c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800359e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035a2:	ee07 3a90 	vmov	s15, r3
 80035a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80035ae:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80036f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80035b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80035be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80035ca:	e065      	b.n	8003698 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	ee07 3a90 	vmov	s15, r3
 80035d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035d6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80036f8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80035da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035de:	4b40      	ldr	r3, [pc, #256]	@ (80036e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035e6:	ee07 3a90 	vmov	s15, r3
 80035ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80035f2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80036f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80035f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003602:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800360a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800360e:	e043      	b.n	8003698 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	ee07 3a90 	vmov	s15, r3
 8003616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800361a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80036fc <HAL_RCC_GetSysClockFreq+0x2f0>
 800361e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003622:	4b2f      	ldr	r3, [pc, #188]	@ (80036e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800362a:	ee07 3a90 	vmov	s15, r3
 800362e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003632:	ed97 6a02 	vldr	s12, [r7, #8]
 8003636:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80036f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800363a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800363e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003642:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003646:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800364a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800364e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003652:	e021      	b.n	8003698 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	ee07 3a90 	vmov	s15, r3
 800365a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800365e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80036f8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003662:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003666:	4b1e      	ldr	r3, [pc, #120]	@ (80036e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800366a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800366e:	ee07 3a90 	vmov	s15, r3
 8003672:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003676:	ed97 6a02 	vldr	s12, [r7, #8]
 800367a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80036f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800367e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003682:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003686:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800368a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800368e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003692:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003696:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003698:	4b11      	ldr	r3, [pc, #68]	@ (80036e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800369a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800369c:	0a5b      	lsrs	r3, r3, #9
 800369e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80036a2:	3301      	adds	r3, #1
 80036a4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	ee07 3a90 	vmov	s15, r3
 80036ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80036b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80036b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036bc:	ee17 3a90 	vmov	r3, s15
 80036c0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80036c2:	e005      	b.n	80036d0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80036c4:	2300      	movs	r3, #0
 80036c6:	61bb      	str	r3, [r7, #24]
      break;
 80036c8:	e002      	b.n	80036d0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80036ca:	4b07      	ldr	r3, [pc, #28]	@ (80036e8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80036cc:	61bb      	str	r3, [r7, #24]
      break;
 80036ce:	bf00      	nop
  }

  return sysclockfreq;
 80036d0:	69bb      	ldr	r3, [r7, #24]
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3724      	adds	r7, #36	@ 0x24
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	58024400 	.word	0x58024400
 80036e4:	03d09000 	.word	0x03d09000
 80036e8:	003d0900 	.word	0x003d0900
 80036ec:	007a1200 	.word	0x007a1200
 80036f0:	46000000 	.word	0x46000000
 80036f4:	4c742400 	.word	0x4c742400
 80036f8:	4a742400 	.word	0x4a742400
 80036fc:	4af42400 	.word	0x4af42400

08003700 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003706:	f7ff fe81 	bl	800340c <HAL_RCC_GetSysClockFreq>
 800370a:	4602      	mov	r2, r0
 800370c:	4b10      	ldr	r3, [pc, #64]	@ (8003750 <HAL_RCC_GetHCLKFreq+0x50>)
 800370e:	699b      	ldr	r3, [r3, #24]
 8003710:	0a1b      	lsrs	r3, r3, #8
 8003712:	f003 030f 	and.w	r3, r3, #15
 8003716:	490f      	ldr	r1, [pc, #60]	@ (8003754 <HAL_RCC_GetHCLKFreq+0x54>)
 8003718:	5ccb      	ldrb	r3, [r1, r3]
 800371a:	f003 031f 	and.w	r3, r3, #31
 800371e:	fa22 f303 	lsr.w	r3, r2, r3
 8003722:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003724:	4b0a      	ldr	r3, [pc, #40]	@ (8003750 <HAL_RCC_GetHCLKFreq+0x50>)
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	f003 030f 	and.w	r3, r3, #15
 800372c:	4a09      	ldr	r2, [pc, #36]	@ (8003754 <HAL_RCC_GetHCLKFreq+0x54>)
 800372e:	5cd3      	ldrb	r3, [r2, r3]
 8003730:	f003 031f 	and.w	r3, r3, #31
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	fa22 f303 	lsr.w	r3, r2, r3
 800373a:	4a07      	ldr	r2, [pc, #28]	@ (8003758 <HAL_RCC_GetHCLKFreq+0x58>)
 800373c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800373e:	4a07      	ldr	r2, [pc, #28]	@ (800375c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003744:	4b04      	ldr	r3, [pc, #16]	@ (8003758 <HAL_RCC_GetHCLKFreq+0x58>)
 8003746:	681b      	ldr	r3, [r3, #0]
}
 8003748:	4618      	mov	r0, r3
 800374a:	3708      	adds	r7, #8
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	58024400 	.word	0x58024400
 8003754:	08008d08 	.word	0x08008d08
 8003758:	24000004 	.word	0x24000004
 800375c:	24000000 	.word	0x24000000

08003760 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003764:	f7ff ffcc 	bl	8003700 <HAL_RCC_GetHCLKFreq>
 8003768:	4602      	mov	r2, r0
 800376a:	4b06      	ldr	r3, [pc, #24]	@ (8003784 <HAL_RCC_GetPCLK1Freq+0x24>)
 800376c:	69db      	ldr	r3, [r3, #28]
 800376e:	091b      	lsrs	r3, r3, #4
 8003770:	f003 0307 	and.w	r3, r3, #7
 8003774:	4904      	ldr	r1, [pc, #16]	@ (8003788 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003776:	5ccb      	ldrb	r3, [r1, r3]
 8003778:	f003 031f 	and.w	r3, r3, #31
 800377c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003780:	4618      	mov	r0, r3
 8003782:	bd80      	pop	{r7, pc}
 8003784:	58024400 	.word	0x58024400
 8003788:	08008d08 	.word	0x08008d08

0800378c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003790:	f7ff ffb6 	bl	8003700 <HAL_RCC_GetHCLKFreq>
 8003794:	4602      	mov	r2, r0
 8003796:	4b06      	ldr	r3, [pc, #24]	@ (80037b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003798:	69db      	ldr	r3, [r3, #28]
 800379a:	0a1b      	lsrs	r3, r3, #8
 800379c:	f003 0307 	and.w	r3, r3, #7
 80037a0:	4904      	ldr	r1, [pc, #16]	@ (80037b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80037a2:	5ccb      	ldrb	r3, [r1, r3]
 80037a4:	f003 031f 	and.w	r3, r3, #31
 80037a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	58024400 	.word	0x58024400
 80037b4:	08008d08 	.word	0x08008d08

080037b8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037bc:	b0ca      	sub	sp, #296	@ 0x128
 80037be:	af00      	add	r7, sp, #0
 80037c0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80037c4:	2300      	movs	r3, #0
 80037c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80037ca:	2300      	movs	r3, #0
 80037cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80037d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80037dc:	2500      	movs	r5, #0
 80037de:	ea54 0305 	orrs.w	r3, r4, r5
 80037e2:	d049      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80037e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037ea:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80037ee:	d02f      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80037f0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80037f4:	d828      	bhi.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80037f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80037fa:	d01a      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80037fc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003800:	d822      	bhi.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003802:	2b00      	cmp	r3, #0
 8003804:	d003      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003806:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800380a:	d007      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800380c:	e01c      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800380e:	4bb8      	ldr	r3, [pc, #736]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003812:	4ab7      	ldr	r2, [pc, #732]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003814:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003818:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800381a:	e01a      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800381c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003820:	3308      	adds	r3, #8
 8003822:	2102      	movs	r1, #2
 8003824:	4618      	mov	r0, r3
 8003826:	f001 fc8f 	bl	8005148 <RCCEx_PLL2_Config>
 800382a:	4603      	mov	r3, r0
 800382c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003830:	e00f      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003836:	3328      	adds	r3, #40	@ 0x28
 8003838:	2102      	movs	r1, #2
 800383a:	4618      	mov	r0, r3
 800383c:	f001 fd36 	bl	80052ac <RCCEx_PLL3_Config>
 8003840:	4603      	mov	r3, r0
 8003842:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003846:	e004      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800384e:	e000      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003850:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003852:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003856:	2b00      	cmp	r3, #0
 8003858:	d10a      	bne.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800385a:	4ba5      	ldr	r3, [pc, #660]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800385c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800385e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003862:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003866:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003868:	4aa1      	ldr	r2, [pc, #644]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800386a:	430b      	orrs	r3, r1
 800386c:	6513      	str	r3, [r2, #80]	@ 0x50
 800386e:	e003      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003870:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003874:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003878:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800387c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003880:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003884:	f04f 0900 	mov.w	r9, #0
 8003888:	ea58 0309 	orrs.w	r3, r8, r9
 800388c:	d047      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800388e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003892:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003894:	2b04      	cmp	r3, #4
 8003896:	d82a      	bhi.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003898:	a201      	add	r2, pc, #4	@ (adr r2, 80038a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800389a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800389e:	bf00      	nop
 80038a0:	080038b5 	.word	0x080038b5
 80038a4:	080038c3 	.word	0x080038c3
 80038a8:	080038d9 	.word	0x080038d9
 80038ac:	080038f7 	.word	0x080038f7
 80038b0:	080038f7 	.word	0x080038f7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038b4:	4b8e      	ldr	r3, [pc, #568]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038b8:	4a8d      	ldr	r2, [pc, #564]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80038c0:	e01a      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038c6:	3308      	adds	r3, #8
 80038c8:	2100      	movs	r1, #0
 80038ca:	4618      	mov	r0, r3
 80038cc:	f001 fc3c 	bl	8005148 <RCCEx_PLL2_Config>
 80038d0:	4603      	mov	r3, r0
 80038d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80038d6:	e00f      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80038d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038dc:	3328      	adds	r3, #40	@ 0x28
 80038de:	2100      	movs	r1, #0
 80038e0:	4618      	mov	r0, r3
 80038e2:	f001 fce3 	bl	80052ac <RCCEx_PLL3_Config>
 80038e6:	4603      	mov	r3, r0
 80038e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80038ec:	e004      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038f4:	e000      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80038f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d10a      	bne.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003900:	4b7b      	ldr	r3, [pc, #492]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003902:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003904:	f023 0107 	bic.w	r1, r3, #7
 8003908:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800390c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800390e:	4a78      	ldr	r2, [pc, #480]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003910:	430b      	orrs	r3, r1
 8003912:	6513      	str	r3, [r2, #80]	@ 0x50
 8003914:	e003      	b.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003916:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800391a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800391e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003926:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800392a:	f04f 0b00 	mov.w	fp, #0
 800392e:	ea5a 030b 	orrs.w	r3, sl, fp
 8003932:	d04c      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003934:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003938:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800393a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800393e:	d030      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003940:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003944:	d829      	bhi.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003946:	2bc0      	cmp	r3, #192	@ 0xc0
 8003948:	d02d      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800394a:	2bc0      	cmp	r3, #192	@ 0xc0
 800394c:	d825      	bhi.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800394e:	2b80      	cmp	r3, #128	@ 0x80
 8003950:	d018      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003952:	2b80      	cmp	r3, #128	@ 0x80
 8003954:	d821      	bhi.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003956:	2b00      	cmp	r3, #0
 8003958:	d002      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800395a:	2b40      	cmp	r3, #64	@ 0x40
 800395c:	d007      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800395e:	e01c      	b.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003960:	4b63      	ldr	r3, [pc, #396]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003964:	4a62      	ldr	r2, [pc, #392]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003966:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800396a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800396c:	e01c      	b.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800396e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003972:	3308      	adds	r3, #8
 8003974:	2100      	movs	r1, #0
 8003976:	4618      	mov	r0, r3
 8003978:	f001 fbe6 	bl	8005148 <RCCEx_PLL2_Config>
 800397c:	4603      	mov	r3, r0
 800397e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003982:	e011      	b.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003984:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003988:	3328      	adds	r3, #40	@ 0x28
 800398a:	2100      	movs	r1, #0
 800398c:	4618      	mov	r0, r3
 800398e:	f001 fc8d 	bl	80052ac <RCCEx_PLL3_Config>
 8003992:	4603      	mov	r3, r0
 8003994:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003998:	e006      	b.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80039a0:	e002      	b.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80039a2:	bf00      	nop
 80039a4:	e000      	b.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80039a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d10a      	bne.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80039b0:	4b4f      	ldr	r3, [pc, #316]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039b4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80039b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039be:	4a4c      	ldr	r2, [pc, #304]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039c0:	430b      	orrs	r3, r1
 80039c2:	6513      	str	r3, [r2, #80]	@ 0x50
 80039c4:	e003      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80039ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80039da:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80039de:	2300      	movs	r3, #0
 80039e0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80039e4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80039e8:	460b      	mov	r3, r1
 80039ea:	4313      	orrs	r3, r2
 80039ec:	d053      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80039ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80039f6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80039fa:	d035      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80039fc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003a00:	d82e      	bhi.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003a02:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003a06:	d031      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003a08:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003a0c:	d828      	bhi.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003a0e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a12:	d01a      	beq.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003a14:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a18:	d822      	bhi.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d003      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003a1e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a22:	d007      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003a24:	e01c      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a26:	4b32      	ldr	r3, [pc, #200]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a2a:	4a31      	ldr	r2, [pc, #196]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a30:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a32:	e01c      	b.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a38:	3308      	adds	r3, #8
 8003a3a:	2100      	movs	r1, #0
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f001 fb83 	bl	8005148 <RCCEx_PLL2_Config>
 8003a42:	4603      	mov	r3, r0
 8003a44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003a48:	e011      	b.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a4e:	3328      	adds	r3, #40	@ 0x28
 8003a50:	2100      	movs	r1, #0
 8003a52:	4618      	mov	r0, r3
 8003a54:	f001 fc2a 	bl	80052ac <RCCEx_PLL3_Config>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a5e:	e006      	b.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a66:	e002      	b.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003a68:	bf00      	nop
 8003a6a:	e000      	b.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003a6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d10b      	bne.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003a76:	4b1e      	ldr	r3, [pc, #120]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a7a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a82:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003a86:	4a1a      	ldr	r2, [pc, #104]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a88:	430b      	orrs	r3, r1
 8003a8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a8c:	e003      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a9e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003aa2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003aac:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	d056      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003abe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003ac2:	d038      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003ac4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003ac8:	d831      	bhi.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003aca:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003ace:	d034      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003ad0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003ad4:	d82b      	bhi.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003ad6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003ada:	d01d      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003adc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003ae0:	d825      	bhi.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d006      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003ae6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003aea:	d00a      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003aec:	e01f      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003aee:	bf00      	nop
 8003af0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003af4:	4ba2      	ldr	r3, [pc, #648]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003af8:	4aa1      	ldr	r2, [pc, #644]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003afa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003afe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003b00:	e01c      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b06:	3308      	adds	r3, #8
 8003b08:	2100      	movs	r1, #0
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f001 fb1c 	bl	8005148 <RCCEx_PLL2_Config>
 8003b10:	4603      	mov	r3, r0
 8003b12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003b16:	e011      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b1c:	3328      	adds	r3, #40	@ 0x28
 8003b1e:	2100      	movs	r1, #0
 8003b20:	4618      	mov	r0, r3
 8003b22:	f001 fbc3 	bl	80052ac <RCCEx_PLL3_Config>
 8003b26:	4603      	mov	r3, r0
 8003b28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003b2c:	e006      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b34:	e002      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003b36:	bf00      	nop
 8003b38:	e000      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003b3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d10b      	bne.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003b44:	4b8e      	ldr	r3, [pc, #568]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b48:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003b4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b50:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003b54:	4a8a      	ldr	r2, [pc, #552]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b56:	430b      	orrs	r3, r1
 8003b58:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b5a:	e003      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b6c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003b70:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003b74:	2300      	movs	r3, #0
 8003b76:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003b7a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003b7e:	460b      	mov	r3, r1
 8003b80:	4313      	orrs	r3, r2
 8003b82:	d03a      	beq.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003b84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b8a:	2b30      	cmp	r3, #48	@ 0x30
 8003b8c:	d01f      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003b8e:	2b30      	cmp	r3, #48	@ 0x30
 8003b90:	d819      	bhi.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003b92:	2b20      	cmp	r3, #32
 8003b94:	d00c      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003b96:	2b20      	cmp	r3, #32
 8003b98:	d815      	bhi.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d019      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003b9e:	2b10      	cmp	r3, #16
 8003ba0:	d111      	bne.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ba2:	4b77      	ldr	r3, [pc, #476]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ba6:	4a76      	ldr	r2, [pc, #472]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ba8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003bae:	e011      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003bb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bb4:	3308      	adds	r3, #8
 8003bb6:	2102      	movs	r1, #2
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f001 fac5 	bl	8005148 <RCCEx_PLL2_Config>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003bc4:	e006      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003bcc:	e002      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003bce:	bf00      	nop
 8003bd0:	e000      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003bd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d10a      	bne.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003bdc:	4b68      	ldr	r3, [pc, #416]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003be0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003be8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bea:	4a65      	ldr	r2, [pc, #404]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bec:	430b      	orrs	r3, r1
 8003bee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003bf0:	e003      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bf2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bf6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c02:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003c06:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003c10:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003c14:	460b      	mov	r3, r1
 8003c16:	4313      	orrs	r3, r2
 8003c18:	d051      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c20:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c24:	d035      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003c26:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c2a:	d82e      	bhi.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003c2c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003c30:	d031      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003c32:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003c36:	d828      	bhi.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003c38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c3c:	d01a      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003c3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c42:	d822      	bhi.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d003      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003c48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c4c:	d007      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003c4e:	e01c      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c50:	4b4b      	ldr	r3, [pc, #300]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c54:	4a4a      	ldr	r2, [pc, #296]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003c5c:	e01c      	b.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c62:	3308      	adds	r3, #8
 8003c64:	2100      	movs	r1, #0
 8003c66:	4618      	mov	r0, r3
 8003c68:	f001 fa6e 	bl	8005148 <RCCEx_PLL2_Config>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003c72:	e011      	b.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c78:	3328      	adds	r3, #40	@ 0x28
 8003c7a:	2100      	movs	r1, #0
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f001 fb15 	bl	80052ac <RCCEx_PLL3_Config>
 8003c82:	4603      	mov	r3, r0
 8003c84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003c88:	e006      	b.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c90:	e002      	b.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003c92:	bf00      	nop
 8003c94:	e000      	b.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003c96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d10a      	bne.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003ca0:	4b37      	ldr	r3, [pc, #220]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ca2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ca4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003ca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cae:	4a34      	ldr	r2, [pc, #208]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003cb0:	430b      	orrs	r3, r1
 8003cb2:	6513      	str	r3, [r2, #80]	@ 0x50
 8003cb4:	e003      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003cca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003cce:	2300      	movs	r3, #0
 8003cd0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003cd4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003cd8:	460b      	mov	r3, r1
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	d056      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ce2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ce4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ce8:	d033      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003cea:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003cee:	d82c      	bhi.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003cf0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003cf4:	d02f      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003cf6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003cfa:	d826      	bhi.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003cfc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003d00:	d02b      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003d02:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003d06:	d820      	bhi.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003d08:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d0c:	d012      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003d0e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d12:	d81a      	bhi.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d022      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003d18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d1c:	d115      	bne.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d22:	3308      	adds	r3, #8
 8003d24:	2101      	movs	r1, #1
 8003d26:	4618      	mov	r0, r3
 8003d28:	f001 fa0e 	bl	8005148 <RCCEx_PLL2_Config>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003d32:	e015      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d38:	3328      	adds	r3, #40	@ 0x28
 8003d3a:	2101      	movs	r1, #1
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f001 fab5 	bl	80052ac <RCCEx_PLL3_Config>
 8003d42:	4603      	mov	r3, r0
 8003d44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003d48:	e00a      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d50:	e006      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003d52:	bf00      	nop
 8003d54:	e004      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003d56:	bf00      	nop
 8003d58:	e002      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003d5a:	bf00      	nop
 8003d5c:	e000      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003d5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d10d      	bne.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003d68:	4b05      	ldr	r3, [pc, #20]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d6c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003d70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d74:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d76:	4a02      	ldr	r2, [pc, #8]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d78:	430b      	orrs	r3, r1
 8003d7a:	6513      	str	r3, [r2, #80]	@ 0x50
 8003d7c:	e006      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003d7e:	bf00      	nop
 8003d80:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003d8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d94:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003d98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003da2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003da6:	460b      	mov	r3, r1
 8003da8:	4313      	orrs	r3, r2
 8003daa:	d055      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003dac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003db0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003db4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003db8:	d033      	beq.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003dba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003dbe:	d82c      	bhi.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dc4:	d02f      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dca:	d826      	bhi.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003dcc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003dd0:	d02b      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003dd2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003dd6:	d820      	bhi.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003dd8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ddc:	d012      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003dde:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003de2:	d81a      	bhi.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d022      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003de8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003dec:	d115      	bne.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003df2:	3308      	adds	r3, #8
 8003df4:	2101      	movs	r1, #1
 8003df6:	4618      	mov	r0, r3
 8003df8:	f001 f9a6 	bl	8005148 <RCCEx_PLL2_Config>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003e02:	e015      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e08:	3328      	adds	r3, #40	@ 0x28
 8003e0a:	2101      	movs	r1, #1
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f001 fa4d 	bl	80052ac <RCCEx_PLL3_Config>
 8003e12:	4603      	mov	r3, r0
 8003e14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003e18:	e00a      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e20:	e006      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003e22:	bf00      	nop
 8003e24:	e004      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003e26:	bf00      	nop
 8003e28:	e002      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003e2a:	bf00      	nop
 8003e2c:	e000      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003e2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d10b      	bne.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003e38:	4ba3      	ldr	r3, [pc, #652]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e3c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e44:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003e48:	4a9f      	ldr	r2, [pc, #636]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e4a:	430b      	orrs	r3, r1
 8003e4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e4e:	e003      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e54:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003e58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e60:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003e64:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003e68:	2300      	movs	r3, #0
 8003e6a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003e6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003e72:	460b      	mov	r3, r1
 8003e74:	4313      	orrs	r3, r2
 8003e76:	d037      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e82:	d00e      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003e84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e88:	d816      	bhi.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d018      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003e8e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e92:	d111      	bne.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e94:	4b8c      	ldr	r3, [pc, #560]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e98:	4a8b      	ldr	r2, [pc, #556]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003ea0:	e00f      	b.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ea6:	3308      	adds	r3, #8
 8003ea8:	2101      	movs	r1, #1
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f001 f94c 	bl	8005148 <RCCEx_PLL2_Config>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003eb6:	e004      	b.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ebe:	e000      	b.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003ec0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ec2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d10a      	bne.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003eca:	4b7f      	ldr	r3, [pc, #508]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ecc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ece:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003ed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ed6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ed8:	4a7b      	ldr	r2, [pc, #492]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003eda:	430b      	orrs	r3, r1
 8003edc:	6513      	str	r3, [r2, #80]	@ 0x50
 8003ede:	e003      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ee0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ee4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003ee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003ef4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ef8:	2300      	movs	r3, #0
 8003efa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003efe:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003f02:	460b      	mov	r3, r1
 8003f04:	4313      	orrs	r3, r2
 8003f06:	d039      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003f08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f0e:	2b03      	cmp	r3, #3
 8003f10:	d81c      	bhi.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003f12:	a201      	add	r2, pc, #4	@ (adr r2, 8003f18 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f18:	08003f55 	.word	0x08003f55
 8003f1c:	08003f29 	.word	0x08003f29
 8003f20:	08003f37 	.word	0x08003f37
 8003f24:	08003f55 	.word	0x08003f55
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f28:	4b67      	ldr	r3, [pc, #412]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f2c:	4a66      	ldr	r2, [pc, #408]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003f34:	e00f      	b.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f3a:	3308      	adds	r3, #8
 8003f3c:	2102      	movs	r1, #2
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f001 f902 	bl	8005148 <RCCEx_PLL2_Config>
 8003f44:	4603      	mov	r3, r0
 8003f46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003f4a:	e004      	b.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f52:	e000      	b.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003f54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d10a      	bne.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003f5e:	4b5a      	ldr	r3, [pc, #360]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f62:	f023 0103 	bic.w	r1, r3, #3
 8003f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f6c:	4a56      	ldr	r2, [pc, #344]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f6e:	430b      	orrs	r3, r1
 8003f70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f72:	e003      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f78:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f84:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003f88:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003f92:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003f96:	460b      	mov	r3, r1
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	f000 809f 	beq.w	80040dc <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f9e:	4b4b      	ldr	r3, [pc, #300]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a4a      	ldr	r2, [pc, #296]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003fa4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fa8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003faa:	f7fd fab5 	bl	8001518 <HAL_GetTick>
 8003fae:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fb2:	e00b      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fb4:	f7fd fab0 	bl	8001518 <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	2b64      	cmp	r3, #100	@ 0x64
 8003fc2:	d903      	bls.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003fca:	e005      	b.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fcc:	4b3f      	ldr	r3, [pc, #252]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d0ed      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003fd8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d179      	bne.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003fe0:	4b39      	ldr	r3, [pc, #228]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fe2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003fe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fe8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003fec:	4053      	eors	r3, r2
 8003fee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d015      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ff6:	4b34      	ldr	r3, [pc, #208]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ff8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ffa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ffe:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004002:	4b31      	ldr	r3, [pc, #196]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004004:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004006:	4a30      	ldr	r2, [pc, #192]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004008:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800400c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800400e:	4b2e      	ldr	r3, [pc, #184]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004010:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004012:	4a2d      	ldr	r2, [pc, #180]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004014:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004018:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800401a:	4a2b      	ldr	r2, [pc, #172]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800401c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004020:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004022:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004026:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800402a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800402e:	d118      	bne.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004030:	f7fd fa72 	bl	8001518 <HAL_GetTick>
 8004034:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004038:	e00d      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800403a:	f7fd fa6d 	bl	8001518 <HAL_GetTick>
 800403e:	4602      	mov	r2, r0
 8004040:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004044:	1ad2      	subs	r2, r2, r3
 8004046:	f241 3388 	movw	r3, #5000	@ 0x1388
 800404a:	429a      	cmp	r2, r3
 800404c:	d903      	bls.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004054:	e005      	b.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004056:	4b1c      	ldr	r3, [pc, #112]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004058:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800405a:	f003 0302 	and.w	r3, r3, #2
 800405e:	2b00      	cmp	r3, #0
 8004060:	d0eb      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004062:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004066:	2b00      	cmp	r3, #0
 8004068:	d129      	bne.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800406a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800406e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004072:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004076:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800407a:	d10e      	bne.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800407c:	4b12      	ldr	r3, [pc, #72]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800407e:	691b      	ldr	r3, [r3, #16]
 8004080:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004084:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004088:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800408c:	091a      	lsrs	r2, r3, #4
 800408e:	4b10      	ldr	r3, [pc, #64]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004090:	4013      	ands	r3, r2
 8004092:	4a0d      	ldr	r2, [pc, #52]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004094:	430b      	orrs	r3, r1
 8004096:	6113      	str	r3, [r2, #16]
 8004098:	e005      	b.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800409a:	4b0b      	ldr	r3, [pc, #44]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	4a0a      	ldr	r2, [pc, #40]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040a0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80040a4:	6113      	str	r3, [r2, #16]
 80040a6:	4b08      	ldr	r3, [pc, #32]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040a8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80040aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80040b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040b6:	4a04      	ldr	r2, [pc, #16]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040b8:	430b      	orrs	r3, r1
 80040ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80040bc:	e00e      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80040be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80040c6:	e009      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x924>
 80040c8:	58024400 	.word	0x58024400
 80040cc:	58024800 	.word	0x58024800
 80040d0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80040dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e4:	f002 0301 	and.w	r3, r2, #1
 80040e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80040ec:	2300      	movs	r3, #0
 80040ee:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80040f2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80040f6:	460b      	mov	r3, r1
 80040f8:	4313      	orrs	r3, r2
 80040fa:	f000 8089 	beq.w	8004210 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80040fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004102:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004104:	2b28      	cmp	r3, #40	@ 0x28
 8004106:	d86b      	bhi.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004108:	a201      	add	r2, pc, #4	@ (adr r2, 8004110 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800410a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800410e:	bf00      	nop
 8004110:	080041e9 	.word	0x080041e9
 8004114:	080041e1 	.word	0x080041e1
 8004118:	080041e1 	.word	0x080041e1
 800411c:	080041e1 	.word	0x080041e1
 8004120:	080041e1 	.word	0x080041e1
 8004124:	080041e1 	.word	0x080041e1
 8004128:	080041e1 	.word	0x080041e1
 800412c:	080041e1 	.word	0x080041e1
 8004130:	080041b5 	.word	0x080041b5
 8004134:	080041e1 	.word	0x080041e1
 8004138:	080041e1 	.word	0x080041e1
 800413c:	080041e1 	.word	0x080041e1
 8004140:	080041e1 	.word	0x080041e1
 8004144:	080041e1 	.word	0x080041e1
 8004148:	080041e1 	.word	0x080041e1
 800414c:	080041e1 	.word	0x080041e1
 8004150:	080041cb 	.word	0x080041cb
 8004154:	080041e1 	.word	0x080041e1
 8004158:	080041e1 	.word	0x080041e1
 800415c:	080041e1 	.word	0x080041e1
 8004160:	080041e1 	.word	0x080041e1
 8004164:	080041e1 	.word	0x080041e1
 8004168:	080041e1 	.word	0x080041e1
 800416c:	080041e1 	.word	0x080041e1
 8004170:	080041e9 	.word	0x080041e9
 8004174:	080041e1 	.word	0x080041e1
 8004178:	080041e1 	.word	0x080041e1
 800417c:	080041e1 	.word	0x080041e1
 8004180:	080041e1 	.word	0x080041e1
 8004184:	080041e1 	.word	0x080041e1
 8004188:	080041e1 	.word	0x080041e1
 800418c:	080041e1 	.word	0x080041e1
 8004190:	080041e9 	.word	0x080041e9
 8004194:	080041e1 	.word	0x080041e1
 8004198:	080041e1 	.word	0x080041e1
 800419c:	080041e1 	.word	0x080041e1
 80041a0:	080041e1 	.word	0x080041e1
 80041a4:	080041e1 	.word	0x080041e1
 80041a8:	080041e1 	.word	0x080041e1
 80041ac:	080041e1 	.word	0x080041e1
 80041b0:	080041e9 	.word	0x080041e9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80041b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041b8:	3308      	adds	r3, #8
 80041ba:	2101      	movs	r1, #1
 80041bc:	4618      	mov	r0, r3
 80041be:	f000 ffc3 	bl	8005148 <RCCEx_PLL2_Config>
 80041c2:	4603      	mov	r3, r0
 80041c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80041c8:	e00f      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80041ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ce:	3328      	adds	r3, #40	@ 0x28
 80041d0:	2101      	movs	r1, #1
 80041d2:	4618      	mov	r0, r3
 80041d4:	f001 f86a 	bl	80052ac <RCCEx_PLL3_Config>
 80041d8:	4603      	mov	r3, r0
 80041da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80041de:	e004      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041e6:	e000      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80041e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d10a      	bne.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80041f2:	4bbf      	ldr	r3, [pc, #764]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041f6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80041fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004200:	4abb      	ldr	r2, [pc, #748]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004202:	430b      	orrs	r3, r1
 8004204:	6553      	str	r3, [r2, #84]	@ 0x54
 8004206:	e003      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004208:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800420c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004210:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004218:	f002 0302 	and.w	r3, r2, #2
 800421c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004220:	2300      	movs	r3, #0
 8004222:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004226:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800422a:	460b      	mov	r3, r1
 800422c:	4313      	orrs	r3, r2
 800422e:	d041      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004230:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004234:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004236:	2b05      	cmp	r3, #5
 8004238:	d824      	bhi.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800423a:	a201      	add	r2, pc, #4	@ (adr r2, 8004240 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800423c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004240:	0800428d 	.word	0x0800428d
 8004244:	08004259 	.word	0x08004259
 8004248:	0800426f 	.word	0x0800426f
 800424c:	0800428d 	.word	0x0800428d
 8004250:	0800428d 	.word	0x0800428d
 8004254:	0800428d 	.word	0x0800428d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004258:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800425c:	3308      	adds	r3, #8
 800425e:	2101      	movs	r1, #1
 8004260:	4618      	mov	r0, r3
 8004262:	f000 ff71 	bl	8005148 <RCCEx_PLL2_Config>
 8004266:	4603      	mov	r3, r0
 8004268:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800426c:	e00f      	b.n	800428e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800426e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004272:	3328      	adds	r3, #40	@ 0x28
 8004274:	2101      	movs	r1, #1
 8004276:	4618      	mov	r0, r3
 8004278:	f001 f818 	bl	80052ac <RCCEx_PLL3_Config>
 800427c:	4603      	mov	r3, r0
 800427e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004282:	e004      	b.n	800428e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800428a:	e000      	b.n	800428e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800428c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800428e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004292:	2b00      	cmp	r3, #0
 8004294:	d10a      	bne.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004296:	4b96      	ldr	r3, [pc, #600]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004298:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800429a:	f023 0107 	bic.w	r1, r3, #7
 800429e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042a2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80042a4:	4a92      	ldr	r2, [pc, #584]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80042a6:	430b      	orrs	r3, r1
 80042a8:	6553      	str	r3, [r2, #84]	@ 0x54
 80042aa:	e003      	b.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80042b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042bc:	f002 0304 	and.w	r3, r2, #4
 80042c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80042c4:	2300      	movs	r3, #0
 80042c6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80042ca:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80042ce:	460b      	mov	r3, r1
 80042d0:	4313      	orrs	r3, r2
 80042d2:	d044      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80042d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042dc:	2b05      	cmp	r3, #5
 80042de:	d825      	bhi.n	800432c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80042e0:	a201      	add	r2, pc, #4	@ (adr r2, 80042e8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80042e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042e6:	bf00      	nop
 80042e8:	08004335 	.word	0x08004335
 80042ec:	08004301 	.word	0x08004301
 80042f0:	08004317 	.word	0x08004317
 80042f4:	08004335 	.word	0x08004335
 80042f8:	08004335 	.word	0x08004335
 80042fc:	08004335 	.word	0x08004335
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004300:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004304:	3308      	adds	r3, #8
 8004306:	2101      	movs	r1, #1
 8004308:	4618      	mov	r0, r3
 800430a:	f000 ff1d 	bl	8005148 <RCCEx_PLL2_Config>
 800430e:	4603      	mov	r3, r0
 8004310:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004314:	e00f      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004316:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800431a:	3328      	adds	r3, #40	@ 0x28
 800431c:	2101      	movs	r1, #1
 800431e:	4618      	mov	r0, r3
 8004320:	f000 ffc4 	bl	80052ac <RCCEx_PLL3_Config>
 8004324:	4603      	mov	r3, r0
 8004326:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800432a:	e004      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004332:	e000      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004334:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004336:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800433a:	2b00      	cmp	r3, #0
 800433c:	d10b      	bne.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800433e:	4b6c      	ldr	r3, [pc, #432]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004340:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004342:	f023 0107 	bic.w	r1, r3, #7
 8004346:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800434a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800434e:	4a68      	ldr	r2, [pc, #416]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004350:	430b      	orrs	r3, r1
 8004352:	6593      	str	r3, [r2, #88]	@ 0x58
 8004354:	e003      	b.n	800435e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004356:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800435a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800435e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004366:	f002 0320 	and.w	r3, r2, #32
 800436a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800436e:	2300      	movs	r3, #0
 8004370:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004374:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004378:	460b      	mov	r3, r1
 800437a:	4313      	orrs	r3, r2
 800437c:	d055      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800437e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004382:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004386:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800438a:	d033      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800438c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004390:	d82c      	bhi.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004392:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004396:	d02f      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004398:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800439c:	d826      	bhi.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800439e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80043a2:	d02b      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80043a4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80043a8:	d820      	bhi.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80043aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80043ae:	d012      	beq.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80043b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80043b4:	d81a      	bhi.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d022      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80043ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80043be:	d115      	bne.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80043c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043c4:	3308      	adds	r3, #8
 80043c6:	2100      	movs	r1, #0
 80043c8:	4618      	mov	r0, r3
 80043ca:	f000 febd 	bl	8005148 <RCCEx_PLL2_Config>
 80043ce:	4603      	mov	r3, r0
 80043d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80043d4:	e015      	b.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80043d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043da:	3328      	adds	r3, #40	@ 0x28
 80043dc:	2102      	movs	r1, #2
 80043de:	4618      	mov	r0, r3
 80043e0:	f000 ff64 	bl	80052ac <RCCEx_PLL3_Config>
 80043e4:	4603      	mov	r3, r0
 80043e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80043ea:	e00a      	b.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80043f2:	e006      	b.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80043f4:	bf00      	nop
 80043f6:	e004      	b.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80043f8:	bf00      	nop
 80043fa:	e002      	b.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80043fc:	bf00      	nop
 80043fe:	e000      	b.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004400:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004402:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004406:	2b00      	cmp	r3, #0
 8004408:	d10b      	bne.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800440a:	4b39      	ldr	r3, [pc, #228]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800440c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800440e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004412:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004416:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800441a:	4a35      	ldr	r2, [pc, #212]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800441c:	430b      	orrs	r3, r1
 800441e:	6553      	str	r3, [r2, #84]	@ 0x54
 8004420:	e003      	b.n	800442a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004422:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004426:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800442a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800442e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004432:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004436:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800443a:	2300      	movs	r3, #0
 800443c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004440:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004444:	460b      	mov	r3, r1
 8004446:	4313      	orrs	r3, r2
 8004448:	d058      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800444a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800444e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004452:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004456:	d033      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004458:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800445c:	d82c      	bhi.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800445e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004462:	d02f      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004464:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004468:	d826      	bhi.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800446a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800446e:	d02b      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004470:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004474:	d820      	bhi.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004476:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800447a:	d012      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800447c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004480:	d81a      	bhi.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004482:	2b00      	cmp	r3, #0
 8004484:	d022      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004486:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800448a:	d115      	bne.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800448c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004490:	3308      	adds	r3, #8
 8004492:	2100      	movs	r1, #0
 8004494:	4618      	mov	r0, r3
 8004496:	f000 fe57 	bl	8005148 <RCCEx_PLL2_Config>
 800449a:	4603      	mov	r3, r0
 800449c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80044a0:	e015      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80044a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044a6:	3328      	adds	r3, #40	@ 0x28
 80044a8:	2102      	movs	r1, #2
 80044aa:	4618      	mov	r0, r3
 80044ac:	f000 fefe 	bl	80052ac <RCCEx_PLL3_Config>
 80044b0:	4603      	mov	r3, r0
 80044b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80044b6:	e00a      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80044be:	e006      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80044c0:	bf00      	nop
 80044c2:	e004      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80044c4:	bf00      	nop
 80044c6:	e002      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80044c8:	bf00      	nop
 80044ca:	e000      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80044cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d10e      	bne.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80044d6:	4b06      	ldr	r3, [pc, #24]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80044d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044da:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80044de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80044e6:	4a02      	ldr	r2, [pc, #8]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80044e8:	430b      	orrs	r3, r1
 80044ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80044ec:	e006      	b.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80044ee:	bf00      	nop
 80044f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80044fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004504:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004508:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800450c:	2300      	movs	r3, #0
 800450e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004512:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004516:	460b      	mov	r3, r1
 8004518:	4313      	orrs	r3, r2
 800451a:	d055      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800451c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004520:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004524:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004528:	d033      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800452a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800452e:	d82c      	bhi.n	800458a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004530:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004534:	d02f      	beq.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004536:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800453a:	d826      	bhi.n	800458a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800453c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004540:	d02b      	beq.n	800459a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004542:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004546:	d820      	bhi.n	800458a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004548:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800454c:	d012      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800454e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004552:	d81a      	bhi.n	800458a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004554:	2b00      	cmp	r3, #0
 8004556:	d022      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004558:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800455c:	d115      	bne.n	800458a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800455e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004562:	3308      	adds	r3, #8
 8004564:	2100      	movs	r1, #0
 8004566:	4618      	mov	r0, r3
 8004568:	f000 fdee 	bl	8005148 <RCCEx_PLL2_Config>
 800456c:	4603      	mov	r3, r0
 800456e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004572:	e015      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004574:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004578:	3328      	adds	r3, #40	@ 0x28
 800457a:	2102      	movs	r1, #2
 800457c:	4618      	mov	r0, r3
 800457e:	f000 fe95 	bl	80052ac <RCCEx_PLL3_Config>
 8004582:	4603      	mov	r3, r0
 8004584:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004588:	e00a      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004590:	e006      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004592:	bf00      	nop
 8004594:	e004      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004596:	bf00      	nop
 8004598:	e002      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800459a:	bf00      	nop
 800459c:	e000      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800459e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d10b      	bne.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80045a8:	4ba1      	ldr	r3, [pc, #644]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045ac:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80045b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80045b8:	4a9d      	ldr	r2, [pc, #628]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045ba:	430b      	orrs	r3, r1
 80045bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80045be:	e003      	b.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80045c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d0:	f002 0308 	and.w	r3, r2, #8
 80045d4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80045d8:	2300      	movs	r3, #0
 80045da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80045de:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80045e2:	460b      	mov	r3, r1
 80045e4:	4313      	orrs	r3, r2
 80045e6:	d01e      	beq.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80045e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045f4:	d10c      	bne.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80045f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045fa:	3328      	adds	r3, #40	@ 0x28
 80045fc:	2102      	movs	r1, #2
 80045fe:	4618      	mov	r0, r3
 8004600:	f000 fe54 	bl	80052ac <RCCEx_PLL3_Config>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d002      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004610:	4b87      	ldr	r3, [pc, #540]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004612:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004614:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004618:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800461c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004620:	4a83      	ldr	r2, [pc, #524]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004622:	430b      	orrs	r3, r1
 8004624:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004626:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800462a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800462e:	f002 0310 	and.w	r3, r2, #16
 8004632:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004636:	2300      	movs	r3, #0
 8004638:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800463c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004640:	460b      	mov	r3, r1
 8004642:	4313      	orrs	r3, r2
 8004644:	d01e      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004646:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800464a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800464e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004652:	d10c      	bne.n	800466e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004654:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004658:	3328      	adds	r3, #40	@ 0x28
 800465a:	2102      	movs	r1, #2
 800465c:	4618      	mov	r0, r3
 800465e:	f000 fe25 	bl	80052ac <RCCEx_PLL3_Config>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d002      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800466e:	4b70      	ldr	r3, [pc, #448]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004670:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004672:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004676:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800467a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800467e:	4a6c      	ldr	r2, [pc, #432]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004680:	430b      	orrs	r3, r1
 8004682:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004684:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800468c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004690:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004694:	2300      	movs	r3, #0
 8004696:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800469a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800469e:	460b      	mov	r3, r1
 80046a0:	4313      	orrs	r3, r2
 80046a2:	d03e      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80046a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80046ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80046b0:	d022      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80046b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80046b6:	d81b      	bhi.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d003      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80046bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046c0:	d00b      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80046c2:	e015      	b.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046c8:	3308      	adds	r3, #8
 80046ca:	2100      	movs	r1, #0
 80046cc:	4618      	mov	r0, r3
 80046ce:	f000 fd3b 	bl	8005148 <RCCEx_PLL2_Config>
 80046d2:	4603      	mov	r3, r0
 80046d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80046d8:	e00f      	b.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80046da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046de:	3328      	adds	r3, #40	@ 0x28
 80046e0:	2102      	movs	r1, #2
 80046e2:	4618      	mov	r0, r3
 80046e4:	f000 fde2 	bl	80052ac <RCCEx_PLL3_Config>
 80046e8:	4603      	mov	r3, r0
 80046ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80046ee:	e004      	b.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80046f6:	e000      	b.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80046f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d10b      	bne.n	800471a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004702:	4b4b      	ldr	r3, [pc, #300]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004704:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004706:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800470a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800470e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004712:	4a47      	ldr	r2, [pc, #284]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004714:	430b      	orrs	r3, r1
 8004716:	6593      	str	r3, [r2, #88]	@ 0x58
 8004718:	e003      	b.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800471a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800471e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004722:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800472a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800472e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004730:	2300      	movs	r3, #0
 8004732:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004734:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004738:	460b      	mov	r3, r1
 800473a:	4313      	orrs	r3, r2
 800473c:	d03b      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800473e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004742:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004746:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800474a:	d01f      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800474c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004750:	d818      	bhi.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004752:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004756:	d003      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004758:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800475c:	d007      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800475e:	e011      	b.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004760:	4b33      	ldr	r3, [pc, #204]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004764:	4a32      	ldr	r2, [pc, #200]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004766:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800476a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800476c:	e00f      	b.n	800478e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800476e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004772:	3328      	adds	r3, #40	@ 0x28
 8004774:	2101      	movs	r1, #1
 8004776:	4618      	mov	r0, r3
 8004778:	f000 fd98 	bl	80052ac <RCCEx_PLL3_Config>
 800477c:	4603      	mov	r3, r0
 800477e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004782:	e004      	b.n	800478e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800478a:	e000      	b.n	800478e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800478c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800478e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004792:	2b00      	cmp	r3, #0
 8004794:	d10b      	bne.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004796:	4b26      	ldr	r3, [pc, #152]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004798:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800479a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800479e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047a6:	4a22      	ldr	r2, [pc, #136]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047a8:	430b      	orrs	r3, r1
 80047aa:	6553      	str	r3, [r2, #84]	@ 0x54
 80047ac:	e003      	b.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80047b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047be:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80047c2:	673b      	str	r3, [r7, #112]	@ 0x70
 80047c4:	2300      	movs	r3, #0
 80047c6:	677b      	str	r3, [r7, #116]	@ 0x74
 80047c8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80047cc:	460b      	mov	r3, r1
 80047ce:	4313      	orrs	r3, r2
 80047d0:	d034      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80047d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d003      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80047dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047e0:	d007      	beq.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80047e2:	e011      	b.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047e4:	4b12      	ldr	r3, [pc, #72]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047e8:	4a11      	ldr	r2, [pc, #68]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80047f0:	e00e      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80047f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047f6:	3308      	adds	r3, #8
 80047f8:	2102      	movs	r1, #2
 80047fa:	4618      	mov	r0, r3
 80047fc:	f000 fca4 	bl	8005148 <RCCEx_PLL2_Config>
 8004800:	4603      	mov	r3, r0
 8004802:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004806:	e003      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800480e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004810:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004814:	2b00      	cmp	r3, #0
 8004816:	d10d      	bne.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004818:	4b05      	ldr	r3, [pc, #20]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800481a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800481c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004820:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004824:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004826:	4a02      	ldr	r2, [pc, #8]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004828:	430b      	orrs	r3, r1
 800482a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800482c:	e006      	b.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800482e:	bf00      	nop
 8004830:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004834:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004838:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800483c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004844:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004848:	66bb      	str	r3, [r7, #104]	@ 0x68
 800484a:	2300      	movs	r3, #0
 800484c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800484e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004852:	460b      	mov	r3, r1
 8004854:	4313      	orrs	r3, r2
 8004856:	d00c      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004858:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800485c:	3328      	adds	r3, #40	@ 0x28
 800485e:	2102      	movs	r1, #2
 8004860:	4618      	mov	r0, r3
 8004862:	f000 fd23 	bl	80052ac <RCCEx_PLL3_Config>
 8004866:	4603      	mov	r3, r0
 8004868:	2b00      	cmp	r3, #0
 800486a:	d002      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800487a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800487e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004880:	2300      	movs	r3, #0
 8004882:	667b      	str	r3, [r7, #100]	@ 0x64
 8004884:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004888:	460b      	mov	r3, r1
 800488a:	4313      	orrs	r3, r2
 800488c:	d038      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800488e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004892:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004896:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800489a:	d018      	beq.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800489c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80048a0:	d811      	bhi.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80048a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048a6:	d014      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80048a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048ac:	d80b      	bhi.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d011      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80048b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048b6:	d106      	bne.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048b8:	4bc3      	ldr	r3, [pc, #780]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048bc:	4ac2      	ldr	r2, [pc, #776]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80048c4:	e008      	b.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80048cc:	e004      	b.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80048ce:	bf00      	nop
 80048d0:	e002      	b.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80048d2:	bf00      	nop
 80048d4:	e000      	b.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80048d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d10b      	bne.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80048e0:	4bb9      	ldr	r3, [pc, #740]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048e4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80048e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048f0:	4ab5      	ldr	r2, [pc, #724]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048f2:	430b      	orrs	r3, r1
 80048f4:	6553      	str	r3, [r2, #84]	@ 0x54
 80048f6:	e003      	b.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004900:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004908:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800490c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800490e:	2300      	movs	r3, #0
 8004910:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004912:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004916:	460b      	mov	r3, r1
 8004918:	4313      	orrs	r3, r2
 800491a:	d009      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800491c:	4baa      	ldr	r3, [pc, #680]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800491e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004920:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004924:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004928:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800492a:	4aa7      	ldr	r2, [pc, #668]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800492c:	430b      	orrs	r3, r1
 800492e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004930:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004938:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800493c:	653b      	str	r3, [r7, #80]	@ 0x50
 800493e:	2300      	movs	r3, #0
 8004940:	657b      	str	r3, [r7, #84]	@ 0x54
 8004942:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004946:	460b      	mov	r3, r1
 8004948:	4313      	orrs	r3, r2
 800494a:	d00a      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800494c:	4b9e      	ldr	r3, [pc, #632]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004954:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004958:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800495c:	4a9a      	ldr	r2, [pc, #616]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800495e:	430b      	orrs	r3, r1
 8004960:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004962:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800496a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800496e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004970:	2300      	movs	r3, #0
 8004972:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004974:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004978:	460b      	mov	r3, r1
 800497a:	4313      	orrs	r3, r2
 800497c:	d009      	beq.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800497e:	4b92      	ldr	r3, [pc, #584]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004980:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004982:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004986:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800498a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800498c:	4a8e      	ldr	r2, [pc, #568]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800498e:	430b      	orrs	r3, r1
 8004990:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004992:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800499a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800499e:	643b      	str	r3, [r7, #64]	@ 0x40
 80049a0:	2300      	movs	r3, #0
 80049a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80049a4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80049a8:	460b      	mov	r3, r1
 80049aa:	4313      	orrs	r3, r2
 80049ac:	d00e      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80049ae:	4b86      	ldr	r3, [pc, #536]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	4a85      	ldr	r2, [pc, #532]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049b4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80049b8:	6113      	str	r3, [r2, #16]
 80049ba:	4b83      	ldr	r3, [pc, #524]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049bc:	6919      	ldr	r1, [r3, #16]
 80049be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049c2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80049c6:	4a80      	ldr	r2, [pc, #512]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049c8:	430b      	orrs	r3, r1
 80049ca:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80049cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80049d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80049da:	2300      	movs	r3, #0
 80049dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049de:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80049e2:	460b      	mov	r3, r1
 80049e4:	4313      	orrs	r3, r2
 80049e6:	d009      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80049e8:	4b77      	ldr	r3, [pc, #476]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049ec:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80049f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049f6:	4a74      	ldr	r2, [pc, #464]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049f8:	430b      	orrs	r3, r1
 80049fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80049fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a04:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004a08:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a0e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004a12:	460b      	mov	r3, r1
 8004a14:	4313      	orrs	r3, r2
 8004a16:	d00a      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004a18:	4b6b      	ldr	r3, [pc, #428]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a1c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a28:	4a67      	ldr	r2, [pc, #412]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a2a:	430b      	orrs	r3, r1
 8004a2c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a36:	2100      	movs	r1, #0
 8004a38:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004a3a:	f003 0301 	and.w	r3, r3, #1
 8004a3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a40:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004a44:	460b      	mov	r3, r1
 8004a46:	4313      	orrs	r3, r2
 8004a48:	d011      	beq.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a4e:	3308      	adds	r3, #8
 8004a50:	2100      	movs	r1, #0
 8004a52:	4618      	mov	r0, r3
 8004a54:	f000 fb78 	bl	8005148 <RCCEx_PLL2_Config>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004a5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d003      	beq.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a76:	2100      	movs	r1, #0
 8004a78:	6239      	str	r1, [r7, #32]
 8004a7a:	f003 0302 	and.w	r3, r3, #2
 8004a7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a80:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004a84:	460b      	mov	r3, r1
 8004a86:	4313      	orrs	r3, r2
 8004a88:	d011      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a8e:	3308      	adds	r3, #8
 8004a90:	2101      	movs	r1, #1
 8004a92:	4618      	mov	r0, r3
 8004a94:	f000 fb58 	bl	8005148 <RCCEx_PLL2_Config>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004a9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d003      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aa6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004aaa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab6:	2100      	movs	r1, #0
 8004ab8:	61b9      	str	r1, [r7, #24]
 8004aba:	f003 0304 	and.w	r3, r3, #4
 8004abe:	61fb      	str	r3, [r7, #28]
 8004ac0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	d011      	beq.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ace:	3308      	adds	r3, #8
 8004ad0:	2102      	movs	r1, #2
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f000 fb38 	bl	8005148 <RCCEx_PLL2_Config>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004ade:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d003      	beq.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ae6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004aea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af6:	2100      	movs	r1, #0
 8004af8:	6139      	str	r1, [r7, #16]
 8004afa:	f003 0308 	and.w	r3, r3, #8
 8004afe:	617b      	str	r3, [r7, #20]
 8004b00:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004b04:	460b      	mov	r3, r1
 8004b06:	4313      	orrs	r3, r2
 8004b08:	d011      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004b0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b0e:	3328      	adds	r3, #40	@ 0x28
 8004b10:	2100      	movs	r1, #0
 8004b12:	4618      	mov	r0, r3
 8004b14:	f000 fbca 	bl	80052ac <RCCEx_PLL3_Config>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004b1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d003      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b36:	2100      	movs	r1, #0
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	f003 0310 	and.w	r3, r3, #16
 8004b3e:	60fb      	str	r3, [r7, #12]
 8004b40:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004b44:	460b      	mov	r3, r1
 8004b46:	4313      	orrs	r3, r2
 8004b48:	d011      	beq.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b4e:	3328      	adds	r3, #40	@ 0x28
 8004b50:	2101      	movs	r1, #1
 8004b52:	4618      	mov	r0, r3
 8004b54:	f000 fbaa 	bl	80052ac <RCCEx_PLL3_Config>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004b5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d003      	beq.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b76:	2100      	movs	r1, #0
 8004b78:	6039      	str	r1, [r7, #0]
 8004b7a:	f003 0320 	and.w	r3, r3, #32
 8004b7e:	607b      	str	r3, [r7, #4]
 8004b80:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004b84:	460b      	mov	r3, r1
 8004b86:	4313      	orrs	r3, r2
 8004b88:	d011      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b8e:	3328      	adds	r3, #40	@ 0x28
 8004b90:	2102      	movs	r1, #2
 8004b92:	4618      	mov	r0, r3
 8004b94:	f000 fb8a 	bl	80052ac <RCCEx_PLL3_Config>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004b9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d003      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ba6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004baa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004bae:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d101      	bne.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	e000      	b.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bc8:	58024400 	.word	0x58024400

08004bcc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004bd0:	f7fe fd96 	bl	8003700 <HAL_RCC_GetHCLKFreq>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	4b06      	ldr	r3, [pc, #24]	@ (8004bf0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004bd8:	6a1b      	ldr	r3, [r3, #32]
 8004bda:	091b      	lsrs	r3, r3, #4
 8004bdc:	f003 0307 	and.w	r3, r3, #7
 8004be0:	4904      	ldr	r1, [pc, #16]	@ (8004bf4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004be2:	5ccb      	ldrb	r3, [r1, r3]
 8004be4:	f003 031f 	and.w	r3, r3, #31
 8004be8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	58024400 	.word	0x58024400
 8004bf4:	08008d08 	.word	0x08008d08

08004bf8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b089      	sub	sp, #36	@ 0x24
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004c00:	4ba1      	ldr	r3, [pc, #644]	@ (8004e88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c04:	f003 0303 	and.w	r3, r3, #3
 8004c08:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004c0a:	4b9f      	ldr	r3, [pc, #636]	@ (8004e88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c0e:	0b1b      	lsrs	r3, r3, #12
 8004c10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c14:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004c16:	4b9c      	ldr	r3, [pc, #624]	@ (8004e88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c1a:	091b      	lsrs	r3, r3, #4
 8004c1c:	f003 0301 	and.w	r3, r3, #1
 8004c20:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004c22:	4b99      	ldr	r3, [pc, #612]	@ (8004e88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c26:	08db      	lsrs	r3, r3, #3
 8004c28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c2c:	693a      	ldr	r2, [r7, #16]
 8004c2e:	fb02 f303 	mul.w	r3, r2, r3
 8004c32:	ee07 3a90 	vmov	s15, r3
 8004c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c3a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	f000 8111 	beq.w	8004e68 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	f000 8083 	beq.w	8004d54 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	f200 80a1 	bhi.w	8004d98 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d003      	beq.n	8004c64 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d056      	beq.n	8004d10 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004c62:	e099      	b.n	8004d98 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c64:	4b88      	ldr	r3, [pc, #544]	@ (8004e88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0320 	and.w	r3, r3, #32
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d02d      	beq.n	8004ccc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004c70:	4b85      	ldr	r3, [pc, #532]	@ (8004e88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	08db      	lsrs	r3, r3, #3
 8004c76:	f003 0303 	and.w	r3, r3, #3
 8004c7a:	4a84      	ldr	r2, [pc, #528]	@ (8004e8c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004c7c:	fa22 f303 	lsr.w	r3, r2, r3
 8004c80:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	ee07 3a90 	vmov	s15, r3
 8004c88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	ee07 3a90 	vmov	s15, r3
 8004c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c9a:	4b7b      	ldr	r3, [pc, #492]	@ (8004e88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ca2:	ee07 3a90 	vmov	s15, r3
 8004ca6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004caa:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cae:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004e90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004cb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cc6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004cca:	e087      	b.n	8004ddc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	ee07 3a90 	vmov	s15, r3
 8004cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cd6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004e94 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004cda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cde:	4b6a      	ldr	r3, [pc, #424]	@ (8004e88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ce0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ce2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ce6:	ee07 3a90 	vmov	s15, r3
 8004cea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cee:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cf2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004e90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004cf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cfe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d0e:	e065      	b.n	8004ddc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	ee07 3a90 	vmov	s15, r3
 8004d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d1a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004e98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004d1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d22:	4b59      	ldr	r3, [pc, #356]	@ (8004e88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d2a:	ee07 3a90 	vmov	s15, r3
 8004d2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d32:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d36:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004e90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004d3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d52:	e043      	b.n	8004ddc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	ee07 3a90 	vmov	s15, r3
 8004d5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d5e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004e9c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004d62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d66:	4b48      	ldr	r3, [pc, #288]	@ (8004e88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d6e:	ee07 3a90 	vmov	s15, r3
 8004d72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d76:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d7a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004e90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004d7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d96:	e021      	b.n	8004ddc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	ee07 3a90 	vmov	s15, r3
 8004d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004da2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004e98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004da6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004daa:	4b37      	ldr	r3, [pc, #220]	@ (8004e88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004db2:	ee07 3a90 	vmov	s15, r3
 8004db6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dba:	ed97 6a03 	vldr	s12, [r7, #12]
 8004dbe:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004e90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004dc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004dce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004dda:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004ddc:	4b2a      	ldr	r3, [pc, #168]	@ (8004e88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004de0:	0a5b      	lsrs	r3, r3, #9
 8004de2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004de6:	ee07 3a90 	vmov	s15, r3
 8004dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004df2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004df6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004dfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e02:	ee17 2a90 	vmov	r2, s15
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004e0a:	4b1f      	ldr	r3, [pc, #124]	@ (8004e88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e0e:	0c1b      	lsrs	r3, r3, #16
 8004e10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e14:	ee07 3a90 	vmov	s15, r3
 8004e18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e1c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e20:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e24:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e30:	ee17 2a90 	vmov	r2, s15
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004e38:	4b13      	ldr	r3, [pc, #76]	@ (8004e88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e3c:	0e1b      	lsrs	r3, r3, #24
 8004e3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e42:	ee07 3a90 	vmov	s15, r3
 8004e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e4a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e52:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e5e:	ee17 2a90 	vmov	r2, s15
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004e66:	e008      	b.n	8004e7a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	609a      	str	r2, [r3, #8]
}
 8004e7a:	bf00      	nop
 8004e7c:	3724      	adds	r7, #36	@ 0x24
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr
 8004e86:	bf00      	nop
 8004e88:	58024400 	.word	0x58024400
 8004e8c:	03d09000 	.word	0x03d09000
 8004e90:	46000000 	.word	0x46000000
 8004e94:	4c742400 	.word	0x4c742400
 8004e98:	4a742400 	.word	0x4a742400
 8004e9c:	4af42400 	.word	0x4af42400

08004ea0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b089      	sub	sp, #36	@ 0x24
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004ea8:	4ba1      	ldr	r3, [pc, #644]	@ (8005130 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eac:	f003 0303 	and.w	r3, r3, #3
 8004eb0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004eb2:	4b9f      	ldr	r3, [pc, #636]	@ (8005130 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004eb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eb6:	0d1b      	lsrs	r3, r3, #20
 8004eb8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ebc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004ebe:	4b9c      	ldr	r3, [pc, #624]	@ (8005130 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec2:	0a1b      	lsrs	r3, r3, #8
 8004ec4:	f003 0301 	and.w	r3, r3, #1
 8004ec8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004eca:	4b99      	ldr	r3, [pc, #612]	@ (8005130 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ece:	08db      	lsrs	r3, r3, #3
 8004ed0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ed4:	693a      	ldr	r2, [r7, #16]
 8004ed6:	fb02 f303 	mul.w	r3, r2, r3
 8004eda:	ee07 3a90 	vmov	s15, r3
 8004ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ee2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	f000 8111 	beq.w	8005110 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	2b02      	cmp	r3, #2
 8004ef2:	f000 8083 	beq.w	8004ffc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	f200 80a1 	bhi.w	8005040 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d003      	beq.n	8004f0c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004f04:	69bb      	ldr	r3, [r7, #24]
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d056      	beq.n	8004fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004f0a:	e099      	b.n	8005040 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f0c:	4b88      	ldr	r3, [pc, #544]	@ (8005130 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 0320 	and.w	r3, r3, #32
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d02d      	beq.n	8004f74 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004f18:	4b85      	ldr	r3, [pc, #532]	@ (8005130 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	08db      	lsrs	r3, r3, #3
 8004f1e:	f003 0303 	and.w	r3, r3, #3
 8004f22:	4a84      	ldr	r2, [pc, #528]	@ (8005134 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004f24:	fa22 f303 	lsr.w	r3, r2, r3
 8004f28:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	ee07 3a90 	vmov	s15, r3
 8004f30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	ee07 3a90 	vmov	s15, r3
 8004f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f42:	4b7b      	ldr	r3, [pc, #492]	@ (8005130 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f4a:	ee07 3a90 	vmov	s15, r3
 8004f4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f52:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f56:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005138 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f6e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004f72:	e087      	b.n	8005084 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	ee07 3a90 	vmov	s15, r3
 8004f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f7e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800513c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004f82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f86:	4b6a      	ldr	r3, [pc, #424]	@ (8005130 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f8e:	ee07 3a90 	vmov	s15, r3
 8004f92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f96:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f9a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005138 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fa6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004faa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004fb6:	e065      	b.n	8005084 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	ee07 3a90 	vmov	s15, r3
 8004fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fc2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005140 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004fc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fca:	4b59      	ldr	r3, [pc, #356]	@ (8005130 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fd2:	ee07 3a90 	vmov	s15, r3
 8004fd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fda:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fde:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005138 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004fe2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004fee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ff6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ffa:	e043      	b.n	8005084 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	ee07 3a90 	vmov	s15, r3
 8005002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005006:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005144 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800500a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800500e:	4b48      	ldr	r3, [pc, #288]	@ (8005130 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005012:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005016:	ee07 3a90 	vmov	s15, r3
 800501a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800501e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005022:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005138 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005026:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800502a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800502e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005032:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005036:	ee67 7a27 	vmul.f32	s15, s14, s15
 800503a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800503e:	e021      	b.n	8005084 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	ee07 3a90 	vmov	s15, r3
 8005046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800504a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005140 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800504e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005052:	4b37      	ldr	r3, [pc, #220]	@ (8005130 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005056:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800505a:	ee07 3a90 	vmov	s15, r3
 800505e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005062:	ed97 6a03 	vldr	s12, [r7, #12]
 8005066:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005138 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800506a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800506e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005072:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005076:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800507a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800507e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005082:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005084:	4b2a      	ldr	r3, [pc, #168]	@ (8005130 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005088:	0a5b      	lsrs	r3, r3, #9
 800508a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800508e:	ee07 3a90 	vmov	s15, r3
 8005092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005096:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800509a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800509e:	edd7 6a07 	vldr	s13, [r7, #28]
 80050a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050aa:	ee17 2a90 	vmov	r2, s15
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80050b2:	4b1f      	ldr	r3, [pc, #124]	@ (8005130 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050b6:	0c1b      	lsrs	r3, r3, #16
 80050b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050bc:	ee07 3a90 	vmov	s15, r3
 80050c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050c4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80050c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80050d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050d8:	ee17 2a90 	vmov	r2, s15
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80050e0:	4b13      	ldr	r3, [pc, #76]	@ (8005130 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050e4:	0e1b      	lsrs	r3, r3, #24
 80050e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050ea:	ee07 3a90 	vmov	s15, r3
 80050ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80050f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80050fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005102:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005106:	ee17 2a90 	vmov	r2, s15
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800510e:	e008      	b.n	8005122 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	609a      	str	r2, [r3, #8]
}
 8005122:	bf00      	nop
 8005124:	3724      	adds	r7, #36	@ 0x24
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop
 8005130:	58024400 	.word	0x58024400
 8005134:	03d09000 	.word	0x03d09000
 8005138:	46000000 	.word	0x46000000
 800513c:	4c742400 	.word	0x4c742400
 8005140:	4a742400 	.word	0x4a742400
 8005144:	4af42400 	.word	0x4af42400

08005148 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005152:	2300      	movs	r3, #0
 8005154:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005156:	4b53      	ldr	r3, [pc, #332]	@ (80052a4 <RCCEx_PLL2_Config+0x15c>)
 8005158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800515a:	f003 0303 	and.w	r3, r3, #3
 800515e:	2b03      	cmp	r3, #3
 8005160:	d101      	bne.n	8005166 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e099      	b.n	800529a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005166:	4b4f      	ldr	r3, [pc, #316]	@ (80052a4 <RCCEx_PLL2_Config+0x15c>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a4e      	ldr	r2, [pc, #312]	@ (80052a4 <RCCEx_PLL2_Config+0x15c>)
 800516c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005170:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005172:	f7fc f9d1 	bl	8001518 <HAL_GetTick>
 8005176:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005178:	e008      	b.n	800518c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800517a:	f7fc f9cd 	bl	8001518 <HAL_GetTick>
 800517e:	4602      	mov	r2, r0
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	2b02      	cmp	r3, #2
 8005186:	d901      	bls.n	800518c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	e086      	b.n	800529a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800518c:	4b45      	ldr	r3, [pc, #276]	@ (80052a4 <RCCEx_PLL2_Config+0x15c>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005194:	2b00      	cmp	r3, #0
 8005196:	d1f0      	bne.n	800517a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005198:	4b42      	ldr	r3, [pc, #264]	@ (80052a4 <RCCEx_PLL2_Config+0x15c>)
 800519a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800519c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	031b      	lsls	r3, r3, #12
 80051a6:	493f      	ldr	r1, [pc, #252]	@ (80052a4 <RCCEx_PLL2_Config+0x15c>)
 80051a8:	4313      	orrs	r3, r2
 80051aa:	628b      	str	r3, [r1, #40]	@ 0x28
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	3b01      	subs	r3, #1
 80051b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	3b01      	subs	r3, #1
 80051bc:	025b      	lsls	r3, r3, #9
 80051be:	b29b      	uxth	r3, r3
 80051c0:	431a      	orrs	r2, r3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	3b01      	subs	r3, #1
 80051c8:	041b      	lsls	r3, r3, #16
 80051ca:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80051ce:	431a      	orrs	r2, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	691b      	ldr	r3, [r3, #16]
 80051d4:	3b01      	subs	r3, #1
 80051d6:	061b      	lsls	r3, r3, #24
 80051d8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80051dc:	4931      	ldr	r1, [pc, #196]	@ (80052a4 <RCCEx_PLL2_Config+0x15c>)
 80051de:	4313      	orrs	r3, r2
 80051e0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80051e2:	4b30      	ldr	r3, [pc, #192]	@ (80052a4 <RCCEx_PLL2_Config+0x15c>)
 80051e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051e6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	695b      	ldr	r3, [r3, #20]
 80051ee:	492d      	ldr	r1, [pc, #180]	@ (80052a4 <RCCEx_PLL2_Config+0x15c>)
 80051f0:	4313      	orrs	r3, r2
 80051f2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80051f4:	4b2b      	ldr	r3, [pc, #172]	@ (80052a4 <RCCEx_PLL2_Config+0x15c>)
 80051f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051f8:	f023 0220 	bic.w	r2, r3, #32
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	699b      	ldr	r3, [r3, #24]
 8005200:	4928      	ldr	r1, [pc, #160]	@ (80052a4 <RCCEx_PLL2_Config+0x15c>)
 8005202:	4313      	orrs	r3, r2
 8005204:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005206:	4b27      	ldr	r3, [pc, #156]	@ (80052a4 <RCCEx_PLL2_Config+0x15c>)
 8005208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800520a:	4a26      	ldr	r2, [pc, #152]	@ (80052a4 <RCCEx_PLL2_Config+0x15c>)
 800520c:	f023 0310 	bic.w	r3, r3, #16
 8005210:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005212:	4b24      	ldr	r3, [pc, #144]	@ (80052a4 <RCCEx_PLL2_Config+0x15c>)
 8005214:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005216:	4b24      	ldr	r3, [pc, #144]	@ (80052a8 <RCCEx_PLL2_Config+0x160>)
 8005218:	4013      	ands	r3, r2
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	69d2      	ldr	r2, [r2, #28]
 800521e:	00d2      	lsls	r2, r2, #3
 8005220:	4920      	ldr	r1, [pc, #128]	@ (80052a4 <RCCEx_PLL2_Config+0x15c>)
 8005222:	4313      	orrs	r3, r2
 8005224:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005226:	4b1f      	ldr	r3, [pc, #124]	@ (80052a4 <RCCEx_PLL2_Config+0x15c>)
 8005228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800522a:	4a1e      	ldr	r2, [pc, #120]	@ (80052a4 <RCCEx_PLL2_Config+0x15c>)
 800522c:	f043 0310 	orr.w	r3, r3, #16
 8005230:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d106      	bne.n	8005246 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005238:	4b1a      	ldr	r3, [pc, #104]	@ (80052a4 <RCCEx_PLL2_Config+0x15c>)
 800523a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800523c:	4a19      	ldr	r2, [pc, #100]	@ (80052a4 <RCCEx_PLL2_Config+0x15c>)
 800523e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005242:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005244:	e00f      	b.n	8005266 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	2b01      	cmp	r3, #1
 800524a:	d106      	bne.n	800525a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800524c:	4b15      	ldr	r3, [pc, #84]	@ (80052a4 <RCCEx_PLL2_Config+0x15c>)
 800524e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005250:	4a14      	ldr	r2, [pc, #80]	@ (80052a4 <RCCEx_PLL2_Config+0x15c>)
 8005252:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005256:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005258:	e005      	b.n	8005266 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800525a:	4b12      	ldr	r3, [pc, #72]	@ (80052a4 <RCCEx_PLL2_Config+0x15c>)
 800525c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800525e:	4a11      	ldr	r2, [pc, #68]	@ (80052a4 <RCCEx_PLL2_Config+0x15c>)
 8005260:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005264:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005266:	4b0f      	ldr	r3, [pc, #60]	@ (80052a4 <RCCEx_PLL2_Config+0x15c>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a0e      	ldr	r2, [pc, #56]	@ (80052a4 <RCCEx_PLL2_Config+0x15c>)
 800526c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005270:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005272:	f7fc f951 	bl	8001518 <HAL_GetTick>
 8005276:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005278:	e008      	b.n	800528c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800527a:	f7fc f94d 	bl	8001518 <HAL_GetTick>
 800527e:	4602      	mov	r2, r0
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	1ad3      	subs	r3, r2, r3
 8005284:	2b02      	cmp	r3, #2
 8005286:	d901      	bls.n	800528c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005288:	2303      	movs	r3, #3
 800528a:	e006      	b.n	800529a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800528c:	4b05      	ldr	r3, [pc, #20]	@ (80052a4 <RCCEx_PLL2_Config+0x15c>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005294:	2b00      	cmp	r3, #0
 8005296:	d0f0      	beq.n	800527a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005298:	7bfb      	ldrb	r3, [r7, #15]
}
 800529a:	4618      	mov	r0, r3
 800529c:	3710      	adds	r7, #16
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	58024400 	.word	0x58024400
 80052a8:	ffff0007 	.word	0xffff0007

080052ac <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052b6:	2300      	movs	r3, #0
 80052b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80052ba:	4b53      	ldr	r3, [pc, #332]	@ (8005408 <RCCEx_PLL3_Config+0x15c>)
 80052bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052be:	f003 0303 	and.w	r3, r3, #3
 80052c2:	2b03      	cmp	r3, #3
 80052c4:	d101      	bne.n	80052ca <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e099      	b.n	80053fe <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80052ca:	4b4f      	ldr	r3, [pc, #316]	@ (8005408 <RCCEx_PLL3_Config+0x15c>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a4e      	ldr	r2, [pc, #312]	@ (8005408 <RCCEx_PLL3_Config+0x15c>)
 80052d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052d6:	f7fc f91f 	bl	8001518 <HAL_GetTick>
 80052da:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80052dc:	e008      	b.n	80052f0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80052de:	f7fc f91b 	bl	8001518 <HAL_GetTick>
 80052e2:	4602      	mov	r2, r0
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	1ad3      	subs	r3, r2, r3
 80052e8:	2b02      	cmp	r3, #2
 80052ea:	d901      	bls.n	80052f0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80052ec:	2303      	movs	r3, #3
 80052ee:	e086      	b.n	80053fe <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80052f0:	4b45      	ldr	r3, [pc, #276]	@ (8005408 <RCCEx_PLL3_Config+0x15c>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d1f0      	bne.n	80052de <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80052fc:	4b42      	ldr	r3, [pc, #264]	@ (8005408 <RCCEx_PLL3_Config+0x15c>)
 80052fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005300:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	051b      	lsls	r3, r3, #20
 800530a:	493f      	ldr	r1, [pc, #252]	@ (8005408 <RCCEx_PLL3_Config+0x15c>)
 800530c:	4313      	orrs	r3, r2
 800530e:	628b      	str	r3, [r1, #40]	@ 0x28
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	3b01      	subs	r3, #1
 8005316:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	3b01      	subs	r3, #1
 8005320:	025b      	lsls	r3, r3, #9
 8005322:	b29b      	uxth	r3, r3
 8005324:	431a      	orrs	r2, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	3b01      	subs	r3, #1
 800532c:	041b      	lsls	r3, r3, #16
 800532e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005332:	431a      	orrs	r2, r3
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	691b      	ldr	r3, [r3, #16]
 8005338:	3b01      	subs	r3, #1
 800533a:	061b      	lsls	r3, r3, #24
 800533c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005340:	4931      	ldr	r1, [pc, #196]	@ (8005408 <RCCEx_PLL3_Config+0x15c>)
 8005342:	4313      	orrs	r3, r2
 8005344:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005346:	4b30      	ldr	r3, [pc, #192]	@ (8005408 <RCCEx_PLL3_Config+0x15c>)
 8005348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800534a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	695b      	ldr	r3, [r3, #20]
 8005352:	492d      	ldr	r1, [pc, #180]	@ (8005408 <RCCEx_PLL3_Config+0x15c>)
 8005354:	4313      	orrs	r3, r2
 8005356:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005358:	4b2b      	ldr	r3, [pc, #172]	@ (8005408 <RCCEx_PLL3_Config+0x15c>)
 800535a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800535c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	699b      	ldr	r3, [r3, #24]
 8005364:	4928      	ldr	r1, [pc, #160]	@ (8005408 <RCCEx_PLL3_Config+0x15c>)
 8005366:	4313      	orrs	r3, r2
 8005368:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800536a:	4b27      	ldr	r3, [pc, #156]	@ (8005408 <RCCEx_PLL3_Config+0x15c>)
 800536c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800536e:	4a26      	ldr	r2, [pc, #152]	@ (8005408 <RCCEx_PLL3_Config+0x15c>)
 8005370:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005374:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005376:	4b24      	ldr	r3, [pc, #144]	@ (8005408 <RCCEx_PLL3_Config+0x15c>)
 8005378:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800537a:	4b24      	ldr	r3, [pc, #144]	@ (800540c <RCCEx_PLL3_Config+0x160>)
 800537c:	4013      	ands	r3, r2
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	69d2      	ldr	r2, [r2, #28]
 8005382:	00d2      	lsls	r2, r2, #3
 8005384:	4920      	ldr	r1, [pc, #128]	@ (8005408 <RCCEx_PLL3_Config+0x15c>)
 8005386:	4313      	orrs	r3, r2
 8005388:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800538a:	4b1f      	ldr	r3, [pc, #124]	@ (8005408 <RCCEx_PLL3_Config+0x15c>)
 800538c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800538e:	4a1e      	ldr	r2, [pc, #120]	@ (8005408 <RCCEx_PLL3_Config+0x15c>)
 8005390:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005394:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d106      	bne.n	80053aa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800539c:	4b1a      	ldr	r3, [pc, #104]	@ (8005408 <RCCEx_PLL3_Config+0x15c>)
 800539e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053a0:	4a19      	ldr	r2, [pc, #100]	@ (8005408 <RCCEx_PLL3_Config+0x15c>)
 80053a2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80053a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80053a8:	e00f      	b.n	80053ca <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d106      	bne.n	80053be <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80053b0:	4b15      	ldr	r3, [pc, #84]	@ (8005408 <RCCEx_PLL3_Config+0x15c>)
 80053b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053b4:	4a14      	ldr	r2, [pc, #80]	@ (8005408 <RCCEx_PLL3_Config+0x15c>)
 80053b6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80053ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80053bc:	e005      	b.n	80053ca <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80053be:	4b12      	ldr	r3, [pc, #72]	@ (8005408 <RCCEx_PLL3_Config+0x15c>)
 80053c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053c2:	4a11      	ldr	r2, [pc, #68]	@ (8005408 <RCCEx_PLL3_Config+0x15c>)
 80053c4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80053c8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80053ca:	4b0f      	ldr	r3, [pc, #60]	@ (8005408 <RCCEx_PLL3_Config+0x15c>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a0e      	ldr	r2, [pc, #56]	@ (8005408 <RCCEx_PLL3_Config+0x15c>)
 80053d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053d6:	f7fc f89f 	bl	8001518 <HAL_GetTick>
 80053da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80053dc:	e008      	b.n	80053f0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80053de:	f7fc f89b 	bl	8001518 <HAL_GetTick>
 80053e2:	4602      	mov	r2, r0
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	d901      	bls.n	80053f0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80053ec:	2303      	movs	r3, #3
 80053ee:	e006      	b.n	80053fe <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80053f0:	4b05      	ldr	r3, [pc, #20]	@ (8005408 <RCCEx_PLL3_Config+0x15c>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d0f0      	beq.n	80053de <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80053fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3710      	adds	r7, #16
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	58024400 	.word	0x58024400
 800540c:	ffff0007 	.word	0xffff0007

08005410 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b082      	sub	sp, #8
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d101      	bne.n	8005422 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e049      	b.n	80054b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005428:	b2db      	uxtb	r3, r3
 800542a:	2b00      	cmp	r3, #0
 800542c:	d106      	bne.n	800543c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f7fb fd7e 	bl	8000f38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2202      	movs	r2, #2
 8005440:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	3304      	adds	r3, #4
 800544c:	4619      	mov	r1, r3
 800544e:	4610      	mov	r0, r2
 8005450:	f000 fc50 	bl	8005cf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3708      	adds	r7, #8
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}

080054be <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80054be:	b580      	push	{r7, lr}
 80054c0:	b082      	sub	sp, #8
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d101      	bne.n	80054d0 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e049      	b.n	8005564 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d106      	bne.n	80054ea <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f000 f841 	bl	800556c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2202      	movs	r2, #2
 80054ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	3304      	adds	r3, #4
 80054fa:	4619      	mov	r1, r3
 80054fc:	4610      	mov	r0, r2
 80054fe:	f000 fbf9 	bl	8005cf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2201      	movs	r2, #1
 8005506:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2201      	movs	r2, #1
 800550e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2201      	movs	r2, #1
 8005516:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2201      	movs	r2, #1
 800551e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2201      	movs	r2, #1
 8005526:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2201      	movs	r2, #1
 800552e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2201      	movs	r2, #1
 8005536:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2201      	movs	r2, #1
 800553e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2201      	movs	r2, #1
 8005546:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2201      	movs	r2, #1
 800554e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2201      	movs	r2, #1
 8005556:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2201      	movs	r2, #1
 800555e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005562:	2300      	movs	r3, #0
}
 8005564:	4618      	mov	r0, r3
 8005566:	3708      	adds	r7, #8
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}

0800556c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800556c:	b480      	push	{r7}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005574:	bf00      	nop
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d109      	bne.n	80055a4 <HAL_TIM_OC_Start+0x24>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005596:	b2db      	uxtb	r3, r3
 8005598:	2b01      	cmp	r3, #1
 800559a:	bf14      	ite	ne
 800559c:	2301      	movne	r3, #1
 800559e:	2300      	moveq	r3, #0
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	e03c      	b.n	800561e <HAL_TIM_OC_Start+0x9e>
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	2b04      	cmp	r3, #4
 80055a8:	d109      	bne.n	80055be <HAL_TIM_OC_Start+0x3e>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	bf14      	ite	ne
 80055b6:	2301      	movne	r3, #1
 80055b8:	2300      	moveq	r3, #0
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	e02f      	b.n	800561e <HAL_TIM_OC_Start+0x9e>
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	2b08      	cmp	r3, #8
 80055c2:	d109      	bne.n	80055d8 <HAL_TIM_OC_Start+0x58>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	bf14      	ite	ne
 80055d0:	2301      	movne	r3, #1
 80055d2:	2300      	moveq	r3, #0
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	e022      	b.n	800561e <HAL_TIM_OC_Start+0x9e>
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	2b0c      	cmp	r3, #12
 80055dc:	d109      	bne.n	80055f2 <HAL_TIM_OC_Start+0x72>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	bf14      	ite	ne
 80055ea:	2301      	movne	r3, #1
 80055ec:	2300      	moveq	r3, #0
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	e015      	b.n	800561e <HAL_TIM_OC_Start+0x9e>
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	2b10      	cmp	r3, #16
 80055f6:	d109      	bne.n	800560c <HAL_TIM_OC_Start+0x8c>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	2b01      	cmp	r3, #1
 8005602:	bf14      	ite	ne
 8005604:	2301      	movne	r3, #1
 8005606:	2300      	moveq	r3, #0
 8005608:	b2db      	uxtb	r3, r3
 800560a:	e008      	b.n	800561e <HAL_TIM_OC_Start+0x9e>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005612:	b2db      	uxtb	r3, r3
 8005614:	2b01      	cmp	r3, #1
 8005616:	bf14      	ite	ne
 8005618:	2301      	movne	r3, #1
 800561a:	2300      	moveq	r3, #0
 800561c:	b2db      	uxtb	r3, r3
 800561e:	2b00      	cmp	r3, #0
 8005620:	d001      	beq.n	8005626 <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e0a1      	b.n	800576a <HAL_TIM_OC_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d104      	bne.n	8005636 <HAL_TIM_OC_Start+0xb6>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2202      	movs	r2, #2
 8005630:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005634:	e023      	b.n	800567e <HAL_TIM_OC_Start+0xfe>
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	2b04      	cmp	r3, #4
 800563a:	d104      	bne.n	8005646 <HAL_TIM_OC_Start+0xc6>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2202      	movs	r2, #2
 8005640:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005644:	e01b      	b.n	800567e <HAL_TIM_OC_Start+0xfe>
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	2b08      	cmp	r3, #8
 800564a:	d104      	bne.n	8005656 <HAL_TIM_OC_Start+0xd6>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2202      	movs	r2, #2
 8005650:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005654:	e013      	b.n	800567e <HAL_TIM_OC_Start+0xfe>
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	2b0c      	cmp	r3, #12
 800565a:	d104      	bne.n	8005666 <HAL_TIM_OC_Start+0xe6>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2202      	movs	r2, #2
 8005660:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005664:	e00b      	b.n	800567e <HAL_TIM_OC_Start+0xfe>
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	2b10      	cmp	r3, #16
 800566a:	d104      	bne.n	8005676 <HAL_TIM_OC_Start+0xf6>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2202      	movs	r2, #2
 8005670:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005674:	e003      	b.n	800567e <HAL_TIM_OC_Start+0xfe>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2202      	movs	r2, #2
 800567a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	2201      	movs	r2, #1
 8005684:	6839      	ldr	r1, [r7, #0]
 8005686:	4618      	mov	r0, r3
 8005688:	f000 ff48 	bl	800651c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a38      	ldr	r2, [pc, #224]	@ (8005774 <HAL_TIM_OC_Start+0x1f4>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d013      	beq.n	80056be <HAL_TIM_OC_Start+0x13e>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a37      	ldr	r2, [pc, #220]	@ (8005778 <HAL_TIM_OC_Start+0x1f8>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d00e      	beq.n	80056be <HAL_TIM_OC_Start+0x13e>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a35      	ldr	r2, [pc, #212]	@ (800577c <HAL_TIM_OC_Start+0x1fc>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d009      	beq.n	80056be <HAL_TIM_OC_Start+0x13e>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a34      	ldr	r2, [pc, #208]	@ (8005780 <HAL_TIM_OC_Start+0x200>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d004      	beq.n	80056be <HAL_TIM_OC_Start+0x13e>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a32      	ldr	r2, [pc, #200]	@ (8005784 <HAL_TIM_OC_Start+0x204>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d101      	bne.n	80056c2 <HAL_TIM_OC_Start+0x142>
 80056be:	2301      	movs	r3, #1
 80056c0:	e000      	b.n	80056c4 <HAL_TIM_OC_Start+0x144>
 80056c2:	2300      	movs	r3, #0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d007      	beq.n	80056d8 <HAL_TIM_OC_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80056d6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a25      	ldr	r2, [pc, #148]	@ (8005774 <HAL_TIM_OC_Start+0x1f4>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d022      	beq.n	8005728 <HAL_TIM_OC_Start+0x1a8>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056ea:	d01d      	beq.n	8005728 <HAL_TIM_OC_Start+0x1a8>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a25      	ldr	r2, [pc, #148]	@ (8005788 <HAL_TIM_OC_Start+0x208>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d018      	beq.n	8005728 <HAL_TIM_OC_Start+0x1a8>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a24      	ldr	r2, [pc, #144]	@ (800578c <HAL_TIM_OC_Start+0x20c>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d013      	beq.n	8005728 <HAL_TIM_OC_Start+0x1a8>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a22      	ldr	r2, [pc, #136]	@ (8005790 <HAL_TIM_OC_Start+0x210>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d00e      	beq.n	8005728 <HAL_TIM_OC_Start+0x1a8>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a1a      	ldr	r2, [pc, #104]	@ (8005778 <HAL_TIM_OC_Start+0x1f8>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d009      	beq.n	8005728 <HAL_TIM_OC_Start+0x1a8>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a1e      	ldr	r2, [pc, #120]	@ (8005794 <HAL_TIM_OC_Start+0x214>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d004      	beq.n	8005728 <HAL_TIM_OC_Start+0x1a8>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a16      	ldr	r2, [pc, #88]	@ (800577c <HAL_TIM_OC_Start+0x1fc>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d115      	bne.n	8005754 <HAL_TIM_OC_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	689a      	ldr	r2, [r3, #8]
 800572e:	4b1a      	ldr	r3, [pc, #104]	@ (8005798 <HAL_TIM_OC_Start+0x218>)
 8005730:	4013      	ands	r3, r2
 8005732:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2b06      	cmp	r3, #6
 8005738:	d015      	beq.n	8005766 <HAL_TIM_OC_Start+0x1e6>
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005740:	d011      	beq.n	8005766 <HAL_TIM_OC_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f042 0201 	orr.w	r2, r2, #1
 8005750:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005752:	e008      	b.n	8005766 <HAL_TIM_OC_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f042 0201 	orr.w	r2, r2, #1
 8005762:	601a      	str	r2, [r3, #0]
 8005764:	e000      	b.n	8005768 <HAL_TIM_OC_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005766:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	3710      	adds	r7, #16
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	40010000 	.word	0x40010000
 8005778:	40010400 	.word	0x40010400
 800577c:	40014000 	.word	0x40014000
 8005780:	40014400 	.word	0x40014400
 8005784:	40014800 	.word	0x40014800
 8005788:	40000400 	.word	0x40000400
 800578c:	40000800 	.word	0x40000800
 8005790:	40000c00 	.word	0x40000c00
 8005794:	40001800 	.word	0x40001800
 8005798:	00010007 	.word	0x00010007

0800579c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b084      	sub	sp, #16
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	68db      	ldr	r3, [r3, #12]
 80057aa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	f003 0302 	and.w	r3, r3, #2
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d020      	beq.n	8005800 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f003 0302 	and.w	r3, r3, #2
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d01b      	beq.n	8005800 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f06f 0202 	mvn.w	r2, #2
 80057d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2201      	movs	r2, #1
 80057d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	699b      	ldr	r3, [r3, #24]
 80057de:	f003 0303 	and.w	r3, r3, #3
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d003      	beq.n	80057ee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 fa66 	bl	8005cb8 <HAL_TIM_IC_CaptureCallback>
 80057ec:	e005      	b.n	80057fa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 fa58 	bl	8005ca4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f000 fa69 	bl	8005ccc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	f003 0304 	and.w	r3, r3, #4
 8005806:	2b00      	cmp	r3, #0
 8005808:	d020      	beq.n	800584c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f003 0304 	and.w	r3, r3, #4
 8005810:	2b00      	cmp	r3, #0
 8005812:	d01b      	beq.n	800584c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f06f 0204 	mvn.w	r2, #4
 800581c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2202      	movs	r2, #2
 8005822:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	699b      	ldr	r3, [r3, #24]
 800582a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800582e:	2b00      	cmp	r3, #0
 8005830:	d003      	beq.n	800583a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f000 fa40 	bl	8005cb8 <HAL_TIM_IC_CaptureCallback>
 8005838:	e005      	b.n	8005846 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f000 fa32 	bl	8005ca4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f000 fa43 	bl	8005ccc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	f003 0308 	and.w	r3, r3, #8
 8005852:	2b00      	cmp	r3, #0
 8005854:	d020      	beq.n	8005898 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	f003 0308 	and.w	r3, r3, #8
 800585c:	2b00      	cmp	r3, #0
 800585e:	d01b      	beq.n	8005898 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f06f 0208 	mvn.w	r2, #8
 8005868:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2204      	movs	r2, #4
 800586e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	69db      	ldr	r3, [r3, #28]
 8005876:	f003 0303 	and.w	r3, r3, #3
 800587a:	2b00      	cmp	r3, #0
 800587c:	d003      	beq.n	8005886 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f000 fa1a 	bl	8005cb8 <HAL_TIM_IC_CaptureCallback>
 8005884:	e005      	b.n	8005892 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 fa0c 	bl	8005ca4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f000 fa1d 	bl	8005ccc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	f003 0310 	and.w	r3, r3, #16
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d020      	beq.n	80058e4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f003 0310 	and.w	r3, r3, #16
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d01b      	beq.n	80058e4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f06f 0210 	mvn.w	r2, #16
 80058b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2208      	movs	r2, #8
 80058ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	69db      	ldr	r3, [r3, #28]
 80058c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d003      	beq.n	80058d2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f000 f9f4 	bl	8005cb8 <HAL_TIM_IC_CaptureCallback>
 80058d0:	e005      	b.n	80058de <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 f9e6 	bl	8005ca4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 f9f7 	bl	8005ccc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	f003 0301 	and.w	r3, r3, #1
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d00c      	beq.n	8005908 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	f003 0301 	and.w	r3, r3, #1
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d007      	beq.n	8005908 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f06f 0201 	mvn.w	r2, #1
 8005900:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f000 f9c4 	bl	8005c90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800590e:	2b00      	cmp	r3, #0
 8005910:	d104      	bne.n	800591c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005918:	2b00      	cmp	r3, #0
 800591a:	d00c      	beq.n	8005936 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005922:	2b00      	cmp	r3, #0
 8005924:	d007      	beq.n	8005936 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800592e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f000 ff2f 	bl	8006794 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800593c:	2b00      	cmp	r3, #0
 800593e:	d00c      	beq.n	800595a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005946:	2b00      	cmp	r3, #0
 8005948:	d007      	beq.n	800595a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005952:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f000 ff27 	bl	80067a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005960:	2b00      	cmp	r3, #0
 8005962:	d00c      	beq.n	800597e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800596a:	2b00      	cmp	r3, #0
 800596c:	d007      	beq.n	800597e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005976:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f000 f9b1 	bl	8005ce0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	f003 0320 	and.w	r3, r3, #32
 8005984:	2b00      	cmp	r3, #0
 8005986:	d00c      	beq.n	80059a2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f003 0320 	and.w	r3, r3, #32
 800598e:	2b00      	cmp	r3, #0
 8005990:	d007      	beq.n	80059a2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f06f 0220 	mvn.w	r2, #32
 800599a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f000 feef 	bl	8006780 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80059a2:	bf00      	nop
 80059a4:	3710      	adds	r7, #16
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
	...

080059ac <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b086      	sub	sp, #24
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	60b9      	str	r1, [r7, #8]
 80059b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059b8:	2300      	movs	r3, #0
 80059ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d101      	bne.n	80059ca <HAL_TIM_OC_ConfigChannel+0x1e>
 80059c6:	2302      	movs	r3, #2
 80059c8:	e066      	b.n	8005a98 <HAL_TIM_OC_ConfigChannel+0xec>
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2201      	movs	r2, #1
 80059ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2b14      	cmp	r3, #20
 80059d6:	d857      	bhi.n	8005a88 <HAL_TIM_OC_ConfigChannel+0xdc>
 80059d8:	a201      	add	r2, pc, #4	@ (adr r2, 80059e0 <HAL_TIM_OC_ConfigChannel+0x34>)
 80059da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059de:	bf00      	nop
 80059e0:	08005a35 	.word	0x08005a35
 80059e4:	08005a89 	.word	0x08005a89
 80059e8:	08005a89 	.word	0x08005a89
 80059ec:	08005a89 	.word	0x08005a89
 80059f0:	08005a43 	.word	0x08005a43
 80059f4:	08005a89 	.word	0x08005a89
 80059f8:	08005a89 	.word	0x08005a89
 80059fc:	08005a89 	.word	0x08005a89
 8005a00:	08005a51 	.word	0x08005a51
 8005a04:	08005a89 	.word	0x08005a89
 8005a08:	08005a89 	.word	0x08005a89
 8005a0c:	08005a89 	.word	0x08005a89
 8005a10:	08005a5f 	.word	0x08005a5f
 8005a14:	08005a89 	.word	0x08005a89
 8005a18:	08005a89 	.word	0x08005a89
 8005a1c:	08005a89 	.word	0x08005a89
 8005a20:	08005a6d 	.word	0x08005a6d
 8005a24:	08005a89 	.word	0x08005a89
 8005a28:	08005a89 	.word	0x08005a89
 8005a2c:	08005a89 	.word	0x08005a89
 8005a30:	08005a7b 	.word	0x08005a7b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	68b9      	ldr	r1, [r7, #8]
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f000 f9fa 	bl	8005e34 <TIM_OC1_SetConfig>
      break;
 8005a40:	e025      	b.n	8005a8e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	68b9      	ldr	r1, [r7, #8]
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f000 fa83 	bl	8005f54 <TIM_OC2_SetConfig>
      break;
 8005a4e:	e01e      	b.n	8005a8e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	68b9      	ldr	r1, [r7, #8]
 8005a56:	4618      	mov	r0, r3
 8005a58:	f000 fb06 	bl	8006068 <TIM_OC3_SetConfig>
      break;
 8005a5c:	e017      	b.n	8005a8e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	68b9      	ldr	r1, [r7, #8]
 8005a64:	4618      	mov	r0, r3
 8005a66:	f000 fb87 	bl	8006178 <TIM_OC4_SetConfig>
      break;
 8005a6a:	e010      	b.n	8005a8e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	68b9      	ldr	r1, [r7, #8]
 8005a72:	4618      	mov	r0, r3
 8005a74:	f000 fbea 	bl	800624c <TIM_OC5_SetConfig>
      break;
 8005a78:	e009      	b.n	8005a8e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	68b9      	ldr	r1, [r7, #8]
 8005a80:	4618      	mov	r0, r3
 8005a82:	f000 fc47 	bl	8006314 <TIM_OC6_SetConfig>
      break;
 8005a86:	e002      	b.n	8005a8e <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	75fb      	strb	r3, [r7, #23]
      break;
 8005a8c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2200      	movs	r2, #0
 8005a92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005a96:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3718      	adds	r7, #24
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d101      	bne.n	8005abc <HAL_TIM_ConfigClockSource+0x1c>
 8005ab8:	2302      	movs	r3, #2
 8005aba:	e0dc      	b.n	8005c76 <HAL_TIM_ConfigClockSource+0x1d6>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2202      	movs	r2, #2
 8005ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ad4:	68ba      	ldr	r2, [r7, #8]
 8005ad6:	4b6a      	ldr	r3, [pc, #424]	@ (8005c80 <HAL_TIM_ConfigClockSource+0x1e0>)
 8005ad8:	4013      	ands	r3, r2
 8005ada:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005ae2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68ba      	ldr	r2, [r7, #8]
 8005aea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a64      	ldr	r2, [pc, #400]	@ (8005c84 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	f000 80a9 	beq.w	8005c4a <HAL_TIM_ConfigClockSource+0x1aa>
 8005af8:	4a62      	ldr	r2, [pc, #392]	@ (8005c84 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	f200 80ae 	bhi.w	8005c5c <HAL_TIM_ConfigClockSource+0x1bc>
 8005b00:	4a61      	ldr	r2, [pc, #388]	@ (8005c88 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	f000 80a1 	beq.w	8005c4a <HAL_TIM_ConfigClockSource+0x1aa>
 8005b08:	4a5f      	ldr	r2, [pc, #380]	@ (8005c88 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	f200 80a6 	bhi.w	8005c5c <HAL_TIM_ConfigClockSource+0x1bc>
 8005b10:	4a5e      	ldr	r2, [pc, #376]	@ (8005c8c <HAL_TIM_ConfigClockSource+0x1ec>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	f000 8099 	beq.w	8005c4a <HAL_TIM_ConfigClockSource+0x1aa>
 8005b18:	4a5c      	ldr	r2, [pc, #368]	@ (8005c8c <HAL_TIM_ConfigClockSource+0x1ec>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	f200 809e 	bhi.w	8005c5c <HAL_TIM_ConfigClockSource+0x1bc>
 8005b20:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005b24:	f000 8091 	beq.w	8005c4a <HAL_TIM_ConfigClockSource+0x1aa>
 8005b28:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005b2c:	f200 8096 	bhi.w	8005c5c <HAL_TIM_ConfigClockSource+0x1bc>
 8005b30:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b34:	f000 8089 	beq.w	8005c4a <HAL_TIM_ConfigClockSource+0x1aa>
 8005b38:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b3c:	f200 808e 	bhi.w	8005c5c <HAL_TIM_ConfigClockSource+0x1bc>
 8005b40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b44:	d03e      	beq.n	8005bc4 <HAL_TIM_ConfigClockSource+0x124>
 8005b46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b4a:	f200 8087 	bhi.w	8005c5c <HAL_TIM_ConfigClockSource+0x1bc>
 8005b4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b52:	f000 8086 	beq.w	8005c62 <HAL_TIM_ConfigClockSource+0x1c2>
 8005b56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b5a:	d87f      	bhi.n	8005c5c <HAL_TIM_ConfigClockSource+0x1bc>
 8005b5c:	2b70      	cmp	r3, #112	@ 0x70
 8005b5e:	d01a      	beq.n	8005b96 <HAL_TIM_ConfigClockSource+0xf6>
 8005b60:	2b70      	cmp	r3, #112	@ 0x70
 8005b62:	d87b      	bhi.n	8005c5c <HAL_TIM_ConfigClockSource+0x1bc>
 8005b64:	2b60      	cmp	r3, #96	@ 0x60
 8005b66:	d050      	beq.n	8005c0a <HAL_TIM_ConfigClockSource+0x16a>
 8005b68:	2b60      	cmp	r3, #96	@ 0x60
 8005b6a:	d877      	bhi.n	8005c5c <HAL_TIM_ConfigClockSource+0x1bc>
 8005b6c:	2b50      	cmp	r3, #80	@ 0x50
 8005b6e:	d03c      	beq.n	8005bea <HAL_TIM_ConfigClockSource+0x14a>
 8005b70:	2b50      	cmp	r3, #80	@ 0x50
 8005b72:	d873      	bhi.n	8005c5c <HAL_TIM_ConfigClockSource+0x1bc>
 8005b74:	2b40      	cmp	r3, #64	@ 0x40
 8005b76:	d058      	beq.n	8005c2a <HAL_TIM_ConfigClockSource+0x18a>
 8005b78:	2b40      	cmp	r3, #64	@ 0x40
 8005b7a:	d86f      	bhi.n	8005c5c <HAL_TIM_ConfigClockSource+0x1bc>
 8005b7c:	2b30      	cmp	r3, #48	@ 0x30
 8005b7e:	d064      	beq.n	8005c4a <HAL_TIM_ConfigClockSource+0x1aa>
 8005b80:	2b30      	cmp	r3, #48	@ 0x30
 8005b82:	d86b      	bhi.n	8005c5c <HAL_TIM_ConfigClockSource+0x1bc>
 8005b84:	2b20      	cmp	r3, #32
 8005b86:	d060      	beq.n	8005c4a <HAL_TIM_ConfigClockSource+0x1aa>
 8005b88:	2b20      	cmp	r3, #32
 8005b8a:	d867      	bhi.n	8005c5c <HAL_TIM_ConfigClockSource+0x1bc>
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d05c      	beq.n	8005c4a <HAL_TIM_ConfigClockSource+0x1aa>
 8005b90:	2b10      	cmp	r3, #16
 8005b92:	d05a      	beq.n	8005c4a <HAL_TIM_ConfigClockSource+0x1aa>
 8005b94:	e062      	b.n	8005c5c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ba6:	f000 fc99 	bl	80064dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005bb8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	68ba      	ldr	r2, [r7, #8]
 8005bc0:	609a      	str	r2, [r3, #8]
      break;
 8005bc2:	e04f      	b.n	8005c64 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005bd4:	f000 fc82 	bl	80064dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	689a      	ldr	r2, [r3, #8]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005be6:	609a      	str	r2, [r3, #8]
      break;
 8005be8:	e03c      	b.n	8005c64 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	f000 fbf2 	bl	80063e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	2150      	movs	r1, #80	@ 0x50
 8005c02:	4618      	mov	r0, r3
 8005c04:	f000 fc4c 	bl	80064a0 <TIM_ITRx_SetConfig>
      break;
 8005c08:	e02c      	b.n	8005c64 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c16:	461a      	mov	r2, r3
 8005c18:	f000 fc11 	bl	800643e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	2160      	movs	r1, #96	@ 0x60
 8005c22:	4618      	mov	r0, r3
 8005c24:	f000 fc3c 	bl	80064a0 <TIM_ITRx_SetConfig>
      break;
 8005c28:	e01c      	b.n	8005c64 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c36:	461a      	mov	r2, r3
 8005c38:	f000 fbd2 	bl	80063e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	2140      	movs	r1, #64	@ 0x40
 8005c42:	4618      	mov	r0, r3
 8005c44:	f000 fc2c 	bl	80064a0 <TIM_ITRx_SetConfig>
      break;
 8005c48:	e00c      	b.n	8005c64 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4619      	mov	r1, r3
 8005c54:	4610      	mov	r0, r2
 8005c56:	f000 fc23 	bl	80064a0 <TIM_ITRx_SetConfig>
      break;
 8005c5a:	e003      	b.n	8005c64 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	73fb      	strb	r3, [r7, #15]
      break;
 8005c60:	e000      	b.n	8005c64 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8005c62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3710      	adds	r7, #16
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	bf00      	nop
 8005c80:	ffceff88 	.word	0xffceff88
 8005c84:	00100040 	.word	0x00100040
 8005c88:	00100030 	.word	0x00100030
 8005c8c:	00100020 	.word	0x00100020

08005c90 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005c98:	bf00      	nop
 8005c9a:	370c      	adds	r7, #12
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005cac:	bf00      	nop
 8005cae:	370c      	adds	r7, #12
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005cc0:	bf00      	nop
 8005cc2:	370c      	adds	r7, #12
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr

08005ccc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b083      	sub	sp, #12
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005cd4:	bf00      	nop
 8005cd6:	370c      	adds	r7, #12
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr

08005ce0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b083      	sub	sp, #12
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ce8:	bf00      	nop
 8005cea:	370c      	adds	r7, #12
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr

08005cf4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b085      	sub	sp, #20
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a43      	ldr	r2, [pc, #268]	@ (8005e14 <TIM_Base_SetConfig+0x120>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d013      	beq.n	8005d34 <TIM_Base_SetConfig+0x40>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d12:	d00f      	beq.n	8005d34 <TIM_Base_SetConfig+0x40>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a40      	ldr	r2, [pc, #256]	@ (8005e18 <TIM_Base_SetConfig+0x124>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d00b      	beq.n	8005d34 <TIM_Base_SetConfig+0x40>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4a3f      	ldr	r2, [pc, #252]	@ (8005e1c <TIM_Base_SetConfig+0x128>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d007      	beq.n	8005d34 <TIM_Base_SetConfig+0x40>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	4a3e      	ldr	r2, [pc, #248]	@ (8005e20 <TIM_Base_SetConfig+0x12c>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d003      	beq.n	8005d34 <TIM_Base_SetConfig+0x40>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	4a3d      	ldr	r2, [pc, #244]	@ (8005e24 <TIM_Base_SetConfig+0x130>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d108      	bne.n	8005d46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	68fa      	ldr	r2, [r7, #12]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a32      	ldr	r2, [pc, #200]	@ (8005e14 <TIM_Base_SetConfig+0x120>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d01f      	beq.n	8005d8e <TIM_Base_SetConfig+0x9a>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d54:	d01b      	beq.n	8005d8e <TIM_Base_SetConfig+0x9a>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a2f      	ldr	r2, [pc, #188]	@ (8005e18 <TIM_Base_SetConfig+0x124>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d017      	beq.n	8005d8e <TIM_Base_SetConfig+0x9a>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a2e      	ldr	r2, [pc, #184]	@ (8005e1c <TIM_Base_SetConfig+0x128>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d013      	beq.n	8005d8e <TIM_Base_SetConfig+0x9a>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4a2d      	ldr	r2, [pc, #180]	@ (8005e20 <TIM_Base_SetConfig+0x12c>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d00f      	beq.n	8005d8e <TIM_Base_SetConfig+0x9a>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4a2c      	ldr	r2, [pc, #176]	@ (8005e24 <TIM_Base_SetConfig+0x130>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d00b      	beq.n	8005d8e <TIM_Base_SetConfig+0x9a>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	4a2b      	ldr	r2, [pc, #172]	@ (8005e28 <TIM_Base_SetConfig+0x134>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d007      	beq.n	8005d8e <TIM_Base_SetConfig+0x9a>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4a2a      	ldr	r2, [pc, #168]	@ (8005e2c <TIM_Base_SetConfig+0x138>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d003      	beq.n	8005d8e <TIM_Base_SetConfig+0x9a>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	4a29      	ldr	r2, [pc, #164]	@ (8005e30 <TIM_Base_SetConfig+0x13c>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d108      	bne.n	8005da0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	68db      	ldr	r3, [r3, #12]
 8005d9a:	68fa      	ldr	r2, [r7, #12]
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	695b      	ldr	r3, [r3, #20]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	689a      	ldr	r2, [r3, #8]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a14      	ldr	r2, [pc, #80]	@ (8005e14 <TIM_Base_SetConfig+0x120>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d00f      	beq.n	8005de6 <TIM_Base_SetConfig+0xf2>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a16      	ldr	r2, [pc, #88]	@ (8005e24 <TIM_Base_SetConfig+0x130>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d00b      	beq.n	8005de6 <TIM_Base_SetConfig+0xf2>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a15      	ldr	r2, [pc, #84]	@ (8005e28 <TIM_Base_SetConfig+0x134>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d007      	beq.n	8005de6 <TIM_Base_SetConfig+0xf2>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a14      	ldr	r2, [pc, #80]	@ (8005e2c <TIM_Base_SetConfig+0x138>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d003      	beq.n	8005de6 <TIM_Base_SetConfig+0xf2>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a13      	ldr	r2, [pc, #76]	@ (8005e30 <TIM_Base_SetConfig+0x13c>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d103      	bne.n	8005dee <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	691a      	ldr	r2, [r3, #16]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f043 0204 	orr.w	r2, r3, #4
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	68fa      	ldr	r2, [r7, #12]
 8005e04:	601a      	str	r2, [r3, #0]
}
 8005e06:	bf00      	nop
 8005e08:	3714      	adds	r7, #20
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr
 8005e12:	bf00      	nop
 8005e14:	40010000 	.word	0x40010000
 8005e18:	40000400 	.word	0x40000400
 8005e1c:	40000800 	.word	0x40000800
 8005e20:	40000c00 	.word	0x40000c00
 8005e24:	40010400 	.word	0x40010400
 8005e28:	40014000 	.word	0x40014000
 8005e2c:	40014400 	.word	0x40014400
 8005e30:	40014800 	.word	0x40014800

08005e34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b087      	sub	sp, #28
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6a1b      	ldr	r3, [r3, #32]
 8005e42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6a1b      	ldr	r3, [r3, #32]
 8005e48:	f023 0201 	bic.w	r2, r3, #1
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	699b      	ldr	r3, [r3, #24]
 8005e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e5c:	68fa      	ldr	r2, [r7, #12]
 8005e5e:	4b37      	ldr	r3, [pc, #220]	@ (8005f3c <TIM_OC1_SetConfig+0x108>)
 8005e60:	4013      	ands	r3, r2
 8005e62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f023 0303 	bic.w	r3, r3, #3
 8005e6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	f023 0302 	bic.w	r3, r3, #2
 8005e7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	697a      	ldr	r2, [r7, #20]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	4a2d      	ldr	r2, [pc, #180]	@ (8005f40 <TIM_OC1_SetConfig+0x10c>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d00f      	beq.n	8005eb0 <TIM_OC1_SetConfig+0x7c>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	4a2c      	ldr	r2, [pc, #176]	@ (8005f44 <TIM_OC1_SetConfig+0x110>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d00b      	beq.n	8005eb0 <TIM_OC1_SetConfig+0x7c>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	4a2b      	ldr	r2, [pc, #172]	@ (8005f48 <TIM_OC1_SetConfig+0x114>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d007      	beq.n	8005eb0 <TIM_OC1_SetConfig+0x7c>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	4a2a      	ldr	r2, [pc, #168]	@ (8005f4c <TIM_OC1_SetConfig+0x118>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d003      	beq.n	8005eb0 <TIM_OC1_SetConfig+0x7c>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	4a29      	ldr	r2, [pc, #164]	@ (8005f50 <TIM_OC1_SetConfig+0x11c>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d10c      	bne.n	8005eca <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	f023 0308 	bic.w	r3, r3, #8
 8005eb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	697a      	ldr	r2, [r7, #20]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	f023 0304 	bic.w	r3, r3, #4
 8005ec8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4a1c      	ldr	r2, [pc, #112]	@ (8005f40 <TIM_OC1_SetConfig+0x10c>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d00f      	beq.n	8005ef2 <TIM_OC1_SetConfig+0xbe>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a1b      	ldr	r2, [pc, #108]	@ (8005f44 <TIM_OC1_SetConfig+0x110>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d00b      	beq.n	8005ef2 <TIM_OC1_SetConfig+0xbe>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4a1a      	ldr	r2, [pc, #104]	@ (8005f48 <TIM_OC1_SetConfig+0x114>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d007      	beq.n	8005ef2 <TIM_OC1_SetConfig+0xbe>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4a19      	ldr	r2, [pc, #100]	@ (8005f4c <TIM_OC1_SetConfig+0x118>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d003      	beq.n	8005ef2 <TIM_OC1_SetConfig+0xbe>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a18      	ldr	r2, [pc, #96]	@ (8005f50 <TIM_OC1_SetConfig+0x11c>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d111      	bne.n	8005f16 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ef8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005f00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	695b      	ldr	r3, [r3, #20]
 8005f06:	693a      	ldr	r2, [r7, #16]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	699b      	ldr	r3, [r3, #24]
 8005f10:	693a      	ldr	r2, [r7, #16]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	693a      	ldr	r2, [r7, #16]
 8005f1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	68fa      	ldr	r2, [r7, #12]
 8005f20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	685a      	ldr	r2, [r3, #4]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	697a      	ldr	r2, [r7, #20]
 8005f2e:	621a      	str	r2, [r3, #32]
}
 8005f30:	bf00      	nop
 8005f32:	371c      	adds	r7, #28
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr
 8005f3c:	fffeff8f 	.word	0xfffeff8f
 8005f40:	40010000 	.word	0x40010000
 8005f44:	40010400 	.word	0x40010400
 8005f48:	40014000 	.word	0x40014000
 8005f4c:	40014400 	.word	0x40014400
 8005f50:	40014800 	.word	0x40014800

08005f54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b087      	sub	sp, #28
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a1b      	ldr	r3, [r3, #32]
 8005f62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6a1b      	ldr	r3, [r3, #32]
 8005f68:	f023 0210 	bic.w	r2, r3, #16
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	699b      	ldr	r3, [r3, #24]
 8005f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f7c:	68fa      	ldr	r2, [r7, #12]
 8005f7e:	4b34      	ldr	r3, [pc, #208]	@ (8006050 <TIM_OC2_SetConfig+0xfc>)
 8005f80:	4013      	ands	r3, r2
 8005f82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	021b      	lsls	r3, r3, #8
 8005f92:	68fa      	ldr	r2, [r7, #12]
 8005f94:	4313      	orrs	r3, r2
 8005f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	f023 0320 	bic.w	r3, r3, #32
 8005f9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	011b      	lsls	r3, r3, #4
 8005fa6:	697a      	ldr	r2, [r7, #20]
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	4a29      	ldr	r2, [pc, #164]	@ (8006054 <TIM_OC2_SetConfig+0x100>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d003      	beq.n	8005fbc <TIM_OC2_SetConfig+0x68>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	4a28      	ldr	r2, [pc, #160]	@ (8006058 <TIM_OC2_SetConfig+0x104>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d10d      	bne.n	8005fd8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005fc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	011b      	lsls	r3, r3, #4
 8005fca:	697a      	ldr	r2, [r7, #20]
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005fd6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4a1e      	ldr	r2, [pc, #120]	@ (8006054 <TIM_OC2_SetConfig+0x100>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d00f      	beq.n	8006000 <TIM_OC2_SetConfig+0xac>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	4a1d      	ldr	r2, [pc, #116]	@ (8006058 <TIM_OC2_SetConfig+0x104>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d00b      	beq.n	8006000 <TIM_OC2_SetConfig+0xac>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	4a1c      	ldr	r2, [pc, #112]	@ (800605c <TIM_OC2_SetConfig+0x108>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d007      	beq.n	8006000 <TIM_OC2_SetConfig+0xac>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4a1b      	ldr	r2, [pc, #108]	@ (8006060 <TIM_OC2_SetConfig+0x10c>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d003      	beq.n	8006000 <TIM_OC2_SetConfig+0xac>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	4a1a      	ldr	r2, [pc, #104]	@ (8006064 <TIM_OC2_SetConfig+0x110>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d113      	bne.n	8006028 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006006:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800600e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	695b      	ldr	r3, [r3, #20]
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	693a      	ldr	r2, [r7, #16]
 8006018:	4313      	orrs	r3, r2
 800601a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	699b      	ldr	r3, [r3, #24]
 8006020:	009b      	lsls	r3, r3, #2
 8006022:	693a      	ldr	r2, [r7, #16]
 8006024:	4313      	orrs	r3, r2
 8006026:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	693a      	ldr	r2, [r7, #16]
 800602c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	68fa      	ldr	r2, [r7, #12]
 8006032:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	685a      	ldr	r2, [r3, #4]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	697a      	ldr	r2, [r7, #20]
 8006040:	621a      	str	r2, [r3, #32]
}
 8006042:	bf00      	nop
 8006044:	371c      	adds	r7, #28
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr
 800604e:	bf00      	nop
 8006050:	feff8fff 	.word	0xfeff8fff
 8006054:	40010000 	.word	0x40010000
 8006058:	40010400 	.word	0x40010400
 800605c:	40014000 	.word	0x40014000
 8006060:	40014400 	.word	0x40014400
 8006064:	40014800 	.word	0x40014800

08006068 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006068:	b480      	push	{r7}
 800606a:	b087      	sub	sp, #28
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6a1b      	ldr	r3, [r3, #32]
 8006076:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6a1b      	ldr	r3, [r3, #32]
 800607c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	69db      	ldr	r3, [r3, #28]
 800608e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006090:	68fa      	ldr	r2, [r7, #12]
 8006092:	4b33      	ldr	r3, [pc, #204]	@ (8006160 <TIM_OC3_SetConfig+0xf8>)
 8006094:	4013      	ands	r3, r2
 8006096:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f023 0303 	bic.w	r3, r3, #3
 800609e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	68fa      	ldr	r2, [r7, #12]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80060b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	021b      	lsls	r3, r3, #8
 80060b8:	697a      	ldr	r2, [r7, #20]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4a28      	ldr	r2, [pc, #160]	@ (8006164 <TIM_OC3_SetConfig+0xfc>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d003      	beq.n	80060ce <TIM_OC3_SetConfig+0x66>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	4a27      	ldr	r2, [pc, #156]	@ (8006168 <TIM_OC3_SetConfig+0x100>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d10d      	bne.n	80060ea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80060d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	021b      	lsls	r3, r3, #8
 80060dc:	697a      	ldr	r2, [r7, #20]
 80060de:	4313      	orrs	r3, r2
 80060e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80060e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a1d      	ldr	r2, [pc, #116]	@ (8006164 <TIM_OC3_SetConfig+0xfc>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d00f      	beq.n	8006112 <TIM_OC3_SetConfig+0xaa>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	4a1c      	ldr	r2, [pc, #112]	@ (8006168 <TIM_OC3_SetConfig+0x100>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d00b      	beq.n	8006112 <TIM_OC3_SetConfig+0xaa>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4a1b      	ldr	r2, [pc, #108]	@ (800616c <TIM_OC3_SetConfig+0x104>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d007      	beq.n	8006112 <TIM_OC3_SetConfig+0xaa>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	4a1a      	ldr	r2, [pc, #104]	@ (8006170 <TIM_OC3_SetConfig+0x108>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d003      	beq.n	8006112 <TIM_OC3_SetConfig+0xaa>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4a19      	ldr	r2, [pc, #100]	@ (8006174 <TIM_OC3_SetConfig+0x10c>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d113      	bne.n	800613a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006118:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006120:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	695b      	ldr	r3, [r3, #20]
 8006126:	011b      	lsls	r3, r3, #4
 8006128:	693a      	ldr	r2, [r7, #16]
 800612a:	4313      	orrs	r3, r2
 800612c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	699b      	ldr	r3, [r3, #24]
 8006132:	011b      	lsls	r3, r3, #4
 8006134:	693a      	ldr	r2, [r7, #16]
 8006136:	4313      	orrs	r3, r2
 8006138:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	693a      	ldr	r2, [r7, #16]
 800613e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	68fa      	ldr	r2, [r7, #12]
 8006144:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	685a      	ldr	r2, [r3, #4]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	697a      	ldr	r2, [r7, #20]
 8006152:	621a      	str	r2, [r3, #32]
}
 8006154:	bf00      	nop
 8006156:	371c      	adds	r7, #28
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr
 8006160:	fffeff8f 	.word	0xfffeff8f
 8006164:	40010000 	.word	0x40010000
 8006168:	40010400 	.word	0x40010400
 800616c:	40014000 	.word	0x40014000
 8006170:	40014400 	.word	0x40014400
 8006174:	40014800 	.word	0x40014800

08006178 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006178:	b480      	push	{r7}
 800617a:	b087      	sub	sp, #28
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6a1b      	ldr	r3, [r3, #32]
 8006186:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6a1b      	ldr	r3, [r3, #32]
 800618c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	69db      	ldr	r3, [r3, #28]
 800619e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80061a0:	68fa      	ldr	r2, [r7, #12]
 80061a2:	4b24      	ldr	r3, [pc, #144]	@ (8006234 <TIM_OC4_SetConfig+0xbc>)
 80061a4:	4013      	ands	r3, r2
 80061a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	021b      	lsls	r3, r3, #8
 80061b6:	68fa      	ldr	r2, [r7, #12]
 80061b8:	4313      	orrs	r3, r2
 80061ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80061c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	031b      	lsls	r3, r3, #12
 80061ca:	693a      	ldr	r2, [r7, #16]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	4a19      	ldr	r2, [pc, #100]	@ (8006238 <TIM_OC4_SetConfig+0xc0>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d00f      	beq.n	80061f8 <TIM_OC4_SetConfig+0x80>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	4a18      	ldr	r2, [pc, #96]	@ (800623c <TIM_OC4_SetConfig+0xc4>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d00b      	beq.n	80061f8 <TIM_OC4_SetConfig+0x80>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	4a17      	ldr	r2, [pc, #92]	@ (8006240 <TIM_OC4_SetConfig+0xc8>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d007      	beq.n	80061f8 <TIM_OC4_SetConfig+0x80>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	4a16      	ldr	r2, [pc, #88]	@ (8006244 <TIM_OC4_SetConfig+0xcc>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d003      	beq.n	80061f8 <TIM_OC4_SetConfig+0x80>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	4a15      	ldr	r2, [pc, #84]	@ (8006248 <TIM_OC4_SetConfig+0xd0>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d109      	bne.n	800620c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80061fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	695b      	ldr	r3, [r3, #20]
 8006204:	019b      	lsls	r3, r3, #6
 8006206:	697a      	ldr	r2, [r7, #20]
 8006208:	4313      	orrs	r3, r2
 800620a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	697a      	ldr	r2, [r7, #20]
 8006210:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	685a      	ldr	r2, [r3, #4]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	693a      	ldr	r2, [r7, #16]
 8006224:	621a      	str	r2, [r3, #32]
}
 8006226:	bf00      	nop
 8006228:	371c      	adds	r7, #28
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr
 8006232:	bf00      	nop
 8006234:	feff8fff 	.word	0xfeff8fff
 8006238:	40010000 	.word	0x40010000
 800623c:	40010400 	.word	0x40010400
 8006240:	40014000 	.word	0x40014000
 8006244:	40014400 	.word	0x40014400
 8006248:	40014800 	.word	0x40014800

0800624c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800624c:	b480      	push	{r7}
 800624e:	b087      	sub	sp, #28
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6a1b      	ldr	r3, [r3, #32]
 800625a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6a1b      	ldr	r3, [r3, #32]
 8006260:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006274:	68fa      	ldr	r2, [r7, #12]
 8006276:	4b21      	ldr	r3, [pc, #132]	@ (80062fc <TIM_OC5_SetConfig+0xb0>)
 8006278:	4013      	ands	r3, r2
 800627a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	68fa      	ldr	r2, [r7, #12]
 8006282:	4313      	orrs	r3, r2
 8006284:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800628c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	041b      	lsls	r3, r3, #16
 8006294:	693a      	ldr	r2, [r7, #16]
 8006296:	4313      	orrs	r3, r2
 8006298:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a18      	ldr	r2, [pc, #96]	@ (8006300 <TIM_OC5_SetConfig+0xb4>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d00f      	beq.n	80062c2 <TIM_OC5_SetConfig+0x76>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4a17      	ldr	r2, [pc, #92]	@ (8006304 <TIM_OC5_SetConfig+0xb8>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d00b      	beq.n	80062c2 <TIM_OC5_SetConfig+0x76>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	4a16      	ldr	r2, [pc, #88]	@ (8006308 <TIM_OC5_SetConfig+0xbc>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d007      	beq.n	80062c2 <TIM_OC5_SetConfig+0x76>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	4a15      	ldr	r2, [pc, #84]	@ (800630c <TIM_OC5_SetConfig+0xc0>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d003      	beq.n	80062c2 <TIM_OC5_SetConfig+0x76>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	4a14      	ldr	r2, [pc, #80]	@ (8006310 <TIM_OC5_SetConfig+0xc4>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d109      	bne.n	80062d6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062c8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	695b      	ldr	r3, [r3, #20]
 80062ce:	021b      	lsls	r3, r3, #8
 80062d0:	697a      	ldr	r2, [r7, #20]
 80062d2:	4313      	orrs	r3, r2
 80062d4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	697a      	ldr	r2, [r7, #20]
 80062da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	68fa      	ldr	r2, [r7, #12]
 80062e0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	685a      	ldr	r2, [r3, #4]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	693a      	ldr	r2, [r7, #16]
 80062ee:	621a      	str	r2, [r3, #32]
}
 80062f0:	bf00      	nop
 80062f2:	371c      	adds	r7, #28
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr
 80062fc:	fffeff8f 	.word	0xfffeff8f
 8006300:	40010000 	.word	0x40010000
 8006304:	40010400 	.word	0x40010400
 8006308:	40014000 	.word	0x40014000
 800630c:	40014400 	.word	0x40014400
 8006310:	40014800 	.word	0x40014800

08006314 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006314:	b480      	push	{r7}
 8006316:	b087      	sub	sp, #28
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6a1b      	ldr	r3, [r3, #32]
 8006322:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6a1b      	ldr	r3, [r3, #32]
 8006328:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800633a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800633c:	68fa      	ldr	r2, [r7, #12]
 800633e:	4b22      	ldr	r3, [pc, #136]	@ (80063c8 <TIM_OC6_SetConfig+0xb4>)
 8006340:	4013      	ands	r3, r2
 8006342:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	021b      	lsls	r3, r3, #8
 800634a:	68fa      	ldr	r2, [r7, #12]
 800634c:	4313      	orrs	r3, r2
 800634e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006356:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	051b      	lsls	r3, r3, #20
 800635e:	693a      	ldr	r2, [r7, #16]
 8006360:	4313      	orrs	r3, r2
 8006362:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	4a19      	ldr	r2, [pc, #100]	@ (80063cc <TIM_OC6_SetConfig+0xb8>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d00f      	beq.n	800638c <TIM_OC6_SetConfig+0x78>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	4a18      	ldr	r2, [pc, #96]	@ (80063d0 <TIM_OC6_SetConfig+0xbc>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d00b      	beq.n	800638c <TIM_OC6_SetConfig+0x78>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	4a17      	ldr	r2, [pc, #92]	@ (80063d4 <TIM_OC6_SetConfig+0xc0>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d007      	beq.n	800638c <TIM_OC6_SetConfig+0x78>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	4a16      	ldr	r2, [pc, #88]	@ (80063d8 <TIM_OC6_SetConfig+0xc4>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d003      	beq.n	800638c <TIM_OC6_SetConfig+0x78>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	4a15      	ldr	r2, [pc, #84]	@ (80063dc <TIM_OC6_SetConfig+0xc8>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d109      	bne.n	80063a0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006392:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	695b      	ldr	r3, [r3, #20]
 8006398:	029b      	lsls	r3, r3, #10
 800639a:	697a      	ldr	r2, [r7, #20]
 800639c:	4313      	orrs	r3, r2
 800639e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	697a      	ldr	r2, [r7, #20]
 80063a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	68fa      	ldr	r2, [r7, #12]
 80063aa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	685a      	ldr	r2, [r3, #4]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	693a      	ldr	r2, [r7, #16]
 80063b8:	621a      	str	r2, [r3, #32]
}
 80063ba:	bf00      	nop
 80063bc:	371c      	adds	r7, #28
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr
 80063c6:	bf00      	nop
 80063c8:	feff8fff 	.word	0xfeff8fff
 80063cc:	40010000 	.word	0x40010000
 80063d0:	40010400 	.word	0x40010400
 80063d4:	40014000 	.word	0x40014000
 80063d8:	40014400 	.word	0x40014400
 80063dc:	40014800 	.word	0x40014800

080063e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b087      	sub	sp, #28
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	60f8      	str	r0, [r7, #12]
 80063e8:	60b9      	str	r1, [r7, #8]
 80063ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	6a1b      	ldr	r3, [r3, #32]
 80063f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	6a1b      	ldr	r3, [r3, #32]
 80063f6:	f023 0201 	bic.w	r2, r3, #1
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	699b      	ldr	r3, [r3, #24]
 8006402:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800640a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	011b      	lsls	r3, r3, #4
 8006410:	693a      	ldr	r2, [r7, #16]
 8006412:	4313      	orrs	r3, r2
 8006414:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	f023 030a 	bic.w	r3, r3, #10
 800641c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800641e:	697a      	ldr	r2, [r7, #20]
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	4313      	orrs	r3, r2
 8006424:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	693a      	ldr	r2, [r7, #16]
 800642a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	697a      	ldr	r2, [r7, #20]
 8006430:	621a      	str	r2, [r3, #32]
}
 8006432:	bf00      	nop
 8006434:	371c      	adds	r7, #28
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr

0800643e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800643e:	b480      	push	{r7}
 8006440:	b087      	sub	sp, #28
 8006442:	af00      	add	r7, sp, #0
 8006444:	60f8      	str	r0, [r7, #12]
 8006446:	60b9      	str	r1, [r7, #8]
 8006448:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	6a1b      	ldr	r3, [r3, #32]
 800644e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6a1b      	ldr	r3, [r3, #32]
 8006454:	f023 0210 	bic.w	r2, r3, #16
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	699b      	ldr	r3, [r3, #24]
 8006460:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006468:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	031b      	lsls	r3, r3, #12
 800646e:	693a      	ldr	r2, [r7, #16]
 8006470:	4313      	orrs	r3, r2
 8006472:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800647a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	011b      	lsls	r3, r3, #4
 8006480:	697a      	ldr	r2, [r7, #20]
 8006482:	4313      	orrs	r3, r2
 8006484:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	693a      	ldr	r2, [r7, #16]
 800648a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	697a      	ldr	r2, [r7, #20]
 8006490:	621a      	str	r2, [r3, #32]
}
 8006492:	bf00      	nop
 8006494:	371c      	adds	r7, #28
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr
	...

080064a0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b085      	sub	sp, #20
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80064b0:	68fa      	ldr	r2, [r7, #12]
 80064b2:	4b09      	ldr	r3, [pc, #36]	@ (80064d8 <TIM_ITRx_SetConfig+0x38>)
 80064b4:	4013      	ands	r3, r2
 80064b6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80064b8:	683a      	ldr	r2, [r7, #0]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	4313      	orrs	r3, r2
 80064be:	f043 0307 	orr.w	r3, r3, #7
 80064c2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	68fa      	ldr	r2, [r7, #12]
 80064c8:	609a      	str	r2, [r3, #8]
}
 80064ca:	bf00      	nop
 80064cc:	3714      	adds	r7, #20
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr
 80064d6:	bf00      	nop
 80064d8:	ffcfff8f 	.word	0xffcfff8f

080064dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80064dc:	b480      	push	{r7}
 80064de:	b087      	sub	sp, #28
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	60b9      	str	r1, [r7, #8]
 80064e6:	607a      	str	r2, [r7, #4]
 80064e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80064f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	021a      	lsls	r2, r3, #8
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	431a      	orrs	r2, r3
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	4313      	orrs	r3, r2
 8006504:	697a      	ldr	r2, [r7, #20]
 8006506:	4313      	orrs	r3, r2
 8006508:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	697a      	ldr	r2, [r7, #20]
 800650e:	609a      	str	r2, [r3, #8]
}
 8006510:	bf00      	nop
 8006512:	371c      	adds	r7, #28
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr

0800651c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800651c:	b480      	push	{r7}
 800651e:	b087      	sub	sp, #28
 8006520:	af00      	add	r7, sp, #0
 8006522:	60f8      	str	r0, [r7, #12]
 8006524:	60b9      	str	r1, [r7, #8]
 8006526:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	f003 031f 	and.w	r3, r3, #31
 800652e:	2201      	movs	r2, #1
 8006530:	fa02 f303 	lsl.w	r3, r2, r3
 8006534:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	6a1a      	ldr	r2, [r3, #32]
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	43db      	mvns	r3, r3
 800653e:	401a      	ands	r2, r3
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6a1a      	ldr	r2, [r3, #32]
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	f003 031f 	and.w	r3, r3, #31
 800654e:	6879      	ldr	r1, [r7, #4]
 8006550:	fa01 f303 	lsl.w	r3, r1, r3
 8006554:	431a      	orrs	r2, r3
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	621a      	str	r2, [r3, #32]
}
 800655a:	bf00      	nop
 800655c:	371c      	adds	r7, #28
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr
	...

08006568 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006568:	b480      	push	{r7}
 800656a:	b085      	sub	sp, #20
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006578:	2b01      	cmp	r3, #1
 800657a:	d101      	bne.n	8006580 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800657c:	2302      	movs	r3, #2
 800657e:	e06d      	b.n	800665c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2201      	movs	r2, #1
 8006584:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2202      	movs	r2, #2
 800658c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a30      	ldr	r2, [pc, #192]	@ (8006668 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d004      	beq.n	80065b4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a2f      	ldr	r2, [pc, #188]	@ (800666c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d108      	bne.n	80065c6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80065ba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	68fa      	ldr	r2, [r7, #12]
 80065c2:	4313      	orrs	r3, r2
 80065c4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065cc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	68fa      	ldr	r2, [r7, #12]
 80065d4:	4313      	orrs	r3, r2
 80065d6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	68fa      	ldr	r2, [r7, #12]
 80065de:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a20      	ldr	r2, [pc, #128]	@ (8006668 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d022      	beq.n	8006630 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065f2:	d01d      	beq.n	8006630 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a1d      	ldr	r2, [pc, #116]	@ (8006670 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d018      	beq.n	8006630 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a1c      	ldr	r2, [pc, #112]	@ (8006674 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d013      	beq.n	8006630 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a1a      	ldr	r2, [pc, #104]	@ (8006678 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d00e      	beq.n	8006630 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a15      	ldr	r2, [pc, #84]	@ (800666c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d009      	beq.n	8006630 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a16      	ldr	r2, [pc, #88]	@ (800667c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d004      	beq.n	8006630 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a15      	ldr	r2, [pc, #84]	@ (8006680 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d10c      	bne.n	800664a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006636:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	68ba      	ldr	r2, [r7, #8]
 800663e:	4313      	orrs	r3, r2
 8006640:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	68ba      	ldr	r2, [r7, #8]
 8006648:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2201      	movs	r2, #1
 800664e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800665a:	2300      	movs	r3, #0
}
 800665c:	4618      	mov	r0, r3
 800665e:	3714      	adds	r7, #20
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr
 8006668:	40010000 	.word	0x40010000
 800666c:	40010400 	.word	0x40010400
 8006670:	40000400 	.word	0x40000400
 8006674:	40000800 	.word	0x40000800
 8006678:	40000c00 	.word	0x40000c00
 800667c:	40001800 	.word	0x40001800
 8006680:	40014000 	.word	0x40014000

08006684 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006684:	b480      	push	{r7}
 8006686:	b085      	sub	sp, #20
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800668e:	2300      	movs	r3, #0
 8006690:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006698:	2b01      	cmp	r3, #1
 800669a:	d101      	bne.n	80066a0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800669c:	2302      	movs	r3, #2
 800669e:	e065      	b.n	800676c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	4313      	orrs	r3, r2
 80066c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	4313      	orrs	r3, r2
 80066d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4313      	orrs	r3, r2
 80066de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	691b      	ldr	r3, [r3, #16]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	695b      	ldr	r3, [r3, #20]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006706:	4313      	orrs	r3, r2
 8006708:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	699b      	ldr	r3, [r3, #24]
 8006714:	041b      	lsls	r3, r3, #16
 8006716:	4313      	orrs	r3, r2
 8006718:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a16      	ldr	r2, [pc, #88]	@ (8006778 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d004      	beq.n	800672e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a14      	ldr	r2, [pc, #80]	@ (800677c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d115      	bne.n	800675a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006738:	051b      	lsls	r3, r3, #20
 800673a:	4313      	orrs	r3, r2
 800673c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	69db      	ldr	r3, [r3, #28]
 8006748:	4313      	orrs	r3, r2
 800674a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	6a1b      	ldr	r3, [r3, #32]
 8006756:	4313      	orrs	r3, r2
 8006758:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	68fa      	ldr	r2, [r7, #12]
 8006760:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2200      	movs	r2, #0
 8006766:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800676a:	2300      	movs	r3, #0
}
 800676c:	4618      	mov	r0, r3
 800676e:	3714      	adds	r7, #20
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr
 8006778:	40010000 	.word	0x40010000
 800677c:	40010400 	.word	0x40010400

08006780 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006780:	b480      	push	{r7}
 8006782:	b083      	sub	sp, #12
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006788:	bf00      	nop
 800678a:	370c      	adds	r7, #12
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr

08006794 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006794:	b480      	push	{r7}
 8006796:	b083      	sub	sp, #12
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800679c:	bf00      	nop
 800679e:	370c      	adds	r7, #12
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b083      	sub	sp, #12
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80067b0:	bf00      	nop
 80067b2:	370c      	adds	r7, #12
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr

080067bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b082      	sub	sp, #8
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d101      	bne.n	80067ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	e042      	b.n	8006854 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d106      	bne.n	80067e6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f7fa fd63 	bl	80012ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2224      	movs	r2, #36	@ 0x24
 80067ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f022 0201 	bic.w	r2, r2, #1
 80067fc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006802:	2b00      	cmp	r3, #0
 8006804:	d002      	beq.n	800680c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f001 fa14 	bl	8007c34 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f000 fca9 	bl	8007164 <UART_SetConfig>
 8006812:	4603      	mov	r3, r0
 8006814:	2b01      	cmp	r3, #1
 8006816:	d101      	bne.n	800681c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006818:	2301      	movs	r3, #1
 800681a:	e01b      	b.n	8006854 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	685a      	ldr	r2, [r3, #4]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800682a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	689a      	ldr	r2, [r3, #8]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800683a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f042 0201 	orr.w	r2, r2, #1
 800684a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f001 fa93 	bl	8007d78 <UART_CheckIdleState>
 8006852:	4603      	mov	r3, r0
}
 8006854:	4618      	mov	r0, r3
 8006856:	3708      	adds	r7, #8
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b08a      	sub	sp, #40	@ 0x28
 8006860:	af02      	add	r7, sp, #8
 8006862:	60f8      	str	r0, [r7, #12]
 8006864:	60b9      	str	r1, [r7, #8]
 8006866:	603b      	str	r3, [r7, #0]
 8006868:	4613      	mov	r3, r2
 800686a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006872:	2b20      	cmp	r3, #32
 8006874:	d17b      	bne.n	800696e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d002      	beq.n	8006882 <HAL_UART_Transmit+0x26>
 800687c:	88fb      	ldrh	r3, [r7, #6]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d101      	bne.n	8006886 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	e074      	b.n	8006970 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2200      	movs	r2, #0
 800688a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2221      	movs	r2, #33	@ 0x21
 8006892:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006896:	f7fa fe3f 	bl	8001518 <HAL_GetTick>
 800689a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	88fa      	ldrh	r2, [r7, #6]
 80068a0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	88fa      	ldrh	r2, [r7, #6]
 80068a8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068b4:	d108      	bne.n	80068c8 <HAL_UART_Transmit+0x6c>
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	691b      	ldr	r3, [r3, #16]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d104      	bne.n	80068c8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80068be:	2300      	movs	r3, #0
 80068c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	61bb      	str	r3, [r7, #24]
 80068c6:	e003      	b.n	80068d0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80068cc:	2300      	movs	r3, #0
 80068ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80068d0:	e030      	b.n	8006934 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	9300      	str	r3, [sp, #0]
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	2200      	movs	r2, #0
 80068da:	2180      	movs	r1, #128	@ 0x80
 80068dc:	68f8      	ldr	r0, [r7, #12]
 80068de:	f001 faf5 	bl	8007ecc <UART_WaitOnFlagUntilTimeout>
 80068e2:	4603      	mov	r3, r0
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d005      	beq.n	80068f4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2220      	movs	r2, #32
 80068ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80068f0:	2303      	movs	r3, #3
 80068f2:	e03d      	b.n	8006970 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80068f4:	69fb      	ldr	r3, [r7, #28]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d10b      	bne.n	8006912 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80068fa:	69bb      	ldr	r3, [r7, #24]
 80068fc:	881b      	ldrh	r3, [r3, #0]
 80068fe:	461a      	mov	r2, r3
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006908:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800690a:	69bb      	ldr	r3, [r7, #24]
 800690c:	3302      	adds	r3, #2
 800690e:	61bb      	str	r3, [r7, #24]
 8006910:	e007      	b.n	8006922 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006912:	69fb      	ldr	r3, [r7, #28]
 8006914:	781a      	ldrb	r2, [r3, #0]
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800691c:	69fb      	ldr	r3, [r7, #28]
 800691e:	3301      	adds	r3, #1
 8006920:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006928:	b29b      	uxth	r3, r3
 800692a:	3b01      	subs	r3, #1
 800692c:	b29a      	uxth	r2, r3
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800693a:	b29b      	uxth	r3, r3
 800693c:	2b00      	cmp	r3, #0
 800693e:	d1c8      	bne.n	80068d2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	9300      	str	r3, [sp, #0]
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	2200      	movs	r2, #0
 8006948:	2140      	movs	r1, #64	@ 0x40
 800694a:	68f8      	ldr	r0, [r7, #12]
 800694c:	f001 fabe 	bl	8007ecc <UART_WaitOnFlagUntilTimeout>
 8006950:	4603      	mov	r3, r0
 8006952:	2b00      	cmp	r3, #0
 8006954:	d005      	beq.n	8006962 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2220      	movs	r2, #32
 800695a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800695e:	2303      	movs	r3, #3
 8006960:	e006      	b.n	8006970 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2220      	movs	r2, #32
 8006966:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800696a:	2300      	movs	r3, #0
 800696c:	e000      	b.n	8006970 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800696e:	2302      	movs	r3, #2
  }
}
 8006970:	4618      	mov	r0, r3
 8006972:	3720      	adds	r7, #32
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}

08006978 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b0ba      	sub	sp, #232	@ 0xe8
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	69db      	ldr	r3, [r3, #28]
 8006986:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800699e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80069a2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80069a6:	4013      	ands	r3, r2
 80069a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80069ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d11b      	bne.n	80069ec <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80069b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069b8:	f003 0320 	and.w	r3, r3, #32
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d015      	beq.n	80069ec <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80069c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069c4:	f003 0320 	and.w	r3, r3, #32
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d105      	bne.n	80069d8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80069cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80069d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d009      	beq.n	80069ec <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069dc:	2b00      	cmp	r3, #0
 80069de:	f000 8393 	beq.w	8007108 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	4798      	blx	r3
      }
      return;
 80069ea:	e38d      	b.n	8007108 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80069ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	f000 8123 	beq.w	8006c3c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80069f6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80069fa:	4b8d      	ldr	r3, [pc, #564]	@ (8006c30 <HAL_UART_IRQHandler+0x2b8>)
 80069fc:	4013      	ands	r3, r2
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d106      	bne.n	8006a10 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006a02:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006a06:	4b8b      	ldr	r3, [pc, #556]	@ (8006c34 <HAL_UART_IRQHandler+0x2bc>)
 8006a08:	4013      	ands	r3, r2
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	f000 8116 	beq.w	8006c3c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006a10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a14:	f003 0301 	and.w	r3, r3, #1
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d011      	beq.n	8006a40 <HAL_UART_IRQHandler+0xc8>
 8006a1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d00b      	beq.n	8006a40 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a36:	f043 0201 	orr.w	r2, r3, #1
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a44:	f003 0302 	and.w	r3, r3, #2
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d011      	beq.n	8006a70 <HAL_UART_IRQHandler+0xf8>
 8006a4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a50:	f003 0301 	and.w	r3, r3, #1
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d00b      	beq.n	8006a70 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	2202      	movs	r2, #2
 8006a5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a66:	f043 0204 	orr.w	r2, r3, #4
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a74:	f003 0304 	and.w	r3, r3, #4
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d011      	beq.n	8006aa0 <HAL_UART_IRQHandler+0x128>
 8006a7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a80:	f003 0301 	and.w	r3, r3, #1
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d00b      	beq.n	8006aa0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	2204      	movs	r2, #4
 8006a8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a96:	f043 0202 	orr.w	r2, r3, #2
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006aa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006aa4:	f003 0308 	and.w	r3, r3, #8
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d017      	beq.n	8006adc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006aac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ab0:	f003 0320 	and.w	r3, r3, #32
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d105      	bne.n	8006ac4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006ab8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006abc:	4b5c      	ldr	r3, [pc, #368]	@ (8006c30 <HAL_UART_IRQHandler+0x2b8>)
 8006abe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d00b      	beq.n	8006adc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	2208      	movs	r2, #8
 8006aca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ad2:	f043 0208 	orr.w	r2, r3, #8
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ae0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d012      	beq.n	8006b0e <HAL_UART_IRQHandler+0x196>
 8006ae8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006aec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d00c      	beq.n	8006b0e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006afc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b04:	f043 0220 	orr.w	r2, r3, #32
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	f000 82f9 	beq.w	800710c <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006b1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b1e:	f003 0320 	and.w	r3, r3, #32
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d013      	beq.n	8006b4e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006b26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b2a:	f003 0320 	and.w	r3, r3, #32
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d105      	bne.n	8006b3e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006b32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d007      	beq.n	8006b4e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d003      	beq.n	8006b4e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b54:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b62:	2b40      	cmp	r3, #64	@ 0x40
 8006b64:	d005      	beq.n	8006b72 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006b66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006b6a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d054      	beq.n	8006c1c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f001 fa18 	bl	8007fa8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b82:	2b40      	cmp	r3, #64	@ 0x40
 8006b84:	d146      	bne.n	8006c14 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	3308      	adds	r3, #8
 8006b8c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b90:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006b94:	e853 3f00 	ldrex	r3, [r3]
 8006b98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006b9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006ba0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ba4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	3308      	adds	r3, #8
 8006bae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006bb2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006bb6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006bbe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006bc2:	e841 2300 	strex	r3, r2, [r1]
 8006bc6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006bca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d1d9      	bne.n	8006b86 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d017      	beq.n	8006c0c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006be2:	4a15      	ldr	r2, [pc, #84]	@ (8006c38 <HAL_UART_IRQHandler+0x2c0>)
 8006be4:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006bec:	4618      	mov	r0, r3
 8006bee:	f7fb f975 	bl	8001edc <HAL_DMA_Abort_IT>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d019      	beq.n	8006c2c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006bfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006c06:	4610      	mov	r0, r2
 8006c08:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c0a:	e00f      	b.n	8006c2c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f000 fa93 	bl	8007138 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c12:	e00b      	b.n	8006c2c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f000 fa8f 	bl	8007138 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c1a:	e007      	b.n	8006c2c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f000 fa8b 	bl	8007138 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2200      	movs	r2, #0
 8006c26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006c2a:	e26f      	b.n	800710c <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c2c:	bf00      	nop
    return;
 8006c2e:	e26d      	b.n	800710c <HAL_UART_IRQHandler+0x794>
 8006c30:	10000001 	.word	0x10000001
 8006c34:	04000120 	.word	0x04000120
 8006c38:	08008075 	.word	0x08008075

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	f040 8203 	bne.w	800704c <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c4a:	f003 0310 	and.w	r3, r3, #16
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	f000 81fc 	beq.w	800704c <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006c54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c58:	f003 0310 	and.w	r3, r3, #16
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	f000 81f5 	beq.w	800704c <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	2210      	movs	r2, #16
 8006c68:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c74:	2b40      	cmp	r3, #64	@ 0x40
 8006c76:	f040 816d 	bne.w	8006f54 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4aa4      	ldr	r2, [pc, #656]	@ (8006f14 <HAL_UART_IRQHandler+0x59c>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d068      	beq.n	8006d5a <HAL_UART_IRQHandler+0x3e2>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4aa1      	ldr	r2, [pc, #644]	@ (8006f18 <HAL_UART_IRQHandler+0x5a0>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d061      	beq.n	8006d5a <HAL_UART_IRQHandler+0x3e2>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a9f      	ldr	r2, [pc, #636]	@ (8006f1c <HAL_UART_IRQHandler+0x5a4>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d05a      	beq.n	8006d5a <HAL_UART_IRQHandler+0x3e2>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a9c      	ldr	r2, [pc, #624]	@ (8006f20 <HAL_UART_IRQHandler+0x5a8>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d053      	beq.n	8006d5a <HAL_UART_IRQHandler+0x3e2>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a9a      	ldr	r2, [pc, #616]	@ (8006f24 <HAL_UART_IRQHandler+0x5ac>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d04c      	beq.n	8006d5a <HAL_UART_IRQHandler+0x3e2>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a97      	ldr	r2, [pc, #604]	@ (8006f28 <HAL_UART_IRQHandler+0x5b0>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d045      	beq.n	8006d5a <HAL_UART_IRQHandler+0x3e2>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a95      	ldr	r2, [pc, #596]	@ (8006f2c <HAL_UART_IRQHandler+0x5b4>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d03e      	beq.n	8006d5a <HAL_UART_IRQHandler+0x3e2>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a92      	ldr	r2, [pc, #584]	@ (8006f30 <HAL_UART_IRQHandler+0x5b8>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d037      	beq.n	8006d5a <HAL_UART_IRQHandler+0x3e2>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a90      	ldr	r2, [pc, #576]	@ (8006f34 <HAL_UART_IRQHandler+0x5bc>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d030      	beq.n	8006d5a <HAL_UART_IRQHandler+0x3e2>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a8d      	ldr	r2, [pc, #564]	@ (8006f38 <HAL_UART_IRQHandler+0x5c0>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d029      	beq.n	8006d5a <HAL_UART_IRQHandler+0x3e2>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a8b      	ldr	r2, [pc, #556]	@ (8006f3c <HAL_UART_IRQHandler+0x5c4>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d022      	beq.n	8006d5a <HAL_UART_IRQHandler+0x3e2>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a88      	ldr	r2, [pc, #544]	@ (8006f40 <HAL_UART_IRQHandler+0x5c8>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d01b      	beq.n	8006d5a <HAL_UART_IRQHandler+0x3e2>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a86      	ldr	r2, [pc, #536]	@ (8006f44 <HAL_UART_IRQHandler+0x5cc>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d014      	beq.n	8006d5a <HAL_UART_IRQHandler+0x3e2>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a83      	ldr	r2, [pc, #524]	@ (8006f48 <HAL_UART_IRQHandler+0x5d0>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d00d      	beq.n	8006d5a <HAL_UART_IRQHandler+0x3e2>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a81      	ldr	r2, [pc, #516]	@ (8006f4c <HAL_UART_IRQHandler+0x5d4>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d006      	beq.n	8006d5a <HAL_UART_IRQHandler+0x3e2>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a7e      	ldr	r2, [pc, #504]	@ (8006f50 <HAL_UART_IRQHandler+0x5d8>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d106      	bne.n	8006d68 <HAL_UART_IRQHandler+0x3f0>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	e005      	b.n	8006d74 <HAL_UART_IRQHandler+0x3fc>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006d78:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	f000 80ad 	beq.w	8006edc <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006d88:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	f080 80a5 	bcs.w	8006edc <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006d98:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006da2:	69db      	ldr	r3, [r3, #28]
 8006da4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006da8:	f000 8087 	beq.w	8006eba <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006db8:	e853 3f00 	ldrex	r3, [r3]
 8006dbc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006dc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006dc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006dc8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006dd6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006dda:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dde:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006de2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006de6:	e841 2300 	strex	r3, r2, [r1]
 8006dea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006dee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d1da      	bne.n	8006dac <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	3308      	adds	r3, #8
 8006dfc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dfe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006e00:	e853 3f00 	ldrex	r3, [r3]
 8006e04:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006e06:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006e08:	f023 0301 	bic.w	r3, r3, #1
 8006e0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	3308      	adds	r3, #8
 8006e16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006e1a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006e1e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e20:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006e22:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006e26:	e841 2300 	strex	r3, r2, [r1]
 8006e2a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006e2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d1e1      	bne.n	8006df6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	3308      	adds	r3, #8
 8006e38:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e3a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006e3c:	e853 3f00 	ldrex	r3, [r3]
 8006e40:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006e42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	3308      	adds	r3, #8
 8006e52:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006e56:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006e58:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e5a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006e5c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006e5e:	e841 2300 	strex	r3, r2, [r1]
 8006e62:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006e64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d1e3      	bne.n	8006e32 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2220      	movs	r2, #32
 8006e6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2200      	movs	r2, #0
 8006e76:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e80:	e853 3f00 	ldrex	r3, [r3]
 8006e84:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006e86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e88:	f023 0310 	bic.w	r3, r3, #16
 8006e8c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	461a      	mov	r2, r3
 8006e96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006e9a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006e9c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e9e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006ea0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006ea2:	e841 2300 	strex	r3, r2, [r1]
 8006ea6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006ea8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d1e4      	bne.n	8006e78 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f7fa fcf3 	bl	80018a0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2202      	movs	r2, #2
 8006ebe:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	1ad3      	subs	r3, r2, r3
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	4619      	mov	r1, r3
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f000 f939 	bl	800714c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006eda:	e119      	b.n	8007110 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006ee2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	f040 8112 	bne.w	8007110 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ef2:	69db      	ldr	r3, [r3, #28]
 8006ef4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ef8:	f040 810a 	bne.w	8007110 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2202      	movs	r2, #2
 8006f00:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006f08:	4619      	mov	r1, r3
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 f91e 	bl	800714c <HAL_UARTEx_RxEventCallback>
      return;
 8006f10:	e0fe      	b.n	8007110 <HAL_UART_IRQHandler+0x798>
 8006f12:	bf00      	nop
 8006f14:	40020010 	.word	0x40020010
 8006f18:	40020028 	.word	0x40020028
 8006f1c:	40020040 	.word	0x40020040
 8006f20:	40020058 	.word	0x40020058
 8006f24:	40020070 	.word	0x40020070
 8006f28:	40020088 	.word	0x40020088
 8006f2c:	400200a0 	.word	0x400200a0
 8006f30:	400200b8 	.word	0x400200b8
 8006f34:	40020410 	.word	0x40020410
 8006f38:	40020428 	.word	0x40020428
 8006f3c:	40020440 	.word	0x40020440
 8006f40:	40020458 	.word	0x40020458
 8006f44:	40020470 	.word	0x40020470
 8006f48:	40020488 	.word	0x40020488
 8006f4c:	400204a0 	.word	0x400204a0
 8006f50:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	1ad3      	subs	r3, r2, r3
 8006f64:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	f000 80cf 	beq.w	8007114 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8006f76:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	f000 80ca 	beq.w	8007114 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f88:	e853 3f00 	ldrex	r3, [r3]
 8006f8c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006f8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f94:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006fa2:	647b      	str	r3, [r7, #68]	@ 0x44
 8006fa4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006fa8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006faa:	e841 2300 	strex	r3, r2, [r1]
 8006fae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006fb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d1e4      	bne.n	8006f80 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	3308      	adds	r3, #8
 8006fbc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fc0:	e853 3f00 	ldrex	r3, [r3]
 8006fc4:	623b      	str	r3, [r7, #32]
   return(result);
 8006fc6:	6a3a      	ldr	r2, [r7, #32]
 8006fc8:	4b55      	ldr	r3, [pc, #340]	@ (8007120 <HAL_UART_IRQHandler+0x7a8>)
 8006fca:	4013      	ands	r3, r2
 8006fcc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	3308      	adds	r3, #8
 8006fd6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006fda:	633a      	str	r2, [r7, #48]	@ 0x30
 8006fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fde:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006fe0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006fe2:	e841 2300 	strex	r3, r2, [r1]
 8006fe6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d1e3      	bne.n	8006fb6 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2220      	movs	r2, #32
 8006ff2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2200      	movs	r2, #0
 8007000:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	e853 3f00 	ldrex	r3, [r3]
 800700e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f023 0310 	bic.w	r3, r3, #16
 8007016:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	461a      	mov	r2, r3
 8007020:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007024:	61fb      	str	r3, [r7, #28]
 8007026:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007028:	69b9      	ldr	r1, [r7, #24]
 800702a:	69fa      	ldr	r2, [r7, #28]
 800702c:	e841 2300 	strex	r3, r2, [r1]
 8007030:	617b      	str	r3, [r7, #20]
   return(result);
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d1e4      	bne.n	8007002 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2202      	movs	r2, #2
 800703c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800703e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007042:	4619      	mov	r1, r3
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f000 f881 	bl	800714c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800704a:	e063      	b.n	8007114 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800704c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007050:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007054:	2b00      	cmp	r3, #0
 8007056:	d00e      	beq.n	8007076 <HAL_UART_IRQHandler+0x6fe>
 8007058:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800705c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007060:	2b00      	cmp	r3, #0
 8007062:	d008      	beq.n	8007076 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800706c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f001 f83d 	bl	80080ee <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007074:	e051      	b.n	800711a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800707a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800707e:	2b00      	cmp	r3, #0
 8007080:	d014      	beq.n	80070ac <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007082:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007086:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800708a:	2b00      	cmp	r3, #0
 800708c:	d105      	bne.n	800709a <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800708e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007092:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007096:	2b00      	cmp	r3, #0
 8007098:	d008      	beq.n	80070ac <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d03a      	beq.n	8007118 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	4798      	blx	r3
    }
    return;
 80070aa:	e035      	b.n	8007118 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80070ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d009      	beq.n	80070cc <HAL_UART_IRQHandler+0x754>
 80070b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d003      	beq.n	80070cc <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f000 ffe7 	bl	8008098 <UART_EndTransmit_IT>
    return;
 80070ca:	e026      	b.n	800711a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80070cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d009      	beq.n	80070ec <HAL_UART_IRQHandler+0x774>
 80070d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070dc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d003      	beq.n	80070ec <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f001 f816 	bl	8008116 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80070ea:	e016      	b.n	800711a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80070ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d010      	beq.n	800711a <HAL_UART_IRQHandler+0x7a2>
 80070f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	da0c      	bge.n	800711a <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f000 fffe 	bl	8008102 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007106:	e008      	b.n	800711a <HAL_UART_IRQHandler+0x7a2>
      return;
 8007108:	bf00      	nop
 800710a:	e006      	b.n	800711a <HAL_UART_IRQHandler+0x7a2>
    return;
 800710c:	bf00      	nop
 800710e:	e004      	b.n	800711a <HAL_UART_IRQHandler+0x7a2>
      return;
 8007110:	bf00      	nop
 8007112:	e002      	b.n	800711a <HAL_UART_IRQHandler+0x7a2>
      return;
 8007114:	bf00      	nop
 8007116:	e000      	b.n	800711a <HAL_UART_IRQHandler+0x7a2>
    return;
 8007118:	bf00      	nop
  }
}
 800711a:	37e8      	adds	r7, #232	@ 0xe8
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}
 8007120:	effffffe 	.word	0xeffffffe

08007124 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007124:	b480      	push	{r7}
 8007126:	b083      	sub	sp, #12
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800712c:	bf00      	nop
 800712e:	370c      	adds	r7, #12
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr

08007138 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007138:	b480      	push	{r7}
 800713a:	b083      	sub	sp, #12
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007140:	bf00      	nop
 8007142:	370c      	adds	r7, #12
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr

0800714c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800714c:	b480      	push	{r7}
 800714e:	b083      	sub	sp, #12
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	460b      	mov	r3, r1
 8007156:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007158:	bf00      	nop
 800715a:	370c      	adds	r7, #12
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr

08007164 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007164:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007168:	b092      	sub	sp, #72	@ 0x48
 800716a:	af00      	add	r7, sp, #0
 800716c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800716e:	2300      	movs	r3, #0
 8007170:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	689a      	ldr	r2, [r3, #8]
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	691b      	ldr	r3, [r3, #16]
 800717c:	431a      	orrs	r2, r3
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	695b      	ldr	r3, [r3, #20]
 8007182:	431a      	orrs	r2, r3
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	69db      	ldr	r3, [r3, #28]
 8007188:	4313      	orrs	r3, r2
 800718a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	4bbe      	ldr	r3, [pc, #760]	@ (800748c <UART_SetConfig+0x328>)
 8007194:	4013      	ands	r3, r2
 8007196:	697a      	ldr	r2, [r7, #20]
 8007198:	6812      	ldr	r2, [r2, #0]
 800719a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800719c:	430b      	orrs	r3, r1
 800719e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	68da      	ldr	r2, [r3, #12]
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	430a      	orrs	r2, r1
 80071b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	699b      	ldr	r3, [r3, #24]
 80071ba:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4ab3      	ldr	r2, [pc, #716]	@ (8007490 <UART_SetConfig+0x32c>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d004      	beq.n	80071d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	6a1b      	ldr	r3, [r3, #32]
 80071ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80071cc:	4313      	orrs	r3, r2
 80071ce:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	689a      	ldr	r2, [r3, #8]
 80071d6:	4baf      	ldr	r3, [pc, #700]	@ (8007494 <UART_SetConfig+0x330>)
 80071d8:	4013      	ands	r3, r2
 80071da:	697a      	ldr	r2, [r7, #20]
 80071dc:	6812      	ldr	r2, [r2, #0]
 80071de:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80071e0:	430b      	orrs	r3, r1
 80071e2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071ea:	f023 010f 	bic.w	r1, r3, #15
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	430a      	orrs	r2, r1
 80071f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4aa6      	ldr	r2, [pc, #664]	@ (8007498 <UART_SetConfig+0x334>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d177      	bne.n	80072f4 <UART_SetConfig+0x190>
 8007204:	4ba5      	ldr	r3, [pc, #660]	@ (800749c <UART_SetConfig+0x338>)
 8007206:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007208:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800720c:	2b28      	cmp	r3, #40	@ 0x28
 800720e:	d86d      	bhi.n	80072ec <UART_SetConfig+0x188>
 8007210:	a201      	add	r2, pc, #4	@ (adr r2, 8007218 <UART_SetConfig+0xb4>)
 8007212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007216:	bf00      	nop
 8007218:	080072bd 	.word	0x080072bd
 800721c:	080072ed 	.word	0x080072ed
 8007220:	080072ed 	.word	0x080072ed
 8007224:	080072ed 	.word	0x080072ed
 8007228:	080072ed 	.word	0x080072ed
 800722c:	080072ed 	.word	0x080072ed
 8007230:	080072ed 	.word	0x080072ed
 8007234:	080072ed 	.word	0x080072ed
 8007238:	080072c5 	.word	0x080072c5
 800723c:	080072ed 	.word	0x080072ed
 8007240:	080072ed 	.word	0x080072ed
 8007244:	080072ed 	.word	0x080072ed
 8007248:	080072ed 	.word	0x080072ed
 800724c:	080072ed 	.word	0x080072ed
 8007250:	080072ed 	.word	0x080072ed
 8007254:	080072ed 	.word	0x080072ed
 8007258:	080072cd 	.word	0x080072cd
 800725c:	080072ed 	.word	0x080072ed
 8007260:	080072ed 	.word	0x080072ed
 8007264:	080072ed 	.word	0x080072ed
 8007268:	080072ed 	.word	0x080072ed
 800726c:	080072ed 	.word	0x080072ed
 8007270:	080072ed 	.word	0x080072ed
 8007274:	080072ed 	.word	0x080072ed
 8007278:	080072d5 	.word	0x080072d5
 800727c:	080072ed 	.word	0x080072ed
 8007280:	080072ed 	.word	0x080072ed
 8007284:	080072ed 	.word	0x080072ed
 8007288:	080072ed 	.word	0x080072ed
 800728c:	080072ed 	.word	0x080072ed
 8007290:	080072ed 	.word	0x080072ed
 8007294:	080072ed 	.word	0x080072ed
 8007298:	080072dd 	.word	0x080072dd
 800729c:	080072ed 	.word	0x080072ed
 80072a0:	080072ed 	.word	0x080072ed
 80072a4:	080072ed 	.word	0x080072ed
 80072a8:	080072ed 	.word	0x080072ed
 80072ac:	080072ed 	.word	0x080072ed
 80072b0:	080072ed 	.word	0x080072ed
 80072b4:	080072ed 	.word	0x080072ed
 80072b8:	080072e5 	.word	0x080072e5
 80072bc:	2301      	movs	r3, #1
 80072be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072c2:	e222      	b.n	800770a <UART_SetConfig+0x5a6>
 80072c4:	2304      	movs	r3, #4
 80072c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072ca:	e21e      	b.n	800770a <UART_SetConfig+0x5a6>
 80072cc:	2308      	movs	r3, #8
 80072ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072d2:	e21a      	b.n	800770a <UART_SetConfig+0x5a6>
 80072d4:	2310      	movs	r3, #16
 80072d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072da:	e216      	b.n	800770a <UART_SetConfig+0x5a6>
 80072dc:	2320      	movs	r3, #32
 80072de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072e2:	e212      	b.n	800770a <UART_SetConfig+0x5a6>
 80072e4:	2340      	movs	r3, #64	@ 0x40
 80072e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072ea:	e20e      	b.n	800770a <UART_SetConfig+0x5a6>
 80072ec:	2380      	movs	r3, #128	@ 0x80
 80072ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072f2:	e20a      	b.n	800770a <UART_SetConfig+0x5a6>
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a69      	ldr	r2, [pc, #420]	@ (80074a0 <UART_SetConfig+0x33c>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d130      	bne.n	8007360 <UART_SetConfig+0x1fc>
 80072fe:	4b67      	ldr	r3, [pc, #412]	@ (800749c <UART_SetConfig+0x338>)
 8007300:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007302:	f003 0307 	and.w	r3, r3, #7
 8007306:	2b05      	cmp	r3, #5
 8007308:	d826      	bhi.n	8007358 <UART_SetConfig+0x1f4>
 800730a:	a201      	add	r2, pc, #4	@ (adr r2, 8007310 <UART_SetConfig+0x1ac>)
 800730c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007310:	08007329 	.word	0x08007329
 8007314:	08007331 	.word	0x08007331
 8007318:	08007339 	.word	0x08007339
 800731c:	08007341 	.word	0x08007341
 8007320:	08007349 	.word	0x08007349
 8007324:	08007351 	.word	0x08007351
 8007328:	2300      	movs	r3, #0
 800732a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800732e:	e1ec      	b.n	800770a <UART_SetConfig+0x5a6>
 8007330:	2304      	movs	r3, #4
 8007332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007336:	e1e8      	b.n	800770a <UART_SetConfig+0x5a6>
 8007338:	2308      	movs	r3, #8
 800733a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800733e:	e1e4      	b.n	800770a <UART_SetConfig+0x5a6>
 8007340:	2310      	movs	r3, #16
 8007342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007346:	e1e0      	b.n	800770a <UART_SetConfig+0x5a6>
 8007348:	2320      	movs	r3, #32
 800734a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800734e:	e1dc      	b.n	800770a <UART_SetConfig+0x5a6>
 8007350:	2340      	movs	r3, #64	@ 0x40
 8007352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007356:	e1d8      	b.n	800770a <UART_SetConfig+0x5a6>
 8007358:	2380      	movs	r3, #128	@ 0x80
 800735a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800735e:	e1d4      	b.n	800770a <UART_SetConfig+0x5a6>
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a4f      	ldr	r2, [pc, #316]	@ (80074a4 <UART_SetConfig+0x340>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d130      	bne.n	80073cc <UART_SetConfig+0x268>
 800736a:	4b4c      	ldr	r3, [pc, #304]	@ (800749c <UART_SetConfig+0x338>)
 800736c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800736e:	f003 0307 	and.w	r3, r3, #7
 8007372:	2b05      	cmp	r3, #5
 8007374:	d826      	bhi.n	80073c4 <UART_SetConfig+0x260>
 8007376:	a201      	add	r2, pc, #4	@ (adr r2, 800737c <UART_SetConfig+0x218>)
 8007378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800737c:	08007395 	.word	0x08007395
 8007380:	0800739d 	.word	0x0800739d
 8007384:	080073a5 	.word	0x080073a5
 8007388:	080073ad 	.word	0x080073ad
 800738c:	080073b5 	.word	0x080073b5
 8007390:	080073bd 	.word	0x080073bd
 8007394:	2300      	movs	r3, #0
 8007396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800739a:	e1b6      	b.n	800770a <UART_SetConfig+0x5a6>
 800739c:	2304      	movs	r3, #4
 800739e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073a2:	e1b2      	b.n	800770a <UART_SetConfig+0x5a6>
 80073a4:	2308      	movs	r3, #8
 80073a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073aa:	e1ae      	b.n	800770a <UART_SetConfig+0x5a6>
 80073ac:	2310      	movs	r3, #16
 80073ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073b2:	e1aa      	b.n	800770a <UART_SetConfig+0x5a6>
 80073b4:	2320      	movs	r3, #32
 80073b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073ba:	e1a6      	b.n	800770a <UART_SetConfig+0x5a6>
 80073bc:	2340      	movs	r3, #64	@ 0x40
 80073be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073c2:	e1a2      	b.n	800770a <UART_SetConfig+0x5a6>
 80073c4:	2380      	movs	r3, #128	@ 0x80
 80073c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073ca:	e19e      	b.n	800770a <UART_SetConfig+0x5a6>
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a35      	ldr	r2, [pc, #212]	@ (80074a8 <UART_SetConfig+0x344>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d130      	bne.n	8007438 <UART_SetConfig+0x2d4>
 80073d6:	4b31      	ldr	r3, [pc, #196]	@ (800749c <UART_SetConfig+0x338>)
 80073d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073da:	f003 0307 	and.w	r3, r3, #7
 80073de:	2b05      	cmp	r3, #5
 80073e0:	d826      	bhi.n	8007430 <UART_SetConfig+0x2cc>
 80073e2:	a201      	add	r2, pc, #4	@ (adr r2, 80073e8 <UART_SetConfig+0x284>)
 80073e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073e8:	08007401 	.word	0x08007401
 80073ec:	08007409 	.word	0x08007409
 80073f0:	08007411 	.word	0x08007411
 80073f4:	08007419 	.word	0x08007419
 80073f8:	08007421 	.word	0x08007421
 80073fc:	08007429 	.word	0x08007429
 8007400:	2300      	movs	r3, #0
 8007402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007406:	e180      	b.n	800770a <UART_SetConfig+0x5a6>
 8007408:	2304      	movs	r3, #4
 800740a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800740e:	e17c      	b.n	800770a <UART_SetConfig+0x5a6>
 8007410:	2308      	movs	r3, #8
 8007412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007416:	e178      	b.n	800770a <UART_SetConfig+0x5a6>
 8007418:	2310      	movs	r3, #16
 800741a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800741e:	e174      	b.n	800770a <UART_SetConfig+0x5a6>
 8007420:	2320      	movs	r3, #32
 8007422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007426:	e170      	b.n	800770a <UART_SetConfig+0x5a6>
 8007428:	2340      	movs	r3, #64	@ 0x40
 800742a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800742e:	e16c      	b.n	800770a <UART_SetConfig+0x5a6>
 8007430:	2380      	movs	r3, #128	@ 0x80
 8007432:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007436:	e168      	b.n	800770a <UART_SetConfig+0x5a6>
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a1b      	ldr	r2, [pc, #108]	@ (80074ac <UART_SetConfig+0x348>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d142      	bne.n	80074c8 <UART_SetConfig+0x364>
 8007442:	4b16      	ldr	r3, [pc, #88]	@ (800749c <UART_SetConfig+0x338>)
 8007444:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007446:	f003 0307 	and.w	r3, r3, #7
 800744a:	2b05      	cmp	r3, #5
 800744c:	d838      	bhi.n	80074c0 <UART_SetConfig+0x35c>
 800744e:	a201      	add	r2, pc, #4	@ (adr r2, 8007454 <UART_SetConfig+0x2f0>)
 8007450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007454:	0800746d 	.word	0x0800746d
 8007458:	08007475 	.word	0x08007475
 800745c:	0800747d 	.word	0x0800747d
 8007460:	08007485 	.word	0x08007485
 8007464:	080074b1 	.word	0x080074b1
 8007468:	080074b9 	.word	0x080074b9
 800746c:	2300      	movs	r3, #0
 800746e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007472:	e14a      	b.n	800770a <UART_SetConfig+0x5a6>
 8007474:	2304      	movs	r3, #4
 8007476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800747a:	e146      	b.n	800770a <UART_SetConfig+0x5a6>
 800747c:	2308      	movs	r3, #8
 800747e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007482:	e142      	b.n	800770a <UART_SetConfig+0x5a6>
 8007484:	2310      	movs	r3, #16
 8007486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800748a:	e13e      	b.n	800770a <UART_SetConfig+0x5a6>
 800748c:	cfff69f3 	.word	0xcfff69f3
 8007490:	58000c00 	.word	0x58000c00
 8007494:	11fff4ff 	.word	0x11fff4ff
 8007498:	40011000 	.word	0x40011000
 800749c:	58024400 	.word	0x58024400
 80074a0:	40004400 	.word	0x40004400
 80074a4:	40004800 	.word	0x40004800
 80074a8:	40004c00 	.word	0x40004c00
 80074ac:	40005000 	.word	0x40005000
 80074b0:	2320      	movs	r3, #32
 80074b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074b6:	e128      	b.n	800770a <UART_SetConfig+0x5a6>
 80074b8:	2340      	movs	r3, #64	@ 0x40
 80074ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074be:	e124      	b.n	800770a <UART_SetConfig+0x5a6>
 80074c0:	2380      	movs	r3, #128	@ 0x80
 80074c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074c6:	e120      	b.n	800770a <UART_SetConfig+0x5a6>
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4acb      	ldr	r2, [pc, #812]	@ (80077fc <UART_SetConfig+0x698>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d176      	bne.n	80075c0 <UART_SetConfig+0x45c>
 80074d2:	4bcb      	ldr	r3, [pc, #812]	@ (8007800 <UART_SetConfig+0x69c>)
 80074d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80074da:	2b28      	cmp	r3, #40	@ 0x28
 80074dc:	d86c      	bhi.n	80075b8 <UART_SetConfig+0x454>
 80074de:	a201      	add	r2, pc, #4	@ (adr r2, 80074e4 <UART_SetConfig+0x380>)
 80074e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074e4:	08007589 	.word	0x08007589
 80074e8:	080075b9 	.word	0x080075b9
 80074ec:	080075b9 	.word	0x080075b9
 80074f0:	080075b9 	.word	0x080075b9
 80074f4:	080075b9 	.word	0x080075b9
 80074f8:	080075b9 	.word	0x080075b9
 80074fc:	080075b9 	.word	0x080075b9
 8007500:	080075b9 	.word	0x080075b9
 8007504:	08007591 	.word	0x08007591
 8007508:	080075b9 	.word	0x080075b9
 800750c:	080075b9 	.word	0x080075b9
 8007510:	080075b9 	.word	0x080075b9
 8007514:	080075b9 	.word	0x080075b9
 8007518:	080075b9 	.word	0x080075b9
 800751c:	080075b9 	.word	0x080075b9
 8007520:	080075b9 	.word	0x080075b9
 8007524:	08007599 	.word	0x08007599
 8007528:	080075b9 	.word	0x080075b9
 800752c:	080075b9 	.word	0x080075b9
 8007530:	080075b9 	.word	0x080075b9
 8007534:	080075b9 	.word	0x080075b9
 8007538:	080075b9 	.word	0x080075b9
 800753c:	080075b9 	.word	0x080075b9
 8007540:	080075b9 	.word	0x080075b9
 8007544:	080075a1 	.word	0x080075a1
 8007548:	080075b9 	.word	0x080075b9
 800754c:	080075b9 	.word	0x080075b9
 8007550:	080075b9 	.word	0x080075b9
 8007554:	080075b9 	.word	0x080075b9
 8007558:	080075b9 	.word	0x080075b9
 800755c:	080075b9 	.word	0x080075b9
 8007560:	080075b9 	.word	0x080075b9
 8007564:	080075a9 	.word	0x080075a9
 8007568:	080075b9 	.word	0x080075b9
 800756c:	080075b9 	.word	0x080075b9
 8007570:	080075b9 	.word	0x080075b9
 8007574:	080075b9 	.word	0x080075b9
 8007578:	080075b9 	.word	0x080075b9
 800757c:	080075b9 	.word	0x080075b9
 8007580:	080075b9 	.word	0x080075b9
 8007584:	080075b1 	.word	0x080075b1
 8007588:	2301      	movs	r3, #1
 800758a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800758e:	e0bc      	b.n	800770a <UART_SetConfig+0x5a6>
 8007590:	2304      	movs	r3, #4
 8007592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007596:	e0b8      	b.n	800770a <UART_SetConfig+0x5a6>
 8007598:	2308      	movs	r3, #8
 800759a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800759e:	e0b4      	b.n	800770a <UART_SetConfig+0x5a6>
 80075a0:	2310      	movs	r3, #16
 80075a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075a6:	e0b0      	b.n	800770a <UART_SetConfig+0x5a6>
 80075a8:	2320      	movs	r3, #32
 80075aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075ae:	e0ac      	b.n	800770a <UART_SetConfig+0x5a6>
 80075b0:	2340      	movs	r3, #64	@ 0x40
 80075b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075b6:	e0a8      	b.n	800770a <UART_SetConfig+0x5a6>
 80075b8:	2380      	movs	r3, #128	@ 0x80
 80075ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075be:	e0a4      	b.n	800770a <UART_SetConfig+0x5a6>
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a8f      	ldr	r2, [pc, #572]	@ (8007804 <UART_SetConfig+0x6a0>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d130      	bne.n	800762c <UART_SetConfig+0x4c8>
 80075ca:	4b8d      	ldr	r3, [pc, #564]	@ (8007800 <UART_SetConfig+0x69c>)
 80075cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075ce:	f003 0307 	and.w	r3, r3, #7
 80075d2:	2b05      	cmp	r3, #5
 80075d4:	d826      	bhi.n	8007624 <UART_SetConfig+0x4c0>
 80075d6:	a201      	add	r2, pc, #4	@ (adr r2, 80075dc <UART_SetConfig+0x478>)
 80075d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075dc:	080075f5 	.word	0x080075f5
 80075e0:	080075fd 	.word	0x080075fd
 80075e4:	08007605 	.word	0x08007605
 80075e8:	0800760d 	.word	0x0800760d
 80075ec:	08007615 	.word	0x08007615
 80075f0:	0800761d 	.word	0x0800761d
 80075f4:	2300      	movs	r3, #0
 80075f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075fa:	e086      	b.n	800770a <UART_SetConfig+0x5a6>
 80075fc:	2304      	movs	r3, #4
 80075fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007602:	e082      	b.n	800770a <UART_SetConfig+0x5a6>
 8007604:	2308      	movs	r3, #8
 8007606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800760a:	e07e      	b.n	800770a <UART_SetConfig+0x5a6>
 800760c:	2310      	movs	r3, #16
 800760e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007612:	e07a      	b.n	800770a <UART_SetConfig+0x5a6>
 8007614:	2320      	movs	r3, #32
 8007616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800761a:	e076      	b.n	800770a <UART_SetConfig+0x5a6>
 800761c:	2340      	movs	r3, #64	@ 0x40
 800761e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007622:	e072      	b.n	800770a <UART_SetConfig+0x5a6>
 8007624:	2380      	movs	r3, #128	@ 0x80
 8007626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800762a:	e06e      	b.n	800770a <UART_SetConfig+0x5a6>
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a75      	ldr	r2, [pc, #468]	@ (8007808 <UART_SetConfig+0x6a4>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d130      	bne.n	8007698 <UART_SetConfig+0x534>
 8007636:	4b72      	ldr	r3, [pc, #456]	@ (8007800 <UART_SetConfig+0x69c>)
 8007638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800763a:	f003 0307 	and.w	r3, r3, #7
 800763e:	2b05      	cmp	r3, #5
 8007640:	d826      	bhi.n	8007690 <UART_SetConfig+0x52c>
 8007642:	a201      	add	r2, pc, #4	@ (adr r2, 8007648 <UART_SetConfig+0x4e4>)
 8007644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007648:	08007661 	.word	0x08007661
 800764c:	08007669 	.word	0x08007669
 8007650:	08007671 	.word	0x08007671
 8007654:	08007679 	.word	0x08007679
 8007658:	08007681 	.word	0x08007681
 800765c:	08007689 	.word	0x08007689
 8007660:	2300      	movs	r3, #0
 8007662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007666:	e050      	b.n	800770a <UART_SetConfig+0x5a6>
 8007668:	2304      	movs	r3, #4
 800766a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800766e:	e04c      	b.n	800770a <UART_SetConfig+0x5a6>
 8007670:	2308      	movs	r3, #8
 8007672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007676:	e048      	b.n	800770a <UART_SetConfig+0x5a6>
 8007678:	2310      	movs	r3, #16
 800767a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800767e:	e044      	b.n	800770a <UART_SetConfig+0x5a6>
 8007680:	2320      	movs	r3, #32
 8007682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007686:	e040      	b.n	800770a <UART_SetConfig+0x5a6>
 8007688:	2340      	movs	r3, #64	@ 0x40
 800768a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800768e:	e03c      	b.n	800770a <UART_SetConfig+0x5a6>
 8007690:	2380      	movs	r3, #128	@ 0x80
 8007692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007696:	e038      	b.n	800770a <UART_SetConfig+0x5a6>
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a5b      	ldr	r2, [pc, #364]	@ (800780c <UART_SetConfig+0x6a8>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d130      	bne.n	8007704 <UART_SetConfig+0x5a0>
 80076a2:	4b57      	ldr	r3, [pc, #348]	@ (8007800 <UART_SetConfig+0x69c>)
 80076a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076a6:	f003 0307 	and.w	r3, r3, #7
 80076aa:	2b05      	cmp	r3, #5
 80076ac:	d826      	bhi.n	80076fc <UART_SetConfig+0x598>
 80076ae:	a201      	add	r2, pc, #4	@ (adr r2, 80076b4 <UART_SetConfig+0x550>)
 80076b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076b4:	080076cd 	.word	0x080076cd
 80076b8:	080076d5 	.word	0x080076d5
 80076bc:	080076dd 	.word	0x080076dd
 80076c0:	080076e5 	.word	0x080076e5
 80076c4:	080076ed 	.word	0x080076ed
 80076c8:	080076f5 	.word	0x080076f5
 80076cc:	2302      	movs	r3, #2
 80076ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076d2:	e01a      	b.n	800770a <UART_SetConfig+0x5a6>
 80076d4:	2304      	movs	r3, #4
 80076d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076da:	e016      	b.n	800770a <UART_SetConfig+0x5a6>
 80076dc:	2308      	movs	r3, #8
 80076de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076e2:	e012      	b.n	800770a <UART_SetConfig+0x5a6>
 80076e4:	2310      	movs	r3, #16
 80076e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076ea:	e00e      	b.n	800770a <UART_SetConfig+0x5a6>
 80076ec:	2320      	movs	r3, #32
 80076ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076f2:	e00a      	b.n	800770a <UART_SetConfig+0x5a6>
 80076f4:	2340      	movs	r3, #64	@ 0x40
 80076f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076fa:	e006      	b.n	800770a <UART_SetConfig+0x5a6>
 80076fc:	2380      	movs	r3, #128	@ 0x80
 80076fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007702:	e002      	b.n	800770a <UART_SetConfig+0x5a6>
 8007704:	2380      	movs	r3, #128	@ 0x80
 8007706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4a3f      	ldr	r2, [pc, #252]	@ (800780c <UART_SetConfig+0x6a8>)
 8007710:	4293      	cmp	r3, r2
 8007712:	f040 80f8 	bne.w	8007906 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007716:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800771a:	2b20      	cmp	r3, #32
 800771c:	dc46      	bgt.n	80077ac <UART_SetConfig+0x648>
 800771e:	2b02      	cmp	r3, #2
 8007720:	f2c0 8082 	blt.w	8007828 <UART_SetConfig+0x6c4>
 8007724:	3b02      	subs	r3, #2
 8007726:	2b1e      	cmp	r3, #30
 8007728:	d87e      	bhi.n	8007828 <UART_SetConfig+0x6c4>
 800772a:	a201      	add	r2, pc, #4	@ (adr r2, 8007730 <UART_SetConfig+0x5cc>)
 800772c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007730:	080077b3 	.word	0x080077b3
 8007734:	08007829 	.word	0x08007829
 8007738:	080077bb 	.word	0x080077bb
 800773c:	08007829 	.word	0x08007829
 8007740:	08007829 	.word	0x08007829
 8007744:	08007829 	.word	0x08007829
 8007748:	080077cb 	.word	0x080077cb
 800774c:	08007829 	.word	0x08007829
 8007750:	08007829 	.word	0x08007829
 8007754:	08007829 	.word	0x08007829
 8007758:	08007829 	.word	0x08007829
 800775c:	08007829 	.word	0x08007829
 8007760:	08007829 	.word	0x08007829
 8007764:	08007829 	.word	0x08007829
 8007768:	080077db 	.word	0x080077db
 800776c:	08007829 	.word	0x08007829
 8007770:	08007829 	.word	0x08007829
 8007774:	08007829 	.word	0x08007829
 8007778:	08007829 	.word	0x08007829
 800777c:	08007829 	.word	0x08007829
 8007780:	08007829 	.word	0x08007829
 8007784:	08007829 	.word	0x08007829
 8007788:	08007829 	.word	0x08007829
 800778c:	08007829 	.word	0x08007829
 8007790:	08007829 	.word	0x08007829
 8007794:	08007829 	.word	0x08007829
 8007798:	08007829 	.word	0x08007829
 800779c:	08007829 	.word	0x08007829
 80077a0:	08007829 	.word	0x08007829
 80077a4:	08007829 	.word	0x08007829
 80077a8:	0800781b 	.word	0x0800781b
 80077ac:	2b40      	cmp	r3, #64	@ 0x40
 80077ae:	d037      	beq.n	8007820 <UART_SetConfig+0x6bc>
 80077b0:	e03a      	b.n	8007828 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80077b2:	f7fd fa0b 	bl	8004bcc <HAL_RCCEx_GetD3PCLK1Freq>
 80077b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80077b8:	e03c      	b.n	8007834 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80077ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80077be:	4618      	mov	r0, r3
 80077c0:	f7fd fa1a 	bl	8004bf8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80077c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077c8:	e034      	b.n	8007834 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80077ca:	f107 0318 	add.w	r3, r7, #24
 80077ce:	4618      	mov	r0, r3
 80077d0:	f7fd fb66 	bl	8004ea0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80077d4:	69fb      	ldr	r3, [r7, #28]
 80077d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077d8:	e02c      	b.n	8007834 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80077da:	4b09      	ldr	r3, [pc, #36]	@ (8007800 <UART_SetConfig+0x69c>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f003 0320 	and.w	r3, r3, #32
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d016      	beq.n	8007814 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80077e6:	4b06      	ldr	r3, [pc, #24]	@ (8007800 <UART_SetConfig+0x69c>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	08db      	lsrs	r3, r3, #3
 80077ec:	f003 0303 	and.w	r3, r3, #3
 80077f0:	4a07      	ldr	r2, [pc, #28]	@ (8007810 <UART_SetConfig+0x6ac>)
 80077f2:	fa22 f303 	lsr.w	r3, r2, r3
 80077f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80077f8:	e01c      	b.n	8007834 <UART_SetConfig+0x6d0>
 80077fa:	bf00      	nop
 80077fc:	40011400 	.word	0x40011400
 8007800:	58024400 	.word	0x58024400
 8007804:	40007800 	.word	0x40007800
 8007808:	40007c00 	.word	0x40007c00
 800780c:	58000c00 	.word	0x58000c00
 8007810:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007814:	4b9d      	ldr	r3, [pc, #628]	@ (8007a8c <UART_SetConfig+0x928>)
 8007816:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007818:	e00c      	b.n	8007834 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800781a:	4b9d      	ldr	r3, [pc, #628]	@ (8007a90 <UART_SetConfig+0x92c>)
 800781c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800781e:	e009      	b.n	8007834 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007820:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007824:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007826:	e005      	b.n	8007834 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007828:	2300      	movs	r3, #0
 800782a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800782c:	2301      	movs	r3, #1
 800782e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007832:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007834:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007836:	2b00      	cmp	r3, #0
 8007838:	f000 81de 	beq.w	8007bf8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007840:	4a94      	ldr	r2, [pc, #592]	@ (8007a94 <UART_SetConfig+0x930>)
 8007842:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007846:	461a      	mov	r2, r3
 8007848:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800784a:	fbb3 f3f2 	udiv	r3, r3, r2
 800784e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	685a      	ldr	r2, [r3, #4]
 8007854:	4613      	mov	r3, r2
 8007856:	005b      	lsls	r3, r3, #1
 8007858:	4413      	add	r3, r2
 800785a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800785c:	429a      	cmp	r2, r3
 800785e:	d305      	bcc.n	800786c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007866:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007868:	429a      	cmp	r2, r3
 800786a:	d903      	bls.n	8007874 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800786c:	2301      	movs	r3, #1
 800786e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007872:	e1c1      	b.n	8007bf8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007874:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007876:	2200      	movs	r2, #0
 8007878:	60bb      	str	r3, [r7, #8]
 800787a:	60fa      	str	r2, [r7, #12]
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007880:	4a84      	ldr	r2, [pc, #528]	@ (8007a94 <UART_SetConfig+0x930>)
 8007882:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007886:	b29b      	uxth	r3, r3
 8007888:	2200      	movs	r2, #0
 800788a:	603b      	str	r3, [r7, #0]
 800788c:	607a      	str	r2, [r7, #4]
 800788e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007892:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007896:	f7f8 fd1f 	bl	80002d8 <__aeabi_uldivmod>
 800789a:	4602      	mov	r2, r0
 800789c:	460b      	mov	r3, r1
 800789e:	4610      	mov	r0, r2
 80078a0:	4619      	mov	r1, r3
 80078a2:	f04f 0200 	mov.w	r2, #0
 80078a6:	f04f 0300 	mov.w	r3, #0
 80078aa:	020b      	lsls	r3, r1, #8
 80078ac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80078b0:	0202      	lsls	r2, r0, #8
 80078b2:	6979      	ldr	r1, [r7, #20]
 80078b4:	6849      	ldr	r1, [r1, #4]
 80078b6:	0849      	lsrs	r1, r1, #1
 80078b8:	2000      	movs	r0, #0
 80078ba:	460c      	mov	r4, r1
 80078bc:	4605      	mov	r5, r0
 80078be:	eb12 0804 	adds.w	r8, r2, r4
 80078c2:	eb43 0905 	adc.w	r9, r3, r5
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	2200      	movs	r2, #0
 80078cc:	469a      	mov	sl, r3
 80078ce:	4693      	mov	fp, r2
 80078d0:	4652      	mov	r2, sl
 80078d2:	465b      	mov	r3, fp
 80078d4:	4640      	mov	r0, r8
 80078d6:	4649      	mov	r1, r9
 80078d8:	f7f8 fcfe 	bl	80002d8 <__aeabi_uldivmod>
 80078dc:	4602      	mov	r2, r0
 80078de:	460b      	mov	r3, r1
 80078e0:	4613      	mov	r3, r2
 80078e2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80078e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80078ea:	d308      	bcc.n	80078fe <UART_SetConfig+0x79a>
 80078ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80078f2:	d204      	bcs.n	80078fe <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80078fa:	60da      	str	r2, [r3, #12]
 80078fc:	e17c      	b.n	8007bf8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80078fe:	2301      	movs	r3, #1
 8007900:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007904:	e178      	b.n	8007bf8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	69db      	ldr	r3, [r3, #28]
 800790a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800790e:	f040 80c5 	bne.w	8007a9c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007912:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007916:	2b20      	cmp	r3, #32
 8007918:	dc48      	bgt.n	80079ac <UART_SetConfig+0x848>
 800791a:	2b00      	cmp	r3, #0
 800791c:	db7b      	blt.n	8007a16 <UART_SetConfig+0x8b2>
 800791e:	2b20      	cmp	r3, #32
 8007920:	d879      	bhi.n	8007a16 <UART_SetConfig+0x8b2>
 8007922:	a201      	add	r2, pc, #4	@ (adr r2, 8007928 <UART_SetConfig+0x7c4>)
 8007924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007928:	080079b3 	.word	0x080079b3
 800792c:	080079bb 	.word	0x080079bb
 8007930:	08007a17 	.word	0x08007a17
 8007934:	08007a17 	.word	0x08007a17
 8007938:	080079c3 	.word	0x080079c3
 800793c:	08007a17 	.word	0x08007a17
 8007940:	08007a17 	.word	0x08007a17
 8007944:	08007a17 	.word	0x08007a17
 8007948:	080079d3 	.word	0x080079d3
 800794c:	08007a17 	.word	0x08007a17
 8007950:	08007a17 	.word	0x08007a17
 8007954:	08007a17 	.word	0x08007a17
 8007958:	08007a17 	.word	0x08007a17
 800795c:	08007a17 	.word	0x08007a17
 8007960:	08007a17 	.word	0x08007a17
 8007964:	08007a17 	.word	0x08007a17
 8007968:	080079e3 	.word	0x080079e3
 800796c:	08007a17 	.word	0x08007a17
 8007970:	08007a17 	.word	0x08007a17
 8007974:	08007a17 	.word	0x08007a17
 8007978:	08007a17 	.word	0x08007a17
 800797c:	08007a17 	.word	0x08007a17
 8007980:	08007a17 	.word	0x08007a17
 8007984:	08007a17 	.word	0x08007a17
 8007988:	08007a17 	.word	0x08007a17
 800798c:	08007a17 	.word	0x08007a17
 8007990:	08007a17 	.word	0x08007a17
 8007994:	08007a17 	.word	0x08007a17
 8007998:	08007a17 	.word	0x08007a17
 800799c:	08007a17 	.word	0x08007a17
 80079a0:	08007a17 	.word	0x08007a17
 80079a4:	08007a17 	.word	0x08007a17
 80079a8:	08007a09 	.word	0x08007a09
 80079ac:	2b40      	cmp	r3, #64	@ 0x40
 80079ae:	d02e      	beq.n	8007a0e <UART_SetConfig+0x8aa>
 80079b0:	e031      	b.n	8007a16 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079b2:	f7fb fed5 	bl	8003760 <HAL_RCC_GetPCLK1Freq>
 80079b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80079b8:	e033      	b.n	8007a22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80079ba:	f7fb fee7 	bl	800378c <HAL_RCC_GetPCLK2Freq>
 80079be:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80079c0:	e02f      	b.n	8007a22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80079c6:	4618      	mov	r0, r3
 80079c8:	f7fd f916 	bl	8004bf8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80079cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079d0:	e027      	b.n	8007a22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079d2:	f107 0318 	add.w	r3, r7, #24
 80079d6:	4618      	mov	r0, r3
 80079d8:	f7fd fa62 	bl	8004ea0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80079dc:	69fb      	ldr	r3, [r7, #28]
 80079de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079e0:	e01f      	b.n	8007a22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079e2:	4b2d      	ldr	r3, [pc, #180]	@ (8007a98 <UART_SetConfig+0x934>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f003 0320 	and.w	r3, r3, #32
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d009      	beq.n	8007a02 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80079ee:	4b2a      	ldr	r3, [pc, #168]	@ (8007a98 <UART_SetConfig+0x934>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	08db      	lsrs	r3, r3, #3
 80079f4:	f003 0303 	and.w	r3, r3, #3
 80079f8:	4a24      	ldr	r2, [pc, #144]	@ (8007a8c <UART_SetConfig+0x928>)
 80079fa:	fa22 f303 	lsr.w	r3, r2, r3
 80079fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007a00:	e00f      	b.n	8007a22 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007a02:	4b22      	ldr	r3, [pc, #136]	@ (8007a8c <UART_SetConfig+0x928>)
 8007a04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a06:	e00c      	b.n	8007a22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007a08:	4b21      	ldr	r3, [pc, #132]	@ (8007a90 <UART_SetConfig+0x92c>)
 8007a0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a0c:	e009      	b.n	8007a22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a14:	e005      	b.n	8007a22 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007a16:	2300      	movs	r3, #0
 8007a18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007a20:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007a22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	f000 80e7 	beq.w	8007bf8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a2e:	4a19      	ldr	r2, [pc, #100]	@ (8007a94 <UART_SetConfig+0x930>)
 8007a30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a34:	461a      	mov	r2, r3
 8007a36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a38:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a3c:	005a      	lsls	r2, r3, #1
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	085b      	lsrs	r3, r3, #1
 8007a44:	441a      	add	r2, r3
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a4e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a52:	2b0f      	cmp	r3, #15
 8007a54:	d916      	bls.n	8007a84 <UART_SetConfig+0x920>
 8007a56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a5c:	d212      	bcs.n	8007a84 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007a5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	f023 030f 	bic.w	r3, r3, #15
 8007a66:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a6a:	085b      	lsrs	r3, r3, #1
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	f003 0307 	and.w	r3, r3, #7
 8007a72:	b29a      	uxth	r2, r3
 8007a74:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007a76:	4313      	orrs	r3, r2
 8007a78:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007a80:	60da      	str	r2, [r3, #12]
 8007a82:	e0b9      	b.n	8007bf8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007a84:	2301      	movs	r3, #1
 8007a86:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007a8a:	e0b5      	b.n	8007bf8 <UART_SetConfig+0xa94>
 8007a8c:	03d09000 	.word	0x03d09000
 8007a90:	003d0900 	.word	0x003d0900
 8007a94:	08008d18 	.word	0x08008d18
 8007a98:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007a9c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007aa0:	2b20      	cmp	r3, #32
 8007aa2:	dc49      	bgt.n	8007b38 <UART_SetConfig+0x9d4>
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	db7c      	blt.n	8007ba2 <UART_SetConfig+0xa3e>
 8007aa8:	2b20      	cmp	r3, #32
 8007aaa:	d87a      	bhi.n	8007ba2 <UART_SetConfig+0xa3e>
 8007aac:	a201      	add	r2, pc, #4	@ (adr r2, 8007ab4 <UART_SetConfig+0x950>)
 8007aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ab2:	bf00      	nop
 8007ab4:	08007b3f 	.word	0x08007b3f
 8007ab8:	08007b47 	.word	0x08007b47
 8007abc:	08007ba3 	.word	0x08007ba3
 8007ac0:	08007ba3 	.word	0x08007ba3
 8007ac4:	08007b4f 	.word	0x08007b4f
 8007ac8:	08007ba3 	.word	0x08007ba3
 8007acc:	08007ba3 	.word	0x08007ba3
 8007ad0:	08007ba3 	.word	0x08007ba3
 8007ad4:	08007b5f 	.word	0x08007b5f
 8007ad8:	08007ba3 	.word	0x08007ba3
 8007adc:	08007ba3 	.word	0x08007ba3
 8007ae0:	08007ba3 	.word	0x08007ba3
 8007ae4:	08007ba3 	.word	0x08007ba3
 8007ae8:	08007ba3 	.word	0x08007ba3
 8007aec:	08007ba3 	.word	0x08007ba3
 8007af0:	08007ba3 	.word	0x08007ba3
 8007af4:	08007b6f 	.word	0x08007b6f
 8007af8:	08007ba3 	.word	0x08007ba3
 8007afc:	08007ba3 	.word	0x08007ba3
 8007b00:	08007ba3 	.word	0x08007ba3
 8007b04:	08007ba3 	.word	0x08007ba3
 8007b08:	08007ba3 	.word	0x08007ba3
 8007b0c:	08007ba3 	.word	0x08007ba3
 8007b10:	08007ba3 	.word	0x08007ba3
 8007b14:	08007ba3 	.word	0x08007ba3
 8007b18:	08007ba3 	.word	0x08007ba3
 8007b1c:	08007ba3 	.word	0x08007ba3
 8007b20:	08007ba3 	.word	0x08007ba3
 8007b24:	08007ba3 	.word	0x08007ba3
 8007b28:	08007ba3 	.word	0x08007ba3
 8007b2c:	08007ba3 	.word	0x08007ba3
 8007b30:	08007ba3 	.word	0x08007ba3
 8007b34:	08007b95 	.word	0x08007b95
 8007b38:	2b40      	cmp	r3, #64	@ 0x40
 8007b3a:	d02e      	beq.n	8007b9a <UART_SetConfig+0xa36>
 8007b3c:	e031      	b.n	8007ba2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b3e:	f7fb fe0f 	bl	8003760 <HAL_RCC_GetPCLK1Freq>
 8007b42:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007b44:	e033      	b.n	8007bae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b46:	f7fb fe21 	bl	800378c <HAL_RCC_GetPCLK2Freq>
 8007b4a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007b4c:	e02f      	b.n	8007bae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007b52:	4618      	mov	r0, r3
 8007b54:	f7fd f850 	bl	8004bf8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b5c:	e027      	b.n	8007bae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b5e:	f107 0318 	add.w	r3, r7, #24
 8007b62:	4618      	mov	r0, r3
 8007b64:	f7fd f99c 	bl	8004ea0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007b68:	69fb      	ldr	r3, [r7, #28]
 8007b6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b6c:	e01f      	b.n	8007bae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b6e:	4b2d      	ldr	r3, [pc, #180]	@ (8007c24 <UART_SetConfig+0xac0>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f003 0320 	and.w	r3, r3, #32
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d009      	beq.n	8007b8e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007b7a:	4b2a      	ldr	r3, [pc, #168]	@ (8007c24 <UART_SetConfig+0xac0>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	08db      	lsrs	r3, r3, #3
 8007b80:	f003 0303 	and.w	r3, r3, #3
 8007b84:	4a28      	ldr	r2, [pc, #160]	@ (8007c28 <UART_SetConfig+0xac4>)
 8007b86:	fa22 f303 	lsr.w	r3, r2, r3
 8007b8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007b8c:	e00f      	b.n	8007bae <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007b8e:	4b26      	ldr	r3, [pc, #152]	@ (8007c28 <UART_SetConfig+0xac4>)
 8007b90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b92:	e00c      	b.n	8007bae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007b94:	4b25      	ldr	r3, [pc, #148]	@ (8007c2c <UART_SetConfig+0xac8>)
 8007b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b98:	e009      	b.n	8007bae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ba0:	e005      	b.n	8007bae <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007bac:	bf00      	nop
    }

    if (pclk != 0U)
 8007bae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d021      	beq.n	8007bf8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bb8:	4a1d      	ldr	r2, [pc, #116]	@ (8007c30 <UART_SetConfig+0xacc>)
 8007bba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007bbe:	461a      	mov	r2, r3
 8007bc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007bc2:	fbb3 f2f2 	udiv	r2, r3, r2
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	085b      	lsrs	r3, r3, #1
 8007bcc:	441a      	add	r2, r3
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bd6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007bd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bda:	2b0f      	cmp	r3, #15
 8007bdc:	d909      	bls.n	8007bf2 <UART_SetConfig+0xa8e>
 8007bde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007be0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007be4:	d205      	bcs.n	8007bf2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007be6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007be8:	b29a      	uxth	r2, r3
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	60da      	str	r2, [r3, #12]
 8007bf0:	e002      	b.n	8007bf8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	2201      	movs	r2, #1
 8007c04:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	2200      	movs	r2, #0
 8007c12:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007c14:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3748      	adds	r7, #72	@ 0x48
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c22:	bf00      	nop
 8007c24:	58024400 	.word	0x58024400
 8007c28:	03d09000 	.word	0x03d09000
 8007c2c:	003d0900 	.word	0x003d0900
 8007c30:	08008d18 	.word	0x08008d18

08007c34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b083      	sub	sp, #12
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c40:	f003 0308 	and.w	r3, r3, #8
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d00a      	beq.n	8007c5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	430a      	orrs	r2, r1
 8007c5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c62:	f003 0301 	and.w	r3, r3, #1
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d00a      	beq.n	8007c80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	430a      	orrs	r2, r1
 8007c7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c84:	f003 0302 	and.w	r3, r3, #2
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d00a      	beq.n	8007ca2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	430a      	orrs	r2, r1
 8007ca0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ca6:	f003 0304 	and.w	r3, r3, #4
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d00a      	beq.n	8007cc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	685b      	ldr	r3, [r3, #4]
 8007cb4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	430a      	orrs	r2, r1
 8007cc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cc8:	f003 0310 	and.w	r3, r3, #16
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d00a      	beq.n	8007ce6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	430a      	orrs	r2, r1
 8007ce4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cea:	f003 0320 	and.w	r3, r3, #32
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d00a      	beq.n	8007d08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	689b      	ldr	r3, [r3, #8]
 8007cf8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	430a      	orrs	r2, r1
 8007d06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d01a      	beq.n	8007d4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	430a      	orrs	r2, r1
 8007d28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d32:	d10a      	bne.n	8007d4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	430a      	orrs	r2, r1
 8007d48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d00a      	beq.n	8007d6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	430a      	orrs	r2, r1
 8007d6a:	605a      	str	r2, [r3, #4]
  }
}
 8007d6c:	bf00      	nop
 8007d6e:	370c      	adds	r7, #12
 8007d70:	46bd      	mov	sp, r7
 8007d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d76:	4770      	bx	lr

08007d78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b098      	sub	sp, #96	@ 0x60
 8007d7c:	af02      	add	r7, sp, #8
 8007d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2200      	movs	r2, #0
 8007d84:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007d88:	f7f9 fbc6 	bl	8001518 <HAL_GetTick>
 8007d8c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f003 0308 	and.w	r3, r3, #8
 8007d98:	2b08      	cmp	r3, #8
 8007d9a:	d12f      	bne.n	8007dfc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d9c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007da0:	9300      	str	r3, [sp, #0]
 8007da2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007da4:	2200      	movs	r2, #0
 8007da6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 f88e 	bl	8007ecc <UART_WaitOnFlagUntilTimeout>
 8007db0:	4603      	mov	r3, r0
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d022      	beq.n	8007dfc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dbe:	e853 3f00 	ldrex	r3, [r3]
 8007dc2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007dc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dc6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007dca:	653b      	str	r3, [r7, #80]	@ 0x50
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	461a      	mov	r2, r3
 8007dd2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007dd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8007dd6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dd8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007dda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007ddc:	e841 2300 	strex	r3, r2, [r1]
 8007de0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007de2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d1e6      	bne.n	8007db6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2220      	movs	r2, #32
 8007dec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2200      	movs	r2, #0
 8007df4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007df8:	2303      	movs	r3, #3
 8007dfa:	e063      	b.n	8007ec4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f003 0304 	and.w	r3, r3, #4
 8007e06:	2b04      	cmp	r3, #4
 8007e08:	d149      	bne.n	8007e9e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e0a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007e0e:	9300      	str	r3, [sp, #0]
 8007e10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e12:	2200      	movs	r2, #0
 8007e14:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f000 f857 	bl	8007ecc <UART_WaitOnFlagUntilTimeout>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d03c      	beq.n	8007e9e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e2c:	e853 3f00 	ldrex	r3, [r3]
 8007e30:	623b      	str	r3, [r7, #32]
   return(result);
 8007e32:	6a3b      	ldr	r3, [r7, #32]
 8007e34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e38:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	461a      	mov	r2, r3
 8007e40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e42:	633b      	str	r3, [r7, #48]	@ 0x30
 8007e44:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007e48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e4a:	e841 2300 	strex	r3, r2, [r1]
 8007e4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d1e6      	bne.n	8007e24 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	3308      	adds	r3, #8
 8007e5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	e853 3f00 	ldrex	r3, [r3]
 8007e64:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	f023 0301 	bic.w	r3, r3, #1
 8007e6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	3308      	adds	r3, #8
 8007e74:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007e76:	61fa      	str	r2, [r7, #28]
 8007e78:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e7a:	69b9      	ldr	r1, [r7, #24]
 8007e7c:	69fa      	ldr	r2, [r7, #28]
 8007e7e:	e841 2300 	strex	r3, r2, [r1]
 8007e82:	617b      	str	r3, [r7, #20]
   return(result);
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d1e5      	bne.n	8007e56 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2220      	movs	r2, #32
 8007e8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2200      	movs	r2, #0
 8007e96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e9a:	2303      	movs	r3, #3
 8007e9c:	e012      	b.n	8007ec4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2220      	movs	r2, #32
 8007ea2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2220      	movs	r2, #32
 8007eaa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007ec2:	2300      	movs	r3, #0
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3758      	adds	r7, #88	@ 0x58
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}

08007ecc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b084      	sub	sp, #16
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	60f8      	str	r0, [r7, #12]
 8007ed4:	60b9      	str	r1, [r7, #8]
 8007ed6:	603b      	str	r3, [r7, #0]
 8007ed8:	4613      	mov	r3, r2
 8007eda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007edc:	e04f      	b.n	8007f7e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ede:	69bb      	ldr	r3, [r7, #24]
 8007ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ee4:	d04b      	beq.n	8007f7e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ee6:	f7f9 fb17 	bl	8001518 <HAL_GetTick>
 8007eea:	4602      	mov	r2, r0
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	1ad3      	subs	r3, r2, r3
 8007ef0:	69ba      	ldr	r2, [r7, #24]
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	d302      	bcc.n	8007efc <UART_WaitOnFlagUntilTimeout+0x30>
 8007ef6:	69bb      	ldr	r3, [r7, #24]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d101      	bne.n	8007f00 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007efc:	2303      	movs	r3, #3
 8007efe:	e04e      	b.n	8007f9e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f003 0304 	and.w	r3, r3, #4
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d037      	beq.n	8007f7e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	2b80      	cmp	r3, #128	@ 0x80
 8007f12:	d034      	beq.n	8007f7e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	2b40      	cmp	r3, #64	@ 0x40
 8007f18:	d031      	beq.n	8007f7e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	69db      	ldr	r3, [r3, #28]
 8007f20:	f003 0308 	and.w	r3, r3, #8
 8007f24:	2b08      	cmp	r3, #8
 8007f26:	d110      	bne.n	8007f4a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	2208      	movs	r2, #8
 8007f2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007f30:	68f8      	ldr	r0, [r7, #12]
 8007f32:	f000 f839 	bl	8007fa8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2208      	movs	r2, #8
 8007f3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2200      	movs	r2, #0
 8007f42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007f46:	2301      	movs	r3, #1
 8007f48:	e029      	b.n	8007f9e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	69db      	ldr	r3, [r3, #28]
 8007f50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007f54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f58:	d111      	bne.n	8007f7e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007f62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007f64:	68f8      	ldr	r0, [r7, #12]
 8007f66:	f000 f81f 	bl	8007fa8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2220      	movs	r2, #32
 8007f6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2200      	movs	r2, #0
 8007f76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007f7a:	2303      	movs	r3, #3
 8007f7c:	e00f      	b.n	8007f9e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	69da      	ldr	r2, [r3, #28]
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	4013      	ands	r3, r2
 8007f88:	68ba      	ldr	r2, [r7, #8]
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	bf0c      	ite	eq
 8007f8e:	2301      	moveq	r3, #1
 8007f90:	2300      	movne	r3, #0
 8007f92:	b2db      	uxtb	r3, r3
 8007f94:	461a      	mov	r2, r3
 8007f96:	79fb      	ldrb	r3, [r7, #7]
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	d0a0      	beq.n	8007ede <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f9c:	2300      	movs	r3, #0
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3710      	adds	r7, #16
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}
	...

08007fa8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b095      	sub	sp, #84	@ 0x54
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fb8:	e853 3f00 	ldrex	r3, [r3]
 8007fbc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fc0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007fc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	461a      	mov	r2, r3
 8007fcc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007fce:	643b      	str	r3, [r7, #64]	@ 0x40
 8007fd0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fd2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007fd4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007fd6:	e841 2300 	strex	r3, r2, [r1]
 8007fda:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007fdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d1e6      	bne.n	8007fb0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	3308      	adds	r3, #8
 8007fe8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fea:	6a3b      	ldr	r3, [r7, #32]
 8007fec:	e853 3f00 	ldrex	r3, [r3]
 8007ff0:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ff2:	69fa      	ldr	r2, [r7, #28]
 8007ff4:	4b1e      	ldr	r3, [pc, #120]	@ (8008070 <UART_EndRxTransfer+0xc8>)
 8007ff6:	4013      	ands	r3, r2
 8007ff8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	3308      	adds	r3, #8
 8008000:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008002:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008004:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008006:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008008:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800800a:	e841 2300 	strex	r3, r2, [r1]
 800800e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008012:	2b00      	cmp	r3, #0
 8008014:	d1e5      	bne.n	8007fe2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800801a:	2b01      	cmp	r3, #1
 800801c:	d118      	bne.n	8008050 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	e853 3f00 	ldrex	r3, [r3]
 800802a:	60bb      	str	r3, [r7, #8]
   return(result);
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	f023 0310 	bic.w	r3, r3, #16
 8008032:	647b      	str	r3, [r7, #68]	@ 0x44
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	461a      	mov	r2, r3
 800803a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800803c:	61bb      	str	r3, [r7, #24]
 800803e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008040:	6979      	ldr	r1, [r7, #20]
 8008042:	69ba      	ldr	r2, [r7, #24]
 8008044:	e841 2300 	strex	r3, r2, [r1]
 8008048:	613b      	str	r3, [r7, #16]
   return(result);
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d1e6      	bne.n	800801e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2220      	movs	r2, #32
 8008054:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2200      	movs	r2, #0
 800805c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2200      	movs	r2, #0
 8008062:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008064:	bf00      	nop
 8008066:	3754      	adds	r7, #84	@ 0x54
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr
 8008070:	effffffe 	.word	0xeffffffe

08008074 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b084      	sub	sp, #16
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008080:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2200      	movs	r2, #0
 8008086:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800808a:	68f8      	ldr	r0, [r7, #12]
 800808c:	f7ff f854 	bl	8007138 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008090:	bf00      	nop
 8008092:	3710      	adds	r7, #16
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}

08008098 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b088      	sub	sp, #32
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	e853 3f00 	ldrex	r3, [r3]
 80080ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80080b4:	61fb      	str	r3, [r7, #28]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	461a      	mov	r2, r3
 80080bc:	69fb      	ldr	r3, [r7, #28]
 80080be:	61bb      	str	r3, [r7, #24]
 80080c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080c2:	6979      	ldr	r1, [r7, #20]
 80080c4:	69ba      	ldr	r2, [r7, #24]
 80080c6:	e841 2300 	strex	r3, r2, [r1]
 80080ca:	613b      	str	r3, [r7, #16]
   return(result);
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d1e6      	bne.n	80080a0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2220      	movs	r2, #32
 80080d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2200      	movs	r2, #0
 80080de:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f7ff f81f 	bl	8007124 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080e6:	bf00      	nop
 80080e8:	3720      	adds	r7, #32
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}

080080ee <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80080ee:	b480      	push	{r7}
 80080f0:	b083      	sub	sp, #12
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80080f6:	bf00      	nop
 80080f8:	370c      	adds	r7, #12
 80080fa:	46bd      	mov	sp, r7
 80080fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008100:	4770      	bx	lr

08008102 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008102:	b480      	push	{r7}
 8008104:	b083      	sub	sp, #12
 8008106:	af00      	add	r7, sp, #0
 8008108:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800810a:	bf00      	nop
 800810c:	370c      	adds	r7, #12
 800810e:	46bd      	mov	sp, r7
 8008110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008114:	4770      	bx	lr

08008116 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008116:	b480      	push	{r7}
 8008118:	b083      	sub	sp, #12
 800811a:	af00      	add	r7, sp, #0
 800811c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800811e:	bf00      	nop
 8008120:	370c      	adds	r7, #12
 8008122:	46bd      	mov	sp, r7
 8008124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008128:	4770      	bx	lr

0800812a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800812a:	b480      	push	{r7}
 800812c:	b085      	sub	sp, #20
 800812e:	af00      	add	r7, sp, #0
 8008130:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008138:	2b01      	cmp	r3, #1
 800813a:	d101      	bne.n	8008140 <HAL_UARTEx_DisableFifoMode+0x16>
 800813c:	2302      	movs	r3, #2
 800813e:	e027      	b.n	8008190 <HAL_UARTEx_DisableFifoMode+0x66>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2201      	movs	r2, #1
 8008144:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2224      	movs	r2, #36	@ 0x24
 800814c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	681a      	ldr	r2, [r3, #0]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f022 0201 	bic.w	r2, r2, #1
 8008166:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800816e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2200      	movs	r2, #0
 8008174:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	68fa      	ldr	r2, [r7, #12]
 800817c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2220      	movs	r2, #32
 8008182:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2200      	movs	r2, #0
 800818a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800818e:	2300      	movs	r3, #0
}
 8008190:	4618      	mov	r0, r3
 8008192:	3714      	adds	r7, #20
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr

0800819c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b084      	sub	sp, #16
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	d101      	bne.n	80081b4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80081b0:	2302      	movs	r3, #2
 80081b2:	e02d      	b.n	8008210 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2201      	movs	r2, #1
 80081b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2224      	movs	r2, #36	@ 0x24
 80081c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	681a      	ldr	r2, [r3, #0]
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f022 0201 	bic.w	r2, r2, #1
 80081da:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	689b      	ldr	r3, [r3, #8]
 80081e2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	683a      	ldr	r2, [r7, #0]
 80081ec:	430a      	orrs	r2, r1
 80081ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f000 f84f 	bl	8008294 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	68fa      	ldr	r2, [r7, #12]
 80081fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2220      	movs	r2, #32
 8008202:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2200      	movs	r2, #0
 800820a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800820e:	2300      	movs	r3, #0
}
 8008210:	4618      	mov	r0, r3
 8008212:	3710      	adds	r7, #16
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}

08008218 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b084      	sub	sp, #16
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008228:	2b01      	cmp	r3, #1
 800822a:	d101      	bne.n	8008230 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800822c:	2302      	movs	r3, #2
 800822e:	e02d      	b.n	800828c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2201      	movs	r2, #1
 8008234:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2224      	movs	r2, #36	@ 0x24
 800823c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	681a      	ldr	r2, [r3, #0]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f022 0201 	bic.w	r2, r2, #1
 8008256:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	689b      	ldr	r3, [r3, #8]
 800825e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	683a      	ldr	r2, [r7, #0]
 8008268:	430a      	orrs	r2, r1
 800826a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f000 f811 	bl	8008294 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	68fa      	ldr	r2, [r7, #12]
 8008278:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2220      	movs	r2, #32
 800827e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2200      	movs	r2, #0
 8008286:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800828a:	2300      	movs	r3, #0
}
 800828c:	4618      	mov	r0, r3
 800828e:	3710      	adds	r7, #16
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}

08008294 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008294:	b480      	push	{r7}
 8008296:	b085      	sub	sp, #20
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d108      	bne.n	80082b6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2201      	movs	r2, #1
 80082a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2201      	movs	r2, #1
 80082b0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80082b4:	e031      	b.n	800831a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80082b6:	2310      	movs	r3, #16
 80082b8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80082ba:	2310      	movs	r3, #16
 80082bc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	689b      	ldr	r3, [r3, #8]
 80082c4:	0e5b      	lsrs	r3, r3, #25
 80082c6:	b2db      	uxtb	r3, r3
 80082c8:	f003 0307 	and.w	r3, r3, #7
 80082cc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	689b      	ldr	r3, [r3, #8]
 80082d4:	0f5b      	lsrs	r3, r3, #29
 80082d6:	b2db      	uxtb	r3, r3
 80082d8:	f003 0307 	and.w	r3, r3, #7
 80082dc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80082de:	7bbb      	ldrb	r3, [r7, #14]
 80082e0:	7b3a      	ldrb	r2, [r7, #12]
 80082e2:	4911      	ldr	r1, [pc, #68]	@ (8008328 <UARTEx_SetNbDataToProcess+0x94>)
 80082e4:	5c8a      	ldrb	r2, [r1, r2]
 80082e6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80082ea:	7b3a      	ldrb	r2, [r7, #12]
 80082ec:	490f      	ldr	r1, [pc, #60]	@ (800832c <UARTEx_SetNbDataToProcess+0x98>)
 80082ee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80082f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80082f4:	b29a      	uxth	r2, r3
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80082fc:	7bfb      	ldrb	r3, [r7, #15]
 80082fe:	7b7a      	ldrb	r2, [r7, #13]
 8008300:	4909      	ldr	r1, [pc, #36]	@ (8008328 <UARTEx_SetNbDataToProcess+0x94>)
 8008302:	5c8a      	ldrb	r2, [r1, r2]
 8008304:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008308:	7b7a      	ldrb	r2, [r7, #13]
 800830a:	4908      	ldr	r1, [pc, #32]	@ (800832c <UARTEx_SetNbDataToProcess+0x98>)
 800830c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800830e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008312:	b29a      	uxth	r2, r3
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800831a:	bf00      	nop
 800831c:	3714      	adds	r7, #20
 800831e:	46bd      	mov	sp, r7
 8008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008324:	4770      	bx	lr
 8008326:	bf00      	nop
 8008328:	08008d30 	.word	0x08008d30
 800832c:	08008d38 	.word	0x08008d38

08008330 <HAL_WWDG_IRQHandler>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
void HAL_WWDG_IRQHandler(WWDG_HandleTypeDef *hwwdg)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b082      	sub	sp, #8
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  /* Check if Early Wakeup Interrupt is enable */
  if (__HAL_WWDG_GET_IT_SOURCE(hwwdg, WWDG_IT_EWI) != RESET)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008342:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008346:	d10e      	bne.n	8008366 <HAL_WWDG_IRQHandler+0x36>
  {
    /* Check if WWDG Early Wakeup Interrupt occurred */
    if (__HAL_WWDG_GET_FLAG(hwwdg, WWDG_FLAG_EWIF) != RESET)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	689b      	ldr	r3, [r3, #8]
 800834e:	f003 0301 	and.w	r3, r3, #1
 8008352:	2b01      	cmp	r3, #1
 8008354:	d107      	bne.n	8008366 <HAL_WWDG_IRQHandler+0x36>
    {
      /* Clear the WWDG Early Wakeup flag */
      __HAL_WWDG_CLEAR_FLAG(hwwdg, WWDG_FLAG_EWIF);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f06f 0201 	mvn.w	r2, #1
 800835e:	609a      	str	r2, [r3, #8]
#if (USE_HAL_WWDG_REGISTER_CALLBACKS == 1)
      /* Early Wakeup registered callback */
      hwwdg->EwiCallback(hwwdg);
#else
      /* Early Wakeup callback */
      HAL_WWDG_EarlyWakeupCallback(hwwdg);
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f000 f804 	bl	800836e <HAL_WWDG_EarlyWakeupCallback>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */
    }
  }
}
 8008366:	bf00      	nop
 8008368:	3708      	adds	r7, #8
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}

0800836e <HAL_WWDG_EarlyWakeupCallback>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
__weak void HAL_WWDG_EarlyWakeupCallback(WWDG_HandleTypeDef *hwwdg)
{
 800836e:	b480      	push	{r7}
 8008370:	b083      	sub	sp, #12
 8008372:	af00      	add	r7, sp, #0
 8008374:	6078      	str	r0, [r7, #4]
  UNUSED(hwwdg);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_WWDG_EarlyWakeupCallback could be implemented in the user file
   */
}
 8008376:	bf00      	nop
 8008378:	370c      	adds	r7, #12
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr
	...

08008384 <std>:
 8008384:	2300      	movs	r3, #0
 8008386:	b510      	push	{r4, lr}
 8008388:	4604      	mov	r4, r0
 800838a:	e9c0 3300 	strd	r3, r3, [r0]
 800838e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008392:	6083      	str	r3, [r0, #8]
 8008394:	8181      	strh	r1, [r0, #12]
 8008396:	6643      	str	r3, [r0, #100]	@ 0x64
 8008398:	81c2      	strh	r2, [r0, #14]
 800839a:	6183      	str	r3, [r0, #24]
 800839c:	4619      	mov	r1, r3
 800839e:	2208      	movs	r2, #8
 80083a0:	305c      	adds	r0, #92	@ 0x5c
 80083a2:	f000 f9e7 	bl	8008774 <memset>
 80083a6:	4b0d      	ldr	r3, [pc, #52]	@ (80083dc <std+0x58>)
 80083a8:	6263      	str	r3, [r4, #36]	@ 0x24
 80083aa:	4b0d      	ldr	r3, [pc, #52]	@ (80083e0 <std+0x5c>)
 80083ac:	62a3      	str	r3, [r4, #40]	@ 0x28
 80083ae:	4b0d      	ldr	r3, [pc, #52]	@ (80083e4 <std+0x60>)
 80083b0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80083b2:	4b0d      	ldr	r3, [pc, #52]	@ (80083e8 <std+0x64>)
 80083b4:	6323      	str	r3, [r4, #48]	@ 0x30
 80083b6:	4b0d      	ldr	r3, [pc, #52]	@ (80083ec <std+0x68>)
 80083b8:	6224      	str	r4, [r4, #32]
 80083ba:	429c      	cmp	r4, r3
 80083bc:	d006      	beq.n	80083cc <std+0x48>
 80083be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80083c2:	4294      	cmp	r4, r2
 80083c4:	d002      	beq.n	80083cc <std+0x48>
 80083c6:	33d0      	adds	r3, #208	@ 0xd0
 80083c8:	429c      	cmp	r4, r3
 80083ca:	d105      	bne.n	80083d8 <std+0x54>
 80083cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80083d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083d4:	f000 ba46 	b.w	8008864 <__retarget_lock_init_recursive>
 80083d8:	bd10      	pop	{r4, pc}
 80083da:	bf00      	nop
 80083dc:	080085c5 	.word	0x080085c5
 80083e0:	080085e7 	.word	0x080085e7
 80083e4:	0800861f 	.word	0x0800861f
 80083e8:	08008643 	.word	0x08008643
 80083ec:	24000300 	.word	0x24000300

080083f0 <stdio_exit_handler>:
 80083f0:	4a02      	ldr	r2, [pc, #8]	@ (80083fc <stdio_exit_handler+0xc>)
 80083f2:	4903      	ldr	r1, [pc, #12]	@ (8008400 <stdio_exit_handler+0x10>)
 80083f4:	4803      	ldr	r0, [pc, #12]	@ (8008404 <stdio_exit_handler+0x14>)
 80083f6:	f000 b869 	b.w	80084cc <_fwalk_sglue>
 80083fa:	bf00      	nop
 80083fc:	24000010 	.word	0x24000010
 8008400:	08008b65 	.word	0x08008b65
 8008404:	24000020 	.word	0x24000020

08008408 <cleanup_stdio>:
 8008408:	6841      	ldr	r1, [r0, #4]
 800840a:	4b0c      	ldr	r3, [pc, #48]	@ (800843c <cleanup_stdio+0x34>)
 800840c:	4299      	cmp	r1, r3
 800840e:	b510      	push	{r4, lr}
 8008410:	4604      	mov	r4, r0
 8008412:	d001      	beq.n	8008418 <cleanup_stdio+0x10>
 8008414:	f000 fba6 	bl	8008b64 <_fflush_r>
 8008418:	68a1      	ldr	r1, [r4, #8]
 800841a:	4b09      	ldr	r3, [pc, #36]	@ (8008440 <cleanup_stdio+0x38>)
 800841c:	4299      	cmp	r1, r3
 800841e:	d002      	beq.n	8008426 <cleanup_stdio+0x1e>
 8008420:	4620      	mov	r0, r4
 8008422:	f000 fb9f 	bl	8008b64 <_fflush_r>
 8008426:	68e1      	ldr	r1, [r4, #12]
 8008428:	4b06      	ldr	r3, [pc, #24]	@ (8008444 <cleanup_stdio+0x3c>)
 800842a:	4299      	cmp	r1, r3
 800842c:	d004      	beq.n	8008438 <cleanup_stdio+0x30>
 800842e:	4620      	mov	r0, r4
 8008430:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008434:	f000 bb96 	b.w	8008b64 <_fflush_r>
 8008438:	bd10      	pop	{r4, pc}
 800843a:	bf00      	nop
 800843c:	24000300 	.word	0x24000300
 8008440:	24000368 	.word	0x24000368
 8008444:	240003d0 	.word	0x240003d0

08008448 <global_stdio_init.part.0>:
 8008448:	b510      	push	{r4, lr}
 800844a:	4b0b      	ldr	r3, [pc, #44]	@ (8008478 <global_stdio_init.part.0+0x30>)
 800844c:	4c0b      	ldr	r4, [pc, #44]	@ (800847c <global_stdio_init.part.0+0x34>)
 800844e:	4a0c      	ldr	r2, [pc, #48]	@ (8008480 <global_stdio_init.part.0+0x38>)
 8008450:	601a      	str	r2, [r3, #0]
 8008452:	4620      	mov	r0, r4
 8008454:	2200      	movs	r2, #0
 8008456:	2104      	movs	r1, #4
 8008458:	f7ff ff94 	bl	8008384 <std>
 800845c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008460:	2201      	movs	r2, #1
 8008462:	2109      	movs	r1, #9
 8008464:	f7ff ff8e 	bl	8008384 <std>
 8008468:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800846c:	2202      	movs	r2, #2
 800846e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008472:	2112      	movs	r1, #18
 8008474:	f7ff bf86 	b.w	8008384 <std>
 8008478:	24000438 	.word	0x24000438
 800847c:	24000300 	.word	0x24000300
 8008480:	080083f1 	.word	0x080083f1

08008484 <__sfp_lock_acquire>:
 8008484:	4801      	ldr	r0, [pc, #4]	@ (800848c <__sfp_lock_acquire+0x8>)
 8008486:	f000 b9ee 	b.w	8008866 <__retarget_lock_acquire_recursive>
 800848a:	bf00      	nop
 800848c:	24000441 	.word	0x24000441

08008490 <__sfp_lock_release>:
 8008490:	4801      	ldr	r0, [pc, #4]	@ (8008498 <__sfp_lock_release+0x8>)
 8008492:	f000 b9e9 	b.w	8008868 <__retarget_lock_release_recursive>
 8008496:	bf00      	nop
 8008498:	24000441 	.word	0x24000441

0800849c <__sinit>:
 800849c:	b510      	push	{r4, lr}
 800849e:	4604      	mov	r4, r0
 80084a0:	f7ff fff0 	bl	8008484 <__sfp_lock_acquire>
 80084a4:	6a23      	ldr	r3, [r4, #32]
 80084a6:	b11b      	cbz	r3, 80084b0 <__sinit+0x14>
 80084a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084ac:	f7ff bff0 	b.w	8008490 <__sfp_lock_release>
 80084b0:	4b04      	ldr	r3, [pc, #16]	@ (80084c4 <__sinit+0x28>)
 80084b2:	6223      	str	r3, [r4, #32]
 80084b4:	4b04      	ldr	r3, [pc, #16]	@ (80084c8 <__sinit+0x2c>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d1f5      	bne.n	80084a8 <__sinit+0xc>
 80084bc:	f7ff ffc4 	bl	8008448 <global_stdio_init.part.0>
 80084c0:	e7f2      	b.n	80084a8 <__sinit+0xc>
 80084c2:	bf00      	nop
 80084c4:	08008409 	.word	0x08008409
 80084c8:	24000438 	.word	0x24000438

080084cc <_fwalk_sglue>:
 80084cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084d0:	4607      	mov	r7, r0
 80084d2:	4688      	mov	r8, r1
 80084d4:	4614      	mov	r4, r2
 80084d6:	2600      	movs	r6, #0
 80084d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80084dc:	f1b9 0901 	subs.w	r9, r9, #1
 80084e0:	d505      	bpl.n	80084ee <_fwalk_sglue+0x22>
 80084e2:	6824      	ldr	r4, [r4, #0]
 80084e4:	2c00      	cmp	r4, #0
 80084e6:	d1f7      	bne.n	80084d8 <_fwalk_sglue+0xc>
 80084e8:	4630      	mov	r0, r6
 80084ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084ee:	89ab      	ldrh	r3, [r5, #12]
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	d907      	bls.n	8008504 <_fwalk_sglue+0x38>
 80084f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80084f8:	3301      	adds	r3, #1
 80084fa:	d003      	beq.n	8008504 <_fwalk_sglue+0x38>
 80084fc:	4629      	mov	r1, r5
 80084fe:	4638      	mov	r0, r7
 8008500:	47c0      	blx	r8
 8008502:	4306      	orrs	r6, r0
 8008504:	3568      	adds	r5, #104	@ 0x68
 8008506:	e7e9      	b.n	80084dc <_fwalk_sglue+0x10>

08008508 <_puts_r>:
 8008508:	6a03      	ldr	r3, [r0, #32]
 800850a:	b570      	push	{r4, r5, r6, lr}
 800850c:	6884      	ldr	r4, [r0, #8]
 800850e:	4605      	mov	r5, r0
 8008510:	460e      	mov	r6, r1
 8008512:	b90b      	cbnz	r3, 8008518 <_puts_r+0x10>
 8008514:	f7ff ffc2 	bl	800849c <__sinit>
 8008518:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800851a:	07db      	lsls	r3, r3, #31
 800851c:	d405      	bmi.n	800852a <_puts_r+0x22>
 800851e:	89a3      	ldrh	r3, [r4, #12]
 8008520:	0598      	lsls	r0, r3, #22
 8008522:	d402      	bmi.n	800852a <_puts_r+0x22>
 8008524:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008526:	f000 f99e 	bl	8008866 <__retarget_lock_acquire_recursive>
 800852a:	89a3      	ldrh	r3, [r4, #12]
 800852c:	0719      	lsls	r1, r3, #28
 800852e:	d502      	bpl.n	8008536 <_puts_r+0x2e>
 8008530:	6923      	ldr	r3, [r4, #16]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d135      	bne.n	80085a2 <_puts_r+0x9a>
 8008536:	4621      	mov	r1, r4
 8008538:	4628      	mov	r0, r5
 800853a:	f000 f8c5 	bl	80086c8 <__swsetup_r>
 800853e:	b380      	cbz	r0, 80085a2 <_puts_r+0x9a>
 8008540:	f04f 35ff 	mov.w	r5, #4294967295
 8008544:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008546:	07da      	lsls	r2, r3, #31
 8008548:	d405      	bmi.n	8008556 <_puts_r+0x4e>
 800854a:	89a3      	ldrh	r3, [r4, #12]
 800854c:	059b      	lsls	r3, r3, #22
 800854e:	d402      	bmi.n	8008556 <_puts_r+0x4e>
 8008550:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008552:	f000 f989 	bl	8008868 <__retarget_lock_release_recursive>
 8008556:	4628      	mov	r0, r5
 8008558:	bd70      	pop	{r4, r5, r6, pc}
 800855a:	2b00      	cmp	r3, #0
 800855c:	da04      	bge.n	8008568 <_puts_r+0x60>
 800855e:	69a2      	ldr	r2, [r4, #24]
 8008560:	429a      	cmp	r2, r3
 8008562:	dc17      	bgt.n	8008594 <_puts_r+0x8c>
 8008564:	290a      	cmp	r1, #10
 8008566:	d015      	beq.n	8008594 <_puts_r+0x8c>
 8008568:	6823      	ldr	r3, [r4, #0]
 800856a:	1c5a      	adds	r2, r3, #1
 800856c:	6022      	str	r2, [r4, #0]
 800856e:	7019      	strb	r1, [r3, #0]
 8008570:	68a3      	ldr	r3, [r4, #8]
 8008572:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008576:	3b01      	subs	r3, #1
 8008578:	60a3      	str	r3, [r4, #8]
 800857a:	2900      	cmp	r1, #0
 800857c:	d1ed      	bne.n	800855a <_puts_r+0x52>
 800857e:	2b00      	cmp	r3, #0
 8008580:	da11      	bge.n	80085a6 <_puts_r+0x9e>
 8008582:	4622      	mov	r2, r4
 8008584:	210a      	movs	r1, #10
 8008586:	4628      	mov	r0, r5
 8008588:	f000 f85f 	bl	800864a <__swbuf_r>
 800858c:	3001      	adds	r0, #1
 800858e:	d0d7      	beq.n	8008540 <_puts_r+0x38>
 8008590:	250a      	movs	r5, #10
 8008592:	e7d7      	b.n	8008544 <_puts_r+0x3c>
 8008594:	4622      	mov	r2, r4
 8008596:	4628      	mov	r0, r5
 8008598:	f000 f857 	bl	800864a <__swbuf_r>
 800859c:	3001      	adds	r0, #1
 800859e:	d1e7      	bne.n	8008570 <_puts_r+0x68>
 80085a0:	e7ce      	b.n	8008540 <_puts_r+0x38>
 80085a2:	3e01      	subs	r6, #1
 80085a4:	e7e4      	b.n	8008570 <_puts_r+0x68>
 80085a6:	6823      	ldr	r3, [r4, #0]
 80085a8:	1c5a      	adds	r2, r3, #1
 80085aa:	6022      	str	r2, [r4, #0]
 80085ac:	220a      	movs	r2, #10
 80085ae:	701a      	strb	r2, [r3, #0]
 80085b0:	e7ee      	b.n	8008590 <_puts_r+0x88>
	...

080085b4 <puts>:
 80085b4:	4b02      	ldr	r3, [pc, #8]	@ (80085c0 <puts+0xc>)
 80085b6:	4601      	mov	r1, r0
 80085b8:	6818      	ldr	r0, [r3, #0]
 80085ba:	f7ff bfa5 	b.w	8008508 <_puts_r>
 80085be:	bf00      	nop
 80085c0:	2400001c 	.word	0x2400001c

080085c4 <__sread>:
 80085c4:	b510      	push	{r4, lr}
 80085c6:	460c      	mov	r4, r1
 80085c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085cc:	f000 f8fc 	bl	80087c8 <_read_r>
 80085d0:	2800      	cmp	r0, #0
 80085d2:	bfab      	itete	ge
 80085d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80085d6:	89a3      	ldrhlt	r3, [r4, #12]
 80085d8:	181b      	addge	r3, r3, r0
 80085da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80085de:	bfac      	ite	ge
 80085e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80085e2:	81a3      	strhlt	r3, [r4, #12]
 80085e4:	bd10      	pop	{r4, pc}

080085e6 <__swrite>:
 80085e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085ea:	461f      	mov	r7, r3
 80085ec:	898b      	ldrh	r3, [r1, #12]
 80085ee:	05db      	lsls	r3, r3, #23
 80085f0:	4605      	mov	r5, r0
 80085f2:	460c      	mov	r4, r1
 80085f4:	4616      	mov	r6, r2
 80085f6:	d505      	bpl.n	8008604 <__swrite+0x1e>
 80085f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085fc:	2302      	movs	r3, #2
 80085fe:	2200      	movs	r2, #0
 8008600:	f000 f8d0 	bl	80087a4 <_lseek_r>
 8008604:	89a3      	ldrh	r3, [r4, #12]
 8008606:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800860a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800860e:	81a3      	strh	r3, [r4, #12]
 8008610:	4632      	mov	r2, r6
 8008612:	463b      	mov	r3, r7
 8008614:	4628      	mov	r0, r5
 8008616:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800861a:	f000 b8e7 	b.w	80087ec <_write_r>

0800861e <__sseek>:
 800861e:	b510      	push	{r4, lr}
 8008620:	460c      	mov	r4, r1
 8008622:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008626:	f000 f8bd 	bl	80087a4 <_lseek_r>
 800862a:	1c43      	adds	r3, r0, #1
 800862c:	89a3      	ldrh	r3, [r4, #12]
 800862e:	bf15      	itete	ne
 8008630:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008632:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008636:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800863a:	81a3      	strheq	r3, [r4, #12]
 800863c:	bf18      	it	ne
 800863e:	81a3      	strhne	r3, [r4, #12]
 8008640:	bd10      	pop	{r4, pc}

08008642 <__sclose>:
 8008642:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008646:	f000 b89d 	b.w	8008784 <_close_r>

0800864a <__swbuf_r>:
 800864a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800864c:	460e      	mov	r6, r1
 800864e:	4614      	mov	r4, r2
 8008650:	4605      	mov	r5, r0
 8008652:	b118      	cbz	r0, 800865c <__swbuf_r+0x12>
 8008654:	6a03      	ldr	r3, [r0, #32]
 8008656:	b90b      	cbnz	r3, 800865c <__swbuf_r+0x12>
 8008658:	f7ff ff20 	bl	800849c <__sinit>
 800865c:	69a3      	ldr	r3, [r4, #24]
 800865e:	60a3      	str	r3, [r4, #8]
 8008660:	89a3      	ldrh	r3, [r4, #12]
 8008662:	071a      	lsls	r2, r3, #28
 8008664:	d501      	bpl.n	800866a <__swbuf_r+0x20>
 8008666:	6923      	ldr	r3, [r4, #16]
 8008668:	b943      	cbnz	r3, 800867c <__swbuf_r+0x32>
 800866a:	4621      	mov	r1, r4
 800866c:	4628      	mov	r0, r5
 800866e:	f000 f82b 	bl	80086c8 <__swsetup_r>
 8008672:	b118      	cbz	r0, 800867c <__swbuf_r+0x32>
 8008674:	f04f 37ff 	mov.w	r7, #4294967295
 8008678:	4638      	mov	r0, r7
 800867a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800867c:	6823      	ldr	r3, [r4, #0]
 800867e:	6922      	ldr	r2, [r4, #16]
 8008680:	1a98      	subs	r0, r3, r2
 8008682:	6963      	ldr	r3, [r4, #20]
 8008684:	b2f6      	uxtb	r6, r6
 8008686:	4283      	cmp	r3, r0
 8008688:	4637      	mov	r7, r6
 800868a:	dc05      	bgt.n	8008698 <__swbuf_r+0x4e>
 800868c:	4621      	mov	r1, r4
 800868e:	4628      	mov	r0, r5
 8008690:	f000 fa68 	bl	8008b64 <_fflush_r>
 8008694:	2800      	cmp	r0, #0
 8008696:	d1ed      	bne.n	8008674 <__swbuf_r+0x2a>
 8008698:	68a3      	ldr	r3, [r4, #8]
 800869a:	3b01      	subs	r3, #1
 800869c:	60a3      	str	r3, [r4, #8]
 800869e:	6823      	ldr	r3, [r4, #0]
 80086a0:	1c5a      	adds	r2, r3, #1
 80086a2:	6022      	str	r2, [r4, #0]
 80086a4:	701e      	strb	r6, [r3, #0]
 80086a6:	6962      	ldr	r2, [r4, #20]
 80086a8:	1c43      	adds	r3, r0, #1
 80086aa:	429a      	cmp	r2, r3
 80086ac:	d004      	beq.n	80086b8 <__swbuf_r+0x6e>
 80086ae:	89a3      	ldrh	r3, [r4, #12]
 80086b0:	07db      	lsls	r3, r3, #31
 80086b2:	d5e1      	bpl.n	8008678 <__swbuf_r+0x2e>
 80086b4:	2e0a      	cmp	r6, #10
 80086b6:	d1df      	bne.n	8008678 <__swbuf_r+0x2e>
 80086b8:	4621      	mov	r1, r4
 80086ba:	4628      	mov	r0, r5
 80086bc:	f000 fa52 	bl	8008b64 <_fflush_r>
 80086c0:	2800      	cmp	r0, #0
 80086c2:	d0d9      	beq.n	8008678 <__swbuf_r+0x2e>
 80086c4:	e7d6      	b.n	8008674 <__swbuf_r+0x2a>
	...

080086c8 <__swsetup_r>:
 80086c8:	b538      	push	{r3, r4, r5, lr}
 80086ca:	4b29      	ldr	r3, [pc, #164]	@ (8008770 <__swsetup_r+0xa8>)
 80086cc:	4605      	mov	r5, r0
 80086ce:	6818      	ldr	r0, [r3, #0]
 80086d0:	460c      	mov	r4, r1
 80086d2:	b118      	cbz	r0, 80086dc <__swsetup_r+0x14>
 80086d4:	6a03      	ldr	r3, [r0, #32]
 80086d6:	b90b      	cbnz	r3, 80086dc <__swsetup_r+0x14>
 80086d8:	f7ff fee0 	bl	800849c <__sinit>
 80086dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086e0:	0719      	lsls	r1, r3, #28
 80086e2:	d422      	bmi.n	800872a <__swsetup_r+0x62>
 80086e4:	06da      	lsls	r2, r3, #27
 80086e6:	d407      	bmi.n	80086f8 <__swsetup_r+0x30>
 80086e8:	2209      	movs	r2, #9
 80086ea:	602a      	str	r2, [r5, #0]
 80086ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086f0:	81a3      	strh	r3, [r4, #12]
 80086f2:	f04f 30ff 	mov.w	r0, #4294967295
 80086f6:	e033      	b.n	8008760 <__swsetup_r+0x98>
 80086f8:	0758      	lsls	r0, r3, #29
 80086fa:	d512      	bpl.n	8008722 <__swsetup_r+0x5a>
 80086fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80086fe:	b141      	cbz	r1, 8008712 <__swsetup_r+0x4a>
 8008700:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008704:	4299      	cmp	r1, r3
 8008706:	d002      	beq.n	800870e <__swsetup_r+0x46>
 8008708:	4628      	mov	r0, r5
 800870a:	f000 f8af 	bl	800886c <_free_r>
 800870e:	2300      	movs	r3, #0
 8008710:	6363      	str	r3, [r4, #52]	@ 0x34
 8008712:	89a3      	ldrh	r3, [r4, #12]
 8008714:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008718:	81a3      	strh	r3, [r4, #12]
 800871a:	2300      	movs	r3, #0
 800871c:	6063      	str	r3, [r4, #4]
 800871e:	6923      	ldr	r3, [r4, #16]
 8008720:	6023      	str	r3, [r4, #0]
 8008722:	89a3      	ldrh	r3, [r4, #12]
 8008724:	f043 0308 	orr.w	r3, r3, #8
 8008728:	81a3      	strh	r3, [r4, #12]
 800872a:	6923      	ldr	r3, [r4, #16]
 800872c:	b94b      	cbnz	r3, 8008742 <__swsetup_r+0x7a>
 800872e:	89a3      	ldrh	r3, [r4, #12]
 8008730:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008734:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008738:	d003      	beq.n	8008742 <__swsetup_r+0x7a>
 800873a:	4621      	mov	r1, r4
 800873c:	4628      	mov	r0, r5
 800873e:	f000 fa5f 	bl	8008c00 <__smakebuf_r>
 8008742:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008746:	f013 0201 	ands.w	r2, r3, #1
 800874a:	d00a      	beq.n	8008762 <__swsetup_r+0x9a>
 800874c:	2200      	movs	r2, #0
 800874e:	60a2      	str	r2, [r4, #8]
 8008750:	6962      	ldr	r2, [r4, #20]
 8008752:	4252      	negs	r2, r2
 8008754:	61a2      	str	r2, [r4, #24]
 8008756:	6922      	ldr	r2, [r4, #16]
 8008758:	b942      	cbnz	r2, 800876c <__swsetup_r+0xa4>
 800875a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800875e:	d1c5      	bne.n	80086ec <__swsetup_r+0x24>
 8008760:	bd38      	pop	{r3, r4, r5, pc}
 8008762:	0799      	lsls	r1, r3, #30
 8008764:	bf58      	it	pl
 8008766:	6962      	ldrpl	r2, [r4, #20]
 8008768:	60a2      	str	r2, [r4, #8]
 800876a:	e7f4      	b.n	8008756 <__swsetup_r+0x8e>
 800876c:	2000      	movs	r0, #0
 800876e:	e7f7      	b.n	8008760 <__swsetup_r+0x98>
 8008770:	2400001c 	.word	0x2400001c

08008774 <memset>:
 8008774:	4402      	add	r2, r0
 8008776:	4603      	mov	r3, r0
 8008778:	4293      	cmp	r3, r2
 800877a:	d100      	bne.n	800877e <memset+0xa>
 800877c:	4770      	bx	lr
 800877e:	f803 1b01 	strb.w	r1, [r3], #1
 8008782:	e7f9      	b.n	8008778 <memset+0x4>

08008784 <_close_r>:
 8008784:	b538      	push	{r3, r4, r5, lr}
 8008786:	4d06      	ldr	r5, [pc, #24]	@ (80087a0 <_close_r+0x1c>)
 8008788:	2300      	movs	r3, #0
 800878a:	4604      	mov	r4, r0
 800878c:	4608      	mov	r0, r1
 800878e:	602b      	str	r3, [r5, #0]
 8008790:	f7f8 f9a7 	bl	8000ae2 <_close>
 8008794:	1c43      	adds	r3, r0, #1
 8008796:	d102      	bne.n	800879e <_close_r+0x1a>
 8008798:	682b      	ldr	r3, [r5, #0]
 800879a:	b103      	cbz	r3, 800879e <_close_r+0x1a>
 800879c:	6023      	str	r3, [r4, #0]
 800879e:	bd38      	pop	{r3, r4, r5, pc}
 80087a0:	2400043c 	.word	0x2400043c

080087a4 <_lseek_r>:
 80087a4:	b538      	push	{r3, r4, r5, lr}
 80087a6:	4d07      	ldr	r5, [pc, #28]	@ (80087c4 <_lseek_r+0x20>)
 80087a8:	4604      	mov	r4, r0
 80087aa:	4608      	mov	r0, r1
 80087ac:	4611      	mov	r1, r2
 80087ae:	2200      	movs	r2, #0
 80087b0:	602a      	str	r2, [r5, #0]
 80087b2:	461a      	mov	r2, r3
 80087b4:	f7f8 f9bc 	bl	8000b30 <_lseek>
 80087b8:	1c43      	adds	r3, r0, #1
 80087ba:	d102      	bne.n	80087c2 <_lseek_r+0x1e>
 80087bc:	682b      	ldr	r3, [r5, #0]
 80087be:	b103      	cbz	r3, 80087c2 <_lseek_r+0x1e>
 80087c0:	6023      	str	r3, [r4, #0]
 80087c2:	bd38      	pop	{r3, r4, r5, pc}
 80087c4:	2400043c 	.word	0x2400043c

080087c8 <_read_r>:
 80087c8:	b538      	push	{r3, r4, r5, lr}
 80087ca:	4d07      	ldr	r5, [pc, #28]	@ (80087e8 <_read_r+0x20>)
 80087cc:	4604      	mov	r4, r0
 80087ce:	4608      	mov	r0, r1
 80087d0:	4611      	mov	r1, r2
 80087d2:	2200      	movs	r2, #0
 80087d4:	602a      	str	r2, [r5, #0]
 80087d6:	461a      	mov	r2, r3
 80087d8:	f7f8 f94a 	bl	8000a70 <_read>
 80087dc:	1c43      	adds	r3, r0, #1
 80087de:	d102      	bne.n	80087e6 <_read_r+0x1e>
 80087e0:	682b      	ldr	r3, [r5, #0]
 80087e2:	b103      	cbz	r3, 80087e6 <_read_r+0x1e>
 80087e4:	6023      	str	r3, [r4, #0]
 80087e6:	bd38      	pop	{r3, r4, r5, pc}
 80087e8:	2400043c 	.word	0x2400043c

080087ec <_write_r>:
 80087ec:	b538      	push	{r3, r4, r5, lr}
 80087ee:	4d07      	ldr	r5, [pc, #28]	@ (800880c <_write_r+0x20>)
 80087f0:	4604      	mov	r4, r0
 80087f2:	4608      	mov	r0, r1
 80087f4:	4611      	mov	r1, r2
 80087f6:	2200      	movs	r2, #0
 80087f8:	602a      	str	r2, [r5, #0]
 80087fa:	461a      	mov	r2, r3
 80087fc:	f7f8 f955 	bl	8000aaa <_write>
 8008800:	1c43      	adds	r3, r0, #1
 8008802:	d102      	bne.n	800880a <_write_r+0x1e>
 8008804:	682b      	ldr	r3, [r5, #0]
 8008806:	b103      	cbz	r3, 800880a <_write_r+0x1e>
 8008808:	6023      	str	r3, [r4, #0]
 800880a:	bd38      	pop	{r3, r4, r5, pc}
 800880c:	2400043c 	.word	0x2400043c

08008810 <__errno>:
 8008810:	4b01      	ldr	r3, [pc, #4]	@ (8008818 <__errno+0x8>)
 8008812:	6818      	ldr	r0, [r3, #0]
 8008814:	4770      	bx	lr
 8008816:	bf00      	nop
 8008818:	2400001c 	.word	0x2400001c

0800881c <__libc_init_array>:
 800881c:	b570      	push	{r4, r5, r6, lr}
 800881e:	4d0d      	ldr	r5, [pc, #52]	@ (8008854 <__libc_init_array+0x38>)
 8008820:	4c0d      	ldr	r4, [pc, #52]	@ (8008858 <__libc_init_array+0x3c>)
 8008822:	1b64      	subs	r4, r4, r5
 8008824:	10a4      	asrs	r4, r4, #2
 8008826:	2600      	movs	r6, #0
 8008828:	42a6      	cmp	r6, r4
 800882a:	d109      	bne.n	8008840 <__libc_init_array+0x24>
 800882c:	4d0b      	ldr	r5, [pc, #44]	@ (800885c <__libc_init_array+0x40>)
 800882e:	4c0c      	ldr	r4, [pc, #48]	@ (8008860 <__libc_init_array+0x44>)
 8008830:	f000 fa54 	bl	8008cdc <_init>
 8008834:	1b64      	subs	r4, r4, r5
 8008836:	10a4      	asrs	r4, r4, #2
 8008838:	2600      	movs	r6, #0
 800883a:	42a6      	cmp	r6, r4
 800883c:	d105      	bne.n	800884a <__libc_init_array+0x2e>
 800883e:	bd70      	pop	{r4, r5, r6, pc}
 8008840:	f855 3b04 	ldr.w	r3, [r5], #4
 8008844:	4798      	blx	r3
 8008846:	3601      	adds	r6, #1
 8008848:	e7ee      	b.n	8008828 <__libc_init_array+0xc>
 800884a:	f855 3b04 	ldr.w	r3, [r5], #4
 800884e:	4798      	blx	r3
 8008850:	3601      	adds	r6, #1
 8008852:	e7f2      	b.n	800883a <__libc_init_array+0x1e>
 8008854:	08008d48 	.word	0x08008d48
 8008858:	08008d48 	.word	0x08008d48
 800885c:	08008d48 	.word	0x08008d48
 8008860:	08008d4c 	.word	0x08008d4c

08008864 <__retarget_lock_init_recursive>:
 8008864:	4770      	bx	lr

08008866 <__retarget_lock_acquire_recursive>:
 8008866:	4770      	bx	lr

08008868 <__retarget_lock_release_recursive>:
 8008868:	4770      	bx	lr
	...

0800886c <_free_r>:
 800886c:	b538      	push	{r3, r4, r5, lr}
 800886e:	4605      	mov	r5, r0
 8008870:	2900      	cmp	r1, #0
 8008872:	d041      	beq.n	80088f8 <_free_r+0x8c>
 8008874:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008878:	1f0c      	subs	r4, r1, #4
 800887a:	2b00      	cmp	r3, #0
 800887c:	bfb8      	it	lt
 800887e:	18e4      	addlt	r4, r4, r3
 8008880:	f000 f8e0 	bl	8008a44 <__malloc_lock>
 8008884:	4a1d      	ldr	r2, [pc, #116]	@ (80088fc <_free_r+0x90>)
 8008886:	6813      	ldr	r3, [r2, #0]
 8008888:	b933      	cbnz	r3, 8008898 <_free_r+0x2c>
 800888a:	6063      	str	r3, [r4, #4]
 800888c:	6014      	str	r4, [r2, #0]
 800888e:	4628      	mov	r0, r5
 8008890:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008894:	f000 b8dc 	b.w	8008a50 <__malloc_unlock>
 8008898:	42a3      	cmp	r3, r4
 800889a:	d908      	bls.n	80088ae <_free_r+0x42>
 800889c:	6820      	ldr	r0, [r4, #0]
 800889e:	1821      	adds	r1, r4, r0
 80088a0:	428b      	cmp	r3, r1
 80088a2:	bf01      	itttt	eq
 80088a4:	6819      	ldreq	r1, [r3, #0]
 80088a6:	685b      	ldreq	r3, [r3, #4]
 80088a8:	1809      	addeq	r1, r1, r0
 80088aa:	6021      	streq	r1, [r4, #0]
 80088ac:	e7ed      	b.n	800888a <_free_r+0x1e>
 80088ae:	461a      	mov	r2, r3
 80088b0:	685b      	ldr	r3, [r3, #4]
 80088b2:	b10b      	cbz	r3, 80088b8 <_free_r+0x4c>
 80088b4:	42a3      	cmp	r3, r4
 80088b6:	d9fa      	bls.n	80088ae <_free_r+0x42>
 80088b8:	6811      	ldr	r1, [r2, #0]
 80088ba:	1850      	adds	r0, r2, r1
 80088bc:	42a0      	cmp	r0, r4
 80088be:	d10b      	bne.n	80088d8 <_free_r+0x6c>
 80088c0:	6820      	ldr	r0, [r4, #0]
 80088c2:	4401      	add	r1, r0
 80088c4:	1850      	adds	r0, r2, r1
 80088c6:	4283      	cmp	r3, r0
 80088c8:	6011      	str	r1, [r2, #0]
 80088ca:	d1e0      	bne.n	800888e <_free_r+0x22>
 80088cc:	6818      	ldr	r0, [r3, #0]
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	6053      	str	r3, [r2, #4]
 80088d2:	4408      	add	r0, r1
 80088d4:	6010      	str	r0, [r2, #0]
 80088d6:	e7da      	b.n	800888e <_free_r+0x22>
 80088d8:	d902      	bls.n	80088e0 <_free_r+0x74>
 80088da:	230c      	movs	r3, #12
 80088dc:	602b      	str	r3, [r5, #0]
 80088de:	e7d6      	b.n	800888e <_free_r+0x22>
 80088e0:	6820      	ldr	r0, [r4, #0]
 80088e2:	1821      	adds	r1, r4, r0
 80088e4:	428b      	cmp	r3, r1
 80088e6:	bf04      	itt	eq
 80088e8:	6819      	ldreq	r1, [r3, #0]
 80088ea:	685b      	ldreq	r3, [r3, #4]
 80088ec:	6063      	str	r3, [r4, #4]
 80088ee:	bf04      	itt	eq
 80088f0:	1809      	addeq	r1, r1, r0
 80088f2:	6021      	streq	r1, [r4, #0]
 80088f4:	6054      	str	r4, [r2, #4]
 80088f6:	e7ca      	b.n	800888e <_free_r+0x22>
 80088f8:	bd38      	pop	{r3, r4, r5, pc}
 80088fa:	bf00      	nop
 80088fc:	24000448 	.word	0x24000448

08008900 <sbrk_aligned>:
 8008900:	b570      	push	{r4, r5, r6, lr}
 8008902:	4e0f      	ldr	r6, [pc, #60]	@ (8008940 <sbrk_aligned+0x40>)
 8008904:	460c      	mov	r4, r1
 8008906:	6831      	ldr	r1, [r6, #0]
 8008908:	4605      	mov	r5, r0
 800890a:	b911      	cbnz	r1, 8008912 <sbrk_aligned+0x12>
 800890c:	f000 f9d6 	bl	8008cbc <_sbrk_r>
 8008910:	6030      	str	r0, [r6, #0]
 8008912:	4621      	mov	r1, r4
 8008914:	4628      	mov	r0, r5
 8008916:	f000 f9d1 	bl	8008cbc <_sbrk_r>
 800891a:	1c43      	adds	r3, r0, #1
 800891c:	d103      	bne.n	8008926 <sbrk_aligned+0x26>
 800891e:	f04f 34ff 	mov.w	r4, #4294967295
 8008922:	4620      	mov	r0, r4
 8008924:	bd70      	pop	{r4, r5, r6, pc}
 8008926:	1cc4      	adds	r4, r0, #3
 8008928:	f024 0403 	bic.w	r4, r4, #3
 800892c:	42a0      	cmp	r0, r4
 800892e:	d0f8      	beq.n	8008922 <sbrk_aligned+0x22>
 8008930:	1a21      	subs	r1, r4, r0
 8008932:	4628      	mov	r0, r5
 8008934:	f000 f9c2 	bl	8008cbc <_sbrk_r>
 8008938:	3001      	adds	r0, #1
 800893a:	d1f2      	bne.n	8008922 <sbrk_aligned+0x22>
 800893c:	e7ef      	b.n	800891e <sbrk_aligned+0x1e>
 800893e:	bf00      	nop
 8008940:	24000444 	.word	0x24000444

08008944 <_malloc_r>:
 8008944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008948:	1ccd      	adds	r5, r1, #3
 800894a:	f025 0503 	bic.w	r5, r5, #3
 800894e:	3508      	adds	r5, #8
 8008950:	2d0c      	cmp	r5, #12
 8008952:	bf38      	it	cc
 8008954:	250c      	movcc	r5, #12
 8008956:	2d00      	cmp	r5, #0
 8008958:	4606      	mov	r6, r0
 800895a:	db01      	blt.n	8008960 <_malloc_r+0x1c>
 800895c:	42a9      	cmp	r1, r5
 800895e:	d904      	bls.n	800896a <_malloc_r+0x26>
 8008960:	230c      	movs	r3, #12
 8008962:	6033      	str	r3, [r6, #0]
 8008964:	2000      	movs	r0, #0
 8008966:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800896a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008a40 <_malloc_r+0xfc>
 800896e:	f000 f869 	bl	8008a44 <__malloc_lock>
 8008972:	f8d8 3000 	ldr.w	r3, [r8]
 8008976:	461c      	mov	r4, r3
 8008978:	bb44      	cbnz	r4, 80089cc <_malloc_r+0x88>
 800897a:	4629      	mov	r1, r5
 800897c:	4630      	mov	r0, r6
 800897e:	f7ff ffbf 	bl	8008900 <sbrk_aligned>
 8008982:	1c43      	adds	r3, r0, #1
 8008984:	4604      	mov	r4, r0
 8008986:	d158      	bne.n	8008a3a <_malloc_r+0xf6>
 8008988:	f8d8 4000 	ldr.w	r4, [r8]
 800898c:	4627      	mov	r7, r4
 800898e:	2f00      	cmp	r7, #0
 8008990:	d143      	bne.n	8008a1a <_malloc_r+0xd6>
 8008992:	2c00      	cmp	r4, #0
 8008994:	d04b      	beq.n	8008a2e <_malloc_r+0xea>
 8008996:	6823      	ldr	r3, [r4, #0]
 8008998:	4639      	mov	r1, r7
 800899a:	4630      	mov	r0, r6
 800899c:	eb04 0903 	add.w	r9, r4, r3
 80089a0:	f000 f98c 	bl	8008cbc <_sbrk_r>
 80089a4:	4581      	cmp	r9, r0
 80089a6:	d142      	bne.n	8008a2e <_malloc_r+0xea>
 80089a8:	6821      	ldr	r1, [r4, #0]
 80089aa:	1a6d      	subs	r5, r5, r1
 80089ac:	4629      	mov	r1, r5
 80089ae:	4630      	mov	r0, r6
 80089b0:	f7ff ffa6 	bl	8008900 <sbrk_aligned>
 80089b4:	3001      	adds	r0, #1
 80089b6:	d03a      	beq.n	8008a2e <_malloc_r+0xea>
 80089b8:	6823      	ldr	r3, [r4, #0]
 80089ba:	442b      	add	r3, r5
 80089bc:	6023      	str	r3, [r4, #0]
 80089be:	f8d8 3000 	ldr.w	r3, [r8]
 80089c2:	685a      	ldr	r2, [r3, #4]
 80089c4:	bb62      	cbnz	r2, 8008a20 <_malloc_r+0xdc>
 80089c6:	f8c8 7000 	str.w	r7, [r8]
 80089ca:	e00f      	b.n	80089ec <_malloc_r+0xa8>
 80089cc:	6822      	ldr	r2, [r4, #0]
 80089ce:	1b52      	subs	r2, r2, r5
 80089d0:	d420      	bmi.n	8008a14 <_malloc_r+0xd0>
 80089d2:	2a0b      	cmp	r2, #11
 80089d4:	d917      	bls.n	8008a06 <_malloc_r+0xc2>
 80089d6:	1961      	adds	r1, r4, r5
 80089d8:	42a3      	cmp	r3, r4
 80089da:	6025      	str	r5, [r4, #0]
 80089dc:	bf18      	it	ne
 80089de:	6059      	strne	r1, [r3, #4]
 80089e0:	6863      	ldr	r3, [r4, #4]
 80089e2:	bf08      	it	eq
 80089e4:	f8c8 1000 	streq.w	r1, [r8]
 80089e8:	5162      	str	r2, [r4, r5]
 80089ea:	604b      	str	r3, [r1, #4]
 80089ec:	4630      	mov	r0, r6
 80089ee:	f000 f82f 	bl	8008a50 <__malloc_unlock>
 80089f2:	f104 000b 	add.w	r0, r4, #11
 80089f6:	1d23      	adds	r3, r4, #4
 80089f8:	f020 0007 	bic.w	r0, r0, #7
 80089fc:	1ac2      	subs	r2, r0, r3
 80089fe:	bf1c      	itt	ne
 8008a00:	1a1b      	subne	r3, r3, r0
 8008a02:	50a3      	strne	r3, [r4, r2]
 8008a04:	e7af      	b.n	8008966 <_malloc_r+0x22>
 8008a06:	6862      	ldr	r2, [r4, #4]
 8008a08:	42a3      	cmp	r3, r4
 8008a0a:	bf0c      	ite	eq
 8008a0c:	f8c8 2000 	streq.w	r2, [r8]
 8008a10:	605a      	strne	r2, [r3, #4]
 8008a12:	e7eb      	b.n	80089ec <_malloc_r+0xa8>
 8008a14:	4623      	mov	r3, r4
 8008a16:	6864      	ldr	r4, [r4, #4]
 8008a18:	e7ae      	b.n	8008978 <_malloc_r+0x34>
 8008a1a:	463c      	mov	r4, r7
 8008a1c:	687f      	ldr	r7, [r7, #4]
 8008a1e:	e7b6      	b.n	800898e <_malloc_r+0x4a>
 8008a20:	461a      	mov	r2, r3
 8008a22:	685b      	ldr	r3, [r3, #4]
 8008a24:	42a3      	cmp	r3, r4
 8008a26:	d1fb      	bne.n	8008a20 <_malloc_r+0xdc>
 8008a28:	2300      	movs	r3, #0
 8008a2a:	6053      	str	r3, [r2, #4]
 8008a2c:	e7de      	b.n	80089ec <_malloc_r+0xa8>
 8008a2e:	230c      	movs	r3, #12
 8008a30:	6033      	str	r3, [r6, #0]
 8008a32:	4630      	mov	r0, r6
 8008a34:	f000 f80c 	bl	8008a50 <__malloc_unlock>
 8008a38:	e794      	b.n	8008964 <_malloc_r+0x20>
 8008a3a:	6005      	str	r5, [r0, #0]
 8008a3c:	e7d6      	b.n	80089ec <_malloc_r+0xa8>
 8008a3e:	bf00      	nop
 8008a40:	24000448 	.word	0x24000448

08008a44 <__malloc_lock>:
 8008a44:	4801      	ldr	r0, [pc, #4]	@ (8008a4c <__malloc_lock+0x8>)
 8008a46:	f7ff bf0e 	b.w	8008866 <__retarget_lock_acquire_recursive>
 8008a4a:	bf00      	nop
 8008a4c:	24000440 	.word	0x24000440

08008a50 <__malloc_unlock>:
 8008a50:	4801      	ldr	r0, [pc, #4]	@ (8008a58 <__malloc_unlock+0x8>)
 8008a52:	f7ff bf09 	b.w	8008868 <__retarget_lock_release_recursive>
 8008a56:	bf00      	nop
 8008a58:	24000440 	.word	0x24000440

08008a5c <__sflush_r>:
 8008a5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a64:	0716      	lsls	r6, r2, #28
 8008a66:	4605      	mov	r5, r0
 8008a68:	460c      	mov	r4, r1
 8008a6a:	d454      	bmi.n	8008b16 <__sflush_r+0xba>
 8008a6c:	684b      	ldr	r3, [r1, #4]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	dc02      	bgt.n	8008a78 <__sflush_r+0x1c>
 8008a72:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	dd48      	ble.n	8008b0a <__sflush_r+0xae>
 8008a78:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008a7a:	2e00      	cmp	r6, #0
 8008a7c:	d045      	beq.n	8008b0a <__sflush_r+0xae>
 8008a7e:	2300      	movs	r3, #0
 8008a80:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008a84:	682f      	ldr	r7, [r5, #0]
 8008a86:	6a21      	ldr	r1, [r4, #32]
 8008a88:	602b      	str	r3, [r5, #0]
 8008a8a:	d030      	beq.n	8008aee <__sflush_r+0x92>
 8008a8c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008a8e:	89a3      	ldrh	r3, [r4, #12]
 8008a90:	0759      	lsls	r1, r3, #29
 8008a92:	d505      	bpl.n	8008aa0 <__sflush_r+0x44>
 8008a94:	6863      	ldr	r3, [r4, #4]
 8008a96:	1ad2      	subs	r2, r2, r3
 8008a98:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008a9a:	b10b      	cbz	r3, 8008aa0 <__sflush_r+0x44>
 8008a9c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008a9e:	1ad2      	subs	r2, r2, r3
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008aa4:	6a21      	ldr	r1, [r4, #32]
 8008aa6:	4628      	mov	r0, r5
 8008aa8:	47b0      	blx	r6
 8008aaa:	1c43      	adds	r3, r0, #1
 8008aac:	89a3      	ldrh	r3, [r4, #12]
 8008aae:	d106      	bne.n	8008abe <__sflush_r+0x62>
 8008ab0:	6829      	ldr	r1, [r5, #0]
 8008ab2:	291d      	cmp	r1, #29
 8008ab4:	d82b      	bhi.n	8008b0e <__sflush_r+0xb2>
 8008ab6:	4a2a      	ldr	r2, [pc, #168]	@ (8008b60 <__sflush_r+0x104>)
 8008ab8:	40ca      	lsrs	r2, r1
 8008aba:	07d6      	lsls	r6, r2, #31
 8008abc:	d527      	bpl.n	8008b0e <__sflush_r+0xb2>
 8008abe:	2200      	movs	r2, #0
 8008ac0:	6062      	str	r2, [r4, #4]
 8008ac2:	04d9      	lsls	r1, r3, #19
 8008ac4:	6922      	ldr	r2, [r4, #16]
 8008ac6:	6022      	str	r2, [r4, #0]
 8008ac8:	d504      	bpl.n	8008ad4 <__sflush_r+0x78>
 8008aca:	1c42      	adds	r2, r0, #1
 8008acc:	d101      	bne.n	8008ad2 <__sflush_r+0x76>
 8008ace:	682b      	ldr	r3, [r5, #0]
 8008ad0:	b903      	cbnz	r3, 8008ad4 <__sflush_r+0x78>
 8008ad2:	6560      	str	r0, [r4, #84]	@ 0x54
 8008ad4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008ad6:	602f      	str	r7, [r5, #0]
 8008ad8:	b1b9      	cbz	r1, 8008b0a <__sflush_r+0xae>
 8008ada:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008ade:	4299      	cmp	r1, r3
 8008ae0:	d002      	beq.n	8008ae8 <__sflush_r+0x8c>
 8008ae2:	4628      	mov	r0, r5
 8008ae4:	f7ff fec2 	bl	800886c <_free_r>
 8008ae8:	2300      	movs	r3, #0
 8008aea:	6363      	str	r3, [r4, #52]	@ 0x34
 8008aec:	e00d      	b.n	8008b0a <__sflush_r+0xae>
 8008aee:	2301      	movs	r3, #1
 8008af0:	4628      	mov	r0, r5
 8008af2:	47b0      	blx	r6
 8008af4:	4602      	mov	r2, r0
 8008af6:	1c50      	adds	r0, r2, #1
 8008af8:	d1c9      	bne.n	8008a8e <__sflush_r+0x32>
 8008afa:	682b      	ldr	r3, [r5, #0]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d0c6      	beq.n	8008a8e <__sflush_r+0x32>
 8008b00:	2b1d      	cmp	r3, #29
 8008b02:	d001      	beq.n	8008b08 <__sflush_r+0xac>
 8008b04:	2b16      	cmp	r3, #22
 8008b06:	d11e      	bne.n	8008b46 <__sflush_r+0xea>
 8008b08:	602f      	str	r7, [r5, #0]
 8008b0a:	2000      	movs	r0, #0
 8008b0c:	e022      	b.n	8008b54 <__sflush_r+0xf8>
 8008b0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b12:	b21b      	sxth	r3, r3
 8008b14:	e01b      	b.n	8008b4e <__sflush_r+0xf2>
 8008b16:	690f      	ldr	r7, [r1, #16]
 8008b18:	2f00      	cmp	r7, #0
 8008b1a:	d0f6      	beq.n	8008b0a <__sflush_r+0xae>
 8008b1c:	0793      	lsls	r3, r2, #30
 8008b1e:	680e      	ldr	r6, [r1, #0]
 8008b20:	bf08      	it	eq
 8008b22:	694b      	ldreq	r3, [r1, #20]
 8008b24:	600f      	str	r7, [r1, #0]
 8008b26:	bf18      	it	ne
 8008b28:	2300      	movne	r3, #0
 8008b2a:	eba6 0807 	sub.w	r8, r6, r7
 8008b2e:	608b      	str	r3, [r1, #8]
 8008b30:	f1b8 0f00 	cmp.w	r8, #0
 8008b34:	dde9      	ble.n	8008b0a <__sflush_r+0xae>
 8008b36:	6a21      	ldr	r1, [r4, #32]
 8008b38:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008b3a:	4643      	mov	r3, r8
 8008b3c:	463a      	mov	r2, r7
 8008b3e:	4628      	mov	r0, r5
 8008b40:	47b0      	blx	r6
 8008b42:	2800      	cmp	r0, #0
 8008b44:	dc08      	bgt.n	8008b58 <__sflush_r+0xfc>
 8008b46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b4e:	81a3      	strh	r3, [r4, #12]
 8008b50:	f04f 30ff 	mov.w	r0, #4294967295
 8008b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b58:	4407      	add	r7, r0
 8008b5a:	eba8 0800 	sub.w	r8, r8, r0
 8008b5e:	e7e7      	b.n	8008b30 <__sflush_r+0xd4>
 8008b60:	20400001 	.word	0x20400001

08008b64 <_fflush_r>:
 8008b64:	b538      	push	{r3, r4, r5, lr}
 8008b66:	690b      	ldr	r3, [r1, #16]
 8008b68:	4605      	mov	r5, r0
 8008b6a:	460c      	mov	r4, r1
 8008b6c:	b913      	cbnz	r3, 8008b74 <_fflush_r+0x10>
 8008b6e:	2500      	movs	r5, #0
 8008b70:	4628      	mov	r0, r5
 8008b72:	bd38      	pop	{r3, r4, r5, pc}
 8008b74:	b118      	cbz	r0, 8008b7e <_fflush_r+0x1a>
 8008b76:	6a03      	ldr	r3, [r0, #32]
 8008b78:	b90b      	cbnz	r3, 8008b7e <_fflush_r+0x1a>
 8008b7a:	f7ff fc8f 	bl	800849c <__sinit>
 8008b7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d0f3      	beq.n	8008b6e <_fflush_r+0xa>
 8008b86:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008b88:	07d0      	lsls	r0, r2, #31
 8008b8a:	d404      	bmi.n	8008b96 <_fflush_r+0x32>
 8008b8c:	0599      	lsls	r1, r3, #22
 8008b8e:	d402      	bmi.n	8008b96 <_fflush_r+0x32>
 8008b90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b92:	f7ff fe68 	bl	8008866 <__retarget_lock_acquire_recursive>
 8008b96:	4628      	mov	r0, r5
 8008b98:	4621      	mov	r1, r4
 8008b9a:	f7ff ff5f 	bl	8008a5c <__sflush_r>
 8008b9e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008ba0:	07da      	lsls	r2, r3, #31
 8008ba2:	4605      	mov	r5, r0
 8008ba4:	d4e4      	bmi.n	8008b70 <_fflush_r+0xc>
 8008ba6:	89a3      	ldrh	r3, [r4, #12]
 8008ba8:	059b      	lsls	r3, r3, #22
 8008baa:	d4e1      	bmi.n	8008b70 <_fflush_r+0xc>
 8008bac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008bae:	f7ff fe5b 	bl	8008868 <__retarget_lock_release_recursive>
 8008bb2:	e7dd      	b.n	8008b70 <_fflush_r+0xc>

08008bb4 <__swhatbuf_r>:
 8008bb4:	b570      	push	{r4, r5, r6, lr}
 8008bb6:	460c      	mov	r4, r1
 8008bb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bbc:	2900      	cmp	r1, #0
 8008bbe:	b096      	sub	sp, #88	@ 0x58
 8008bc0:	4615      	mov	r5, r2
 8008bc2:	461e      	mov	r6, r3
 8008bc4:	da0d      	bge.n	8008be2 <__swhatbuf_r+0x2e>
 8008bc6:	89a3      	ldrh	r3, [r4, #12]
 8008bc8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008bcc:	f04f 0100 	mov.w	r1, #0
 8008bd0:	bf14      	ite	ne
 8008bd2:	2340      	movne	r3, #64	@ 0x40
 8008bd4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008bd8:	2000      	movs	r0, #0
 8008bda:	6031      	str	r1, [r6, #0]
 8008bdc:	602b      	str	r3, [r5, #0]
 8008bde:	b016      	add	sp, #88	@ 0x58
 8008be0:	bd70      	pop	{r4, r5, r6, pc}
 8008be2:	466a      	mov	r2, sp
 8008be4:	f000 f848 	bl	8008c78 <_fstat_r>
 8008be8:	2800      	cmp	r0, #0
 8008bea:	dbec      	blt.n	8008bc6 <__swhatbuf_r+0x12>
 8008bec:	9901      	ldr	r1, [sp, #4]
 8008bee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008bf2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008bf6:	4259      	negs	r1, r3
 8008bf8:	4159      	adcs	r1, r3
 8008bfa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008bfe:	e7eb      	b.n	8008bd8 <__swhatbuf_r+0x24>

08008c00 <__smakebuf_r>:
 8008c00:	898b      	ldrh	r3, [r1, #12]
 8008c02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c04:	079d      	lsls	r5, r3, #30
 8008c06:	4606      	mov	r6, r0
 8008c08:	460c      	mov	r4, r1
 8008c0a:	d507      	bpl.n	8008c1c <__smakebuf_r+0x1c>
 8008c0c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008c10:	6023      	str	r3, [r4, #0]
 8008c12:	6123      	str	r3, [r4, #16]
 8008c14:	2301      	movs	r3, #1
 8008c16:	6163      	str	r3, [r4, #20]
 8008c18:	b003      	add	sp, #12
 8008c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c1c:	ab01      	add	r3, sp, #4
 8008c1e:	466a      	mov	r2, sp
 8008c20:	f7ff ffc8 	bl	8008bb4 <__swhatbuf_r>
 8008c24:	9f00      	ldr	r7, [sp, #0]
 8008c26:	4605      	mov	r5, r0
 8008c28:	4639      	mov	r1, r7
 8008c2a:	4630      	mov	r0, r6
 8008c2c:	f7ff fe8a 	bl	8008944 <_malloc_r>
 8008c30:	b948      	cbnz	r0, 8008c46 <__smakebuf_r+0x46>
 8008c32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c36:	059a      	lsls	r2, r3, #22
 8008c38:	d4ee      	bmi.n	8008c18 <__smakebuf_r+0x18>
 8008c3a:	f023 0303 	bic.w	r3, r3, #3
 8008c3e:	f043 0302 	orr.w	r3, r3, #2
 8008c42:	81a3      	strh	r3, [r4, #12]
 8008c44:	e7e2      	b.n	8008c0c <__smakebuf_r+0xc>
 8008c46:	89a3      	ldrh	r3, [r4, #12]
 8008c48:	6020      	str	r0, [r4, #0]
 8008c4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c4e:	81a3      	strh	r3, [r4, #12]
 8008c50:	9b01      	ldr	r3, [sp, #4]
 8008c52:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008c56:	b15b      	cbz	r3, 8008c70 <__smakebuf_r+0x70>
 8008c58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c5c:	4630      	mov	r0, r6
 8008c5e:	f000 f81d 	bl	8008c9c <_isatty_r>
 8008c62:	b128      	cbz	r0, 8008c70 <__smakebuf_r+0x70>
 8008c64:	89a3      	ldrh	r3, [r4, #12]
 8008c66:	f023 0303 	bic.w	r3, r3, #3
 8008c6a:	f043 0301 	orr.w	r3, r3, #1
 8008c6e:	81a3      	strh	r3, [r4, #12]
 8008c70:	89a3      	ldrh	r3, [r4, #12]
 8008c72:	431d      	orrs	r5, r3
 8008c74:	81a5      	strh	r5, [r4, #12]
 8008c76:	e7cf      	b.n	8008c18 <__smakebuf_r+0x18>

08008c78 <_fstat_r>:
 8008c78:	b538      	push	{r3, r4, r5, lr}
 8008c7a:	4d07      	ldr	r5, [pc, #28]	@ (8008c98 <_fstat_r+0x20>)
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	4604      	mov	r4, r0
 8008c80:	4608      	mov	r0, r1
 8008c82:	4611      	mov	r1, r2
 8008c84:	602b      	str	r3, [r5, #0]
 8008c86:	f7f7 ff38 	bl	8000afa <_fstat>
 8008c8a:	1c43      	adds	r3, r0, #1
 8008c8c:	d102      	bne.n	8008c94 <_fstat_r+0x1c>
 8008c8e:	682b      	ldr	r3, [r5, #0]
 8008c90:	b103      	cbz	r3, 8008c94 <_fstat_r+0x1c>
 8008c92:	6023      	str	r3, [r4, #0]
 8008c94:	bd38      	pop	{r3, r4, r5, pc}
 8008c96:	bf00      	nop
 8008c98:	2400043c 	.word	0x2400043c

08008c9c <_isatty_r>:
 8008c9c:	b538      	push	{r3, r4, r5, lr}
 8008c9e:	4d06      	ldr	r5, [pc, #24]	@ (8008cb8 <_isatty_r+0x1c>)
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	4604      	mov	r4, r0
 8008ca4:	4608      	mov	r0, r1
 8008ca6:	602b      	str	r3, [r5, #0]
 8008ca8:	f7f7 ff37 	bl	8000b1a <_isatty>
 8008cac:	1c43      	adds	r3, r0, #1
 8008cae:	d102      	bne.n	8008cb6 <_isatty_r+0x1a>
 8008cb0:	682b      	ldr	r3, [r5, #0]
 8008cb2:	b103      	cbz	r3, 8008cb6 <_isatty_r+0x1a>
 8008cb4:	6023      	str	r3, [r4, #0]
 8008cb6:	bd38      	pop	{r3, r4, r5, pc}
 8008cb8:	2400043c 	.word	0x2400043c

08008cbc <_sbrk_r>:
 8008cbc:	b538      	push	{r3, r4, r5, lr}
 8008cbe:	4d06      	ldr	r5, [pc, #24]	@ (8008cd8 <_sbrk_r+0x1c>)
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	4604      	mov	r4, r0
 8008cc4:	4608      	mov	r0, r1
 8008cc6:	602b      	str	r3, [r5, #0]
 8008cc8:	f7f7 ff40 	bl	8000b4c <_sbrk>
 8008ccc:	1c43      	adds	r3, r0, #1
 8008cce:	d102      	bne.n	8008cd6 <_sbrk_r+0x1a>
 8008cd0:	682b      	ldr	r3, [r5, #0]
 8008cd2:	b103      	cbz	r3, 8008cd6 <_sbrk_r+0x1a>
 8008cd4:	6023      	str	r3, [r4, #0]
 8008cd6:	bd38      	pop	{r3, r4, r5, pc}
 8008cd8:	2400043c 	.word	0x2400043c

08008cdc <_init>:
 8008cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cde:	bf00      	nop
 8008ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ce2:	bc08      	pop	{r3}
 8008ce4:	469e      	mov	lr, r3
 8008ce6:	4770      	bx	lr

08008ce8 <_fini>:
 8008ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cea:	bf00      	nop
 8008cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cee:	bc08      	pop	{r3}
 8008cf0:	469e      	mov	lr, r3
 8008cf2:	4770      	bx	lr
