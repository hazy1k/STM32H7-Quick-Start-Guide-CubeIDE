
8.GTIM-INT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c4c  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08007ee4  08007ee4  00008ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007f50  08007f50  00008f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007f58  08007f58  00008f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08007f5c  08007f5c  00008f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  24000000  08007f60  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002b0  2400006c  08007fcc  0000906c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400031c  08007fcc  0000931c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00018286  00000000  00000000  0000909a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000032dd  00000000  00000000  00021320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001250  00000000  00000000  00024600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000e23  00000000  00000000  00025850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a1dc  00000000  00000000  00026673  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001ebe2  00000000  00000000  0006084f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001686f5  00000000  00000000  0007f431  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001e7b26  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000515c  00000000  00000000  001e7b6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005a  00000000  00000000  001eccc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2400006c 	.word	0x2400006c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08007ecc 	.word	0x08007ecc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000070 	.word	0x24000070
 80002d4:	08007ecc 	.word	0x08007ecc

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b988 	b.w	8000600 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	468e      	mov	lr, r1
 8000310:	4604      	mov	r4, r0
 8000312:	4688      	mov	r8, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d962      	bls.n	80003e4 <__udivmoddi4+0xdc>
 800031e:	fab2 f682 	clz	r6, r2
 8000322:	b14e      	cbz	r6, 8000338 <__udivmoddi4+0x30>
 8000324:	f1c6 0320 	rsb	r3, r6, #32
 8000328:	fa01 f806 	lsl.w	r8, r1, r6
 800032c:	fa20 f303 	lsr.w	r3, r0, r3
 8000330:	40b7      	lsls	r7, r6
 8000332:	ea43 0808 	orr.w	r8, r3, r8
 8000336:	40b4      	lsls	r4, r6
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	fbb8 f1fe 	udiv	r1, r8, lr
 8000344:	0c23      	lsrs	r3, r4, #16
 8000346:	fb0e 8811 	mls	r8, lr, r1, r8
 800034a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034e:	fb01 f20c 	mul.w	r2, r1, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d909      	bls.n	800036a <__udivmoddi4+0x62>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f101 30ff 	add.w	r0, r1, #4294967295
 800035c:	f080 80ea 	bcs.w	8000534 <__udivmoddi4+0x22c>
 8000360:	429a      	cmp	r2, r3
 8000362:	f240 80e7 	bls.w	8000534 <__udivmoddi4+0x22c>
 8000366:	3902      	subs	r1, #2
 8000368:	443b      	add	r3, r7
 800036a:	1a9a      	subs	r2, r3, r2
 800036c:	b2a3      	uxth	r3, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800037a:	fb00 fc0c 	mul.w	ip, r0, ip
 800037e:	459c      	cmp	ip, r3
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x8e>
 8000382:	18fb      	adds	r3, r7, r3
 8000384:	f100 32ff 	add.w	r2, r0, #4294967295
 8000388:	f080 80d6 	bcs.w	8000538 <__udivmoddi4+0x230>
 800038c:	459c      	cmp	ip, r3
 800038e:	f240 80d3 	bls.w	8000538 <__udivmoddi4+0x230>
 8000392:	443b      	add	r3, r7
 8000394:	3802      	subs	r0, #2
 8000396:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039a:	eba3 030c 	sub.w	r3, r3, ip
 800039e:	2100      	movs	r1, #0
 80003a0:	b11d      	cbz	r5, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40f3      	lsrs	r3, r6
 80003a4:	2200      	movs	r2, #0
 80003a6:	e9c5 3200 	strd	r3, r2, [r5]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d905      	bls.n	80003be <__udivmoddi4+0xb6>
 80003b2:	b10d      	cbz	r5, 80003b8 <__udivmoddi4+0xb0>
 80003b4:	e9c5 0100 	strd	r0, r1, [r5]
 80003b8:	2100      	movs	r1, #0
 80003ba:	4608      	mov	r0, r1
 80003bc:	e7f5      	b.n	80003aa <__udivmoddi4+0xa2>
 80003be:	fab3 f183 	clz	r1, r3
 80003c2:	2900      	cmp	r1, #0
 80003c4:	d146      	bne.n	8000454 <__udivmoddi4+0x14c>
 80003c6:	4573      	cmp	r3, lr
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xc8>
 80003ca:	4282      	cmp	r2, r0
 80003cc:	f200 8105 	bhi.w	80005da <__udivmoddi4+0x2d2>
 80003d0:	1a84      	subs	r4, r0, r2
 80003d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	4690      	mov	r8, r2
 80003da:	2d00      	cmp	r5, #0
 80003dc:	d0e5      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003de:	e9c5 4800 	strd	r4, r8, [r5]
 80003e2:	e7e2      	b.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	2a00      	cmp	r2, #0
 80003e6:	f000 8090 	beq.w	800050a <__udivmoddi4+0x202>
 80003ea:	fab2 f682 	clz	r6, r2
 80003ee:	2e00      	cmp	r6, #0
 80003f0:	f040 80a4 	bne.w	800053c <__udivmoddi4+0x234>
 80003f4:	1a8a      	subs	r2, r1, r2
 80003f6:	0c03      	lsrs	r3, r0, #16
 80003f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fc:	b280      	uxth	r0, r0
 80003fe:	b2bc      	uxth	r4, r7
 8000400:	2101      	movs	r1, #1
 8000402:	fbb2 fcfe 	udiv	ip, r2, lr
 8000406:	fb0e 221c 	mls	r2, lr, ip, r2
 800040a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800040e:	fb04 f20c 	mul.w	r2, r4, ip
 8000412:	429a      	cmp	r2, r3
 8000414:	d907      	bls.n	8000426 <__udivmoddi4+0x11e>
 8000416:	18fb      	adds	r3, r7, r3
 8000418:	f10c 38ff 	add.w	r8, ip, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x11c>
 800041e:	429a      	cmp	r2, r3
 8000420:	f200 80e0 	bhi.w	80005e4 <__udivmoddi4+0x2dc>
 8000424:	46c4      	mov	ip, r8
 8000426:	1a9b      	subs	r3, r3, r2
 8000428:	fbb3 f2fe 	udiv	r2, r3, lr
 800042c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000430:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000434:	fb02 f404 	mul.w	r4, r2, r4
 8000438:	429c      	cmp	r4, r3
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x144>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x142>
 8000444:	429c      	cmp	r4, r3
 8000446:	f200 80ca 	bhi.w	80005de <__udivmoddi4+0x2d6>
 800044a:	4602      	mov	r2, r0
 800044c:	1b1b      	subs	r3, r3, r4
 800044e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000452:	e7a5      	b.n	80003a0 <__udivmoddi4+0x98>
 8000454:	f1c1 0620 	rsb	r6, r1, #32
 8000458:	408b      	lsls	r3, r1
 800045a:	fa22 f706 	lsr.w	r7, r2, r6
 800045e:	431f      	orrs	r7, r3
 8000460:	fa0e f401 	lsl.w	r4, lr, r1
 8000464:	fa20 f306 	lsr.w	r3, r0, r6
 8000468:	fa2e fe06 	lsr.w	lr, lr, r6
 800046c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000470:	4323      	orrs	r3, r4
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	fa1f fc87 	uxth.w	ip, r7
 800047a:	fbbe f0f9 	udiv	r0, lr, r9
 800047e:	0c1c      	lsrs	r4, r3, #16
 8000480:	fb09 ee10 	mls	lr, r9, r0, lr
 8000484:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000488:	fb00 fe0c 	mul.w	lr, r0, ip
 800048c:	45a6      	cmp	lr, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	d909      	bls.n	80004a8 <__udivmoddi4+0x1a0>
 8000494:	193c      	adds	r4, r7, r4
 8000496:	f100 3aff 	add.w	sl, r0, #4294967295
 800049a:	f080 809c 	bcs.w	80005d6 <__udivmoddi4+0x2ce>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f240 8099 	bls.w	80005d6 <__udivmoddi4+0x2ce>
 80004a4:	3802      	subs	r0, #2
 80004a6:	443c      	add	r4, r7
 80004a8:	eba4 040e 	sub.w	r4, r4, lr
 80004ac:	fa1f fe83 	uxth.w	lr, r3
 80004b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b4:	fb09 4413 	mls	r4, r9, r3, r4
 80004b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c0:	45a4      	cmp	ip, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x1ce>
 80004c4:	193c      	adds	r4, r7, r4
 80004c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80004ca:	f080 8082 	bcs.w	80005d2 <__udivmoddi4+0x2ca>
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d97f      	bls.n	80005d2 <__udivmoddi4+0x2ca>
 80004d2:	3b02      	subs	r3, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	fba0 ec02 	umull	lr, ip, r0, r2
 80004e2:	4564      	cmp	r4, ip
 80004e4:	4673      	mov	r3, lr
 80004e6:	46e1      	mov	r9, ip
 80004e8:	d362      	bcc.n	80005b0 <__udivmoddi4+0x2a8>
 80004ea:	d05f      	beq.n	80005ac <__udivmoddi4+0x2a4>
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x1fe>
 80004ee:	ebb8 0203 	subs.w	r2, r8, r3
 80004f2:	eb64 0409 	sbc.w	r4, r4, r9
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	431e      	orrs	r6, r3
 8000500:	40cc      	lsrs	r4, r1
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e74f      	b.n	80003aa <__udivmoddi4+0xa2>
 800050a:	fbb1 fcf2 	udiv	ip, r1, r2
 800050e:	0c01      	lsrs	r1, r0, #16
 8000510:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000514:	b280      	uxth	r0, r0
 8000516:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800051a:	463b      	mov	r3, r7
 800051c:	4638      	mov	r0, r7
 800051e:	463c      	mov	r4, r7
 8000520:	46b8      	mov	r8, r7
 8000522:	46be      	mov	lr, r7
 8000524:	2620      	movs	r6, #32
 8000526:	fbb1 f1f7 	udiv	r1, r1, r7
 800052a:	eba2 0208 	sub.w	r2, r2, r8
 800052e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000532:	e766      	b.n	8000402 <__udivmoddi4+0xfa>
 8000534:	4601      	mov	r1, r0
 8000536:	e718      	b.n	800036a <__udivmoddi4+0x62>
 8000538:	4610      	mov	r0, r2
 800053a:	e72c      	b.n	8000396 <__udivmoddi4+0x8e>
 800053c:	f1c6 0220 	rsb	r2, r6, #32
 8000540:	fa2e f302 	lsr.w	r3, lr, r2
 8000544:	40b7      	lsls	r7, r6
 8000546:	40b1      	lsls	r1, r6
 8000548:	fa20 f202 	lsr.w	r2, r0, r2
 800054c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000550:	430a      	orrs	r2, r1
 8000552:	fbb3 f8fe 	udiv	r8, r3, lr
 8000556:	b2bc      	uxth	r4, r7
 8000558:	fb0e 3318 	mls	r3, lr, r8, r3
 800055c:	0c11      	lsrs	r1, r2, #16
 800055e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000562:	fb08 f904 	mul.w	r9, r8, r4
 8000566:	40b0      	lsls	r0, r6
 8000568:	4589      	cmp	r9, r1
 800056a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800056e:	b280      	uxth	r0, r0
 8000570:	d93e      	bls.n	80005f0 <__udivmoddi4+0x2e8>
 8000572:	1879      	adds	r1, r7, r1
 8000574:	f108 3cff 	add.w	ip, r8, #4294967295
 8000578:	d201      	bcs.n	800057e <__udivmoddi4+0x276>
 800057a:	4589      	cmp	r9, r1
 800057c:	d81f      	bhi.n	80005be <__udivmoddi4+0x2b6>
 800057e:	eba1 0109 	sub.w	r1, r1, r9
 8000582:	fbb1 f9fe 	udiv	r9, r1, lr
 8000586:	fb09 f804 	mul.w	r8, r9, r4
 800058a:	fb0e 1119 	mls	r1, lr, r9, r1
 800058e:	b292      	uxth	r2, r2
 8000590:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000594:	4542      	cmp	r2, r8
 8000596:	d229      	bcs.n	80005ec <__udivmoddi4+0x2e4>
 8000598:	18ba      	adds	r2, r7, r2
 800059a:	f109 31ff 	add.w	r1, r9, #4294967295
 800059e:	d2c4      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a0:	4542      	cmp	r2, r8
 80005a2:	d2c2      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a4:	f1a9 0102 	sub.w	r1, r9, #2
 80005a8:	443a      	add	r2, r7
 80005aa:	e7be      	b.n	800052a <__udivmoddi4+0x222>
 80005ac:	45f0      	cmp	r8, lr
 80005ae:	d29d      	bcs.n	80004ec <__udivmoddi4+0x1e4>
 80005b0:	ebbe 0302 	subs.w	r3, lr, r2
 80005b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005b8:	3801      	subs	r0, #1
 80005ba:	46e1      	mov	r9, ip
 80005bc:	e796      	b.n	80004ec <__udivmoddi4+0x1e4>
 80005be:	eba7 0909 	sub.w	r9, r7, r9
 80005c2:	4449      	add	r1, r9
 80005c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80005c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80005cc:	fb09 f804 	mul.w	r8, r9, r4
 80005d0:	e7db      	b.n	800058a <__udivmoddi4+0x282>
 80005d2:	4673      	mov	r3, lr
 80005d4:	e77f      	b.n	80004d6 <__udivmoddi4+0x1ce>
 80005d6:	4650      	mov	r0, sl
 80005d8:	e766      	b.n	80004a8 <__udivmoddi4+0x1a0>
 80005da:	4608      	mov	r0, r1
 80005dc:	e6fd      	b.n	80003da <__udivmoddi4+0xd2>
 80005de:	443b      	add	r3, r7
 80005e0:	3a02      	subs	r2, #2
 80005e2:	e733      	b.n	800044c <__udivmoddi4+0x144>
 80005e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e8:	443b      	add	r3, r7
 80005ea:	e71c      	b.n	8000426 <__udivmoddi4+0x11e>
 80005ec:	4649      	mov	r1, r9
 80005ee:	e79c      	b.n	800052a <__udivmoddi4+0x222>
 80005f0:	eba1 0109 	sub.w	r1, r1, r9
 80005f4:	46c4      	mov	ip, r8
 80005f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80005fa:	fb09 f804 	mul.w	r8, r9, r4
 80005fe:	e7c4      	b.n	800058a <__udivmoddi4+0x282>

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <MX_BEEP_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_BEEP_GPIO_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b086      	sub	sp, #24
 8000608:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
 8000616:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000618:	4b12      	ldr	r3, [pc, #72]	@ (8000664 <MX_BEEP_GPIO_Init+0x60>)
 800061a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800061e:	4a11      	ldr	r2, [pc, #68]	@ (8000664 <MX_BEEP_GPIO_Init+0x60>)
 8000620:	f043 0310 	orr.w	r3, r3, #16
 8000624:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000628:	4b0e      	ldr	r3, [pc, #56]	@ (8000664 <MX_BEEP_GPIO_Init+0x60>)
 800062a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800062e:	f003 0310 	and.w	r3, r3, #16
 8000632:	603b      	str	r3, [r7, #0]
 8000634:	683b      	ldr	r3, [r7, #0]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BEEP_GPIO_Port, BEEP_Pin, GPIO_PIN_RESET);
 8000636:	2200      	movs	r2, #0
 8000638:	2110      	movs	r1, #16
 800063a:	480b      	ldr	r0, [pc, #44]	@ (8000668 <MX_BEEP_GPIO_Init+0x64>)
 800063c:	f001 fe26 	bl	800228c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BEEP_Pin */
  GPIO_InitStruct.Pin = BEEP_Pin;
 8000640:	2310      	movs	r3, #16
 8000642:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000644:	2301      	movs	r3, #1
 8000646:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000648:	2300      	movs	r3, #0
 800064a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064c:	2300      	movs	r3, #0
 800064e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000650:	1d3b      	adds	r3, r7, #4
 8000652:	4619      	mov	r1, r3
 8000654:	4804      	ldr	r0, [pc, #16]	@ (8000668 <MX_BEEP_GPIO_Init+0x64>)
 8000656:	f001 fc69 	bl	8001f2c <HAL_GPIO_Init>
}
 800065a:	bf00      	nop
 800065c:	3718      	adds	r7, #24
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	58024400 	.word	0x58024400
 8000668:	58021000 	.word	0x58021000

0800066c <MX_KEY_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_KEY_GPIO_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b086      	sub	sp, #24
 8000670:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000672:	1d3b      	adds	r3, r7, #4
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000680:	4b14      	ldr	r3, [pc, #80]	@ (80006d4 <MX_KEY_GPIO_Init+0x68>)
 8000682:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000686:	4a13      	ldr	r2, [pc, #76]	@ (80006d4 <MX_KEY_GPIO_Init+0x68>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000690:	4b10      	ldr	r3, [pc, #64]	@ (80006d4 <MX_KEY_GPIO_Init+0x68>)
 8000692:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	603b      	str	r3, [r7, #0]
 800069c:	683b      	ldr	r3, [r7, #0]
  /*Configure GPIO pin : WK_UP_Pin */
  GPIO_InitStruct.Pin = WK_UP_Pin;
 800069e:	2301      	movs	r3, #1
 80006a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006a2:	2300      	movs	r3, #0
 80006a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006a6:	2302      	movs	r3, #2
 80006a8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(WK_UP_GPIO_Port, &GPIO_InitStruct);
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	4619      	mov	r1, r3
 80006ae:	480a      	ldr	r0, [pc, #40]	@ (80006d8 <MX_KEY_GPIO_Init+0x6c>)
 80006b0:	f001 fc3c 	bl	8001f2c <HAL_GPIO_Init>
  /*Configure GPIO pins : KEY0_Pin KEY1_Pin */
  GPIO_InitStruct.Pin = KEY0_Pin|KEY1_Pin;
 80006b4:	f248 0302 	movw	r3, #32770	@ 0x8002
 80006b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ba:	2300      	movs	r3, #0
 80006bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006be:	2301      	movs	r3, #1
 80006c0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	4619      	mov	r1, r3
 80006c6:	4804      	ldr	r0, [pc, #16]	@ (80006d8 <MX_KEY_GPIO_Init+0x6c>)
 80006c8:	f001 fc30 	bl	8001f2c <HAL_GPIO_Init>
}
 80006cc:	bf00      	nop
 80006ce:	3718      	adds	r7, #24
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	58024400 	.word	0x58024400
 80006d8:	58020000 	.word	0x58020000

080006dc <MX_LED_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_LED_GPIO_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b088      	sub	sp, #32
 80006e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e2:	f107 030c 	add.w	r3, r7, #12
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
 80006f0:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006f2:	4b24      	ldr	r3, [pc, #144]	@ (8000784 <MX_LED_GPIO_Init+0xa8>)
 80006f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006f8:	4a22      	ldr	r2, [pc, #136]	@ (8000784 <MX_LED_GPIO_Init+0xa8>)
 80006fa:	f043 0310 	orr.w	r3, r3, #16
 80006fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000702:	4b20      	ldr	r3, [pc, #128]	@ (8000784 <MX_LED_GPIO_Init+0xa8>)
 8000704:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000708:	f003 0310 	and.w	r3, r3, #16
 800070c:	60bb      	str	r3, [r7, #8]
 800070e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000710:	4b1c      	ldr	r3, [pc, #112]	@ (8000784 <MX_LED_GPIO_Init+0xa8>)
 8000712:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000716:	4a1b      	ldr	r2, [pc, #108]	@ (8000784 <MX_LED_GPIO_Init+0xa8>)
 8000718:	f043 0302 	orr.w	r3, r3, #2
 800071c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000720:	4b18      	ldr	r3, [pc, #96]	@ (8000784 <MX_LED_GPIO_Init+0xa8>)
 8000722:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000726:	f003 0302 	and.w	r3, r3, #2
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_Pin|LED2_Pin, GPIO_PIN_SET);
 800072e:	2201      	movs	r2, #1
 8000730:	2160      	movs	r1, #96	@ 0x60
 8000732:	4815      	ldr	r0, [pc, #84]	@ (8000788 <MX_LED_GPIO_Init+0xac>)
 8000734:	f001 fdaa 	bl	800228c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 8000738:	2201      	movs	r2, #1
 800073a:	2110      	movs	r1, #16
 800073c:	4813      	ldr	r0, [pc, #76]	@ (800078c <MX_LED_GPIO_Init+0xb0>)
 800073e:	f001 fda5 	bl	800228c <HAL_GPIO_WritePin>
  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000742:	2360      	movs	r3, #96	@ 0x60
 8000744:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000746:	2301      	movs	r3, #1
 8000748:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074e:	2300      	movs	r3, #0
 8000750:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000752:	f107 030c 	add.w	r3, r7, #12
 8000756:	4619      	mov	r1, r3
 8000758:	480b      	ldr	r0, [pc, #44]	@ (8000788 <MX_LED_GPIO_Init+0xac>)
 800075a:	f001 fbe7 	bl	8001f2c <HAL_GPIO_Init>
  /*Configure GPIO pin : LED0_Pin */
  GPIO_InitStruct.Pin = LED0_Pin;
 800075e:	2310      	movs	r3, #16
 8000760:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000762:	2301      	movs	r3, #1
 8000764:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076a:	2300      	movs	r3, #0
 800076c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 800076e:	f107 030c 	add.w	r3, r7, #12
 8000772:	4619      	mov	r1, r3
 8000774:	4805      	ldr	r0, [pc, #20]	@ (800078c <MX_LED_GPIO_Init+0xb0>)
 8000776:	f001 fbd9 	bl	8001f2c <HAL_GPIO_Init>
}
 800077a:	bf00      	nop
 800077c:	3720      	adds	r7, #32
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	58024400 	.word	0x58024400
 8000788:	58021000 	.word	0x58021000
 800078c:	58020400 	.word	0x58020400

08000790 <bsp_init>:
#include "bsp_init.h"

void bsp_init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
	MX_LED_GPIO_Init();
 8000794:	f7ff ffa2 	bl	80006dc <MX_LED_GPIO_Init>
	MX_BEEP_GPIO_Init();
 8000798:	f7ff ff34 	bl	8000604 <MX_BEEP_GPIO_Init>
	MX_KEY_GPIO_Init();
 800079c:	f7ff ff66 	bl	800066c <MX_KEY_GPIO_Init>
	// MX_EXTI_GPIO_Init();
	MX_USART1_UART_Init();
 80007a0:	f000 fb3e 	bl	8000e20 <MX_USART1_UART_Init>
	// MX_IWDG1_Init(); // 溢出时间约1s
	// MX_TIM6_Init(); // 溢出时间约500ms
}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80007ac:	f000 f88c 	bl	80008c8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b0:	f000 fc32 	bl	8001018 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b4:	f000 f80c 	bl	80007d0 <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  bsp_init();
 80007b8:	f7ff ffea 	bl	8000790 <bsp_init>
  printf("GTIM Interrupt Test\r\n");
 80007bc:	4803      	ldr	r0, [pc, #12]	@ (80007cc <main+0x24>)
 80007be:	f006 fff1 	bl	80077a4 <puts>
  MX_TIM3_Init(); // 溢出时间约500ms
 80007c2:	f000 fa93 	bl	8000cec <MX_TIM3_Init>
  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007c6:	bf00      	nop
 80007c8:	e7fd      	b.n	80007c6 <main+0x1e>
 80007ca:	bf00      	nop
 80007cc:	08007ee4 	.word	0x08007ee4

080007d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b09c      	sub	sp, #112	@ 0x70
 80007d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007da:	224c      	movs	r2, #76	@ 0x4c
 80007dc:	2100      	movs	r1, #0
 80007de:	4618      	mov	r0, r3
 80007e0:	f007 f8c0 	bl	8007964 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e4:	1d3b      	adds	r3, r7, #4
 80007e6:	2220      	movs	r2, #32
 80007e8:	2100      	movs	r1, #0
 80007ea:	4618      	mov	r0, r3
 80007ec:	f007 f8ba 	bl	8007964 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007f0:	2002      	movs	r0, #2
 80007f2:	f001 fda3 	bl	800233c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80007f6:	2300      	movs	r3, #0
 80007f8:	603b      	str	r3, [r7, #0]
 80007fa:	4b31      	ldr	r3, [pc, #196]	@ (80008c0 <SystemClock_Config+0xf0>)
 80007fc:	699b      	ldr	r3, [r3, #24]
 80007fe:	4a30      	ldr	r2, [pc, #192]	@ (80008c0 <SystemClock_Config+0xf0>)
 8000800:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000804:	6193      	str	r3, [r2, #24]
 8000806:	4b2e      	ldr	r3, [pc, #184]	@ (80008c0 <SystemClock_Config+0xf0>)
 8000808:	699b      	ldr	r3, [r3, #24]
 800080a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800080e:	603b      	str	r3, [r7, #0]
 8000810:	4b2c      	ldr	r3, [pc, #176]	@ (80008c4 <SystemClock_Config+0xf4>)
 8000812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000814:	4a2b      	ldr	r2, [pc, #172]	@ (80008c4 <SystemClock_Config+0xf4>)
 8000816:	f043 0301 	orr.w	r3, r3, #1
 800081a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800081c:	4b29      	ldr	r3, [pc, #164]	@ (80008c4 <SystemClock_Config+0xf4>)
 800081e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000820:	f003 0301 	and.w	r3, r3, #1
 8000824:	603b      	str	r3, [r7, #0]
 8000826:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000828:	bf00      	nop
 800082a:	4b25      	ldr	r3, [pc, #148]	@ (80008c0 <SystemClock_Config+0xf0>)
 800082c:	699b      	ldr	r3, [r3, #24]
 800082e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000832:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000836:	d1f8      	bne.n	800082a <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000838:	2309      	movs	r3, #9
 800083a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800083c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000840:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000842:	2301      	movs	r3, #1
 8000844:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000846:	2302      	movs	r3, #2
 8000848:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800084a:	2302      	movs	r3, #2
 800084c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 800084e:	2302      	movs	r3, #2
 8000850:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 8000852:	23f0      	movs	r3, #240	@ 0xf0
 8000854:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000856:	2302      	movs	r3, #2
 8000858:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800085a:	2302      	movs	r3, #2
 800085c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800085e:	2302      	movs	r3, #2
 8000860:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000862:	2308      	movs	r3, #8
 8000864:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000866:	2300      	movs	r3, #0
 8000868:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800086a:	2300      	movs	r3, #0
 800086c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800086e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000872:	4618      	mov	r0, r3
 8000874:	f001 fd9c 	bl	80023b0 <HAL_RCC_OscConfig>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800087e:	f000 f84f 	bl	8000920 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000882:	233f      	movs	r3, #63	@ 0x3f
 8000884:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000886:	2303      	movs	r3, #3
 8000888:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800088a:	2300      	movs	r3, #0
 800088c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800088e:	2308      	movs	r3, #8
 8000890:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000892:	2340      	movs	r3, #64	@ 0x40
 8000894:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000896:	2340      	movs	r3, #64	@ 0x40
 8000898:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800089a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800089e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008a0:	2340      	movs	r3, #64	@ 0x40
 80008a2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008a4:	1d3b      	adds	r3, r7, #4
 80008a6:	2104      	movs	r1, #4
 80008a8:	4618      	mov	r0, r3
 80008aa:	f002 f9db 	bl	8002c64 <HAL_RCC_ClockConfig>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80008b4:	f000 f834 	bl	8000920 <Error_Handler>
  }
}
 80008b8:	bf00      	nop
 80008ba:	3770      	adds	r7, #112	@ 0x70
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	58024800 	.word	0x58024800
 80008c4:	58000400 	.word	0x58000400

080008c8 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80008ce:	463b      	mov	r3, r7
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80008da:	f000 fd4b 	bl	8001374 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80008de:	2301      	movs	r3, #1
 80008e0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80008ea:	231f      	movs	r3, #31
 80008ec:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80008ee:	2387      	movs	r3, #135	@ 0x87
 80008f0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80008f6:	2300      	movs	r3, #0
 80008f8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80008fa:	2301      	movs	r3, #1
 80008fc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80008fe:	2301      	movs	r3, #1
 8000900:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000902:	2300      	movs	r3, #0
 8000904:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000906:	2300      	movs	r3, #0
 8000908:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800090a:	463b      	mov	r3, r7
 800090c:	4618      	mov	r0, r3
 800090e:	f000 fd69 	bl	80013e4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000912:	2004      	movs	r0, #4
 8000914:	f000 fd46 	bl	80013a4 <HAL_MPU_Enable>

}
 8000918:	bf00      	nop
 800091a:	3710      	adds	r7, #16
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}

08000920 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000924:	b672      	cpsid	i
}
 8000926:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000928:	bf00      	nop
 800092a:	e7fd      	b.n	8000928 <Error_Handler+0x8>

0800092c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000932:	4b0a      	ldr	r3, [pc, #40]	@ (800095c <HAL_MspInit+0x30>)
 8000934:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000938:	4a08      	ldr	r2, [pc, #32]	@ (800095c <HAL_MspInit+0x30>)
 800093a:	f043 0302 	orr.w	r3, r3, #2
 800093e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000942:	4b06      	ldr	r3, [pc, #24]	@ (800095c <HAL_MspInit+0x30>)
 8000944:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000948:	f003 0302 	and.w	r3, r3, #2
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000950:	bf00      	nop
 8000952:	370c      	adds	r7, #12
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr
 800095c:	58024400 	.word	0x58024400

08000960 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000964:	bf00      	nop
 8000966:	e7fd      	b.n	8000964 <NMI_Handler+0x4>

08000968 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800096c:	bf00      	nop
 800096e:	e7fd      	b.n	800096c <HardFault_Handler+0x4>

08000970 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000974:	bf00      	nop
 8000976:	e7fd      	b.n	8000974 <MemManage_Handler+0x4>

08000978 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800097c:	bf00      	nop
 800097e:	e7fd      	b.n	800097c <BusFault_Handler+0x4>

08000980 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000984:	bf00      	nop
 8000986:	e7fd      	b.n	8000984 <UsageFault_Handler+0x4>

08000988 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr

08000996 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800099a:	bf00      	nop
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr

080009a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr

080009b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b2:	b580      	push	{r7, lr}
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b6:	f000 fba1 	bl	80010fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
	...

080009c0 <WWDG_IRQHandler>:

/**
  * @brief This function handles Window watchdog interrupt.
  */
void WWDG_IRQHandler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN WWDG_IRQn 0 */

  /* USER CODE END WWDG_IRQn 0 */
  HAL_WWDG_IRQHandler(&hwwdg1);
 80009c4:	4802      	ldr	r0, [pc, #8]	@ (80009d0 <WWDG_IRQHandler+0x10>)
 80009c6:	f006 fdab 	bl	8007520 <HAL_WWDG_IRQHandler>
  /* USER CODE BEGIN WWDG_IRQn 1 */
  /* USER CODE END WWDG_IRQn 1 */
}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	240001b8 	.word	0x240001b8

080009d4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI_KEY1_Pin);
 80009d8:	2002      	movs	r0, #2
 80009da:	f001 fc8a 	bl	80022f2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
	...

080009e4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80009e8:	4805      	ldr	r0, [pc, #20]	@ (8000a00 <TIM3_IRQHandler+0x1c>)
 80009ea:	f004 fbc3 	bl	8005174 <HAL_TIM_IRQHandler>
  HAL_GPIO_TogglePin(LED_RED_Port, LED_RED_Pin);
 80009ee:	2140      	movs	r1, #64	@ 0x40
 80009f0:	4804      	ldr	r0, [pc, #16]	@ (8000a04 <TIM3_IRQHandler+0x20>)
 80009f2:	f001 fc64 	bl	80022be <HAL_GPIO_TogglePin>
  printf("TIM6 Interrupt Triggered!\n");
 80009f6:	4804      	ldr	r0, [pc, #16]	@ (8000a08 <TIM3_IRQHandler+0x24>)
 80009f8:	f006 fed4 	bl	80077a4 <puts>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  /* USER CODE END TIM3_IRQn 1 */
}
 80009fc:	bf00      	nop
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	2400008c 	.word	0x2400008c
 8000a04:	58021000 	.word	0x58021000
 8000a08:	08007efc 	.word	0x08007efc

08000a0c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a10:	4802      	ldr	r0, [pc, #8]	@ (8000a1c <USART1_IRQHandler+0x10>)
 8000a12:	f005 f8a9 	bl	8005b68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	24000124 	.word	0x24000124

08000a20 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a24:	4802      	ldr	r0, [pc, #8]	@ (8000a30 <TIM6_DAC_IRQHandler+0x10>)
 8000a26:	f004 fba5 	bl	8005174 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	240000d8 	.word	0x240000d8

08000a34 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b086      	sub	sp, #24
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	60f8      	str	r0, [r7, #12]
 8000a3c:	60b9      	str	r1, [r7, #8]
 8000a3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a40:	2300      	movs	r3, #0
 8000a42:	617b      	str	r3, [r7, #20]
 8000a44:	e00a      	b.n	8000a5c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a46:	f3af 8000 	nop.w
 8000a4a:	4601      	mov	r1, r0
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	1c5a      	adds	r2, r3, #1
 8000a50:	60ba      	str	r2, [r7, #8]
 8000a52:	b2ca      	uxtb	r2, r1
 8000a54:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	617b      	str	r3, [r7, #20]
 8000a5c:	697a      	ldr	r2, [r7, #20]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	dbf0      	blt.n	8000a46 <_read+0x12>
  }

  return len;
 8000a64:	687b      	ldr	r3, [r7, #4]
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3718      	adds	r7, #24
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	b086      	sub	sp, #24
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	60f8      	str	r0, [r7, #12]
 8000a76:	60b9      	str	r1, [r7, #8]
 8000a78:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	617b      	str	r3, [r7, #20]
 8000a7e:	e009      	b.n	8000a94 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	1c5a      	adds	r2, r3, #1
 8000a84:	60ba      	str	r2, [r7, #8]
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f000 fa87 	bl	8000f9c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	3301      	adds	r3, #1
 8000a92:	617b      	str	r3, [r7, #20]
 8000a94:	697a      	ldr	r2, [r7, #20]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	dbf1      	blt.n	8000a80 <_write+0x12>
  }
  return len;
 8000a9c:	687b      	ldr	r3, [r7, #4]
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3718      	adds	r7, #24
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <_close>:

int _close(int file)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	b083      	sub	sp, #12
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000aae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	370c      	adds	r7, #12
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr

08000abe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	b083      	sub	sp, #12
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	6078      	str	r0, [r7, #4]
 8000ac6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ace:	605a      	str	r2, [r3, #4]
  return 0;
 8000ad0:	2300      	movs	r3, #0
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr

08000ade <_isatty>:

int _isatty(int file)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	b083      	sub	sp, #12
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ae6:	2301      	movs	r3, #1
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	370c      	adds	r7, #12
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b085      	sub	sp, #20
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	60f8      	str	r0, [r7, #12]
 8000afc:	60b9      	str	r1, [r7, #8]
 8000afe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b00:	2300      	movs	r3, #0
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3714      	adds	r7, #20
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
	...

08000b10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b18:	4a14      	ldr	r2, [pc, #80]	@ (8000b6c <_sbrk+0x5c>)
 8000b1a:	4b15      	ldr	r3, [pc, #84]	@ (8000b70 <_sbrk+0x60>)
 8000b1c:	1ad3      	subs	r3, r2, r3
 8000b1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b24:	4b13      	ldr	r3, [pc, #76]	@ (8000b74 <_sbrk+0x64>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d102      	bne.n	8000b32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b2c:	4b11      	ldr	r3, [pc, #68]	@ (8000b74 <_sbrk+0x64>)
 8000b2e:	4a12      	ldr	r2, [pc, #72]	@ (8000b78 <_sbrk+0x68>)
 8000b30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b32:	4b10      	ldr	r3, [pc, #64]	@ (8000b74 <_sbrk+0x64>)
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4413      	add	r3, r2
 8000b3a:	693a      	ldr	r2, [r7, #16]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d207      	bcs.n	8000b50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b40:	f006 ff5e 	bl	8007a00 <__errno>
 8000b44:	4603      	mov	r3, r0
 8000b46:	220c      	movs	r2, #12
 8000b48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b4e:	e009      	b.n	8000b64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b50:	4b08      	ldr	r3, [pc, #32]	@ (8000b74 <_sbrk+0x64>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b56:	4b07      	ldr	r3, [pc, #28]	@ (8000b74 <_sbrk+0x64>)
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	4a05      	ldr	r2, [pc, #20]	@ (8000b74 <_sbrk+0x64>)
 8000b60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b62:	68fb      	ldr	r3, [r7, #12]
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3718      	adds	r7, #24
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	24080000 	.word	0x24080000
 8000b70:	00000400 	.word	0x00000400
 8000b74:	24000088 	.word	0x24000088
 8000b78:	24000320 	.word	0x24000320

08000b7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b80:	4b43      	ldr	r3, [pc, #268]	@ (8000c90 <SystemInit+0x114>)
 8000b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b86:	4a42      	ldr	r2, [pc, #264]	@ (8000c90 <SystemInit+0x114>)
 8000b88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b90:	4b40      	ldr	r3, [pc, #256]	@ (8000c94 <SystemInit+0x118>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f003 030f 	and.w	r3, r3, #15
 8000b98:	2b06      	cmp	r3, #6
 8000b9a:	d807      	bhi.n	8000bac <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b9c:	4b3d      	ldr	r3, [pc, #244]	@ (8000c94 <SystemInit+0x118>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f023 030f 	bic.w	r3, r3, #15
 8000ba4:	4a3b      	ldr	r2, [pc, #236]	@ (8000c94 <SystemInit+0x118>)
 8000ba6:	f043 0307 	orr.w	r3, r3, #7
 8000baa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000bac:	4b3a      	ldr	r3, [pc, #232]	@ (8000c98 <SystemInit+0x11c>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a39      	ldr	r2, [pc, #228]	@ (8000c98 <SystemInit+0x11c>)
 8000bb2:	f043 0301 	orr.w	r3, r3, #1
 8000bb6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000bb8:	4b37      	ldr	r3, [pc, #220]	@ (8000c98 <SystemInit+0x11c>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000bbe:	4b36      	ldr	r3, [pc, #216]	@ (8000c98 <SystemInit+0x11c>)
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	4935      	ldr	r1, [pc, #212]	@ (8000c98 <SystemInit+0x11c>)
 8000bc4:	4b35      	ldr	r3, [pc, #212]	@ (8000c9c <SystemInit+0x120>)
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bca:	4b32      	ldr	r3, [pc, #200]	@ (8000c94 <SystemInit+0x118>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f003 0308 	and.w	r3, r3, #8
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d007      	beq.n	8000be6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bd6:	4b2f      	ldr	r3, [pc, #188]	@ (8000c94 <SystemInit+0x118>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f023 030f 	bic.w	r3, r3, #15
 8000bde:	4a2d      	ldr	r2, [pc, #180]	@ (8000c94 <SystemInit+0x118>)
 8000be0:	f043 0307 	orr.w	r3, r3, #7
 8000be4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000be6:	4b2c      	ldr	r3, [pc, #176]	@ (8000c98 <SystemInit+0x11c>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000bec:	4b2a      	ldr	r3, [pc, #168]	@ (8000c98 <SystemInit+0x11c>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000bf2:	4b29      	ldr	r3, [pc, #164]	@ (8000c98 <SystemInit+0x11c>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000bf8:	4b27      	ldr	r3, [pc, #156]	@ (8000c98 <SystemInit+0x11c>)
 8000bfa:	4a29      	ldr	r2, [pc, #164]	@ (8000ca0 <SystemInit+0x124>)
 8000bfc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000bfe:	4b26      	ldr	r3, [pc, #152]	@ (8000c98 <SystemInit+0x11c>)
 8000c00:	4a28      	ldr	r2, [pc, #160]	@ (8000ca4 <SystemInit+0x128>)
 8000c02:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000c04:	4b24      	ldr	r3, [pc, #144]	@ (8000c98 <SystemInit+0x11c>)
 8000c06:	4a28      	ldr	r2, [pc, #160]	@ (8000ca8 <SystemInit+0x12c>)
 8000c08:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000c0a:	4b23      	ldr	r3, [pc, #140]	@ (8000c98 <SystemInit+0x11c>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000c10:	4b21      	ldr	r3, [pc, #132]	@ (8000c98 <SystemInit+0x11c>)
 8000c12:	4a25      	ldr	r2, [pc, #148]	@ (8000ca8 <SystemInit+0x12c>)
 8000c14:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000c16:	4b20      	ldr	r3, [pc, #128]	@ (8000c98 <SystemInit+0x11c>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c1c:	4b1e      	ldr	r3, [pc, #120]	@ (8000c98 <SystemInit+0x11c>)
 8000c1e:	4a22      	ldr	r2, [pc, #136]	@ (8000ca8 <SystemInit+0x12c>)
 8000c20:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c22:	4b1d      	ldr	r3, [pc, #116]	@ (8000c98 <SystemInit+0x11c>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c28:	4b1b      	ldr	r3, [pc, #108]	@ (8000c98 <SystemInit+0x11c>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a1a      	ldr	r2, [pc, #104]	@ (8000c98 <SystemInit+0x11c>)
 8000c2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c32:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c34:	4b18      	ldr	r3, [pc, #96]	@ (8000c98 <SystemInit+0x11c>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000c3a:	4b1c      	ldr	r3, [pc, #112]	@ (8000cac <SystemInit+0x130>)
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	4b1c      	ldr	r3, [pc, #112]	@ (8000cb0 <SystemInit+0x134>)
 8000c40:	4013      	ands	r3, r2
 8000c42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000c46:	d202      	bcs.n	8000c4e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000c48:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb4 <SystemInit+0x138>)
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000c4e:	4b12      	ldr	r3, [pc, #72]	@ (8000c98 <SystemInit+0x11c>)
 8000c50:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000c54:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d113      	bne.n	8000c84 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000c5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000c98 <SystemInit+0x11c>)
 8000c5e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000c62:	4a0d      	ldr	r2, [pc, #52]	@ (8000c98 <SystemInit+0x11c>)
 8000c64:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c68:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000c6c:	4b12      	ldr	r3, [pc, #72]	@ (8000cb8 <SystemInit+0x13c>)
 8000c6e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000c72:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000c74:	4b08      	ldr	r3, [pc, #32]	@ (8000c98 <SystemInit+0x11c>)
 8000c76:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000c7a:	4a07      	ldr	r2, [pc, #28]	@ (8000c98 <SystemInit+0x11c>)
 8000c7c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000c80:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	e000ed00 	.word	0xe000ed00
 8000c94:	52002000 	.word	0x52002000
 8000c98:	58024400 	.word	0x58024400
 8000c9c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000ca0:	02020200 	.word	0x02020200
 8000ca4:	01ff0000 	.word	0x01ff0000
 8000ca8:	01010280 	.word	0x01010280
 8000cac:	5c001000 	.word	0x5c001000
 8000cb0:	ffff0000 	.word	0xffff0000
 8000cb4:	51008108 	.word	0x51008108
 8000cb8:	52004000 	.word	0x52004000

08000cbc <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000cc0:	4b09      	ldr	r3, [pc, #36]	@ (8000ce8 <ExitRun0Mode+0x2c>)
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	4a08      	ldr	r2, [pc, #32]	@ (8000ce8 <ExitRun0Mode+0x2c>)
 8000cc6:	f043 0302 	orr.w	r3, r3, #2
 8000cca:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000ccc:	bf00      	nop
 8000cce:	4b06      	ldr	r3, [pc, #24]	@ (8000ce8 <ExitRun0Mode+0x2c>)
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d0f9      	beq.n	8000cce <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000cda:	bf00      	nop
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	58024800 	.word	0x58024800

08000cec <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b088      	sub	sp, #32
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cf2:	f107 0310 	add.w	r3, r7, #16
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	605a      	str	r2, [r3, #4]
 8000cfc:	609a      	str	r2, [r3, #8]
 8000cfe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d00:	1d3b      	adds	r3, r7, #4
 8000d02:	2200      	movs	r2, #0
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	605a      	str	r2, [r3, #4]
 8000d08:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d0a:	4b1f      	ldr	r3, [pc, #124]	@ (8000d88 <MX_TIM3_Init+0x9c>)
 8000d0c:	4a1f      	ldr	r2, [pc, #124]	@ (8000d8c <MX_TIM3_Init+0xa0>)
 8000d0e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9999;
 8000d10:	4b1d      	ldr	r3, [pc, #116]	@ (8000d88 <MX_TIM3_Init+0x9c>)
 8000d12:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000d16:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d18:	4b1b      	ldr	r3, [pc, #108]	@ (8000d88 <MX_TIM3_Init+0x9c>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 11999;
 8000d1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000d88 <MX_TIM3_Init+0x9c>)
 8000d20:	f642 62df 	movw	r2, #11999	@ 0x2edf
 8000d24:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d26:	4b18      	ldr	r3, [pc, #96]	@ (8000d88 <MX_TIM3_Init+0x9c>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d2c:	4b16      	ldr	r3, [pc, #88]	@ (8000d88 <MX_TIM3_Init+0x9c>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d32:	4815      	ldr	r0, [pc, #84]	@ (8000d88 <MX_TIM3_Init+0x9c>)
 8000d34:	f004 f94e 	bl	8004fd4 <HAL_TIM_Base_Init>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8000d3e:	f7ff fdef 	bl	8000920 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d42:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d46:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d48:	f107 0310 	add.w	r3, r7, #16
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	480e      	ldr	r0, [pc, #56]	@ (8000d88 <MX_TIM3_Init+0x9c>)
 8000d50:	f004 fb18 	bl	8005384 <HAL_TIM_ConfigClockSource>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8000d5a:	f7ff fde1 	bl	8000920 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d62:	2300      	movs	r3, #0
 8000d64:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d66:	1d3b      	adds	r3, r7, #4
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4807      	ldr	r0, [pc, #28]	@ (8000d88 <MX_TIM3_Init+0x9c>)
 8000d6c:	f004 fd72 	bl	8005854 <HAL_TIMEx_MasterConfigSynchronization>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000d76:	f7ff fdd3 	bl	8000920 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Base_Start_IT(&htim3); // 启动定时器3及其中断
 8000d7a:	4803      	ldr	r0, [pc, #12]	@ (8000d88 <MX_TIM3_Init+0x9c>)
 8000d7c:	f004 f982 	bl	8005084 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM3_Init 2 */

}
 8000d80:	bf00      	nop
 8000d82:	3720      	adds	r7, #32
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	2400008c 	.word	0x2400008c
 8000d8c:	40000400 	.word	0x40000400

08000d90 <HAL_TIM_Base_MspInit>:
  /* USER CODE END TIM6_Init 2 */

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a1d      	ldr	r2, [pc, #116]	@ (8000e14 <HAL_TIM_Base_MspInit+0x84>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d117      	bne.n	8000dd2 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000da2:	4b1d      	ldr	r3, [pc, #116]	@ (8000e18 <HAL_TIM_Base_MspInit+0x88>)
 8000da4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000da8:	4a1b      	ldr	r2, [pc, #108]	@ (8000e18 <HAL_TIM_Base_MspInit+0x88>)
 8000daa:	f043 0302 	orr.w	r3, r3, #2
 8000dae:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000db2:	4b19      	ldr	r3, [pc, #100]	@ (8000e18 <HAL_TIM_Base_MspInit+0x88>)
 8000db4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000db8:	f003 0302 	and.w	r3, r3, #2
 8000dbc:	60fb      	str	r3, [r7, #12]
 8000dbe:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 1);
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	2103      	movs	r1, #3
 8000dc4:	201d      	movs	r0, #29
 8000dc6:	f000 faa0 	bl	800130a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000dca:	201d      	movs	r0, #29
 8000dcc:	f000 fab7 	bl	800133e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 3);
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */
  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000dd0:	e01b      	b.n	8000e0a <HAL_TIM_Base_MspInit+0x7a>
  else if(tim_baseHandle->Instance==TIM6)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a11      	ldr	r2, [pc, #68]	@ (8000e1c <HAL_TIM_Base_MspInit+0x8c>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d116      	bne.n	8000e0a <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000ddc:	4b0e      	ldr	r3, [pc, #56]	@ (8000e18 <HAL_TIM_Base_MspInit+0x88>)
 8000dde:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000de2:	4a0d      	ldr	r2, [pc, #52]	@ (8000e18 <HAL_TIM_Base_MspInit+0x88>)
 8000de4:	f043 0310 	orr.w	r3, r3, #16
 8000de8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000dec:	4b0a      	ldr	r3, [pc, #40]	@ (8000e18 <HAL_TIM_Base_MspInit+0x88>)
 8000dee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000df2:	f003 0310 	and.w	r3, r3, #16
 8000df6:	60bb      	str	r3, [r7, #8]
 8000df8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 3);
 8000dfa:	2203      	movs	r2, #3
 8000dfc:	2101      	movs	r1, #1
 8000dfe:	2036      	movs	r0, #54	@ 0x36
 8000e00:	f000 fa83 	bl	800130a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e04:	2036      	movs	r0, #54	@ 0x36
 8000e06:	f000 fa9a 	bl	800133e <HAL_NVIC_EnableIRQ>
}
 8000e0a:	bf00      	nop
 8000e0c:	3710      	adds	r7, #16
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40000400 	.word	0x40000400
 8000e18:	58024400 	.word	0x58024400
 8000e1c:	40001000 	.word	0x40001000

08000e20 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e24:	4b22      	ldr	r3, [pc, #136]	@ (8000eb0 <MX_USART1_UART_Init+0x90>)
 8000e26:	4a23      	ldr	r2, [pc, #140]	@ (8000eb4 <MX_USART1_UART_Init+0x94>)
 8000e28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e2a:	4b21      	ldr	r3, [pc, #132]	@ (8000eb0 <MX_USART1_UART_Init+0x90>)
 8000e2c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e30:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e32:	4b1f      	ldr	r3, [pc, #124]	@ (8000eb0 <MX_USART1_UART_Init+0x90>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e38:	4b1d      	ldr	r3, [pc, #116]	@ (8000eb0 <MX_USART1_UART_Init+0x90>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e3e:	4b1c      	ldr	r3, [pc, #112]	@ (8000eb0 <MX_USART1_UART_Init+0x90>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e44:	4b1a      	ldr	r3, [pc, #104]	@ (8000eb0 <MX_USART1_UART_Init+0x90>)
 8000e46:	220c      	movs	r2, #12
 8000e48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e4a:	4b19      	ldr	r3, [pc, #100]	@ (8000eb0 <MX_USART1_UART_Init+0x90>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e50:	4b17      	ldr	r3, [pc, #92]	@ (8000eb0 <MX_USART1_UART_Init+0x90>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e56:	4b16      	ldr	r3, [pc, #88]	@ (8000eb0 <MX_USART1_UART_Init+0x90>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e5c:	4b14      	ldr	r3, [pc, #80]	@ (8000eb0 <MX_USART1_UART_Init+0x90>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e62:	4b13      	ldr	r3, [pc, #76]	@ (8000eb0 <MX_USART1_UART_Init+0x90>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e68:	4811      	ldr	r0, [pc, #68]	@ (8000eb0 <MX_USART1_UART_Init+0x90>)
 8000e6a:	f004 fd9f 	bl	80059ac <HAL_UART_Init>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000e74:	f7ff fd54 	bl	8000920 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e78:	2100      	movs	r1, #0
 8000e7a:	480d      	ldr	r0, [pc, #52]	@ (8000eb0 <MX_USART1_UART_Init+0x90>)
 8000e7c:	f006 fa86 	bl	800738c <HAL_UARTEx_SetTxFifoThreshold>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000e86:	f7ff fd4b 	bl	8000920 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	4808      	ldr	r0, [pc, #32]	@ (8000eb0 <MX_USART1_UART_Init+0x90>)
 8000e8e:	f006 fabb 	bl	8007408 <HAL_UARTEx_SetRxFifoThreshold>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000e98:	f7ff fd42 	bl	8000920 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000e9c:	4804      	ldr	r0, [pc, #16]	@ (8000eb0 <MX_USART1_UART_Init+0x90>)
 8000e9e:	f006 fa3c 	bl	800731a <HAL_UARTEx_DisableFifoMode>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000ea8:	f7ff fd3a 	bl	8000920 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000eac:	bf00      	nop
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	24000124 	.word	0x24000124
 8000eb4:	40011000 	.word	0x40011000

08000eb8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b0ba      	sub	sp, #232	@ 0xe8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	60da      	str	r2, [r3, #12]
 8000ece:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ed0:	f107 0310 	add.w	r3, r7, #16
 8000ed4:	22c0      	movs	r2, #192	@ 0xc0
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f006 fd43 	bl	8007964 <memset>
  if(uartHandle->Instance==USART1)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a2b      	ldr	r2, [pc, #172]	@ (8000f90 <HAL_UART_MspInit+0xd8>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d14e      	bne.n	8000f86 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000ee8:	f04f 0201 	mov.w	r2, #1
 8000eec:	f04f 0300 	mov.w	r3, #0
 8000ef0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000efa:	f107 0310 	add.w	r3, r7, #16
 8000efe:	4618      	mov	r0, r3
 8000f00:	f002 fa3c 	bl	800337c <HAL_RCCEx_PeriphCLKConfig>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000f0a:	f7ff fd09 	bl	8000920 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f0e:	4b21      	ldr	r3, [pc, #132]	@ (8000f94 <HAL_UART_MspInit+0xdc>)
 8000f10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000f14:	4a1f      	ldr	r2, [pc, #124]	@ (8000f94 <HAL_UART_MspInit+0xdc>)
 8000f16:	f043 0310 	orr.w	r3, r3, #16
 8000f1a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000f1e:	4b1d      	ldr	r3, [pc, #116]	@ (8000f94 <HAL_UART_MspInit+0xdc>)
 8000f20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000f24:	f003 0310 	and.w	r3, r3, #16
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2c:	4b19      	ldr	r3, [pc, #100]	@ (8000f94 <HAL_UART_MspInit+0xdc>)
 8000f2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f32:	4a18      	ldr	r2, [pc, #96]	@ (8000f94 <HAL_UART_MspInit+0xdc>)
 8000f34:	f043 0301 	orr.w	r3, r3, #1
 8000f38:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f3c:	4b15      	ldr	r3, [pc, #84]	@ (8000f94 <HAL_UART_MspInit+0xdc>)
 8000f3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	60bb      	str	r3, [r7, #8]
 8000f48:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f4a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000f4e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f52:	2302      	movs	r3, #2
 8000f54:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f64:	2307      	movs	r3, #7
 8000f66:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4809      	ldr	r0, [pc, #36]	@ (8000f98 <HAL_UART_MspInit+0xe0>)
 8000f72:	f000 ffdb 	bl	8001f2c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2100      	movs	r1, #0
 8000f7a:	2025      	movs	r0, #37	@ 0x25
 8000f7c:	f000 f9c5 	bl	800130a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f80:	2025      	movs	r0, #37	@ 0x25
 8000f82:	f000 f9dc 	bl	800133e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000f86:	bf00      	nop
 8000f88:	37e8      	adds	r7, #232	@ 0xe8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40011000 	.word	0x40011000
 8000f94:	58024400 	.word	0x58024400
 8000f98:	58020000 	.word	0x58020000

08000f9c <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

/* printf重定向 */
PUTCHAR_PROTOTYPE
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000fa4:	1d39      	adds	r1, r7, #4
 8000fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8000faa:	2201      	movs	r2, #1
 8000fac:	4803      	ldr	r0, [pc, #12]	@ (8000fbc <__io_putchar+0x20>)
 8000fae:	f004 fd4d 	bl	8005a4c <HAL_UART_Transmit>
    return ch;
 8000fb2:	687b      	ldr	r3, [r7, #4]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	24000124 	.word	0x24000124

08000fc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000fc0:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000ffc <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000fc4:	f7ff fe7a 	bl	8000cbc <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fc8:	f7ff fdd8 	bl	8000b7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fcc:	480c      	ldr	r0, [pc, #48]	@ (8001000 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fce:	490d      	ldr	r1, [pc, #52]	@ (8001004 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fd0:	4a0d      	ldr	r2, [pc, #52]	@ (8001008 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fd4:	e002      	b.n	8000fdc <LoopCopyDataInit>

08000fd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fda:	3304      	adds	r3, #4

08000fdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fe0:	d3f9      	bcc.n	8000fd6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fe2:	4a0a      	ldr	r2, [pc, #40]	@ (800100c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fe4:	4c0a      	ldr	r4, [pc, #40]	@ (8001010 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fe6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fe8:	e001      	b.n	8000fee <LoopFillZerobss>

08000fea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fec:	3204      	adds	r2, #4

08000fee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ff0:	d3fb      	bcc.n	8000fea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ff2:	f006 fd0b 	bl	8007a0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ff6:	f7ff fbd7 	bl	80007a8 <main>
  bx  lr
 8000ffa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ffc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001000:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001004:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8001008:	08007f60 	.word	0x08007f60
  ldr r2, =_sbss
 800100c:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 8001010:	2400031c 	.word	0x2400031c

08001014 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001014:	e7fe      	b.n	8001014 <ADC3_IRQHandler>
	...

08001018 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800101e:	2003      	movs	r0, #3
 8001020:	f000 f968 	bl	80012f4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001024:	f001 ffd4 	bl	8002fd0 <HAL_RCC_GetSysClockFreq>
 8001028:	4602      	mov	r2, r0
 800102a:	4b15      	ldr	r3, [pc, #84]	@ (8001080 <HAL_Init+0x68>)
 800102c:	699b      	ldr	r3, [r3, #24]
 800102e:	0a1b      	lsrs	r3, r3, #8
 8001030:	f003 030f 	and.w	r3, r3, #15
 8001034:	4913      	ldr	r1, [pc, #76]	@ (8001084 <HAL_Init+0x6c>)
 8001036:	5ccb      	ldrb	r3, [r1, r3]
 8001038:	f003 031f 	and.w	r3, r3, #31
 800103c:	fa22 f303 	lsr.w	r3, r2, r3
 8001040:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001042:	4b0f      	ldr	r3, [pc, #60]	@ (8001080 <HAL_Init+0x68>)
 8001044:	699b      	ldr	r3, [r3, #24]
 8001046:	f003 030f 	and.w	r3, r3, #15
 800104a:	4a0e      	ldr	r2, [pc, #56]	@ (8001084 <HAL_Init+0x6c>)
 800104c:	5cd3      	ldrb	r3, [r2, r3]
 800104e:	f003 031f 	and.w	r3, r3, #31
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	fa22 f303 	lsr.w	r3, r2, r3
 8001058:	4a0b      	ldr	r2, [pc, #44]	@ (8001088 <HAL_Init+0x70>)
 800105a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800105c:	4a0b      	ldr	r2, [pc, #44]	@ (800108c <HAL_Init+0x74>)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001062:	200f      	movs	r0, #15
 8001064:	f000 f814 	bl	8001090 <HAL_InitTick>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e002      	b.n	8001078 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001072:	f7ff fc5b 	bl	800092c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001076:	2300      	movs	r3, #0
}
 8001078:	4618      	mov	r0, r3
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	58024400 	.word	0x58024400
 8001084:	08007f18 	.word	0x08007f18
 8001088:	24000004 	.word	0x24000004
 800108c:	24000000 	.word	0x24000000

08001090 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001098:	4b15      	ldr	r3, [pc, #84]	@ (80010f0 <HAL_InitTick+0x60>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d101      	bne.n	80010a4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	e021      	b.n	80010e8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80010a4:	4b13      	ldr	r3, [pc, #76]	@ (80010f4 <HAL_InitTick+0x64>)
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	4b11      	ldr	r3, [pc, #68]	@ (80010f0 <HAL_InitTick+0x60>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	4619      	mov	r1, r3
 80010ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ba:	4618      	mov	r0, r3
 80010bc:	f000 f94d 	bl	800135a <HAL_SYSTICK_Config>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	e00e      	b.n	80010e8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2b0f      	cmp	r3, #15
 80010ce:	d80a      	bhi.n	80010e6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010d0:	2200      	movs	r2, #0
 80010d2:	6879      	ldr	r1, [r7, #4]
 80010d4:	f04f 30ff 	mov.w	r0, #4294967295
 80010d8:	f000 f917 	bl	800130a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010dc:	4a06      	ldr	r2, [pc, #24]	@ (80010f8 <HAL_InitTick+0x68>)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010e2:	2300      	movs	r3, #0
 80010e4:	e000      	b.n	80010e8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	2400000c 	.word	0x2400000c
 80010f4:	24000000 	.word	0x24000000
 80010f8:	24000008 	.word	0x24000008

080010fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001100:	4b06      	ldr	r3, [pc, #24]	@ (800111c <HAL_IncTick+0x20>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	461a      	mov	r2, r3
 8001106:	4b06      	ldr	r3, [pc, #24]	@ (8001120 <HAL_IncTick+0x24>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4413      	add	r3, r2
 800110c:	4a04      	ldr	r2, [pc, #16]	@ (8001120 <HAL_IncTick+0x24>)
 800110e:	6013      	str	r3, [r2, #0]
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	2400000c 	.word	0x2400000c
 8001120:	240001cc 	.word	0x240001cc

08001124 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  return uwTick;
 8001128:	4b03      	ldr	r3, [pc, #12]	@ (8001138 <HAL_GetTick+0x14>)
 800112a:	681b      	ldr	r3, [r3, #0]
}
 800112c:	4618      	mov	r0, r3
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	240001cc 	.word	0x240001cc

0800113c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001140:	4b03      	ldr	r3, [pc, #12]	@ (8001150 <HAL_GetREVID+0x14>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	0c1b      	lsrs	r3, r3, #16
}
 8001146:	4618      	mov	r0, r3
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	5c001000 	.word	0x5c001000

08001154 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f003 0307 	and.w	r3, r3, #7
 8001162:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001164:	4b0b      	ldr	r3, [pc, #44]	@ (8001194 <__NVIC_SetPriorityGrouping+0x40>)
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800116a:	68ba      	ldr	r2, [r7, #8]
 800116c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001170:	4013      	ands	r3, r2
 8001172:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800117c:	4b06      	ldr	r3, [pc, #24]	@ (8001198 <__NVIC_SetPriorityGrouping+0x44>)
 800117e:	4313      	orrs	r3, r2
 8001180:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001182:	4a04      	ldr	r2, [pc, #16]	@ (8001194 <__NVIC_SetPriorityGrouping+0x40>)
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	60d3      	str	r3, [r2, #12]
}
 8001188:	bf00      	nop
 800118a:	3714      	adds	r7, #20
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	e000ed00 	.word	0xe000ed00
 8001198:	05fa0000 	.word	0x05fa0000

0800119c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011a0:	4b04      	ldr	r3, [pc, #16]	@ (80011b4 <__NVIC_GetPriorityGrouping+0x18>)
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	0a1b      	lsrs	r3, r3, #8
 80011a6:	f003 0307 	and.w	r3, r3, #7
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	e000ed00 	.word	0xe000ed00

080011b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	db0b      	blt.n	80011e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ca:	88fb      	ldrh	r3, [r7, #6]
 80011cc:	f003 021f 	and.w	r2, r3, #31
 80011d0:	4907      	ldr	r1, [pc, #28]	@ (80011f0 <__NVIC_EnableIRQ+0x38>)
 80011d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011d6:	095b      	lsrs	r3, r3, #5
 80011d8:	2001      	movs	r0, #1
 80011da:	fa00 f202 	lsl.w	r2, r0, r2
 80011de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	e000e100 	.word	0xe000e100

080011f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	6039      	str	r1, [r7, #0]
 80011fe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001200:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001204:	2b00      	cmp	r3, #0
 8001206:	db0a      	blt.n	800121e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	b2da      	uxtb	r2, r3
 800120c:	490c      	ldr	r1, [pc, #48]	@ (8001240 <__NVIC_SetPriority+0x4c>)
 800120e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001212:	0112      	lsls	r2, r2, #4
 8001214:	b2d2      	uxtb	r2, r2
 8001216:	440b      	add	r3, r1
 8001218:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800121c:	e00a      	b.n	8001234 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	b2da      	uxtb	r2, r3
 8001222:	4908      	ldr	r1, [pc, #32]	@ (8001244 <__NVIC_SetPriority+0x50>)
 8001224:	88fb      	ldrh	r3, [r7, #6]
 8001226:	f003 030f 	and.w	r3, r3, #15
 800122a:	3b04      	subs	r3, #4
 800122c:	0112      	lsls	r2, r2, #4
 800122e:	b2d2      	uxtb	r2, r2
 8001230:	440b      	add	r3, r1
 8001232:	761a      	strb	r2, [r3, #24]
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	e000e100 	.word	0xe000e100
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001248:	b480      	push	{r7}
 800124a:	b089      	sub	sp, #36	@ 0x24
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	f003 0307 	and.w	r3, r3, #7
 800125a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	f1c3 0307 	rsb	r3, r3, #7
 8001262:	2b04      	cmp	r3, #4
 8001264:	bf28      	it	cs
 8001266:	2304      	movcs	r3, #4
 8001268:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	3304      	adds	r3, #4
 800126e:	2b06      	cmp	r3, #6
 8001270:	d902      	bls.n	8001278 <NVIC_EncodePriority+0x30>
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	3b03      	subs	r3, #3
 8001276:	e000      	b.n	800127a <NVIC_EncodePriority+0x32>
 8001278:	2300      	movs	r3, #0
 800127a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800127c:	f04f 32ff 	mov.w	r2, #4294967295
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	43da      	mvns	r2, r3
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	401a      	ands	r2, r3
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001290:	f04f 31ff 	mov.w	r1, #4294967295
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	fa01 f303 	lsl.w	r3, r1, r3
 800129a:	43d9      	mvns	r1, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a0:	4313      	orrs	r3, r2
         );
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3724      	adds	r7, #36	@ 0x24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
	...

080012b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	3b01      	subs	r3, #1
 80012bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012c0:	d301      	bcc.n	80012c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012c2:	2301      	movs	r3, #1
 80012c4:	e00f      	b.n	80012e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012c6:	4a0a      	ldr	r2, [pc, #40]	@ (80012f0 <SysTick_Config+0x40>)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	3b01      	subs	r3, #1
 80012cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ce:	210f      	movs	r1, #15
 80012d0:	f04f 30ff 	mov.w	r0, #4294967295
 80012d4:	f7ff ff8e 	bl	80011f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012d8:	4b05      	ldr	r3, [pc, #20]	@ (80012f0 <SysTick_Config+0x40>)
 80012da:	2200      	movs	r2, #0
 80012dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012de:	4b04      	ldr	r3, [pc, #16]	@ (80012f0 <SysTick_Config+0x40>)
 80012e0:	2207      	movs	r2, #7
 80012e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	e000e010 	.word	0xe000e010

080012f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f7ff ff29 	bl	8001154 <__NVIC_SetPriorityGrouping>
}
 8001302:	bf00      	nop
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	b086      	sub	sp, #24
 800130e:	af00      	add	r7, sp, #0
 8001310:	4603      	mov	r3, r0
 8001312:	60b9      	str	r1, [r7, #8]
 8001314:	607a      	str	r2, [r7, #4]
 8001316:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001318:	f7ff ff40 	bl	800119c <__NVIC_GetPriorityGrouping>
 800131c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	68b9      	ldr	r1, [r7, #8]
 8001322:	6978      	ldr	r0, [r7, #20]
 8001324:	f7ff ff90 	bl	8001248 <NVIC_EncodePriority>
 8001328:	4602      	mov	r2, r0
 800132a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800132e:	4611      	mov	r1, r2
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff ff5f 	bl	80011f4 <__NVIC_SetPriority>
}
 8001336:	bf00      	nop
 8001338:	3718      	adds	r7, #24
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b082      	sub	sp, #8
 8001342:	af00      	add	r7, sp, #0
 8001344:	4603      	mov	r3, r0
 8001346:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001348:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff ff33 	bl	80011b8 <__NVIC_EnableIRQ>
}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b082      	sub	sp, #8
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff ffa4 	bl	80012b0 <SysTick_Config>
 8001368:	4603      	mov	r3, r0
}
 800136a:	4618      	mov	r0, r3
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
	...

08001374 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001378:	f3bf 8f5f 	dmb	sy
}
 800137c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800137e:	4b07      	ldr	r3, [pc, #28]	@ (800139c <HAL_MPU_Disable+0x28>)
 8001380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001382:	4a06      	ldr	r2, [pc, #24]	@ (800139c <HAL_MPU_Disable+0x28>)
 8001384:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001388:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800138a:	4b05      	ldr	r3, [pc, #20]	@ (80013a0 <HAL_MPU_Disable+0x2c>)
 800138c:	2200      	movs	r2, #0
 800138e:	605a      	str	r2, [r3, #4]
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	e000ed00 	.word	0xe000ed00
 80013a0:	e000ed90 	.word	0xe000ed90

080013a4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80013ac:	4a0b      	ldr	r2, [pc, #44]	@ (80013dc <HAL_MPU_Enable+0x38>)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f043 0301 	orr.w	r3, r3, #1
 80013b4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80013b6:	4b0a      	ldr	r3, [pc, #40]	@ (80013e0 <HAL_MPU_Enable+0x3c>)
 80013b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013ba:	4a09      	ldr	r2, [pc, #36]	@ (80013e0 <HAL_MPU_Enable+0x3c>)
 80013bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013c0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80013c2:	f3bf 8f4f 	dsb	sy
}
 80013c6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80013c8:	f3bf 8f6f 	isb	sy
}
 80013cc:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80013ce:	bf00      	nop
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	e000ed90 	.word	0xe000ed90
 80013e0:	e000ed00 	.word	0xe000ed00

080013e4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	785a      	ldrb	r2, [r3, #1]
 80013f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001460 <HAL_MPU_ConfigRegion+0x7c>)
 80013f2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80013f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001460 <HAL_MPU_ConfigRegion+0x7c>)
 80013f6:	691b      	ldr	r3, [r3, #16]
 80013f8:	4a19      	ldr	r2, [pc, #100]	@ (8001460 <HAL_MPU_ConfigRegion+0x7c>)
 80013fa:	f023 0301 	bic.w	r3, r3, #1
 80013fe:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001400:	4a17      	ldr	r2, [pc, #92]	@ (8001460 <HAL_MPU_ConfigRegion+0x7c>)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	7b1b      	ldrb	r3, [r3, #12]
 800140c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	7adb      	ldrb	r3, [r3, #11]
 8001412:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001414:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	7a9b      	ldrb	r3, [r3, #10]
 800141a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800141c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	7b5b      	ldrb	r3, [r3, #13]
 8001422:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001424:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	7b9b      	ldrb	r3, [r3, #14]
 800142a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800142c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	7bdb      	ldrb	r3, [r3, #15]
 8001432:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001434:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	7a5b      	ldrb	r3, [r3, #9]
 800143a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800143c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	7a1b      	ldrb	r3, [r3, #8]
 8001442:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001444:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	7812      	ldrb	r2, [r2, #0]
 800144a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800144c:	4a04      	ldr	r2, [pc, #16]	@ (8001460 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800144e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001450:	6113      	str	r3, [r2, #16]
}
 8001452:	bf00      	nop
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	e000ed90 	.word	0xe000ed90

08001464 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800146c:	f7ff fe5a 	bl	8001124 <HAL_GetTick>
 8001470:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d101      	bne.n	800147c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e2dc      	b.n	8001a36 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001482:	b2db      	uxtb	r3, r3
 8001484:	2b02      	cmp	r3, #2
 8001486:	d008      	beq.n	800149a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2280      	movs	r2, #128	@ 0x80
 800148c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2200      	movs	r2, #0
 8001492:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e2cd      	b.n	8001a36 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a76      	ldr	r2, [pc, #472]	@ (8001678 <HAL_DMA_Abort+0x214>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d04a      	beq.n	800153a <HAL_DMA_Abort+0xd6>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a74      	ldr	r2, [pc, #464]	@ (800167c <HAL_DMA_Abort+0x218>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d045      	beq.n	800153a <HAL_DMA_Abort+0xd6>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a73      	ldr	r2, [pc, #460]	@ (8001680 <HAL_DMA_Abort+0x21c>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d040      	beq.n	800153a <HAL_DMA_Abort+0xd6>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a71      	ldr	r2, [pc, #452]	@ (8001684 <HAL_DMA_Abort+0x220>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d03b      	beq.n	800153a <HAL_DMA_Abort+0xd6>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a70      	ldr	r2, [pc, #448]	@ (8001688 <HAL_DMA_Abort+0x224>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d036      	beq.n	800153a <HAL_DMA_Abort+0xd6>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a6e      	ldr	r2, [pc, #440]	@ (800168c <HAL_DMA_Abort+0x228>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d031      	beq.n	800153a <HAL_DMA_Abort+0xd6>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a6d      	ldr	r2, [pc, #436]	@ (8001690 <HAL_DMA_Abort+0x22c>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d02c      	beq.n	800153a <HAL_DMA_Abort+0xd6>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a6b      	ldr	r2, [pc, #428]	@ (8001694 <HAL_DMA_Abort+0x230>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d027      	beq.n	800153a <HAL_DMA_Abort+0xd6>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a6a      	ldr	r2, [pc, #424]	@ (8001698 <HAL_DMA_Abort+0x234>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d022      	beq.n	800153a <HAL_DMA_Abort+0xd6>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a68      	ldr	r2, [pc, #416]	@ (800169c <HAL_DMA_Abort+0x238>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d01d      	beq.n	800153a <HAL_DMA_Abort+0xd6>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a67      	ldr	r2, [pc, #412]	@ (80016a0 <HAL_DMA_Abort+0x23c>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d018      	beq.n	800153a <HAL_DMA_Abort+0xd6>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a65      	ldr	r2, [pc, #404]	@ (80016a4 <HAL_DMA_Abort+0x240>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d013      	beq.n	800153a <HAL_DMA_Abort+0xd6>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a64      	ldr	r2, [pc, #400]	@ (80016a8 <HAL_DMA_Abort+0x244>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d00e      	beq.n	800153a <HAL_DMA_Abort+0xd6>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a62      	ldr	r2, [pc, #392]	@ (80016ac <HAL_DMA_Abort+0x248>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d009      	beq.n	800153a <HAL_DMA_Abort+0xd6>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a61      	ldr	r2, [pc, #388]	@ (80016b0 <HAL_DMA_Abort+0x24c>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d004      	beq.n	800153a <HAL_DMA_Abort+0xd6>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a5f      	ldr	r2, [pc, #380]	@ (80016b4 <HAL_DMA_Abort+0x250>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d101      	bne.n	800153e <HAL_DMA_Abort+0xda>
 800153a:	2301      	movs	r3, #1
 800153c:	e000      	b.n	8001540 <HAL_DMA_Abort+0xdc>
 800153e:	2300      	movs	r3, #0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d013      	beq.n	800156c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f022 021e 	bic.w	r2, r2, #30
 8001552:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	695a      	ldr	r2, [r3, #20]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001562:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	617b      	str	r3, [r7, #20]
 800156a:	e00a      	b.n	8001582 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f022 020e 	bic.w	r2, r2, #14
 800157a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a3c      	ldr	r2, [pc, #240]	@ (8001678 <HAL_DMA_Abort+0x214>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d072      	beq.n	8001672 <HAL_DMA_Abort+0x20e>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a3a      	ldr	r2, [pc, #232]	@ (800167c <HAL_DMA_Abort+0x218>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d06d      	beq.n	8001672 <HAL_DMA_Abort+0x20e>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a39      	ldr	r2, [pc, #228]	@ (8001680 <HAL_DMA_Abort+0x21c>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d068      	beq.n	8001672 <HAL_DMA_Abort+0x20e>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a37      	ldr	r2, [pc, #220]	@ (8001684 <HAL_DMA_Abort+0x220>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d063      	beq.n	8001672 <HAL_DMA_Abort+0x20e>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a36      	ldr	r2, [pc, #216]	@ (8001688 <HAL_DMA_Abort+0x224>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d05e      	beq.n	8001672 <HAL_DMA_Abort+0x20e>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a34      	ldr	r2, [pc, #208]	@ (800168c <HAL_DMA_Abort+0x228>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d059      	beq.n	8001672 <HAL_DMA_Abort+0x20e>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a33      	ldr	r2, [pc, #204]	@ (8001690 <HAL_DMA_Abort+0x22c>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d054      	beq.n	8001672 <HAL_DMA_Abort+0x20e>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a31      	ldr	r2, [pc, #196]	@ (8001694 <HAL_DMA_Abort+0x230>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d04f      	beq.n	8001672 <HAL_DMA_Abort+0x20e>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a30      	ldr	r2, [pc, #192]	@ (8001698 <HAL_DMA_Abort+0x234>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d04a      	beq.n	8001672 <HAL_DMA_Abort+0x20e>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a2e      	ldr	r2, [pc, #184]	@ (800169c <HAL_DMA_Abort+0x238>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d045      	beq.n	8001672 <HAL_DMA_Abort+0x20e>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a2d      	ldr	r2, [pc, #180]	@ (80016a0 <HAL_DMA_Abort+0x23c>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d040      	beq.n	8001672 <HAL_DMA_Abort+0x20e>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a2b      	ldr	r2, [pc, #172]	@ (80016a4 <HAL_DMA_Abort+0x240>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d03b      	beq.n	8001672 <HAL_DMA_Abort+0x20e>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a2a      	ldr	r2, [pc, #168]	@ (80016a8 <HAL_DMA_Abort+0x244>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d036      	beq.n	8001672 <HAL_DMA_Abort+0x20e>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a28      	ldr	r2, [pc, #160]	@ (80016ac <HAL_DMA_Abort+0x248>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d031      	beq.n	8001672 <HAL_DMA_Abort+0x20e>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a27      	ldr	r2, [pc, #156]	@ (80016b0 <HAL_DMA_Abort+0x24c>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d02c      	beq.n	8001672 <HAL_DMA_Abort+0x20e>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a25      	ldr	r2, [pc, #148]	@ (80016b4 <HAL_DMA_Abort+0x250>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d027      	beq.n	8001672 <HAL_DMA_Abort+0x20e>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a24      	ldr	r2, [pc, #144]	@ (80016b8 <HAL_DMA_Abort+0x254>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d022      	beq.n	8001672 <HAL_DMA_Abort+0x20e>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a22      	ldr	r2, [pc, #136]	@ (80016bc <HAL_DMA_Abort+0x258>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d01d      	beq.n	8001672 <HAL_DMA_Abort+0x20e>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a21      	ldr	r2, [pc, #132]	@ (80016c0 <HAL_DMA_Abort+0x25c>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d018      	beq.n	8001672 <HAL_DMA_Abort+0x20e>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a1f      	ldr	r2, [pc, #124]	@ (80016c4 <HAL_DMA_Abort+0x260>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d013      	beq.n	8001672 <HAL_DMA_Abort+0x20e>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a1e      	ldr	r2, [pc, #120]	@ (80016c8 <HAL_DMA_Abort+0x264>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d00e      	beq.n	8001672 <HAL_DMA_Abort+0x20e>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a1c      	ldr	r2, [pc, #112]	@ (80016cc <HAL_DMA_Abort+0x268>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d009      	beq.n	8001672 <HAL_DMA_Abort+0x20e>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a1b      	ldr	r2, [pc, #108]	@ (80016d0 <HAL_DMA_Abort+0x26c>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d004      	beq.n	8001672 <HAL_DMA_Abort+0x20e>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a19      	ldr	r2, [pc, #100]	@ (80016d4 <HAL_DMA_Abort+0x270>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d132      	bne.n	80016d8 <HAL_DMA_Abort+0x274>
 8001672:	2301      	movs	r3, #1
 8001674:	e031      	b.n	80016da <HAL_DMA_Abort+0x276>
 8001676:	bf00      	nop
 8001678:	40020010 	.word	0x40020010
 800167c:	40020028 	.word	0x40020028
 8001680:	40020040 	.word	0x40020040
 8001684:	40020058 	.word	0x40020058
 8001688:	40020070 	.word	0x40020070
 800168c:	40020088 	.word	0x40020088
 8001690:	400200a0 	.word	0x400200a0
 8001694:	400200b8 	.word	0x400200b8
 8001698:	40020410 	.word	0x40020410
 800169c:	40020428 	.word	0x40020428
 80016a0:	40020440 	.word	0x40020440
 80016a4:	40020458 	.word	0x40020458
 80016a8:	40020470 	.word	0x40020470
 80016ac:	40020488 	.word	0x40020488
 80016b0:	400204a0 	.word	0x400204a0
 80016b4:	400204b8 	.word	0x400204b8
 80016b8:	58025408 	.word	0x58025408
 80016bc:	5802541c 	.word	0x5802541c
 80016c0:	58025430 	.word	0x58025430
 80016c4:	58025444 	.word	0x58025444
 80016c8:	58025458 	.word	0x58025458
 80016cc:	5802546c 	.word	0x5802546c
 80016d0:	58025480 	.word	0x58025480
 80016d4:	58025494 	.word	0x58025494
 80016d8:	2300      	movs	r3, #0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d007      	beq.n	80016ee <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80016ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a6d      	ldr	r2, [pc, #436]	@ (80018a8 <HAL_DMA_Abort+0x444>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d04a      	beq.n	800178e <HAL_DMA_Abort+0x32a>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a6b      	ldr	r2, [pc, #428]	@ (80018ac <HAL_DMA_Abort+0x448>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d045      	beq.n	800178e <HAL_DMA_Abort+0x32a>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a6a      	ldr	r2, [pc, #424]	@ (80018b0 <HAL_DMA_Abort+0x44c>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d040      	beq.n	800178e <HAL_DMA_Abort+0x32a>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a68      	ldr	r2, [pc, #416]	@ (80018b4 <HAL_DMA_Abort+0x450>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d03b      	beq.n	800178e <HAL_DMA_Abort+0x32a>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a67      	ldr	r2, [pc, #412]	@ (80018b8 <HAL_DMA_Abort+0x454>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d036      	beq.n	800178e <HAL_DMA_Abort+0x32a>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a65      	ldr	r2, [pc, #404]	@ (80018bc <HAL_DMA_Abort+0x458>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d031      	beq.n	800178e <HAL_DMA_Abort+0x32a>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a64      	ldr	r2, [pc, #400]	@ (80018c0 <HAL_DMA_Abort+0x45c>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d02c      	beq.n	800178e <HAL_DMA_Abort+0x32a>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a62      	ldr	r2, [pc, #392]	@ (80018c4 <HAL_DMA_Abort+0x460>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d027      	beq.n	800178e <HAL_DMA_Abort+0x32a>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a61      	ldr	r2, [pc, #388]	@ (80018c8 <HAL_DMA_Abort+0x464>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d022      	beq.n	800178e <HAL_DMA_Abort+0x32a>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a5f      	ldr	r2, [pc, #380]	@ (80018cc <HAL_DMA_Abort+0x468>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d01d      	beq.n	800178e <HAL_DMA_Abort+0x32a>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a5e      	ldr	r2, [pc, #376]	@ (80018d0 <HAL_DMA_Abort+0x46c>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d018      	beq.n	800178e <HAL_DMA_Abort+0x32a>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a5c      	ldr	r2, [pc, #368]	@ (80018d4 <HAL_DMA_Abort+0x470>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d013      	beq.n	800178e <HAL_DMA_Abort+0x32a>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a5b      	ldr	r2, [pc, #364]	@ (80018d8 <HAL_DMA_Abort+0x474>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d00e      	beq.n	800178e <HAL_DMA_Abort+0x32a>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a59      	ldr	r2, [pc, #356]	@ (80018dc <HAL_DMA_Abort+0x478>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d009      	beq.n	800178e <HAL_DMA_Abort+0x32a>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a58      	ldr	r2, [pc, #352]	@ (80018e0 <HAL_DMA_Abort+0x47c>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d004      	beq.n	800178e <HAL_DMA_Abort+0x32a>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a56      	ldr	r2, [pc, #344]	@ (80018e4 <HAL_DMA_Abort+0x480>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d108      	bne.n	80017a0 <HAL_DMA_Abort+0x33c>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f022 0201 	bic.w	r2, r2, #1
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	e007      	b.n	80017b0 <HAL_DMA_Abort+0x34c>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f022 0201 	bic.w	r2, r2, #1
 80017ae:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80017b0:	e013      	b.n	80017da <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017b2:	f7ff fcb7 	bl	8001124 <HAL_GetTick>
 80017b6:	4602      	mov	r2, r0
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	2b05      	cmp	r3, #5
 80017be:	d90c      	bls.n	80017da <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2220      	movs	r2, #32
 80017c4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2203      	movs	r2, #3
 80017ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e12d      	b.n	8001a36 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d1e5      	bne.n	80017b2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a2f      	ldr	r2, [pc, #188]	@ (80018a8 <HAL_DMA_Abort+0x444>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d04a      	beq.n	8001886 <HAL_DMA_Abort+0x422>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a2d      	ldr	r2, [pc, #180]	@ (80018ac <HAL_DMA_Abort+0x448>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d045      	beq.n	8001886 <HAL_DMA_Abort+0x422>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a2c      	ldr	r2, [pc, #176]	@ (80018b0 <HAL_DMA_Abort+0x44c>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d040      	beq.n	8001886 <HAL_DMA_Abort+0x422>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a2a      	ldr	r2, [pc, #168]	@ (80018b4 <HAL_DMA_Abort+0x450>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d03b      	beq.n	8001886 <HAL_DMA_Abort+0x422>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a29      	ldr	r2, [pc, #164]	@ (80018b8 <HAL_DMA_Abort+0x454>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d036      	beq.n	8001886 <HAL_DMA_Abort+0x422>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a27      	ldr	r2, [pc, #156]	@ (80018bc <HAL_DMA_Abort+0x458>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d031      	beq.n	8001886 <HAL_DMA_Abort+0x422>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a26      	ldr	r2, [pc, #152]	@ (80018c0 <HAL_DMA_Abort+0x45c>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d02c      	beq.n	8001886 <HAL_DMA_Abort+0x422>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a24      	ldr	r2, [pc, #144]	@ (80018c4 <HAL_DMA_Abort+0x460>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d027      	beq.n	8001886 <HAL_DMA_Abort+0x422>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a23      	ldr	r2, [pc, #140]	@ (80018c8 <HAL_DMA_Abort+0x464>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d022      	beq.n	8001886 <HAL_DMA_Abort+0x422>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a21      	ldr	r2, [pc, #132]	@ (80018cc <HAL_DMA_Abort+0x468>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d01d      	beq.n	8001886 <HAL_DMA_Abort+0x422>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a20      	ldr	r2, [pc, #128]	@ (80018d0 <HAL_DMA_Abort+0x46c>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d018      	beq.n	8001886 <HAL_DMA_Abort+0x422>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a1e      	ldr	r2, [pc, #120]	@ (80018d4 <HAL_DMA_Abort+0x470>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d013      	beq.n	8001886 <HAL_DMA_Abort+0x422>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a1d      	ldr	r2, [pc, #116]	@ (80018d8 <HAL_DMA_Abort+0x474>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d00e      	beq.n	8001886 <HAL_DMA_Abort+0x422>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a1b      	ldr	r2, [pc, #108]	@ (80018dc <HAL_DMA_Abort+0x478>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d009      	beq.n	8001886 <HAL_DMA_Abort+0x422>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a1a      	ldr	r2, [pc, #104]	@ (80018e0 <HAL_DMA_Abort+0x47c>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d004      	beq.n	8001886 <HAL_DMA_Abort+0x422>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a18      	ldr	r2, [pc, #96]	@ (80018e4 <HAL_DMA_Abort+0x480>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d101      	bne.n	800188a <HAL_DMA_Abort+0x426>
 8001886:	2301      	movs	r3, #1
 8001888:	e000      	b.n	800188c <HAL_DMA_Abort+0x428>
 800188a:	2300      	movs	r3, #0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d02b      	beq.n	80018e8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001894:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800189a:	f003 031f 	and.w	r3, r3, #31
 800189e:	223f      	movs	r2, #63	@ 0x3f
 80018a0:	409a      	lsls	r2, r3
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	609a      	str	r2, [r3, #8]
 80018a6:	e02a      	b.n	80018fe <HAL_DMA_Abort+0x49a>
 80018a8:	40020010 	.word	0x40020010
 80018ac:	40020028 	.word	0x40020028
 80018b0:	40020040 	.word	0x40020040
 80018b4:	40020058 	.word	0x40020058
 80018b8:	40020070 	.word	0x40020070
 80018bc:	40020088 	.word	0x40020088
 80018c0:	400200a0 	.word	0x400200a0
 80018c4:	400200b8 	.word	0x400200b8
 80018c8:	40020410 	.word	0x40020410
 80018cc:	40020428 	.word	0x40020428
 80018d0:	40020440 	.word	0x40020440
 80018d4:	40020458 	.word	0x40020458
 80018d8:	40020470 	.word	0x40020470
 80018dc:	40020488 	.word	0x40020488
 80018e0:	400204a0 	.word	0x400204a0
 80018e4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ec:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018f2:	f003 031f 	and.w	r3, r3, #31
 80018f6:	2201      	movs	r2, #1
 80018f8:	409a      	lsls	r2, r3
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a4f      	ldr	r2, [pc, #316]	@ (8001a40 <HAL_DMA_Abort+0x5dc>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d072      	beq.n	80019ee <HAL_DMA_Abort+0x58a>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a4d      	ldr	r2, [pc, #308]	@ (8001a44 <HAL_DMA_Abort+0x5e0>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d06d      	beq.n	80019ee <HAL_DMA_Abort+0x58a>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a4c      	ldr	r2, [pc, #304]	@ (8001a48 <HAL_DMA_Abort+0x5e4>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d068      	beq.n	80019ee <HAL_DMA_Abort+0x58a>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a4a      	ldr	r2, [pc, #296]	@ (8001a4c <HAL_DMA_Abort+0x5e8>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d063      	beq.n	80019ee <HAL_DMA_Abort+0x58a>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a49      	ldr	r2, [pc, #292]	@ (8001a50 <HAL_DMA_Abort+0x5ec>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d05e      	beq.n	80019ee <HAL_DMA_Abort+0x58a>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a47      	ldr	r2, [pc, #284]	@ (8001a54 <HAL_DMA_Abort+0x5f0>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d059      	beq.n	80019ee <HAL_DMA_Abort+0x58a>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a46      	ldr	r2, [pc, #280]	@ (8001a58 <HAL_DMA_Abort+0x5f4>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d054      	beq.n	80019ee <HAL_DMA_Abort+0x58a>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a44      	ldr	r2, [pc, #272]	@ (8001a5c <HAL_DMA_Abort+0x5f8>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d04f      	beq.n	80019ee <HAL_DMA_Abort+0x58a>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a43      	ldr	r2, [pc, #268]	@ (8001a60 <HAL_DMA_Abort+0x5fc>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d04a      	beq.n	80019ee <HAL_DMA_Abort+0x58a>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a41      	ldr	r2, [pc, #260]	@ (8001a64 <HAL_DMA_Abort+0x600>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d045      	beq.n	80019ee <HAL_DMA_Abort+0x58a>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a40      	ldr	r2, [pc, #256]	@ (8001a68 <HAL_DMA_Abort+0x604>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d040      	beq.n	80019ee <HAL_DMA_Abort+0x58a>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a3e      	ldr	r2, [pc, #248]	@ (8001a6c <HAL_DMA_Abort+0x608>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d03b      	beq.n	80019ee <HAL_DMA_Abort+0x58a>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a3d      	ldr	r2, [pc, #244]	@ (8001a70 <HAL_DMA_Abort+0x60c>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d036      	beq.n	80019ee <HAL_DMA_Abort+0x58a>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a3b      	ldr	r2, [pc, #236]	@ (8001a74 <HAL_DMA_Abort+0x610>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d031      	beq.n	80019ee <HAL_DMA_Abort+0x58a>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a3a      	ldr	r2, [pc, #232]	@ (8001a78 <HAL_DMA_Abort+0x614>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d02c      	beq.n	80019ee <HAL_DMA_Abort+0x58a>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a38      	ldr	r2, [pc, #224]	@ (8001a7c <HAL_DMA_Abort+0x618>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d027      	beq.n	80019ee <HAL_DMA_Abort+0x58a>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a37      	ldr	r2, [pc, #220]	@ (8001a80 <HAL_DMA_Abort+0x61c>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d022      	beq.n	80019ee <HAL_DMA_Abort+0x58a>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a35      	ldr	r2, [pc, #212]	@ (8001a84 <HAL_DMA_Abort+0x620>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d01d      	beq.n	80019ee <HAL_DMA_Abort+0x58a>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a34      	ldr	r2, [pc, #208]	@ (8001a88 <HAL_DMA_Abort+0x624>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d018      	beq.n	80019ee <HAL_DMA_Abort+0x58a>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a32      	ldr	r2, [pc, #200]	@ (8001a8c <HAL_DMA_Abort+0x628>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d013      	beq.n	80019ee <HAL_DMA_Abort+0x58a>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a31      	ldr	r2, [pc, #196]	@ (8001a90 <HAL_DMA_Abort+0x62c>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d00e      	beq.n	80019ee <HAL_DMA_Abort+0x58a>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a2f      	ldr	r2, [pc, #188]	@ (8001a94 <HAL_DMA_Abort+0x630>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d009      	beq.n	80019ee <HAL_DMA_Abort+0x58a>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a2e      	ldr	r2, [pc, #184]	@ (8001a98 <HAL_DMA_Abort+0x634>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d004      	beq.n	80019ee <HAL_DMA_Abort+0x58a>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a2c      	ldr	r2, [pc, #176]	@ (8001a9c <HAL_DMA_Abort+0x638>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d101      	bne.n	80019f2 <HAL_DMA_Abort+0x58e>
 80019ee:	2301      	movs	r3, #1
 80019f0:	e000      	b.n	80019f4 <HAL_DMA_Abort+0x590>
 80019f2:	2300      	movs	r3, #0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d015      	beq.n	8001a24 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001a00:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d00c      	beq.n	8001a24 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001a14:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001a18:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001a22:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2201      	movs	r2, #1
 8001a28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3718      	adds	r7, #24
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	40020010 	.word	0x40020010
 8001a44:	40020028 	.word	0x40020028
 8001a48:	40020040 	.word	0x40020040
 8001a4c:	40020058 	.word	0x40020058
 8001a50:	40020070 	.word	0x40020070
 8001a54:	40020088 	.word	0x40020088
 8001a58:	400200a0 	.word	0x400200a0
 8001a5c:	400200b8 	.word	0x400200b8
 8001a60:	40020410 	.word	0x40020410
 8001a64:	40020428 	.word	0x40020428
 8001a68:	40020440 	.word	0x40020440
 8001a6c:	40020458 	.word	0x40020458
 8001a70:	40020470 	.word	0x40020470
 8001a74:	40020488 	.word	0x40020488
 8001a78:	400204a0 	.word	0x400204a0
 8001a7c:	400204b8 	.word	0x400204b8
 8001a80:	58025408 	.word	0x58025408
 8001a84:	5802541c 	.word	0x5802541c
 8001a88:	58025430 	.word	0x58025430
 8001a8c:	58025444 	.word	0x58025444
 8001a90:	58025458 	.word	0x58025458
 8001a94:	5802546c 	.word	0x5802546c
 8001a98:	58025480 	.word	0x58025480
 8001a9c:	58025494 	.word	0x58025494

08001aa0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d101      	bne.n	8001ab2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e237      	b.n	8001f22 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d004      	beq.n	8001ac8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2280      	movs	r2, #128	@ 0x80
 8001ac2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e22c      	b.n	8001f22 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a5c      	ldr	r2, [pc, #368]	@ (8001c40 <HAL_DMA_Abort_IT+0x1a0>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d04a      	beq.n	8001b68 <HAL_DMA_Abort_IT+0xc8>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a5b      	ldr	r2, [pc, #364]	@ (8001c44 <HAL_DMA_Abort_IT+0x1a4>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d045      	beq.n	8001b68 <HAL_DMA_Abort_IT+0xc8>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a59      	ldr	r2, [pc, #356]	@ (8001c48 <HAL_DMA_Abort_IT+0x1a8>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d040      	beq.n	8001b68 <HAL_DMA_Abort_IT+0xc8>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a58      	ldr	r2, [pc, #352]	@ (8001c4c <HAL_DMA_Abort_IT+0x1ac>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d03b      	beq.n	8001b68 <HAL_DMA_Abort_IT+0xc8>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a56      	ldr	r2, [pc, #344]	@ (8001c50 <HAL_DMA_Abort_IT+0x1b0>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d036      	beq.n	8001b68 <HAL_DMA_Abort_IT+0xc8>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a55      	ldr	r2, [pc, #340]	@ (8001c54 <HAL_DMA_Abort_IT+0x1b4>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d031      	beq.n	8001b68 <HAL_DMA_Abort_IT+0xc8>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a53      	ldr	r2, [pc, #332]	@ (8001c58 <HAL_DMA_Abort_IT+0x1b8>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d02c      	beq.n	8001b68 <HAL_DMA_Abort_IT+0xc8>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a52      	ldr	r2, [pc, #328]	@ (8001c5c <HAL_DMA_Abort_IT+0x1bc>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d027      	beq.n	8001b68 <HAL_DMA_Abort_IT+0xc8>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a50      	ldr	r2, [pc, #320]	@ (8001c60 <HAL_DMA_Abort_IT+0x1c0>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d022      	beq.n	8001b68 <HAL_DMA_Abort_IT+0xc8>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a4f      	ldr	r2, [pc, #316]	@ (8001c64 <HAL_DMA_Abort_IT+0x1c4>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d01d      	beq.n	8001b68 <HAL_DMA_Abort_IT+0xc8>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a4d      	ldr	r2, [pc, #308]	@ (8001c68 <HAL_DMA_Abort_IT+0x1c8>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d018      	beq.n	8001b68 <HAL_DMA_Abort_IT+0xc8>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a4c      	ldr	r2, [pc, #304]	@ (8001c6c <HAL_DMA_Abort_IT+0x1cc>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d013      	beq.n	8001b68 <HAL_DMA_Abort_IT+0xc8>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a4a      	ldr	r2, [pc, #296]	@ (8001c70 <HAL_DMA_Abort_IT+0x1d0>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d00e      	beq.n	8001b68 <HAL_DMA_Abort_IT+0xc8>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a49      	ldr	r2, [pc, #292]	@ (8001c74 <HAL_DMA_Abort_IT+0x1d4>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d009      	beq.n	8001b68 <HAL_DMA_Abort_IT+0xc8>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a47      	ldr	r2, [pc, #284]	@ (8001c78 <HAL_DMA_Abort_IT+0x1d8>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d004      	beq.n	8001b68 <HAL_DMA_Abort_IT+0xc8>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a46      	ldr	r2, [pc, #280]	@ (8001c7c <HAL_DMA_Abort_IT+0x1dc>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d101      	bne.n	8001b6c <HAL_DMA_Abort_IT+0xcc>
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e000      	b.n	8001b6e <HAL_DMA_Abort_IT+0xce>
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	f000 8086 	beq.w	8001c80 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2204      	movs	r2, #4
 8001b78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a2f      	ldr	r2, [pc, #188]	@ (8001c40 <HAL_DMA_Abort_IT+0x1a0>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d04a      	beq.n	8001c1c <HAL_DMA_Abort_IT+0x17c>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a2e      	ldr	r2, [pc, #184]	@ (8001c44 <HAL_DMA_Abort_IT+0x1a4>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d045      	beq.n	8001c1c <HAL_DMA_Abort_IT+0x17c>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a2c      	ldr	r2, [pc, #176]	@ (8001c48 <HAL_DMA_Abort_IT+0x1a8>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d040      	beq.n	8001c1c <HAL_DMA_Abort_IT+0x17c>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a2b      	ldr	r2, [pc, #172]	@ (8001c4c <HAL_DMA_Abort_IT+0x1ac>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d03b      	beq.n	8001c1c <HAL_DMA_Abort_IT+0x17c>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a29      	ldr	r2, [pc, #164]	@ (8001c50 <HAL_DMA_Abort_IT+0x1b0>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d036      	beq.n	8001c1c <HAL_DMA_Abort_IT+0x17c>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a28      	ldr	r2, [pc, #160]	@ (8001c54 <HAL_DMA_Abort_IT+0x1b4>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d031      	beq.n	8001c1c <HAL_DMA_Abort_IT+0x17c>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a26      	ldr	r2, [pc, #152]	@ (8001c58 <HAL_DMA_Abort_IT+0x1b8>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d02c      	beq.n	8001c1c <HAL_DMA_Abort_IT+0x17c>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a25      	ldr	r2, [pc, #148]	@ (8001c5c <HAL_DMA_Abort_IT+0x1bc>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d027      	beq.n	8001c1c <HAL_DMA_Abort_IT+0x17c>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a23      	ldr	r2, [pc, #140]	@ (8001c60 <HAL_DMA_Abort_IT+0x1c0>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d022      	beq.n	8001c1c <HAL_DMA_Abort_IT+0x17c>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a22      	ldr	r2, [pc, #136]	@ (8001c64 <HAL_DMA_Abort_IT+0x1c4>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d01d      	beq.n	8001c1c <HAL_DMA_Abort_IT+0x17c>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a20      	ldr	r2, [pc, #128]	@ (8001c68 <HAL_DMA_Abort_IT+0x1c8>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d018      	beq.n	8001c1c <HAL_DMA_Abort_IT+0x17c>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a1f      	ldr	r2, [pc, #124]	@ (8001c6c <HAL_DMA_Abort_IT+0x1cc>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d013      	beq.n	8001c1c <HAL_DMA_Abort_IT+0x17c>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a1d      	ldr	r2, [pc, #116]	@ (8001c70 <HAL_DMA_Abort_IT+0x1d0>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d00e      	beq.n	8001c1c <HAL_DMA_Abort_IT+0x17c>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a1c      	ldr	r2, [pc, #112]	@ (8001c74 <HAL_DMA_Abort_IT+0x1d4>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d009      	beq.n	8001c1c <HAL_DMA_Abort_IT+0x17c>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a1a      	ldr	r2, [pc, #104]	@ (8001c78 <HAL_DMA_Abort_IT+0x1d8>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d004      	beq.n	8001c1c <HAL_DMA_Abort_IT+0x17c>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a19      	ldr	r2, [pc, #100]	@ (8001c7c <HAL_DMA_Abort_IT+0x1dc>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d108      	bne.n	8001c2e <HAL_DMA_Abort_IT+0x18e>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f022 0201 	bic.w	r2, r2, #1
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	e178      	b.n	8001f20 <HAL_DMA_Abort_IT+0x480>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f022 0201 	bic.w	r2, r2, #1
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	e16f      	b.n	8001f20 <HAL_DMA_Abort_IT+0x480>
 8001c40:	40020010 	.word	0x40020010
 8001c44:	40020028 	.word	0x40020028
 8001c48:	40020040 	.word	0x40020040
 8001c4c:	40020058 	.word	0x40020058
 8001c50:	40020070 	.word	0x40020070
 8001c54:	40020088 	.word	0x40020088
 8001c58:	400200a0 	.word	0x400200a0
 8001c5c:	400200b8 	.word	0x400200b8
 8001c60:	40020410 	.word	0x40020410
 8001c64:	40020428 	.word	0x40020428
 8001c68:	40020440 	.word	0x40020440
 8001c6c:	40020458 	.word	0x40020458
 8001c70:	40020470 	.word	0x40020470
 8001c74:	40020488 	.word	0x40020488
 8001c78:	400204a0 	.word	0x400204a0
 8001c7c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f022 020e 	bic.w	r2, r2, #14
 8001c8e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a6c      	ldr	r2, [pc, #432]	@ (8001e48 <HAL_DMA_Abort_IT+0x3a8>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d04a      	beq.n	8001d30 <HAL_DMA_Abort_IT+0x290>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a6b      	ldr	r2, [pc, #428]	@ (8001e4c <HAL_DMA_Abort_IT+0x3ac>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d045      	beq.n	8001d30 <HAL_DMA_Abort_IT+0x290>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a69      	ldr	r2, [pc, #420]	@ (8001e50 <HAL_DMA_Abort_IT+0x3b0>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d040      	beq.n	8001d30 <HAL_DMA_Abort_IT+0x290>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a68      	ldr	r2, [pc, #416]	@ (8001e54 <HAL_DMA_Abort_IT+0x3b4>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d03b      	beq.n	8001d30 <HAL_DMA_Abort_IT+0x290>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a66      	ldr	r2, [pc, #408]	@ (8001e58 <HAL_DMA_Abort_IT+0x3b8>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d036      	beq.n	8001d30 <HAL_DMA_Abort_IT+0x290>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a65      	ldr	r2, [pc, #404]	@ (8001e5c <HAL_DMA_Abort_IT+0x3bc>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d031      	beq.n	8001d30 <HAL_DMA_Abort_IT+0x290>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a63      	ldr	r2, [pc, #396]	@ (8001e60 <HAL_DMA_Abort_IT+0x3c0>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d02c      	beq.n	8001d30 <HAL_DMA_Abort_IT+0x290>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a62      	ldr	r2, [pc, #392]	@ (8001e64 <HAL_DMA_Abort_IT+0x3c4>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d027      	beq.n	8001d30 <HAL_DMA_Abort_IT+0x290>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a60      	ldr	r2, [pc, #384]	@ (8001e68 <HAL_DMA_Abort_IT+0x3c8>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d022      	beq.n	8001d30 <HAL_DMA_Abort_IT+0x290>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a5f      	ldr	r2, [pc, #380]	@ (8001e6c <HAL_DMA_Abort_IT+0x3cc>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d01d      	beq.n	8001d30 <HAL_DMA_Abort_IT+0x290>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a5d      	ldr	r2, [pc, #372]	@ (8001e70 <HAL_DMA_Abort_IT+0x3d0>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d018      	beq.n	8001d30 <HAL_DMA_Abort_IT+0x290>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a5c      	ldr	r2, [pc, #368]	@ (8001e74 <HAL_DMA_Abort_IT+0x3d4>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d013      	beq.n	8001d30 <HAL_DMA_Abort_IT+0x290>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a5a      	ldr	r2, [pc, #360]	@ (8001e78 <HAL_DMA_Abort_IT+0x3d8>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d00e      	beq.n	8001d30 <HAL_DMA_Abort_IT+0x290>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a59      	ldr	r2, [pc, #356]	@ (8001e7c <HAL_DMA_Abort_IT+0x3dc>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d009      	beq.n	8001d30 <HAL_DMA_Abort_IT+0x290>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a57      	ldr	r2, [pc, #348]	@ (8001e80 <HAL_DMA_Abort_IT+0x3e0>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d004      	beq.n	8001d30 <HAL_DMA_Abort_IT+0x290>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a56      	ldr	r2, [pc, #344]	@ (8001e84 <HAL_DMA_Abort_IT+0x3e4>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d108      	bne.n	8001d42 <HAL_DMA_Abort_IT+0x2a2>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f022 0201 	bic.w	r2, r2, #1
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	e007      	b.n	8001d52 <HAL_DMA_Abort_IT+0x2b2>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f022 0201 	bic.w	r2, r2, #1
 8001d50:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a3c      	ldr	r2, [pc, #240]	@ (8001e48 <HAL_DMA_Abort_IT+0x3a8>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d072      	beq.n	8001e42 <HAL_DMA_Abort_IT+0x3a2>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a3a      	ldr	r2, [pc, #232]	@ (8001e4c <HAL_DMA_Abort_IT+0x3ac>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d06d      	beq.n	8001e42 <HAL_DMA_Abort_IT+0x3a2>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a39      	ldr	r2, [pc, #228]	@ (8001e50 <HAL_DMA_Abort_IT+0x3b0>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d068      	beq.n	8001e42 <HAL_DMA_Abort_IT+0x3a2>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a37      	ldr	r2, [pc, #220]	@ (8001e54 <HAL_DMA_Abort_IT+0x3b4>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d063      	beq.n	8001e42 <HAL_DMA_Abort_IT+0x3a2>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a36      	ldr	r2, [pc, #216]	@ (8001e58 <HAL_DMA_Abort_IT+0x3b8>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d05e      	beq.n	8001e42 <HAL_DMA_Abort_IT+0x3a2>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a34      	ldr	r2, [pc, #208]	@ (8001e5c <HAL_DMA_Abort_IT+0x3bc>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d059      	beq.n	8001e42 <HAL_DMA_Abort_IT+0x3a2>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a33      	ldr	r2, [pc, #204]	@ (8001e60 <HAL_DMA_Abort_IT+0x3c0>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d054      	beq.n	8001e42 <HAL_DMA_Abort_IT+0x3a2>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a31      	ldr	r2, [pc, #196]	@ (8001e64 <HAL_DMA_Abort_IT+0x3c4>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d04f      	beq.n	8001e42 <HAL_DMA_Abort_IT+0x3a2>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a30      	ldr	r2, [pc, #192]	@ (8001e68 <HAL_DMA_Abort_IT+0x3c8>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d04a      	beq.n	8001e42 <HAL_DMA_Abort_IT+0x3a2>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a2e      	ldr	r2, [pc, #184]	@ (8001e6c <HAL_DMA_Abort_IT+0x3cc>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d045      	beq.n	8001e42 <HAL_DMA_Abort_IT+0x3a2>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a2d      	ldr	r2, [pc, #180]	@ (8001e70 <HAL_DMA_Abort_IT+0x3d0>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d040      	beq.n	8001e42 <HAL_DMA_Abort_IT+0x3a2>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a2b      	ldr	r2, [pc, #172]	@ (8001e74 <HAL_DMA_Abort_IT+0x3d4>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d03b      	beq.n	8001e42 <HAL_DMA_Abort_IT+0x3a2>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a2a      	ldr	r2, [pc, #168]	@ (8001e78 <HAL_DMA_Abort_IT+0x3d8>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d036      	beq.n	8001e42 <HAL_DMA_Abort_IT+0x3a2>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a28      	ldr	r2, [pc, #160]	@ (8001e7c <HAL_DMA_Abort_IT+0x3dc>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d031      	beq.n	8001e42 <HAL_DMA_Abort_IT+0x3a2>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a27      	ldr	r2, [pc, #156]	@ (8001e80 <HAL_DMA_Abort_IT+0x3e0>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d02c      	beq.n	8001e42 <HAL_DMA_Abort_IT+0x3a2>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a25      	ldr	r2, [pc, #148]	@ (8001e84 <HAL_DMA_Abort_IT+0x3e4>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d027      	beq.n	8001e42 <HAL_DMA_Abort_IT+0x3a2>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a24      	ldr	r2, [pc, #144]	@ (8001e88 <HAL_DMA_Abort_IT+0x3e8>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d022      	beq.n	8001e42 <HAL_DMA_Abort_IT+0x3a2>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a22      	ldr	r2, [pc, #136]	@ (8001e8c <HAL_DMA_Abort_IT+0x3ec>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d01d      	beq.n	8001e42 <HAL_DMA_Abort_IT+0x3a2>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a21      	ldr	r2, [pc, #132]	@ (8001e90 <HAL_DMA_Abort_IT+0x3f0>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d018      	beq.n	8001e42 <HAL_DMA_Abort_IT+0x3a2>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a1f      	ldr	r2, [pc, #124]	@ (8001e94 <HAL_DMA_Abort_IT+0x3f4>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d013      	beq.n	8001e42 <HAL_DMA_Abort_IT+0x3a2>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a1e      	ldr	r2, [pc, #120]	@ (8001e98 <HAL_DMA_Abort_IT+0x3f8>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d00e      	beq.n	8001e42 <HAL_DMA_Abort_IT+0x3a2>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a1c      	ldr	r2, [pc, #112]	@ (8001e9c <HAL_DMA_Abort_IT+0x3fc>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d009      	beq.n	8001e42 <HAL_DMA_Abort_IT+0x3a2>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a1b      	ldr	r2, [pc, #108]	@ (8001ea0 <HAL_DMA_Abort_IT+0x400>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d004      	beq.n	8001e42 <HAL_DMA_Abort_IT+0x3a2>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a19      	ldr	r2, [pc, #100]	@ (8001ea4 <HAL_DMA_Abort_IT+0x404>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d132      	bne.n	8001ea8 <HAL_DMA_Abort_IT+0x408>
 8001e42:	2301      	movs	r3, #1
 8001e44:	e031      	b.n	8001eaa <HAL_DMA_Abort_IT+0x40a>
 8001e46:	bf00      	nop
 8001e48:	40020010 	.word	0x40020010
 8001e4c:	40020028 	.word	0x40020028
 8001e50:	40020040 	.word	0x40020040
 8001e54:	40020058 	.word	0x40020058
 8001e58:	40020070 	.word	0x40020070
 8001e5c:	40020088 	.word	0x40020088
 8001e60:	400200a0 	.word	0x400200a0
 8001e64:	400200b8 	.word	0x400200b8
 8001e68:	40020410 	.word	0x40020410
 8001e6c:	40020428 	.word	0x40020428
 8001e70:	40020440 	.word	0x40020440
 8001e74:	40020458 	.word	0x40020458
 8001e78:	40020470 	.word	0x40020470
 8001e7c:	40020488 	.word	0x40020488
 8001e80:	400204a0 	.word	0x400204a0
 8001e84:	400204b8 	.word	0x400204b8
 8001e88:	58025408 	.word	0x58025408
 8001e8c:	5802541c 	.word	0x5802541c
 8001e90:	58025430 	.word	0x58025430
 8001e94:	58025444 	.word	0x58025444
 8001e98:	58025458 	.word	0x58025458
 8001e9c:	5802546c 	.word	0x5802546c
 8001ea0:	58025480 	.word	0x58025480
 8001ea4:	58025494 	.word	0x58025494
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d028      	beq.n	8001f00 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001eb8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ebc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ec2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ec8:	f003 031f 	and.w	r3, r3, #31
 8001ecc:	2201      	movs	r2, #1
 8001ece:	409a      	lsls	r2, r3
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001edc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d00c      	beq.n	8001f00 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ef0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ef4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001efe:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d003      	beq.n	8001f20 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop

08001f2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b089      	sub	sp, #36	@ 0x24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001f36:	2300      	movs	r3, #0
 8001f38:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001f3a:	4b89      	ldr	r3, [pc, #548]	@ (8002160 <HAL_GPIO_Init+0x234>)
 8001f3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001f3e:	e194      	b.n	800226a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	2101      	movs	r1, #1
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	fa01 f303 	lsl.w	r3, r1, r3
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	f000 8186 	beq.w	8002264 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f003 0303 	and.w	r3, r3, #3
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d005      	beq.n	8001f70 <HAL_GPIO_Init+0x44>
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f003 0303 	and.w	r3, r3, #3
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d130      	bne.n	8001fd2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	2203      	movs	r2, #3
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	43db      	mvns	r3, r3
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	4013      	ands	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	68da      	ldr	r2, [r3, #12]
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	43db      	mvns	r3, r3
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	091b      	lsrs	r3, r3, #4
 8001fbc:	f003 0201 	and.w	r2, r3, #1
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f003 0303 	and.w	r3, r3, #3
 8001fda:	2b03      	cmp	r3, #3
 8001fdc:	d017      	beq.n	800200e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	2203      	movs	r2, #3
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	43db      	mvns	r3, r3
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	689a      	ldr	r2, [r3, #8]
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	4313      	orrs	r3, r2
 8002006:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f003 0303 	and.w	r3, r3, #3
 8002016:	2b02      	cmp	r3, #2
 8002018:	d123      	bne.n	8002062 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	08da      	lsrs	r2, r3, #3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	3208      	adds	r2, #8
 8002022:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002026:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	f003 0307 	and.w	r3, r3, #7
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	220f      	movs	r2, #15
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	43db      	mvns	r3, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4013      	ands	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	691a      	ldr	r2, [r3, #16]
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	f003 0307 	and.w	r3, r3, #7
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	fa02 f303 	lsl.w	r3, r2, r3
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	4313      	orrs	r3, r2
 8002052:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	08da      	lsrs	r2, r3, #3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	3208      	adds	r2, #8
 800205c:	69b9      	ldr	r1, [r7, #24]
 800205e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	2203      	movs	r2, #3
 800206e:	fa02 f303 	lsl.w	r3, r2, r3
 8002072:	43db      	mvns	r3, r3
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	4013      	ands	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f003 0203 	and.w	r2, r3, #3
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	4313      	orrs	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	f000 80e0 	beq.w	8002264 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020a4:	4b2f      	ldr	r3, [pc, #188]	@ (8002164 <HAL_GPIO_Init+0x238>)
 80020a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80020aa:	4a2e      	ldr	r2, [pc, #184]	@ (8002164 <HAL_GPIO_Init+0x238>)
 80020ac:	f043 0302 	orr.w	r3, r3, #2
 80020b0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80020b4:	4b2b      	ldr	r3, [pc, #172]	@ (8002164 <HAL_GPIO_Init+0x238>)
 80020b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	60fb      	str	r3, [r7, #12]
 80020c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020c2:	4a29      	ldr	r2, [pc, #164]	@ (8002168 <HAL_GPIO_Init+0x23c>)
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	089b      	lsrs	r3, r3, #2
 80020c8:	3302      	adds	r3, #2
 80020ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	f003 0303 	and.w	r3, r3, #3
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	220f      	movs	r2, #15
 80020da:	fa02 f303 	lsl.w	r3, r2, r3
 80020de:	43db      	mvns	r3, r3
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	4013      	ands	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a20      	ldr	r2, [pc, #128]	@ (800216c <HAL_GPIO_Init+0x240>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d052      	beq.n	8002194 <HAL_GPIO_Init+0x268>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a1f      	ldr	r2, [pc, #124]	@ (8002170 <HAL_GPIO_Init+0x244>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d031      	beq.n	800215a <HAL_GPIO_Init+0x22e>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a1e      	ldr	r2, [pc, #120]	@ (8002174 <HAL_GPIO_Init+0x248>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d02b      	beq.n	8002156 <HAL_GPIO_Init+0x22a>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a1d      	ldr	r2, [pc, #116]	@ (8002178 <HAL_GPIO_Init+0x24c>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d025      	beq.n	8002152 <HAL_GPIO_Init+0x226>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a1c      	ldr	r2, [pc, #112]	@ (800217c <HAL_GPIO_Init+0x250>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d01f      	beq.n	800214e <HAL_GPIO_Init+0x222>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a1b      	ldr	r2, [pc, #108]	@ (8002180 <HAL_GPIO_Init+0x254>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d019      	beq.n	800214a <HAL_GPIO_Init+0x21e>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a1a      	ldr	r2, [pc, #104]	@ (8002184 <HAL_GPIO_Init+0x258>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d013      	beq.n	8002146 <HAL_GPIO_Init+0x21a>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a19      	ldr	r2, [pc, #100]	@ (8002188 <HAL_GPIO_Init+0x25c>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d00d      	beq.n	8002142 <HAL_GPIO_Init+0x216>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a18      	ldr	r2, [pc, #96]	@ (800218c <HAL_GPIO_Init+0x260>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d007      	beq.n	800213e <HAL_GPIO_Init+0x212>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a17      	ldr	r2, [pc, #92]	@ (8002190 <HAL_GPIO_Init+0x264>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d101      	bne.n	800213a <HAL_GPIO_Init+0x20e>
 8002136:	2309      	movs	r3, #9
 8002138:	e02d      	b.n	8002196 <HAL_GPIO_Init+0x26a>
 800213a:	230a      	movs	r3, #10
 800213c:	e02b      	b.n	8002196 <HAL_GPIO_Init+0x26a>
 800213e:	2308      	movs	r3, #8
 8002140:	e029      	b.n	8002196 <HAL_GPIO_Init+0x26a>
 8002142:	2307      	movs	r3, #7
 8002144:	e027      	b.n	8002196 <HAL_GPIO_Init+0x26a>
 8002146:	2306      	movs	r3, #6
 8002148:	e025      	b.n	8002196 <HAL_GPIO_Init+0x26a>
 800214a:	2305      	movs	r3, #5
 800214c:	e023      	b.n	8002196 <HAL_GPIO_Init+0x26a>
 800214e:	2304      	movs	r3, #4
 8002150:	e021      	b.n	8002196 <HAL_GPIO_Init+0x26a>
 8002152:	2303      	movs	r3, #3
 8002154:	e01f      	b.n	8002196 <HAL_GPIO_Init+0x26a>
 8002156:	2302      	movs	r3, #2
 8002158:	e01d      	b.n	8002196 <HAL_GPIO_Init+0x26a>
 800215a:	2301      	movs	r3, #1
 800215c:	e01b      	b.n	8002196 <HAL_GPIO_Init+0x26a>
 800215e:	bf00      	nop
 8002160:	58000080 	.word	0x58000080
 8002164:	58024400 	.word	0x58024400
 8002168:	58000400 	.word	0x58000400
 800216c:	58020000 	.word	0x58020000
 8002170:	58020400 	.word	0x58020400
 8002174:	58020800 	.word	0x58020800
 8002178:	58020c00 	.word	0x58020c00
 800217c:	58021000 	.word	0x58021000
 8002180:	58021400 	.word	0x58021400
 8002184:	58021800 	.word	0x58021800
 8002188:	58021c00 	.word	0x58021c00
 800218c:	58022000 	.word	0x58022000
 8002190:	58022400 	.word	0x58022400
 8002194:	2300      	movs	r3, #0
 8002196:	69fa      	ldr	r2, [r7, #28]
 8002198:	f002 0203 	and.w	r2, r2, #3
 800219c:	0092      	lsls	r2, r2, #2
 800219e:	4093      	lsls	r3, r2
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021a6:	4938      	ldr	r1, [pc, #224]	@ (8002288 <HAL_GPIO_Init+0x35c>)
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	089b      	lsrs	r3, r3, #2
 80021ac:	3302      	adds	r3, #2
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	43db      	mvns	r3, r3
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	4013      	ands	r3, r2
 80021c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d003      	beq.n	80021da <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80021da:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80021e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	43db      	mvns	r3, r3
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	4013      	ands	r3, r2
 80021f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d003      	beq.n	8002208 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	4313      	orrs	r3, r2
 8002206:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002208:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	43db      	mvns	r3, r3
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	4013      	ands	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d003      	beq.n	8002234 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	4313      	orrs	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	43db      	mvns	r3, r3
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4013      	ands	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d003      	beq.n	800225e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	4313      	orrs	r3, r2
 800225c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	3301      	adds	r3, #1
 8002268:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	fa22 f303 	lsr.w	r3, r2, r3
 8002274:	2b00      	cmp	r3, #0
 8002276:	f47f ae63 	bne.w	8001f40 <HAL_GPIO_Init+0x14>
  }
}
 800227a:	bf00      	nop
 800227c:	bf00      	nop
 800227e:	3724      	adds	r7, #36	@ 0x24
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	58000400 	.word	0x58000400

0800228c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	460b      	mov	r3, r1
 8002296:	807b      	strh	r3, [r7, #2]
 8002298:	4613      	mov	r3, r2
 800229a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800229c:	787b      	ldrb	r3, [r7, #1]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d003      	beq.n	80022aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022a2:	887a      	ldrh	r2, [r7, #2]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80022a8:	e003      	b.n	80022b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80022aa:	887b      	ldrh	r3, [r7, #2]
 80022ac:	041a      	lsls	r2, r3, #16
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	619a      	str	r2, [r3, #24]
}
 80022b2:	bf00      	nop
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr

080022be <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80022be:	b480      	push	{r7}
 80022c0:	b085      	sub	sp, #20
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
 80022c6:	460b      	mov	r3, r1
 80022c8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	695b      	ldr	r3, [r3, #20]
 80022ce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022d0:	887a      	ldrh	r2, [r7, #2]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	4013      	ands	r3, r2
 80022d6:	041a      	lsls	r2, r3, #16
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	43d9      	mvns	r1, r3
 80022dc:	887b      	ldrh	r3, [r7, #2]
 80022de:	400b      	ands	r3, r1
 80022e0:	431a      	orrs	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	619a      	str	r2, [r3, #24]
}
 80022e6:	bf00      	nop
 80022e8:	3714      	adds	r7, #20
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr

080022f2 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b082      	sub	sp, #8
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	4603      	mov	r3, r0
 80022fa:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80022fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002300:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002304:	88fb      	ldrh	r3, [r7, #6]
 8002306:	4013      	ands	r3, r2
 8002308:	2b00      	cmp	r3, #0
 800230a:	d008      	beq.n	800231e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800230c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002310:	88fb      	ldrh	r3, [r7, #6]
 8002312:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002316:	88fb      	ldrh	r3, [r7, #6]
 8002318:	4618      	mov	r0, r3
 800231a:	f000 f804 	bl	8002326 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800231e:	bf00      	nop
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002326:	b480      	push	{r7}
 8002328:	b083      	sub	sp, #12
 800232a:	af00      	add	r7, sp, #0
 800232c:	4603      	mov	r3, r0
 800232e:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002330:	bf00      	nop
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002344:	4b19      	ldr	r3, [pc, #100]	@ (80023ac <HAL_PWREx_ConfigSupply+0x70>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	f003 0304 	and.w	r3, r3, #4
 800234c:	2b04      	cmp	r3, #4
 800234e:	d00a      	beq.n	8002366 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002350:	4b16      	ldr	r3, [pc, #88]	@ (80023ac <HAL_PWREx_ConfigSupply+0x70>)
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	f003 0307 	and.w	r3, r3, #7
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	429a      	cmp	r2, r3
 800235c:	d001      	beq.n	8002362 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e01f      	b.n	80023a2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002362:	2300      	movs	r3, #0
 8002364:	e01d      	b.n	80023a2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002366:	4b11      	ldr	r3, [pc, #68]	@ (80023ac <HAL_PWREx_ConfigSupply+0x70>)
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	f023 0207 	bic.w	r2, r3, #7
 800236e:	490f      	ldr	r1, [pc, #60]	@ (80023ac <HAL_PWREx_ConfigSupply+0x70>)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4313      	orrs	r3, r2
 8002374:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002376:	f7fe fed5 	bl	8001124 <HAL_GetTick>
 800237a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800237c:	e009      	b.n	8002392 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800237e:	f7fe fed1 	bl	8001124 <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800238c:	d901      	bls.n	8002392 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e007      	b.n	80023a2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002392:	4b06      	ldr	r3, [pc, #24]	@ (80023ac <HAL_PWREx_ConfigSupply+0x70>)
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800239a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800239e:	d1ee      	bne.n	800237e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3710      	adds	r7, #16
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	58024800 	.word	0x58024800

080023b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b08c      	sub	sp, #48	@ 0x30
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d102      	bne.n	80023c4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	f000 bc48 	b.w	8002c54 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0301 	and.w	r3, r3, #1
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f000 8088 	beq.w	80024e2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023d2:	4b99      	ldr	r3, [pc, #612]	@ (8002638 <HAL_RCC_OscConfig+0x288>)
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80023da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80023dc:	4b96      	ldr	r3, [pc, #600]	@ (8002638 <HAL_RCC_OscConfig+0x288>)
 80023de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80023e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023e4:	2b10      	cmp	r3, #16
 80023e6:	d007      	beq.n	80023f8 <HAL_RCC_OscConfig+0x48>
 80023e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023ea:	2b18      	cmp	r3, #24
 80023ec:	d111      	bne.n	8002412 <HAL_RCC_OscConfig+0x62>
 80023ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023f0:	f003 0303 	and.w	r3, r3, #3
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d10c      	bne.n	8002412 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023f8:	4b8f      	ldr	r3, [pc, #572]	@ (8002638 <HAL_RCC_OscConfig+0x288>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d06d      	beq.n	80024e0 <HAL_RCC_OscConfig+0x130>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d169      	bne.n	80024e0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	f000 bc21 	b.w	8002c54 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800241a:	d106      	bne.n	800242a <HAL_RCC_OscConfig+0x7a>
 800241c:	4b86      	ldr	r3, [pc, #536]	@ (8002638 <HAL_RCC_OscConfig+0x288>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a85      	ldr	r2, [pc, #532]	@ (8002638 <HAL_RCC_OscConfig+0x288>)
 8002422:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002426:	6013      	str	r3, [r2, #0]
 8002428:	e02e      	b.n	8002488 <HAL_RCC_OscConfig+0xd8>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d10c      	bne.n	800244c <HAL_RCC_OscConfig+0x9c>
 8002432:	4b81      	ldr	r3, [pc, #516]	@ (8002638 <HAL_RCC_OscConfig+0x288>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a80      	ldr	r2, [pc, #512]	@ (8002638 <HAL_RCC_OscConfig+0x288>)
 8002438:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800243c:	6013      	str	r3, [r2, #0]
 800243e:	4b7e      	ldr	r3, [pc, #504]	@ (8002638 <HAL_RCC_OscConfig+0x288>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a7d      	ldr	r2, [pc, #500]	@ (8002638 <HAL_RCC_OscConfig+0x288>)
 8002444:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002448:	6013      	str	r3, [r2, #0]
 800244a:	e01d      	b.n	8002488 <HAL_RCC_OscConfig+0xd8>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002454:	d10c      	bne.n	8002470 <HAL_RCC_OscConfig+0xc0>
 8002456:	4b78      	ldr	r3, [pc, #480]	@ (8002638 <HAL_RCC_OscConfig+0x288>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a77      	ldr	r2, [pc, #476]	@ (8002638 <HAL_RCC_OscConfig+0x288>)
 800245c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002460:	6013      	str	r3, [r2, #0]
 8002462:	4b75      	ldr	r3, [pc, #468]	@ (8002638 <HAL_RCC_OscConfig+0x288>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a74      	ldr	r2, [pc, #464]	@ (8002638 <HAL_RCC_OscConfig+0x288>)
 8002468:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800246c:	6013      	str	r3, [r2, #0]
 800246e:	e00b      	b.n	8002488 <HAL_RCC_OscConfig+0xd8>
 8002470:	4b71      	ldr	r3, [pc, #452]	@ (8002638 <HAL_RCC_OscConfig+0x288>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a70      	ldr	r2, [pc, #448]	@ (8002638 <HAL_RCC_OscConfig+0x288>)
 8002476:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800247a:	6013      	str	r3, [r2, #0]
 800247c:	4b6e      	ldr	r3, [pc, #440]	@ (8002638 <HAL_RCC_OscConfig+0x288>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a6d      	ldr	r2, [pc, #436]	@ (8002638 <HAL_RCC_OscConfig+0x288>)
 8002482:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002486:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d013      	beq.n	80024b8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002490:	f7fe fe48 	bl	8001124 <HAL_GetTick>
 8002494:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002496:	e008      	b.n	80024aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002498:	f7fe fe44 	bl	8001124 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b64      	cmp	r3, #100	@ 0x64
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e3d4      	b.n	8002c54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024aa:	4b63      	ldr	r3, [pc, #396]	@ (8002638 <HAL_RCC_OscConfig+0x288>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d0f0      	beq.n	8002498 <HAL_RCC_OscConfig+0xe8>
 80024b6:	e014      	b.n	80024e2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b8:	f7fe fe34 	bl	8001124 <HAL_GetTick>
 80024bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80024be:	e008      	b.n	80024d2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024c0:	f7fe fe30 	bl	8001124 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b64      	cmp	r3, #100	@ 0x64
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e3c0      	b.n	8002c54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80024d2:	4b59      	ldr	r3, [pc, #356]	@ (8002638 <HAL_RCC_OscConfig+0x288>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1f0      	bne.n	80024c0 <HAL_RCC_OscConfig+0x110>
 80024de:	e000      	b.n	80024e2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	f000 80ca 	beq.w	8002684 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024f0:	4b51      	ldr	r3, [pc, #324]	@ (8002638 <HAL_RCC_OscConfig+0x288>)
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80024f8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80024fa:	4b4f      	ldr	r3, [pc, #316]	@ (8002638 <HAL_RCC_OscConfig+0x288>)
 80024fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024fe:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002500:	6a3b      	ldr	r3, [r7, #32]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d007      	beq.n	8002516 <HAL_RCC_OscConfig+0x166>
 8002506:	6a3b      	ldr	r3, [r7, #32]
 8002508:	2b18      	cmp	r3, #24
 800250a:	d156      	bne.n	80025ba <HAL_RCC_OscConfig+0x20a>
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	f003 0303 	and.w	r3, r3, #3
 8002512:	2b00      	cmp	r3, #0
 8002514:	d151      	bne.n	80025ba <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002516:	4b48      	ldr	r3, [pc, #288]	@ (8002638 <HAL_RCC_OscConfig+0x288>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0304 	and.w	r3, r3, #4
 800251e:	2b00      	cmp	r3, #0
 8002520:	d005      	beq.n	800252e <HAL_RCC_OscConfig+0x17e>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d101      	bne.n	800252e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e392      	b.n	8002c54 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800252e:	4b42      	ldr	r3, [pc, #264]	@ (8002638 <HAL_RCC_OscConfig+0x288>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f023 0219 	bic.w	r2, r3, #25
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	493f      	ldr	r1, [pc, #252]	@ (8002638 <HAL_RCC_OscConfig+0x288>)
 800253c:	4313      	orrs	r3, r2
 800253e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002540:	f7fe fdf0 	bl	8001124 <HAL_GetTick>
 8002544:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002546:	e008      	b.n	800255a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002548:	f7fe fdec 	bl	8001124 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b02      	cmp	r3, #2
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e37c      	b.n	8002c54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800255a:	4b37      	ldr	r3, [pc, #220]	@ (8002638 <HAL_RCC_OscConfig+0x288>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0304 	and.w	r3, r3, #4
 8002562:	2b00      	cmp	r3, #0
 8002564:	d0f0      	beq.n	8002548 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002566:	f7fe fde9 	bl	800113c <HAL_GetREVID>
 800256a:	4603      	mov	r3, r0
 800256c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002570:	4293      	cmp	r3, r2
 8002572:	d817      	bhi.n	80025a4 <HAL_RCC_OscConfig+0x1f4>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	2b40      	cmp	r3, #64	@ 0x40
 800257a:	d108      	bne.n	800258e <HAL_RCC_OscConfig+0x1de>
 800257c:	4b2e      	ldr	r3, [pc, #184]	@ (8002638 <HAL_RCC_OscConfig+0x288>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002584:	4a2c      	ldr	r2, [pc, #176]	@ (8002638 <HAL_RCC_OscConfig+0x288>)
 8002586:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800258a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800258c:	e07a      	b.n	8002684 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800258e:	4b2a      	ldr	r3, [pc, #168]	@ (8002638 <HAL_RCC_OscConfig+0x288>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	031b      	lsls	r3, r3, #12
 800259c:	4926      	ldr	r1, [pc, #152]	@ (8002638 <HAL_RCC_OscConfig+0x288>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025a2:	e06f      	b.n	8002684 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025a4:	4b24      	ldr	r3, [pc, #144]	@ (8002638 <HAL_RCC_OscConfig+0x288>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	691b      	ldr	r3, [r3, #16]
 80025b0:	061b      	lsls	r3, r3, #24
 80025b2:	4921      	ldr	r1, [pc, #132]	@ (8002638 <HAL_RCC_OscConfig+0x288>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025b8:	e064      	b.n	8002684 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d047      	beq.n	8002652 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80025c2:	4b1d      	ldr	r3, [pc, #116]	@ (8002638 <HAL_RCC_OscConfig+0x288>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f023 0219 	bic.w	r2, r3, #25
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	491a      	ldr	r1, [pc, #104]	@ (8002638 <HAL_RCC_OscConfig+0x288>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d4:	f7fe fda6 	bl	8001124 <HAL_GetTick>
 80025d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025da:	e008      	b.n	80025ee <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025dc:	f7fe fda2 	bl	8001124 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e332      	b.n	8002c54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025ee:	4b12      	ldr	r3, [pc, #72]	@ (8002638 <HAL_RCC_OscConfig+0x288>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0304 	and.w	r3, r3, #4
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d0f0      	beq.n	80025dc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025fa:	f7fe fd9f 	bl	800113c <HAL_GetREVID>
 80025fe:	4603      	mov	r3, r0
 8002600:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002604:	4293      	cmp	r3, r2
 8002606:	d819      	bhi.n	800263c <HAL_RCC_OscConfig+0x28c>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	691b      	ldr	r3, [r3, #16]
 800260c:	2b40      	cmp	r3, #64	@ 0x40
 800260e:	d108      	bne.n	8002622 <HAL_RCC_OscConfig+0x272>
 8002610:	4b09      	ldr	r3, [pc, #36]	@ (8002638 <HAL_RCC_OscConfig+0x288>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002618:	4a07      	ldr	r2, [pc, #28]	@ (8002638 <HAL_RCC_OscConfig+0x288>)
 800261a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800261e:	6053      	str	r3, [r2, #4]
 8002620:	e030      	b.n	8002684 <HAL_RCC_OscConfig+0x2d4>
 8002622:	4b05      	ldr	r3, [pc, #20]	@ (8002638 <HAL_RCC_OscConfig+0x288>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	691b      	ldr	r3, [r3, #16]
 800262e:	031b      	lsls	r3, r3, #12
 8002630:	4901      	ldr	r1, [pc, #4]	@ (8002638 <HAL_RCC_OscConfig+0x288>)
 8002632:	4313      	orrs	r3, r2
 8002634:	604b      	str	r3, [r1, #4]
 8002636:	e025      	b.n	8002684 <HAL_RCC_OscConfig+0x2d4>
 8002638:	58024400 	.word	0x58024400
 800263c:	4b9a      	ldr	r3, [pc, #616]	@ (80028a8 <HAL_RCC_OscConfig+0x4f8>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	061b      	lsls	r3, r3, #24
 800264a:	4997      	ldr	r1, [pc, #604]	@ (80028a8 <HAL_RCC_OscConfig+0x4f8>)
 800264c:	4313      	orrs	r3, r2
 800264e:	604b      	str	r3, [r1, #4]
 8002650:	e018      	b.n	8002684 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002652:	4b95      	ldr	r3, [pc, #596]	@ (80028a8 <HAL_RCC_OscConfig+0x4f8>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a94      	ldr	r2, [pc, #592]	@ (80028a8 <HAL_RCC_OscConfig+0x4f8>)
 8002658:	f023 0301 	bic.w	r3, r3, #1
 800265c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800265e:	f7fe fd61 	bl	8001124 <HAL_GetTick>
 8002662:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002664:	e008      	b.n	8002678 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002666:	f7fe fd5d 	bl	8001124 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	2b02      	cmp	r3, #2
 8002672:	d901      	bls.n	8002678 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e2ed      	b.n	8002c54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002678:	4b8b      	ldr	r3, [pc, #556]	@ (80028a8 <HAL_RCC_OscConfig+0x4f8>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0304 	and.w	r3, r3, #4
 8002680:	2b00      	cmp	r3, #0
 8002682:	d1f0      	bne.n	8002666 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0310 	and.w	r3, r3, #16
 800268c:	2b00      	cmp	r3, #0
 800268e:	f000 80a9 	beq.w	80027e4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002692:	4b85      	ldr	r3, [pc, #532]	@ (80028a8 <HAL_RCC_OscConfig+0x4f8>)
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800269a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800269c:	4b82      	ldr	r3, [pc, #520]	@ (80028a8 <HAL_RCC_OscConfig+0x4f8>)
 800269e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026a0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	2b08      	cmp	r3, #8
 80026a6:	d007      	beq.n	80026b8 <HAL_RCC_OscConfig+0x308>
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	2b18      	cmp	r3, #24
 80026ac:	d13a      	bne.n	8002724 <HAL_RCC_OscConfig+0x374>
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	f003 0303 	and.w	r3, r3, #3
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d135      	bne.n	8002724 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80026b8:	4b7b      	ldr	r3, [pc, #492]	@ (80028a8 <HAL_RCC_OscConfig+0x4f8>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d005      	beq.n	80026d0 <HAL_RCC_OscConfig+0x320>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	69db      	ldr	r3, [r3, #28]
 80026c8:	2b80      	cmp	r3, #128	@ 0x80
 80026ca:	d001      	beq.n	80026d0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e2c1      	b.n	8002c54 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026d0:	f7fe fd34 	bl	800113c <HAL_GetREVID>
 80026d4:	4603      	mov	r3, r0
 80026d6:	f241 0203 	movw	r2, #4099	@ 0x1003
 80026da:	4293      	cmp	r3, r2
 80026dc:	d817      	bhi.n	800270e <HAL_RCC_OscConfig+0x35e>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a1b      	ldr	r3, [r3, #32]
 80026e2:	2b20      	cmp	r3, #32
 80026e4:	d108      	bne.n	80026f8 <HAL_RCC_OscConfig+0x348>
 80026e6:	4b70      	ldr	r3, [pc, #448]	@ (80028a8 <HAL_RCC_OscConfig+0x4f8>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80026ee:	4a6e      	ldr	r2, [pc, #440]	@ (80028a8 <HAL_RCC_OscConfig+0x4f8>)
 80026f0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80026f4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80026f6:	e075      	b.n	80027e4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026f8:	4b6b      	ldr	r3, [pc, #428]	@ (80028a8 <HAL_RCC_OscConfig+0x4f8>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a1b      	ldr	r3, [r3, #32]
 8002704:	069b      	lsls	r3, r3, #26
 8002706:	4968      	ldr	r1, [pc, #416]	@ (80028a8 <HAL_RCC_OscConfig+0x4f8>)
 8002708:	4313      	orrs	r3, r2
 800270a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800270c:	e06a      	b.n	80027e4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800270e:	4b66      	ldr	r3, [pc, #408]	@ (80028a8 <HAL_RCC_OscConfig+0x4f8>)
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a1b      	ldr	r3, [r3, #32]
 800271a:	061b      	lsls	r3, r3, #24
 800271c:	4962      	ldr	r1, [pc, #392]	@ (80028a8 <HAL_RCC_OscConfig+0x4f8>)
 800271e:	4313      	orrs	r3, r2
 8002720:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002722:	e05f      	b.n	80027e4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	69db      	ldr	r3, [r3, #28]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d042      	beq.n	80027b2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800272c:	4b5e      	ldr	r3, [pc, #376]	@ (80028a8 <HAL_RCC_OscConfig+0x4f8>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a5d      	ldr	r2, [pc, #372]	@ (80028a8 <HAL_RCC_OscConfig+0x4f8>)
 8002732:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002736:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002738:	f7fe fcf4 	bl	8001124 <HAL_GetTick>
 800273c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800273e:	e008      	b.n	8002752 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002740:	f7fe fcf0 	bl	8001124 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e280      	b.n	8002c54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002752:	4b55      	ldr	r3, [pc, #340]	@ (80028a8 <HAL_RCC_OscConfig+0x4f8>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800275a:	2b00      	cmp	r3, #0
 800275c:	d0f0      	beq.n	8002740 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800275e:	f7fe fced 	bl	800113c <HAL_GetREVID>
 8002762:	4603      	mov	r3, r0
 8002764:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002768:	4293      	cmp	r3, r2
 800276a:	d817      	bhi.n	800279c <HAL_RCC_OscConfig+0x3ec>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6a1b      	ldr	r3, [r3, #32]
 8002770:	2b20      	cmp	r3, #32
 8002772:	d108      	bne.n	8002786 <HAL_RCC_OscConfig+0x3d6>
 8002774:	4b4c      	ldr	r3, [pc, #304]	@ (80028a8 <HAL_RCC_OscConfig+0x4f8>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800277c:	4a4a      	ldr	r2, [pc, #296]	@ (80028a8 <HAL_RCC_OscConfig+0x4f8>)
 800277e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002782:	6053      	str	r3, [r2, #4]
 8002784:	e02e      	b.n	80027e4 <HAL_RCC_OscConfig+0x434>
 8002786:	4b48      	ldr	r3, [pc, #288]	@ (80028a8 <HAL_RCC_OscConfig+0x4f8>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a1b      	ldr	r3, [r3, #32]
 8002792:	069b      	lsls	r3, r3, #26
 8002794:	4944      	ldr	r1, [pc, #272]	@ (80028a8 <HAL_RCC_OscConfig+0x4f8>)
 8002796:	4313      	orrs	r3, r2
 8002798:	604b      	str	r3, [r1, #4]
 800279a:	e023      	b.n	80027e4 <HAL_RCC_OscConfig+0x434>
 800279c:	4b42      	ldr	r3, [pc, #264]	@ (80028a8 <HAL_RCC_OscConfig+0x4f8>)
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a1b      	ldr	r3, [r3, #32]
 80027a8:	061b      	lsls	r3, r3, #24
 80027aa:	493f      	ldr	r1, [pc, #252]	@ (80028a8 <HAL_RCC_OscConfig+0x4f8>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	60cb      	str	r3, [r1, #12]
 80027b0:	e018      	b.n	80027e4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80027b2:	4b3d      	ldr	r3, [pc, #244]	@ (80028a8 <HAL_RCC_OscConfig+0x4f8>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a3c      	ldr	r2, [pc, #240]	@ (80028a8 <HAL_RCC_OscConfig+0x4f8>)
 80027b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80027bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027be:	f7fe fcb1 	bl	8001124 <HAL_GetTick>
 80027c2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80027c4:	e008      	b.n	80027d8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80027c6:	f7fe fcad 	bl	8001124 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d901      	bls.n	80027d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e23d      	b.n	8002c54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80027d8:	4b33      	ldr	r3, [pc, #204]	@ (80028a8 <HAL_RCC_OscConfig+0x4f8>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1f0      	bne.n	80027c6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0308 	and.w	r3, r3, #8
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d036      	beq.n	800285e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	695b      	ldr	r3, [r3, #20]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d019      	beq.n	800282c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027f8:	4b2b      	ldr	r3, [pc, #172]	@ (80028a8 <HAL_RCC_OscConfig+0x4f8>)
 80027fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027fc:	4a2a      	ldr	r2, [pc, #168]	@ (80028a8 <HAL_RCC_OscConfig+0x4f8>)
 80027fe:	f043 0301 	orr.w	r3, r3, #1
 8002802:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002804:	f7fe fc8e 	bl	8001124 <HAL_GetTick>
 8002808:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800280a:	e008      	b.n	800281e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800280c:	f7fe fc8a 	bl	8001124 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b02      	cmp	r3, #2
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e21a      	b.n	8002c54 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800281e:	4b22      	ldr	r3, [pc, #136]	@ (80028a8 <HAL_RCC_OscConfig+0x4f8>)
 8002820:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d0f0      	beq.n	800280c <HAL_RCC_OscConfig+0x45c>
 800282a:	e018      	b.n	800285e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800282c:	4b1e      	ldr	r3, [pc, #120]	@ (80028a8 <HAL_RCC_OscConfig+0x4f8>)
 800282e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002830:	4a1d      	ldr	r2, [pc, #116]	@ (80028a8 <HAL_RCC_OscConfig+0x4f8>)
 8002832:	f023 0301 	bic.w	r3, r3, #1
 8002836:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002838:	f7fe fc74 	bl	8001124 <HAL_GetTick>
 800283c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800283e:	e008      	b.n	8002852 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002840:	f7fe fc70 	bl	8001124 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e200      	b.n	8002c54 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002852:	4b15      	ldr	r3, [pc, #84]	@ (80028a8 <HAL_RCC_OscConfig+0x4f8>)
 8002854:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1f0      	bne.n	8002840 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0320 	and.w	r3, r3, #32
 8002866:	2b00      	cmp	r3, #0
 8002868:	d039      	beq.n	80028de <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d01c      	beq.n	80028ac <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002872:	4b0d      	ldr	r3, [pc, #52]	@ (80028a8 <HAL_RCC_OscConfig+0x4f8>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a0c      	ldr	r2, [pc, #48]	@ (80028a8 <HAL_RCC_OscConfig+0x4f8>)
 8002878:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800287c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800287e:	f7fe fc51 	bl	8001124 <HAL_GetTick>
 8002882:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002884:	e008      	b.n	8002898 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002886:	f7fe fc4d 	bl	8001124 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b02      	cmp	r3, #2
 8002892:	d901      	bls.n	8002898 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e1dd      	b.n	8002c54 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002898:	4b03      	ldr	r3, [pc, #12]	@ (80028a8 <HAL_RCC_OscConfig+0x4f8>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d0f0      	beq.n	8002886 <HAL_RCC_OscConfig+0x4d6>
 80028a4:	e01b      	b.n	80028de <HAL_RCC_OscConfig+0x52e>
 80028a6:	bf00      	nop
 80028a8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80028ac:	4b9b      	ldr	r3, [pc, #620]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a9a      	ldr	r2, [pc, #616]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 80028b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80028b6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80028b8:	f7fe fc34 	bl	8001124 <HAL_GetTick>
 80028bc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80028be:	e008      	b.n	80028d2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028c0:	f7fe fc30 	bl	8001124 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e1c0      	b.n	8002c54 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80028d2:	4b92      	ldr	r3, [pc, #584]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1f0      	bne.n	80028c0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0304 	and.w	r3, r3, #4
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	f000 8081 	beq.w	80029ee <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80028ec:	4b8c      	ldr	r3, [pc, #560]	@ (8002b20 <HAL_RCC_OscConfig+0x770>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a8b      	ldr	r2, [pc, #556]	@ (8002b20 <HAL_RCC_OscConfig+0x770>)
 80028f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028f6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028f8:	f7fe fc14 	bl	8001124 <HAL_GetTick>
 80028fc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002900:	f7fe fc10 	bl	8001124 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b64      	cmp	r3, #100	@ 0x64
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e1a0      	b.n	8002c54 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002912:	4b83      	ldr	r3, [pc, #524]	@ (8002b20 <HAL_RCC_OscConfig+0x770>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800291a:	2b00      	cmp	r3, #0
 800291c:	d0f0      	beq.n	8002900 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d106      	bne.n	8002934 <HAL_RCC_OscConfig+0x584>
 8002926:	4b7d      	ldr	r3, [pc, #500]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 8002928:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800292a:	4a7c      	ldr	r2, [pc, #496]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 800292c:	f043 0301 	orr.w	r3, r3, #1
 8002930:	6713      	str	r3, [r2, #112]	@ 0x70
 8002932:	e02d      	b.n	8002990 <HAL_RCC_OscConfig+0x5e0>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d10c      	bne.n	8002956 <HAL_RCC_OscConfig+0x5a6>
 800293c:	4b77      	ldr	r3, [pc, #476]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 800293e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002940:	4a76      	ldr	r2, [pc, #472]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 8002942:	f023 0301 	bic.w	r3, r3, #1
 8002946:	6713      	str	r3, [r2, #112]	@ 0x70
 8002948:	4b74      	ldr	r3, [pc, #464]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 800294a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800294c:	4a73      	ldr	r2, [pc, #460]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 800294e:	f023 0304 	bic.w	r3, r3, #4
 8002952:	6713      	str	r3, [r2, #112]	@ 0x70
 8002954:	e01c      	b.n	8002990 <HAL_RCC_OscConfig+0x5e0>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	2b05      	cmp	r3, #5
 800295c:	d10c      	bne.n	8002978 <HAL_RCC_OscConfig+0x5c8>
 800295e:	4b6f      	ldr	r3, [pc, #444]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 8002960:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002962:	4a6e      	ldr	r2, [pc, #440]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 8002964:	f043 0304 	orr.w	r3, r3, #4
 8002968:	6713      	str	r3, [r2, #112]	@ 0x70
 800296a:	4b6c      	ldr	r3, [pc, #432]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 800296c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800296e:	4a6b      	ldr	r2, [pc, #428]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 8002970:	f043 0301 	orr.w	r3, r3, #1
 8002974:	6713      	str	r3, [r2, #112]	@ 0x70
 8002976:	e00b      	b.n	8002990 <HAL_RCC_OscConfig+0x5e0>
 8002978:	4b68      	ldr	r3, [pc, #416]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 800297a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800297c:	4a67      	ldr	r2, [pc, #412]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 800297e:	f023 0301 	bic.w	r3, r3, #1
 8002982:	6713      	str	r3, [r2, #112]	@ 0x70
 8002984:	4b65      	ldr	r3, [pc, #404]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 8002986:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002988:	4a64      	ldr	r2, [pc, #400]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 800298a:	f023 0304 	bic.w	r3, r3, #4
 800298e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d015      	beq.n	80029c4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002998:	f7fe fbc4 	bl	8001124 <HAL_GetTick>
 800299c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800299e:	e00a      	b.n	80029b6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029a0:	f7fe fbc0 	bl	8001124 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e14e      	b.n	8002c54 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029b6:	4b59      	ldr	r3, [pc, #356]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 80029b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d0ee      	beq.n	80029a0 <HAL_RCC_OscConfig+0x5f0>
 80029c2:	e014      	b.n	80029ee <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029c4:	f7fe fbae 	bl	8001124 <HAL_GetTick>
 80029c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80029ca:	e00a      	b.n	80029e2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029cc:	f7fe fbaa 	bl	8001124 <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029da:	4293      	cmp	r3, r2
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e138      	b.n	8002c54 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80029e2:	4b4e      	ldr	r3, [pc, #312]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 80029e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d1ee      	bne.n	80029cc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	f000 812d 	beq.w	8002c52 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80029f8:	4b48      	ldr	r3, [pc, #288]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a00:	2b18      	cmp	r3, #24
 8002a02:	f000 80bd 	beq.w	8002b80 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	f040 809e 	bne.w	8002b4c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a10:	4b42      	ldr	r3, [pc, #264]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a41      	ldr	r2, [pc, #260]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 8002a16:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a1c:	f7fe fb82 	bl	8001124 <HAL_GetTick>
 8002a20:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a22:	e008      	b.n	8002a36 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a24:	f7fe fb7e 	bl	8001124 <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e10e      	b.n	8002c54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a36:	4b39      	ldr	r3, [pc, #228]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d1f0      	bne.n	8002a24 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a42:	4b36      	ldr	r3, [pc, #216]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 8002a44:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a46:	4b37      	ldr	r3, [pc, #220]	@ (8002b24 <HAL_RCC_OscConfig+0x774>)
 8002a48:	4013      	ands	r3, r2
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002a52:	0112      	lsls	r2, r2, #4
 8002a54:	430a      	orrs	r2, r1
 8002a56:	4931      	ldr	r1, [pc, #196]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	628b      	str	r3, [r1, #40]	@ 0x28
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a60:	3b01      	subs	r3, #1
 8002a62:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	025b      	lsls	r3, r3, #9
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	431a      	orrs	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a76:	3b01      	subs	r3, #1
 8002a78:	041b      	lsls	r3, r3, #16
 8002a7a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002a7e:	431a      	orrs	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a84:	3b01      	subs	r3, #1
 8002a86:	061b      	lsls	r3, r3, #24
 8002a88:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002a8c:	4923      	ldr	r1, [pc, #140]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002a92:	4b22      	ldr	r3, [pc, #136]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 8002a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a96:	4a21      	ldr	r2, [pc, #132]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 8002a98:	f023 0301 	bic.w	r3, r3, #1
 8002a9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002a9e:	4b1f      	ldr	r3, [pc, #124]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 8002aa0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002aa2:	4b21      	ldr	r3, [pc, #132]	@ (8002b28 <HAL_RCC_OscConfig+0x778>)
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002aaa:	00d2      	lsls	r2, r2, #3
 8002aac:	491b      	ldr	r1, [pc, #108]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002ab2:	4b1a      	ldr	r3, [pc, #104]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 8002ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ab6:	f023 020c 	bic.w	r2, r3, #12
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002abe:	4917      	ldr	r1, [pc, #92]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002ac4:	4b15      	ldr	r3, [pc, #84]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 8002ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ac8:	f023 0202 	bic.w	r2, r3, #2
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ad0:	4912      	ldr	r1, [pc, #72]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002ad6:	4b11      	ldr	r3, [pc, #68]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 8002ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ada:	4a10      	ldr	r2, [pc, #64]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 8002adc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ae0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ae2:	4b0e      	ldr	r3, [pc, #56]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 8002ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ae6:	4a0d      	ldr	r2, [pc, #52]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 8002ae8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002aec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002aee:	4b0b      	ldr	r3, [pc, #44]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 8002af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002af2:	4a0a      	ldr	r2, [pc, #40]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 8002af4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002af8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002afa:	4b08      	ldr	r3, [pc, #32]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 8002afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002afe:	4a07      	ldr	r2, [pc, #28]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 8002b00:	f043 0301 	orr.w	r3, r3, #1
 8002b04:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b06:	4b05      	ldr	r3, [pc, #20]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a04      	ldr	r2, [pc, #16]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 8002b0c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b12:	f7fe fb07 	bl	8001124 <HAL_GetTick>
 8002b16:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b18:	e011      	b.n	8002b3e <HAL_RCC_OscConfig+0x78e>
 8002b1a:	bf00      	nop
 8002b1c:	58024400 	.word	0x58024400
 8002b20:	58024800 	.word	0x58024800
 8002b24:	fffffc0c 	.word	0xfffffc0c
 8002b28:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b2c:	f7fe fafa 	bl	8001124 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e08a      	b.n	8002c54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b3e:	4b47      	ldr	r3, [pc, #284]	@ (8002c5c <HAL_RCC_OscConfig+0x8ac>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d0f0      	beq.n	8002b2c <HAL_RCC_OscConfig+0x77c>
 8002b4a:	e082      	b.n	8002c52 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b4c:	4b43      	ldr	r3, [pc, #268]	@ (8002c5c <HAL_RCC_OscConfig+0x8ac>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a42      	ldr	r2, [pc, #264]	@ (8002c5c <HAL_RCC_OscConfig+0x8ac>)
 8002b52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b58:	f7fe fae4 	bl	8001124 <HAL_GetTick>
 8002b5c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b60:	f7fe fae0 	bl	8001124 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e070      	b.n	8002c54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b72:	4b3a      	ldr	r3, [pc, #232]	@ (8002c5c <HAL_RCC_OscConfig+0x8ac>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1f0      	bne.n	8002b60 <HAL_RCC_OscConfig+0x7b0>
 8002b7e:	e068      	b.n	8002c52 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002b80:	4b36      	ldr	r3, [pc, #216]	@ (8002c5c <HAL_RCC_OscConfig+0x8ac>)
 8002b82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b84:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002b86:	4b35      	ldr	r3, [pc, #212]	@ (8002c5c <HAL_RCC_OscConfig+0x8ac>)
 8002b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b8a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d031      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	f003 0203 	and.w	r2, r3, #3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d12a      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	091b      	lsrs	r3, r3, #4
 8002ba6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d122      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bbc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d11a      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	0a5b      	lsrs	r3, r3, #9
 8002bc6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bce:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d111      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	0c1b      	lsrs	r3, r3, #16
 8002bd8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002be0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d108      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	0e1b      	lsrs	r3, r3, #24
 8002bea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bf2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d001      	beq.n	8002bfc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e02b      	b.n	8002c54 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002bfc:	4b17      	ldr	r3, [pc, #92]	@ (8002c5c <HAL_RCC_OscConfig+0x8ac>)
 8002bfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c00:	08db      	lsrs	r3, r3, #3
 8002c02:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002c06:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c0c:	693a      	ldr	r2, [r7, #16]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d01f      	beq.n	8002c52 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002c12:	4b12      	ldr	r3, [pc, #72]	@ (8002c5c <HAL_RCC_OscConfig+0x8ac>)
 8002c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c16:	4a11      	ldr	r2, [pc, #68]	@ (8002c5c <HAL_RCC_OscConfig+0x8ac>)
 8002c18:	f023 0301 	bic.w	r3, r3, #1
 8002c1c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c1e:	f7fe fa81 	bl	8001124 <HAL_GetTick>
 8002c22:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002c24:	bf00      	nop
 8002c26:	f7fe fa7d 	bl	8001124 <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d0f9      	beq.n	8002c26 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002c32:	4b0a      	ldr	r3, [pc, #40]	@ (8002c5c <HAL_RCC_OscConfig+0x8ac>)
 8002c34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c36:	4b0a      	ldr	r3, [pc, #40]	@ (8002c60 <HAL_RCC_OscConfig+0x8b0>)
 8002c38:	4013      	ands	r3, r2
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002c3e:	00d2      	lsls	r2, r2, #3
 8002c40:	4906      	ldr	r1, [pc, #24]	@ (8002c5c <HAL_RCC_OscConfig+0x8ac>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002c46:	4b05      	ldr	r3, [pc, #20]	@ (8002c5c <HAL_RCC_OscConfig+0x8ac>)
 8002c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c4a:	4a04      	ldr	r2, [pc, #16]	@ (8002c5c <HAL_RCC_OscConfig+0x8ac>)
 8002c4c:	f043 0301 	orr.w	r3, r3, #1
 8002c50:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002c52:	2300      	movs	r3, #0
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3730      	adds	r7, #48	@ 0x30
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	58024400 	.word	0x58024400
 8002c60:	ffff0007 	.word	0xffff0007

08002c64 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b086      	sub	sp, #24
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d101      	bne.n	8002c78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e19c      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c78:	4b8a      	ldr	r3, [pc, #552]	@ (8002ea4 <HAL_RCC_ClockConfig+0x240>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 030f 	and.w	r3, r3, #15
 8002c80:	683a      	ldr	r2, [r7, #0]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d910      	bls.n	8002ca8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c86:	4b87      	ldr	r3, [pc, #540]	@ (8002ea4 <HAL_RCC_ClockConfig+0x240>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f023 020f 	bic.w	r2, r3, #15
 8002c8e:	4985      	ldr	r1, [pc, #532]	@ (8002ea4 <HAL_RCC_ClockConfig+0x240>)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c96:	4b83      	ldr	r3, [pc, #524]	@ (8002ea4 <HAL_RCC_ClockConfig+0x240>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 030f 	and.w	r3, r3, #15
 8002c9e:	683a      	ldr	r2, [r7, #0]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d001      	beq.n	8002ca8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e184      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0304 	and.w	r3, r3, #4
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d010      	beq.n	8002cd6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	691a      	ldr	r2, [r3, #16]
 8002cb8:	4b7b      	ldr	r3, [pc, #492]	@ (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d908      	bls.n	8002cd6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002cc4:	4b78      	ldr	r3, [pc, #480]	@ (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002cc6:	699b      	ldr	r3, [r3, #24]
 8002cc8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	691b      	ldr	r3, [r3, #16]
 8002cd0:	4975      	ldr	r1, [pc, #468]	@ (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0308 	and.w	r3, r3, #8
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d010      	beq.n	8002d04 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	695a      	ldr	r2, [r3, #20]
 8002ce6:	4b70      	ldr	r3, [pc, #448]	@ (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002ce8:	69db      	ldr	r3, [r3, #28]
 8002cea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d908      	bls.n	8002d04 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002cf2:	4b6d      	ldr	r3, [pc, #436]	@ (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002cf4:	69db      	ldr	r3, [r3, #28]
 8002cf6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	695b      	ldr	r3, [r3, #20]
 8002cfe:	496a      	ldr	r1, [pc, #424]	@ (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0310 	and.w	r3, r3, #16
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d010      	beq.n	8002d32 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	699a      	ldr	r2, [r3, #24]
 8002d14:	4b64      	ldr	r3, [pc, #400]	@ (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002d16:	69db      	ldr	r3, [r3, #28]
 8002d18:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d908      	bls.n	8002d32 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002d20:	4b61      	ldr	r3, [pc, #388]	@ (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002d22:	69db      	ldr	r3, [r3, #28]
 8002d24:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	495e      	ldr	r1, [pc, #376]	@ (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0320 	and.w	r3, r3, #32
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d010      	beq.n	8002d60 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	69da      	ldr	r2, [r3, #28]
 8002d42:	4b59      	ldr	r3, [pc, #356]	@ (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002d44:	6a1b      	ldr	r3, [r3, #32]
 8002d46:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d908      	bls.n	8002d60 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002d4e:	4b56      	ldr	r3, [pc, #344]	@ (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	69db      	ldr	r3, [r3, #28]
 8002d5a:	4953      	ldr	r1, [pc, #332]	@ (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0302 	and.w	r3, r3, #2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d010      	beq.n	8002d8e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	68da      	ldr	r2, [r3, #12]
 8002d70:	4b4d      	ldr	r3, [pc, #308]	@ (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	f003 030f 	and.w	r3, r3, #15
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d908      	bls.n	8002d8e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d7c:	4b4a      	ldr	r3, [pc, #296]	@ (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	f023 020f 	bic.w	r2, r3, #15
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	4947      	ldr	r1, [pc, #284]	@ (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d055      	beq.n	8002e46 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002d9a:	4b43      	ldr	r3, [pc, #268]	@ (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002d9c:	699b      	ldr	r3, [r3, #24]
 8002d9e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	4940      	ldr	r1, [pc, #256]	@ (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d107      	bne.n	8002dc4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002db4:	4b3c      	ldr	r3, [pc, #240]	@ (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d121      	bne.n	8002e04 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e0f6      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	2b03      	cmp	r3, #3
 8002dca:	d107      	bne.n	8002ddc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002dcc:	4b36      	ldr	r3, [pc, #216]	@ (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d115      	bne.n	8002e04 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e0ea      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d107      	bne.n	8002df4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002de4:	4b30      	ldr	r3, [pc, #192]	@ (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d109      	bne.n	8002e04 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e0de      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002df4:	4b2c      	ldr	r3, [pc, #176]	@ (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0304 	and.w	r3, r3, #4
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d101      	bne.n	8002e04 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e0d6      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e04:	4b28      	ldr	r3, [pc, #160]	@ (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002e06:	691b      	ldr	r3, [r3, #16]
 8002e08:	f023 0207 	bic.w	r2, r3, #7
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	4925      	ldr	r1, [pc, #148]	@ (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e16:	f7fe f985 	bl	8001124 <HAL_GetTick>
 8002e1a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e1c:	e00a      	b.n	8002e34 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e1e:	f7fe f981 	bl	8001124 <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d901      	bls.n	8002e34 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e0be      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e34:	4b1c      	ldr	r3, [pc, #112]	@ (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	00db      	lsls	r3, r3, #3
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d1eb      	bne.n	8002e1e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d010      	beq.n	8002e74 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	68da      	ldr	r2, [r3, #12]
 8002e56:	4b14      	ldr	r3, [pc, #80]	@ (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	f003 030f 	and.w	r3, r3, #15
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d208      	bcs.n	8002e74 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e62:	4b11      	ldr	r3, [pc, #68]	@ (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002e64:	699b      	ldr	r3, [r3, #24]
 8002e66:	f023 020f 	bic.w	r2, r3, #15
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	490e      	ldr	r1, [pc, #56]	@ (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e74:	4b0b      	ldr	r3, [pc, #44]	@ (8002ea4 <HAL_RCC_ClockConfig+0x240>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 030f 	and.w	r3, r3, #15
 8002e7c:	683a      	ldr	r2, [r7, #0]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d214      	bcs.n	8002eac <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e82:	4b08      	ldr	r3, [pc, #32]	@ (8002ea4 <HAL_RCC_ClockConfig+0x240>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f023 020f 	bic.w	r2, r3, #15
 8002e8a:	4906      	ldr	r1, [pc, #24]	@ (8002ea4 <HAL_RCC_ClockConfig+0x240>)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e92:	4b04      	ldr	r3, [pc, #16]	@ (8002ea4 <HAL_RCC_ClockConfig+0x240>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 030f 	and.w	r3, r3, #15
 8002e9a:	683a      	ldr	r2, [r7, #0]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d005      	beq.n	8002eac <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e086      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x34e>
 8002ea4:	52002000 	.word	0x52002000
 8002ea8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0304 	and.w	r3, r3, #4
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d010      	beq.n	8002eda <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	691a      	ldr	r2, [r3, #16]
 8002ebc:	4b3f      	ldr	r3, [pc, #252]	@ (8002fbc <HAL_RCC_ClockConfig+0x358>)
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d208      	bcs.n	8002eda <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002ec8:	4b3c      	ldr	r3, [pc, #240]	@ (8002fbc <HAL_RCC_ClockConfig+0x358>)
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	691b      	ldr	r3, [r3, #16]
 8002ed4:	4939      	ldr	r1, [pc, #228]	@ (8002fbc <HAL_RCC_ClockConfig+0x358>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0308 	and.w	r3, r3, #8
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d010      	beq.n	8002f08 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	695a      	ldr	r2, [r3, #20]
 8002eea:	4b34      	ldr	r3, [pc, #208]	@ (8002fbc <HAL_RCC_ClockConfig+0x358>)
 8002eec:	69db      	ldr	r3, [r3, #28]
 8002eee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d208      	bcs.n	8002f08 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002ef6:	4b31      	ldr	r3, [pc, #196]	@ (8002fbc <HAL_RCC_ClockConfig+0x358>)
 8002ef8:	69db      	ldr	r3, [r3, #28]
 8002efa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	492e      	ldr	r1, [pc, #184]	@ (8002fbc <HAL_RCC_ClockConfig+0x358>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0310 	and.w	r3, r3, #16
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d010      	beq.n	8002f36 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	699a      	ldr	r2, [r3, #24]
 8002f18:	4b28      	ldr	r3, [pc, #160]	@ (8002fbc <HAL_RCC_ClockConfig+0x358>)
 8002f1a:	69db      	ldr	r3, [r3, #28]
 8002f1c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d208      	bcs.n	8002f36 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f24:	4b25      	ldr	r3, [pc, #148]	@ (8002fbc <HAL_RCC_ClockConfig+0x358>)
 8002f26:	69db      	ldr	r3, [r3, #28]
 8002f28:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	699b      	ldr	r3, [r3, #24]
 8002f30:	4922      	ldr	r1, [pc, #136]	@ (8002fbc <HAL_RCC_ClockConfig+0x358>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0320 	and.w	r3, r3, #32
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d010      	beq.n	8002f64 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	69da      	ldr	r2, [r3, #28]
 8002f46:	4b1d      	ldr	r3, [pc, #116]	@ (8002fbc <HAL_RCC_ClockConfig+0x358>)
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d208      	bcs.n	8002f64 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002f52:	4b1a      	ldr	r3, [pc, #104]	@ (8002fbc <HAL_RCC_ClockConfig+0x358>)
 8002f54:	6a1b      	ldr	r3, [r3, #32]
 8002f56:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	69db      	ldr	r3, [r3, #28]
 8002f5e:	4917      	ldr	r1, [pc, #92]	@ (8002fbc <HAL_RCC_ClockConfig+0x358>)
 8002f60:	4313      	orrs	r3, r2
 8002f62:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002f64:	f000 f834 	bl	8002fd0 <HAL_RCC_GetSysClockFreq>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	4b14      	ldr	r3, [pc, #80]	@ (8002fbc <HAL_RCC_ClockConfig+0x358>)
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	0a1b      	lsrs	r3, r3, #8
 8002f70:	f003 030f 	and.w	r3, r3, #15
 8002f74:	4912      	ldr	r1, [pc, #72]	@ (8002fc0 <HAL_RCC_ClockConfig+0x35c>)
 8002f76:	5ccb      	ldrb	r3, [r1, r3]
 8002f78:	f003 031f 	and.w	r3, r3, #31
 8002f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f80:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002f82:	4b0e      	ldr	r3, [pc, #56]	@ (8002fbc <HAL_RCC_ClockConfig+0x358>)
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	f003 030f 	and.w	r3, r3, #15
 8002f8a:	4a0d      	ldr	r2, [pc, #52]	@ (8002fc0 <HAL_RCC_ClockConfig+0x35c>)
 8002f8c:	5cd3      	ldrb	r3, [r2, r3]
 8002f8e:	f003 031f 	and.w	r3, r3, #31
 8002f92:	693a      	ldr	r2, [r7, #16]
 8002f94:	fa22 f303 	lsr.w	r3, r2, r3
 8002f98:	4a0a      	ldr	r2, [pc, #40]	@ (8002fc4 <HAL_RCC_ClockConfig+0x360>)
 8002f9a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f9c:	4a0a      	ldr	r2, [pc, #40]	@ (8002fc8 <HAL_RCC_ClockConfig+0x364>)
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002fa2:	4b0a      	ldr	r3, [pc, #40]	@ (8002fcc <HAL_RCC_ClockConfig+0x368>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7fe f872 	bl	8001090 <HAL_InitTick>
 8002fac:	4603      	mov	r3, r0
 8002fae:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3718      	adds	r7, #24
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	58024400 	.word	0x58024400
 8002fc0:	08007f18 	.word	0x08007f18
 8002fc4:	24000004 	.word	0x24000004
 8002fc8:	24000000 	.word	0x24000000
 8002fcc:	24000008 	.word	0x24000008

08002fd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b089      	sub	sp, #36	@ 0x24
 8002fd4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fd6:	4bb3      	ldr	r3, [pc, #716]	@ (80032a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002fde:	2b18      	cmp	r3, #24
 8002fe0:	f200 8155 	bhi.w	800328e <HAL_RCC_GetSysClockFreq+0x2be>
 8002fe4:	a201      	add	r2, pc, #4	@ (adr r2, 8002fec <HAL_RCC_GetSysClockFreq+0x1c>)
 8002fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fea:	bf00      	nop
 8002fec:	08003051 	.word	0x08003051
 8002ff0:	0800328f 	.word	0x0800328f
 8002ff4:	0800328f 	.word	0x0800328f
 8002ff8:	0800328f 	.word	0x0800328f
 8002ffc:	0800328f 	.word	0x0800328f
 8003000:	0800328f 	.word	0x0800328f
 8003004:	0800328f 	.word	0x0800328f
 8003008:	0800328f 	.word	0x0800328f
 800300c:	08003077 	.word	0x08003077
 8003010:	0800328f 	.word	0x0800328f
 8003014:	0800328f 	.word	0x0800328f
 8003018:	0800328f 	.word	0x0800328f
 800301c:	0800328f 	.word	0x0800328f
 8003020:	0800328f 	.word	0x0800328f
 8003024:	0800328f 	.word	0x0800328f
 8003028:	0800328f 	.word	0x0800328f
 800302c:	0800307d 	.word	0x0800307d
 8003030:	0800328f 	.word	0x0800328f
 8003034:	0800328f 	.word	0x0800328f
 8003038:	0800328f 	.word	0x0800328f
 800303c:	0800328f 	.word	0x0800328f
 8003040:	0800328f 	.word	0x0800328f
 8003044:	0800328f 	.word	0x0800328f
 8003048:	0800328f 	.word	0x0800328f
 800304c:	08003083 	.word	0x08003083
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003050:	4b94      	ldr	r3, [pc, #592]	@ (80032a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0320 	and.w	r3, r3, #32
 8003058:	2b00      	cmp	r3, #0
 800305a:	d009      	beq.n	8003070 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800305c:	4b91      	ldr	r3, [pc, #580]	@ (80032a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	08db      	lsrs	r3, r3, #3
 8003062:	f003 0303 	and.w	r3, r3, #3
 8003066:	4a90      	ldr	r2, [pc, #576]	@ (80032a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003068:	fa22 f303 	lsr.w	r3, r2, r3
 800306c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800306e:	e111      	b.n	8003294 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003070:	4b8d      	ldr	r3, [pc, #564]	@ (80032a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003072:	61bb      	str	r3, [r7, #24]
      break;
 8003074:	e10e      	b.n	8003294 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003076:	4b8d      	ldr	r3, [pc, #564]	@ (80032ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003078:	61bb      	str	r3, [r7, #24]
      break;
 800307a:	e10b      	b.n	8003294 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800307c:	4b8c      	ldr	r3, [pc, #560]	@ (80032b0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800307e:	61bb      	str	r3, [r7, #24]
      break;
 8003080:	e108      	b.n	8003294 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003082:	4b88      	ldr	r3, [pc, #544]	@ (80032a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003086:	f003 0303 	and.w	r3, r3, #3
 800308a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800308c:	4b85      	ldr	r3, [pc, #532]	@ (80032a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800308e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003090:	091b      	lsrs	r3, r3, #4
 8003092:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003096:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003098:	4b82      	ldr	r3, [pc, #520]	@ (80032a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800309a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800309c:	f003 0301 	and.w	r3, r3, #1
 80030a0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80030a2:	4b80      	ldr	r3, [pc, #512]	@ (80032a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030a6:	08db      	lsrs	r3, r3, #3
 80030a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	fb02 f303 	mul.w	r3, r2, r3
 80030b2:	ee07 3a90 	vmov	s15, r3
 80030b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030ba:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	f000 80e1 	beq.w	8003288 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	f000 8083 	beq.w	80031d4 <HAL_RCC_GetSysClockFreq+0x204>
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	f200 80a1 	bhi.w	8003218 <HAL_RCC_GetSysClockFreq+0x248>
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d003      	beq.n	80030e4 <HAL_RCC_GetSysClockFreq+0x114>
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d056      	beq.n	8003190 <HAL_RCC_GetSysClockFreq+0x1c0>
 80030e2:	e099      	b.n	8003218 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80030e4:	4b6f      	ldr	r3, [pc, #444]	@ (80032a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0320 	and.w	r3, r3, #32
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d02d      	beq.n	800314c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80030f0:	4b6c      	ldr	r3, [pc, #432]	@ (80032a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	08db      	lsrs	r3, r3, #3
 80030f6:	f003 0303 	and.w	r3, r3, #3
 80030fa:	4a6b      	ldr	r2, [pc, #428]	@ (80032a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80030fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003100:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	ee07 3a90 	vmov	s15, r3
 8003108:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	ee07 3a90 	vmov	s15, r3
 8003112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003116:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800311a:	4b62      	ldr	r3, [pc, #392]	@ (80032a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800311c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800311e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003122:	ee07 3a90 	vmov	s15, r3
 8003126:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800312a:	ed97 6a02 	vldr	s12, [r7, #8]
 800312e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80032b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003132:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003136:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800313a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800313e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003142:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003146:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800314a:	e087      	b.n	800325c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	ee07 3a90 	vmov	s15, r3
 8003152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003156:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80032b8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800315a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800315e:	4b51      	ldr	r3, [pc, #324]	@ (80032a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003162:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003166:	ee07 3a90 	vmov	s15, r3
 800316a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800316e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003172:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80032b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003176:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800317a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800317e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003182:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003186:	ee67 7a27 	vmul.f32	s15, s14, s15
 800318a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800318e:	e065      	b.n	800325c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	ee07 3a90 	vmov	s15, r3
 8003196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800319a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80032bc <HAL_RCC_GetSysClockFreq+0x2ec>
 800319e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031a2:	4b40      	ldr	r3, [pc, #256]	@ (80032a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031aa:	ee07 3a90 	vmov	s15, r3
 80031ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80031b6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80032b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80031d2:	e043      	b.n	800325c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	ee07 3a90 	vmov	s15, r3
 80031da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031de:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80032c0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80031e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031e6:	4b2f      	ldr	r3, [pc, #188]	@ (80032a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031ee:	ee07 3a90 	vmov	s15, r3
 80031f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80031fa:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80032b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003202:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003206:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800320a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800320e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003212:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003216:	e021      	b.n	800325c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	ee07 3a90 	vmov	s15, r3
 800321e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003222:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80032bc <HAL_RCC_GetSysClockFreq+0x2ec>
 8003226:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800322a:	4b1e      	ldr	r3, [pc, #120]	@ (80032a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800322c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800322e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003232:	ee07 3a90 	vmov	s15, r3
 8003236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800323a:	ed97 6a02 	vldr	s12, [r7, #8]
 800323e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80032b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003242:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003246:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800324a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800324e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003256:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800325a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800325c:	4b11      	ldr	r3, [pc, #68]	@ (80032a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800325e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003260:	0a5b      	lsrs	r3, r3, #9
 8003262:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003266:	3301      	adds	r3, #1
 8003268:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	ee07 3a90 	vmov	s15, r3
 8003270:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003274:	edd7 6a07 	vldr	s13, [r7, #28]
 8003278:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800327c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003280:	ee17 3a90 	vmov	r3, s15
 8003284:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003286:	e005      	b.n	8003294 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003288:	2300      	movs	r3, #0
 800328a:	61bb      	str	r3, [r7, #24]
      break;
 800328c:	e002      	b.n	8003294 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800328e:	4b07      	ldr	r3, [pc, #28]	@ (80032ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003290:	61bb      	str	r3, [r7, #24]
      break;
 8003292:	bf00      	nop
  }

  return sysclockfreq;
 8003294:	69bb      	ldr	r3, [r7, #24]
}
 8003296:	4618      	mov	r0, r3
 8003298:	3724      	adds	r7, #36	@ 0x24
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	58024400 	.word	0x58024400
 80032a8:	03d09000 	.word	0x03d09000
 80032ac:	003d0900 	.word	0x003d0900
 80032b0:	007a1200 	.word	0x007a1200
 80032b4:	46000000 	.word	0x46000000
 80032b8:	4c742400 	.word	0x4c742400
 80032bc:	4a742400 	.word	0x4a742400
 80032c0:	4af42400 	.word	0x4af42400

080032c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80032ca:	f7ff fe81 	bl	8002fd0 <HAL_RCC_GetSysClockFreq>
 80032ce:	4602      	mov	r2, r0
 80032d0:	4b10      	ldr	r3, [pc, #64]	@ (8003314 <HAL_RCC_GetHCLKFreq+0x50>)
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	0a1b      	lsrs	r3, r3, #8
 80032d6:	f003 030f 	and.w	r3, r3, #15
 80032da:	490f      	ldr	r1, [pc, #60]	@ (8003318 <HAL_RCC_GetHCLKFreq+0x54>)
 80032dc:	5ccb      	ldrb	r3, [r1, r3]
 80032de:	f003 031f 	and.w	r3, r3, #31
 80032e2:	fa22 f303 	lsr.w	r3, r2, r3
 80032e6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80032e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003314 <HAL_RCC_GetHCLKFreq+0x50>)
 80032ea:	699b      	ldr	r3, [r3, #24]
 80032ec:	f003 030f 	and.w	r3, r3, #15
 80032f0:	4a09      	ldr	r2, [pc, #36]	@ (8003318 <HAL_RCC_GetHCLKFreq+0x54>)
 80032f2:	5cd3      	ldrb	r3, [r2, r3]
 80032f4:	f003 031f 	and.w	r3, r3, #31
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	fa22 f303 	lsr.w	r3, r2, r3
 80032fe:	4a07      	ldr	r2, [pc, #28]	@ (800331c <HAL_RCC_GetHCLKFreq+0x58>)
 8003300:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003302:	4a07      	ldr	r2, [pc, #28]	@ (8003320 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003308:	4b04      	ldr	r3, [pc, #16]	@ (800331c <HAL_RCC_GetHCLKFreq+0x58>)
 800330a:	681b      	ldr	r3, [r3, #0]
}
 800330c:	4618      	mov	r0, r3
 800330e:	3708      	adds	r7, #8
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	58024400 	.word	0x58024400
 8003318:	08007f18 	.word	0x08007f18
 800331c:	24000004 	.word	0x24000004
 8003320:	24000000 	.word	0x24000000

08003324 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003328:	f7ff ffcc 	bl	80032c4 <HAL_RCC_GetHCLKFreq>
 800332c:	4602      	mov	r2, r0
 800332e:	4b06      	ldr	r3, [pc, #24]	@ (8003348 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003330:	69db      	ldr	r3, [r3, #28]
 8003332:	091b      	lsrs	r3, r3, #4
 8003334:	f003 0307 	and.w	r3, r3, #7
 8003338:	4904      	ldr	r1, [pc, #16]	@ (800334c <HAL_RCC_GetPCLK1Freq+0x28>)
 800333a:	5ccb      	ldrb	r3, [r1, r3]
 800333c:	f003 031f 	and.w	r3, r3, #31
 8003340:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003344:	4618      	mov	r0, r3
 8003346:	bd80      	pop	{r7, pc}
 8003348:	58024400 	.word	0x58024400
 800334c:	08007f18 	.word	0x08007f18

08003350 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003354:	f7ff ffb6 	bl	80032c4 <HAL_RCC_GetHCLKFreq>
 8003358:	4602      	mov	r2, r0
 800335a:	4b06      	ldr	r3, [pc, #24]	@ (8003374 <HAL_RCC_GetPCLK2Freq+0x24>)
 800335c:	69db      	ldr	r3, [r3, #28]
 800335e:	0a1b      	lsrs	r3, r3, #8
 8003360:	f003 0307 	and.w	r3, r3, #7
 8003364:	4904      	ldr	r1, [pc, #16]	@ (8003378 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003366:	5ccb      	ldrb	r3, [r1, r3]
 8003368:	f003 031f 	and.w	r3, r3, #31
 800336c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003370:	4618      	mov	r0, r3
 8003372:	bd80      	pop	{r7, pc}
 8003374:	58024400 	.word	0x58024400
 8003378:	08007f18 	.word	0x08007f18

0800337c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800337c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003380:	b0ca      	sub	sp, #296	@ 0x128
 8003382:	af00      	add	r7, sp, #0
 8003384:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003388:	2300      	movs	r3, #0
 800338a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800338e:	2300      	movs	r3, #0
 8003390:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003394:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800339c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80033a0:	2500      	movs	r5, #0
 80033a2:	ea54 0305 	orrs.w	r3, r4, r5
 80033a6:	d049      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80033a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80033ae:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80033b2:	d02f      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80033b4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80033b8:	d828      	bhi.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80033ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80033be:	d01a      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80033c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80033c4:	d822      	bhi.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d003      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80033ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033ce:	d007      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80033d0:	e01c      	b.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033d2:	4bb8      	ldr	r3, [pc, #736]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033d6:	4ab7      	ldr	r2, [pc, #732]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80033de:	e01a      	b.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80033e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033e4:	3308      	adds	r3, #8
 80033e6:	2102      	movs	r1, #2
 80033e8:	4618      	mov	r0, r3
 80033ea:	f001 fc8f 	bl	8004d0c <RCCEx_PLL2_Config>
 80033ee:	4603      	mov	r3, r0
 80033f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80033f4:	e00f      	b.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80033f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033fa:	3328      	adds	r3, #40	@ 0x28
 80033fc:	2102      	movs	r1, #2
 80033fe:	4618      	mov	r0, r3
 8003400:	f001 fd36 	bl	8004e70 <RCCEx_PLL3_Config>
 8003404:	4603      	mov	r3, r0
 8003406:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800340a:	e004      	b.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003412:	e000      	b.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003414:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003416:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800341a:	2b00      	cmp	r3, #0
 800341c:	d10a      	bne.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800341e:	4ba5      	ldr	r3, [pc, #660]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003420:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003422:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003426:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800342a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800342c:	4aa1      	ldr	r2, [pc, #644]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800342e:	430b      	orrs	r3, r1
 8003430:	6513      	str	r3, [r2, #80]	@ 0x50
 8003432:	e003      	b.n	800343c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003434:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003438:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800343c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003444:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003448:	f04f 0900 	mov.w	r9, #0
 800344c:	ea58 0309 	orrs.w	r3, r8, r9
 8003450:	d047      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003452:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003456:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003458:	2b04      	cmp	r3, #4
 800345a:	d82a      	bhi.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800345c:	a201      	add	r2, pc, #4	@ (adr r2, 8003464 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800345e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003462:	bf00      	nop
 8003464:	08003479 	.word	0x08003479
 8003468:	08003487 	.word	0x08003487
 800346c:	0800349d 	.word	0x0800349d
 8003470:	080034bb 	.word	0x080034bb
 8003474:	080034bb 	.word	0x080034bb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003478:	4b8e      	ldr	r3, [pc, #568]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800347a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800347c:	4a8d      	ldr	r2, [pc, #564]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800347e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003482:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003484:	e01a      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003486:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800348a:	3308      	adds	r3, #8
 800348c:	2100      	movs	r1, #0
 800348e:	4618      	mov	r0, r3
 8003490:	f001 fc3c 	bl	8004d0c <RCCEx_PLL2_Config>
 8003494:	4603      	mov	r3, r0
 8003496:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800349a:	e00f      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800349c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034a0:	3328      	adds	r3, #40	@ 0x28
 80034a2:	2100      	movs	r1, #0
 80034a4:	4618      	mov	r0, r3
 80034a6:	f001 fce3 	bl	8004e70 <RCCEx_PLL3_Config>
 80034aa:	4603      	mov	r3, r0
 80034ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034b0:	e004      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80034b8:	e000      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80034ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d10a      	bne.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034c4:	4b7b      	ldr	r3, [pc, #492]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034c8:	f023 0107 	bic.w	r1, r3, #7
 80034cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034d2:	4a78      	ldr	r2, [pc, #480]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034d4:	430b      	orrs	r3, r1
 80034d6:	6513      	str	r3, [r2, #80]	@ 0x50
 80034d8:	e003      	b.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80034e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ea:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80034ee:	f04f 0b00 	mov.w	fp, #0
 80034f2:	ea5a 030b 	orrs.w	r3, sl, fp
 80034f6:	d04c      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80034f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003502:	d030      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003504:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003508:	d829      	bhi.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800350a:	2bc0      	cmp	r3, #192	@ 0xc0
 800350c:	d02d      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800350e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003510:	d825      	bhi.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003512:	2b80      	cmp	r3, #128	@ 0x80
 8003514:	d018      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003516:	2b80      	cmp	r3, #128	@ 0x80
 8003518:	d821      	bhi.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800351a:	2b00      	cmp	r3, #0
 800351c:	d002      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800351e:	2b40      	cmp	r3, #64	@ 0x40
 8003520:	d007      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003522:	e01c      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003524:	4b63      	ldr	r3, [pc, #396]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003528:	4a62      	ldr	r2, [pc, #392]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800352a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800352e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003530:	e01c      	b.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003532:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003536:	3308      	adds	r3, #8
 8003538:	2100      	movs	r1, #0
 800353a:	4618      	mov	r0, r3
 800353c:	f001 fbe6 	bl	8004d0c <RCCEx_PLL2_Config>
 8003540:	4603      	mov	r3, r0
 8003542:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003546:	e011      	b.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003548:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800354c:	3328      	adds	r3, #40	@ 0x28
 800354e:	2100      	movs	r1, #0
 8003550:	4618      	mov	r0, r3
 8003552:	f001 fc8d 	bl	8004e70 <RCCEx_PLL3_Config>
 8003556:	4603      	mov	r3, r0
 8003558:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800355c:	e006      	b.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003564:	e002      	b.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003566:	bf00      	nop
 8003568:	e000      	b.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800356a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800356c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003570:	2b00      	cmp	r3, #0
 8003572:	d10a      	bne.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003574:	4b4f      	ldr	r3, [pc, #316]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003576:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003578:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800357c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003580:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003582:	4a4c      	ldr	r2, [pc, #304]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003584:	430b      	orrs	r3, r1
 8003586:	6513      	str	r3, [r2, #80]	@ 0x50
 8003588:	e003      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800358a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800358e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003592:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800359a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800359e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80035a2:	2300      	movs	r3, #0
 80035a4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80035a8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80035ac:	460b      	mov	r3, r1
 80035ae:	4313      	orrs	r3, r2
 80035b0:	d053      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80035b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80035ba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80035be:	d035      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80035c0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80035c4:	d82e      	bhi.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80035c6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80035ca:	d031      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80035cc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80035d0:	d828      	bhi.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80035d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035d6:	d01a      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x292>
 80035d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035dc:	d822      	bhi.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d003      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80035e2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80035e6:	d007      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80035e8:	e01c      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035ea:	4b32      	ldr	r3, [pc, #200]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ee:	4a31      	ldr	r2, [pc, #196]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035f6:	e01c      	b.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035fc:	3308      	adds	r3, #8
 80035fe:	2100      	movs	r1, #0
 8003600:	4618      	mov	r0, r3
 8003602:	f001 fb83 	bl	8004d0c <RCCEx_PLL2_Config>
 8003606:	4603      	mov	r3, r0
 8003608:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800360c:	e011      	b.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800360e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003612:	3328      	adds	r3, #40	@ 0x28
 8003614:	2100      	movs	r1, #0
 8003616:	4618      	mov	r0, r3
 8003618:	f001 fc2a 	bl	8004e70 <RCCEx_PLL3_Config>
 800361c:	4603      	mov	r3, r0
 800361e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003622:	e006      	b.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800362a:	e002      	b.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800362c:	bf00      	nop
 800362e:	e000      	b.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003630:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003632:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003636:	2b00      	cmp	r3, #0
 8003638:	d10b      	bne.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800363a:	4b1e      	ldr	r3, [pc, #120]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800363c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800363e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003642:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003646:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800364a:	4a1a      	ldr	r2, [pc, #104]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800364c:	430b      	orrs	r3, r1
 800364e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003650:	e003      	b.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003652:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003656:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800365a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800365e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003662:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003666:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800366a:	2300      	movs	r3, #0
 800366c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003670:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003674:	460b      	mov	r3, r1
 8003676:	4313      	orrs	r3, r2
 8003678:	d056      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800367a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800367e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003682:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003686:	d038      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003688:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800368c:	d831      	bhi.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800368e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003692:	d034      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003694:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003698:	d82b      	bhi.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800369a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800369e:	d01d      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x360>
 80036a0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80036a4:	d825      	bhi.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d006      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80036aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80036ae:	d00a      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80036b0:	e01f      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80036b2:	bf00      	nop
 80036b4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036b8:	4ba2      	ldr	r3, [pc, #648]	@ (8003944 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036bc:	4aa1      	ldr	r2, [pc, #644]	@ (8003944 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036c4:	e01c      	b.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ca:	3308      	adds	r3, #8
 80036cc:	2100      	movs	r1, #0
 80036ce:	4618      	mov	r0, r3
 80036d0:	f001 fb1c 	bl	8004d0c <RCCEx_PLL2_Config>
 80036d4:	4603      	mov	r3, r0
 80036d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80036da:	e011      	b.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036e0:	3328      	adds	r3, #40	@ 0x28
 80036e2:	2100      	movs	r1, #0
 80036e4:	4618      	mov	r0, r3
 80036e6:	f001 fbc3 	bl	8004e70 <RCCEx_PLL3_Config>
 80036ea:	4603      	mov	r3, r0
 80036ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036f0:	e006      	b.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80036f8:	e002      	b.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80036fa:	bf00      	nop
 80036fc:	e000      	b.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80036fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003700:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003704:	2b00      	cmp	r3, #0
 8003706:	d10b      	bne.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003708:	4b8e      	ldr	r3, [pc, #568]	@ (8003944 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800370a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800370c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003710:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003714:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003718:	4a8a      	ldr	r2, [pc, #552]	@ (8003944 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800371a:	430b      	orrs	r3, r1
 800371c:	6593      	str	r3, [r2, #88]	@ 0x58
 800371e:	e003      	b.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003720:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003724:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003728:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800372c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003730:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003734:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003738:	2300      	movs	r3, #0
 800373a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800373e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003742:	460b      	mov	r3, r1
 8003744:	4313      	orrs	r3, r2
 8003746:	d03a      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003748:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800374c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800374e:	2b30      	cmp	r3, #48	@ 0x30
 8003750:	d01f      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003752:	2b30      	cmp	r3, #48	@ 0x30
 8003754:	d819      	bhi.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003756:	2b20      	cmp	r3, #32
 8003758:	d00c      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800375a:	2b20      	cmp	r3, #32
 800375c:	d815      	bhi.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800375e:	2b00      	cmp	r3, #0
 8003760:	d019      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003762:	2b10      	cmp	r3, #16
 8003764:	d111      	bne.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003766:	4b77      	ldr	r3, [pc, #476]	@ (8003944 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800376a:	4a76      	ldr	r2, [pc, #472]	@ (8003944 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800376c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003770:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003772:	e011      	b.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003774:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003778:	3308      	adds	r3, #8
 800377a:	2102      	movs	r1, #2
 800377c:	4618      	mov	r0, r3
 800377e:	f001 fac5 	bl	8004d0c <RCCEx_PLL2_Config>
 8003782:	4603      	mov	r3, r0
 8003784:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003788:	e006      	b.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003790:	e002      	b.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003792:	bf00      	nop
 8003794:	e000      	b.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003796:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003798:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800379c:	2b00      	cmp	r3, #0
 800379e:	d10a      	bne.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80037a0:	4b68      	ldr	r3, [pc, #416]	@ (8003944 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037a4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80037a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037ae:	4a65      	ldr	r2, [pc, #404]	@ (8003944 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037b0:	430b      	orrs	r3, r1
 80037b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80037b4:	e003      	b.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80037be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80037ca:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80037ce:	2300      	movs	r3, #0
 80037d0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80037d4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80037d8:	460b      	mov	r3, r1
 80037da:	4313      	orrs	r3, r2
 80037dc:	d051      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80037de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80037e8:	d035      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80037ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80037ee:	d82e      	bhi.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80037f0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80037f4:	d031      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80037f6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80037fa:	d828      	bhi.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80037fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003800:	d01a      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003802:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003806:	d822      	bhi.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003808:	2b00      	cmp	r3, #0
 800380a:	d003      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800380c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003810:	d007      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003812:	e01c      	b.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003814:	4b4b      	ldr	r3, [pc, #300]	@ (8003944 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003818:	4a4a      	ldr	r2, [pc, #296]	@ (8003944 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800381a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800381e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003820:	e01c      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003826:	3308      	adds	r3, #8
 8003828:	2100      	movs	r1, #0
 800382a:	4618      	mov	r0, r3
 800382c:	f001 fa6e 	bl	8004d0c <RCCEx_PLL2_Config>
 8003830:	4603      	mov	r3, r0
 8003832:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003836:	e011      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003838:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800383c:	3328      	adds	r3, #40	@ 0x28
 800383e:	2100      	movs	r1, #0
 8003840:	4618      	mov	r0, r3
 8003842:	f001 fb15 	bl	8004e70 <RCCEx_PLL3_Config>
 8003846:	4603      	mov	r3, r0
 8003848:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800384c:	e006      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003854:	e002      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003856:	bf00      	nop
 8003858:	e000      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800385a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800385c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003860:	2b00      	cmp	r3, #0
 8003862:	d10a      	bne.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003864:	4b37      	ldr	r3, [pc, #220]	@ (8003944 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003866:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003868:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800386c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003870:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003872:	4a34      	ldr	r2, [pc, #208]	@ (8003944 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003874:	430b      	orrs	r3, r1
 8003876:	6513      	str	r3, [r2, #80]	@ 0x50
 8003878:	e003      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800387a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800387e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003882:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800388a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800388e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003892:	2300      	movs	r3, #0
 8003894:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003898:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800389c:	460b      	mov	r3, r1
 800389e:	4313      	orrs	r3, r2
 80038a0:	d056      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80038a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038ac:	d033      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80038ae:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038b2:	d82c      	bhi.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80038b4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80038b8:	d02f      	beq.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80038ba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80038be:	d826      	bhi.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80038c0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80038c4:	d02b      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80038c6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80038ca:	d820      	bhi.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80038cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80038d0:	d012      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80038d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80038d6:	d81a      	bhi.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d022      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80038dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038e0:	d115      	bne.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80038e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038e6:	3308      	adds	r3, #8
 80038e8:	2101      	movs	r1, #1
 80038ea:	4618      	mov	r0, r3
 80038ec:	f001 fa0e 	bl	8004d0c <RCCEx_PLL2_Config>
 80038f0:	4603      	mov	r3, r0
 80038f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80038f6:	e015      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80038f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038fc:	3328      	adds	r3, #40	@ 0x28
 80038fe:	2101      	movs	r1, #1
 8003900:	4618      	mov	r0, r3
 8003902:	f001 fab5 	bl	8004e70 <RCCEx_PLL3_Config>
 8003906:	4603      	mov	r3, r0
 8003908:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800390c:	e00a      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003914:	e006      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003916:	bf00      	nop
 8003918:	e004      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800391a:	bf00      	nop
 800391c:	e002      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800391e:	bf00      	nop
 8003920:	e000      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003922:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003924:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003928:	2b00      	cmp	r3, #0
 800392a:	d10d      	bne.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800392c:	4b05      	ldr	r3, [pc, #20]	@ (8003944 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800392e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003930:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003934:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003938:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800393a:	4a02      	ldr	r2, [pc, #8]	@ (8003944 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800393c:	430b      	orrs	r3, r1
 800393e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003940:	e006      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003942:	bf00      	nop
 8003944:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003948:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800394c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003950:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003958:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800395c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003960:	2300      	movs	r3, #0
 8003962:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003966:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800396a:	460b      	mov	r3, r1
 800396c:	4313      	orrs	r3, r2
 800396e:	d055      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003970:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003974:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003978:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800397c:	d033      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800397e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003982:	d82c      	bhi.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003984:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003988:	d02f      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800398a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800398e:	d826      	bhi.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003990:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003994:	d02b      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003996:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800399a:	d820      	bhi.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x662>
 800399c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039a0:	d012      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80039a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039a6:	d81a      	bhi.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x662>
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d022      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80039ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80039b0:	d115      	bne.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80039b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039b6:	3308      	adds	r3, #8
 80039b8:	2101      	movs	r1, #1
 80039ba:	4618      	mov	r0, r3
 80039bc:	f001 f9a6 	bl	8004d0c <RCCEx_PLL2_Config>
 80039c0:	4603      	mov	r3, r0
 80039c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80039c6:	e015      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80039c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039cc:	3328      	adds	r3, #40	@ 0x28
 80039ce:	2101      	movs	r1, #1
 80039d0:	4618      	mov	r0, r3
 80039d2:	f001 fa4d 	bl	8004e70 <RCCEx_PLL3_Config>
 80039d6:	4603      	mov	r3, r0
 80039d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80039dc:	e00a      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80039e4:	e006      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80039e6:	bf00      	nop
 80039e8:	e004      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80039ea:	bf00      	nop
 80039ec:	e002      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80039ee:	bf00      	nop
 80039f0:	e000      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80039f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d10b      	bne.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80039fc:	4ba3      	ldr	r3, [pc, #652]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a00:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003a04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a08:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003a0c:	4a9f      	ldr	r2, [pc, #636]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a0e:	430b      	orrs	r3, r1
 8003a10:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a12:	e003      	b.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a24:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003a28:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003a32:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003a36:	460b      	mov	r3, r1
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	d037      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a46:	d00e      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003a48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a4c:	d816      	bhi.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d018      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003a52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003a56:	d111      	bne.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a58:	4b8c      	ldr	r3, [pc, #560]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a5c:	4a8b      	ldr	r2, [pc, #556]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003a64:	e00f      	b.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a6a:	3308      	adds	r3, #8
 8003a6c:	2101      	movs	r1, #1
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f001 f94c 	bl	8004d0c <RCCEx_PLL2_Config>
 8003a74:	4603      	mov	r3, r0
 8003a76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003a7a:	e004      	b.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a82:	e000      	b.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003a84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d10a      	bne.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003a8e:	4b7f      	ldr	r3, [pc, #508]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a92:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a9c:	4a7b      	ldr	r2, [pc, #492]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a9e:	430b      	orrs	r3, r1
 8003aa0:	6513      	str	r3, [r2, #80]	@ 0x50
 8003aa2:	e003      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aa4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003aa8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003ab8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003abc:	2300      	movs	r3, #0
 8003abe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003ac2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003ac6:	460b      	mov	r3, r1
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	d039      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003acc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ad0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ad2:	2b03      	cmp	r3, #3
 8003ad4:	d81c      	bhi.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003ad6:	a201      	add	r2, pc, #4	@ (adr r2, 8003adc <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003adc:	08003b19 	.word	0x08003b19
 8003ae0:	08003aed 	.word	0x08003aed
 8003ae4:	08003afb 	.word	0x08003afb
 8003ae8:	08003b19 	.word	0x08003b19
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003aec:	4b67      	ldr	r3, [pc, #412]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003af0:	4a66      	ldr	r2, [pc, #408]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003af2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003af6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003af8:	e00f      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003afe:	3308      	adds	r3, #8
 8003b00:	2102      	movs	r1, #2
 8003b02:	4618      	mov	r0, r3
 8003b04:	f001 f902 	bl	8004d0c <RCCEx_PLL2_Config>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003b0e:	e004      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b16:	e000      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003b18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d10a      	bne.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003b22:	4b5a      	ldr	r3, [pc, #360]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b26:	f023 0103 	bic.w	r1, r3, #3
 8003b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b30:	4a56      	ldr	r2, [pc, #344]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b32:	430b      	orrs	r3, r1
 8003b34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b36:	e003      	b.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b48:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003b4c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b50:	2300      	movs	r3, #0
 8003b52:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003b56:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	f000 809f 	beq.w	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b62:	4b4b      	ldr	r3, [pc, #300]	@ (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a4a      	ldr	r2, [pc, #296]	@ (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003b68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b6c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b6e:	f7fd fad9 	bl	8001124 <HAL_GetTick>
 8003b72:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b76:	e00b      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b78:	f7fd fad4 	bl	8001124 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	2b64      	cmp	r3, #100	@ 0x64
 8003b86:	d903      	bls.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b8e:	e005      	b.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b90:	4b3f      	ldr	r3, [pc, #252]	@ (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d0ed      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003b9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d179      	bne.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003ba4:	4b39      	ldr	r3, [pc, #228]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ba6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003bb0:	4053      	eors	r3, r2
 8003bb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d015      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003bba:	4b34      	ldr	r3, [pc, #208]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bc2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003bc6:	4b31      	ldr	r3, [pc, #196]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bca:	4a30      	ldr	r2, [pc, #192]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bd0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003bd2:	4b2e      	ldr	r3, [pc, #184]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bd6:	4a2d      	ldr	r2, [pc, #180]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bd8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bdc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003bde:	4a2b      	ldr	r2, [pc, #172]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003be0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003be4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003be6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003bee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bf2:	d118      	bne.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf4:	f7fd fa96 	bl	8001124 <HAL_GetTick>
 8003bf8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bfc:	e00d      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bfe:	f7fd fa91 	bl	8001124 <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003c08:	1ad2      	subs	r2, r2, r3
 8003c0a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d903      	bls.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003c18:	e005      	b.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c1a:	4b1c      	ldr	r3, [pc, #112]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c1e:	f003 0302 	and.w	r3, r3, #2
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d0eb      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003c26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d129      	bne.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c32:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003c36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c3a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c3e:	d10e      	bne.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003c40:	4b12      	ldr	r3, [pc, #72]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c42:	691b      	ldr	r3, [r3, #16]
 8003c44:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003c48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c4c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003c50:	091a      	lsrs	r2, r3, #4
 8003c52:	4b10      	ldr	r3, [pc, #64]	@ (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003c54:	4013      	ands	r3, r2
 8003c56:	4a0d      	ldr	r2, [pc, #52]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c58:	430b      	orrs	r3, r1
 8003c5a:	6113      	str	r3, [r2, #16]
 8003c5c:	e005      	b.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003c5e:	4b0b      	ldr	r3, [pc, #44]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	4a0a      	ldr	r2, [pc, #40]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c64:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003c68:	6113      	str	r3, [r2, #16]
 8003c6a:	4b08      	ldr	r3, [pc, #32]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c6c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c72:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003c76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c7a:	4a04      	ldr	r2, [pc, #16]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c7c:	430b      	orrs	r3, r1
 8003c7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c80:	e00e      	b.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003c8a:	e009      	b.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003c8c:	58024400 	.word	0x58024400
 8003c90:	58024800 	.word	0x58024800
 8003c94:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c9c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca8:	f002 0301 	and.w	r3, r2, #1
 8003cac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003cb6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003cba:	460b      	mov	r3, r1
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	f000 8089 	beq.w	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cc6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003cc8:	2b28      	cmp	r3, #40	@ 0x28
 8003cca:	d86b      	bhi.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003ccc:	a201      	add	r2, pc, #4	@ (adr r2, 8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd2:	bf00      	nop
 8003cd4:	08003dad 	.word	0x08003dad
 8003cd8:	08003da5 	.word	0x08003da5
 8003cdc:	08003da5 	.word	0x08003da5
 8003ce0:	08003da5 	.word	0x08003da5
 8003ce4:	08003da5 	.word	0x08003da5
 8003ce8:	08003da5 	.word	0x08003da5
 8003cec:	08003da5 	.word	0x08003da5
 8003cf0:	08003da5 	.word	0x08003da5
 8003cf4:	08003d79 	.word	0x08003d79
 8003cf8:	08003da5 	.word	0x08003da5
 8003cfc:	08003da5 	.word	0x08003da5
 8003d00:	08003da5 	.word	0x08003da5
 8003d04:	08003da5 	.word	0x08003da5
 8003d08:	08003da5 	.word	0x08003da5
 8003d0c:	08003da5 	.word	0x08003da5
 8003d10:	08003da5 	.word	0x08003da5
 8003d14:	08003d8f 	.word	0x08003d8f
 8003d18:	08003da5 	.word	0x08003da5
 8003d1c:	08003da5 	.word	0x08003da5
 8003d20:	08003da5 	.word	0x08003da5
 8003d24:	08003da5 	.word	0x08003da5
 8003d28:	08003da5 	.word	0x08003da5
 8003d2c:	08003da5 	.word	0x08003da5
 8003d30:	08003da5 	.word	0x08003da5
 8003d34:	08003dad 	.word	0x08003dad
 8003d38:	08003da5 	.word	0x08003da5
 8003d3c:	08003da5 	.word	0x08003da5
 8003d40:	08003da5 	.word	0x08003da5
 8003d44:	08003da5 	.word	0x08003da5
 8003d48:	08003da5 	.word	0x08003da5
 8003d4c:	08003da5 	.word	0x08003da5
 8003d50:	08003da5 	.word	0x08003da5
 8003d54:	08003dad 	.word	0x08003dad
 8003d58:	08003da5 	.word	0x08003da5
 8003d5c:	08003da5 	.word	0x08003da5
 8003d60:	08003da5 	.word	0x08003da5
 8003d64:	08003da5 	.word	0x08003da5
 8003d68:	08003da5 	.word	0x08003da5
 8003d6c:	08003da5 	.word	0x08003da5
 8003d70:	08003da5 	.word	0x08003da5
 8003d74:	08003dad 	.word	0x08003dad
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d7c:	3308      	adds	r3, #8
 8003d7e:	2101      	movs	r1, #1
 8003d80:	4618      	mov	r0, r3
 8003d82:	f000 ffc3 	bl	8004d0c <RCCEx_PLL2_Config>
 8003d86:	4603      	mov	r3, r0
 8003d88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003d8c:	e00f      	b.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d92:	3328      	adds	r3, #40	@ 0x28
 8003d94:	2101      	movs	r1, #1
 8003d96:	4618      	mov	r0, r3
 8003d98:	f001 f86a 	bl	8004e70 <RCCEx_PLL3_Config>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003da2:	e004      	b.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003daa:	e000      	b.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003dac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d10a      	bne.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003db6:	4bbf      	ldr	r3, [pc, #764]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003db8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dba:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dc2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003dc4:	4abb      	ldr	r2, [pc, #748]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003dc6:	430b      	orrs	r3, r1
 8003dc8:	6553      	str	r3, [r2, #84]	@ 0x54
 8003dca:	e003      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dcc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dd0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ddc:	f002 0302 	and.w	r3, r2, #2
 8003de0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003de4:	2300      	movs	r3, #0
 8003de6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003dea:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003dee:	460b      	mov	r3, r1
 8003df0:	4313      	orrs	r3, r2
 8003df2:	d041      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003df8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003dfa:	2b05      	cmp	r3, #5
 8003dfc:	d824      	bhi.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003dfe:	a201      	add	r2, pc, #4	@ (adr r2, 8003e04 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e04:	08003e51 	.word	0x08003e51
 8003e08:	08003e1d 	.word	0x08003e1d
 8003e0c:	08003e33 	.word	0x08003e33
 8003e10:	08003e51 	.word	0x08003e51
 8003e14:	08003e51 	.word	0x08003e51
 8003e18:	08003e51 	.word	0x08003e51
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e20:	3308      	adds	r3, #8
 8003e22:	2101      	movs	r1, #1
 8003e24:	4618      	mov	r0, r3
 8003e26:	f000 ff71 	bl	8004d0c <RCCEx_PLL2_Config>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003e30:	e00f      	b.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e36:	3328      	adds	r3, #40	@ 0x28
 8003e38:	2101      	movs	r1, #1
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f001 f818 	bl	8004e70 <RCCEx_PLL3_Config>
 8003e40:	4603      	mov	r3, r0
 8003e42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003e46:	e004      	b.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e4e:	e000      	b.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003e50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d10a      	bne.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003e5a:	4b96      	ldr	r3, [pc, #600]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e5e:	f023 0107 	bic.w	r1, r3, #7
 8003e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e66:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e68:	4a92      	ldr	r2, [pc, #584]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e6a:	430b      	orrs	r3, r1
 8003e6c:	6553      	str	r3, [r2, #84]	@ 0x54
 8003e6e:	e003      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e80:	f002 0304 	and.w	r3, r2, #4
 8003e84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003e88:	2300      	movs	r3, #0
 8003e8a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e8e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003e92:	460b      	mov	r3, r1
 8003e94:	4313      	orrs	r3, r2
 8003e96:	d044      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ea0:	2b05      	cmp	r3, #5
 8003ea2:	d825      	bhi.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003ea4:	a201      	add	r2, pc, #4	@ (adr r2, 8003eac <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eaa:	bf00      	nop
 8003eac:	08003ef9 	.word	0x08003ef9
 8003eb0:	08003ec5 	.word	0x08003ec5
 8003eb4:	08003edb 	.word	0x08003edb
 8003eb8:	08003ef9 	.word	0x08003ef9
 8003ebc:	08003ef9 	.word	0x08003ef9
 8003ec0:	08003ef9 	.word	0x08003ef9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ec8:	3308      	adds	r3, #8
 8003eca:	2101      	movs	r1, #1
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f000 ff1d 	bl	8004d0c <RCCEx_PLL2_Config>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003ed8:	e00f      	b.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ede:	3328      	adds	r3, #40	@ 0x28
 8003ee0:	2101      	movs	r1, #1
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f000 ffc4 	bl	8004e70 <RCCEx_PLL3_Config>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003eee:	e004      	b.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ef6:	e000      	b.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003ef8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003efa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d10b      	bne.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f02:	4b6c      	ldr	r3, [pc, #432]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f06:	f023 0107 	bic.w	r1, r3, #7
 8003f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f12:	4a68      	ldr	r2, [pc, #416]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f14:	430b      	orrs	r3, r1
 8003f16:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f18:	e003      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f2a:	f002 0320 	and.w	r3, r2, #32
 8003f2e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003f32:	2300      	movs	r3, #0
 8003f34:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003f38:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	d055      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f4e:	d033      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003f50:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f54:	d82c      	bhi.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003f56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f5a:	d02f      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f60:	d826      	bhi.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003f62:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003f66:	d02b      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003f68:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003f6c:	d820      	bhi.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003f6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f72:	d012      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003f74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f78:	d81a      	bhi.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d022      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003f7e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f82:	d115      	bne.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f88:	3308      	adds	r3, #8
 8003f8a:	2100      	movs	r1, #0
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f000 febd 	bl	8004d0c <RCCEx_PLL2_Config>
 8003f92:	4603      	mov	r3, r0
 8003f94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003f98:	e015      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f9e:	3328      	adds	r3, #40	@ 0x28
 8003fa0:	2102      	movs	r1, #2
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f000 ff64 	bl	8004e70 <RCCEx_PLL3_Config>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003fae:	e00a      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003fb6:	e006      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003fb8:	bf00      	nop
 8003fba:	e004      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003fbc:	bf00      	nop
 8003fbe:	e002      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003fc0:	bf00      	nop
 8003fc2:	e000      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003fc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d10b      	bne.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fce:	4b39      	ldr	r3, [pc, #228]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fd2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fde:	4a35      	ldr	r2, [pc, #212]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fe0:	430b      	orrs	r3, r1
 8003fe2:	6553      	str	r3, [r2, #84]	@ 0x54
 8003fe4:	e003      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fe6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003ffa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003ffe:	2300      	movs	r3, #0
 8004000:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004004:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004008:	460b      	mov	r3, r1
 800400a:	4313      	orrs	r3, r2
 800400c:	d058      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800400e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004012:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004016:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800401a:	d033      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800401c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004020:	d82c      	bhi.n	800407c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004022:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004026:	d02f      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004028:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800402c:	d826      	bhi.n	800407c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800402e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004032:	d02b      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004034:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004038:	d820      	bhi.n	800407c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800403a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800403e:	d012      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004040:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004044:	d81a      	bhi.n	800407c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004046:	2b00      	cmp	r3, #0
 8004048:	d022      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800404a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800404e:	d115      	bne.n	800407c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004050:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004054:	3308      	adds	r3, #8
 8004056:	2100      	movs	r1, #0
 8004058:	4618      	mov	r0, r3
 800405a:	f000 fe57 	bl	8004d0c <RCCEx_PLL2_Config>
 800405e:	4603      	mov	r3, r0
 8004060:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004064:	e015      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004066:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800406a:	3328      	adds	r3, #40	@ 0x28
 800406c:	2102      	movs	r1, #2
 800406e:	4618      	mov	r0, r3
 8004070:	f000 fefe 	bl	8004e70 <RCCEx_PLL3_Config>
 8004074:	4603      	mov	r3, r0
 8004076:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800407a:	e00a      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004082:	e006      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004084:	bf00      	nop
 8004086:	e004      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004088:	bf00      	nop
 800408a:	e002      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800408c:	bf00      	nop
 800408e:	e000      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004090:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004092:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004096:	2b00      	cmp	r3, #0
 8004098:	d10e      	bne.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800409a:	4b06      	ldr	r3, [pc, #24]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800409c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800409e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80040a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80040aa:	4a02      	ldr	r2, [pc, #8]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040ac:	430b      	orrs	r3, r1
 80040ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80040b0:	e006      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80040b2:	bf00      	nop
 80040b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80040c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80040cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80040d0:	2300      	movs	r3, #0
 80040d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80040d6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80040da:	460b      	mov	r3, r1
 80040dc:	4313      	orrs	r3, r2
 80040de:	d055      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80040e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040e4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80040e8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80040ec:	d033      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80040ee:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80040f2:	d82c      	bhi.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80040f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040f8:	d02f      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80040fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040fe:	d826      	bhi.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004100:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004104:	d02b      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004106:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800410a:	d820      	bhi.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800410c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004110:	d012      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004112:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004116:	d81a      	bhi.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004118:	2b00      	cmp	r3, #0
 800411a:	d022      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800411c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004120:	d115      	bne.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004122:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004126:	3308      	adds	r3, #8
 8004128:	2100      	movs	r1, #0
 800412a:	4618      	mov	r0, r3
 800412c:	f000 fdee 	bl	8004d0c <RCCEx_PLL2_Config>
 8004130:	4603      	mov	r3, r0
 8004132:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004136:	e015      	b.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004138:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800413c:	3328      	adds	r3, #40	@ 0x28
 800413e:	2102      	movs	r1, #2
 8004140:	4618      	mov	r0, r3
 8004142:	f000 fe95 	bl	8004e70 <RCCEx_PLL3_Config>
 8004146:	4603      	mov	r3, r0
 8004148:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800414c:	e00a      	b.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004154:	e006      	b.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004156:	bf00      	nop
 8004158:	e004      	b.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800415a:	bf00      	nop
 800415c:	e002      	b.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800415e:	bf00      	nop
 8004160:	e000      	b.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004162:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004164:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004168:	2b00      	cmp	r3, #0
 800416a:	d10b      	bne.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800416c:	4ba1      	ldr	r3, [pc, #644]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800416e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004170:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004174:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004178:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800417c:	4a9d      	ldr	r2, [pc, #628]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800417e:	430b      	orrs	r3, r1
 8004180:	6593      	str	r3, [r2, #88]	@ 0x58
 8004182:	e003      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004184:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004188:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800418c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004194:	f002 0308 	and.w	r3, r2, #8
 8004198:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800419c:	2300      	movs	r3, #0
 800419e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80041a2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80041a6:	460b      	mov	r3, r1
 80041a8:	4313      	orrs	r3, r2
 80041aa:	d01e      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80041ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041b8:	d10c      	bne.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80041ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041be:	3328      	adds	r3, #40	@ 0x28
 80041c0:	2102      	movs	r1, #2
 80041c2:	4618      	mov	r0, r3
 80041c4:	f000 fe54 	bl	8004e70 <RCCEx_PLL3_Config>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d002      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80041d4:	4b87      	ldr	r3, [pc, #540]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041d8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80041dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041e4:	4a83      	ldr	r2, [pc, #524]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041e6:	430b      	orrs	r3, r1
 80041e8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80041ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f2:	f002 0310 	and.w	r3, r2, #16
 80041f6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80041fa:	2300      	movs	r3, #0
 80041fc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004200:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004204:	460b      	mov	r3, r1
 8004206:	4313      	orrs	r3, r2
 8004208:	d01e      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800420a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800420e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004212:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004216:	d10c      	bne.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004218:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800421c:	3328      	adds	r3, #40	@ 0x28
 800421e:	2102      	movs	r1, #2
 8004220:	4618      	mov	r0, r3
 8004222:	f000 fe25 	bl	8004e70 <RCCEx_PLL3_Config>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d002      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004232:	4b70      	ldr	r3, [pc, #448]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004234:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004236:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800423a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800423e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004242:	4a6c      	ldr	r2, [pc, #432]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004244:	430b      	orrs	r3, r1
 8004246:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004248:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800424c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004250:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004254:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004258:	2300      	movs	r3, #0
 800425a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800425e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004262:	460b      	mov	r3, r1
 8004264:	4313      	orrs	r3, r2
 8004266:	d03e      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004268:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800426c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004270:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004274:	d022      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004276:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800427a:	d81b      	bhi.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800427c:	2b00      	cmp	r3, #0
 800427e:	d003      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004280:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004284:	d00b      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004286:	e015      	b.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004288:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800428c:	3308      	adds	r3, #8
 800428e:	2100      	movs	r1, #0
 8004290:	4618      	mov	r0, r3
 8004292:	f000 fd3b 	bl	8004d0c <RCCEx_PLL2_Config>
 8004296:	4603      	mov	r3, r0
 8004298:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800429c:	e00f      	b.n	80042be <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800429e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042a2:	3328      	adds	r3, #40	@ 0x28
 80042a4:	2102      	movs	r1, #2
 80042a6:	4618      	mov	r0, r3
 80042a8:	f000 fde2 	bl	8004e70 <RCCEx_PLL3_Config>
 80042ac:	4603      	mov	r3, r0
 80042ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80042b2:	e004      	b.n	80042be <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80042ba:	e000      	b.n	80042be <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80042bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d10b      	bne.n	80042de <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042c6:	4b4b      	ldr	r3, [pc, #300]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042ca:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80042ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80042d6:	4a47      	ldr	r2, [pc, #284]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042d8:	430b      	orrs	r3, r1
 80042da:	6593      	str	r3, [r2, #88]	@ 0x58
 80042dc:	e003      	b.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80042e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ee:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80042f2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80042f4:	2300      	movs	r3, #0
 80042f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80042f8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80042fc:	460b      	mov	r3, r1
 80042fe:	4313      	orrs	r3, r2
 8004300:	d03b      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004302:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004306:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800430a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800430e:	d01f      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004310:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004314:	d818      	bhi.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004316:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800431a:	d003      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800431c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004320:	d007      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004322:	e011      	b.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004324:	4b33      	ldr	r3, [pc, #204]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004328:	4a32      	ldr	r2, [pc, #200]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800432a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800432e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004330:	e00f      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004332:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004336:	3328      	adds	r3, #40	@ 0x28
 8004338:	2101      	movs	r1, #1
 800433a:	4618      	mov	r0, r3
 800433c:	f000 fd98 	bl	8004e70 <RCCEx_PLL3_Config>
 8004340:	4603      	mov	r3, r0
 8004342:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004346:	e004      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800434e:	e000      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004350:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004352:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004356:	2b00      	cmp	r3, #0
 8004358:	d10b      	bne.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800435a:	4b26      	ldr	r3, [pc, #152]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800435c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800435e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004362:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004366:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800436a:	4a22      	ldr	r2, [pc, #136]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800436c:	430b      	orrs	r3, r1
 800436e:	6553      	str	r3, [r2, #84]	@ 0x54
 8004370:	e003      	b.n	800437a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004372:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004376:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800437a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800437e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004382:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004386:	673b      	str	r3, [r7, #112]	@ 0x70
 8004388:	2300      	movs	r3, #0
 800438a:	677b      	str	r3, [r7, #116]	@ 0x74
 800438c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004390:	460b      	mov	r3, r1
 8004392:	4313      	orrs	r3, r2
 8004394:	d034      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004396:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800439a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800439c:	2b00      	cmp	r3, #0
 800439e:	d003      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80043a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043a4:	d007      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80043a6:	e011      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043a8:	4b12      	ldr	r3, [pc, #72]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ac:	4a11      	ldr	r2, [pc, #68]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80043b4:	e00e      	b.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80043b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ba:	3308      	adds	r3, #8
 80043bc:	2102      	movs	r1, #2
 80043be:	4618      	mov	r0, r3
 80043c0:	f000 fca4 	bl	8004d0c <RCCEx_PLL2_Config>
 80043c4:	4603      	mov	r3, r0
 80043c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80043ca:	e003      	b.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80043d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d10d      	bne.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80043dc:	4b05      	ldr	r3, [pc, #20]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043e0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80043e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043ea:	4a02      	ldr	r2, [pc, #8]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043ec:	430b      	orrs	r3, r1
 80043ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80043f0:	e006      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80043f2:	bf00      	nop
 80043f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004400:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004408:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800440c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800440e:	2300      	movs	r3, #0
 8004410:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004412:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004416:	460b      	mov	r3, r1
 8004418:	4313      	orrs	r3, r2
 800441a:	d00c      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800441c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004420:	3328      	adds	r3, #40	@ 0x28
 8004422:	2102      	movs	r1, #2
 8004424:	4618      	mov	r0, r3
 8004426:	f000 fd23 	bl	8004e70 <RCCEx_PLL3_Config>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d002      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004436:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800443a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800443e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004442:	663b      	str	r3, [r7, #96]	@ 0x60
 8004444:	2300      	movs	r3, #0
 8004446:	667b      	str	r3, [r7, #100]	@ 0x64
 8004448:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800444c:	460b      	mov	r3, r1
 800444e:	4313      	orrs	r3, r2
 8004450:	d038      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004452:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004456:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800445a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800445e:	d018      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004460:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004464:	d811      	bhi.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004466:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800446a:	d014      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800446c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004470:	d80b      	bhi.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004472:	2b00      	cmp	r3, #0
 8004474:	d011      	beq.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004476:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800447a:	d106      	bne.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800447c:	4bc3      	ldr	r3, [pc, #780]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800447e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004480:	4ac2      	ldr	r2, [pc, #776]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004482:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004486:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004488:	e008      	b.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004490:	e004      	b.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004492:	bf00      	nop
 8004494:	e002      	b.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004496:	bf00      	nop
 8004498:	e000      	b.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800449a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800449c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d10b      	bne.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80044a4:	4bb9      	ldr	r3, [pc, #740]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044a8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80044ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044b4:	4ab5      	ldr	r2, [pc, #724]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044b6:	430b      	orrs	r3, r1
 80044b8:	6553      	str	r3, [r2, #84]	@ 0x54
 80044ba:	e003      	b.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80044c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044cc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80044d0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80044d2:	2300      	movs	r3, #0
 80044d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80044d6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80044da:	460b      	mov	r3, r1
 80044dc:	4313      	orrs	r3, r2
 80044de:	d009      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80044e0:	4baa      	ldr	r3, [pc, #680]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044e4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80044e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044ee:	4aa7      	ldr	r2, [pc, #668]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044f0:	430b      	orrs	r3, r1
 80044f2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80044f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044fc:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004500:	653b      	str	r3, [r7, #80]	@ 0x50
 8004502:	2300      	movs	r3, #0
 8004504:	657b      	str	r3, [r7, #84]	@ 0x54
 8004506:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800450a:	460b      	mov	r3, r1
 800450c:	4313      	orrs	r3, r2
 800450e:	d00a      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004510:	4b9e      	ldr	r3, [pc, #632]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004512:	691b      	ldr	r3, [r3, #16]
 8004514:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004518:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800451c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004520:	4a9a      	ldr	r2, [pc, #616]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004522:	430b      	orrs	r3, r1
 8004524:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004526:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800452a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800452e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004532:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004534:	2300      	movs	r3, #0
 8004536:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004538:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800453c:	460b      	mov	r3, r1
 800453e:	4313      	orrs	r3, r2
 8004540:	d009      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004542:	4b92      	ldr	r3, [pc, #584]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004544:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004546:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800454a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800454e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004550:	4a8e      	ldr	r2, [pc, #568]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004552:	430b      	orrs	r3, r1
 8004554:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004556:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800455a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800455e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004562:	643b      	str	r3, [r7, #64]	@ 0x40
 8004564:	2300      	movs	r3, #0
 8004566:	647b      	str	r3, [r7, #68]	@ 0x44
 8004568:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800456c:	460b      	mov	r3, r1
 800456e:	4313      	orrs	r3, r2
 8004570:	d00e      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004572:	4b86      	ldr	r3, [pc, #536]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	4a85      	ldr	r2, [pc, #532]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004578:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800457c:	6113      	str	r3, [r2, #16]
 800457e:	4b83      	ldr	r3, [pc, #524]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004580:	6919      	ldr	r1, [r3, #16]
 8004582:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004586:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800458a:	4a80      	ldr	r2, [pc, #512]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800458c:	430b      	orrs	r3, r1
 800458e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004590:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004598:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800459c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800459e:	2300      	movs	r3, #0
 80045a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80045a2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80045a6:	460b      	mov	r3, r1
 80045a8:	4313      	orrs	r3, r2
 80045aa:	d009      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80045ac:	4b77      	ldr	r3, [pc, #476]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045b0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80045b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045ba:	4a74      	ldr	r2, [pc, #464]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045bc:	430b      	orrs	r3, r1
 80045be:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80045c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80045cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80045ce:	2300      	movs	r3, #0
 80045d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80045d2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80045d6:	460b      	mov	r3, r1
 80045d8:	4313      	orrs	r3, r2
 80045da:	d00a      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80045dc:	4b6b      	ldr	r3, [pc, #428]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045e0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80045e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80045ec:	4a67      	ldr	r2, [pc, #412]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045ee:	430b      	orrs	r3, r1
 80045f0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80045f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045fa:	2100      	movs	r1, #0
 80045fc:	62b9      	str	r1, [r7, #40]	@ 0x28
 80045fe:	f003 0301 	and.w	r3, r3, #1
 8004602:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004604:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004608:	460b      	mov	r3, r1
 800460a:	4313      	orrs	r3, r2
 800460c:	d011      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800460e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004612:	3308      	adds	r3, #8
 8004614:	2100      	movs	r1, #0
 8004616:	4618      	mov	r0, r3
 8004618:	f000 fb78 	bl	8004d0c <RCCEx_PLL2_Config>
 800461c:	4603      	mov	r3, r0
 800461e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004622:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004626:	2b00      	cmp	r3, #0
 8004628:	d003      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800462a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800462e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004632:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800463a:	2100      	movs	r1, #0
 800463c:	6239      	str	r1, [r7, #32]
 800463e:	f003 0302 	and.w	r3, r3, #2
 8004642:	627b      	str	r3, [r7, #36]	@ 0x24
 8004644:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004648:	460b      	mov	r3, r1
 800464a:	4313      	orrs	r3, r2
 800464c:	d011      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800464e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004652:	3308      	adds	r3, #8
 8004654:	2101      	movs	r1, #1
 8004656:	4618      	mov	r0, r3
 8004658:	f000 fb58 	bl	8004d0c <RCCEx_PLL2_Config>
 800465c:	4603      	mov	r3, r0
 800465e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004662:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004666:	2b00      	cmp	r3, #0
 8004668:	d003      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800466a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800466e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004672:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800467a:	2100      	movs	r1, #0
 800467c:	61b9      	str	r1, [r7, #24]
 800467e:	f003 0304 	and.w	r3, r3, #4
 8004682:	61fb      	str	r3, [r7, #28]
 8004684:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004688:	460b      	mov	r3, r1
 800468a:	4313      	orrs	r3, r2
 800468c:	d011      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800468e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004692:	3308      	adds	r3, #8
 8004694:	2102      	movs	r1, #2
 8004696:	4618      	mov	r0, r3
 8004698:	f000 fb38 	bl	8004d0c <RCCEx_PLL2_Config>
 800469c:	4603      	mov	r3, r0
 800469e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80046a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d003      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80046b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ba:	2100      	movs	r1, #0
 80046bc:	6139      	str	r1, [r7, #16]
 80046be:	f003 0308 	and.w	r3, r3, #8
 80046c2:	617b      	str	r3, [r7, #20]
 80046c4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80046c8:	460b      	mov	r3, r1
 80046ca:	4313      	orrs	r3, r2
 80046cc:	d011      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80046ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046d2:	3328      	adds	r3, #40	@ 0x28
 80046d4:	2100      	movs	r1, #0
 80046d6:	4618      	mov	r0, r3
 80046d8:	f000 fbca 	bl	8004e70 <RCCEx_PLL3_Config>
 80046dc:	4603      	mov	r3, r0
 80046de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80046e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d003      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80046f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046fa:	2100      	movs	r1, #0
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	f003 0310 	and.w	r3, r3, #16
 8004702:	60fb      	str	r3, [r7, #12]
 8004704:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004708:	460b      	mov	r3, r1
 800470a:	4313      	orrs	r3, r2
 800470c:	d011      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800470e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004712:	3328      	adds	r3, #40	@ 0x28
 8004714:	2101      	movs	r1, #1
 8004716:	4618      	mov	r0, r3
 8004718:	f000 fbaa 	bl	8004e70 <RCCEx_PLL3_Config>
 800471c:	4603      	mov	r3, r0
 800471e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004722:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004726:	2b00      	cmp	r3, #0
 8004728:	d003      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800472a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800472e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004732:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800473a:	2100      	movs	r1, #0
 800473c:	6039      	str	r1, [r7, #0]
 800473e:	f003 0320 	and.w	r3, r3, #32
 8004742:	607b      	str	r3, [r7, #4]
 8004744:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004748:	460b      	mov	r3, r1
 800474a:	4313      	orrs	r3, r2
 800474c:	d011      	beq.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800474e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004752:	3328      	adds	r3, #40	@ 0x28
 8004754:	2102      	movs	r1, #2
 8004756:	4618      	mov	r0, r3
 8004758:	f000 fb8a 	bl	8004e70 <RCCEx_PLL3_Config>
 800475c:	4603      	mov	r3, r0
 800475e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004762:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004766:	2b00      	cmp	r3, #0
 8004768:	d003      	beq.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800476a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800476e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004772:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004776:	2b00      	cmp	r3, #0
 8004778:	d101      	bne.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800477a:	2300      	movs	r3, #0
 800477c:	e000      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
}
 8004780:	4618      	mov	r0, r3
 8004782:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004786:	46bd      	mov	sp, r7
 8004788:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800478c:	58024400 	.word	0x58024400

08004790 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004794:	f7fe fd96 	bl	80032c4 <HAL_RCC_GetHCLKFreq>
 8004798:	4602      	mov	r2, r0
 800479a:	4b06      	ldr	r3, [pc, #24]	@ (80047b4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800479c:	6a1b      	ldr	r3, [r3, #32]
 800479e:	091b      	lsrs	r3, r3, #4
 80047a0:	f003 0307 	and.w	r3, r3, #7
 80047a4:	4904      	ldr	r1, [pc, #16]	@ (80047b8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80047a6:	5ccb      	ldrb	r3, [r1, r3]
 80047a8:	f003 031f 	and.w	r3, r3, #31
 80047ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	58024400 	.word	0x58024400
 80047b8:	08007f18 	.word	0x08007f18

080047bc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80047bc:	b480      	push	{r7}
 80047be:	b089      	sub	sp, #36	@ 0x24
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80047c4:	4ba1      	ldr	r3, [pc, #644]	@ (8004a4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047c8:	f003 0303 	and.w	r3, r3, #3
 80047cc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80047ce:	4b9f      	ldr	r3, [pc, #636]	@ (8004a4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047d2:	0b1b      	lsrs	r3, r3, #12
 80047d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80047d8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80047da:	4b9c      	ldr	r3, [pc, #624]	@ (8004a4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047de:	091b      	lsrs	r3, r3, #4
 80047e0:	f003 0301 	and.w	r3, r3, #1
 80047e4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80047e6:	4b99      	ldr	r3, [pc, #612]	@ (8004a4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047ea:	08db      	lsrs	r3, r3, #3
 80047ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80047f0:	693a      	ldr	r2, [r7, #16]
 80047f2:	fb02 f303 	mul.w	r3, r2, r3
 80047f6:	ee07 3a90 	vmov	s15, r3
 80047fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047fe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	2b00      	cmp	r3, #0
 8004806:	f000 8111 	beq.w	8004a2c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	2b02      	cmp	r3, #2
 800480e:	f000 8083 	beq.w	8004918 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	2b02      	cmp	r3, #2
 8004816:	f200 80a1 	bhi.w	800495c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d003      	beq.n	8004828 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004820:	69bb      	ldr	r3, [r7, #24]
 8004822:	2b01      	cmp	r3, #1
 8004824:	d056      	beq.n	80048d4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004826:	e099      	b.n	800495c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004828:	4b88      	ldr	r3, [pc, #544]	@ (8004a4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0320 	and.w	r3, r3, #32
 8004830:	2b00      	cmp	r3, #0
 8004832:	d02d      	beq.n	8004890 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004834:	4b85      	ldr	r3, [pc, #532]	@ (8004a4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	08db      	lsrs	r3, r3, #3
 800483a:	f003 0303 	and.w	r3, r3, #3
 800483e:	4a84      	ldr	r2, [pc, #528]	@ (8004a50 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004840:	fa22 f303 	lsr.w	r3, r2, r3
 8004844:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	ee07 3a90 	vmov	s15, r3
 800484c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	ee07 3a90 	vmov	s15, r3
 8004856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800485a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800485e:	4b7b      	ldr	r3, [pc, #492]	@ (8004a4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004860:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004866:	ee07 3a90 	vmov	s15, r3
 800486a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800486e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004872:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004a54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004876:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800487a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800487e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004882:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800488a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800488e:	e087      	b.n	80049a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	ee07 3a90 	vmov	s15, r3
 8004896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800489a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004a58 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800489e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048a2:	4b6a      	ldr	r3, [pc, #424]	@ (8004a4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048aa:	ee07 3a90 	vmov	s15, r3
 80048ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80048b6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004a54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048d2:	e065      	b.n	80049a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	ee07 3a90 	vmov	s15, r3
 80048da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048de:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004a5c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80048e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048e6:	4b59      	ldr	r3, [pc, #356]	@ (8004a4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048ee:	ee07 3a90 	vmov	s15, r3
 80048f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80048fa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004a54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004902:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004906:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800490a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800490e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004912:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004916:	e043      	b.n	80049a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	ee07 3a90 	vmov	s15, r3
 800491e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004922:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004a60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004926:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800492a:	4b48      	ldr	r3, [pc, #288]	@ (8004a4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800492c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800492e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004932:	ee07 3a90 	vmov	s15, r3
 8004936:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800493a:	ed97 6a03 	vldr	s12, [r7, #12]
 800493e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004a54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004942:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004946:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800494a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800494e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004952:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004956:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800495a:	e021      	b.n	80049a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	ee07 3a90 	vmov	s15, r3
 8004962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004966:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004a5c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800496a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800496e:	4b37      	ldr	r3, [pc, #220]	@ (8004a4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004970:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004972:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004976:	ee07 3a90 	vmov	s15, r3
 800497a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800497e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004982:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004a54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004986:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800498a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800498e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004992:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004996:	ee67 7a27 	vmul.f32	s15, s14, s15
 800499a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800499e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80049a0:	4b2a      	ldr	r3, [pc, #168]	@ (8004a4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049a4:	0a5b      	lsrs	r3, r3, #9
 80049a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049aa:	ee07 3a90 	vmov	s15, r3
 80049ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80049b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80049be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049c6:	ee17 2a90 	vmov	r2, s15
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80049ce:	4b1f      	ldr	r3, [pc, #124]	@ (8004a4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049d2:	0c1b      	lsrs	r3, r3, #16
 80049d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049d8:	ee07 3a90 	vmov	s15, r3
 80049dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049e0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80049e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80049ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049f4:	ee17 2a90 	vmov	r2, s15
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80049fc:	4b13      	ldr	r3, [pc, #76]	@ (8004a4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a00:	0e1b      	lsrs	r3, r3, #24
 8004a02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a06:	ee07 3a90 	vmov	s15, r3
 8004a0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a0e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004a12:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a16:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a22:	ee17 2a90 	vmov	r2, s15
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004a2a:	e008      	b.n	8004a3e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	609a      	str	r2, [r3, #8]
}
 8004a3e:	bf00      	nop
 8004a40:	3724      	adds	r7, #36	@ 0x24
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr
 8004a4a:	bf00      	nop
 8004a4c:	58024400 	.word	0x58024400
 8004a50:	03d09000 	.word	0x03d09000
 8004a54:	46000000 	.word	0x46000000
 8004a58:	4c742400 	.word	0x4c742400
 8004a5c:	4a742400 	.word	0x4a742400
 8004a60:	4af42400 	.word	0x4af42400

08004a64 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b089      	sub	sp, #36	@ 0x24
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a6c:	4ba1      	ldr	r3, [pc, #644]	@ (8004cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a70:	f003 0303 	and.w	r3, r3, #3
 8004a74:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004a76:	4b9f      	ldr	r3, [pc, #636]	@ (8004cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a7a:	0d1b      	lsrs	r3, r3, #20
 8004a7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a80:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004a82:	4b9c      	ldr	r3, [pc, #624]	@ (8004cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a86:	0a1b      	lsrs	r3, r3, #8
 8004a88:	f003 0301 	and.w	r3, r3, #1
 8004a8c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004a8e:	4b99      	ldr	r3, [pc, #612]	@ (8004cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a92:	08db      	lsrs	r3, r3, #3
 8004a94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a98:	693a      	ldr	r2, [r7, #16]
 8004a9a:	fb02 f303 	mul.w	r3, r2, r3
 8004a9e:	ee07 3a90 	vmov	s15, r3
 8004aa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aa6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	f000 8111 	beq.w	8004cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	f000 8083 	beq.w	8004bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	2b02      	cmp	r3, #2
 8004abe:	f200 80a1 	bhi.w	8004c04 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d003      	beq.n	8004ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d056      	beq.n	8004b7c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004ace:	e099      	b.n	8004c04 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ad0:	4b88      	ldr	r3, [pc, #544]	@ (8004cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0320 	and.w	r3, r3, #32
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d02d      	beq.n	8004b38 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004adc:	4b85      	ldr	r3, [pc, #532]	@ (8004cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	08db      	lsrs	r3, r3, #3
 8004ae2:	f003 0303 	and.w	r3, r3, #3
 8004ae6:	4a84      	ldr	r2, [pc, #528]	@ (8004cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004ae8:	fa22 f303 	lsr.w	r3, r2, r3
 8004aec:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	ee07 3a90 	vmov	s15, r3
 8004af4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	ee07 3a90 	vmov	s15, r3
 8004afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b06:	4b7b      	ldr	r3, [pc, #492]	@ (8004cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b0e:	ee07 3a90 	vmov	s15, r3
 8004b12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b16:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b1a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004cfc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b32:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004b36:	e087      	b.n	8004c48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	ee07 3a90 	vmov	s15, r3
 8004b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b42:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004d00 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004b46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b4a:	4b6a      	ldr	r3, [pc, #424]	@ (8004cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b52:	ee07 3a90 	vmov	s15, r3
 8004b56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b5e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004cfc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b7a:	e065      	b.n	8004c48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	ee07 3a90 	vmov	s15, r3
 8004b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b86:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004d04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004b8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b8e:	4b59      	ldr	r3, [pc, #356]	@ (8004cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b96:	ee07 3a90 	vmov	s15, r3
 8004b9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ba2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004cfc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ba6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004baa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bbe:	e043      	b.n	8004c48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	ee07 3a90 	vmov	s15, r3
 8004bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bca:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004d08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004bce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bd2:	4b48      	ldr	r3, [pc, #288]	@ (8004cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bda:	ee07 3a90 	vmov	s15, r3
 8004bde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004be2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004be6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004cfc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004bea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c02:	e021      	b.n	8004c48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	ee07 3a90 	vmov	s15, r3
 8004c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c0e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004d04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004c12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c16:	4b37      	ldr	r3, [pc, #220]	@ (8004cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c1e:	ee07 3a90 	vmov	s15, r3
 8004c22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c26:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c2a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004cfc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c46:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004c48:	4b2a      	ldr	r3, [pc, #168]	@ (8004cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c4c:	0a5b      	lsrs	r3, r3, #9
 8004c4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c52:	ee07 3a90 	vmov	s15, r3
 8004c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c5a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c62:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c6e:	ee17 2a90 	vmov	r2, s15
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004c76:	4b1f      	ldr	r3, [pc, #124]	@ (8004cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c7a:	0c1b      	lsrs	r3, r3, #16
 8004c7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c80:	ee07 3a90 	vmov	s15, r3
 8004c84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c88:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c90:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c9c:	ee17 2a90 	vmov	r2, s15
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004ca4:	4b13      	ldr	r3, [pc, #76]	@ (8004cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ca8:	0e1b      	lsrs	r3, r3, #24
 8004caa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cae:	ee07 3a90 	vmov	s15, r3
 8004cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cb6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004cba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004cbe:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cca:	ee17 2a90 	vmov	r2, s15
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004cd2:	e008      	b.n	8004ce6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	609a      	str	r2, [r3, #8]
}
 8004ce6:	bf00      	nop
 8004ce8:	3724      	adds	r7, #36	@ 0x24
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop
 8004cf4:	58024400 	.word	0x58024400
 8004cf8:	03d09000 	.word	0x03d09000
 8004cfc:	46000000 	.word	0x46000000
 8004d00:	4c742400 	.word	0x4c742400
 8004d04:	4a742400 	.word	0x4a742400
 8004d08:	4af42400 	.word	0x4af42400

08004d0c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d16:	2300      	movs	r3, #0
 8004d18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004d1a:	4b53      	ldr	r3, [pc, #332]	@ (8004e68 <RCCEx_PLL2_Config+0x15c>)
 8004d1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d1e:	f003 0303 	and.w	r3, r3, #3
 8004d22:	2b03      	cmp	r3, #3
 8004d24:	d101      	bne.n	8004d2a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e099      	b.n	8004e5e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004d2a:	4b4f      	ldr	r3, [pc, #316]	@ (8004e68 <RCCEx_PLL2_Config+0x15c>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a4e      	ldr	r2, [pc, #312]	@ (8004e68 <RCCEx_PLL2_Config+0x15c>)
 8004d30:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004d34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d36:	f7fc f9f5 	bl	8001124 <HAL_GetTick>
 8004d3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004d3c:	e008      	b.n	8004d50 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004d3e:	f7fc f9f1 	bl	8001124 <HAL_GetTick>
 8004d42:	4602      	mov	r2, r0
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d901      	bls.n	8004d50 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	e086      	b.n	8004e5e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004d50:	4b45      	ldr	r3, [pc, #276]	@ (8004e68 <RCCEx_PLL2_Config+0x15c>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d1f0      	bne.n	8004d3e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004d5c:	4b42      	ldr	r3, [pc, #264]	@ (8004e68 <RCCEx_PLL2_Config+0x15c>)
 8004d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d60:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	031b      	lsls	r3, r3, #12
 8004d6a:	493f      	ldr	r1, [pc, #252]	@ (8004e68 <RCCEx_PLL2_Config+0x15c>)
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	3b01      	subs	r3, #1
 8004d76:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	025b      	lsls	r3, r3, #9
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	431a      	orrs	r2, r3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	041b      	lsls	r3, r3, #16
 8004d8e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004d92:	431a      	orrs	r2, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	691b      	ldr	r3, [r3, #16]
 8004d98:	3b01      	subs	r3, #1
 8004d9a:	061b      	lsls	r3, r3, #24
 8004d9c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004da0:	4931      	ldr	r1, [pc, #196]	@ (8004e68 <RCCEx_PLL2_Config+0x15c>)
 8004da2:	4313      	orrs	r3, r2
 8004da4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004da6:	4b30      	ldr	r3, [pc, #192]	@ (8004e68 <RCCEx_PLL2_Config+0x15c>)
 8004da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004daa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	695b      	ldr	r3, [r3, #20]
 8004db2:	492d      	ldr	r1, [pc, #180]	@ (8004e68 <RCCEx_PLL2_Config+0x15c>)
 8004db4:	4313      	orrs	r3, r2
 8004db6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004db8:	4b2b      	ldr	r3, [pc, #172]	@ (8004e68 <RCCEx_PLL2_Config+0x15c>)
 8004dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dbc:	f023 0220 	bic.w	r2, r3, #32
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	699b      	ldr	r3, [r3, #24]
 8004dc4:	4928      	ldr	r1, [pc, #160]	@ (8004e68 <RCCEx_PLL2_Config+0x15c>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004dca:	4b27      	ldr	r3, [pc, #156]	@ (8004e68 <RCCEx_PLL2_Config+0x15c>)
 8004dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dce:	4a26      	ldr	r2, [pc, #152]	@ (8004e68 <RCCEx_PLL2_Config+0x15c>)
 8004dd0:	f023 0310 	bic.w	r3, r3, #16
 8004dd4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004dd6:	4b24      	ldr	r3, [pc, #144]	@ (8004e68 <RCCEx_PLL2_Config+0x15c>)
 8004dd8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004dda:	4b24      	ldr	r3, [pc, #144]	@ (8004e6c <RCCEx_PLL2_Config+0x160>)
 8004ddc:	4013      	ands	r3, r2
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	69d2      	ldr	r2, [r2, #28]
 8004de2:	00d2      	lsls	r2, r2, #3
 8004de4:	4920      	ldr	r1, [pc, #128]	@ (8004e68 <RCCEx_PLL2_Config+0x15c>)
 8004de6:	4313      	orrs	r3, r2
 8004de8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004dea:	4b1f      	ldr	r3, [pc, #124]	@ (8004e68 <RCCEx_PLL2_Config+0x15c>)
 8004dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dee:	4a1e      	ldr	r2, [pc, #120]	@ (8004e68 <RCCEx_PLL2_Config+0x15c>)
 8004df0:	f043 0310 	orr.w	r3, r3, #16
 8004df4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d106      	bne.n	8004e0a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004dfc:	4b1a      	ldr	r3, [pc, #104]	@ (8004e68 <RCCEx_PLL2_Config+0x15c>)
 8004dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e00:	4a19      	ldr	r2, [pc, #100]	@ (8004e68 <RCCEx_PLL2_Config+0x15c>)
 8004e02:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004e06:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004e08:	e00f      	b.n	8004e2a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d106      	bne.n	8004e1e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004e10:	4b15      	ldr	r3, [pc, #84]	@ (8004e68 <RCCEx_PLL2_Config+0x15c>)
 8004e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e14:	4a14      	ldr	r2, [pc, #80]	@ (8004e68 <RCCEx_PLL2_Config+0x15c>)
 8004e16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e1a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004e1c:	e005      	b.n	8004e2a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004e1e:	4b12      	ldr	r3, [pc, #72]	@ (8004e68 <RCCEx_PLL2_Config+0x15c>)
 8004e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e22:	4a11      	ldr	r2, [pc, #68]	@ (8004e68 <RCCEx_PLL2_Config+0x15c>)
 8004e24:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004e28:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004e2a:	4b0f      	ldr	r3, [pc, #60]	@ (8004e68 <RCCEx_PLL2_Config+0x15c>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a0e      	ldr	r2, [pc, #56]	@ (8004e68 <RCCEx_PLL2_Config+0x15c>)
 8004e30:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004e34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e36:	f7fc f975 	bl	8001124 <HAL_GetTick>
 8004e3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004e3c:	e008      	b.n	8004e50 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004e3e:	f7fc f971 	bl	8001124 <HAL_GetTick>
 8004e42:	4602      	mov	r2, r0
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d901      	bls.n	8004e50 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	e006      	b.n	8004e5e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004e50:	4b05      	ldr	r3, [pc, #20]	@ (8004e68 <RCCEx_PLL2_Config+0x15c>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d0f0      	beq.n	8004e3e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3710      	adds	r7, #16
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	58024400 	.word	0x58024400
 8004e6c:	ffff0007 	.word	0xffff0007

08004e70 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004e7e:	4b53      	ldr	r3, [pc, #332]	@ (8004fcc <RCCEx_PLL3_Config+0x15c>)
 8004e80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e82:	f003 0303 	and.w	r3, r3, #3
 8004e86:	2b03      	cmp	r3, #3
 8004e88:	d101      	bne.n	8004e8e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e099      	b.n	8004fc2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004e8e:	4b4f      	ldr	r3, [pc, #316]	@ (8004fcc <RCCEx_PLL3_Config+0x15c>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a4e      	ldr	r2, [pc, #312]	@ (8004fcc <RCCEx_PLL3_Config+0x15c>)
 8004e94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e9a:	f7fc f943 	bl	8001124 <HAL_GetTick>
 8004e9e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004ea0:	e008      	b.n	8004eb4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004ea2:	f7fc f93f 	bl	8001124 <HAL_GetTick>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	1ad3      	subs	r3, r2, r3
 8004eac:	2b02      	cmp	r3, #2
 8004eae:	d901      	bls.n	8004eb4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	e086      	b.n	8004fc2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004eb4:	4b45      	ldr	r3, [pc, #276]	@ (8004fcc <RCCEx_PLL3_Config+0x15c>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d1f0      	bne.n	8004ea2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004ec0:	4b42      	ldr	r3, [pc, #264]	@ (8004fcc <RCCEx_PLL3_Config+0x15c>)
 8004ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ec4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	051b      	lsls	r3, r3, #20
 8004ece:	493f      	ldr	r1, [pc, #252]	@ (8004fcc <RCCEx_PLL3_Config+0x15c>)
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	628b      	str	r3, [r1, #40]	@ 0x28
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	3b01      	subs	r3, #1
 8004eda:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	025b      	lsls	r3, r3, #9
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	431a      	orrs	r2, r3
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	3b01      	subs	r3, #1
 8004ef0:	041b      	lsls	r3, r3, #16
 8004ef2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004ef6:	431a      	orrs	r2, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	691b      	ldr	r3, [r3, #16]
 8004efc:	3b01      	subs	r3, #1
 8004efe:	061b      	lsls	r3, r3, #24
 8004f00:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004f04:	4931      	ldr	r1, [pc, #196]	@ (8004fcc <RCCEx_PLL3_Config+0x15c>)
 8004f06:	4313      	orrs	r3, r2
 8004f08:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004f0a:	4b30      	ldr	r3, [pc, #192]	@ (8004fcc <RCCEx_PLL3_Config+0x15c>)
 8004f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f0e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	695b      	ldr	r3, [r3, #20]
 8004f16:	492d      	ldr	r1, [pc, #180]	@ (8004fcc <RCCEx_PLL3_Config+0x15c>)
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004f1c:	4b2b      	ldr	r3, [pc, #172]	@ (8004fcc <RCCEx_PLL3_Config+0x15c>)
 8004f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f20:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	699b      	ldr	r3, [r3, #24]
 8004f28:	4928      	ldr	r1, [pc, #160]	@ (8004fcc <RCCEx_PLL3_Config+0x15c>)
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004f2e:	4b27      	ldr	r3, [pc, #156]	@ (8004fcc <RCCEx_PLL3_Config+0x15c>)
 8004f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f32:	4a26      	ldr	r2, [pc, #152]	@ (8004fcc <RCCEx_PLL3_Config+0x15c>)
 8004f34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f38:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004f3a:	4b24      	ldr	r3, [pc, #144]	@ (8004fcc <RCCEx_PLL3_Config+0x15c>)
 8004f3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f3e:	4b24      	ldr	r3, [pc, #144]	@ (8004fd0 <RCCEx_PLL3_Config+0x160>)
 8004f40:	4013      	ands	r3, r2
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	69d2      	ldr	r2, [r2, #28]
 8004f46:	00d2      	lsls	r2, r2, #3
 8004f48:	4920      	ldr	r1, [pc, #128]	@ (8004fcc <RCCEx_PLL3_Config+0x15c>)
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004f4e:	4b1f      	ldr	r3, [pc, #124]	@ (8004fcc <RCCEx_PLL3_Config+0x15c>)
 8004f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f52:	4a1e      	ldr	r2, [pc, #120]	@ (8004fcc <RCCEx_PLL3_Config+0x15c>)
 8004f54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f58:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d106      	bne.n	8004f6e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004f60:	4b1a      	ldr	r3, [pc, #104]	@ (8004fcc <RCCEx_PLL3_Config+0x15c>)
 8004f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f64:	4a19      	ldr	r2, [pc, #100]	@ (8004fcc <RCCEx_PLL3_Config+0x15c>)
 8004f66:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004f6a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004f6c:	e00f      	b.n	8004f8e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d106      	bne.n	8004f82 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004f74:	4b15      	ldr	r3, [pc, #84]	@ (8004fcc <RCCEx_PLL3_Config+0x15c>)
 8004f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f78:	4a14      	ldr	r2, [pc, #80]	@ (8004fcc <RCCEx_PLL3_Config+0x15c>)
 8004f7a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004f7e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004f80:	e005      	b.n	8004f8e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004f82:	4b12      	ldr	r3, [pc, #72]	@ (8004fcc <RCCEx_PLL3_Config+0x15c>)
 8004f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f86:	4a11      	ldr	r2, [pc, #68]	@ (8004fcc <RCCEx_PLL3_Config+0x15c>)
 8004f88:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f8c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004f8e:	4b0f      	ldr	r3, [pc, #60]	@ (8004fcc <RCCEx_PLL3_Config+0x15c>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a0e      	ldr	r2, [pc, #56]	@ (8004fcc <RCCEx_PLL3_Config+0x15c>)
 8004f94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f9a:	f7fc f8c3 	bl	8001124 <HAL_GetTick>
 8004f9e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004fa0:	e008      	b.n	8004fb4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004fa2:	f7fc f8bf 	bl	8001124 <HAL_GetTick>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	1ad3      	subs	r3, r2, r3
 8004fac:	2b02      	cmp	r3, #2
 8004fae:	d901      	bls.n	8004fb4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	e006      	b.n	8004fc2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004fb4:	4b05      	ldr	r3, [pc, #20]	@ (8004fcc <RCCEx_PLL3_Config+0x15c>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d0f0      	beq.n	8004fa2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3710      	adds	r7, #16
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	58024400 	.word	0x58024400
 8004fd0:	ffff0007 	.word	0xffff0007

08004fd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d101      	bne.n	8004fe6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e049      	b.n	800507a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d106      	bne.n	8005000 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f7fb fec8 	bl	8000d90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2202      	movs	r2, #2
 8005004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	3304      	adds	r3, #4
 8005010:	4619      	mov	r1, r3
 8005012:	4610      	mov	r0, r2
 8005014:	f000 fae0 	bl	80055d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005078:	2300      	movs	r3, #0
}
 800507a:	4618      	mov	r0, r3
 800507c:	3708      	adds	r7, #8
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
	...

08005084 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005084:	b480      	push	{r7}
 8005086:	b085      	sub	sp, #20
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005092:	b2db      	uxtb	r3, r3
 8005094:	2b01      	cmp	r3, #1
 8005096:	d001      	beq.n	800509c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	e054      	b.n	8005146 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2202      	movs	r2, #2
 80050a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	68da      	ldr	r2, [r3, #12]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f042 0201 	orr.w	r2, r2, #1
 80050b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a26      	ldr	r2, [pc, #152]	@ (8005154 <HAL_TIM_Base_Start_IT+0xd0>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d022      	beq.n	8005104 <HAL_TIM_Base_Start_IT+0x80>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050c6:	d01d      	beq.n	8005104 <HAL_TIM_Base_Start_IT+0x80>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a22      	ldr	r2, [pc, #136]	@ (8005158 <HAL_TIM_Base_Start_IT+0xd4>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d018      	beq.n	8005104 <HAL_TIM_Base_Start_IT+0x80>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a21      	ldr	r2, [pc, #132]	@ (800515c <HAL_TIM_Base_Start_IT+0xd8>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d013      	beq.n	8005104 <HAL_TIM_Base_Start_IT+0x80>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a1f      	ldr	r2, [pc, #124]	@ (8005160 <HAL_TIM_Base_Start_IT+0xdc>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d00e      	beq.n	8005104 <HAL_TIM_Base_Start_IT+0x80>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a1e      	ldr	r2, [pc, #120]	@ (8005164 <HAL_TIM_Base_Start_IT+0xe0>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d009      	beq.n	8005104 <HAL_TIM_Base_Start_IT+0x80>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a1c      	ldr	r2, [pc, #112]	@ (8005168 <HAL_TIM_Base_Start_IT+0xe4>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d004      	beq.n	8005104 <HAL_TIM_Base_Start_IT+0x80>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a1b      	ldr	r2, [pc, #108]	@ (800516c <HAL_TIM_Base_Start_IT+0xe8>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d115      	bne.n	8005130 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	689a      	ldr	r2, [r3, #8]
 800510a:	4b19      	ldr	r3, [pc, #100]	@ (8005170 <HAL_TIM_Base_Start_IT+0xec>)
 800510c:	4013      	ands	r3, r2
 800510e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2b06      	cmp	r3, #6
 8005114:	d015      	beq.n	8005142 <HAL_TIM_Base_Start_IT+0xbe>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800511c:	d011      	beq.n	8005142 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f042 0201 	orr.w	r2, r2, #1
 800512c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800512e:	e008      	b.n	8005142 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f042 0201 	orr.w	r2, r2, #1
 800513e:	601a      	str	r2, [r3, #0]
 8005140:	e000      	b.n	8005144 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005142:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005144:	2300      	movs	r3, #0
}
 8005146:	4618      	mov	r0, r3
 8005148:	3714      	adds	r7, #20
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr
 8005152:	bf00      	nop
 8005154:	40010000 	.word	0x40010000
 8005158:	40000400 	.word	0x40000400
 800515c:	40000800 	.word	0x40000800
 8005160:	40000c00 	.word	0x40000c00
 8005164:	40010400 	.word	0x40010400
 8005168:	40001800 	.word	0x40001800
 800516c:	40014000 	.word	0x40014000
 8005170:	00010007 	.word	0x00010007

08005174 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b084      	sub	sp, #16
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	f003 0302 	and.w	r3, r3, #2
 8005192:	2b00      	cmp	r3, #0
 8005194:	d020      	beq.n	80051d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f003 0302 	and.w	r3, r3, #2
 800519c:	2b00      	cmp	r3, #0
 800519e:	d01b      	beq.n	80051d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f06f 0202 	mvn.w	r2, #2
 80051a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2201      	movs	r2, #1
 80051ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	699b      	ldr	r3, [r3, #24]
 80051b6:	f003 0303 	and.w	r3, r3, #3
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d003      	beq.n	80051c6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 f9ec 	bl	800559c <HAL_TIM_IC_CaptureCallback>
 80051c4:	e005      	b.n	80051d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 f9de 	bl	8005588 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f000 f9ef 	bl	80055b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	f003 0304 	and.w	r3, r3, #4
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d020      	beq.n	8005224 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f003 0304 	and.w	r3, r3, #4
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d01b      	beq.n	8005224 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f06f 0204 	mvn.w	r2, #4
 80051f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2202      	movs	r2, #2
 80051fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	699b      	ldr	r3, [r3, #24]
 8005202:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005206:	2b00      	cmp	r3, #0
 8005208:	d003      	beq.n	8005212 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 f9c6 	bl	800559c <HAL_TIM_IC_CaptureCallback>
 8005210:	e005      	b.n	800521e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f000 f9b8 	bl	8005588 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f000 f9c9 	bl	80055b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	f003 0308 	and.w	r3, r3, #8
 800522a:	2b00      	cmp	r3, #0
 800522c:	d020      	beq.n	8005270 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f003 0308 	and.w	r3, r3, #8
 8005234:	2b00      	cmp	r3, #0
 8005236:	d01b      	beq.n	8005270 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f06f 0208 	mvn.w	r2, #8
 8005240:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2204      	movs	r2, #4
 8005246:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	69db      	ldr	r3, [r3, #28]
 800524e:	f003 0303 	and.w	r3, r3, #3
 8005252:	2b00      	cmp	r3, #0
 8005254:	d003      	beq.n	800525e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 f9a0 	bl	800559c <HAL_TIM_IC_CaptureCallback>
 800525c:	e005      	b.n	800526a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 f992 	bl	8005588 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f000 f9a3 	bl	80055b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	f003 0310 	and.w	r3, r3, #16
 8005276:	2b00      	cmp	r3, #0
 8005278:	d020      	beq.n	80052bc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f003 0310 	and.w	r3, r3, #16
 8005280:	2b00      	cmp	r3, #0
 8005282:	d01b      	beq.n	80052bc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f06f 0210 	mvn.w	r2, #16
 800528c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2208      	movs	r2, #8
 8005292:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	69db      	ldr	r3, [r3, #28]
 800529a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d003      	beq.n	80052aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 f97a 	bl	800559c <HAL_TIM_IC_CaptureCallback>
 80052a8:	e005      	b.n	80052b6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 f96c 	bl	8005588 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f000 f97d 	bl	80055b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	f003 0301 	and.w	r3, r3, #1
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d00c      	beq.n	80052e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f003 0301 	and.w	r3, r3, #1
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d007      	beq.n	80052e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f06f 0201 	mvn.w	r2, #1
 80052d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 f94a 	bl	8005574 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d104      	bne.n	80052f4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d00c      	beq.n	800530e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d007      	beq.n	800530e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005306:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f000 fb3b 	bl	8005984 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005314:	2b00      	cmp	r3, #0
 8005316:	d00c      	beq.n	8005332 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800531e:	2b00      	cmp	r3, #0
 8005320:	d007      	beq.n	8005332 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800532a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f000 fb33 	bl	8005998 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005338:	2b00      	cmp	r3, #0
 800533a:	d00c      	beq.n	8005356 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005342:	2b00      	cmp	r3, #0
 8005344:	d007      	beq.n	8005356 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800534e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f000 f937 	bl	80055c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	f003 0320 	and.w	r3, r3, #32
 800535c:	2b00      	cmp	r3, #0
 800535e:	d00c      	beq.n	800537a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f003 0320 	and.w	r3, r3, #32
 8005366:	2b00      	cmp	r3, #0
 8005368:	d007      	beq.n	800537a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f06f 0220 	mvn.w	r2, #32
 8005372:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f000 fafb 	bl	8005970 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800537a:	bf00      	nop
 800537c:	3710      	adds	r7, #16
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
	...

08005384 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b084      	sub	sp, #16
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800538e:	2300      	movs	r3, #0
 8005390:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005398:	2b01      	cmp	r3, #1
 800539a:	d101      	bne.n	80053a0 <HAL_TIM_ConfigClockSource+0x1c>
 800539c:	2302      	movs	r3, #2
 800539e:	e0dc      	b.n	800555a <HAL_TIM_ConfigClockSource+0x1d6>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2202      	movs	r2, #2
 80053ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80053b8:	68ba      	ldr	r2, [r7, #8]
 80053ba:	4b6a      	ldr	r3, [pc, #424]	@ (8005564 <HAL_TIM_ConfigClockSource+0x1e0>)
 80053bc:	4013      	ands	r3, r2
 80053be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80053c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	68ba      	ldr	r2, [r7, #8]
 80053ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a64      	ldr	r2, [pc, #400]	@ (8005568 <HAL_TIM_ConfigClockSource+0x1e4>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	f000 80a9 	beq.w	800552e <HAL_TIM_ConfigClockSource+0x1aa>
 80053dc:	4a62      	ldr	r2, [pc, #392]	@ (8005568 <HAL_TIM_ConfigClockSource+0x1e4>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	f200 80ae 	bhi.w	8005540 <HAL_TIM_ConfigClockSource+0x1bc>
 80053e4:	4a61      	ldr	r2, [pc, #388]	@ (800556c <HAL_TIM_ConfigClockSource+0x1e8>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	f000 80a1 	beq.w	800552e <HAL_TIM_ConfigClockSource+0x1aa>
 80053ec:	4a5f      	ldr	r2, [pc, #380]	@ (800556c <HAL_TIM_ConfigClockSource+0x1e8>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	f200 80a6 	bhi.w	8005540 <HAL_TIM_ConfigClockSource+0x1bc>
 80053f4:	4a5e      	ldr	r2, [pc, #376]	@ (8005570 <HAL_TIM_ConfigClockSource+0x1ec>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	f000 8099 	beq.w	800552e <HAL_TIM_ConfigClockSource+0x1aa>
 80053fc:	4a5c      	ldr	r2, [pc, #368]	@ (8005570 <HAL_TIM_ConfigClockSource+0x1ec>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	f200 809e 	bhi.w	8005540 <HAL_TIM_ConfigClockSource+0x1bc>
 8005404:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005408:	f000 8091 	beq.w	800552e <HAL_TIM_ConfigClockSource+0x1aa>
 800540c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005410:	f200 8096 	bhi.w	8005540 <HAL_TIM_ConfigClockSource+0x1bc>
 8005414:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005418:	f000 8089 	beq.w	800552e <HAL_TIM_ConfigClockSource+0x1aa>
 800541c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005420:	f200 808e 	bhi.w	8005540 <HAL_TIM_ConfigClockSource+0x1bc>
 8005424:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005428:	d03e      	beq.n	80054a8 <HAL_TIM_ConfigClockSource+0x124>
 800542a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800542e:	f200 8087 	bhi.w	8005540 <HAL_TIM_ConfigClockSource+0x1bc>
 8005432:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005436:	f000 8086 	beq.w	8005546 <HAL_TIM_ConfigClockSource+0x1c2>
 800543a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800543e:	d87f      	bhi.n	8005540 <HAL_TIM_ConfigClockSource+0x1bc>
 8005440:	2b70      	cmp	r3, #112	@ 0x70
 8005442:	d01a      	beq.n	800547a <HAL_TIM_ConfigClockSource+0xf6>
 8005444:	2b70      	cmp	r3, #112	@ 0x70
 8005446:	d87b      	bhi.n	8005540 <HAL_TIM_ConfigClockSource+0x1bc>
 8005448:	2b60      	cmp	r3, #96	@ 0x60
 800544a:	d050      	beq.n	80054ee <HAL_TIM_ConfigClockSource+0x16a>
 800544c:	2b60      	cmp	r3, #96	@ 0x60
 800544e:	d877      	bhi.n	8005540 <HAL_TIM_ConfigClockSource+0x1bc>
 8005450:	2b50      	cmp	r3, #80	@ 0x50
 8005452:	d03c      	beq.n	80054ce <HAL_TIM_ConfigClockSource+0x14a>
 8005454:	2b50      	cmp	r3, #80	@ 0x50
 8005456:	d873      	bhi.n	8005540 <HAL_TIM_ConfigClockSource+0x1bc>
 8005458:	2b40      	cmp	r3, #64	@ 0x40
 800545a:	d058      	beq.n	800550e <HAL_TIM_ConfigClockSource+0x18a>
 800545c:	2b40      	cmp	r3, #64	@ 0x40
 800545e:	d86f      	bhi.n	8005540 <HAL_TIM_ConfigClockSource+0x1bc>
 8005460:	2b30      	cmp	r3, #48	@ 0x30
 8005462:	d064      	beq.n	800552e <HAL_TIM_ConfigClockSource+0x1aa>
 8005464:	2b30      	cmp	r3, #48	@ 0x30
 8005466:	d86b      	bhi.n	8005540 <HAL_TIM_ConfigClockSource+0x1bc>
 8005468:	2b20      	cmp	r3, #32
 800546a:	d060      	beq.n	800552e <HAL_TIM_ConfigClockSource+0x1aa>
 800546c:	2b20      	cmp	r3, #32
 800546e:	d867      	bhi.n	8005540 <HAL_TIM_ConfigClockSource+0x1bc>
 8005470:	2b00      	cmp	r3, #0
 8005472:	d05c      	beq.n	800552e <HAL_TIM_ConfigClockSource+0x1aa>
 8005474:	2b10      	cmp	r3, #16
 8005476:	d05a      	beq.n	800552e <HAL_TIM_ConfigClockSource+0x1aa>
 8005478:	e062      	b.n	8005540 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800548a:	f000 f9c3 	bl	8005814 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800549c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	68ba      	ldr	r2, [r7, #8]
 80054a4:	609a      	str	r2, [r3, #8]
      break;
 80054a6:	e04f      	b.n	8005548 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80054b8:	f000 f9ac 	bl	8005814 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	689a      	ldr	r2, [r3, #8]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80054ca:	609a      	str	r2, [r3, #8]
      break;
 80054cc:	e03c      	b.n	8005548 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054da:	461a      	mov	r2, r3
 80054dc:	f000 f91c 	bl	8005718 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2150      	movs	r1, #80	@ 0x50
 80054e6:	4618      	mov	r0, r3
 80054e8:	f000 f976 	bl	80057d8 <TIM_ITRx_SetConfig>
      break;
 80054ec:	e02c      	b.n	8005548 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80054fa:	461a      	mov	r2, r3
 80054fc:	f000 f93b 	bl	8005776 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2160      	movs	r1, #96	@ 0x60
 8005506:	4618      	mov	r0, r3
 8005508:	f000 f966 	bl	80057d8 <TIM_ITRx_SetConfig>
      break;
 800550c:	e01c      	b.n	8005548 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800551a:	461a      	mov	r2, r3
 800551c:	f000 f8fc 	bl	8005718 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2140      	movs	r1, #64	@ 0x40
 8005526:	4618      	mov	r0, r3
 8005528:	f000 f956 	bl	80057d8 <TIM_ITRx_SetConfig>
      break;
 800552c:	e00c      	b.n	8005548 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4619      	mov	r1, r3
 8005538:	4610      	mov	r0, r2
 800553a:	f000 f94d 	bl	80057d8 <TIM_ITRx_SetConfig>
      break;
 800553e:	e003      	b.n	8005548 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	73fb      	strb	r3, [r7, #15]
      break;
 8005544:	e000      	b.n	8005548 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8005546:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005558:	7bfb      	ldrb	r3, [r7, #15]
}
 800555a:	4618      	mov	r0, r3
 800555c:	3710      	adds	r7, #16
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	ffceff88 	.word	0xffceff88
 8005568:	00100040 	.word	0x00100040
 800556c:	00100030 	.word	0x00100030
 8005570:	00100020 	.word	0x00100020

08005574 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800557c:	bf00      	nop
 800557e:	370c      	adds	r7, #12
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005588:	b480      	push	{r7}
 800558a:	b083      	sub	sp, #12
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005590:	bf00      	nop
 8005592:	370c      	adds	r7, #12
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr

0800559c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80055a4:	bf00      	nop
 80055a6:	370c      	adds	r7, #12
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055b8:	bf00      	nop
 80055ba:	370c      	adds	r7, #12
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b083      	sub	sp, #12
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055cc:	bf00      	nop
 80055ce:	370c      	adds	r7, #12
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80055d8:	b480      	push	{r7}
 80055da:	b085      	sub	sp, #20
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4a43      	ldr	r2, [pc, #268]	@ (80056f8 <TIM_Base_SetConfig+0x120>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d013      	beq.n	8005618 <TIM_Base_SetConfig+0x40>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055f6:	d00f      	beq.n	8005618 <TIM_Base_SetConfig+0x40>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a40      	ldr	r2, [pc, #256]	@ (80056fc <TIM_Base_SetConfig+0x124>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d00b      	beq.n	8005618 <TIM_Base_SetConfig+0x40>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4a3f      	ldr	r2, [pc, #252]	@ (8005700 <TIM_Base_SetConfig+0x128>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d007      	beq.n	8005618 <TIM_Base_SetConfig+0x40>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4a3e      	ldr	r2, [pc, #248]	@ (8005704 <TIM_Base_SetConfig+0x12c>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d003      	beq.n	8005618 <TIM_Base_SetConfig+0x40>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4a3d      	ldr	r2, [pc, #244]	@ (8005708 <TIM_Base_SetConfig+0x130>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d108      	bne.n	800562a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800561e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	68fa      	ldr	r2, [r7, #12]
 8005626:	4313      	orrs	r3, r2
 8005628:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a32      	ldr	r2, [pc, #200]	@ (80056f8 <TIM_Base_SetConfig+0x120>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d01f      	beq.n	8005672 <TIM_Base_SetConfig+0x9a>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005638:	d01b      	beq.n	8005672 <TIM_Base_SetConfig+0x9a>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a2f      	ldr	r2, [pc, #188]	@ (80056fc <TIM_Base_SetConfig+0x124>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d017      	beq.n	8005672 <TIM_Base_SetConfig+0x9a>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a2e      	ldr	r2, [pc, #184]	@ (8005700 <TIM_Base_SetConfig+0x128>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d013      	beq.n	8005672 <TIM_Base_SetConfig+0x9a>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a2d      	ldr	r2, [pc, #180]	@ (8005704 <TIM_Base_SetConfig+0x12c>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d00f      	beq.n	8005672 <TIM_Base_SetConfig+0x9a>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a2c      	ldr	r2, [pc, #176]	@ (8005708 <TIM_Base_SetConfig+0x130>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d00b      	beq.n	8005672 <TIM_Base_SetConfig+0x9a>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a2b      	ldr	r2, [pc, #172]	@ (800570c <TIM_Base_SetConfig+0x134>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d007      	beq.n	8005672 <TIM_Base_SetConfig+0x9a>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a2a      	ldr	r2, [pc, #168]	@ (8005710 <TIM_Base_SetConfig+0x138>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d003      	beq.n	8005672 <TIM_Base_SetConfig+0x9a>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a29      	ldr	r2, [pc, #164]	@ (8005714 <TIM_Base_SetConfig+0x13c>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d108      	bne.n	8005684 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005678:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	68fa      	ldr	r2, [r7, #12]
 8005680:	4313      	orrs	r3, r2
 8005682:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	695b      	ldr	r3, [r3, #20]
 800568e:	4313      	orrs	r3, r2
 8005690:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	689a      	ldr	r2, [r3, #8]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a14      	ldr	r2, [pc, #80]	@ (80056f8 <TIM_Base_SetConfig+0x120>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d00f      	beq.n	80056ca <TIM_Base_SetConfig+0xf2>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a16      	ldr	r2, [pc, #88]	@ (8005708 <TIM_Base_SetConfig+0x130>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d00b      	beq.n	80056ca <TIM_Base_SetConfig+0xf2>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a15      	ldr	r2, [pc, #84]	@ (800570c <TIM_Base_SetConfig+0x134>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d007      	beq.n	80056ca <TIM_Base_SetConfig+0xf2>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a14      	ldr	r2, [pc, #80]	@ (8005710 <TIM_Base_SetConfig+0x138>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d003      	beq.n	80056ca <TIM_Base_SetConfig+0xf2>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a13      	ldr	r2, [pc, #76]	@ (8005714 <TIM_Base_SetConfig+0x13c>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d103      	bne.n	80056d2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	691a      	ldr	r2, [r3, #16]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f043 0204 	orr.w	r2, r3, #4
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2201      	movs	r2, #1
 80056e2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	68fa      	ldr	r2, [r7, #12]
 80056e8:	601a      	str	r2, [r3, #0]
}
 80056ea:	bf00      	nop
 80056ec:	3714      	adds	r7, #20
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr
 80056f6:	bf00      	nop
 80056f8:	40010000 	.word	0x40010000
 80056fc:	40000400 	.word	0x40000400
 8005700:	40000800 	.word	0x40000800
 8005704:	40000c00 	.word	0x40000c00
 8005708:	40010400 	.word	0x40010400
 800570c:	40014000 	.word	0x40014000
 8005710:	40014400 	.word	0x40014400
 8005714:	40014800 	.word	0x40014800

08005718 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005718:	b480      	push	{r7}
 800571a:	b087      	sub	sp, #28
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6a1b      	ldr	r3, [r3, #32]
 8005728:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6a1b      	ldr	r3, [r3, #32]
 800572e:	f023 0201 	bic.w	r2, r3, #1
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	699b      	ldr	r3, [r3, #24]
 800573a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005742:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	011b      	lsls	r3, r3, #4
 8005748:	693a      	ldr	r2, [r7, #16]
 800574a:	4313      	orrs	r3, r2
 800574c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	f023 030a 	bic.w	r3, r3, #10
 8005754:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005756:	697a      	ldr	r2, [r7, #20]
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	4313      	orrs	r3, r2
 800575c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	693a      	ldr	r2, [r7, #16]
 8005762:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	697a      	ldr	r2, [r7, #20]
 8005768:	621a      	str	r2, [r3, #32]
}
 800576a:	bf00      	nop
 800576c:	371c      	adds	r7, #28
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr

08005776 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005776:	b480      	push	{r7}
 8005778:	b087      	sub	sp, #28
 800577a:	af00      	add	r7, sp, #0
 800577c:	60f8      	str	r0, [r7, #12]
 800577e:	60b9      	str	r1, [r7, #8]
 8005780:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6a1b      	ldr	r3, [r3, #32]
 8005786:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6a1b      	ldr	r3, [r3, #32]
 800578c:	f023 0210 	bic.w	r2, r3, #16
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	699b      	ldr	r3, [r3, #24]
 8005798:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80057a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	031b      	lsls	r3, r3, #12
 80057a6:	693a      	ldr	r2, [r7, #16]
 80057a8:	4313      	orrs	r3, r2
 80057aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80057b2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	011b      	lsls	r3, r3, #4
 80057b8:	697a      	ldr	r2, [r7, #20]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	693a      	ldr	r2, [r7, #16]
 80057c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	697a      	ldr	r2, [r7, #20]
 80057c8:	621a      	str	r2, [r3, #32]
}
 80057ca:	bf00      	nop
 80057cc:	371c      	adds	r7, #28
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr
	...

080057d8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057d8:	b480      	push	{r7}
 80057da:	b085      	sub	sp, #20
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057e8:	68fa      	ldr	r2, [r7, #12]
 80057ea:	4b09      	ldr	r3, [pc, #36]	@ (8005810 <TIM_ITRx_SetConfig+0x38>)
 80057ec:	4013      	ands	r3, r2
 80057ee:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057f0:	683a      	ldr	r2, [r7, #0]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	f043 0307 	orr.w	r3, r3, #7
 80057fa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	609a      	str	r2, [r3, #8]
}
 8005802:	bf00      	nop
 8005804:	3714      	adds	r7, #20
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr
 800580e:	bf00      	nop
 8005810:	ffcfff8f 	.word	0xffcfff8f

08005814 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005814:	b480      	push	{r7}
 8005816:	b087      	sub	sp, #28
 8005818:	af00      	add	r7, sp, #0
 800581a:	60f8      	str	r0, [r7, #12]
 800581c:	60b9      	str	r1, [r7, #8]
 800581e:	607a      	str	r2, [r7, #4]
 8005820:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800582e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	021a      	lsls	r2, r3, #8
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	431a      	orrs	r2, r3
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	4313      	orrs	r3, r2
 800583c:	697a      	ldr	r2, [r7, #20]
 800583e:	4313      	orrs	r3, r2
 8005840:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	697a      	ldr	r2, [r7, #20]
 8005846:	609a      	str	r2, [r3, #8]
}
 8005848:	bf00      	nop
 800584a:	371c      	adds	r7, #28
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005854:	b480      	push	{r7}
 8005856:	b085      	sub	sp, #20
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005864:	2b01      	cmp	r3, #1
 8005866:	d101      	bne.n	800586c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005868:	2302      	movs	r3, #2
 800586a:	e06d      	b.n	8005948 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2202      	movs	r2, #2
 8005878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a30      	ldr	r2, [pc, #192]	@ (8005954 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d004      	beq.n	80058a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a2f      	ldr	r2, [pc, #188]	@ (8005958 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d108      	bne.n	80058b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80058a6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058b8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	68fa      	ldr	r2, [r7, #12]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	68fa      	ldr	r2, [r7, #12]
 80058ca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a20      	ldr	r2, [pc, #128]	@ (8005954 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d022      	beq.n	800591c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058de:	d01d      	beq.n	800591c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a1d      	ldr	r2, [pc, #116]	@ (800595c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d018      	beq.n	800591c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a1c      	ldr	r2, [pc, #112]	@ (8005960 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d013      	beq.n	800591c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a1a      	ldr	r2, [pc, #104]	@ (8005964 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d00e      	beq.n	800591c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a15      	ldr	r2, [pc, #84]	@ (8005958 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d009      	beq.n	800591c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a16      	ldr	r2, [pc, #88]	@ (8005968 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d004      	beq.n	800591c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a15      	ldr	r2, [pc, #84]	@ (800596c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d10c      	bne.n	8005936 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005922:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	68ba      	ldr	r2, [r7, #8]
 800592a:	4313      	orrs	r3, r2
 800592c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	68ba      	ldr	r2, [r7, #8]
 8005934:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2201      	movs	r2, #1
 800593a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005946:	2300      	movs	r3, #0
}
 8005948:	4618      	mov	r0, r3
 800594a:	3714      	adds	r7, #20
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr
 8005954:	40010000 	.word	0x40010000
 8005958:	40010400 	.word	0x40010400
 800595c:	40000400 	.word	0x40000400
 8005960:	40000800 	.word	0x40000800
 8005964:	40000c00 	.word	0x40000c00
 8005968:	40001800 	.word	0x40001800
 800596c:	40014000 	.word	0x40014000

08005970 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005978:	bf00      	nop
 800597a:	370c      	adds	r7, #12
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800598c:	bf00      	nop
 800598e:	370c      	adds	r7, #12
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80059a0:	bf00      	nop
 80059a2:	370c      	adds	r7, #12
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr

080059ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b082      	sub	sp, #8
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d101      	bne.n	80059be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e042      	b.n	8005a44 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d106      	bne.n	80059d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f7fb fa71 	bl	8000eb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2224      	movs	r2, #36	@ 0x24
 80059da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f022 0201 	bic.w	r2, r2, #1
 80059ec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d002      	beq.n	80059fc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f001 fa14 	bl	8006e24 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f000 fca9 	bl	8006354 <UART_SetConfig>
 8005a02:	4603      	mov	r3, r0
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d101      	bne.n	8005a0c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e01b      	b.n	8005a44 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	685a      	ldr	r2, [r3, #4]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005a1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	689a      	ldr	r2, [r3, #8]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005a2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f042 0201 	orr.w	r2, r2, #1
 8005a3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f001 fa93 	bl	8006f68 <UART_CheckIdleState>
 8005a42:	4603      	mov	r3, r0
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3708      	adds	r7, #8
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}

08005a4c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b08a      	sub	sp, #40	@ 0x28
 8005a50:	af02      	add	r7, sp, #8
 8005a52:	60f8      	str	r0, [r7, #12]
 8005a54:	60b9      	str	r1, [r7, #8]
 8005a56:	603b      	str	r3, [r7, #0]
 8005a58:	4613      	mov	r3, r2
 8005a5a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a62:	2b20      	cmp	r3, #32
 8005a64:	d17b      	bne.n	8005b5e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d002      	beq.n	8005a72 <HAL_UART_Transmit+0x26>
 8005a6c:	88fb      	ldrh	r3, [r7, #6]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d101      	bne.n	8005a76 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	e074      	b.n	8005b60 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2221      	movs	r2, #33	@ 0x21
 8005a82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a86:	f7fb fb4d 	bl	8001124 <HAL_GetTick>
 8005a8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	88fa      	ldrh	r2, [r7, #6]
 8005a90:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	88fa      	ldrh	r2, [r7, #6]
 8005a98:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005aa4:	d108      	bne.n	8005ab8 <HAL_UART_Transmit+0x6c>
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d104      	bne.n	8005ab8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	61bb      	str	r3, [r7, #24]
 8005ab6:	e003      	b.n	8005ac0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005abc:	2300      	movs	r3, #0
 8005abe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005ac0:	e030      	b.n	8005b24 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	9300      	str	r3, [sp, #0]
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	2180      	movs	r1, #128	@ 0x80
 8005acc:	68f8      	ldr	r0, [r7, #12]
 8005ace:	f001 faf5 	bl	80070bc <UART_WaitOnFlagUntilTimeout>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d005      	beq.n	8005ae4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2220      	movs	r2, #32
 8005adc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005ae0:	2303      	movs	r3, #3
 8005ae2:	e03d      	b.n	8005b60 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d10b      	bne.n	8005b02 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	881b      	ldrh	r3, [r3, #0]
 8005aee:	461a      	mov	r2, r3
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005af8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	3302      	adds	r3, #2
 8005afe:	61bb      	str	r3, [r7, #24]
 8005b00:	e007      	b.n	8005b12 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	781a      	ldrb	r2, [r3, #0]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	3301      	adds	r3, #1
 8005b10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	3b01      	subs	r3, #1
 8005b1c:	b29a      	uxth	r2, r3
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d1c8      	bne.n	8005ac2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	9300      	str	r3, [sp, #0]
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	2200      	movs	r2, #0
 8005b38:	2140      	movs	r1, #64	@ 0x40
 8005b3a:	68f8      	ldr	r0, [r7, #12]
 8005b3c:	f001 fabe 	bl	80070bc <UART_WaitOnFlagUntilTimeout>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d005      	beq.n	8005b52 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2220      	movs	r2, #32
 8005b4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	e006      	b.n	8005b60 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2220      	movs	r2, #32
 8005b56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	e000      	b.n	8005b60 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005b5e:	2302      	movs	r3, #2
  }
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3720      	adds	r7, #32
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b0ba      	sub	sp, #232	@ 0xe8
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	69db      	ldr	r3, [r3, #28]
 8005b76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005b8e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005b92:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005b96:	4013      	ands	r3, r2
 8005b98:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005b9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d11b      	bne.n	8005bdc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005ba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ba8:	f003 0320 	and.w	r3, r3, #32
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d015      	beq.n	8005bdc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005bb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bb4:	f003 0320 	and.w	r3, r3, #32
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d105      	bne.n	8005bc8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005bbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005bc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d009      	beq.n	8005bdc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	f000 8393 	beq.w	80062f8 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	4798      	blx	r3
      }
      return;
 8005bda:	e38d      	b.n	80062f8 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005bdc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	f000 8123 	beq.w	8005e2c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005be6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005bea:	4b8d      	ldr	r3, [pc, #564]	@ (8005e20 <HAL_UART_IRQHandler+0x2b8>)
 8005bec:	4013      	ands	r3, r2
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d106      	bne.n	8005c00 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005bf2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005bf6:	4b8b      	ldr	r3, [pc, #556]	@ (8005e24 <HAL_UART_IRQHandler+0x2bc>)
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	f000 8116 	beq.w	8005e2c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005c00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c04:	f003 0301 	and.w	r3, r3, #1
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d011      	beq.n	8005c30 <HAL_UART_IRQHandler+0xc8>
 8005c0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d00b      	beq.n	8005c30 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c26:	f043 0201 	orr.w	r2, r3, #1
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c34:	f003 0302 	and.w	r3, r3, #2
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d011      	beq.n	8005c60 <HAL_UART_IRQHandler+0xf8>
 8005c3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c40:	f003 0301 	and.w	r3, r3, #1
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d00b      	beq.n	8005c60 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2202      	movs	r2, #2
 8005c4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c56:	f043 0204 	orr.w	r2, r3, #4
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c64:	f003 0304 	and.w	r3, r3, #4
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d011      	beq.n	8005c90 <HAL_UART_IRQHandler+0x128>
 8005c6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c70:	f003 0301 	and.w	r3, r3, #1
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d00b      	beq.n	8005c90 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2204      	movs	r2, #4
 8005c7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c86:	f043 0202 	orr.w	r2, r3, #2
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005c90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c94:	f003 0308 	and.w	r3, r3, #8
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d017      	beq.n	8005ccc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005c9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ca0:	f003 0320 	and.w	r3, r3, #32
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d105      	bne.n	8005cb4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005ca8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005cac:	4b5c      	ldr	r3, [pc, #368]	@ (8005e20 <HAL_UART_IRQHandler+0x2b8>)
 8005cae:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d00b      	beq.n	8005ccc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2208      	movs	r2, #8
 8005cba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cc2:	f043 0208 	orr.w	r2, r3, #8
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005ccc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cd0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d012      	beq.n	8005cfe <HAL_UART_IRQHandler+0x196>
 8005cd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cdc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d00c      	beq.n	8005cfe <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005cec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cf4:	f043 0220 	orr.w	r2, r3, #32
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	f000 82f9 	beq.w	80062fc <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005d0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d0e:	f003 0320 	and.w	r3, r3, #32
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d013      	beq.n	8005d3e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005d16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d1a:	f003 0320 	and.w	r3, r3, #32
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d105      	bne.n	8005d2e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005d22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d007      	beq.n	8005d3e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d003      	beq.n	8005d3e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d44:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d52:	2b40      	cmp	r3, #64	@ 0x40
 8005d54:	d005      	beq.n	8005d62 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005d56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005d5a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d054      	beq.n	8005e0c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f001 fa18 	bl	8007198 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d72:	2b40      	cmp	r3, #64	@ 0x40
 8005d74:	d146      	bne.n	8005e04 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	3308      	adds	r3, #8
 8005d7c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d80:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005d84:	e853 3f00 	ldrex	r3, [r3]
 8005d88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005d8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005d90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d94:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	3308      	adds	r3, #8
 8005d9e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005da2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005da6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005daa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005dae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005db2:	e841 2300 	strex	r3, r2, [r1]
 8005db6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005dba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d1d9      	bne.n	8005d76 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d017      	beq.n	8005dfc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005dd2:	4a15      	ldr	r2, [pc, #84]	@ (8005e28 <HAL_UART_IRQHandler+0x2c0>)
 8005dd4:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f7fb fe5f 	bl	8001aa0 <HAL_DMA_Abort_IT>
 8005de2:	4603      	mov	r3, r0
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d019      	beq.n	8005e1c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005dee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005df6:	4610      	mov	r0, r2
 8005df8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dfa:	e00f      	b.n	8005e1c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f000 fa93 	bl	8006328 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e02:	e00b      	b.n	8005e1c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f000 fa8f 	bl	8006328 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e0a:	e007      	b.n	8005e1c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f000 fa8b 	bl	8006328 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2200      	movs	r2, #0
 8005e16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8005e1a:	e26f      	b.n	80062fc <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e1c:	bf00      	nop
    return;
 8005e1e:	e26d      	b.n	80062fc <HAL_UART_IRQHandler+0x794>
 8005e20:	10000001 	.word	0x10000001
 8005e24:	04000120 	.word	0x04000120
 8005e28:	08007265 	.word	0x08007265

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	f040 8203 	bne.w	800623c <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e3a:	f003 0310 	and.w	r3, r3, #16
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	f000 81fc 	beq.w	800623c <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005e44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e48:	f003 0310 	and.w	r3, r3, #16
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	f000 81f5 	beq.w	800623c <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	2210      	movs	r2, #16
 8005e58:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e64:	2b40      	cmp	r3, #64	@ 0x40
 8005e66:	f040 816d 	bne.w	8006144 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4aa4      	ldr	r2, [pc, #656]	@ (8006104 <HAL_UART_IRQHandler+0x59c>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d068      	beq.n	8005f4a <HAL_UART_IRQHandler+0x3e2>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4aa1      	ldr	r2, [pc, #644]	@ (8006108 <HAL_UART_IRQHandler+0x5a0>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d061      	beq.n	8005f4a <HAL_UART_IRQHandler+0x3e2>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a9f      	ldr	r2, [pc, #636]	@ (800610c <HAL_UART_IRQHandler+0x5a4>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d05a      	beq.n	8005f4a <HAL_UART_IRQHandler+0x3e2>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a9c      	ldr	r2, [pc, #624]	@ (8006110 <HAL_UART_IRQHandler+0x5a8>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d053      	beq.n	8005f4a <HAL_UART_IRQHandler+0x3e2>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a9a      	ldr	r2, [pc, #616]	@ (8006114 <HAL_UART_IRQHandler+0x5ac>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d04c      	beq.n	8005f4a <HAL_UART_IRQHandler+0x3e2>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a97      	ldr	r2, [pc, #604]	@ (8006118 <HAL_UART_IRQHandler+0x5b0>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d045      	beq.n	8005f4a <HAL_UART_IRQHandler+0x3e2>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a95      	ldr	r2, [pc, #596]	@ (800611c <HAL_UART_IRQHandler+0x5b4>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d03e      	beq.n	8005f4a <HAL_UART_IRQHandler+0x3e2>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a92      	ldr	r2, [pc, #584]	@ (8006120 <HAL_UART_IRQHandler+0x5b8>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d037      	beq.n	8005f4a <HAL_UART_IRQHandler+0x3e2>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a90      	ldr	r2, [pc, #576]	@ (8006124 <HAL_UART_IRQHandler+0x5bc>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d030      	beq.n	8005f4a <HAL_UART_IRQHandler+0x3e2>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a8d      	ldr	r2, [pc, #564]	@ (8006128 <HAL_UART_IRQHandler+0x5c0>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d029      	beq.n	8005f4a <HAL_UART_IRQHandler+0x3e2>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a8b      	ldr	r2, [pc, #556]	@ (800612c <HAL_UART_IRQHandler+0x5c4>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d022      	beq.n	8005f4a <HAL_UART_IRQHandler+0x3e2>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a88      	ldr	r2, [pc, #544]	@ (8006130 <HAL_UART_IRQHandler+0x5c8>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d01b      	beq.n	8005f4a <HAL_UART_IRQHandler+0x3e2>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a86      	ldr	r2, [pc, #536]	@ (8006134 <HAL_UART_IRQHandler+0x5cc>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d014      	beq.n	8005f4a <HAL_UART_IRQHandler+0x3e2>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a83      	ldr	r2, [pc, #524]	@ (8006138 <HAL_UART_IRQHandler+0x5d0>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d00d      	beq.n	8005f4a <HAL_UART_IRQHandler+0x3e2>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a81      	ldr	r2, [pc, #516]	@ (800613c <HAL_UART_IRQHandler+0x5d4>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d006      	beq.n	8005f4a <HAL_UART_IRQHandler+0x3e2>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a7e      	ldr	r2, [pc, #504]	@ (8006140 <HAL_UART_IRQHandler+0x5d8>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d106      	bne.n	8005f58 <HAL_UART_IRQHandler+0x3f0>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	e005      	b.n	8005f64 <HAL_UART_IRQHandler+0x3fc>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005f68:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	f000 80ad 	beq.w	80060cc <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005f78:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	f080 80a5 	bcs.w	80060cc <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005f88:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f92:	69db      	ldr	r3, [r3, #28]
 8005f94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f98:	f000 8087 	beq.w	80060aa <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005fa8:	e853 3f00 	ldrex	r3, [r3]
 8005fac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005fb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005fb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005fb8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005fc6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005fca:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fce:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005fd2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005fd6:	e841 2300 	strex	r3, r2, [r1]
 8005fda:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005fde:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d1da      	bne.n	8005f9c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	3308      	adds	r3, #8
 8005fec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ff0:	e853 3f00 	ldrex	r3, [r3]
 8005ff4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005ff6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005ff8:	f023 0301 	bic.w	r3, r3, #1
 8005ffc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	3308      	adds	r3, #8
 8006006:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800600a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800600e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006010:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006012:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006016:	e841 2300 	strex	r3, r2, [r1]
 800601a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800601c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800601e:	2b00      	cmp	r3, #0
 8006020:	d1e1      	bne.n	8005fe6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	3308      	adds	r3, #8
 8006028:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800602a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800602c:	e853 3f00 	ldrex	r3, [r3]
 8006030:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006032:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006034:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006038:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	3308      	adds	r3, #8
 8006042:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006046:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006048:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800604a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800604c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800604e:	e841 2300 	strex	r3, r2, [r1]
 8006052:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006054:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006056:	2b00      	cmp	r3, #0
 8006058:	d1e3      	bne.n	8006022 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2220      	movs	r2, #32
 800605e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800606e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006070:	e853 3f00 	ldrex	r3, [r3]
 8006074:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006076:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006078:	f023 0310 	bic.w	r3, r3, #16
 800607c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	461a      	mov	r2, r3
 8006086:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800608a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800608c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800608e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006090:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006092:	e841 2300 	strex	r3, r2, [r1]
 8006096:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006098:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800609a:	2b00      	cmp	r3, #0
 800609c:	d1e4      	bne.n	8006068 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060a4:	4618      	mov	r0, r3
 80060a6:	f7fb f9dd 	bl	8001464 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2202      	movs	r2, #2
 80060ae:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80060bc:	b29b      	uxth	r3, r3
 80060be:	1ad3      	subs	r3, r2, r3
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	4619      	mov	r1, r3
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f000 f939 	bl	800633c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80060ca:	e119      	b.n	8006300 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80060d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80060d6:	429a      	cmp	r2, r3
 80060d8:	f040 8112 	bne.w	8006300 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060e2:	69db      	ldr	r3, [r3, #28]
 80060e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060e8:	f040 810a 	bne.w	8006300 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2202      	movs	r2, #2
 80060f0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80060f8:	4619      	mov	r1, r3
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 f91e 	bl	800633c <HAL_UARTEx_RxEventCallback>
      return;
 8006100:	e0fe      	b.n	8006300 <HAL_UART_IRQHandler+0x798>
 8006102:	bf00      	nop
 8006104:	40020010 	.word	0x40020010
 8006108:	40020028 	.word	0x40020028
 800610c:	40020040 	.word	0x40020040
 8006110:	40020058 	.word	0x40020058
 8006114:	40020070 	.word	0x40020070
 8006118:	40020088 	.word	0x40020088
 800611c:	400200a0 	.word	0x400200a0
 8006120:	400200b8 	.word	0x400200b8
 8006124:	40020410 	.word	0x40020410
 8006128:	40020428 	.word	0x40020428
 800612c:	40020440 	.word	0x40020440
 8006130:	40020458 	.word	0x40020458
 8006134:	40020470 	.word	0x40020470
 8006138:	40020488 	.word	0x40020488
 800613c:	400204a0 	.word	0x400204a0
 8006140:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006150:	b29b      	uxth	r3, r3
 8006152:	1ad3      	subs	r3, r2, r3
 8006154:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800615e:	b29b      	uxth	r3, r3
 8006160:	2b00      	cmp	r3, #0
 8006162:	f000 80cf 	beq.w	8006304 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8006166:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800616a:	2b00      	cmp	r3, #0
 800616c:	f000 80ca 	beq.w	8006304 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006178:	e853 3f00 	ldrex	r3, [r3]
 800617c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800617e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006180:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006184:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	461a      	mov	r2, r3
 800618e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006192:	647b      	str	r3, [r7, #68]	@ 0x44
 8006194:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006196:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006198:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800619a:	e841 2300 	strex	r3, r2, [r1]
 800619e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80061a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d1e4      	bne.n	8006170 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	3308      	adds	r3, #8
 80061ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b0:	e853 3f00 	ldrex	r3, [r3]
 80061b4:	623b      	str	r3, [r7, #32]
   return(result);
 80061b6:	6a3a      	ldr	r2, [r7, #32]
 80061b8:	4b55      	ldr	r3, [pc, #340]	@ (8006310 <HAL_UART_IRQHandler+0x7a8>)
 80061ba:	4013      	ands	r3, r2
 80061bc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	3308      	adds	r3, #8
 80061c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80061ca:	633a      	str	r2, [r7, #48]	@ 0x30
 80061cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80061d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061d2:	e841 2300 	strex	r3, r2, [r1]
 80061d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80061d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d1e3      	bne.n	80061a6 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2220      	movs	r2, #32
 80061e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2200      	movs	r2, #0
 80061ea:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2200      	movs	r2, #0
 80061f0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	e853 3f00 	ldrex	r3, [r3]
 80061fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f023 0310 	bic.w	r3, r3, #16
 8006206:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	461a      	mov	r2, r3
 8006210:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006214:	61fb      	str	r3, [r7, #28]
 8006216:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006218:	69b9      	ldr	r1, [r7, #24]
 800621a:	69fa      	ldr	r2, [r7, #28]
 800621c:	e841 2300 	strex	r3, r2, [r1]
 8006220:	617b      	str	r3, [r7, #20]
   return(result);
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d1e4      	bne.n	80061f2 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2202      	movs	r2, #2
 800622c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800622e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006232:	4619      	mov	r1, r3
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f000 f881 	bl	800633c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800623a:	e063      	b.n	8006304 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800623c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006240:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006244:	2b00      	cmp	r3, #0
 8006246:	d00e      	beq.n	8006266 <HAL_UART_IRQHandler+0x6fe>
 8006248:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800624c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006250:	2b00      	cmp	r3, #0
 8006252:	d008      	beq.n	8006266 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800625c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f001 f83d 	bl	80072de <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006264:	e051      	b.n	800630a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800626a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800626e:	2b00      	cmp	r3, #0
 8006270:	d014      	beq.n	800629c <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006272:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006276:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800627a:	2b00      	cmp	r3, #0
 800627c:	d105      	bne.n	800628a <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800627e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006282:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006286:	2b00      	cmp	r3, #0
 8006288:	d008      	beq.n	800629c <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800628e:	2b00      	cmp	r3, #0
 8006290:	d03a      	beq.n	8006308 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	4798      	blx	r3
    }
    return;
 800629a:	e035      	b.n	8006308 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800629c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d009      	beq.n	80062bc <HAL_UART_IRQHandler+0x754>
 80062a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d003      	beq.n	80062bc <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f000 ffe7 	bl	8007288 <UART_EndTransmit_IT>
    return;
 80062ba:	e026      	b.n	800630a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80062bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d009      	beq.n	80062dc <HAL_UART_IRQHandler+0x774>
 80062c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062cc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d003      	beq.n	80062dc <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f001 f816 	bl	8007306 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80062da:	e016      	b.n	800630a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80062dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d010      	beq.n	800630a <HAL_UART_IRQHandler+0x7a2>
 80062e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	da0c      	bge.n	800630a <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f000 fffe 	bl	80072f2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80062f6:	e008      	b.n	800630a <HAL_UART_IRQHandler+0x7a2>
      return;
 80062f8:	bf00      	nop
 80062fa:	e006      	b.n	800630a <HAL_UART_IRQHandler+0x7a2>
    return;
 80062fc:	bf00      	nop
 80062fe:	e004      	b.n	800630a <HAL_UART_IRQHandler+0x7a2>
      return;
 8006300:	bf00      	nop
 8006302:	e002      	b.n	800630a <HAL_UART_IRQHandler+0x7a2>
      return;
 8006304:	bf00      	nop
 8006306:	e000      	b.n	800630a <HAL_UART_IRQHandler+0x7a2>
    return;
 8006308:	bf00      	nop
  }
}
 800630a:	37e8      	adds	r7, #232	@ 0xe8
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}
 8006310:	effffffe 	.word	0xeffffffe

08006314 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800631c:	bf00      	nop
 800631e:	370c      	adds	r7, #12
 8006320:	46bd      	mov	sp, r7
 8006322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006326:	4770      	bx	lr

08006328 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006328:	b480      	push	{r7}
 800632a:	b083      	sub	sp, #12
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006330:	bf00      	nop
 8006332:	370c      	adds	r7, #12
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr

0800633c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800633c:	b480      	push	{r7}
 800633e:	b083      	sub	sp, #12
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	460b      	mov	r3, r1
 8006346:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006348:	bf00      	nop
 800634a:	370c      	adds	r7, #12
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr

08006354 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006354:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006358:	b092      	sub	sp, #72	@ 0x48
 800635a:	af00      	add	r7, sp, #0
 800635c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800635e:	2300      	movs	r3, #0
 8006360:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	689a      	ldr	r2, [r3, #8]
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	431a      	orrs	r2, r3
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	695b      	ldr	r3, [r3, #20]
 8006372:	431a      	orrs	r2, r3
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	69db      	ldr	r3, [r3, #28]
 8006378:	4313      	orrs	r3, r2
 800637a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	4bbe      	ldr	r3, [pc, #760]	@ (800667c <UART_SetConfig+0x328>)
 8006384:	4013      	ands	r3, r2
 8006386:	697a      	ldr	r2, [r7, #20]
 8006388:	6812      	ldr	r2, [r2, #0]
 800638a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800638c:	430b      	orrs	r3, r1
 800638e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	68da      	ldr	r2, [r3, #12]
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	430a      	orrs	r2, r1
 80063a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	699b      	ldr	r3, [r3, #24]
 80063aa:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4ab3      	ldr	r2, [pc, #716]	@ (8006680 <UART_SetConfig+0x32c>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d004      	beq.n	80063c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	6a1b      	ldr	r3, [r3, #32]
 80063ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80063bc:	4313      	orrs	r3, r2
 80063be:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	689a      	ldr	r2, [r3, #8]
 80063c6:	4baf      	ldr	r3, [pc, #700]	@ (8006684 <UART_SetConfig+0x330>)
 80063c8:	4013      	ands	r3, r2
 80063ca:	697a      	ldr	r2, [r7, #20]
 80063cc:	6812      	ldr	r2, [r2, #0]
 80063ce:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80063d0:	430b      	orrs	r3, r1
 80063d2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063da:	f023 010f 	bic.w	r1, r3, #15
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	430a      	orrs	r2, r1
 80063e8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4aa6      	ldr	r2, [pc, #664]	@ (8006688 <UART_SetConfig+0x334>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d177      	bne.n	80064e4 <UART_SetConfig+0x190>
 80063f4:	4ba5      	ldr	r3, [pc, #660]	@ (800668c <UART_SetConfig+0x338>)
 80063f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063f8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80063fc:	2b28      	cmp	r3, #40	@ 0x28
 80063fe:	d86d      	bhi.n	80064dc <UART_SetConfig+0x188>
 8006400:	a201      	add	r2, pc, #4	@ (adr r2, 8006408 <UART_SetConfig+0xb4>)
 8006402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006406:	bf00      	nop
 8006408:	080064ad 	.word	0x080064ad
 800640c:	080064dd 	.word	0x080064dd
 8006410:	080064dd 	.word	0x080064dd
 8006414:	080064dd 	.word	0x080064dd
 8006418:	080064dd 	.word	0x080064dd
 800641c:	080064dd 	.word	0x080064dd
 8006420:	080064dd 	.word	0x080064dd
 8006424:	080064dd 	.word	0x080064dd
 8006428:	080064b5 	.word	0x080064b5
 800642c:	080064dd 	.word	0x080064dd
 8006430:	080064dd 	.word	0x080064dd
 8006434:	080064dd 	.word	0x080064dd
 8006438:	080064dd 	.word	0x080064dd
 800643c:	080064dd 	.word	0x080064dd
 8006440:	080064dd 	.word	0x080064dd
 8006444:	080064dd 	.word	0x080064dd
 8006448:	080064bd 	.word	0x080064bd
 800644c:	080064dd 	.word	0x080064dd
 8006450:	080064dd 	.word	0x080064dd
 8006454:	080064dd 	.word	0x080064dd
 8006458:	080064dd 	.word	0x080064dd
 800645c:	080064dd 	.word	0x080064dd
 8006460:	080064dd 	.word	0x080064dd
 8006464:	080064dd 	.word	0x080064dd
 8006468:	080064c5 	.word	0x080064c5
 800646c:	080064dd 	.word	0x080064dd
 8006470:	080064dd 	.word	0x080064dd
 8006474:	080064dd 	.word	0x080064dd
 8006478:	080064dd 	.word	0x080064dd
 800647c:	080064dd 	.word	0x080064dd
 8006480:	080064dd 	.word	0x080064dd
 8006484:	080064dd 	.word	0x080064dd
 8006488:	080064cd 	.word	0x080064cd
 800648c:	080064dd 	.word	0x080064dd
 8006490:	080064dd 	.word	0x080064dd
 8006494:	080064dd 	.word	0x080064dd
 8006498:	080064dd 	.word	0x080064dd
 800649c:	080064dd 	.word	0x080064dd
 80064a0:	080064dd 	.word	0x080064dd
 80064a4:	080064dd 	.word	0x080064dd
 80064a8:	080064d5 	.word	0x080064d5
 80064ac:	2301      	movs	r3, #1
 80064ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064b2:	e222      	b.n	80068fa <UART_SetConfig+0x5a6>
 80064b4:	2304      	movs	r3, #4
 80064b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064ba:	e21e      	b.n	80068fa <UART_SetConfig+0x5a6>
 80064bc:	2308      	movs	r3, #8
 80064be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064c2:	e21a      	b.n	80068fa <UART_SetConfig+0x5a6>
 80064c4:	2310      	movs	r3, #16
 80064c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064ca:	e216      	b.n	80068fa <UART_SetConfig+0x5a6>
 80064cc:	2320      	movs	r3, #32
 80064ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064d2:	e212      	b.n	80068fa <UART_SetConfig+0x5a6>
 80064d4:	2340      	movs	r3, #64	@ 0x40
 80064d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064da:	e20e      	b.n	80068fa <UART_SetConfig+0x5a6>
 80064dc:	2380      	movs	r3, #128	@ 0x80
 80064de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064e2:	e20a      	b.n	80068fa <UART_SetConfig+0x5a6>
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a69      	ldr	r2, [pc, #420]	@ (8006690 <UART_SetConfig+0x33c>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d130      	bne.n	8006550 <UART_SetConfig+0x1fc>
 80064ee:	4b67      	ldr	r3, [pc, #412]	@ (800668c <UART_SetConfig+0x338>)
 80064f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064f2:	f003 0307 	and.w	r3, r3, #7
 80064f6:	2b05      	cmp	r3, #5
 80064f8:	d826      	bhi.n	8006548 <UART_SetConfig+0x1f4>
 80064fa:	a201      	add	r2, pc, #4	@ (adr r2, 8006500 <UART_SetConfig+0x1ac>)
 80064fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006500:	08006519 	.word	0x08006519
 8006504:	08006521 	.word	0x08006521
 8006508:	08006529 	.word	0x08006529
 800650c:	08006531 	.word	0x08006531
 8006510:	08006539 	.word	0x08006539
 8006514:	08006541 	.word	0x08006541
 8006518:	2300      	movs	r3, #0
 800651a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800651e:	e1ec      	b.n	80068fa <UART_SetConfig+0x5a6>
 8006520:	2304      	movs	r3, #4
 8006522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006526:	e1e8      	b.n	80068fa <UART_SetConfig+0x5a6>
 8006528:	2308      	movs	r3, #8
 800652a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800652e:	e1e4      	b.n	80068fa <UART_SetConfig+0x5a6>
 8006530:	2310      	movs	r3, #16
 8006532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006536:	e1e0      	b.n	80068fa <UART_SetConfig+0x5a6>
 8006538:	2320      	movs	r3, #32
 800653a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800653e:	e1dc      	b.n	80068fa <UART_SetConfig+0x5a6>
 8006540:	2340      	movs	r3, #64	@ 0x40
 8006542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006546:	e1d8      	b.n	80068fa <UART_SetConfig+0x5a6>
 8006548:	2380      	movs	r3, #128	@ 0x80
 800654a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800654e:	e1d4      	b.n	80068fa <UART_SetConfig+0x5a6>
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a4f      	ldr	r2, [pc, #316]	@ (8006694 <UART_SetConfig+0x340>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d130      	bne.n	80065bc <UART_SetConfig+0x268>
 800655a:	4b4c      	ldr	r3, [pc, #304]	@ (800668c <UART_SetConfig+0x338>)
 800655c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800655e:	f003 0307 	and.w	r3, r3, #7
 8006562:	2b05      	cmp	r3, #5
 8006564:	d826      	bhi.n	80065b4 <UART_SetConfig+0x260>
 8006566:	a201      	add	r2, pc, #4	@ (adr r2, 800656c <UART_SetConfig+0x218>)
 8006568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800656c:	08006585 	.word	0x08006585
 8006570:	0800658d 	.word	0x0800658d
 8006574:	08006595 	.word	0x08006595
 8006578:	0800659d 	.word	0x0800659d
 800657c:	080065a5 	.word	0x080065a5
 8006580:	080065ad 	.word	0x080065ad
 8006584:	2300      	movs	r3, #0
 8006586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800658a:	e1b6      	b.n	80068fa <UART_SetConfig+0x5a6>
 800658c:	2304      	movs	r3, #4
 800658e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006592:	e1b2      	b.n	80068fa <UART_SetConfig+0x5a6>
 8006594:	2308      	movs	r3, #8
 8006596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800659a:	e1ae      	b.n	80068fa <UART_SetConfig+0x5a6>
 800659c:	2310      	movs	r3, #16
 800659e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065a2:	e1aa      	b.n	80068fa <UART_SetConfig+0x5a6>
 80065a4:	2320      	movs	r3, #32
 80065a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065aa:	e1a6      	b.n	80068fa <UART_SetConfig+0x5a6>
 80065ac:	2340      	movs	r3, #64	@ 0x40
 80065ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065b2:	e1a2      	b.n	80068fa <UART_SetConfig+0x5a6>
 80065b4:	2380      	movs	r3, #128	@ 0x80
 80065b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065ba:	e19e      	b.n	80068fa <UART_SetConfig+0x5a6>
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a35      	ldr	r2, [pc, #212]	@ (8006698 <UART_SetConfig+0x344>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d130      	bne.n	8006628 <UART_SetConfig+0x2d4>
 80065c6:	4b31      	ldr	r3, [pc, #196]	@ (800668c <UART_SetConfig+0x338>)
 80065c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065ca:	f003 0307 	and.w	r3, r3, #7
 80065ce:	2b05      	cmp	r3, #5
 80065d0:	d826      	bhi.n	8006620 <UART_SetConfig+0x2cc>
 80065d2:	a201      	add	r2, pc, #4	@ (adr r2, 80065d8 <UART_SetConfig+0x284>)
 80065d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d8:	080065f1 	.word	0x080065f1
 80065dc:	080065f9 	.word	0x080065f9
 80065e0:	08006601 	.word	0x08006601
 80065e4:	08006609 	.word	0x08006609
 80065e8:	08006611 	.word	0x08006611
 80065ec:	08006619 	.word	0x08006619
 80065f0:	2300      	movs	r3, #0
 80065f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065f6:	e180      	b.n	80068fa <UART_SetConfig+0x5a6>
 80065f8:	2304      	movs	r3, #4
 80065fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065fe:	e17c      	b.n	80068fa <UART_SetConfig+0x5a6>
 8006600:	2308      	movs	r3, #8
 8006602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006606:	e178      	b.n	80068fa <UART_SetConfig+0x5a6>
 8006608:	2310      	movs	r3, #16
 800660a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800660e:	e174      	b.n	80068fa <UART_SetConfig+0x5a6>
 8006610:	2320      	movs	r3, #32
 8006612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006616:	e170      	b.n	80068fa <UART_SetConfig+0x5a6>
 8006618:	2340      	movs	r3, #64	@ 0x40
 800661a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800661e:	e16c      	b.n	80068fa <UART_SetConfig+0x5a6>
 8006620:	2380      	movs	r3, #128	@ 0x80
 8006622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006626:	e168      	b.n	80068fa <UART_SetConfig+0x5a6>
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a1b      	ldr	r2, [pc, #108]	@ (800669c <UART_SetConfig+0x348>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d142      	bne.n	80066b8 <UART_SetConfig+0x364>
 8006632:	4b16      	ldr	r3, [pc, #88]	@ (800668c <UART_SetConfig+0x338>)
 8006634:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006636:	f003 0307 	and.w	r3, r3, #7
 800663a:	2b05      	cmp	r3, #5
 800663c:	d838      	bhi.n	80066b0 <UART_SetConfig+0x35c>
 800663e:	a201      	add	r2, pc, #4	@ (adr r2, 8006644 <UART_SetConfig+0x2f0>)
 8006640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006644:	0800665d 	.word	0x0800665d
 8006648:	08006665 	.word	0x08006665
 800664c:	0800666d 	.word	0x0800666d
 8006650:	08006675 	.word	0x08006675
 8006654:	080066a1 	.word	0x080066a1
 8006658:	080066a9 	.word	0x080066a9
 800665c:	2300      	movs	r3, #0
 800665e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006662:	e14a      	b.n	80068fa <UART_SetConfig+0x5a6>
 8006664:	2304      	movs	r3, #4
 8006666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800666a:	e146      	b.n	80068fa <UART_SetConfig+0x5a6>
 800666c:	2308      	movs	r3, #8
 800666e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006672:	e142      	b.n	80068fa <UART_SetConfig+0x5a6>
 8006674:	2310      	movs	r3, #16
 8006676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800667a:	e13e      	b.n	80068fa <UART_SetConfig+0x5a6>
 800667c:	cfff69f3 	.word	0xcfff69f3
 8006680:	58000c00 	.word	0x58000c00
 8006684:	11fff4ff 	.word	0x11fff4ff
 8006688:	40011000 	.word	0x40011000
 800668c:	58024400 	.word	0x58024400
 8006690:	40004400 	.word	0x40004400
 8006694:	40004800 	.word	0x40004800
 8006698:	40004c00 	.word	0x40004c00
 800669c:	40005000 	.word	0x40005000
 80066a0:	2320      	movs	r3, #32
 80066a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066a6:	e128      	b.n	80068fa <UART_SetConfig+0x5a6>
 80066a8:	2340      	movs	r3, #64	@ 0x40
 80066aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066ae:	e124      	b.n	80068fa <UART_SetConfig+0x5a6>
 80066b0:	2380      	movs	r3, #128	@ 0x80
 80066b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066b6:	e120      	b.n	80068fa <UART_SetConfig+0x5a6>
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4acb      	ldr	r2, [pc, #812]	@ (80069ec <UART_SetConfig+0x698>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d176      	bne.n	80067b0 <UART_SetConfig+0x45c>
 80066c2:	4bcb      	ldr	r3, [pc, #812]	@ (80069f0 <UART_SetConfig+0x69c>)
 80066c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80066ca:	2b28      	cmp	r3, #40	@ 0x28
 80066cc:	d86c      	bhi.n	80067a8 <UART_SetConfig+0x454>
 80066ce:	a201      	add	r2, pc, #4	@ (adr r2, 80066d4 <UART_SetConfig+0x380>)
 80066d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d4:	08006779 	.word	0x08006779
 80066d8:	080067a9 	.word	0x080067a9
 80066dc:	080067a9 	.word	0x080067a9
 80066e0:	080067a9 	.word	0x080067a9
 80066e4:	080067a9 	.word	0x080067a9
 80066e8:	080067a9 	.word	0x080067a9
 80066ec:	080067a9 	.word	0x080067a9
 80066f0:	080067a9 	.word	0x080067a9
 80066f4:	08006781 	.word	0x08006781
 80066f8:	080067a9 	.word	0x080067a9
 80066fc:	080067a9 	.word	0x080067a9
 8006700:	080067a9 	.word	0x080067a9
 8006704:	080067a9 	.word	0x080067a9
 8006708:	080067a9 	.word	0x080067a9
 800670c:	080067a9 	.word	0x080067a9
 8006710:	080067a9 	.word	0x080067a9
 8006714:	08006789 	.word	0x08006789
 8006718:	080067a9 	.word	0x080067a9
 800671c:	080067a9 	.word	0x080067a9
 8006720:	080067a9 	.word	0x080067a9
 8006724:	080067a9 	.word	0x080067a9
 8006728:	080067a9 	.word	0x080067a9
 800672c:	080067a9 	.word	0x080067a9
 8006730:	080067a9 	.word	0x080067a9
 8006734:	08006791 	.word	0x08006791
 8006738:	080067a9 	.word	0x080067a9
 800673c:	080067a9 	.word	0x080067a9
 8006740:	080067a9 	.word	0x080067a9
 8006744:	080067a9 	.word	0x080067a9
 8006748:	080067a9 	.word	0x080067a9
 800674c:	080067a9 	.word	0x080067a9
 8006750:	080067a9 	.word	0x080067a9
 8006754:	08006799 	.word	0x08006799
 8006758:	080067a9 	.word	0x080067a9
 800675c:	080067a9 	.word	0x080067a9
 8006760:	080067a9 	.word	0x080067a9
 8006764:	080067a9 	.word	0x080067a9
 8006768:	080067a9 	.word	0x080067a9
 800676c:	080067a9 	.word	0x080067a9
 8006770:	080067a9 	.word	0x080067a9
 8006774:	080067a1 	.word	0x080067a1
 8006778:	2301      	movs	r3, #1
 800677a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800677e:	e0bc      	b.n	80068fa <UART_SetConfig+0x5a6>
 8006780:	2304      	movs	r3, #4
 8006782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006786:	e0b8      	b.n	80068fa <UART_SetConfig+0x5a6>
 8006788:	2308      	movs	r3, #8
 800678a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800678e:	e0b4      	b.n	80068fa <UART_SetConfig+0x5a6>
 8006790:	2310      	movs	r3, #16
 8006792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006796:	e0b0      	b.n	80068fa <UART_SetConfig+0x5a6>
 8006798:	2320      	movs	r3, #32
 800679a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800679e:	e0ac      	b.n	80068fa <UART_SetConfig+0x5a6>
 80067a0:	2340      	movs	r3, #64	@ 0x40
 80067a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067a6:	e0a8      	b.n	80068fa <UART_SetConfig+0x5a6>
 80067a8:	2380      	movs	r3, #128	@ 0x80
 80067aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067ae:	e0a4      	b.n	80068fa <UART_SetConfig+0x5a6>
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a8f      	ldr	r2, [pc, #572]	@ (80069f4 <UART_SetConfig+0x6a0>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d130      	bne.n	800681c <UART_SetConfig+0x4c8>
 80067ba:	4b8d      	ldr	r3, [pc, #564]	@ (80069f0 <UART_SetConfig+0x69c>)
 80067bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067be:	f003 0307 	and.w	r3, r3, #7
 80067c2:	2b05      	cmp	r3, #5
 80067c4:	d826      	bhi.n	8006814 <UART_SetConfig+0x4c0>
 80067c6:	a201      	add	r2, pc, #4	@ (adr r2, 80067cc <UART_SetConfig+0x478>)
 80067c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067cc:	080067e5 	.word	0x080067e5
 80067d0:	080067ed 	.word	0x080067ed
 80067d4:	080067f5 	.word	0x080067f5
 80067d8:	080067fd 	.word	0x080067fd
 80067dc:	08006805 	.word	0x08006805
 80067e0:	0800680d 	.word	0x0800680d
 80067e4:	2300      	movs	r3, #0
 80067e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067ea:	e086      	b.n	80068fa <UART_SetConfig+0x5a6>
 80067ec:	2304      	movs	r3, #4
 80067ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067f2:	e082      	b.n	80068fa <UART_SetConfig+0x5a6>
 80067f4:	2308      	movs	r3, #8
 80067f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067fa:	e07e      	b.n	80068fa <UART_SetConfig+0x5a6>
 80067fc:	2310      	movs	r3, #16
 80067fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006802:	e07a      	b.n	80068fa <UART_SetConfig+0x5a6>
 8006804:	2320      	movs	r3, #32
 8006806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800680a:	e076      	b.n	80068fa <UART_SetConfig+0x5a6>
 800680c:	2340      	movs	r3, #64	@ 0x40
 800680e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006812:	e072      	b.n	80068fa <UART_SetConfig+0x5a6>
 8006814:	2380      	movs	r3, #128	@ 0x80
 8006816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800681a:	e06e      	b.n	80068fa <UART_SetConfig+0x5a6>
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a75      	ldr	r2, [pc, #468]	@ (80069f8 <UART_SetConfig+0x6a4>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d130      	bne.n	8006888 <UART_SetConfig+0x534>
 8006826:	4b72      	ldr	r3, [pc, #456]	@ (80069f0 <UART_SetConfig+0x69c>)
 8006828:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800682a:	f003 0307 	and.w	r3, r3, #7
 800682e:	2b05      	cmp	r3, #5
 8006830:	d826      	bhi.n	8006880 <UART_SetConfig+0x52c>
 8006832:	a201      	add	r2, pc, #4	@ (adr r2, 8006838 <UART_SetConfig+0x4e4>)
 8006834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006838:	08006851 	.word	0x08006851
 800683c:	08006859 	.word	0x08006859
 8006840:	08006861 	.word	0x08006861
 8006844:	08006869 	.word	0x08006869
 8006848:	08006871 	.word	0x08006871
 800684c:	08006879 	.word	0x08006879
 8006850:	2300      	movs	r3, #0
 8006852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006856:	e050      	b.n	80068fa <UART_SetConfig+0x5a6>
 8006858:	2304      	movs	r3, #4
 800685a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800685e:	e04c      	b.n	80068fa <UART_SetConfig+0x5a6>
 8006860:	2308      	movs	r3, #8
 8006862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006866:	e048      	b.n	80068fa <UART_SetConfig+0x5a6>
 8006868:	2310      	movs	r3, #16
 800686a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800686e:	e044      	b.n	80068fa <UART_SetConfig+0x5a6>
 8006870:	2320      	movs	r3, #32
 8006872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006876:	e040      	b.n	80068fa <UART_SetConfig+0x5a6>
 8006878:	2340      	movs	r3, #64	@ 0x40
 800687a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800687e:	e03c      	b.n	80068fa <UART_SetConfig+0x5a6>
 8006880:	2380      	movs	r3, #128	@ 0x80
 8006882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006886:	e038      	b.n	80068fa <UART_SetConfig+0x5a6>
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a5b      	ldr	r2, [pc, #364]	@ (80069fc <UART_SetConfig+0x6a8>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d130      	bne.n	80068f4 <UART_SetConfig+0x5a0>
 8006892:	4b57      	ldr	r3, [pc, #348]	@ (80069f0 <UART_SetConfig+0x69c>)
 8006894:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006896:	f003 0307 	and.w	r3, r3, #7
 800689a:	2b05      	cmp	r3, #5
 800689c:	d826      	bhi.n	80068ec <UART_SetConfig+0x598>
 800689e:	a201      	add	r2, pc, #4	@ (adr r2, 80068a4 <UART_SetConfig+0x550>)
 80068a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068a4:	080068bd 	.word	0x080068bd
 80068a8:	080068c5 	.word	0x080068c5
 80068ac:	080068cd 	.word	0x080068cd
 80068b0:	080068d5 	.word	0x080068d5
 80068b4:	080068dd 	.word	0x080068dd
 80068b8:	080068e5 	.word	0x080068e5
 80068bc:	2302      	movs	r3, #2
 80068be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068c2:	e01a      	b.n	80068fa <UART_SetConfig+0x5a6>
 80068c4:	2304      	movs	r3, #4
 80068c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068ca:	e016      	b.n	80068fa <UART_SetConfig+0x5a6>
 80068cc:	2308      	movs	r3, #8
 80068ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068d2:	e012      	b.n	80068fa <UART_SetConfig+0x5a6>
 80068d4:	2310      	movs	r3, #16
 80068d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068da:	e00e      	b.n	80068fa <UART_SetConfig+0x5a6>
 80068dc:	2320      	movs	r3, #32
 80068de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068e2:	e00a      	b.n	80068fa <UART_SetConfig+0x5a6>
 80068e4:	2340      	movs	r3, #64	@ 0x40
 80068e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068ea:	e006      	b.n	80068fa <UART_SetConfig+0x5a6>
 80068ec:	2380      	movs	r3, #128	@ 0x80
 80068ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068f2:	e002      	b.n	80068fa <UART_SetConfig+0x5a6>
 80068f4:	2380      	movs	r3, #128	@ 0x80
 80068f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a3f      	ldr	r2, [pc, #252]	@ (80069fc <UART_SetConfig+0x6a8>)
 8006900:	4293      	cmp	r3, r2
 8006902:	f040 80f8 	bne.w	8006af6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006906:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800690a:	2b20      	cmp	r3, #32
 800690c:	dc46      	bgt.n	800699c <UART_SetConfig+0x648>
 800690e:	2b02      	cmp	r3, #2
 8006910:	f2c0 8082 	blt.w	8006a18 <UART_SetConfig+0x6c4>
 8006914:	3b02      	subs	r3, #2
 8006916:	2b1e      	cmp	r3, #30
 8006918:	d87e      	bhi.n	8006a18 <UART_SetConfig+0x6c4>
 800691a:	a201      	add	r2, pc, #4	@ (adr r2, 8006920 <UART_SetConfig+0x5cc>)
 800691c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006920:	080069a3 	.word	0x080069a3
 8006924:	08006a19 	.word	0x08006a19
 8006928:	080069ab 	.word	0x080069ab
 800692c:	08006a19 	.word	0x08006a19
 8006930:	08006a19 	.word	0x08006a19
 8006934:	08006a19 	.word	0x08006a19
 8006938:	080069bb 	.word	0x080069bb
 800693c:	08006a19 	.word	0x08006a19
 8006940:	08006a19 	.word	0x08006a19
 8006944:	08006a19 	.word	0x08006a19
 8006948:	08006a19 	.word	0x08006a19
 800694c:	08006a19 	.word	0x08006a19
 8006950:	08006a19 	.word	0x08006a19
 8006954:	08006a19 	.word	0x08006a19
 8006958:	080069cb 	.word	0x080069cb
 800695c:	08006a19 	.word	0x08006a19
 8006960:	08006a19 	.word	0x08006a19
 8006964:	08006a19 	.word	0x08006a19
 8006968:	08006a19 	.word	0x08006a19
 800696c:	08006a19 	.word	0x08006a19
 8006970:	08006a19 	.word	0x08006a19
 8006974:	08006a19 	.word	0x08006a19
 8006978:	08006a19 	.word	0x08006a19
 800697c:	08006a19 	.word	0x08006a19
 8006980:	08006a19 	.word	0x08006a19
 8006984:	08006a19 	.word	0x08006a19
 8006988:	08006a19 	.word	0x08006a19
 800698c:	08006a19 	.word	0x08006a19
 8006990:	08006a19 	.word	0x08006a19
 8006994:	08006a19 	.word	0x08006a19
 8006998:	08006a0b 	.word	0x08006a0b
 800699c:	2b40      	cmp	r3, #64	@ 0x40
 800699e:	d037      	beq.n	8006a10 <UART_SetConfig+0x6bc>
 80069a0:	e03a      	b.n	8006a18 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80069a2:	f7fd fef5 	bl	8004790 <HAL_RCCEx_GetD3PCLK1Freq>
 80069a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80069a8:	e03c      	b.n	8006a24 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80069ae:	4618      	mov	r0, r3
 80069b0:	f7fd ff04 	bl	80047bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80069b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069b8:	e034      	b.n	8006a24 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069ba:	f107 0318 	add.w	r3, r7, #24
 80069be:	4618      	mov	r0, r3
 80069c0:	f7fe f850 	bl	8004a64 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80069c4:	69fb      	ldr	r3, [r7, #28]
 80069c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069c8:	e02c      	b.n	8006a24 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80069ca:	4b09      	ldr	r3, [pc, #36]	@ (80069f0 <UART_SetConfig+0x69c>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f003 0320 	and.w	r3, r3, #32
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d016      	beq.n	8006a04 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80069d6:	4b06      	ldr	r3, [pc, #24]	@ (80069f0 <UART_SetConfig+0x69c>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	08db      	lsrs	r3, r3, #3
 80069dc:	f003 0303 	and.w	r3, r3, #3
 80069e0:	4a07      	ldr	r2, [pc, #28]	@ (8006a00 <UART_SetConfig+0x6ac>)
 80069e2:	fa22 f303 	lsr.w	r3, r2, r3
 80069e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80069e8:	e01c      	b.n	8006a24 <UART_SetConfig+0x6d0>
 80069ea:	bf00      	nop
 80069ec:	40011400 	.word	0x40011400
 80069f0:	58024400 	.word	0x58024400
 80069f4:	40007800 	.word	0x40007800
 80069f8:	40007c00 	.word	0x40007c00
 80069fc:	58000c00 	.word	0x58000c00
 8006a00:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006a04:	4b9d      	ldr	r3, [pc, #628]	@ (8006c7c <UART_SetConfig+0x928>)
 8006a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a08:	e00c      	b.n	8006a24 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006a0a:	4b9d      	ldr	r3, [pc, #628]	@ (8006c80 <UART_SetConfig+0x92c>)
 8006a0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a0e:	e009      	b.n	8006a24 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a10:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a16:	e005      	b.n	8006a24 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006a22:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006a24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	f000 81de 	beq.w	8006de8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a30:	4a94      	ldr	r2, [pc, #592]	@ (8006c84 <UART_SetConfig+0x930>)
 8006a32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a36:	461a      	mov	r2, r3
 8006a38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a3e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	685a      	ldr	r2, [r3, #4]
 8006a44:	4613      	mov	r3, r2
 8006a46:	005b      	lsls	r3, r3, #1
 8006a48:	4413      	add	r3, r2
 8006a4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d305      	bcc.n	8006a5c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d903      	bls.n	8006a64 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006a62:	e1c1      	b.n	8006de8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a66:	2200      	movs	r2, #0
 8006a68:	60bb      	str	r3, [r7, #8]
 8006a6a:	60fa      	str	r2, [r7, #12]
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a70:	4a84      	ldr	r2, [pc, #528]	@ (8006c84 <UART_SetConfig+0x930>)
 8006a72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	2200      	movs	r2, #0
 8006a7a:	603b      	str	r3, [r7, #0]
 8006a7c:	607a      	str	r2, [r7, #4]
 8006a7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a82:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006a86:	f7f9 fc27 	bl	80002d8 <__aeabi_uldivmod>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	460b      	mov	r3, r1
 8006a8e:	4610      	mov	r0, r2
 8006a90:	4619      	mov	r1, r3
 8006a92:	f04f 0200 	mov.w	r2, #0
 8006a96:	f04f 0300 	mov.w	r3, #0
 8006a9a:	020b      	lsls	r3, r1, #8
 8006a9c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006aa0:	0202      	lsls	r2, r0, #8
 8006aa2:	6979      	ldr	r1, [r7, #20]
 8006aa4:	6849      	ldr	r1, [r1, #4]
 8006aa6:	0849      	lsrs	r1, r1, #1
 8006aa8:	2000      	movs	r0, #0
 8006aaa:	460c      	mov	r4, r1
 8006aac:	4605      	mov	r5, r0
 8006aae:	eb12 0804 	adds.w	r8, r2, r4
 8006ab2:	eb43 0905 	adc.w	r9, r3, r5
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	2200      	movs	r2, #0
 8006abc:	469a      	mov	sl, r3
 8006abe:	4693      	mov	fp, r2
 8006ac0:	4652      	mov	r2, sl
 8006ac2:	465b      	mov	r3, fp
 8006ac4:	4640      	mov	r0, r8
 8006ac6:	4649      	mov	r1, r9
 8006ac8:	f7f9 fc06 	bl	80002d8 <__aeabi_uldivmod>
 8006acc:	4602      	mov	r2, r0
 8006ace:	460b      	mov	r3, r1
 8006ad0:	4613      	mov	r3, r2
 8006ad2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006ad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ad6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ada:	d308      	bcc.n	8006aee <UART_SetConfig+0x79a>
 8006adc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ade:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ae2:	d204      	bcs.n	8006aee <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006aea:	60da      	str	r2, [r3, #12]
 8006aec:	e17c      	b.n	8006de8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006af4:	e178      	b.n	8006de8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	69db      	ldr	r3, [r3, #28]
 8006afa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006afe:	f040 80c5 	bne.w	8006c8c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006b02:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006b06:	2b20      	cmp	r3, #32
 8006b08:	dc48      	bgt.n	8006b9c <UART_SetConfig+0x848>
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	db7b      	blt.n	8006c06 <UART_SetConfig+0x8b2>
 8006b0e:	2b20      	cmp	r3, #32
 8006b10:	d879      	bhi.n	8006c06 <UART_SetConfig+0x8b2>
 8006b12:	a201      	add	r2, pc, #4	@ (adr r2, 8006b18 <UART_SetConfig+0x7c4>)
 8006b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b18:	08006ba3 	.word	0x08006ba3
 8006b1c:	08006bab 	.word	0x08006bab
 8006b20:	08006c07 	.word	0x08006c07
 8006b24:	08006c07 	.word	0x08006c07
 8006b28:	08006bb3 	.word	0x08006bb3
 8006b2c:	08006c07 	.word	0x08006c07
 8006b30:	08006c07 	.word	0x08006c07
 8006b34:	08006c07 	.word	0x08006c07
 8006b38:	08006bc3 	.word	0x08006bc3
 8006b3c:	08006c07 	.word	0x08006c07
 8006b40:	08006c07 	.word	0x08006c07
 8006b44:	08006c07 	.word	0x08006c07
 8006b48:	08006c07 	.word	0x08006c07
 8006b4c:	08006c07 	.word	0x08006c07
 8006b50:	08006c07 	.word	0x08006c07
 8006b54:	08006c07 	.word	0x08006c07
 8006b58:	08006bd3 	.word	0x08006bd3
 8006b5c:	08006c07 	.word	0x08006c07
 8006b60:	08006c07 	.word	0x08006c07
 8006b64:	08006c07 	.word	0x08006c07
 8006b68:	08006c07 	.word	0x08006c07
 8006b6c:	08006c07 	.word	0x08006c07
 8006b70:	08006c07 	.word	0x08006c07
 8006b74:	08006c07 	.word	0x08006c07
 8006b78:	08006c07 	.word	0x08006c07
 8006b7c:	08006c07 	.word	0x08006c07
 8006b80:	08006c07 	.word	0x08006c07
 8006b84:	08006c07 	.word	0x08006c07
 8006b88:	08006c07 	.word	0x08006c07
 8006b8c:	08006c07 	.word	0x08006c07
 8006b90:	08006c07 	.word	0x08006c07
 8006b94:	08006c07 	.word	0x08006c07
 8006b98:	08006bf9 	.word	0x08006bf9
 8006b9c:	2b40      	cmp	r3, #64	@ 0x40
 8006b9e:	d02e      	beq.n	8006bfe <UART_SetConfig+0x8aa>
 8006ba0:	e031      	b.n	8006c06 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ba2:	f7fc fbbf 	bl	8003324 <HAL_RCC_GetPCLK1Freq>
 8006ba6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006ba8:	e033      	b.n	8006c12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006baa:	f7fc fbd1 	bl	8003350 <HAL_RCC_GetPCLK2Freq>
 8006bae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006bb0:	e02f      	b.n	8006c12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006bb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f7fd fe00 	bl	80047bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006bbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006bc0:	e027      	b.n	8006c12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006bc2:	f107 0318 	add.w	r3, r7, #24
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f7fd ff4c 	bl	8004a64 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006bcc:	69fb      	ldr	r3, [r7, #28]
 8006bce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006bd0:	e01f      	b.n	8006c12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006bd2:	4b2d      	ldr	r3, [pc, #180]	@ (8006c88 <UART_SetConfig+0x934>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f003 0320 	and.w	r3, r3, #32
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d009      	beq.n	8006bf2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006bde:	4b2a      	ldr	r3, [pc, #168]	@ (8006c88 <UART_SetConfig+0x934>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	08db      	lsrs	r3, r3, #3
 8006be4:	f003 0303 	and.w	r3, r3, #3
 8006be8:	4a24      	ldr	r2, [pc, #144]	@ (8006c7c <UART_SetConfig+0x928>)
 8006bea:	fa22 f303 	lsr.w	r3, r2, r3
 8006bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006bf0:	e00f      	b.n	8006c12 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006bf2:	4b22      	ldr	r3, [pc, #136]	@ (8006c7c <UART_SetConfig+0x928>)
 8006bf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006bf6:	e00c      	b.n	8006c12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006bf8:	4b21      	ldr	r3, [pc, #132]	@ (8006c80 <UART_SetConfig+0x92c>)
 8006bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006bfc:	e009      	b.n	8006c12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bfe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c04:	e005      	b.n	8006c12 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006c06:	2300      	movs	r3, #0
 8006c08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006c10:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	f000 80e7 	beq.w	8006de8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c1e:	4a19      	ldr	r2, [pc, #100]	@ (8006c84 <UART_SetConfig+0x930>)
 8006c20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c24:	461a      	mov	r2, r3
 8006c26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c28:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c2c:	005a      	lsls	r2, r3, #1
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	085b      	lsrs	r3, r3, #1
 8006c34:	441a      	add	r2, r3
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c3e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c42:	2b0f      	cmp	r3, #15
 8006c44:	d916      	bls.n	8006c74 <UART_SetConfig+0x920>
 8006c46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c4c:	d212      	bcs.n	8006c74 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	f023 030f 	bic.w	r3, r3, #15
 8006c56:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c5a:	085b      	lsrs	r3, r3, #1
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	f003 0307 	and.w	r3, r3, #7
 8006c62:	b29a      	uxth	r2, r3
 8006c64:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006c66:	4313      	orrs	r3, r2
 8006c68:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006c70:	60da      	str	r2, [r3, #12]
 8006c72:	e0b9      	b.n	8006de8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006c74:	2301      	movs	r3, #1
 8006c76:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006c7a:	e0b5      	b.n	8006de8 <UART_SetConfig+0xa94>
 8006c7c:	03d09000 	.word	0x03d09000
 8006c80:	003d0900 	.word	0x003d0900
 8006c84:	08007f28 	.word	0x08007f28
 8006c88:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c8c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006c90:	2b20      	cmp	r3, #32
 8006c92:	dc49      	bgt.n	8006d28 <UART_SetConfig+0x9d4>
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	db7c      	blt.n	8006d92 <UART_SetConfig+0xa3e>
 8006c98:	2b20      	cmp	r3, #32
 8006c9a:	d87a      	bhi.n	8006d92 <UART_SetConfig+0xa3e>
 8006c9c:	a201      	add	r2, pc, #4	@ (adr r2, 8006ca4 <UART_SetConfig+0x950>)
 8006c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ca2:	bf00      	nop
 8006ca4:	08006d2f 	.word	0x08006d2f
 8006ca8:	08006d37 	.word	0x08006d37
 8006cac:	08006d93 	.word	0x08006d93
 8006cb0:	08006d93 	.word	0x08006d93
 8006cb4:	08006d3f 	.word	0x08006d3f
 8006cb8:	08006d93 	.word	0x08006d93
 8006cbc:	08006d93 	.word	0x08006d93
 8006cc0:	08006d93 	.word	0x08006d93
 8006cc4:	08006d4f 	.word	0x08006d4f
 8006cc8:	08006d93 	.word	0x08006d93
 8006ccc:	08006d93 	.word	0x08006d93
 8006cd0:	08006d93 	.word	0x08006d93
 8006cd4:	08006d93 	.word	0x08006d93
 8006cd8:	08006d93 	.word	0x08006d93
 8006cdc:	08006d93 	.word	0x08006d93
 8006ce0:	08006d93 	.word	0x08006d93
 8006ce4:	08006d5f 	.word	0x08006d5f
 8006ce8:	08006d93 	.word	0x08006d93
 8006cec:	08006d93 	.word	0x08006d93
 8006cf0:	08006d93 	.word	0x08006d93
 8006cf4:	08006d93 	.word	0x08006d93
 8006cf8:	08006d93 	.word	0x08006d93
 8006cfc:	08006d93 	.word	0x08006d93
 8006d00:	08006d93 	.word	0x08006d93
 8006d04:	08006d93 	.word	0x08006d93
 8006d08:	08006d93 	.word	0x08006d93
 8006d0c:	08006d93 	.word	0x08006d93
 8006d10:	08006d93 	.word	0x08006d93
 8006d14:	08006d93 	.word	0x08006d93
 8006d18:	08006d93 	.word	0x08006d93
 8006d1c:	08006d93 	.word	0x08006d93
 8006d20:	08006d93 	.word	0x08006d93
 8006d24:	08006d85 	.word	0x08006d85
 8006d28:	2b40      	cmp	r3, #64	@ 0x40
 8006d2a:	d02e      	beq.n	8006d8a <UART_SetConfig+0xa36>
 8006d2c:	e031      	b.n	8006d92 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d2e:	f7fc faf9 	bl	8003324 <HAL_RCC_GetPCLK1Freq>
 8006d32:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006d34:	e033      	b.n	8006d9e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d36:	f7fc fb0b 	bl	8003350 <HAL_RCC_GetPCLK2Freq>
 8006d3a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006d3c:	e02f      	b.n	8006d9e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006d42:	4618      	mov	r0, r3
 8006d44:	f7fd fd3a 	bl	80047bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d4c:	e027      	b.n	8006d9e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d4e:	f107 0318 	add.w	r3, r7, #24
 8006d52:	4618      	mov	r0, r3
 8006d54:	f7fd fe86 	bl	8004a64 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006d58:	69fb      	ldr	r3, [r7, #28]
 8006d5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d5c:	e01f      	b.n	8006d9e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d5e:	4b2d      	ldr	r3, [pc, #180]	@ (8006e14 <UART_SetConfig+0xac0>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f003 0320 	and.w	r3, r3, #32
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d009      	beq.n	8006d7e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006d6a:	4b2a      	ldr	r3, [pc, #168]	@ (8006e14 <UART_SetConfig+0xac0>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	08db      	lsrs	r3, r3, #3
 8006d70:	f003 0303 	and.w	r3, r3, #3
 8006d74:	4a28      	ldr	r2, [pc, #160]	@ (8006e18 <UART_SetConfig+0xac4>)
 8006d76:	fa22 f303 	lsr.w	r3, r2, r3
 8006d7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006d7c:	e00f      	b.n	8006d9e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006d7e:	4b26      	ldr	r3, [pc, #152]	@ (8006e18 <UART_SetConfig+0xac4>)
 8006d80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d82:	e00c      	b.n	8006d9e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006d84:	4b25      	ldr	r3, [pc, #148]	@ (8006e1c <UART_SetConfig+0xac8>)
 8006d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d88:	e009      	b.n	8006d9e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d90:	e005      	b.n	8006d9e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006d92:	2300      	movs	r3, #0
 8006d94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006d9c:	bf00      	nop
    }

    if (pclk != 0U)
 8006d9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d021      	beq.n	8006de8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006da8:	4a1d      	ldr	r2, [pc, #116]	@ (8006e20 <UART_SetConfig+0xacc>)
 8006daa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006dae:	461a      	mov	r2, r3
 8006db0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006db2:	fbb3 f2f2 	udiv	r2, r3, r2
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	085b      	lsrs	r3, r3, #1
 8006dbc:	441a      	add	r2, r3
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dc6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006dc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dca:	2b0f      	cmp	r3, #15
 8006dcc:	d909      	bls.n	8006de2 <UART_SetConfig+0xa8e>
 8006dce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006dd4:	d205      	bcs.n	8006de2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006dd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dd8:	b29a      	uxth	r2, r3
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	60da      	str	r2, [r3, #12]
 8006de0:	e002      	b.n	8006de8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006de2:	2301      	movs	r3, #1
 8006de4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	2201      	movs	r2, #1
 8006dec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	2201      	movs	r2, #1
 8006df4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	2200      	movs	r2, #0
 8006e02:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006e04:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3748      	adds	r7, #72	@ 0x48
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e12:	bf00      	nop
 8006e14:	58024400 	.word	0x58024400
 8006e18:	03d09000 	.word	0x03d09000
 8006e1c:	003d0900 	.word	0x003d0900
 8006e20:	08007f28 	.word	0x08007f28

08006e24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b083      	sub	sp, #12
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e30:	f003 0308 	and.w	r3, r3, #8
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d00a      	beq.n	8006e4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	430a      	orrs	r2, r1
 8006e4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e52:	f003 0301 	and.w	r3, r3, #1
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d00a      	beq.n	8006e70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	430a      	orrs	r2, r1
 8006e6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e74:	f003 0302 	and.w	r3, r3, #2
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d00a      	beq.n	8006e92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	430a      	orrs	r2, r1
 8006e90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e96:	f003 0304 	and.w	r3, r3, #4
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d00a      	beq.n	8006eb4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	430a      	orrs	r2, r1
 8006eb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eb8:	f003 0310 	and.w	r3, r3, #16
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d00a      	beq.n	8006ed6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	430a      	orrs	r2, r1
 8006ed4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eda:	f003 0320 	and.w	r3, r3, #32
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d00a      	beq.n	8006ef8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	689b      	ldr	r3, [r3, #8]
 8006ee8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	430a      	orrs	r2, r1
 8006ef6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006efc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d01a      	beq.n	8006f3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	430a      	orrs	r2, r1
 8006f18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f22:	d10a      	bne.n	8006f3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	430a      	orrs	r2, r1
 8006f38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d00a      	beq.n	8006f5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	430a      	orrs	r2, r1
 8006f5a:	605a      	str	r2, [r3, #4]
  }
}
 8006f5c:	bf00      	nop
 8006f5e:	370c      	adds	r7, #12
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr

08006f68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b098      	sub	sp, #96	@ 0x60
 8006f6c:	af02      	add	r7, sp, #8
 8006f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2200      	movs	r2, #0
 8006f74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f78:	f7fa f8d4 	bl	8001124 <HAL_GetTick>
 8006f7c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f003 0308 	and.w	r3, r3, #8
 8006f88:	2b08      	cmp	r3, #8
 8006f8a:	d12f      	bne.n	8006fec <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f8c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006f90:	9300      	str	r3, [sp, #0]
 8006f92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f94:	2200      	movs	r2, #0
 8006f96:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 f88e 	bl	80070bc <UART_WaitOnFlagUntilTimeout>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d022      	beq.n	8006fec <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fae:	e853 3f00 	ldrex	r3, [r3]
 8006fb2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006fb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fb6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006fba:	653b      	str	r3, [r7, #80]	@ 0x50
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	461a      	mov	r2, r3
 8006fc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006fc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006fc6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006fca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006fcc:	e841 2300 	strex	r3, r2, [r1]
 8006fd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006fd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d1e6      	bne.n	8006fa6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2220      	movs	r2, #32
 8006fdc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fe8:	2303      	movs	r3, #3
 8006fea:	e063      	b.n	80070b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f003 0304 	and.w	r3, r3, #4
 8006ff6:	2b04      	cmp	r3, #4
 8006ff8:	d149      	bne.n	800708e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ffa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006ffe:	9300      	str	r3, [sp, #0]
 8007000:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007002:	2200      	movs	r2, #0
 8007004:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f000 f857 	bl	80070bc <UART_WaitOnFlagUntilTimeout>
 800700e:	4603      	mov	r3, r0
 8007010:	2b00      	cmp	r3, #0
 8007012:	d03c      	beq.n	800708e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800701a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800701c:	e853 3f00 	ldrex	r3, [r3]
 8007020:	623b      	str	r3, [r7, #32]
   return(result);
 8007022:	6a3b      	ldr	r3, [r7, #32]
 8007024:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007028:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	461a      	mov	r2, r3
 8007030:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007032:	633b      	str	r3, [r7, #48]	@ 0x30
 8007034:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007036:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007038:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800703a:	e841 2300 	strex	r3, r2, [r1]
 800703e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007042:	2b00      	cmp	r3, #0
 8007044:	d1e6      	bne.n	8007014 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	3308      	adds	r3, #8
 800704c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	e853 3f00 	ldrex	r3, [r3]
 8007054:	60fb      	str	r3, [r7, #12]
   return(result);
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f023 0301 	bic.w	r3, r3, #1
 800705c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	3308      	adds	r3, #8
 8007064:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007066:	61fa      	str	r2, [r7, #28]
 8007068:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800706a:	69b9      	ldr	r1, [r7, #24]
 800706c:	69fa      	ldr	r2, [r7, #28]
 800706e:	e841 2300 	strex	r3, r2, [r1]
 8007072:	617b      	str	r3, [r7, #20]
   return(result);
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d1e5      	bne.n	8007046 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2220      	movs	r2, #32
 800707e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2200      	movs	r2, #0
 8007086:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800708a:	2303      	movs	r3, #3
 800708c:	e012      	b.n	80070b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2220      	movs	r2, #32
 8007092:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2220      	movs	r2, #32
 800709a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2200      	movs	r2, #0
 80070a2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2200      	movs	r2, #0
 80070a8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80070b2:	2300      	movs	r3, #0
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3758      	adds	r7, #88	@ 0x58
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}

080070bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b084      	sub	sp, #16
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	60f8      	str	r0, [r7, #12]
 80070c4:	60b9      	str	r1, [r7, #8]
 80070c6:	603b      	str	r3, [r7, #0]
 80070c8:	4613      	mov	r3, r2
 80070ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070cc:	e04f      	b.n	800716e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070ce:	69bb      	ldr	r3, [r7, #24]
 80070d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070d4:	d04b      	beq.n	800716e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070d6:	f7fa f825 	bl	8001124 <HAL_GetTick>
 80070da:	4602      	mov	r2, r0
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	1ad3      	subs	r3, r2, r3
 80070e0:	69ba      	ldr	r2, [r7, #24]
 80070e2:	429a      	cmp	r2, r3
 80070e4:	d302      	bcc.n	80070ec <UART_WaitOnFlagUntilTimeout+0x30>
 80070e6:	69bb      	ldr	r3, [r7, #24]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d101      	bne.n	80070f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80070ec:	2303      	movs	r3, #3
 80070ee:	e04e      	b.n	800718e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f003 0304 	and.w	r3, r3, #4
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d037      	beq.n	800716e <UART_WaitOnFlagUntilTimeout+0xb2>
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	2b80      	cmp	r3, #128	@ 0x80
 8007102:	d034      	beq.n	800716e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	2b40      	cmp	r3, #64	@ 0x40
 8007108:	d031      	beq.n	800716e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	69db      	ldr	r3, [r3, #28]
 8007110:	f003 0308 	and.w	r3, r3, #8
 8007114:	2b08      	cmp	r3, #8
 8007116:	d110      	bne.n	800713a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	2208      	movs	r2, #8
 800711e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007120:	68f8      	ldr	r0, [r7, #12]
 8007122:	f000 f839 	bl	8007198 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2208      	movs	r2, #8
 800712a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2200      	movs	r2, #0
 8007132:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	e029      	b.n	800718e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	69db      	ldr	r3, [r3, #28]
 8007140:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007144:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007148:	d111      	bne.n	800716e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007152:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007154:	68f8      	ldr	r0, [r7, #12]
 8007156:	f000 f81f 	bl	8007198 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2220      	movs	r2, #32
 800715e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2200      	movs	r2, #0
 8007166:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800716a:	2303      	movs	r3, #3
 800716c:	e00f      	b.n	800718e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	69da      	ldr	r2, [r3, #28]
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	4013      	ands	r3, r2
 8007178:	68ba      	ldr	r2, [r7, #8]
 800717a:	429a      	cmp	r2, r3
 800717c:	bf0c      	ite	eq
 800717e:	2301      	moveq	r3, #1
 8007180:	2300      	movne	r3, #0
 8007182:	b2db      	uxtb	r3, r3
 8007184:	461a      	mov	r2, r3
 8007186:	79fb      	ldrb	r3, [r7, #7]
 8007188:	429a      	cmp	r2, r3
 800718a:	d0a0      	beq.n	80070ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800718c:	2300      	movs	r3, #0
}
 800718e:	4618      	mov	r0, r3
 8007190:	3710      	adds	r7, #16
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
	...

08007198 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007198:	b480      	push	{r7}
 800719a:	b095      	sub	sp, #84	@ 0x54
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071a8:	e853 3f00 	ldrex	r3, [r3]
 80071ac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80071ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80071b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	461a      	mov	r2, r3
 80071bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071be:	643b      	str	r3, [r7, #64]	@ 0x40
 80071c0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80071c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80071c6:	e841 2300 	strex	r3, r2, [r1]
 80071ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80071cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d1e6      	bne.n	80071a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	3308      	adds	r3, #8
 80071d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071da:	6a3b      	ldr	r3, [r7, #32]
 80071dc:	e853 3f00 	ldrex	r3, [r3]
 80071e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80071e2:	69fa      	ldr	r2, [r7, #28]
 80071e4:	4b1e      	ldr	r3, [pc, #120]	@ (8007260 <UART_EndRxTransfer+0xc8>)
 80071e6:	4013      	ands	r3, r2
 80071e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	3308      	adds	r3, #8
 80071f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80071f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80071f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80071f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80071fa:	e841 2300 	strex	r3, r2, [r1]
 80071fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007202:	2b00      	cmp	r3, #0
 8007204:	d1e5      	bne.n	80071d2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800720a:	2b01      	cmp	r3, #1
 800720c:	d118      	bne.n	8007240 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	e853 3f00 	ldrex	r3, [r3]
 800721a:	60bb      	str	r3, [r7, #8]
   return(result);
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	f023 0310 	bic.w	r3, r3, #16
 8007222:	647b      	str	r3, [r7, #68]	@ 0x44
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	461a      	mov	r2, r3
 800722a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800722c:	61bb      	str	r3, [r7, #24]
 800722e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007230:	6979      	ldr	r1, [r7, #20]
 8007232:	69ba      	ldr	r2, [r7, #24]
 8007234:	e841 2300 	strex	r3, r2, [r1]
 8007238:	613b      	str	r3, [r7, #16]
   return(result);
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d1e6      	bne.n	800720e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2220      	movs	r2, #32
 8007244:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2200      	movs	r2, #0
 800724c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2200      	movs	r2, #0
 8007252:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007254:	bf00      	nop
 8007256:	3754      	adds	r7, #84	@ 0x54
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr
 8007260:	effffffe 	.word	0xeffffffe

08007264 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b084      	sub	sp, #16
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007270:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2200      	movs	r2, #0
 8007276:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800727a:	68f8      	ldr	r0, [r7, #12]
 800727c:	f7ff f854 	bl	8006328 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007280:	bf00      	nop
 8007282:	3710      	adds	r7, #16
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}

08007288 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b088      	sub	sp, #32
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	e853 3f00 	ldrex	r3, [r3]
 800729c:	60bb      	str	r3, [r7, #8]
   return(result);
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80072a4:	61fb      	str	r3, [r7, #28]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	461a      	mov	r2, r3
 80072ac:	69fb      	ldr	r3, [r7, #28]
 80072ae:	61bb      	str	r3, [r7, #24]
 80072b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b2:	6979      	ldr	r1, [r7, #20]
 80072b4:	69ba      	ldr	r2, [r7, #24]
 80072b6:	e841 2300 	strex	r3, r2, [r1]
 80072ba:	613b      	str	r3, [r7, #16]
   return(result);
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d1e6      	bne.n	8007290 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2220      	movs	r2, #32
 80072c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2200      	movs	r2, #0
 80072ce:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f7ff f81f 	bl	8006314 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80072d6:	bf00      	nop
 80072d8:	3720      	adds	r7, #32
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}

080072de <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80072de:	b480      	push	{r7}
 80072e0:	b083      	sub	sp, #12
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80072e6:	bf00      	nop
 80072e8:	370c      	adds	r7, #12
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr

080072f2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80072f2:	b480      	push	{r7}
 80072f4:	b083      	sub	sp, #12
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80072fa:	bf00      	nop
 80072fc:	370c      	adds	r7, #12
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr

08007306 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007306:	b480      	push	{r7}
 8007308:	b083      	sub	sp, #12
 800730a:	af00      	add	r7, sp, #0
 800730c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800730e:	bf00      	nop
 8007310:	370c      	adds	r7, #12
 8007312:	46bd      	mov	sp, r7
 8007314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007318:	4770      	bx	lr

0800731a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800731a:	b480      	push	{r7}
 800731c:	b085      	sub	sp, #20
 800731e:	af00      	add	r7, sp, #0
 8007320:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007328:	2b01      	cmp	r3, #1
 800732a:	d101      	bne.n	8007330 <HAL_UARTEx_DisableFifoMode+0x16>
 800732c:	2302      	movs	r3, #2
 800732e:	e027      	b.n	8007380 <HAL_UARTEx_DisableFifoMode+0x66>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2201      	movs	r2, #1
 8007334:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2224      	movs	r2, #36	@ 0x24
 800733c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	681a      	ldr	r2, [r3, #0]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f022 0201 	bic.w	r2, r2, #1
 8007356:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800735e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2200      	movs	r2, #0
 8007364:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	68fa      	ldr	r2, [r7, #12]
 800736c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2220      	movs	r2, #32
 8007372:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2200      	movs	r2, #0
 800737a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800737e:	2300      	movs	r3, #0
}
 8007380:	4618      	mov	r0, r3
 8007382:	3714      	adds	r7, #20
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr

0800738c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b084      	sub	sp, #16
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
 8007394:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800739c:	2b01      	cmp	r3, #1
 800739e:	d101      	bne.n	80073a4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80073a0:	2302      	movs	r3, #2
 80073a2:	e02d      	b.n	8007400 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2201      	movs	r2, #1
 80073a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2224      	movs	r2, #36	@ 0x24
 80073b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f022 0201 	bic.w	r2, r2, #1
 80073ca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	683a      	ldr	r2, [r7, #0]
 80073dc:	430a      	orrs	r2, r1
 80073de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 f84f 	bl	8007484 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	68fa      	ldr	r2, [r7, #12]
 80073ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2220      	movs	r2, #32
 80073f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2200      	movs	r2, #0
 80073fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80073fe:	2300      	movs	r3, #0
}
 8007400:	4618      	mov	r0, r3
 8007402:	3710      	adds	r7, #16
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}

08007408 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b084      	sub	sp, #16
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
 8007410:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007418:	2b01      	cmp	r3, #1
 800741a:	d101      	bne.n	8007420 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800741c:	2302      	movs	r3, #2
 800741e:	e02d      	b.n	800747c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2201      	movs	r2, #1
 8007424:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2224      	movs	r2, #36	@ 0x24
 800742c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f022 0201 	bic.w	r2, r2, #1
 8007446:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	689b      	ldr	r3, [r3, #8]
 800744e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	683a      	ldr	r2, [r7, #0]
 8007458:	430a      	orrs	r2, r1
 800745a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 f811 	bl	8007484 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	68fa      	ldr	r2, [r7, #12]
 8007468:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2220      	movs	r2, #32
 800746e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2200      	movs	r2, #0
 8007476:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800747a:	2300      	movs	r3, #0
}
 800747c:	4618      	mov	r0, r3
 800747e:	3710      	adds	r7, #16
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007484:	b480      	push	{r7}
 8007486:	b085      	sub	sp, #20
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007490:	2b00      	cmp	r3, #0
 8007492:	d108      	bne.n	80074a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2201      	movs	r2, #1
 8007498:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2201      	movs	r2, #1
 80074a0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80074a4:	e031      	b.n	800750a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80074a6:	2310      	movs	r3, #16
 80074a8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80074aa:	2310      	movs	r3, #16
 80074ac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	689b      	ldr	r3, [r3, #8]
 80074b4:	0e5b      	lsrs	r3, r3, #25
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	f003 0307 	and.w	r3, r3, #7
 80074bc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	0f5b      	lsrs	r3, r3, #29
 80074c6:	b2db      	uxtb	r3, r3
 80074c8:	f003 0307 	and.w	r3, r3, #7
 80074cc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80074ce:	7bbb      	ldrb	r3, [r7, #14]
 80074d0:	7b3a      	ldrb	r2, [r7, #12]
 80074d2:	4911      	ldr	r1, [pc, #68]	@ (8007518 <UARTEx_SetNbDataToProcess+0x94>)
 80074d4:	5c8a      	ldrb	r2, [r1, r2]
 80074d6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80074da:	7b3a      	ldrb	r2, [r7, #12]
 80074dc:	490f      	ldr	r1, [pc, #60]	@ (800751c <UARTEx_SetNbDataToProcess+0x98>)
 80074de:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80074e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80074e4:	b29a      	uxth	r2, r3
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80074ec:	7bfb      	ldrb	r3, [r7, #15]
 80074ee:	7b7a      	ldrb	r2, [r7, #13]
 80074f0:	4909      	ldr	r1, [pc, #36]	@ (8007518 <UARTEx_SetNbDataToProcess+0x94>)
 80074f2:	5c8a      	ldrb	r2, [r1, r2]
 80074f4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80074f8:	7b7a      	ldrb	r2, [r7, #13]
 80074fa:	4908      	ldr	r1, [pc, #32]	@ (800751c <UARTEx_SetNbDataToProcess+0x98>)
 80074fc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80074fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8007502:	b29a      	uxth	r2, r3
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800750a:	bf00      	nop
 800750c:	3714      	adds	r7, #20
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr
 8007516:	bf00      	nop
 8007518:	08007f40 	.word	0x08007f40
 800751c:	08007f48 	.word	0x08007f48

08007520 <HAL_WWDG_IRQHandler>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
void HAL_WWDG_IRQHandler(WWDG_HandleTypeDef *hwwdg)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b082      	sub	sp, #8
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  /* Check if Early Wakeup Interrupt is enable */
  if (__HAL_WWDG_GET_IT_SOURCE(hwwdg, WWDG_IT_EWI) != RESET)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	685b      	ldr	r3, [r3, #4]
 800752e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007532:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007536:	d10e      	bne.n	8007556 <HAL_WWDG_IRQHandler+0x36>
  {
    /* Check if WWDG Early Wakeup Interrupt occurred */
    if (__HAL_WWDG_GET_FLAG(hwwdg, WWDG_FLAG_EWIF) != RESET)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	f003 0301 	and.w	r3, r3, #1
 8007542:	2b01      	cmp	r3, #1
 8007544:	d107      	bne.n	8007556 <HAL_WWDG_IRQHandler+0x36>
    {
      /* Clear the WWDG Early Wakeup flag */
      __HAL_WWDG_CLEAR_FLAG(hwwdg, WWDG_FLAG_EWIF);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f06f 0201 	mvn.w	r2, #1
 800754e:	609a      	str	r2, [r3, #8]
#if (USE_HAL_WWDG_REGISTER_CALLBACKS == 1)
      /* Early Wakeup registered callback */
      hwwdg->EwiCallback(hwwdg);
#else
      /* Early Wakeup callback */
      HAL_WWDG_EarlyWakeupCallback(hwwdg);
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 f804 	bl	800755e <HAL_WWDG_EarlyWakeupCallback>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */
    }
  }
}
 8007556:	bf00      	nop
 8007558:	3708      	adds	r7, #8
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}

0800755e <HAL_WWDG_EarlyWakeupCallback>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
__weak void HAL_WWDG_EarlyWakeupCallback(WWDG_HandleTypeDef *hwwdg)
{
 800755e:	b480      	push	{r7}
 8007560:	b083      	sub	sp, #12
 8007562:	af00      	add	r7, sp, #0
 8007564:	6078      	str	r0, [r7, #4]
  UNUSED(hwwdg);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_WWDG_EarlyWakeupCallback could be implemented in the user file
   */
}
 8007566:	bf00      	nop
 8007568:	370c      	adds	r7, #12
 800756a:	46bd      	mov	sp, r7
 800756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007570:	4770      	bx	lr
	...

08007574 <std>:
 8007574:	2300      	movs	r3, #0
 8007576:	b510      	push	{r4, lr}
 8007578:	4604      	mov	r4, r0
 800757a:	e9c0 3300 	strd	r3, r3, [r0]
 800757e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007582:	6083      	str	r3, [r0, #8]
 8007584:	8181      	strh	r1, [r0, #12]
 8007586:	6643      	str	r3, [r0, #100]	@ 0x64
 8007588:	81c2      	strh	r2, [r0, #14]
 800758a:	6183      	str	r3, [r0, #24]
 800758c:	4619      	mov	r1, r3
 800758e:	2208      	movs	r2, #8
 8007590:	305c      	adds	r0, #92	@ 0x5c
 8007592:	f000 f9e7 	bl	8007964 <memset>
 8007596:	4b0d      	ldr	r3, [pc, #52]	@ (80075cc <std+0x58>)
 8007598:	6263      	str	r3, [r4, #36]	@ 0x24
 800759a:	4b0d      	ldr	r3, [pc, #52]	@ (80075d0 <std+0x5c>)
 800759c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800759e:	4b0d      	ldr	r3, [pc, #52]	@ (80075d4 <std+0x60>)
 80075a0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80075a2:	4b0d      	ldr	r3, [pc, #52]	@ (80075d8 <std+0x64>)
 80075a4:	6323      	str	r3, [r4, #48]	@ 0x30
 80075a6:	4b0d      	ldr	r3, [pc, #52]	@ (80075dc <std+0x68>)
 80075a8:	6224      	str	r4, [r4, #32]
 80075aa:	429c      	cmp	r4, r3
 80075ac:	d006      	beq.n	80075bc <std+0x48>
 80075ae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80075b2:	4294      	cmp	r4, r2
 80075b4:	d002      	beq.n	80075bc <std+0x48>
 80075b6:	33d0      	adds	r3, #208	@ 0xd0
 80075b8:	429c      	cmp	r4, r3
 80075ba:	d105      	bne.n	80075c8 <std+0x54>
 80075bc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80075c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075c4:	f000 ba46 	b.w	8007a54 <__retarget_lock_init_recursive>
 80075c8:	bd10      	pop	{r4, pc}
 80075ca:	bf00      	nop
 80075cc:	080077b5 	.word	0x080077b5
 80075d0:	080077d7 	.word	0x080077d7
 80075d4:	0800780f 	.word	0x0800780f
 80075d8:	08007833 	.word	0x08007833
 80075dc:	240001d0 	.word	0x240001d0

080075e0 <stdio_exit_handler>:
 80075e0:	4a02      	ldr	r2, [pc, #8]	@ (80075ec <stdio_exit_handler+0xc>)
 80075e2:	4903      	ldr	r1, [pc, #12]	@ (80075f0 <stdio_exit_handler+0x10>)
 80075e4:	4803      	ldr	r0, [pc, #12]	@ (80075f4 <stdio_exit_handler+0x14>)
 80075e6:	f000 b869 	b.w	80076bc <_fwalk_sglue>
 80075ea:	bf00      	nop
 80075ec:	24000010 	.word	0x24000010
 80075f0:	08007d55 	.word	0x08007d55
 80075f4:	24000020 	.word	0x24000020

080075f8 <cleanup_stdio>:
 80075f8:	6841      	ldr	r1, [r0, #4]
 80075fa:	4b0c      	ldr	r3, [pc, #48]	@ (800762c <cleanup_stdio+0x34>)
 80075fc:	4299      	cmp	r1, r3
 80075fe:	b510      	push	{r4, lr}
 8007600:	4604      	mov	r4, r0
 8007602:	d001      	beq.n	8007608 <cleanup_stdio+0x10>
 8007604:	f000 fba6 	bl	8007d54 <_fflush_r>
 8007608:	68a1      	ldr	r1, [r4, #8]
 800760a:	4b09      	ldr	r3, [pc, #36]	@ (8007630 <cleanup_stdio+0x38>)
 800760c:	4299      	cmp	r1, r3
 800760e:	d002      	beq.n	8007616 <cleanup_stdio+0x1e>
 8007610:	4620      	mov	r0, r4
 8007612:	f000 fb9f 	bl	8007d54 <_fflush_r>
 8007616:	68e1      	ldr	r1, [r4, #12]
 8007618:	4b06      	ldr	r3, [pc, #24]	@ (8007634 <cleanup_stdio+0x3c>)
 800761a:	4299      	cmp	r1, r3
 800761c:	d004      	beq.n	8007628 <cleanup_stdio+0x30>
 800761e:	4620      	mov	r0, r4
 8007620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007624:	f000 bb96 	b.w	8007d54 <_fflush_r>
 8007628:	bd10      	pop	{r4, pc}
 800762a:	bf00      	nop
 800762c:	240001d0 	.word	0x240001d0
 8007630:	24000238 	.word	0x24000238
 8007634:	240002a0 	.word	0x240002a0

08007638 <global_stdio_init.part.0>:
 8007638:	b510      	push	{r4, lr}
 800763a:	4b0b      	ldr	r3, [pc, #44]	@ (8007668 <global_stdio_init.part.0+0x30>)
 800763c:	4c0b      	ldr	r4, [pc, #44]	@ (800766c <global_stdio_init.part.0+0x34>)
 800763e:	4a0c      	ldr	r2, [pc, #48]	@ (8007670 <global_stdio_init.part.0+0x38>)
 8007640:	601a      	str	r2, [r3, #0]
 8007642:	4620      	mov	r0, r4
 8007644:	2200      	movs	r2, #0
 8007646:	2104      	movs	r1, #4
 8007648:	f7ff ff94 	bl	8007574 <std>
 800764c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007650:	2201      	movs	r2, #1
 8007652:	2109      	movs	r1, #9
 8007654:	f7ff ff8e 	bl	8007574 <std>
 8007658:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800765c:	2202      	movs	r2, #2
 800765e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007662:	2112      	movs	r1, #18
 8007664:	f7ff bf86 	b.w	8007574 <std>
 8007668:	24000308 	.word	0x24000308
 800766c:	240001d0 	.word	0x240001d0
 8007670:	080075e1 	.word	0x080075e1

08007674 <__sfp_lock_acquire>:
 8007674:	4801      	ldr	r0, [pc, #4]	@ (800767c <__sfp_lock_acquire+0x8>)
 8007676:	f000 b9ee 	b.w	8007a56 <__retarget_lock_acquire_recursive>
 800767a:	bf00      	nop
 800767c:	24000311 	.word	0x24000311

08007680 <__sfp_lock_release>:
 8007680:	4801      	ldr	r0, [pc, #4]	@ (8007688 <__sfp_lock_release+0x8>)
 8007682:	f000 b9e9 	b.w	8007a58 <__retarget_lock_release_recursive>
 8007686:	bf00      	nop
 8007688:	24000311 	.word	0x24000311

0800768c <__sinit>:
 800768c:	b510      	push	{r4, lr}
 800768e:	4604      	mov	r4, r0
 8007690:	f7ff fff0 	bl	8007674 <__sfp_lock_acquire>
 8007694:	6a23      	ldr	r3, [r4, #32]
 8007696:	b11b      	cbz	r3, 80076a0 <__sinit+0x14>
 8007698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800769c:	f7ff bff0 	b.w	8007680 <__sfp_lock_release>
 80076a0:	4b04      	ldr	r3, [pc, #16]	@ (80076b4 <__sinit+0x28>)
 80076a2:	6223      	str	r3, [r4, #32]
 80076a4:	4b04      	ldr	r3, [pc, #16]	@ (80076b8 <__sinit+0x2c>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d1f5      	bne.n	8007698 <__sinit+0xc>
 80076ac:	f7ff ffc4 	bl	8007638 <global_stdio_init.part.0>
 80076b0:	e7f2      	b.n	8007698 <__sinit+0xc>
 80076b2:	bf00      	nop
 80076b4:	080075f9 	.word	0x080075f9
 80076b8:	24000308 	.word	0x24000308

080076bc <_fwalk_sglue>:
 80076bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076c0:	4607      	mov	r7, r0
 80076c2:	4688      	mov	r8, r1
 80076c4:	4614      	mov	r4, r2
 80076c6:	2600      	movs	r6, #0
 80076c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80076cc:	f1b9 0901 	subs.w	r9, r9, #1
 80076d0:	d505      	bpl.n	80076de <_fwalk_sglue+0x22>
 80076d2:	6824      	ldr	r4, [r4, #0]
 80076d4:	2c00      	cmp	r4, #0
 80076d6:	d1f7      	bne.n	80076c8 <_fwalk_sglue+0xc>
 80076d8:	4630      	mov	r0, r6
 80076da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076de:	89ab      	ldrh	r3, [r5, #12]
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d907      	bls.n	80076f4 <_fwalk_sglue+0x38>
 80076e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80076e8:	3301      	adds	r3, #1
 80076ea:	d003      	beq.n	80076f4 <_fwalk_sglue+0x38>
 80076ec:	4629      	mov	r1, r5
 80076ee:	4638      	mov	r0, r7
 80076f0:	47c0      	blx	r8
 80076f2:	4306      	orrs	r6, r0
 80076f4:	3568      	adds	r5, #104	@ 0x68
 80076f6:	e7e9      	b.n	80076cc <_fwalk_sglue+0x10>

080076f8 <_puts_r>:
 80076f8:	6a03      	ldr	r3, [r0, #32]
 80076fa:	b570      	push	{r4, r5, r6, lr}
 80076fc:	6884      	ldr	r4, [r0, #8]
 80076fe:	4605      	mov	r5, r0
 8007700:	460e      	mov	r6, r1
 8007702:	b90b      	cbnz	r3, 8007708 <_puts_r+0x10>
 8007704:	f7ff ffc2 	bl	800768c <__sinit>
 8007708:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800770a:	07db      	lsls	r3, r3, #31
 800770c:	d405      	bmi.n	800771a <_puts_r+0x22>
 800770e:	89a3      	ldrh	r3, [r4, #12]
 8007710:	0598      	lsls	r0, r3, #22
 8007712:	d402      	bmi.n	800771a <_puts_r+0x22>
 8007714:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007716:	f000 f99e 	bl	8007a56 <__retarget_lock_acquire_recursive>
 800771a:	89a3      	ldrh	r3, [r4, #12]
 800771c:	0719      	lsls	r1, r3, #28
 800771e:	d502      	bpl.n	8007726 <_puts_r+0x2e>
 8007720:	6923      	ldr	r3, [r4, #16]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d135      	bne.n	8007792 <_puts_r+0x9a>
 8007726:	4621      	mov	r1, r4
 8007728:	4628      	mov	r0, r5
 800772a:	f000 f8c5 	bl	80078b8 <__swsetup_r>
 800772e:	b380      	cbz	r0, 8007792 <_puts_r+0x9a>
 8007730:	f04f 35ff 	mov.w	r5, #4294967295
 8007734:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007736:	07da      	lsls	r2, r3, #31
 8007738:	d405      	bmi.n	8007746 <_puts_r+0x4e>
 800773a:	89a3      	ldrh	r3, [r4, #12]
 800773c:	059b      	lsls	r3, r3, #22
 800773e:	d402      	bmi.n	8007746 <_puts_r+0x4e>
 8007740:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007742:	f000 f989 	bl	8007a58 <__retarget_lock_release_recursive>
 8007746:	4628      	mov	r0, r5
 8007748:	bd70      	pop	{r4, r5, r6, pc}
 800774a:	2b00      	cmp	r3, #0
 800774c:	da04      	bge.n	8007758 <_puts_r+0x60>
 800774e:	69a2      	ldr	r2, [r4, #24]
 8007750:	429a      	cmp	r2, r3
 8007752:	dc17      	bgt.n	8007784 <_puts_r+0x8c>
 8007754:	290a      	cmp	r1, #10
 8007756:	d015      	beq.n	8007784 <_puts_r+0x8c>
 8007758:	6823      	ldr	r3, [r4, #0]
 800775a:	1c5a      	adds	r2, r3, #1
 800775c:	6022      	str	r2, [r4, #0]
 800775e:	7019      	strb	r1, [r3, #0]
 8007760:	68a3      	ldr	r3, [r4, #8]
 8007762:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007766:	3b01      	subs	r3, #1
 8007768:	60a3      	str	r3, [r4, #8]
 800776a:	2900      	cmp	r1, #0
 800776c:	d1ed      	bne.n	800774a <_puts_r+0x52>
 800776e:	2b00      	cmp	r3, #0
 8007770:	da11      	bge.n	8007796 <_puts_r+0x9e>
 8007772:	4622      	mov	r2, r4
 8007774:	210a      	movs	r1, #10
 8007776:	4628      	mov	r0, r5
 8007778:	f000 f85f 	bl	800783a <__swbuf_r>
 800777c:	3001      	adds	r0, #1
 800777e:	d0d7      	beq.n	8007730 <_puts_r+0x38>
 8007780:	250a      	movs	r5, #10
 8007782:	e7d7      	b.n	8007734 <_puts_r+0x3c>
 8007784:	4622      	mov	r2, r4
 8007786:	4628      	mov	r0, r5
 8007788:	f000 f857 	bl	800783a <__swbuf_r>
 800778c:	3001      	adds	r0, #1
 800778e:	d1e7      	bne.n	8007760 <_puts_r+0x68>
 8007790:	e7ce      	b.n	8007730 <_puts_r+0x38>
 8007792:	3e01      	subs	r6, #1
 8007794:	e7e4      	b.n	8007760 <_puts_r+0x68>
 8007796:	6823      	ldr	r3, [r4, #0]
 8007798:	1c5a      	adds	r2, r3, #1
 800779a:	6022      	str	r2, [r4, #0]
 800779c:	220a      	movs	r2, #10
 800779e:	701a      	strb	r2, [r3, #0]
 80077a0:	e7ee      	b.n	8007780 <_puts_r+0x88>
	...

080077a4 <puts>:
 80077a4:	4b02      	ldr	r3, [pc, #8]	@ (80077b0 <puts+0xc>)
 80077a6:	4601      	mov	r1, r0
 80077a8:	6818      	ldr	r0, [r3, #0]
 80077aa:	f7ff bfa5 	b.w	80076f8 <_puts_r>
 80077ae:	bf00      	nop
 80077b0:	2400001c 	.word	0x2400001c

080077b4 <__sread>:
 80077b4:	b510      	push	{r4, lr}
 80077b6:	460c      	mov	r4, r1
 80077b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077bc:	f000 f8fc 	bl	80079b8 <_read_r>
 80077c0:	2800      	cmp	r0, #0
 80077c2:	bfab      	itete	ge
 80077c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80077c6:	89a3      	ldrhlt	r3, [r4, #12]
 80077c8:	181b      	addge	r3, r3, r0
 80077ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80077ce:	bfac      	ite	ge
 80077d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80077d2:	81a3      	strhlt	r3, [r4, #12]
 80077d4:	bd10      	pop	{r4, pc}

080077d6 <__swrite>:
 80077d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077da:	461f      	mov	r7, r3
 80077dc:	898b      	ldrh	r3, [r1, #12]
 80077de:	05db      	lsls	r3, r3, #23
 80077e0:	4605      	mov	r5, r0
 80077e2:	460c      	mov	r4, r1
 80077e4:	4616      	mov	r6, r2
 80077e6:	d505      	bpl.n	80077f4 <__swrite+0x1e>
 80077e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077ec:	2302      	movs	r3, #2
 80077ee:	2200      	movs	r2, #0
 80077f0:	f000 f8d0 	bl	8007994 <_lseek_r>
 80077f4:	89a3      	ldrh	r3, [r4, #12]
 80077f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80077fe:	81a3      	strh	r3, [r4, #12]
 8007800:	4632      	mov	r2, r6
 8007802:	463b      	mov	r3, r7
 8007804:	4628      	mov	r0, r5
 8007806:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800780a:	f000 b8e7 	b.w	80079dc <_write_r>

0800780e <__sseek>:
 800780e:	b510      	push	{r4, lr}
 8007810:	460c      	mov	r4, r1
 8007812:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007816:	f000 f8bd 	bl	8007994 <_lseek_r>
 800781a:	1c43      	adds	r3, r0, #1
 800781c:	89a3      	ldrh	r3, [r4, #12]
 800781e:	bf15      	itete	ne
 8007820:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007822:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007826:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800782a:	81a3      	strheq	r3, [r4, #12]
 800782c:	bf18      	it	ne
 800782e:	81a3      	strhne	r3, [r4, #12]
 8007830:	bd10      	pop	{r4, pc}

08007832 <__sclose>:
 8007832:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007836:	f000 b89d 	b.w	8007974 <_close_r>

0800783a <__swbuf_r>:
 800783a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800783c:	460e      	mov	r6, r1
 800783e:	4614      	mov	r4, r2
 8007840:	4605      	mov	r5, r0
 8007842:	b118      	cbz	r0, 800784c <__swbuf_r+0x12>
 8007844:	6a03      	ldr	r3, [r0, #32]
 8007846:	b90b      	cbnz	r3, 800784c <__swbuf_r+0x12>
 8007848:	f7ff ff20 	bl	800768c <__sinit>
 800784c:	69a3      	ldr	r3, [r4, #24]
 800784e:	60a3      	str	r3, [r4, #8]
 8007850:	89a3      	ldrh	r3, [r4, #12]
 8007852:	071a      	lsls	r2, r3, #28
 8007854:	d501      	bpl.n	800785a <__swbuf_r+0x20>
 8007856:	6923      	ldr	r3, [r4, #16]
 8007858:	b943      	cbnz	r3, 800786c <__swbuf_r+0x32>
 800785a:	4621      	mov	r1, r4
 800785c:	4628      	mov	r0, r5
 800785e:	f000 f82b 	bl	80078b8 <__swsetup_r>
 8007862:	b118      	cbz	r0, 800786c <__swbuf_r+0x32>
 8007864:	f04f 37ff 	mov.w	r7, #4294967295
 8007868:	4638      	mov	r0, r7
 800786a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800786c:	6823      	ldr	r3, [r4, #0]
 800786e:	6922      	ldr	r2, [r4, #16]
 8007870:	1a98      	subs	r0, r3, r2
 8007872:	6963      	ldr	r3, [r4, #20]
 8007874:	b2f6      	uxtb	r6, r6
 8007876:	4283      	cmp	r3, r0
 8007878:	4637      	mov	r7, r6
 800787a:	dc05      	bgt.n	8007888 <__swbuf_r+0x4e>
 800787c:	4621      	mov	r1, r4
 800787e:	4628      	mov	r0, r5
 8007880:	f000 fa68 	bl	8007d54 <_fflush_r>
 8007884:	2800      	cmp	r0, #0
 8007886:	d1ed      	bne.n	8007864 <__swbuf_r+0x2a>
 8007888:	68a3      	ldr	r3, [r4, #8]
 800788a:	3b01      	subs	r3, #1
 800788c:	60a3      	str	r3, [r4, #8]
 800788e:	6823      	ldr	r3, [r4, #0]
 8007890:	1c5a      	adds	r2, r3, #1
 8007892:	6022      	str	r2, [r4, #0]
 8007894:	701e      	strb	r6, [r3, #0]
 8007896:	6962      	ldr	r2, [r4, #20]
 8007898:	1c43      	adds	r3, r0, #1
 800789a:	429a      	cmp	r2, r3
 800789c:	d004      	beq.n	80078a8 <__swbuf_r+0x6e>
 800789e:	89a3      	ldrh	r3, [r4, #12]
 80078a0:	07db      	lsls	r3, r3, #31
 80078a2:	d5e1      	bpl.n	8007868 <__swbuf_r+0x2e>
 80078a4:	2e0a      	cmp	r6, #10
 80078a6:	d1df      	bne.n	8007868 <__swbuf_r+0x2e>
 80078a8:	4621      	mov	r1, r4
 80078aa:	4628      	mov	r0, r5
 80078ac:	f000 fa52 	bl	8007d54 <_fflush_r>
 80078b0:	2800      	cmp	r0, #0
 80078b2:	d0d9      	beq.n	8007868 <__swbuf_r+0x2e>
 80078b4:	e7d6      	b.n	8007864 <__swbuf_r+0x2a>
	...

080078b8 <__swsetup_r>:
 80078b8:	b538      	push	{r3, r4, r5, lr}
 80078ba:	4b29      	ldr	r3, [pc, #164]	@ (8007960 <__swsetup_r+0xa8>)
 80078bc:	4605      	mov	r5, r0
 80078be:	6818      	ldr	r0, [r3, #0]
 80078c0:	460c      	mov	r4, r1
 80078c2:	b118      	cbz	r0, 80078cc <__swsetup_r+0x14>
 80078c4:	6a03      	ldr	r3, [r0, #32]
 80078c6:	b90b      	cbnz	r3, 80078cc <__swsetup_r+0x14>
 80078c8:	f7ff fee0 	bl	800768c <__sinit>
 80078cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078d0:	0719      	lsls	r1, r3, #28
 80078d2:	d422      	bmi.n	800791a <__swsetup_r+0x62>
 80078d4:	06da      	lsls	r2, r3, #27
 80078d6:	d407      	bmi.n	80078e8 <__swsetup_r+0x30>
 80078d8:	2209      	movs	r2, #9
 80078da:	602a      	str	r2, [r5, #0]
 80078dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80078e0:	81a3      	strh	r3, [r4, #12]
 80078e2:	f04f 30ff 	mov.w	r0, #4294967295
 80078e6:	e033      	b.n	8007950 <__swsetup_r+0x98>
 80078e8:	0758      	lsls	r0, r3, #29
 80078ea:	d512      	bpl.n	8007912 <__swsetup_r+0x5a>
 80078ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80078ee:	b141      	cbz	r1, 8007902 <__swsetup_r+0x4a>
 80078f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80078f4:	4299      	cmp	r1, r3
 80078f6:	d002      	beq.n	80078fe <__swsetup_r+0x46>
 80078f8:	4628      	mov	r0, r5
 80078fa:	f000 f8af 	bl	8007a5c <_free_r>
 80078fe:	2300      	movs	r3, #0
 8007900:	6363      	str	r3, [r4, #52]	@ 0x34
 8007902:	89a3      	ldrh	r3, [r4, #12]
 8007904:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007908:	81a3      	strh	r3, [r4, #12]
 800790a:	2300      	movs	r3, #0
 800790c:	6063      	str	r3, [r4, #4]
 800790e:	6923      	ldr	r3, [r4, #16]
 8007910:	6023      	str	r3, [r4, #0]
 8007912:	89a3      	ldrh	r3, [r4, #12]
 8007914:	f043 0308 	orr.w	r3, r3, #8
 8007918:	81a3      	strh	r3, [r4, #12]
 800791a:	6923      	ldr	r3, [r4, #16]
 800791c:	b94b      	cbnz	r3, 8007932 <__swsetup_r+0x7a>
 800791e:	89a3      	ldrh	r3, [r4, #12]
 8007920:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007924:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007928:	d003      	beq.n	8007932 <__swsetup_r+0x7a>
 800792a:	4621      	mov	r1, r4
 800792c:	4628      	mov	r0, r5
 800792e:	f000 fa5f 	bl	8007df0 <__smakebuf_r>
 8007932:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007936:	f013 0201 	ands.w	r2, r3, #1
 800793a:	d00a      	beq.n	8007952 <__swsetup_r+0x9a>
 800793c:	2200      	movs	r2, #0
 800793e:	60a2      	str	r2, [r4, #8]
 8007940:	6962      	ldr	r2, [r4, #20]
 8007942:	4252      	negs	r2, r2
 8007944:	61a2      	str	r2, [r4, #24]
 8007946:	6922      	ldr	r2, [r4, #16]
 8007948:	b942      	cbnz	r2, 800795c <__swsetup_r+0xa4>
 800794a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800794e:	d1c5      	bne.n	80078dc <__swsetup_r+0x24>
 8007950:	bd38      	pop	{r3, r4, r5, pc}
 8007952:	0799      	lsls	r1, r3, #30
 8007954:	bf58      	it	pl
 8007956:	6962      	ldrpl	r2, [r4, #20]
 8007958:	60a2      	str	r2, [r4, #8]
 800795a:	e7f4      	b.n	8007946 <__swsetup_r+0x8e>
 800795c:	2000      	movs	r0, #0
 800795e:	e7f7      	b.n	8007950 <__swsetup_r+0x98>
 8007960:	2400001c 	.word	0x2400001c

08007964 <memset>:
 8007964:	4402      	add	r2, r0
 8007966:	4603      	mov	r3, r0
 8007968:	4293      	cmp	r3, r2
 800796a:	d100      	bne.n	800796e <memset+0xa>
 800796c:	4770      	bx	lr
 800796e:	f803 1b01 	strb.w	r1, [r3], #1
 8007972:	e7f9      	b.n	8007968 <memset+0x4>

08007974 <_close_r>:
 8007974:	b538      	push	{r3, r4, r5, lr}
 8007976:	4d06      	ldr	r5, [pc, #24]	@ (8007990 <_close_r+0x1c>)
 8007978:	2300      	movs	r3, #0
 800797a:	4604      	mov	r4, r0
 800797c:	4608      	mov	r0, r1
 800797e:	602b      	str	r3, [r5, #0]
 8007980:	f7f9 f891 	bl	8000aa6 <_close>
 8007984:	1c43      	adds	r3, r0, #1
 8007986:	d102      	bne.n	800798e <_close_r+0x1a>
 8007988:	682b      	ldr	r3, [r5, #0]
 800798a:	b103      	cbz	r3, 800798e <_close_r+0x1a>
 800798c:	6023      	str	r3, [r4, #0]
 800798e:	bd38      	pop	{r3, r4, r5, pc}
 8007990:	2400030c 	.word	0x2400030c

08007994 <_lseek_r>:
 8007994:	b538      	push	{r3, r4, r5, lr}
 8007996:	4d07      	ldr	r5, [pc, #28]	@ (80079b4 <_lseek_r+0x20>)
 8007998:	4604      	mov	r4, r0
 800799a:	4608      	mov	r0, r1
 800799c:	4611      	mov	r1, r2
 800799e:	2200      	movs	r2, #0
 80079a0:	602a      	str	r2, [r5, #0]
 80079a2:	461a      	mov	r2, r3
 80079a4:	f7f9 f8a6 	bl	8000af4 <_lseek>
 80079a8:	1c43      	adds	r3, r0, #1
 80079aa:	d102      	bne.n	80079b2 <_lseek_r+0x1e>
 80079ac:	682b      	ldr	r3, [r5, #0]
 80079ae:	b103      	cbz	r3, 80079b2 <_lseek_r+0x1e>
 80079b0:	6023      	str	r3, [r4, #0]
 80079b2:	bd38      	pop	{r3, r4, r5, pc}
 80079b4:	2400030c 	.word	0x2400030c

080079b8 <_read_r>:
 80079b8:	b538      	push	{r3, r4, r5, lr}
 80079ba:	4d07      	ldr	r5, [pc, #28]	@ (80079d8 <_read_r+0x20>)
 80079bc:	4604      	mov	r4, r0
 80079be:	4608      	mov	r0, r1
 80079c0:	4611      	mov	r1, r2
 80079c2:	2200      	movs	r2, #0
 80079c4:	602a      	str	r2, [r5, #0]
 80079c6:	461a      	mov	r2, r3
 80079c8:	f7f9 f834 	bl	8000a34 <_read>
 80079cc:	1c43      	adds	r3, r0, #1
 80079ce:	d102      	bne.n	80079d6 <_read_r+0x1e>
 80079d0:	682b      	ldr	r3, [r5, #0]
 80079d2:	b103      	cbz	r3, 80079d6 <_read_r+0x1e>
 80079d4:	6023      	str	r3, [r4, #0]
 80079d6:	bd38      	pop	{r3, r4, r5, pc}
 80079d8:	2400030c 	.word	0x2400030c

080079dc <_write_r>:
 80079dc:	b538      	push	{r3, r4, r5, lr}
 80079de:	4d07      	ldr	r5, [pc, #28]	@ (80079fc <_write_r+0x20>)
 80079e0:	4604      	mov	r4, r0
 80079e2:	4608      	mov	r0, r1
 80079e4:	4611      	mov	r1, r2
 80079e6:	2200      	movs	r2, #0
 80079e8:	602a      	str	r2, [r5, #0]
 80079ea:	461a      	mov	r2, r3
 80079ec:	f7f9 f83f 	bl	8000a6e <_write>
 80079f0:	1c43      	adds	r3, r0, #1
 80079f2:	d102      	bne.n	80079fa <_write_r+0x1e>
 80079f4:	682b      	ldr	r3, [r5, #0]
 80079f6:	b103      	cbz	r3, 80079fa <_write_r+0x1e>
 80079f8:	6023      	str	r3, [r4, #0]
 80079fa:	bd38      	pop	{r3, r4, r5, pc}
 80079fc:	2400030c 	.word	0x2400030c

08007a00 <__errno>:
 8007a00:	4b01      	ldr	r3, [pc, #4]	@ (8007a08 <__errno+0x8>)
 8007a02:	6818      	ldr	r0, [r3, #0]
 8007a04:	4770      	bx	lr
 8007a06:	bf00      	nop
 8007a08:	2400001c 	.word	0x2400001c

08007a0c <__libc_init_array>:
 8007a0c:	b570      	push	{r4, r5, r6, lr}
 8007a0e:	4d0d      	ldr	r5, [pc, #52]	@ (8007a44 <__libc_init_array+0x38>)
 8007a10:	4c0d      	ldr	r4, [pc, #52]	@ (8007a48 <__libc_init_array+0x3c>)
 8007a12:	1b64      	subs	r4, r4, r5
 8007a14:	10a4      	asrs	r4, r4, #2
 8007a16:	2600      	movs	r6, #0
 8007a18:	42a6      	cmp	r6, r4
 8007a1a:	d109      	bne.n	8007a30 <__libc_init_array+0x24>
 8007a1c:	4d0b      	ldr	r5, [pc, #44]	@ (8007a4c <__libc_init_array+0x40>)
 8007a1e:	4c0c      	ldr	r4, [pc, #48]	@ (8007a50 <__libc_init_array+0x44>)
 8007a20:	f000 fa54 	bl	8007ecc <_init>
 8007a24:	1b64      	subs	r4, r4, r5
 8007a26:	10a4      	asrs	r4, r4, #2
 8007a28:	2600      	movs	r6, #0
 8007a2a:	42a6      	cmp	r6, r4
 8007a2c:	d105      	bne.n	8007a3a <__libc_init_array+0x2e>
 8007a2e:	bd70      	pop	{r4, r5, r6, pc}
 8007a30:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a34:	4798      	blx	r3
 8007a36:	3601      	adds	r6, #1
 8007a38:	e7ee      	b.n	8007a18 <__libc_init_array+0xc>
 8007a3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a3e:	4798      	blx	r3
 8007a40:	3601      	adds	r6, #1
 8007a42:	e7f2      	b.n	8007a2a <__libc_init_array+0x1e>
 8007a44:	08007f58 	.word	0x08007f58
 8007a48:	08007f58 	.word	0x08007f58
 8007a4c:	08007f58 	.word	0x08007f58
 8007a50:	08007f5c 	.word	0x08007f5c

08007a54 <__retarget_lock_init_recursive>:
 8007a54:	4770      	bx	lr

08007a56 <__retarget_lock_acquire_recursive>:
 8007a56:	4770      	bx	lr

08007a58 <__retarget_lock_release_recursive>:
 8007a58:	4770      	bx	lr
	...

08007a5c <_free_r>:
 8007a5c:	b538      	push	{r3, r4, r5, lr}
 8007a5e:	4605      	mov	r5, r0
 8007a60:	2900      	cmp	r1, #0
 8007a62:	d041      	beq.n	8007ae8 <_free_r+0x8c>
 8007a64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a68:	1f0c      	subs	r4, r1, #4
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	bfb8      	it	lt
 8007a6e:	18e4      	addlt	r4, r4, r3
 8007a70:	f000 f8e0 	bl	8007c34 <__malloc_lock>
 8007a74:	4a1d      	ldr	r2, [pc, #116]	@ (8007aec <_free_r+0x90>)
 8007a76:	6813      	ldr	r3, [r2, #0]
 8007a78:	b933      	cbnz	r3, 8007a88 <_free_r+0x2c>
 8007a7a:	6063      	str	r3, [r4, #4]
 8007a7c:	6014      	str	r4, [r2, #0]
 8007a7e:	4628      	mov	r0, r5
 8007a80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a84:	f000 b8dc 	b.w	8007c40 <__malloc_unlock>
 8007a88:	42a3      	cmp	r3, r4
 8007a8a:	d908      	bls.n	8007a9e <_free_r+0x42>
 8007a8c:	6820      	ldr	r0, [r4, #0]
 8007a8e:	1821      	adds	r1, r4, r0
 8007a90:	428b      	cmp	r3, r1
 8007a92:	bf01      	itttt	eq
 8007a94:	6819      	ldreq	r1, [r3, #0]
 8007a96:	685b      	ldreq	r3, [r3, #4]
 8007a98:	1809      	addeq	r1, r1, r0
 8007a9a:	6021      	streq	r1, [r4, #0]
 8007a9c:	e7ed      	b.n	8007a7a <_free_r+0x1e>
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	b10b      	cbz	r3, 8007aa8 <_free_r+0x4c>
 8007aa4:	42a3      	cmp	r3, r4
 8007aa6:	d9fa      	bls.n	8007a9e <_free_r+0x42>
 8007aa8:	6811      	ldr	r1, [r2, #0]
 8007aaa:	1850      	adds	r0, r2, r1
 8007aac:	42a0      	cmp	r0, r4
 8007aae:	d10b      	bne.n	8007ac8 <_free_r+0x6c>
 8007ab0:	6820      	ldr	r0, [r4, #0]
 8007ab2:	4401      	add	r1, r0
 8007ab4:	1850      	adds	r0, r2, r1
 8007ab6:	4283      	cmp	r3, r0
 8007ab8:	6011      	str	r1, [r2, #0]
 8007aba:	d1e0      	bne.n	8007a7e <_free_r+0x22>
 8007abc:	6818      	ldr	r0, [r3, #0]
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	6053      	str	r3, [r2, #4]
 8007ac2:	4408      	add	r0, r1
 8007ac4:	6010      	str	r0, [r2, #0]
 8007ac6:	e7da      	b.n	8007a7e <_free_r+0x22>
 8007ac8:	d902      	bls.n	8007ad0 <_free_r+0x74>
 8007aca:	230c      	movs	r3, #12
 8007acc:	602b      	str	r3, [r5, #0]
 8007ace:	e7d6      	b.n	8007a7e <_free_r+0x22>
 8007ad0:	6820      	ldr	r0, [r4, #0]
 8007ad2:	1821      	adds	r1, r4, r0
 8007ad4:	428b      	cmp	r3, r1
 8007ad6:	bf04      	itt	eq
 8007ad8:	6819      	ldreq	r1, [r3, #0]
 8007ada:	685b      	ldreq	r3, [r3, #4]
 8007adc:	6063      	str	r3, [r4, #4]
 8007ade:	bf04      	itt	eq
 8007ae0:	1809      	addeq	r1, r1, r0
 8007ae2:	6021      	streq	r1, [r4, #0]
 8007ae4:	6054      	str	r4, [r2, #4]
 8007ae6:	e7ca      	b.n	8007a7e <_free_r+0x22>
 8007ae8:	bd38      	pop	{r3, r4, r5, pc}
 8007aea:	bf00      	nop
 8007aec:	24000318 	.word	0x24000318

08007af0 <sbrk_aligned>:
 8007af0:	b570      	push	{r4, r5, r6, lr}
 8007af2:	4e0f      	ldr	r6, [pc, #60]	@ (8007b30 <sbrk_aligned+0x40>)
 8007af4:	460c      	mov	r4, r1
 8007af6:	6831      	ldr	r1, [r6, #0]
 8007af8:	4605      	mov	r5, r0
 8007afa:	b911      	cbnz	r1, 8007b02 <sbrk_aligned+0x12>
 8007afc:	f000 f9d6 	bl	8007eac <_sbrk_r>
 8007b00:	6030      	str	r0, [r6, #0]
 8007b02:	4621      	mov	r1, r4
 8007b04:	4628      	mov	r0, r5
 8007b06:	f000 f9d1 	bl	8007eac <_sbrk_r>
 8007b0a:	1c43      	adds	r3, r0, #1
 8007b0c:	d103      	bne.n	8007b16 <sbrk_aligned+0x26>
 8007b0e:	f04f 34ff 	mov.w	r4, #4294967295
 8007b12:	4620      	mov	r0, r4
 8007b14:	bd70      	pop	{r4, r5, r6, pc}
 8007b16:	1cc4      	adds	r4, r0, #3
 8007b18:	f024 0403 	bic.w	r4, r4, #3
 8007b1c:	42a0      	cmp	r0, r4
 8007b1e:	d0f8      	beq.n	8007b12 <sbrk_aligned+0x22>
 8007b20:	1a21      	subs	r1, r4, r0
 8007b22:	4628      	mov	r0, r5
 8007b24:	f000 f9c2 	bl	8007eac <_sbrk_r>
 8007b28:	3001      	adds	r0, #1
 8007b2a:	d1f2      	bne.n	8007b12 <sbrk_aligned+0x22>
 8007b2c:	e7ef      	b.n	8007b0e <sbrk_aligned+0x1e>
 8007b2e:	bf00      	nop
 8007b30:	24000314 	.word	0x24000314

08007b34 <_malloc_r>:
 8007b34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b38:	1ccd      	adds	r5, r1, #3
 8007b3a:	f025 0503 	bic.w	r5, r5, #3
 8007b3e:	3508      	adds	r5, #8
 8007b40:	2d0c      	cmp	r5, #12
 8007b42:	bf38      	it	cc
 8007b44:	250c      	movcc	r5, #12
 8007b46:	2d00      	cmp	r5, #0
 8007b48:	4606      	mov	r6, r0
 8007b4a:	db01      	blt.n	8007b50 <_malloc_r+0x1c>
 8007b4c:	42a9      	cmp	r1, r5
 8007b4e:	d904      	bls.n	8007b5a <_malloc_r+0x26>
 8007b50:	230c      	movs	r3, #12
 8007b52:	6033      	str	r3, [r6, #0]
 8007b54:	2000      	movs	r0, #0
 8007b56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b5a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007c30 <_malloc_r+0xfc>
 8007b5e:	f000 f869 	bl	8007c34 <__malloc_lock>
 8007b62:	f8d8 3000 	ldr.w	r3, [r8]
 8007b66:	461c      	mov	r4, r3
 8007b68:	bb44      	cbnz	r4, 8007bbc <_malloc_r+0x88>
 8007b6a:	4629      	mov	r1, r5
 8007b6c:	4630      	mov	r0, r6
 8007b6e:	f7ff ffbf 	bl	8007af0 <sbrk_aligned>
 8007b72:	1c43      	adds	r3, r0, #1
 8007b74:	4604      	mov	r4, r0
 8007b76:	d158      	bne.n	8007c2a <_malloc_r+0xf6>
 8007b78:	f8d8 4000 	ldr.w	r4, [r8]
 8007b7c:	4627      	mov	r7, r4
 8007b7e:	2f00      	cmp	r7, #0
 8007b80:	d143      	bne.n	8007c0a <_malloc_r+0xd6>
 8007b82:	2c00      	cmp	r4, #0
 8007b84:	d04b      	beq.n	8007c1e <_malloc_r+0xea>
 8007b86:	6823      	ldr	r3, [r4, #0]
 8007b88:	4639      	mov	r1, r7
 8007b8a:	4630      	mov	r0, r6
 8007b8c:	eb04 0903 	add.w	r9, r4, r3
 8007b90:	f000 f98c 	bl	8007eac <_sbrk_r>
 8007b94:	4581      	cmp	r9, r0
 8007b96:	d142      	bne.n	8007c1e <_malloc_r+0xea>
 8007b98:	6821      	ldr	r1, [r4, #0]
 8007b9a:	1a6d      	subs	r5, r5, r1
 8007b9c:	4629      	mov	r1, r5
 8007b9e:	4630      	mov	r0, r6
 8007ba0:	f7ff ffa6 	bl	8007af0 <sbrk_aligned>
 8007ba4:	3001      	adds	r0, #1
 8007ba6:	d03a      	beq.n	8007c1e <_malloc_r+0xea>
 8007ba8:	6823      	ldr	r3, [r4, #0]
 8007baa:	442b      	add	r3, r5
 8007bac:	6023      	str	r3, [r4, #0]
 8007bae:	f8d8 3000 	ldr.w	r3, [r8]
 8007bb2:	685a      	ldr	r2, [r3, #4]
 8007bb4:	bb62      	cbnz	r2, 8007c10 <_malloc_r+0xdc>
 8007bb6:	f8c8 7000 	str.w	r7, [r8]
 8007bba:	e00f      	b.n	8007bdc <_malloc_r+0xa8>
 8007bbc:	6822      	ldr	r2, [r4, #0]
 8007bbe:	1b52      	subs	r2, r2, r5
 8007bc0:	d420      	bmi.n	8007c04 <_malloc_r+0xd0>
 8007bc2:	2a0b      	cmp	r2, #11
 8007bc4:	d917      	bls.n	8007bf6 <_malloc_r+0xc2>
 8007bc6:	1961      	adds	r1, r4, r5
 8007bc8:	42a3      	cmp	r3, r4
 8007bca:	6025      	str	r5, [r4, #0]
 8007bcc:	bf18      	it	ne
 8007bce:	6059      	strne	r1, [r3, #4]
 8007bd0:	6863      	ldr	r3, [r4, #4]
 8007bd2:	bf08      	it	eq
 8007bd4:	f8c8 1000 	streq.w	r1, [r8]
 8007bd8:	5162      	str	r2, [r4, r5]
 8007bda:	604b      	str	r3, [r1, #4]
 8007bdc:	4630      	mov	r0, r6
 8007bde:	f000 f82f 	bl	8007c40 <__malloc_unlock>
 8007be2:	f104 000b 	add.w	r0, r4, #11
 8007be6:	1d23      	adds	r3, r4, #4
 8007be8:	f020 0007 	bic.w	r0, r0, #7
 8007bec:	1ac2      	subs	r2, r0, r3
 8007bee:	bf1c      	itt	ne
 8007bf0:	1a1b      	subne	r3, r3, r0
 8007bf2:	50a3      	strne	r3, [r4, r2]
 8007bf4:	e7af      	b.n	8007b56 <_malloc_r+0x22>
 8007bf6:	6862      	ldr	r2, [r4, #4]
 8007bf8:	42a3      	cmp	r3, r4
 8007bfa:	bf0c      	ite	eq
 8007bfc:	f8c8 2000 	streq.w	r2, [r8]
 8007c00:	605a      	strne	r2, [r3, #4]
 8007c02:	e7eb      	b.n	8007bdc <_malloc_r+0xa8>
 8007c04:	4623      	mov	r3, r4
 8007c06:	6864      	ldr	r4, [r4, #4]
 8007c08:	e7ae      	b.n	8007b68 <_malloc_r+0x34>
 8007c0a:	463c      	mov	r4, r7
 8007c0c:	687f      	ldr	r7, [r7, #4]
 8007c0e:	e7b6      	b.n	8007b7e <_malloc_r+0x4a>
 8007c10:	461a      	mov	r2, r3
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	42a3      	cmp	r3, r4
 8007c16:	d1fb      	bne.n	8007c10 <_malloc_r+0xdc>
 8007c18:	2300      	movs	r3, #0
 8007c1a:	6053      	str	r3, [r2, #4]
 8007c1c:	e7de      	b.n	8007bdc <_malloc_r+0xa8>
 8007c1e:	230c      	movs	r3, #12
 8007c20:	6033      	str	r3, [r6, #0]
 8007c22:	4630      	mov	r0, r6
 8007c24:	f000 f80c 	bl	8007c40 <__malloc_unlock>
 8007c28:	e794      	b.n	8007b54 <_malloc_r+0x20>
 8007c2a:	6005      	str	r5, [r0, #0]
 8007c2c:	e7d6      	b.n	8007bdc <_malloc_r+0xa8>
 8007c2e:	bf00      	nop
 8007c30:	24000318 	.word	0x24000318

08007c34 <__malloc_lock>:
 8007c34:	4801      	ldr	r0, [pc, #4]	@ (8007c3c <__malloc_lock+0x8>)
 8007c36:	f7ff bf0e 	b.w	8007a56 <__retarget_lock_acquire_recursive>
 8007c3a:	bf00      	nop
 8007c3c:	24000310 	.word	0x24000310

08007c40 <__malloc_unlock>:
 8007c40:	4801      	ldr	r0, [pc, #4]	@ (8007c48 <__malloc_unlock+0x8>)
 8007c42:	f7ff bf09 	b.w	8007a58 <__retarget_lock_release_recursive>
 8007c46:	bf00      	nop
 8007c48:	24000310 	.word	0x24000310

08007c4c <__sflush_r>:
 8007c4c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c54:	0716      	lsls	r6, r2, #28
 8007c56:	4605      	mov	r5, r0
 8007c58:	460c      	mov	r4, r1
 8007c5a:	d454      	bmi.n	8007d06 <__sflush_r+0xba>
 8007c5c:	684b      	ldr	r3, [r1, #4]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	dc02      	bgt.n	8007c68 <__sflush_r+0x1c>
 8007c62:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	dd48      	ble.n	8007cfa <__sflush_r+0xae>
 8007c68:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007c6a:	2e00      	cmp	r6, #0
 8007c6c:	d045      	beq.n	8007cfa <__sflush_r+0xae>
 8007c6e:	2300      	movs	r3, #0
 8007c70:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007c74:	682f      	ldr	r7, [r5, #0]
 8007c76:	6a21      	ldr	r1, [r4, #32]
 8007c78:	602b      	str	r3, [r5, #0]
 8007c7a:	d030      	beq.n	8007cde <__sflush_r+0x92>
 8007c7c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007c7e:	89a3      	ldrh	r3, [r4, #12]
 8007c80:	0759      	lsls	r1, r3, #29
 8007c82:	d505      	bpl.n	8007c90 <__sflush_r+0x44>
 8007c84:	6863      	ldr	r3, [r4, #4]
 8007c86:	1ad2      	subs	r2, r2, r3
 8007c88:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007c8a:	b10b      	cbz	r3, 8007c90 <__sflush_r+0x44>
 8007c8c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007c8e:	1ad2      	subs	r2, r2, r3
 8007c90:	2300      	movs	r3, #0
 8007c92:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007c94:	6a21      	ldr	r1, [r4, #32]
 8007c96:	4628      	mov	r0, r5
 8007c98:	47b0      	blx	r6
 8007c9a:	1c43      	adds	r3, r0, #1
 8007c9c:	89a3      	ldrh	r3, [r4, #12]
 8007c9e:	d106      	bne.n	8007cae <__sflush_r+0x62>
 8007ca0:	6829      	ldr	r1, [r5, #0]
 8007ca2:	291d      	cmp	r1, #29
 8007ca4:	d82b      	bhi.n	8007cfe <__sflush_r+0xb2>
 8007ca6:	4a2a      	ldr	r2, [pc, #168]	@ (8007d50 <__sflush_r+0x104>)
 8007ca8:	40ca      	lsrs	r2, r1
 8007caa:	07d6      	lsls	r6, r2, #31
 8007cac:	d527      	bpl.n	8007cfe <__sflush_r+0xb2>
 8007cae:	2200      	movs	r2, #0
 8007cb0:	6062      	str	r2, [r4, #4]
 8007cb2:	04d9      	lsls	r1, r3, #19
 8007cb4:	6922      	ldr	r2, [r4, #16]
 8007cb6:	6022      	str	r2, [r4, #0]
 8007cb8:	d504      	bpl.n	8007cc4 <__sflush_r+0x78>
 8007cba:	1c42      	adds	r2, r0, #1
 8007cbc:	d101      	bne.n	8007cc2 <__sflush_r+0x76>
 8007cbe:	682b      	ldr	r3, [r5, #0]
 8007cc0:	b903      	cbnz	r3, 8007cc4 <__sflush_r+0x78>
 8007cc2:	6560      	str	r0, [r4, #84]	@ 0x54
 8007cc4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007cc6:	602f      	str	r7, [r5, #0]
 8007cc8:	b1b9      	cbz	r1, 8007cfa <__sflush_r+0xae>
 8007cca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007cce:	4299      	cmp	r1, r3
 8007cd0:	d002      	beq.n	8007cd8 <__sflush_r+0x8c>
 8007cd2:	4628      	mov	r0, r5
 8007cd4:	f7ff fec2 	bl	8007a5c <_free_r>
 8007cd8:	2300      	movs	r3, #0
 8007cda:	6363      	str	r3, [r4, #52]	@ 0x34
 8007cdc:	e00d      	b.n	8007cfa <__sflush_r+0xae>
 8007cde:	2301      	movs	r3, #1
 8007ce0:	4628      	mov	r0, r5
 8007ce2:	47b0      	blx	r6
 8007ce4:	4602      	mov	r2, r0
 8007ce6:	1c50      	adds	r0, r2, #1
 8007ce8:	d1c9      	bne.n	8007c7e <__sflush_r+0x32>
 8007cea:	682b      	ldr	r3, [r5, #0]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d0c6      	beq.n	8007c7e <__sflush_r+0x32>
 8007cf0:	2b1d      	cmp	r3, #29
 8007cf2:	d001      	beq.n	8007cf8 <__sflush_r+0xac>
 8007cf4:	2b16      	cmp	r3, #22
 8007cf6:	d11e      	bne.n	8007d36 <__sflush_r+0xea>
 8007cf8:	602f      	str	r7, [r5, #0]
 8007cfa:	2000      	movs	r0, #0
 8007cfc:	e022      	b.n	8007d44 <__sflush_r+0xf8>
 8007cfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d02:	b21b      	sxth	r3, r3
 8007d04:	e01b      	b.n	8007d3e <__sflush_r+0xf2>
 8007d06:	690f      	ldr	r7, [r1, #16]
 8007d08:	2f00      	cmp	r7, #0
 8007d0a:	d0f6      	beq.n	8007cfa <__sflush_r+0xae>
 8007d0c:	0793      	lsls	r3, r2, #30
 8007d0e:	680e      	ldr	r6, [r1, #0]
 8007d10:	bf08      	it	eq
 8007d12:	694b      	ldreq	r3, [r1, #20]
 8007d14:	600f      	str	r7, [r1, #0]
 8007d16:	bf18      	it	ne
 8007d18:	2300      	movne	r3, #0
 8007d1a:	eba6 0807 	sub.w	r8, r6, r7
 8007d1e:	608b      	str	r3, [r1, #8]
 8007d20:	f1b8 0f00 	cmp.w	r8, #0
 8007d24:	dde9      	ble.n	8007cfa <__sflush_r+0xae>
 8007d26:	6a21      	ldr	r1, [r4, #32]
 8007d28:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007d2a:	4643      	mov	r3, r8
 8007d2c:	463a      	mov	r2, r7
 8007d2e:	4628      	mov	r0, r5
 8007d30:	47b0      	blx	r6
 8007d32:	2800      	cmp	r0, #0
 8007d34:	dc08      	bgt.n	8007d48 <__sflush_r+0xfc>
 8007d36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d3e:	81a3      	strh	r3, [r4, #12]
 8007d40:	f04f 30ff 	mov.w	r0, #4294967295
 8007d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d48:	4407      	add	r7, r0
 8007d4a:	eba8 0800 	sub.w	r8, r8, r0
 8007d4e:	e7e7      	b.n	8007d20 <__sflush_r+0xd4>
 8007d50:	20400001 	.word	0x20400001

08007d54 <_fflush_r>:
 8007d54:	b538      	push	{r3, r4, r5, lr}
 8007d56:	690b      	ldr	r3, [r1, #16]
 8007d58:	4605      	mov	r5, r0
 8007d5a:	460c      	mov	r4, r1
 8007d5c:	b913      	cbnz	r3, 8007d64 <_fflush_r+0x10>
 8007d5e:	2500      	movs	r5, #0
 8007d60:	4628      	mov	r0, r5
 8007d62:	bd38      	pop	{r3, r4, r5, pc}
 8007d64:	b118      	cbz	r0, 8007d6e <_fflush_r+0x1a>
 8007d66:	6a03      	ldr	r3, [r0, #32]
 8007d68:	b90b      	cbnz	r3, 8007d6e <_fflush_r+0x1a>
 8007d6a:	f7ff fc8f 	bl	800768c <__sinit>
 8007d6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d0f3      	beq.n	8007d5e <_fflush_r+0xa>
 8007d76:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007d78:	07d0      	lsls	r0, r2, #31
 8007d7a:	d404      	bmi.n	8007d86 <_fflush_r+0x32>
 8007d7c:	0599      	lsls	r1, r3, #22
 8007d7e:	d402      	bmi.n	8007d86 <_fflush_r+0x32>
 8007d80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007d82:	f7ff fe68 	bl	8007a56 <__retarget_lock_acquire_recursive>
 8007d86:	4628      	mov	r0, r5
 8007d88:	4621      	mov	r1, r4
 8007d8a:	f7ff ff5f 	bl	8007c4c <__sflush_r>
 8007d8e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007d90:	07da      	lsls	r2, r3, #31
 8007d92:	4605      	mov	r5, r0
 8007d94:	d4e4      	bmi.n	8007d60 <_fflush_r+0xc>
 8007d96:	89a3      	ldrh	r3, [r4, #12]
 8007d98:	059b      	lsls	r3, r3, #22
 8007d9a:	d4e1      	bmi.n	8007d60 <_fflush_r+0xc>
 8007d9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007d9e:	f7ff fe5b 	bl	8007a58 <__retarget_lock_release_recursive>
 8007da2:	e7dd      	b.n	8007d60 <_fflush_r+0xc>

08007da4 <__swhatbuf_r>:
 8007da4:	b570      	push	{r4, r5, r6, lr}
 8007da6:	460c      	mov	r4, r1
 8007da8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dac:	2900      	cmp	r1, #0
 8007dae:	b096      	sub	sp, #88	@ 0x58
 8007db0:	4615      	mov	r5, r2
 8007db2:	461e      	mov	r6, r3
 8007db4:	da0d      	bge.n	8007dd2 <__swhatbuf_r+0x2e>
 8007db6:	89a3      	ldrh	r3, [r4, #12]
 8007db8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007dbc:	f04f 0100 	mov.w	r1, #0
 8007dc0:	bf14      	ite	ne
 8007dc2:	2340      	movne	r3, #64	@ 0x40
 8007dc4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007dc8:	2000      	movs	r0, #0
 8007dca:	6031      	str	r1, [r6, #0]
 8007dcc:	602b      	str	r3, [r5, #0]
 8007dce:	b016      	add	sp, #88	@ 0x58
 8007dd0:	bd70      	pop	{r4, r5, r6, pc}
 8007dd2:	466a      	mov	r2, sp
 8007dd4:	f000 f848 	bl	8007e68 <_fstat_r>
 8007dd8:	2800      	cmp	r0, #0
 8007dda:	dbec      	blt.n	8007db6 <__swhatbuf_r+0x12>
 8007ddc:	9901      	ldr	r1, [sp, #4]
 8007dde:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007de2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007de6:	4259      	negs	r1, r3
 8007de8:	4159      	adcs	r1, r3
 8007dea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007dee:	e7eb      	b.n	8007dc8 <__swhatbuf_r+0x24>

08007df0 <__smakebuf_r>:
 8007df0:	898b      	ldrh	r3, [r1, #12]
 8007df2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007df4:	079d      	lsls	r5, r3, #30
 8007df6:	4606      	mov	r6, r0
 8007df8:	460c      	mov	r4, r1
 8007dfa:	d507      	bpl.n	8007e0c <__smakebuf_r+0x1c>
 8007dfc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007e00:	6023      	str	r3, [r4, #0]
 8007e02:	6123      	str	r3, [r4, #16]
 8007e04:	2301      	movs	r3, #1
 8007e06:	6163      	str	r3, [r4, #20]
 8007e08:	b003      	add	sp, #12
 8007e0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e0c:	ab01      	add	r3, sp, #4
 8007e0e:	466a      	mov	r2, sp
 8007e10:	f7ff ffc8 	bl	8007da4 <__swhatbuf_r>
 8007e14:	9f00      	ldr	r7, [sp, #0]
 8007e16:	4605      	mov	r5, r0
 8007e18:	4639      	mov	r1, r7
 8007e1a:	4630      	mov	r0, r6
 8007e1c:	f7ff fe8a 	bl	8007b34 <_malloc_r>
 8007e20:	b948      	cbnz	r0, 8007e36 <__smakebuf_r+0x46>
 8007e22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e26:	059a      	lsls	r2, r3, #22
 8007e28:	d4ee      	bmi.n	8007e08 <__smakebuf_r+0x18>
 8007e2a:	f023 0303 	bic.w	r3, r3, #3
 8007e2e:	f043 0302 	orr.w	r3, r3, #2
 8007e32:	81a3      	strh	r3, [r4, #12]
 8007e34:	e7e2      	b.n	8007dfc <__smakebuf_r+0xc>
 8007e36:	89a3      	ldrh	r3, [r4, #12]
 8007e38:	6020      	str	r0, [r4, #0]
 8007e3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e3e:	81a3      	strh	r3, [r4, #12]
 8007e40:	9b01      	ldr	r3, [sp, #4]
 8007e42:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007e46:	b15b      	cbz	r3, 8007e60 <__smakebuf_r+0x70>
 8007e48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e4c:	4630      	mov	r0, r6
 8007e4e:	f000 f81d 	bl	8007e8c <_isatty_r>
 8007e52:	b128      	cbz	r0, 8007e60 <__smakebuf_r+0x70>
 8007e54:	89a3      	ldrh	r3, [r4, #12]
 8007e56:	f023 0303 	bic.w	r3, r3, #3
 8007e5a:	f043 0301 	orr.w	r3, r3, #1
 8007e5e:	81a3      	strh	r3, [r4, #12]
 8007e60:	89a3      	ldrh	r3, [r4, #12]
 8007e62:	431d      	orrs	r5, r3
 8007e64:	81a5      	strh	r5, [r4, #12]
 8007e66:	e7cf      	b.n	8007e08 <__smakebuf_r+0x18>

08007e68 <_fstat_r>:
 8007e68:	b538      	push	{r3, r4, r5, lr}
 8007e6a:	4d07      	ldr	r5, [pc, #28]	@ (8007e88 <_fstat_r+0x20>)
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	4604      	mov	r4, r0
 8007e70:	4608      	mov	r0, r1
 8007e72:	4611      	mov	r1, r2
 8007e74:	602b      	str	r3, [r5, #0]
 8007e76:	f7f8 fe22 	bl	8000abe <_fstat>
 8007e7a:	1c43      	adds	r3, r0, #1
 8007e7c:	d102      	bne.n	8007e84 <_fstat_r+0x1c>
 8007e7e:	682b      	ldr	r3, [r5, #0]
 8007e80:	b103      	cbz	r3, 8007e84 <_fstat_r+0x1c>
 8007e82:	6023      	str	r3, [r4, #0]
 8007e84:	bd38      	pop	{r3, r4, r5, pc}
 8007e86:	bf00      	nop
 8007e88:	2400030c 	.word	0x2400030c

08007e8c <_isatty_r>:
 8007e8c:	b538      	push	{r3, r4, r5, lr}
 8007e8e:	4d06      	ldr	r5, [pc, #24]	@ (8007ea8 <_isatty_r+0x1c>)
 8007e90:	2300      	movs	r3, #0
 8007e92:	4604      	mov	r4, r0
 8007e94:	4608      	mov	r0, r1
 8007e96:	602b      	str	r3, [r5, #0]
 8007e98:	f7f8 fe21 	bl	8000ade <_isatty>
 8007e9c:	1c43      	adds	r3, r0, #1
 8007e9e:	d102      	bne.n	8007ea6 <_isatty_r+0x1a>
 8007ea0:	682b      	ldr	r3, [r5, #0]
 8007ea2:	b103      	cbz	r3, 8007ea6 <_isatty_r+0x1a>
 8007ea4:	6023      	str	r3, [r4, #0]
 8007ea6:	bd38      	pop	{r3, r4, r5, pc}
 8007ea8:	2400030c 	.word	0x2400030c

08007eac <_sbrk_r>:
 8007eac:	b538      	push	{r3, r4, r5, lr}
 8007eae:	4d06      	ldr	r5, [pc, #24]	@ (8007ec8 <_sbrk_r+0x1c>)
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	4604      	mov	r4, r0
 8007eb4:	4608      	mov	r0, r1
 8007eb6:	602b      	str	r3, [r5, #0]
 8007eb8:	f7f8 fe2a 	bl	8000b10 <_sbrk>
 8007ebc:	1c43      	adds	r3, r0, #1
 8007ebe:	d102      	bne.n	8007ec6 <_sbrk_r+0x1a>
 8007ec0:	682b      	ldr	r3, [r5, #0]
 8007ec2:	b103      	cbz	r3, 8007ec6 <_sbrk_r+0x1a>
 8007ec4:	6023      	str	r3, [r4, #0]
 8007ec6:	bd38      	pop	{r3, r4, r5, pc}
 8007ec8:	2400030c 	.word	0x2400030c

08007ecc <_init>:
 8007ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ece:	bf00      	nop
 8007ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ed2:	bc08      	pop	{r3}
 8007ed4:	469e      	mov	lr, r3
 8007ed6:	4770      	bx	lr

08007ed8 <_fini>:
 8007ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eda:	bf00      	nop
 8007edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ede:	bc08      	pop	{r3}
 8007ee0:	469e      	mov	lr, r3
 8007ee2:	4770      	bx	lr
