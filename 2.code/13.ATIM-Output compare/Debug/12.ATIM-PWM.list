
12.ATIM-PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092e4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08009584  08009584  0000a584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009624  08009624  0000a624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800962c  0800962c  0000a62c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08009630  08009630  0000a630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000070  24000000  08009634  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000398  24000070  080096a4  0000b070  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000408  080096a4  0000b408  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000b070  2**0
                  CONTENTS, READONLY
 10 .debug_info   000188ab  00000000  00000000  0000b09e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000337c  00000000  00000000  00023949  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001290  00000000  00000000  00026cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000e59  00000000  00000000  00027f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a252  00000000  00000000  00028db1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001ef21  00000000  00000000  00063003  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00168876  00000000  00000000  00081f24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001ea79a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000053e4  00000000  00000000  001ea7e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005a  00000000  00000000  001efbc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000070 	.word	0x24000070
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800956c 	.word	0x0800956c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000074 	.word	0x24000074
 80002dc:	0800956c 	.word	0x0800956c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <MX_BEEP_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_BEEP_GPIO_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b086      	sub	sp, #24
 80006b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006c0:	4b12      	ldr	r3, [pc, #72]	@ (800070c <MX_BEEP_GPIO_Init+0x60>)
 80006c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006c6:	4a11      	ldr	r2, [pc, #68]	@ (800070c <MX_BEEP_GPIO_Init+0x60>)
 80006c8:	f043 0310 	orr.w	r3, r3, #16
 80006cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006d0:	4b0e      	ldr	r3, [pc, #56]	@ (800070c <MX_BEEP_GPIO_Init+0x60>)
 80006d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006d6:	f003 0310 	and.w	r3, r3, #16
 80006da:	603b      	str	r3, [r7, #0]
 80006dc:	683b      	ldr	r3, [r7, #0]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BEEP_GPIO_Port, BEEP_Pin, GPIO_PIN_RESET);
 80006de:	2200      	movs	r2, #0
 80006e0:	2110      	movs	r1, #16
 80006e2:	480b      	ldr	r0, [pc, #44]	@ (8000710 <MX_BEEP_GPIO_Init+0x64>)
 80006e4:	f002 f8b0 	bl	8002848 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BEEP_Pin */
  GPIO_InitStruct.Pin = BEEP_Pin;
 80006e8:	2310      	movs	r3, #16
 80006ea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ec:	2301      	movs	r3, #1
 80006ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f0:	2300      	movs	r3, #0
 80006f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f4:	2300      	movs	r3, #0
 80006f6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006f8:	1d3b      	adds	r3, r7, #4
 80006fa:	4619      	mov	r1, r3
 80006fc:	4804      	ldr	r0, [pc, #16]	@ (8000710 <MX_BEEP_GPIO_Init+0x64>)
 80006fe:	f001 fedb 	bl	80024b8 <HAL_GPIO_Init>
}
 8000702:	bf00      	nop
 8000704:	3718      	adds	r7, #24
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	58024400 	.word	0x58024400
 8000710:	58021000 	.word	0x58021000

08000714 <MX_KEY_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_KEY_GPIO_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b086      	sub	sp, #24
 8000718:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000728:	4b14      	ldr	r3, [pc, #80]	@ (800077c <MX_KEY_GPIO_Init+0x68>)
 800072a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800072e:	4a13      	ldr	r2, [pc, #76]	@ (800077c <MX_KEY_GPIO_Init+0x68>)
 8000730:	f043 0301 	orr.w	r3, r3, #1
 8000734:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000738:	4b10      	ldr	r3, [pc, #64]	@ (800077c <MX_KEY_GPIO_Init+0x68>)
 800073a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	603b      	str	r3, [r7, #0]
 8000744:	683b      	ldr	r3, [r7, #0]
  /*Configure GPIO pin : WK_UP_Pin */
  GPIO_InitStruct.Pin = WK_UP_Pin;
 8000746:	2301      	movs	r3, #1
 8000748:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800074a:	2300      	movs	r3, #0
 800074c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800074e:	2302      	movs	r3, #2
 8000750:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(WK_UP_GPIO_Port, &GPIO_InitStruct);
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	4619      	mov	r1, r3
 8000756:	480a      	ldr	r0, [pc, #40]	@ (8000780 <MX_KEY_GPIO_Init+0x6c>)
 8000758:	f001 feae 	bl	80024b8 <HAL_GPIO_Init>
  /*Configure GPIO pins : KEY0_Pin KEY1_Pin */
  GPIO_InitStruct.Pin = KEY0_Pin|KEY1_Pin;
 800075c:	f248 0302 	movw	r3, #32770	@ 0x8002
 8000760:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000762:	2300      	movs	r3, #0
 8000764:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000766:	2301      	movs	r3, #1
 8000768:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800076a:	1d3b      	adds	r3, r7, #4
 800076c:	4619      	mov	r1, r3
 800076e:	4804      	ldr	r0, [pc, #16]	@ (8000780 <MX_KEY_GPIO_Init+0x6c>)
 8000770:	f001 fea2 	bl	80024b8 <HAL_GPIO_Init>
}
 8000774:	bf00      	nop
 8000776:	3718      	adds	r7, #24
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	58024400 	.word	0x58024400
 8000780:	58020000 	.word	0x58020000

08000784 <key_scan>:
  * KEY0_PRES, 1, KEY0 按下
  * KEY1_PRES, 2, KEY1 按下
  * WKUP_PRES, 3, WKUP 按下
 */
uint8_t key_scan(uint8_t mode)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b084      	sub	sp, #16
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	71fb      	strb	r3, [r7, #7]
    static uint8_t key_up = 1; /* 按键按松开标志 */
    uint8_t keyval = 0;
 800078e:	2300      	movs	r3, #0
 8000790:	73fb      	strb	r3, [r7, #15]
    if (mode) key_up = 1; /* 支持连按 */
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d002      	beq.n	800079e <key_scan+0x1a>
 8000798:	4b30      	ldr	r3, [pc, #192]	@ (800085c <key_scan+0xd8>)
 800079a:	2201      	movs	r2, #1
 800079c:	701a      	strb	r2, [r3, #0]
    // 获取按键的实际电平状态
    GPIO_PinState key0_state = HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin);
 800079e:	2102      	movs	r1, #2
 80007a0:	482f      	ldr	r0, [pc, #188]	@ (8000860 <key_scan+0xdc>)
 80007a2:	f002 f839 	bl	8002818 <HAL_GPIO_ReadPin>
 80007a6:	4603      	mov	r3, r0
 80007a8:	73bb      	strb	r3, [r7, #14]
    GPIO_PinState key1_state = HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin);
 80007aa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007ae:	482c      	ldr	r0, [pc, #176]	@ (8000860 <key_scan+0xdc>)
 80007b0:	f002 f832 	bl	8002818 <HAL_GPIO_ReadPin>
 80007b4:	4603      	mov	r3, r0
 80007b6:	737b      	strb	r3, [r7, #13]
    GPIO_PinState wkup_state = HAL_GPIO_ReadPin(WK_UP_GPIO_Port, WK_UP_Pin);
 80007b8:	2101      	movs	r1, #1
 80007ba:	4829      	ldr	r0, [pc, #164]	@ (8000860 <key_scan+0xdc>)
 80007bc:	f002 f82c 	bl	8002818 <HAL_GPIO_ReadPin>
 80007c0:	4603      	mov	r3, r0
 80007c2:	733b      	strb	r3, [r7, #12]
    /* 按键松开标志为 1, 且有任意一个按键按下了 */
    // 注意：KEY0和KEY1是上拉，按下为低电平；WK_UP是下拉，按下为高电平。
    if (key_up && (key0_state == GPIO_PIN_RESET || key1_state == GPIO_PIN_RESET || wkup_state == GPIO_PIN_SET))
 80007c4:	4b25      	ldr	r3, [pc, #148]	@ (800085c <key_scan+0xd8>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d033      	beq.n	8000834 <key_scan+0xb0>
 80007cc:	7bbb      	ldrb	r3, [r7, #14]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d005      	beq.n	80007de <key_scan+0x5a>
 80007d2:	7b7b      	ldrb	r3, [r7, #13]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d002      	beq.n	80007de <key_scan+0x5a>
 80007d8:	7b3b      	ldrb	r3, [r7, #12]
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d12a      	bne.n	8000834 <key_scan+0xb0>
    {
        HAL_Delay(10); /* 去抖动 */ // 短暂延时进行消抖
 80007de:	200a      	movs	r0, #10
 80007e0:	f000 ff4e 	bl	8001680 <HAL_Delay>
        // 再次读取以确认按键状态，防止抖动
        key0_state = HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin);
 80007e4:	2102      	movs	r1, #2
 80007e6:	481e      	ldr	r0, [pc, #120]	@ (8000860 <key_scan+0xdc>)
 80007e8:	f002 f816 	bl	8002818 <HAL_GPIO_ReadPin>
 80007ec:	4603      	mov	r3, r0
 80007ee:	73bb      	strb	r3, [r7, #14]
        key1_state = HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin);
 80007f0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007f4:	481a      	ldr	r0, [pc, #104]	@ (8000860 <key_scan+0xdc>)
 80007f6:	f002 f80f 	bl	8002818 <HAL_GPIO_ReadPin>
 80007fa:	4603      	mov	r3, r0
 80007fc:	737b      	strb	r3, [r7, #13]
        wkup_state = HAL_GPIO_ReadPin(WK_UP_GPIO_Port, WK_UP_Pin);
 80007fe:	2101      	movs	r1, #1
 8000800:	4817      	ldr	r0, [pc, #92]	@ (8000860 <key_scan+0xdc>)
 8000802:	f002 f809 	bl	8002818 <HAL_GPIO_ReadPin>
 8000806:	4603      	mov	r3, r0
 8000808:	733b      	strb	r3, [r7, #12]
        key_up = 0; // 设置按键已按下标志
 800080a:	4b14      	ldr	r3, [pc, #80]	@ (800085c <key_scan+0xd8>)
 800080c:	2200      	movs	r2, #0
 800080e:	701a      	strb	r2, [r3, #0]
        // 根据按键状态判断是哪个按键被按下
        // 优先级：WK_UP > KEY1 > KEY0
        if (wkup_state == GPIO_PIN_SET)
 8000810:	7b3b      	ldrb	r3, [r7, #12]
 8000812:	2b01      	cmp	r3, #1
 8000814:	d102      	bne.n	800081c <key_scan+0x98>
        {
            keyval = WKUP_PRES;
 8000816:	2303      	movs	r3, #3
 8000818:	73fb      	strb	r3, [r7, #15]
        if (wkup_state == GPIO_PIN_SET)
 800081a:	e018      	b.n	800084e <key_scan+0xca>
        }
        else if (key1_state == GPIO_PIN_RESET) // KEY1是上拉，按下为低电平
 800081c:	7b7b      	ldrb	r3, [r7, #13]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d102      	bne.n	8000828 <key_scan+0xa4>
        {
            keyval = KEY1_PRES;
 8000822:	2302      	movs	r3, #2
 8000824:	73fb      	strb	r3, [r7, #15]
        if (wkup_state == GPIO_PIN_SET)
 8000826:	e012      	b.n	800084e <key_scan+0xca>
        }
        else if (key0_state == GPIO_PIN_RESET) // KEY0是上拉，按下为低电平
 8000828:	7bbb      	ldrb	r3, [r7, #14]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d10f      	bne.n	800084e <key_scan+0xca>
        {
            keyval = KEY0_PRES;
 800082e:	2301      	movs	r3, #1
 8000830:	73fb      	strb	r3, [r7, #15]
        if (wkup_state == GPIO_PIN_SET)
 8000832:	e00c      	b.n	800084e <key_scan+0xca>
        }
    }
    // 没有任何按键按下, 标记按键松开
    // 此时所有按键都处于非按下状态 (KEY0/KEY1 高电平，WK_UP 低电平)
    else if (key0_state == GPIO_PIN_SET && key1_state == GPIO_PIN_SET && wkup_state == GPIO_PIN_RESET)
 8000834:	7bbb      	ldrb	r3, [r7, #14]
 8000836:	2b01      	cmp	r3, #1
 8000838:	d10a      	bne.n	8000850 <key_scan+0xcc>
 800083a:	7b7b      	ldrb	r3, [r7, #13]
 800083c:	2b01      	cmp	r3, #1
 800083e:	d107      	bne.n	8000850 <key_scan+0xcc>
 8000840:	7b3b      	ldrb	r3, [r7, #12]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d104      	bne.n	8000850 <key_scan+0xcc>
    {
        key_up = 1;
 8000846:	4b05      	ldr	r3, [pc, #20]	@ (800085c <key_scan+0xd8>)
 8000848:	2201      	movs	r2, #1
 800084a:	701a      	strb	r2, [r3, #0]
 800084c:	e000      	b.n	8000850 <key_scan+0xcc>
        if (wkup_state == GPIO_PIN_SET)
 800084e:	bf00      	nop
    }
    return keyval; /* 返回键值 */
 8000850:	7bfb      	ldrb	r3, [r7, #15]
}
 8000852:	4618      	mov	r0, r3
 8000854:	3710      	adds	r7, #16
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	24000000 	.word	0x24000000
 8000860:	58020000 	.word	0x58020000

08000864 <MX_LED_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_LED_GPIO_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b088      	sub	sp, #32
 8000868:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086a:	f107 030c 	add.w	r3, r7, #12
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
 8000876:	60da      	str	r2, [r3, #12]
 8000878:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800087a:	4b24      	ldr	r3, [pc, #144]	@ (800090c <MX_LED_GPIO_Init+0xa8>)
 800087c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000880:	4a22      	ldr	r2, [pc, #136]	@ (800090c <MX_LED_GPIO_Init+0xa8>)
 8000882:	f043 0310 	orr.w	r3, r3, #16
 8000886:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800088a:	4b20      	ldr	r3, [pc, #128]	@ (800090c <MX_LED_GPIO_Init+0xa8>)
 800088c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000890:	f003 0310 	and.w	r3, r3, #16
 8000894:	60bb      	str	r3, [r7, #8]
 8000896:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000898:	4b1c      	ldr	r3, [pc, #112]	@ (800090c <MX_LED_GPIO_Init+0xa8>)
 800089a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800089e:	4a1b      	ldr	r2, [pc, #108]	@ (800090c <MX_LED_GPIO_Init+0xa8>)
 80008a0:	f043 0302 	orr.w	r3, r3, #2
 80008a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008a8:	4b18      	ldr	r3, [pc, #96]	@ (800090c <MX_LED_GPIO_Init+0xa8>)
 80008aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008ae:	f003 0302 	and.w	r3, r3, #2
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_Pin|LED2_Pin, GPIO_PIN_SET);
 80008b6:	2201      	movs	r2, #1
 80008b8:	2160      	movs	r1, #96	@ 0x60
 80008ba:	4815      	ldr	r0, [pc, #84]	@ (8000910 <MX_LED_GPIO_Init+0xac>)
 80008bc:	f001 ffc4 	bl	8002848 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 80008c0:	2201      	movs	r2, #1
 80008c2:	2110      	movs	r1, #16
 80008c4:	4813      	ldr	r0, [pc, #76]	@ (8000914 <MX_LED_GPIO_Init+0xb0>)
 80008c6:	f001 ffbf 	bl	8002848 <HAL_GPIO_WritePin>
  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 80008ca:	2360      	movs	r3, #96	@ 0x60
 80008cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ce:	2301      	movs	r3, #1
 80008d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d6:	2300      	movs	r3, #0
 80008d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008da:	f107 030c 	add.w	r3, r7, #12
 80008de:	4619      	mov	r1, r3
 80008e0:	480b      	ldr	r0, [pc, #44]	@ (8000910 <MX_LED_GPIO_Init+0xac>)
 80008e2:	f001 fde9 	bl	80024b8 <HAL_GPIO_Init>
  /*Configure GPIO pin : LED0_Pin */
  GPIO_InitStruct.Pin = LED0_Pin;
 80008e6:	2310      	movs	r3, #16
 80008e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ea:	2301      	movs	r3, #1
 80008ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f2:	2300      	movs	r3, #0
 80008f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 80008f6:	f107 030c 	add.w	r3, r7, #12
 80008fa:	4619      	mov	r1, r3
 80008fc:	4805      	ldr	r0, [pc, #20]	@ (8000914 <MX_LED_GPIO_Init+0xb0>)
 80008fe:	f001 fddb 	bl	80024b8 <HAL_GPIO_Init>
}
 8000902:	bf00      	nop
 8000904:	3720      	adds	r7, #32
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	58024400 	.word	0x58024400
 8000910:	58021000 	.word	0x58021000
 8000914:	58020400 	.word	0x58020400

08000918 <bsp_init>:
#include "bsp_init.h"

void bsp_init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
	MX_LED_GPIO_Init();
 800091c:	f7ff ffa2 	bl	8000864 <MX_LED_GPIO_Init>
	MX_BEEP_GPIO_Init();
 8000920:	f7ff fec4 	bl	80006ac <MX_BEEP_GPIO_Init>
	MX_KEY_GPIO_Init();
 8000924:	f7ff fef6 	bl	8000714 <MX_KEY_GPIO_Init>
	// MX_EXTI_GPIO_Init();
	MX_USART1_UART_Init();
 8000928:	f000 fd1c 	bl	8001364 <MX_USART1_UART_Init>
	// MX_IWDG1_Init(); // 溢出时间约1s
	// MX_TIM6_Init(); // 溢出时间约500ms
}
 800092c:	bf00      	nop
 800092e:	bd80      	pop	{r7, pc}

08000930 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000936:	f000 f8a7 	bl	8000a88 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800093a:	f000 fe0f 	bl	800155c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800093e:	f000 f827 	bl	8000990 <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  bsp_init();
 8000942:	f7ff ffe9 	bl	8000918 <bsp_init>
  printf("ATIM PWM Test\r\n");
 8000946:	4810      	ldr	r0, [pc, #64]	@ (8000988 <main+0x58>)
 8000948:	f007 ffae 	bl	80088a8 <puts>
  MX_TIM15_Init();
 800094c:	f000 fab8 	bl	8000ec0 <MX_TIM15_Init>
  /* USER CODE END 2 */
  uint8_t key_val = 0;
 8000950:	2300      	movs	r3, #0
 8000952:	71fb      	strb	r3, [r7, #7]
  //tim15_set_pwm(5);
  uint8_t count = 0;
 8000954:	2300      	movs	r3, #0
 8000956:	71bb      	strb	r3, [r7, #6]
  while (1)
  {
	count = 10;
 8000958:	230a      	movs	r3, #10
 800095a:	71bb      	strb	r3, [r7, #6]
    key_val = key_scan(0);
 800095c:	2000      	movs	r0, #0
 800095e:	f7ff ff11 	bl	8000784 <key_scan>
 8000962:	4603      	mov	r3, r0
 8000964:	71fb      	strb	r3, [r7, #7]
    if(key_val == KEY0_PRES)
 8000966:	79fb      	ldrb	r3, [r7, #7]
 8000968:	2b01      	cmp	r3, #1
 800096a:	d108      	bne.n	800097e <main+0x4e>
    {
    	tim15_set_pwm(count);
 800096c:	79bb      	ldrb	r3, [r7, #6]
 800096e:	4618      	mov	r0, r3
 8000970:	f000 fc88 	bl	8001284 <tim15_set_pwm>
    	printf("%d PWM pulses will be generated.\r\n", count);
 8000974:	79bb      	ldrb	r3, [r7, #6]
 8000976:	4619      	mov	r1, r3
 8000978:	4804      	ldr	r0, [pc, #16]	@ (800098c <main+0x5c>)
 800097a:	f007 ff2d 	bl	80087d8 <iprintf>
    }
    HAL_Delay(10);
 800097e:	200a      	movs	r0, #10
 8000980:	f000 fe7e 	bl	8001680 <HAL_Delay>
	count = 10;
 8000984:	e7e8      	b.n	8000958 <main+0x28>
 8000986:	bf00      	nop
 8000988:	08009584 	.word	0x08009584
 800098c:	08009594 	.word	0x08009594

08000990 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b09c      	sub	sp, #112	@ 0x70
 8000994:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000996:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800099a:	224c      	movs	r2, #76	@ 0x4c
 800099c:	2100      	movs	r1, #0
 800099e:	4618      	mov	r0, r3
 80009a0:	f008 f862 	bl	8008a68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009a4:	1d3b      	adds	r3, r7, #4
 80009a6:	2220      	movs	r2, #32
 80009a8:	2100      	movs	r1, #0
 80009aa:	4618      	mov	r0, r3
 80009ac:	f008 f85c 	bl	8008a68 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80009b0:	2002      	movs	r0, #2
 80009b2:	f001 ff87 	bl	80028c4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80009b6:	2300      	movs	r3, #0
 80009b8:	603b      	str	r3, [r7, #0]
 80009ba:	4b31      	ldr	r3, [pc, #196]	@ (8000a80 <SystemClock_Config+0xf0>)
 80009bc:	699b      	ldr	r3, [r3, #24]
 80009be:	4a30      	ldr	r2, [pc, #192]	@ (8000a80 <SystemClock_Config+0xf0>)
 80009c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80009c4:	6193      	str	r3, [r2, #24]
 80009c6:	4b2e      	ldr	r3, [pc, #184]	@ (8000a80 <SystemClock_Config+0xf0>)
 80009c8:	699b      	ldr	r3, [r3, #24]
 80009ca:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009ce:	603b      	str	r3, [r7, #0]
 80009d0:	4b2c      	ldr	r3, [pc, #176]	@ (8000a84 <SystemClock_Config+0xf4>)
 80009d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009d4:	4a2b      	ldr	r2, [pc, #172]	@ (8000a84 <SystemClock_Config+0xf4>)
 80009d6:	f043 0301 	orr.w	r3, r3, #1
 80009da:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80009dc:	4b29      	ldr	r3, [pc, #164]	@ (8000a84 <SystemClock_Config+0xf4>)
 80009de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009e0:	f003 0301 	and.w	r3, r3, #1
 80009e4:	603b      	str	r3, [r7, #0]
 80009e6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009e8:	bf00      	nop
 80009ea:	4b25      	ldr	r3, [pc, #148]	@ (8000a80 <SystemClock_Config+0xf0>)
 80009ec:	699b      	ldr	r3, [r3, #24]
 80009ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80009f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80009f6:	d1f8      	bne.n	80009ea <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80009f8:	2309      	movs	r3, #9
 80009fa:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009fc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a00:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a02:	2301      	movs	r3, #1
 8000a04:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a06:	2302      	movs	r3, #2
 8000a08:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 8000a12:	23f0      	movs	r3, #240	@ 0xf0
 8000a14:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a16:	2302      	movs	r3, #2
 8000a18:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000a22:	2308      	movs	r3, #8
 8000a24:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a26:	2300      	movs	r3, #0
 8000a28:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a32:	4618      	mov	r0, r3
 8000a34:	f001 ff80 	bl	8002938 <HAL_RCC_OscConfig>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000a3e:	f000 f84f 	bl	8000ae0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a42:	233f      	movs	r3, #63	@ 0x3f
 8000a44:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a46:	2303      	movs	r3, #3
 8000a48:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a4e:	2308      	movs	r3, #8
 8000a50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a52:	2340      	movs	r3, #64	@ 0x40
 8000a54:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a56:	2340      	movs	r3, #64	@ 0x40
 8000a58:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a5e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a60:	2340      	movs	r3, #64	@ 0x40
 8000a62:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a64:	1d3b      	adds	r3, r7, #4
 8000a66:	2104      	movs	r1, #4
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f002 fbbf 	bl	80031ec <HAL_RCC_ClockConfig>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000a74:	f000 f834 	bl	8000ae0 <Error_Handler>
  }
}
 8000a78:	bf00      	nop
 8000a7a:	3770      	adds	r7, #112	@ 0x70
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	58024800 	.word	0x58024800
 8000a84:	58000400 	.word	0x58000400

08000a88 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000a8e:	463b      	mov	r3, r7
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000a9a:	f000 ff31 	bl	8001900 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000aaa:	231f      	movs	r3, #31
 8000aac:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000aae:	2387      	movs	r3, #135	@ 0x87
 8000ab0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000aba:	2301      	movs	r3, #1
 8000abc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000aca:	463b      	mov	r3, r7
 8000acc:	4618      	mov	r0, r3
 8000ace:	f000 ff4f 	bl	8001970 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000ad2:	2004      	movs	r0, #4
 8000ad4:	f000 ff2c 	bl	8001930 <HAL_MPU_Enable>

}
 8000ad8:	bf00      	nop
 8000ada:	3710      	adds	r7, #16
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae4:	b672      	cpsid	i
}
 8000ae6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ae8:	bf00      	nop
 8000aea:	e7fd      	b.n	8000ae8 <Error_Handler+0x8>

08000aec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af2:	4b0a      	ldr	r3, [pc, #40]	@ (8000b1c <HAL_MspInit+0x30>)
 8000af4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000af8:	4a08      	ldr	r2, [pc, #32]	@ (8000b1c <HAL_MspInit+0x30>)
 8000afa:	f043 0302 	orr.w	r3, r3, #2
 8000afe:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000b02:	4b06      	ldr	r3, [pc, #24]	@ (8000b1c <HAL_MspInit+0x30>)
 8000b04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b08:	f003 0302 	and.w	r3, r3, #2
 8000b0c:	607b      	str	r3, [r7, #4]
 8000b0e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b10:	bf00      	nop
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	58024400 	.word	0x58024400

08000b20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b24:	bf00      	nop
 8000b26:	e7fd      	b.n	8000b24 <NMI_Handler+0x4>

08000b28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b2c:	bf00      	nop
 8000b2e:	e7fd      	b.n	8000b2c <HardFault_Handler+0x4>

08000b30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b34:	bf00      	nop
 8000b36:	e7fd      	b.n	8000b34 <MemManage_Handler+0x4>

08000b38 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b3c:	bf00      	nop
 8000b3e:	e7fd      	b.n	8000b3c <BusFault_Handler+0x4>

08000b40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b44:	bf00      	nop
 8000b46:	e7fd      	b.n	8000b44 <UsageFault_Handler+0x4>

08000b48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr

08000b56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr

08000b72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b72:	b580      	push	{r7, lr}
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b76:	f000 fd63 	bl	8001640 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
	...

08000b80 <WWDG_IRQHandler>:

/**
  * @brief This function handles Window watchdog interrupt.
  */
void WWDG_IRQHandler(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN WWDG_IRQn 0 */

  /* USER CODE END WWDG_IRQn 0 */
  HAL_WWDG_IRQHandler(&hwwdg1);
 8000b84:	4802      	ldr	r0, [pc, #8]	@ (8000b90 <WWDG_IRQHandler+0x10>)
 8000b86:	f007 fd3b 	bl	8008600 <HAL_WWDG_IRQHandler>
  /* USER CODE BEGIN WWDG_IRQn 1 */
  /* USER CODE END WWDG_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	240002a4 	.word	0x240002a4

08000b94 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI_KEY1_Pin);
 8000b98:	2002      	movs	r0, #2
 8000b9a:	f001 fe6e 	bl	800287a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
	...

08000ba4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ba8:	4802      	ldr	r0, [pc, #8]	@ (8000bb4 <TIM2_IRQHandler+0x10>)
 8000baa:	f004 fe9d 	bl	80058e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	24000090 	.word	0x24000090

08000bb8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000bbc:	4802      	ldr	r0, [pc, #8]	@ (8000bc8 <TIM3_IRQHandler+0x10>)
 8000bbe:	f004 fe93 	bl	80058e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  /* USER CODE END TIM3_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	240000dc 	.word	0x240000dc

08000bcc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000bd0:	4802      	ldr	r0, [pc, #8]	@ (8000bdc <USART1_IRQHandler+0x10>)
 8000bd2:	f006 f839 	bl	8006c48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	24000210 	.word	0x24000210

08000be0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000be4:	4802      	ldr	r0, [pc, #8]	@ (8000bf0 <TIM5_IRQHandler+0x10>)
 8000be6:	f004 fe7f 	bl	80058e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	24000128 	.word	0x24000128

08000bf4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000bf8:	4802      	ldr	r0, [pc, #8]	@ (8000c04 <TIM6_DAC_IRQHandler+0x10>)
 8000bfa:	f004 fe75 	bl	80058e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	24000174 	.word	0x24000174

08000c08 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b086      	sub	sp, #24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	60f8      	str	r0, [r7, #12]
 8000c10:	60b9      	str	r1, [r7, #8]
 8000c12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c14:	2300      	movs	r3, #0
 8000c16:	617b      	str	r3, [r7, #20]
 8000c18:	e00a      	b.n	8000c30 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c1a:	f3af 8000 	nop.w
 8000c1e:	4601      	mov	r1, r0
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	1c5a      	adds	r2, r3, #1
 8000c24:	60ba      	str	r2, [r7, #8]
 8000c26:	b2ca      	uxtb	r2, r1
 8000c28:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	617b      	str	r3, [r7, #20]
 8000c30:	697a      	ldr	r2, [r7, #20]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	dbf0      	blt.n	8000c1a <_read+0x12>
  }

  return len;
 8000c38:	687b      	ldr	r3, [r7, #4]
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3718      	adds	r7, #24
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b086      	sub	sp, #24
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	60f8      	str	r0, [r7, #12]
 8000c4a:	60b9      	str	r1, [r7, #8]
 8000c4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c4e:	2300      	movs	r3, #0
 8000c50:	617b      	str	r3, [r7, #20]
 8000c52:	e009      	b.n	8000c68 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	1c5a      	adds	r2, r3, #1
 8000c58:	60ba      	str	r2, [r7, #8]
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f000 fc3f 	bl	80014e0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	3301      	adds	r3, #1
 8000c66:	617b      	str	r3, [r7, #20]
 8000c68:	697a      	ldr	r2, [r7, #20]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	dbf1      	blt.n	8000c54 <_write+0x12>
  }
  return len;
 8000c70:	687b      	ldr	r3, [r7, #4]
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3718      	adds	r7, #24
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <_close>:

int _close(int file)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	b083      	sub	sp, #12
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr

08000c92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c92:	b480      	push	{r7}
 8000c94:	b083      	sub	sp, #12
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
 8000c9a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ca2:	605a      	str	r2, [r3, #4]
  return 0;
 8000ca4:	2300      	movs	r3, #0
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr

08000cb2 <_isatty>:

int _isatty(int file)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	b083      	sub	sp, #12
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cba:	2301      	movs	r3, #1
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b085      	sub	sp, #20
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cd4:	2300      	movs	r3, #0
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3714      	adds	r7, #20
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
	...

08000ce4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cec:	4a14      	ldr	r2, [pc, #80]	@ (8000d40 <_sbrk+0x5c>)
 8000cee:	4b15      	ldr	r3, [pc, #84]	@ (8000d44 <_sbrk+0x60>)
 8000cf0:	1ad3      	subs	r3, r2, r3
 8000cf2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cf8:	4b13      	ldr	r3, [pc, #76]	@ (8000d48 <_sbrk+0x64>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d102      	bne.n	8000d06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d00:	4b11      	ldr	r3, [pc, #68]	@ (8000d48 <_sbrk+0x64>)
 8000d02:	4a12      	ldr	r2, [pc, #72]	@ (8000d4c <_sbrk+0x68>)
 8000d04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d06:	4b10      	ldr	r3, [pc, #64]	@ (8000d48 <_sbrk+0x64>)
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d207      	bcs.n	8000d24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d14:	f007 fef6 	bl	8008b04 <__errno>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	220c      	movs	r2, #12
 8000d1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d22:	e009      	b.n	8000d38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d24:	4b08      	ldr	r3, [pc, #32]	@ (8000d48 <_sbrk+0x64>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d2a:	4b07      	ldr	r3, [pc, #28]	@ (8000d48 <_sbrk+0x64>)
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4413      	add	r3, r2
 8000d32:	4a05      	ldr	r2, [pc, #20]	@ (8000d48 <_sbrk+0x64>)
 8000d34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d36:	68fb      	ldr	r3, [r7, #12]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3718      	adds	r7, #24
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	24080000 	.word	0x24080000
 8000d44:	00000400 	.word	0x00000400
 8000d48:	2400008c 	.word	0x2400008c
 8000d4c:	24000408 	.word	0x24000408

08000d50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d54:	4b43      	ldr	r3, [pc, #268]	@ (8000e64 <SystemInit+0x114>)
 8000d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d5a:	4a42      	ldr	r2, [pc, #264]	@ (8000e64 <SystemInit+0x114>)
 8000d5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d64:	4b40      	ldr	r3, [pc, #256]	@ (8000e68 <SystemInit+0x118>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f003 030f 	and.w	r3, r3, #15
 8000d6c:	2b06      	cmp	r3, #6
 8000d6e:	d807      	bhi.n	8000d80 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d70:	4b3d      	ldr	r3, [pc, #244]	@ (8000e68 <SystemInit+0x118>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f023 030f 	bic.w	r3, r3, #15
 8000d78:	4a3b      	ldr	r2, [pc, #236]	@ (8000e68 <SystemInit+0x118>)
 8000d7a:	f043 0307 	orr.w	r3, r3, #7
 8000d7e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000d80:	4b3a      	ldr	r3, [pc, #232]	@ (8000e6c <SystemInit+0x11c>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a39      	ldr	r2, [pc, #228]	@ (8000e6c <SystemInit+0x11c>)
 8000d86:	f043 0301 	orr.w	r3, r3, #1
 8000d8a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d8c:	4b37      	ldr	r3, [pc, #220]	@ (8000e6c <SystemInit+0x11c>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000d92:	4b36      	ldr	r3, [pc, #216]	@ (8000e6c <SystemInit+0x11c>)
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	4935      	ldr	r1, [pc, #212]	@ (8000e6c <SystemInit+0x11c>)
 8000d98:	4b35      	ldr	r3, [pc, #212]	@ (8000e70 <SystemInit+0x120>)
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d9e:	4b32      	ldr	r3, [pc, #200]	@ (8000e68 <SystemInit+0x118>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f003 0308 	and.w	r3, r3, #8
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d007      	beq.n	8000dba <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000daa:	4b2f      	ldr	r3, [pc, #188]	@ (8000e68 <SystemInit+0x118>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f023 030f 	bic.w	r3, r3, #15
 8000db2:	4a2d      	ldr	r2, [pc, #180]	@ (8000e68 <SystemInit+0x118>)
 8000db4:	f043 0307 	orr.w	r3, r3, #7
 8000db8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000dba:	4b2c      	ldr	r3, [pc, #176]	@ (8000e6c <SystemInit+0x11c>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000dc0:	4b2a      	ldr	r3, [pc, #168]	@ (8000e6c <SystemInit+0x11c>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000dc6:	4b29      	ldr	r3, [pc, #164]	@ (8000e6c <SystemInit+0x11c>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000dcc:	4b27      	ldr	r3, [pc, #156]	@ (8000e6c <SystemInit+0x11c>)
 8000dce:	4a29      	ldr	r2, [pc, #164]	@ (8000e74 <SystemInit+0x124>)
 8000dd0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000dd2:	4b26      	ldr	r3, [pc, #152]	@ (8000e6c <SystemInit+0x11c>)
 8000dd4:	4a28      	ldr	r2, [pc, #160]	@ (8000e78 <SystemInit+0x128>)
 8000dd6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000dd8:	4b24      	ldr	r3, [pc, #144]	@ (8000e6c <SystemInit+0x11c>)
 8000dda:	4a28      	ldr	r2, [pc, #160]	@ (8000e7c <SystemInit+0x12c>)
 8000ddc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000dde:	4b23      	ldr	r3, [pc, #140]	@ (8000e6c <SystemInit+0x11c>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000de4:	4b21      	ldr	r3, [pc, #132]	@ (8000e6c <SystemInit+0x11c>)
 8000de6:	4a25      	ldr	r2, [pc, #148]	@ (8000e7c <SystemInit+0x12c>)
 8000de8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000dea:	4b20      	ldr	r3, [pc, #128]	@ (8000e6c <SystemInit+0x11c>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000df0:	4b1e      	ldr	r3, [pc, #120]	@ (8000e6c <SystemInit+0x11c>)
 8000df2:	4a22      	ldr	r2, [pc, #136]	@ (8000e7c <SystemInit+0x12c>)
 8000df4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000df6:	4b1d      	ldr	r3, [pc, #116]	@ (8000e6c <SystemInit+0x11c>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000dfc:	4b1b      	ldr	r3, [pc, #108]	@ (8000e6c <SystemInit+0x11c>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a1a      	ldr	r2, [pc, #104]	@ (8000e6c <SystemInit+0x11c>)
 8000e02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e06:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000e08:	4b18      	ldr	r3, [pc, #96]	@ (8000e6c <SystemInit+0x11c>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000e0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000e80 <SystemInit+0x130>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	4b1c      	ldr	r3, [pc, #112]	@ (8000e84 <SystemInit+0x134>)
 8000e14:	4013      	ands	r3, r2
 8000e16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000e1a:	d202      	bcs.n	8000e22 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000e1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000e88 <SystemInit+0x138>)
 8000e1e:	2201      	movs	r2, #1
 8000e20:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000e22:	4b12      	ldr	r3, [pc, #72]	@ (8000e6c <SystemInit+0x11c>)
 8000e24:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000e28:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d113      	bne.n	8000e58 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000e30:	4b0e      	ldr	r3, [pc, #56]	@ (8000e6c <SystemInit+0x11c>)
 8000e32:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000e36:	4a0d      	ldr	r2, [pc, #52]	@ (8000e6c <SystemInit+0x11c>)
 8000e38:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e3c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000e40:	4b12      	ldr	r3, [pc, #72]	@ (8000e8c <SystemInit+0x13c>)
 8000e42:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000e46:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000e48:	4b08      	ldr	r3, [pc, #32]	@ (8000e6c <SystemInit+0x11c>)
 8000e4a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000e4e:	4a07      	ldr	r2, [pc, #28]	@ (8000e6c <SystemInit+0x11c>)
 8000e50:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000e54:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000e58:	bf00      	nop
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	e000ed00 	.word	0xe000ed00
 8000e68:	52002000 	.word	0x52002000
 8000e6c:	58024400 	.word	0x58024400
 8000e70:	eaf6ed7f 	.word	0xeaf6ed7f
 8000e74:	02020200 	.word	0x02020200
 8000e78:	01ff0000 	.word	0x01ff0000
 8000e7c:	01010280 	.word	0x01010280
 8000e80:	5c001000 	.word	0x5c001000
 8000e84:	ffff0000 	.word	0xffff0000
 8000e88:	51008108 	.word	0x51008108
 8000e8c:	52004000 	.word	0x52004000

08000e90 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000e94:	4b09      	ldr	r3, [pc, #36]	@ (8000ebc <ExitRun0Mode+0x2c>)
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	4a08      	ldr	r2, [pc, #32]	@ (8000ebc <ExitRun0Mode+0x2c>)
 8000e9a:	f043 0302 	orr.w	r3, r3, #2
 8000e9e:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000ea0:	bf00      	nop
 8000ea2:	4b06      	ldr	r3, [pc, #24]	@ (8000ebc <ExitRun0Mode+0x2c>)
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d0f9      	beq.n	8000ea2 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000eae:	bf00      	nop
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	58024800 	.word	0x58024800

08000ec0 <MX_TIM15_Init>:
  /* USER CODE END TIM6_Init 2 */

}
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b09a      	sub	sp, #104	@ 0x68
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ec6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	605a      	str	r2, [r3, #4]
 8000ed0:	609a      	str	r2, [r3, #8]
 8000ed2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ed4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ee0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]
 8000ef0:	615a      	str	r2, [r3, #20]
 8000ef2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ef4:	1d3b      	adds	r3, r7, #4
 8000ef6:	222c      	movs	r2, #44	@ 0x2c
 8000ef8:	2100      	movs	r1, #0
 8000efa:	4618      	mov	r0, r3
 8000efc:	f007 fdb4 	bl	8008a68 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000f00:	4b46      	ldr	r3, [pc, #280]	@ (800101c <MX_TIM15_Init+0x15c>)
 8000f02:	4a47      	ldr	r2, [pc, #284]	@ (8001020 <MX_TIM15_Init+0x160>)
 8000f04:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 4799;
 8000f06:	4b45      	ldr	r3, [pc, #276]	@ (800101c <MX_TIM15_Init+0x15c>)
 8000f08:	f241 22bf 	movw	r2, #4799	@ 0x12bf
 8000f0c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f0e:	4b43      	ldr	r3, [pc, #268]	@ (800101c <MX_TIM15_Init+0x15c>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 9999;
 8000f14:	4b41      	ldr	r3, [pc, #260]	@ (800101c <MX_TIM15_Init+0x15c>)
 8000f16:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000f1a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f1c:	4b3f      	ldr	r3, [pc, #252]	@ (800101c <MX_TIM15_Init+0x15c>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000f22:	4b3e      	ldr	r3, [pc, #248]	@ (800101c <MX_TIM15_Init+0x15c>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f28:	4b3c      	ldr	r3, [pc, #240]	@ (800101c <MX_TIM15_Init+0x15c>)
 8000f2a:	2280      	movs	r2, #128	@ 0x80
 8000f2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000f2e:	483b      	ldr	r0, [pc, #236]	@ (800101c <MX_TIM15_Init+0x15c>)
 8000f30:	f004 fb14 	bl	800555c <HAL_TIM_Base_Init>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 8000f3a:	f7ff fdd1 	bl	8000ae0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f42:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000f44:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4834      	ldr	r0, [pc, #208]	@ (800101c <MX_TIM15_Init+0x15c>)
 8000f4c:	f004 ff10 	bl	8005d70 <HAL_TIM_ConfigClockSource>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_TIM15_Init+0x9a>
  {
    Error_Handler();
 8000f56:	f7ff fdc3 	bl	8000ae0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000f5a:	4830      	ldr	r0, [pc, #192]	@ (800101c <MX_TIM15_Init+0x15c>)
 8000f5c:	f004 fb55 	bl	800560a <HAL_TIM_PWM_Init>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_TIM15_Init+0xaa>
  {
    Error_Handler();
 8000f66:	f7ff fdbb 	bl	8000ae0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000f72:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000f76:	4619      	mov	r1, r3
 8000f78:	4828      	ldr	r0, [pc, #160]	@ (800101c <MX_TIM15_Init+0x15c>)
 8000f7a:	f005 fc5d 	bl	8006838 <HAL_TIMEx_MasterConfigSynchronization>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_TIM15_Init+0xc8>
  {
    Error_Handler();
 8000f84:	f7ff fdac 	bl	8000ae0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f88:	2360      	movs	r3, #96	@ 0x60
 8000f8a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 4999;
 8000f8c:	f241 3387 	movw	r3, #4999	@ 0x1387
 8000f90:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f92:	2300      	movs	r3, #0
 8000f94:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8000f96:	2308      	movs	r3, #8
 8000f98:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8000f9e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fa2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fa8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000fac:	2200      	movs	r2, #0
 8000fae:	4619      	mov	r1, r3
 8000fb0:	481a      	ldr	r0, [pc, #104]	@ (800101c <MX_TIM15_Init+0x15c>)
 8000fb2:	f004 fda1 	bl	8005af8 <HAL_TIM_PWM_ConfigChannel>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_TIM15_Init+0x100>
  {
    Error_Handler();
 8000fbc:	f7ff fd90 	bl	8000ae0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000fd4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fd8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000fe2:	1d3b      	adds	r3, r7, #4
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	480d      	ldr	r0, [pc, #52]	@ (800101c <MX_TIM15_Init+0x15c>)
 8000fe8:	f005 fcb4 	bl	8006954 <HAL_TIMEx_ConfigBreakDeadTime>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_TIM15_Init+0x136>
  {
    Error_Handler();
 8000ff2:	f7ff fd75 	bl	8000ae0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */
  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000ff6:	4809      	ldr	r0, [pc, #36]	@ (800101c <MX_TIM15_Init+0x15c>)
 8000ff8:	f000 f8e0 	bl	80011bc <HAL_TIM_MspPostInit>
  __HAL_TIM_ENABLE_IT(&htim15, TIM_IT_UPDATE); // 使能更新中断
 8000ffc:	4b07      	ldr	r3, [pc, #28]	@ (800101c <MX_TIM15_Init+0x15c>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	68da      	ldr	r2, [r3, #12]
 8001002:	4b06      	ldr	r3, [pc, #24]	@ (800101c <MX_TIM15_Init+0x15c>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f042 0201 	orr.w	r2, r2, #1
 800100a:	60da      	str	r2, [r3, #12]
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1); // 启动PWM
 800100c:	2100      	movs	r1, #0
 800100e:	4803      	ldr	r0, [pc, #12]	@ (800101c <MX_TIM15_Init+0x15c>)
 8001010:	f004 fb5c 	bl	80056cc <HAL_TIM_PWM_Start>
}
 8001014:	bf00      	nop
 8001016:	3768      	adds	r7, #104	@ 0x68
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	240001c0 	.word	0x240001c0
 8001020:	40014000 	.word	0x40014000

08001024 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b08e      	sub	sp, #56	@ 0x38
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]
 800103a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001044:	d136      	bne.n	80010b4 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001046:	4b57      	ldr	r3, [pc, #348]	@ (80011a4 <HAL_TIM_Base_MspInit+0x180>)
 8001048:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800104c:	4a55      	ldr	r2, [pc, #340]	@ (80011a4 <HAL_TIM_Base_MspInit+0x180>)
 800104e:	f043 0301 	orr.w	r3, r3, #1
 8001052:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001056:	4b53      	ldr	r3, [pc, #332]	@ (80011a4 <HAL_TIM_Base_MspInit+0x180>)
 8001058:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800105c:	f003 0301 	and.w	r3, r3, #1
 8001060:	623b      	str	r3, [r7, #32]
 8001062:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001064:	4b4f      	ldr	r3, [pc, #316]	@ (80011a4 <HAL_TIM_Base_MspInit+0x180>)
 8001066:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800106a:	4a4e      	ldr	r2, [pc, #312]	@ (80011a4 <HAL_TIM_Base_MspInit+0x180>)
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001074:	4b4b      	ldr	r3, [pc, #300]	@ (80011a4 <HAL_TIM_Base_MspInit+0x180>)
 8001076:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	61fb      	str	r3, [r7, #28]
 8001080:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TIM2_KEY_Pin;
 8001082:	2301      	movs	r3, #1
 8001084:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001086:	2302      	movs	r3, #2
 8001088:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800108a:	2302      	movs	r3, #2
 800108c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800108e:	2302      	movs	r3, #2
 8001090:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001092:	2301      	movs	r3, #1
 8001094:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(TIM2_KEY_GPIO_Port, &GPIO_InitStruct);
 8001096:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800109a:	4619      	mov	r1, r3
 800109c:	4842      	ldr	r0, [pc, #264]	@ (80011a8 <HAL_TIM_Base_MspInit+0x184>)
 800109e:	f001 fa0b 	bl	80024b8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80010a2:	2200      	movs	r2, #0
 80010a4:	2100      	movs	r1, #0
 80010a6:	201c      	movs	r0, #28
 80010a8:	f000 fbf5 	bl	8001896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80010ac:	201c      	movs	r0, #28
 80010ae:	f000 fc0c 	bl	80018ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 80010b2:	e072      	b.n	800119a <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM3)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a3c      	ldr	r2, [pc, #240]	@ (80011ac <HAL_TIM_Base_MspInit+0x188>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d117      	bne.n	80010ee <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010be:	4b39      	ldr	r3, [pc, #228]	@ (80011a4 <HAL_TIM_Base_MspInit+0x180>)
 80010c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010c4:	4a37      	ldr	r2, [pc, #220]	@ (80011a4 <HAL_TIM_Base_MspInit+0x180>)
 80010c6:	f043 0302 	orr.w	r3, r3, #2
 80010ca:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80010ce:	4b35      	ldr	r3, [pc, #212]	@ (80011a4 <HAL_TIM_Base_MspInit+0x180>)
 80010d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010d4:	f003 0302 	and.w	r3, r3, #2
 80010d8:	61bb      	str	r3, [r7, #24]
 80010da:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80010dc:	2200      	movs	r2, #0
 80010de:	2100      	movs	r1, #0
 80010e0:	201d      	movs	r0, #29
 80010e2:	f000 fbd8 	bl	8001896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80010e6:	201d      	movs	r0, #29
 80010e8:	f000 fbef 	bl	80018ca <HAL_NVIC_EnableIRQ>
}
 80010ec:	e055      	b.n	800119a <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM5)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a2f      	ldr	r2, [pc, #188]	@ (80011b0 <HAL_TIM_Base_MspInit+0x18c>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d117      	bne.n	8001128 <HAL_TIM_Base_MspInit+0x104>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80010f8:	4b2a      	ldr	r3, [pc, #168]	@ (80011a4 <HAL_TIM_Base_MspInit+0x180>)
 80010fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010fe:	4a29      	ldr	r2, [pc, #164]	@ (80011a4 <HAL_TIM_Base_MspInit+0x180>)
 8001100:	f043 0308 	orr.w	r3, r3, #8
 8001104:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001108:	4b26      	ldr	r3, [pc, #152]	@ (80011a4 <HAL_TIM_Base_MspInit+0x180>)
 800110a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800110e:	f003 0308 	and.w	r3, r3, #8
 8001112:	617b      	str	r3, [r7, #20]
 8001114:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001116:	2200      	movs	r2, #0
 8001118:	2100      	movs	r1, #0
 800111a:	2032      	movs	r0, #50	@ 0x32
 800111c:	f000 fbbb 	bl	8001896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001120:	2032      	movs	r0, #50	@ 0x32
 8001122:	f000 fbd2 	bl	80018ca <HAL_NVIC_EnableIRQ>
}
 8001126:	e038      	b.n	800119a <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM6)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a21      	ldr	r2, [pc, #132]	@ (80011b4 <HAL_TIM_Base_MspInit+0x190>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d117      	bne.n	8001162 <HAL_TIM_Base_MspInit+0x13e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001132:	4b1c      	ldr	r3, [pc, #112]	@ (80011a4 <HAL_TIM_Base_MspInit+0x180>)
 8001134:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001138:	4a1a      	ldr	r2, [pc, #104]	@ (80011a4 <HAL_TIM_Base_MspInit+0x180>)
 800113a:	f043 0310 	orr.w	r3, r3, #16
 800113e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001142:	4b18      	ldr	r3, [pc, #96]	@ (80011a4 <HAL_TIM_Base_MspInit+0x180>)
 8001144:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001148:	f003 0310 	and.w	r3, r3, #16
 800114c:	613b      	str	r3, [r7, #16]
 800114e:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8001150:	2200      	movs	r2, #0
 8001152:	2101      	movs	r1, #1
 8001154:	2036      	movs	r0, #54	@ 0x36
 8001156:	f000 fb9e 	bl	8001896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800115a:	2036      	movs	r0, #54	@ 0x36
 800115c:	f000 fbb5 	bl	80018ca <HAL_NVIC_EnableIRQ>
}
 8001160:	e01b      	b.n	800119a <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM15)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a14      	ldr	r2, [pc, #80]	@ (80011b8 <HAL_TIM_Base_MspInit+0x194>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d116      	bne.n	800119a <HAL_TIM_Base_MspInit+0x176>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800116c:	4b0d      	ldr	r3, [pc, #52]	@ (80011a4 <HAL_TIM_Base_MspInit+0x180>)
 800116e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001172:	4a0c      	ldr	r2, [pc, #48]	@ (80011a4 <HAL_TIM_Base_MspInit+0x180>)
 8001174:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001178:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800117c:	4b09      	ldr	r3, [pc, #36]	@ (80011a4 <HAL_TIM_Base_MspInit+0x180>)
 800117e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001182:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM15_IRQn, 2, 2);
 800118a:	2202      	movs	r2, #2
 800118c:	2102      	movs	r1, #2
 800118e:	2074      	movs	r0, #116	@ 0x74
 8001190:	f000 fb81 	bl	8001896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8001194:	2074      	movs	r0, #116	@ 0x74
 8001196:	f000 fb98 	bl	80018ca <HAL_NVIC_EnableIRQ>
}
 800119a:	bf00      	nop
 800119c:	3738      	adds	r7, #56	@ 0x38
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	58024400 	.word	0x58024400
 80011a8:	58020000 	.word	0x58020000
 80011ac:	40000400 	.word	0x40000400
 80011b0:	40000c00 	.word	0x40000c00
 80011b4:	40001000 	.word	0x40001000
 80011b8:	40014000 	.word	0x40014000

080011bc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08a      	sub	sp, #40	@ 0x28
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]
 80011d2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a25      	ldr	r2, [pc, #148]	@ (8001270 <HAL_TIM_MspPostInit+0xb4>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d11f      	bne.n	800121e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011de:	4b25      	ldr	r3, [pc, #148]	@ (8001274 <HAL_TIM_MspPostInit+0xb8>)
 80011e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011e4:	4a23      	ldr	r2, [pc, #140]	@ (8001274 <HAL_TIM_MspPostInit+0xb8>)
 80011e6:	f043 0302 	orr.w	r3, r3, #2
 80011ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011ee:	4b21      	ldr	r3, [pc, #132]	@ (8001274 <HAL_TIM_MspPostInit+0xb8>)
 80011f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011f4:	f003 0302 	and.w	r3, r3, #2
 80011f8:	613b      	str	r3, [r7, #16]
 80011fa:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB4 (NJTRST)     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = TIM_LED_Pin;
 80011fc:	2310      	movs	r3, #16
 80011fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001200:	2302      	movs	r3, #2
 8001202:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001208:	2300      	movs	r3, #0
 800120a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800120c:	2302      	movs	r3, #2
 800120e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(TIM_LED_GPIO_Port, &GPIO_InitStruct);
 8001210:	f107 0314 	add.w	r3, r7, #20
 8001214:	4619      	mov	r1, r3
 8001216:	4818      	ldr	r0, [pc, #96]	@ (8001278 <HAL_TIM_MspPostInit+0xbc>)
 8001218:	f001 f94e 	bl	80024b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 800121c:	e023      	b.n	8001266 <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM15)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a16      	ldr	r2, [pc, #88]	@ (800127c <HAL_TIM_MspPostInit+0xc0>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d11e      	bne.n	8001266 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001228:	4b12      	ldr	r3, [pc, #72]	@ (8001274 <HAL_TIM_MspPostInit+0xb8>)
 800122a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800122e:	4a11      	ldr	r2, [pc, #68]	@ (8001274 <HAL_TIM_MspPostInit+0xb8>)
 8001230:	f043 0310 	orr.w	r3, r3, #16
 8001234:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001238:	4b0e      	ldr	r3, [pc, #56]	@ (8001274 <HAL_TIM_MspPostInit+0xb8>)
 800123a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800123e:	f003 0310 	and.w	r3, r3, #16
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM15_LED_Pin;
 8001246:	2320      	movs	r3, #32
 8001248:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124a:	2302      	movs	r3, #2
 800124c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001252:	2302      	movs	r3, #2
 8001254:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8001256:	2304      	movs	r3, #4
 8001258:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(TIM15_LED_GPIO_Port, &GPIO_InitStruct);
 800125a:	f107 0314 	add.w	r3, r7, #20
 800125e:	4619      	mov	r1, r3
 8001260:	4807      	ldr	r0, [pc, #28]	@ (8001280 <HAL_TIM_MspPostInit+0xc4>)
 8001262:	f001 f929 	bl	80024b8 <HAL_GPIO_Init>
}
 8001266:	bf00      	nop
 8001268:	3728      	adds	r7, #40	@ 0x28
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40000400 	.word	0x40000400
 8001274:	58024400 	.word	0x58024400
 8001278:	58020400 	.word	0x58020400
 800127c:	40014000 	.word	0x40014000
 8001280:	58021000 	.word	0x58021000

08001284 <tim15_set_pwm>:
/* USER CODE BEGIN 1 */

static uint32_t pwm_num = 0;

void tim15_set_pwm(uint32_t num)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
	if(num == 0) return; // 如果设置为0，直接返回
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d00f      	beq.n	80012b2 <tim15_set_pwm+0x2e>
	pwm_num = num; // 保存需要的PWM脉冲个数
 8001292:	4a0a      	ldr	r2, [pc, #40]	@ (80012bc <tim15_set_pwm+0x38>)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6013      	str	r3, [r2, #0]
	HAL_TIM_GenerateEvent(&htim15, TIM_EVENTSOURCE_UPDATE); // 触发一次更新事件，立即生效
 8001298:	2101      	movs	r1, #1
 800129a:	4809      	ldr	r0, [pc, #36]	@ (80012c0 <tim15_set_pwm+0x3c>)
 800129c:	f004 fd40 	bl	8005d20 <HAL_TIM_GenerateEvent>
	__HAL_TIM_ENABLE(&htim15); // 使能定时器15
 80012a0:	4b07      	ldr	r3, [pc, #28]	@ (80012c0 <tim15_set_pwm+0x3c>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	4b06      	ldr	r3, [pc, #24]	@ (80012c0 <tim15_set_pwm+0x3c>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f042 0201 	orr.w	r2, r2, #1
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	e000      	b.n	80012b4 <tim15_set_pwm+0x30>
	if(num == 0) return; // 如果设置为0，直接返回
 80012b2:	bf00      	nop
}
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	2400020c 	.word	0x2400020c
 80012c0:	240001c0 	.word	0x240001c0

080012c4 <TIM15_IRQHandler>:

void TIM15_IRQHandler(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
	uint16_t npwm = 0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	80fb      	strh	r3, [r7, #6]
	if(__HAL_TIM_GET_FLAG(&htim15, TIM_FLAG_UPDATE) != RESET) // 产生了更新中断
 80012ce:	4b22      	ldr	r3, [pc, #136]	@ (8001358 <TIM15_IRQHandler+0x94>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	691b      	ldr	r3, [r3, #16]
 80012d4:	f003 0301 	and.w	r3, r3, #1
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d139      	bne.n	8001350 <TIM15_IRQHandler+0x8c>
	{
		if(pwm_num >= 256)
 80012dc:	4b1f      	ldr	r3, [pc, #124]	@ (800135c <TIM15_IRQHandler+0x98>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2bff      	cmp	r3, #255	@ 0xff
 80012e2:	d909      	bls.n	80012f8 <TIM15_IRQHandler+0x34>
		{
			pwm_num = pwm_num - 256;
 80012e4:	4b1d      	ldr	r3, [pc, #116]	@ (800135c <TIM15_IRQHandler+0x98>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80012ec:	4a1b      	ldr	r2, [pc, #108]	@ (800135c <TIM15_IRQHandler+0x98>)
 80012ee:	6013      	str	r3, [r2, #0]
			npwm = 256;
 80012f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012f4:	80fb      	strh	r3, [r7, #6]
 80012f6:	e00c      	b.n	8001312 <TIM15_IRQHandler+0x4e>
		}
		else if(pwm_num % 256)
 80012f8:	4b18      	ldr	r3, [pc, #96]	@ (800135c <TIM15_IRQHandler+0x98>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d007      	beq.n	8001312 <TIM15_IRQHandler+0x4e>
		{
			npwm = pwm_num % 256;
 8001302:	4b16      	ldr	r3, [pc, #88]	@ (800135c <TIM15_IRQHandler+0x98>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	b29b      	uxth	r3, r3
 8001308:	b2db      	uxtb	r3, r3
 800130a:	80fb      	strh	r3, [r7, #6]
			pwm_num = 0;
 800130c:	4b13      	ldr	r3, [pc, #76]	@ (800135c <TIM15_IRQHandler+0x98>)
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
		}
		if(npwm)
 8001312:	88fb      	ldrh	r3, [r7, #6]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d010      	beq.n	800133a <TIM15_IRQHandler+0x76>
		{
			TIM15->RCR = npwm - 1; // 设置重复计数器
 8001318:	88fb      	ldrh	r3, [r7, #6]
 800131a:	1e5a      	subs	r2, r3, #1
 800131c:	4b10      	ldr	r3, [pc, #64]	@ (8001360 <TIM15_IRQHandler+0x9c>)
 800131e:	631a      	str	r2, [r3, #48]	@ 0x30
			HAL_TIM_GenerateEvent(&htim15, TIM_EVENTSOURCE_UPDATE); // 触发一次更新事件，立即生效
 8001320:	2101      	movs	r1, #1
 8001322:	480d      	ldr	r0, [pc, #52]	@ (8001358 <TIM15_IRQHandler+0x94>)
 8001324:	f004 fcfc 	bl	8005d20 <HAL_TIM_GenerateEvent>
			__HAL_TIM_ENABLE(&htim15); // 使能定时器15
 8001328:	4b0b      	ldr	r3, [pc, #44]	@ (8001358 <TIM15_IRQHandler+0x94>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	4b0a      	ldr	r3, [pc, #40]	@ (8001358 <TIM15_IRQHandler+0x94>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f042 0201 	orr.w	r2, r2, #1
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	e005      	b.n	8001346 <TIM15_IRQHandler+0x82>
		}
		else
		{
			TIM15->CR1 &= ~(1<<0); // 关闭定时器15
 800133a:	4b09      	ldr	r3, [pc, #36]	@ (8001360 <TIM15_IRQHandler+0x9c>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a08      	ldr	r2, [pc, #32]	@ (8001360 <TIM15_IRQHandler+0x9c>)
 8001340:	f023 0301 	bic.w	r3, r3, #1
 8001344:	6013      	str	r3, [r2, #0]
		}
		__HAL_TIM_CLEAR_FLAG(&htim15, TIM_FLAG_UPDATE); // 清除更新中断标志
 8001346:	4b04      	ldr	r3, [pc, #16]	@ (8001358 <TIM15_IRQHandler+0x94>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f06f 0201 	mvn.w	r2, #1
 800134e:	611a      	str	r2, [r3, #16]
	}
}
 8001350:	bf00      	nop
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	240001c0 	.word	0x240001c0
 800135c:	2400020c 	.word	0x2400020c
 8001360:	40014000 	.word	0x40014000

08001364 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001368:	4b22      	ldr	r3, [pc, #136]	@ (80013f4 <MX_USART1_UART_Init+0x90>)
 800136a:	4a23      	ldr	r2, [pc, #140]	@ (80013f8 <MX_USART1_UART_Init+0x94>)
 800136c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800136e:	4b21      	ldr	r3, [pc, #132]	@ (80013f4 <MX_USART1_UART_Init+0x90>)
 8001370:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001374:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001376:	4b1f      	ldr	r3, [pc, #124]	@ (80013f4 <MX_USART1_UART_Init+0x90>)
 8001378:	2200      	movs	r2, #0
 800137a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800137c:	4b1d      	ldr	r3, [pc, #116]	@ (80013f4 <MX_USART1_UART_Init+0x90>)
 800137e:	2200      	movs	r2, #0
 8001380:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001382:	4b1c      	ldr	r3, [pc, #112]	@ (80013f4 <MX_USART1_UART_Init+0x90>)
 8001384:	2200      	movs	r2, #0
 8001386:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001388:	4b1a      	ldr	r3, [pc, #104]	@ (80013f4 <MX_USART1_UART_Init+0x90>)
 800138a:	220c      	movs	r2, #12
 800138c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800138e:	4b19      	ldr	r3, [pc, #100]	@ (80013f4 <MX_USART1_UART_Init+0x90>)
 8001390:	2200      	movs	r2, #0
 8001392:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001394:	4b17      	ldr	r3, [pc, #92]	@ (80013f4 <MX_USART1_UART_Init+0x90>)
 8001396:	2200      	movs	r2, #0
 8001398:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800139a:	4b16      	ldr	r3, [pc, #88]	@ (80013f4 <MX_USART1_UART_Init+0x90>)
 800139c:	2200      	movs	r2, #0
 800139e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013a0:	4b14      	ldr	r3, [pc, #80]	@ (80013f4 <MX_USART1_UART_Init+0x90>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013a6:	4b13      	ldr	r3, [pc, #76]	@ (80013f4 <MX_USART1_UART_Init+0x90>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013ac:	4811      	ldr	r0, [pc, #68]	@ (80013f4 <MX_USART1_UART_Init+0x90>)
 80013ae:	f005 fb6d 	bl	8006a8c <HAL_UART_Init>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80013b8:	f7ff fb92 	bl	8000ae0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013bc:	2100      	movs	r1, #0
 80013be:	480d      	ldr	r0, [pc, #52]	@ (80013f4 <MX_USART1_UART_Init+0x90>)
 80013c0:	f007 f854 	bl	800846c <HAL_UARTEx_SetTxFifoThreshold>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80013ca:	f7ff fb89 	bl	8000ae0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013ce:	2100      	movs	r1, #0
 80013d0:	4808      	ldr	r0, [pc, #32]	@ (80013f4 <MX_USART1_UART_Init+0x90>)
 80013d2:	f007 f889 	bl	80084e8 <HAL_UARTEx_SetRxFifoThreshold>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80013dc:	f7ff fb80 	bl	8000ae0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80013e0:	4804      	ldr	r0, [pc, #16]	@ (80013f4 <MX_USART1_UART_Init+0x90>)
 80013e2:	f007 f80a 	bl	80083fa <HAL_UARTEx_DisableFifoMode>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80013ec:	f7ff fb78 	bl	8000ae0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013f0:	bf00      	nop
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	24000210 	.word	0x24000210
 80013f8:	40011000 	.word	0x40011000

080013fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b0ba      	sub	sp, #232	@ 0xe8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001404:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001414:	f107 0310 	add.w	r3, r7, #16
 8001418:	22c0      	movs	r2, #192	@ 0xc0
 800141a:	2100      	movs	r1, #0
 800141c:	4618      	mov	r0, r3
 800141e:	f007 fb23 	bl	8008a68 <memset>
  if(uartHandle->Instance==USART1)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a2b      	ldr	r2, [pc, #172]	@ (80014d4 <HAL_UART_MspInit+0xd8>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d14e      	bne.n	80014ca <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800142c:	f04f 0201 	mov.w	r2, #1
 8001430:	f04f 0300 	mov.w	r3, #0
 8001434:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001438:	2300      	movs	r3, #0
 800143a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800143e:	f107 0310 	add.w	r3, r7, #16
 8001442:	4618      	mov	r0, r3
 8001444:	f002 fa5e 	bl	8003904 <HAL_RCCEx_PeriphCLKConfig>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800144e:	f7ff fb47 	bl	8000ae0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001452:	4b21      	ldr	r3, [pc, #132]	@ (80014d8 <HAL_UART_MspInit+0xdc>)
 8001454:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001458:	4a1f      	ldr	r2, [pc, #124]	@ (80014d8 <HAL_UART_MspInit+0xdc>)
 800145a:	f043 0310 	orr.w	r3, r3, #16
 800145e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001462:	4b1d      	ldr	r3, [pc, #116]	@ (80014d8 <HAL_UART_MspInit+0xdc>)
 8001464:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001468:	f003 0310 	and.w	r3, r3, #16
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001470:	4b19      	ldr	r3, [pc, #100]	@ (80014d8 <HAL_UART_MspInit+0xdc>)
 8001472:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001476:	4a18      	ldr	r2, [pc, #96]	@ (80014d8 <HAL_UART_MspInit+0xdc>)
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001480:	4b15      	ldr	r3, [pc, #84]	@ (80014d8 <HAL_UART_MspInit+0xdc>)
 8001482:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	60bb      	str	r3, [r7, #8]
 800148c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800148e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001492:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001496:	2302      	movs	r3, #2
 8001498:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800149c:	2301      	movs	r3, #1
 800149e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014a2:	2302      	movs	r3, #2
 80014a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014a8:	2307      	movs	r3, #7
 80014aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ae:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80014b2:	4619      	mov	r1, r3
 80014b4:	4809      	ldr	r0, [pc, #36]	@ (80014dc <HAL_UART_MspInit+0xe0>)
 80014b6:	f000 ffff 	bl	80024b8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80014ba:	2200      	movs	r2, #0
 80014bc:	2100      	movs	r1, #0
 80014be:	2025      	movs	r0, #37	@ 0x25
 80014c0:	f000 f9e9 	bl	8001896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80014c4:	2025      	movs	r0, #37	@ 0x25
 80014c6:	f000 fa00 	bl	80018ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80014ca:	bf00      	nop
 80014cc:	37e8      	adds	r7, #232	@ 0xe8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40011000 	.word	0x40011000
 80014d8:	58024400 	.word	0x58024400
 80014dc:	58020000 	.word	0x58020000

080014e0 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

/* printf重定向 */
PUTCHAR_PROTOTYPE
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80014e8:	1d39      	adds	r1, r7, #4
 80014ea:	f04f 33ff 	mov.w	r3, #4294967295
 80014ee:	2201      	movs	r2, #1
 80014f0:	4803      	ldr	r0, [pc, #12]	@ (8001500 <__io_putchar+0x20>)
 80014f2:	f005 fb1b 	bl	8006b2c <HAL_UART_Transmit>
    return ch;
 80014f6:	687b      	ldr	r3, [r7, #4]
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	24000210 	.word	0x24000210

08001504 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001504:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001540 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001508:	f7ff fcc2 	bl	8000e90 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800150c:	f7ff fc20 	bl	8000d50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001510:	480c      	ldr	r0, [pc, #48]	@ (8001544 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001512:	490d      	ldr	r1, [pc, #52]	@ (8001548 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001514:	4a0d      	ldr	r2, [pc, #52]	@ (800154c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001516:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001518:	e002      	b.n	8001520 <LoopCopyDataInit>

0800151a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800151a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800151c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800151e:	3304      	adds	r3, #4

08001520 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001520:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001522:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001524:	d3f9      	bcc.n	800151a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001526:	4a0a      	ldr	r2, [pc, #40]	@ (8001550 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001528:	4c0a      	ldr	r4, [pc, #40]	@ (8001554 <LoopFillZerobss+0x22>)
  movs r3, #0
 800152a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800152c:	e001      	b.n	8001532 <LoopFillZerobss>

0800152e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800152e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001530:	3204      	adds	r2, #4

08001532 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001532:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001534:	d3fb      	bcc.n	800152e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001536:	f007 faeb 	bl	8008b10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800153a:	f7ff f9f9 	bl	8000930 <main>
  bx  lr
 800153e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001540:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001544:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001548:	24000070 	.word	0x24000070
  ldr r2, =_sidata
 800154c:	08009634 	.word	0x08009634
  ldr r2, =_sbss
 8001550:	24000070 	.word	0x24000070
  ldr r4, =_ebss
 8001554:	24000408 	.word	0x24000408

08001558 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001558:	e7fe      	b.n	8001558 <ADC3_IRQHandler>
	...

0800155c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001562:	2003      	movs	r0, #3
 8001564:	f000 f98c 	bl	8001880 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001568:	f001 fff6 	bl	8003558 <HAL_RCC_GetSysClockFreq>
 800156c:	4602      	mov	r2, r0
 800156e:	4b15      	ldr	r3, [pc, #84]	@ (80015c4 <HAL_Init+0x68>)
 8001570:	699b      	ldr	r3, [r3, #24]
 8001572:	0a1b      	lsrs	r3, r3, #8
 8001574:	f003 030f 	and.w	r3, r3, #15
 8001578:	4913      	ldr	r1, [pc, #76]	@ (80015c8 <HAL_Init+0x6c>)
 800157a:	5ccb      	ldrb	r3, [r1, r3]
 800157c:	f003 031f 	and.w	r3, r3, #31
 8001580:	fa22 f303 	lsr.w	r3, r2, r3
 8001584:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001586:	4b0f      	ldr	r3, [pc, #60]	@ (80015c4 <HAL_Init+0x68>)
 8001588:	699b      	ldr	r3, [r3, #24]
 800158a:	f003 030f 	and.w	r3, r3, #15
 800158e:	4a0e      	ldr	r2, [pc, #56]	@ (80015c8 <HAL_Init+0x6c>)
 8001590:	5cd3      	ldrb	r3, [r2, r3]
 8001592:	f003 031f 	and.w	r3, r3, #31
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	fa22 f303 	lsr.w	r3, r2, r3
 800159c:	4a0b      	ldr	r2, [pc, #44]	@ (80015cc <HAL_Init+0x70>)
 800159e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80015a0:	4a0b      	ldr	r2, [pc, #44]	@ (80015d0 <HAL_Init+0x74>)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015a6:	200f      	movs	r0, #15
 80015a8:	f000 f814 	bl	80015d4 <HAL_InitTick>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e002      	b.n	80015bc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80015b6:	f7ff fa99 	bl	8000aec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015ba:	2300      	movs	r3, #0
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3708      	adds	r7, #8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	58024400 	.word	0x58024400
 80015c8:	080095b8 	.word	0x080095b8
 80015cc:	24000008 	.word	0x24000008
 80015d0:	24000004 	.word	0x24000004

080015d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80015dc:	4b15      	ldr	r3, [pc, #84]	@ (8001634 <HAL_InitTick+0x60>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d101      	bne.n	80015e8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e021      	b.n	800162c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80015e8:	4b13      	ldr	r3, [pc, #76]	@ (8001638 <HAL_InitTick+0x64>)
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	4b11      	ldr	r3, [pc, #68]	@ (8001634 <HAL_InitTick+0x60>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	4619      	mov	r1, r3
 80015f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80015fe:	4618      	mov	r0, r3
 8001600:	f000 f971 	bl	80018e6 <HAL_SYSTICK_Config>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e00e      	b.n	800162c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2b0f      	cmp	r3, #15
 8001612:	d80a      	bhi.n	800162a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001614:	2200      	movs	r2, #0
 8001616:	6879      	ldr	r1, [r7, #4]
 8001618:	f04f 30ff 	mov.w	r0, #4294967295
 800161c:	f000 f93b 	bl	8001896 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001620:	4a06      	ldr	r2, [pc, #24]	@ (800163c <HAL_InitTick+0x68>)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001626:	2300      	movs	r3, #0
 8001628:	e000      	b.n	800162c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
}
 800162c:	4618      	mov	r0, r3
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	24000010 	.word	0x24000010
 8001638:	24000004 	.word	0x24000004
 800163c:	2400000c 	.word	0x2400000c

08001640 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001644:	4b06      	ldr	r3, [pc, #24]	@ (8001660 <HAL_IncTick+0x20>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	461a      	mov	r2, r3
 800164a:	4b06      	ldr	r3, [pc, #24]	@ (8001664 <HAL_IncTick+0x24>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4413      	add	r3, r2
 8001650:	4a04      	ldr	r2, [pc, #16]	@ (8001664 <HAL_IncTick+0x24>)
 8001652:	6013      	str	r3, [r2, #0]
}
 8001654:	bf00      	nop
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	24000010 	.word	0x24000010
 8001664:	240002b8 	.word	0x240002b8

08001668 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  return uwTick;
 800166c:	4b03      	ldr	r3, [pc, #12]	@ (800167c <HAL_GetTick+0x14>)
 800166e:	681b      	ldr	r3, [r3, #0]
}
 8001670:	4618      	mov	r0, r3
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	240002b8 	.word	0x240002b8

08001680 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001688:	f7ff ffee 	bl	8001668 <HAL_GetTick>
 800168c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001698:	d005      	beq.n	80016a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800169a:	4b0a      	ldr	r3, [pc, #40]	@ (80016c4 <HAL_Delay+0x44>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	461a      	mov	r2, r3
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	4413      	add	r3, r2
 80016a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016a6:	bf00      	nop
 80016a8:	f7ff ffde 	bl	8001668 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	68fa      	ldr	r2, [r7, #12]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d8f7      	bhi.n	80016a8 <HAL_Delay+0x28>
  {
  }
}
 80016b8:	bf00      	nop
 80016ba:	bf00      	nop
 80016bc:	3710      	adds	r7, #16
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	24000010 	.word	0x24000010

080016c8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80016cc:	4b03      	ldr	r3, [pc, #12]	@ (80016dc <HAL_GetREVID+0x14>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	0c1b      	lsrs	r3, r3, #16
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	5c001000 	.word	0x5c001000

080016e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f003 0307 	and.w	r3, r3, #7
 80016ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001720 <__NVIC_SetPriorityGrouping+0x40>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016f6:	68ba      	ldr	r2, [r7, #8]
 80016f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016fc:	4013      	ands	r3, r2
 80016fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001708:	4b06      	ldr	r3, [pc, #24]	@ (8001724 <__NVIC_SetPriorityGrouping+0x44>)
 800170a:	4313      	orrs	r3, r2
 800170c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800170e:	4a04      	ldr	r2, [pc, #16]	@ (8001720 <__NVIC_SetPriorityGrouping+0x40>)
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	60d3      	str	r3, [r2, #12]
}
 8001714:	bf00      	nop
 8001716:	3714      	adds	r7, #20
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	e000ed00 	.word	0xe000ed00
 8001724:	05fa0000 	.word	0x05fa0000

08001728 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800172c:	4b04      	ldr	r3, [pc, #16]	@ (8001740 <__NVIC_GetPriorityGrouping+0x18>)
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	0a1b      	lsrs	r3, r3, #8
 8001732:	f003 0307 	and.w	r3, r3, #7
}
 8001736:	4618      	mov	r0, r3
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	e000ed00 	.word	0xe000ed00

08001744 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800174e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001752:	2b00      	cmp	r3, #0
 8001754:	db0b      	blt.n	800176e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001756:	88fb      	ldrh	r3, [r7, #6]
 8001758:	f003 021f 	and.w	r2, r3, #31
 800175c:	4907      	ldr	r1, [pc, #28]	@ (800177c <__NVIC_EnableIRQ+0x38>)
 800175e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001762:	095b      	lsrs	r3, r3, #5
 8001764:	2001      	movs	r0, #1
 8001766:	fa00 f202 	lsl.w	r2, r0, r2
 800176a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800176e:	bf00      	nop
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	e000e100 	.word	0xe000e100

08001780 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	6039      	str	r1, [r7, #0]
 800178a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800178c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001790:	2b00      	cmp	r3, #0
 8001792:	db0a      	blt.n	80017aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	b2da      	uxtb	r2, r3
 8001798:	490c      	ldr	r1, [pc, #48]	@ (80017cc <__NVIC_SetPriority+0x4c>)
 800179a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800179e:	0112      	lsls	r2, r2, #4
 80017a0:	b2d2      	uxtb	r2, r2
 80017a2:	440b      	add	r3, r1
 80017a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017a8:	e00a      	b.n	80017c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	b2da      	uxtb	r2, r3
 80017ae:	4908      	ldr	r1, [pc, #32]	@ (80017d0 <__NVIC_SetPriority+0x50>)
 80017b0:	88fb      	ldrh	r3, [r7, #6]
 80017b2:	f003 030f 	and.w	r3, r3, #15
 80017b6:	3b04      	subs	r3, #4
 80017b8:	0112      	lsls	r2, r2, #4
 80017ba:	b2d2      	uxtb	r2, r2
 80017bc:	440b      	add	r3, r1
 80017be:	761a      	strb	r2, [r3, #24]
}
 80017c0:	bf00      	nop
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	e000e100 	.word	0xe000e100
 80017d0:	e000ed00 	.word	0xe000ed00

080017d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b089      	sub	sp, #36	@ 0x24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	60b9      	str	r1, [r7, #8]
 80017de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	f003 0307 	and.w	r3, r3, #7
 80017e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	f1c3 0307 	rsb	r3, r3, #7
 80017ee:	2b04      	cmp	r3, #4
 80017f0:	bf28      	it	cs
 80017f2:	2304      	movcs	r3, #4
 80017f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	3304      	adds	r3, #4
 80017fa:	2b06      	cmp	r3, #6
 80017fc:	d902      	bls.n	8001804 <NVIC_EncodePriority+0x30>
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	3b03      	subs	r3, #3
 8001802:	e000      	b.n	8001806 <NVIC_EncodePriority+0x32>
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001808:	f04f 32ff 	mov.w	r2, #4294967295
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	43da      	mvns	r2, r3
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	401a      	ands	r2, r3
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800181c:	f04f 31ff 	mov.w	r1, #4294967295
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	fa01 f303 	lsl.w	r3, r1, r3
 8001826:	43d9      	mvns	r1, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800182c:	4313      	orrs	r3, r2
         );
}
 800182e:	4618      	mov	r0, r3
 8001830:	3724      	adds	r7, #36	@ 0x24
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
	...

0800183c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	3b01      	subs	r3, #1
 8001848:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800184c:	d301      	bcc.n	8001852 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800184e:	2301      	movs	r3, #1
 8001850:	e00f      	b.n	8001872 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001852:	4a0a      	ldr	r2, [pc, #40]	@ (800187c <SysTick_Config+0x40>)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	3b01      	subs	r3, #1
 8001858:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800185a:	210f      	movs	r1, #15
 800185c:	f04f 30ff 	mov.w	r0, #4294967295
 8001860:	f7ff ff8e 	bl	8001780 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001864:	4b05      	ldr	r3, [pc, #20]	@ (800187c <SysTick_Config+0x40>)
 8001866:	2200      	movs	r2, #0
 8001868:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800186a:	4b04      	ldr	r3, [pc, #16]	@ (800187c <SysTick_Config+0x40>)
 800186c:	2207      	movs	r2, #7
 800186e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	e000e010 	.word	0xe000e010

08001880 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f7ff ff29 	bl	80016e0 <__NVIC_SetPriorityGrouping>
}
 800188e:	bf00      	nop
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b086      	sub	sp, #24
 800189a:	af00      	add	r7, sp, #0
 800189c:	4603      	mov	r3, r0
 800189e:	60b9      	str	r1, [r7, #8]
 80018a0:	607a      	str	r2, [r7, #4]
 80018a2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018a4:	f7ff ff40 	bl	8001728 <__NVIC_GetPriorityGrouping>
 80018a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	68b9      	ldr	r1, [r7, #8]
 80018ae:	6978      	ldr	r0, [r7, #20]
 80018b0:	f7ff ff90 	bl	80017d4 <NVIC_EncodePriority>
 80018b4:	4602      	mov	r2, r0
 80018b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018ba:	4611      	mov	r1, r2
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff ff5f 	bl	8001780 <__NVIC_SetPriority>
}
 80018c2:	bf00      	nop
 80018c4:	3718      	adds	r7, #24
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b082      	sub	sp, #8
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	4603      	mov	r3, r0
 80018d2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff ff33 	bl	8001744 <__NVIC_EnableIRQ>
}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b082      	sub	sp, #8
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f7ff ffa4 	bl	800183c <SysTick_Config>
 80018f4:	4603      	mov	r3, r0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
	...

08001900 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001904:	f3bf 8f5f 	dmb	sy
}
 8001908:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800190a:	4b07      	ldr	r3, [pc, #28]	@ (8001928 <HAL_MPU_Disable+0x28>)
 800190c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800190e:	4a06      	ldr	r2, [pc, #24]	@ (8001928 <HAL_MPU_Disable+0x28>)
 8001910:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001914:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001916:	4b05      	ldr	r3, [pc, #20]	@ (800192c <HAL_MPU_Disable+0x2c>)
 8001918:	2200      	movs	r2, #0
 800191a:	605a      	str	r2, [r3, #4]
}
 800191c:	bf00      	nop
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	e000ed00 	.word	0xe000ed00
 800192c:	e000ed90 	.word	0xe000ed90

08001930 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001938:	4a0b      	ldr	r2, [pc, #44]	@ (8001968 <HAL_MPU_Enable+0x38>)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f043 0301 	orr.w	r3, r3, #1
 8001940:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001942:	4b0a      	ldr	r3, [pc, #40]	@ (800196c <HAL_MPU_Enable+0x3c>)
 8001944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001946:	4a09      	ldr	r2, [pc, #36]	@ (800196c <HAL_MPU_Enable+0x3c>)
 8001948:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800194c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800194e:	f3bf 8f4f 	dsb	sy
}
 8001952:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001954:	f3bf 8f6f 	isb	sy
}
 8001958:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800195a:	bf00      	nop
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	e000ed90 	.word	0xe000ed90
 800196c:	e000ed00 	.word	0xe000ed00

08001970 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	785a      	ldrb	r2, [r3, #1]
 800197c:	4b1b      	ldr	r3, [pc, #108]	@ (80019ec <HAL_MPU_ConfigRegion+0x7c>)
 800197e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001980:	4b1a      	ldr	r3, [pc, #104]	@ (80019ec <HAL_MPU_ConfigRegion+0x7c>)
 8001982:	691b      	ldr	r3, [r3, #16]
 8001984:	4a19      	ldr	r2, [pc, #100]	@ (80019ec <HAL_MPU_ConfigRegion+0x7c>)
 8001986:	f023 0301 	bic.w	r3, r3, #1
 800198a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800198c:	4a17      	ldr	r2, [pc, #92]	@ (80019ec <HAL_MPU_ConfigRegion+0x7c>)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	7b1b      	ldrb	r3, [r3, #12]
 8001998:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	7adb      	ldrb	r3, [r3, #11]
 800199e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80019a0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	7a9b      	ldrb	r3, [r3, #10]
 80019a6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80019a8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	7b5b      	ldrb	r3, [r3, #13]
 80019ae:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80019b0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	7b9b      	ldrb	r3, [r3, #14]
 80019b6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80019b8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	7bdb      	ldrb	r3, [r3, #15]
 80019be:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80019c0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	7a5b      	ldrb	r3, [r3, #9]
 80019c6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80019c8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	7a1b      	ldrb	r3, [r3, #8]
 80019ce:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80019d0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	7812      	ldrb	r2, [r2, #0]
 80019d6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80019d8:	4a04      	ldr	r2, [pc, #16]	@ (80019ec <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80019da:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80019dc:	6113      	str	r3, [r2, #16]
}
 80019de:	bf00      	nop
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	e000ed90 	.word	0xe000ed90

080019f0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b086      	sub	sp, #24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80019f8:	f7ff fe36 	bl	8001668 <HAL_GetTick>
 80019fc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d101      	bne.n	8001a08 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e2dc      	b.n	8001fc2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d008      	beq.n	8001a26 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2280      	movs	r2, #128	@ 0x80
 8001a18:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e2cd      	b.n	8001fc2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a76      	ldr	r2, [pc, #472]	@ (8001c04 <HAL_DMA_Abort+0x214>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d04a      	beq.n	8001ac6 <HAL_DMA_Abort+0xd6>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a74      	ldr	r2, [pc, #464]	@ (8001c08 <HAL_DMA_Abort+0x218>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d045      	beq.n	8001ac6 <HAL_DMA_Abort+0xd6>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a73      	ldr	r2, [pc, #460]	@ (8001c0c <HAL_DMA_Abort+0x21c>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d040      	beq.n	8001ac6 <HAL_DMA_Abort+0xd6>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a71      	ldr	r2, [pc, #452]	@ (8001c10 <HAL_DMA_Abort+0x220>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d03b      	beq.n	8001ac6 <HAL_DMA_Abort+0xd6>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a70      	ldr	r2, [pc, #448]	@ (8001c14 <HAL_DMA_Abort+0x224>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d036      	beq.n	8001ac6 <HAL_DMA_Abort+0xd6>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a6e      	ldr	r2, [pc, #440]	@ (8001c18 <HAL_DMA_Abort+0x228>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d031      	beq.n	8001ac6 <HAL_DMA_Abort+0xd6>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a6d      	ldr	r2, [pc, #436]	@ (8001c1c <HAL_DMA_Abort+0x22c>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d02c      	beq.n	8001ac6 <HAL_DMA_Abort+0xd6>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a6b      	ldr	r2, [pc, #428]	@ (8001c20 <HAL_DMA_Abort+0x230>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d027      	beq.n	8001ac6 <HAL_DMA_Abort+0xd6>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a6a      	ldr	r2, [pc, #424]	@ (8001c24 <HAL_DMA_Abort+0x234>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d022      	beq.n	8001ac6 <HAL_DMA_Abort+0xd6>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a68      	ldr	r2, [pc, #416]	@ (8001c28 <HAL_DMA_Abort+0x238>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d01d      	beq.n	8001ac6 <HAL_DMA_Abort+0xd6>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a67      	ldr	r2, [pc, #412]	@ (8001c2c <HAL_DMA_Abort+0x23c>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d018      	beq.n	8001ac6 <HAL_DMA_Abort+0xd6>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a65      	ldr	r2, [pc, #404]	@ (8001c30 <HAL_DMA_Abort+0x240>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d013      	beq.n	8001ac6 <HAL_DMA_Abort+0xd6>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a64      	ldr	r2, [pc, #400]	@ (8001c34 <HAL_DMA_Abort+0x244>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d00e      	beq.n	8001ac6 <HAL_DMA_Abort+0xd6>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a62      	ldr	r2, [pc, #392]	@ (8001c38 <HAL_DMA_Abort+0x248>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d009      	beq.n	8001ac6 <HAL_DMA_Abort+0xd6>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a61      	ldr	r2, [pc, #388]	@ (8001c3c <HAL_DMA_Abort+0x24c>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d004      	beq.n	8001ac6 <HAL_DMA_Abort+0xd6>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a5f      	ldr	r2, [pc, #380]	@ (8001c40 <HAL_DMA_Abort+0x250>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d101      	bne.n	8001aca <HAL_DMA_Abort+0xda>
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e000      	b.n	8001acc <HAL_DMA_Abort+0xdc>
 8001aca:	2300      	movs	r3, #0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d013      	beq.n	8001af8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f022 021e 	bic.w	r2, r2, #30
 8001ade:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	695a      	ldr	r2, [r3, #20]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001aee:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	617b      	str	r3, [r7, #20]
 8001af6:	e00a      	b.n	8001b0e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f022 020e 	bic.w	r2, r2, #14
 8001b06:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a3c      	ldr	r2, [pc, #240]	@ (8001c04 <HAL_DMA_Abort+0x214>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d072      	beq.n	8001bfe <HAL_DMA_Abort+0x20e>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a3a      	ldr	r2, [pc, #232]	@ (8001c08 <HAL_DMA_Abort+0x218>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d06d      	beq.n	8001bfe <HAL_DMA_Abort+0x20e>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a39      	ldr	r2, [pc, #228]	@ (8001c0c <HAL_DMA_Abort+0x21c>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d068      	beq.n	8001bfe <HAL_DMA_Abort+0x20e>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a37      	ldr	r2, [pc, #220]	@ (8001c10 <HAL_DMA_Abort+0x220>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d063      	beq.n	8001bfe <HAL_DMA_Abort+0x20e>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a36      	ldr	r2, [pc, #216]	@ (8001c14 <HAL_DMA_Abort+0x224>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d05e      	beq.n	8001bfe <HAL_DMA_Abort+0x20e>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a34      	ldr	r2, [pc, #208]	@ (8001c18 <HAL_DMA_Abort+0x228>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d059      	beq.n	8001bfe <HAL_DMA_Abort+0x20e>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a33      	ldr	r2, [pc, #204]	@ (8001c1c <HAL_DMA_Abort+0x22c>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d054      	beq.n	8001bfe <HAL_DMA_Abort+0x20e>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a31      	ldr	r2, [pc, #196]	@ (8001c20 <HAL_DMA_Abort+0x230>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d04f      	beq.n	8001bfe <HAL_DMA_Abort+0x20e>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a30      	ldr	r2, [pc, #192]	@ (8001c24 <HAL_DMA_Abort+0x234>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d04a      	beq.n	8001bfe <HAL_DMA_Abort+0x20e>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a2e      	ldr	r2, [pc, #184]	@ (8001c28 <HAL_DMA_Abort+0x238>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d045      	beq.n	8001bfe <HAL_DMA_Abort+0x20e>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a2d      	ldr	r2, [pc, #180]	@ (8001c2c <HAL_DMA_Abort+0x23c>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d040      	beq.n	8001bfe <HAL_DMA_Abort+0x20e>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a2b      	ldr	r2, [pc, #172]	@ (8001c30 <HAL_DMA_Abort+0x240>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d03b      	beq.n	8001bfe <HAL_DMA_Abort+0x20e>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a2a      	ldr	r2, [pc, #168]	@ (8001c34 <HAL_DMA_Abort+0x244>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d036      	beq.n	8001bfe <HAL_DMA_Abort+0x20e>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a28      	ldr	r2, [pc, #160]	@ (8001c38 <HAL_DMA_Abort+0x248>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d031      	beq.n	8001bfe <HAL_DMA_Abort+0x20e>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a27      	ldr	r2, [pc, #156]	@ (8001c3c <HAL_DMA_Abort+0x24c>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d02c      	beq.n	8001bfe <HAL_DMA_Abort+0x20e>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a25      	ldr	r2, [pc, #148]	@ (8001c40 <HAL_DMA_Abort+0x250>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d027      	beq.n	8001bfe <HAL_DMA_Abort+0x20e>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a24      	ldr	r2, [pc, #144]	@ (8001c44 <HAL_DMA_Abort+0x254>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d022      	beq.n	8001bfe <HAL_DMA_Abort+0x20e>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a22      	ldr	r2, [pc, #136]	@ (8001c48 <HAL_DMA_Abort+0x258>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d01d      	beq.n	8001bfe <HAL_DMA_Abort+0x20e>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a21      	ldr	r2, [pc, #132]	@ (8001c4c <HAL_DMA_Abort+0x25c>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d018      	beq.n	8001bfe <HAL_DMA_Abort+0x20e>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a1f      	ldr	r2, [pc, #124]	@ (8001c50 <HAL_DMA_Abort+0x260>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d013      	beq.n	8001bfe <HAL_DMA_Abort+0x20e>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a1e      	ldr	r2, [pc, #120]	@ (8001c54 <HAL_DMA_Abort+0x264>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d00e      	beq.n	8001bfe <HAL_DMA_Abort+0x20e>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a1c      	ldr	r2, [pc, #112]	@ (8001c58 <HAL_DMA_Abort+0x268>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d009      	beq.n	8001bfe <HAL_DMA_Abort+0x20e>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a1b      	ldr	r2, [pc, #108]	@ (8001c5c <HAL_DMA_Abort+0x26c>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d004      	beq.n	8001bfe <HAL_DMA_Abort+0x20e>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a19      	ldr	r2, [pc, #100]	@ (8001c60 <HAL_DMA_Abort+0x270>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d132      	bne.n	8001c64 <HAL_DMA_Abort+0x274>
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e031      	b.n	8001c66 <HAL_DMA_Abort+0x276>
 8001c02:	bf00      	nop
 8001c04:	40020010 	.word	0x40020010
 8001c08:	40020028 	.word	0x40020028
 8001c0c:	40020040 	.word	0x40020040
 8001c10:	40020058 	.word	0x40020058
 8001c14:	40020070 	.word	0x40020070
 8001c18:	40020088 	.word	0x40020088
 8001c1c:	400200a0 	.word	0x400200a0
 8001c20:	400200b8 	.word	0x400200b8
 8001c24:	40020410 	.word	0x40020410
 8001c28:	40020428 	.word	0x40020428
 8001c2c:	40020440 	.word	0x40020440
 8001c30:	40020458 	.word	0x40020458
 8001c34:	40020470 	.word	0x40020470
 8001c38:	40020488 	.word	0x40020488
 8001c3c:	400204a0 	.word	0x400204a0
 8001c40:	400204b8 	.word	0x400204b8
 8001c44:	58025408 	.word	0x58025408
 8001c48:	5802541c 	.word	0x5802541c
 8001c4c:	58025430 	.word	0x58025430
 8001c50:	58025444 	.word	0x58025444
 8001c54:	58025458 	.word	0x58025458
 8001c58:	5802546c 	.word	0x5802546c
 8001c5c:	58025480 	.word	0x58025480
 8001c60:	58025494 	.word	0x58025494
 8001c64:	2300      	movs	r3, #0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d007      	beq.n	8001c7a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c74:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c78:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a6d      	ldr	r2, [pc, #436]	@ (8001e34 <HAL_DMA_Abort+0x444>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d04a      	beq.n	8001d1a <HAL_DMA_Abort+0x32a>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a6b      	ldr	r2, [pc, #428]	@ (8001e38 <HAL_DMA_Abort+0x448>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d045      	beq.n	8001d1a <HAL_DMA_Abort+0x32a>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a6a      	ldr	r2, [pc, #424]	@ (8001e3c <HAL_DMA_Abort+0x44c>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d040      	beq.n	8001d1a <HAL_DMA_Abort+0x32a>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a68      	ldr	r2, [pc, #416]	@ (8001e40 <HAL_DMA_Abort+0x450>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d03b      	beq.n	8001d1a <HAL_DMA_Abort+0x32a>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a67      	ldr	r2, [pc, #412]	@ (8001e44 <HAL_DMA_Abort+0x454>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d036      	beq.n	8001d1a <HAL_DMA_Abort+0x32a>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a65      	ldr	r2, [pc, #404]	@ (8001e48 <HAL_DMA_Abort+0x458>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d031      	beq.n	8001d1a <HAL_DMA_Abort+0x32a>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a64      	ldr	r2, [pc, #400]	@ (8001e4c <HAL_DMA_Abort+0x45c>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d02c      	beq.n	8001d1a <HAL_DMA_Abort+0x32a>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a62      	ldr	r2, [pc, #392]	@ (8001e50 <HAL_DMA_Abort+0x460>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d027      	beq.n	8001d1a <HAL_DMA_Abort+0x32a>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a61      	ldr	r2, [pc, #388]	@ (8001e54 <HAL_DMA_Abort+0x464>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d022      	beq.n	8001d1a <HAL_DMA_Abort+0x32a>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a5f      	ldr	r2, [pc, #380]	@ (8001e58 <HAL_DMA_Abort+0x468>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d01d      	beq.n	8001d1a <HAL_DMA_Abort+0x32a>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a5e      	ldr	r2, [pc, #376]	@ (8001e5c <HAL_DMA_Abort+0x46c>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d018      	beq.n	8001d1a <HAL_DMA_Abort+0x32a>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a5c      	ldr	r2, [pc, #368]	@ (8001e60 <HAL_DMA_Abort+0x470>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d013      	beq.n	8001d1a <HAL_DMA_Abort+0x32a>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a5b      	ldr	r2, [pc, #364]	@ (8001e64 <HAL_DMA_Abort+0x474>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d00e      	beq.n	8001d1a <HAL_DMA_Abort+0x32a>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a59      	ldr	r2, [pc, #356]	@ (8001e68 <HAL_DMA_Abort+0x478>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d009      	beq.n	8001d1a <HAL_DMA_Abort+0x32a>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a58      	ldr	r2, [pc, #352]	@ (8001e6c <HAL_DMA_Abort+0x47c>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d004      	beq.n	8001d1a <HAL_DMA_Abort+0x32a>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a56      	ldr	r2, [pc, #344]	@ (8001e70 <HAL_DMA_Abort+0x480>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d108      	bne.n	8001d2c <HAL_DMA_Abort+0x33c>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f022 0201 	bic.w	r2, r2, #1
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	e007      	b.n	8001d3c <HAL_DMA_Abort+0x34c>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f022 0201 	bic.w	r2, r2, #1
 8001d3a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001d3c:	e013      	b.n	8001d66 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d3e:	f7ff fc93 	bl	8001668 <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b05      	cmp	r3, #5
 8001d4a:	d90c      	bls.n	8001d66 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2220      	movs	r2, #32
 8001d50:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2203      	movs	r2, #3
 8001d56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e12d      	b.n	8001fc2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d1e5      	bne.n	8001d3e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a2f      	ldr	r2, [pc, #188]	@ (8001e34 <HAL_DMA_Abort+0x444>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d04a      	beq.n	8001e12 <HAL_DMA_Abort+0x422>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a2d      	ldr	r2, [pc, #180]	@ (8001e38 <HAL_DMA_Abort+0x448>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d045      	beq.n	8001e12 <HAL_DMA_Abort+0x422>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a2c      	ldr	r2, [pc, #176]	@ (8001e3c <HAL_DMA_Abort+0x44c>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d040      	beq.n	8001e12 <HAL_DMA_Abort+0x422>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a2a      	ldr	r2, [pc, #168]	@ (8001e40 <HAL_DMA_Abort+0x450>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d03b      	beq.n	8001e12 <HAL_DMA_Abort+0x422>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a29      	ldr	r2, [pc, #164]	@ (8001e44 <HAL_DMA_Abort+0x454>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d036      	beq.n	8001e12 <HAL_DMA_Abort+0x422>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a27      	ldr	r2, [pc, #156]	@ (8001e48 <HAL_DMA_Abort+0x458>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d031      	beq.n	8001e12 <HAL_DMA_Abort+0x422>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a26      	ldr	r2, [pc, #152]	@ (8001e4c <HAL_DMA_Abort+0x45c>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d02c      	beq.n	8001e12 <HAL_DMA_Abort+0x422>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a24      	ldr	r2, [pc, #144]	@ (8001e50 <HAL_DMA_Abort+0x460>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d027      	beq.n	8001e12 <HAL_DMA_Abort+0x422>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a23      	ldr	r2, [pc, #140]	@ (8001e54 <HAL_DMA_Abort+0x464>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d022      	beq.n	8001e12 <HAL_DMA_Abort+0x422>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a21      	ldr	r2, [pc, #132]	@ (8001e58 <HAL_DMA_Abort+0x468>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d01d      	beq.n	8001e12 <HAL_DMA_Abort+0x422>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a20      	ldr	r2, [pc, #128]	@ (8001e5c <HAL_DMA_Abort+0x46c>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d018      	beq.n	8001e12 <HAL_DMA_Abort+0x422>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a1e      	ldr	r2, [pc, #120]	@ (8001e60 <HAL_DMA_Abort+0x470>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d013      	beq.n	8001e12 <HAL_DMA_Abort+0x422>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a1d      	ldr	r2, [pc, #116]	@ (8001e64 <HAL_DMA_Abort+0x474>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d00e      	beq.n	8001e12 <HAL_DMA_Abort+0x422>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a1b      	ldr	r2, [pc, #108]	@ (8001e68 <HAL_DMA_Abort+0x478>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d009      	beq.n	8001e12 <HAL_DMA_Abort+0x422>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a1a      	ldr	r2, [pc, #104]	@ (8001e6c <HAL_DMA_Abort+0x47c>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d004      	beq.n	8001e12 <HAL_DMA_Abort+0x422>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a18      	ldr	r2, [pc, #96]	@ (8001e70 <HAL_DMA_Abort+0x480>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d101      	bne.n	8001e16 <HAL_DMA_Abort+0x426>
 8001e12:	2301      	movs	r3, #1
 8001e14:	e000      	b.n	8001e18 <HAL_DMA_Abort+0x428>
 8001e16:	2300      	movs	r3, #0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d02b      	beq.n	8001e74 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e20:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e26:	f003 031f 	and.w	r3, r3, #31
 8001e2a:	223f      	movs	r2, #63	@ 0x3f
 8001e2c:	409a      	lsls	r2, r3
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	609a      	str	r2, [r3, #8]
 8001e32:	e02a      	b.n	8001e8a <HAL_DMA_Abort+0x49a>
 8001e34:	40020010 	.word	0x40020010
 8001e38:	40020028 	.word	0x40020028
 8001e3c:	40020040 	.word	0x40020040
 8001e40:	40020058 	.word	0x40020058
 8001e44:	40020070 	.word	0x40020070
 8001e48:	40020088 	.word	0x40020088
 8001e4c:	400200a0 	.word	0x400200a0
 8001e50:	400200b8 	.word	0x400200b8
 8001e54:	40020410 	.word	0x40020410
 8001e58:	40020428 	.word	0x40020428
 8001e5c:	40020440 	.word	0x40020440
 8001e60:	40020458 	.word	0x40020458
 8001e64:	40020470 	.word	0x40020470
 8001e68:	40020488 	.word	0x40020488
 8001e6c:	400204a0 	.word	0x400204a0
 8001e70:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e78:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e7e:	f003 031f 	and.w	r3, r3, #31
 8001e82:	2201      	movs	r2, #1
 8001e84:	409a      	lsls	r2, r3
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a4f      	ldr	r2, [pc, #316]	@ (8001fcc <HAL_DMA_Abort+0x5dc>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d072      	beq.n	8001f7a <HAL_DMA_Abort+0x58a>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a4d      	ldr	r2, [pc, #308]	@ (8001fd0 <HAL_DMA_Abort+0x5e0>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d06d      	beq.n	8001f7a <HAL_DMA_Abort+0x58a>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a4c      	ldr	r2, [pc, #304]	@ (8001fd4 <HAL_DMA_Abort+0x5e4>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d068      	beq.n	8001f7a <HAL_DMA_Abort+0x58a>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a4a      	ldr	r2, [pc, #296]	@ (8001fd8 <HAL_DMA_Abort+0x5e8>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d063      	beq.n	8001f7a <HAL_DMA_Abort+0x58a>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a49      	ldr	r2, [pc, #292]	@ (8001fdc <HAL_DMA_Abort+0x5ec>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d05e      	beq.n	8001f7a <HAL_DMA_Abort+0x58a>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a47      	ldr	r2, [pc, #284]	@ (8001fe0 <HAL_DMA_Abort+0x5f0>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d059      	beq.n	8001f7a <HAL_DMA_Abort+0x58a>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a46      	ldr	r2, [pc, #280]	@ (8001fe4 <HAL_DMA_Abort+0x5f4>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d054      	beq.n	8001f7a <HAL_DMA_Abort+0x58a>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a44      	ldr	r2, [pc, #272]	@ (8001fe8 <HAL_DMA_Abort+0x5f8>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d04f      	beq.n	8001f7a <HAL_DMA_Abort+0x58a>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a43      	ldr	r2, [pc, #268]	@ (8001fec <HAL_DMA_Abort+0x5fc>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d04a      	beq.n	8001f7a <HAL_DMA_Abort+0x58a>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a41      	ldr	r2, [pc, #260]	@ (8001ff0 <HAL_DMA_Abort+0x600>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d045      	beq.n	8001f7a <HAL_DMA_Abort+0x58a>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a40      	ldr	r2, [pc, #256]	@ (8001ff4 <HAL_DMA_Abort+0x604>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d040      	beq.n	8001f7a <HAL_DMA_Abort+0x58a>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a3e      	ldr	r2, [pc, #248]	@ (8001ff8 <HAL_DMA_Abort+0x608>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d03b      	beq.n	8001f7a <HAL_DMA_Abort+0x58a>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a3d      	ldr	r2, [pc, #244]	@ (8001ffc <HAL_DMA_Abort+0x60c>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d036      	beq.n	8001f7a <HAL_DMA_Abort+0x58a>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a3b      	ldr	r2, [pc, #236]	@ (8002000 <HAL_DMA_Abort+0x610>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d031      	beq.n	8001f7a <HAL_DMA_Abort+0x58a>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a3a      	ldr	r2, [pc, #232]	@ (8002004 <HAL_DMA_Abort+0x614>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d02c      	beq.n	8001f7a <HAL_DMA_Abort+0x58a>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a38      	ldr	r2, [pc, #224]	@ (8002008 <HAL_DMA_Abort+0x618>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d027      	beq.n	8001f7a <HAL_DMA_Abort+0x58a>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a37      	ldr	r2, [pc, #220]	@ (800200c <HAL_DMA_Abort+0x61c>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d022      	beq.n	8001f7a <HAL_DMA_Abort+0x58a>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a35      	ldr	r2, [pc, #212]	@ (8002010 <HAL_DMA_Abort+0x620>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d01d      	beq.n	8001f7a <HAL_DMA_Abort+0x58a>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a34      	ldr	r2, [pc, #208]	@ (8002014 <HAL_DMA_Abort+0x624>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d018      	beq.n	8001f7a <HAL_DMA_Abort+0x58a>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a32      	ldr	r2, [pc, #200]	@ (8002018 <HAL_DMA_Abort+0x628>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d013      	beq.n	8001f7a <HAL_DMA_Abort+0x58a>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a31      	ldr	r2, [pc, #196]	@ (800201c <HAL_DMA_Abort+0x62c>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d00e      	beq.n	8001f7a <HAL_DMA_Abort+0x58a>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a2f      	ldr	r2, [pc, #188]	@ (8002020 <HAL_DMA_Abort+0x630>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d009      	beq.n	8001f7a <HAL_DMA_Abort+0x58a>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a2e      	ldr	r2, [pc, #184]	@ (8002024 <HAL_DMA_Abort+0x634>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d004      	beq.n	8001f7a <HAL_DMA_Abort+0x58a>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a2c      	ldr	r2, [pc, #176]	@ (8002028 <HAL_DMA_Abort+0x638>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d101      	bne.n	8001f7e <HAL_DMA_Abort+0x58e>
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e000      	b.n	8001f80 <HAL_DMA_Abort+0x590>
 8001f7e:	2300      	movs	r3, #0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d015      	beq.n	8001fb0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001f8c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d00c      	beq.n	8001fb0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001fa0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001fa4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001fae:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3718      	adds	r7, #24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40020010 	.word	0x40020010
 8001fd0:	40020028 	.word	0x40020028
 8001fd4:	40020040 	.word	0x40020040
 8001fd8:	40020058 	.word	0x40020058
 8001fdc:	40020070 	.word	0x40020070
 8001fe0:	40020088 	.word	0x40020088
 8001fe4:	400200a0 	.word	0x400200a0
 8001fe8:	400200b8 	.word	0x400200b8
 8001fec:	40020410 	.word	0x40020410
 8001ff0:	40020428 	.word	0x40020428
 8001ff4:	40020440 	.word	0x40020440
 8001ff8:	40020458 	.word	0x40020458
 8001ffc:	40020470 	.word	0x40020470
 8002000:	40020488 	.word	0x40020488
 8002004:	400204a0 	.word	0x400204a0
 8002008:	400204b8 	.word	0x400204b8
 800200c:	58025408 	.word	0x58025408
 8002010:	5802541c 	.word	0x5802541c
 8002014:	58025430 	.word	0x58025430
 8002018:	58025444 	.word	0x58025444
 800201c:	58025458 	.word	0x58025458
 8002020:	5802546c 	.word	0x5802546c
 8002024:	58025480 	.word	0x58025480
 8002028:	58025494 	.word	0x58025494

0800202c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d101      	bne.n	800203e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e237      	b.n	80024ae <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002044:	b2db      	uxtb	r3, r3
 8002046:	2b02      	cmp	r3, #2
 8002048:	d004      	beq.n	8002054 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2280      	movs	r2, #128	@ 0x80
 800204e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e22c      	b.n	80024ae <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a5c      	ldr	r2, [pc, #368]	@ (80021cc <HAL_DMA_Abort_IT+0x1a0>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d04a      	beq.n	80020f4 <HAL_DMA_Abort_IT+0xc8>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a5b      	ldr	r2, [pc, #364]	@ (80021d0 <HAL_DMA_Abort_IT+0x1a4>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d045      	beq.n	80020f4 <HAL_DMA_Abort_IT+0xc8>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a59      	ldr	r2, [pc, #356]	@ (80021d4 <HAL_DMA_Abort_IT+0x1a8>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d040      	beq.n	80020f4 <HAL_DMA_Abort_IT+0xc8>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a58      	ldr	r2, [pc, #352]	@ (80021d8 <HAL_DMA_Abort_IT+0x1ac>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d03b      	beq.n	80020f4 <HAL_DMA_Abort_IT+0xc8>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a56      	ldr	r2, [pc, #344]	@ (80021dc <HAL_DMA_Abort_IT+0x1b0>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d036      	beq.n	80020f4 <HAL_DMA_Abort_IT+0xc8>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a55      	ldr	r2, [pc, #340]	@ (80021e0 <HAL_DMA_Abort_IT+0x1b4>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d031      	beq.n	80020f4 <HAL_DMA_Abort_IT+0xc8>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a53      	ldr	r2, [pc, #332]	@ (80021e4 <HAL_DMA_Abort_IT+0x1b8>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d02c      	beq.n	80020f4 <HAL_DMA_Abort_IT+0xc8>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a52      	ldr	r2, [pc, #328]	@ (80021e8 <HAL_DMA_Abort_IT+0x1bc>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d027      	beq.n	80020f4 <HAL_DMA_Abort_IT+0xc8>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a50      	ldr	r2, [pc, #320]	@ (80021ec <HAL_DMA_Abort_IT+0x1c0>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d022      	beq.n	80020f4 <HAL_DMA_Abort_IT+0xc8>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a4f      	ldr	r2, [pc, #316]	@ (80021f0 <HAL_DMA_Abort_IT+0x1c4>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d01d      	beq.n	80020f4 <HAL_DMA_Abort_IT+0xc8>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a4d      	ldr	r2, [pc, #308]	@ (80021f4 <HAL_DMA_Abort_IT+0x1c8>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d018      	beq.n	80020f4 <HAL_DMA_Abort_IT+0xc8>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a4c      	ldr	r2, [pc, #304]	@ (80021f8 <HAL_DMA_Abort_IT+0x1cc>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d013      	beq.n	80020f4 <HAL_DMA_Abort_IT+0xc8>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a4a      	ldr	r2, [pc, #296]	@ (80021fc <HAL_DMA_Abort_IT+0x1d0>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d00e      	beq.n	80020f4 <HAL_DMA_Abort_IT+0xc8>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a49      	ldr	r2, [pc, #292]	@ (8002200 <HAL_DMA_Abort_IT+0x1d4>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d009      	beq.n	80020f4 <HAL_DMA_Abort_IT+0xc8>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a47      	ldr	r2, [pc, #284]	@ (8002204 <HAL_DMA_Abort_IT+0x1d8>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d004      	beq.n	80020f4 <HAL_DMA_Abort_IT+0xc8>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a46      	ldr	r2, [pc, #280]	@ (8002208 <HAL_DMA_Abort_IT+0x1dc>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d101      	bne.n	80020f8 <HAL_DMA_Abort_IT+0xcc>
 80020f4:	2301      	movs	r3, #1
 80020f6:	e000      	b.n	80020fa <HAL_DMA_Abort_IT+0xce>
 80020f8:	2300      	movs	r3, #0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f000 8086 	beq.w	800220c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2204      	movs	r2, #4
 8002104:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a2f      	ldr	r2, [pc, #188]	@ (80021cc <HAL_DMA_Abort_IT+0x1a0>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d04a      	beq.n	80021a8 <HAL_DMA_Abort_IT+0x17c>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a2e      	ldr	r2, [pc, #184]	@ (80021d0 <HAL_DMA_Abort_IT+0x1a4>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d045      	beq.n	80021a8 <HAL_DMA_Abort_IT+0x17c>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a2c      	ldr	r2, [pc, #176]	@ (80021d4 <HAL_DMA_Abort_IT+0x1a8>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d040      	beq.n	80021a8 <HAL_DMA_Abort_IT+0x17c>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a2b      	ldr	r2, [pc, #172]	@ (80021d8 <HAL_DMA_Abort_IT+0x1ac>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d03b      	beq.n	80021a8 <HAL_DMA_Abort_IT+0x17c>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a29      	ldr	r2, [pc, #164]	@ (80021dc <HAL_DMA_Abort_IT+0x1b0>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d036      	beq.n	80021a8 <HAL_DMA_Abort_IT+0x17c>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a28      	ldr	r2, [pc, #160]	@ (80021e0 <HAL_DMA_Abort_IT+0x1b4>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d031      	beq.n	80021a8 <HAL_DMA_Abort_IT+0x17c>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a26      	ldr	r2, [pc, #152]	@ (80021e4 <HAL_DMA_Abort_IT+0x1b8>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d02c      	beq.n	80021a8 <HAL_DMA_Abort_IT+0x17c>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a25      	ldr	r2, [pc, #148]	@ (80021e8 <HAL_DMA_Abort_IT+0x1bc>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d027      	beq.n	80021a8 <HAL_DMA_Abort_IT+0x17c>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a23      	ldr	r2, [pc, #140]	@ (80021ec <HAL_DMA_Abort_IT+0x1c0>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d022      	beq.n	80021a8 <HAL_DMA_Abort_IT+0x17c>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a22      	ldr	r2, [pc, #136]	@ (80021f0 <HAL_DMA_Abort_IT+0x1c4>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d01d      	beq.n	80021a8 <HAL_DMA_Abort_IT+0x17c>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a20      	ldr	r2, [pc, #128]	@ (80021f4 <HAL_DMA_Abort_IT+0x1c8>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d018      	beq.n	80021a8 <HAL_DMA_Abort_IT+0x17c>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a1f      	ldr	r2, [pc, #124]	@ (80021f8 <HAL_DMA_Abort_IT+0x1cc>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d013      	beq.n	80021a8 <HAL_DMA_Abort_IT+0x17c>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a1d      	ldr	r2, [pc, #116]	@ (80021fc <HAL_DMA_Abort_IT+0x1d0>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d00e      	beq.n	80021a8 <HAL_DMA_Abort_IT+0x17c>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a1c      	ldr	r2, [pc, #112]	@ (8002200 <HAL_DMA_Abort_IT+0x1d4>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d009      	beq.n	80021a8 <HAL_DMA_Abort_IT+0x17c>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a1a      	ldr	r2, [pc, #104]	@ (8002204 <HAL_DMA_Abort_IT+0x1d8>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d004      	beq.n	80021a8 <HAL_DMA_Abort_IT+0x17c>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a19      	ldr	r2, [pc, #100]	@ (8002208 <HAL_DMA_Abort_IT+0x1dc>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d108      	bne.n	80021ba <HAL_DMA_Abort_IT+0x18e>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f022 0201 	bic.w	r2, r2, #1
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	e178      	b.n	80024ac <HAL_DMA_Abort_IT+0x480>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f022 0201 	bic.w	r2, r2, #1
 80021c8:	601a      	str	r2, [r3, #0]
 80021ca:	e16f      	b.n	80024ac <HAL_DMA_Abort_IT+0x480>
 80021cc:	40020010 	.word	0x40020010
 80021d0:	40020028 	.word	0x40020028
 80021d4:	40020040 	.word	0x40020040
 80021d8:	40020058 	.word	0x40020058
 80021dc:	40020070 	.word	0x40020070
 80021e0:	40020088 	.word	0x40020088
 80021e4:	400200a0 	.word	0x400200a0
 80021e8:	400200b8 	.word	0x400200b8
 80021ec:	40020410 	.word	0x40020410
 80021f0:	40020428 	.word	0x40020428
 80021f4:	40020440 	.word	0x40020440
 80021f8:	40020458 	.word	0x40020458
 80021fc:	40020470 	.word	0x40020470
 8002200:	40020488 	.word	0x40020488
 8002204:	400204a0 	.word	0x400204a0
 8002208:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f022 020e 	bic.w	r2, r2, #14
 800221a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a6c      	ldr	r2, [pc, #432]	@ (80023d4 <HAL_DMA_Abort_IT+0x3a8>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d04a      	beq.n	80022bc <HAL_DMA_Abort_IT+0x290>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a6b      	ldr	r2, [pc, #428]	@ (80023d8 <HAL_DMA_Abort_IT+0x3ac>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d045      	beq.n	80022bc <HAL_DMA_Abort_IT+0x290>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a69      	ldr	r2, [pc, #420]	@ (80023dc <HAL_DMA_Abort_IT+0x3b0>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d040      	beq.n	80022bc <HAL_DMA_Abort_IT+0x290>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a68      	ldr	r2, [pc, #416]	@ (80023e0 <HAL_DMA_Abort_IT+0x3b4>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d03b      	beq.n	80022bc <HAL_DMA_Abort_IT+0x290>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a66      	ldr	r2, [pc, #408]	@ (80023e4 <HAL_DMA_Abort_IT+0x3b8>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d036      	beq.n	80022bc <HAL_DMA_Abort_IT+0x290>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a65      	ldr	r2, [pc, #404]	@ (80023e8 <HAL_DMA_Abort_IT+0x3bc>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d031      	beq.n	80022bc <HAL_DMA_Abort_IT+0x290>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a63      	ldr	r2, [pc, #396]	@ (80023ec <HAL_DMA_Abort_IT+0x3c0>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d02c      	beq.n	80022bc <HAL_DMA_Abort_IT+0x290>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a62      	ldr	r2, [pc, #392]	@ (80023f0 <HAL_DMA_Abort_IT+0x3c4>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d027      	beq.n	80022bc <HAL_DMA_Abort_IT+0x290>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a60      	ldr	r2, [pc, #384]	@ (80023f4 <HAL_DMA_Abort_IT+0x3c8>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d022      	beq.n	80022bc <HAL_DMA_Abort_IT+0x290>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a5f      	ldr	r2, [pc, #380]	@ (80023f8 <HAL_DMA_Abort_IT+0x3cc>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d01d      	beq.n	80022bc <HAL_DMA_Abort_IT+0x290>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a5d      	ldr	r2, [pc, #372]	@ (80023fc <HAL_DMA_Abort_IT+0x3d0>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d018      	beq.n	80022bc <HAL_DMA_Abort_IT+0x290>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a5c      	ldr	r2, [pc, #368]	@ (8002400 <HAL_DMA_Abort_IT+0x3d4>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d013      	beq.n	80022bc <HAL_DMA_Abort_IT+0x290>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a5a      	ldr	r2, [pc, #360]	@ (8002404 <HAL_DMA_Abort_IT+0x3d8>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d00e      	beq.n	80022bc <HAL_DMA_Abort_IT+0x290>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a59      	ldr	r2, [pc, #356]	@ (8002408 <HAL_DMA_Abort_IT+0x3dc>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d009      	beq.n	80022bc <HAL_DMA_Abort_IT+0x290>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a57      	ldr	r2, [pc, #348]	@ (800240c <HAL_DMA_Abort_IT+0x3e0>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d004      	beq.n	80022bc <HAL_DMA_Abort_IT+0x290>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a56      	ldr	r2, [pc, #344]	@ (8002410 <HAL_DMA_Abort_IT+0x3e4>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d108      	bne.n	80022ce <HAL_DMA_Abort_IT+0x2a2>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f022 0201 	bic.w	r2, r2, #1
 80022ca:	601a      	str	r2, [r3, #0]
 80022cc:	e007      	b.n	80022de <HAL_DMA_Abort_IT+0x2b2>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f022 0201 	bic.w	r2, r2, #1
 80022dc:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a3c      	ldr	r2, [pc, #240]	@ (80023d4 <HAL_DMA_Abort_IT+0x3a8>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d072      	beq.n	80023ce <HAL_DMA_Abort_IT+0x3a2>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a3a      	ldr	r2, [pc, #232]	@ (80023d8 <HAL_DMA_Abort_IT+0x3ac>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d06d      	beq.n	80023ce <HAL_DMA_Abort_IT+0x3a2>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a39      	ldr	r2, [pc, #228]	@ (80023dc <HAL_DMA_Abort_IT+0x3b0>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d068      	beq.n	80023ce <HAL_DMA_Abort_IT+0x3a2>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a37      	ldr	r2, [pc, #220]	@ (80023e0 <HAL_DMA_Abort_IT+0x3b4>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d063      	beq.n	80023ce <HAL_DMA_Abort_IT+0x3a2>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a36      	ldr	r2, [pc, #216]	@ (80023e4 <HAL_DMA_Abort_IT+0x3b8>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d05e      	beq.n	80023ce <HAL_DMA_Abort_IT+0x3a2>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a34      	ldr	r2, [pc, #208]	@ (80023e8 <HAL_DMA_Abort_IT+0x3bc>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d059      	beq.n	80023ce <HAL_DMA_Abort_IT+0x3a2>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a33      	ldr	r2, [pc, #204]	@ (80023ec <HAL_DMA_Abort_IT+0x3c0>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d054      	beq.n	80023ce <HAL_DMA_Abort_IT+0x3a2>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a31      	ldr	r2, [pc, #196]	@ (80023f0 <HAL_DMA_Abort_IT+0x3c4>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d04f      	beq.n	80023ce <HAL_DMA_Abort_IT+0x3a2>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a30      	ldr	r2, [pc, #192]	@ (80023f4 <HAL_DMA_Abort_IT+0x3c8>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d04a      	beq.n	80023ce <HAL_DMA_Abort_IT+0x3a2>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a2e      	ldr	r2, [pc, #184]	@ (80023f8 <HAL_DMA_Abort_IT+0x3cc>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d045      	beq.n	80023ce <HAL_DMA_Abort_IT+0x3a2>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a2d      	ldr	r2, [pc, #180]	@ (80023fc <HAL_DMA_Abort_IT+0x3d0>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d040      	beq.n	80023ce <HAL_DMA_Abort_IT+0x3a2>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a2b      	ldr	r2, [pc, #172]	@ (8002400 <HAL_DMA_Abort_IT+0x3d4>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d03b      	beq.n	80023ce <HAL_DMA_Abort_IT+0x3a2>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a2a      	ldr	r2, [pc, #168]	@ (8002404 <HAL_DMA_Abort_IT+0x3d8>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d036      	beq.n	80023ce <HAL_DMA_Abort_IT+0x3a2>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a28      	ldr	r2, [pc, #160]	@ (8002408 <HAL_DMA_Abort_IT+0x3dc>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d031      	beq.n	80023ce <HAL_DMA_Abort_IT+0x3a2>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a27      	ldr	r2, [pc, #156]	@ (800240c <HAL_DMA_Abort_IT+0x3e0>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d02c      	beq.n	80023ce <HAL_DMA_Abort_IT+0x3a2>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a25      	ldr	r2, [pc, #148]	@ (8002410 <HAL_DMA_Abort_IT+0x3e4>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d027      	beq.n	80023ce <HAL_DMA_Abort_IT+0x3a2>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a24      	ldr	r2, [pc, #144]	@ (8002414 <HAL_DMA_Abort_IT+0x3e8>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d022      	beq.n	80023ce <HAL_DMA_Abort_IT+0x3a2>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a22      	ldr	r2, [pc, #136]	@ (8002418 <HAL_DMA_Abort_IT+0x3ec>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d01d      	beq.n	80023ce <HAL_DMA_Abort_IT+0x3a2>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a21      	ldr	r2, [pc, #132]	@ (800241c <HAL_DMA_Abort_IT+0x3f0>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d018      	beq.n	80023ce <HAL_DMA_Abort_IT+0x3a2>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a1f      	ldr	r2, [pc, #124]	@ (8002420 <HAL_DMA_Abort_IT+0x3f4>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d013      	beq.n	80023ce <HAL_DMA_Abort_IT+0x3a2>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a1e      	ldr	r2, [pc, #120]	@ (8002424 <HAL_DMA_Abort_IT+0x3f8>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d00e      	beq.n	80023ce <HAL_DMA_Abort_IT+0x3a2>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a1c      	ldr	r2, [pc, #112]	@ (8002428 <HAL_DMA_Abort_IT+0x3fc>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d009      	beq.n	80023ce <HAL_DMA_Abort_IT+0x3a2>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a1b      	ldr	r2, [pc, #108]	@ (800242c <HAL_DMA_Abort_IT+0x400>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d004      	beq.n	80023ce <HAL_DMA_Abort_IT+0x3a2>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a19      	ldr	r2, [pc, #100]	@ (8002430 <HAL_DMA_Abort_IT+0x404>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d132      	bne.n	8002434 <HAL_DMA_Abort_IT+0x408>
 80023ce:	2301      	movs	r3, #1
 80023d0:	e031      	b.n	8002436 <HAL_DMA_Abort_IT+0x40a>
 80023d2:	bf00      	nop
 80023d4:	40020010 	.word	0x40020010
 80023d8:	40020028 	.word	0x40020028
 80023dc:	40020040 	.word	0x40020040
 80023e0:	40020058 	.word	0x40020058
 80023e4:	40020070 	.word	0x40020070
 80023e8:	40020088 	.word	0x40020088
 80023ec:	400200a0 	.word	0x400200a0
 80023f0:	400200b8 	.word	0x400200b8
 80023f4:	40020410 	.word	0x40020410
 80023f8:	40020428 	.word	0x40020428
 80023fc:	40020440 	.word	0x40020440
 8002400:	40020458 	.word	0x40020458
 8002404:	40020470 	.word	0x40020470
 8002408:	40020488 	.word	0x40020488
 800240c:	400204a0 	.word	0x400204a0
 8002410:	400204b8 	.word	0x400204b8
 8002414:	58025408 	.word	0x58025408
 8002418:	5802541c 	.word	0x5802541c
 800241c:	58025430 	.word	0x58025430
 8002420:	58025444 	.word	0x58025444
 8002424:	58025458 	.word	0x58025458
 8002428:	5802546c 	.word	0x5802546c
 800242c:	58025480 	.word	0x58025480
 8002430:	58025494 	.word	0x58025494
 8002434:	2300      	movs	r3, #0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d028      	beq.n	800248c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002444:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002448:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800244e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002454:	f003 031f 	and.w	r3, r3, #31
 8002458:	2201      	movs	r2, #1
 800245a:	409a      	lsls	r2, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002468:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800246e:	2b00      	cmp	r3, #0
 8002470:	d00c      	beq.n	800248c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800247c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002480:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800248a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d003      	beq.n	80024ac <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop

080024b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b089      	sub	sp, #36	@ 0x24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80024c2:	2300      	movs	r3, #0
 80024c4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80024c6:	4b89      	ldr	r3, [pc, #548]	@ (80026ec <HAL_GPIO_Init+0x234>)
 80024c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80024ca:	e194      	b.n	80027f6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	2101      	movs	r1, #1
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	fa01 f303 	lsl.w	r3, r1, r3
 80024d8:	4013      	ands	r3, r2
 80024da:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	f000 8186 	beq.w	80027f0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f003 0303 	and.w	r3, r3, #3
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d005      	beq.n	80024fc <HAL_GPIO_Init+0x44>
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f003 0303 	and.w	r3, r3, #3
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d130      	bne.n	800255e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	2203      	movs	r2, #3
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	43db      	mvns	r3, r3
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	4013      	ands	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	68da      	ldr	r2, [r3, #12]
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	4313      	orrs	r3, r2
 8002524:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002532:	2201      	movs	r2, #1
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	fa02 f303 	lsl.w	r3, r2, r3
 800253a:	43db      	mvns	r3, r3
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	4013      	ands	r3, r2
 8002540:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	091b      	lsrs	r3, r3, #4
 8002548:	f003 0201 	and.w	r2, r3, #1
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	fa02 f303 	lsl.w	r3, r2, r3
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	4313      	orrs	r3, r2
 8002556:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f003 0303 	and.w	r3, r3, #3
 8002566:	2b03      	cmp	r3, #3
 8002568:	d017      	beq.n	800259a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	2203      	movs	r2, #3
 8002576:	fa02 f303 	lsl.w	r3, r2, r3
 800257a:	43db      	mvns	r3, r3
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	4013      	ands	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	689a      	ldr	r2, [r3, #8]
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	fa02 f303 	lsl.w	r3, r2, r3
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	4313      	orrs	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f003 0303 	and.w	r3, r3, #3
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d123      	bne.n	80025ee <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	08da      	lsrs	r2, r3, #3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	3208      	adds	r2, #8
 80025ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	f003 0307 	and.w	r3, r3, #7
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	220f      	movs	r2, #15
 80025be:	fa02 f303 	lsl.w	r3, r2, r3
 80025c2:	43db      	mvns	r3, r3
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	4013      	ands	r3, r2
 80025c8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	691a      	ldr	r2, [r3, #16]
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	f003 0307 	and.w	r3, r3, #7
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	4313      	orrs	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	08da      	lsrs	r2, r3, #3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	3208      	adds	r2, #8
 80025e8:	69b9      	ldr	r1, [r7, #24]
 80025ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	2203      	movs	r2, #3
 80025fa:	fa02 f303 	lsl.w	r3, r2, r3
 80025fe:	43db      	mvns	r3, r3
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	4013      	ands	r3, r2
 8002604:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f003 0203 	and.w	r2, r3, #3
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	fa02 f303 	lsl.w	r3, r2, r3
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	4313      	orrs	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800262a:	2b00      	cmp	r3, #0
 800262c:	f000 80e0 	beq.w	80027f0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002630:	4b2f      	ldr	r3, [pc, #188]	@ (80026f0 <HAL_GPIO_Init+0x238>)
 8002632:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002636:	4a2e      	ldr	r2, [pc, #184]	@ (80026f0 <HAL_GPIO_Init+0x238>)
 8002638:	f043 0302 	orr.w	r3, r3, #2
 800263c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002640:	4b2b      	ldr	r3, [pc, #172]	@ (80026f0 <HAL_GPIO_Init+0x238>)
 8002642:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	60fb      	str	r3, [r7, #12]
 800264c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800264e:	4a29      	ldr	r2, [pc, #164]	@ (80026f4 <HAL_GPIO_Init+0x23c>)
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	089b      	lsrs	r3, r3, #2
 8002654:	3302      	adds	r3, #2
 8002656:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800265a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	f003 0303 	and.w	r3, r3, #3
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	220f      	movs	r2, #15
 8002666:	fa02 f303 	lsl.w	r3, r2, r3
 800266a:	43db      	mvns	r3, r3
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	4013      	ands	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a20      	ldr	r2, [pc, #128]	@ (80026f8 <HAL_GPIO_Init+0x240>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d052      	beq.n	8002720 <HAL_GPIO_Init+0x268>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a1f      	ldr	r2, [pc, #124]	@ (80026fc <HAL_GPIO_Init+0x244>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d031      	beq.n	80026e6 <HAL_GPIO_Init+0x22e>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a1e      	ldr	r2, [pc, #120]	@ (8002700 <HAL_GPIO_Init+0x248>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d02b      	beq.n	80026e2 <HAL_GPIO_Init+0x22a>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a1d      	ldr	r2, [pc, #116]	@ (8002704 <HAL_GPIO_Init+0x24c>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d025      	beq.n	80026de <HAL_GPIO_Init+0x226>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a1c      	ldr	r2, [pc, #112]	@ (8002708 <HAL_GPIO_Init+0x250>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d01f      	beq.n	80026da <HAL_GPIO_Init+0x222>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a1b      	ldr	r2, [pc, #108]	@ (800270c <HAL_GPIO_Init+0x254>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d019      	beq.n	80026d6 <HAL_GPIO_Init+0x21e>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a1a      	ldr	r2, [pc, #104]	@ (8002710 <HAL_GPIO_Init+0x258>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d013      	beq.n	80026d2 <HAL_GPIO_Init+0x21a>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a19      	ldr	r2, [pc, #100]	@ (8002714 <HAL_GPIO_Init+0x25c>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d00d      	beq.n	80026ce <HAL_GPIO_Init+0x216>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a18      	ldr	r2, [pc, #96]	@ (8002718 <HAL_GPIO_Init+0x260>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d007      	beq.n	80026ca <HAL_GPIO_Init+0x212>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a17      	ldr	r2, [pc, #92]	@ (800271c <HAL_GPIO_Init+0x264>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d101      	bne.n	80026c6 <HAL_GPIO_Init+0x20e>
 80026c2:	2309      	movs	r3, #9
 80026c4:	e02d      	b.n	8002722 <HAL_GPIO_Init+0x26a>
 80026c6:	230a      	movs	r3, #10
 80026c8:	e02b      	b.n	8002722 <HAL_GPIO_Init+0x26a>
 80026ca:	2308      	movs	r3, #8
 80026cc:	e029      	b.n	8002722 <HAL_GPIO_Init+0x26a>
 80026ce:	2307      	movs	r3, #7
 80026d0:	e027      	b.n	8002722 <HAL_GPIO_Init+0x26a>
 80026d2:	2306      	movs	r3, #6
 80026d4:	e025      	b.n	8002722 <HAL_GPIO_Init+0x26a>
 80026d6:	2305      	movs	r3, #5
 80026d8:	e023      	b.n	8002722 <HAL_GPIO_Init+0x26a>
 80026da:	2304      	movs	r3, #4
 80026dc:	e021      	b.n	8002722 <HAL_GPIO_Init+0x26a>
 80026de:	2303      	movs	r3, #3
 80026e0:	e01f      	b.n	8002722 <HAL_GPIO_Init+0x26a>
 80026e2:	2302      	movs	r3, #2
 80026e4:	e01d      	b.n	8002722 <HAL_GPIO_Init+0x26a>
 80026e6:	2301      	movs	r3, #1
 80026e8:	e01b      	b.n	8002722 <HAL_GPIO_Init+0x26a>
 80026ea:	bf00      	nop
 80026ec:	58000080 	.word	0x58000080
 80026f0:	58024400 	.word	0x58024400
 80026f4:	58000400 	.word	0x58000400
 80026f8:	58020000 	.word	0x58020000
 80026fc:	58020400 	.word	0x58020400
 8002700:	58020800 	.word	0x58020800
 8002704:	58020c00 	.word	0x58020c00
 8002708:	58021000 	.word	0x58021000
 800270c:	58021400 	.word	0x58021400
 8002710:	58021800 	.word	0x58021800
 8002714:	58021c00 	.word	0x58021c00
 8002718:	58022000 	.word	0x58022000
 800271c:	58022400 	.word	0x58022400
 8002720:	2300      	movs	r3, #0
 8002722:	69fa      	ldr	r2, [r7, #28]
 8002724:	f002 0203 	and.w	r2, r2, #3
 8002728:	0092      	lsls	r2, r2, #2
 800272a:	4093      	lsls	r3, r2
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	4313      	orrs	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002732:	4938      	ldr	r1, [pc, #224]	@ (8002814 <HAL_GPIO_Init+0x35c>)
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	089b      	lsrs	r3, r3, #2
 8002738:	3302      	adds	r3, #2
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002740:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	43db      	mvns	r3, r3
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	4013      	ands	r3, r2
 8002750:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d003      	beq.n	8002766 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	4313      	orrs	r3, r2
 8002764:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002766:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800276e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	43db      	mvns	r3, r3
 800277a:	69ba      	ldr	r2, [r7, #24]
 800277c:	4013      	ands	r3, r2
 800277e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d003      	beq.n	8002794 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	4313      	orrs	r3, r2
 8002792:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002794:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	43db      	mvns	r3, r3
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	4013      	ands	r3, r2
 80027aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d003      	beq.n	80027c0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	4313      	orrs	r3, r2
 80027be:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	43db      	mvns	r3, r3
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	4013      	ands	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d003      	beq.n	80027ea <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	3301      	adds	r3, #1
 80027f4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002800:	2b00      	cmp	r3, #0
 8002802:	f47f ae63 	bne.w	80024cc <HAL_GPIO_Init+0x14>
  }
}
 8002806:	bf00      	nop
 8002808:	bf00      	nop
 800280a:	3724      	adds	r7, #36	@ 0x24
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr
 8002814:	58000400 	.word	0x58000400

08002818 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	460b      	mov	r3, r1
 8002822:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	691a      	ldr	r2, [r3, #16]
 8002828:	887b      	ldrh	r3, [r7, #2]
 800282a:	4013      	ands	r3, r2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d002      	beq.n	8002836 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002830:	2301      	movs	r3, #1
 8002832:	73fb      	strb	r3, [r7, #15]
 8002834:	e001      	b.n	800283a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002836:	2300      	movs	r3, #0
 8002838:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800283a:	7bfb      	ldrb	r3, [r7, #15]
}
 800283c:	4618      	mov	r0, r3
 800283e:	3714      	adds	r7, #20
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr

08002848 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	460b      	mov	r3, r1
 8002852:	807b      	strh	r3, [r7, #2]
 8002854:	4613      	mov	r3, r2
 8002856:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002858:	787b      	ldrb	r3, [r7, #1]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d003      	beq.n	8002866 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800285e:	887a      	ldrh	r2, [r7, #2]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002864:	e003      	b.n	800286e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002866:	887b      	ldrh	r3, [r7, #2]
 8002868:	041a      	lsls	r2, r3, #16
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	619a      	str	r2, [r3, #24]
}
 800286e:	bf00      	nop
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr

0800287a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800287a:	b580      	push	{r7, lr}
 800287c:	b082      	sub	sp, #8
 800287e:	af00      	add	r7, sp, #0
 8002880:	4603      	mov	r3, r0
 8002882:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8002884:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002888:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800288c:	88fb      	ldrh	r3, [r7, #6]
 800288e:	4013      	ands	r3, r2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d008      	beq.n	80028a6 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002894:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002898:	88fb      	ldrh	r3, [r7, #6]
 800289a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800289e:	88fb      	ldrh	r3, [r7, #6]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f000 f804 	bl	80028ae <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80028a6:	bf00      	nop
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}

080028ae <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80028ae:	b480      	push	{r7}
 80028b0:	b083      	sub	sp, #12
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	4603      	mov	r3, r0
 80028b6:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80028b8:	bf00      	nop
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80028cc:	4b19      	ldr	r3, [pc, #100]	@ (8002934 <HAL_PWREx_ConfigSupply+0x70>)
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	f003 0304 	and.w	r3, r3, #4
 80028d4:	2b04      	cmp	r3, #4
 80028d6:	d00a      	beq.n	80028ee <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80028d8:	4b16      	ldr	r3, [pc, #88]	@ (8002934 <HAL_PWREx_ConfigSupply+0x70>)
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	f003 0307 	and.w	r3, r3, #7
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d001      	beq.n	80028ea <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e01f      	b.n	800292a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80028ea:	2300      	movs	r3, #0
 80028ec:	e01d      	b.n	800292a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80028ee:	4b11      	ldr	r3, [pc, #68]	@ (8002934 <HAL_PWREx_ConfigSupply+0x70>)
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	f023 0207 	bic.w	r2, r3, #7
 80028f6:	490f      	ldr	r1, [pc, #60]	@ (8002934 <HAL_PWREx_ConfigSupply+0x70>)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80028fe:	f7fe feb3 	bl	8001668 <HAL_GetTick>
 8002902:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002904:	e009      	b.n	800291a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002906:	f7fe feaf 	bl	8001668 <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002914:	d901      	bls.n	800291a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e007      	b.n	800292a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800291a:	4b06      	ldr	r3, [pc, #24]	@ (8002934 <HAL_PWREx_ConfigSupply+0x70>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002922:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002926:	d1ee      	bne.n	8002906 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3710      	adds	r7, #16
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	58024800 	.word	0x58024800

08002938 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b08c      	sub	sp, #48	@ 0x30
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d102      	bne.n	800294c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	f000 bc48 	b.w	80031dc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0301 	and.w	r3, r3, #1
 8002954:	2b00      	cmp	r3, #0
 8002956:	f000 8088 	beq.w	8002a6a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800295a:	4b99      	ldr	r3, [pc, #612]	@ (8002bc0 <HAL_RCC_OscConfig+0x288>)
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002962:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002964:	4b96      	ldr	r3, [pc, #600]	@ (8002bc0 <HAL_RCC_OscConfig+0x288>)
 8002966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002968:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800296a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800296c:	2b10      	cmp	r3, #16
 800296e:	d007      	beq.n	8002980 <HAL_RCC_OscConfig+0x48>
 8002970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002972:	2b18      	cmp	r3, #24
 8002974:	d111      	bne.n	800299a <HAL_RCC_OscConfig+0x62>
 8002976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002978:	f003 0303 	and.w	r3, r3, #3
 800297c:	2b02      	cmp	r3, #2
 800297e:	d10c      	bne.n	800299a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002980:	4b8f      	ldr	r3, [pc, #572]	@ (8002bc0 <HAL_RCC_OscConfig+0x288>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d06d      	beq.n	8002a68 <HAL_RCC_OscConfig+0x130>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d169      	bne.n	8002a68 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	f000 bc21 	b.w	80031dc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029a2:	d106      	bne.n	80029b2 <HAL_RCC_OscConfig+0x7a>
 80029a4:	4b86      	ldr	r3, [pc, #536]	@ (8002bc0 <HAL_RCC_OscConfig+0x288>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a85      	ldr	r2, [pc, #532]	@ (8002bc0 <HAL_RCC_OscConfig+0x288>)
 80029aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029ae:	6013      	str	r3, [r2, #0]
 80029b0:	e02e      	b.n	8002a10 <HAL_RCC_OscConfig+0xd8>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d10c      	bne.n	80029d4 <HAL_RCC_OscConfig+0x9c>
 80029ba:	4b81      	ldr	r3, [pc, #516]	@ (8002bc0 <HAL_RCC_OscConfig+0x288>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a80      	ldr	r2, [pc, #512]	@ (8002bc0 <HAL_RCC_OscConfig+0x288>)
 80029c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029c4:	6013      	str	r3, [r2, #0]
 80029c6:	4b7e      	ldr	r3, [pc, #504]	@ (8002bc0 <HAL_RCC_OscConfig+0x288>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a7d      	ldr	r2, [pc, #500]	@ (8002bc0 <HAL_RCC_OscConfig+0x288>)
 80029cc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029d0:	6013      	str	r3, [r2, #0]
 80029d2:	e01d      	b.n	8002a10 <HAL_RCC_OscConfig+0xd8>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029dc:	d10c      	bne.n	80029f8 <HAL_RCC_OscConfig+0xc0>
 80029de:	4b78      	ldr	r3, [pc, #480]	@ (8002bc0 <HAL_RCC_OscConfig+0x288>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a77      	ldr	r2, [pc, #476]	@ (8002bc0 <HAL_RCC_OscConfig+0x288>)
 80029e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029e8:	6013      	str	r3, [r2, #0]
 80029ea:	4b75      	ldr	r3, [pc, #468]	@ (8002bc0 <HAL_RCC_OscConfig+0x288>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a74      	ldr	r2, [pc, #464]	@ (8002bc0 <HAL_RCC_OscConfig+0x288>)
 80029f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029f4:	6013      	str	r3, [r2, #0]
 80029f6:	e00b      	b.n	8002a10 <HAL_RCC_OscConfig+0xd8>
 80029f8:	4b71      	ldr	r3, [pc, #452]	@ (8002bc0 <HAL_RCC_OscConfig+0x288>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a70      	ldr	r2, [pc, #448]	@ (8002bc0 <HAL_RCC_OscConfig+0x288>)
 80029fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a02:	6013      	str	r3, [r2, #0]
 8002a04:	4b6e      	ldr	r3, [pc, #440]	@ (8002bc0 <HAL_RCC_OscConfig+0x288>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a6d      	ldr	r2, [pc, #436]	@ (8002bc0 <HAL_RCC_OscConfig+0x288>)
 8002a0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d013      	beq.n	8002a40 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a18:	f7fe fe26 	bl	8001668 <HAL_GetTick>
 8002a1c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a1e:	e008      	b.n	8002a32 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a20:	f7fe fe22 	bl	8001668 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b64      	cmp	r3, #100	@ 0x64
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e3d4      	b.n	80031dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a32:	4b63      	ldr	r3, [pc, #396]	@ (8002bc0 <HAL_RCC_OscConfig+0x288>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d0f0      	beq.n	8002a20 <HAL_RCC_OscConfig+0xe8>
 8002a3e:	e014      	b.n	8002a6a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a40:	f7fe fe12 	bl	8001668 <HAL_GetTick>
 8002a44:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a46:	e008      	b.n	8002a5a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a48:	f7fe fe0e 	bl	8001668 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b64      	cmp	r3, #100	@ 0x64
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e3c0      	b.n	80031dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a5a:	4b59      	ldr	r3, [pc, #356]	@ (8002bc0 <HAL_RCC_OscConfig+0x288>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1f0      	bne.n	8002a48 <HAL_RCC_OscConfig+0x110>
 8002a66:	e000      	b.n	8002a6a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	f000 80ca 	beq.w	8002c0c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a78:	4b51      	ldr	r3, [pc, #324]	@ (8002bc0 <HAL_RCC_OscConfig+0x288>)
 8002a7a:	691b      	ldr	r3, [r3, #16]
 8002a7c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a80:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a82:	4b4f      	ldr	r3, [pc, #316]	@ (8002bc0 <HAL_RCC_OscConfig+0x288>)
 8002a84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a86:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002a88:	6a3b      	ldr	r3, [r7, #32]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d007      	beq.n	8002a9e <HAL_RCC_OscConfig+0x166>
 8002a8e:	6a3b      	ldr	r3, [r7, #32]
 8002a90:	2b18      	cmp	r3, #24
 8002a92:	d156      	bne.n	8002b42 <HAL_RCC_OscConfig+0x20a>
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	f003 0303 	and.w	r3, r3, #3
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d151      	bne.n	8002b42 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a9e:	4b48      	ldr	r3, [pc, #288]	@ (8002bc0 <HAL_RCC_OscConfig+0x288>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0304 	and.w	r3, r3, #4
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d005      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x17e>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e392      	b.n	80031dc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002ab6:	4b42      	ldr	r3, [pc, #264]	@ (8002bc0 <HAL_RCC_OscConfig+0x288>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f023 0219 	bic.w	r2, r3, #25
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	493f      	ldr	r1, [pc, #252]	@ (8002bc0 <HAL_RCC_OscConfig+0x288>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac8:	f7fe fdce 	bl	8001668 <HAL_GetTick>
 8002acc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ace:	e008      	b.n	8002ae2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ad0:	f7fe fdca 	bl	8001668 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e37c      	b.n	80031dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ae2:	4b37      	ldr	r3, [pc, #220]	@ (8002bc0 <HAL_RCC_OscConfig+0x288>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0304 	and.w	r3, r3, #4
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d0f0      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aee:	f7fe fdeb 	bl	80016c8 <HAL_GetREVID>
 8002af2:	4603      	mov	r3, r0
 8002af4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d817      	bhi.n	8002b2c <HAL_RCC_OscConfig+0x1f4>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	691b      	ldr	r3, [r3, #16]
 8002b00:	2b40      	cmp	r3, #64	@ 0x40
 8002b02:	d108      	bne.n	8002b16 <HAL_RCC_OscConfig+0x1de>
 8002b04:	4b2e      	ldr	r3, [pc, #184]	@ (8002bc0 <HAL_RCC_OscConfig+0x288>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002b0c:	4a2c      	ldr	r2, [pc, #176]	@ (8002bc0 <HAL_RCC_OscConfig+0x288>)
 8002b0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b12:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b14:	e07a      	b.n	8002c0c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b16:	4b2a      	ldr	r3, [pc, #168]	@ (8002bc0 <HAL_RCC_OscConfig+0x288>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	031b      	lsls	r3, r3, #12
 8002b24:	4926      	ldr	r1, [pc, #152]	@ (8002bc0 <HAL_RCC_OscConfig+0x288>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b2a:	e06f      	b.n	8002c0c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b2c:	4b24      	ldr	r3, [pc, #144]	@ (8002bc0 <HAL_RCC_OscConfig+0x288>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	061b      	lsls	r3, r3, #24
 8002b3a:	4921      	ldr	r1, [pc, #132]	@ (8002bc0 <HAL_RCC_OscConfig+0x288>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b40:	e064      	b.n	8002c0c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d047      	beq.n	8002bda <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002b4a:	4b1d      	ldr	r3, [pc, #116]	@ (8002bc0 <HAL_RCC_OscConfig+0x288>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f023 0219 	bic.w	r2, r3, #25
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	491a      	ldr	r1, [pc, #104]	@ (8002bc0 <HAL_RCC_OscConfig+0x288>)
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b5c:	f7fe fd84 	bl	8001668 <HAL_GetTick>
 8002b60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b62:	e008      	b.n	8002b76 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b64:	f7fe fd80 	bl	8001668 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e332      	b.n	80031dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b76:	4b12      	ldr	r3, [pc, #72]	@ (8002bc0 <HAL_RCC_OscConfig+0x288>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0304 	and.w	r3, r3, #4
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d0f0      	beq.n	8002b64 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b82:	f7fe fda1 	bl	80016c8 <HAL_GetREVID>
 8002b86:	4603      	mov	r3, r0
 8002b88:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d819      	bhi.n	8002bc4 <HAL_RCC_OscConfig+0x28c>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	691b      	ldr	r3, [r3, #16]
 8002b94:	2b40      	cmp	r3, #64	@ 0x40
 8002b96:	d108      	bne.n	8002baa <HAL_RCC_OscConfig+0x272>
 8002b98:	4b09      	ldr	r3, [pc, #36]	@ (8002bc0 <HAL_RCC_OscConfig+0x288>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002ba0:	4a07      	ldr	r2, [pc, #28]	@ (8002bc0 <HAL_RCC_OscConfig+0x288>)
 8002ba2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ba6:	6053      	str	r3, [r2, #4]
 8002ba8:	e030      	b.n	8002c0c <HAL_RCC_OscConfig+0x2d4>
 8002baa:	4b05      	ldr	r3, [pc, #20]	@ (8002bc0 <HAL_RCC_OscConfig+0x288>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	031b      	lsls	r3, r3, #12
 8002bb8:	4901      	ldr	r1, [pc, #4]	@ (8002bc0 <HAL_RCC_OscConfig+0x288>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	604b      	str	r3, [r1, #4]
 8002bbe:	e025      	b.n	8002c0c <HAL_RCC_OscConfig+0x2d4>
 8002bc0:	58024400 	.word	0x58024400
 8002bc4:	4b9a      	ldr	r3, [pc, #616]	@ (8002e30 <HAL_RCC_OscConfig+0x4f8>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	691b      	ldr	r3, [r3, #16]
 8002bd0:	061b      	lsls	r3, r3, #24
 8002bd2:	4997      	ldr	r1, [pc, #604]	@ (8002e30 <HAL_RCC_OscConfig+0x4f8>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	604b      	str	r3, [r1, #4]
 8002bd8:	e018      	b.n	8002c0c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bda:	4b95      	ldr	r3, [pc, #596]	@ (8002e30 <HAL_RCC_OscConfig+0x4f8>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a94      	ldr	r2, [pc, #592]	@ (8002e30 <HAL_RCC_OscConfig+0x4f8>)
 8002be0:	f023 0301 	bic.w	r3, r3, #1
 8002be4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be6:	f7fe fd3f 	bl	8001668 <HAL_GetTick>
 8002bea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002bec:	e008      	b.n	8002c00 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bee:	f7fe fd3b 	bl	8001668 <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d901      	bls.n	8002c00 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e2ed      	b.n	80031dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002c00:	4b8b      	ldr	r3, [pc, #556]	@ (8002e30 <HAL_RCC_OscConfig+0x4f8>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0304 	and.w	r3, r3, #4
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d1f0      	bne.n	8002bee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0310 	and.w	r3, r3, #16
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	f000 80a9 	beq.w	8002d6c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c1a:	4b85      	ldr	r3, [pc, #532]	@ (8002e30 <HAL_RCC_OscConfig+0x4f8>)
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c22:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c24:	4b82      	ldr	r3, [pc, #520]	@ (8002e30 <HAL_RCC_OscConfig+0x4f8>)
 8002c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c28:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	2b08      	cmp	r3, #8
 8002c2e:	d007      	beq.n	8002c40 <HAL_RCC_OscConfig+0x308>
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	2b18      	cmp	r3, #24
 8002c34:	d13a      	bne.n	8002cac <HAL_RCC_OscConfig+0x374>
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	f003 0303 	and.w	r3, r3, #3
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d135      	bne.n	8002cac <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c40:	4b7b      	ldr	r3, [pc, #492]	@ (8002e30 <HAL_RCC_OscConfig+0x4f8>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d005      	beq.n	8002c58 <HAL_RCC_OscConfig+0x320>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	69db      	ldr	r3, [r3, #28]
 8002c50:	2b80      	cmp	r3, #128	@ 0x80
 8002c52:	d001      	beq.n	8002c58 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e2c1      	b.n	80031dc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c58:	f7fe fd36 	bl	80016c8 <HAL_GetREVID>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d817      	bhi.n	8002c96 <HAL_RCC_OscConfig+0x35e>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a1b      	ldr	r3, [r3, #32]
 8002c6a:	2b20      	cmp	r3, #32
 8002c6c:	d108      	bne.n	8002c80 <HAL_RCC_OscConfig+0x348>
 8002c6e:	4b70      	ldr	r3, [pc, #448]	@ (8002e30 <HAL_RCC_OscConfig+0x4f8>)
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002c76:	4a6e      	ldr	r2, [pc, #440]	@ (8002e30 <HAL_RCC_OscConfig+0x4f8>)
 8002c78:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002c7c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c7e:	e075      	b.n	8002d6c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c80:	4b6b      	ldr	r3, [pc, #428]	@ (8002e30 <HAL_RCC_OscConfig+0x4f8>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a1b      	ldr	r3, [r3, #32]
 8002c8c:	069b      	lsls	r3, r3, #26
 8002c8e:	4968      	ldr	r1, [pc, #416]	@ (8002e30 <HAL_RCC_OscConfig+0x4f8>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c94:	e06a      	b.n	8002d6c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c96:	4b66      	ldr	r3, [pc, #408]	@ (8002e30 <HAL_RCC_OscConfig+0x4f8>)
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a1b      	ldr	r3, [r3, #32]
 8002ca2:	061b      	lsls	r3, r3, #24
 8002ca4:	4962      	ldr	r1, [pc, #392]	@ (8002e30 <HAL_RCC_OscConfig+0x4f8>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002caa:	e05f      	b.n	8002d6c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	69db      	ldr	r3, [r3, #28]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d042      	beq.n	8002d3a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002cb4:	4b5e      	ldr	r3, [pc, #376]	@ (8002e30 <HAL_RCC_OscConfig+0x4f8>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a5d      	ldr	r2, [pc, #372]	@ (8002e30 <HAL_RCC_OscConfig+0x4f8>)
 8002cba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002cbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc0:	f7fe fcd2 	bl	8001668 <HAL_GetTick>
 8002cc4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002cc6:	e008      	b.n	8002cda <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002cc8:	f7fe fcce 	bl	8001668 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e280      	b.n	80031dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002cda:	4b55      	ldr	r3, [pc, #340]	@ (8002e30 <HAL_RCC_OscConfig+0x4f8>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d0f0      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ce6:	f7fe fcef 	bl	80016c8 <HAL_GetREVID>
 8002cea:	4603      	mov	r3, r0
 8002cec:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d817      	bhi.n	8002d24 <HAL_RCC_OscConfig+0x3ec>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a1b      	ldr	r3, [r3, #32]
 8002cf8:	2b20      	cmp	r3, #32
 8002cfa:	d108      	bne.n	8002d0e <HAL_RCC_OscConfig+0x3d6>
 8002cfc:	4b4c      	ldr	r3, [pc, #304]	@ (8002e30 <HAL_RCC_OscConfig+0x4f8>)
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002d04:	4a4a      	ldr	r2, [pc, #296]	@ (8002e30 <HAL_RCC_OscConfig+0x4f8>)
 8002d06:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002d0a:	6053      	str	r3, [r2, #4]
 8002d0c:	e02e      	b.n	8002d6c <HAL_RCC_OscConfig+0x434>
 8002d0e:	4b48      	ldr	r3, [pc, #288]	@ (8002e30 <HAL_RCC_OscConfig+0x4f8>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a1b      	ldr	r3, [r3, #32]
 8002d1a:	069b      	lsls	r3, r3, #26
 8002d1c:	4944      	ldr	r1, [pc, #272]	@ (8002e30 <HAL_RCC_OscConfig+0x4f8>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	604b      	str	r3, [r1, #4]
 8002d22:	e023      	b.n	8002d6c <HAL_RCC_OscConfig+0x434>
 8002d24:	4b42      	ldr	r3, [pc, #264]	@ (8002e30 <HAL_RCC_OscConfig+0x4f8>)
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a1b      	ldr	r3, [r3, #32]
 8002d30:	061b      	lsls	r3, r3, #24
 8002d32:	493f      	ldr	r1, [pc, #252]	@ (8002e30 <HAL_RCC_OscConfig+0x4f8>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	60cb      	str	r3, [r1, #12]
 8002d38:	e018      	b.n	8002d6c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002d3a:	4b3d      	ldr	r3, [pc, #244]	@ (8002e30 <HAL_RCC_OscConfig+0x4f8>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a3c      	ldr	r2, [pc, #240]	@ (8002e30 <HAL_RCC_OscConfig+0x4f8>)
 8002d40:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d46:	f7fe fc8f 	bl	8001668 <HAL_GetTick>
 8002d4a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002d4c:	e008      	b.n	8002d60 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002d4e:	f7fe fc8b 	bl	8001668 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d901      	bls.n	8002d60 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e23d      	b.n	80031dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002d60:	4b33      	ldr	r3, [pc, #204]	@ (8002e30 <HAL_RCC_OscConfig+0x4f8>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d1f0      	bne.n	8002d4e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0308 	and.w	r3, r3, #8
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d036      	beq.n	8002de6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	695b      	ldr	r3, [r3, #20]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d019      	beq.n	8002db4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d80:	4b2b      	ldr	r3, [pc, #172]	@ (8002e30 <HAL_RCC_OscConfig+0x4f8>)
 8002d82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d84:	4a2a      	ldr	r2, [pc, #168]	@ (8002e30 <HAL_RCC_OscConfig+0x4f8>)
 8002d86:	f043 0301 	orr.w	r3, r3, #1
 8002d8a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d8c:	f7fe fc6c 	bl	8001668 <HAL_GetTick>
 8002d90:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d92:	e008      	b.n	8002da6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d94:	f7fe fc68 	bl	8001668 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e21a      	b.n	80031dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002da6:	4b22      	ldr	r3, [pc, #136]	@ (8002e30 <HAL_RCC_OscConfig+0x4f8>)
 8002da8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d0f0      	beq.n	8002d94 <HAL_RCC_OscConfig+0x45c>
 8002db2:	e018      	b.n	8002de6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002db4:	4b1e      	ldr	r3, [pc, #120]	@ (8002e30 <HAL_RCC_OscConfig+0x4f8>)
 8002db6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002db8:	4a1d      	ldr	r2, [pc, #116]	@ (8002e30 <HAL_RCC_OscConfig+0x4f8>)
 8002dba:	f023 0301 	bic.w	r3, r3, #1
 8002dbe:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc0:	f7fe fc52 	bl	8001668 <HAL_GetTick>
 8002dc4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dc8:	f7fe fc4e 	bl	8001668 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e200      	b.n	80031dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002dda:	4b15      	ldr	r3, [pc, #84]	@ (8002e30 <HAL_RCC_OscConfig+0x4f8>)
 8002ddc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1f0      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0320 	and.w	r3, r3, #32
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d039      	beq.n	8002e66 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	699b      	ldr	r3, [r3, #24]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d01c      	beq.n	8002e34 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8002e30 <HAL_RCC_OscConfig+0x4f8>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a0c      	ldr	r2, [pc, #48]	@ (8002e30 <HAL_RCC_OscConfig+0x4f8>)
 8002e00:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002e04:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002e06:	f7fe fc2f 	bl	8001668 <HAL_GetTick>
 8002e0a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002e0c:	e008      	b.n	8002e20 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e0e:	f7fe fc2b 	bl	8001668 <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d901      	bls.n	8002e20 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e1dd      	b.n	80031dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002e20:	4b03      	ldr	r3, [pc, #12]	@ (8002e30 <HAL_RCC_OscConfig+0x4f8>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d0f0      	beq.n	8002e0e <HAL_RCC_OscConfig+0x4d6>
 8002e2c:	e01b      	b.n	8002e66 <HAL_RCC_OscConfig+0x52e>
 8002e2e:	bf00      	nop
 8002e30:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002e34:	4b9b      	ldr	r3, [pc, #620]	@ (80030a4 <HAL_RCC_OscConfig+0x76c>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a9a      	ldr	r2, [pc, #616]	@ (80030a4 <HAL_RCC_OscConfig+0x76c>)
 8002e3a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002e3e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002e40:	f7fe fc12 	bl	8001668 <HAL_GetTick>
 8002e44:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002e46:	e008      	b.n	8002e5a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e48:	f7fe fc0e 	bl	8001668 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e1c0      	b.n	80031dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002e5a:	4b92      	ldr	r3, [pc, #584]	@ (80030a4 <HAL_RCC_OscConfig+0x76c>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1f0      	bne.n	8002e48 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0304 	and.w	r3, r3, #4
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	f000 8081 	beq.w	8002f76 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002e74:	4b8c      	ldr	r3, [pc, #560]	@ (80030a8 <HAL_RCC_OscConfig+0x770>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a8b      	ldr	r2, [pc, #556]	@ (80030a8 <HAL_RCC_OscConfig+0x770>)
 8002e7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e7e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e80:	f7fe fbf2 	bl	8001668 <HAL_GetTick>
 8002e84:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e86:	e008      	b.n	8002e9a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e88:	f7fe fbee 	bl	8001668 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b64      	cmp	r3, #100	@ 0x64
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e1a0      	b.n	80031dc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e9a:	4b83      	ldr	r3, [pc, #524]	@ (80030a8 <HAL_RCC_OscConfig+0x770>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d0f0      	beq.n	8002e88 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d106      	bne.n	8002ebc <HAL_RCC_OscConfig+0x584>
 8002eae:	4b7d      	ldr	r3, [pc, #500]	@ (80030a4 <HAL_RCC_OscConfig+0x76c>)
 8002eb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eb2:	4a7c      	ldr	r2, [pc, #496]	@ (80030a4 <HAL_RCC_OscConfig+0x76c>)
 8002eb4:	f043 0301 	orr.w	r3, r3, #1
 8002eb8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002eba:	e02d      	b.n	8002f18 <HAL_RCC_OscConfig+0x5e0>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d10c      	bne.n	8002ede <HAL_RCC_OscConfig+0x5a6>
 8002ec4:	4b77      	ldr	r3, [pc, #476]	@ (80030a4 <HAL_RCC_OscConfig+0x76c>)
 8002ec6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ec8:	4a76      	ldr	r2, [pc, #472]	@ (80030a4 <HAL_RCC_OscConfig+0x76c>)
 8002eca:	f023 0301 	bic.w	r3, r3, #1
 8002ece:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ed0:	4b74      	ldr	r3, [pc, #464]	@ (80030a4 <HAL_RCC_OscConfig+0x76c>)
 8002ed2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ed4:	4a73      	ldr	r2, [pc, #460]	@ (80030a4 <HAL_RCC_OscConfig+0x76c>)
 8002ed6:	f023 0304 	bic.w	r3, r3, #4
 8002eda:	6713      	str	r3, [r2, #112]	@ 0x70
 8002edc:	e01c      	b.n	8002f18 <HAL_RCC_OscConfig+0x5e0>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	2b05      	cmp	r3, #5
 8002ee4:	d10c      	bne.n	8002f00 <HAL_RCC_OscConfig+0x5c8>
 8002ee6:	4b6f      	ldr	r3, [pc, #444]	@ (80030a4 <HAL_RCC_OscConfig+0x76c>)
 8002ee8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eea:	4a6e      	ldr	r2, [pc, #440]	@ (80030a4 <HAL_RCC_OscConfig+0x76c>)
 8002eec:	f043 0304 	orr.w	r3, r3, #4
 8002ef0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ef2:	4b6c      	ldr	r3, [pc, #432]	@ (80030a4 <HAL_RCC_OscConfig+0x76c>)
 8002ef4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ef6:	4a6b      	ldr	r2, [pc, #428]	@ (80030a4 <HAL_RCC_OscConfig+0x76c>)
 8002ef8:	f043 0301 	orr.w	r3, r3, #1
 8002efc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002efe:	e00b      	b.n	8002f18 <HAL_RCC_OscConfig+0x5e0>
 8002f00:	4b68      	ldr	r3, [pc, #416]	@ (80030a4 <HAL_RCC_OscConfig+0x76c>)
 8002f02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f04:	4a67      	ldr	r2, [pc, #412]	@ (80030a4 <HAL_RCC_OscConfig+0x76c>)
 8002f06:	f023 0301 	bic.w	r3, r3, #1
 8002f0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f0c:	4b65      	ldr	r3, [pc, #404]	@ (80030a4 <HAL_RCC_OscConfig+0x76c>)
 8002f0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f10:	4a64      	ldr	r2, [pc, #400]	@ (80030a4 <HAL_RCC_OscConfig+0x76c>)
 8002f12:	f023 0304 	bic.w	r3, r3, #4
 8002f16:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d015      	beq.n	8002f4c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f20:	f7fe fba2 	bl	8001668 <HAL_GetTick>
 8002f24:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f26:	e00a      	b.n	8002f3e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f28:	f7fe fb9e 	bl	8001668 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e14e      	b.n	80031dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f3e:	4b59      	ldr	r3, [pc, #356]	@ (80030a4 <HAL_RCC_OscConfig+0x76c>)
 8002f40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f42:	f003 0302 	and.w	r3, r3, #2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d0ee      	beq.n	8002f28 <HAL_RCC_OscConfig+0x5f0>
 8002f4a:	e014      	b.n	8002f76 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f4c:	f7fe fb8c 	bl	8001668 <HAL_GetTick>
 8002f50:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f52:	e00a      	b.n	8002f6a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f54:	f7fe fb88 	bl	8001668 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e138      	b.n	80031dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f6a:	4b4e      	ldr	r3, [pc, #312]	@ (80030a4 <HAL_RCC_OscConfig+0x76c>)
 8002f6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1ee      	bne.n	8002f54 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	f000 812d 	beq.w	80031da <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002f80:	4b48      	ldr	r3, [pc, #288]	@ (80030a4 <HAL_RCC_OscConfig+0x76c>)
 8002f82:	691b      	ldr	r3, [r3, #16]
 8002f84:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002f88:	2b18      	cmp	r3, #24
 8002f8a:	f000 80bd 	beq.w	8003108 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	f040 809e 	bne.w	80030d4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f98:	4b42      	ldr	r3, [pc, #264]	@ (80030a4 <HAL_RCC_OscConfig+0x76c>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a41      	ldr	r2, [pc, #260]	@ (80030a4 <HAL_RCC_OscConfig+0x76c>)
 8002f9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002fa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa4:	f7fe fb60 	bl	8001668 <HAL_GetTick>
 8002fa8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002faa:	e008      	b.n	8002fbe <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fac:	f7fe fb5c 	bl	8001668 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e10e      	b.n	80031dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002fbe:	4b39      	ldr	r3, [pc, #228]	@ (80030a4 <HAL_RCC_OscConfig+0x76c>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1f0      	bne.n	8002fac <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fca:	4b36      	ldr	r3, [pc, #216]	@ (80030a4 <HAL_RCC_OscConfig+0x76c>)
 8002fcc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002fce:	4b37      	ldr	r3, [pc, #220]	@ (80030ac <HAL_RCC_OscConfig+0x774>)
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002fda:	0112      	lsls	r2, r2, #4
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	4931      	ldr	r1, [pc, #196]	@ (80030a4 <HAL_RCC_OscConfig+0x76c>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	628b      	str	r3, [r1, #40]	@ 0x28
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fe8:	3b01      	subs	r3, #1
 8002fea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	025b      	lsls	r3, r3, #9
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	431a      	orrs	r2, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ffe:	3b01      	subs	r3, #1
 8003000:	041b      	lsls	r3, r3, #16
 8003002:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003006:	431a      	orrs	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800300c:	3b01      	subs	r3, #1
 800300e:	061b      	lsls	r3, r3, #24
 8003010:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003014:	4923      	ldr	r1, [pc, #140]	@ (80030a4 <HAL_RCC_OscConfig+0x76c>)
 8003016:	4313      	orrs	r3, r2
 8003018:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800301a:	4b22      	ldr	r3, [pc, #136]	@ (80030a4 <HAL_RCC_OscConfig+0x76c>)
 800301c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800301e:	4a21      	ldr	r2, [pc, #132]	@ (80030a4 <HAL_RCC_OscConfig+0x76c>)
 8003020:	f023 0301 	bic.w	r3, r3, #1
 8003024:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003026:	4b1f      	ldr	r3, [pc, #124]	@ (80030a4 <HAL_RCC_OscConfig+0x76c>)
 8003028:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800302a:	4b21      	ldr	r3, [pc, #132]	@ (80030b0 <HAL_RCC_OscConfig+0x778>)
 800302c:	4013      	ands	r3, r2
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003032:	00d2      	lsls	r2, r2, #3
 8003034:	491b      	ldr	r1, [pc, #108]	@ (80030a4 <HAL_RCC_OscConfig+0x76c>)
 8003036:	4313      	orrs	r3, r2
 8003038:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800303a:	4b1a      	ldr	r3, [pc, #104]	@ (80030a4 <HAL_RCC_OscConfig+0x76c>)
 800303c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800303e:	f023 020c 	bic.w	r2, r3, #12
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003046:	4917      	ldr	r1, [pc, #92]	@ (80030a4 <HAL_RCC_OscConfig+0x76c>)
 8003048:	4313      	orrs	r3, r2
 800304a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800304c:	4b15      	ldr	r3, [pc, #84]	@ (80030a4 <HAL_RCC_OscConfig+0x76c>)
 800304e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003050:	f023 0202 	bic.w	r2, r3, #2
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003058:	4912      	ldr	r1, [pc, #72]	@ (80030a4 <HAL_RCC_OscConfig+0x76c>)
 800305a:	4313      	orrs	r3, r2
 800305c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800305e:	4b11      	ldr	r3, [pc, #68]	@ (80030a4 <HAL_RCC_OscConfig+0x76c>)
 8003060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003062:	4a10      	ldr	r2, [pc, #64]	@ (80030a4 <HAL_RCC_OscConfig+0x76c>)
 8003064:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003068:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800306a:	4b0e      	ldr	r3, [pc, #56]	@ (80030a4 <HAL_RCC_OscConfig+0x76c>)
 800306c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800306e:	4a0d      	ldr	r2, [pc, #52]	@ (80030a4 <HAL_RCC_OscConfig+0x76c>)
 8003070:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003074:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003076:	4b0b      	ldr	r3, [pc, #44]	@ (80030a4 <HAL_RCC_OscConfig+0x76c>)
 8003078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800307a:	4a0a      	ldr	r2, [pc, #40]	@ (80030a4 <HAL_RCC_OscConfig+0x76c>)
 800307c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003080:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003082:	4b08      	ldr	r3, [pc, #32]	@ (80030a4 <HAL_RCC_OscConfig+0x76c>)
 8003084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003086:	4a07      	ldr	r2, [pc, #28]	@ (80030a4 <HAL_RCC_OscConfig+0x76c>)
 8003088:	f043 0301 	orr.w	r3, r3, #1
 800308c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800308e:	4b05      	ldr	r3, [pc, #20]	@ (80030a4 <HAL_RCC_OscConfig+0x76c>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a04      	ldr	r2, [pc, #16]	@ (80030a4 <HAL_RCC_OscConfig+0x76c>)
 8003094:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003098:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800309a:	f7fe fae5 	bl	8001668 <HAL_GetTick>
 800309e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80030a0:	e011      	b.n	80030c6 <HAL_RCC_OscConfig+0x78e>
 80030a2:	bf00      	nop
 80030a4:	58024400 	.word	0x58024400
 80030a8:	58024800 	.word	0x58024800
 80030ac:	fffffc0c 	.word	0xfffffc0c
 80030b0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030b4:	f7fe fad8 	bl	8001668 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e08a      	b.n	80031dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80030c6:	4b47      	ldr	r3, [pc, #284]	@ (80031e4 <HAL_RCC_OscConfig+0x8ac>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d0f0      	beq.n	80030b4 <HAL_RCC_OscConfig+0x77c>
 80030d2:	e082      	b.n	80031da <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030d4:	4b43      	ldr	r3, [pc, #268]	@ (80031e4 <HAL_RCC_OscConfig+0x8ac>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a42      	ldr	r2, [pc, #264]	@ (80031e4 <HAL_RCC_OscConfig+0x8ac>)
 80030da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80030de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e0:	f7fe fac2 	bl	8001668 <HAL_GetTick>
 80030e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030e6:	e008      	b.n	80030fa <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030e8:	f7fe fabe 	bl	8001668 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e070      	b.n	80031dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030fa:	4b3a      	ldr	r3, [pc, #232]	@ (80031e4 <HAL_RCC_OscConfig+0x8ac>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1f0      	bne.n	80030e8 <HAL_RCC_OscConfig+0x7b0>
 8003106:	e068      	b.n	80031da <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003108:	4b36      	ldr	r3, [pc, #216]	@ (80031e4 <HAL_RCC_OscConfig+0x8ac>)
 800310a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800310c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800310e:	4b35      	ldr	r3, [pc, #212]	@ (80031e4 <HAL_RCC_OscConfig+0x8ac>)
 8003110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003112:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003118:	2b01      	cmp	r3, #1
 800311a:	d031      	beq.n	8003180 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	f003 0203 	and.w	r2, r3, #3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003126:	429a      	cmp	r2, r3
 8003128:	d12a      	bne.n	8003180 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	091b      	lsrs	r3, r3, #4
 800312e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003136:	429a      	cmp	r2, r3
 8003138:	d122      	bne.n	8003180 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003144:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003146:	429a      	cmp	r2, r3
 8003148:	d11a      	bne.n	8003180 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	0a5b      	lsrs	r3, r3, #9
 800314e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003156:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003158:	429a      	cmp	r2, r3
 800315a:	d111      	bne.n	8003180 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	0c1b      	lsrs	r3, r3, #16
 8003160:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003168:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800316a:	429a      	cmp	r2, r3
 800316c:	d108      	bne.n	8003180 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	0e1b      	lsrs	r3, r3, #24
 8003172:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800317a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800317c:	429a      	cmp	r2, r3
 800317e:	d001      	beq.n	8003184 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e02b      	b.n	80031dc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003184:	4b17      	ldr	r3, [pc, #92]	@ (80031e4 <HAL_RCC_OscConfig+0x8ac>)
 8003186:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003188:	08db      	lsrs	r3, r3, #3
 800318a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800318e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003194:	693a      	ldr	r2, [r7, #16]
 8003196:	429a      	cmp	r2, r3
 8003198:	d01f      	beq.n	80031da <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800319a:	4b12      	ldr	r3, [pc, #72]	@ (80031e4 <HAL_RCC_OscConfig+0x8ac>)
 800319c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800319e:	4a11      	ldr	r2, [pc, #68]	@ (80031e4 <HAL_RCC_OscConfig+0x8ac>)
 80031a0:	f023 0301 	bic.w	r3, r3, #1
 80031a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80031a6:	f7fe fa5f 	bl	8001668 <HAL_GetTick>
 80031aa:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80031ac:	bf00      	nop
 80031ae:	f7fe fa5b 	bl	8001668 <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d0f9      	beq.n	80031ae <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80031ba:	4b0a      	ldr	r3, [pc, #40]	@ (80031e4 <HAL_RCC_OscConfig+0x8ac>)
 80031bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031be:	4b0a      	ldr	r3, [pc, #40]	@ (80031e8 <HAL_RCC_OscConfig+0x8b0>)
 80031c0:	4013      	ands	r3, r2
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80031c6:	00d2      	lsls	r2, r2, #3
 80031c8:	4906      	ldr	r1, [pc, #24]	@ (80031e4 <HAL_RCC_OscConfig+0x8ac>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80031ce:	4b05      	ldr	r3, [pc, #20]	@ (80031e4 <HAL_RCC_OscConfig+0x8ac>)
 80031d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031d2:	4a04      	ldr	r2, [pc, #16]	@ (80031e4 <HAL_RCC_OscConfig+0x8ac>)
 80031d4:	f043 0301 	orr.w	r3, r3, #1
 80031d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80031da:	2300      	movs	r3, #0
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3730      	adds	r7, #48	@ 0x30
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	58024400 	.word	0x58024400
 80031e8:	ffff0007 	.word	0xffff0007

080031ec <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d101      	bne.n	8003200 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e19c      	b.n	800353a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003200:	4b8a      	ldr	r3, [pc, #552]	@ (800342c <HAL_RCC_ClockConfig+0x240>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 030f 	and.w	r3, r3, #15
 8003208:	683a      	ldr	r2, [r7, #0]
 800320a:	429a      	cmp	r2, r3
 800320c:	d910      	bls.n	8003230 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800320e:	4b87      	ldr	r3, [pc, #540]	@ (800342c <HAL_RCC_ClockConfig+0x240>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f023 020f 	bic.w	r2, r3, #15
 8003216:	4985      	ldr	r1, [pc, #532]	@ (800342c <HAL_RCC_ClockConfig+0x240>)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	4313      	orrs	r3, r2
 800321c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800321e:	4b83      	ldr	r3, [pc, #524]	@ (800342c <HAL_RCC_ClockConfig+0x240>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 030f 	and.w	r3, r3, #15
 8003226:	683a      	ldr	r2, [r7, #0]
 8003228:	429a      	cmp	r2, r3
 800322a:	d001      	beq.n	8003230 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e184      	b.n	800353a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0304 	and.w	r3, r3, #4
 8003238:	2b00      	cmp	r3, #0
 800323a:	d010      	beq.n	800325e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	691a      	ldr	r2, [r3, #16]
 8003240:	4b7b      	ldr	r3, [pc, #492]	@ (8003430 <HAL_RCC_ClockConfig+0x244>)
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003248:	429a      	cmp	r2, r3
 800324a:	d908      	bls.n	800325e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800324c:	4b78      	ldr	r3, [pc, #480]	@ (8003430 <HAL_RCC_ClockConfig+0x244>)
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	691b      	ldr	r3, [r3, #16]
 8003258:	4975      	ldr	r1, [pc, #468]	@ (8003430 <HAL_RCC_ClockConfig+0x244>)
 800325a:	4313      	orrs	r3, r2
 800325c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0308 	and.w	r3, r3, #8
 8003266:	2b00      	cmp	r3, #0
 8003268:	d010      	beq.n	800328c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	695a      	ldr	r2, [r3, #20]
 800326e:	4b70      	ldr	r3, [pc, #448]	@ (8003430 <HAL_RCC_ClockConfig+0x244>)
 8003270:	69db      	ldr	r3, [r3, #28]
 8003272:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003276:	429a      	cmp	r2, r3
 8003278:	d908      	bls.n	800328c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800327a:	4b6d      	ldr	r3, [pc, #436]	@ (8003430 <HAL_RCC_ClockConfig+0x244>)
 800327c:	69db      	ldr	r3, [r3, #28]
 800327e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	695b      	ldr	r3, [r3, #20]
 8003286:	496a      	ldr	r1, [pc, #424]	@ (8003430 <HAL_RCC_ClockConfig+0x244>)
 8003288:	4313      	orrs	r3, r2
 800328a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0310 	and.w	r3, r3, #16
 8003294:	2b00      	cmp	r3, #0
 8003296:	d010      	beq.n	80032ba <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	699a      	ldr	r2, [r3, #24]
 800329c:	4b64      	ldr	r3, [pc, #400]	@ (8003430 <HAL_RCC_ClockConfig+0x244>)
 800329e:	69db      	ldr	r3, [r3, #28]
 80032a0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d908      	bls.n	80032ba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80032a8:	4b61      	ldr	r3, [pc, #388]	@ (8003430 <HAL_RCC_ClockConfig+0x244>)
 80032aa:	69db      	ldr	r3, [r3, #28]
 80032ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	699b      	ldr	r3, [r3, #24]
 80032b4:	495e      	ldr	r1, [pc, #376]	@ (8003430 <HAL_RCC_ClockConfig+0x244>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0320 	and.w	r3, r3, #32
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d010      	beq.n	80032e8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	69da      	ldr	r2, [r3, #28]
 80032ca:	4b59      	ldr	r3, [pc, #356]	@ (8003430 <HAL_RCC_ClockConfig+0x244>)
 80032cc:	6a1b      	ldr	r3, [r3, #32]
 80032ce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d908      	bls.n	80032e8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80032d6:	4b56      	ldr	r3, [pc, #344]	@ (8003430 <HAL_RCC_ClockConfig+0x244>)
 80032d8:	6a1b      	ldr	r3, [r3, #32]
 80032da:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	69db      	ldr	r3, [r3, #28]
 80032e2:	4953      	ldr	r1, [pc, #332]	@ (8003430 <HAL_RCC_ClockConfig+0x244>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0302 	and.w	r3, r3, #2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d010      	beq.n	8003316 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	68da      	ldr	r2, [r3, #12]
 80032f8:	4b4d      	ldr	r3, [pc, #308]	@ (8003430 <HAL_RCC_ClockConfig+0x244>)
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	f003 030f 	and.w	r3, r3, #15
 8003300:	429a      	cmp	r2, r3
 8003302:	d908      	bls.n	8003316 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003304:	4b4a      	ldr	r3, [pc, #296]	@ (8003430 <HAL_RCC_ClockConfig+0x244>)
 8003306:	699b      	ldr	r3, [r3, #24]
 8003308:	f023 020f 	bic.w	r2, r3, #15
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	4947      	ldr	r1, [pc, #284]	@ (8003430 <HAL_RCC_ClockConfig+0x244>)
 8003312:	4313      	orrs	r3, r2
 8003314:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	2b00      	cmp	r3, #0
 8003320:	d055      	beq.n	80033ce <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003322:	4b43      	ldr	r3, [pc, #268]	@ (8003430 <HAL_RCC_ClockConfig+0x244>)
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	4940      	ldr	r1, [pc, #256]	@ (8003430 <HAL_RCC_ClockConfig+0x244>)
 8003330:	4313      	orrs	r3, r2
 8003332:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	2b02      	cmp	r3, #2
 800333a:	d107      	bne.n	800334c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800333c:	4b3c      	ldr	r3, [pc, #240]	@ (8003430 <HAL_RCC_ClockConfig+0x244>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d121      	bne.n	800338c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e0f6      	b.n	800353a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	2b03      	cmp	r3, #3
 8003352:	d107      	bne.n	8003364 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003354:	4b36      	ldr	r3, [pc, #216]	@ (8003430 <HAL_RCC_ClockConfig+0x244>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d115      	bne.n	800338c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e0ea      	b.n	800353a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	2b01      	cmp	r3, #1
 800336a:	d107      	bne.n	800337c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800336c:	4b30      	ldr	r3, [pc, #192]	@ (8003430 <HAL_RCC_ClockConfig+0x244>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003374:	2b00      	cmp	r3, #0
 8003376:	d109      	bne.n	800338c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e0de      	b.n	800353a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800337c:	4b2c      	ldr	r3, [pc, #176]	@ (8003430 <HAL_RCC_ClockConfig+0x244>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0304 	and.w	r3, r3, #4
 8003384:	2b00      	cmp	r3, #0
 8003386:	d101      	bne.n	800338c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e0d6      	b.n	800353a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800338c:	4b28      	ldr	r3, [pc, #160]	@ (8003430 <HAL_RCC_ClockConfig+0x244>)
 800338e:	691b      	ldr	r3, [r3, #16]
 8003390:	f023 0207 	bic.w	r2, r3, #7
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	4925      	ldr	r1, [pc, #148]	@ (8003430 <HAL_RCC_ClockConfig+0x244>)
 800339a:	4313      	orrs	r3, r2
 800339c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800339e:	f7fe f963 	bl	8001668 <HAL_GetTick>
 80033a2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033a4:	e00a      	b.n	80033bc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033a6:	f7fe f95f 	bl	8001668 <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d901      	bls.n	80033bc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e0be      	b.n	800353a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033bc:	4b1c      	ldr	r3, [pc, #112]	@ (8003430 <HAL_RCC_ClockConfig+0x244>)
 80033be:	691b      	ldr	r3, [r3, #16]
 80033c0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	00db      	lsls	r3, r3, #3
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d1eb      	bne.n	80033a6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d010      	beq.n	80033fc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	68da      	ldr	r2, [r3, #12]
 80033de:	4b14      	ldr	r3, [pc, #80]	@ (8003430 <HAL_RCC_ClockConfig+0x244>)
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	f003 030f 	and.w	r3, r3, #15
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d208      	bcs.n	80033fc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033ea:	4b11      	ldr	r3, [pc, #68]	@ (8003430 <HAL_RCC_ClockConfig+0x244>)
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	f023 020f 	bic.w	r2, r3, #15
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	490e      	ldr	r1, [pc, #56]	@ (8003430 <HAL_RCC_ClockConfig+0x244>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033fc:	4b0b      	ldr	r3, [pc, #44]	@ (800342c <HAL_RCC_ClockConfig+0x240>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 030f 	and.w	r3, r3, #15
 8003404:	683a      	ldr	r2, [r7, #0]
 8003406:	429a      	cmp	r2, r3
 8003408:	d214      	bcs.n	8003434 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800340a:	4b08      	ldr	r3, [pc, #32]	@ (800342c <HAL_RCC_ClockConfig+0x240>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f023 020f 	bic.w	r2, r3, #15
 8003412:	4906      	ldr	r1, [pc, #24]	@ (800342c <HAL_RCC_ClockConfig+0x240>)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	4313      	orrs	r3, r2
 8003418:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800341a:	4b04      	ldr	r3, [pc, #16]	@ (800342c <HAL_RCC_ClockConfig+0x240>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 030f 	and.w	r3, r3, #15
 8003422:	683a      	ldr	r2, [r7, #0]
 8003424:	429a      	cmp	r2, r3
 8003426:	d005      	beq.n	8003434 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e086      	b.n	800353a <HAL_RCC_ClockConfig+0x34e>
 800342c:	52002000 	.word	0x52002000
 8003430:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0304 	and.w	r3, r3, #4
 800343c:	2b00      	cmp	r3, #0
 800343e:	d010      	beq.n	8003462 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	691a      	ldr	r2, [r3, #16]
 8003444:	4b3f      	ldr	r3, [pc, #252]	@ (8003544 <HAL_RCC_ClockConfig+0x358>)
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800344c:	429a      	cmp	r2, r3
 800344e:	d208      	bcs.n	8003462 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003450:	4b3c      	ldr	r3, [pc, #240]	@ (8003544 <HAL_RCC_ClockConfig+0x358>)
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	691b      	ldr	r3, [r3, #16]
 800345c:	4939      	ldr	r1, [pc, #228]	@ (8003544 <HAL_RCC_ClockConfig+0x358>)
 800345e:	4313      	orrs	r3, r2
 8003460:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0308 	and.w	r3, r3, #8
 800346a:	2b00      	cmp	r3, #0
 800346c:	d010      	beq.n	8003490 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	695a      	ldr	r2, [r3, #20]
 8003472:	4b34      	ldr	r3, [pc, #208]	@ (8003544 <HAL_RCC_ClockConfig+0x358>)
 8003474:	69db      	ldr	r3, [r3, #28]
 8003476:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800347a:	429a      	cmp	r2, r3
 800347c:	d208      	bcs.n	8003490 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800347e:	4b31      	ldr	r3, [pc, #196]	@ (8003544 <HAL_RCC_ClockConfig+0x358>)
 8003480:	69db      	ldr	r3, [r3, #28]
 8003482:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	492e      	ldr	r1, [pc, #184]	@ (8003544 <HAL_RCC_ClockConfig+0x358>)
 800348c:	4313      	orrs	r3, r2
 800348e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0310 	and.w	r3, r3, #16
 8003498:	2b00      	cmp	r3, #0
 800349a:	d010      	beq.n	80034be <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	699a      	ldr	r2, [r3, #24]
 80034a0:	4b28      	ldr	r3, [pc, #160]	@ (8003544 <HAL_RCC_ClockConfig+0x358>)
 80034a2:	69db      	ldr	r3, [r3, #28]
 80034a4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d208      	bcs.n	80034be <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80034ac:	4b25      	ldr	r3, [pc, #148]	@ (8003544 <HAL_RCC_ClockConfig+0x358>)
 80034ae:	69db      	ldr	r3, [r3, #28]
 80034b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	4922      	ldr	r1, [pc, #136]	@ (8003544 <HAL_RCC_ClockConfig+0x358>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0320 	and.w	r3, r3, #32
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d010      	beq.n	80034ec <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	69da      	ldr	r2, [r3, #28]
 80034ce:	4b1d      	ldr	r3, [pc, #116]	@ (8003544 <HAL_RCC_ClockConfig+0x358>)
 80034d0:	6a1b      	ldr	r3, [r3, #32]
 80034d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d208      	bcs.n	80034ec <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80034da:	4b1a      	ldr	r3, [pc, #104]	@ (8003544 <HAL_RCC_ClockConfig+0x358>)
 80034dc:	6a1b      	ldr	r3, [r3, #32]
 80034de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	69db      	ldr	r3, [r3, #28]
 80034e6:	4917      	ldr	r1, [pc, #92]	@ (8003544 <HAL_RCC_ClockConfig+0x358>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80034ec:	f000 f834 	bl	8003558 <HAL_RCC_GetSysClockFreq>
 80034f0:	4602      	mov	r2, r0
 80034f2:	4b14      	ldr	r3, [pc, #80]	@ (8003544 <HAL_RCC_ClockConfig+0x358>)
 80034f4:	699b      	ldr	r3, [r3, #24]
 80034f6:	0a1b      	lsrs	r3, r3, #8
 80034f8:	f003 030f 	and.w	r3, r3, #15
 80034fc:	4912      	ldr	r1, [pc, #72]	@ (8003548 <HAL_RCC_ClockConfig+0x35c>)
 80034fe:	5ccb      	ldrb	r3, [r1, r3]
 8003500:	f003 031f 	and.w	r3, r3, #31
 8003504:	fa22 f303 	lsr.w	r3, r2, r3
 8003508:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800350a:	4b0e      	ldr	r3, [pc, #56]	@ (8003544 <HAL_RCC_ClockConfig+0x358>)
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	f003 030f 	and.w	r3, r3, #15
 8003512:	4a0d      	ldr	r2, [pc, #52]	@ (8003548 <HAL_RCC_ClockConfig+0x35c>)
 8003514:	5cd3      	ldrb	r3, [r2, r3]
 8003516:	f003 031f 	and.w	r3, r3, #31
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	fa22 f303 	lsr.w	r3, r2, r3
 8003520:	4a0a      	ldr	r2, [pc, #40]	@ (800354c <HAL_RCC_ClockConfig+0x360>)
 8003522:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003524:	4a0a      	ldr	r2, [pc, #40]	@ (8003550 <HAL_RCC_ClockConfig+0x364>)
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800352a:	4b0a      	ldr	r3, [pc, #40]	@ (8003554 <HAL_RCC_ClockConfig+0x368>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4618      	mov	r0, r3
 8003530:	f7fe f850 	bl	80015d4 <HAL_InitTick>
 8003534:	4603      	mov	r3, r0
 8003536:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003538:	7bfb      	ldrb	r3, [r7, #15]
}
 800353a:	4618      	mov	r0, r3
 800353c:	3718      	adds	r7, #24
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	58024400 	.word	0x58024400
 8003548:	080095b8 	.word	0x080095b8
 800354c:	24000008 	.word	0x24000008
 8003550:	24000004 	.word	0x24000004
 8003554:	2400000c 	.word	0x2400000c

08003558 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003558:	b480      	push	{r7}
 800355a:	b089      	sub	sp, #36	@ 0x24
 800355c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800355e:	4bb3      	ldr	r3, [pc, #716]	@ (800382c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003566:	2b18      	cmp	r3, #24
 8003568:	f200 8155 	bhi.w	8003816 <HAL_RCC_GetSysClockFreq+0x2be>
 800356c:	a201      	add	r2, pc, #4	@ (adr r2, 8003574 <HAL_RCC_GetSysClockFreq+0x1c>)
 800356e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003572:	bf00      	nop
 8003574:	080035d9 	.word	0x080035d9
 8003578:	08003817 	.word	0x08003817
 800357c:	08003817 	.word	0x08003817
 8003580:	08003817 	.word	0x08003817
 8003584:	08003817 	.word	0x08003817
 8003588:	08003817 	.word	0x08003817
 800358c:	08003817 	.word	0x08003817
 8003590:	08003817 	.word	0x08003817
 8003594:	080035ff 	.word	0x080035ff
 8003598:	08003817 	.word	0x08003817
 800359c:	08003817 	.word	0x08003817
 80035a0:	08003817 	.word	0x08003817
 80035a4:	08003817 	.word	0x08003817
 80035a8:	08003817 	.word	0x08003817
 80035ac:	08003817 	.word	0x08003817
 80035b0:	08003817 	.word	0x08003817
 80035b4:	08003605 	.word	0x08003605
 80035b8:	08003817 	.word	0x08003817
 80035bc:	08003817 	.word	0x08003817
 80035c0:	08003817 	.word	0x08003817
 80035c4:	08003817 	.word	0x08003817
 80035c8:	08003817 	.word	0x08003817
 80035cc:	08003817 	.word	0x08003817
 80035d0:	08003817 	.word	0x08003817
 80035d4:	0800360b 	.word	0x0800360b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80035d8:	4b94      	ldr	r3, [pc, #592]	@ (800382c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0320 	and.w	r3, r3, #32
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d009      	beq.n	80035f8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80035e4:	4b91      	ldr	r3, [pc, #580]	@ (800382c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	08db      	lsrs	r3, r3, #3
 80035ea:	f003 0303 	and.w	r3, r3, #3
 80035ee:	4a90      	ldr	r2, [pc, #576]	@ (8003830 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80035f0:	fa22 f303 	lsr.w	r3, r2, r3
 80035f4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80035f6:	e111      	b.n	800381c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80035f8:	4b8d      	ldr	r3, [pc, #564]	@ (8003830 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80035fa:	61bb      	str	r3, [r7, #24]
      break;
 80035fc:	e10e      	b.n	800381c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80035fe:	4b8d      	ldr	r3, [pc, #564]	@ (8003834 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003600:	61bb      	str	r3, [r7, #24]
      break;
 8003602:	e10b      	b.n	800381c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003604:	4b8c      	ldr	r3, [pc, #560]	@ (8003838 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003606:	61bb      	str	r3, [r7, #24]
      break;
 8003608:	e108      	b.n	800381c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800360a:	4b88      	ldr	r3, [pc, #544]	@ (800382c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800360c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800360e:	f003 0303 	and.w	r3, r3, #3
 8003612:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003614:	4b85      	ldr	r3, [pc, #532]	@ (800382c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003618:	091b      	lsrs	r3, r3, #4
 800361a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800361e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003620:	4b82      	ldr	r3, [pc, #520]	@ (800382c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003624:	f003 0301 	and.w	r3, r3, #1
 8003628:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800362a:	4b80      	ldr	r3, [pc, #512]	@ (800382c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800362c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800362e:	08db      	lsrs	r3, r3, #3
 8003630:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003634:	68fa      	ldr	r2, [r7, #12]
 8003636:	fb02 f303 	mul.w	r3, r2, r3
 800363a:	ee07 3a90 	vmov	s15, r3
 800363e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003642:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	2b00      	cmp	r3, #0
 800364a:	f000 80e1 	beq.w	8003810 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	2b02      	cmp	r3, #2
 8003652:	f000 8083 	beq.w	800375c <HAL_RCC_GetSysClockFreq+0x204>
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	2b02      	cmp	r3, #2
 800365a:	f200 80a1 	bhi.w	80037a0 <HAL_RCC_GetSysClockFreq+0x248>
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d003      	beq.n	800366c <HAL_RCC_GetSysClockFreq+0x114>
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d056      	beq.n	8003718 <HAL_RCC_GetSysClockFreq+0x1c0>
 800366a:	e099      	b.n	80037a0 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800366c:	4b6f      	ldr	r3, [pc, #444]	@ (800382c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0320 	and.w	r3, r3, #32
 8003674:	2b00      	cmp	r3, #0
 8003676:	d02d      	beq.n	80036d4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003678:	4b6c      	ldr	r3, [pc, #432]	@ (800382c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	08db      	lsrs	r3, r3, #3
 800367e:	f003 0303 	and.w	r3, r3, #3
 8003682:	4a6b      	ldr	r2, [pc, #428]	@ (8003830 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003684:	fa22 f303 	lsr.w	r3, r2, r3
 8003688:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	ee07 3a90 	vmov	s15, r3
 8003690:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	ee07 3a90 	vmov	s15, r3
 800369a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800369e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036a2:	4b62      	ldr	r3, [pc, #392]	@ (800382c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036aa:	ee07 3a90 	vmov	s15, r3
 80036ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80036b6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800383c <HAL_RCC_GetSysClockFreq+0x2e4>
 80036ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80036c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036ce:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80036d2:	e087      	b.n	80037e4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	ee07 3a90 	vmov	s15, r3
 80036da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036de:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003840 <HAL_RCC_GetSysClockFreq+0x2e8>
 80036e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036e6:	4b51      	ldr	r3, [pc, #324]	@ (800382c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036ee:	ee07 3a90 	vmov	s15, r3
 80036f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80036fa:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800383c <HAL_RCC_GetSysClockFreq+0x2e4>
 80036fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003702:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003706:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800370a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800370e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003712:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003716:	e065      	b.n	80037e4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	ee07 3a90 	vmov	s15, r3
 800371e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003722:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003844 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003726:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800372a:	4b40      	ldr	r3, [pc, #256]	@ (800382c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800372c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800372e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003732:	ee07 3a90 	vmov	s15, r3
 8003736:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800373a:	ed97 6a02 	vldr	s12, [r7, #8]
 800373e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800383c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003742:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003746:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800374a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800374e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003752:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003756:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800375a:	e043      	b.n	80037e4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	ee07 3a90 	vmov	s15, r3
 8003762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003766:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003848 <HAL_RCC_GetSysClockFreq+0x2f0>
 800376a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800376e:	4b2f      	ldr	r3, [pc, #188]	@ (800382c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003772:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003776:	ee07 3a90 	vmov	s15, r3
 800377a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800377e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003782:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800383c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003786:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800378a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800378e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003792:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800379a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800379e:	e021      	b.n	80037e4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	ee07 3a90 	vmov	s15, r3
 80037a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037aa:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003844 <HAL_RCC_GetSysClockFreq+0x2ec>
 80037ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037b2:	4b1e      	ldr	r3, [pc, #120]	@ (800382c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037ba:	ee07 3a90 	vmov	s15, r3
 80037be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80037c6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800383c <HAL_RCC_GetSysClockFreq+0x2e4>
 80037ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80037d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80037e2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80037e4:	4b11      	ldr	r3, [pc, #68]	@ (800382c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037e8:	0a5b      	lsrs	r3, r3, #9
 80037ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80037ee:	3301      	adds	r3, #1
 80037f0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	ee07 3a90 	vmov	s15, r3
 80037f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80037fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8003800:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003804:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003808:	ee17 3a90 	vmov	r3, s15
 800380c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800380e:	e005      	b.n	800381c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003810:	2300      	movs	r3, #0
 8003812:	61bb      	str	r3, [r7, #24]
      break;
 8003814:	e002      	b.n	800381c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003816:	4b07      	ldr	r3, [pc, #28]	@ (8003834 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003818:	61bb      	str	r3, [r7, #24]
      break;
 800381a:	bf00      	nop
  }

  return sysclockfreq;
 800381c:	69bb      	ldr	r3, [r7, #24]
}
 800381e:	4618      	mov	r0, r3
 8003820:	3724      	adds	r7, #36	@ 0x24
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	58024400 	.word	0x58024400
 8003830:	03d09000 	.word	0x03d09000
 8003834:	003d0900 	.word	0x003d0900
 8003838:	007a1200 	.word	0x007a1200
 800383c:	46000000 	.word	0x46000000
 8003840:	4c742400 	.word	0x4c742400
 8003844:	4a742400 	.word	0x4a742400
 8003848:	4af42400 	.word	0x4af42400

0800384c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003852:	f7ff fe81 	bl	8003558 <HAL_RCC_GetSysClockFreq>
 8003856:	4602      	mov	r2, r0
 8003858:	4b10      	ldr	r3, [pc, #64]	@ (800389c <HAL_RCC_GetHCLKFreq+0x50>)
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	0a1b      	lsrs	r3, r3, #8
 800385e:	f003 030f 	and.w	r3, r3, #15
 8003862:	490f      	ldr	r1, [pc, #60]	@ (80038a0 <HAL_RCC_GetHCLKFreq+0x54>)
 8003864:	5ccb      	ldrb	r3, [r1, r3]
 8003866:	f003 031f 	and.w	r3, r3, #31
 800386a:	fa22 f303 	lsr.w	r3, r2, r3
 800386e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003870:	4b0a      	ldr	r3, [pc, #40]	@ (800389c <HAL_RCC_GetHCLKFreq+0x50>)
 8003872:	699b      	ldr	r3, [r3, #24]
 8003874:	f003 030f 	and.w	r3, r3, #15
 8003878:	4a09      	ldr	r2, [pc, #36]	@ (80038a0 <HAL_RCC_GetHCLKFreq+0x54>)
 800387a:	5cd3      	ldrb	r3, [r2, r3]
 800387c:	f003 031f 	and.w	r3, r3, #31
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	fa22 f303 	lsr.w	r3, r2, r3
 8003886:	4a07      	ldr	r2, [pc, #28]	@ (80038a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8003888:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800388a:	4a07      	ldr	r2, [pc, #28]	@ (80038a8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003890:	4b04      	ldr	r3, [pc, #16]	@ (80038a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8003892:	681b      	ldr	r3, [r3, #0]
}
 8003894:	4618      	mov	r0, r3
 8003896:	3708      	adds	r7, #8
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	58024400 	.word	0x58024400
 80038a0:	080095b8 	.word	0x080095b8
 80038a4:	24000008 	.word	0x24000008
 80038a8:	24000004 	.word	0x24000004

080038ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80038b0:	f7ff ffcc 	bl	800384c <HAL_RCC_GetHCLKFreq>
 80038b4:	4602      	mov	r2, r0
 80038b6:	4b06      	ldr	r3, [pc, #24]	@ (80038d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038b8:	69db      	ldr	r3, [r3, #28]
 80038ba:	091b      	lsrs	r3, r3, #4
 80038bc:	f003 0307 	and.w	r3, r3, #7
 80038c0:	4904      	ldr	r1, [pc, #16]	@ (80038d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80038c2:	5ccb      	ldrb	r3, [r1, r3]
 80038c4:	f003 031f 	and.w	r3, r3, #31
 80038c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	58024400 	.word	0x58024400
 80038d4:	080095b8 	.word	0x080095b8

080038d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80038dc:	f7ff ffb6 	bl	800384c <HAL_RCC_GetHCLKFreq>
 80038e0:	4602      	mov	r2, r0
 80038e2:	4b06      	ldr	r3, [pc, #24]	@ (80038fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80038e4:	69db      	ldr	r3, [r3, #28]
 80038e6:	0a1b      	lsrs	r3, r3, #8
 80038e8:	f003 0307 	and.w	r3, r3, #7
 80038ec:	4904      	ldr	r1, [pc, #16]	@ (8003900 <HAL_RCC_GetPCLK2Freq+0x28>)
 80038ee:	5ccb      	ldrb	r3, [r1, r3]
 80038f0:	f003 031f 	and.w	r3, r3, #31
 80038f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	58024400 	.word	0x58024400
 8003900:	080095b8 	.word	0x080095b8

08003904 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003904:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003908:	b0ca      	sub	sp, #296	@ 0x128
 800390a:	af00      	add	r7, sp, #0
 800390c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003910:	2300      	movs	r3, #0
 8003912:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003916:	2300      	movs	r3, #0
 8003918:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800391c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003924:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003928:	2500      	movs	r5, #0
 800392a:	ea54 0305 	orrs.w	r3, r4, r5
 800392e:	d049      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003930:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003934:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003936:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800393a:	d02f      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800393c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003940:	d828      	bhi.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003942:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003946:	d01a      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003948:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800394c:	d822      	bhi.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800394e:	2b00      	cmp	r3, #0
 8003950:	d003      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003952:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003956:	d007      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003958:	e01c      	b.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800395a:	4bb8      	ldr	r3, [pc, #736]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800395c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800395e:	4ab7      	ldr	r2, [pc, #732]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003960:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003964:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003966:	e01a      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003968:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800396c:	3308      	adds	r3, #8
 800396e:	2102      	movs	r1, #2
 8003970:	4618      	mov	r0, r3
 8003972:	f001 fc8f 	bl	8005294 <RCCEx_PLL2_Config>
 8003976:	4603      	mov	r3, r0
 8003978:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800397c:	e00f      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800397e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003982:	3328      	adds	r3, #40	@ 0x28
 8003984:	2102      	movs	r1, #2
 8003986:	4618      	mov	r0, r3
 8003988:	f001 fd36 	bl	80053f8 <RCCEx_PLL3_Config>
 800398c:	4603      	mov	r3, r0
 800398e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003992:	e004      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800399a:	e000      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800399c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800399e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d10a      	bne.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80039a6:	4ba5      	ldr	r3, [pc, #660]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039aa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80039ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80039b4:	4aa1      	ldr	r2, [pc, #644]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039b6:	430b      	orrs	r3, r1
 80039b8:	6513      	str	r3, [r2, #80]	@ 0x50
 80039ba:	e003      	b.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80039c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039cc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80039d0:	f04f 0900 	mov.w	r9, #0
 80039d4:	ea58 0309 	orrs.w	r3, r8, r9
 80039d8:	d047      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80039da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039e0:	2b04      	cmp	r3, #4
 80039e2:	d82a      	bhi.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80039e4:	a201      	add	r2, pc, #4	@ (adr r2, 80039ec <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80039e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ea:	bf00      	nop
 80039ec:	08003a01 	.word	0x08003a01
 80039f0:	08003a0f 	.word	0x08003a0f
 80039f4:	08003a25 	.word	0x08003a25
 80039f8:	08003a43 	.word	0x08003a43
 80039fc:	08003a43 	.word	0x08003a43
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a00:	4b8e      	ldr	r3, [pc, #568]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a04:	4a8d      	ldr	r2, [pc, #564]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a0c:	e01a      	b.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a12:	3308      	adds	r3, #8
 8003a14:	2100      	movs	r1, #0
 8003a16:	4618      	mov	r0, r3
 8003a18:	f001 fc3c 	bl	8005294 <RCCEx_PLL2_Config>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a22:	e00f      	b.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a28:	3328      	adds	r3, #40	@ 0x28
 8003a2a:	2100      	movs	r1, #0
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f001 fce3 	bl	80053f8 <RCCEx_PLL3_Config>
 8003a32:	4603      	mov	r3, r0
 8003a34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a38:	e004      	b.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a40:	e000      	b.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003a42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d10a      	bne.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a4c:	4b7b      	ldr	r3, [pc, #492]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a50:	f023 0107 	bic.w	r1, r3, #7
 8003a54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a5a:	4a78      	ldr	r2, [pc, #480]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a5c:	430b      	orrs	r3, r1
 8003a5e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003a60:	e003      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a72:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003a76:	f04f 0b00 	mov.w	fp, #0
 8003a7a:	ea5a 030b 	orrs.w	r3, sl, fp
 8003a7e:	d04c      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a8a:	d030      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003a8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a90:	d829      	bhi.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003a92:	2bc0      	cmp	r3, #192	@ 0xc0
 8003a94:	d02d      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003a96:	2bc0      	cmp	r3, #192	@ 0xc0
 8003a98:	d825      	bhi.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003a9a:	2b80      	cmp	r3, #128	@ 0x80
 8003a9c:	d018      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003a9e:	2b80      	cmp	r3, #128	@ 0x80
 8003aa0:	d821      	bhi.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d002      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003aa6:	2b40      	cmp	r3, #64	@ 0x40
 8003aa8:	d007      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003aaa:	e01c      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003aac:	4b63      	ldr	r3, [pc, #396]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ab0:	4a62      	ldr	r2, [pc, #392]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ab2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ab6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003ab8:	e01c      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003abe:	3308      	adds	r3, #8
 8003ac0:	2100      	movs	r1, #0
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f001 fbe6 	bl	8005294 <RCCEx_PLL2_Config>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003ace:	e011      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ad4:	3328      	adds	r3, #40	@ 0x28
 8003ad6:	2100      	movs	r1, #0
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f001 fc8d 	bl	80053f8 <RCCEx_PLL3_Config>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003ae4:	e006      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003aec:	e002      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003aee:	bf00      	nop
 8003af0:	e000      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003af2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003af4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d10a      	bne.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003afc:	4b4f      	ldr	r3, [pc, #316]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003afe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b00:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003b04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b0a:	4a4c      	ldr	r2, [pc, #304]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b0c:	430b      	orrs	r3, r1
 8003b0e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003b10:	e003      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b22:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003b26:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003b30:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003b34:	460b      	mov	r3, r1
 8003b36:	4313      	orrs	r3, r2
 8003b38:	d053      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b3e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003b42:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003b46:	d035      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003b48:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003b4c:	d82e      	bhi.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003b4e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003b52:	d031      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003b54:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003b58:	d828      	bhi.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003b5a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b5e:	d01a      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003b60:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b64:	d822      	bhi.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d003      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003b6a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b6e:	d007      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003b70:	e01c      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b72:	4b32      	ldr	r3, [pc, #200]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b76:	4a31      	ldr	r2, [pc, #196]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003b7e:	e01c      	b.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b84:	3308      	adds	r3, #8
 8003b86:	2100      	movs	r1, #0
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f001 fb83 	bl	8005294 <RCCEx_PLL2_Config>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003b94:	e011      	b.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b9a:	3328      	adds	r3, #40	@ 0x28
 8003b9c:	2100      	movs	r1, #0
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f001 fc2a 	bl	80053f8 <RCCEx_PLL3_Config>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003baa:	e006      	b.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003bb2:	e002      	b.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003bb4:	bf00      	nop
 8003bb6:	e000      	b.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003bb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d10b      	bne.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003bc2:	4b1e      	ldr	r3, [pc, #120]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003bc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bc6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003bd2:	4a1a      	ldr	r2, [pc, #104]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003bd4:	430b      	orrs	r3, r1
 8003bd6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003bd8:	e003      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bde:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bea:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003bee:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003bf8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	d056      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c06:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003c0a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003c0e:	d038      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003c10:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003c14:	d831      	bhi.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003c16:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003c1a:	d034      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003c1c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003c20:	d82b      	bhi.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003c22:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c26:	d01d      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003c28:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c2c:	d825      	bhi.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d006      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003c32:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c36:	d00a      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003c38:	e01f      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003c3a:	bf00      	nop
 8003c3c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c40:	4ba2      	ldr	r3, [pc, #648]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c44:	4aa1      	ldr	r2, [pc, #644]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c4c:	e01c      	b.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c52:	3308      	adds	r3, #8
 8003c54:	2100      	movs	r1, #0
 8003c56:	4618      	mov	r0, r3
 8003c58:	f001 fb1c 	bl	8005294 <RCCEx_PLL2_Config>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003c62:	e011      	b.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c68:	3328      	adds	r3, #40	@ 0x28
 8003c6a:	2100      	movs	r1, #0
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f001 fbc3 	bl	80053f8 <RCCEx_PLL3_Config>
 8003c72:	4603      	mov	r3, r0
 8003c74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c78:	e006      	b.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c80:	e002      	b.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003c82:	bf00      	nop
 8003c84:	e000      	b.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003c86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d10b      	bne.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003c90:	4b8e      	ldr	r3, [pc, #568]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c94:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003c98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c9c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003ca0:	4a8a      	ldr	r2, [pc, #552]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ca2:	430b      	orrs	r3, r1
 8003ca4:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ca6:	e003      	b.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ca8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003cbc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003cc6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003cca:	460b      	mov	r3, r1
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	d03a      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003cd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cd6:	2b30      	cmp	r3, #48	@ 0x30
 8003cd8:	d01f      	beq.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003cda:	2b30      	cmp	r3, #48	@ 0x30
 8003cdc:	d819      	bhi.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003cde:	2b20      	cmp	r3, #32
 8003ce0:	d00c      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003ce2:	2b20      	cmp	r3, #32
 8003ce4:	d815      	bhi.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d019      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003cea:	2b10      	cmp	r3, #16
 8003cec:	d111      	bne.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cee:	4b77      	ldr	r3, [pc, #476]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cf2:	4a76      	ldr	r2, [pc, #472]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003cf4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cf8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003cfa:	e011      	b.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003cfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d00:	3308      	adds	r3, #8
 8003d02:	2102      	movs	r1, #2
 8003d04:	4618      	mov	r0, r3
 8003d06:	f001 fac5 	bl	8005294 <RCCEx_PLL2_Config>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003d10:	e006      	b.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d18:	e002      	b.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003d1a:	bf00      	nop
 8003d1c:	e000      	b.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003d1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d10a      	bne.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003d28:	4b68      	ldr	r3, [pc, #416]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d2c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d36:	4a65      	ldr	r2, [pc, #404]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d38:	430b      	orrs	r3, r1
 8003d3a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d3c:	e003      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003d46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d4e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003d52:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003d56:	2300      	movs	r3, #0
 8003d58:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003d5c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003d60:	460b      	mov	r3, r1
 8003d62:	4313      	orrs	r3, r2
 8003d64:	d051      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003d66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d6c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d70:	d035      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003d72:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d76:	d82e      	bhi.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003d78:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003d7c:	d031      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003d7e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003d82:	d828      	bhi.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003d84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d88:	d01a      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003d8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d8e:	d822      	bhi.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d003      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003d94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d98:	d007      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003d9a:	e01c      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d9c:	4b4b      	ldr	r3, [pc, #300]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da0:	4a4a      	ldr	r2, [pc, #296]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003da2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003da6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003da8:	e01c      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dae:	3308      	adds	r3, #8
 8003db0:	2100      	movs	r1, #0
 8003db2:	4618      	mov	r0, r3
 8003db4:	f001 fa6e 	bl	8005294 <RCCEx_PLL2_Config>
 8003db8:	4603      	mov	r3, r0
 8003dba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003dbe:	e011      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dc4:	3328      	adds	r3, #40	@ 0x28
 8003dc6:	2100      	movs	r1, #0
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f001 fb15 	bl	80053f8 <RCCEx_PLL3_Config>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003dd4:	e006      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ddc:	e002      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003dde:	bf00      	nop
 8003de0:	e000      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003de2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003de4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d10a      	bne.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003dec:	4b37      	ldr	r3, [pc, #220]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003dee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003df0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003df8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dfa:	4a34      	ldr	r2, [pc, #208]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003dfc:	430b      	orrs	r3, r1
 8003dfe:	6513      	str	r3, [r2, #80]	@ 0x50
 8003e00:	e003      	b.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e12:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003e16:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003e20:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003e24:	460b      	mov	r3, r1
 8003e26:	4313      	orrs	r3, r2
 8003e28:	d056      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e34:	d033      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003e36:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e3a:	d82c      	bhi.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003e3c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003e40:	d02f      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003e42:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003e46:	d826      	bhi.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003e48:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003e4c:	d02b      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003e4e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003e52:	d820      	bhi.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003e54:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003e58:	d012      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003e5a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003e5e:	d81a      	bhi.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d022      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003e64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e68:	d115      	bne.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e6e:	3308      	adds	r3, #8
 8003e70:	2101      	movs	r1, #1
 8003e72:	4618      	mov	r0, r3
 8003e74:	f001 fa0e 	bl	8005294 <RCCEx_PLL2_Config>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003e7e:	e015      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e84:	3328      	adds	r3, #40	@ 0x28
 8003e86:	2101      	movs	r1, #1
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f001 fab5 	bl	80053f8 <RCCEx_PLL3_Config>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003e94:	e00a      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e9c:	e006      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003e9e:	bf00      	nop
 8003ea0:	e004      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003ea2:	bf00      	nop
 8003ea4:	e002      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003ea6:	bf00      	nop
 8003ea8:	e000      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003eaa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003eac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d10d      	bne.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003eb4:	4b05      	ldr	r3, [pc, #20]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003eb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003eb8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003ebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ec0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ec2:	4a02      	ldr	r2, [pc, #8]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ec4:	430b      	orrs	r3, r1
 8003ec6:	6513      	str	r3, [r2, #80]	@ 0x50
 8003ec8:	e006      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003eca:	bf00      	nop
 8003ecc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ed0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ed4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003ee4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003ee8:	2300      	movs	r3, #0
 8003eea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003eee:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003ef2:	460b      	mov	r3, r1
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	d055      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003efc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003f00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f04:	d033      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003f06:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f0a:	d82c      	bhi.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f10:	d02f      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003f12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f16:	d826      	bhi.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003f18:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003f1c:	d02b      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003f1e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003f22:	d820      	bhi.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003f24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f28:	d012      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003f2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f2e:	d81a      	bhi.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d022      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003f34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f38:	d115      	bne.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f3e:	3308      	adds	r3, #8
 8003f40:	2101      	movs	r1, #1
 8003f42:	4618      	mov	r0, r3
 8003f44:	f001 f9a6 	bl	8005294 <RCCEx_PLL2_Config>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003f4e:	e015      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f54:	3328      	adds	r3, #40	@ 0x28
 8003f56:	2101      	movs	r1, #1
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f001 fa4d 	bl	80053f8 <RCCEx_PLL3_Config>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003f64:	e00a      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f6c:	e006      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003f6e:	bf00      	nop
 8003f70:	e004      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003f72:	bf00      	nop
 8003f74:	e002      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003f76:	bf00      	nop
 8003f78:	e000      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003f7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d10b      	bne.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003f84:	4ba3      	ldr	r3, [pc, #652]	@ (8004214 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f88:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003f8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f90:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003f94:	4a9f      	ldr	r2, [pc, #636]	@ (8004214 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f96:	430b      	orrs	r3, r1
 8003f98:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f9a:	e003      	b.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fa0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fac:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003fb0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003fba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003fbe:	460b      	mov	r3, r1
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	d037      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003fc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003fce:	d00e      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003fd0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003fd4:	d816      	bhi.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d018      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003fda:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003fde:	d111      	bne.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fe0:	4b8c      	ldr	r3, [pc, #560]	@ (8004214 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fe4:	4a8b      	ldr	r2, [pc, #556]	@ (8004214 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fe6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003fec:	e00f      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ff2:	3308      	adds	r3, #8
 8003ff4:	2101      	movs	r1, #1
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f001 f94c 	bl	8005294 <RCCEx_PLL2_Config>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004002:	e004      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800400a:	e000      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800400c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800400e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004012:	2b00      	cmp	r3, #0
 8004014:	d10a      	bne.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004016:	4b7f      	ldr	r3, [pc, #508]	@ (8004214 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004018:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800401a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800401e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004022:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004024:	4a7b      	ldr	r2, [pc, #492]	@ (8004214 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004026:	430b      	orrs	r3, r1
 8004028:	6513      	str	r3, [r2, #80]	@ 0x50
 800402a:	e003      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800402c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004030:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004034:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800403c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004040:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004044:	2300      	movs	r3, #0
 8004046:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800404a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800404e:	460b      	mov	r3, r1
 8004050:	4313      	orrs	r3, r2
 8004052:	d039      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004054:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004058:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800405a:	2b03      	cmp	r3, #3
 800405c:	d81c      	bhi.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800405e:	a201      	add	r2, pc, #4	@ (adr r2, 8004064 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004064:	080040a1 	.word	0x080040a1
 8004068:	08004075 	.word	0x08004075
 800406c:	08004083 	.word	0x08004083
 8004070:	080040a1 	.word	0x080040a1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004074:	4b67      	ldr	r3, [pc, #412]	@ (8004214 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004078:	4a66      	ldr	r2, [pc, #408]	@ (8004214 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800407a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800407e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004080:	e00f      	b.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004082:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004086:	3308      	adds	r3, #8
 8004088:	2102      	movs	r1, #2
 800408a:	4618      	mov	r0, r3
 800408c:	f001 f902 	bl	8005294 <RCCEx_PLL2_Config>
 8004090:	4603      	mov	r3, r0
 8004092:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004096:	e004      	b.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800409e:	e000      	b.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80040a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d10a      	bne.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80040aa:	4b5a      	ldr	r3, [pc, #360]	@ (8004214 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040ae:	f023 0103 	bic.w	r1, r3, #3
 80040b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040b8:	4a56      	ldr	r2, [pc, #344]	@ (8004214 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040ba:	430b      	orrs	r3, r1
 80040bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80040be:	e003      	b.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80040c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80040d4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80040d8:	2300      	movs	r3, #0
 80040da:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80040de:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80040e2:	460b      	mov	r3, r1
 80040e4:	4313      	orrs	r3, r2
 80040e6:	f000 809f 	beq.w	8004228 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040ea:	4b4b      	ldr	r3, [pc, #300]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a4a      	ldr	r2, [pc, #296]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80040f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040f4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80040f6:	f7fd fab7 	bl	8001668 <HAL_GetTick>
 80040fa:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80040fe:	e00b      	b.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004100:	f7fd fab2 	bl	8001668 <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	2b64      	cmp	r3, #100	@ 0x64
 800410e:	d903      	bls.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004110:	2303      	movs	r3, #3
 8004112:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004116:	e005      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004118:	4b3f      	ldr	r3, [pc, #252]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004120:	2b00      	cmp	r3, #0
 8004122:	d0ed      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004124:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004128:	2b00      	cmp	r3, #0
 800412a:	d179      	bne.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800412c:	4b39      	ldr	r3, [pc, #228]	@ (8004214 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800412e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004130:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004134:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004138:	4053      	eors	r3, r2
 800413a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800413e:	2b00      	cmp	r3, #0
 8004140:	d015      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004142:	4b34      	ldr	r3, [pc, #208]	@ (8004214 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004144:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004146:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800414a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800414e:	4b31      	ldr	r3, [pc, #196]	@ (8004214 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004150:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004152:	4a30      	ldr	r2, [pc, #192]	@ (8004214 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004154:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004158:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800415a:	4b2e      	ldr	r3, [pc, #184]	@ (8004214 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800415c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800415e:	4a2d      	ldr	r2, [pc, #180]	@ (8004214 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004160:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004164:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004166:	4a2b      	ldr	r2, [pc, #172]	@ (8004214 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004168:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800416c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800416e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004172:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004176:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800417a:	d118      	bne.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800417c:	f7fd fa74 	bl	8001668 <HAL_GetTick>
 8004180:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004184:	e00d      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004186:	f7fd fa6f 	bl	8001668 <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004190:	1ad2      	subs	r2, r2, r3
 8004192:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004196:	429a      	cmp	r2, r3
 8004198:	d903      	bls.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80041a0:	e005      	b.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80041a2:	4b1c      	ldr	r3, [pc, #112]	@ (8004214 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041a6:	f003 0302 	and.w	r3, r3, #2
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d0eb      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80041ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d129      	bne.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80041be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80041c6:	d10e      	bne.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80041c8:	4b12      	ldr	r3, [pc, #72]	@ (8004214 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041ca:	691b      	ldr	r3, [r3, #16]
 80041cc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80041d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80041d8:	091a      	lsrs	r2, r3, #4
 80041da:	4b10      	ldr	r3, [pc, #64]	@ (800421c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80041dc:	4013      	ands	r3, r2
 80041de:	4a0d      	ldr	r2, [pc, #52]	@ (8004214 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041e0:	430b      	orrs	r3, r1
 80041e2:	6113      	str	r3, [r2, #16]
 80041e4:	e005      	b.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80041e6:	4b0b      	ldr	r3, [pc, #44]	@ (8004214 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	4a0a      	ldr	r2, [pc, #40]	@ (8004214 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041ec:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80041f0:	6113      	str	r3, [r2, #16]
 80041f2:	4b08      	ldr	r3, [pc, #32]	@ (8004214 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041f4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80041f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041fa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80041fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004202:	4a04      	ldr	r2, [pc, #16]	@ (8004214 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004204:	430b      	orrs	r3, r1
 8004206:	6713      	str	r3, [r2, #112]	@ 0x70
 8004208:	e00e      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800420a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800420e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8004212:	e009      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004214:	58024400 	.word	0x58024400
 8004218:	58024800 	.word	0x58024800
 800421c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004220:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004224:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004228:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800422c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004230:	f002 0301 	and.w	r3, r2, #1
 8004234:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004238:	2300      	movs	r3, #0
 800423a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800423e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004242:	460b      	mov	r3, r1
 8004244:	4313      	orrs	r3, r2
 8004246:	f000 8089 	beq.w	800435c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800424a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800424e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004250:	2b28      	cmp	r3, #40	@ 0x28
 8004252:	d86b      	bhi.n	800432c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004254:	a201      	add	r2, pc, #4	@ (adr r2, 800425c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800425a:	bf00      	nop
 800425c:	08004335 	.word	0x08004335
 8004260:	0800432d 	.word	0x0800432d
 8004264:	0800432d 	.word	0x0800432d
 8004268:	0800432d 	.word	0x0800432d
 800426c:	0800432d 	.word	0x0800432d
 8004270:	0800432d 	.word	0x0800432d
 8004274:	0800432d 	.word	0x0800432d
 8004278:	0800432d 	.word	0x0800432d
 800427c:	08004301 	.word	0x08004301
 8004280:	0800432d 	.word	0x0800432d
 8004284:	0800432d 	.word	0x0800432d
 8004288:	0800432d 	.word	0x0800432d
 800428c:	0800432d 	.word	0x0800432d
 8004290:	0800432d 	.word	0x0800432d
 8004294:	0800432d 	.word	0x0800432d
 8004298:	0800432d 	.word	0x0800432d
 800429c:	08004317 	.word	0x08004317
 80042a0:	0800432d 	.word	0x0800432d
 80042a4:	0800432d 	.word	0x0800432d
 80042a8:	0800432d 	.word	0x0800432d
 80042ac:	0800432d 	.word	0x0800432d
 80042b0:	0800432d 	.word	0x0800432d
 80042b4:	0800432d 	.word	0x0800432d
 80042b8:	0800432d 	.word	0x0800432d
 80042bc:	08004335 	.word	0x08004335
 80042c0:	0800432d 	.word	0x0800432d
 80042c4:	0800432d 	.word	0x0800432d
 80042c8:	0800432d 	.word	0x0800432d
 80042cc:	0800432d 	.word	0x0800432d
 80042d0:	0800432d 	.word	0x0800432d
 80042d4:	0800432d 	.word	0x0800432d
 80042d8:	0800432d 	.word	0x0800432d
 80042dc:	08004335 	.word	0x08004335
 80042e0:	0800432d 	.word	0x0800432d
 80042e4:	0800432d 	.word	0x0800432d
 80042e8:	0800432d 	.word	0x0800432d
 80042ec:	0800432d 	.word	0x0800432d
 80042f0:	0800432d 	.word	0x0800432d
 80042f4:	0800432d 	.word	0x0800432d
 80042f8:	0800432d 	.word	0x0800432d
 80042fc:	08004335 	.word	0x08004335
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004300:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004304:	3308      	adds	r3, #8
 8004306:	2101      	movs	r1, #1
 8004308:	4618      	mov	r0, r3
 800430a:	f000 ffc3 	bl	8005294 <RCCEx_PLL2_Config>
 800430e:	4603      	mov	r3, r0
 8004310:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004314:	e00f      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004316:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800431a:	3328      	adds	r3, #40	@ 0x28
 800431c:	2101      	movs	r1, #1
 800431e:	4618      	mov	r0, r3
 8004320:	f001 f86a 	bl	80053f8 <RCCEx_PLL3_Config>
 8004324:	4603      	mov	r3, r0
 8004326:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800432a:	e004      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004332:	e000      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004334:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004336:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800433a:	2b00      	cmp	r3, #0
 800433c:	d10a      	bne.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800433e:	4bbf      	ldr	r3, [pc, #764]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004340:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004342:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004346:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800434a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800434c:	4abb      	ldr	r2, [pc, #748]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800434e:	430b      	orrs	r3, r1
 8004350:	6553      	str	r3, [r2, #84]	@ 0x54
 8004352:	e003      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004354:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004358:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800435c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004364:	f002 0302 	and.w	r3, r2, #2
 8004368:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800436c:	2300      	movs	r3, #0
 800436e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004372:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004376:	460b      	mov	r3, r1
 8004378:	4313      	orrs	r3, r2
 800437a:	d041      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800437c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004380:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004382:	2b05      	cmp	r3, #5
 8004384:	d824      	bhi.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004386:	a201      	add	r2, pc, #4	@ (adr r2, 800438c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800438c:	080043d9 	.word	0x080043d9
 8004390:	080043a5 	.word	0x080043a5
 8004394:	080043bb 	.word	0x080043bb
 8004398:	080043d9 	.word	0x080043d9
 800439c:	080043d9 	.word	0x080043d9
 80043a0:	080043d9 	.word	0x080043d9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80043a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043a8:	3308      	adds	r3, #8
 80043aa:	2101      	movs	r1, #1
 80043ac:	4618      	mov	r0, r3
 80043ae:	f000 ff71 	bl	8005294 <RCCEx_PLL2_Config>
 80043b2:	4603      	mov	r3, r0
 80043b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80043b8:	e00f      	b.n	80043da <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80043ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043be:	3328      	adds	r3, #40	@ 0x28
 80043c0:	2101      	movs	r1, #1
 80043c2:	4618      	mov	r0, r3
 80043c4:	f001 f818 	bl	80053f8 <RCCEx_PLL3_Config>
 80043c8:	4603      	mov	r3, r0
 80043ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80043ce:	e004      	b.n	80043da <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80043d6:	e000      	b.n	80043da <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80043d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d10a      	bne.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80043e2:	4b96      	ldr	r3, [pc, #600]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80043e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043e6:	f023 0107 	bic.w	r1, r3, #7
 80043ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80043f0:	4a92      	ldr	r2, [pc, #584]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80043f2:	430b      	orrs	r3, r1
 80043f4:	6553      	str	r3, [r2, #84]	@ 0x54
 80043f6:	e003      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004400:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004408:	f002 0304 	and.w	r3, r2, #4
 800440c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004410:	2300      	movs	r3, #0
 8004412:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004416:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800441a:	460b      	mov	r3, r1
 800441c:	4313      	orrs	r3, r2
 800441e:	d044      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004420:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004424:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004428:	2b05      	cmp	r3, #5
 800442a:	d825      	bhi.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800442c:	a201      	add	r2, pc, #4	@ (adr r2, 8004434 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800442e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004432:	bf00      	nop
 8004434:	08004481 	.word	0x08004481
 8004438:	0800444d 	.word	0x0800444d
 800443c:	08004463 	.word	0x08004463
 8004440:	08004481 	.word	0x08004481
 8004444:	08004481 	.word	0x08004481
 8004448:	08004481 	.word	0x08004481
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800444c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004450:	3308      	adds	r3, #8
 8004452:	2101      	movs	r1, #1
 8004454:	4618      	mov	r0, r3
 8004456:	f000 ff1d 	bl	8005294 <RCCEx_PLL2_Config>
 800445a:	4603      	mov	r3, r0
 800445c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004460:	e00f      	b.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004462:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004466:	3328      	adds	r3, #40	@ 0x28
 8004468:	2101      	movs	r1, #1
 800446a:	4618      	mov	r0, r3
 800446c:	f000 ffc4 	bl	80053f8 <RCCEx_PLL3_Config>
 8004470:	4603      	mov	r3, r0
 8004472:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004476:	e004      	b.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800447e:	e000      	b.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004480:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004482:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004486:	2b00      	cmp	r3, #0
 8004488:	d10b      	bne.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800448a:	4b6c      	ldr	r3, [pc, #432]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800448c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800448e:	f023 0107 	bic.w	r1, r3, #7
 8004492:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004496:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800449a:	4a68      	ldr	r2, [pc, #416]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800449c:	430b      	orrs	r3, r1
 800449e:	6593      	str	r3, [r2, #88]	@ 0x58
 80044a0:	e003      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80044aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b2:	f002 0320 	and.w	r3, r2, #32
 80044b6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80044ba:	2300      	movs	r3, #0
 80044bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80044c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80044c4:	460b      	mov	r3, r1
 80044c6:	4313      	orrs	r3, r2
 80044c8:	d055      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80044ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80044d6:	d033      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80044d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80044dc:	d82c      	bhi.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80044de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044e2:	d02f      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80044e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044e8:	d826      	bhi.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80044ea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80044ee:	d02b      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80044f0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80044f4:	d820      	bhi.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80044f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80044fa:	d012      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80044fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004500:	d81a      	bhi.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004502:	2b00      	cmp	r3, #0
 8004504:	d022      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004506:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800450a:	d115      	bne.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800450c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004510:	3308      	adds	r3, #8
 8004512:	2100      	movs	r1, #0
 8004514:	4618      	mov	r0, r3
 8004516:	f000 febd 	bl	8005294 <RCCEx_PLL2_Config>
 800451a:	4603      	mov	r3, r0
 800451c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004520:	e015      	b.n	800454e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004522:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004526:	3328      	adds	r3, #40	@ 0x28
 8004528:	2102      	movs	r1, #2
 800452a:	4618      	mov	r0, r3
 800452c:	f000 ff64 	bl	80053f8 <RCCEx_PLL3_Config>
 8004530:	4603      	mov	r3, r0
 8004532:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004536:	e00a      	b.n	800454e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800453e:	e006      	b.n	800454e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004540:	bf00      	nop
 8004542:	e004      	b.n	800454e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004544:	bf00      	nop
 8004546:	e002      	b.n	800454e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004548:	bf00      	nop
 800454a:	e000      	b.n	800454e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800454c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800454e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004552:	2b00      	cmp	r3, #0
 8004554:	d10b      	bne.n	800456e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004556:	4b39      	ldr	r3, [pc, #228]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004558:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800455a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800455e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004562:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004566:	4a35      	ldr	r2, [pc, #212]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004568:	430b      	orrs	r3, r1
 800456a:	6553      	str	r3, [r2, #84]	@ 0x54
 800456c:	e003      	b.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800456e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004572:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004576:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800457a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800457e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004582:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004586:	2300      	movs	r3, #0
 8004588:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800458c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004590:	460b      	mov	r3, r1
 8004592:	4313      	orrs	r3, r2
 8004594:	d058      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004596:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800459a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800459e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80045a2:	d033      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80045a4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80045a8:	d82c      	bhi.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80045aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045ae:	d02f      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80045b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045b4:	d826      	bhi.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80045b6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80045ba:	d02b      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80045bc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80045c0:	d820      	bhi.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80045c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045c6:	d012      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80045c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045cc:	d81a      	bhi.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d022      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80045d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045d6:	d115      	bne.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80045d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045dc:	3308      	adds	r3, #8
 80045de:	2100      	movs	r1, #0
 80045e0:	4618      	mov	r0, r3
 80045e2:	f000 fe57 	bl	8005294 <RCCEx_PLL2_Config>
 80045e6:	4603      	mov	r3, r0
 80045e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80045ec:	e015      	b.n	800461a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80045ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045f2:	3328      	adds	r3, #40	@ 0x28
 80045f4:	2102      	movs	r1, #2
 80045f6:	4618      	mov	r0, r3
 80045f8:	f000 fefe 	bl	80053f8 <RCCEx_PLL3_Config>
 80045fc:	4603      	mov	r3, r0
 80045fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004602:	e00a      	b.n	800461a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800460a:	e006      	b.n	800461a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800460c:	bf00      	nop
 800460e:	e004      	b.n	800461a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004610:	bf00      	nop
 8004612:	e002      	b.n	800461a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004614:	bf00      	nop
 8004616:	e000      	b.n	800461a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004618:	bf00      	nop
    }

    if (ret == HAL_OK)
 800461a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800461e:	2b00      	cmp	r3, #0
 8004620:	d10e      	bne.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004622:	4b06      	ldr	r3, [pc, #24]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004624:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004626:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800462a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800462e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004632:	4a02      	ldr	r2, [pc, #8]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004634:	430b      	orrs	r3, r1
 8004636:	6593      	str	r3, [r2, #88]	@ 0x58
 8004638:	e006      	b.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800463a:	bf00      	nop
 800463c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004640:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004644:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004648:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800464c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004650:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004654:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004658:	2300      	movs	r3, #0
 800465a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800465e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004662:	460b      	mov	r3, r1
 8004664:	4313      	orrs	r3, r2
 8004666:	d055      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004668:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800466c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004670:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004674:	d033      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004676:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800467a:	d82c      	bhi.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800467c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004680:	d02f      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004682:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004686:	d826      	bhi.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004688:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800468c:	d02b      	beq.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800468e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004692:	d820      	bhi.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004694:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004698:	d012      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800469a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800469e:	d81a      	bhi.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d022      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80046a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046a8:	d115      	bne.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ae:	3308      	adds	r3, #8
 80046b0:	2100      	movs	r1, #0
 80046b2:	4618      	mov	r0, r3
 80046b4:	f000 fdee 	bl	8005294 <RCCEx_PLL2_Config>
 80046b8:	4603      	mov	r3, r0
 80046ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80046be:	e015      	b.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80046c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046c4:	3328      	adds	r3, #40	@ 0x28
 80046c6:	2102      	movs	r1, #2
 80046c8:	4618      	mov	r0, r3
 80046ca:	f000 fe95 	bl	80053f8 <RCCEx_PLL3_Config>
 80046ce:	4603      	mov	r3, r0
 80046d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80046d4:	e00a      	b.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80046dc:	e006      	b.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80046de:	bf00      	nop
 80046e0:	e004      	b.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80046e2:	bf00      	nop
 80046e4:	e002      	b.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80046e6:	bf00      	nop
 80046e8:	e000      	b.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80046ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d10b      	bne.n	800470c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80046f4:	4ba1      	ldr	r3, [pc, #644]	@ (800497c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046f8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80046fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004700:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004704:	4a9d      	ldr	r2, [pc, #628]	@ (800497c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004706:	430b      	orrs	r3, r1
 8004708:	6593      	str	r3, [r2, #88]	@ 0x58
 800470a:	e003      	b.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800470c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004710:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004714:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800471c:	f002 0308 	and.w	r3, r2, #8
 8004720:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004724:	2300      	movs	r3, #0
 8004726:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800472a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800472e:	460b      	mov	r3, r1
 8004730:	4313      	orrs	r3, r2
 8004732:	d01e      	beq.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004734:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004738:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800473c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004740:	d10c      	bne.n	800475c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004742:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004746:	3328      	adds	r3, #40	@ 0x28
 8004748:	2102      	movs	r1, #2
 800474a:	4618      	mov	r0, r3
 800474c:	f000 fe54 	bl	80053f8 <RCCEx_PLL3_Config>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d002      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800475c:	4b87      	ldr	r3, [pc, #540]	@ (800497c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800475e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004760:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004764:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004768:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800476c:	4a83      	ldr	r2, [pc, #524]	@ (800497c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800476e:	430b      	orrs	r3, r1
 8004770:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004772:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800477a:	f002 0310 	and.w	r3, r2, #16
 800477e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004782:	2300      	movs	r3, #0
 8004784:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004788:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800478c:	460b      	mov	r3, r1
 800478e:	4313      	orrs	r3, r2
 8004790:	d01e      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004792:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004796:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800479a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800479e:	d10c      	bne.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80047a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047a4:	3328      	adds	r3, #40	@ 0x28
 80047a6:	2102      	movs	r1, #2
 80047a8:	4618      	mov	r0, r3
 80047aa:	f000 fe25 	bl	80053f8 <RCCEx_PLL3_Config>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d002      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80047ba:	4b70      	ldr	r3, [pc, #448]	@ (800497c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047be:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80047c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80047ca:	4a6c      	ldr	r2, [pc, #432]	@ (800497c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047cc:	430b      	orrs	r3, r1
 80047ce:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80047d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80047dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80047e0:	2300      	movs	r3, #0
 80047e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80047e6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80047ea:	460b      	mov	r3, r1
 80047ec:	4313      	orrs	r3, r2
 80047ee:	d03e      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80047f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80047f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80047fc:	d022      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80047fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004802:	d81b      	bhi.n	800483c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004804:	2b00      	cmp	r3, #0
 8004806:	d003      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004808:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800480c:	d00b      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800480e:	e015      	b.n	800483c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004810:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004814:	3308      	adds	r3, #8
 8004816:	2100      	movs	r1, #0
 8004818:	4618      	mov	r0, r3
 800481a:	f000 fd3b 	bl	8005294 <RCCEx_PLL2_Config>
 800481e:	4603      	mov	r3, r0
 8004820:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004824:	e00f      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004826:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800482a:	3328      	adds	r3, #40	@ 0x28
 800482c:	2102      	movs	r1, #2
 800482e:	4618      	mov	r0, r3
 8004830:	f000 fde2 	bl	80053f8 <RCCEx_PLL3_Config>
 8004834:	4603      	mov	r3, r0
 8004836:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800483a:	e004      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004842:	e000      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004844:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004846:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800484a:	2b00      	cmp	r3, #0
 800484c:	d10b      	bne.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800484e:	4b4b      	ldr	r3, [pc, #300]	@ (800497c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004852:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004856:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800485a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800485e:	4a47      	ldr	r2, [pc, #284]	@ (800497c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004860:	430b      	orrs	r3, r1
 8004862:	6593      	str	r3, [r2, #88]	@ 0x58
 8004864:	e003      	b.n	800486e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004866:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800486a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800486e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004876:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800487a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800487c:	2300      	movs	r3, #0
 800487e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004880:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004884:	460b      	mov	r3, r1
 8004886:	4313      	orrs	r3, r2
 8004888:	d03b      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800488a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800488e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004892:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004896:	d01f      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004898:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800489c:	d818      	bhi.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800489e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048a2:	d003      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80048a4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80048a8:	d007      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80048aa:	e011      	b.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048ac:	4b33      	ldr	r3, [pc, #204]	@ (800497c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80048ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048b0:	4a32      	ldr	r2, [pc, #200]	@ (800497c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80048b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80048b8:	e00f      	b.n	80048da <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80048ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048be:	3328      	adds	r3, #40	@ 0x28
 80048c0:	2101      	movs	r1, #1
 80048c2:	4618      	mov	r0, r3
 80048c4:	f000 fd98 	bl	80053f8 <RCCEx_PLL3_Config>
 80048c8:	4603      	mov	r3, r0
 80048ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80048ce:	e004      	b.n	80048da <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80048d6:	e000      	b.n	80048da <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80048d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d10b      	bne.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80048e2:	4b26      	ldr	r3, [pc, #152]	@ (800497c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80048e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048e6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80048ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048f2:	4a22      	ldr	r2, [pc, #136]	@ (800497c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80048f4:	430b      	orrs	r3, r1
 80048f6:	6553      	str	r3, [r2, #84]	@ 0x54
 80048f8:	e003      	b.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004902:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800490a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800490e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004910:	2300      	movs	r3, #0
 8004912:	677b      	str	r3, [r7, #116]	@ 0x74
 8004914:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004918:	460b      	mov	r3, r1
 800491a:	4313      	orrs	r3, r2
 800491c:	d034      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800491e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004922:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004924:	2b00      	cmp	r3, #0
 8004926:	d003      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004928:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800492c:	d007      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800492e:	e011      	b.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004930:	4b12      	ldr	r3, [pc, #72]	@ (800497c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004934:	4a11      	ldr	r2, [pc, #68]	@ (800497c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004936:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800493a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800493c:	e00e      	b.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800493e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004942:	3308      	adds	r3, #8
 8004944:	2102      	movs	r1, #2
 8004946:	4618      	mov	r0, r3
 8004948:	f000 fca4 	bl	8005294 <RCCEx_PLL2_Config>
 800494c:	4603      	mov	r3, r0
 800494e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004952:	e003      	b.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800495a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800495c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004960:	2b00      	cmp	r3, #0
 8004962:	d10d      	bne.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004964:	4b05      	ldr	r3, [pc, #20]	@ (800497c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004966:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004968:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800496c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004970:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004972:	4a02      	ldr	r2, [pc, #8]	@ (800497c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004974:	430b      	orrs	r3, r1
 8004976:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004978:	e006      	b.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800497a:	bf00      	nop
 800497c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004980:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004984:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004988:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800498c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004990:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004994:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004996:	2300      	movs	r3, #0
 8004998:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800499a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800499e:	460b      	mov	r3, r1
 80049a0:	4313      	orrs	r3, r2
 80049a2:	d00c      	beq.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80049a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049a8:	3328      	adds	r3, #40	@ 0x28
 80049aa:	2102      	movs	r1, #2
 80049ac:	4618      	mov	r0, r3
 80049ae:	f000 fd23 	bl	80053f8 <RCCEx_PLL3_Config>
 80049b2:	4603      	mov	r3, r0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d002      	beq.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80049be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80049ca:	663b      	str	r3, [r7, #96]	@ 0x60
 80049cc:	2300      	movs	r3, #0
 80049ce:	667b      	str	r3, [r7, #100]	@ 0x64
 80049d0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80049d4:	460b      	mov	r3, r1
 80049d6:	4313      	orrs	r3, r2
 80049d8:	d038      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80049da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049e6:	d018      	beq.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80049e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049ec:	d811      	bhi.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80049ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049f2:	d014      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80049f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049f8:	d80b      	bhi.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d011      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80049fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a02:	d106      	bne.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a04:	4bc3      	ldr	r3, [pc, #780]	@ (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a08:	4ac2      	ldr	r2, [pc, #776]	@ (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004a10:	e008      	b.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a18:	e004      	b.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004a1a:	bf00      	nop
 8004a1c:	e002      	b.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004a1e:	bf00      	nop
 8004a20:	e000      	b.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004a22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d10b      	bne.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a2c:	4bb9      	ldr	r3, [pc, #740]	@ (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a30:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004a34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a3c:	4ab5      	ldr	r2, [pc, #724]	@ (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a3e:	430b      	orrs	r3, r1
 8004a40:	6553      	str	r3, [r2, #84]	@ 0x54
 8004a42:	e003      	b.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a48:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004a4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a54:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004a58:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004a5e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004a62:	460b      	mov	r3, r1
 8004a64:	4313      	orrs	r3, r2
 8004a66:	d009      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004a68:	4baa      	ldr	r3, [pc, #680]	@ (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a6c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004a70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a76:	4aa7      	ldr	r2, [pc, #668]	@ (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a78:	430b      	orrs	r3, r1
 8004a7a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004a7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a84:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004a88:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	657b      	str	r3, [r7, #84]	@ 0x54
 8004a8e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004a92:	460b      	mov	r3, r1
 8004a94:	4313      	orrs	r3, r2
 8004a96:	d00a      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004a98:	4b9e      	ldr	r3, [pc, #632]	@ (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a9a:	691b      	ldr	r3, [r3, #16]
 8004a9c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aa4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004aa8:	4a9a      	ldr	r2, [pc, #616]	@ (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004aaa:	430b      	orrs	r3, r1
 8004aac:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004aba:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004abc:	2300      	movs	r3, #0
 8004abe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ac0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	d009      	beq.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004aca:	4b92      	ldr	r3, [pc, #584]	@ (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004acc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ace:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ad6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ad8:	4a8e      	ldr	r2, [pc, #568]	@ (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ada:	430b      	orrs	r3, r1
 8004adc:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004aea:	643b      	str	r3, [r7, #64]	@ 0x40
 8004aec:	2300      	movs	r3, #0
 8004aee:	647b      	str	r3, [r7, #68]	@ 0x44
 8004af0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004af4:	460b      	mov	r3, r1
 8004af6:	4313      	orrs	r3, r2
 8004af8:	d00e      	beq.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004afa:	4b86      	ldr	r3, [pc, #536]	@ (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	4a85      	ldr	r2, [pc, #532]	@ (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b00:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004b04:	6113      	str	r3, [r2, #16]
 8004b06:	4b83      	ldr	r3, [pc, #524]	@ (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b08:	6919      	ldr	r1, [r3, #16]
 8004b0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b0e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004b12:	4a80      	ldr	r2, [pc, #512]	@ (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b14:	430b      	orrs	r3, r1
 8004b16:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004b18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b20:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004b24:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004b26:	2300      	movs	r3, #0
 8004b28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b2a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004b2e:	460b      	mov	r3, r1
 8004b30:	4313      	orrs	r3, r2
 8004b32:	d009      	beq.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004b34:	4b77      	ldr	r3, [pc, #476]	@ (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b38:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b42:	4a74      	ldr	r2, [pc, #464]	@ (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b44:	430b      	orrs	r3, r1
 8004b46:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004b48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b50:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004b54:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b56:	2300      	movs	r3, #0
 8004b58:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b5a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004b5e:	460b      	mov	r3, r1
 8004b60:	4313      	orrs	r3, r2
 8004b62:	d00a      	beq.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004b64:	4b6b      	ldr	r3, [pc, #428]	@ (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b68:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b74:	4a67      	ldr	r2, [pc, #412]	@ (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b76:	430b      	orrs	r3, r1
 8004b78:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004b7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b82:	2100      	movs	r1, #0
 8004b84:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004b86:	f003 0301 	and.w	r3, r3, #1
 8004b8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b8c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004b90:	460b      	mov	r3, r1
 8004b92:	4313      	orrs	r3, r2
 8004b94:	d011      	beq.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b9a:	3308      	adds	r3, #8
 8004b9c:	2100      	movs	r1, #0
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f000 fb78 	bl	8005294 <RCCEx_PLL2_Config>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004baa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d003      	beq.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bb6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc2:	2100      	movs	r1, #0
 8004bc4:	6239      	str	r1, [r7, #32]
 8004bc6:	f003 0302 	and.w	r3, r3, #2
 8004bca:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bcc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	d011      	beq.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bda:	3308      	adds	r3, #8
 8004bdc:	2101      	movs	r1, #1
 8004bde:	4618      	mov	r0, r3
 8004be0:	f000 fb58 	bl	8005294 <RCCEx_PLL2_Config>
 8004be4:	4603      	mov	r3, r0
 8004be6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004bea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d003      	beq.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bf2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bf6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c02:	2100      	movs	r1, #0
 8004c04:	61b9      	str	r1, [r7, #24]
 8004c06:	f003 0304 	and.w	r3, r3, #4
 8004c0a:	61fb      	str	r3, [r7, #28]
 8004c0c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004c10:	460b      	mov	r3, r1
 8004c12:	4313      	orrs	r3, r2
 8004c14:	d011      	beq.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c1a:	3308      	adds	r3, #8
 8004c1c:	2102      	movs	r1, #2
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f000 fb38 	bl	8005294 <RCCEx_PLL2_Config>
 8004c24:	4603      	mov	r3, r0
 8004c26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004c2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d003      	beq.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c42:	2100      	movs	r1, #0
 8004c44:	6139      	str	r1, [r7, #16]
 8004c46:	f003 0308 	and.w	r3, r3, #8
 8004c4a:	617b      	str	r3, [r7, #20]
 8004c4c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004c50:	460b      	mov	r3, r1
 8004c52:	4313      	orrs	r3, r2
 8004c54:	d011      	beq.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004c56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c5a:	3328      	adds	r3, #40	@ 0x28
 8004c5c:	2100      	movs	r1, #0
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f000 fbca 	bl	80053f8 <RCCEx_PLL3_Config>
 8004c64:	4603      	mov	r3, r0
 8004c66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004c6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d003      	beq.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c82:	2100      	movs	r1, #0
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	f003 0310 	and.w	r3, r3, #16
 8004c8a:	60fb      	str	r3, [r7, #12]
 8004c8c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004c90:	460b      	mov	r3, r1
 8004c92:	4313      	orrs	r3, r2
 8004c94:	d011      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c9a:	3328      	adds	r3, #40	@ 0x28
 8004c9c:	2101      	movs	r1, #1
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f000 fbaa 	bl	80053f8 <RCCEx_PLL3_Config>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004caa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d003      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cb6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc2:	2100      	movs	r1, #0
 8004cc4:	6039      	str	r1, [r7, #0]
 8004cc6:	f003 0320 	and.w	r3, r3, #32
 8004cca:	607b      	str	r3, [r7, #4]
 8004ccc:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004cd0:	460b      	mov	r3, r1
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	d011      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cda:	3328      	adds	r3, #40	@ 0x28
 8004cdc:	2102      	movs	r1, #2
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f000 fb8a 	bl	80053f8 <RCCEx_PLL3_Config>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004cea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d003      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cf2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cf6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004cfa:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d101      	bne.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004d02:	2300      	movs	r3, #0
 8004d04:	e000      	b.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d14:	58024400 	.word	0x58024400

08004d18 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004d1c:	f7fe fd96 	bl	800384c <HAL_RCC_GetHCLKFreq>
 8004d20:	4602      	mov	r2, r0
 8004d22:	4b06      	ldr	r3, [pc, #24]	@ (8004d3c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004d24:	6a1b      	ldr	r3, [r3, #32]
 8004d26:	091b      	lsrs	r3, r3, #4
 8004d28:	f003 0307 	and.w	r3, r3, #7
 8004d2c:	4904      	ldr	r1, [pc, #16]	@ (8004d40 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004d2e:	5ccb      	ldrb	r3, [r1, r3]
 8004d30:	f003 031f 	and.w	r3, r3, #31
 8004d34:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	58024400 	.word	0x58024400
 8004d40:	080095b8 	.word	0x080095b8

08004d44 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b089      	sub	sp, #36	@ 0x24
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004d4c:	4ba1      	ldr	r3, [pc, #644]	@ (8004fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d50:	f003 0303 	and.w	r3, r3, #3
 8004d54:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004d56:	4b9f      	ldr	r3, [pc, #636]	@ (8004fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d5a:	0b1b      	lsrs	r3, r3, #12
 8004d5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d60:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004d62:	4b9c      	ldr	r3, [pc, #624]	@ (8004fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d66:	091b      	lsrs	r3, r3, #4
 8004d68:	f003 0301 	and.w	r3, r3, #1
 8004d6c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004d6e:	4b99      	ldr	r3, [pc, #612]	@ (8004fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d72:	08db      	lsrs	r3, r3, #3
 8004d74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d78:	693a      	ldr	r2, [r7, #16]
 8004d7a:	fb02 f303 	mul.w	r3, r2, r3
 8004d7e:	ee07 3a90 	vmov	s15, r3
 8004d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d86:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	f000 8111 	beq.w	8004fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	2b02      	cmp	r3, #2
 8004d96:	f000 8083 	beq.w	8004ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	f200 80a1 	bhi.w	8004ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d003      	beq.n	8004db0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004da8:	69bb      	ldr	r3, [r7, #24]
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d056      	beq.n	8004e5c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004dae:	e099      	b.n	8004ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004db0:	4b88      	ldr	r3, [pc, #544]	@ (8004fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0320 	and.w	r3, r3, #32
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d02d      	beq.n	8004e18 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004dbc:	4b85      	ldr	r3, [pc, #532]	@ (8004fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	08db      	lsrs	r3, r3, #3
 8004dc2:	f003 0303 	and.w	r3, r3, #3
 8004dc6:	4a84      	ldr	r2, [pc, #528]	@ (8004fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004dc8:	fa22 f303 	lsr.w	r3, r2, r3
 8004dcc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	ee07 3a90 	vmov	s15, r3
 8004dd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	ee07 3a90 	vmov	s15, r3
 8004dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004de2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004de6:	4b7b      	ldr	r3, [pc, #492]	@ (8004fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004de8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dee:	ee07 3a90 	vmov	s15, r3
 8004df2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004df6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004dfa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004fdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004dfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e12:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004e16:	e087      	b.n	8004f28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	ee07 3a90 	vmov	s15, r3
 8004e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e22:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004e26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e2a:	4b6a      	ldr	r3, [pc, #424]	@ (8004fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e32:	ee07 3a90 	vmov	s15, r3
 8004e36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e3e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004fdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e5a:	e065      	b.n	8004f28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	ee07 3a90 	vmov	s15, r3
 8004e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e66:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004fe4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004e6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e6e:	4b59      	ldr	r3, [pc, #356]	@ (8004fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e76:	ee07 3a90 	vmov	s15, r3
 8004e7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e82:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004fdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e9e:	e043      	b.n	8004f28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	ee07 3a90 	vmov	s15, r3
 8004ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eaa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004eae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004eb2:	4b48      	ldr	r3, [pc, #288]	@ (8004fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004eb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eba:	ee07 3a90 	vmov	s15, r3
 8004ebe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ec2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ec6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004fdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004eca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ece:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ed2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ed6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ede:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ee2:	e021      	b.n	8004f28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	ee07 3a90 	vmov	s15, r3
 8004eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eee:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004fe4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004ef2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ef6:	4b37      	ldr	r3, [pc, #220]	@ (8004fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004efa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004efe:	ee07 3a90 	vmov	s15, r3
 8004f02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f06:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f0a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004fdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f26:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004f28:	4b2a      	ldr	r3, [pc, #168]	@ (8004fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f2c:	0a5b      	lsrs	r3, r3, #9
 8004f2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f32:	ee07 3a90 	vmov	s15, r3
 8004f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f3a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004f3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f42:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f4e:	ee17 2a90 	vmov	r2, s15
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004f56:	4b1f      	ldr	r3, [pc, #124]	@ (8004fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f5a:	0c1b      	lsrs	r3, r3, #16
 8004f5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f60:	ee07 3a90 	vmov	s15, r3
 8004f64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f68:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004f6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f70:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f7c:	ee17 2a90 	vmov	r2, s15
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004f84:	4b13      	ldr	r3, [pc, #76]	@ (8004fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f88:	0e1b      	lsrs	r3, r3, #24
 8004f8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f8e:	ee07 3a90 	vmov	s15, r3
 8004f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f96:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004f9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fa2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004faa:	ee17 2a90 	vmov	r2, s15
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004fb2:	e008      	b.n	8004fc6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	609a      	str	r2, [r3, #8]
}
 8004fc6:	bf00      	nop
 8004fc8:	3724      	adds	r7, #36	@ 0x24
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	58024400 	.word	0x58024400
 8004fd8:	03d09000 	.word	0x03d09000
 8004fdc:	46000000 	.word	0x46000000
 8004fe0:	4c742400 	.word	0x4c742400
 8004fe4:	4a742400 	.word	0x4a742400
 8004fe8:	4af42400 	.word	0x4af42400

08004fec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b089      	sub	sp, #36	@ 0x24
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004ff4:	4ba1      	ldr	r3, [pc, #644]	@ (800527c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ff8:	f003 0303 	and.w	r3, r3, #3
 8004ffc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004ffe:	4b9f      	ldr	r3, [pc, #636]	@ (800527c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005002:	0d1b      	lsrs	r3, r3, #20
 8005004:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005008:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800500a:	4b9c      	ldr	r3, [pc, #624]	@ (800527c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800500c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800500e:	0a1b      	lsrs	r3, r3, #8
 8005010:	f003 0301 	and.w	r3, r3, #1
 8005014:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005016:	4b99      	ldr	r3, [pc, #612]	@ (800527c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800501a:	08db      	lsrs	r3, r3, #3
 800501c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005020:	693a      	ldr	r2, [r7, #16]
 8005022:	fb02 f303 	mul.w	r3, r2, r3
 8005026:	ee07 3a90 	vmov	s15, r3
 800502a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800502e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	2b00      	cmp	r3, #0
 8005036:	f000 8111 	beq.w	800525c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	2b02      	cmp	r3, #2
 800503e:	f000 8083 	beq.w	8005148 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	2b02      	cmp	r3, #2
 8005046:	f200 80a1 	bhi.w	800518c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d003      	beq.n	8005058 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	2b01      	cmp	r3, #1
 8005054:	d056      	beq.n	8005104 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005056:	e099      	b.n	800518c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005058:	4b88      	ldr	r3, [pc, #544]	@ (800527c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0320 	and.w	r3, r3, #32
 8005060:	2b00      	cmp	r3, #0
 8005062:	d02d      	beq.n	80050c0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005064:	4b85      	ldr	r3, [pc, #532]	@ (800527c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	08db      	lsrs	r3, r3, #3
 800506a:	f003 0303 	and.w	r3, r3, #3
 800506e:	4a84      	ldr	r2, [pc, #528]	@ (8005280 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005070:	fa22 f303 	lsr.w	r3, r2, r3
 8005074:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	ee07 3a90 	vmov	s15, r3
 800507c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	ee07 3a90 	vmov	s15, r3
 8005086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800508a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800508e:	4b7b      	ldr	r3, [pc, #492]	@ (800527c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005092:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005096:	ee07 3a90 	vmov	s15, r3
 800509a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800509e:	ed97 6a03 	vldr	s12, [r7, #12]
 80050a2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005284 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80050a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050ba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80050be:	e087      	b.n	80051d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	ee07 3a90 	vmov	s15, r3
 80050c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ca:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005288 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80050ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050d2:	4b6a      	ldr	r3, [pc, #424]	@ (800527c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050da:	ee07 3a90 	vmov	s15, r3
 80050de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80050e6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005284 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80050ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005102:	e065      	b.n	80051d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	ee07 3a90 	vmov	s15, r3
 800510a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800510e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800528c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005112:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005116:	4b59      	ldr	r3, [pc, #356]	@ (800527c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800511a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800511e:	ee07 3a90 	vmov	s15, r3
 8005122:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005126:	ed97 6a03 	vldr	s12, [r7, #12]
 800512a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005284 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800512e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005132:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005136:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800513a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800513e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005142:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005146:	e043      	b.n	80051d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	ee07 3a90 	vmov	s15, r3
 800514e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005152:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005290 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005156:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800515a:	4b48      	ldr	r3, [pc, #288]	@ (800527c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800515c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800515e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005162:	ee07 3a90 	vmov	s15, r3
 8005166:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800516a:	ed97 6a03 	vldr	s12, [r7, #12]
 800516e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005284 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005172:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005176:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800517a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800517e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005182:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005186:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800518a:	e021      	b.n	80051d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	ee07 3a90 	vmov	s15, r3
 8005192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005196:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800528c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800519a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800519e:	4b37      	ldr	r3, [pc, #220]	@ (800527c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051a6:	ee07 3a90 	vmov	s15, r3
 80051aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80051b2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005284 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80051b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80051ce:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80051d0:	4b2a      	ldr	r3, [pc, #168]	@ (800527c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051d4:	0a5b      	lsrs	r3, r3, #9
 80051d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80051da:	ee07 3a90 	vmov	s15, r3
 80051de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80051e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80051ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80051ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051f6:	ee17 2a90 	vmov	r2, s15
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80051fe:	4b1f      	ldr	r3, [pc, #124]	@ (800527c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005202:	0c1b      	lsrs	r3, r3, #16
 8005204:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005208:	ee07 3a90 	vmov	s15, r3
 800520c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005210:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005214:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005218:	edd7 6a07 	vldr	s13, [r7, #28]
 800521c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005220:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005224:	ee17 2a90 	vmov	r2, s15
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800522c:	4b13      	ldr	r3, [pc, #76]	@ (800527c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800522e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005230:	0e1b      	lsrs	r3, r3, #24
 8005232:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005236:	ee07 3a90 	vmov	s15, r3
 800523a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800523e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005242:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005246:	edd7 6a07 	vldr	s13, [r7, #28]
 800524a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800524e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005252:	ee17 2a90 	vmov	r2, s15
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800525a:	e008      	b.n	800526e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	609a      	str	r2, [r3, #8]
}
 800526e:	bf00      	nop
 8005270:	3724      	adds	r7, #36	@ 0x24
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	58024400 	.word	0x58024400
 8005280:	03d09000 	.word	0x03d09000
 8005284:	46000000 	.word	0x46000000
 8005288:	4c742400 	.word	0x4c742400
 800528c:	4a742400 	.word	0x4a742400
 8005290:	4af42400 	.word	0x4af42400

08005294 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800529e:	2300      	movs	r3, #0
 80052a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80052a2:	4b53      	ldr	r3, [pc, #332]	@ (80053f0 <RCCEx_PLL2_Config+0x15c>)
 80052a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052a6:	f003 0303 	and.w	r3, r3, #3
 80052aa:	2b03      	cmp	r3, #3
 80052ac:	d101      	bne.n	80052b2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e099      	b.n	80053e6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80052b2:	4b4f      	ldr	r3, [pc, #316]	@ (80053f0 <RCCEx_PLL2_Config+0x15c>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a4e      	ldr	r2, [pc, #312]	@ (80053f0 <RCCEx_PLL2_Config+0x15c>)
 80052b8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80052bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052be:	f7fc f9d3 	bl	8001668 <HAL_GetTick>
 80052c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80052c4:	e008      	b.n	80052d8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80052c6:	f7fc f9cf 	bl	8001668 <HAL_GetTick>
 80052ca:	4602      	mov	r2, r0
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	2b02      	cmp	r3, #2
 80052d2:	d901      	bls.n	80052d8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80052d4:	2303      	movs	r3, #3
 80052d6:	e086      	b.n	80053e6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80052d8:	4b45      	ldr	r3, [pc, #276]	@ (80053f0 <RCCEx_PLL2_Config+0x15c>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d1f0      	bne.n	80052c6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80052e4:	4b42      	ldr	r3, [pc, #264]	@ (80053f0 <RCCEx_PLL2_Config+0x15c>)
 80052e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052e8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	031b      	lsls	r3, r3, #12
 80052f2:	493f      	ldr	r1, [pc, #252]	@ (80053f0 <RCCEx_PLL2_Config+0x15c>)
 80052f4:	4313      	orrs	r3, r2
 80052f6:	628b      	str	r3, [r1, #40]	@ 0x28
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	3b01      	subs	r3, #1
 80052fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	3b01      	subs	r3, #1
 8005308:	025b      	lsls	r3, r3, #9
 800530a:	b29b      	uxth	r3, r3
 800530c:	431a      	orrs	r2, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	3b01      	subs	r3, #1
 8005314:	041b      	lsls	r3, r3, #16
 8005316:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800531a:	431a      	orrs	r2, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	691b      	ldr	r3, [r3, #16]
 8005320:	3b01      	subs	r3, #1
 8005322:	061b      	lsls	r3, r3, #24
 8005324:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005328:	4931      	ldr	r1, [pc, #196]	@ (80053f0 <RCCEx_PLL2_Config+0x15c>)
 800532a:	4313      	orrs	r3, r2
 800532c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800532e:	4b30      	ldr	r3, [pc, #192]	@ (80053f0 <RCCEx_PLL2_Config+0x15c>)
 8005330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005332:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	695b      	ldr	r3, [r3, #20]
 800533a:	492d      	ldr	r1, [pc, #180]	@ (80053f0 <RCCEx_PLL2_Config+0x15c>)
 800533c:	4313      	orrs	r3, r2
 800533e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005340:	4b2b      	ldr	r3, [pc, #172]	@ (80053f0 <RCCEx_PLL2_Config+0x15c>)
 8005342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005344:	f023 0220 	bic.w	r2, r3, #32
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	699b      	ldr	r3, [r3, #24]
 800534c:	4928      	ldr	r1, [pc, #160]	@ (80053f0 <RCCEx_PLL2_Config+0x15c>)
 800534e:	4313      	orrs	r3, r2
 8005350:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005352:	4b27      	ldr	r3, [pc, #156]	@ (80053f0 <RCCEx_PLL2_Config+0x15c>)
 8005354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005356:	4a26      	ldr	r2, [pc, #152]	@ (80053f0 <RCCEx_PLL2_Config+0x15c>)
 8005358:	f023 0310 	bic.w	r3, r3, #16
 800535c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800535e:	4b24      	ldr	r3, [pc, #144]	@ (80053f0 <RCCEx_PLL2_Config+0x15c>)
 8005360:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005362:	4b24      	ldr	r3, [pc, #144]	@ (80053f4 <RCCEx_PLL2_Config+0x160>)
 8005364:	4013      	ands	r3, r2
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	69d2      	ldr	r2, [r2, #28]
 800536a:	00d2      	lsls	r2, r2, #3
 800536c:	4920      	ldr	r1, [pc, #128]	@ (80053f0 <RCCEx_PLL2_Config+0x15c>)
 800536e:	4313      	orrs	r3, r2
 8005370:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005372:	4b1f      	ldr	r3, [pc, #124]	@ (80053f0 <RCCEx_PLL2_Config+0x15c>)
 8005374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005376:	4a1e      	ldr	r2, [pc, #120]	@ (80053f0 <RCCEx_PLL2_Config+0x15c>)
 8005378:	f043 0310 	orr.w	r3, r3, #16
 800537c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d106      	bne.n	8005392 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005384:	4b1a      	ldr	r3, [pc, #104]	@ (80053f0 <RCCEx_PLL2_Config+0x15c>)
 8005386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005388:	4a19      	ldr	r2, [pc, #100]	@ (80053f0 <RCCEx_PLL2_Config+0x15c>)
 800538a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800538e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005390:	e00f      	b.n	80053b2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	2b01      	cmp	r3, #1
 8005396:	d106      	bne.n	80053a6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005398:	4b15      	ldr	r3, [pc, #84]	@ (80053f0 <RCCEx_PLL2_Config+0x15c>)
 800539a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800539c:	4a14      	ldr	r2, [pc, #80]	@ (80053f0 <RCCEx_PLL2_Config+0x15c>)
 800539e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80053a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80053a4:	e005      	b.n	80053b2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80053a6:	4b12      	ldr	r3, [pc, #72]	@ (80053f0 <RCCEx_PLL2_Config+0x15c>)
 80053a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053aa:	4a11      	ldr	r2, [pc, #68]	@ (80053f0 <RCCEx_PLL2_Config+0x15c>)
 80053ac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80053b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80053b2:	4b0f      	ldr	r3, [pc, #60]	@ (80053f0 <RCCEx_PLL2_Config+0x15c>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a0e      	ldr	r2, [pc, #56]	@ (80053f0 <RCCEx_PLL2_Config+0x15c>)
 80053b8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80053bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053be:	f7fc f953 	bl	8001668 <HAL_GetTick>
 80053c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80053c4:	e008      	b.n	80053d8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80053c6:	f7fc f94f 	bl	8001668 <HAL_GetTick>
 80053ca:	4602      	mov	r2, r0
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	1ad3      	subs	r3, r2, r3
 80053d0:	2b02      	cmp	r3, #2
 80053d2:	d901      	bls.n	80053d8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80053d4:	2303      	movs	r3, #3
 80053d6:	e006      	b.n	80053e6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80053d8:	4b05      	ldr	r3, [pc, #20]	@ (80053f0 <RCCEx_PLL2_Config+0x15c>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d0f0      	beq.n	80053c6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80053e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3710      	adds	r7, #16
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	bf00      	nop
 80053f0:	58024400 	.word	0x58024400
 80053f4:	ffff0007 	.word	0xffff0007

080053f8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005402:	2300      	movs	r3, #0
 8005404:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005406:	4b53      	ldr	r3, [pc, #332]	@ (8005554 <RCCEx_PLL3_Config+0x15c>)
 8005408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800540a:	f003 0303 	and.w	r3, r3, #3
 800540e:	2b03      	cmp	r3, #3
 8005410:	d101      	bne.n	8005416 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	e099      	b.n	800554a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005416:	4b4f      	ldr	r3, [pc, #316]	@ (8005554 <RCCEx_PLL3_Config+0x15c>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a4e      	ldr	r2, [pc, #312]	@ (8005554 <RCCEx_PLL3_Config+0x15c>)
 800541c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005420:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005422:	f7fc f921 	bl	8001668 <HAL_GetTick>
 8005426:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005428:	e008      	b.n	800543c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800542a:	f7fc f91d 	bl	8001668 <HAL_GetTick>
 800542e:	4602      	mov	r2, r0
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	1ad3      	subs	r3, r2, r3
 8005434:	2b02      	cmp	r3, #2
 8005436:	d901      	bls.n	800543c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005438:	2303      	movs	r3, #3
 800543a:	e086      	b.n	800554a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800543c:	4b45      	ldr	r3, [pc, #276]	@ (8005554 <RCCEx_PLL3_Config+0x15c>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005444:	2b00      	cmp	r3, #0
 8005446:	d1f0      	bne.n	800542a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005448:	4b42      	ldr	r3, [pc, #264]	@ (8005554 <RCCEx_PLL3_Config+0x15c>)
 800544a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800544c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	051b      	lsls	r3, r3, #20
 8005456:	493f      	ldr	r1, [pc, #252]	@ (8005554 <RCCEx_PLL3_Config+0x15c>)
 8005458:	4313      	orrs	r3, r2
 800545a:	628b      	str	r3, [r1, #40]	@ 0x28
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	3b01      	subs	r3, #1
 8005462:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	3b01      	subs	r3, #1
 800546c:	025b      	lsls	r3, r3, #9
 800546e:	b29b      	uxth	r3, r3
 8005470:	431a      	orrs	r2, r3
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	3b01      	subs	r3, #1
 8005478:	041b      	lsls	r3, r3, #16
 800547a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800547e:	431a      	orrs	r2, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	3b01      	subs	r3, #1
 8005486:	061b      	lsls	r3, r3, #24
 8005488:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800548c:	4931      	ldr	r1, [pc, #196]	@ (8005554 <RCCEx_PLL3_Config+0x15c>)
 800548e:	4313      	orrs	r3, r2
 8005490:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005492:	4b30      	ldr	r3, [pc, #192]	@ (8005554 <RCCEx_PLL3_Config+0x15c>)
 8005494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005496:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	695b      	ldr	r3, [r3, #20]
 800549e:	492d      	ldr	r1, [pc, #180]	@ (8005554 <RCCEx_PLL3_Config+0x15c>)
 80054a0:	4313      	orrs	r3, r2
 80054a2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80054a4:	4b2b      	ldr	r3, [pc, #172]	@ (8005554 <RCCEx_PLL3_Config+0x15c>)
 80054a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054a8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	699b      	ldr	r3, [r3, #24]
 80054b0:	4928      	ldr	r1, [pc, #160]	@ (8005554 <RCCEx_PLL3_Config+0x15c>)
 80054b2:	4313      	orrs	r3, r2
 80054b4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80054b6:	4b27      	ldr	r3, [pc, #156]	@ (8005554 <RCCEx_PLL3_Config+0x15c>)
 80054b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ba:	4a26      	ldr	r2, [pc, #152]	@ (8005554 <RCCEx_PLL3_Config+0x15c>)
 80054bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80054c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80054c2:	4b24      	ldr	r3, [pc, #144]	@ (8005554 <RCCEx_PLL3_Config+0x15c>)
 80054c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80054c6:	4b24      	ldr	r3, [pc, #144]	@ (8005558 <RCCEx_PLL3_Config+0x160>)
 80054c8:	4013      	ands	r3, r2
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	69d2      	ldr	r2, [r2, #28]
 80054ce:	00d2      	lsls	r2, r2, #3
 80054d0:	4920      	ldr	r1, [pc, #128]	@ (8005554 <RCCEx_PLL3_Config+0x15c>)
 80054d2:	4313      	orrs	r3, r2
 80054d4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80054d6:	4b1f      	ldr	r3, [pc, #124]	@ (8005554 <RCCEx_PLL3_Config+0x15c>)
 80054d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054da:	4a1e      	ldr	r2, [pc, #120]	@ (8005554 <RCCEx_PLL3_Config+0x15c>)
 80054dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d106      	bne.n	80054f6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80054e8:	4b1a      	ldr	r3, [pc, #104]	@ (8005554 <RCCEx_PLL3_Config+0x15c>)
 80054ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ec:	4a19      	ldr	r2, [pc, #100]	@ (8005554 <RCCEx_PLL3_Config+0x15c>)
 80054ee:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80054f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80054f4:	e00f      	b.n	8005516 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d106      	bne.n	800550a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80054fc:	4b15      	ldr	r3, [pc, #84]	@ (8005554 <RCCEx_PLL3_Config+0x15c>)
 80054fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005500:	4a14      	ldr	r2, [pc, #80]	@ (8005554 <RCCEx_PLL3_Config+0x15c>)
 8005502:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005506:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005508:	e005      	b.n	8005516 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800550a:	4b12      	ldr	r3, [pc, #72]	@ (8005554 <RCCEx_PLL3_Config+0x15c>)
 800550c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800550e:	4a11      	ldr	r2, [pc, #68]	@ (8005554 <RCCEx_PLL3_Config+0x15c>)
 8005510:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005514:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005516:	4b0f      	ldr	r3, [pc, #60]	@ (8005554 <RCCEx_PLL3_Config+0x15c>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a0e      	ldr	r2, [pc, #56]	@ (8005554 <RCCEx_PLL3_Config+0x15c>)
 800551c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005520:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005522:	f7fc f8a1 	bl	8001668 <HAL_GetTick>
 8005526:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005528:	e008      	b.n	800553c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800552a:	f7fc f89d 	bl	8001668 <HAL_GetTick>
 800552e:	4602      	mov	r2, r0
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	1ad3      	subs	r3, r2, r3
 8005534:	2b02      	cmp	r3, #2
 8005536:	d901      	bls.n	800553c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005538:	2303      	movs	r3, #3
 800553a:	e006      	b.n	800554a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800553c:	4b05      	ldr	r3, [pc, #20]	@ (8005554 <RCCEx_PLL3_Config+0x15c>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005544:	2b00      	cmp	r3, #0
 8005546:	d0f0      	beq.n	800552a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005548:	7bfb      	ldrb	r3, [r7, #15]
}
 800554a:	4618      	mov	r0, r3
 800554c:	3710      	adds	r7, #16
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
 8005552:	bf00      	nop
 8005554:	58024400 	.word	0x58024400
 8005558:	ffff0007 	.word	0xffff0007

0800555c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b082      	sub	sp, #8
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d101      	bne.n	800556e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	e049      	b.n	8005602 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005574:	b2db      	uxtb	r3, r3
 8005576:	2b00      	cmp	r3, #0
 8005578:	d106      	bne.n	8005588 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f7fb fd4e 	bl	8001024 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2202      	movs	r2, #2
 800558c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	3304      	adds	r3, #4
 8005598:	4619      	mov	r1, r3
 800559a:	4610      	mov	r0, r2
 800559c:	f000 fd12 	bl	8005fc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	3708      	adds	r7, #8
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}

0800560a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800560a:	b580      	push	{r7, lr}
 800560c:	b082      	sub	sp, #8
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d101      	bne.n	800561c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	e049      	b.n	80056b0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005622:	b2db      	uxtb	r3, r3
 8005624:	2b00      	cmp	r3, #0
 8005626:	d106      	bne.n	8005636 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f000 f841 	bl	80056b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2202      	movs	r2, #2
 800563a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	3304      	adds	r3, #4
 8005646:	4619      	mov	r1, r3
 8005648:	4610      	mov	r0, r2
 800564a:	f000 fcbb 	bl	8005fc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2201      	movs	r2, #1
 8005652:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2201      	movs	r2, #1
 800565a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2201      	movs	r2, #1
 8005662:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2201      	movs	r2, #1
 800566a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2201      	movs	r2, #1
 8005672:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2201      	movs	r2, #1
 800567a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2201      	movs	r2, #1
 8005682:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2201      	movs	r2, #1
 800568a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2201      	movs	r2, #1
 8005692:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2201      	movs	r2, #1
 800569a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2201      	movs	r2, #1
 80056a2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2201      	movs	r2, #1
 80056aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80056ae:	2300      	movs	r3, #0
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3708      	adds	r7, #8
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80056c0:	bf00      	nop
 80056c2:	370c      	adds	r7, #12
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d109      	bne.n	80056f0 <HAL_TIM_PWM_Start+0x24>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	bf14      	ite	ne
 80056e8:	2301      	movne	r3, #1
 80056ea:	2300      	moveq	r3, #0
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	e03c      	b.n	800576a <HAL_TIM_PWM_Start+0x9e>
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	2b04      	cmp	r3, #4
 80056f4:	d109      	bne.n	800570a <HAL_TIM_PWM_Start+0x3e>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	2b01      	cmp	r3, #1
 8005700:	bf14      	ite	ne
 8005702:	2301      	movne	r3, #1
 8005704:	2300      	moveq	r3, #0
 8005706:	b2db      	uxtb	r3, r3
 8005708:	e02f      	b.n	800576a <HAL_TIM_PWM_Start+0x9e>
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	2b08      	cmp	r3, #8
 800570e:	d109      	bne.n	8005724 <HAL_TIM_PWM_Start+0x58>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005716:	b2db      	uxtb	r3, r3
 8005718:	2b01      	cmp	r3, #1
 800571a:	bf14      	ite	ne
 800571c:	2301      	movne	r3, #1
 800571e:	2300      	moveq	r3, #0
 8005720:	b2db      	uxtb	r3, r3
 8005722:	e022      	b.n	800576a <HAL_TIM_PWM_Start+0x9e>
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	2b0c      	cmp	r3, #12
 8005728:	d109      	bne.n	800573e <HAL_TIM_PWM_Start+0x72>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005730:	b2db      	uxtb	r3, r3
 8005732:	2b01      	cmp	r3, #1
 8005734:	bf14      	ite	ne
 8005736:	2301      	movne	r3, #1
 8005738:	2300      	moveq	r3, #0
 800573a:	b2db      	uxtb	r3, r3
 800573c:	e015      	b.n	800576a <HAL_TIM_PWM_Start+0x9e>
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	2b10      	cmp	r3, #16
 8005742:	d109      	bne.n	8005758 <HAL_TIM_PWM_Start+0x8c>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800574a:	b2db      	uxtb	r3, r3
 800574c:	2b01      	cmp	r3, #1
 800574e:	bf14      	ite	ne
 8005750:	2301      	movne	r3, #1
 8005752:	2300      	moveq	r3, #0
 8005754:	b2db      	uxtb	r3, r3
 8005756:	e008      	b.n	800576a <HAL_TIM_PWM_Start+0x9e>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800575e:	b2db      	uxtb	r3, r3
 8005760:	2b01      	cmp	r3, #1
 8005762:	bf14      	ite	ne
 8005764:	2301      	movne	r3, #1
 8005766:	2300      	moveq	r3, #0
 8005768:	b2db      	uxtb	r3, r3
 800576a:	2b00      	cmp	r3, #0
 800576c:	d001      	beq.n	8005772 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	e0a1      	b.n	80058b6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d104      	bne.n	8005782 <HAL_TIM_PWM_Start+0xb6>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2202      	movs	r2, #2
 800577c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005780:	e023      	b.n	80057ca <HAL_TIM_PWM_Start+0xfe>
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	2b04      	cmp	r3, #4
 8005786:	d104      	bne.n	8005792 <HAL_TIM_PWM_Start+0xc6>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2202      	movs	r2, #2
 800578c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005790:	e01b      	b.n	80057ca <HAL_TIM_PWM_Start+0xfe>
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	2b08      	cmp	r3, #8
 8005796:	d104      	bne.n	80057a2 <HAL_TIM_PWM_Start+0xd6>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2202      	movs	r2, #2
 800579c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80057a0:	e013      	b.n	80057ca <HAL_TIM_PWM_Start+0xfe>
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	2b0c      	cmp	r3, #12
 80057a6:	d104      	bne.n	80057b2 <HAL_TIM_PWM_Start+0xe6>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2202      	movs	r2, #2
 80057ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80057b0:	e00b      	b.n	80057ca <HAL_TIM_PWM_Start+0xfe>
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	2b10      	cmp	r3, #16
 80057b6:	d104      	bne.n	80057c2 <HAL_TIM_PWM_Start+0xf6>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2202      	movs	r2, #2
 80057bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80057c0:	e003      	b.n	80057ca <HAL_TIM_PWM_Start+0xfe>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2202      	movs	r2, #2
 80057c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	2201      	movs	r2, #1
 80057d0:	6839      	ldr	r1, [r7, #0]
 80057d2:	4618      	mov	r0, r3
 80057d4:	f001 f80a 	bl	80067ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a38      	ldr	r2, [pc, #224]	@ (80058c0 <HAL_TIM_PWM_Start+0x1f4>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d013      	beq.n	800580a <HAL_TIM_PWM_Start+0x13e>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a37      	ldr	r2, [pc, #220]	@ (80058c4 <HAL_TIM_PWM_Start+0x1f8>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d00e      	beq.n	800580a <HAL_TIM_PWM_Start+0x13e>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a35      	ldr	r2, [pc, #212]	@ (80058c8 <HAL_TIM_PWM_Start+0x1fc>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d009      	beq.n	800580a <HAL_TIM_PWM_Start+0x13e>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a34      	ldr	r2, [pc, #208]	@ (80058cc <HAL_TIM_PWM_Start+0x200>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d004      	beq.n	800580a <HAL_TIM_PWM_Start+0x13e>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a32      	ldr	r2, [pc, #200]	@ (80058d0 <HAL_TIM_PWM_Start+0x204>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d101      	bne.n	800580e <HAL_TIM_PWM_Start+0x142>
 800580a:	2301      	movs	r3, #1
 800580c:	e000      	b.n	8005810 <HAL_TIM_PWM_Start+0x144>
 800580e:	2300      	movs	r3, #0
 8005810:	2b00      	cmp	r3, #0
 8005812:	d007      	beq.n	8005824 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005822:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a25      	ldr	r2, [pc, #148]	@ (80058c0 <HAL_TIM_PWM_Start+0x1f4>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d022      	beq.n	8005874 <HAL_TIM_PWM_Start+0x1a8>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005836:	d01d      	beq.n	8005874 <HAL_TIM_PWM_Start+0x1a8>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a25      	ldr	r2, [pc, #148]	@ (80058d4 <HAL_TIM_PWM_Start+0x208>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d018      	beq.n	8005874 <HAL_TIM_PWM_Start+0x1a8>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a24      	ldr	r2, [pc, #144]	@ (80058d8 <HAL_TIM_PWM_Start+0x20c>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d013      	beq.n	8005874 <HAL_TIM_PWM_Start+0x1a8>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a22      	ldr	r2, [pc, #136]	@ (80058dc <HAL_TIM_PWM_Start+0x210>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d00e      	beq.n	8005874 <HAL_TIM_PWM_Start+0x1a8>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a1a      	ldr	r2, [pc, #104]	@ (80058c4 <HAL_TIM_PWM_Start+0x1f8>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d009      	beq.n	8005874 <HAL_TIM_PWM_Start+0x1a8>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a1e      	ldr	r2, [pc, #120]	@ (80058e0 <HAL_TIM_PWM_Start+0x214>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d004      	beq.n	8005874 <HAL_TIM_PWM_Start+0x1a8>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a16      	ldr	r2, [pc, #88]	@ (80058c8 <HAL_TIM_PWM_Start+0x1fc>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d115      	bne.n	80058a0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	689a      	ldr	r2, [r3, #8]
 800587a:	4b1a      	ldr	r3, [pc, #104]	@ (80058e4 <HAL_TIM_PWM_Start+0x218>)
 800587c:	4013      	ands	r3, r2
 800587e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2b06      	cmp	r3, #6
 8005884:	d015      	beq.n	80058b2 <HAL_TIM_PWM_Start+0x1e6>
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800588c:	d011      	beq.n	80058b2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f042 0201 	orr.w	r2, r2, #1
 800589c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800589e:	e008      	b.n	80058b2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f042 0201 	orr.w	r2, r2, #1
 80058ae:	601a      	str	r2, [r3, #0]
 80058b0:	e000      	b.n	80058b4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80058b4:	2300      	movs	r3, #0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3710      	adds	r7, #16
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	bf00      	nop
 80058c0:	40010000 	.word	0x40010000
 80058c4:	40010400 	.word	0x40010400
 80058c8:	40014000 	.word	0x40014000
 80058cc:	40014400 	.word	0x40014400
 80058d0:	40014800 	.word	0x40014800
 80058d4:	40000400 	.word	0x40000400
 80058d8:	40000800 	.word	0x40000800
 80058dc:	40000c00 	.word	0x40000c00
 80058e0:	40001800 	.word	0x40001800
 80058e4:	00010007 	.word	0x00010007

080058e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b084      	sub	sp, #16
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	f003 0302 	and.w	r3, r3, #2
 8005906:	2b00      	cmp	r3, #0
 8005908:	d020      	beq.n	800594c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f003 0302 	and.w	r3, r3, #2
 8005910:	2b00      	cmp	r3, #0
 8005912:	d01b      	beq.n	800594c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f06f 0202 	mvn.w	r2, #2
 800591c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2201      	movs	r2, #1
 8005922:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	699b      	ldr	r3, [r3, #24]
 800592a:	f003 0303 	and.w	r3, r3, #3
 800592e:	2b00      	cmp	r3, #0
 8005930:	d003      	beq.n	800593a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 fb28 	bl	8005f88 <HAL_TIM_IC_CaptureCallback>
 8005938:	e005      	b.n	8005946 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 fb1a 	bl	8005f74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f000 fb2b 	bl	8005f9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	f003 0304 	and.w	r3, r3, #4
 8005952:	2b00      	cmp	r3, #0
 8005954:	d020      	beq.n	8005998 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f003 0304 	and.w	r3, r3, #4
 800595c:	2b00      	cmp	r3, #0
 800595e:	d01b      	beq.n	8005998 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f06f 0204 	mvn.w	r2, #4
 8005968:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2202      	movs	r2, #2
 800596e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	699b      	ldr	r3, [r3, #24]
 8005976:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800597a:	2b00      	cmp	r3, #0
 800597c:	d003      	beq.n	8005986 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 fb02 	bl	8005f88 <HAL_TIM_IC_CaptureCallback>
 8005984:	e005      	b.n	8005992 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 faf4 	bl	8005f74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 fb05 	bl	8005f9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	f003 0308 	and.w	r3, r3, #8
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d020      	beq.n	80059e4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f003 0308 	and.w	r3, r3, #8
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d01b      	beq.n	80059e4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f06f 0208 	mvn.w	r2, #8
 80059b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2204      	movs	r2, #4
 80059ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	69db      	ldr	r3, [r3, #28]
 80059c2:	f003 0303 	and.w	r3, r3, #3
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d003      	beq.n	80059d2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 fadc 	bl	8005f88 <HAL_TIM_IC_CaptureCallback>
 80059d0:	e005      	b.n	80059de <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 face 	bl	8005f74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f000 fadf 	bl	8005f9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	f003 0310 	and.w	r3, r3, #16
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d020      	beq.n	8005a30 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f003 0310 	and.w	r3, r3, #16
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d01b      	beq.n	8005a30 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f06f 0210 	mvn.w	r2, #16
 8005a00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2208      	movs	r2, #8
 8005a06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	69db      	ldr	r3, [r3, #28]
 8005a0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d003      	beq.n	8005a1e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 fab6 	bl	8005f88 <HAL_TIM_IC_CaptureCallback>
 8005a1c:	e005      	b.n	8005a2a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 faa8 	bl	8005f74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f000 fab9 	bl	8005f9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	f003 0301 	and.w	r3, r3, #1
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d00c      	beq.n	8005a54 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f003 0301 	and.w	r3, r3, #1
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d007      	beq.n	8005a54 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f06f 0201 	mvn.w	r2, #1
 8005a4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f000 fa86 	bl	8005f60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d104      	bne.n	8005a68 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d00c      	beq.n	8005a82 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d007      	beq.n	8005a82 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005a7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f000 fff1 	bl	8006a64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d00c      	beq.n	8005aa6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d007      	beq.n	8005aa6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005a9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f000 ffe9 	bl	8006a78 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d00c      	beq.n	8005aca <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d007      	beq.n	8005aca <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005ac2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f000 fa73 	bl	8005fb0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	f003 0320 	and.w	r3, r3, #32
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d00c      	beq.n	8005aee <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f003 0320 	and.w	r3, r3, #32
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d007      	beq.n	8005aee <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f06f 0220 	mvn.w	r2, #32
 8005ae6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f000 ffb1 	bl	8006a50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005aee:	bf00      	nop
 8005af0:	3710      	adds	r7, #16
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
	...

08005af8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b086      	sub	sp, #24
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	60b9      	str	r1, [r7, #8]
 8005b02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b04:	2300      	movs	r3, #0
 8005b06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d101      	bne.n	8005b16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005b12:	2302      	movs	r3, #2
 8005b14:	e0ff      	b.n	8005d16 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2201      	movs	r2, #1
 8005b1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2b14      	cmp	r3, #20
 8005b22:	f200 80f0 	bhi.w	8005d06 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005b26:	a201      	add	r2, pc, #4	@ (adr r2, 8005b2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b2c:	08005b81 	.word	0x08005b81
 8005b30:	08005d07 	.word	0x08005d07
 8005b34:	08005d07 	.word	0x08005d07
 8005b38:	08005d07 	.word	0x08005d07
 8005b3c:	08005bc1 	.word	0x08005bc1
 8005b40:	08005d07 	.word	0x08005d07
 8005b44:	08005d07 	.word	0x08005d07
 8005b48:	08005d07 	.word	0x08005d07
 8005b4c:	08005c03 	.word	0x08005c03
 8005b50:	08005d07 	.word	0x08005d07
 8005b54:	08005d07 	.word	0x08005d07
 8005b58:	08005d07 	.word	0x08005d07
 8005b5c:	08005c43 	.word	0x08005c43
 8005b60:	08005d07 	.word	0x08005d07
 8005b64:	08005d07 	.word	0x08005d07
 8005b68:	08005d07 	.word	0x08005d07
 8005b6c:	08005c85 	.word	0x08005c85
 8005b70:	08005d07 	.word	0x08005d07
 8005b74:	08005d07 	.word	0x08005d07
 8005b78:	08005d07 	.word	0x08005d07
 8005b7c:	08005cc5 	.word	0x08005cc5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	68b9      	ldr	r1, [r7, #8]
 8005b86:	4618      	mov	r0, r3
 8005b88:	f000 fabc 	bl	8006104 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	699a      	ldr	r2, [r3, #24]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f042 0208 	orr.w	r2, r2, #8
 8005b9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	699a      	ldr	r2, [r3, #24]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f022 0204 	bic.w	r2, r2, #4
 8005baa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	6999      	ldr	r1, [r3, #24]
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	691a      	ldr	r2, [r3, #16]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	430a      	orrs	r2, r1
 8005bbc:	619a      	str	r2, [r3, #24]
      break;
 8005bbe:	e0a5      	b.n	8005d0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	68b9      	ldr	r1, [r7, #8]
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f000 fb2c 	bl	8006224 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	699a      	ldr	r2, [r3, #24]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005bda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	699a      	ldr	r2, [r3, #24]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005bea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	6999      	ldr	r1, [r3, #24]
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	021a      	lsls	r2, r3, #8
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	430a      	orrs	r2, r1
 8005bfe:	619a      	str	r2, [r3, #24]
      break;
 8005c00:	e084      	b.n	8005d0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	68b9      	ldr	r1, [r7, #8]
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f000 fb95 	bl	8006338 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	69da      	ldr	r2, [r3, #28]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f042 0208 	orr.w	r2, r2, #8
 8005c1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	69da      	ldr	r2, [r3, #28]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f022 0204 	bic.w	r2, r2, #4
 8005c2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	69d9      	ldr	r1, [r3, #28]
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	691a      	ldr	r2, [r3, #16]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	430a      	orrs	r2, r1
 8005c3e:	61da      	str	r2, [r3, #28]
      break;
 8005c40:	e064      	b.n	8005d0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	68b9      	ldr	r1, [r7, #8]
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f000 fbfd 	bl	8006448 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	69da      	ldr	r2, [r3, #28]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	69da      	ldr	r2, [r3, #28]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	69d9      	ldr	r1, [r3, #28]
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	691b      	ldr	r3, [r3, #16]
 8005c78:	021a      	lsls	r2, r3, #8
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	430a      	orrs	r2, r1
 8005c80:	61da      	str	r2, [r3, #28]
      break;
 8005c82:	e043      	b.n	8005d0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	68b9      	ldr	r1, [r7, #8]
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f000 fc46 	bl	800651c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f042 0208 	orr.w	r2, r2, #8
 8005c9e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f022 0204 	bic.w	r2, r2, #4
 8005cae:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	691a      	ldr	r2, [r3, #16]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	430a      	orrs	r2, r1
 8005cc0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005cc2:	e023      	b.n	8005d0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	68b9      	ldr	r1, [r7, #8]
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f000 fc8a 	bl	80065e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005cde:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005cee:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	021a      	lsls	r2, r3, #8
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	430a      	orrs	r2, r1
 8005d02:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005d04:	e002      	b.n	8005d0c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	75fb      	strb	r3, [r7, #23]
      break;
 8005d0a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d14:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3718      	adds	r7, #24
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop

08005d20 <HAL_TIM_GenerateEvent>:
  *         only for timer instances supporting break input(s).
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_EVENT_SOURCE(EventSource));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d101      	bne.n	8005d38 <HAL_TIM_GenerateEvent+0x18>
 8005d34:	2302      	movs	r3, #2
 8005d36:	e014      	b.n	8005d62 <HAL_TIM_GenerateEvent+0x42>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2202      	movs	r2, #2
 8005d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the event sources */
  htim->Instance->EGR = EventSource;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	683a      	ldr	r2, [r7, #0]
 8005d4e:	615a      	str	r2, [r3, #20]

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8005d60:	2300      	movs	r3, #0
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	370c      	adds	r7, #12
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr
	...

08005d70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b084      	sub	sp, #16
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d101      	bne.n	8005d8c <HAL_TIM_ConfigClockSource+0x1c>
 8005d88:	2302      	movs	r3, #2
 8005d8a:	e0dc      	b.n	8005f46 <HAL_TIM_ConfigClockSource+0x1d6>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2202      	movs	r2, #2
 8005d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005da4:	68ba      	ldr	r2, [r7, #8]
 8005da6:	4b6a      	ldr	r3, [pc, #424]	@ (8005f50 <HAL_TIM_ConfigClockSource+0x1e0>)
 8005da8:	4013      	ands	r3, r2
 8005daa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005db2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	68ba      	ldr	r2, [r7, #8]
 8005dba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a64      	ldr	r2, [pc, #400]	@ (8005f54 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	f000 80a9 	beq.w	8005f1a <HAL_TIM_ConfigClockSource+0x1aa>
 8005dc8:	4a62      	ldr	r2, [pc, #392]	@ (8005f54 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	f200 80ae 	bhi.w	8005f2c <HAL_TIM_ConfigClockSource+0x1bc>
 8005dd0:	4a61      	ldr	r2, [pc, #388]	@ (8005f58 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	f000 80a1 	beq.w	8005f1a <HAL_TIM_ConfigClockSource+0x1aa>
 8005dd8:	4a5f      	ldr	r2, [pc, #380]	@ (8005f58 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	f200 80a6 	bhi.w	8005f2c <HAL_TIM_ConfigClockSource+0x1bc>
 8005de0:	4a5e      	ldr	r2, [pc, #376]	@ (8005f5c <HAL_TIM_ConfigClockSource+0x1ec>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	f000 8099 	beq.w	8005f1a <HAL_TIM_ConfigClockSource+0x1aa>
 8005de8:	4a5c      	ldr	r2, [pc, #368]	@ (8005f5c <HAL_TIM_ConfigClockSource+0x1ec>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	f200 809e 	bhi.w	8005f2c <HAL_TIM_ConfigClockSource+0x1bc>
 8005df0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005df4:	f000 8091 	beq.w	8005f1a <HAL_TIM_ConfigClockSource+0x1aa>
 8005df8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005dfc:	f200 8096 	bhi.w	8005f2c <HAL_TIM_ConfigClockSource+0x1bc>
 8005e00:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e04:	f000 8089 	beq.w	8005f1a <HAL_TIM_ConfigClockSource+0x1aa>
 8005e08:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e0c:	f200 808e 	bhi.w	8005f2c <HAL_TIM_ConfigClockSource+0x1bc>
 8005e10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e14:	d03e      	beq.n	8005e94 <HAL_TIM_ConfigClockSource+0x124>
 8005e16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e1a:	f200 8087 	bhi.w	8005f2c <HAL_TIM_ConfigClockSource+0x1bc>
 8005e1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e22:	f000 8086 	beq.w	8005f32 <HAL_TIM_ConfigClockSource+0x1c2>
 8005e26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e2a:	d87f      	bhi.n	8005f2c <HAL_TIM_ConfigClockSource+0x1bc>
 8005e2c:	2b70      	cmp	r3, #112	@ 0x70
 8005e2e:	d01a      	beq.n	8005e66 <HAL_TIM_ConfigClockSource+0xf6>
 8005e30:	2b70      	cmp	r3, #112	@ 0x70
 8005e32:	d87b      	bhi.n	8005f2c <HAL_TIM_ConfigClockSource+0x1bc>
 8005e34:	2b60      	cmp	r3, #96	@ 0x60
 8005e36:	d050      	beq.n	8005eda <HAL_TIM_ConfigClockSource+0x16a>
 8005e38:	2b60      	cmp	r3, #96	@ 0x60
 8005e3a:	d877      	bhi.n	8005f2c <HAL_TIM_ConfigClockSource+0x1bc>
 8005e3c:	2b50      	cmp	r3, #80	@ 0x50
 8005e3e:	d03c      	beq.n	8005eba <HAL_TIM_ConfigClockSource+0x14a>
 8005e40:	2b50      	cmp	r3, #80	@ 0x50
 8005e42:	d873      	bhi.n	8005f2c <HAL_TIM_ConfigClockSource+0x1bc>
 8005e44:	2b40      	cmp	r3, #64	@ 0x40
 8005e46:	d058      	beq.n	8005efa <HAL_TIM_ConfigClockSource+0x18a>
 8005e48:	2b40      	cmp	r3, #64	@ 0x40
 8005e4a:	d86f      	bhi.n	8005f2c <HAL_TIM_ConfigClockSource+0x1bc>
 8005e4c:	2b30      	cmp	r3, #48	@ 0x30
 8005e4e:	d064      	beq.n	8005f1a <HAL_TIM_ConfigClockSource+0x1aa>
 8005e50:	2b30      	cmp	r3, #48	@ 0x30
 8005e52:	d86b      	bhi.n	8005f2c <HAL_TIM_ConfigClockSource+0x1bc>
 8005e54:	2b20      	cmp	r3, #32
 8005e56:	d060      	beq.n	8005f1a <HAL_TIM_ConfigClockSource+0x1aa>
 8005e58:	2b20      	cmp	r3, #32
 8005e5a:	d867      	bhi.n	8005f2c <HAL_TIM_ConfigClockSource+0x1bc>
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d05c      	beq.n	8005f1a <HAL_TIM_ConfigClockSource+0x1aa>
 8005e60:	2b10      	cmp	r3, #16
 8005e62:	d05a      	beq.n	8005f1a <HAL_TIM_ConfigClockSource+0x1aa>
 8005e64:	e062      	b.n	8005f2c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e76:	f000 fc99 	bl	80067ac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005e88:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	68ba      	ldr	r2, [r7, #8]
 8005e90:	609a      	str	r2, [r3, #8]
      break;
 8005e92:	e04f      	b.n	8005f34 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ea4:	f000 fc82 	bl	80067ac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	689a      	ldr	r2, [r3, #8]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005eb6:	609a      	str	r2, [r3, #8]
      break;
 8005eb8:	e03c      	b.n	8005f34 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	f000 fbf2 	bl	80066b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	2150      	movs	r1, #80	@ 0x50
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f000 fc4c 	bl	8006770 <TIM_ITRx_SetConfig>
      break;
 8005ed8:	e02c      	b.n	8005f34 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	f000 fc11 	bl	800670e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	2160      	movs	r1, #96	@ 0x60
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f000 fc3c 	bl	8006770 <TIM_ITRx_SetConfig>
      break;
 8005ef8:	e01c      	b.n	8005f34 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f06:	461a      	mov	r2, r3
 8005f08:	f000 fbd2 	bl	80066b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2140      	movs	r1, #64	@ 0x40
 8005f12:	4618      	mov	r0, r3
 8005f14:	f000 fc2c 	bl	8006770 <TIM_ITRx_SetConfig>
      break;
 8005f18:	e00c      	b.n	8005f34 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4619      	mov	r1, r3
 8005f24:	4610      	mov	r0, r2
 8005f26:	f000 fc23 	bl	8006770 <TIM_ITRx_SetConfig>
      break;
 8005f2a:	e003      	b.n	8005f34 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	73fb      	strb	r3, [r7, #15]
      break;
 8005f30:	e000      	b.n	8005f34 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8005f32:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3710      	adds	r7, #16
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	ffceff88 	.word	0xffceff88
 8005f54:	00100040 	.word	0x00100040
 8005f58:	00100030 	.word	0x00100030
 8005f5c:	00100020 	.word	0x00100020

08005f60 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b083      	sub	sp, #12
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005f68:	bf00      	nop
 8005f6a:	370c      	adds	r7, #12
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f7c:	bf00      	nop
 8005f7e:	370c      	adds	r7, #12
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b083      	sub	sp, #12
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f90:	bf00      	nop
 8005f92:	370c      	adds	r7, #12
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005fa4:	bf00      	nop
 8005fa6:	370c      	adds	r7, #12
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005fb8:	bf00      	nop
 8005fba:	370c      	adds	r7, #12
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr

08005fc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b085      	sub	sp, #20
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a43      	ldr	r2, [pc, #268]	@ (80060e4 <TIM_Base_SetConfig+0x120>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d013      	beq.n	8006004 <TIM_Base_SetConfig+0x40>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fe2:	d00f      	beq.n	8006004 <TIM_Base_SetConfig+0x40>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	4a40      	ldr	r2, [pc, #256]	@ (80060e8 <TIM_Base_SetConfig+0x124>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d00b      	beq.n	8006004 <TIM_Base_SetConfig+0x40>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	4a3f      	ldr	r2, [pc, #252]	@ (80060ec <TIM_Base_SetConfig+0x128>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d007      	beq.n	8006004 <TIM_Base_SetConfig+0x40>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	4a3e      	ldr	r2, [pc, #248]	@ (80060f0 <TIM_Base_SetConfig+0x12c>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d003      	beq.n	8006004 <TIM_Base_SetConfig+0x40>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	4a3d      	ldr	r2, [pc, #244]	@ (80060f4 <TIM_Base_SetConfig+0x130>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d108      	bne.n	8006016 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800600a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	68fa      	ldr	r2, [r7, #12]
 8006012:	4313      	orrs	r3, r2
 8006014:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a32      	ldr	r2, [pc, #200]	@ (80060e4 <TIM_Base_SetConfig+0x120>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d01f      	beq.n	800605e <TIM_Base_SetConfig+0x9a>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006024:	d01b      	beq.n	800605e <TIM_Base_SetConfig+0x9a>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a2f      	ldr	r2, [pc, #188]	@ (80060e8 <TIM_Base_SetConfig+0x124>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d017      	beq.n	800605e <TIM_Base_SetConfig+0x9a>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4a2e      	ldr	r2, [pc, #184]	@ (80060ec <TIM_Base_SetConfig+0x128>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d013      	beq.n	800605e <TIM_Base_SetConfig+0x9a>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	4a2d      	ldr	r2, [pc, #180]	@ (80060f0 <TIM_Base_SetConfig+0x12c>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d00f      	beq.n	800605e <TIM_Base_SetConfig+0x9a>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a2c      	ldr	r2, [pc, #176]	@ (80060f4 <TIM_Base_SetConfig+0x130>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d00b      	beq.n	800605e <TIM_Base_SetConfig+0x9a>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a2b      	ldr	r2, [pc, #172]	@ (80060f8 <TIM_Base_SetConfig+0x134>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d007      	beq.n	800605e <TIM_Base_SetConfig+0x9a>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a2a      	ldr	r2, [pc, #168]	@ (80060fc <TIM_Base_SetConfig+0x138>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d003      	beq.n	800605e <TIM_Base_SetConfig+0x9a>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4a29      	ldr	r2, [pc, #164]	@ (8006100 <TIM_Base_SetConfig+0x13c>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d108      	bne.n	8006070 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006064:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	68fa      	ldr	r2, [r7, #12]
 800606c:	4313      	orrs	r3, r2
 800606e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	695b      	ldr	r3, [r3, #20]
 800607a:	4313      	orrs	r3, r2
 800607c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	689a      	ldr	r2, [r3, #8]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	4a14      	ldr	r2, [pc, #80]	@ (80060e4 <TIM_Base_SetConfig+0x120>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d00f      	beq.n	80060b6 <TIM_Base_SetConfig+0xf2>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4a16      	ldr	r2, [pc, #88]	@ (80060f4 <TIM_Base_SetConfig+0x130>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d00b      	beq.n	80060b6 <TIM_Base_SetConfig+0xf2>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a15      	ldr	r2, [pc, #84]	@ (80060f8 <TIM_Base_SetConfig+0x134>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d007      	beq.n	80060b6 <TIM_Base_SetConfig+0xf2>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4a14      	ldr	r2, [pc, #80]	@ (80060fc <TIM_Base_SetConfig+0x138>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d003      	beq.n	80060b6 <TIM_Base_SetConfig+0xf2>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4a13      	ldr	r2, [pc, #76]	@ (8006100 <TIM_Base_SetConfig+0x13c>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d103      	bne.n	80060be <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	691a      	ldr	r2, [r3, #16]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f043 0204 	orr.w	r2, r3, #4
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2201      	movs	r2, #1
 80060ce:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	68fa      	ldr	r2, [r7, #12]
 80060d4:	601a      	str	r2, [r3, #0]
}
 80060d6:	bf00      	nop
 80060d8:	3714      	adds	r7, #20
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr
 80060e2:	bf00      	nop
 80060e4:	40010000 	.word	0x40010000
 80060e8:	40000400 	.word	0x40000400
 80060ec:	40000800 	.word	0x40000800
 80060f0:	40000c00 	.word	0x40000c00
 80060f4:	40010400 	.word	0x40010400
 80060f8:	40014000 	.word	0x40014000
 80060fc:	40014400 	.word	0x40014400
 8006100:	40014800 	.word	0x40014800

08006104 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006104:	b480      	push	{r7}
 8006106:	b087      	sub	sp, #28
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6a1b      	ldr	r3, [r3, #32]
 8006112:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6a1b      	ldr	r3, [r3, #32]
 8006118:	f023 0201 	bic.w	r2, r3, #1
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	699b      	ldr	r3, [r3, #24]
 800612a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800612c:	68fa      	ldr	r2, [r7, #12]
 800612e:	4b37      	ldr	r3, [pc, #220]	@ (800620c <TIM_OC1_SetConfig+0x108>)
 8006130:	4013      	ands	r3, r2
 8006132:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f023 0303 	bic.w	r3, r3, #3
 800613a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	68fa      	ldr	r2, [r7, #12]
 8006142:	4313      	orrs	r3, r2
 8006144:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	f023 0302 	bic.w	r3, r3, #2
 800614c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	697a      	ldr	r2, [r7, #20]
 8006154:	4313      	orrs	r3, r2
 8006156:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	4a2d      	ldr	r2, [pc, #180]	@ (8006210 <TIM_OC1_SetConfig+0x10c>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d00f      	beq.n	8006180 <TIM_OC1_SetConfig+0x7c>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	4a2c      	ldr	r2, [pc, #176]	@ (8006214 <TIM_OC1_SetConfig+0x110>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d00b      	beq.n	8006180 <TIM_OC1_SetConfig+0x7c>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	4a2b      	ldr	r2, [pc, #172]	@ (8006218 <TIM_OC1_SetConfig+0x114>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d007      	beq.n	8006180 <TIM_OC1_SetConfig+0x7c>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4a2a      	ldr	r2, [pc, #168]	@ (800621c <TIM_OC1_SetConfig+0x118>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d003      	beq.n	8006180 <TIM_OC1_SetConfig+0x7c>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	4a29      	ldr	r2, [pc, #164]	@ (8006220 <TIM_OC1_SetConfig+0x11c>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d10c      	bne.n	800619a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	f023 0308 	bic.w	r3, r3, #8
 8006186:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	697a      	ldr	r2, [r7, #20]
 800618e:	4313      	orrs	r3, r2
 8006190:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	f023 0304 	bic.w	r3, r3, #4
 8006198:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4a1c      	ldr	r2, [pc, #112]	@ (8006210 <TIM_OC1_SetConfig+0x10c>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d00f      	beq.n	80061c2 <TIM_OC1_SetConfig+0xbe>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4a1b      	ldr	r2, [pc, #108]	@ (8006214 <TIM_OC1_SetConfig+0x110>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d00b      	beq.n	80061c2 <TIM_OC1_SetConfig+0xbe>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4a1a      	ldr	r2, [pc, #104]	@ (8006218 <TIM_OC1_SetConfig+0x114>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d007      	beq.n	80061c2 <TIM_OC1_SetConfig+0xbe>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a19      	ldr	r2, [pc, #100]	@ (800621c <TIM_OC1_SetConfig+0x118>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d003      	beq.n	80061c2 <TIM_OC1_SetConfig+0xbe>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4a18      	ldr	r2, [pc, #96]	@ (8006220 <TIM_OC1_SetConfig+0x11c>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d111      	bne.n	80061e6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80061c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80061d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	695b      	ldr	r3, [r3, #20]
 80061d6:	693a      	ldr	r2, [r7, #16]
 80061d8:	4313      	orrs	r3, r2
 80061da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	699b      	ldr	r3, [r3, #24]
 80061e0:	693a      	ldr	r2, [r7, #16]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	693a      	ldr	r2, [r7, #16]
 80061ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	68fa      	ldr	r2, [r7, #12]
 80061f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	685a      	ldr	r2, [r3, #4]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	697a      	ldr	r2, [r7, #20]
 80061fe:	621a      	str	r2, [r3, #32]
}
 8006200:	bf00      	nop
 8006202:	371c      	adds	r7, #28
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr
 800620c:	fffeff8f 	.word	0xfffeff8f
 8006210:	40010000 	.word	0x40010000
 8006214:	40010400 	.word	0x40010400
 8006218:	40014000 	.word	0x40014000
 800621c:	40014400 	.word	0x40014400
 8006220:	40014800 	.word	0x40014800

08006224 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006224:	b480      	push	{r7}
 8006226:	b087      	sub	sp, #28
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6a1b      	ldr	r3, [r3, #32]
 8006232:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6a1b      	ldr	r3, [r3, #32]
 8006238:	f023 0210 	bic.w	r2, r3, #16
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	699b      	ldr	r3, [r3, #24]
 800624a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800624c:	68fa      	ldr	r2, [r7, #12]
 800624e:	4b34      	ldr	r3, [pc, #208]	@ (8006320 <TIM_OC2_SetConfig+0xfc>)
 8006250:	4013      	ands	r3, r2
 8006252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800625a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	021b      	lsls	r3, r3, #8
 8006262:	68fa      	ldr	r2, [r7, #12]
 8006264:	4313      	orrs	r3, r2
 8006266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	f023 0320 	bic.w	r3, r3, #32
 800626e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	011b      	lsls	r3, r3, #4
 8006276:	697a      	ldr	r2, [r7, #20]
 8006278:	4313      	orrs	r3, r2
 800627a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	4a29      	ldr	r2, [pc, #164]	@ (8006324 <TIM_OC2_SetConfig+0x100>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d003      	beq.n	800628c <TIM_OC2_SetConfig+0x68>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	4a28      	ldr	r2, [pc, #160]	@ (8006328 <TIM_OC2_SetConfig+0x104>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d10d      	bne.n	80062a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006292:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	011b      	lsls	r3, r3, #4
 800629a:	697a      	ldr	r2, [r7, #20]
 800629c:	4313      	orrs	r3, r2
 800629e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	4a1e      	ldr	r2, [pc, #120]	@ (8006324 <TIM_OC2_SetConfig+0x100>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d00f      	beq.n	80062d0 <TIM_OC2_SetConfig+0xac>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	4a1d      	ldr	r2, [pc, #116]	@ (8006328 <TIM_OC2_SetConfig+0x104>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d00b      	beq.n	80062d0 <TIM_OC2_SetConfig+0xac>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	4a1c      	ldr	r2, [pc, #112]	@ (800632c <TIM_OC2_SetConfig+0x108>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d007      	beq.n	80062d0 <TIM_OC2_SetConfig+0xac>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	4a1b      	ldr	r2, [pc, #108]	@ (8006330 <TIM_OC2_SetConfig+0x10c>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d003      	beq.n	80062d0 <TIM_OC2_SetConfig+0xac>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	4a1a      	ldr	r2, [pc, #104]	@ (8006334 <TIM_OC2_SetConfig+0x110>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d113      	bne.n	80062f8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80062d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80062de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	695b      	ldr	r3, [r3, #20]
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	693a      	ldr	r2, [r7, #16]
 80062e8:	4313      	orrs	r3, r2
 80062ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	699b      	ldr	r3, [r3, #24]
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	693a      	ldr	r2, [r7, #16]
 80062f4:	4313      	orrs	r3, r2
 80062f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	693a      	ldr	r2, [r7, #16]
 80062fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	685a      	ldr	r2, [r3, #4]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	697a      	ldr	r2, [r7, #20]
 8006310:	621a      	str	r2, [r3, #32]
}
 8006312:	bf00      	nop
 8006314:	371c      	adds	r7, #28
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr
 800631e:	bf00      	nop
 8006320:	feff8fff 	.word	0xfeff8fff
 8006324:	40010000 	.word	0x40010000
 8006328:	40010400 	.word	0x40010400
 800632c:	40014000 	.word	0x40014000
 8006330:	40014400 	.word	0x40014400
 8006334:	40014800 	.word	0x40014800

08006338 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006338:	b480      	push	{r7}
 800633a:	b087      	sub	sp, #28
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6a1b      	ldr	r3, [r3, #32]
 8006346:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6a1b      	ldr	r3, [r3, #32]
 800634c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	69db      	ldr	r3, [r3, #28]
 800635e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006360:	68fa      	ldr	r2, [r7, #12]
 8006362:	4b33      	ldr	r3, [pc, #204]	@ (8006430 <TIM_OC3_SetConfig+0xf8>)
 8006364:	4013      	ands	r3, r2
 8006366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f023 0303 	bic.w	r3, r3, #3
 800636e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	68fa      	ldr	r2, [r7, #12]
 8006376:	4313      	orrs	r3, r2
 8006378:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006380:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	021b      	lsls	r3, r3, #8
 8006388:	697a      	ldr	r2, [r7, #20]
 800638a:	4313      	orrs	r3, r2
 800638c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4a28      	ldr	r2, [pc, #160]	@ (8006434 <TIM_OC3_SetConfig+0xfc>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d003      	beq.n	800639e <TIM_OC3_SetConfig+0x66>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	4a27      	ldr	r2, [pc, #156]	@ (8006438 <TIM_OC3_SetConfig+0x100>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d10d      	bne.n	80063ba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80063a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	68db      	ldr	r3, [r3, #12]
 80063aa:	021b      	lsls	r3, r3, #8
 80063ac:	697a      	ldr	r2, [r7, #20]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80063b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	4a1d      	ldr	r2, [pc, #116]	@ (8006434 <TIM_OC3_SetConfig+0xfc>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d00f      	beq.n	80063e2 <TIM_OC3_SetConfig+0xaa>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	4a1c      	ldr	r2, [pc, #112]	@ (8006438 <TIM_OC3_SetConfig+0x100>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d00b      	beq.n	80063e2 <TIM_OC3_SetConfig+0xaa>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4a1b      	ldr	r2, [pc, #108]	@ (800643c <TIM_OC3_SetConfig+0x104>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d007      	beq.n	80063e2 <TIM_OC3_SetConfig+0xaa>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4a1a      	ldr	r2, [pc, #104]	@ (8006440 <TIM_OC3_SetConfig+0x108>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d003      	beq.n	80063e2 <TIM_OC3_SetConfig+0xaa>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4a19      	ldr	r2, [pc, #100]	@ (8006444 <TIM_OC3_SetConfig+0x10c>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d113      	bne.n	800640a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80063e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80063f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	695b      	ldr	r3, [r3, #20]
 80063f6:	011b      	lsls	r3, r3, #4
 80063f8:	693a      	ldr	r2, [r7, #16]
 80063fa:	4313      	orrs	r3, r2
 80063fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	699b      	ldr	r3, [r3, #24]
 8006402:	011b      	lsls	r3, r3, #4
 8006404:	693a      	ldr	r2, [r7, #16]
 8006406:	4313      	orrs	r3, r2
 8006408:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	693a      	ldr	r2, [r7, #16]
 800640e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	68fa      	ldr	r2, [r7, #12]
 8006414:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	685a      	ldr	r2, [r3, #4]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	697a      	ldr	r2, [r7, #20]
 8006422:	621a      	str	r2, [r3, #32]
}
 8006424:	bf00      	nop
 8006426:	371c      	adds	r7, #28
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr
 8006430:	fffeff8f 	.word	0xfffeff8f
 8006434:	40010000 	.word	0x40010000
 8006438:	40010400 	.word	0x40010400
 800643c:	40014000 	.word	0x40014000
 8006440:	40014400 	.word	0x40014400
 8006444:	40014800 	.word	0x40014800

08006448 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006448:	b480      	push	{r7}
 800644a:	b087      	sub	sp, #28
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6a1b      	ldr	r3, [r3, #32]
 8006456:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6a1b      	ldr	r3, [r3, #32]
 800645c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	69db      	ldr	r3, [r3, #28]
 800646e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006470:	68fa      	ldr	r2, [r7, #12]
 8006472:	4b24      	ldr	r3, [pc, #144]	@ (8006504 <TIM_OC4_SetConfig+0xbc>)
 8006474:	4013      	ands	r3, r2
 8006476:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800647e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	021b      	lsls	r3, r3, #8
 8006486:	68fa      	ldr	r2, [r7, #12]
 8006488:	4313      	orrs	r3, r2
 800648a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006492:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	031b      	lsls	r3, r3, #12
 800649a:	693a      	ldr	r2, [r7, #16]
 800649c:	4313      	orrs	r3, r2
 800649e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	4a19      	ldr	r2, [pc, #100]	@ (8006508 <TIM_OC4_SetConfig+0xc0>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d00f      	beq.n	80064c8 <TIM_OC4_SetConfig+0x80>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	4a18      	ldr	r2, [pc, #96]	@ (800650c <TIM_OC4_SetConfig+0xc4>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d00b      	beq.n	80064c8 <TIM_OC4_SetConfig+0x80>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	4a17      	ldr	r2, [pc, #92]	@ (8006510 <TIM_OC4_SetConfig+0xc8>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d007      	beq.n	80064c8 <TIM_OC4_SetConfig+0x80>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	4a16      	ldr	r2, [pc, #88]	@ (8006514 <TIM_OC4_SetConfig+0xcc>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d003      	beq.n	80064c8 <TIM_OC4_SetConfig+0x80>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	4a15      	ldr	r2, [pc, #84]	@ (8006518 <TIM_OC4_SetConfig+0xd0>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d109      	bne.n	80064dc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80064ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	695b      	ldr	r3, [r3, #20]
 80064d4:	019b      	lsls	r3, r3, #6
 80064d6:	697a      	ldr	r2, [r7, #20]
 80064d8:	4313      	orrs	r3, r2
 80064da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	697a      	ldr	r2, [r7, #20]
 80064e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	68fa      	ldr	r2, [r7, #12]
 80064e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	685a      	ldr	r2, [r3, #4]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	693a      	ldr	r2, [r7, #16]
 80064f4:	621a      	str	r2, [r3, #32]
}
 80064f6:	bf00      	nop
 80064f8:	371c      	adds	r7, #28
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr
 8006502:	bf00      	nop
 8006504:	feff8fff 	.word	0xfeff8fff
 8006508:	40010000 	.word	0x40010000
 800650c:	40010400 	.word	0x40010400
 8006510:	40014000 	.word	0x40014000
 8006514:	40014400 	.word	0x40014400
 8006518:	40014800 	.word	0x40014800

0800651c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800651c:	b480      	push	{r7}
 800651e:	b087      	sub	sp, #28
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6a1b      	ldr	r3, [r3, #32]
 800652a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6a1b      	ldr	r3, [r3, #32]
 8006530:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006544:	68fa      	ldr	r2, [r7, #12]
 8006546:	4b21      	ldr	r3, [pc, #132]	@ (80065cc <TIM_OC5_SetConfig+0xb0>)
 8006548:	4013      	ands	r3, r2
 800654a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	68fa      	ldr	r2, [r7, #12]
 8006552:	4313      	orrs	r3, r2
 8006554:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800655c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	041b      	lsls	r3, r3, #16
 8006564:	693a      	ldr	r2, [r7, #16]
 8006566:	4313      	orrs	r3, r2
 8006568:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4a18      	ldr	r2, [pc, #96]	@ (80065d0 <TIM_OC5_SetConfig+0xb4>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d00f      	beq.n	8006592 <TIM_OC5_SetConfig+0x76>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4a17      	ldr	r2, [pc, #92]	@ (80065d4 <TIM_OC5_SetConfig+0xb8>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d00b      	beq.n	8006592 <TIM_OC5_SetConfig+0x76>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	4a16      	ldr	r2, [pc, #88]	@ (80065d8 <TIM_OC5_SetConfig+0xbc>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d007      	beq.n	8006592 <TIM_OC5_SetConfig+0x76>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	4a15      	ldr	r2, [pc, #84]	@ (80065dc <TIM_OC5_SetConfig+0xc0>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d003      	beq.n	8006592 <TIM_OC5_SetConfig+0x76>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	4a14      	ldr	r2, [pc, #80]	@ (80065e0 <TIM_OC5_SetConfig+0xc4>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d109      	bne.n	80065a6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006598:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	695b      	ldr	r3, [r3, #20]
 800659e:	021b      	lsls	r3, r3, #8
 80065a0:	697a      	ldr	r2, [r7, #20]
 80065a2:	4313      	orrs	r3, r2
 80065a4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	697a      	ldr	r2, [r7, #20]
 80065aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	68fa      	ldr	r2, [r7, #12]
 80065b0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	685a      	ldr	r2, [r3, #4]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	693a      	ldr	r2, [r7, #16]
 80065be:	621a      	str	r2, [r3, #32]
}
 80065c0:	bf00      	nop
 80065c2:	371c      	adds	r7, #28
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr
 80065cc:	fffeff8f 	.word	0xfffeff8f
 80065d0:	40010000 	.word	0x40010000
 80065d4:	40010400 	.word	0x40010400
 80065d8:	40014000 	.word	0x40014000
 80065dc:	40014400 	.word	0x40014400
 80065e0:	40014800 	.word	0x40014800

080065e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b087      	sub	sp, #28
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6a1b      	ldr	r3, [r3, #32]
 80065f2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6a1b      	ldr	r3, [r3, #32]
 80065f8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800660a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800660c:	68fa      	ldr	r2, [r7, #12]
 800660e:	4b22      	ldr	r3, [pc, #136]	@ (8006698 <TIM_OC6_SetConfig+0xb4>)
 8006610:	4013      	ands	r3, r2
 8006612:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	021b      	lsls	r3, r3, #8
 800661a:	68fa      	ldr	r2, [r7, #12]
 800661c:	4313      	orrs	r3, r2
 800661e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006626:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	051b      	lsls	r3, r3, #20
 800662e:	693a      	ldr	r2, [r7, #16]
 8006630:	4313      	orrs	r3, r2
 8006632:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	4a19      	ldr	r2, [pc, #100]	@ (800669c <TIM_OC6_SetConfig+0xb8>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d00f      	beq.n	800665c <TIM_OC6_SetConfig+0x78>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	4a18      	ldr	r2, [pc, #96]	@ (80066a0 <TIM_OC6_SetConfig+0xbc>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d00b      	beq.n	800665c <TIM_OC6_SetConfig+0x78>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	4a17      	ldr	r2, [pc, #92]	@ (80066a4 <TIM_OC6_SetConfig+0xc0>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d007      	beq.n	800665c <TIM_OC6_SetConfig+0x78>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4a16      	ldr	r2, [pc, #88]	@ (80066a8 <TIM_OC6_SetConfig+0xc4>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d003      	beq.n	800665c <TIM_OC6_SetConfig+0x78>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	4a15      	ldr	r2, [pc, #84]	@ (80066ac <TIM_OC6_SetConfig+0xc8>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d109      	bne.n	8006670 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006662:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	695b      	ldr	r3, [r3, #20]
 8006668:	029b      	lsls	r3, r3, #10
 800666a:	697a      	ldr	r2, [r7, #20]
 800666c:	4313      	orrs	r3, r2
 800666e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	697a      	ldr	r2, [r7, #20]
 8006674:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	68fa      	ldr	r2, [r7, #12]
 800667a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	685a      	ldr	r2, [r3, #4]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	693a      	ldr	r2, [r7, #16]
 8006688:	621a      	str	r2, [r3, #32]
}
 800668a:	bf00      	nop
 800668c:	371c      	adds	r7, #28
 800668e:	46bd      	mov	sp, r7
 8006690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006694:	4770      	bx	lr
 8006696:	bf00      	nop
 8006698:	feff8fff 	.word	0xfeff8fff
 800669c:	40010000 	.word	0x40010000
 80066a0:	40010400 	.word	0x40010400
 80066a4:	40014000 	.word	0x40014000
 80066a8:	40014400 	.word	0x40014400
 80066ac:	40014800 	.word	0x40014800

080066b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b087      	sub	sp, #28
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	60f8      	str	r0, [r7, #12]
 80066b8:	60b9      	str	r1, [r7, #8]
 80066ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	6a1b      	ldr	r3, [r3, #32]
 80066c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	6a1b      	ldr	r3, [r3, #32]
 80066c6:	f023 0201 	bic.w	r2, r3, #1
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	699b      	ldr	r3, [r3, #24]
 80066d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80066da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	011b      	lsls	r3, r3, #4
 80066e0:	693a      	ldr	r2, [r7, #16]
 80066e2:	4313      	orrs	r3, r2
 80066e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	f023 030a 	bic.w	r3, r3, #10
 80066ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80066ee:	697a      	ldr	r2, [r7, #20]
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	693a      	ldr	r2, [r7, #16]
 80066fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	697a      	ldr	r2, [r7, #20]
 8006700:	621a      	str	r2, [r3, #32]
}
 8006702:	bf00      	nop
 8006704:	371c      	adds	r7, #28
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr

0800670e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800670e:	b480      	push	{r7}
 8006710:	b087      	sub	sp, #28
 8006712:	af00      	add	r7, sp, #0
 8006714:	60f8      	str	r0, [r7, #12]
 8006716:	60b9      	str	r1, [r7, #8]
 8006718:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	6a1b      	ldr	r3, [r3, #32]
 800671e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	6a1b      	ldr	r3, [r3, #32]
 8006724:	f023 0210 	bic.w	r2, r3, #16
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	699b      	ldr	r3, [r3, #24]
 8006730:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006738:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	031b      	lsls	r3, r3, #12
 800673e:	693a      	ldr	r2, [r7, #16]
 8006740:	4313      	orrs	r3, r2
 8006742:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800674a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	011b      	lsls	r3, r3, #4
 8006750:	697a      	ldr	r2, [r7, #20]
 8006752:	4313      	orrs	r3, r2
 8006754:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	693a      	ldr	r2, [r7, #16]
 800675a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	697a      	ldr	r2, [r7, #20]
 8006760:	621a      	str	r2, [r3, #32]
}
 8006762:	bf00      	nop
 8006764:	371c      	adds	r7, #28
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr
	...

08006770 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006770:	b480      	push	{r7}
 8006772:	b085      	sub	sp, #20
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006780:	68fa      	ldr	r2, [r7, #12]
 8006782:	4b09      	ldr	r3, [pc, #36]	@ (80067a8 <TIM_ITRx_SetConfig+0x38>)
 8006784:	4013      	ands	r3, r2
 8006786:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006788:	683a      	ldr	r2, [r7, #0]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	4313      	orrs	r3, r2
 800678e:	f043 0307 	orr.w	r3, r3, #7
 8006792:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	68fa      	ldr	r2, [r7, #12]
 8006798:	609a      	str	r2, [r3, #8]
}
 800679a:	bf00      	nop
 800679c:	3714      	adds	r7, #20
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr
 80067a6:	bf00      	nop
 80067a8:	ffcfff8f 	.word	0xffcfff8f

080067ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b087      	sub	sp, #28
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	60f8      	str	r0, [r7, #12]
 80067b4:	60b9      	str	r1, [r7, #8]
 80067b6:	607a      	str	r2, [r7, #4]
 80067b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80067c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	021a      	lsls	r2, r3, #8
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	431a      	orrs	r2, r3
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	4313      	orrs	r3, r2
 80067d4:	697a      	ldr	r2, [r7, #20]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	697a      	ldr	r2, [r7, #20]
 80067de:	609a      	str	r2, [r3, #8]
}
 80067e0:	bf00      	nop
 80067e2:	371c      	adds	r7, #28
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr

080067ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b087      	sub	sp, #28
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	60f8      	str	r0, [r7, #12]
 80067f4:	60b9      	str	r1, [r7, #8]
 80067f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	f003 031f 	and.w	r3, r3, #31
 80067fe:	2201      	movs	r2, #1
 8006800:	fa02 f303 	lsl.w	r3, r2, r3
 8006804:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6a1a      	ldr	r2, [r3, #32]
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	43db      	mvns	r3, r3
 800680e:	401a      	ands	r2, r3
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	6a1a      	ldr	r2, [r3, #32]
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	f003 031f 	and.w	r3, r3, #31
 800681e:	6879      	ldr	r1, [r7, #4]
 8006820:	fa01 f303 	lsl.w	r3, r1, r3
 8006824:	431a      	orrs	r2, r3
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	621a      	str	r2, [r3, #32]
}
 800682a:	bf00      	nop
 800682c:	371c      	adds	r7, #28
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr
	...

08006838 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006838:	b480      	push	{r7}
 800683a:	b085      	sub	sp, #20
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006848:	2b01      	cmp	r3, #1
 800684a:	d101      	bne.n	8006850 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800684c:	2302      	movs	r3, #2
 800684e:	e06d      	b.n	800692c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2201      	movs	r2, #1
 8006854:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2202      	movs	r2, #2
 800685c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a30      	ldr	r2, [pc, #192]	@ (8006938 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d004      	beq.n	8006884 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a2f      	ldr	r2, [pc, #188]	@ (800693c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d108      	bne.n	8006896 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800688a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	68fa      	ldr	r2, [r7, #12]
 8006892:	4313      	orrs	r3, r2
 8006894:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800689c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	68fa      	ldr	r2, [r7, #12]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	68fa      	ldr	r2, [r7, #12]
 80068ae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a20      	ldr	r2, [pc, #128]	@ (8006938 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d022      	beq.n	8006900 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068c2:	d01d      	beq.n	8006900 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a1d      	ldr	r2, [pc, #116]	@ (8006940 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d018      	beq.n	8006900 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a1c      	ldr	r2, [pc, #112]	@ (8006944 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d013      	beq.n	8006900 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a1a      	ldr	r2, [pc, #104]	@ (8006948 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d00e      	beq.n	8006900 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a15      	ldr	r2, [pc, #84]	@ (800693c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d009      	beq.n	8006900 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a16      	ldr	r2, [pc, #88]	@ (800694c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d004      	beq.n	8006900 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a15      	ldr	r2, [pc, #84]	@ (8006950 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d10c      	bne.n	800691a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006906:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	68ba      	ldr	r2, [r7, #8]
 800690e:	4313      	orrs	r3, r2
 8006910:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	68ba      	ldr	r2, [r7, #8]
 8006918:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2201      	movs	r2, #1
 800691e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2200      	movs	r2, #0
 8006926:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800692a:	2300      	movs	r3, #0
}
 800692c:	4618      	mov	r0, r3
 800692e:	3714      	adds	r7, #20
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr
 8006938:	40010000 	.word	0x40010000
 800693c:	40010400 	.word	0x40010400
 8006940:	40000400 	.word	0x40000400
 8006944:	40000800 	.word	0x40000800
 8006948:	40000c00 	.word	0x40000c00
 800694c:	40001800 	.word	0x40001800
 8006950:	40014000 	.word	0x40014000

08006954 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006954:	b480      	push	{r7}
 8006956:	b085      	sub	sp, #20
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800695e:	2300      	movs	r3, #0
 8006960:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006968:	2b01      	cmp	r3, #1
 800696a:	d101      	bne.n	8006970 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800696c:	2302      	movs	r3, #2
 800696e:	e065      	b.n	8006a3c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2201      	movs	r2, #1
 8006974:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	68db      	ldr	r3, [r3, #12]
 8006982:	4313      	orrs	r3, r2
 8006984:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	4313      	orrs	r3, r2
 8006992:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	4313      	orrs	r3, r2
 80069a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4313      	orrs	r3, r2
 80069ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	4313      	orrs	r3, r2
 80069bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	695b      	ldr	r3, [r3, #20]
 80069c8:	4313      	orrs	r3, r2
 80069ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069d6:	4313      	orrs	r3, r2
 80069d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	699b      	ldr	r3, [r3, #24]
 80069e4:	041b      	lsls	r3, r3, #16
 80069e6:	4313      	orrs	r3, r2
 80069e8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a16      	ldr	r2, [pc, #88]	@ (8006a48 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d004      	beq.n	80069fe <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a14      	ldr	r2, [pc, #80]	@ (8006a4c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d115      	bne.n	8006a2a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a08:	051b      	lsls	r3, r3, #20
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	69db      	ldr	r3, [r3, #28]
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	6a1b      	ldr	r3, [r3, #32]
 8006a26:	4313      	orrs	r3, r2
 8006a28:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	68fa      	ldr	r2, [r7, #12]
 8006a30:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2200      	movs	r2, #0
 8006a36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006a3a:	2300      	movs	r3, #0
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3714      	adds	r7, #20
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr
 8006a48:	40010000 	.word	0x40010000
 8006a4c:	40010400 	.word	0x40010400

08006a50 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b083      	sub	sp, #12
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a58:	bf00      	nop
 8006a5a:	370c      	adds	r7, #12
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr

08006a64 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b083      	sub	sp, #12
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a6c:	bf00      	nop
 8006a6e:	370c      	adds	r7, #12
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr

08006a78 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b083      	sub	sp, #12
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006a80:	bf00      	nop
 8006a82:	370c      	adds	r7, #12
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr

08006a8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b082      	sub	sp, #8
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d101      	bne.n	8006a9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e042      	b.n	8006b24 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d106      	bne.n	8006ab6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f7fa fca3 	bl	80013fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2224      	movs	r2, #36	@ 0x24
 8006aba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f022 0201 	bic.w	r2, r2, #1
 8006acc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d002      	beq.n	8006adc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f001 fa14 	bl	8007f04 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f000 fca9 	bl	8007434 <UART_SetConfig>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d101      	bne.n	8006aec <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e01b      	b.n	8006b24 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	685a      	ldr	r2, [r3, #4]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006afa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	689a      	ldr	r2, [r3, #8]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006b0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f042 0201 	orr.w	r2, r2, #1
 8006b1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f001 fa93 	bl	8008048 <UART_CheckIdleState>
 8006b22:	4603      	mov	r3, r0
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3708      	adds	r7, #8
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b08a      	sub	sp, #40	@ 0x28
 8006b30:	af02      	add	r7, sp, #8
 8006b32:	60f8      	str	r0, [r7, #12]
 8006b34:	60b9      	str	r1, [r7, #8]
 8006b36:	603b      	str	r3, [r7, #0]
 8006b38:	4613      	mov	r3, r2
 8006b3a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b42:	2b20      	cmp	r3, #32
 8006b44:	d17b      	bne.n	8006c3e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d002      	beq.n	8006b52 <HAL_UART_Transmit+0x26>
 8006b4c:	88fb      	ldrh	r3, [r7, #6]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d101      	bne.n	8006b56 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	e074      	b.n	8006c40 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2221      	movs	r2, #33	@ 0x21
 8006b62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006b66:	f7fa fd7f 	bl	8001668 <HAL_GetTick>
 8006b6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	88fa      	ldrh	r2, [r7, #6]
 8006b70:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	88fa      	ldrh	r2, [r7, #6]
 8006b78:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b84:	d108      	bne.n	8006b98 <HAL_UART_Transmit+0x6c>
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	691b      	ldr	r3, [r3, #16]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d104      	bne.n	8006b98 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	61bb      	str	r3, [r7, #24]
 8006b96:	e003      	b.n	8006ba0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006ba0:	e030      	b.n	8006c04 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	9300      	str	r3, [sp, #0]
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	2180      	movs	r1, #128	@ 0x80
 8006bac:	68f8      	ldr	r0, [r7, #12]
 8006bae:	f001 faf5 	bl	800819c <UART_WaitOnFlagUntilTimeout>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d005      	beq.n	8006bc4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2220      	movs	r2, #32
 8006bbc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006bc0:	2303      	movs	r3, #3
 8006bc2:	e03d      	b.n	8006c40 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006bc4:	69fb      	ldr	r3, [r7, #28]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d10b      	bne.n	8006be2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006bca:	69bb      	ldr	r3, [r7, #24]
 8006bcc:	881b      	ldrh	r3, [r3, #0]
 8006bce:	461a      	mov	r2, r3
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006bd8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006bda:	69bb      	ldr	r3, [r7, #24]
 8006bdc:	3302      	adds	r3, #2
 8006bde:	61bb      	str	r3, [r7, #24]
 8006be0:	e007      	b.n	8006bf2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006be2:	69fb      	ldr	r3, [r7, #28]
 8006be4:	781a      	ldrb	r2, [r3, #0]
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006bec:	69fb      	ldr	r3, [r7, #28]
 8006bee:	3301      	adds	r3, #1
 8006bf0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	3b01      	subs	r3, #1
 8006bfc:	b29a      	uxth	r2, r3
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d1c8      	bne.n	8006ba2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	9300      	str	r3, [sp, #0]
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	2200      	movs	r2, #0
 8006c18:	2140      	movs	r1, #64	@ 0x40
 8006c1a:	68f8      	ldr	r0, [r7, #12]
 8006c1c:	f001 fabe 	bl	800819c <UART_WaitOnFlagUntilTimeout>
 8006c20:	4603      	mov	r3, r0
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d005      	beq.n	8006c32 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2220      	movs	r2, #32
 8006c2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006c2e:	2303      	movs	r3, #3
 8006c30:	e006      	b.n	8006c40 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2220      	movs	r2, #32
 8006c36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	e000      	b.n	8006c40 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006c3e:	2302      	movs	r3, #2
  }
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3720      	adds	r7, #32
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}

08006c48 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b0ba      	sub	sp, #232	@ 0xe8
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	69db      	ldr	r3, [r3, #28]
 8006c56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006c6e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006c72:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006c76:	4013      	ands	r3, r2
 8006c78:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006c7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d11b      	bne.n	8006cbc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006c84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c88:	f003 0320 	and.w	r3, r3, #32
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d015      	beq.n	8006cbc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006c90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c94:	f003 0320 	and.w	r3, r3, #32
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d105      	bne.n	8006ca8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006c9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ca0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d009      	beq.n	8006cbc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	f000 8393 	beq.w	80073d8 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	4798      	blx	r3
      }
      return;
 8006cba:	e38d      	b.n	80073d8 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006cbc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	f000 8123 	beq.w	8006f0c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006cc6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006cca:	4b8d      	ldr	r3, [pc, #564]	@ (8006f00 <HAL_UART_IRQHandler+0x2b8>)
 8006ccc:	4013      	ands	r3, r2
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d106      	bne.n	8006ce0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006cd2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006cd6:	4b8b      	ldr	r3, [pc, #556]	@ (8006f04 <HAL_UART_IRQHandler+0x2bc>)
 8006cd8:	4013      	ands	r3, r2
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	f000 8116 	beq.w	8006f0c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006ce0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ce4:	f003 0301 	and.w	r3, r3, #1
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d011      	beq.n	8006d10 <HAL_UART_IRQHandler+0xc8>
 8006cec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d00b      	beq.n	8006d10 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d06:	f043 0201 	orr.w	r2, r3, #1
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d14:	f003 0302 	and.w	r3, r3, #2
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d011      	beq.n	8006d40 <HAL_UART_IRQHandler+0xf8>
 8006d1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d20:	f003 0301 	and.w	r3, r3, #1
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d00b      	beq.n	8006d40 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	2202      	movs	r2, #2
 8006d2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d36:	f043 0204 	orr.w	r2, r3, #4
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d44:	f003 0304 	and.w	r3, r3, #4
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d011      	beq.n	8006d70 <HAL_UART_IRQHandler+0x128>
 8006d4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d50:	f003 0301 	and.w	r3, r3, #1
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d00b      	beq.n	8006d70 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	2204      	movs	r2, #4
 8006d5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d66:	f043 0202 	orr.w	r2, r3, #2
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006d70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d74:	f003 0308 	and.w	r3, r3, #8
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d017      	beq.n	8006dac <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006d7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d80:	f003 0320 	and.w	r3, r3, #32
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d105      	bne.n	8006d94 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006d88:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006d8c:	4b5c      	ldr	r3, [pc, #368]	@ (8006f00 <HAL_UART_IRQHandler+0x2b8>)
 8006d8e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d00b      	beq.n	8006dac <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	2208      	movs	r2, #8
 8006d9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006da2:	f043 0208 	orr.w	r2, r3, #8
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006dac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006db0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d012      	beq.n	8006dde <HAL_UART_IRQHandler+0x196>
 8006db8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006dbc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d00c      	beq.n	8006dde <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006dcc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006dd4:	f043 0220 	orr.w	r2, r3, #32
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	f000 82f9 	beq.w	80073dc <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006dea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006dee:	f003 0320 	and.w	r3, r3, #32
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d013      	beq.n	8006e1e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006df6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006dfa:	f003 0320 	and.w	r3, r3, #32
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d105      	bne.n	8006e0e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006e02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d007      	beq.n	8006e1e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d003      	beq.n	8006e1e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e24:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e32:	2b40      	cmp	r3, #64	@ 0x40
 8006e34:	d005      	beq.n	8006e42 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006e36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e3a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d054      	beq.n	8006eec <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f001 fa18 	bl	8008278 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e52:	2b40      	cmp	r3, #64	@ 0x40
 8006e54:	d146      	bne.n	8006ee4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	3308      	adds	r3, #8
 8006e5c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e60:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006e64:	e853 3f00 	ldrex	r3, [r3]
 8006e68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006e6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006e70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	3308      	adds	r3, #8
 8006e7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006e82:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006e86:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006e8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006e92:	e841 2300 	strex	r3, r2, [r1]
 8006e96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006e9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d1d9      	bne.n	8006e56 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d017      	beq.n	8006edc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006eb2:	4a15      	ldr	r2, [pc, #84]	@ (8006f08 <HAL_UART_IRQHandler+0x2c0>)
 8006eb4:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f7fb f8b5 	bl	800202c <HAL_DMA_Abort_IT>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d019      	beq.n	8006efc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ece:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ed0:	687a      	ldr	r2, [r7, #4]
 8006ed2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006ed6:	4610      	mov	r0, r2
 8006ed8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eda:	e00f      	b.n	8006efc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f000 fa93 	bl	8007408 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ee2:	e00b      	b.n	8006efc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f000 fa8f 	bl	8007408 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eea:	e007      	b.n	8006efc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f000 fa8b 	bl	8007408 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006efa:	e26f      	b.n	80073dc <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006efc:	bf00      	nop
    return;
 8006efe:	e26d      	b.n	80073dc <HAL_UART_IRQHandler+0x794>
 8006f00:	10000001 	.word	0x10000001
 8006f04:	04000120 	.word	0x04000120
 8006f08:	08008345 	.word	0x08008345

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	f040 8203 	bne.w	800731c <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f1a:	f003 0310 	and.w	r3, r3, #16
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	f000 81fc 	beq.w	800731c <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006f24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f28:	f003 0310 	and.w	r3, r3, #16
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	f000 81f5 	beq.w	800731c <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	2210      	movs	r2, #16
 8006f38:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f44:	2b40      	cmp	r3, #64	@ 0x40
 8006f46:	f040 816d 	bne.w	8007224 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4aa4      	ldr	r2, [pc, #656]	@ (80071e4 <HAL_UART_IRQHandler+0x59c>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d068      	beq.n	800702a <HAL_UART_IRQHandler+0x3e2>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4aa1      	ldr	r2, [pc, #644]	@ (80071e8 <HAL_UART_IRQHandler+0x5a0>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d061      	beq.n	800702a <HAL_UART_IRQHandler+0x3e2>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a9f      	ldr	r2, [pc, #636]	@ (80071ec <HAL_UART_IRQHandler+0x5a4>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d05a      	beq.n	800702a <HAL_UART_IRQHandler+0x3e2>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a9c      	ldr	r2, [pc, #624]	@ (80071f0 <HAL_UART_IRQHandler+0x5a8>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d053      	beq.n	800702a <HAL_UART_IRQHandler+0x3e2>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a9a      	ldr	r2, [pc, #616]	@ (80071f4 <HAL_UART_IRQHandler+0x5ac>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d04c      	beq.n	800702a <HAL_UART_IRQHandler+0x3e2>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a97      	ldr	r2, [pc, #604]	@ (80071f8 <HAL_UART_IRQHandler+0x5b0>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d045      	beq.n	800702a <HAL_UART_IRQHandler+0x3e2>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a95      	ldr	r2, [pc, #596]	@ (80071fc <HAL_UART_IRQHandler+0x5b4>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d03e      	beq.n	800702a <HAL_UART_IRQHandler+0x3e2>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a92      	ldr	r2, [pc, #584]	@ (8007200 <HAL_UART_IRQHandler+0x5b8>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d037      	beq.n	800702a <HAL_UART_IRQHandler+0x3e2>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a90      	ldr	r2, [pc, #576]	@ (8007204 <HAL_UART_IRQHandler+0x5bc>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d030      	beq.n	800702a <HAL_UART_IRQHandler+0x3e2>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a8d      	ldr	r2, [pc, #564]	@ (8007208 <HAL_UART_IRQHandler+0x5c0>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d029      	beq.n	800702a <HAL_UART_IRQHandler+0x3e2>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a8b      	ldr	r2, [pc, #556]	@ (800720c <HAL_UART_IRQHandler+0x5c4>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d022      	beq.n	800702a <HAL_UART_IRQHandler+0x3e2>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a88      	ldr	r2, [pc, #544]	@ (8007210 <HAL_UART_IRQHandler+0x5c8>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d01b      	beq.n	800702a <HAL_UART_IRQHandler+0x3e2>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a86      	ldr	r2, [pc, #536]	@ (8007214 <HAL_UART_IRQHandler+0x5cc>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d014      	beq.n	800702a <HAL_UART_IRQHandler+0x3e2>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a83      	ldr	r2, [pc, #524]	@ (8007218 <HAL_UART_IRQHandler+0x5d0>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d00d      	beq.n	800702a <HAL_UART_IRQHandler+0x3e2>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a81      	ldr	r2, [pc, #516]	@ (800721c <HAL_UART_IRQHandler+0x5d4>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d006      	beq.n	800702a <HAL_UART_IRQHandler+0x3e2>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a7e      	ldr	r2, [pc, #504]	@ (8007220 <HAL_UART_IRQHandler+0x5d8>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d106      	bne.n	8007038 <HAL_UART_IRQHandler+0x3f0>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	b29b      	uxth	r3, r3
 8007036:	e005      	b.n	8007044 <HAL_UART_IRQHandler+0x3fc>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	b29b      	uxth	r3, r3
 8007044:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007048:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800704c:	2b00      	cmp	r3, #0
 800704e:	f000 80ad 	beq.w	80071ac <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007058:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800705c:	429a      	cmp	r2, r3
 800705e:	f080 80a5 	bcs.w	80071ac <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007068:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007072:	69db      	ldr	r3, [r3, #28]
 8007074:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007078:	f000 8087 	beq.w	800718a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007084:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007088:	e853 3f00 	ldrex	r3, [r3]
 800708c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007090:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007094:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007098:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	461a      	mov	r2, r3
 80070a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80070a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80070aa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80070b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80070b6:	e841 2300 	strex	r3, r2, [r1]
 80070ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80070be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d1da      	bne.n	800707c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	3308      	adds	r3, #8
 80070cc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80070d0:	e853 3f00 	ldrex	r3, [r3]
 80070d4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80070d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80070d8:	f023 0301 	bic.w	r3, r3, #1
 80070dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	3308      	adds	r3, #8
 80070e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80070ea:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80070ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80070f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80070f6:	e841 2300 	strex	r3, r2, [r1]
 80070fa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80070fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d1e1      	bne.n	80070c6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	3308      	adds	r3, #8
 8007108:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800710a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800710c:	e853 3f00 	ldrex	r3, [r3]
 8007110:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007112:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007114:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007118:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	3308      	adds	r3, #8
 8007122:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007126:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007128:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800712a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800712c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800712e:	e841 2300 	strex	r3, r2, [r1]
 8007132:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007134:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007136:	2b00      	cmp	r3, #0
 8007138:	d1e3      	bne.n	8007102 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2220      	movs	r2, #32
 800713e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2200      	movs	r2, #0
 8007146:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800714e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007150:	e853 3f00 	ldrex	r3, [r3]
 8007154:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007156:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007158:	f023 0310 	bic.w	r3, r3, #16
 800715c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	461a      	mov	r2, r3
 8007166:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800716a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800716c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800716e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007170:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007172:	e841 2300 	strex	r3, r2, [r1]
 8007176:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007178:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800717a:	2b00      	cmp	r3, #0
 800717c:	d1e4      	bne.n	8007148 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007184:	4618      	mov	r0, r3
 8007186:	f7fa fc33 	bl	80019f0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2202      	movs	r2, #2
 800718e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800719c:	b29b      	uxth	r3, r3
 800719e:	1ad3      	subs	r3, r2, r3
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	4619      	mov	r1, r3
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f000 f939 	bl	800741c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80071aa:	e119      	b.n	80073e0 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80071b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80071b6:	429a      	cmp	r2, r3
 80071b8:	f040 8112 	bne.w	80073e0 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071c2:	69db      	ldr	r3, [r3, #28]
 80071c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071c8:	f040 810a 	bne.w	80073e0 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2202      	movs	r2, #2
 80071d0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80071d8:	4619      	mov	r1, r3
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f000 f91e 	bl	800741c <HAL_UARTEx_RxEventCallback>
      return;
 80071e0:	e0fe      	b.n	80073e0 <HAL_UART_IRQHandler+0x798>
 80071e2:	bf00      	nop
 80071e4:	40020010 	.word	0x40020010
 80071e8:	40020028 	.word	0x40020028
 80071ec:	40020040 	.word	0x40020040
 80071f0:	40020058 	.word	0x40020058
 80071f4:	40020070 	.word	0x40020070
 80071f8:	40020088 	.word	0x40020088
 80071fc:	400200a0 	.word	0x400200a0
 8007200:	400200b8 	.word	0x400200b8
 8007204:	40020410 	.word	0x40020410
 8007208:	40020428 	.word	0x40020428
 800720c:	40020440 	.word	0x40020440
 8007210:	40020458 	.word	0x40020458
 8007214:	40020470 	.word	0x40020470
 8007218:	40020488 	.word	0x40020488
 800721c:	400204a0 	.word	0x400204a0
 8007220:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007230:	b29b      	uxth	r3, r3
 8007232:	1ad3      	subs	r3, r2, r3
 8007234:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800723e:	b29b      	uxth	r3, r3
 8007240:	2b00      	cmp	r3, #0
 8007242:	f000 80cf 	beq.w	80073e4 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8007246:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800724a:	2b00      	cmp	r3, #0
 800724c:	f000 80ca 	beq.w	80073e4 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007258:	e853 3f00 	ldrex	r3, [r3]
 800725c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800725e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007260:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007264:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	461a      	mov	r2, r3
 800726e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007272:	647b      	str	r3, [r7, #68]	@ 0x44
 8007274:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007276:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007278:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800727a:	e841 2300 	strex	r3, r2, [r1]
 800727e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007280:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007282:	2b00      	cmp	r3, #0
 8007284:	d1e4      	bne.n	8007250 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	3308      	adds	r3, #8
 800728c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800728e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007290:	e853 3f00 	ldrex	r3, [r3]
 8007294:	623b      	str	r3, [r7, #32]
   return(result);
 8007296:	6a3a      	ldr	r2, [r7, #32]
 8007298:	4b55      	ldr	r3, [pc, #340]	@ (80073f0 <HAL_UART_IRQHandler+0x7a8>)
 800729a:	4013      	ands	r3, r2
 800729c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	3308      	adds	r3, #8
 80072a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80072aa:	633a      	str	r2, [r7, #48]	@ 0x30
 80072ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80072b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072b2:	e841 2300 	strex	r3, r2, [r1]
 80072b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80072b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d1e3      	bne.n	8007286 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2220      	movs	r2, #32
 80072c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2200      	movs	r2, #0
 80072ca:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	e853 3f00 	ldrex	r3, [r3]
 80072de:	60fb      	str	r3, [r7, #12]
   return(result);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f023 0310 	bic.w	r3, r3, #16
 80072e6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	461a      	mov	r2, r3
 80072f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80072f4:	61fb      	str	r3, [r7, #28]
 80072f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f8:	69b9      	ldr	r1, [r7, #24]
 80072fa:	69fa      	ldr	r2, [r7, #28]
 80072fc:	e841 2300 	strex	r3, r2, [r1]
 8007300:	617b      	str	r3, [r7, #20]
   return(result);
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d1e4      	bne.n	80072d2 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2202      	movs	r2, #2
 800730c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800730e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007312:	4619      	mov	r1, r3
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f000 f881 	bl	800741c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800731a:	e063      	b.n	80073e4 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800731c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007320:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007324:	2b00      	cmp	r3, #0
 8007326:	d00e      	beq.n	8007346 <HAL_UART_IRQHandler+0x6fe>
 8007328:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800732c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007330:	2b00      	cmp	r3, #0
 8007332:	d008      	beq.n	8007346 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800733c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f001 f83d 	bl	80083be <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007344:	e051      	b.n	80073ea <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800734a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800734e:	2b00      	cmp	r3, #0
 8007350:	d014      	beq.n	800737c <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007352:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007356:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800735a:	2b00      	cmp	r3, #0
 800735c:	d105      	bne.n	800736a <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800735e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007362:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007366:	2b00      	cmp	r3, #0
 8007368:	d008      	beq.n	800737c <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800736e:	2b00      	cmp	r3, #0
 8007370:	d03a      	beq.n	80073e8 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	4798      	blx	r3
    }
    return;
 800737a:	e035      	b.n	80073e8 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800737c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007380:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007384:	2b00      	cmp	r3, #0
 8007386:	d009      	beq.n	800739c <HAL_UART_IRQHandler+0x754>
 8007388:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800738c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007390:	2b00      	cmp	r3, #0
 8007392:	d003      	beq.n	800739c <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f000 ffe7 	bl	8008368 <UART_EndTransmit_IT>
    return;
 800739a:	e026      	b.n	80073ea <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800739c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d009      	beq.n	80073bc <HAL_UART_IRQHandler+0x774>
 80073a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073ac:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d003      	beq.n	80073bc <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f001 f816 	bl	80083e6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80073ba:	e016      	b.n	80073ea <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80073bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d010      	beq.n	80073ea <HAL_UART_IRQHandler+0x7a2>
 80073c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	da0c      	bge.n	80073ea <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f000 fffe 	bl	80083d2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80073d6:	e008      	b.n	80073ea <HAL_UART_IRQHandler+0x7a2>
      return;
 80073d8:	bf00      	nop
 80073da:	e006      	b.n	80073ea <HAL_UART_IRQHandler+0x7a2>
    return;
 80073dc:	bf00      	nop
 80073de:	e004      	b.n	80073ea <HAL_UART_IRQHandler+0x7a2>
      return;
 80073e0:	bf00      	nop
 80073e2:	e002      	b.n	80073ea <HAL_UART_IRQHandler+0x7a2>
      return;
 80073e4:	bf00      	nop
 80073e6:	e000      	b.n	80073ea <HAL_UART_IRQHandler+0x7a2>
    return;
 80073e8:	bf00      	nop
  }
}
 80073ea:	37e8      	adds	r7, #232	@ 0xe8
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}
 80073f0:	effffffe 	.word	0xeffffffe

080073f4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b083      	sub	sp, #12
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80073fc:	bf00      	nop
 80073fe:	370c      	adds	r7, #12
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr

08007408 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007408:	b480      	push	{r7}
 800740a:	b083      	sub	sp, #12
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007410:	bf00      	nop
 8007412:	370c      	adds	r7, #12
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr

0800741c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800741c:	b480      	push	{r7}
 800741e:	b083      	sub	sp, #12
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	460b      	mov	r3, r1
 8007426:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007428:	bf00      	nop
 800742a:	370c      	adds	r7, #12
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr

08007434 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007434:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007438:	b092      	sub	sp, #72	@ 0x48
 800743a:	af00      	add	r7, sp, #0
 800743c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800743e:	2300      	movs	r3, #0
 8007440:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	689a      	ldr	r2, [r3, #8]
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	691b      	ldr	r3, [r3, #16]
 800744c:	431a      	orrs	r2, r3
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	695b      	ldr	r3, [r3, #20]
 8007452:	431a      	orrs	r2, r3
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	69db      	ldr	r3, [r3, #28]
 8007458:	4313      	orrs	r3, r2
 800745a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	681a      	ldr	r2, [r3, #0]
 8007462:	4bbe      	ldr	r3, [pc, #760]	@ (800775c <UART_SetConfig+0x328>)
 8007464:	4013      	ands	r3, r2
 8007466:	697a      	ldr	r2, [r7, #20]
 8007468:	6812      	ldr	r2, [r2, #0]
 800746a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800746c:	430b      	orrs	r3, r1
 800746e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	68da      	ldr	r2, [r3, #12]
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	430a      	orrs	r2, r1
 8007484:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	699b      	ldr	r3, [r3, #24]
 800748a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4ab3      	ldr	r2, [pc, #716]	@ (8007760 <UART_SetConfig+0x32c>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d004      	beq.n	80074a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	6a1b      	ldr	r3, [r3, #32]
 800749a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800749c:	4313      	orrs	r3, r2
 800749e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	689a      	ldr	r2, [r3, #8]
 80074a6:	4baf      	ldr	r3, [pc, #700]	@ (8007764 <UART_SetConfig+0x330>)
 80074a8:	4013      	ands	r3, r2
 80074aa:	697a      	ldr	r2, [r7, #20]
 80074ac:	6812      	ldr	r2, [r2, #0]
 80074ae:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80074b0:	430b      	orrs	r3, r1
 80074b2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074ba:	f023 010f 	bic.w	r1, r3, #15
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	430a      	orrs	r2, r1
 80074c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4aa6      	ldr	r2, [pc, #664]	@ (8007768 <UART_SetConfig+0x334>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d177      	bne.n	80075c4 <UART_SetConfig+0x190>
 80074d4:	4ba5      	ldr	r3, [pc, #660]	@ (800776c <UART_SetConfig+0x338>)
 80074d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074d8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80074dc:	2b28      	cmp	r3, #40	@ 0x28
 80074de:	d86d      	bhi.n	80075bc <UART_SetConfig+0x188>
 80074e0:	a201      	add	r2, pc, #4	@ (adr r2, 80074e8 <UART_SetConfig+0xb4>)
 80074e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074e6:	bf00      	nop
 80074e8:	0800758d 	.word	0x0800758d
 80074ec:	080075bd 	.word	0x080075bd
 80074f0:	080075bd 	.word	0x080075bd
 80074f4:	080075bd 	.word	0x080075bd
 80074f8:	080075bd 	.word	0x080075bd
 80074fc:	080075bd 	.word	0x080075bd
 8007500:	080075bd 	.word	0x080075bd
 8007504:	080075bd 	.word	0x080075bd
 8007508:	08007595 	.word	0x08007595
 800750c:	080075bd 	.word	0x080075bd
 8007510:	080075bd 	.word	0x080075bd
 8007514:	080075bd 	.word	0x080075bd
 8007518:	080075bd 	.word	0x080075bd
 800751c:	080075bd 	.word	0x080075bd
 8007520:	080075bd 	.word	0x080075bd
 8007524:	080075bd 	.word	0x080075bd
 8007528:	0800759d 	.word	0x0800759d
 800752c:	080075bd 	.word	0x080075bd
 8007530:	080075bd 	.word	0x080075bd
 8007534:	080075bd 	.word	0x080075bd
 8007538:	080075bd 	.word	0x080075bd
 800753c:	080075bd 	.word	0x080075bd
 8007540:	080075bd 	.word	0x080075bd
 8007544:	080075bd 	.word	0x080075bd
 8007548:	080075a5 	.word	0x080075a5
 800754c:	080075bd 	.word	0x080075bd
 8007550:	080075bd 	.word	0x080075bd
 8007554:	080075bd 	.word	0x080075bd
 8007558:	080075bd 	.word	0x080075bd
 800755c:	080075bd 	.word	0x080075bd
 8007560:	080075bd 	.word	0x080075bd
 8007564:	080075bd 	.word	0x080075bd
 8007568:	080075ad 	.word	0x080075ad
 800756c:	080075bd 	.word	0x080075bd
 8007570:	080075bd 	.word	0x080075bd
 8007574:	080075bd 	.word	0x080075bd
 8007578:	080075bd 	.word	0x080075bd
 800757c:	080075bd 	.word	0x080075bd
 8007580:	080075bd 	.word	0x080075bd
 8007584:	080075bd 	.word	0x080075bd
 8007588:	080075b5 	.word	0x080075b5
 800758c:	2301      	movs	r3, #1
 800758e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007592:	e222      	b.n	80079da <UART_SetConfig+0x5a6>
 8007594:	2304      	movs	r3, #4
 8007596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800759a:	e21e      	b.n	80079da <UART_SetConfig+0x5a6>
 800759c:	2308      	movs	r3, #8
 800759e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075a2:	e21a      	b.n	80079da <UART_SetConfig+0x5a6>
 80075a4:	2310      	movs	r3, #16
 80075a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075aa:	e216      	b.n	80079da <UART_SetConfig+0x5a6>
 80075ac:	2320      	movs	r3, #32
 80075ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075b2:	e212      	b.n	80079da <UART_SetConfig+0x5a6>
 80075b4:	2340      	movs	r3, #64	@ 0x40
 80075b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075ba:	e20e      	b.n	80079da <UART_SetConfig+0x5a6>
 80075bc:	2380      	movs	r3, #128	@ 0x80
 80075be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075c2:	e20a      	b.n	80079da <UART_SetConfig+0x5a6>
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a69      	ldr	r2, [pc, #420]	@ (8007770 <UART_SetConfig+0x33c>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d130      	bne.n	8007630 <UART_SetConfig+0x1fc>
 80075ce:	4b67      	ldr	r3, [pc, #412]	@ (800776c <UART_SetConfig+0x338>)
 80075d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075d2:	f003 0307 	and.w	r3, r3, #7
 80075d6:	2b05      	cmp	r3, #5
 80075d8:	d826      	bhi.n	8007628 <UART_SetConfig+0x1f4>
 80075da:	a201      	add	r2, pc, #4	@ (adr r2, 80075e0 <UART_SetConfig+0x1ac>)
 80075dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075e0:	080075f9 	.word	0x080075f9
 80075e4:	08007601 	.word	0x08007601
 80075e8:	08007609 	.word	0x08007609
 80075ec:	08007611 	.word	0x08007611
 80075f0:	08007619 	.word	0x08007619
 80075f4:	08007621 	.word	0x08007621
 80075f8:	2300      	movs	r3, #0
 80075fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075fe:	e1ec      	b.n	80079da <UART_SetConfig+0x5a6>
 8007600:	2304      	movs	r3, #4
 8007602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007606:	e1e8      	b.n	80079da <UART_SetConfig+0x5a6>
 8007608:	2308      	movs	r3, #8
 800760a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800760e:	e1e4      	b.n	80079da <UART_SetConfig+0x5a6>
 8007610:	2310      	movs	r3, #16
 8007612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007616:	e1e0      	b.n	80079da <UART_SetConfig+0x5a6>
 8007618:	2320      	movs	r3, #32
 800761a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800761e:	e1dc      	b.n	80079da <UART_SetConfig+0x5a6>
 8007620:	2340      	movs	r3, #64	@ 0x40
 8007622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007626:	e1d8      	b.n	80079da <UART_SetConfig+0x5a6>
 8007628:	2380      	movs	r3, #128	@ 0x80
 800762a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800762e:	e1d4      	b.n	80079da <UART_SetConfig+0x5a6>
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a4f      	ldr	r2, [pc, #316]	@ (8007774 <UART_SetConfig+0x340>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d130      	bne.n	800769c <UART_SetConfig+0x268>
 800763a:	4b4c      	ldr	r3, [pc, #304]	@ (800776c <UART_SetConfig+0x338>)
 800763c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800763e:	f003 0307 	and.w	r3, r3, #7
 8007642:	2b05      	cmp	r3, #5
 8007644:	d826      	bhi.n	8007694 <UART_SetConfig+0x260>
 8007646:	a201      	add	r2, pc, #4	@ (adr r2, 800764c <UART_SetConfig+0x218>)
 8007648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800764c:	08007665 	.word	0x08007665
 8007650:	0800766d 	.word	0x0800766d
 8007654:	08007675 	.word	0x08007675
 8007658:	0800767d 	.word	0x0800767d
 800765c:	08007685 	.word	0x08007685
 8007660:	0800768d 	.word	0x0800768d
 8007664:	2300      	movs	r3, #0
 8007666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800766a:	e1b6      	b.n	80079da <UART_SetConfig+0x5a6>
 800766c:	2304      	movs	r3, #4
 800766e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007672:	e1b2      	b.n	80079da <UART_SetConfig+0x5a6>
 8007674:	2308      	movs	r3, #8
 8007676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800767a:	e1ae      	b.n	80079da <UART_SetConfig+0x5a6>
 800767c:	2310      	movs	r3, #16
 800767e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007682:	e1aa      	b.n	80079da <UART_SetConfig+0x5a6>
 8007684:	2320      	movs	r3, #32
 8007686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800768a:	e1a6      	b.n	80079da <UART_SetConfig+0x5a6>
 800768c:	2340      	movs	r3, #64	@ 0x40
 800768e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007692:	e1a2      	b.n	80079da <UART_SetConfig+0x5a6>
 8007694:	2380      	movs	r3, #128	@ 0x80
 8007696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800769a:	e19e      	b.n	80079da <UART_SetConfig+0x5a6>
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a35      	ldr	r2, [pc, #212]	@ (8007778 <UART_SetConfig+0x344>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d130      	bne.n	8007708 <UART_SetConfig+0x2d4>
 80076a6:	4b31      	ldr	r3, [pc, #196]	@ (800776c <UART_SetConfig+0x338>)
 80076a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076aa:	f003 0307 	and.w	r3, r3, #7
 80076ae:	2b05      	cmp	r3, #5
 80076b0:	d826      	bhi.n	8007700 <UART_SetConfig+0x2cc>
 80076b2:	a201      	add	r2, pc, #4	@ (adr r2, 80076b8 <UART_SetConfig+0x284>)
 80076b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076b8:	080076d1 	.word	0x080076d1
 80076bc:	080076d9 	.word	0x080076d9
 80076c0:	080076e1 	.word	0x080076e1
 80076c4:	080076e9 	.word	0x080076e9
 80076c8:	080076f1 	.word	0x080076f1
 80076cc:	080076f9 	.word	0x080076f9
 80076d0:	2300      	movs	r3, #0
 80076d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076d6:	e180      	b.n	80079da <UART_SetConfig+0x5a6>
 80076d8:	2304      	movs	r3, #4
 80076da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076de:	e17c      	b.n	80079da <UART_SetConfig+0x5a6>
 80076e0:	2308      	movs	r3, #8
 80076e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076e6:	e178      	b.n	80079da <UART_SetConfig+0x5a6>
 80076e8:	2310      	movs	r3, #16
 80076ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076ee:	e174      	b.n	80079da <UART_SetConfig+0x5a6>
 80076f0:	2320      	movs	r3, #32
 80076f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076f6:	e170      	b.n	80079da <UART_SetConfig+0x5a6>
 80076f8:	2340      	movs	r3, #64	@ 0x40
 80076fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076fe:	e16c      	b.n	80079da <UART_SetConfig+0x5a6>
 8007700:	2380      	movs	r3, #128	@ 0x80
 8007702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007706:	e168      	b.n	80079da <UART_SetConfig+0x5a6>
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a1b      	ldr	r2, [pc, #108]	@ (800777c <UART_SetConfig+0x348>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d142      	bne.n	8007798 <UART_SetConfig+0x364>
 8007712:	4b16      	ldr	r3, [pc, #88]	@ (800776c <UART_SetConfig+0x338>)
 8007714:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007716:	f003 0307 	and.w	r3, r3, #7
 800771a:	2b05      	cmp	r3, #5
 800771c:	d838      	bhi.n	8007790 <UART_SetConfig+0x35c>
 800771e:	a201      	add	r2, pc, #4	@ (adr r2, 8007724 <UART_SetConfig+0x2f0>)
 8007720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007724:	0800773d 	.word	0x0800773d
 8007728:	08007745 	.word	0x08007745
 800772c:	0800774d 	.word	0x0800774d
 8007730:	08007755 	.word	0x08007755
 8007734:	08007781 	.word	0x08007781
 8007738:	08007789 	.word	0x08007789
 800773c:	2300      	movs	r3, #0
 800773e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007742:	e14a      	b.n	80079da <UART_SetConfig+0x5a6>
 8007744:	2304      	movs	r3, #4
 8007746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800774a:	e146      	b.n	80079da <UART_SetConfig+0x5a6>
 800774c:	2308      	movs	r3, #8
 800774e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007752:	e142      	b.n	80079da <UART_SetConfig+0x5a6>
 8007754:	2310      	movs	r3, #16
 8007756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800775a:	e13e      	b.n	80079da <UART_SetConfig+0x5a6>
 800775c:	cfff69f3 	.word	0xcfff69f3
 8007760:	58000c00 	.word	0x58000c00
 8007764:	11fff4ff 	.word	0x11fff4ff
 8007768:	40011000 	.word	0x40011000
 800776c:	58024400 	.word	0x58024400
 8007770:	40004400 	.word	0x40004400
 8007774:	40004800 	.word	0x40004800
 8007778:	40004c00 	.word	0x40004c00
 800777c:	40005000 	.word	0x40005000
 8007780:	2320      	movs	r3, #32
 8007782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007786:	e128      	b.n	80079da <UART_SetConfig+0x5a6>
 8007788:	2340      	movs	r3, #64	@ 0x40
 800778a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800778e:	e124      	b.n	80079da <UART_SetConfig+0x5a6>
 8007790:	2380      	movs	r3, #128	@ 0x80
 8007792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007796:	e120      	b.n	80079da <UART_SetConfig+0x5a6>
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4acb      	ldr	r2, [pc, #812]	@ (8007acc <UART_SetConfig+0x698>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d176      	bne.n	8007890 <UART_SetConfig+0x45c>
 80077a2:	4bcb      	ldr	r3, [pc, #812]	@ (8007ad0 <UART_SetConfig+0x69c>)
 80077a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80077aa:	2b28      	cmp	r3, #40	@ 0x28
 80077ac:	d86c      	bhi.n	8007888 <UART_SetConfig+0x454>
 80077ae:	a201      	add	r2, pc, #4	@ (adr r2, 80077b4 <UART_SetConfig+0x380>)
 80077b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077b4:	08007859 	.word	0x08007859
 80077b8:	08007889 	.word	0x08007889
 80077bc:	08007889 	.word	0x08007889
 80077c0:	08007889 	.word	0x08007889
 80077c4:	08007889 	.word	0x08007889
 80077c8:	08007889 	.word	0x08007889
 80077cc:	08007889 	.word	0x08007889
 80077d0:	08007889 	.word	0x08007889
 80077d4:	08007861 	.word	0x08007861
 80077d8:	08007889 	.word	0x08007889
 80077dc:	08007889 	.word	0x08007889
 80077e0:	08007889 	.word	0x08007889
 80077e4:	08007889 	.word	0x08007889
 80077e8:	08007889 	.word	0x08007889
 80077ec:	08007889 	.word	0x08007889
 80077f0:	08007889 	.word	0x08007889
 80077f4:	08007869 	.word	0x08007869
 80077f8:	08007889 	.word	0x08007889
 80077fc:	08007889 	.word	0x08007889
 8007800:	08007889 	.word	0x08007889
 8007804:	08007889 	.word	0x08007889
 8007808:	08007889 	.word	0x08007889
 800780c:	08007889 	.word	0x08007889
 8007810:	08007889 	.word	0x08007889
 8007814:	08007871 	.word	0x08007871
 8007818:	08007889 	.word	0x08007889
 800781c:	08007889 	.word	0x08007889
 8007820:	08007889 	.word	0x08007889
 8007824:	08007889 	.word	0x08007889
 8007828:	08007889 	.word	0x08007889
 800782c:	08007889 	.word	0x08007889
 8007830:	08007889 	.word	0x08007889
 8007834:	08007879 	.word	0x08007879
 8007838:	08007889 	.word	0x08007889
 800783c:	08007889 	.word	0x08007889
 8007840:	08007889 	.word	0x08007889
 8007844:	08007889 	.word	0x08007889
 8007848:	08007889 	.word	0x08007889
 800784c:	08007889 	.word	0x08007889
 8007850:	08007889 	.word	0x08007889
 8007854:	08007881 	.word	0x08007881
 8007858:	2301      	movs	r3, #1
 800785a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800785e:	e0bc      	b.n	80079da <UART_SetConfig+0x5a6>
 8007860:	2304      	movs	r3, #4
 8007862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007866:	e0b8      	b.n	80079da <UART_SetConfig+0x5a6>
 8007868:	2308      	movs	r3, #8
 800786a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800786e:	e0b4      	b.n	80079da <UART_SetConfig+0x5a6>
 8007870:	2310      	movs	r3, #16
 8007872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007876:	e0b0      	b.n	80079da <UART_SetConfig+0x5a6>
 8007878:	2320      	movs	r3, #32
 800787a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800787e:	e0ac      	b.n	80079da <UART_SetConfig+0x5a6>
 8007880:	2340      	movs	r3, #64	@ 0x40
 8007882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007886:	e0a8      	b.n	80079da <UART_SetConfig+0x5a6>
 8007888:	2380      	movs	r3, #128	@ 0x80
 800788a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800788e:	e0a4      	b.n	80079da <UART_SetConfig+0x5a6>
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a8f      	ldr	r2, [pc, #572]	@ (8007ad4 <UART_SetConfig+0x6a0>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d130      	bne.n	80078fc <UART_SetConfig+0x4c8>
 800789a:	4b8d      	ldr	r3, [pc, #564]	@ (8007ad0 <UART_SetConfig+0x69c>)
 800789c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800789e:	f003 0307 	and.w	r3, r3, #7
 80078a2:	2b05      	cmp	r3, #5
 80078a4:	d826      	bhi.n	80078f4 <UART_SetConfig+0x4c0>
 80078a6:	a201      	add	r2, pc, #4	@ (adr r2, 80078ac <UART_SetConfig+0x478>)
 80078a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ac:	080078c5 	.word	0x080078c5
 80078b0:	080078cd 	.word	0x080078cd
 80078b4:	080078d5 	.word	0x080078d5
 80078b8:	080078dd 	.word	0x080078dd
 80078bc:	080078e5 	.word	0x080078e5
 80078c0:	080078ed 	.word	0x080078ed
 80078c4:	2300      	movs	r3, #0
 80078c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078ca:	e086      	b.n	80079da <UART_SetConfig+0x5a6>
 80078cc:	2304      	movs	r3, #4
 80078ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078d2:	e082      	b.n	80079da <UART_SetConfig+0x5a6>
 80078d4:	2308      	movs	r3, #8
 80078d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078da:	e07e      	b.n	80079da <UART_SetConfig+0x5a6>
 80078dc:	2310      	movs	r3, #16
 80078de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078e2:	e07a      	b.n	80079da <UART_SetConfig+0x5a6>
 80078e4:	2320      	movs	r3, #32
 80078e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078ea:	e076      	b.n	80079da <UART_SetConfig+0x5a6>
 80078ec:	2340      	movs	r3, #64	@ 0x40
 80078ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078f2:	e072      	b.n	80079da <UART_SetConfig+0x5a6>
 80078f4:	2380      	movs	r3, #128	@ 0x80
 80078f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078fa:	e06e      	b.n	80079da <UART_SetConfig+0x5a6>
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a75      	ldr	r2, [pc, #468]	@ (8007ad8 <UART_SetConfig+0x6a4>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d130      	bne.n	8007968 <UART_SetConfig+0x534>
 8007906:	4b72      	ldr	r3, [pc, #456]	@ (8007ad0 <UART_SetConfig+0x69c>)
 8007908:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800790a:	f003 0307 	and.w	r3, r3, #7
 800790e:	2b05      	cmp	r3, #5
 8007910:	d826      	bhi.n	8007960 <UART_SetConfig+0x52c>
 8007912:	a201      	add	r2, pc, #4	@ (adr r2, 8007918 <UART_SetConfig+0x4e4>)
 8007914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007918:	08007931 	.word	0x08007931
 800791c:	08007939 	.word	0x08007939
 8007920:	08007941 	.word	0x08007941
 8007924:	08007949 	.word	0x08007949
 8007928:	08007951 	.word	0x08007951
 800792c:	08007959 	.word	0x08007959
 8007930:	2300      	movs	r3, #0
 8007932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007936:	e050      	b.n	80079da <UART_SetConfig+0x5a6>
 8007938:	2304      	movs	r3, #4
 800793a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800793e:	e04c      	b.n	80079da <UART_SetConfig+0x5a6>
 8007940:	2308      	movs	r3, #8
 8007942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007946:	e048      	b.n	80079da <UART_SetConfig+0x5a6>
 8007948:	2310      	movs	r3, #16
 800794a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800794e:	e044      	b.n	80079da <UART_SetConfig+0x5a6>
 8007950:	2320      	movs	r3, #32
 8007952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007956:	e040      	b.n	80079da <UART_SetConfig+0x5a6>
 8007958:	2340      	movs	r3, #64	@ 0x40
 800795a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800795e:	e03c      	b.n	80079da <UART_SetConfig+0x5a6>
 8007960:	2380      	movs	r3, #128	@ 0x80
 8007962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007966:	e038      	b.n	80079da <UART_SetConfig+0x5a6>
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a5b      	ldr	r2, [pc, #364]	@ (8007adc <UART_SetConfig+0x6a8>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d130      	bne.n	80079d4 <UART_SetConfig+0x5a0>
 8007972:	4b57      	ldr	r3, [pc, #348]	@ (8007ad0 <UART_SetConfig+0x69c>)
 8007974:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007976:	f003 0307 	and.w	r3, r3, #7
 800797a:	2b05      	cmp	r3, #5
 800797c:	d826      	bhi.n	80079cc <UART_SetConfig+0x598>
 800797e:	a201      	add	r2, pc, #4	@ (adr r2, 8007984 <UART_SetConfig+0x550>)
 8007980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007984:	0800799d 	.word	0x0800799d
 8007988:	080079a5 	.word	0x080079a5
 800798c:	080079ad 	.word	0x080079ad
 8007990:	080079b5 	.word	0x080079b5
 8007994:	080079bd 	.word	0x080079bd
 8007998:	080079c5 	.word	0x080079c5
 800799c:	2302      	movs	r3, #2
 800799e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079a2:	e01a      	b.n	80079da <UART_SetConfig+0x5a6>
 80079a4:	2304      	movs	r3, #4
 80079a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079aa:	e016      	b.n	80079da <UART_SetConfig+0x5a6>
 80079ac:	2308      	movs	r3, #8
 80079ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079b2:	e012      	b.n	80079da <UART_SetConfig+0x5a6>
 80079b4:	2310      	movs	r3, #16
 80079b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079ba:	e00e      	b.n	80079da <UART_SetConfig+0x5a6>
 80079bc:	2320      	movs	r3, #32
 80079be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079c2:	e00a      	b.n	80079da <UART_SetConfig+0x5a6>
 80079c4:	2340      	movs	r3, #64	@ 0x40
 80079c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079ca:	e006      	b.n	80079da <UART_SetConfig+0x5a6>
 80079cc:	2380      	movs	r3, #128	@ 0x80
 80079ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079d2:	e002      	b.n	80079da <UART_SetConfig+0x5a6>
 80079d4:	2380      	movs	r3, #128	@ 0x80
 80079d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4a3f      	ldr	r2, [pc, #252]	@ (8007adc <UART_SetConfig+0x6a8>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	f040 80f8 	bne.w	8007bd6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80079e6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80079ea:	2b20      	cmp	r3, #32
 80079ec:	dc46      	bgt.n	8007a7c <UART_SetConfig+0x648>
 80079ee:	2b02      	cmp	r3, #2
 80079f0:	f2c0 8082 	blt.w	8007af8 <UART_SetConfig+0x6c4>
 80079f4:	3b02      	subs	r3, #2
 80079f6:	2b1e      	cmp	r3, #30
 80079f8:	d87e      	bhi.n	8007af8 <UART_SetConfig+0x6c4>
 80079fa:	a201      	add	r2, pc, #4	@ (adr r2, 8007a00 <UART_SetConfig+0x5cc>)
 80079fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a00:	08007a83 	.word	0x08007a83
 8007a04:	08007af9 	.word	0x08007af9
 8007a08:	08007a8b 	.word	0x08007a8b
 8007a0c:	08007af9 	.word	0x08007af9
 8007a10:	08007af9 	.word	0x08007af9
 8007a14:	08007af9 	.word	0x08007af9
 8007a18:	08007a9b 	.word	0x08007a9b
 8007a1c:	08007af9 	.word	0x08007af9
 8007a20:	08007af9 	.word	0x08007af9
 8007a24:	08007af9 	.word	0x08007af9
 8007a28:	08007af9 	.word	0x08007af9
 8007a2c:	08007af9 	.word	0x08007af9
 8007a30:	08007af9 	.word	0x08007af9
 8007a34:	08007af9 	.word	0x08007af9
 8007a38:	08007aab 	.word	0x08007aab
 8007a3c:	08007af9 	.word	0x08007af9
 8007a40:	08007af9 	.word	0x08007af9
 8007a44:	08007af9 	.word	0x08007af9
 8007a48:	08007af9 	.word	0x08007af9
 8007a4c:	08007af9 	.word	0x08007af9
 8007a50:	08007af9 	.word	0x08007af9
 8007a54:	08007af9 	.word	0x08007af9
 8007a58:	08007af9 	.word	0x08007af9
 8007a5c:	08007af9 	.word	0x08007af9
 8007a60:	08007af9 	.word	0x08007af9
 8007a64:	08007af9 	.word	0x08007af9
 8007a68:	08007af9 	.word	0x08007af9
 8007a6c:	08007af9 	.word	0x08007af9
 8007a70:	08007af9 	.word	0x08007af9
 8007a74:	08007af9 	.word	0x08007af9
 8007a78:	08007aeb 	.word	0x08007aeb
 8007a7c:	2b40      	cmp	r3, #64	@ 0x40
 8007a7e:	d037      	beq.n	8007af0 <UART_SetConfig+0x6bc>
 8007a80:	e03a      	b.n	8007af8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007a82:	f7fd f949 	bl	8004d18 <HAL_RCCEx_GetD3PCLK1Freq>
 8007a86:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007a88:	e03c      	b.n	8007b04 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f7fd f958 	bl	8004d44 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a98:	e034      	b.n	8007b04 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a9a:	f107 0318 	add.w	r3, r7, #24
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f7fd faa4 	bl	8004fec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007aa4:	69fb      	ldr	r3, [r7, #28]
 8007aa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007aa8:	e02c      	b.n	8007b04 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007aaa:	4b09      	ldr	r3, [pc, #36]	@ (8007ad0 <UART_SetConfig+0x69c>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f003 0320 	and.w	r3, r3, #32
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d016      	beq.n	8007ae4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007ab6:	4b06      	ldr	r3, [pc, #24]	@ (8007ad0 <UART_SetConfig+0x69c>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	08db      	lsrs	r3, r3, #3
 8007abc:	f003 0303 	and.w	r3, r3, #3
 8007ac0:	4a07      	ldr	r2, [pc, #28]	@ (8007ae0 <UART_SetConfig+0x6ac>)
 8007ac2:	fa22 f303 	lsr.w	r3, r2, r3
 8007ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007ac8:	e01c      	b.n	8007b04 <UART_SetConfig+0x6d0>
 8007aca:	bf00      	nop
 8007acc:	40011400 	.word	0x40011400
 8007ad0:	58024400 	.word	0x58024400
 8007ad4:	40007800 	.word	0x40007800
 8007ad8:	40007c00 	.word	0x40007c00
 8007adc:	58000c00 	.word	0x58000c00
 8007ae0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007ae4:	4b9d      	ldr	r3, [pc, #628]	@ (8007d5c <UART_SetConfig+0x928>)
 8007ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ae8:	e00c      	b.n	8007b04 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007aea:	4b9d      	ldr	r3, [pc, #628]	@ (8007d60 <UART_SetConfig+0x92c>)
 8007aec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007aee:	e009      	b.n	8007b04 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007af0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007af4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007af6:	e005      	b.n	8007b04 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007af8:	2300      	movs	r3, #0
 8007afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007afc:	2301      	movs	r3, #1
 8007afe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007b02:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007b04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	f000 81de 	beq.w	8007ec8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b10:	4a94      	ldr	r2, [pc, #592]	@ (8007d64 <UART_SetConfig+0x930>)
 8007b12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b16:	461a      	mov	r2, r3
 8007b18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b1a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b1e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	685a      	ldr	r2, [r3, #4]
 8007b24:	4613      	mov	r3, r2
 8007b26:	005b      	lsls	r3, r3, #1
 8007b28:	4413      	add	r3, r2
 8007b2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d305      	bcc.n	8007b3c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007b36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	d903      	bls.n	8007b44 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007b42:	e1c1      	b.n	8007ec8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b46:	2200      	movs	r2, #0
 8007b48:	60bb      	str	r3, [r7, #8]
 8007b4a:	60fa      	str	r2, [r7, #12]
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b50:	4a84      	ldr	r2, [pc, #528]	@ (8007d64 <UART_SetConfig+0x930>)
 8007b52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	2200      	movs	r2, #0
 8007b5a:	603b      	str	r3, [r7, #0]
 8007b5c:	607a      	str	r2, [r7, #4]
 8007b5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b62:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007b66:	f7f8 fc0b 	bl	8000380 <__aeabi_uldivmod>
 8007b6a:	4602      	mov	r2, r0
 8007b6c:	460b      	mov	r3, r1
 8007b6e:	4610      	mov	r0, r2
 8007b70:	4619      	mov	r1, r3
 8007b72:	f04f 0200 	mov.w	r2, #0
 8007b76:	f04f 0300 	mov.w	r3, #0
 8007b7a:	020b      	lsls	r3, r1, #8
 8007b7c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007b80:	0202      	lsls	r2, r0, #8
 8007b82:	6979      	ldr	r1, [r7, #20]
 8007b84:	6849      	ldr	r1, [r1, #4]
 8007b86:	0849      	lsrs	r1, r1, #1
 8007b88:	2000      	movs	r0, #0
 8007b8a:	460c      	mov	r4, r1
 8007b8c:	4605      	mov	r5, r0
 8007b8e:	eb12 0804 	adds.w	r8, r2, r4
 8007b92:	eb43 0905 	adc.w	r9, r3, r5
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	469a      	mov	sl, r3
 8007b9e:	4693      	mov	fp, r2
 8007ba0:	4652      	mov	r2, sl
 8007ba2:	465b      	mov	r3, fp
 8007ba4:	4640      	mov	r0, r8
 8007ba6:	4649      	mov	r1, r9
 8007ba8:	f7f8 fbea 	bl	8000380 <__aeabi_uldivmod>
 8007bac:	4602      	mov	r2, r0
 8007bae:	460b      	mov	r3, r1
 8007bb0:	4613      	mov	r3, r2
 8007bb2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007bb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bb6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007bba:	d308      	bcc.n	8007bce <UART_SetConfig+0x79a>
 8007bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007bc2:	d204      	bcs.n	8007bce <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007bca:	60da      	str	r2, [r3, #12]
 8007bcc:	e17c      	b.n	8007ec8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007bd4:	e178      	b.n	8007ec8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	69db      	ldr	r3, [r3, #28]
 8007bda:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007bde:	f040 80c5 	bne.w	8007d6c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007be2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007be6:	2b20      	cmp	r3, #32
 8007be8:	dc48      	bgt.n	8007c7c <UART_SetConfig+0x848>
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	db7b      	blt.n	8007ce6 <UART_SetConfig+0x8b2>
 8007bee:	2b20      	cmp	r3, #32
 8007bf0:	d879      	bhi.n	8007ce6 <UART_SetConfig+0x8b2>
 8007bf2:	a201      	add	r2, pc, #4	@ (adr r2, 8007bf8 <UART_SetConfig+0x7c4>)
 8007bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bf8:	08007c83 	.word	0x08007c83
 8007bfc:	08007c8b 	.word	0x08007c8b
 8007c00:	08007ce7 	.word	0x08007ce7
 8007c04:	08007ce7 	.word	0x08007ce7
 8007c08:	08007c93 	.word	0x08007c93
 8007c0c:	08007ce7 	.word	0x08007ce7
 8007c10:	08007ce7 	.word	0x08007ce7
 8007c14:	08007ce7 	.word	0x08007ce7
 8007c18:	08007ca3 	.word	0x08007ca3
 8007c1c:	08007ce7 	.word	0x08007ce7
 8007c20:	08007ce7 	.word	0x08007ce7
 8007c24:	08007ce7 	.word	0x08007ce7
 8007c28:	08007ce7 	.word	0x08007ce7
 8007c2c:	08007ce7 	.word	0x08007ce7
 8007c30:	08007ce7 	.word	0x08007ce7
 8007c34:	08007ce7 	.word	0x08007ce7
 8007c38:	08007cb3 	.word	0x08007cb3
 8007c3c:	08007ce7 	.word	0x08007ce7
 8007c40:	08007ce7 	.word	0x08007ce7
 8007c44:	08007ce7 	.word	0x08007ce7
 8007c48:	08007ce7 	.word	0x08007ce7
 8007c4c:	08007ce7 	.word	0x08007ce7
 8007c50:	08007ce7 	.word	0x08007ce7
 8007c54:	08007ce7 	.word	0x08007ce7
 8007c58:	08007ce7 	.word	0x08007ce7
 8007c5c:	08007ce7 	.word	0x08007ce7
 8007c60:	08007ce7 	.word	0x08007ce7
 8007c64:	08007ce7 	.word	0x08007ce7
 8007c68:	08007ce7 	.word	0x08007ce7
 8007c6c:	08007ce7 	.word	0x08007ce7
 8007c70:	08007ce7 	.word	0x08007ce7
 8007c74:	08007ce7 	.word	0x08007ce7
 8007c78:	08007cd9 	.word	0x08007cd9
 8007c7c:	2b40      	cmp	r3, #64	@ 0x40
 8007c7e:	d02e      	beq.n	8007cde <UART_SetConfig+0x8aa>
 8007c80:	e031      	b.n	8007ce6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c82:	f7fb fe13 	bl	80038ac <HAL_RCC_GetPCLK1Freq>
 8007c86:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007c88:	e033      	b.n	8007cf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c8a:	f7fb fe25 	bl	80038d8 <HAL_RCC_GetPCLK2Freq>
 8007c8e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007c90:	e02f      	b.n	8007cf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007c96:	4618      	mov	r0, r3
 8007c98:	f7fd f854 	bl	8004d44 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007c9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ca0:	e027      	b.n	8007cf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ca2:	f107 0318 	add.w	r3, r7, #24
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f7fd f9a0 	bl	8004fec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007cac:	69fb      	ldr	r3, [r7, #28]
 8007cae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cb0:	e01f      	b.n	8007cf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007cb2:	4b2d      	ldr	r3, [pc, #180]	@ (8007d68 <UART_SetConfig+0x934>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f003 0320 	and.w	r3, r3, #32
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d009      	beq.n	8007cd2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007cbe:	4b2a      	ldr	r3, [pc, #168]	@ (8007d68 <UART_SetConfig+0x934>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	08db      	lsrs	r3, r3, #3
 8007cc4:	f003 0303 	and.w	r3, r3, #3
 8007cc8:	4a24      	ldr	r2, [pc, #144]	@ (8007d5c <UART_SetConfig+0x928>)
 8007cca:	fa22 f303 	lsr.w	r3, r2, r3
 8007cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007cd0:	e00f      	b.n	8007cf2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007cd2:	4b22      	ldr	r3, [pc, #136]	@ (8007d5c <UART_SetConfig+0x928>)
 8007cd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cd6:	e00c      	b.n	8007cf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007cd8:	4b21      	ldr	r3, [pc, #132]	@ (8007d60 <UART_SetConfig+0x92c>)
 8007cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cdc:	e009      	b.n	8007cf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ce4:	e005      	b.n	8007cf2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007cea:	2301      	movs	r3, #1
 8007cec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007cf0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007cf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	f000 80e7 	beq.w	8007ec8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cfe:	4a19      	ldr	r2, [pc, #100]	@ (8007d64 <UART_SetConfig+0x930>)
 8007d00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d04:	461a      	mov	r2, r3
 8007d06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d08:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d0c:	005a      	lsls	r2, r3, #1
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	685b      	ldr	r3, [r3, #4]
 8007d12:	085b      	lsrs	r3, r3, #1
 8007d14:	441a      	add	r2, r3
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d1e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d22:	2b0f      	cmp	r3, #15
 8007d24:	d916      	bls.n	8007d54 <UART_SetConfig+0x920>
 8007d26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d2c:	d212      	bcs.n	8007d54 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d30:	b29b      	uxth	r3, r3
 8007d32:	f023 030f 	bic.w	r3, r3, #15
 8007d36:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007d38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d3a:	085b      	lsrs	r3, r3, #1
 8007d3c:	b29b      	uxth	r3, r3
 8007d3e:	f003 0307 	and.w	r3, r3, #7
 8007d42:	b29a      	uxth	r2, r3
 8007d44:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007d46:	4313      	orrs	r3, r2
 8007d48:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007d50:	60da      	str	r2, [r3, #12]
 8007d52:	e0b9      	b.n	8007ec8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007d54:	2301      	movs	r3, #1
 8007d56:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007d5a:	e0b5      	b.n	8007ec8 <UART_SetConfig+0xa94>
 8007d5c:	03d09000 	.word	0x03d09000
 8007d60:	003d0900 	.word	0x003d0900
 8007d64:	080095c8 	.word	0x080095c8
 8007d68:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007d6c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007d70:	2b20      	cmp	r3, #32
 8007d72:	dc49      	bgt.n	8007e08 <UART_SetConfig+0x9d4>
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	db7c      	blt.n	8007e72 <UART_SetConfig+0xa3e>
 8007d78:	2b20      	cmp	r3, #32
 8007d7a:	d87a      	bhi.n	8007e72 <UART_SetConfig+0xa3e>
 8007d7c:	a201      	add	r2, pc, #4	@ (adr r2, 8007d84 <UART_SetConfig+0x950>)
 8007d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d82:	bf00      	nop
 8007d84:	08007e0f 	.word	0x08007e0f
 8007d88:	08007e17 	.word	0x08007e17
 8007d8c:	08007e73 	.word	0x08007e73
 8007d90:	08007e73 	.word	0x08007e73
 8007d94:	08007e1f 	.word	0x08007e1f
 8007d98:	08007e73 	.word	0x08007e73
 8007d9c:	08007e73 	.word	0x08007e73
 8007da0:	08007e73 	.word	0x08007e73
 8007da4:	08007e2f 	.word	0x08007e2f
 8007da8:	08007e73 	.word	0x08007e73
 8007dac:	08007e73 	.word	0x08007e73
 8007db0:	08007e73 	.word	0x08007e73
 8007db4:	08007e73 	.word	0x08007e73
 8007db8:	08007e73 	.word	0x08007e73
 8007dbc:	08007e73 	.word	0x08007e73
 8007dc0:	08007e73 	.word	0x08007e73
 8007dc4:	08007e3f 	.word	0x08007e3f
 8007dc8:	08007e73 	.word	0x08007e73
 8007dcc:	08007e73 	.word	0x08007e73
 8007dd0:	08007e73 	.word	0x08007e73
 8007dd4:	08007e73 	.word	0x08007e73
 8007dd8:	08007e73 	.word	0x08007e73
 8007ddc:	08007e73 	.word	0x08007e73
 8007de0:	08007e73 	.word	0x08007e73
 8007de4:	08007e73 	.word	0x08007e73
 8007de8:	08007e73 	.word	0x08007e73
 8007dec:	08007e73 	.word	0x08007e73
 8007df0:	08007e73 	.word	0x08007e73
 8007df4:	08007e73 	.word	0x08007e73
 8007df8:	08007e73 	.word	0x08007e73
 8007dfc:	08007e73 	.word	0x08007e73
 8007e00:	08007e73 	.word	0x08007e73
 8007e04:	08007e65 	.word	0x08007e65
 8007e08:	2b40      	cmp	r3, #64	@ 0x40
 8007e0a:	d02e      	beq.n	8007e6a <UART_SetConfig+0xa36>
 8007e0c:	e031      	b.n	8007e72 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e0e:	f7fb fd4d 	bl	80038ac <HAL_RCC_GetPCLK1Freq>
 8007e12:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007e14:	e033      	b.n	8007e7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e16:	f7fb fd5f 	bl	80038d8 <HAL_RCC_GetPCLK2Freq>
 8007e1a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007e1c:	e02f      	b.n	8007e7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007e22:	4618      	mov	r0, r3
 8007e24:	f7fc ff8e 	bl	8004d44 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e2c:	e027      	b.n	8007e7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e2e:	f107 0318 	add.w	r3, r7, #24
 8007e32:	4618      	mov	r0, r3
 8007e34:	f7fd f8da 	bl	8004fec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007e38:	69fb      	ldr	r3, [r7, #28]
 8007e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e3c:	e01f      	b.n	8007e7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e3e:	4b2d      	ldr	r3, [pc, #180]	@ (8007ef4 <UART_SetConfig+0xac0>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f003 0320 	and.w	r3, r3, #32
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d009      	beq.n	8007e5e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007e4a:	4b2a      	ldr	r3, [pc, #168]	@ (8007ef4 <UART_SetConfig+0xac0>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	08db      	lsrs	r3, r3, #3
 8007e50:	f003 0303 	and.w	r3, r3, #3
 8007e54:	4a28      	ldr	r2, [pc, #160]	@ (8007ef8 <UART_SetConfig+0xac4>)
 8007e56:	fa22 f303 	lsr.w	r3, r2, r3
 8007e5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007e5c:	e00f      	b.n	8007e7e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007e5e:	4b26      	ldr	r3, [pc, #152]	@ (8007ef8 <UART_SetConfig+0xac4>)
 8007e60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e62:	e00c      	b.n	8007e7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007e64:	4b25      	ldr	r3, [pc, #148]	@ (8007efc <UART_SetConfig+0xac8>)
 8007e66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e68:	e009      	b.n	8007e7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e70:	e005      	b.n	8007e7e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007e72:	2300      	movs	r3, #0
 8007e74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007e76:	2301      	movs	r3, #1
 8007e78:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007e7c:	bf00      	nop
    }

    if (pclk != 0U)
 8007e7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d021      	beq.n	8007ec8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e88:	4a1d      	ldr	r2, [pc, #116]	@ (8007f00 <UART_SetConfig+0xacc>)
 8007e8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e8e:	461a      	mov	r2, r3
 8007e90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e92:	fbb3 f2f2 	udiv	r2, r3, r2
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	085b      	lsrs	r3, r3, #1
 8007e9c:	441a      	add	r2, r3
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ea6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eaa:	2b0f      	cmp	r3, #15
 8007eac:	d909      	bls.n	8007ec2 <UART_SetConfig+0xa8e>
 8007eae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007eb4:	d205      	bcs.n	8007ec2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007eb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eb8:	b29a      	uxth	r2, r3
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	60da      	str	r2, [r3, #12]
 8007ec0:	e002      	b.n	8007ec8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	2201      	movs	r2, #1
 8007ecc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	2200      	movs	r2, #0
 8007edc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007ee4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3748      	adds	r7, #72	@ 0x48
 8007eec:	46bd      	mov	sp, r7
 8007eee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ef2:	bf00      	nop
 8007ef4:	58024400 	.word	0x58024400
 8007ef8:	03d09000 	.word	0x03d09000
 8007efc:	003d0900 	.word	0x003d0900
 8007f00:	080095c8 	.word	0x080095c8

08007f04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b083      	sub	sp, #12
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f10:	f003 0308 	and.w	r3, r3, #8
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d00a      	beq.n	8007f2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	430a      	orrs	r2, r1
 8007f2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f32:	f003 0301 	and.w	r3, r3, #1
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d00a      	beq.n	8007f50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	430a      	orrs	r2, r1
 8007f4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f54:	f003 0302 	and.w	r3, r3, #2
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d00a      	beq.n	8007f72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	685b      	ldr	r3, [r3, #4]
 8007f62:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	430a      	orrs	r2, r1
 8007f70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f76:	f003 0304 	and.w	r3, r3, #4
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d00a      	beq.n	8007f94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	430a      	orrs	r2, r1
 8007f92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f98:	f003 0310 	and.w	r3, r3, #16
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d00a      	beq.n	8007fb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	689b      	ldr	r3, [r3, #8]
 8007fa6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	430a      	orrs	r2, r1
 8007fb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fba:	f003 0320 	and.w	r3, r3, #32
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d00a      	beq.n	8007fd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	689b      	ldr	r3, [r3, #8]
 8007fc8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	430a      	orrs	r2, r1
 8007fd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d01a      	beq.n	800801a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	430a      	orrs	r2, r1
 8007ff8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ffe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008002:	d10a      	bne.n	800801a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	430a      	orrs	r2, r1
 8008018:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800801e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008022:	2b00      	cmp	r3, #0
 8008024:	d00a      	beq.n	800803c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	685b      	ldr	r3, [r3, #4]
 800802c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	430a      	orrs	r2, r1
 800803a:	605a      	str	r2, [r3, #4]
  }
}
 800803c:	bf00      	nop
 800803e:	370c      	adds	r7, #12
 8008040:	46bd      	mov	sp, r7
 8008042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008046:	4770      	bx	lr

08008048 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b098      	sub	sp, #96	@ 0x60
 800804c:	af02      	add	r7, sp, #8
 800804e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2200      	movs	r2, #0
 8008054:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008058:	f7f9 fb06 	bl	8001668 <HAL_GetTick>
 800805c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f003 0308 	and.w	r3, r3, #8
 8008068:	2b08      	cmp	r3, #8
 800806a:	d12f      	bne.n	80080cc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800806c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008070:	9300      	str	r3, [sp, #0]
 8008072:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008074:	2200      	movs	r2, #0
 8008076:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f000 f88e 	bl	800819c <UART_WaitOnFlagUntilTimeout>
 8008080:	4603      	mov	r3, r0
 8008082:	2b00      	cmp	r3, #0
 8008084:	d022      	beq.n	80080cc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800808c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800808e:	e853 3f00 	ldrex	r3, [r3]
 8008092:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008094:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008096:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800809a:	653b      	str	r3, [r7, #80]	@ 0x50
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	461a      	mov	r2, r3
 80080a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80080a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80080a6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80080aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80080ac:	e841 2300 	strex	r3, r2, [r1]
 80080b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80080b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d1e6      	bne.n	8008086 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2220      	movs	r2, #32
 80080bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2200      	movs	r2, #0
 80080c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80080c8:	2303      	movs	r3, #3
 80080ca:	e063      	b.n	8008194 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f003 0304 	and.w	r3, r3, #4
 80080d6:	2b04      	cmp	r3, #4
 80080d8:	d149      	bne.n	800816e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80080da:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80080de:	9300      	str	r3, [sp, #0]
 80080e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080e2:	2200      	movs	r2, #0
 80080e4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f000 f857 	bl	800819c <UART_WaitOnFlagUntilTimeout>
 80080ee:	4603      	mov	r3, r0
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d03c      	beq.n	800816e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080fc:	e853 3f00 	ldrex	r3, [r3]
 8008100:	623b      	str	r3, [r7, #32]
   return(result);
 8008102:	6a3b      	ldr	r3, [r7, #32]
 8008104:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008108:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	461a      	mov	r2, r3
 8008110:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008112:	633b      	str	r3, [r7, #48]	@ 0x30
 8008114:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008116:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008118:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800811a:	e841 2300 	strex	r3, r2, [r1]
 800811e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008122:	2b00      	cmp	r3, #0
 8008124:	d1e6      	bne.n	80080f4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	3308      	adds	r3, #8
 800812c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	e853 3f00 	ldrex	r3, [r3]
 8008134:	60fb      	str	r3, [r7, #12]
   return(result);
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	f023 0301 	bic.w	r3, r3, #1
 800813c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	3308      	adds	r3, #8
 8008144:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008146:	61fa      	str	r2, [r7, #28]
 8008148:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800814a:	69b9      	ldr	r1, [r7, #24]
 800814c:	69fa      	ldr	r2, [r7, #28]
 800814e:	e841 2300 	strex	r3, r2, [r1]
 8008152:	617b      	str	r3, [r7, #20]
   return(result);
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d1e5      	bne.n	8008126 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2220      	movs	r2, #32
 800815e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2200      	movs	r2, #0
 8008166:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800816a:	2303      	movs	r3, #3
 800816c:	e012      	b.n	8008194 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2220      	movs	r2, #32
 8008172:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2220      	movs	r2, #32
 800817a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2200      	movs	r2, #0
 8008182:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2200      	movs	r2, #0
 8008188:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2200      	movs	r2, #0
 800818e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008192:	2300      	movs	r3, #0
}
 8008194:	4618      	mov	r0, r3
 8008196:	3758      	adds	r7, #88	@ 0x58
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}

0800819c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b084      	sub	sp, #16
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	60f8      	str	r0, [r7, #12]
 80081a4:	60b9      	str	r1, [r7, #8]
 80081a6:	603b      	str	r3, [r7, #0]
 80081a8:	4613      	mov	r3, r2
 80081aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081ac:	e04f      	b.n	800824e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081ae:	69bb      	ldr	r3, [r7, #24]
 80081b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081b4:	d04b      	beq.n	800824e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081b6:	f7f9 fa57 	bl	8001668 <HAL_GetTick>
 80081ba:	4602      	mov	r2, r0
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	1ad3      	subs	r3, r2, r3
 80081c0:	69ba      	ldr	r2, [r7, #24]
 80081c2:	429a      	cmp	r2, r3
 80081c4:	d302      	bcc.n	80081cc <UART_WaitOnFlagUntilTimeout+0x30>
 80081c6:	69bb      	ldr	r3, [r7, #24]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d101      	bne.n	80081d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80081cc:	2303      	movs	r3, #3
 80081ce:	e04e      	b.n	800826e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f003 0304 	and.w	r3, r3, #4
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d037      	beq.n	800824e <UART_WaitOnFlagUntilTimeout+0xb2>
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	2b80      	cmp	r3, #128	@ 0x80
 80081e2:	d034      	beq.n	800824e <UART_WaitOnFlagUntilTimeout+0xb2>
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	2b40      	cmp	r3, #64	@ 0x40
 80081e8:	d031      	beq.n	800824e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	69db      	ldr	r3, [r3, #28]
 80081f0:	f003 0308 	and.w	r3, r3, #8
 80081f4:	2b08      	cmp	r3, #8
 80081f6:	d110      	bne.n	800821a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	2208      	movs	r2, #8
 80081fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008200:	68f8      	ldr	r0, [r7, #12]
 8008202:	f000 f839 	bl	8008278 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	2208      	movs	r2, #8
 800820a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	2200      	movs	r2, #0
 8008212:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008216:	2301      	movs	r3, #1
 8008218:	e029      	b.n	800826e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	69db      	ldr	r3, [r3, #28]
 8008220:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008224:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008228:	d111      	bne.n	800824e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008232:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008234:	68f8      	ldr	r0, [r7, #12]
 8008236:	f000 f81f 	bl	8008278 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	2220      	movs	r2, #32
 800823e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	2200      	movs	r2, #0
 8008246:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800824a:	2303      	movs	r3, #3
 800824c:	e00f      	b.n	800826e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	69da      	ldr	r2, [r3, #28]
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	4013      	ands	r3, r2
 8008258:	68ba      	ldr	r2, [r7, #8]
 800825a:	429a      	cmp	r2, r3
 800825c:	bf0c      	ite	eq
 800825e:	2301      	moveq	r3, #1
 8008260:	2300      	movne	r3, #0
 8008262:	b2db      	uxtb	r3, r3
 8008264:	461a      	mov	r2, r3
 8008266:	79fb      	ldrb	r3, [r7, #7]
 8008268:	429a      	cmp	r2, r3
 800826a:	d0a0      	beq.n	80081ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800826c:	2300      	movs	r3, #0
}
 800826e:	4618      	mov	r0, r3
 8008270:	3710      	adds	r7, #16
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}
	...

08008278 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008278:	b480      	push	{r7}
 800827a:	b095      	sub	sp, #84	@ 0x54
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008286:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008288:	e853 3f00 	ldrex	r3, [r3]
 800828c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800828e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008290:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008294:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	461a      	mov	r2, r3
 800829c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800829e:	643b      	str	r3, [r7, #64]	@ 0x40
 80082a0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082a2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80082a4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80082a6:	e841 2300 	strex	r3, r2, [r1]
 80082aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80082ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d1e6      	bne.n	8008280 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	3308      	adds	r3, #8
 80082b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ba:	6a3b      	ldr	r3, [r7, #32]
 80082bc:	e853 3f00 	ldrex	r3, [r3]
 80082c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80082c2:	69fa      	ldr	r2, [r7, #28]
 80082c4:	4b1e      	ldr	r3, [pc, #120]	@ (8008340 <UART_EndRxTransfer+0xc8>)
 80082c6:	4013      	ands	r3, r2
 80082c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	3308      	adds	r3, #8
 80082d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80082d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80082d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80082d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80082da:	e841 2300 	strex	r3, r2, [r1]
 80082de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80082e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d1e5      	bne.n	80082b2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80082ea:	2b01      	cmp	r3, #1
 80082ec:	d118      	bne.n	8008320 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	e853 3f00 	ldrex	r3, [r3]
 80082fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	f023 0310 	bic.w	r3, r3, #16
 8008302:	647b      	str	r3, [r7, #68]	@ 0x44
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	461a      	mov	r2, r3
 800830a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800830c:	61bb      	str	r3, [r7, #24]
 800830e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008310:	6979      	ldr	r1, [r7, #20]
 8008312:	69ba      	ldr	r2, [r7, #24]
 8008314:	e841 2300 	strex	r3, r2, [r1]
 8008318:	613b      	str	r3, [r7, #16]
   return(result);
 800831a:	693b      	ldr	r3, [r7, #16]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d1e6      	bne.n	80082ee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2220      	movs	r2, #32
 8008324:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2200      	movs	r2, #0
 800832c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2200      	movs	r2, #0
 8008332:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008334:	bf00      	nop
 8008336:	3754      	adds	r7, #84	@ 0x54
 8008338:	46bd      	mov	sp, r7
 800833a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833e:	4770      	bx	lr
 8008340:	effffffe 	.word	0xeffffffe

08008344 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b084      	sub	sp, #16
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008350:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	2200      	movs	r2, #0
 8008356:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800835a:	68f8      	ldr	r0, [r7, #12]
 800835c:	f7ff f854 	bl	8007408 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008360:	bf00      	nop
 8008362:	3710      	adds	r7, #16
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}

08008368 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b088      	sub	sp, #32
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	e853 3f00 	ldrex	r3, [r3]
 800837c:	60bb      	str	r3, [r7, #8]
   return(result);
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008384:	61fb      	str	r3, [r7, #28]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	461a      	mov	r2, r3
 800838c:	69fb      	ldr	r3, [r7, #28]
 800838e:	61bb      	str	r3, [r7, #24]
 8008390:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008392:	6979      	ldr	r1, [r7, #20]
 8008394:	69ba      	ldr	r2, [r7, #24]
 8008396:	e841 2300 	strex	r3, r2, [r1]
 800839a:	613b      	str	r3, [r7, #16]
   return(result);
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d1e6      	bne.n	8008370 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2220      	movs	r2, #32
 80083a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2200      	movs	r2, #0
 80083ae:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f7ff f81f 	bl	80073f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80083b6:	bf00      	nop
 80083b8:	3720      	adds	r7, #32
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}

080083be <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80083be:	b480      	push	{r7}
 80083c0:	b083      	sub	sp, #12
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80083c6:	bf00      	nop
 80083c8:	370c      	adds	r7, #12
 80083ca:	46bd      	mov	sp, r7
 80083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d0:	4770      	bx	lr

080083d2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80083d2:	b480      	push	{r7}
 80083d4:	b083      	sub	sp, #12
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80083da:	bf00      	nop
 80083dc:	370c      	adds	r7, #12
 80083de:	46bd      	mov	sp, r7
 80083e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e4:	4770      	bx	lr

080083e6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80083e6:	b480      	push	{r7}
 80083e8:	b083      	sub	sp, #12
 80083ea:	af00      	add	r7, sp, #0
 80083ec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80083ee:	bf00      	nop
 80083f0:	370c      	adds	r7, #12
 80083f2:	46bd      	mov	sp, r7
 80083f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f8:	4770      	bx	lr

080083fa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80083fa:	b480      	push	{r7}
 80083fc:	b085      	sub	sp, #20
 80083fe:	af00      	add	r7, sp, #0
 8008400:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008408:	2b01      	cmp	r3, #1
 800840a:	d101      	bne.n	8008410 <HAL_UARTEx_DisableFifoMode+0x16>
 800840c:	2302      	movs	r3, #2
 800840e:	e027      	b.n	8008460 <HAL_UARTEx_DisableFifoMode+0x66>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2201      	movs	r2, #1
 8008414:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2224      	movs	r2, #36	@ 0x24
 800841c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	681a      	ldr	r2, [r3, #0]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f022 0201 	bic.w	r2, r2, #1
 8008436:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800843e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2200      	movs	r2, #0
 8008444:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	68fa      	ldr	r2, [r7, #12]
 800844c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2220      	movs	r2, #32
 8008452:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2200      	movs	r2, #0
 800845a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800845e:	2300      	movs	r3, #0
}
 8008460:	4618      	mov	r0, r3
 8008462:	3714      	adds	r7, #20
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr

0800846c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b084      	sub	sp, #16
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800847c:	2b01      	cmp	r3, #1
 800847e:	d101      	bne.n	8008484 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008480:	2302      	movs	r3, #2
 8008482:	e02d      	b.n	80084e0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2201      	movs	r2, #1
 8008488:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2224      	movs	r2, #36	@ 0x24
 8008490:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	681a      	ldr	r2, [r3, #0]
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f022 0201 	bic.w	r2, r2, #1
 80084aa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	689b      	ldr	r3, [r3, #8]
 80084b2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	683a      	ldr	r2, [r7, #0]
 80084bc:	430a      	orrs	r2, r1
 80084be:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f000 f84f 	bl	8008564 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	68fa      	ldr	r2, [r7, #12]
 80084cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2220      	movs	r2, #32
 80084d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2200      	movs	r2, #0
 80084da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80084de:	2300      	movs	r3, #0
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	3710      	adds	r7, #16
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}

080084e8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b084      	sub	sp, #16
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80084f8:	2b01      	cmp	r3, #1
 80084fa:	d101      	bne.n	8008500 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80084fc:	2302      	movs	r3, #2
 80084fe:	e02d      	b.n	800855c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2201      	movs	r2, #1
 8008504:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2224      	movs	r2, #36	@ 0x24
 800850c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	681a      	ldr	r2, [r3, #0]
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f022 0201 	bic.w	r2, r2, #1
 8008526:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	689b      	ldr	r3, [r3, #8]
 800852e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	683a      	ldr	r2, [r7, #0]
 8008538:	430a      	orrs	r2, r1
 800853a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f000 f811 	bl	8008564 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	68fa      	ldr	r2, [r7, #12]
 8008548:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2220      	movs	r2, #32
 800854e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2200      	movs	r2, #0
 8008556:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800855a:	2300      	movs	r3, #0
}
 800855c:	4618      	mov	r0, r3
 800855e:	3710      	adds	r7, #16
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}

08008564 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008564:	b480      	push	{r7}
 8008566:	b085      	sub	sp, #20
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008570:	2b00      	cmp	r3, #0
 8008572:	d108      	bne.n	8008586 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2201      	movs	r2, #1
 8008578:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2201      	movs	r2, #1
 8008580:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008584:	e031      	b.n	80085ea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008586:	2310      	movs	r3, #16
 8008588:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800858a:	2310      	movs	r3, #16
 800858c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	689b      	ldr	r3, [r3, #8]
 8008594:	0e5b      	lsrs	r3, r3, #25
 8008596:	b2db      	uxtb	r3, r3
 8008598:	f003 0307 	and.w	r3, r3, #7
 800859c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	689b      	ldr	r3, [r3, #8]
 80085a4:	0f5b      	lsrs	r3, r3, #29
 80085a6:	b2db      	uxtb	r3, r3
 80085a8:	f003 0307 	and.w	r3, r3, #7
 80085ac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80085ae:	7bbb      	ldrb	r3, [r7, #14]
 80085b0:	7b3a      	ldrb	r2, [r7, #12]
 80085b2:	4911      	ldr	r1, [pc, #68]	@ (80085f8 <UARTEx_SetNbDataToProcess+0x94>)
 80085b4:	5c8a      	ldrb	r2, [r1, r2]
 80085b6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80085ba:	7b3a      	ldrb	r2, [r7, #12]
 80085bc:	490f      	ldr	r1, [pc, #60]	@ (80085fc <UARTEx_SetNbDataToProcess+0x98>)
 80085be:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80085c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80085c4:	b29a      	uxth	r2, r3
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80085cc:	7bfb      	ldrb	r3, [r7, #15]
 80085ce:	7b7a      	ldrb	r2, [r7, #13]
 80085d0:	4909      	ldr	r1, [pc, #36]	@ (80085f8 <UARTEx_SetNbDataToProcess+0x94>)
 80085d2:	5c8a      	ldrb	r2, [r1, r2]
 80085d4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80085d8:	7b7a      	ldrb	r2, [r7, #13]
 80085da:	4908      	ldr	r1, [pc, #32]	@ (80085fc <UARTEx_SetNbDataToProcess+0x98>)
 80085dc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80085de:	fb93 f3f2 	sdiv	r3, r3, r2
 80085e2:	b29a      	uxth	r2, r3
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80085ea:	bf00      	nop
 80085ec:	3714      	adds	r7, #20
 80085ee:	46bd      	mov	sp, r7
 80085f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f4:	4770      	bx	lr
 80085f6:	bf00      	nop
 80085f8:	080095e0 	.word	0x080095e0
 80085fc:	080095e8 	.word	0x080095e8

08008600 <HAL_WWDG_IRQHandler>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
void HAL_WWDG_IRQHandler(WWDG_HandleTypeDef *hwwdg)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b082      	sub	sp, #8
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  /* Check if Early Wakeup Interrupt is enable */
  if (__HAL_WWDG_GET_IT_SOURCE(hwwdg, WWDG_IT_EWI) != RESET)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	685b      	ldr	r3, [r3, #4]
 800860e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008612:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008616:	d10e      	bne.n	8008636 <HAL_WWDG_IRQHandler+0x36>
  {
    /* Check if WWDG Early Wakeup Interrupt occurred */
    if (__HAL_WWDG_GET_FLAG(hwwdg, WWDG_FLAG_EWIF) != RESET)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	689b      	ldr	r3, [r3, #8]
 800861e:	f003 0301 	and.w	r3, r3, #1
 8008622:	2b01      	cmp	r3, #1
 8008624:	d107      	bne.n	8008636 <HAL_WWDG_IRQHandler+0x36>
    {
      /* Clear the WWDG Early Wakeup flag */
      __HAL_WWDG_CLEAR_FLAG(hwwdg, WWDG_FLAG_EWIF);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f06f 0201 	mvn.w	r2, #1
 800862e:	609a      	str	r2, [r3, #8]
#if (USE_HAL_WWDG_REGISTER_CALLBACKS == 1)
      /* Early Wakeup registered callback */
      hwwdg->EwiCallback(hwwdg);
#else
      /* Early Wakeup callback */
      HAL_WWDG_EarlyWakeupCallback(hwwdg);
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f000 f804 	bl	800863e <HAL_WWDG_EarlyWakeupCallback>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */
    }
  }
}
 8008636:	bf00      	nop
 8008638:	3708      	adds	r7, #8
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}

0800863e <HAL_WWDG_EarlyWakeupCallback>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
__weak void HAL_WWDG_EarlyWakeupCallback(WWDG_HandleTypeDef *hwwdg)
{
 800863e:	b480      	push	{r7}
 8008640:	b083      	sub	sp, #12
 8008642:	af00      	add	r7, sp, #0
 8008644:	6078      	str	r0, [r7, #4]
  UNUSED(hwwdg);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_WWDG_EarlyWakeupCallback could be implemented in the user file
   */
}
 8008646:	bf00      	nop
 8008648:	370c      	adds	r7, #12
 800864a:	46bd      	mov	sp, r7
 800864c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008650:	4770      	bx	lr
	...

08008654 <std>:
 8008654:	2300      	movs	r3, #0
 8008656:	b510      	push	{r4, lr}
 8008658:	4604      	mov	r4, r0
 800865a:	e9c0 3300 	strd	r3, r3, [r0]
 800865e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008662:	6083      	str	r3, [r0, #8]
 8008664:	8181      	strh	r1, [r0, #12]
 8008666:	6643      	str	r3, [r0, #100]	@ 0x64
 8008668:	81c2      	strh	r2, [r0, #14]
 800866a:	6183      	str	r3, [r0, #24]
 800866c:	4619      	mov	r1, r3
 800866e:	2208      	movs	r2, #8
 8008670:	305c      	adds	r0, #92	@ 0x5c
 8008672:	f000 f9f9 	bl	8008a68 <memset>
 8008676:	4b0d      	ldr	r3, [pc, #52]	@ (80086ac <std+0x58>)
 8008678:	6263      	str	r3, [r4, #36]	@ 0x24
 800867a:	4b0d      	ldr	r3, [pc, #52]	@ (80086b0 <std+0x5c>)
 800867c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800867e:	4b0d      	ldr	r3, [pc, #52]	@ (80086b4 <std+0x60>)
 8008680:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008682:	4b0d      	ldr	r3, [pc, #52]	@ (80086b8 <std+0x64>)
 8008684:	6323      	str	r3, [r4, #48]	@ 0x30
 8008686:	4b0d      	ldr	r3, [pc, #52]	@ (80086bc <std+0x68>)
 8008688:	6224      	str	r4, [r4, #32]
 800868a:	429c      	cmp	r4, r3
 800868c:	d006      	beq.n	800869c <std+0x48>
 800868e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008692:	4294      	cmp	r4, r2
 8008694:	d002      	beq.n	800869c <std+0x48>
 8008696:	33d0      	adds	r3, #208	@ 0xd0
 8008698:	429c      	cmp	r4, r3
 800869a:	d105      	bne.n	80086a8 <std+0x54>
 800869c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80086a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086a4:	f000 ba58 	b.w	8008b58 <__retarget_lock_init_recursive>
 80086a8:	bd10      	pop	{r4, pc}
 80086aa:	bf00      	nop
 80086ac:	080088b9 	.word	0x080088b9
 80086b0:	080088db 	.word	0x080088db
 80086b4:	08008913 	.word	0x08008913
 80086b8:	08008937 	.word	0x08008937
 80086bc:	240002bc 	.word	0x240002bc

080086c0 <stdio_exit_handler>:
 80086c0:	4a02      	ldr	r2, [pc, #8]	@ (80086cc <stdio_exit_handler+0xc>)
 80086c2:	4903      	ldr	r1, [pc, #12]	@ (80086d0 <stdio_exit_handler+0x10>)
 80086c4:	4803      	ldr	r0, [pc, #12]	@ (80086d4 <stdio_exit_handler+0x14>)
 80086c6:	f000 b869 	b.w	800879c <_fwalk_sglue>
 80086ca:	bf00      	nop
 80086cc:	24000014 	.word	0x24000014
 80086d0:	080093f5 	.word	0x080093f5
 80086d4:	24000024 	.word	0x24000024

080086d8 <cleanup_stdio>:
 80086d8:	6841      	ldr	r1, [r0, #4]
 80086da:	4b0c      	ldr	r3, [pc, #48]	@ (800870c <cleanup_stdio+0x34>)
 80086dc:	4299      	cmp	r1, r3
 80086de:	b510      	push	{r4, lr}
 80086e0:	4604      	mov	r4, r0
 80086e2:	d001      	beq.n	80086e8 <cleanup_stdio+0x10>
 80086e4:	f000 fe86 	bl	80093f4 <_fflush_r>
 80086e8:	68a1      	ldr	r1, [r4, #8]
 80086ea:	4b09      	ldr	r3, [pc, #36]	@ (8008710 <cleanup_stdio+0x38>)
 80086ec:	4299      	cmp	r1, r3
 80086ee:	d002      	beq.n	80086f6 <cleanup_stdio+0x1e>
 80086f0:	4620      	mov	r0, r4
 80086f2:	f000 fe7f 	bl	80093f4 <_fflush_r>
 80086f6:	68e1      	ldr	r1, [r4, #12]
 80086f8:	4b06      	ldr	r3, [pc, #24]	@ (8008714 <cleanup_stdio+0x3c>)
 80086fa:	4299      	cmp	r1, r3
 80086fc:	d004      	beq.n	8008708 <cleanup_stdio+0x30>
 80086fe:	4620      	mov	r0, r4
 8008700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008704:	f000 be76 	b.w	80093f4 <_fflush_r>
 8008708:	bd10      	pop	{r4, pc}
 800870a:	bf00      	nop
 800870c:	240002bc 	.word	0x240002bc
 8008710:	24000324 	.word	0x24000324
 8008714:	2400038c 	.word	0x2400038c

08008718 <global_stdio_init.part.0>:
 8008718:	b510      	push	{r4, lr}
 800871a:	4b0b      	ldr	r3, [pc, #44]	@ (8008748 <global_stdio_init.part.0+0x30>)
 800871c:	4c0b      	ldr	r4, [pc, #44]	@ (800874c <global_stdio_init.part.0+0x34>)
 800871e:	4a0c      	ldr	r2, [pc, #48]	@ (8008750 <global_stdio_init.part.0+0x38>)
 8008720:	601a      	str	r2, [r3, #0]
 8008722:	4620      	mov	r0, r4
 8008724:	2200      	movs	r2, #0
 8008726:	2104      	movs	r1, #4
 8008728:	f7ff ff94 	bl	8008654 <std>
 800872c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008730:	2201      	movs	r2, #1
 8008732:	2109      	movs	r1, #9
 8008734:	f7ff ff8e 	bl	8008654 <std>
 8008738:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800873c:	2202      	movs	r2, #2
 800873e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008742:	2112      	movs	r1, #18
 8008744:	f7ff bf86 	b.w	8008654 <std>
 8008748:	240003f4 	.word	0x240003f4
 800874c:	240002bc 	.word	0x240002bc
 8008750:	080086c1 	.word	0x080086c1

08008754 <__sfp_lock_acquire>:
 8008754:	4801      	ldr	r0, [pc, #4]	@ (800875c <__sfp_lock_acquire+0x8>)
 8008756:	f000 ba00 	b.w	8008b5a <__retarget_lock_acquire_recursive>
 800875a:	bf00      	nop
 800875c:	240003fd 	.word	0x240003fd

08008760 <__sfp_lock_release>:
 8008760:	4801      	ldr	r0, [pc, #4]	@ (8008768 <__sfp_lock_release+0x8>)
 8008762:	f000 b9fb 	b.w	8008b5c <__retarget_lock_release_recursive>
 8008766:	bf00      	nop
 8008768:	240003fd 	.word	0x240003fd

0800876c <__sinit>:
 800876c:	b510      	push	{r4, lr}
 800876e:	4604      	mov	r4, r0
 8008770:	f7ff fff0 	bl	8008754 <__sfp_lock_acquire>
 8008774:	6a23      	ldr	r3, [r4, #32]
 8008776:	b11b      	cbz	r3, 8008780 <__sinit+0x14>
 8008778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800877c:	f7ff bff0 	b.w	8008760 <__sfp_lock_release>
 8008780:	4b04      	ldr	r3, [pc, #16]	@ (8008794 <__sinit+0x28>)
 8008782:	6223      	str	r3, [r4, #32]
 8008784:	4b04      	ldr	r3, [pc, #16]	@ (8008798 <__sinit+0x2c>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d1f5      	bne.n	8008778 <__sinit+0xc>
 800878c:	f7ff ffc4 	bl	8008718 <global_stdio_init.part.0>
 8008790:	e7f2      	b.n	8008778 <__sinit+0xc>
 8008792:	bf00      	nop
 8008794:	080086d9 	.word	0x080086d9
 8008798:	240003f4 	.word	0x240003f4

0800879c <_fwalk_sglue>:
 800879c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087a0:	4607      	mov	r7, r0
 80087a2:	4688      	mov	r8, r1
 80087a4:	4614      	mov	r4, r2
 80087a6:	2600      	movs	r6, #0
 80087a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80087ac:	f1b9 0901 	subs.w	r9, r9, #1
 80087b0:	d505      	bpl.n	80087be <_fwalk_sglue+0x22>
 80087b2:	6824      	ldr	r4, [r4, #0]
 80087b4:	2c00      	cmp	r4, #0
 80087b6:	d1f7      	bne.n	80087a8 <_fwalk_sglue+0xc>
 80087b8:	4630      	mov	r0, r6
 80087ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087be:	89ab      	ldrh	r3, [r5, #12]
 80087c0:	2b01      	cmp	r3, #1
 80087c2:	d907      	bls.n	80087d4 <_fwalk_sglue+0x38>
 80087c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80087c8:	3301      	adds	r3, #1
 80087ca:	d003      	beq.n	80087d4 <_fwalk_sglue+0x38>
 80087cc:	4629      	mov	r1, r5
 80087ce:	4638      	mov	r0, r7
 80087d0:	47c0      	blx	r8
 80087d2:	4306      	orrs	r6, r0
 80087d4:	3568      	adds	r5, #104	@ 0x68
 80087d6:	e7e9      	b.n	80087ac <_fwalk_sglue+0x10>

080087d8 <iprintf>:
 80087d8:	b40f      	push	{r0, r1, r2, r3}
 80087da:	b507      	push	{r0, r1, r2, lr}
 80087dc:	4906      	ldr	r1, [pc, #24]	@ (80087f8 <iprintf+0x20>)
 80087de:	ab04      	add	r3, sp, #16
 80087e0:	6808      	ldr	r0, [r1, #0]
 80087e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80087e6:	6881      	ldr	r1, [r0, #8]
 80087e8:	9301      	str	r3, [sp, #4]
 80087ea:	f000 fadb 	bl	8008da4 <_vfiprintf_r>
 80087ee:	b003      	add	sp, #12
 80087f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80087f4:	b004      	add	sp, #16
 80087f6:	4770      	bx	lr
 80087f8:	24000020 	.word	0x24000020

080087fc <_puts_r>:
 80087fc:	6a03      	ldr	r3, [r0, #32]
 80087fe:	b570      	push	{r4, r5, r6, lr}
 8008800:	6884      	ldr	r4, [r0, #8]
 8008802:	4605      	mov	r5, r0
 8008804:	460e      	mov	r6, r1
 8008806:	b90b      	cbnz	r3, 800880c <_puts_r+0x10>
 8008808:	f7ff ffb0 	bl	800876c <__sinit>
 800880c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800880e:	07db      	lsls	r3, r3, #31
 8008810:	d405      	bmi.n	800881e <_puts_r+0x22>
 8008812:	89a3      	ldrh	r3, [r4, #12]
 8008814:	0598      	lsls	r0, r3, #22
 8008816:	d402      	bmi.n	800881e <_puts_r+0x22>
 8008818:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800881a:	f000 f99e 	bl	8008b5a <__retarget_lock_acquire_recursive>
 800881e:	89a3      	ldrh	r3, [r4, #12]
 8008820:	0719      	lsls	r1, r3, #28
 8008822:	d502      	bpl.n	800882a <_puts_r+0x2e>
 8008824:	6923      	ldr	r3, [r4, #16]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d135      	bne.n	8008896 <_puts_r+0x9a>
 800882a:	4621      	mov	r1, r4
 800882c:	4628      	mov	r0, r5
 800882e:	f000 f8c5 	bl	80089bc <__swsetup_r>
 8008832:	b380      	cbz	r0, 8008896 <_puts_r+0x9a>
 8008834:	f04f 35ff 	mov.w	r5, #4294967295
 8008838:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800883a:	07da      	lsls	r2, r3, #31
 800883c:	d405      	bmi.n	800884a <_puts_r+0x4e>
 800883e:	89a3      	ldrh	r3, [r4, #12]
 8008840:	059b      	lsls	r3, r3, #22
 8008842:	d402      	bmi.n	800884a <_puts_r+0x4e>
 8008844:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008846:	f000 f989 	bl	8008b5c <__retarget_lock_release_recursive>
 800884a:	4628      	mov	r0, r5
 800884c:	bd70      	pop	{r4, r5, r6, pc}
 800884e:	2b00      	cmp	r3, #0
 8008850:	da04      	bge.n	800885c <_puts_r+0x60>
 8008852:	69a2      	ldr	r2, [r4, #24]
 8008854:	429a      	cmp	r2, r3
 8008856:	dc17      	bgt.n	8008888 <_puts_r+0x8c>
 8008858:	290a      	cmp	r1, #10
 800885a:	d015      	beq.n	8008888 <_puts_r+0x8c>
 800885c:	6823      	ldr	r3, [r4, #0]
 800885e:	1c5a      	adds	r2, r3, #1
 8008860:	6022      	str	r2, [r4, #0]
 8008862:	7019      	strb	r1, [r3, #0]
 8008864:	68a3      	ldr	r3, [r4, #8]
 8008866:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800886a:	3b01      	subs	r3, #1
 800886c:	60a3      	str	r3, [r4, #8]
 800886e:	2900      	cmp	r1, #0
 8008870:	d1ed      	bne.n	800884e <_puts_r+0x52>
 8008872:	2b00      	cmp	r3, #0
 8008874:	da11      	bge.n	800889a <_puts_r+0x9e>
 8008876:	4622      	mov	r2, r4
 8008878:	210a      	movs	r1, #10
 800887a:	4628      	mov	r0, r5
 800887c:	f000 f85f 	bl	800893e <__swbuf_r>
 8008880:	3001      	adds	r0, #1
 8008882:	d0d7      	beq.n	8008834 <_puts_r+0x38>
 8008884:	250a      	movs	r5, #10
 8008886:	e7d7      	b.n	8008838 <_puts_r+0x3c>
 8008888:	4622      	mov	r2, r4
 800888a:	4628      	mov	r0, r5
 800888c:	f000 f857 	bl	800893e <__swbuf_r>
 8008890:	3001      	adds	r0, #1
 8008892:	d1e7      	bne.n	8008864 <_puts_r+0x68>
 8008894:	e7ce      	b.n	8008834 <_puts_r+0x38>
 8008896:	3e01      	subs	r6, #1
 8008898:	e7e4      	b.n	8008864 <_puts_r+0x68>
 800889a:	6823      	ldr	r3, [r4, #0]
 800889c:	1c5a      	adds	r2, r3, #1
 800889e:	6022      	str	r2, [r4, #0]
 80088a0:	220a      	movs	r2, #10
 80088a2:	701a      	strb	r2, [r3, #0]
 80088a4:	e7ee      	b.n	8008884 <_puts_r+0x88>
	...

080088a8 <puts>:
 80088a8:	4b02      	ldr	r3, [pc, #8]	@ (80088b4 <puts+0xc>)
 80088aa:	4601      	mov	r1, r0
 80088ac:	6818      	ldr	r0, [r3, #0]
 80088ae:	f7ff bfa5 	b.w	80087fc <_puts_r>
 80088b2:	bf00      	nop
 80088b4:	24000020 	.word	0x24000020

080088b8 <__sread>:
 80088b8:	b510      	push	{r4, lr}
 80088ba:	460c      	mov	r4, r1
 80088bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088c0:	f000 f8fc 	bl	8008abc <_read_r>
 80088c4:	2800      	cmp	r0, #0
 80088c6:	bfab      	itete	ge
 80088c8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80088ca:	89a3      	ldrhlt	r3, [r4, #12]
 80088cc:	181b      	addge	r3, r3, r0
 80088ce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80088d2:	bfac      	ite	ge
 80088d4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80088d6:	81a3      	strhlt	r3, [r4, #12]
 80088d8:	bd10      	pop	{r4, pc}

080088da <__swrite>:
 80088da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088de:	461f      	mov	r7, r3
 80088e0:	898b      	ldrh	r3, [r1, #12]
 80088e2:	05db      	lsls	r3, r3, #23
 80088e4:	4605      	mov	r5, r0
 80088e6:	460c      	mov	r4, r1
 80088e8:	4616      	mov	r6, r2
 80088ea:	d505      	bpl.n	80088f8 <__swrite+0x1e>
 80088ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088f0:	2302      	movs	r3, #2
 80088f2:	2200      	movs	r2, #0
 80088f4:	f000 f8d0 	bl	8008a98 <_lseek_r>
 80088f8:	89a3      	ldrh	r3, [r4, #12]
 80088fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008902:	81a3      	strh	r3, [r4, #12]
 8008904:	4632      	mov	r2, r6
 8008906:	463b      	mov	r3, r7
 8008908:	4628      	mov	r0, r5
 800890a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800890e:	f000 b8e7 	b.w	8008ae0 <_write_r>

08008912 <__sseek>:
 8008912:	b510      	push	{r4, lr}
 8008914:	460c      	mov	r4, r1
 8008916:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800891a:	f000 f8bd 	bl	8008a98 <_lseek_r>
 800891e:	1c43      	adds	r3, r0, #1
 8008920:	89a3      	ldrh	r3, [r4, #12]
 8008922:	bf15      	itete	ne
 8008924:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008926:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800892a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800892e:	81a3      	strheq	r3, [r4, #12]
 8008930:	bf18      	it	ne
 8008932:	81a3      	strhne	r3, [r4, #12]
 8008934:	bd10      	pop	{r4, pc}

08008936 <__sclose>:
 8008936:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800893a:	f000 b89d 	b.w	8008a78 <_close_r>

0800893e <__swbuf_r>:
 800893e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008940:	460e      	mov	r6, r1
 8008942:	4614      	mov	r4, r2
 8008944:	4605      	mov	r5, r0
 8008946:	b118      	cbz	r0, 8008950 <__swbuf_r+0x12>
 8008948:	6a03      	ldr	r3, [r0, #32]
 800894a:	b90b      	cbnz	r3, 8008950 <__swbuf_r+0x12>
 800894c:	f7ff ff0e 	bl	800876c <__sinit>
 8008950:	69a3      	ldr	r3, [r4, #24]
 8008952:	60a3      	str	r3, [r4, #8]
 8008954:	89a3      	ldrh	r3, [r4, #12]
 8008956:	071a      	lsls	r2, r3, #28
 8008958:	d501      	bpl.n	800895e <__swbuf_r+0x20>
 800895a:	6923      	ldr	r3, [r4, #16]
 800895c:	b943      	cbnz	r3, 8008970 <__swbuf_r+0x32>
 800895e:	4621      	mov	r1, r4
 8008960:	4628      	mov	r0, r5
 8008962:	f000 f82b 	bl	80089bc <__swsetup_r>
 8008966:	b118      	cbz	r0, 8008970 <__swbuf_r+0x32>
 8008968:	f04f 37ff 	mov.w	r7, #4294967295
 800896c:	4638      	mov	r0, r7
 800896e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008970:	6823      	ldr	r3, [r4, #0]
 8008972:	6922      	ldr	r2, [r4, #16]
 8008974:	1a98      	subs	r0, r3, r2
 8008976:	6963      	ldr	r3, [r4, #20]
 8008978:	b2f6      	uxtb	r6, r6
 800897a:	4283      	cmp	r3, r0
 800897c:	4637      	mov	r7, r6
 800897e:	dc05      	bgt.n	800898c <__swbuf_r+0x4e>
 8008980:	4621      	mov	r1, r4
 8008982:	4628      	mov	r0, r5
 8008984:	f000 fd36 	bl	80093f4 <_fflush_r>
 8008988:	2800      	cmp	r0, #0
 800898a:	d1ed      	bne.n	8008968 <__swbuf_r+0x2a>
 800898c:	68a3      	ldr	r3, [r4, #8]
 800898e:	3b01      	subs	r3, #1
 8008990:	60a3      	str	r3, [r4, #8]
 8008992:	6823      	ldr	r3, [r4, #0]
 8008994:	1c5a      	adds	r2, r3, #1
 8008996:	6022      	str	r2, [r4, #0]
 8008998:	701e      	strb	r6, [r3, #0]
 800899a:	6962      	ldr	r2, [r4, #20]
 800899c:	1c43      	adds	r3, r0, #1
 800899e:	429a      	cmp	r2, r3
 80089a0:	d004      	beq.n	80089ac <__swbuf_r+0x6e>
 80089a2:	89a3      	ldrh	r3, [r4, #12]
 80089a4:	07db      	lsls	r3, r3, #31
 80089a6:	d5e1      	bpl.n	800896c <__swbuf_r+0x2e>
 80089a8:	2e0a      	cmp	r6, #10
 80089aa:	d1df      	bne.n	800896c <__swbuf_r+0x2e>
 80089ac:	4621      	mov	r1, r4
 80089ae:	4628      	mov	r0, r5
 80089b0:	f000 fd20 	bl	80093f4 <_fflush_r>
 80089b4:	2800      	cmp	r0, #0
 80089b6:	d0d9      	beq.n	800896c <__swbuf_r+0x2e>
 80089b8:	e7d6      	b.n	8008968 <__swbuf_r+0x2a>
	...

080089bc <__swsetup_r>:
 80089bc:	b538      	push	{r3, r4, r5, lr}
 80089be:	4b29      	ldr	r3, [pc, #164]	@ (8008a64 <__swsetup_r+0xa8>)
 80089c0:	4605      	mov	r5, r0
 80089c2:	6818      	ldr	r0, [r3, #0]
 80089c4:	460c      	mov	r4, r1
 80089c6:	b118      	cbz	r0, 80089d0 <__swsetup_r+0x14>
 80089c8:	6a03      	ldr	r3, [r0, #32]
 80089ca:	b90b      	cbnz	r3, 80089d0 <__swsetup_r+0x14>
 80089cc:	f7ff fece 	bl	800876c <__sinit>
 80089d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089d4:	0719      	lsls	r1, r3, #28
 80089d6:	d422      	bmi.n	8008a1e <__swsetup_r+0x62>
 80089d8:	06da      	lsls	r2, r3, #27
 80089da:	d407      	bmi.n	80089ec <__swsetup_r+0x30>
 80089dc:	2209      	movs	r2, #9
 80089de:	602a      	str	r2, [r5, #0]
 80089e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089e4:	81a3      	strh	r3, [r4, #12]
 80089e6:	f04f 30ff 	mov.w	r0, #4294967295
 80089ea:	e033      	b.n	8008a54 <__swsetup_r+0x98>
 80089ec:	0758      	lsls	r0, r3, #29
 80089ee:	d512      	bpl.n	8008a16 <__swsetup_r+0x5a>
 80089f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80089f2:	b141      	cbz	r1, 8008a06 <__swsetup_r+0x4a>
 80089f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80089f8:	4299      	cmp	r1, r3
 80089fa:	d002      	beq.n	8008a02 <__swsetup_r+0x46>
 80089fc:	4628      	mov	r0, r5
 80089fe:	f000 f8af 	bl	8008b60 <_free_r>
 8008a02:	2300      	movs	r3, #0
 8008a04:	6363      	str	r3, [r4, #52]	@ 0x34
 8008a06:	89a3      	ldrh	r3, [r4, #12]
 8008a08:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008a0c:	81a3      	strh	r3, [r4, #12]
 8008a0e:	2300      	movs	r3, #0
 8008a10:	6063      	str	r3, [r4, #4]
 8008a12:	6923      	ldr	r3, [r4, #16]
 8008a14:	6023      	str	r3, [r4, #0]
 8008a16:	89a3      	ldrh	r3, [r4, #12]
 8008a18:	f043 0308 	orr.w	r3, r3, #8
 8008a1c:	81a3      	strh	r3, [r4, #12]
 8008a1e:	6923      	ldr	r3, [r4, #16]
 8008a20:	b94b      	cbnz	r3, 8008a36 <__swsetup_r+0x7a>
 8008a22:	89a3      	ldrh	r3, [r4, #12]
 8008a24:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008a28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a2c:	d003      	beq.n	8008a36 <__swsetup_r+0x7a>
 8008a2e:	4621      	mov	r1, r4
 8008a30:	4628      	mov	r0, r5
 8008a32:	f000 fd2d 	bl	8009490 <__smakebuf_r>
 8008a36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a3a:	f013 0201 	ands.w	r2, r3, #1
 8008a3e:	d00a      	beq.n	8008a56 <__swsetup_r+0x9a>
 8008a40:	2200      	movs	r2, #0
 8008a42:	60a2      	str	r2, [r4, #8]
 8008a44:	6962      	ldr	r2, [r4, #20]
 8008a46:	4252      	negs	r2, r2
 8008a48:	61a2      	str	r2, [r4, #24]
 8008a4a:	6922      	ldr	r2, [r4, #16]
 8008a4c:	b942      	cbnz	r2, 8008a60 <__swsetup_r+0xa4>
 8008a4e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008a52:	d1c5      	bne.n	80089e0 <__swsetup_r+0x24>
 8008a54:	bd38      	pop	{r3, r4, r5, pc}
 8008a56:	0799      	lsls	r1, r3, #30
 8008a58:	bf58      	it	pl
 8008a5a:	6962      	ldrpl	r2, [r4, #20]
 8008a5c:	60a2      	str	r2, [r4, #8]
 8008a5e:	e7f4      	b.n	8008a4a <__swsetup_r+0x8e>
 8008a60:	2000      	movs	r0, #0
 8008a62:	e7f7      	b.n	8008a54 <__swsetup_r+0x98>
 8008a64:	24000020 	.word	0x24000020

08008a68 <memset>:
 8008a68:	4402      	add	r2, r0
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d100      	bne.n	8008a72 <memset+0xa>
 8008a70:	4770      	bx	lr
 8008a72:	f803 1b01 	strb.w	r1, [r3], #1
 8008a76:	e7f9      	b.n	8008a6c <memset+0x4>

08008a78 <_close_r>:
 8008a78:	b538      	push	{r3, r4, r5, lr}
 8008a7a:	4d06      	ldr	r5, [pc, #24]	@ (8008a94 <_close_r+0x1c>)
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	4604      	mov	r4, r0
 8008a80:	4608      	mov	r0, r1
 8008a82:	602b      	str	r3, [r5, #0]
 8008a84:	f7f8 f8f9 	bl	8000c7a <_close>
 8008a88:	1c43      	adds	r3, r0, #1
 8008a8a:	d102      	bne.n	8008a92 <_close_r+0x1a>
 8008a8c:	682b      	ldr	r3, [r5, #0]
 8008a8e:	b103      	cbz	r3, 8008a92 <_close_r+0x1a>
 8008a90:	6023      	str	r3, [r4, #0]
 8008a92:	bd38      	pop	{r3, r4, r5, pc}
 8008a94:	240003f8 	.word	0x240003f8

08008a98 <_lseek_r>:
 8008a98:	b538      	push	{r3, r4, r5, lr}
 8008a9a:	4d07      	ldr	r5, [pc, #28]	@ (8008ab8 <_lseek_r+0x20>)
 8008a9c:	4604      	mov	r4, r0
 8008a9e:	4608      	mov	r0, r1
 8008aa0:	4611      	mov	r1, r2
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	602a      	str	r2, [r5, #0]
 8008aa6:	461a      	mov	r2, r3
 8008aa8:	f7f8 f90e 	bl	8000cc8 <_lseek>
 8008aac:	1c43      	adds	r3, r0, #1
 8008aae:	d102      	bne.n	8008ab6 <_lseek_r+0x1e>
 8008ab0:	682b      	ldr	r3, [r5, #0]
 8008ab2:	b103      	cbz	r3, 8008ab6 <_lseek_r+0x1e>
 8008ab4:	6023      	str	r3, [r4, #0]
 8008ab6:	bd38      	pop	{r3, r4, r5, pc}
 8008ab8:	240003f8 	.word	0x240003f8

08008abc <_read_r>:
 8008abc:	b538      	push	{r3, r4, r5, lr}
 8008abe:	4d07      	ldr	r5, [pc, #28]	@ (8008adc <_read_r+0x20>)
 8008ac0:	4604      	mov	r4, r0
 8008ac2:	4608      	mov	r0, r1
 8008ac4:	4611      	mov	r1, r2
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	602a      	str	r2, [r5, #0]
 8008aca:	461a      	mov	r2, r3
 8008acc:	f7f8 f89c 	bl	8000c08 <_read>
 8008ad0:	1c43      	adds	r3, r0, #1
 8008ad2:	d102      	bne.n	8008ada <_read_r+0x1e>
 8008ad4:	682b      	ldr	r3, [r5, #0]
 8008ad6:	b103      	cbz	r3, 8008ada <_read_r+0x1e>
 8008ad8:	6023      	str	r3, [r4, #0]
 8008ada:	bd38      	pop	{r3, r4, r5, pc}
 8008adc:	240003f8 	.word	0x240003f8

08008ae0 <_write_r>:
 8008ae0:	b538      	push	{r3, r4, r5, lr}
 8008ae2:	4d07      	ldr	r5, [pc, #28]	@ (8008b00 <_write_r+0x20>)
 8008ae4:	4604      	mov	r4, r0
 8008ae6:	4608      	mov	r0, r1
 8008ae8:	4611      	mov	r1, r2
 8008aea:	2200      	movs	r2, #0
 8008aec:	602a      	str	r2, [r5, #0]
 8008aee:	461a      	mov	r2, r3
 8008af0:	f7f8 f8a7 	bl	8000c42 <_write>
 8008af4:	1c43      	adds	r3, r0, #1
 8008af6:	d102      	bne.n	8008afe <_write_r+0x1e>
 8008af8:	682b      	ldr	r3, [r5, #0]
 8008afa:	b103      	cbz	r3, 8008afe <_write_r+0x1e>
 8008afc:	6023      	str	r3, [r4, #0]
 8008afe:	bd38      	pop	{r3, r4, r5, pc}
 8008b00:	240003f8 	.word	0x240003f8

08008b04 <__errno>:
 8008b04:	4b01      	ldr	r3, [pc, #4]	@ (8008b0c <__errno+0x8>)
 8008b06:	6818      	ldr	r0, [r3, #0]
 8008b08:	4770      	bx	lr
 8008b0a:	bf00      	nop
 8008b0c:	24000020 	.word	0x24000020

08008b10 <__libc_init_array>:
 8008b10:	b570      	push	{r4, r5, r6, lr}
 8008b12:	4d0d      	ldr	r5, [pc, #52]	@ (8008b48 <__libc_init_array+0x38>)
 8008b14:	4c0d      	ldr	r4, [pc, #52]	@ (8008b4c <__libc_init_array+0x3c>)
 8008b16:	1b64      	subs	r4, r4, r5
 8008b18:	10a4      	asrs	r4, r4, #2
 8008b1a:	2600      	movs	r6, #0
 8008b1c:	42a6      	cmp	r6, r4
 8008b1e:	d109      	bne.n	8008b34 <__libc_init_array+0x24>
 8008b20:	4d0b      	ldr	r5, [pc, #44]	@ (8008b50 <__libc_init_array+0x40>)
 8008b22:	4c0c      	ldr	r4, [pc, #48]	@ (8008b54 <__libc_init_array+0x44>)
 8008b24:	f000 fd22 	bl	800956c <_init>
 8008b28:	1b64      	subs	r4, r4, r5
 8008b2a:	10a4      	asrs	r4, r4, #2
 8008b2c:	2600      	movs	r6, #0
 8008b2e:	42a6      	cmp	r6, r4
 8008b30:	d105      	bne.n	8008b3e <__libc_init_array+0x2e>
 8008b32:	bd70      	pop	{r4, r5, r6, pc}
 8008b34:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b38:	4798      	blx	r3
 8008b3a:	3601      	adds	r6, #1
 8008b3c:	e7ee      	b.n	8008b1c <__libc_init_array+0xc>
 8008b3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b42:	4798      	blx	r3
 8008b44:	3601      	adds	r6, #1
 8008b46:	e7f2      	b.n	8008b2e <__libc_init_array+0x1e>
 8008b48:	0800962c 	.word	0x0800962c
 8008b4c:	0800962c 	.word	0x0800962c
 8008b50:	0800962c 	.word	0x0800962c
 8008b54:	08009630 	.word	0x08009630

08008b58 <__retarget_lock_init_recursive>:
 8008b58:	4770      	bx	lr

08008b5a <__retarget_lock_acquire_recursive>:
 8008b5a:	4770      	bx	lr

08008b5c <__retarget_lock_release_recursive>:
 8008b5c:	4770      	bx	lr
	...

08008b60 <_free_r>:
 8008b60:	b538      	push	{r3, r4, r5, lr}
 8008b62:	4605      	mov	r5, r0
 8008b64:	2900      	cmp	r1, #0
 8008b66:	d041      	beq.n	8008bec <_free_r+0x8c>
 8008b68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b6c:	1f0c      	subs	r4, r1, #4
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	bfb8      	it	lt
 8008b72:	18e4      	addlt	r4, r4, r3
 8008b74:	f000 f8e0 	bl	8008d38 <__malloc_lock>
 8008b78:	4a1d      	ldr	r2, [pc, #116]	@ (8008bf0 <_free_r+0x90>)
 8008b7a:	6813      	ldr	r3, [r2, #0]
 8008b7c:	b933      	cbnz	r3, 8008b8c <_free_r+0x2c>
 8008b7e:	6063      	str	r3, [r4, #4]
 8008b80:	6014      	str	r4, [r2, #0]
 8008b82:	4628      	mov	r0, r5
 8008b84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b88:	f000 b8dc 	b.w	8008d44 <__malloc_unlock>
 8008b8c:	42a3      	cmp	r3, r4
 8008b8e:	d908      	bls.n	8008ba2 <_free_r+0x42>
 8008b90:	6820      	ldr	r0, [r4, #0]
 8008b92:	1821      	adds	r1, r4, r0
 8008b94:	428b      	cmp	r3, r1
 8008b96:	bf01      	itttt	eq
 8008b98:	6819      	ldreq	r1, [r3, #0]
 8008b9a:	685b      	ldreq	r3, [r3, #4]
 8008b9c:	1809      	addeq	r1, r1, r0
 8008b9e:	6021      	streq	r1, [r4, #0]
 8008ba0:	e7ed      	b.n	8008b7e <_free_r+0x1e>
 8008ba2:	461a      	mov	r2, r3
 8008ba4:	685b      	ldr	r3, [r3, #4]
 8008ba6:	b10b      	cbz	r3, 8008bac <_free_r+0x4c>
 8008ba8:	42a3      	cmp	r3, r4
 8008baa:	d9fa      	bls.n	8008ba2 <_free_r+0x42>
 8008bac:	6811      	ldr	r1, [r2, #0]
 8008bae:	1850      	adds	r0, r2, r1
 8008bb0:	42a0      	cmp	r0, r4
 8008bb2:	d10b      	bne.n	8008bcc <_free_r+0x6c>
 8008bb4:	6820      	ldr	r0, [r4, #0]
 8008bb6:	4401      	add	r1, r0
 8008bb8:	1850      	adds	r0, r2, r1
 8008bba:	4283      	cmp	r3, r0
 8008bbc:	6011      	str	r1, [r2, #0]
 8008bbe:	d1e0      	bne.n	8008b82 <_free_r+0x22>
 8008bc0:	6818      	ldr	r0, [r3, #0]
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	6053      	str	r3, [r2, #4]
 8008bc6:	4408      	add	r0, r1
 8008bc8:	6010      	str	r0, [r2, #0]
 8008bca:	e7da      	b.n	8008b82 <_free_r+0x22>
 8008bcc:	d902      	bls.n	8008bd4 <_free_r+0x74>
 8008bce:	230c      	movs	r3, #12
 8008bd0:	602b      	str	r3, [r5, #0]
 8008bd2:	e7d6      	b.n	8008b82 <_free_r+0x22>
 8008bd4:	6820      	ldr	r0, [r4, #0]
 8008bd6:	1821      	adds	r1, r4, r0
 8008bd8:	428b      	cmp	r3, r1
 8008bda:	bf04      	itt	eq
 8008bdc:	6819      	ldreq	r1, [r3, #0]
 8008bde:	685b      	ldreq	r3, [r3, #4]
 8008be0:	6063      	str	r3, [r4, #4]
 8008be2:	bf04      	itt	eq
 8008be4:	1809      	addeq	r1, r1, r0
 8008be6:	6021      	streq	r1, [r4, #0]
 8008be8:	6054      	str	r4, [r2, #4]
 8008bea:	e7ca      	b.n	8008b82 <_free_r+0x22>
 8008bec:	bd38      	pop	{r3, r4, r5, pc}
 8008bee:	bf00      	nop
 8008bf0:	24000404 	.word	0x24000404

08008bf4 <sbrk_aligned>:
 8008bf4:	b570      	push	{r4, r5, r6, lr}
 8008bf6:	4e0f      	ldr	r6, [pc, #60]	@ (8008c34 <sbrk_aligned+0x40>)
 8008bf8:	460c      	mov	r4, r1
 8008bfa:	6831      	ldr	r1, [r6, #0]
 8008bfc:	4605      	mov	r5, r0
 8008bfe:	b911      	cbnz	r1, 8008c06 <sbrk_aligned+0x12>
 8008c00:	f000 fca4 	bl	800954c <_sbrk_r>
 8008c04:	6030      	str	r0, [r6, #0]
 8008c06:	4621      	mov	r1, r4
 8008c08:	4628      	mov	r0, r5
 8008c0a:	f000 fc9f 	bl	800954c <_sbrk_r>
 8008c0e:	1c43      	adds	r3, r0, #1
 8008c10:	d103      	bne.n	8008c1a <sbrk_aligned+0x26>
 8008c12:	f04f 34ff 	mov.w	r4, #4294967295
 8008c16:	4620      	mov	r0, r4
 8008c18:	bd70      	pop	{r4, r5, r6, pc}
 8008c1a:	1cc4      	adds	r4, r0, #3
 8008c1c:	f024 0403 	bic.w	r4, r4, #3
 8008c20:	42a0      	cmp	r0, r4
 8008c22:	d0f8      	beq.n	8008c16 <sbrk_aligned+0x22>
 8008c24:	1a21      	subs	r1, r4, r0
 8008c26:	4628      	mov	r0, r5
 8008c28:	f000 fc90 	bl	800954c <_sbrk_r>
 8008c2c:	3001      	adds	r0, #1
 8008c2e:	d1f2      	bne.n	8008c16 <sbrk_aligned+0x22>
 8008c30:	e7ef      	b.n	8008c12 <sbrk_aligned+0x1e>
 8008c32:	bf00      	nop
 8008c34:	24000400 	.word	0x24000400

08008c38 <_malloc_r>:
 8008c38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c3c:	1ccd      	adds	r5, r1, #3
 8008c3e:	f025 0503 	bic.w	r5, r5, #3
 8008c42:	3508      	adds	r5, #8
 8008c44:	2d0c      	cmp	r5, #12
 8008c46:	bf38      	it	cc
 8008c48:	250c      	movcc	r5, #12
 8008c4a:	2d00      	cmp	r5, #0
 8008c4c:	4606      	mov	r6, r0
 8008c4e:	db01      	blt.n	8008c54 <_malloc_r+0x1c>
 8008c50:	42a9      	cmp	r1, r5
 8008c52:	d904      	bls.n	8008c5e <_malloc_r+0x26>
 8008c54:	230c      	movs	r3, #12
 8008c56:	6033      	str	r3, [r6, #0]
 8008c58:	2000      	movs	r0, #0
 8008c5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008d34 <_malloc_r+0xfc>
 8008c62:	f000 f869 	bl	8008d38 <__malloc_lock>
 8008c66:	f8d8 3000 	ldr.w	r3, [r8]
 8008c6a:	461c      	mov	r4, r3
 8008c6c:	bb44      	cbnz	r4, 8008cc0 <_malloc_r+0x88>
 8008c6e:	4629      	mov	r1, r5
 8008c70:	4630      	mov	r0, r6
 8008c72:	f7ff ffbf 	bl	8008bf4 <sbrk_aligned>
 8008c76:	1c43      	adds	r3, r0, #1
 8008c78:	4604      	mov	r4, r0
 8008c7a:	d158      	bne.n	8008d2e <_malloc_r+0xf6>
 8008c7c:	f8d8 4000 	ldr.w	r4, [r8]
 8008c80:	4627      	mov	r7, r4
 8008c82:	2f00      	cmp	r7, #0
 8008c84:	d143      	bne.n	8008d0e <_malloc_r+0xd6>
 8008c86:	2c00      	cmp	r4, #0
 8008c88:	d04b      	beq.n	8008d22 <_malloc_r+0xea>
 8008c8a:	6823      	ldr	r3, [r4, #0]
 8008c8c:	4639      	mov	r1, r7
 8008c8e:	4630      	mov	r0, r6
 8008c90:	eb04 0903 	add.w	r9, r4, r3
 8008c94:	f000 fc5a 	bl	800954c <_sbrk_r>
 8008c98:	4581      	cmp	r9, r0
 8008c9a:	d142      	bne.n	8008d22 <_malloc_r+0xea>
 8008c9c:	6821      	ldr	r1, [r4, #0]
 8008c9e:	1a6d      	subs	r5, r5, r1
 8008ca0:	4629      	mov	r1, r5
 8008ca2:	4630      	mov	r0, r6
 8008ca4:	f7ff ffa6 	bl	8008bf4 <sbrk_aligned>
 8008ca8:	3001      	adds	r0, #1
 8008caa:	d03a      	beq.n	8008d22 <_malloc_r+0xea>
 8008cac:	6823      	ldr	r3, [r4, #0]
 8008cae:	442b      	add	r3, r5
 8008cb0:	6023      	str	r3, [r4, #0]
 8008cb2:	f8d8 3000 	ldr.w	r3, [r8]
 8008cb6:	685a      	ldr	r2, [r3, #4]
 8008cb8:	bb62      	cbnz	r2, 8008d14 <_malloc_r+0xdc>
 8008cba:	f8c8 7000 	str.w	r7, [r8]
 8008cbe:	e00f      	b.n	8008ce0 <_malloc_r+0xa8>
 8008cc0:	6822      	ldr	r2, [r4, #0]
 8008cc2:	1b52      	subs	r2, r2, r5
 8008cc4:	d420      	bmi.n	8008d08 <_malloc_r+0xd0>
 8008cc6:	2a0b      	cmp	r2, #11
 8008cc8:	d917      	bls.n	8008cfa <_malloc_r+0xc2>
 8008cca:	1961      	adds	r1, r4, r5
 8008ccc:	42a3      	cmp	r3, r4
 8008cce:	6025      	str	r5, [r4, #0]
 8008cd0:	bf18      	it	ne
 8008cd2:	6059      	strne	r1, [r3, #4]
 8008cd4:	6863      	ldr	r3, [r4, #4]
 8008cd6:	bf08      	it	eq
 8008cd8:	f8c8 1000 	streq.w	r1, [r8]
 8008cdc:	5162      	str	r2, [r4, r5]
 8008cde:	604b      	str	r3, [r1, #4]
 8008ce0:	4630      	mov	r0, r6
 8008ce2:	f000 f82f 	bl	8008d44 <__malloc_unlock>
 8008ce6:	f104 000b 	add.w	r0, r4, #11
 8008cea:	1d23      	adds	r3, r4, #4
 8008cec:	f020 0007 	bic.w	r0, r0, #7
 8008cf0:	1ac2      	subs	r2, r0, r3
 8008cf2:	bf1c      	itt	ne
 8008cf4:	1a1b      	subne	r3, r3, r0
 8008cf6:	50a3      	strne	r3, [r4, r2]
 8008cf8:	e7af      	b.n	8008c5a <_malloc_r+0x22>
 8008cfa:	6862      	ldr	r2, [r4, #4]
 8008cfc:	42a3      	cmp	r3, r4
 8008cfe:	bf0c      	ite	eq
 8008d00:	f8c8 2000 	streq.w	r2, [r8]
 8008d04:	605a      	strne	r2, [r3, #4]
 8008d06:	e7eb      	b.n	8008ce0 <_malloc_r+0xa8>
 8008d08:	4623      	mov	r3, r4
 8008d0a:	6864      	ldr	r4, [r4, #4]
 8008d0c:	e7ae      	b.n	8008c6c <_malloc_r+0x34>
 8008d0e:	463c      	mov	r4, r7
 8008d10:	687f      	ldr	r7, [r7, #4]
 8008d12:	e7b6      	b.n	8008c82 <_malloc_r+0x4a>
 8008d14:	461a      	mov	r2, r3
 8008d16:	685b      	ldr	r3, [r3, #4]
 8008d18:	42a3      	cmp	r3, r4
 8008d1a:	d1fb      	bne.n	8008d14 <_malloc_r+0xdc>
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	6053      	str	r3, [r2, #4]
 8008d20:	e7de      	b.n	8008ce0 <_malloc_r+0xa8>
 8008d22:	230c      	movs	r3, #12
 8008d24:	6033      	str	r3, [r6, #0]
 8008d26:	4630      	mov	r0, r6
 8008d28:	f000 f80c 	bl	8008d44 <__malloc_unlock>
 8008d2c:	e794      	b.n	8008c58 <_malloc_r+0x20>
 8008d2e:	6005      	str	r5, [r0, #0]
 8008d30:	e7d6      	b.n	8008ce0 <_malloc_r+0xa8>
 8008d32:	bf00      	nop
 8008d34:	24000404 	.word	0x24000404

08008d38 <__malloc_lock>:
 8008d38:	4801      	ldr	r0, [pc, #4]	@ (8008d40 <__malloc_lock+0x8>)
 8008d3a:	f7ff bf0e 	b.w	8008b5a <__retarget_lock_acquire_recursive>
 8008d3e:	bf00      	nop
 8008d40:	240003fc 	.word	0x240003fc

08008d44 <__malloc_unlock>:
 8008d44:	4801      	ldr	r0, [pc, #4]	@ (8008d4c <__malloc_unlock+0x8>)
 8008d46:	f7ff bf09 	b.w	8008b5c <__retarget_lock_release_recursive>
 8008d4a:	bf00      	nop
 8008d4c:	240003fc 	.word	0x240003fc

08008d50 <__sfputc_r>:
 8008d50:	6893      	ldr	r3, [r2, #8]
 8008d52:	3b01      	subs	r3, #1
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	b410      	push	{r4}
 8008d58:	6093      	str	r3, [r2, #8]
 8008d5a:	da08      	bge.n	8008d6e <__sfputc_r+0x1e>
 8008d5c:	6994      	ldr	r4, [r2, #24]
 8008d5e:	42a3      	cmp	r3, r4
 8008d60:	db01      	blt.n	8008d66 <__sfputc_r+0x16>
 8008d62:	290a      	cmp	r1, #10
 8008d64:	d103      	bne.n	8008d6e <__sfputc_r+0x1e>
 8008d66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d6a:	f7ff bde8 	b.w	800893e <__swbuf_r>
 8008d6e:	6813      	ldr	r3, [r2, #0]
 8008d70:	1c58      	adds	r0, r3, #1
 8008d72:	6010      	str	r0, [r2, #0]
 8008d74:	7019      	strb	r1, [r3, #0]
 8008d76:	4608      	mov	r0, r1
 8008d78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d7c:	4770      	bx	lr

08008d7e <__sfputs_r>:
 8008d7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d80:	4606      	mov	r6, r0
 8008d82:	460f      	mov	r7, r1
 8008d84:	4614      	mov	r4, r2
 8008d86:	18d5      	adds	r5, r2, r3
 8008d88:	42ac      	cmp	r4, r5
 8008d8a:	d101      	bne.n	8008d90 <__sfputs_r+0x12>
 8008d8c:	2000      	movs	r0, #0
 8008d8e:	e007      	b.n	8008da0 <__sfputs_r+0x22>
 8008d90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d94:	463a      	mov	r2, r7
 8008d96:	4630      	mov	r0, r6
 8008d98:	f7ff ffda 	bl	8008d50 <__sfputc_r>
 8008d9c:	1c43      	adds	r3, r0, #1
 8008d9e:	d1f3      	bne.n	8008d88 <__sfputs_r+0xa>
 8008da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008da4 <_vfiprintf_r>:
 8008da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008da8:	460d      	mov	r5, r1
 8008daa:	b09d      	sub	sp, #116	@ 0x74
 8008dac:	4614      	mov	r4, r2
 8008dae:	4698      	mov	r8, r3
 8008db0:	4606      	mov	r6, r0
 8008db2:	b118      	cbz	r0, 8008dbc <_vfiprintf_r+0x18>
 8008db4:	6a03      	ldr	r3, [r0, #32]
 8008db6:	b90b      	cbnz	r3, 8008dbc <_vfiprintf_r+0x18>
 8008db8:	f7ff fcd8 	bl	800876c <__sinit>
 8008dbc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008dbe:	07d9      	lsls	r1, r3, #31
 8008dc0:	d405      	bmi.n	8008dce <_vfiprintf_r+0x2a>
 8008dc2:	89ab      	ldrh	r3, [r5, #12]
 8008dc4:	059a      	lsls	r2, r3, #22
 8008dc6:	d402      	bmi.n	8008dce <_vfiprintf_r+0x2a>
 8008dc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008dca:	f7ff fec6 	bl	8008b5a <__retarget_lock_acquire_recursive>
 8008dce:	89ab      	ldrh	r3, [r5, #12]
 8008dd0:	071b      	lsls	r3, r3, #28
 8008dd2:	d501      	bpl.n	8008dd8 <_vfiprintf_r+0x34>
 8008dd4:	692b      	ldr	r3, [r5, #16]
 8008dd6:	b99b      	cbnz	r3, 8008e00 <_vfiprintf_r+0x5c>
 8008dd8:	4629      	mov	r1, r5
 8008dda:	4630      	mov	r0, r6
 8008ddc:	f7ff fdee 	bl	80089bc <__swsetup_r>
 8008de0:	b170      	cbz	r0, 8008e00 <_vfiprintf_r+0x5c>
 8008de2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008de4:	07dc      	lsls	r4, r3, #31
 8008de6:	d504      	bpl.n	8008df2 <_vfiprintf_r+0x4e>
 8008de8:	f04f 30ff 	mov.w	r0, #4294967295
 8008dec:	b01d      	add	sp, #116	@ 0x74
 8008dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008df2:	89ab      	ldrh	r3, [r5, #12]
 8008df4:	0598      	lsls	r0, r3, #22
 8008df6:	d4f7      	bmi.n	8008de8 <_vfiprintf_r+0x44>
 8008df8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008dfa:	f7ff feaf 	bl	8008b5c <__retarget_lock_release_recursive>
 8008dfe:	e7f3      	b.n	8008de8 <_vfiprintf_r+0x44>
 8008e00:	2300      	movs	r3, #0
 8008e02:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e04:	2320      	movs	r3, #32
 8008e06:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008e0a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e0e:	2330      	movs	r3, #48	@ 0x30
 8008e10:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008fc0 <_vfiprintf_r+0x21c>
 8008e14:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008e18:	f04f 0901 	mov.w	r9, #1
 8008e1c:	4623      	mov	r3, r4
 8008e1e:	469a      	mov	sl, r3
 8008e20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e24:	b10a      	cbz	r2, 8008e2a <_vfiprintf_r+0x86>
 8008e26:	2a25      	cmp	r2, #37	@ 0x25
 8008e28:	d1f9      	bne.n	8008e1e <_vfiprintf_r+0x7a>
 8008e2a:	ebba 0b04 	subs.w	fp, sl, r4
 8008e2e:	d00b      	beq.n	8008e48 <_vfiprintf_r+0xa4>
 8008e30:	465b      	mov	r3, fp
 8008e32:	4622      	mov	r2, r4
 8008e34:	4629      	mov	r1, r5
 8008e36:	4630      	mov	r0, r6
 8008e38:	f7ff ffa1 	bl	8008d7e <__sfputs_r>
 8008e3c:	3001      	adds	r0, #1
 8008e3e:	f000 80a7 	beq.w	8008f90 <_vfiprintf_r+0x1ec>
 8008e42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e44:	445a      	add	r2, fp
 8008e46:	9209      	str	r2, [sp, #36]	@ 0x24
 8008e48:	f89a 3000 	ldrb.w	r3, [sl]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	f000 809f 	beq.w	8008f90 <_vfiprintf_r+0x1ec>
 8008e52:	2300      	movs	r3, #0
 8008e54:	f04f 32ff 	mov.w	r2, #4294967295
 8008e58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e5c:	f10a 0a01 	add.w	sl, sl, #1
 8008e60:	9304      	str	r3, [sp, #16]
 8008e62:	9307      	str	r3, [sp, #28]
 8008e64:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008e68:	931a      	str	r3, [sp, #104]	@ 0x68
 8008e6a:	4654      	mov	r4, sl
 8008e6c:	2205      	movs	r2, #5
 8008e6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e72:	4853      	ldr	r0, [pc, #332]	@ (8008fc0 <_vfiprintf_r+0x21c>)
 8008e74:	f7f7 fa34 	bl	80002e0 <memchr>
 8008e78:	9a04      	ldr	r2, [sp, #16]
 8008e7a:	b9d8      	cbnz	r0, 8008eb4 <_vfiprintf_r+0x110>
 8008e7c:	06d1      	lsls	r1, r2, #27
 8008e7e:	bf44      	itt	mi
 8008e80:	2320      	movmi	r3, #32
 8008e82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e86:	0713      	lsls	r3, r2, #28
 8008e88:	bf44      	itt	mi
 8008e8a:	232b      	movmi	r3, #43	@ 0x2b
 8008e8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e90:	f89a 3000 	ldrb.w	r3, [sl]
 8008e94:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e96:	d015      	beq.n	8008ec4 <_vfiprintf_r+0x120>
 8008e98:	9a07      	ldr	r2, [sp, #28]
 8008e9a:	4654      	mov	r4, sl
 8008e9c:	2000      	movs	r0, #0
 8008e9e:	f04f 0c0a 	mov.w	ip, #10
 8008ea2:	4621      	mov	r1, r4
 8008ea4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ea8:	3b30      	subs	r3, #48	@ 0x30
 8008eaa:	2b09      	cmp	r3, #9
 8008eac:	d94b      	bls.n	8008f46 <_vfiprintf_r+0x1a2>
 8008eae:	b1b0      	cbz	r0, 8008ede <_vfiprintf_r+0x13a>
 8008eb0:	9207      	str	r2, [sp, #28]
 8008eb2:	e014      	b.n	8008ede <_vfiprintf_r+0x13a>
 8008eb4:	eba0 0308 	sub.w	r3, r0, r8
 8008eb8:	fa09 f303 	lsl.w	r3, r9, r3
 8008ebc:	4313      	orrs	r3, r2
 8008ebe:	9304      	str	r3, [sp, #16]
 8008ec0:	46a2      	mov	sl, r4
 8008ec2:	e7d2      	b.n	8008e6a <_vfiprintf_r+0xc6>
 8008ec4:	9b03      	ldr	r3, [sp, #12]
 8008ec6:	1d19      	adds	r1, r3, #4
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	9103      	str	r1, [sp, #12]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	bfbb      	ittet	lt
 8008ed0:	425b      	neglt	r3, r3
 8008ed2:	f042 0202 	orrlt.w	r2, r2, #2
 8008ed6:	9307      	strge	r3, [sp, #28]
 8008ed8:	9307      	strlt	r3, [sp, #28]
 8008eda:	bfb8      	it	lt
 8008edc:	9204      	strlt	r2, [sp, #16]
 8008ede:	7823      	ldrb	r3, [r4, #0]
 8008ee0:	2b2e      	cmp	r3, #46	@ 0x2e
 8008ee2:	d10a      	bne.n	8008efa <_vfiprintf_r+0x156>
 8008ee4:	7863      	ldrb	r3, [r4, #1]
 8008ee6:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ee8:	d132      	bne.n	8008f50 <_vfiprintf_r+0x1ac>
 8008eea:	9b03      	ldr	r3, [sp, #12]
 8008eec:	1d1a      	adds	r2, r3, #4
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	9203      	str	r2, [sp, #12]
 8008ef2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008ef6:	3402      	adds	r4, #2
 8008ef8:	9305      	str	r3, [sp, #20]
 8008efa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008fd0 <_vfiprintf_r+0x22c>
 8008efe:	7821      	ldrb	r1, [r4, #0]
 8008f00:	2203      	movs	r2, #3
 8008f02:	4650      	mov	r0, sl
 8008f04:	f7f7 f9ec 	bl	80002e0 <memchr>
 8008f08:	b138      	cbz	r0, 8008f1a <_vfiprintf_r+0x176>
 8008f0a:	9b04      	ldr	r3, [sp, #16]
 8008f0c:	eba0 000a 	sub.w	r0, r0, sl
 8008f10:	2240      	movs	r2, #64	@ 0x40
 8008f12:	4082      	lsls	r2, r0
 8008f14:	4313      	orrs	r3, r2
 8008f16:	3401      	adds	r4, #1
 8008f18:	9304      	str	r3, [sp, #16]
 8008f1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f1e:	4829      	ldr	r0, [pc, #164]	@ (8008fc4 <_vfiprintf_r+0x220>)
 8008f20:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008f24:	2206      	movs	r2, #6
 8008f26:	f7f7 f9db 	bl	80002e0 <memchr>
 8008f2a:	2800      	cmp	r0, #0
 8008f2c:	d03f      	beq.n	8008fae <_vfiprintf_r+0x20a>
 8008f2e:	4b26      	ldr	r3, [pc, #152]	@ (8008fc8 <_vfiprintf_r+0x224>)
 8008f30:	bb1b      	cbnz	r3, 8008f7a <_vfiprintf_r+0x1d6>
 8008f32:	9b03      	ldr	r3, [sp, #12]
 8008f34:	3307      	adds	r3, #7
 8008f36:	f023 0307 	bic.w	r3, r3, #7
 8008f3a:	3308      	adds	r3, #8
 8008f3c:	9303      	str	r3, [sp, #12]
 8008f3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f40:	443b      	add	r3, r7
 8008f42:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f44:	e76a      	b.n	8008e1c <_vfiprintf_r+0x78>
 8008f46:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f4a:	460c      	mov	r4, r1
 8008f4c:	2001      	movs	r0, #1
 8008f4e:	e7a8      	b.n	8008ea2 <_vfiprintf_r+0xfe>
 8008f50:	2300      	movs	r3, #0
 8008f52:	3401      	adds	r4, #1
 8008f54:	9305      	str	r3, [sp, #20]
 8008f56:	4619      	mov	r1, r3
 8008f58:	f04f 0c0a 	mov.w	ip, #10
 8008f5c:	4620      	mov	r0, r4
 8008f5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f62:	3a30      	subs	r2, #48	@ 0x30
 8008f64:	2a09      	cmp	r2, #9
 8008f66:	d903      	bls.n	8008f70 <_vfiprintf_r+0x1cc>
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d0c6      	beq.n	8008efa <_vfiprintf_r+0x156>
 8008f6c:	9105      	str	r1, [sp, #20]
 8008f6e:	e7c4      	b.n	8008efa <_vfiprintf_r+0x156>
 8008f70:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f74:	4604      	mov	r4, r0
 8008f76:	2301      	movs	r3, #1
 8008f78:	e7f0      	b.n	8008f5c <_vfiprintf_r+0x1b8>
 8008f7a:	ab03      	add	r3, sp, #12
 8008f7c:	9300      	str	r3, [sp, #0]
 8008f7e:	462a      	mov	r2, r5
 8008f80:	4b12      	ldr	r3, [pc, #72]	@ (8008fcc <_vfiprintf_r+0x228>)
 8008f82:	a904      	add	r1, sp, #16
 8008f84:	4630      	mov	r0, r6
 8008f86:	f3af 8000 	nop.w
 8008f8a:	4607      	mov	r7, r0
 8008f8c:	1c78      	adds	r0, r7, #1
 8008f8e:	d1d6      	bne.n	8008f3e <_vfiprintf_r+0x19a>
 8008f90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008f92:	07d9      	lsls	r1, r3, #31
 8008f94:	d405      	bmi.n	8008fa2 <_vfiprintf_r+0x1fe>
 8008f96:	89ab      	ldrh	r3, [r5, #12]
 8008f98:	059a      	lsls	r2, r3, #22
 8008f9a:	d402      	bmi.n	8008fa2 <_vfiprintf_r+0x1fe>
 8008f9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008f9e:	f7ff fddd 	bl	8008b5c <__retarget_lock_release_recursive>
 8008fa2:	89ab      	ldrh	r3, [r5, #12]
 8008fa4:	065b      	lsls	r3, r3, #25
 8008fa6:	f53f af1f 	bmi.w	8008de8 <_vfiprintf_r+0x44>
 8008faa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008fac:	e71e      	b.n	8008dec <_vfiprintf_r+0x48>
 8008fae:	ab03      	add	r3, sp, #12
 8008fb0:	9300      	str	r3, [sp, #0]
 8008fb2:	462a      	mov	r2, r5
 8008fb4:	4b05      	ldr	r3, [pc, #20]	@ (8008fcc <_vfiprintf_r+0x228>)
 8008fb6:	a904      	add	r1, sp, #16
 8008fb8:	4630      	mov	r0, r6
 8008fba:	f000 f879 	bl	80090b0 <_printf_i>
 8008fbe:	e7e4      	b.n	8008f8a <_vfiprintf_r+0x1e6>
 8008fc0:	080095f0 	.word	0x080095f0
 8008fc4:	080095fa 	.word	0x080095fa
 8008fc8:	00000000 	.word	0x00000000
 8008fcc:	08008d7f 	.word	0x08008d7f
 8008fd0:	080095f6 	.word	0x080095f6

08008fd4 <_printf_common>:
 8008fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fd8:	4616      	mov	r6, r2
 8008fda:	4698      	mov	r8, r3
 8008fdc:	688a      	ldr	r2, [r1, #8]
 8008fde:	690b      	ldr	r3, [r1, #16]
 8008fe0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	bfb8      	it	lt
 8008fe8:	4613      	movlt	r3, r2
 8008fea:	6033      	str	r3, [r6, #0]
 8008fec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008ff0:	4607      	mov	r7, r0
 8008ff2:	460c      	mov	r4, r1
 8008ff4:	b10a      	cbz	r2, 8008ffa <_printf_common+0x26>
 8008ff6:	3301      	adds	r3, #1
 8008ff8:	6033      	str	r3, [r6, #0]
 8008ffa:	6823      	ldr	r3, [r4, #0]
 8008ffc:	0699      	lsls	r1, r3, #26
 8008ffe:	bf42      	ittt	mi
 8009000:	6833      	ldrmi	r3, [r6, #0]
 8009002:	3302      	addmi	r3, #2
 8009004:	6033      	strmi	r3, [r6, #0]
 8009006:	6825      	ldr	r5, [r4, #0]
 8009008:	f015 0506 	ands.w	r5, r5, #6
 800900c:	d106      	bne.n	800901c <_printf_common+0x48>
 800900e:	f104 0a19 	add.w	sl, r4, #25
 8009012:	68e3      	ldr	r3, [r4, #12]
 8009014:	6832      	ldr	r2, [r6, #0]
 8009016:	1a9b      	subs	r3, r3, r2
 8009018:	42ab      	cmp	r3, r5
 800901a:	dc26      	bgt.n	800906a <_printf_common+0x96>
 800901c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009020:	6822      	ldr	r2, [r4, #0]
 8009022:	3b00      	subs	r3, #0
 8009024:	bf18      	it	ne
 8009026:	2301      	movne	r3, #1
 8009028:	0692      	lsls	r2, r2, #26
 800902a:	d42b      	bmi.n	8009084 <_printf_common+0xb0>
 800902c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009030:	4641      	mov	r1, r8
 8009032:	4638      	mov	r0, r7
 8009034:	47c8      	blx	r9
 8009036:	3001      	adds	r0, #1
 8009038:	d01e      	beq.n	8009078 <_printf_common+0xa4>
 800903a:	6823      	ldr	r3, [r4, #0]
 800903c:	6922      	ldr	r2, [r4, #16]
 800903e:	f003 0306 	and.w	r3, r3, #6
 8009042:	2b04      	cmp	r3, #4
 8009044:	bf02      	ittt	eq
 8009046:	68e5      	ldreq	r5, [r4, #12]
 8009048:	6833      	ldreq	r3, [r6, #0]
 800904a:	1aed      	subeq	r5, r5, r3
 800904c:	68a3      	ldr	r3, [r4, #8]
 800904e:	bf0c      	ite	eq
 8009050:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009054:	2500      	movne	r5, #0
 8009056:	4293      	cmp	r3, r2
 8009058:	bfc4      	itt	gt
 800905a:	1a9b      	subgt	r3, r3, r2
 800905c:	18ed      	addgt	r5, r5, r3
 800905e:	2600      	movs	r6, #0
 8009060:	341a      	adds	r4, #26
 8009062:	42b5      	cmp	r5, r6
 8009064:	d11a      	bne.n	800909c <_printf_common+0xc8>
 8009066:	2000      	movs	r0, #0
 8009068:	e008      	b.n	800907c <_printf_common+0xa8>
 800906a:	2301      	movs	r3, #1
 800906c:	4652      	mov	r2, sl
 800906e:	4641      	mov	r1, r8
 8009070:	4638      	mov	r0, r7
 8009072:	47c8      	blx	r9
 8009074:	3001      	adds	r0, #1
 8009076:	d103      	bne.n	8009080 <_printf_common+0xac>
 8009078:	f04f 30ff 	mov.w	r0, #4294967295
 800907c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009080:	3501      	adds	r5, #1
 8009082:	e7c6      	b.n	8009012 <_printf_common+0x3e>
 8009084:	18e1      	adds	r1, r4, r3
 8009086:	1c5a      	adds	r2, r3, #1
 8009088:	2030      	movs	r0, #48	@ 0x30
 800908a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800908e:	4422      	add	r2, r4
 8009090:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009094:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009098:	3302      	adds	r3, #2
 800909a:	e7c7      	b.n	800902c <_printf_common+0x58>
 800909c:	2301      	movs	r3, #1
 800909e:	4622      	mov	r2, r4
 80090a0:	4641      	mov	r1, r8
 80090a2:	4638      	mov	r0, r7
 80090a4:	47c8      	blx	r9
 80090a6:	3001      	adds	r0, #1
 80090a8:	d0e6      	beq.n	8009078 <_printf_common+0xa4>
 80090aa:	3601      	adds	r6, #1
 80090ac:	e7d9      	b.n	8009062 <_printf_common+0x8e>
	...

080090b0 <_printf_i>:
 80090b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80090b4:	7e0f      	ldrb	r7, [r1, #24]
 80090b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80090b8:	2f78      	cmp	r7, #120	@ 0x78
 80090ba:	4691      	mov	r9, r2
 80090bc:	4680      	mov	r8, r0
 80090be:	460c      	mov	r4, r1
 80090c0:	469a      	mov	sl, r3
 80090c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80090c6:	d807      	bhi.n	80090d8 <_printf_i+0x28>
 80090c8:	2f62      	cmp	r7, #98	@ 0x62
 80090ca:	d80a      	bhi.n	80090e2 <_printf_i+0x32>
 80090cc:	2f00      	cmp	r7, #0
 80090ce:	f000 80d1 	beq.w	8009274 <_printf_i+0x1c4>
 80090d2:	2f58      	cmp	r7, #88	@ 0x58
 80090d4:	f000 80b8 	beq.w	8009248 <_printf_i+0x198>
 80090d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80090dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80090e0:	e03a      	b.n	8009158 <_printf_i+0xa8>
 80090e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80090e6:	2b15      	cmp	r3, #21
 80090e8:	d8f6      	bhi.n	80090d8 <_printf_i+0x28>
 80090ea:	a101      	add	r1, pc, #4	@ (adr r1, 80090f0 <_printf_i+0x40>)
 80090ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80090f0:	08009149 	.word	0x08009149
 80090f4:	0800915d 	.word	0x0800915d
 80090f8:	080090d9 	.word	0x080090d9
 80090fc:	080090d9 	.word	0x080090d9
 8009100:	080090d9 	.word	0x080090d9
 8009104:	080090d9 	.word	0x080090d9
 8009108:	0800915d 	.word	0x0800915d
 800910c:	080090d9 	.word	0x080090d9
 8009110:	080090d9 	.word	0x080090d9
 8009114:	080090d9 	.word	0x080090d9
 8009118:	080090d9 	.word	0x080090d9
 800911c:	0800925b 	.word	0x0800925b
 8009120:	08009187 	.word	0x08009187
 8009124:	08009215 	.word	0x08009215
 8009128:	080090d9 	.word	0x080090d9
 800912c:	080090d9 	.word	0x080090d9
 8009130:	0800927d 	.word	0x0800927d
 8009134:	080090d9 	.word	0x080090d9
 8009138:	08009187 	.word	0x08009187
 800913c:	080090d9 	.word	0x080090d9
 8009140:	080090d9 	.word	0x080090d9
 8009144:	0800921d 	.word	0x0800921d
 8009148:	6833      	ldr	r3, [r6, #0]
 800914a:	1d1a      	adds	r2, r3, #4
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	6032      	str	r2, [r6, #0]
 8009150:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009154:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009158:	2301      	movs	r3, #1
 800915a:	e09c      	b.n	8009296 <_printf_i+0x1e6>
 800915c:	6833      	ldr	r3, [r6, #0]
 800915e:	6820      	ldr	r0, [r4, #0]
 8009160:	1d19      	adds	r1, r3, #4
 8009162:	6031      	str	r1, [r6, #0]
 8009164:	0606      	lsls	r6, r0, #24
 8009166:	d501      	bpl.n	800916c <_printf_i+0xbc>
 8009168:	681d      	ldr	r5, [r3, #0]
 800916a:	e003      	b.n	8009174 <_printf_i+0xc4>
 800916c:	0645      	lsls	r5, r0, #25
 800916e:	d5fb      	bpl.n	8009168 <_printf_i+0xb8>
 8009170:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009174:	2d00      	cmp	r5, #0
 8009176:	da03      	bge.n	8009180 <_printf_i+0xd0>
 8009178:	232d      	movs	r3, #45	@ 0x2d
 800917a:	426d      	negs	r5, r5
 800917c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009180:	4858      	ldr	r0, [pc, #352]	@ (80092e4 <_printf_i+0x234>)
 8009182:	230a      	movs	r3, #10
 8009184:	e011      	b.n	80091aa <_printf_i+0xfa>
 8009186:	6821      	ldr	r1, [r4, #0]
 8009188:	6833      	ldr	r3, [r6, #0]
 800918a:	0608      	lsls	r0, r1, #24
 800918c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009190:	d402      	bmi.n	8009198 <_printf_i+0xe8>
 8009192:	0649      	lsls	r1, r1, #25
 8009194:	bf48      	it	mi
 8009196:	b2ad      	uxthmi	r5, r5
 8009198:	2f6f      	cmp	r7, #111	@ 0x6f
 800919a:	4852      	ldr	r0, [pc, #328]	@ (80092e4 <_printf_i+0x234>)
 800919c:	6033      	str	r3, [r6, #0]
 800919e:	bf14      	ite	ne
 80091a0:	230a      	movne	r3, #10
 80091a2:	2308      	moveq	r3, #8
 80091a4:	2100      	movs	r1, #0
 80091a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80091aa:	6866      	ldr	r6, [r4, #4]
 80091ac:	60a6      	str	r6, [r4, #8]
 80091ae:	2e00      	cmp	r6, #0
 80091b0:	db05      	blt.n	80091be <_printf_i+0x10e>
 80091b2:	6821      	ldr	r1, [r4, #0]
 80091b4:	432e      	orrs	r6, r5
 80091b6:	f021 0104 	bic.w	r1, r1, #4
 80091ba:	6021      	str	r1, [r4, #0]
 80091bc:	d04b      	beq.n	8009256 <_printf_i+0x1a6>
 80091be:	4616      	mov	r6, r2
 80091c0:	fbb5 f1f3 	udiv	r1, r5, r3
 80091c4:	fb03 5711 	mls	r7, r3, r1, r5
 80091c8:	5dc7      	ldrb	r7, [r0, r7]
 80091ca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80091ce:	462f      	mov	r7, r5
 80091d0:	42bb      	cmp	r3, r7
 80091d2:	460d      	mov	r5, r1
 80091d4:	d9f4      	bls.n	80091c0 <_printf_i+0x110>
 80091d6:	2b08      	cmp	r3, #8
 80091d8:	d10b      	bne.n	80091f2 <_printf_i+0x142>
 80091da:	6823      	ldr	r3, [r4, #0]
 80091dc:	07df      	lsls	r7, r3, #31
 80091de:	d508      	bpl.n	80091f2 <_printf_i+0x142>
 80091e0:	6923      	ldr	r3, [r4, #16]
 80091e2:	6861      	ldr	r1, [r4, #4]
 80091e4:	4299      	cmp	r1, r3
 80091e6:	bfde      	ittt	le
 80091e8:	2330      	movle	r3, #48	@ 0x30
 80091ea:	f806 3c01 	strble.w	r3, [r6, #-1]
 80091ee:	f106 36ff 	addle.w	r6, r6, #4294967295
 80091f2:	1b92      	subs	r2, r2, r6
 80091f4:	6122      	str	r2, [r4, #16]
 80091f6:	f8cd a000 	str.w	sl, [sp]
 80091fa:	464b      	mov	r3, r9
 80091fc:	aa03      	add	r2, sp, #12
 80091fe:	4621      	mov	r1, r4
 8009200:	4640      	mov	r0, r8
 8009202:	f7ff fee7 	bl	8008fd4 <_printf_common>
 8009206:	3001      	adds	r0, #1
 8009208:	d14a      	bne.n	80092a0 <_printf_i+0x1f0>
 800920a:	f04f 30ff 	mov.w	r0, #4294967295
 800920e:	b004      	add	sp, #16
 8009210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009214:	6823      	ldr	r3, [r4, #0]
 8009216:	f043 0320 	orr.w	r3, r3, #32
 800921a:	6023      	str	r3, [r4, #0]
 800921c:	4832      	ldr	r0, [pc, #200]	@ (80092e8 <_printf_i+0x238>)
 800921e:	2778      	movs	r7, #120	@ 0x78
 8009220:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009224:	6823      	ldr	r3, [r4, #0]
 8009226:	6831      	ldr	r1, [r6, #0]
 8009228:	061f      	lsls	r7, r3, #24
 800922a:	f851 5b04 	ldr.w	r5, [r1], #4
 800922e:	d402      	bmi.n	8009236 <_printf_i+0x186>
 8009230:	065f      	lsls	r7, r3, #25
 8009232:	bf48      	it	mi
 8009234:	b2ad      	uxthmi	r5, r5
 8009236:	6031      	str	r1, [r6, #0]
 8009238:	07d9      	lsls	r1, r3, #31
 800923a:	bf44      	itt	mi
 800923c:	f043 0320 	orrmi.w	r3, r3, #32
 8009240:	6023      	strmi	r3, [r4, #0]
 8009242:	b11d      	cbz	r5, 800924c <_printf_i+0x19c>
 8009244:	2310      	movs	r3, #16
 8009246:	e7ad      	b.n	80091a4 <_printf_i+0xf4>
 8009248:	4826      	ldr	r0, [pc, #152]	@ (80092e4 <_printf_i+0x234>)
 800924a:	e7e9      	b.n	8009220 <_printf_i+0x170>
 800924c:	6823      	ldr	r3, [r4, #0]
 800924e:	f023 0320 	bic.w	r3, r3, #32
 8009252:	6023      	str	r3, [r4, #0]
 8009254:	e7f6      	b.n	8009244 <_printf_i+0x194>
 8009256:	4616      	mov	r6, r2
 8009258:	e7bd      	b.n	80091d6 <_printf_i+0x126>
 800925a:	6833      	ldr	r3, [r6, #0]
 800925c:	6825      	ldr	r5, [r4, #0]
 800925e:	6961      	ldr	r1, [r4, #20]
 8009260:	1d18      	adds	r0, r3, #4
 8009262:	6030      	str	r0, [r6, #0]
 8009264:	062e      	lsls	r6, r5, #24
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	d501      	bpl.n	800926e <_printf_i+0x1be>
 800926a:	6019      	str	r1, [r3, #0]
 800926c:	e002      	b.n	8009274 <_printf_i+0x1c4>
 800926e:	0668      	lsls	r0, r5, #25
 8009270:	d5fb      	bpl.n	800926a <_printf_i+0x1ba>
 8009272:	8019      	strh	r1, [r3, #0]
 8009274:	2300      	movs	r3, #0
 8009276:	6123      	str	r3, [r4, #16]
 8009278:	4616      	mov	r6, r2
 800927a:	e7bc      	b.n	80091f6 <_printf_i+0x146>
 800927c:	6833      	ldr	r3, [r6, #0]
 800927e:	1d1a      	adds	r2, r3, #4
 8009280:	6032      	str	r2, [r6, #0]
 8009282:	681e      	ldr	r6, [r3, #0]
 8009284:	6862      	ldr	r2, [r4, #4]
 8009286:	2100      	movs	r1, #0
 8009288:	4630      	mov	r0, r6
 800928a:	f7f7 f829 	bl	80002e0 <memchr>
 800928e:	b108      	cbz	r0, 8009294 <_printf_i+0x1e4>
 8009290:	1b80      	subs	r0, r0, r6
 8009292:	6060      	str	r0, [r4, #4]
 8009294:	6863      	ldr	r3, [r4, #4]
 8009296:	6123      	str	r3, [r4, #16]
 8009298:	2300      	movs	r3, #0
 800929a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800929e:	e7aa      	b.n	80091f6 <_printf_i+0x146>
 80092a0:	6923      	ldr	r3, [r4, #16]
 80092a2:	4632      	mov	r2, r6
 80092a4:	4649      	mov	r1, r9
 80092a6:	4640      	mov	r0, r8
 80092a8:	47d0      	blx	sl
 80092aa:	3001      	adds	r0, #1
 80092ac:	d0ad      	beq.n	800920a <_printf_i+0x15a>
 80092ae:	6823      	ldr	r3, [r4, #0]
 80092b0:	079b      	lsls	r3, r3, #30
 80092b2:	d413      	bmi.n	80092dc <_printf_i+0x22c>
 80092b4:	68e0      	ldr	r0, [r4, #12]
 80092b6:	9b03      	ldr	r3, [sp, #12]
 80092b8:	4298      	cmp	r0, r3
 80092ba:	bfb8      	it	lt
 80092bc:	4618      	movlt	r0, r3
 80092be:	e7a6      	b.n	800920e <_printf_i+0x15e>
 80092c0:	2301      	movs	r3, #1
 80092c2:	4632      	mov	r2, r6
 80092c4:	4649      	mov	r1, r9
 80092c6:	4640      	mov	r0, r8
 80092c8:	47d0      	blx	sl
 80092ca:	3001      	adds	r0, #1
 80092cc:	d09d      	beq.n	800920a <_printf_i+0x15a>
 80092ce:	3501      	adds	r5, #1
 80092d0:	68e3      	ldr	r3, [r4, #12]
 80092d2:	9903      	ldr	r1, [sp, #12]
 80092d4:	1a5b      	subs	r3, r3, r1
 80092d6:	42ab      	cmp	r3, r5
 80092d8:	dcf2      	bgt.n	80092c0 <_printf_i+0x210>
 80092da:	e7eb      	b.n	80092b4 <_printf_i+0x204>
 80092dc:	2500      	movs	r5, #0
 80092de:	f104 0619 	add.w	r6, r4, #25
 80092e2:	e7f5      	b.n	80092d0 <_printf_i+0x220>
 80092e4:	08009601 	.word	0x08009601
 80092e8:	08009612 	.word	0x08009612

080092ec <__sflush_r>:
 80092ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80092f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092f4:	0716      	lsls	r6, r2, #28
 80092f6:	4605      	mov	r5, r0
 80092f8:	460c      	mov	r4, r1
 80092fa:	d454      	bmi.n	80093a6 <__sflush_r+0xba>
 80092fc:	684b      	ldr	r3, [r1, #4]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	dc02      	bgt.n	8009308 <__sflush_r+0x1c>
 8009302:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009304:	2b00      	cmp	r3, #0
 8009306:	dd48      	ble.n	800939a <__sflush_r+0xae>
 8009308:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800930a:	2e00      	cmp	r6, #0
 800930c:	d045      	beq.n	800939a <__sflush_r+0xae>
 800930e:	2300      	movs	r3, #0
 8009310:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009314:	682f      	ldr	r7, [r5, #0]
 8009316:	6a21      	ldr	r1, [r4, #32]
 8009318:	602b      	str	r3, [r5, #0]
 800931a:	d030      	beq.n	800937e <__sflush_r+0x92>
 800931c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800931e:	89a3      	ldrh	r3, [r4, #12]
 8009320:	0759      	lsls	r1, r3, #29
 8009322:	d505      	bpl.n	8009330 <__sflush_r+0x44>
 8009324:	6863      	ldr	r3, [r4, #4]
 8009326:	1ad2      	subs	r2, r2, r3
 8009328:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800932a:	b10b      	cbz	r3, 8009330 <__sflush_r+0x44>
 800932c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800932e:	1ad2      	subs	r2, r2, r3
 8009330:	2300      	movs	r3, #0
 8009332:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009334:	6a21      	ldr	r1, [r4, #32]
 8009336:	4628      	mov	r0, r5
 8009338:	47b0      	blx	r6
 800933a:	1c43      	adds	r3, r0, #1
 800933c:	89a3      	ldrh	r3, [r4, #12]
 800933e:	d106      	bne.n	800934e <__sflush_r+0x62>
 8009340:	6829      	ldr	r1, [r5, #0]
 8009342:	291d      	cmp	r1, #29
 8009344:	d82b      	bhi.n	800939e <__sflush_r+0xb2>
 8009346:	4a2a      	ldr	r2, [pc, #168]	@ (80093f0 <__sflush_r+0x104>)
 8009348:	40ca      	lsrs	r2, r1
 800934a:	07d6      	lsls	r6, r2, #31
 800934c:	d527      	bpl.n	800939e <__sflush_r+0xb2>
 800934e:	2200      	movs	r2, #0
 8009350:	6062      	str	r2, [r4, #4]
 8009352:	04d9      	lsls	r1, r3, #19
 8009354:	6922      	ldr	r2, [r4, #16]
 8009356:	6022      	str	r2, [r4, #0]
 8009358:	d504      	bpl.n	8009364 <__sflush_r+0x78>
 800935a:	1c42      	adds	r2, r0, #1
 800935c:	d101      	bne.n	8009362 <__sflush_r+0x76>
 800935e:	682b      	ldr	r3, [r5, #0]
 8009360:	b903      	cbnz	r3, 8009364 <__sflush_r+0x78>
 8009362:	6560      	str	r0, [r4, #84]	@ 0x54
 8009364:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009366:	602f      	str	r7, [r5, #0]
 8009368:	b1b9      	cbz	r1, 800939a <__sflush_r+0xae>
 800936a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800936e:	4299      	cmp	r1, r3
 8009370:	d002      	beq.n	8009378 <__sflush_r+0x8c>
 8009372:	4628      	mov	r0, r5
 8009374:	f7ff fbf4 	bl	8008b60 <_free_r>
 8009378:	2300      	movs	r3, #0
 800937a:	6363      	str	r3, [r4, #52]	@ 0x34
 800937c:	e00d      	b.n	800939a <__sflush_r+0xae>
 800937e:	2301      	movs	r3, #1
 8009380:	4628      	mov	r0, r5
 8009382:	47b0      	blx	r6
 8009384:	4602      	mov	r2, r0
 8009386:	1c50      	adds	r0, r2, #1
 8009388:	d1c9      	bne.n	800931e <__sflush_r+0x32>
 800938a:	682b      	ldr	r3, [r5, #0]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d0c6      	beq.n	800931e <__sflush_r+0x32>
 8009390:	2b1d      	cmp	r3, #29
 8009392:	d001      	beq.n	8009398 <__sflush_r+0xac>
 8009394:	2b16      	cmp	r3, #22
 8009396:	d11e      	bne.n	80093d6 <__sflush_r+0xea>
 8009398:	602f      	str	r7, [r5, #0]
 800939a:	2000      	movs	r0, #0
 800939c:	e022      	b.n	80093e4 <__sflush_r+0xf8>
 800939e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80093a2:	b21b      	sxth	r3, r3
 80093a4:	e01b      	b.n	80093de <__sflush_r+0xf2>
 80093a6:	690f      	ldr	r7, [r1, #16]
 80093a8:	2f00      	cmp	r7, #0
 80093aa:	d0f6      	beq.n	800939a <__sflush_r+0xae>
 80093ac:	0793      	lsls	r3, r2, #30
 80093ae:	680e      	ldr	r6, [r1, #0]
 80093b0:	bf08      	it	eq
 80093b2:	694b      	ldreq	r3, [r1, #20]
 80093b4:	600f      	str	r7, [r1, #0]
 80093b6:	bf18      	it	ne
 80093b8:	2300      	movne	r3, #0
 80093ba:	eba6 0807 	sub.w	r8, r6, r7
 80093be:	608b      	str	r3, [r1, #8]
 80093c0:	f1b8 0f00 	cmp.w	r8, #0
 80093c4:	dde9      	ble.n	800939a <__sflush_r+0xae>
 80093c6:	6a21      	ldr	r1, [r4, #32]
 80093c8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80093ca:	4643      	mov	r3, r8
 80093cc:	463a      	mov	r2, r7
 80093ce:	4628      	mov	r0, r5
 80093d0:	47b0      	blx	r6
 80093d2:	2800      	cmp	r0, #0
 80093d4:	dc08      	bgt.n	80093e8 <__sflush_r+0xfc>
 80093d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80093de:	81a3      	strh	r3, [r4, #12]
 80093e0:	f04f 30ff 	mov.w	r0, #4294967295
 80093e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093e8:	4407      	add	r7, r0
 80093ea:	eba8 0800 	sub.w	r8, r8, r0
 80093ee:	e7e7      	b.n	80093c0 <__sflush_r+0xd4>
 80093f0:	20400001 	.word	0x20400001

080093f4 <_fflush_r>:
 80093f4:	b538      	push	{r3, r4, r5, lr}
 80093f6:	690b      	ldr	r3, [r1, #16]
 80093f8:	4605      	mov	r5, r0
 80093fa:	460c      	mov	r4, r1
 80093fc:	b913      	cbnz	r3, 8009404 <_fflush_r+0x10>
 80093fe:	2500      	movs	r5, #0
 8009400:	4628      	mov	r0, r5
 8009402:	bd38      	pop	{r3, r4, r5, pc}
 8009404:	b118      	cbz	r0, 800940e <_fflush_r+0x1a>
 8009406:	6a03      	ldr	r3, [r0, #32]
 8009408:	b90b      	cbnz	r3, 800940e <_fflush_r+0x1a>
 800940a:	f7ff f9af 	bl	800876c <__sinit>
 800940e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d0f3      	beq.n	80093fe <_fflush_r+0xa>
 8009416:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009418:	07d0      	lsls	r0, r2, #31
 800941a:	d404      	bmi.n	8009426 <_fflush_r+0x32>
 800941c:	0599      	lsls	r1, r3, #22
 800941e:	d402      	bmi.n	8009426 <_fflush_r+0x32>
 8009420:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009422:	f7ff fb9a 	bl	8008b5a <__retarget_lock_acquire_recursive>
 8009426:	4628      	mov	r0, r5
 8009428:	4621      	mov	r1, r4
 800942a:	f7ff ff5f 	bl	80092ec <__sflush_r>
 800942e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009430:	07da      	lsls	r2, r3, #31
 8009432:	4605      	mov	r5, r0
 8009434:	d4e4      	bmi.n	8009400 <_fflush_r+0xc>
 8009436:	89a3      	ldrh	r3, [r4, #12]
 8009438:	059b      	lsls	r3, r3, #22
 800943a:	d4e1      	bmi.n	8009400 <_fflush_r+0xc>
 800943c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800943e:	f7ff fb8d 	bl	8008b5c <__retarget_lock_release_recursive>
 8009442:	e7dd      	b.n	8009400 <_fflush_r+0xc>

08009444 <__swhatbuf_r>:
 8009444:	b570      	push	{r4, r5, r6, lr}
 8009446:	460c      	mov	r4, r1
 8009448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800944c:	2900      	cmp	r1, #0
 800944e:	b096      	sub	sp, #88	@ 0x58
 8009450:	4615      	mov	r5, r2
 8009452:	461e      	mov	r6, r3
 8009454:	da0d      	bge.n	8009472 <__swhatbuf_r+0x2e>
 8009456:	89a3      	ldrh	r3, [r4, #12]
 8009458:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800945c:	f04f 0100 	mov.w	r1, #0
 8009460:	bf14      	ite	ne
 8009462:	2340      	movne	r3, #64	@ 0x40
 8009464:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009468:	2000      	movs	r0, #0
 800946a:	6031      	str	r1, [r6, #0]
 800946c:	602b      	str	r3, [r5, #0]
 800946e:	b016      	add	sp, #88	@ 0x58
 8009470:	bd70      	pop	{r4, r5, r6, pc}
 8009472:	466a      	mov	r2, sp
 8009474:	f000 f848 	bl	8009508 <_fstat_r>
 8009478:	2800      	cmp	r0, #0
 800947a:	dbec      	blt.n	8009456 <__swhatbuf_r+0x12>
 800947c:	9901      	ldr	r1, [sp, #4]
 800947e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009482:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009486:	4259      	negs	r1, r3
 8009488:	4159      	adcs	r1, r3
 800948a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800948e:	e7eb      	b.n	8009468 <__swhatbuf_r+0x24>

08009490 <__smakebuf_r>:
 8009490:	898b      	ldrh	r3, [r1, #12]
 8009492:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009494:	079d      	lsls	r5, r3, #30
 8009496:	4606      	mov	r6, r0
 8009498:	460c      	mov	r4, r1
 800949a:	d507      	bpl.n	80094ac <__smakebuf_r+0x1c>
 800949c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80094a0:	6023      	str	r3, [r4, #0]
 80094a2:	6123      	str	r3, [r4, #16]
 80094a4:	2301      	movs	r3, #1
 80094a6:	6163      	str	r3, [r4, #20]
 80094a8:	b003      	add	sp, #12
 80094aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094ac:	ab01      	add	r3, sp, #4
 80094ae:	466a      	mov	r2, sp
 80094b0:	f7ff ffc8 	bl	8009444 <__swhatbuf_r>
 80094b4:	9f00      	ldr	r7, [sp, #0]
 80094b6:	4605      	mov	r5, r0
 80094b8:	4639      	mov	r1, r7
 80094ba:	4630      	mov	r0, r6
 80094bc:	f7ff fbbc 	bl	8008c38 <_malloc_r>
 80094c0:	b948      	cbnz	r0, 80094d6 <__smakebuf_r+0x46>
 80094c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094c6:	059a      	lsls	r2, r3, #22
 80094c8:	d4ee      	bmi.n	80094a8 <__smakebuf_r+0x18>
 80094ca:	f023 0303 	bic.w	r3, r3, #3
 80094ce:	f043 0302 	orr.w	r3, r3, #2
 80094d2:	81a3      	strh	r3, [r4, #12]
 80094d4:	e7e2      	b.n	800949c <__smakebuf_r+0xc>
 80094d6:	89a3      	ldrh	r3, [r4, #12]
 80094d8:	6020      	str	r0, [r4, #0]
 80094da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80094de:	81a3      	strh	r3, [r4, #12]
 80094e0:	9b01      	ldr	r3, [sp, #4]
 80094e2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80094e6:	b15b      	cbz	r3, 8009500 <__smakebuf_r+0x70>
 80094e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094ec:	4630      	mov	r0, r6
 80094ee:	f000 f81d 	bl	800952c <_isatty_r>
 80094f2:	b128      	cbz	r0, 8009500 <__smakebuf_r+0x70>
 80094f4:	89a3      	ldrh	r3, [r4, #12]
 80094f6:	f023 0303 	bic.w	r3, r3, #3
 80094fa:	f043 0301 	orr.w	r3, r3, #1
 80094fe:	81a3      	strh	r3, [r4, #12]
 8009500:	89a3      	ldrh	r3, [r4, #12]
 8009502:	431d      	orrs	r5, r3
 8009504:	81a5      	strh	r5, [r4, #12]
 8009506:	e7cf      	b.n	80094a8 <__smakebuf_r+0x18>

08009508 <_fstat_r>:
 8009508:	b538      	push	{r3, r4, r5, lr}
 800950a:	4d07      	ldr	r5, [pc, #28]	@ (8009528 <_fstat_r+0x20>)
 800950c:	2300      	movs	r3, #0
 800950e:	4604      	mov	r4, r0
 8009510:	4608      	mov	r0, r1
 8009512:	4611      	mov	r1, r2
 8009514:	602b      	str	r3, [r5, #0]
 8009516:	f7f7 fbbc 	bl	8000c92 <_fstat>
 800951a:	1c43      	adds	r3, r0, #1
 800951c:	d102      	bne.n	8009524 <_fstat_r+0x1c>
 800951e:	682b      	ldr	r3, [r5, #0]
 8009520:	b103      	cbz	r3, 8009524 <_fstat_r+0x1c>
 8009522:	6023      	str	r3, [r4, #0]
 8009524:	bd38      	pop	{r3, r4, r5, pc}
 8009526:	bf00      	nop
 8009528:	240003f8 	.word	0x240003f8

0800952c <_isatty_r>:
 800952c:	b538      	push	{r3, r4, r5, lr}
 800952e:	4d06      	ldr	r5, [pc, #24]	@ (8009548 <_isatty_r+0x1c>)
 8009530:	2300      	movs	r3, #0
 8009532:	4604      	mov	r4, r0
 8009534:	4608      	mov	r0, r1
 8009536:	602b      	str	r3, [r5, #0]
 8009538:	f7f7 fbbb 	bl	8000cb2 <_isatty>
 800953c:	1c43      	adds	r3, r0, #1
 800953e:	d102      	bne.n	8009546 <_isatty_r+0x1a>
 8009540:	682b      	ldr	r3, [r5, #0]
 8009542:	b103      	cbz	r3, 8009546 <_isatty_r+0x1a>
 8009544:	6023      	str	r3, [r4, #0]
 8009546:	bd38      	pop	{r3, r4, r5, pc}
 8009548:	240003f8 	.word	0x240003f8

0800954c <_sbrk_r>:
 800954c:	b538      	push	{r3, r4, r5, lr}
 800954e:	4d06      	ldr	r5, [pc, #24]	@ (8009568 <_sbrk_r+0x1c>)
 8009550:	2300      	movs	r3, #0
 8009552:	4604      	mov	r4, r0
 8009554:	4608      	mov	r0, r1
 8009556:	602b      	str	r3, [r5, #0]
 8009558:	f7f7 fbc4 	bl	8000ce4 <_sbrk>
 800955c:	1c43      	adds	r3, r0, #1
 800955e:	d102      	bne.n	8009566 <_sbrk_r+0x1a>
 8009560:	682b      	ldr	r3, [r5, #0]
 8009562:	b103      	cbz	r3, 8009566 <_sbrk_r+0x1a>
 8009564:	6023      	str	r3, [r4, #0]
 8009566:	bd38      	pop	{r3, r4, r5, pc}
 8009568:	240003f8 	.word	0x240003f8

0800956c <_init>:
 800956c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800956e:	bf00      	nop
 8009570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009572:	bc08      	pop	{r3}
 8009574:	469e      	mov	lr, r3
 8009576:	4770      	bx	lr

08009578 <_fini>:
 8009578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800957a:	bf00      	nop
 800957c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800957e:	bc08      	pop	{r3}
 8009580:	469e      	mov	lr, r3
 8009582:	4770      	bx	lr
