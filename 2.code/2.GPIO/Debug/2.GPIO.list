
2.GPIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001eac  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002144  08002144  00003144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002154  08002154  00003154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08002158  08002158  00003158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000014  24000000  0800215c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000024  24000014  08002170  00004014  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000038  08002170  00004038  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00004014  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000738c  00000000  00000000  00004042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001445  00000000  00000000  0000b3ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000638  00000000  00000000  0000c818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 0000048d  00000000  00000000  0000ce50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00035085  00000000  00000000  0000d2dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00008d57  00000000  00000000  00042362  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00150995  00000000  00000000  0004b0b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  0019ba4e  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000173c  00000000  00000000  0019ba94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000005a  00000000  00000000  0019d1d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000014 	.word	0x24000014
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800212c 	.word	0x0800212c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000018 	.word	0x24000018
 80002d4:	0800212c 	.word	0x0800212c

080002d8 <MX_GPIO_Init>:
#include "gpio.h"

void MX_GPIO_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b08a      	sub	sp, #40	@ 0x28
 80002dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002de:	f107 0314 	add.w	r3, r7, #20
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
 80002e8:	609a      	str	r2, [r3, #8]
 80002ea:	60da      	str	r2, [r3, #12]
 80002ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80002ee:	4b49      	ldr	r3, [pc, #292]	@ (8000414 <MX_GPIO_Init+0x13c>)
 80002f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80002f4:	4a47      	ldr	r2, [pc, #284]	@ (8000414 <MX_GPIO_Init+0x13c>)
 80002f6:	f043 0310 	orr.w	r3, r3, #16
 80002fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80002fe:	4b45      	ldr	r3, [pc, #276]	@ (8000414 <MX_GPIO_Init+0x13c>)
 8000300:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000304:	f003 0310 	and.w	r3, r3, #16
 8000308:	613b      	str	r3, [r7, #16]
 800030a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800030c:	4b41      	ldr	r3, [pc, #260]	@ (8000414 <MX_GPIO_Init+0x13c>)
 800030e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000312:	4a40      	ldr	r2, [pc, #256]	@ (8000414 <MX_GPIO_Init+0x13c>)
 8000314:	f043 0304 	orr.w	r3, r3, #4
 8000318:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800031c:	4b3d      	ldr	r3, [pc, #244]	@ (8000414 <MX_GPIO_Init+0x13c>)
 800031e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000322:	f003 0304 	and.w	r3, r3, #4
 8000326:	60fb      	str	r3, [r7, #12]
 8000328:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800032a:	4b3a      	ldr	r3, [pc, #232]	@ (8000414 <MX_GPIO_Init+0x13c>)
 800032c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000330:	4a38      	ldr	r2, [pc, #224]	@ (8000414 <MX_GPIO_Init+0x13c>)
 8000332:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000336:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800033a:	4b36      	ldr	r3, [pc, #216]	@ (8000414 <MX_GPIO_Init+0x13c>)
 800033c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000340:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000344:	60bb      	str	r3, [r7, #8]
 8000346:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000348:	4b32      	ldr	r3, [pc, #200]	@ (8000414 <MX_GPIO_Init+0x13c>)
 800034a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800034e:	4a31      	ldr	r2, [pc, #196]	@ (8000414 <MX_GPIO_Init+0x13c>)
 8000350:	f043 0301 	orr.w	r3, r3, #1
 8000354:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000358:	4b2e      	ldr	r3, [pc, #184]	@ (8000414 <MX_GPIO_Init+0x13c>)
 800035a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800035e:	f003 0301 	and.w	r3, r3, #1
 8000362:	607b      	str	r3, [r7, #4]
 8000364:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000366:	4b2b      	ldr	r3, [pc, #172]	@ (8000414 <MX_GPIO_Init+0x13c>)
 8000368:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800036c:	4a29      	ldr	r2, [pc, #164]	@ (8000414 <MX_GPIO_Init+0x13c>)
 800036e:	f043 0302 	orr.w	r3, r3, #2
 8000372:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000376:	4b27      	ldr	r3, [pc, #156]	@ (8000414 <MX_GPIO_Init+0x13c>)
 8000378:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800037c:	f003 0302 	and.w	r3, r3, #2
 8000380:	603b      	str	r3, [r7, #0]
 8000382:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BEEP_GPIO_Port, BEEP_Pin, GPIO_PIN_RESET);
 8000384:	2200      	movs	r2, #0
 8000386:	2110      	movs	r1, #16
 8000388:	4823      	ldr	r0, [pc, #140]	@ (8000418 <MX_GPIO_Init+0x140>)
 800038a:	f000 fec5 	bl	8001118 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_SET);
 800038e:	2201      	movs	r2, #1
 8000390:	2160      	movs	r1, #96	@ 0x60
 8000392:	4821      	ldr	r0, [pc, #132]	@ (8000418 <MX_GPIO_Init+0x140>)
 8000394:	f000 fec0 	bl	8001118 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 8000398:	2201      	movs	r2, #1
 800039a:	2110      	movs	r1, #16
 800039c:	481f      	ldr	r0, [pc, #124]	@ (800041c <MX_GPIO_Init+0x144>)
 800039e:	f000 febb 	bl	8001118 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BEEP_Pin LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = BEEP_Pin|LED_GREEN_Pin|LED_RED_Pin;
 80003a2:	2370      	movs	r3, #112	@ 0x70
 80003a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003a6:	2301      	movs	r3, #1
 80003a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003aa:	2300      	movs	r3, #0
 80003ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003ae:	2302      	movs	r3, #2
 80003b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80003b2:	f107 0314 	add.w	r3, r7, #20
 80003b6:	4619      	mov	r1, r3
 80003b8:	4817      	ldr	r0, [pc, #92]	@ (8000418 <MX_GPIO_Init+0x140>)
 80003ba:	f000 fce5 	bl	8000d88 <HAL_GPIO_Init>

  /*Configure GPIO pin : WK_UP_Pin */
  GPIO_InitStruct.Pin = WK_UP_Pin;
 80003be:	2301      	movs	r3, #1
 80003c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT; // 下拉-按下为高电平
 80003c2:	2300      	movs	r3, #0
 80003c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80003c6:	2302      	movs	r3, #2
 80003c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(WK_UP_GPIO_Port, &GPIO_InitStruct);
 80003ca:	f107 0314 	add.w	r3, r7, #20
 80003ce:	4619      	mov	r1, r3
 80003d0:	4813      	ldr	r0, [pc, #76]	@ (8000420 <MX_GPIO_Init+0x148>)
 80003d2:	f000 fcd9 	bl	8000d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY0_Pin KEY1_Pin */
  GPIO_InitStruct.Pin = KEY0_Pin|KEY1_Pin;
 80003d6:	f248 0302 	movw	r3, #32770	@ 0x8002
 80003da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003dc:	2300      	movs	r3, #0
 80003de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP; // 上拉-按下为低电平
 80003e0:	2301      	movs	r3, #1
 80003e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003e4:	f107 0314 	add.w	r3, r7, #20
 80003e8:	4619      	mov	r1, r3
 80003ea:	480d      	ldr	r0, [pc, #52]	@ (8000420 <MX_GPIO_Init+0x148>)
 80003ec:	f000 fccc 	bl	8000d88 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 80003f0:	2310      	movs	r3, #16
 80003f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003f4:	2301      	movs	r3, #1
 80003f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f8:	2300      	movs	r3, #0
 80003fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003fc:	2302      	movs	r3, #2
 80003fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8000400:	f107 0314 	add.w	r3, r7, #20
 8000404:	4619      	mov	r1, r3
 8000406:	4805      	ldr	r0, [pc, #20]	@ (800041c <MX_GPIO_Init+0x144>)
 8000408:	f000 fcbe 	bl	8000d88 <HAL_GPIO_Init>

}
 800040c:	bf00      	nop
 800040e:	3728      	adds	r7, #40	@ 0x28
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}
 8000414:	58024400 	.word	0x58024400
 8000418:	58021000 	.word	0x58021000
 800041c:	58020400 	.word	0x58020400
 8000420:	58020000 	.word	0x58020000

08000424 <main>:
/* 全局变量 */
uint8_t beep_status = 0; // 蜂鸣器状态

/* 主函数 */
int main(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0
  MPU_Config();
 800042a:	f000 f8e7 	bl	80005fc <MPU_Config>
  HAL_Init();
 800042e:	f000 fa8d 	bl	800094c <HAL_Init>
  SystemClock_Config();
 8000432:	f000 f869 	bl	8000508 <SystemClock_Config>
  MX_GPIO_Init();
 8000436:	f7ff ff4f 	bl	80002d8 <MX_GPIO_Init>
  while (1)
  {
	  KEY_TypeDef key = Key_Scan(); // 扫描按键
 800043a:	f000 f90b 	bl	8000654 <Key_Scan>
 800043e:	4603      	mov	r3, r0
 8000440:	71fb      	strb	r3, [r7, #7]
	  switch(key)
 8000442:	79fb      	ldrb	r3, [r7, #7]
 8000444:	2b03      	cmp	r3, #3
 8000446:	d018      	beq.n	800047a <main+0x56>
 8000448:	2b03      	cmp	r3, #3
 800044a:	dc2d      	bgt.n	80004a8 <main+0x84>
 800044c:	2b01      	cmp	r3, #1
 800044e:	d002      	beq.n	8000456 <main+0x32>
 8000450:	2b02      	cmp	r3, #2
 8000452:	d009      	beq.n	8000468 <main+0x44>
	      case KEY1:
	          beep_status = !beep_status;
	          HAL_GPIO_WritePin(BEEP_GPIO_Port, BEEP_Pin, beep_status ? GPIO_PIN_SET : GPIO_PIN_RESET); // 翻转
	          break;
	      default:
	          break;
 8000454:	e028      	b.n	80004a8 <main+0x84>
	  		  HAL_GPIO_WritePin(BEEP_GPIO_Port, BEEP_Pin, GPIO_PIN_SET); // 打开
 8000456:	2201      	movs	r2, #1
 8000458:	2110      	movs	r1, #16
 800045a:	4828      	ldr	r0, [pc, #160]	@ (80004fc <main+0xd8>)
 800045c:	f000 fe5c 	bl	8001118 <HAL_GPIO_WritePin>
	          beep_status = 1;
 8000460:	4b27      	ldr	r3, [pc, #156]	@ (8000500 <main+0xdc>)
 8000462:	2201      	movs	r2, #1
 8000464:	701a      	strb	r2, [r3, #0]
	          break;
 8000466:	e020      	b.n	80004aa <main+0x86>
	          HAL_GPIO_WritePin(BEEP_GPIO_Port, BEEP_Pin, GPIO_PIN_RESET); // 关闭
 8000468:	2200      	movs	r2, #0
 800046a:	2110      	movs	r1, #16
 800046c:	4823      	ldr	r0, [pc, #140]	@ (80004fc <main+0xd8>)
 800046e:	f000 fe53 	bl	8001118 <HAL_GPIO_WritePin>
	          beep_status = 0;
 8000472:	4b23      	ldr	r3, [pc, #140]	@ (8000500 <main+0xdc>)
 8000474:	2200      	movs	r2, #0
 8000476:	701a      	strb	r2, [r3, #0]
	          break;
 8000478:	e017      	b.n	80004aa <main+0x86>
	          beep_status = !beep_status;
 800047a:	4b21      	ldr	r3, [pc, #132]	@ (8000500 <main+0xdc>)
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	2b00      	cmp	r3, #0
 8000480:	bf0c      	ite	eq
 8000482:	2301      	moveq	r3, #1
 8000484:	2300      	movne	r3, #0
 8000486:	b2db      	uxtb	r3, r3
 8000488:	461a      	mov	r2, r3
 800048a:	4b1d      	ldr	r3, [pc, #116]	@ (8000500 <main+0xdc>)
 800048c:	701a      	strb	r2, [r3, #0]
	          HAL_GPIO_WritePin(BEEP_GPIO_Port, BEEP_Pin, beep_status ? GPIO_PIN_SET : GPIO_PIN_RESET); // 翻转
 800048e:	4b1c      	ldr	r3, [pc, #112]	@ (8000500 <main+0xdc>)
 8000490:	781b      	ldrb	r3, [r3, #0]
 8000492:	2b00      	cmp	r3, #0
 8000494:	bf14      	ite	ne
 8000496:	2301      	movne	r3, #1
 8000498:	2300      	moveq	r3, #0
 800049a:	b2db      	uxtb	r3, r3
 800049c:	461a      	mov	r2, r3
 800049e:	2110      	movs	r1, #16
 80004a0:	4816      	ldr	r0, [pc, #88]	@ (80004fc <main+0xd8>)
 80004a2:	f000 fe39 	bl	8001118 <HAL_GPIO_WritePin>
	          break;
 80004a6:	e000      	b.n	80004aa <main+0x86>
	          break;
 80004a8:	bf00      	nop
	  }
	  /* 流水灯 */
	  LED_OFF(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 80004aa:	2201      	movs	r2, #1
 80004ac:	2110      	movs	r1, #16
 80004ae:	4815      	ldr	r0, [pc, #84]	@ (8000504 <main+0xe0>)
 80004b0:	f000 fe32 	bl	8001118 <HAL_GPIO_WritePin>
	  LED_ON(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80004b4:	2200      	movs	r2, #0
 80004b6:	2120      	movs	r1, #32
 80004b8:	4810      	ldr	r0, [pc, #64]	@ (80004fc <main+0xd8>)
 80004ba:	f000 fe2d 	bl	8001118 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 80004be:	2064      	movs	r0, #100	@ 0x64
 80004c0:	f000 fad6 	bl	8000a70 <HAL_Delay>
	  LED_OFF(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80004c4:	2201      	movs	r2, #1
 80004c6:	2120      	movs	r1, #32
 80004c8:	480c      	ldr	r0, [pc, #48]	@ (80004fc <main+0xd8>)
 80004ca:	f000 fe25 	bl	8001118 <HAL_GPIO_WritePin>
	  LED_ON(LED_RED_GPIO_Port, LED_RED_Pin);
 80004ce:	2200      	movs	r2, #0
 80004d0:	2140      	movs	r1, #64	@ 0x40
 80004d2:	480a      	ldr	r0, [pc, #40]	@ (80004fc <main+0xd8>)
 80004d4:	f000 fe20 	bl	8001118 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 80004d8:	2064      	movs	r0, #100	@ 0x64
 80004da:	f000 fac9 	bl	8000a70 <HAL_Delay>
	  LED_OFF(LED_RED_GPIO_Port, LED_RED_Pin);
 80004de:	2201      	movs	r2, #1
 80004e0:	2140      	movs	r1, #64	@ 0x40
 80004e2:	4806      	ldr	r0, [pc, #24]	@ (80004fc <main+0xd8>)
 80004e4:	f000 fe18 	bl	8001118 <HAL_GPIO_WritePin>
	  LED_ON(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 80004e8:	2200      	movs	r2, #0
 80004ea:	2110      	movs	r1, #16
 80004ec:	4805      	ldr	r0, [pc, #20]	@ (8000504 <main+0xe0>)
 80004ee:	f000 fe13 	bl	8001118 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 80004f2:	2064      	movs	r0, #100	@ 0x64
 80004f4:	f000 fabc 	bl	8000a70 <HAL_Delay>
  {
 80004f8:	e79f      	b.n	800043a <main+0x16>
 80004fa:	bf00      	nop
 80004fc:	58021000 	.word	0x58021000
 8000500:	24000030 	.word	0x24000030
 8000504:	58020400 	.word	0x58020400

08000508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b09c      	sub	sp, #112	@ 0x70
 800050c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000512:	224c      	movs	r2, #76	@ 0x4c
 8000514:	2100      	movs	r1, #0
 8000516:	4618      	mov	r0, r3
 8000518:	f001 fddc 	bl	80020d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800051c:	1d3b      	adds	r3, r7, #4
 800051e:	2220      	movs	r2, #32
 8000520:	2100      	movs	r1, #0
 8000522:	4618      	mov	r0, r3
 8000524:	f001 fdd6 	bl	80020d4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000528:	2002      	movs	r0, #2
 800052a:	f000 fe0f 	bl	800114c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800052e:	2300      	movs	r3, #0
 8000530:	603b      	str	r3, [r7, #0]
 8000532:	4b30      	ldr	r3, [pc, #192]	@ (80005f4 <SystemClock_Config+0xec>)
 8000534:	699b      	ldr	r3, [r3, #24]
 8000536:	4a2f      	ldr	r2, [pc, #188]	@ (80005f4 <SystemClock_Config+0xec>)
 8000538:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800053c:	6193      	str	r3, [r2, #24]
 800053e:	4b2d      	ldr	r3, [pc, #180]	@ (80005f4 <SystemClock_Config+0xec>)
 8000540:	699b      	ldr	r3, [r3, #24]
 8000542:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000546:	603b      	str	r3, [r7, #0]
 8000548:	4b2b      	ldr	r3, [pc, #172]	@ (80005f8 <SystemClock_Config+0xf0>)
 800054a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800054c:	4a2a      	ldr	r2, [pc, #168]	@ (80005f8 <SystemClock_Config+0xf0>)
 800054e:	f043 0301 	orr.w	r3, r3, #1
 8000552:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000554:	4b28      	ldr	r3, [pc, #160]	@ (80005f8 <SystemClock_Config+0xf0>)
 8000556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000558:	f003 0301 	and.w	r3, r3, #1
 800055c:	603b      	str	r3, [r7, #0]
 800055e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000560:	bf00      	nop
 8000562:	4b24      	ldr	r3, [pc, #144]	@ (80005f4 <SystemClock_Config+0xec>)
 8000564:	699b      	ldr	r3, [r3, #24]
 8000566:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800056a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800056e:	d1f8      	bne.n	8000562 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000570:	2301      	movs	r3, #1
 8000572:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000574:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000578:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057a:	2302      	movs	r3, #2
 800057c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800057e:	2302      	movs	r3, #2
 8000580:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000582:	2302      	movs	r3, #2
 8000584:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 8000586:	23f0      	movs	r3, #240	@ 0xf0
 8000588:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800058a:	2302      	movs	r3, #2
 800058c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800058e:	2302      	movs	r3, #2
 8000590:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000592:	2302      	movs	r3, #2
 8000594:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000596:	2308      	movs	r3, #8
 8000598:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800059a:	2300      	movs	r3, #0
 800059c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800059e:	2300      	movs	r3, #0
 80005a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005a6:	4618      	mov	r0, r3
 80005a8:	f000 fe0a 	bl	80011c0 <HAL_RCC_OscConfig>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80005b2:	f000 f897 	bl	80006e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b6:	233f      	movs	r3, #63	@ 0x3f
 80005b8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ba:	2303      	movs	r3, #3
 80005bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80005be:	2300      	movs	r3, #0
 80005c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80005c2:	2308      	movs	r3, #8
 80005c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80005c6:	2340      	movs	r3, #64	@ 0x40
 80005c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80005ca:	2340      	movs	r3, #64	@ 0x40
 80005cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80005ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005d2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80005d4:	2340      	movs	r3, #64	@ 0x40
 80005d6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005d8:	1d3b      	adds	r3, r7, #4
 80005da:	2104      	movs	r1, #4
 80005dc:	4618      	mov	r0, r3
 80005de:	f001 fa49 	bl	8001a74 <HAL_RCC_ClockConfig>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80005e8:	f000 f87c 	bl	80006e4 <Error_Handler>
  }
}
 80005ec:	bf00      	nop
 80005ee:	3770      	adds	r7, #112	@ 0x70
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	58024800 	.word	0x58024800
 80005f8:	58000400 	.word	0x58000400

080005fc <MPU_Config>:


void MPU_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000602:	463b      	mov	r3, r7
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800060e:	f000 fb43 	bl	8000c98 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000612:	2301      	movs	r3, #1
 8000614:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000616:	2300      	movs	r3, #0
 8000618:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800061a:	2300      	movs	r3, #0
 800061c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800061e:	231f      	movs	r3, #31
 8000620:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000622:	2387      	movs	r3, #135	@ 0x87
 8000624:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000626:	2300      	movs	r3, #0
 8000628:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800062a:	2300      	movs	r3, #0
 800062c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800062e:	2301      	movs	r3, #1
 8000630:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000632:	2301      	movs	r3, #1
 8000634:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000636:	2300      	movs	r3, #0
 8000638:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800063a:	2300      	movs	r3, #0
 800063c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800063e:	463b      	mov	r3, r7
 8000640:	4618      	mov	r0, r3
 8000642:	f000 fb61 	bl	8000d08 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000646:	2004      	movs	r0, #4
 8000648:	f000 fb3e 	bl	8000cc8 <HAL_MPU_Enable>

}
 800064c:	bf00      	nop
 800064e:	3710      	adds	r7, #16
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}

08000654 <Key_Scan>:

// 按键扫描函数，返回按下键值（一次只响应一次）
KEY_TypeDef Key_Scan(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
    static uint8_t key_up_wkup = 1; // 松手标志
    static uint8_t key_up_key0 = 1;
    static uint8_t key_up_key1 = 1;

    // WKUP为高电平按下，其余为低电平按下
    if (HAL_GPIO_ReadPin(WK_UP_GPIO_Port, WK_UP_Pin) == GPIO_PIN_SET)
 8000658:	2101      	movs	r1, #1
 800065a:	481e      	ldr	r0, [pc, #120]	@ (80006d4 <Key_Scan+0x80>)
 800065c:	f000 fd44 	bl	80010e8 <HAL_GPIO_ReadPin>
 8000660:	4603      	mov	r3, r0
 8000662:	2b01      	cmp	r3, #1
 8000664:	d108      	bne.n	8000678 <Key_Scan+0x24>
    {
        if (key_up_wkup)  // 上一个循环没有按下，当前为按下
 8000666:	4b1c      	ldr	r3, [pc, #112]	@ (80006d8 <Key_Scan+0x84>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d007      	beq.n	800067e <Key_Scan+0x2a>
        {
            key_up_wkup = 0;
 800066e:	4b1a      	ldr	r3, [pc, #104]	@ (80006d8 <Key_Scan+0x84>)
 8000670:	2200      	movs	r2, #0
 8000672:	701a      	strb	r2, [r3, #0]
            return KEY_WK_UP;
 8000674:	2301      	movs	r3, #1
 8000676:	e02a      	b.n	80006ce <Key_Scan+0x7a>
        }
    }
    else key_up_wkup = 1;
 8000678:	4b17      	ldr	r3, [pc, #92]	@ (80006d8 <Key_Scan+0x84>)
 800067a:	2201      	movs	r2, #1
 800067c:	701a      	strb	r2, [r3, #0]

    if (HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin) == GPIO_PIN_RESET)
 800067e:	2102      	movs	r1, #2
 8000680:	4814      	ldr	r0, [pc, #80]	@ (80006d4 <Key_Scan+0x80>)
 8000682:	f000 fd31 	bl	80010e8 <HAL_GPIO_ReadPin>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d108      	bne.n	800069e <Key_Scan+0x4a>
    {
        if (key_up_key0)
 800068c:	4b13      	ldr	r3, [pc, #76]	@ (80006dc <Key_Scan+0x88>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d007      	beq.n	80006a4 <Key_Scan+0x50>
        {
            key_up_key0 = 0;
 8000694:	4b11      	ldr	r3, [pc, #68]	@ (80006dc <Key_Scan+0x88>)
 8000696:	2200      	movs	r2, #0
 8000698:	701a      	strb	r2, [r3, #0]
            return KEY0;
 800069a:	2302      	movs	r3, #2
 800069c:	e017      	b.n	80006ce <Key_Scan+0x7a>
        }
    }
    else key_up_key0 = 1;
 800069e:	4b0f      	ldr	r3, [pc, #60]	@ (80006dc <Key_Scan+0x88>)
 80006a0:	2201      	movs	r2, #1
 80006a2:	701a      	strb	r2, [r3, #0]

    if (HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin) == GPIO_PIN_RESET)
 80006a4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80006a8:	480a      	ldr	r0, [pc, #40]	@ (80006d4 <Key_Scan+0x80>)
 80006aa:	f000 fd1d 	bl	80010e8 <HAL_GPIO_ReadPin>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d108      	bne.n	80006c6 <Key_Scan+0x72>
    {
        if (key_up_key1)
 80006b4:	4b0a      	ldr	r3, [pc, #40]	@ (80006e0 <Key_Scan+0x8c>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d007      	beq.n	80006cc <Key_Scan+0x78>
        {
            key_up_key1 = 0;
 80006bc:	4b08      	ldr	r3, [pc, #32]	@ (80006e0 <Key_Scan+0x8c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	701a      	strb	r2, [r3, #0]
            return KEY1;
 80006c2:	2303      	movs	r3, #3
 80006c4:	e003      	b.n	80006ce <Key_Scan+0x7a>
        }
    }
    else key_up_key1 = 1;
 80006c6:	4b06      	ldr	r3, [pc, #24]	@ (80006e0 <Key_Scan+0x8c>)
 80006c8:	2201      	movs	r2, #1
 80006ca:	701a      	strb	r2, [r3, #0]

    return KEY_NONE;
 80006cc:	2300      	movs	r3, #0
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	58020000 	.word	0x58020000
 80006d8:	24000000 	.word	0x24000000
 80006dc:	24000001 	.word	0x24000001
 80006e0:	24000002 	.word	0x24000002

080006e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e8:	b672      	cpsid	i
}
 80006ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006ec:	bf00      	nop
 80006ee:	e7fd      	b.n	80006ec <Error_Handler+0x8>

080006f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000720 <HAL_MspInit+0x30>)
 80006f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80006fc:	4a08      	ldr	r2, [pc, #32]	@ (8000720 <HAL_MspInit+0x30>)
 80006fe:	f043 0302 	orr.w	r3, r3, #2
 8000702:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000706:	4b06      	ldr	r3, [pc, #24]	@ (8000720 <HAL_MspInit+0x30>)
 8000708:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800070c:	f003 0302 	and.w	r3, r3, #2
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000714:	bf00      	nop
 8000716:	370c      	adds	r7, #12
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr
 8000720:	58024400 	.word	0x58024400

08000724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000728:	bf00      	nop
 800072a:	e7fd      	b.n	8000728 <NMI_Handler+0x4>

0800072c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000730:	bf00      	nop
 8000732:	e7fd      	b.n	8000730 <HardFault_Handler+0x4>

08000734 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000738:	bf00      	nop
 800073a:	e7fd      	b.n	8000738 <MemManage_Handler+0x4>

0800073c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000740:	bf00      	nop
 8000742:	e7fd      	b.n	8000740 <BusFault_Handler+0x4>

08000744 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000748:	bf00      	nop
 800074a:	e7fd      	b.n	8000748 <UsageFault_Handler+0x4>

0800074c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000750:	bf00      	nop
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr

0800075a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800075a:	b480      	push	{r7}
 800075c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800075e:	bf00      	nop
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr

08000768 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800076c:	bf00      	nop
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr

08000776 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000776:	b580      	push	{r7, lr}
 8000778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800077a:	f000 f959 	bl	8000a30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
	...

08000784 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000788:	4b43      	ldr	r3, [pc, #268]	@ (8000898 <SystemInit+0x114>)
 800078a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800078e:	4a42      	ldr	r2, [pc, #264]	@ (8000898 <SystemInit+0x114>)
 8000790:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000794:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000798:	4b40      	ldr	r3, [pc, #256]	@ (800089c <SystemInit+0x118>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	f003 030f 	and.w	r3, r3, #15
 80007a0:	2b06      	cmp	r3, #6
 80007a2:	d807      	bhi.n	80007b4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80007a4:	4b3d      	ldr	r3, [pc, #244]	@ (800089c <SystemInit+0x118>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	f023 030f 	bic.w	r3, r3, #15
 80007ac:	4a3b      	ldr	r2, [pc, #236]	@ (800089c <SystemInit+0x118>)
 80007ae:	f043 0307 	orr.w	r3, r3, #7
 80007b2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80007b4:	4b3a      	ldr	r3, [pc, #232]	@ (80008a0 <SystemInit+0x11c>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a39      	ldr	r2, [pc, #228]	@ (80008a0 <SystemInit+0x11c>)
 80007ba:	f043 0301 	orr.w	r3, r3, #1
 80007be:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80007c0:	4b37      	ldr	r3, [pc, #220]	@ (80008a0 <SystemInit+0x11c>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80007c6:	4b36      	ldr	r3, [pc, #216]	@ (80008a0 <SystemInit+0x11c>)
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	4935      	ldr	r1, [pc, #212]	@ (80008a0 <SystemInit+0x11c>)
 80007cc:	4b35      	ldr	r3, [pc, #212]	@ (80008a4 <SystemInit+0x120>)
 80007ce:	4013      	ands	r3, r2
 80007d0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80007d2:	4b32      	ldr	r3, [pc, #200]	@ (800089c <SystemInit+0x118>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	f003 0308 	and.w	r3, r3, #8
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d007      	beq.n	80007ee <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80007de:	4b2f      	ldr	r3, [pc, #188]	@ (800089c <SystemInit+0x118>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	f023 030f 	bic.w	r3, r3, #15
 80007e6:	4a2d      	ldr	r2, [pc, #180]	@ (800089c <SystemInit+0x118>)
 80007e8:	f043 0307 	orr.w	r3, r3, #7
 80007ec:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80007ee:	4b2c      	ldr	r3, [pc, #176]	@ (80008a0 <SystemInit+0x11c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80007f4:	4b2a      	ldr	r3, [pc, #168]	@ (80008a0 <SystemInit+0x11c>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80007fa:	4b29      	ldr	r3, [pc, #164]	@ (80008a0 <SystemInit+0x11c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000800:	4b27      	ldr	r3, [pc, #156]	@ (80008a0 <SystemInit+0x11c>)
 8000802:	4a29      	ldr	r2, [pc, #164]	@ (80008a8 <SystemInit+0x124>)
 8000804:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000806:	4b26      	ldr	r3, [pc, #152]	@ (80008a0 <SystemInit+0x11c>)
 8000808:	4a28      	ldr	r2, [pc, #160]	@ (80008ac <SystemInit+0x128>)
 800080a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800080c:	4b24      	ldr	r3, [pc, #144]	@ (80008a0 <SystemInit+0x11c>)
 800080e:	4a28      	ldr	r2, [pc, #160]	@ (80008b0 <SystemInit+0x12c>)
 8000810:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000812:	4b23      	ldr	r3, [pc, #140]	@ (80008a0 <SystemInit+0x11c>)
 8000814:	2200      	movs	r2, #0
 8000816:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000818:	4b21      	ldr	r3, [pc, #132]	@ (80008a0 <SystemInit+0x11c>)
 800081a:	4a25      	ldr	r2, [pc, #148]	@ (80008b0 <SystemInit+0x12c>)
 800081c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800081e:	4b20      	ldr	r3, [pc, #128]	@ (80008a0 <SystemInit+0x11c>)
 8000820:	2200      	movs	r2, #0
 8000822:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000824:	4b1e      	ldr	r3, [pc, #120]	@ (80008a0 <SystemInit+0x11c>)
 8000826:	4a22      	ldr	r2, [pc, #136]	@ (80008b0 <SystemInit+0x12c>)
 8000828:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800082a:	4b1d      	ldr	r3, [pc, #116]	@ (80008a0 <SystemInit+0x11c>)
 800082c:	2200      	movs	r2, #0
 800082e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000830:	4b1b      	ldr	r3, [pc, #108]	@ (80008a0 <SystemInit+0x11c>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a1a      	ldr	r2, [pc, #104]	@ (80008a0 <SystemInit+0x11c>)
 8000836:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800083a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800083c:	4b18      	ldr	r3, [pc, #96]	@ (80008a0 <SystemInit+0x11c>)
 800083e:	2200      	movs	r2, #0
 8000840:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000842:	4b1c      	ldr	r3, [pc, #112]	@ (80008b4 <SystemInit+0x130>)
 8000844:	681a      	ldr	r2, [r3, #0]
 8000846:	4b1c      	ldr	r3, [pc, #112]	@ (80008b8 <SystemInit+0x134>)
 8000848:	4013      	ands	r3, r2
 800084a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800084e:	d202      	bcs.n	8000856 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000850:	4b1a      	ldr	r3, [pc, #104]	@ (80008bc <SystemInit+0x138>)
 8000852:	2201      	movs	r2, #1
 8000854:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000856:	4b12      	ldr	r3, [pc, #72]	@ (80008a0 <SystemInit+0x11c>)
 8000858:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800085c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000860:	2b00      	cmp	r3, #0
 8000862:	d113      	bne.n	800088c <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000864:	4b0e      	ldr	r3, [pc, #56]	@ (80008a0 <SystemInit+0x11c>)
 8000866:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800086a:	4a0d      	ldr	r2, [pc, #52]	@ (80008a0 <SystemInit+0x11c>)
 800086c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000870:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000874:	4b12      	ldr	r3, [pc, #72]	@ (80008c0 <SystemInit+0x13c>)
 8000876:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800087a:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800087c:	4b08      	ldr	r3, [pc, #32]	@ (80008a0 <SystemInit+0x11c>)
 800087e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000882:	4a07      	ldr	r2, [pc, #28]	@ (80008a0 <SystemInit+0x11c>)
 8000884:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000888:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	e000ed00 	.word	0xe000ed00
 800089c:	52002000 	.word	0x52002000
 80008a0:	58024400 	.word	0x58024400
 80008a4:	eaf6ed7f 	.word	0xeaf6ed7f
 80008a8:	02020200 	.word	0x02020200
 80008ac:	01ff0000 	.word	0x01ff0000
 80008b0:	01010280 	.word	0x01010280
 80008b4:	5c001000 	.word	0x5c001000
 80008b8:	ffff0000 	.word	0xffff0000
 80008bc:	51008108 	.word	0x51008108
 80008c0:	52004000 	.word	0x52004000

080008c4 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80008c8:	4b09      	ldr	r3, [pc, #36]	@ (80008f0 <ExitRun0Mode+0x2c>)
 80008ca:	68db      	ldr	r3, [r3, #12]
 80008cc:	4a08      	ldr	r2, [pc, #32]	@ (80008f0 <ExitRun0Mode+0x2c>)
 80008ce:	f043 0302 	orr.w	r3, r3, #2
 80008d2:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80008d4:	bf00      	nop
 80008d6:	4b06      	ldr	r3, [pc, #24]	@ (80008f0 <ExitRun0Mode+0x2c>)
 80008d8:	685b      	ldr	r3, [r3, #4]
 80008da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d0f9      	beq.n	80008d6 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80008e2:	bf00      	nop
 80008e4:	bf00      	nop
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	58024800 	.word	0x58024800

080008f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80008f4:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000930 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80008f8:	f7ff ffe4 	bl	80008c4 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008fc:	f7ff ff42 	bl	8000784 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000900:	480c      	ldr	r0, [pc, #48]	@ (8000934 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000902:	490d      	ldr	r1, [pc, #52]	@ (8000938 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000904:	4a0d      	ldr	r2, [pc, #52]	@ (800093c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000906:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000908:	e002      	b.n	8000910 <LoopCopyDataInit>

0800090a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800090a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800090c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800090e:	3304      	adds	r3, #4

08000910 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000910:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000912:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000914:	d3f9      	bcc.n	800090a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000916:	4a0a      	ldr	r2, [pc, #40]	@ (8000940 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000918:	4c0a      	ldr	r4, [pc, #40]	@ (8000944 <LoopFillZerobss+0x22>)
  movs r3, #0
 800091a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800091c:	e001      	b.n	8000922 <LoopFillZerobss>

0800091e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800091e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000920:	3204      	adds	r2, #4

08000922 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000922:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000924:	d3fb      	bcc.n	800091e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000926:	f001 fbdd 	bl	80020e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800092a:	f7ff fd7b 	bl	8000424 <main>
  bx  lr
 800092e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000930:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000934:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000938:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 800093c:	0800215c 	.word	0x0800215c
  ldr r2, =_sbss
 8000940:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 8000944:	24000038 	.word	0x24000038

08000948 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000948:	e7fe      	b.n	8000948 <ADC3_IRQHandler>
	...

0800094c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000952:	2003      	movs	r0, #3
 8000954:	f000 f96e 	bl	8000c34 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000958:	f001 fa42 	bl	8001de0 <HAL_RCC_GetSysClockFreq>
 800095c:	4602      	mov	r2, r0
 800095e:	4b15      	ldr	r3, [pc, #84]	@ (80009b4 <HAL_Init+0x68>)
 8000960:	699b      	ldr	r3, [r3, #24]
 8000962:	0a1b      	lsrs	r3, r3, #8
 8000964:	f003 030f 	and.w	r3, r3, #15
 8000968:	4913      	ldr	r1, [pc, #76]	@ (80009b8 <HAL_Init+0x6c>)
 800096a:	5ccb      	ldrb	r3, [r1, r3]
 800096c:	f003 031f 	and.w	r3, r3, #31
 8000970:	fa22 f303 	lsr.w	r3, r2, r3
 8000974:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000976:	4b0f      	ldr	r3, [pc, #60]	@ (80009b4 <HAL_Init+0x68>)
 8000978:	699b      	ldr	r3, [r3, #24]
 800097a:	f003 030f 	and.w	r3, r3, #15
 800097e:	4a0e      	ldr	r2, [pc, #56]	@ (80009b8 <HAL_Init+0x6c>)
 8000980:	5cd3      	ldrb	r3, [r2, r3]
 8000982:	f003 031f 	and.w	r3, r3, #31
 8000986:	687a      	ldr	r2, [r7, #4]
 8000988:	fa22 f303 	lsr.w	r3, r2, r3
 800098c:	4a0b      	ldr	r2, [pc, #44]	@ (80009bc <HAL_Init+0x70>)
 800098e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000990:	4a0b      	ldr	r2, [pc, #44]	@ (80009c0 <HAL_Init+0x74>)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000996:	200f      	movs	r0, #15
 8000998:	f000 f814 	bl	80009c4 <HAL_InitTick>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80009a2:	2301      	movs	r3, #1
 80009a4:	e002      	b.n	80009ac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80009a6:	f7ff fea3 	bl	80006f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009aa:	2300      	movs	r3, #0
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3708      	adds	r7, #8
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	58024400 	.word	0x58024400
 80009b8:	08002144 	.word	0x08002144
 80009bc:	24000008 	.word	0x24000008
 80009c0:	24000004 	.word	0x24000004

080009c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80009cc:	4b15      	ldr	r3, [pc, #84]	@ (8000a24 <HAL_InitTick+0x60>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d101      	bne.n	80009d8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80009d4:	2301      	movs	r3, #1
 80009d6:	e021      	b.n	8000a1c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80009d8:	4b13      	ldr	r3, [pc, #76]	@ (8000a28 <HAL_InitTick+0x64>)
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	4b11      	ldr	r3, [pc, #68]	@ (8000a24 <HAL_InitTick+0x60>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	4619      	mov	r1, r3
 80009e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ee:	4618      	mov	r0, r3
 80009f0:	f000 f945 	bl	8000c7e <HAL_SYSTICK_Config>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80009fa:	2301      	movs	r3, #1
 80009fc:	e00e      	b.n	8000a1c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	2b0f      	cmp	r3, #15
 8000a02:	d80a      	bhi.n	8000a1a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a04:	2200      	movs	r2, #0
 8000a06:	6879      	ldr	r1, [r7, #4]
 8000a08:	f04f 30ff 	mov.w	r0, #4294967295
 8000a0c:	f000 f91d 	bl	8000c4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a10:	4a06      	ldr	r2, [pc, #24]	@ (8000a2c <HAL_InitTick+0x68>)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a16:	2300      	movs	r3, #0
 8000a18:	e000      	b.n	8000a1c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000a1a:	2301      	movs	r3, #1
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	3708      	adds	r7, #8
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	24000010 	.word	0x24000010
 8000a28:	24000004 	.word	0x24000004
 8000a2c:	2400000c 	.word	0x2400000c

08000a30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a34:	4b06      	ldr	r3, [pc, #24]	@ (8000a50 <HAL_IncTick+0x20>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	461a      	mov	r2, r3
 8000a3a:	4b06      	ldr	r3, [pc, #24]	@ (8000a54 <HAL_IncTick+0x24>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4413      	add	r3, r2
 8000a40:	4a04      	ldr	r2, [pc, #16]	@ (8000a54 <HAL_IncTick+0x24>)
 8000a42:	6013      	str	r3, [r2, #0]
}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	24000010 	.word	0x24000010
 8000a54:	24000034 	.word	0x24000034

08000a58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a5c:	4b03      	ldr	r3, [pc, #12]	@ (8000a6c <HAL_GetTick+0x14>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	24000034 	.word	0x24000034

08000a70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a78:	f7ff ffee 	bl	8000a58 <HAL_GetTick>
 8000a7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a88:	d005      	beq.n	8000a96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab4 <HAL_Delay+0x44>)
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	461a      	mov	r2, r3
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	4413      	add	r3, r2
 8000a94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a96:	bf00      	nop
 8000a98:	f7ff ffde 	bl	8000a58 <HAL_GetTick>
 8000a9c:	4602      	mov	r2, r0
 8000a9e:	68bb      	ldr	r3, [r7, #8]
 8000aa0:	1ad3      	subs	r3, r2, r3
 8000aa2:	68fa      	ldr	r2, [r7, #12]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d8f7      	bhi.n	8000a98 <HAL_Delay+0x28>
  {
  }
}
 8000aa8:	bf00      	nop
 8000aaa:	bf00      	nop
 8000aac:	3710      	adds	r7, #16
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	24000010 	.word	0x24000010

08000ab8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000abc:	4b03      	ldr	r3, [pc, #12]	@ (8000acc <HAL_GetREVID+0x14>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	0c1b      	lsrs	r3, r3, #16
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr
 8000acc:	5c001000 	.word	0x5c001000

08000ad0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	f003 0307 	and.w	r3, r3, #7
 8000ade:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8000b10 <__NVIC_SetPriorityGrouping+0x40>)
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ae6:	68ba      	ldr	r2, [r7, #8]
 8000ae8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000aec:	4013      	ands	r3, r2
 8000aee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000af8:	4b06      	ldr	r3, [pc, #24]	@ (8000b14 <__NVIC_SetPriorityGrouping+0x44>)
 8000afa:	4313      	orrs	r3, r2
 8000afc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000afe:	4a04      	ldr	r2, [pc, #16]	@ (8000b10 <__NVIC_SetPriorityGrouping+0x40>)
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	60d3      	str	r3, [r2, #12]
}
 8000b04:	bf00      	nop
 8000b06:	3714      	adds	r7, #20
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	e000ed00 	.word	0xe000ed00
 8000b14:	05fa0000 	.word	0x05fa0000

08000b18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b1c:	4b04      	ldr	r3, [pc, #16]	@ (8000b30 <__NVIC_GetPriorityGrouping+0x18>)
 8000b1e:	68db      	ldr	r3, [r3, #12]
 8000b20:	0a1b      	lsrs	r3, r3, #8
 8000b22:	f003 0307 	and.w	r3, r3, #7
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	6039      	str	r1, [r7, #0]
 8000b3e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000b40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	db0a      	blt.n	8000b5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	b2da      	uxtb	r2, r3
 8000b4c:	490c      	ldr	r1, [pc, #48]	@ (8000b80 <__NVIC_SetPriority+0x4c>)
 8000b4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b52:	0112      	lsls	r2, r2, #4
 8000b54:	b2d2      	uxtb	r2, r2
 8000b56:	440b      	add	r3, r1
 8000b58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b5c:	e00a      	b.n	8000b74 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	b2da      	uxtb	r2, r3
 8000b62:	4908      	ldr	r1, [pc, #32]	@ (8000b84 <__NVIC_SetPriority+0x50>)
 8000b64:	88fb      	ldrh	r3, [r7, #6]
 8000b66:	f003 030f 	and.w	r3, r3, #15
 8000b6a:	3b04      	subs	r3, #4
 8000b6c:	0112      	lsls	r2, r2, #4
 8000b6e:	b2d2      	uxtb	r2, r2
 8000b70:	440b      	add	r3, r1
 8000b72:	761a      	strb	r2, [r3, #24]
}
 8000b74:	bf00      	nop
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	e000e100 	.word	0xe000e100
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b089      	sub	sp, #36	@ 0x24
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	60f8      	str	r0, [r7, #12]
 8000b90:	60b9      	str	r1, [r7, #8]
 8000b92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	f003 0307 	and.w	r3, r3, #7
 8000b9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b9c:	69fb      	ldr	r3, [r7, #28]
 8000b9e:	f1c3 0307 	rsb	r3, r3, #7
 8000ba2:	2b04      	cmp	r3, #4
 8000ba4:	bf28      	it	cs
 8000ba6:	2304      	movcs	r3, #4
 8000ba8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	3304      	adds	r3, #4
 8000bae:	2b06      	cmp	r3, #6
 8000bb0:	d902      	bls.n	8000bb8 <NVIC_EncodePriority+0x30>
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	3b03      	subs	r3, #3
 8000bb6:	e000      	b.n	8000bba <NVIC_EncodePriority+0x32>
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000bc0:	69bb      	ldr	r3, [r7, #24]
 8000bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc6:	43da      	mvns	r2, r3
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	401a      	ands	r2, r3
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bda:	43d9      	mvns	r1, r3
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be0:	4313      	orrs	r3, r2
         );
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3724      	adds	r7, #36	@ 0x24
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
	...

08000bf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	3b01      	subs	r3, #1
 8000bfc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c00:	d301      	bcc.n	8000c06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c02:	2301      	movs	r3, #1
 8000c04:	e00f      	b.n	8000c26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c06:	4a0a      	ldr	r2, [pc, #40]	@ (8000c30 <SysTick_Config+0x40>)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	3b01      	subs	r3, #1
 8000c0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c0e:	210f      	movs	r1, #15
 8000c10:	f04f 30ff 	mov.w	r0, #4294967295
 8000c14:	f7ff ff8e 	bl	8000b34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c18:	4b05      	ldr	r3, [pc, #20]	@ (8000c30 <SysTick_Config+0x40>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c1e:	4b04      	ldr	r3, [pc, #16]	@ (8000c30 <SysTick_Config+0x40>)
 8000c20:	2207      	movs	r2, #7
 8000c22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c24:	2300      	movs	r3, #0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	e000e010 	.word	0xe000e010

08000c34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	f7ff ff47 	bl	8000ad0 <__NVIC_SetPriorityGrouping>
}
 8000c42:	bf00      	nop
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b086      	sub	sp, #24
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	4603      	mov	r3, r0
 8000c52:	60b9      	str	r1, [r7, #8]
 8000c54:	607a      	str	r2, [r7, #4]
 8000c56:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c58:	f7ff ff5e 	bl	8000b18 <__NVIC_GetPriorityGrouping>
 8000c5c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c5e:	687a      	ldr	r2, [r7, #4]
 8000c60:	68b9      	ldr	r1, [r7, #8]
 8000c62:	6978      	ldr	r0, [r7, #20]
 8000c64:	f7ff ff90 	bl	8000b88 <NVIC_EncodePriority>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c6e:	4611      	mov	r1, r2
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff ff5f 	bl	8000b34 <__NVIC_SetPriority>
}
 8000c76:	bf00      	nop
 8000c78:	3718      	adds	r7, #24
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b082      	sub	sp, #8
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c86:	6878      	ldr	r0, [r7, #4]
 8000c88:	f7ff ffb2 	bl	8000bf0 <SysTick_Config>
 8000c8c:	4603      	mov	r3, r0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
	...

08000c98 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000c9c:	f3bf 8f5f 	dmb	sy
}
 8000ca0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000ca2:	4b07      	ldr	r3, [pc, #28]	@ (8000cc0 <HAL_MPU_Disable+0x28>)
 8000ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ca6:	4a06      	ldr	r2, [pc, #24]	@ (8000cc0 <HAL_MPU_Disable+0x28>)
 8000ca8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000cac:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000cae:	4b05      	ldr	r3, [pc, #20]	@ (8000cc4 <HAL_MPU_Disable+0x2c>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	605a      	str	r2, [r3, #4]
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	e000ed00 	.word	0xe000ed00
 8000cc4:	e000ed90 	.word	0xe000ed90

08000cc8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000cd0:	4a0b      	ldr	r2, [pc, #44]	@ (8000d00 <HAL_MPU_Enable+0x38>)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000cda:	4b0a      	ldr	r3, [pc, #40]	@ (8000d04 <HAL_MPU_Enable+0x3c>)
 8000cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cde:	4a09      	ldr	r2, [pc, #36]	@ (8000d04 <HAL_MPU_Enable+0x3c>)
 8000ce0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ce4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000ce6:	f3bf 8f4f 	dsb	sy
}
 8000cea:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000cec:	f3bf 8f6f 	isb	sy
}
 8000cf0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000cf2:	bf00      	nop
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	e000ed90 	.word	0xe000ed90
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	785a      	ldrb	r2, [r3, #1]
 8000d14:	4b1b      	ldr	r3, [pc, #108]	@ (8000d84 <HAL_MPU_ConfigRegion+0x7c>)
 8000d16:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000d18:	4b1a      	ldr	r3, [pc, #104]	@ (8000d84 <HAL_MPU_ConfigRegion+0x7c>)
 8000d1a:	691b      	ldr	r3, [r3, #16]
 8000d1c:	4a19      	ldr	r2, [pc, #100]	@ (8000d84 <HAL_MPU_ConfigRegion+0x7c>)
 8000d1e:	f023 0301 	bic.w	r3, r3, #1
 8000d22:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8000d24:	4a17      	ldr	r2, [pc, #92]	@ (8000d84 <HAL_MPU_ConfigRegion+0x7c>)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	7b1b      	ldrb	r3, [r3, #12]
 8000d30:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	7adb      	ldrb	r3, [r3, #11]
 8000d36:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000d38:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	7a9b      	ldrb	r3, [r3, #10]
 8000d3e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000d40:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	7b5b      	ldrb	r3, [r3, #13]
 8000d46:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000d48:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	7b9b      	ldrb	r3, [r3, #14]
 8000d4e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000d50:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	7bdb      	ldrb	r3, [r3, #15]
 8000d56:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000d58:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	7a5b      	ldrb	r3, [r3, #9]
 8000d5e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000d60:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	7a1b      	ldrb	r3, [r3, #8]
 8000d66:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000d68:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000d6a:	687a      	ldr	r2, [r7, #4]
 8000d6c:	7812      	ldrb	r2, [r2, #0]
 8000d6e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000d70:	4a04      	ldr	r2, [pc, #16]	@ (8000d84 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000d72:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000d74:	6113      	str	r3, [r2, #16]
}
 8000d76:	bf00      	nop
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	e000ed90 	.word	0xe000ed90

08000d88 <HAL_GPIO_Init>:
  * @param  GPIOx: 指定 GPIO 端口（A-K）
  * @param  GPIO_Init: 指向 GPIO 初始化结构体，包含引脚配置信息
  * @retval 无
  */
void HAL_GPIO_Init(GPIO_TypeDef *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b089      	sub	sp, #36	@ 0x24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	6039      	str	r1, [r7, #0]
    uint32_t position = 0x00U;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61fb      	str	r3, [r7, #28]
    EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
    EXTI_CurrentCPU = EXTI_D2;  // CM4 CPU 的 EXTI
#else
    EXTI_CurrentCPU = EXTI_D1;  // CM7 CPU 的 EXTI
 8000d96:	4b89      	ldr	r3, [pc, #548]	@ (8000fbc <HAL_GPIO_Init+0x234>)
 8000d98:	617b      	str	r3, [r7, #20]
    assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
    assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
    assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

    // 遍历所有被选中的引脚
    while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000d9a:	e194      	b.n	80010c6 <HAL_GPIO_Init+0x33e>
    {
        iocurrent = GPIO_Init->Pin & (1UL << position);
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	2101      	movs	r1, #1
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	fa01 f303 	lsl.w	r3, r1, r3
 8000da8:	4013      	ands	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]

        if (iocurrent != 0x00U)
 8000dac:	693b      	ldr	r3, [r7, #16]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	f000 8186 	beq.w	80010c0 <HAL_GPIO_Init+0x338>
        {
            // 输出或复用功能模式下配置速度和输出类型
            if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f003 0303 	and.w	r3, r3, #3
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d005      	beq.n	8000dcc <HAL_GPIO_Init+0x44>
                ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f003 0303 	and.w	r3, r3, #3
            if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000dc8:	2b02      	cmp	r3, #2
 8000dca:	d130      	bne.n	8000e2e <HAL_GPIO_Init+0xa6>
            {
                assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

                // 配置输出速度
                temp = GPIOx->OSPEEDR;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	689b      	ldr	r3, [r3, #8]
 8000dd0:	61bb      	str	r3, [r7, #24]
                temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	2203      	movs	r2, #3
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	43db      	mvns	r3, r3
 8000dde:	69ba      	ldr	r2, [r7, #24]
 8000de0:	4013      	ands	r3, r2
 8000de2:	61bb      	str	r3, [r7, #24]
                temp |= (GPIO_Init->Speed << (position * 2U));
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	68da      	ldr	r2, [r3, #12]
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	61bb      	str	r3, [r7, #24]
                GPIOx->OSPEEDR = temp;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	69ba      	ldr	r2, [r7, #24]
 8000dfa:	609a      	str	r2, [r3, #8]

                // 配置输出类型（推挽/开漏）
                temp = GPIOx->OTYPER;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	61bb      	str	r3, [r7, #24]
                temp &= ~(GPIO_OTYPER_OT0 << position);
 8000e02:	2201      	movs	r2, #1
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	43db      	mvns	r3, r3
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	4013      	ands	r3, r2
 8000e10:	61bb      	str	r3, [r7, #24]
                temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	091b      	lsrs	r3, r3, #4
 8000e18:	f003 0201 	and.w	r2, r3, #1
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	69ba      	ldr	r2, [r7, #24]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	61bb      	str	r3, [r7, #24]
                GPIOx->OTYPER = temp;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	605a      	str	r2, [r3, #4]
            }

            // 非模拟模式下配置上下拉
            if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f003 0303 	and.w	r3, r3, #3
 8000e36:	2b03      	cmp	r3, #3
 8000e38:	d017      	beq.n	8000e6a <HAL_GPIO_Init+0xe2>
            {
                assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

                // 配置上拉或下拉电阻
                temp = GPIOx->PUPDR;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	68db      	ldr	r3, [r3, #12]
 8000e3e:	61bb      	str	r3, [r7, #24]
                temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	2203      	movs	r2, #3
 8000e46:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4a:	43db      	mvns	r3, r3
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	4013      	ands	r3, r2
 8000e50:	61bb      	str	r3, [r7, #24]
                temp |= (GPIO_Init->Pull << (position * 2U));
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	689a      	ldr	r2, [r3, #8]
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	69ba      	ldr	r2, [r7, #24]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	61bb      	str	r3, [r7, #24]
                GPIOx->PUPDR = temp;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	69ba      	ldr	r2, [r7, #24]
 8000e68:	60da      	str	r2, [r3, #12]
            }

            // 复用功能模式下配置 AF 寄存器
            if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f003 0303 	and.w	r3, r3, #3
 8000e72:	2b02      	cmp	r3, #2
 8000e74:	d123      	bne.n	8000ebe <HAL_GPIO_Init+0x136>
            {
                assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
                assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

                // 配置复用功能（AFRL/AFRH）
                temp = GPIOx->AFR[position >> 3U];  // 选择低/高寄存器
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	08da      	lsrs	r2, r3, #3
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	3208      	adds	r2, #8
 8000e7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e82:	61bb      	str	r3, [r7, #24]
                temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	f003 0307 	and.w	r3, r3, #7
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	220f      	movs	r2, #15
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43db      	mvns	r3, r3
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	4013      	ands	r3, r2
 8000e98:	61bb      	str	r3, [r7, #24]
                temp |= (GPIO_Init->Alternate << ((position & 0x07U) * 4U));
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	691a      	ldr	r2, [r3, #16]
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	f003 0307 	and.w	r3, r3, #7
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]
                GPIOx->AFR[position >> 3U] = temp;
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	08da      	lsrs	r2, r3, #3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	3208      	adds	r2, #8
 8000eb8:	69b9      	ldr	r1, [r7, #24]
 8000eba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            }

            // 配置引脚方向模式（输入、输出、复用、模拟）
            temp = GPIOx->MODER;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	61bb      	str	r3, [r7, #24]
            temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	2203      	movs	r2, #3
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
            temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f003 0203 	and.w	r2, r3, #3
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
            GPIOx->MODER = temp;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	601a      	str	r2, [r3, #0]

            // 外部中断/事件模式配置
            if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	f000 80e0 	beq.w	80010c0 <HAL_GPIO_Init+0x338>
            {
                // 使能 SYSCFG 时钟以访问 EXTI 配置
                __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f00:	4b2f      	ldr	r3, [pc, #188]	@ (8000fc0 <HAL_GPIO_Init+0x238>)
 8000f02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f06:	4a2e      	ldr	r2, [pc, #184]	@ (8000fc0 <HAL_GPIO_Init+0x238>)
 8000f08:	f043 0302 	orr.w	r3, r3, #2
 8000f0c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000f10:	4b2b      	ldr	r3, [pc, #172]	@ (8000fc0 <HAL_GPIO_Init+0x238>)
 8000f12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f16:	f003 0302 	and.w	r3, r3, #2
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]

                // 将 GPIO 引脚映射到 EXTI 线
                temp = SYSCFG->EXTICR[position >> 2U];
 8000f1e:	4a29      	ldr	r2, [pc, #164]	@ (8000fc4 <HAL_GPIO_Init+0x23c>)
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	089b      	lsrs	r3, r3, #2
 8000f24:	3302      	adds	r3, #2
 8000f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f2a:	61bb      	str	r3, [r7, #24]
                temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	f003 0303 	and.w	r3, r3, #3
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	220f      	movs	r2, #15
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
                temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a20      	ldr	r2, [pc, #128]	@ (8000fc8 <HAL_GPIO_Init+0x240>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d052      	beq.n	8000ff0 <HAL_GPIO_Init+0x268>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a1f      	ldr	r2, [pc, #124]	@ (8000fcc <HAL_GPIO_Init+0x244>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d031      	beq.n	8000fb6 <HAL_GPIO_Init+0x22e>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a1e      	ldr	r2, [pc, #120]	@ (8000fd0 <HAL_GPIO_Init+0x248>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d02b      	beq.n	8000fb2 <HAL_GPIO_Init+0x22a>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a1d      	ldr	r2, [pc, #116]	@ (8000fd4 <HAL_GPIO_Init+0x24c>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d025      	beq.n	8000fae <HAL_GPIO_Init+0x226>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a1c      	ldr	r2, [pc, #112]	@ (8000fd8 <HAL_GPIO_Init+0x250>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d01f      	beq.n	8000faa <HAL_GPIO_Init+0x222>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a1b      	ldr	r2, [pc, #108]	@ (8000fdc <HAL_GPIO_Init+0x254>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d019      	beq.n	8000fa6 <HAL_GPIO_Init+0x21e>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a1a      	ldr	r2, [pc, #104]	@ (8000fe0 <HAL_GPIO_Init+0x258>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d013      	beq.n	8000fa2 <HAL_GPIO_Init+0x21a>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a19      	ldr	r2, [pc, #100]	@ (8000fe4 <HAL_GPIO_Init+0x25c>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d00d      	beq.n	8000f9e <HAL_GPIO_Init+0x216>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a18      	ldr	r2, [pc, #96]	@ (8000fe8 <HAL_GPIO_Init+0x260>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d007      	beq.n	8000f9a <HAL_GPIO_Init+0x212>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a17      	ldr	r2, [pc, #92]	@ (8000fec <HAL_GPIO_Init+0x264>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d101      	bne.n	8000f96 <HAL_GPIO_Init+0x20e>
 8000f92:	2309      	movs	r3, #9
 8000f94:	e02d      	b.n	8000ff2 <HAL_GPIO_Init+0x26a>
 8000f96:	230a      	movs	r3, #10
 8000f98:	e02b      	b.n	8000ff2 <HAL_GPIO_Init+0x26a>
 8000f9a:	2308      	movs	r3, #8
 8000f9c:	e029      	b.n	8000ff2 <HAL_GPIO_Init+0x26a>
 8000f9e:	2307      	movs	r3, #7
 8000fa0:	e027      	b.n	8000ff2 <HAL_GPIO_Init+0x26a>
 8000fa2:	2306      	movs	r3, #6
 8000fa4:	e025      	b.n	8000ff2 <HAL_GPIO_Init+0x26a>
 8000fa6:	2305      	movs	r3, #5
 8000fa8:	e023      	b.n	8000ff2 <HAL_GPIO_Init+0x26a>
 8000faa:	2304      	movs	r3, #4
 8000fac:	e021      	b.n	8000ff2 <HAL_GPIO_Init+0x26a>
 8000fae:	2303      	movs	r3, #3
 8000fb0:	e01f      	b.n	8000ff2 <HAL_GPIO_Init+0x26a>
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	e01d      	b.n	8000ff2 <HAL_GPIO_Init+0x26a>
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e01b      	b.n	8000ff2 <HAL_GPIO_Init+0x26a>
 8000fba:	bf00      	nop
 8000fbc:	58000080 	.word	0x58000080
 8000fc0:	58024400 	.word	0x58024400
 8000fc4:	58000400 	.word	0x58000400
 8000fc8:	58020000 	.word	0x58020000
 8000fcc:	58020400 	.word	0x58020400
 8000fd0:	58020800 	.word	0x58020800
 8000fd4:	58020c00 	.word	0x58020c00
 8000fd8:	58021000 	.word	0x58021000
 8000fdc:	58021400 	.word	0x58021400
 8000fe0:	58021800 	.word	0x58021800
 8000fe4:	58021c00 	.word	0x58021c00
 8000fe8:	58022000 	.word	0x58022000
 8000fec:	58022400 	.word	0x58022400
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	69fa      	ldr	r2, [r7, #28]
 8000ff4:	f002 0203 	and.w	r2, r2, #3
 8000ff8:	0092      	lsls	r2, r2, #2
 8000ffa:	4093      	lsls	r3, r2
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
                SYSCFG->EXTICR[position >> 2U] = temp;
 8001002:	4938      	ldr	r1, [pc, #224]	@ (80010e4 <HAL_GPIO_Init+0x35c>)
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	089b      	lsrs	r3, r3, #2
 8001008:	3302      	adds	r3, #2
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                // 配置上升沿触发
                temp = EXTI->RTSR1;
 8001010:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	61bb      	str	r3, [r7, #24]
                temp &= ~iocurrent;
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	43db      	mvns	r3, r3
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	4013      	ands	r3, r2
 8001020:	61bb      	str	r3, [r7, #24]
                if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800102a:	2b00      	cmp	r3, #0
 800102c:	d003      	beq.n	8001036 <HAL_GPIO_Init+0x2ae>
                {
                    temp |= iocurrent;
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	4313      	orrs	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
                }
                EXTI->RTSR1 = temp;
 8001036:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800103a:	69bb      	ldr	r3, [r7, #24]
 800103c:	6013      	str	r3, [r2, #0]

                // 配置下降沿触发
                temp = EXTI->FTSR1;
 800103e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	61bb      	str	r3, [r7, #24]
                temp &= ~iocurrent;
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	43db      	mvns	r3, r3
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4013      	ands	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
                if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001058:	2b00      	cmp	r3, #0
 800105a:	d003      	beq.n	8001064 <HAL_GPIO_Init+0x2dc>
                {
                    temp |= iocurrent;
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	4313      	orrs	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
                }
                EXTI->FTSR1 = temp;
 8001064:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	6053      	str	r3, [r2, #4]

                // 配置事件模式（是否产生事件）
                temp = EXTI_CurrentCPU->EMR1;
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	61bb      	str	r3, [r7, #24]
                temp &= ~iocurrent;
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	43db      	mvns	r3, r3
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	4013      	ands	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
                if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001084:	2b00      	cmp	r3, #0
 8001086:	d003      	beq.n	8001090 <HAL_GPIO_Init+0x308>
                {
                    temp |= iocurrent;
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	4313      	orrs	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
                }
                EXTI_CurrentCPU->EMR1 = temp;
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	605a      	str	r2, [r3, #4]

                // 配置中断模式（是否使能中断）
                temp = EXTI_CurrentCPU->IMR1;
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	61bb      	str	r3, [r7, #24]
                temp &= ~iocurrent;
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	43db      	mvns	r3, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4013      	ands	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
                if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d003      	beq.n	80010ba <HAL_GPIO_Init+0x332>
                {
                    temp |= iocurrent;
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
                }
                EXTI_CurrentCPU->IMR1 = temp;
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	601a      	str	r2, [r3, #0]
            }
        }

        position++;  // 处理下一个引脚
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	3301      	adds	r3, #1
 80010c4:	61fb      	str	r3, [r7, #28]
    while (((GPIO_Init->Pin) >> position) != 0x00U)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	fa22 f303 	lsr.w	r3, r2, r3
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	f47f ae63 	bne.w	8000d9c <HAL_GPIO_Init+0x14>
    }
}
 80010d6:	bf00      	nop
 80010d8:	bf00      	nop
 80010da:	3724      	adds	r7, #36	@ 0x24
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	58000400 	.word	0x58000400

080010e8 <HAL_GPIO_ReadPin>:
  * @param  GPIOx: 端口（A-K）
  * @param  GPIO_Pin: 引脚编号（0-15）
  * @retval GPIO_PIN_SET（高电平）或 GPIO_PIN_RESET（低电平）
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	460b      	mov	r3, r1
 80010f2:	807b      	strh	r3, [r7, #2]
    GPIO_PinState bitstatus;

    assert_param(IS_GPIO_PIN(GPIO_Pin));

    if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	691a      	ldr	r2, [r3, #16]
 80010f8:	887b      	ldrh	r3, [r7, #2]
 80010fa:	4013      	ands	r3, r2
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d002      	beq.n	8001106 <HAL_GPIO_ReadPin+0x1e>
    {
        bitstatus = GPIO_PIN_SET;
 8001100:	2301      	movs	r3, #1
 8001102:	73fb      	strb	r3, [r7, #15]
 8001104:	e001      	b.n	800110a <HAL_GPIO_ReadPin+0x22>
    }
    else
    {
        bitstatus = GPIO_PIN_RESET;
 8001106:	2300      	movs	r3, #0
 8001108:	73fb      	strb	r3, [r7, #15]
    }

    return bitstatus;
 800110a:	7bfb      	ldrb	r3, [r7, #15]
}
 800110c:	4618      	mov	r0, r3
 800110e:	3714      	adds	r7, #20
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <HAL_GPIO_WritePin>:
  * @param  GPIO_Pin: 引脚
  * @param  PinState: 要设置的状态（GPIO_PIN_SET / RESET）
  * @retval 无
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	460b      	mov	r3, r1
 8001122:	807b      	strh	r3, [r7, #2]
 8001124:	4613      	mov	r3, r2
 8001126:	707b      	strb	r3, [r7, #1]
    assert_param(IS_GPIO_PIN(GPIO_Pin));
    assert_param(IS_GPIO_PIN_ACTION(PinState));

    if (PinState != GPIO_PIN_RESET)
 8001128:	787b      	ldrb	r3, [r7, #1]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d003      	beq.n	8001136 <HAL_GPIO_WritePin+0x1e>
    {
        GPIOx->BSRR = GPIO_Pin;                    // 置位
 800112e:	887a      	ldrh	r2, [r7, #2]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	619a      	str	r2, [r3, #24]
    }
    else
    {
        GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;    // 复位（BSRR 高16位）
    }
}
 8001134:	e003      	b.n	800113e <HAL_GPIO_WritePin+0x26>
        GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;    // 复位（BSRR 高16位）
 8001136:	887b      	ldrh	r3, [r7, #2]
 8001138:	041a      	lsls	r2, r3, #16
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	619a      	str	r2, [r3, #24]
}
 800113e:	bf00      	nop
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
	...

0800114c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001154:	4b19      	ldr	r3, [pc, #100]	@ (80011bc <HAL_PWREx_ConfigSupply+0x70>)
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	f003 0304 	and.w	r3, r3, #4
 800115c:	2b04      	cmp	r3, #4
 800115e:	d00a      	beq.n	8001176 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001160:	4b16      	ldr	r3, [pc, #88]	@ (80011bc <HAL_PWREx_ConfigSupply+0x70>)
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	f003 0307 	and.w	r3, r3, #7
 8001168:	687a      	ldr	r2, [r7, #4]
 800116a:	429a      	cmp	r2, r3
 800116c:	d001      	beq.n	8001172 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e01f      	b.n	80011b2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001172:	2300      	movs	r3, #0
 8001174:	e01d      	b.n	80011b2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001176:	4b11      	ldr	r3, [pc, #68]	@ (80011bc <HAL_PWREx_ConfigSupply+0x70>)
 8001178:	68db      	ldr	r3, [r3, #12]
 800117a:	f023 0207 	bic.w	r2, r3, #7
 800117e:	490f      	ldr	r1, [pc, #60]	@ (80011bc <HAL_PWREx_ConfigSupply+0x70>)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4313      	orrs	r3, r2
 8001184:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001186:	f7ff fc67 	bl	8000a58 <HAL_GetTick>
 800118a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800118c:	e009      	b.n	80011a2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800118e:	f7ff fc63 	bl	8000a58 <HAL_GetTick>
 8001192:	4602      	mov	r2, r0
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800119c:	d901      	bls.n	80011a2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e007      	b.n	80011b2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80011a2:	4b06      	ldr	r3, [pc, #24]	@ (80011bc <HAL_PWREx_ConfigSupply+0x70>)
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80011ae:	d1ee      	bne.n	800118e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80011b0:	2300      	movs	r3, #0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3710      	adds	r7, #16
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	58024800 	.word	0x58024800

080011c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08c      	sub	sp, #48	@ 0x30
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d102      	bne.n	80011d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	f000 bc48 	b.w	8001a64 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f003 0301 	and.w	r3, r3, #1
 80011dc:	2b00      	cmp	r3, #0
 80011de:	f000 8088 	beq.w	80012f2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011e2:	4b99      	ldr	r3, [pc, #612]	@ (8001448 <HAL_RCC_OscConfig+0x288>)
 80011e4:	691b      	ldr	r3, [r3, #16]
 80011e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80011ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80011ec:	4b96      	ldr	r3, [pc, #600]	@ (8001448 <HAL_RCC_OscConfig+0x288>)
 80011ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80011f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011f4:	2b10      	cmp	r3, #16
 80011f6:	d007      	beq.n	8001208 <HAL_RCC_OscConfig+0x48>
 80011f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011fa:	2b18      	cmp	r3, #24
 80011fc:	d111      	bne.n	8001222 <HAL_RCC_OscConfig+0x62>
 80011fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001200:	f003 0303 	and.w	r3, r3, #3
 8001204:	2b02      	cmp	r3, #2
 8001206:	d10c      	bne.n	8001222 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001208:	4b8f      	ldr	r3, [pc, #572]	@ (8001448 <HAL_RCC_OscConfig+0x288>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001210:	2b00      	cmp	r3, #0
 8001212:	d06d      	beq.n	80012f0 <HAL_RCC_OscConfig+0x130>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d169      	bne.n	80012f0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800121c:	2301      	movs	r3, #1
 800121e:	f000 bc21 	b.w	8001a64 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800122a:	d106      	bne.n	800123a <HAL_RCC_OscConfig+0x7a>
 800122c:	4b86      	ldr	r3, [pc, #536]	@ (8001448 <HAL_RCC_OscConfig+0x288>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a85      	ldr	r2, [pc, #532]	@ (8001448 <HAL_RCC_OscConfig+0x288>)
 8001232:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001236:	6013      	str	r3, [r2, #0]
 8001238:	e02e      	b.n	8001298 <HAL_RCC_OscConfig+0xd8>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d10c      	bne.n	800125c <HAL_RCC_OscConfig+0x9c>
 8001242:	4b81      	ldr	r3, [pc, #516]	@ (8001448 <HAL_RCC_OscConfig+0x288>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a80      	ldr	r2, [pc, #512]	@ (8001448 <HAL_RCC_OscConfig+0x288>)
 8001248:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800124c:	6013      	str	r3, [r2, #0]
 800124e:	4b7e      	ldr	r3, [pc, #504]	@ (8001448 <HAL_RCC_OscConfig+0x288>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a7d      	ldr	r2, [pc, #500]	@ (8001448 <HAL_RCC_OscConfig+0x288>)
 8001254:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001258:	6013      	str	r3, [r2, #0]
 800125a:	e01d      	b.n	8001298 <HAL_RCC_OscConfig+0xd8>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001264:	d10c      	bne.n	8001280 <HAL_RCC_OscConfig+0xc0>
 8001266:	4b78      	ldr	r3, [pc, #480]	@ (8001448 <HAL_RCC_OscConfig+0x288>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a77      	ldr	r2, [pc, #476]	@ (8001448 <HAL_RCC_OscConfig+0x288>)
 800126c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001270:	6013      	str	r3, [r2, #0]
 8001272:	4b75      	ldr	r3, [pc, #468]	@ (8001448 <HAL_RCC_OscConfig+0x288>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a74      	ldr	r2, [pc, #464]	@ (8001448 <HAL_RCC_OscConfig+0x288>)
 8001278:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800127c:	6013      	str	r3, [r2, #0]
 800127e:	e00b      	b.n	8001298 <HAL_RCC_OscConfig+0xd8>
 8001280:	4b71      	ldr	r3, [pc, #452]	@ (8001448 <HAL_RCC_OscConfig+0x288>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a70      	ldr	r2, [pc, #448]	@ (8001448 <HAL_RCC_OscConfig+0x288>)
 8001286:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800128a:	6013      	str	r3, [r2, #0]
 800128c:	4b6e      	ldr	r3, [pc, #440]	@ (8001448 <HAL_RCC_OscConfig+0x288>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a6d      	ldr	r2, [pc, #436]	@ (8001448 <HAL_RCC_OscConfig+0x288>)
 8001292:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001296:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d013      	beq.n	80012c8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012a0:	f7ff fbda 	bl	8000a58 <HAL_GetTick>
 80012a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012a6:	e008      	b.n	80012ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012a8:	f7ff fbd6 	bl	8000a58 <HAL_GetTick>
 80012ac:	4602      	mov	r2, r0
 80012ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	2b64      	cmp	r3, #100	@ 0x64
 80012b4:	d901      	bls.n	80012ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	e3d4      	b.n	8001a64 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012ba:	4b63      	ldr	r3, [pc, #396]	@ (8001448 <HAL_RCC_OscConfig+0x288>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d0f0      	beq.n	80012a8 <HAL_RCC_OscConfig+0xe8>
 80012c6:	e014      	b.n	80012f2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c8:	f7ff fbc6 	bl	8000a58 <HAL_GetTick>
 80012cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80012ce:	e008      	b.n	80012e2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012d0:	f7ff fbc2 	bl	8000a58 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	2b64      	cmp	r3, #100	@ 0x64
 80012dc:	d901      	bls.n	80012e2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e3c0      	b.n	8001a64 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80012e2:	4b59      	ldr	r3, [pc, #356]	@ (8001448 <HAL_RCC_OscConfig+0x288>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d1f0      	bne.n	80012d0 <HAL_RCC_OscConfig+0x110>
 80012ee:	e000      	b.n	80012f2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	f000 80ca 	beq.w	8001494 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001300:	4b51      	ldr	r3, [pc, #324]	@ (8001448 <HAL_RCC_OscConfig+0x288>)
 8001302:	691b      	ldr	r3, [r3, #16]
 8001304:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001308:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800130a:	4b4f      	ldr	r3, [pc, #316]	@ (8001448 <HAL_RCC_OscConfig+0x288>)
 800130c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800130e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001310:	6a3b      	ldr	r3, [r7, #32]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d007      	beq.n	8001326 <HAL_RCC_OscConfig+0x166>
 8001316:	6a3b      	ldr	r3, [r7, #32]
 8001318:	2b18      	cmp	r3, #24
 800131a:	d156      	bne.n	80013ca <HAL_RCC_OscConfig+0x20a>
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	f003 0303 	and.w	r3, r3, #3
 8001322:	2b00      	cmp	r3, #0
 8001324:	d151      	bne.n	80013ca <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001326:	4b48      	ldr	r3, [pc, #288]	@ (8001448 <HAL_RCC_OscConfig+0x288>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0304 	and.w	r3, r3, #4
 800132e:	2b00      	cmp	r3, #0
 8001330:	d005      	beq.n	800133e <HAL_RCC_OscConfig+0x17e>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	68db      	ldr	r3, [r3, #12]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d101      	bne.n	800133e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e392      	b.n	8001a64 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800133e:	4b42      	ldr	r3, [pc, #264]	@ (8001448 <HAL_RCC_OscConfig+0x288>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f023 0219 	bic.w	r2, r3, #25
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	68db      	ldr	r3, [r3, #12]
 800134a:	493f      	ldr	r1, [pc, #252]	@ (8001448 <HAL_RCC_OscConfig+0x288>)
 800134c:	4313      	orrs	r3, r2
 800134e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001350:	f7ff fb82 	bl	8000a58 <HAL_GetTick>
 8001354:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001358:	f7ff fb7e 	bl	8000a58 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b02      	cmp	r3, #2
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e37c      	b.n	8001a64 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800136a:	4b37      	ldr	r3, [pc, #220]	@ (8001448 <HAL_RCC_OscConfig+0x288>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0304 	and.w	r3, r3, #4
 8001372:	2b00      	cmp	r3, #0
 8001374:	d0f0      	beq.n	8001358 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001376:	f7ff fb9f 	bl	8000ab8 <HAL_GetREVID>
 800137a:	4603      	mov	r3, r0
 800137c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001380:	4293      	cmp	r3, r2
 8001382:	d817      	bhi.n	80013b4 <HAL_RCC_OscConfig+0x1f4>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	691b      	ldr	r3, [r3, #16]
 8001388:	2b40      	cmp	r3, #64	@ 0x40
 800138a:	d108      	bne.n	800139e <HAL_RCC_OscConfig+0x1de>
 800138c:	4b2e      	ldr	r3, [pc, #184]	@ (8001448 <HAL_RCC_OscConfig+0x288>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001394:	4a2c      	ldr	r2, [pc, #176]	@ (8001448 <HAL_RCC_OscConfig+0x288>)
 8001396:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800139a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800139c:	e07a      	b.n	8001494 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800139e:	4b2a      	ldr	r3, [pc, #168]	@ (8001448 <HAL_RCC_OscConfig+0x288>)
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	691b      	ldr	r3, [r3, #16]
 80013aa:	031b      	lsls	r3, r3, #12
 80013ac:	4926      	ldr	r1, [pc, #152]	@ (8001448 <HAL_RCC_OscConfig+0x288>)
 80013ae:	4313      	orrs	r3, r2
 80013b0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013b2:	e06f      	b.n	8001494 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013b4:	4b24      	ldr	r3, [pc, #144]	@ (8001448 <HAL_RCC_OscConfig+0x288>)
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	691b      	ldr	r3, [r3, #16]
 80013c0:	061b      	lsls	r3, r3, #24
 80013c2:	4921      	ldr	r1, [pc, #132]	@ (8001448 <HAL_RCC_OscConfig+0x288>)
 80013c4:	4313      	orrs	r3, r2
 80013c6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013c8:	e064      	b.n	8001494 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	68db      	ldr	r3, [r3, #12]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d047      	beq.n	8001462 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80013d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001448 <HAL_RCC_OscConfig+0x288>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f023 0219 	bic.w	r2, r3, #25
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	68db      	ldr	r3, [r3, #12]
 80013de:	491a      	ldr	r1, [pc, #104]	@ (8001448 <HAL_RCC_OscConfig+0x288>)
 80013e0:	4313      	orrs	r3, r2
 80013e2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e4:	f7ff fb38 	bl	8000a58 <HAL_GetTick>
 80013e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013ea:	e008      	b.n	80013fe <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013ec:	f7ff fb34 	bl	8000a58 <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d901      	bls.n	80013fe <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80013fa:	2303      	movs	r3, #3
 80013fc:	e332      	b.n	8001a64 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013fe:	4b12      	ldr	r3, [pc, #72]	@ (8001448 <HAL_RCC_OscConfig+0x288>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0304 	and.w	r3, r3, #4
 8001406:	2b00      	cmp	r3, #0
 8001408:	d0f0      	beq.n	80013ec <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800140a:	f7ff fb55 	bl	8000ab8 <HAL_GetREVID>
 800140e:	4603      	mov	r3, r0
 8001410:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001414:	4293      	cmp	r3, r2
 8001416:	d819      	bhi.n	800144c <HAL_RCC_OscConfig+0x28c>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	691b      	ldr	r3, [r3, #16]
 800141c:	2b40      	cmp	r3, #64	@ 0x40
 800141e:	d108      	bne.n	8001432 <HAL_RCC_OscConfig+0x272>
 8001420:	4b09      	ldr	r3, [pc, #36]	@ (8001448 <HAL_RCC_OscConfig+0x288>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001428:	4a07      	ldr	r2, [pc, #28]	@ (8001448 <HAL_RCC_OscConfig+0x288>)
 800142a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800142e:	6053      	str	r3, [r2, #4]
 8001430:	e030      	b.n	8001494 <HAL_RCC_OscConfig+0x2d4>
 8001432:	4b05      	ldr	r3, [pc, #20]	@ (8001448 <HAL_RCC_OscConfig+0x288>)
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	691b      	ldr	r3, [r3, #16]
 800143e:	031b      	lsls	r3, r3, #12
 8001440:	4901      	ldr	r1, [pc, #4]	@ (8001448 <HAL_RCC_OscConfig+0x288>)
 8001442:	4313      	orrs	r3, r2
 8001444:	604b      	str	r3, [r1, #4]
 8001446:	e025      	b.n	8001494 <HAL_RCC_OscConfig+0x2d4>
 8001448:	58024400 	.word	0x58024400
 800144c:	4b9a      	ldr	r3, [pc, #616]	@ (80016b8 <HAL_RCC_OscConfig+0x4f8>)
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	691b      	ldr	r3, [r3, #16]
 8001458:	061b      	lsls	r3, r3, #24
 800145a:	4997      	ldr	r1, [pc, #604]	@ (80016b8 <HAL_RCC_OscConfig+0x4f8>)
 800145c:	4313      	orrs	r3, r2
 800145e:	604b      	str	r3, [r1, #4]
 8001460:	e018      	b.n	8001494 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001462:	4b95      	ldr	r3, [pc, #596]	@ (80016b8 <HAL_RCC_OscConfig+0x4f8>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a94      	ldr	r2, [pc, #592]	@ (80016b8 <HAL_RCC_OscConfig+0x4f8>)
 8001468:	f023 0301 	bic.w	r3, r3, #1
 800146c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800146e:	f7ff faf3 	bl	8000a58 <HAL_GetTick>
 8001472:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001474:	e008      	b.n	8001488 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001476:	f7ff faef 	bl	8000a58 <HAL_GetTick>
 800147a:	4602      	mov	r2, r0
 800147c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	2b02      	cmp	r3, #2
 8001482:	d901      	bls.n	8001488 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001484:	2303      	movs	r3, #3
 8001486:	e2ed      	b.n	8001a64 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001488:	4b8b      	ldr	r3, [pc, #556]	@ (80016b8 <HAL_RCC_OscConfig+0x4f8>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 0304 	and.w	r3, r3, #4
 8001490:	2b00      	cmp	r3, #0
 8001492:	d1f0      	bne.n	8001476 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0310 	and.w	r3, r3, #16
 800149c:	2b00      	cmp	r3, #0
 800149e:	f000 80a9 	beq.w	80015f4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014a2:	4b85      	ldr	r3, [pc, #532]	@ (80016b8 <HAL_RCC_OscConfig+0x4f8>)
 80014a4:	691b      	ldr	r3, [r3, #16]
 80014a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80014aa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80014ac:	4b82      	ldr	r3, [pc, #520]	@ (80016b8 <HAL_RCC_OscConfig+0x4f8>)
 80014ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014b0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	2b08      	cmp	r3, #8
 80014b6:	d007      	beq.n	80014c8 <HAL_RCC_OscConfig+0x308>
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	2b18      	cmp	r3, #24
 80014bc:	d13a      	bne.n	8001534 <HAL_RCC_OscConfig+0x374>
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	f003 0303 	and.w	r3, r3, #3
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d135      	bne.n	8001534 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80014c8:	4b7b      	ldr	r3, [pc, #492]	@ (80016b8 <HAL_RCC_OscConfig+0x4f8>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d005      	beq.n	80014e0 <HAL_RCC_OscConfig+0x320>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	69db      	ldr	r3, [r3, #28]
 80014d8:	2b80      	cmp	r3, #128	@ 0x80
 80014da:	d001      	beq.n	80014e0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e2c1      	b.n	8001a64 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80014e0:	f7ff faea 	bl	8000ab8 <HAL_GetREVID>
 80014e4:	4603      	mov	r3, r0
 80014e6:	f241 0203 	movw	r2, #4099	@ 0x1003
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d817      	bhi.n	800151e <HAL_RCC_OscConfig+0x35e>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6a1b      	ldr	r3, [r3, #32]
 80014f2:	2b20      	cmp	r3, #32
 80014f4:	d108      	bne.n	8001508 <HAL_RCC_OscConfig+0x348>
 80014f6:	4b70      	ldr	r3, [pc, #448]	@ (80016b8 <HAL_RCC_OscConfig+0x4f8>)
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80014fe:	4a6e      	ldr	r2, [pc, #440]	@ (80016b8 <HAL_RCC_OscConfig+0x4f8>)
 8001500:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001504:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001506:	e075      	b.n	80015f4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001508:	4b6b      	ldr	r3, [pc, #428]	@ (80016b8 <HAL_RCC_OscConfig+0x4f8>)
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6a1b      	ldr	r3, [r3, #32]
 8001514:	069b      	lsls	r3, r3, #26
 8001516:	4968      	ldr	r1, [pc, #416]	@ (80016b8 <HAL_RCC_OscConfig+0x4f8>)
 8001518:	4313      	orrs	r3, r2
 800151a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800151c:	e06a      	b.n	80015f4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800151e:	4b66      	ldr	r3, [pc, #408]	@ (80016b8 <HAL_RCC_OscConfig+0x4f8>)
 8001520:	68db      	ldr	r3, [r3, #12]
 8001522:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6a1b      	ldr	r3, [r3, #32]
 800152a:	061b      	lsls	r3, r3, #24
 800152c:	4962      	ldr	r1, [pc, #392]	@ (80016b8 <HAL_RCC_OscConfig+0x4f8>)
 800152e:	4313      	orrs	r3, r2
 8001530:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001532:	e05f      	b.n	80015f4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	69db      	ldr	r3, [r3, #28]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d042      	beq.n	80015c2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800153c:	4b5e      	ldr	r3, [pc, #376]	@ (80016b8 <HAL_RCC_OscConfig+0x4f8>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a5d      	ldr	r2, [pc, #372]	@ (80016b8 <HAL_RCC_OscConfig+0x4f8>)
 8001542:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001546:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001548:	f7ff fa86 	bl	8000a58 <HAL_GetTick>
 800154c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800154e:	e008      	b.n	8001562 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001550:	f7ff fa82 	bl	8000a58 <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	2b02      	cmp	r3, #2
 800155c:	d901      	bls.n	8001562 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e280      	b.n	8001a64 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001562:	4b55      	ldr	r3, [pc, #340]	@ (80016b8 <HAL_RCC_OscConfig+0x4f8>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800156a:	2b00      	cmp	r3, #0
 800156c:	d0f0      	beq.n	8001550 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800156e:	f7ff faa3 	bl	8000ab8 <HAL_GetREVID>
 8001572:	4603      	mov	r3, r0
 8001574:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001578:	4293      	cmp	r3, r2
 800157a:	d817      	bhi.n	80015ac <HAL_RCC_OscConfig+0x3ec>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6a1b      	ldr	r3, [r3, #32]
 8001580:	2b20      	cmp	r3, #32
 8001582:	d108      	bne.n	8001596 <HAL_RCC_OscConfig+0x3d6>
 8001584:	4b4c      	ldr	r3, [pc, #304]	@ (80016b8 <HAL_RCC_OscConfig+0x4f8>)
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800158c:	4a4a      	ldr	r2, [pc, #296]	@ (80016b8 <HAL_RCC_OscConfig+0x4f8>)
 800158e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001592:	6053      	str	r3, [r2, #4]
 8001594:	e02e      	b.n	80015f4 <HAL_RCC_OscConfig+0x434>
 8001596:	4b48      	ldr	r3, [pc, #288]	@ (80016b8 <HAL_RCC_OscConfig+0x4f8>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6a1b      	ldr	r3, [r3, #32]
 80015a2:	069b      	lsls	r3, r3, #26
 80015a4:	4944      	ldr	r1, [pc, #272]	@ (80016b8 <HAL_RCC_OscConfig+0x4f8>)
 80015a6:	4313      	orrs	r3, r2
 80015a8:	604b      	str	r3, [r1, #4]
 80015aa:	e023      	b.n	80015f4 <HAL_RCC_OscConfig+0x434>
 80015ac:	4b42      	ldr	r3, [pc, #264]	@ (80016b8 <HAL_RCC_OscConfig+0x4f8>)
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6a1b      	ldr	r3, [r3, #32]
 80015b8:	061b      	lsls	r3, r3, #24
 80015ba:	493f      	ldr	r1, [pc, #252]	@ (80016b8 <HAL_RCC_OscConfig+0x4f8>)
 80015bc:	4313      	orrs	r3, r2
 80015be:	60cb      	str	r3, [r1, #12]
 80015c0:	e018      	b.n	80015f4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80015c2:	4b3d      	ldr	r3, [pc, #244]	@ (80016b8 <HAL_RCC_OscConfig+0x4f8>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a3c      	ldr	r2, [pc, #240]	@ (80016b8 <HAL_RCC_OscConfig+0x4f8>)
 80015c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80015cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ce:	f7ff fa43 	bl	8000a58 <HAL_GetTick>
 80015d2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80015d4:	e008      	b.n	80015e8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80015d6:	f7ff fa3f 	bl	8000a58 <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e23d      	b.n	8001a64 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80015e8:	4b33      	ldr	r3, [pc, #204]	@ (80016b8 <HAL_RCC_OscConfig+0x4f8>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d1f0      	bne.n	80015d6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0308 	and.w	r3, r3, #8
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d036      	beq.n	800166e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	695b      	ldr	r3, [r3, #20]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d019      	beq.n	800163c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001608:	4b2b      	ldr	r3, [pc, #172]	@ (80016b8 <HAL_RCC_OscConfig+0x4f8>)
 800160a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800160c:	4a2a      	ldr	r2, [pc, #168]	@ (80016b8 <HAL_RCC_OscConfig+0x4f8>)
 800160e:	f043 0301 	orr.w	r3, r3, #1
 8001612:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001614:	f7ff fa20 	bl	8000a58 <HAL_GetTick>
 8001618:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800161a:	e008      	b.n	800162e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800161c:	f7ff fa1c 	bl	8000a58 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b02      	cmp	r3, #2
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e21a      	b.n	8001a64 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800162e:	4b22      	ldr	r3, [pc, #136]	@ (80016b8 <HAL_RCC_OscConfig+0x4f8>)
 8001630:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	2b00      	cmp	r3, #0
 8001638:	d0f0      	beq.n	800161c <HAL_RCC_OscConfig+0x45c>
 800163a:	e018      	b.n	800166e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800163c:	4b1e      	ldr	r3, [pc, #120]	@ (80016b8 <HAL_RCC_OscConfig+0x4f8>)
 800163e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001640:	4a1d      	ldr	r2, [pc, #116]	@ (80016b8 <HAL_RCC_OscConfig+0x4f8>)
 8001642:	f023 0301 	bic.w	r3, r3, #1
 8001646:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001648:	f7ff fa06 	bl	8000a58 <HAL_GetTick>
 800164c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800164e:	e008      	b.n	8001662 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001650:	f7ff fa02 	bl	8000a58 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	2b02      	cmp	r3, #2
 800165c:	d901      	bls.n	8001662 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e200      	b.n	8001a64 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001662:	4b15      	ldr	r3, [pc, #84]	@ (80016b8 <HAL_RCC_OscConfig+0x4f8>)
 8001664:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1f0      	bne.n	8001650 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0320 	and.w	r3, r3, #32
 8001676:	2b00      	cmp	r3, #0
 8001678:	d039      	beq.n	80016ee <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	699b      	ldr	r3, [r3, #24]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d01c      	beq.n	80016bc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001682:	4b0d      	ldr	r3, [pc, #52]	@ (80016b8 <HAL_RCC_OscConfig+0x4f8>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a0c      	ldr	r2, [pc, #48]	@ (80016b8 <HAL_RCC_OscConfig+0x4f8>)
 8001688:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800168c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800168e:	f7ff f9e3 	bl	8000a58 <HAL_GetTick>
 8001692:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001694:	e008      	b.n	80016a8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001696:	f7ff f9df 	bl	8000a58 <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d901      	bls.n	80016a8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e1dd      	b.n	8001a64 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80016a8:	4b03      	ldr	r3, [pc, #12]	@ (80016b8 <HAL_RCC_OscConfig+0x4f8>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d0f0      	beq.n	8001696 <HAL_RCC_OscConfig+0x4d6>
 80016b4:	e01b      	b.n	80016ee <HAL_RCC_OscConfig+0x52e>
 80016b6:	bf00      	nop
 80016b8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80016bc:	4b9b      	ldr	r3, [pc, #620]	@ (800192c <HAL_RCC_OscConfig+0x76c>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a9a      	ldr	r2, [pc, #616]	@ (800192c <HAL_RCC_OscConfig+0x76c>)
 80016c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80016c6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80016c8:	f7ff f9c6 	bl	8000a58 <HAL_GetTick>
 80016cc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80016ce:	e008      	b.n	80016e2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016d0:	f7ff f9c2 	bl	8000a58 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e1c0      	b.n	8001a64 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80016e2:	4b92      	ldr	r3, [pc, #584]	@ (800192c <HAL_RCC_OscConfig+0x76c>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d1f0      	bne.n	80016d0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0304 	and.w	r3, r3, #4
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	f000 8081 	beq.w	80017fe <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80016fc:	4b8c      	ldr	r3, [pc, #560]	@ (8001930 <HAL_RCC_OscConfig+0x770>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a8b      	ldr	r2, [pc, #556]	@ (8001930 <HAL_RCC_OscConfig+0x770>)
 8001702:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001706:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001708:	f7ff f9a6 	bl	8000a58 <HAL_GetTick>
 800170c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800170e:	e008      	b.n	8001722 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001710:	f7ff f9a2 	bl	8000a58 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	2b64      	cmp	r3, #100	@ 0x64
 800171c:	d901      	bls.n	8001722 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e1a0      	b.n	8001a64 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001722:	4b83      	ldr	r3, [pc, #524]	@ (8001930 <HAL_RCC_OscConfig+0x770>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800172a:	2b00      	cmp	r3, #0
 800172c:	d0f0      	beq.n	8001710 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d106      	bne.n	8001744 <HAL_RCC_OscConfig+0x584>
 8001736:	4b7d      	ldr	r3, [pc, #500]	@ (800192c <HAL_RCC_OscConfig+0x76c>)
 8001738:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800173a:	4a7c      	ldr	r2, [pc, #496]	@ (800192c <HAL_RCC_OscConfig+0x76c>)
 800173c:	f043 0301 	orr.w	r3, r3, #1
 8001740:	6713      	str	r3, [r2, #112]	@ 0x70
 8001742:	e02d      	b.n	80017a0 <HAL_RCC_OscConfig+0x5e0>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d10c      	bne.n	8001766 <HAL_RCC_OscConfig+0x5a6>
 800174c:	4b77      	ldr	r3, [pc, #476]	@ (800192c <HAL_RCC_OscConfig+0x76c>)
 800174e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001750:	4a76      	ldr	r2, [pc, #472]	@ (800192c <HAL_RCC_OscConfig+0x76c>)
 8001752:	f023 0301 	bic.w	r3, r3, #1
 8001756:	6713      	str	r3, [r2, #112]	@ 0x70
 8001758:	4b74      	ldr	r3, [pc, #464]	@ (800192c <HAL_RCC_OscConfig+0x76c>)
 800175a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800175c:	4a73      	ldr	r2, [pc, #460]	@ (800192c <HAL_RCC_OscConfig+0x76c>)
 800175e:	f023 0304 	bic.w	r3, r3, #4
 8001762:	6713      	str	r3, [r2, #112]	@ 0x70
 8001764:	e01c      	b.n	80017a0 <HAL_RCC_OscConfig+0x5e0>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	2b05      	cmp	r3, #5
 800176c:	d10c      	bne.n	8001788 <HAL_RCC_OscConfig+0x5c8>
 800176e:	4b6f      	ldr	r3, [pc, #444]	@ (800192c <HAL_RCC_OscConfig+0x76c>)
 8001770:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001772:	4a6e      	ldr	r2, [pc, #440]	@ (800192c <HAL_RCC_OscConfig+0x76c>)
 8001774:	f043 0304 	orr.w	r3, r3, #4
 8001778:	6713      	str	r3, [r2, #112]	@ 0x70
 800177a:	4b6c      	ldr	r3, [pc, #432]	@ (800192c <HAL_RCC_OscConfig+0x76c>)
 800177c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800177e:	4a6b      	ldr	r2, [pc, #428]	@ (800192c <HAL_RCC_OscConfig+0x76c>)
 8001780:	f043 0301 	orr.w	r3, r3, #1
 8001784:	6713      	str	r3, [r2, #112]	@ 0x70
 8001786:	e00b      	b.n	80017a0 <HAL_RCC_OscConfig+0x5e0>
 8001788:	4b68      	ldr	r3, [pc, #416]	@ (800192c <HAL_RCC_OscConfig+0x76c>)
 800178a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800178c:	4a67      	ldr	r2, [pc, #412]	@ (800192c <HAL_RCC_OscConfig+0x76c>)
 800178e:	f023 0301 	bic.w	r3, r3, #1
 8001792:	6713      	str	r3, [r2, #112]	@ 0x70
 8001794:	4b65      	ldr	r3, [pc, #404]	@ (800192c <HAL_RCC_OscConfig+0x76c>)
 8001796:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001798:	4a64      	ldr	r2, [pc, #400]	@ (800192c <HAL_RCC_OscConfig+0x76c>)
 800179a:	f023 0304 	bic.w	r3, r3, #4
 800179e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d015      	beq.n	80017d4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017a8:	f7ff f956 	bl	8000a58 <HAL_GetTick>
 80017ac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80017ae:	e00a      	b.n	80017c6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017b0:	f7ff f952 	bl	8000a58 <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017be:	4293      	cmp	r3, r2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e14e      	b.n	8001a64 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80017c6:	4b59      	ldr	r3, [pc, #356]	@ (800192c <HAL_RCC_OscConfig+0x76c>)
 80017c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d0ee      	beq.n	80017b0 <HAL_RCC_OscConfig+0x5f0>
 80017d2:	e014      	b.n	80017fe <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d4:	f7ff f940 	bl	8000a58 <HAL_GetTick>
 80017d8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80017da:	e00a      	b.n	80017f2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017dc:	f7ff f93c 	bl	8000a58 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e138      	b.n	8001a64 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80017f2:	4b4e      	ldr	r3, [pc, #312]	@ (800192c <HAL_RCC_OscConfig+0x76c>)
 80017f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d1ee      	bne.n	80017dc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001802:	2b00      	cmp	r3, #0
 8001804:	f000 812d 	beq.w	8001a62 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001808:	4b48      	ldr	r3, [pc, #288]	@ (800192c <HAL_RCC_OscConfig+0x76c>)
 800180a:	691b      	ldr	r3, [r3, #16]
 800180c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001810:	2b18      	cmp	r3, #24
 8001812:	f000 80bd 	beq.w	8001990 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800181a:	2b02      	cmp	r3, #2
 800181c:	f040 809e 	bne.w	800195c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001820:	4b42      	ldr	r3, [pc, #264]	@ (800192c <HAL_RCC_OscConfig+0x76c>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a41      	ldr	r2, [pc, #260]	@ (800192c <HAL_RCC_OscConfig+0x76c>)
 8001826:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800182a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800182c:	f7ff f914 	bl	8000a58 <HAL_GetTick>
 8001830:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001832:	e008      	b.n	8001846 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001834:	f7ff f910 	bl	8000a58 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b02      	cmp	r3, #2
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e10e      	b.n	8001a64 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001846:	4b39      	ldr	r3, [pc, #228]	@ (800192c <HAL_RCC_OscConfig+0x76c>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1f0      	bne.n	8001834 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001852:	4b36      	ldr	r3, [pc, #216]	@ (800192c <HAL_RCC_OscConfig+0x76c>)
 8001854:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001856:	4b37      	ldr	r3, [pc, #220]	@ (8001934 <HAL_RCC_OscConfig+0x774>)
 8001858:	4013      	ands	r3, r2
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001862:	0112      	lsls	r2, r2, #4
 8001864:	430a      	orrs	r2, r1
 8001866:	4931      	ldr	r1, [pc, #196]	@ (800192c <HAL_RCC_OscConfig+0x76c>)
 8001868:	4313      	orrs	r3, r2
 800186a:	628b      	str	r3, [r1, #40]	@ 0x28
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001870:	3b01      	subs	r3, #1
 8001872:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800187a:	3b01      	subs	r3, #1
 800187c:	025b      	lsls	r3, r3, #9
 800187e:	b29b      	uxth	r3, r3
 8001880:	431a      	orrs	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001886:	3b01      	subs	r3, #1
 8001888:	041b      	lsls	r3, r3, #16
 800188a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800188e:	431a      	orrs	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001894:	3b01      	subs	r3, #1
 8001896:	061b      	lsls	r3, r3, #24
 8001898:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800189c:	4923      	ldr	r1, [pc, #140]	@ (800192c <HAL_RCC_OscConfig+0x76c>)
 800189e:	4313      	orrs	r3, r2
 80018a0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80018a2:	4b22      	ldr	r3, [pc, #136]	@ (800192c <HAL_RCC_OscConfig+0x76c>)
 80018a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018a6:	4a21      	ldr	r2, [pc, #132]	@ (800192c <HAL_RCC_OscConfig+0x76c>)
 80018a8:	f023 0301 	bic.w	r3, r3, #1
 80018ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80018ae:	4b1f      	ldr	r3, [pc, #124]	@ (800192c <HAL_RCC_OscConfig+0x76c>)
 80018b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80018b2:	4b21      	ldr	r3, [pc, #132]	@ (8001938 <HAL_RCC_OscConfig+0x778>)
 80018b4:	4013      	ands	r3, r2
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80018ba:	00d2      	lsls	r2, r2, #3
 80018bc:	491b      	ldr	r1, [pc, #108]	@ (800192c <HAL_RCC_OscConfig+0x76c>)
 80018be:	4313      	orrs	r3, r2
 80018c0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80018c2:	4b1a      	ldr	r3, [pc, #104]	@ (800192c <HAL_RCC_OscConfig+0x76c>)
 80018c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018c6:	f023 020c 	bic.w	r2, r3, #12
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ce:	4917      	ldr	r1, [pc, #92]	@ (800192c <HAL_RCC_OscConfig+0x76c>)
 80018d0:	4313      	orrs	r3, r2
 80018d2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80018d4:	4b15      	ldr	r3, [pc, #84]	@ (800192c <HAL_RCC_OscConfig+0x76c>)
 80018d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018d8:	f023 0202 	bic.w	r2, r3, #2
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018e0:	4912      	ldr	r1, [pc, #72]	@ (800192c <HAL_RCC_OscConfig+0x76c>)
 80018e2:	4313      	orrs	r3, r2
 80018e4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80018e6:	4b11      	ldr	r3, [pc, #68]	@ (800192c <HAL_RCC_OscConfig+0x76c>)
 80018e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018ea:	4a10      	ldr	r2, [pc, #64]	@ (800192c <HAL_RCC_OscConfig+0x76c>)
 80018ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80018f2:	4b0e      	ldr	r3, [pc, #56]	@ (800192c <HAL_RCC_OscConfig+0x76c>)
 80018f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018f6:	4a0d      	ldr	r2, [pc, #52]	@ (800192c <HAL_RCC_OscConfig+0x76c>)
 80018f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80018fe:	4b0b      	ldr	r3, [pc, #44]	@ (800192c <HAL_RCC_OscConfig+0x76c>)
 8001900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001902:	4a0a      	ldr	r2, [pc, #40]	@ (800192c <HAL_RCC_OscConfig+0x76c>)
 8001904:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001908:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800190a:	4b08      	ldr	r3, [pc, #32]	@ (800192c <HAL_RCC_OscConfig+0x76c>)
 800190c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800190e:	4a07      	ldr	r2, [pc, #28]	@ (800192c <HAL_RCC_OscConfig+0x76c>)
 8001910:	f043 0301 	orr.w	r3, r3, #1
 8001914:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001916:	4b05      	ldr	r3, [pc, #20]	@ (800192c <HAL_RCC_OscConfig+0x76c>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a04      	ldr	r2, [pc, #16]	@ (800192c <HAL_RCC_OscConfig+0x76c>)
 800191c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001920:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001922:	f7ff f899 	bl	8000a58 <HAL_GetTick>
 8001926:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001928:	e011      	b.n	800194e <HAL_RCC_OscConfig+0x78e>
 800192a:	bf00      	nop
 800192c:	58024400 	.word	0x58024400
 8001930:	58024800 	.word	0x58024800
 8001934:	fffffc0c 	.word	0xfffffc0c
 8001938:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800193c:	f7ff f88c 	bl	8000a58 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b02      	cmp	r3, #2
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e08a      	b.n	8001a64 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800194e:	4b47      	ldr	r3, [pc, #284]	@ (8001a6c <HAL_RCC_OscConfig+0x8ac>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d0f0      	beq.n	800193c <HAL_RCC_OscConfig+0x77c>
 800195a:	e082      	b.n	8001a62 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800195c:	4b43      	ldr	r3, [pc, #268]	@ (8001a6c <HAL_RCC_OscConfig+0x8ac>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a42      	ldr	r2, [pc, #264]	@ (8001a6c <HAL_RCC_OscConfig+0x8ac>)
 8001962:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001966:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001968:	f7ff f876 	bl	8000a58 <HAL_GetTick>
 800196c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800196e:	e008      	b.n	8001982 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001970:	f7ff f872 	bl	8000a58 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b02      	cmp	r3, #2
 800197c:	d901      	bls.n	8001982 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e070      	b.n	8001a64 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001982:	4b3a      	ldr	r3, [pc, #232]	@ (8001a6c <HAL_RCC_OscConfig+0x8ac>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d1f0      	bne.n	8001970 <HAL_RCC_OscConfig+0x7b0>
 800198e:	e068      	b.n	8001a62 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001990:	4b36      	ldr	r3, [pc, #216]	@ (8001a6c <HAL_RCC_OscConfig+0x8ac>)
 8001992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001994:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001996:	4b35      	ldr	r3, [pc, #212]	@ (8001a6c <HAL_RCC_OscConfig+0x8ac>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d031      	beq.n	8001a08 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	f003 0203 	and.w	r2, r3, #3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d12a      	bne.n	8001a08 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	091b      	lsrs	r3, r3, #4
 80019b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019be:	429a      	cmp	r2, r3
 80019c0:	d122      	bne.n	8001a08 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019cc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d11a      	bne.n	8001a08 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	0a5b      	lsrs	r3, r3, #9
 80019d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019de:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d111      	bne.n	8001a08 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	0c1b      	lsrs	r3, r3, #16
 80019e8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019f0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d108      	bne.n	8001a08 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	0e1b      	lsrs	r3, r3, #24
 80019fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a02:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d001      	beq.n	8001a0c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e02b      	b.n	8001a64 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001a0c:	4b17      	ldr	r3, [pc, #92]	@ (8001a6c <HAL_RCC_OscConfig+0x8ac>)
 8001a0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a10:	08db      	lsrs	r3, r3, #3
 8001a12:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001a16:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d01f      	beq.n	8001a62 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001a22:	4b12      	ldr	r3, [pc, #72]	@ (8001a6c <HAL_RCC_OscConfig+0x8ac>)
 8001a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a26:	4a11      	ldr	r2, [pc, #68]	@ (8001a6c <HAL_RCC_OscConfig+0x8ac>)
 8001a28:	f023 0301 	bic.w	r3, r3, #1
 8001a2c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a2e:	f7ff f813 	bl	8000a58 <HAL_GetTick>
 8001a32:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001a34:	bf00      	nop
 8001a36:	f7ff f80f 	bl	8000a58 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d0f9      	beq.n	8001a36 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001a42:	4b0a      	ldr	r3, [pc, #40]	@ (8001a6c <HAL_RCC_OscConfig+0x8ac>)
 8001a44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a46:	4b0a      	ldr	r3, [pc, #40]	@ (8001a70 <HAL_RCC_OscConfig+0x8b0>)
 8001a48:	4013      	ands	r3, r2
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001a4e:	00d2      	lsls	r2, r2, #3
 8001a50:	4906      	ldr	r1, [pc, #24]	@ (8001a6c <HAL_RCC_OscConfig+0x8ac>)
 8001a52:	4313      	orrs	r3, r2
 8001a54:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001a56:	4b05      	ldr	r3, [pc, #20]	@ (8001a6c <HAL_RCC_OscConfig+0x8ac>)
 8001a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a5a:	4a04      	ldr	r2, [pc, #16]	@ (8001a6c <HAL_RCC_OscConfig+0x8ac>)
 8001a5c:	f043 0301 	orr.w	r3, r3, #1
 8001a60:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001a62:	2300      	movs	r3, #0
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3730      	adds	r7, #48	@ 0x30
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	58024400 	.word	0x58024400
 8001a70:	ffff0007 	.word	0xffff0007

08001a74 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d101      	bne.n	8001a88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e19c      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a88:	4b8a      	ldr	r3, [pc, #552]	@ (8001cb4 <HAL_RCC_ClockConfig+0x240>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 030f 	and.w	r3, r3, #15
 8001a90:	683a      	ldr	r2, [r7, #0]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d910      	bls.n	8001ab8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a96:	4b87      	ldr	r3, [pc, #540]	@ (8001cb4 <HAL_RCC_ClockConfig+0x240>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f023 020f 	bic.w	r2, r3, #15
 8001a9e:	4985      	ldr	r1, [pc, #532]	@ (8001cb4 <HAL_RCC_ClockConfig+0x240>)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aa6:	4b83      	ldr	r3, [pc, #524]	@ (8001cb4 <HAL_RCC_ClockConfig+0x240>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 030f 	and.w	r3, r3, #15
 8001aae:	683a      	ldr	r2, [r7, #0]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d001      	beq.n	8001ab8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e184      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0304 	and.w	r3, r3, #4
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d010      	beq.n	8001ae6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	691a      	ldr	r2, [r3, #16]
 8001ac8:	4b7b      	ldr	r3, [pc, #492]	@ (8001cb8 <HAL_RCC_ClockConfig+0x244>)
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d908      	bls.n	8001ae6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001ad4:	4b78      	ldr	r3, [pc, #480]	@ (8001cb8 <HAL_RCC_ClockConfig+0x244>)
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	691b      	ldr	r3, [r3, #16]
 8001ae0:	4975      	ldr	r1, [pc, #468]	@ (8001cb8 <HAL_RCC_ClockConfig+0x244>)
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0308 	and.w	r3, r3, #8
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d010      	beq.n	8001b14 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	695a      	ldr	r2, [r3, #20]
 8001af6:	4b70      	ldr	r3, [pc, #448]	@ (8001cb8 <HAL_RCC_ClockConfig+0x244>)
 8001af8:	69db      	ldr	r3, [r3, #28]
 8001afa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d908      	bls.n	8001b14 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001b02:	4b6d      	ldr	r3, [pc, #436]	@ (8001cb8 <HAL_RCC_ClockConfig+0x244>)
 8001b04:	69db      	ldr	r3, [r3, #28]
 8001b06:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	695b      	ldr	r3, [r3, #20]
 8001b0e:	496a      	ldr	r1, [pc, #424]	@ (8001cb8 <HAL_RCC_ClockConfig+0x244>)
 8001b10:	4313      	orrs	r3, r2
 8001b12:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0310 	and.w	r3, r3, #16
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d010      	beq.n	8001b42 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	699a      	ldr	r2, [r3, #24]
 8001b24:	4b64      	ldr	r3, [pc, #400]	@ (8001cb8 <HAL_RCC_ClockConfig+0x244>)
 8001b26:	69db      	ldr	r3, [r3, #28]
 8001b28:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d908      	bls.n	8001b42 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001b30:	4b61      	ldr	r3, [pc, #388]	@ (8001cb8 <HAL_RCC_ClockConfig+0x244>)
 8001b32:	69db      	ldr	r3, [r3, #28]
 8001b34:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	699b      	ldr	r3, [r3, #24]
 8001b3c:	495e      	ldr	r1, [pc, #376]	@ (8001cb8 <HAL_RCC_ClockConfig+0x244>)
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0320 	and.w	r3, r3, #32
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d010      	beq.n	8001b70 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	69da      	ldr	r2, [r3, #28]
 8001b52:	4b59      	ldr	r3, [pc, #356]	@ (8001cb8 <HAL_RCC_ClockConfig+0x244>)
 8001b54:	6a1b      	ldr	r3, [r3, #32]
 8001b56:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d908      	bls.n	8001b70 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001b5e:	4b56      	ldr	r3, [pc, #344]	@ (8001cb8 <HAL_RCC_ClockConfig+0x244>)
 8001b60:	6a1b      	ldr	r3, [r3, #32]
 8001b62:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	69db      	ldr	r3, [r3, #28]
 8001b6a:	4953      	ldr	r1, [pc, #332]	@ (8001cb8 <HAL_RCC_ClockConfig+0x244>)
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0302 	and.w	r3, r3, #2
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d010      	beq.n	8001b9e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	68da      	ldr	r2, [r3, #12]
 8001b80:	4b4d      	ldr	r3, [pc, #308]	@ (8001cb8 <HAL_RCC_ClockConfig+0x244>)
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	f003 030f 	and.w	r3, r3, #15
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d908      	bls.n	8001b9e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b8c:	4b4a      	ldr	r3, [pc, #296]	@ (8001cb8 <HAL_RCC_ClockConfig+0x244>)
 8001b8e:	699b      	ldr	r3, [r3, #24]
 8001b90:	f023 020f 	bic.w	r2, r3, #15
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	4947      	ldr	r1, [pc, #284]	@ (8001cb8 <HAL_RCC_ClockConfig+0x244>)
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0301 	and.w	r3, r3, #1
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d055      	beq.n	8001c56 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001baa:	4b43      	ldr	r3, [pc, #268]	@ (8001cb8 <HAL_RCC_ClockConfig+0x244>)
 8001bac:	699b      	ldr	r3, [r3, #24]
 8001bae:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	4940      	ldr	r1, [pc, #256]	@ (8001cb8 <HAL_RCC_ClockConfig+0x244>)
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d107      	bne.n	8001bd4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001bc4:	4b3c      	ldr	r3, [pc, #240]	@ (8001cb8 <HAL_RCC_ClockConfig+0x244>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d121      	bne.n	8001c14 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e0f6      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	2b03      	cmp	r3, #3
 8001bda:	d107      	bne.n	8001bec <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001bdc:	4b36      	ldr	r3, [pc, #216]	@ (8001cb8 <HAL_RCC_ClockConfig+0x244>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d115      	bne.n	8001c14 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e0ea      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d107      	bne.n	8001c04 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001bf4:	4b30      	ldr	r3, [pc, #192]	@ (8001cb8 <HAL_RCC_ClockConfig+0x244>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d109      	bne.n	8001c14 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e0de      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c04:	4b2c      	ldr	r3, [pc, #176]	@ (8001cb8 <HAL_RCC_ClockConfig+0x244>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0304 	and.w	r3, r3, #4
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d101      	bne.n	8001c14 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e0d6      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c14:	4b28      	ldr	r3, [pc, #160]	@ (8001cb8 <HAL_RCC_ClockConfig+0x244>)
 8001c16:	691b      	ldr	r3, [r3, #16]
 8001c18:	f023 0207 	bic.w	r2, r3, #7
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	4925      	ldr	r1, [pc, #148]	@ (8001cb8 <HAL_RCC_ClockConfig+0x244>)
 8001c22:	4313      	orrs	r3, r2
 8001c24:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c26:	f7fe ff17 	bl	8000a58 <HAL_GetTick>
 8001c2a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c2c:	e00a      	b.n	8001c44 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c2e:	f7fe ff13 	bl	8000a58 <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d901      	bls.n	8001c44 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e0be      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c44:	4b1c      	ldr	r3, [pc, #112]	@ (8001cb8 <HAL_RCC_ClockConfig+0x244>)
 8001c46:	691b      	ldr	r3, [r3, #16]
 8001c48:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	00db      	lsls	r3, r3, #3
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d1eb      	bne.n	8001c2e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d010      	beq.n	8001c84 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	68da      	ldr	r2, [r3, #12]
 8001c66:	4b14      	ldr	r3, [pc, #80]	@ (8001cb8 <HAL_RCC_ClockConfig+0x244>)
 8001c68:	699b      	ldr	r3, [r3, #24]
 8001c6a:	f003 030f 	and.w	r3, r3, #15
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d208      	bcs.n	8001c84 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c72:	4b11      	ldr	r3, [pc, #68]	@ (8001cb8 <HAL_RCC_ClockConfig+0x244>)
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	f023 020f 	bic.w	r2, r3, #15
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	490e      	ldr	r1, [pc, #56]	@ (8001cb8 <HAL_RCC_ClockConfig+0x244>)
 8001c80:	4313      	orrs	r3, r2
 8001c82:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c84:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb4 <HAL_RCC_ClockConfig+0x240>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 030f 	and.w	r3, r3, #15
 8001c8c:	683a      	ldr	r2, [r7, #0]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d214      	bcs.n	8001cbc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c92:	4b08      	ldr	r3, [pc, #32]	@ (8001cb4 <HAL_RCC_ClockConfig+0x240>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f023 020f 	bic.w	r2, r3, #15
 8001c9a:	4906      	ldr	r1, [pc, #24]	@ (8001cb4 <HAL_RCC_ClockConfig+0x240>)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ca2:	4b04      	ldr	r3, [pc, #16]	@ (8001cb4 <HAL_RCC_ClockConfig+0x240>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 030f 	and.w	r3, r3, #15
 8001caa:	683a      	ldr	r2, [r7, #0]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d005      	beq.n	8001cbc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e086      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x34e>
 8001cb4:	52002000 	.word	0x52002000
 8001cb8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0304 	and.w	r3, r3, #4
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d010      	beq.n	8001cea <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	691a      	ldr	r2, [r3, #16]
 8001ccc:	4b3f      	ldr	r3, [pc, #252]	@ (8001dcc <HAL_RCC_ClockConfig+0x358>)
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d208      	bcs.n	8001cea <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001cd8:	4b3c      	ldr	r3, [pc, #240]	@ (8001dcc <HAL_RCC_ClockConfig+0x358>)
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	691b      	ldr	r3, [r3, #16]
 8001ce4:	4939      	ldr	r1, [pc, #228]	@ (8001dcc <HAL_RCC_ClockConfig+0x358>)
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0308 	and.w	r3, r3, #8
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d010      	beq.n	8001d18 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	695a      	ldr	r2, [r3, #20]
 8001cfa:	4b34      	ldr	r3, [pc, #208]	@ (8001dcc <HAL_RCC_ClockConfig+0x358>)
 8001cfc:	69db      	ldr	r3, [r3, #28]
 8001cfe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d208      	bcs.n	8001d18 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001d06:	4b31      	ldr	r3, [pc, #196]	@ (8001dcc <HAL_RCC_ClockConfig+0x358>)
 8001d08:	69db      	ldr	r3, [r3, #28]
 8001d0a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	695b      	ldr	r3, [r3, #20]
 8001d12:	492e      	ldr	r1, [pc, #184]	@ (8001dcc <HAL_RCC_ClockConfig+0x358>)
 8001d14:	4313      	orrs	r3, r2
 8001d16:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0310 	and.w	r3, r3, #16
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d010      	beq.n	8001d46 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	699a      	ldr	r2, [r3, #24]
 8001d28:	4b28      	ldr	r3, [pc, #160]	@ (8001dcc <HAL_RCC_ClockConfig+0x358>)
 8001d2a:	69db      	ldr	r3, [r3, #28]
 8001d2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d208      	bcs.n	8001d46 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001d34:	4b25      	ldr	r3, [pc, #148]	@ (8001dcc <HAL_RCC_ClockConfig+0x358>)
 8001d36:	69db      	ldr	r3, [r3, #28]
 8001d38:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	4922      	ldr	r1, [pc, #136]	@ (8001dcc <HAL_RCC_ClockConfig+0x358>)
 8001d42:	4313      	orrs	r3, r2
 8001d44:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0320 	and.w	r3, r3, #32
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d010      	beq.n	8001d74 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	69da      	ldr	r2, [r3, #28]
 8001d56:	4b1d      	ldr	r3, [pc, #116]	@ (8001dcc <HAL_RCC_ClockConfig+0x358>)
 8001d58:	6a1b      	ldr	r3, [r3, #32]
 8001d5a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d208      	bcs.n	8001d74 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001d62:	4b1a      	ldr	r3, [pc, #104]	@ (8001dcc <HAL_RCC_ClockConfig+0x358>)
 8001d64:	6a1b      	ldr	r3, [r3, #32]
 8001d66:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	69db      	ldr	r3, [r3, #28]
 8001d6e:	4917      	ldr	r1, [pc, #92]	@ (8001dcc <HAL_RCC_ClockConfig+0x358>)
 8001d70:	4313      	orrs	r3, r2
 8001d72:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001d74:	f000 f834 	bl	8001de0 <HAL_RCC_GetSysClockFreq>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	4b14      	ldr	r3, [pc, #80]	@ (8001dcc <HAL_RCC_ClockConfig+0x358>)
 8001d7c:	699b      	ldr	r3, [r3, #24]
 8001d7e:	0a1b      	lsrs	r3, r3, #8
 8001d80:	f003 030f 	and.w	r3, r3, #15
 8001d84:	4912      	ldr	r1, [pc, #72]	@ (8001dd0 <HAL_RCC_ClockConfig+0x35c>)
 8001d86:	5ccb      	ldrb	r3, [r1, r3]
 8001d88:	f003 031f 	and.w	r3, r3, #31
 8001d8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d90:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001d92:	4b0e      	ldr	r3, [pc, #56]	@ (8001dcc <HAL_RCC_ClockConfig+0x358>)
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	f003 030f 	and.w	r3, r3, #15
 8001d9a:	4a0d      	ldr	r2, [pc, #52]	@ (8001dd0 <HAL_RCC_ClockConfig+0x35c>)
 8001d9c:	5cd3      	ldrb	r3, [r2, r3]
 8001d9e:	f003 031f 	and.w	r3, r3, #31
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	fa22 f303 	lsr.w	r3, r2, r3
 8001da8:	4a0a      	ldr	r2, [pc, #40]	@ (8001dd4 <HAL_RCC_ClockConfig+0x360>)
 8001daa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001dac:	4a0a      	ldr	r2, [pc, #40]	@ (8001dd8 <HAL_RCC_ClockConfig+0x364>)
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001db2:	4b0a      	ldr	r3, [pc, #40]	@ (8001ddc <HAL_RCC_ClockConfig+0x368>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7fe fe04 	bl	80009c4 <HAL_InitTick>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3718      	adds	r7, #24
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	58024400 	.word	0x58024400
 8001dd0:	08002144 	.word	0x08002144
 8001dd4:	24000008 	.word	0x24000008
 8001dd8:	24000004 	.word	0x24000004
 8001ddc:	2400000c 	.word	0x2400000c

08001de0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b089      	sub	sp, #36	@ 0x24
 8001de4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001de6:	4bb3      	ldr	r3, [pc, #716]	@ (80020b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001de8:	691b      	ldr	r3, [r3, #16]
 8001dea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001dee:	2b18      	cmp	r3, #24
 8001df0:	f200 8155 	bhi.w	800209e <HAL_RCC_GetSysClockFreq+0x2be>
 8001df4:	a201      	add	r2, pc, #4	@ (adr r2, 8001dfc <HAL_RCC_GetSysClockFreq+0x1c>)
 8001df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dfa:	bf00      	nop
 8001dfc:	08001e61 	.word	0x08001e61
 8001e00:	0800209f 	.word	0x0800209f
 8001e04:	0800209f 	.word	0x0800209f
 8001e08:	0800209f 	.word	0x0800209f
 8001e0c:	0800209f 	.word	0x0800209f
 8001e10:	0800209f 	.word	0x0800209f
 8001e14:	0800209f 	.word	0x0800209f
 8001e18:	0800209f 	.word	0x0800209f
 8001e1c:	08001e87 	.word	0x08001e87
 8001e20:	0800209f 	.word	0x0800209f
 8001e24:	0800209f 	.word	0x0800209f
 8001e28:	0800209f 	.word	0x0800209f
 8001e2c:	0800209f 	.word	0x0800209f
 8001e30:	0800209f 	.word	0x0800209f
 8001e34:	0800209f 	.word	0x0800209f
 8001e38:	0800209f 	.word	0x0800209f
 8001e3c:	08001e8d 	.word	0x08001e8d
 8001e40:	0800209f 	.word	0x0800209f
 8001e44:	0800209f 	.word	0x0800209f
 8001e48:	0800209f 	.word	0x0800209f
 8001e4c:	0800209f 	.word	0x0800209f
 8001e50:	0800209f 	.word	0x0800209f
 8001e54:	0800209f 	.word	0x0800209f
 8001e58:	0800209f 	.word	0x0800209f
 8001e5c:	08001e93 	.word	0x08001e93
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001e60:	4b94      	ldr	r3, [pc, #592]	@ (80020b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0320 	and.w	r3, r3, #32
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d009      	beq.n	8001e80 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001e6c:	4b91      	ldr	r3, [pc, #580]	@ (80020b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	08db      	lsrs	r3, r3, #3
 8001e72:	f003 0303 	and.w	r3, r3, #3
 8001e76:	4a90      	ldr	r2, [pc, #576]	@ (80020b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001e78:	fa22 f303 	lsr.w	r3, r2, r3
 8001e7c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001e7e:	e111      	b.n	80020a4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001e80:	4b8d      	ldr	r3, [pc, #564]	@ (80020b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001e82:	61bb      	str	r3, [r7, #24]
      break;
 8001e84:	e10e      	b.n	80020a4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8001e86:	4b8d      	ldr	r3, [pc, #564]	@ (80020bc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001e88:	61bb      	str	r3, [r7, #24]
      break;
 8001e8a:	e10b      	b.n	80020a4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001e8c:	4b8c      	ldr	r3, [pc, #560]	@ (80020c0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001e8e:	61bb      	str	r3, [r7, #24]
      break;
 8001e90:	e108      	b.n	80020a4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001e92:	4b88      	ldr	r3, [pc, #544]	@ (80020b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e96:	f003 0303 	and.w	r3, r3, #3
 8001e9a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001e9c:	4b85      	ldr	r3, [pc, #532]	@ (80020b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ea0:	091b      	lsrs	r3, r3, #4
 8001ea2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ea6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001ea8:	4b82      	ldr	r3, [pc, #520]	@ (80020b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eac:	f003 0301 	and.w	r3, r3, #1
 8001eb0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001eb2:	4b80      	ldr	r3, [pc, #512]	@ (80020b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001eb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001eb6:	08db      	lsrs	r3, r3, #3
 8001eb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001ebc:	68fa      	ldr	r2, [r7, #12]
 8001ebe:	fb02 f303 	mul.w	r3, r2, r3
 8001ec2:	ee07 3a90 	vmov	s15, r3
 8001ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001eca:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	f000 80e1 	beq.w	8002098 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	f000 8083 	beq.w	8001fe4 <HAL_RCC_GetSysClockFreq+0x204>
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	f200 80a1 	bhi.w	8002028 <HAL_RCC_GetSysClockFreq+0x248>
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d003      	beq.n	8001ef4 <HAL_RCC_GetSysClockFreq+0x114>
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d056      	beq.n	8001fa0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001ef2:	e099      	b.n	8002028 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001ef4:	4b6f      	ldr	r3, [pc, #444]	@ (80020b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0320 	and.w	r3, r3, #32
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d02d      	beq.n	8001f5c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001f00:	4b6c      	ldr	r3, [pc, #432]	@ (80020b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	08db      	lsrs	r3, r3, #3
 8001f06:	f003 0303 	and.w	r3, r3, #3
 8001f0a:	4a6b      	ldr	r2, [pc, #428]	@ (80020b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001f0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f10:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	ee07 3a90 	vmov	s15, r3
 8001f18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	ee07 3a90 	vmov	s15, r3
 8001f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f2a:	4b62      	ldr	r3, [pc, #392]	@ (80020b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f32:	ee07 3a90 	vmov	s15, r3
 8001f36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f3e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80020c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001f4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f56:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8001f5a:	e087      	b.n	800206c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	ee07 3a90 	vmov	s15, r3
 8001f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f66:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80020c8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001f6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f6e:	4b51      	ldr	r3, [pc, #324]	@ (80020b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f76:	ee07 3a90 	vmov	s15, r3
 8001f7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f82:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80020c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001f92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f9a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001f9e:	e065      	b.n	800206c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	ee07 3a90 	vmov	s15, r3
 8001fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001faa:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80020cc <HAL_RCC_GetSysClockFreq+0x2ec>
 8001fae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001fb2:	4b40      	ldr	r3, [pc, #256]	@ (80020b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fba:	ee07 3a90 	vmov	s15, r3
 8001fbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001fc2:	ed97 6a02 	vldr	s12, [r7, #8]
 8001fc6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80020c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001fca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001fce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001fd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001fd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001fda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fde:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001fe2:	e043      	b.n	800206c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	ee07 3a90 	vmov	s15, r3
 8001fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fee:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80020d0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8001ff2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ff6:	4b2f      	ldr	r3, [pc, #188]	@ (80020b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ffe:	ee07 3a90 	vmov	s15, r3
 8002002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002006:	ed97 6a02 	vldr	s12, [r7, #8]
 800200a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80020c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800200e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002012:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002016:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800201a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800201e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002022:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002026:	e021      	b.n	800206c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	ee07 3a90 	vmov	s15, r3
 800202e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002032:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80020cc <HAL_RCC_GetSysClockFreq+0x2ec>
 8002036:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800203a:	4b1e      	ldr	r3, [pc, #120]	@ (80020b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800203e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002042:	ee07 3a90 	vmov	s15, r3
 8002046:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800204a:	ed97 6a02 	vldr	s12, [r7, #8]
 800204e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80020c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002052:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002056:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800205a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800205e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002066:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800206a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800206c:	4b11      	ldr	r3, [pc, #68]	@ (80020b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800206e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002070:	0a5b      	lsrs	r3, r3, #9
 8002072:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002076:	3301      	adds	r3, #1
 8002078:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	ee07 3a90 	vmov	s15, r3
 8002080:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002084:	edd7 6a07 	vldr	s13, [r7, #28]
 8002088:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800208c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002090:	ee17 3a90 	vmov	r3, s15
 8002094:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002096:	e005      	b.n	80020a4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002098:	2300      	movs	r3, #0
 800209a:	61bb      	str	r3, [r7, #24]
      break;
 800209c:	e002      	b.n	80020a4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800209e:	4b07      	ldr	r3, [pc, #28]	@ (80020bc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80020a0:	61bb      	str	r3, [r7, #24]
      break;
 80020a2:	bf00      	nop
  }

  return sysclockfreq;
 80020a4:	69bb      	ldr	r3, [r7, #24]
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3724      	adds	r7, #36	@ 0x24
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	58024400 	.word	0x58024400
 80020b8:	03d09000 	.word	0x03d09000
 80020bc:	003d0900 	.word	0x003d0900
 80020c0:	007a1200 	.word	0x007a1200
 80020c4:	46000000 	.word	0x46000000
 80020c8:	4c742400 	.word	0x4c742400
 80020cc:	4a742400 	.word	0x4a742400
 80020d0:	4af42400 	.word	0x4af42400

080020d4 <memset>:
 80020d4:	4402      	add	r2, r0
 80020d6:	4603      	mov	r3, r0
 80020d8:	4293      	cmp	r3, r2
 80020da:	d100      	bne.n	80020de <memset+0xa>
 80020dc:	4770      	bx	lr
 80020de:	f803 1b01 	strb.w	r1, [r3], #1
 80020e2:	e7f9      	b.n	80020d8 <memset+0x4>

080020e4 <__libc_init_array>:
 80020e4:	b570      	push	{r4, r5, r6, lr}
 80020e6:	4d0d      	ldr	r5, [pc, #52]	@ (800211c <__libc_init_array+0x38>)
 80020e8:	4c0d      	ldr	r4, [pc, #52]	@ (8002120 <__libc_init_array+0x3c>)
 80020ea:	1b64      	subs	r4, r4, r5
 80020ec:	10a4      	asrs	r4, r4, #2
 80020ee:	2600      	movs	r6, #0
 80020f0:	42a6      	cmp	r6, r4
 80020f2:	d109      	bne.n	8002108 <__libc_init_array+0x24>
 80020f4:	4d0b      	ldr	r5, [pc, #44]	@ (8002124 <__libc_init_array+0x40>)
 80020f6:	4c0c      	ldr	r4, [pc, #48]	@ (8002128 <__libc_init_array+0x44>)
 80020f8:	f000 f818 	bl	800212c <_init>
 80020fc:	1b64      	subs	r4, r4, r5
 80020fe:	10a4      	asrs	r4, r4, #2
 8002100:	2600      	movs	r6, #0
 8002102:	42a6      	cmp	r6, r4
 8002104:	d105      	bne.n	8002112 <__libc_init_array+0x2e>
 8002106:	bd70      	pop	{r4, r5, r6, pc}
 8002108:	f855 3b04 	ldr.w	r3, [r5], #4
 800210c:	4798      	blx	r3
 800210e:	3601      	adds	r6, #1
 8002110:	e7ee      	b.n	80020f0 <__libc_init_array+0xc>
 8002112:	f855 3b04 	ldr.w	r3, [r5], #4
 8002116:	4798      	blx	r3
 8002118:	3601      	adds	r6, #1
 800211a:	e7f2      	b.n	8002102 <__libc_init_array+0x1e>
 800211c:	08002154 	.word	0x08002154
 8002120:	08002154 	.word	0x08002154
 8002124:	08002154 	.word	0x08002154
 8002128:	08002158 	.word	0x08002158

0800212c <_init>:
 800212c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800212e:	bf00      	nop
 8002130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002132:	bc08      	pop	{r3}
 8002134:	469e      	mov	lr, r3
 8002136:	4770      	bx	lr

08002138 <_fini>:
 8002138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800213a:	bf00      	nop
 800213c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800213e:	bc08      	pop	{r3}
 8002140:	469e      	mov	lr, r3
 8002142:	4770      	bx	lr
