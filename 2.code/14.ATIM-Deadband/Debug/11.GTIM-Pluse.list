
11.GTIM-Pluse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000884c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08008aec  08008aec  00009aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008b94  08008b94  00009b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008b9c  08008b9c  00009b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08008ba0  08008ba0  00009ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000070  24000000  08008ba4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000034c  24000070  08008c14  0000a070  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240003bc  08008c14  0000a3bc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000a070  2**0
                  CONTENTS, READONLY
 10 .debug_info   000187e1  00000000  00000000  0000a09e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000033f1  00000000  00000000  0002287f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001288  00000000  00000000  00025c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000e51  00000000  00000000  00026ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a23a  00000000  00000000  00027d49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001ee39  00000000  00000000  00061f83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016884d  00000000  00000000  00080dbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001e9609  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000053c0  00000000  00000000  001e964c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005a  00000000  00000000  001eea0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000070 	.word	0x24000070
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008ad4 	.word	0x08008ad4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000074 	.word	0x24000074
 80002dc:	08008ad4 	.word	0x08008ad4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <MX_BEEP_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_BEEP_GPIO_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b086      	sub	sp, #24
 80006b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006c0:	4b12      	ldr	r3, [pc, #72]	@ (800070c <MX_BEEP_GPIO_Init+0x60>)
 80006c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006c6:	4a11      	ldr	r2, [pc, #68]	@ (800070c <MX_BEEP_GPIO_Init+0x60>)
 80006c8:	f043 0310 	orr.w	r3, r3, #16
 80006cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006d0:	4b0e      	ldr	r3, [pc, #56]	@ (800070c <MX_BEEP_GPIO_Init+0x60>)
 80006d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006d6:	f003 0310 	and.w	r3, r3, #16
 80006da:	603b      	str	r3, [r7, #0]
 80006dc:	683b      	ldr	r3, [r7, #0]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BEEP_GPIO_Port, BEEP_Pin, GPIO_PIN_RESET);
 80006de:	2200      	movs	r2, #0
 80006e0:	2110      	movs	r1, #16
 80006e2:	480b      	ldr	r0, [pc, #44]	@ (8000710 <MX_BEEP_GPIO_Init+0x64>)
 80006e4:	f001 ffe4 	bl	80026b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BEEP_Pin */
  GPIO_InitStruct.Pin = BEEP_Pin;
 80006e8:	2310      	movs	r3, #16
 80006ea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ec:	2301      	movs	r3, #1
 80006ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f0:	2300      	movs	r3, #0
 80006f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f4:	2300      	movs	r3, #0
 80006f6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006f8:	1d3b      	adds	r3, r7, #4
 80006fa:	4619      	mov	r1, r3
 80006fc:	4804      	ldr	r0, [pc, #16]	@ (8000710 <MX_BEEP_GPIO_Init+0x64>)
 80006fe:	f001 fe0f 	bl	8002320 <HAL_GPIO_Init>
}
 8000702:	bf00      	nop
 8000704:	3718      	adds	r7, #24
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	58024400 	.word	0x58024400
 8000710:	58021000 	.word	0x58021000

08000714 <MX_KEY_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_KEY_GPIO_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b086      	sub	sp, #24
 8000718:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000728:	4b14      	ldr	r3, [pc, #80]	@ (800077c <MX_KEY_GPIO_Init+0x68>)
 800072a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800072e:	4a13      	ldr	r2, [pc, #76]	@ (800077c <MX_KEY_GPIO_Init+0x68>)
 8000730:	f043 0301 	orr.w	r3, r3, #1
 8000734:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000738:	4b10      	ldr	r3, [pc, #64]	@ (800077c <MX_KEY_GPIO_Init+0x68>)
 800073a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	603b      	str	r3, [r7, #0]
 8000744:	683b      	ldr	r3, [r7, #0]
  /*Configure GPIO pin : WK_UP_Pin */
  GPIO_InitStruct.Pin = WK_UP_Pin;
 8000746:	2301      	movs	r3, #1
 8000748:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800074a:	2300      	movs	r3, #0
 800074c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800074e:	2302      	movs	r3, #2
 8000750:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(WK_UP_GPIO_Port, &GPIO_InitStruct);
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	4619      	mov	r1, r3
 8000756:	480a      	ldr	r0, [pc, #40]	@ (8000780 <MX_KEY_GPIO_Init+0x6c>)
 8000758:	f001 fde2 	bl	8002320 <HAL_GPIO_Init>
  /*Configure GPIO pins : KEY0_Pin KEY1_Pin */
  GPIO_InitStruct.Pin = KEY0_Pin|KEY1_Pin;
 800075c:	f248 0302 	movw	r3, #32770	@ 0x8002
 8000760:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000762:	2300      	movs	r3, #0
 8000764:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000766:	2301      	movs	r3, #1
 8000768:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800076a:	1d3b      	adds	r3, r7, #4
 800076c:	4619      	mov	r1, r3
 800076e:	4804      	ldr	r0, [pc, #16]	@ (8000780 <MX_KEY_GPIO_Init+0x6c>)
 8000770:	f001 fdd6 	bl	8002320 <HAL_GPIO_Init>
}
 8000774:	bf00      	nop
 8000776:	3718      	adds	r7, #24
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	58024400 	.word	0x58024400
 8000780:	58020000 	.word	0x58020000

08000784 <key_scan>:
  * KEY0_PRES, 1, KEY0 按下
  * KEY1_PRES, 2, KEY1 按下
  * WKUP_PRES, 3, WKUP 按下
 */
uint8_t key_scan(uint8_t mode)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b084      	sub	sp, #16
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	71fb      	strb	r3, [r7, #7]
    static uint8_t key_up = 1; /* 按键按松开标志 */
    uint8_t keyval = 0;
 800078e:	2300      	movs	r3, #0
 8000790:	73fb      	strb	r3, [r7, #15]
    if (mode) key_up = 1; /* 支持连按 */
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d002      	beq.n	800079e <key_scan+0x1a>
 8000798:	4b30      	ldr	r3, [pc, #192]	@ (800085c <key_scan+0xd8>)
 800079a:	2201      	movs	r2, #1
 800079c:	701a      	strb	r2, [r3, #0]
    // 获取按键的实际电平状态
    GPIO_PinState key0_state = HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin);
 800079e:	2102      	movs	r1, #2
 80007a0:	482f      	ldr	r0, [pc, #188]	@ (8000860 <key_scan+0xdc>)
 80007a2:	f001 ff6d 	bl	8002680 <HAL_GPIO_ReadPin>
 80007a6:	4603      	mov	r3, r0
 80007a8:	73bb      	strb	r3, [r7, #14]
    GPIO_PinState key1_state = HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin);
 80007aa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007ae:	482c      	ldr	r0, [pc, #176]	@ (8000860 <key_scan+0xdc>)
 80007b0:	f001 ff66 	bl	8002680 <HAL_GPIO_ReadPin>
 80007b4:	4603      	mov	r3, r0
 80007b6:	737b      	strb	r3, [r7, #13]
    GPIO_PinState wkup_state = HAL_GPIO_ReadPin(WK_UP_GPIO_Port, WK_UP_Pin);
 80007b8:	2101      	movs	r1, #1
 80007ba:	4829      	ldr	r0, [pc, #164]	@ (8000860 <key_scan+0xdc>)
 80007bc:	f001 ff60 	bl	8002680 <HAL_GPIO_ReadPin>
 80007c0:	4603      	mov	r3, r0
 80007c2:	733b      	strb	r3, [r7, #12]
    /* 按键松开标志为 1, 且有任意一个按键按下了 */
    // 注意：KEY0和KEY1是上拉，按下为低电平；WK_UP是下拉，按下为高电平。
    if (key_up && (key0_state == GPIO_PIN_RESET || key1_state == GPIO_PIN_RESET || wkup_state == GPIO_PIN_SET))
 80007c4:	4b25      	ldr	r3, [pc, #148]	@ (800085c <key_scan+0xd8>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d033      	beq.n	8000834 <key_scan+0xb0>
 80007cc:	7bbb      	ldrb	r3, [r7, #14]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d005      	beq.n	80007de <key_scan+0x5a>
 80007d2:	7b7b      	ldrb	r3, [r7, #13]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d002      	beq.n	80007de <key_scan+0x5a>
 80007d8:	7b3b      	ldrb	r3, [r7, #12]
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d12a      	bne.n	8000834 <key_scan+0xb0>
    {
        HAL_Delay(10); /* 去抖动 */ // 短暂延时进行消抖
 80007de:	200a      	movs	r0, #10
 80007e0:	f000 fe82 	bl	80014e8 <HAL_Delay>
        // 再次读取以确认按键状态，防止抖动
        key0_state = HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin);
 80007e4:	2102      	movs	r1, #2
 80007e6:	481e      	ldr	r0, [pc, #120]	@ (8000860 <key_scan+0xdc>)
 80007e8:	f001 ff4a 	bl	8002680 <HAL_GPIO_ReadPin>
 80007ec:	4603      	mov	r3, r0
 80007ee:	73bb      	strb	r3, [r7, #14]
        key1_state = HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin);
 80007f0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007f4:	481a      	ldr	r0, [pc, #104]	@ (8000860 <key_scan+0xdc>)
 80007f6:	f001 ff43 	bl	8002680 <HAL_GPIO_ReadPin>
 80007fa:	4603      	mov	r3, r0
 80007fc:	737b      	strb	r3, [r7, #13]
        wkup_state = HAL_GPIO_ReadPin(WK_UP_GPIO_Port, WK_UP_Pin);
 80007fe:	2101      	movs	r1, #1
 8000800:	4817      	ldr	r0, [pc, #92]	@ (8000860 <key_scan+0xdc>)
 8000802:	f001 ff3d 	bl	8002680 <HAL_GPIO_ReadPin>
 8000806:	4603      	mov	r3, r0
 8000808:	733b      	strb	r3, [r7, #12]
        key_up = 0; // 设置按键已按下标志
 800080a:	4b14      	ldr	r3, [pc, #80]	@ (800085c <key_scan+0xd8>)
 800080c:	2200      	movs	r2, #0
 800080e:	701a      	strb	r2, [r3, #0]
        // 根据按键状态判断是哪个按键被按下
        // 优先级：WK_UP > KEY1 > KEY0
        if (wkup_state == GPIO_PIN_SET)
 8000810:	7b3b      	ldrb	r3, [r7, #12]
 8000812:	2b01      	cmp	r3, #1
 8000814:	d102      	bne.n	800081c <key_scan+0x98>
        {
            keyval = WKUP_PRES;
 8000816:	2303      	movs	r3, #3
 8000818:	73fb      	strb	r3, [r7, #15]
        if (wkup_state == GPIO_PIN_SET)
 800081a:	e018      	b.n	800084e <key_scan+0xca>
        }
        else if (key1_state == GPIO_PIN_RESET) // KEY1是上拉，按下为低电平
 800081c:	7b7b      	ldrb	r3, [r7, #13]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d102      	bne.n	8000828 <key_scan+0xa4>
        {
            keyval = KEY1_PRES;
 8000822:	2302      	movs	r3, #2
 8000824:	73fb      	strb	r3, [r7, #15]
        if (wkup_state == GPIO_PIN_SET)
 8000826:	e012      	b.n	800084e <key_scan+0xca>
        }
        else if (key0_state == GPIO_PIN_RESET) // KEY0是上拉，按下为低电平
 8000828:	7bbb      	ldrb	r3, [r7, #14]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d10f      	bne.n	800084e <key_scan+0xca>
        {
            keyval = KEY0_PRES;
 800082e:	2301      	movs	r3, #1
 8000830:	73fb      	strb	r3, [r7, #15]
        if (wkup_state == GPIO_PIN_SET)
 8000832:	e00c      	b.n	800084e <key_scan+0xca>
        }
    }
    // 没有任何按键按下, 标记按键松开
    // 此时所有按键都处于非按下状态 (KEY0/KEY1 高电平，WK_UP 低电平)
    else if (key0_state == GPIO_PIN_SET && key1_state == GPIO_PIN_SET && wkup_state == GPIO_PIN_RESET)
 8000834:	7bbb      	ldrb	r3, [r7, #14]
 8000836:	2b01      	cmp	r3, #1
 8000838:	d10a      	bne.n	8000850 <key_scan+0xcc>
 800083a:	7b7b      	ldrb	r3, [r7, #13]
 800083c:	2b01      	cmp	r3, #1
 800083e:	d107      	bne.n	8000850 <key_scan+0xcc>
 8000840:	7b3b      	ldrb	r3, [r7, #12]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d104      	bne.n	8000850 <key_scan+0xcc>
    {
        key_up = 1;
 8000846:	4b05      	ldr	r3, [pc, #20]	@ (800085c <key_scan+0xd8>)
 8000848:	2201      	movs	r2, #1
 800084a:	701a      	strb	r2, [r3, #0]
 800084c:	e000      	b.n	8000850 <key_scan+0xcc>
        if (wkup_state == GPIO_PIN_SET)
 800084e:	bf00      	nop
    }
    return keyval; /* 返回键值 */
 8000850:	7bfb      	ldrb	r3, [r7, #15]
}
 8000852:	4618      	mov	r0, r3
 8000854:	3710      	adds	r7, #16
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	24000000 	.word	0x24000000
 8000860:	58020000 	.word	0x58020000

08000864 <MX_LED_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_LED_GPIO_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b088      	sub	sp, #32
 8000868:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086a:	f107 030c 	add.w	r3, r7, #12
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
 8000876:	60da      	str	r2, [r3, #12]
 8000878:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800087a:	4b24      	ldr	r3, [pc, #144]	@ (800090c <MX_LED_GPIO_Init+0xa8>)
 800087c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000880:	4a22      	ldr	r2, [pc, #136]	@ (800090c <MX_LED_GPIO_Init+0xa8>)
 8000882:	f043 0310 	orr.w	r3, r3, #16
 8000886:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800088a:	4b20      	ldr	r3, [pc, #128]	@ (800090c <MX_LED_GPIO_Init+0xa8>)
 800088c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000890:	f003 0310 	and.w	r3, r3, #16
 8000894:	60bb      	str	r3, [r7, #8]
 8000896:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000898:	4b1c      	ldr	r3, [pc, #112]	@ (800090c <MX_LED_GPIO_Init+0xa8>)
 800089a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800089e:	4a1b      	ldr	r2, [pc, #108]	@ (800090c <MX_LED_GPIO_Init+0xa8>)
 80008a0:	f043 0302 	orr.w	r3, r3, #2
 80008a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008a8:	4b18      	ldr	r3, [pc, #96]	@ (800090c <MX_LED_GPIO_Init+0xa8>)
 80008aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008ae:	f003 0302 	and.w	r3, r3, #2
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_Pin|LED2_Pin, GPIO_PIN_SET);
 80008b6:	2201      	movs	r2, #1
 80008b8:	2160      	movs	r1, #96	@ 0x60
 80008ba:	4815      	ldr	r0, [pc, #84]	@ (8000910 <MX_LED_GPIO_Init+0xac>)
 80008bc:	f001 fef8 	bl	80026b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 80008c0:	2201      	movs	r2, #1
 80008c2:	2110      	movs	r1, #16
 80008c4:	4813      	ldr	r0, [pc, #76]	@ (8000914 <MX_LED_GPIO_Init+0xb0>)
 80008c6:	f001 fef3 	bl	80026b0 <HAL_GPIO_WritePin>
  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 80008ca:	2360      	movs	r3, #96	@ 0x60
 80008cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ce:	2301      	movs	r3, #1
 80008d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d6:	2300      	movs	r3, #0
 80008d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008da:	f107 030c 	add.w	r3, r7, #12
 80008de:	4619      	mov	r1, r3
 80008e0:	480b      	ldr	r0, [pc, #44]	@ (8000910 <MX_LED_GPIO_Init+0xac>)
 80008e2:	f001 fd1d 	bl	8002320 <HAL_GPIO_Init>
  /*Configure GPIO pin : LED0_Pin */
  GPIO_InitStruct.Pin = LED0_Pin;
 80008e6:	2310      	movs	r3, #16
 80008e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ea:	2301      	movs	r3, #1
 80008ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f2:	2300      	movs	r3, #0
 80008f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 80008f6:	f107 030c 	add.w	r3, r7, #12
 80008fa:	4619      	mov	r1, r3
 80008fc:	4805      	ldr	r0, [pc, #20]	@ (8000914 <MX_LED_GPIO_Init+0xb0>)
 80008fe:	f001 fd0f 	bl	8002320 <HAL_GPIO_Init>
}
 8000902:	bf00      	nop
 8000904:	3720      	adds	r7, #32
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	58024400 	.word	0x58024400
 8000910:	58021000 	.word	0x58021000
 8000914:	58020400 	.word	0x58020400

08000918 <bsp_init>:
#include "bsp_init.h"

void bsp_init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
	MX_LED_GPIO_Init();
 800091c:	f7ff ffa2 	bl	8000864 <MX_LED_GPIO_Init>
	MX_BEEP_GPIO_Init();
 8000920:	f7ff fec4 	bl	80006ac <MX_BEEP_GPIO_Init>
	MX_KEY_GPIO_Init();
 8000924:	f7ff fef6 	bl	8000714 <MX_KEY_GPIO_Init>
	// MX_EXTI_GPIO_Init();
	MX_USART1_UART_Init();
 8000928:	f000 fc50 	bl	80011cc <MX_USART1_UART_Init>
	// MX_IWDG1_Init(); // 溢出时间约1s
	// MX_TIM6_Init(); // 溢出时间约500ms
}
 800092c:	bf00      	nop
 800092e:	bd80      	pop	{r7, pc}

08000930 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
  uint32_t now_cnt = 0;
 8000936:	2300      	movs	r3, #0
 8000938:	607b      	str	r3, [r7, #4]
  uint32_t last_cnt = 0;
 800093a:	2300      	movs	r3, #0
 800093c:	60fb      	str	r3, [r7, #12]
  uint8_t key_value = 0;
 800093e:	2300      	movs	r3, #0
 8000940:	70fb      	strb	r3, [r7, #3]
  uint8_t i = 0;
 8000942:	2300      	movs	r3, #0
 8000944:	72fb      	strb	r3, [r7, #11]
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000946:	f000 f8bb 	bl	8000ac0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800094a:	f000 fd3b 	bl	80013c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800094e:	f000 f83b 	bl	80009c8 <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  bsp_init();
 8000952:	f7ff ffe1 	bl	8000918 <bsp_init>
  printf("GTIM Pluse Test\r\n");
 8000956:	4818      	ldr	r0, [pc, #96]	@ (80009b8 <main+0x88>)
 8000958:	f007 fa5a 	bl	8007e10 <puts>
  MX_TIM2_Init();
 800095c:	f000 fac2 	bl	8000ee4 <MX_TIM2_Init>
  tim2_restart_count(); // 重启计数器
 8000960:	f000 fbe6 	bl	8001130 <tim2_restart_count>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  key_value = key_scan(0);
 8000964:	2000      	movs	r0, #0
 8000966:	f7ff ff0d 	bl	8000784 <key_scan>
 800096a:	4603      	mov	r3, r0
 800096c:	70fb      	strb	r3, [r7, #3]
	  if(key_value == KEY0_PRES)
 800096e:	78fb      	ldrb	r3, [r7, #3]
 8000970:	2b01      	cmp	r3, #1
 8000972:	d104      	bne.n	800097e <main+0x4e>
	  {
		  tim2_restart_count(); // 重启计数器
 8000974:	f000 fbdc 	bl	8001130 <tim2_restart_count>
		  printf("TIM2 Count Restart\r\n");
 8000978:	4810      	ldr	r0, [pc, #64]	@ (80009bc <main+0x8c>)
 800097a:	f007 fa49 	bl	8007e10 <puts>
	  }
	  now_cnt = tim2_get_count();
 800097e:	f000 fbbf 	bl	8001100 <tim2_get_count>
 8000982:	6078      	str	r0, [r7, #4]
	  if(now_cnt != last_cnt)
 8000984:	687a      	ldr	r2, [r7, #4]
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	429a      	cmp	r2, r3
 800098a:	d005      	beq.n	8000998 <main+0x68>
	  {
		  last_cnt = now_cnt;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	60fb      	str	r3, [r7, #12]
		  printf("TIM2 Count: %lu\r\n", now_cnt);
 8000990:	6879      	ldr	r1, [r7, #4]
 8000992:	480b      	ldr	r0, [pc, #44]	@ (80009c0 <main+0x90>)
 8000994:	f007 f9d4 	bl	8007d40 <iprintf>
	  }
	  i++;
 8000998:	7afb      	ldrb	r3, [r7, #11]
 800099a:	3301      	adds	r3, #1
 800099c:	72fb      	strb	r3, [r7, #11]
	  if(i >= 20)
 800099e:	7afb      	ldrb	r3, [r7, #11]
 80009a0:	2b13      	cmp	r3, #19
 80009a2:	d905      	bls.n	80009b0 <main+0x80>
	  {
		  i = 0;
 80009a4:	2300      	movs	r3, #0
 80009a6:	72fb      	strb	r3, [r7, #11]
		  HAL_GPIO_TogglePin(LED_RED_Port, LED_RED_Pin);
 80009a8:	2140      	movs	r1, #64	@ 0x40
 80009aa:	4806      	ldr	r0, [pc, #24]	@ (80009c4 <main+0x94>)
 80009ac:	f001 fe99 	bl	80026e2 <HAL_GPIO_TogglePin>
	  }
	  HAL_Delay(10);
 80009b0:	200a      	movs	r0, #10
 80009b2:	f000 fd99 	bl	80014e8 <HAL_Delay>
	  key_value = key_scan(0);
 80009b6:	e7d5      	b.n	8000964 <main+0x34>
 80009b8:	08008aec 	.word	0x08008aec
 80009bc:	08008b00 	.word	0x08008b00
 80009c0:	08008b14 	.word	0x08008b14
 80009c4:	58021000 	.word	0x58021000

080009c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b09c      	sub	sp, #112	@ 0x70
 80009cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009d2:	224c      	movs	r2, #76	@ 0x4c
 80009d4:	2100      	movs	r1, #0
 80009d6:	4618      	mov	r0, r3
 80009d8:	f007 fafa 	bl	8007fd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009dc:	1d3b      	adds	r3, r7, #4
 80009de:	2220      	movs	r2, #32
 80009e0:	2100      	movs	r1, #0
 80009e2:	4618      	mov	r0, r3
 80009e4:	f007 faf4 	bl	8007fd0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80009e8:	2002      	movs	r0, #2
 80009ea:	f001 feb9 	bl	8002760 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80009ee:	2300      	movs	r3, #0
 80009f0:	603b      	str	r3, [r7, #0]
 80009f2:	4b31      	ldr	r3, [pc, #196]	@ (8000ab8 <SystemClock_Config+0xf0>)
 80009f4:	699b      	ldr	r3, [r3, #24]
 80009f6:	4a30      	ldr	r2, [pc, #192]	@ (8000ab8 <SystemClock_Config+0xf0>)
 80009f8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80009fc:	6193      	str	r3, [r2, #24]
 80009fe:	4b2e      	ldr	r3, [pc, #184]	@ (8000ab8 <SystemClock_Config+0xf0>)
 8000a00:	699b      	ldr	r3, [r3, #24]
 8000a02:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a06:	603b      	str	r3, [r7, #0]
 8000a08:	4b2c      	ldr	r3, [pc, #176]	@ (8000abc <SystemClock_Config+0xf4>)
 8000a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a0c:	4a2b      	ldr	r2, [pc, #172]	@ (8000abc <SystemClock_Config+0xf4>)
 8000a0e:	f043 0301 	orr.w	r3, r3, #1
 8000a12:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000a14:	4b29      	ldr	r3, [pc, #164]	@ (8000abc <SystemClock_Config+0xf4>)
 8000a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a18:	f003 0301 	and.w	r3, r3, #1
 8000a1c:	603b      	str	r3, [r7, #0]
 8000a1e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a20:	bf00      	nop
 8000a22:	4b25      	ldr	r3, [pc, #148]	@ (8000ab8 <SystemClock_Config+0xf0>)
 8000a24:	699b      	ldr	r3, [r3, #24]
 8000a26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a2e:	d1f8      	bne.n	8000a22 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000a30:	2309      	movs	r3, #9
 8000a32:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a34:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a38:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a42:	2302      	movs	r3, #2
 8000a44:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000a46:	2302      	movs	r3, #2
 8000a48:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 8000a4a:	23f0      	movs	r3, #240	@ 0xf0
 8000a4c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a52:	2302      	movs	r3, #2
 8000a54:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a56:	2302      	movs	r3, #2
 8000a58:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000a5a:	2308      	movs	r3, #8
 8000a5c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a62:	2300      	movs	r3, #0
 8000a64:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f001 feb2 	bl	80027d4 <HAL_RCC_OscConfig>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000a76:	f000 f84f 	bl	8000b18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a7a:	233f      	movs	r3, #63	@ 0x3f
 8000a7c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a7e:	2303      	movs	r3, #3
 8000a80:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a82:	2300      	movs	r3, #0
 8000a84:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a86:	2308      	movs	r3, #8
 8000a88:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a8a:	2340      	movs	r3, #64	@ 0x40
 8000a8c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a8e:	2340      	movs	r3, #64	@ 0x40
 8000a90:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a96:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a98:	2340      	movs	r3, #64	@ 0x40
 8000a9a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a9c:	1d3b      	adds	r3, r7, #4
 8000a9e:	2104      	movs	r1, #4
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f002 faf1 	bl	8003088 <HAL_RCC_ClockConfig>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000aac:	f000 f834 	bl	8000b18 <Error_Handler>
  }
}
 8000ab0:	bf00      	nop
 8000ab2:	3770      	adds	r7, #112	@ 0x70
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	58024800 	.word	0x58024800
 8000abc:	58000400 	.word	0x58000400

08000ac0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000ac6:	463b      	mov	r3, r7
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000ad2:	f000 fe49 	bl	8001768 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000ada:	2300      	movs	r3, #0
 8000adc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000ae2:	231f      	movs	r3, #31
 8000ae4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000ae6:	2387      	movs	r3, #135	@ 0x87
 8000ae8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000aee:	2300      	movs	r3, #0
 8000af0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000af2:	2301      	movs	r3, #1
 8000af4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000af6:	2301      	movs	r3, #1
 8000af8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000afa:	2300      	movs	r3, #0
 8000afc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000afe:	2300      	movs	r3, #0
 8000b00:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b02:	463b      	mov	r3, r7
 8000b04:	4618      	mov	r0, r3
 8000b06:	f000 fe67 	bl	80017d8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000b0a:	2004      	movs	r0, #4
 8000b0c:	f000 fe44 	bl	8001798 <HAL_MPU_Enable>

}
 8000b10:	bf00      	nop
 8000b12:	3710      	adds	r7, #16
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b1c:	b672      	cpsid	i
}
 8000b1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b20:	bf00      	nop
 8000b22:	e7fd      	b.n	8000b20 <Error_Handler+0x8>

08000b24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b54 <HAL_MspInit+0x30>)
 8000b2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b30:	4a08      	ldr	r2, [pc, #32]	@ (8000b54 <HAL_MspInit+0x30>)
 8000b32:	f043 0302 	orr.w	r3, r3, #2
 8000b36:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000b3a:	4b06      	ldr	r3, [pc, #24]	@ (8000b54 <HAL_MspInit+0x30>)
 8000b3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b40:	f003 0302 	and.w	r3, r3, #2
 8000b44:	607b      	str	r3, [r7, #4]
 8000b46:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b48:	bf00      	nop
 8000b4a:	370c      	adds	r7, #12
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	58024400 	.word	0x58024400

08000b58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b5c:	bf00      	nop
 8000b5e:	e7fd      	b.n	8000b5c <NMI_Handler+0x4>

08000b60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b64:	bf00      	nop
 8000b66:	e7fd      	b.n	8000b64 <HardFault_Handler+0x4>

08000b68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b6c:	bf00      	nop
 8000b6e:	e7fd      	b.n	8000b6c <MemManage_Handler+0x4>

08000b70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b74:	bf00      	nop
 8000b76:	e7fd      	b.n	8000b74 <BusFault_Handler+0x4>

08000b78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b7c:	bf00      	nop
 8000b7e:	e7fd      	b.n	8000b7c <UsageFault_Handler+0x4>

08000b80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr

08000b8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr

08000baa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bae:	f000 fc7b 	bl	80014a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
	...

08000bb8 <WWDG_IRQHandler>:

/**
  * @brief This function handles Window watchdog interrupt.
  */
void WWDG_IRQHandler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN WWDG_IRQn 0 */

  /* USER CODE END WWDG_IRQn 0 */
  HAL_WWDG_IRQHandler(&hwwdg1);
 8000bbc:	4802      	ldr	r0, [pc, #8]	@ (8000bc8 <WWDG_IRQHandler+0x10>)
 8000bbe:	f006 ffd3 	bl	8007b68 <HAL_WWDG_IRQHandler>
  /* USER CODE BEGIN WWDG_IRQn 1 */
  /* USER CODE END WWDG_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	24000258 	.word	0x24000258

08000bcc <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI_KEY1_Pin);
 8000bd0:	2002      	movs	r0, #2
 8000bd2:	f001 fda0 	bl	8002716 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
	...

08000bdc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000be0:	4802      	ldr	r0, [pc, #8]	@ (8000bec <TIM3_IRQHandler+0x10>)
 8000be2:	f004 fdb1 	bl	8005748 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  /* USER CODE END TIM3_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	240000dc 	.word	0x240000dc

08000bf0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000bf4:	4802      	ldr	r0, [pc, #8]	@ (8000c00 <USART1_IRQHandler+0x10>)
 8000bf6:	f005 fadb 	bl	80061b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	240001c4 	.word	0x240001c4

08000c04 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000c08:	4802      	ldr	r0, [pc, #8]	@ (8000c14 <TIM5_IRQHandler+0x10>)
 8000c0a:	f004 fd9d 	bl	8005748 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	24000128 	.word	0x24000128

08000c18 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c1c:	4802      	ldr	r0, [pc, #8]	@ (8000c28 <TIM6_DAC_IRQHandler+0x10>)
 8000c1e:	f004 fd93 	bl	8005748 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	24000174 	.word	0x24000174

08000c2c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	60f8      	str	r0, [r7, #12]
 8000c34:	60b9      	str	r1, [r7, #8]
 8000c36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c38:	2300      	movs	r3, #0
 8000c3a:	617b      	str	r3, [r7, #20]
 8000c3c:	e00a      	b.n	8000c54 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c3e:	f3af 8000 	nop.w
 8000c42:	4601      	mov	r1, r0
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	1c5a      	adds	r2, r3, #1
 8000c48:	60ba      	str	r2, [r7, #8]
 8000c4a:	b2ca      	uxtb	r2, r1
 8000c4c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	3301      	adds	r3, #1
 8000c52:	617b      	str	r3, [r7, #20]
 8000c54:	697a      	ldr	r2, [r7, #20]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	dbf0      	blt.n	8000c3e <_read+0x12>
  }

  return len;
 8000c5c:	687b      	ldr	r3, [r7, #4]
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3718      	adds	r7, #24
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	b086      	sub	sp, #24
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	60f8      	str	r0, [r7, #12]
 8000c6e:	60b9      	str	r1, [r7, #8]
 8000c70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c72:	2300      	movs	r3, #0
 8000c74:	617b      	str	r3, [r7, #20]
 8000c76:	e009      	b.n	8000c8c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	1c5a      	adds	r2, r3, #1
 8000c7c:	60ba      	str	r2, [r7, #8]
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	4618      	mov	r0, r3
 8000c82:	f000 fb61 	bl	8001348 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	617b      	str	r3, [r7, #20]
 8000c8c:	697a      	ldr	r2, [r7, #20]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	dbf1      	blt.n	8000c78 <_write+0x12>
  }
  return len;
 8000c94:	687b      	ldr	r3, [r7, #4]
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3718      	adds	r7, #24
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <_close>:

int _close(int file)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	b083      	sub	sp, #12
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ca6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	370c      	adds	r7, #12
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr

08000cb6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	b083      	sub	sp, #12
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
 8000cbe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000cc6:	605a      	str	r2, [r3, #4]
  return 0;
 8000cc8:	2300      	movs	r3, #0
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr

08000cd6 <_isatty>:

int _isatty(int file)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	b083      	sub	sp, #12
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cde:	2301      	movs	r3, #1
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr

08000cec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b085      	sub	sp, #20
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	60f8      	str	r0, [r7, #12]
 8000cf4:	60b9      	str	r1, [r7, #8]
 8000cf6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cf8:	2300      	movs	r3, #0
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3714      	adds	r7, #20
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
	...

08000d08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b086      	sub	sp, #24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d10:	4a14      	ldr	r2, [pc, #80]	@ (8000d64 <_sbrk+0x5c>)
 8000d12:	4b15      	ldr	r3, [pc, #84]	@ (8000d68 <_sbrk+0x60>)
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d1c:	4b13      	ldr	r3, [pc, #76]	@ (8000d6c <_sbrk+0x64>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d102      	bne.n	8000d2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d24:	4b11      	ldr	r3, [pc, #68]	@ (8000d6c <_sbrk+0x64>)
 8000d26:	4a12      	ldr	r2, [pc, #72]	@ (8000d70 <_sbrk+0x68>)
 8000d28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d2a:	4b10      	ldr	r3, [pc, #64]	@ (8000d6c <_sbrk+0x64>)
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4413      	add	r3, r2
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	d207      	bcs.n	8000d48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d38:	f007 f998 	bl	800806c <__errno>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	220c      	movs	r2, #12
 8000d40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d42:	f04f 33ff 	mov.w	r3, #4294967295
 8000d46:	e009      	b.n	8000d5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d48:	4b08      	ldr	r3, [pc, #32]	@ (8000d6c <_sbrk+0x64>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d4e:	4b07      	ldr	r3, [pc, #28]	@ (8000d6c <_sbrk+0x64>)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4413      	add	r3, r2
 8000d56:	4a05      	ldr	r2, [pc, #20]	@ (8000d6c <_sbrk+0x64>)
 8000d58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d5a:	68fb      	ldr	r3, [r7, #12]
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3718      	adds	r7, #24
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	24080000 	.word	0x24080000
 8000d68:	00000400 	.word	0x00000400
 8000d6c:	2400008c 	.word	0x2400008c
 8000d70:	240003c0 	.word	0x240003c0

08000d74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d78:	4b43      	ldr	r3, [pc, #268]	@ (8000e88 <SystemInit+0x114>)
 8000d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d7e:	4a42      	ldr	r2, [pc, #264]	@ (8000e88 <SystemInit+0x114>)
 8000d80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d88:	4b40      	ldr	r3, [pc, #256]	@ (8000e8c <SystemInit+0x118>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f003 030f 	and.w	r3, r3, #15
 8000d90:	2b06      	cmp	r3, #6
 8000d92:	d807      	bhi.n	8000da4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d94:	4b3d      	ldr	r3, [pc, #244]	@ (8000e8c <SystemInit+0x118>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f023 030f 	bic.w	r3, r3, #15
 8000d9c:	4a3b      	ldr	r2, [pc, #236]	@ (8000e8c <SystemInit+0x118>)
 8000d9e:	f043 0307 	orr.w	r3, r3, #7
 8000da2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000da4:	4b3a      	ldr	r3, [pc, #232]	@ (8000e90 <SystemInit+0x11c>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a39      	ldr	r2, [pc, #228]	@ (8000e90 <SystemInit+0x11c>)
 8000daa:	f043 0301 	orr.w	r3, r3, #1
 8000dae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000db0:	4b37      	ldr	r3, [pc, #220]	@ (8000e90 <SystemInit+0x11c>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000db6:	4b36      	ldr	r3, [pc, #216]	@ (8000e90 <SystemInit+0x11c>)
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	4935      	ldr	r1, [pc, #212]	@ (8000e90 <SystemInit+0x11c>)
 8000dbc:	4b35      	ldr	r3, [pc, #212]	@ (8000e94 <SystemInit+0x120>)
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000dc2:	4b32      	ldr	r3, [pc, #200]	@ (8000e8c <SystemInit+0x118>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f003 0308 	and.w	r3, r3, #8
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d007      	beq.n	8000dde <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000dce:	4b2f      	ldr	r3, [pc, #188]	@ (8000e8c <SystemInit+0x118>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f023 030f 	bic.w	r3, r3, #15
 8000dd6:	4a2d      	ldr	r2, [pc, #180]	@ (8000e8c <SystemInit+0x118>)
 8000dd8:	f043 0307 	orr.w	r3, r3, #7
 8000ddc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000dde:	4b2c      	ldr	r3, [pc, #176]	@ (8000e90 <SystemInit+0x11c>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000de4:	4b2a      	ldr	r3, [pc, #168]	@ (8000e90 <SystemInit+0x11c>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000dea:	4b29      	ldr	r3, [pc, #164]	@ (8000e90 <SystemInit+0x11c>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000df0:	4b27      	ldr	r3, [pc, #156]	@ (8000e90 <SystemInit+0x11c>)
 8000df2:	4a29      	ldr	r2, [pc, #164]	@ (8000e98 <SystemInit+0x124>)
 8000df4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000df6:	4b26      	ldr	r3, [pc, #152]	@ (8000e90 <SystemInit+0x11c>)
 8000df8:	4a28      	ldr	r2, [pc, #160]	@ (8000e9c <SystemInit+0x128>)
 8000dfa:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000dfc:	4b24      	ldr	r3, [pc, #144]	@ (8000e90 <SystemInit+0x11c>)
 8000dfe:	4a28      	ldr	r2, [pc, #160]	@ (8000ea0 <SystemInit+0x12c>)
 8000e00:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000e02:	4b23      	ldr	r3, [pc, #140]	@ (8000e90 <SystemInit+0x11c>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000e08:	4b21      	ldr	r3, [pc, #132]	@ (8000e90 <SystemInit+0x11c>)
 8000e0a:	4a25      	ldr	r2, [pc, #148]	@ (8000ea0 <SystemInit+0x12c>)
 8000e0c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000e0e:	4b20      	ldr	r3, [pc, #128]	@ (8000e90 <SystemInit+0x11c>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000e14:	4b1e      	ldr	r3, [pc, #120]	@ (8000e90 <SystemInit+0x11c>)
 8000e16:	4a22      	ldr	r2, [pc, #136]	@ (8000ea0 <SystemInit+0x12c>)
 8000e18:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000e1a:	4b1d      	ldr	r3, [pc, #116]	@ (8000e90 <SystemInit+0x11c>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e20:	4b1b      	ldr	r3, [pc, #108]	@ (8000e90 <SystemInit+0x11c>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a1a      	ldr	r2, [pc, #104]	@ (8000e90 <SystemInit+0x11c>)
 8000e26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e2a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000e2c:	4b18      	ldr	r3, [pc, #96]	@ (8000e90 <SystemInit+0x11c>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000e32:	4b1c      	ldr	r3, [pc, #112]	@ (8000ea4 <SystemInit+0x130>)
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	4b1c      	ldr	r3, [pc, #112]	@ (8000ea8 <SystemInit+0x134>)
 8000e38:	4013      	ands	r3, r2
 8000e3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000e3e:	d202      	bcs.n	8000e46 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000e40:	4b1a      	ldr	r3, [pc, #104]	@ (8000eac <SystemInit+0x138>)
 8000e42:	2201      	movs	r2, #1
 8000e44:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000e46:	4b12      	ldr	r3, [pc, #72]	@ (8000e90 <SystemInit+0x11c>)
 8000e48:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000e4c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d113      	bne.n	8000e7c <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000e54:	4b0e      	ldr	r3, [pc, #56]	@ (8000e90 <SystemInit+0x11c>)
 8000e56:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000e5a:	4a0d      	ldr	r2, [pc, #52]	@ (8000e90 <SystemInit+0x11c>)
 8000e5c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e60:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000e64:	4b12      	ldr	r3, [pc, #72]	@ (8000eb0 <SystemInit+0x13c>)
 8000e66:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000e6a:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000e6c:	4b08      	ldr	r3, [pc, #32]	@ (8000e90 <SystemInit+0x11c>)
 8000e6e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000e72:	4a07      	ldr	r2, [pc, #28]	@ (8000e90 <SystemInit+0x11c>)
 8000e74:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000e78:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	e000ed00 	.word	0xe000ed00
 8000e8c:	52002000 	.word	0x52002000
 8000e90:	58024400 	.word	0x58024400
 8000e94:	eaf6ed7f 	.word	0xeaf6ed7f
 8000e98:	02020200 	.word	0x02020200
 8000e9c:	01ff0000 	.word	0x01ff0000
 8000ea0:	01010280 	.word	0x01010280
 8000ea4:	5c001000 	.word	0x5c001000
 8000ea8:	ffff0000 	.word	0xffff0000
 8000eac:	51008108 	.word	0x51008108
 8000eb0:	52004000 	.word	0x52004000

08000eb4 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000eb8:	4b09      	ldr	r3, [pc, #36]	@ (8000ee0 <ExitRun0Mode+0x2c>)
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	4a08      	ldr	r2, [pc, #32]	@ (8000ee0 <ExitRun0Mode+0x2c>)
 8000ebe:	f043 0302 	orr.w	r3, r3, #2
 8000ec2:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000ec4:	bf00      	nop
 8000ec6:	4b06      	ldr	r3, [pc, #24]	@ (8000ee0 <ExitRun0Mode+0x2c>)
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d0f9      	beq.n	8000ec6 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000ed2:	bf00      	nop
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	58024800 	.word	0x58024800

08000ee4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b088      	sub	sp, #32
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000eea:	f107 030c 	add.w	r3, r7, #12
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	605a      	str	r2, [r3, #4]
 8000ef4:	609a      	str	r2, [r3, #8]
 8000ef6:	60da      	str	r2, [r3, #12]
 8000ef8:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000efa:	463b      	mov	r3, r7
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f04:	4b27      	ldr	r3, [pc, #156]	@ (8000fa4 <MX_TIM2_Init+0xc0>)
 8000f06:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f0a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000f0c:	4b25      	ldr	r3, [pc, #148]	@ (8000fa4 <MX_TIM2_Init+0xc0>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f12:	4b24      	ldr	r3, [pc, #144]	@ (8000fa4 <MX_TIM2_Init+0xc0>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000f18:	4b22      	ldr	r3, [pc, #136]	@ (8000fa4 <MX_TIM2_Init+0xc0>)
 8000f1a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f1e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f20:	4b20      	ldr	r3, [pc, #128]	@ (8000fa4 <MX_TIM2_Init+0xc0>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f26:	4b1f      	ldr	r3, [pc, #124]	@ (8000fa4 <MX_TIM2_Init+0xc0>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f2c:	481d      	ldr	r0, [pc, #116]	@ (8000fa4 <MX_TIM2_Init+0xc0>)
 8000f2e:	f004 fa63 	bl	80053f8 <HAL_TIM_Base_Init>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000f38:	f7ff fdee 	bl	8000b18 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000f3c:	2307      	movs	r3, #7
 8000f3e:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000f40:	2350      	movs	r3, #80	@ 0x50
 8000f42:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8000f44:	2300      	movs	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	61bb      	str	r3, [r7, #24]
  sSlaveConfig.TriggerFilter = 4;
 8000f4c:	2304      	movs	r3, #4
 8000f4e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000f50:	f107 030c 	add.w	r3, r7, #12
 8000f54:	4619      	mov	r1, r3
 8000f56:	4813      	ldr	r0, [pc, #76]	@ (8000fa4 <MX_TIM2_Init+0xc0>)
 8000f58:	f004 fcfd 	bl	8005956 <HAL_TIM_SlaveConfigSynchro>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000f62:	f7ff fdd9 	bl	8000b18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f66:	2300      	movs	r3, #0
 8000f68:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f6e:	463b      	mov	r3, r7
 8000f70:	4619      	mov	r1, r3
 8000f72:	480c      	ldr	r0, [pc, #48]	@ (8000fa4 <MX_TIM2_Init+0xc0>)
 8000f74:	f004 ff92 	bl	8005e9c <HAL_TIMEx_MasterConfigSynchronization>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000f7e:	f7ff fdcb 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  __HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE); // 使能更新中断
 8000f82:	4b08      	ldr	r3, [pc, #32]	@ (8000fa4 <MX_TIM2_Init+0xc0>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	68da      	ldr	r2, [r3, #12]
 8000f88:	4b06      	ldr	r3, [pc, #24]	@ (8000fa4 <MX_TIM2_Init+0xc0>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f042 0201 	orr.w	r2, r2, #1
 8000f90:	60da      	str	r2, [r3, #12]
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1); // 启动输入捕获及其中断
 8000f92:	2100      	movs	r1, #0
 8000f94:	4803      	ldr	r0, [pc, #12]	@ (8000fa4 <MX_TIM2_Init+0xc0>)
 8000f96:	f004 fa87 	bl	80054a8 <HAL_TIM_IC_Start_IT>
  /* USER CODE END TIM2_Init 2 */
}
 8000f9a:	bf00      	nop
 8000f9c:	3720      	adds	r7, #32
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	24000090 	.word	0x24000090

08000fa8 <HAL_TIM_Base_MspInit>:
  /* USER CODE END TIM6_Init 2 */

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08c      	sub	sp, #48	@ 0x30
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb0:	f107 031c 	add.w	r3, r7, #28
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
 8000fbe:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000fc8:	d136      	bne.n	8001038 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fca:	4b48      	ldr	r3, [pc, #288]	@ (80010ec <HAL_TIM_Base_MspInit+0x144>)
 8000fcc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000fd0:	4a46      	ldr	r2, [pc, #280]	@ (80010ec <HAL_TIM_Base_MspInit+0x144>)
 8000fd2:	f043 0301 	orr.w	r3, r3, #1
 8000fd6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000fda:	4b44      	ldr	r3, [pc, #272]	@ (80010ec <HAL_TIM_Base_MspInit+0x144>)
 8000fdc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000fe0:	f003 0301 	and.w	r3, r3, #1
 8000fe4:	61bb      	str	r3, [r7, #24]
 8000fe6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe8:	4b40      	ldr	r3, [pc, #256]	@ (80010ec <HAL_TIM_Base_MspInit+0x144>)
 8000fea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fee:	4a3f      	ldr	r2, [pc, #252]	@ (80010ec <HAL_TIM_Base_MspInit+0x144>)
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ff8:	4b3c      	ldr	r3, [pc, #240]	@ (80010ec <HAL_TIM_Base_MspInit+0x144>)
 8000ffa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ffe:	f003 0301 	and.w	r3, r3, #1
 8001002:	617b      	str	r3, [r7, #20]
 8001004:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TIM2_KEY_Pin;
 8001006:	2301      	movs	r3, #1
 8001008:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100a:	2302      	movs	r3, #2
 800100c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800100e:	2302      	movs	r3, #2
 8001010:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001012:	2302      	movs	r3, #2
 8001014:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001016:	2301      	movs	r3, #1
 8001018:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(TIM2_KEY_GPIO_Port, &GPIO_InitStruct);
 800101a:	f107 031c 	add.w	r3, r7, #28
 800101e:	4619      	mov	r1, r3
 8001020:	4833      	ldr	r0, [pc, #204]	@ (80010f0 <HAL_TIM_Base_MspInit+0x148>)
 8001022:	f001 f97d 	bl	8002320 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 2);
 8001026:	2202      	movs	r2, #2
 8001028:	2102      	movs	r1, #2
 800102a:	201c      	movs	r0, #28
 800102c:	f000 fb67 	bl	80016fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001030:	201c      	movs	r0, #28
 8001032:	f000 fb7e 	bl	8001732 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */
  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001036:	e055      	b.n	80010e4 <HAL_TIM_Base_MspInit+0x13c>
  else if(tim_baseHandle->Instance==TIM3)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a2d      	ldr	r2, [pc, #180]	@ (80010f4 <HAL_TIM_Base_MspInit+0x14c>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d117      	bne.n	8001072 <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001042:	4b2a      	ldr	r3, [pc, #168]	@ (80010ec <HAL_TIM_Base_MspInit+0x144>)
 8001044:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001048:	4a28      	ldr	r2, [pc, #160]	@ (80010ec <HAL_TIM_Base_MspInit+0x144>)
 800104a:	f043 0302 	orr.w	r3, r3, #2
 800104e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001052:	4b26      	ldr	r3, [pc, #152]	@ (80010ec <HAL_TIM_Base_MspInit+0x144>)
 8001054:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001058:	f003 0302 	and.w	r3, r3, #2
 800105c:	613b      	str	r3, [r7, #16]
 800105e:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001060:	2200      	movs	r2, #0
 8001062:	2100      	movs	r1, #0
 8001064:	201d      	movs	r0, #29
 8001066:	f000 fb4a 	bl	80016fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800106a:	201d      	movs	r0, #29
 800106c:	f000 fb61 	bl	8001732 <HAL_NVIC_EnableIRQ>
}
 8001070:	e038      	b.n	80010e4 <HAL_TIM_Base_MspInit+0x13c>
  else if(tim_baseHandle->Instance==TIM5)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a20      	ldr	r2, [pc, #128]	@ (80010f8 <HAL_TIM_Base_MspInit+0x150>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d117      	bne.n	80010ac <HAL_TIM_Base_MspInit+0x104>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800107c:	4b1b      	ldr	r3, [pc, #108]	@ (80010ec <HAL_TIM_Base_MspInit+0x144>)
 800107e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001082:	4a1a      	ldr	r2, [pc, #104]	@ (80010ec <HAL_TIM_Base_MspInit+0x144>)
 8001084:	f043 0308 	orr.w	r3, r3, #8
 8001088:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800108c:	4b17      	ldr	r3, [pc, #92]	@ (80010ec <HAL_TIM_Base_MspInit+0x144>)
 800108e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001092:	f003 0308 	and.w	r3, r3, #8
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800109a:	2200      	movs	r2, #0
 800109c:	2100      	movs	r1, #0
 800109e:	2032      	movs	r0, #50	@ 0x32
 80010a0:	f000 fb2d 	bl	80016fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80010a4:	2032      	movs	r0, #50	@ 0x32
 80010a6:	f000 fb44 	bl	8001732 <HAL_NVIC_EnableIRQ>
}
 80010aa:	e01b      	b.n	80010e4 <HAL_TIM_Base_MspInit+0x13c>
  else if(tim_baseHandle->Instance==TIM6)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a12      	ldr	r2, [pc, #72]	@ (80010fc <HAL_TIM_Base_MspInit+0x154>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d116      	bne.n	80010e4 <HAL_TIM_Base_MspInit+0x13c>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80010b6:	4b0d      	ldr	r3, [pc, #52]	@ (80010ec <HAL_TIM_Base_MspInit+0x144>)
 80010b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010bc:	4a0b      	ldr	r2, [pc, #44]	@ (80010ec <HAL_TIM_Base_MspInit+0x144>)
 80010be:	f043 0310 	orr.w	r3, r3, #16
 80010c2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80010c6:	4b09      	ldr	r3, [pc, #36]	@ (80010ec <HAL_TIM_Base_MspInit+0x144>)
 80010c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010cc:	f003 0310 	and.w	r3, r3, #16
 80010d0:	60bb      	str	r3, [r7, #8]
 80010d2:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80010d4:	2200      	movs	r2, #0
 80010d6:	2101      	movs	r1, #1
 80010d8:	2036      	movs	r0, #54	@ 0x36
 80010da:	f000 fb10 	bl	80016fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80010de:	2036      	movs	r0, #54	@ 0x36
 80010e0:	f000 fb27 	bl	8001732 <HAL_NVIC_EnableIRQ>
}
 80010e4:	bf00      	nop
 80010e6:	3730      	adds	r7, #48	@ 0x30
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	58024400 	.word	0x58024400
 80010f0:	58020000 	.word	0x58020000
 80010f4:	40000400 	.word	0x40000400
 80010f8:	40000c00 	.word	0x40000c00
 80010fc:	40001000 	.word	0x40001000

08001100 <tim2_get_count>:
// 记录TIM2溢出次数，求总脉冲个数
uint32_t tim2_overflow_count = 0;

// 获取当前计数值
uint32_t tim2_get_count(void)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
	uint32_t count = 0;
 8001106:	2300      	movs	r3, #0
 8001108:	607b      	str	r3, [r7, #4]
	count = tim2_overflow_count * 65536 + __HAL_TIM_GET_COUNTER(&htim2);
 800110a:	4b07      	ldr	r3, [pc, #28]	@ (8001128 <tim2_get_count+0x28>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	041a      	lsls	r2, r3, #16
 8001110:	4b06      	ldr	r3, [pc, #24]	@ (800112c <tim2_get_count+0x2c>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001116:	4413      	add	r3, r2
 8001118:	607b      	str	r3, [r7, #4]
	return count;
 800111a:	687b      	ldr	r3, [r7, #4]
}
 800111c:	4618      	mov	r0, r3
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	240001c0 	.word	0x240001c0
 800112c:	24000090 	.word	0x24000090

08001130 <tim2_restart_count>:

// 重启计数器
void tim2_restart_count(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
	__HAL_TIM_DISABLE(&htim2);
 8001134:	4b15      	ldr	r3, [pc, #84]	@ (800118c <tim2_restart_count+0x5c>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	6a1a      	ldr	r2, [r3, #32]
 800113a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800113e:	4013      	ands	r3, r2
 8001140:	2b00      	cmp	r3, #0
 8001142:	d10f      	bne.n	8001164 <tim2_restart_count+0x34>
 8001144:	4b11      	ldr	r3, [pc, #68]	@ (800118c <tim2_restart_count+0x5c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	6a1a      	ldr	r2, [r3, #32]
 800114a:	f240 4344 	movw	r3, #1092	@ 0x444
 800114e:	4013      	ands	r3, r2
 8001150:	2b00      	cmp	r3, #0
 8001152:	d107      	bne.n	8001164 <tim2_restart_count+0x34>
 8001154:	4b0d      	ldr	r3, [pc, #52]	@ (800118c <tim2_restart_count+0x5c>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	4b0c      	ldr	r3, [pc, #48]	@ (800118c <tim2_restart_count+0x5c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f022 0201 	bic.w	r2, r2, #1
 8001162:	601a      	str	r2, [r3, #0]
	tim2_overflow_count = 0;
 8001164:	4b0a      	ldr	r3, [pc, #40]	@ (8001190 <tim2_restart_count+0x60>)
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 800116a:	4b08      	ldr	r3, [pc, #32]	@ (800118c <tim2_restart_count+0x5c>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	2200      	movs	r2, #0
 8001170:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(&htim2);
 8001172:	4b06      	ldr	r3, [pc, #24]	@ (800118c <tim2_restart_count+0x5c>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	4b04      	ldr	r3, [pc, #16]	@ (800118c <tim2_restart_count+0x5c>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f042 0201 	orr.w	r2, r2, #1
 8001180:	601a      	str	r2, [r3, #0]
}
 8001182:	bf00      	nop
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	24000090 	.word	0x24000090
 8001190:	240001c0 	.word	0x240001c0

08001194 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  if(__HAL_TIM_GET_FLAG(&htim2, TIM_FLAG_UPDATE) != RESET) // 检查更新中断标志
 8001198:	4b0a      	ldr	r3, [pc, #40]	@ (80011c4 <TIM2_IRQHandler+0x30>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	691b      	ldr	r3, [r3, #16]
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d104      	bne.n	80011b0 <TIM2_IRQHandler+0x1c>
  {
	tim2_overflow_count++; // 增加溢出计数
 80011a6:	4b08      	ldr	r3, [pc, #32]	@ (80011c8 <TIM2_IRQHandler+0x34>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	3301      	adds	r3, #1
 80011ac:	4a06      	ldr	r2, [pc, #24]	@ (80011c8 <TIM2_IRQHandler+0x34>)
 80011ae:	6013      	str	r3, [r2, #0]
  }
  __HAL_TIM_CLEAR_FLAG(&htim2, TIM_FLAG_UPDATE); // 清除中断标志
 80011b0:	4b04      	ldr	r3, [pc, #16]	@ (80011c4 <TIM2_IRQHandler+0x30>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f06f 0201 	mvn.w	r2, #1
 80011b8:	611a      	str	r2, [r3, #16]
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011ba:	4802      	ldr	r0, [pc, #8]	@ (80011c4 <TIM2_IRQHandler+0x30>)
 80011bc:	f004 fac4 	bl	8005748 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	24000090 	.word	0x24000090
 80011c8:	240001c0 	.word	0x240001c0

080011cc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011d0:	4b22      	ldr	r3, [pc, #136]	@ (800125c <MX_USART1_UART_Init+0x90>)
 80011d2:	4a23      	ldr	r2, [pc, #140]	@ (8001260 <MX_USART1_UART_Init+0x94>)
 80011d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011d6:	4b21      	ldr	r3, [pc, #132]	@ (800125c <MX_USART1_UART_Init+0x90>)
 80011d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011de:	4b1f      	ldr	r3, [pc, #124]	@ (800125c <MX_USART1_UART_Init+0x90>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011e4:	4b1d      	ldr	r3, [pc, #116]	@ (800125c <MX_USART1_UART_Init+0x90>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011ea:	4b1c      	ldr	r3, [pc, #112]	@ (800125c <MX_USART1_UART_Init+0x90>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011f0:	4b1a      	ldr	r3, [pc, #104]	@ (800125c <MX_USART1_UART_Init+0x90>)
 80011f2:	220c      	movs	r2, #12
 80011f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011f6:	4b19      	ldr	r3, [pc, #100]	@ (800125c <MX_USART1_UART_Init+0x90>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011fc:	4b17      	ldr	r3, [pc, #92]	@ (800125c <MX_USART1_UART_Init+0x90>)
 80011fe:	2200      	movs	r2, #0
 8001200:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001202:	4b16      	ldr	r3, [pc, #88]	@ (800125c <MX_USART1_UART_Init+0x90>)
 8001204:	2200      	movs	r2, #0
 8001206:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001208:	4b14      	ldr	r3, [pc, #80]	@ (800125c <MX_USART1_UART_Init+0x90>)
 800120a:	2200      	movs	r2, #0
 800120c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800120e:	4b13      	ldr	r3, [pc, #76]	@ (800125c <MX_USART1_UART_Init+0x90>)
 8001210:	2200      	movs	r2, #0
 8001212:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001214:	4811      	ldr	r0, [pc, #68]	@ (800125c <MX_USART1_UART_Init+0x90>)
 8001216:	f004 feed 	bl	8005ff4 <HAL_UART_Init>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001220:	f7ff fc7a 	bl	8000b18 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001224:	2100      	movs	r1, #0
 8001226:	480d      	ldr	r0, [pc, #52]	@ (800125c <MX_USART1_UART_Init+0x90>)
 8001228:	f006 fbd4 	bl	80079d4 <HAL_UARTEx_SetTxFifoThreshold>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001232:	f7ff fc71 	bl	8000b18 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001236:	2100      	movs	r1, #0
 8001238:	4808      	ldr	r0, [pc, #32]	@ (800125c <MX_USART1_UART_Init+0x90>)
 800123a:	f006 fc09 	bl	8007a50 <HAL_UARTEx_SetRxFifoThreshold>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001244:	f7ff fc68 	bl	8000b18 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001248:	4804      	ldr	r0, [pc, #16]	@ (800125c <MX_USART1_UART_Init+0x90>)
 800124a:	f006 fb8a 	bl	8007962 <HAL_UARTEx_DisableFifoMode>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001254:	f7ff fc60 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001258:	bf00      	nop
 800125a:	bd80      	pop	{r7, pc}
 800125c:	240001c4 	.word	0x240001c4
 8001260:	40011000 	.word	0x40011000

08001264 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b0ba      	sub	sp, #232	@ 0xe8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
 800127a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800127c:	f107 0310 	add.w	r3, r7, #16
 8001280:	22c0      	movs	r2, #192	@ 0xc0
 8001282:	2100      	movs	r1, #0
 8001284:	4618      	mov	r0, r3
 8001286:	f006 fea3 	bl	8007fd0 <memset>
  if(uartHandle->Instance==USART1)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a2b      	ldr	r2, [pc, #172]	@ (800133c <HAL_UART_MspInit+0xd8>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d14e      	bne.n	8001332 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001294:	f04f 0201 	mov.w	r2, #1
 8001298:	f04f 0300 	mov.w	r3, #0
 800129c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80012a0:	2300      	movs	r3, #0
 80012a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012a6:	f107 0310 	add.w	r3, r7, #16
 80012aa:	4618      	mov	r0, r3
 80012ac:	f002 fa78 	bl	80037a0 <HAL_RCCEx_PeriphCLKConfig>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80012b6:	f7ff fc2f 	bl	8000b18 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012ba:	4b21      	ldr	r3, [pc, #132]	@ (8001340 <HAL_UART_MspInit+0xdc>)
 80012bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80012c0:	4a1f      	ldr	r2, [pc, #124]	@ (8001340 <HAL_UART_MspInit+0xdc>)
 80012c2:	f043 0310 	orr.w	r3, r3, #16
 80012c6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80012ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001340 <HAL_UART_MspInit+0xdc>)
 80012cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80012d0:	f003 0310 	and.w	r3, r3, #16
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d8:	4b19      	ldr	r3, [pc, #100]	@ (8001340 <HAL_UART_MspInit+0xdc>)
 80012da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012de:	4a18      	ldr	r2, [pc, #96]	@ (8001340 <HAL_UART_MspInit+0xdc>)
 80012e0:	f043 0301 	orr.w	r3, r3, #1
 80012e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012e8:	4b15      	ldr	r3, [pc, #84]	@ (8001340 <HAL_UART_MspInit+0xdc>)
 80012ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	60bb      	str	r3, [r7, #8]
 80012f4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80012f6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80012fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fe:	2302      	movs	r3, #2
 8001300:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001304:	2301      	movs	r3, #1
 8001306:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800130a:	2302      	movs	r3, #2
 800130c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001310:	2307      	movs	r3, #7
 8001312:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001316:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800131a:	4619      	mov	r1, r3
 800131c:	4809      	ldr	r0, [pc, #36]	@ (8001344 <HAL_UART_MspInit+0xe0>)
 800131e:	f000 ffff 	bl	8002320 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001322:	2200      	movs	r2, #0
 8001324:	2100      	movs	r1, #0
 8001326:	2025      	movs	r0, #37	@ 0x25
 8001328:	f000 f9e9 	bl	80016fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800132c:	2025      	movs	r0, #37	@ 0x25
 800132e:	f000 fa00 	bl	8001732 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001332:	bf00      	nop
 8001334:	37e8      	adds	r7, #232	@ 0xe8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40011000 	.word	0x40011000
 8001340:	58024400 	.word	0x58024400
 8001344:	58020000 	.word	0x58020000

08001348 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

/* printf重定向 */
PUTCHAR_PROTOTYPE
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001350:	1d39      	adds	r1, r7, #4
 8001352:	f04f 33ff 	mov.w	r3, #4294967295
 8001356:	2201      	movs	r2, #1
 8001358:	4803      	ldr	r0, [pc, #12]	@ (8001368 <__io_putchar+0x20>)
 800135a:	f004 fe9b 	bl	8006094 <HAL_UART_Transmit>
    return ch;
 800135e:	687b      	ldr	r3, [r7, #4]
}
 8001360:	4618      	mov	r0, r3
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	240001c4 	.word	0x240001c4

0800136c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800136c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80013a8 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001370:	f7ff fda0 	bl	8000eb4 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001374:	f7ff fcfe 	bl	8000d74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001378:	480c      	ldr	r0, [pc, #48]	@ (80013ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800137a:	490d      	ldr	r1, [pc, #52]	@ (80013b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800137c:	4a0d      	ldr	r2, [pc, #52]	@ (80013b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800137e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001380:	e002      	b.n	8001388 <LoopCopyDataInit>

08001382 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001382:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001384:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001386:	3304      	adds	r3, #4

08001388 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001388:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800138a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800138c:	d3f9      	bcc.n	8001382 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800138e:	4a0a      	ldr	r2, [pc, #40]	@ (80013b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001390:	4c0a      	ldr	r4, [pc, #40]	@ (80013bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001392:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001394:	e001      	b.n	800139a <LoopFillZerobss>

08001396 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001396:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001398:	3204      	adds	r2, #4

0800139a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800139a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800139c:	d3fb      	bcc.n	8001396 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800139e:	f006 fe6b 	bl	8008078 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013a2:	f7ff fac5 	bl	8000930 <main>
  bx  lr
 80013a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013a8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80013ac:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80013b0:	24000070 	.word	0x24000070
  ldr r2, =_sidata
 80013b4:	08008ba4 	.word	0x08008ba4
  ldr r2, =_sbss
 80013b8:	24000070 	.word	0x24000070
  ldr r4, =_ebss
 80013bc:	240003bc 	.word	0x240003bc

080013c0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013c0:	e7fe      	b.n	80013c0 <ADC3_IRQHandler>
	...

080013c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013ca:	2003      	movs	r0, #3
 80013cc:	f000 f98c 	bl	80016e8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80013d0:	f002 f810 	bl	80033f4 <HAL_RCC_GetSysClockFreq>
 80013d4:	4602      	mov	r2, r0
 80013d6:	4b15      	ldr	r3, [pc, #84]	@ (800142c <HAL_Init+0x68>)
 80013d8:	699b      	ldr	r3, [r3, #24]
 80013da:	0a1b      	lsrs	r3, r3, #8
 80013dc:	f003 030f 	and.w	r3, r3, #15
 80013e0:	4913      	ldr	r1, [pc, #76]	@ (8001430 <HAL_Init+0x6c>)
 80013e2:	5ccb      	ldrb	r3, [r1, r3]
 80013e4:	f003 031f 	and.w	r3, r3, #31
 80013e8:	fa22 f303 	lsr.w	r3, r2, r3
 80013ec:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80013ee:	4b0f      	ldr	r3, [pc, #60]	@ (800142c <HAL_Init+0x68>)
 80013f0:	699b      	ldr	r3, [r3, #24]
 80013f2:	f003 030f 	and.w	r3, r3, #15
 80013f6:	4a0e      	ldr	r2, [pc, #56]	@ (8001430 <HAL_Init+0x6c>)
 80013f8:	5cd3      	ldrb	r3, [r2, r3]
 80013fa:	f003 031f 	and.w	r3, r3, #31
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	fa22 f303 	lsr.w	r3, r2, r3
 8001404:	4a0b      	ldr	r2, [pc, #44]	@ (8001434 <HAL_Init+0x70>)
 8001406:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001408:	4a0b      	ldr	r2, [pc, #44]	@ (8001438 <HAL_Init+0x74>)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800140e:	200f      	movs	r0, #15
 8001410:	f000 f814 	bl	800143c <HAL_InitTick>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e002      	b.n	8001424 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800141e:	f7ff fb81 	bl	8000b24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001422:	2300      	movs	r3, #0
}
 8001424:	4618      	mov	r0, r3
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	58024400 	.word	0x58024400
 8001430:	08008b28 	.word	0x08008b28
 8001434:	24000008 	.word	0x24000008
 8001438:	24000004 	.word	0x24000004

0800143c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001444:	4b15      	ldr	r3, [pc, #84]	@ (800149c <HAL_InitTick+0x60>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d101      	bne.n	8001450 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e021      	b.n	8001494 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001450:	4b13      	ldr	r3, [pc, #76]	@ (80014a0 <HAL_InitTick+0x64>)
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	4b11      	ldr	r3, [pc, #68]	@ (800149c <HAL_InitTick+0x60>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	4619      	mov	r1, r3
 800145a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800145e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001462:	fbb2 f3f3 	udiv	r3, r2, r3
 8001466:	4618      	mov	r0, r3
 8001468:	f000 f971 	bl	800174e <HAL_SYSTICK_Config>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e00e      	b.n	8001494 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2b0f      	cmp	r3, #15
 800147a:	d80a      	bhi.n	8001492 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800147c:	2200      	movs	r2, #0
 800147e:	6879      	ldr	r1, [r7, #4]
 8001480:	f04f 30ff 	mov.w	r0, #4294967295
 8001484:	f000 f93b 	bl	80016fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001488:	4a06      	ldr	r2, [pc, #24]	@ (80014a4 <HAL_InitTick+0x68>)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800148e:	2300      	movs	r3, #0
 8001490:	e000      	b.n	8001494 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
}
 8001494:	4618      	mov	r0, r3
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	24000010 	.word	0x24000010
 80014a0:	24000004 	.word	0x24000004
 80014a4:	2400000c 	.word	0x2400000c

080014a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014ac:	4b06      	ldr	r3, [pc, #24]	@ (80014c8 <HAL_IncTick+0x20>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	461a      	mov	r2, r3
 80014b2:	4b06      	ldr	r3, [pc, #24]	@ (80014cc <HAL_IncTick+0x24>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4413      	add	r3, r2
 80014b8:	4a04      	ldr	r2, [pc, #16]	@ (80014cc <HAL_IncTick+0x24>)
 80014ba:	6013      	str	r3, [r2, #0]
}
 80014bc:	bf00      	nop
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	24000010 	.word	0x24000010
 80014cc:	2400026c 	.word	0x2400026c

080014d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  return uwTick;
 80014d4:	4b03      	ldr	r3, [pc, #12]	@ (80014e4 <HAL_GetTick+0x14>)
 80014d6:	681b      	ldr	r3, [r3, #0]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	2400026c 	.word	0x2400026c

080014e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014f0:	f7ff ffee 	bl	80014d0 <HAL_GetTick>
 80014f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001500:	d005      	beq.n	800150e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001502:	4b0a      	ldr	r3, [pc, #40]	@ (800152c <HAL_Delay+0x44>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	461a      	mov	r2, r3
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	4413      	add	r3, r2
 800150c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800150e:	bf00      	nop
 8001510:	f7ff ffde 	bl	80014d0 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	68fa      	ldr	r2, [r7, #12]
 800151c:	429a      	cmp	r2, r3
 800151e:	d8f7      	bhi.n	8001510 <HAL_Delay+0x28>
  {
  }
}
 8001520:	bf00      	nop
 8001522:	bf00      	nop
 8001524:	3710      	adds	r7, #16
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	24000010 	.word	0x24000010

08001530 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001534:	4b03      	ldr	r3, [pc, #12]	@ (8001544 <HAL_GetREVID+0x14>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	0c1b      	lsrs	r3, r3, #16
}
 800153a:	4618      	mov	r0, r3
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	5c001000 	.word	0x5c001000

08001548 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001548:	b480      	push	{r7}
 800154a:	b085      	sub	sp, #20
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f003 0307 	and.w	r3, r3, #7
 8001556:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001558:	4b0b      	ldr	r3, [pc, #44]	@ (8001588 <__NVIC_SetPriorityGrouping+0x40>)
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800155e:	68ba      	ldr	r2, [r7, #8]
 8001560:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001564:	4013      	ands	r3, r2
 8001566:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001570:	4b06      	ldr	r3, [pc, #24]	@ (800158c <__NVIC_SetPriorityGrouping+0x44>)
 8001572:	4313      	orrs	r3, r2
 8001574:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001576:	4a04      	ldr	r2, [pc, #16]	@ (8001588 <__NVIC_SetPriorityGrouping+0x40>)
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	60d3      	str	r3, [r2, #12]
}
 800157c:	bf00      	nop
 800157e:	3714      	adds	r7, #20
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	e000ed00 	.word	0xe000ed00
 800158c:	05fa0000 	.word	0x05fa0000

08001590 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001594:	4b04      	ldr	r3, [pc, #16]	@ (80015a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	0a1b      	lsrs	r3, r3, #8
 800159a:	f003 0307 	and.w	r3, r3, #7
}
 800159e:	4618      	mov	r0, r3
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr
 80015a8:	e000ed00 	.word	0xe000ed00

080015ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4603      	mov	r3, r0
 80015b4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	db0b      	blt.n	80015d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015be:	88fb      	ldrh	r3, [r7, #6]
 80015c0:	f003 021f 	and.w	r2, r3, #31
 80015c4:	4907      	ldr	r1, [pc, #28]	@ (80015e4 <__NVIC_EnableIRQ+0x38>)
 80015c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015ca:	095b      	lsrs	r3, r3, #5
 80015cc:	2001      	movs	r0, #1
 80015ce:	fa00 f202 	lsl.w	r2, r0, r2
 80015d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015d6:	bf00      	nop
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	e000e100 	.word	0xe000e100

080015e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	6039      	str	r1, [r7, #0]
 80015f2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	db0a      	blt.n	8001612 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	b2da      	uxtb	r2, r3
 8001600:	490c      	ldr	r1, [pc, #48]	@ (8001634 <__NVIC_SetPriority+0x4c>)
 8001602:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001606:	0112      	lsls	r2, r2, #4
 8001608:	b2d2      	uxtb	r2, r2
 800160a:	440b      	add	r3, r1
 800160c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001610:	e00a      	b.n	8001628 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	b2da      	uxtb	r2, r3
 8001616:	4908      	ldr	r1, [pc, #32]	@ (8001638 <__NVIC_SetPriority+0x50>)
 8001618:	88fb      	ldrh	r3, [r7, #6]
 800161a:	f003 030f 	and.w	r3, r3, #15
 800161e:	3b04      	subs	r3, #4
 8001620:	0112      	lsls	r2, r2, #4
 8001622:	b2d2      	uxtb	r2, r2
 8001624:	440b      	add	r3, r1
 8001626:	761a      	strb	r2, [r3, #24]
}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr
 8001634:	e000e100 	.word	0xe000e100
 8001638:	e000ed00 	.word	0xe000ed00

0800163c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800163c:	b480      	push	{r7}
 800163e:	b089      	sub	sp, #36	@ 0x24
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f003 0307 	and.w	r3, r3, #7
 800164e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	f1c3 0307 	rsb	r3, r3, #7
 8001656:	2b04      	cmp	r3, #4
 8001658:	bf28      	it	cs
 800165a:	2304      	movcs	r3, #4
 800165c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	3304      	adds	r3, #4
 8001662:	2b06      	cmp	r3, #6
 8001664:	d902      	bls.n	800166c <NVIC_EncodePriority+0x30>
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	3b03      	subs	r3, #3
 800166a:	e000      	b.n	800166e <NVIC_EncodePriority+0x32>
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001670:	f04f 32ff 	mov.w	r2, #4294967295
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	fa02 f303 	lsl.w	r3, r2, r3
 800167a:	43da      	mvns	r2, r3
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	401a      	ands	r2, r3
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001684:	f04f 31ff 	mov.w	r1, #4294967295
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	fa01 f303 	lsl.w	r3, r1, r3
 800168e:	43d9      	mvns	r1, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001694:	4313      	orrs	r3, r2
         );
}
 8001696:	4618      	mov	r0, r3
 8001698:	3724      	adds	r7, #36	@ 0x24
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
	...

080016a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	3b01      	subs	r3, #1
 80016b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016b4:	d301      	bcc.n	80016ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016b6:	2301      	movs	r3, #1
 80016b8:	e00f      	b.n	80016da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ba:	4a0a      	ldr	r2, [pc, #40]	@ (80016e4 <SysTick_Config+0x40>)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	3b01      	subs	r3, #1
 80016c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016c2:	210f      	movs	r1, #15
 80016c4:	f04f 30ff 	mov.w	r0, #4294967295
 80016c8:	f7ff ff8e 	bl	80015e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016cc:	4b05      	ldr	r3, [pc, #20]	@ (80016e4 <SysTick_Config+0x40>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016d2:	4b04      	ldr	r3, [pc, #16]	@ (80016e4 <SysTick_Config+0x40>)
 80016d4:	2207      	movs	r2, #7
 80016d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	e000e010 	.word	0xe000e010

080016e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f7ff ff29 	bl	8001548 <__NVIC_SetPriorityGrouping>
}
 80016f6:	bf00      	nop
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016fe:	b580      	push	{r7, lr}
 8001700:	b086      	sub	sp, #24
 8001702:	af00      	add	r7, sp, #0
 8001704:	4603      	mov	r3, r0
 8001706:	60b9      	str	r1, [r7, #8]
 8001708:	607a      	str	r2, [r7, #4]
 800170a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800170c:	f7ff ff40 	bl	8001590 <__NVIC_GetPriorityGrouping>
 8001710:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	68b9      	ldr	r1, [r7, #8]
 8001716:	6978      	ldr	r0, [r7, #20]
 8001718:	f7ff ff90 	bl	800163c <NVIC_EncodePriority>
 800171c:	4602      	mov	r2, r0
 800171e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001722:	4611      	mov	r1, r2
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff ff5f 	bl	80015e8 <__NVIC_SetPriority>
}
 800172a:	bf00      	nop
 800172c:	3718      	adds	r7, #24
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	b082      	sub	sp, #8
 8001736:	af00      	add	r7, sp, #0
 8001738:	4603      	mov	r3, r0
 800173a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800173c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff ff33 	bl	80015ac <__NVIC_EnableIRQ>
}
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	b082      	sub	sp, #8
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f7ff ffa4 	bl	80016a4 <SysTick_Config>
 800175c:	4603      	mov	r3, r0
}
 800175e:	4618      	mov	r0, r3
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
	...

08001768 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800176c:	f3bf 8f5f 	dmb	sy
}
 8001770:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001772:	4b07      	ldr	r3, [pc, #28]	@ (8001790 <HAL_MPU_Disable+0x28>)
 8001774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001776:	4a06      	ldr	r2, [pc, #24]	@ (8001790 <HAL_MPU_Disable+0x28>)
 8001778:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800177c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800177e:	4b05      	ldr	r3, [pc, #20]	@ (8001794 <HAL_MPU_Disable+0x2c>)
 8001780:	2200      	movs	r2, #0
 8001782:	605a      	str	r2, [r3, #4]
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	e000ed00 	.word	0xe000ed00
 8001794:	e000ed90 	.word	0xe000ed90

08001798 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80017a0:	4a0b      	ldr	r2, [pc, #44]	@ (80017d0 <HAL_MPU_Enable+0x38>)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f043 0301 	orr.w	r3, r3, #1
 80017a8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80017aa:	4b0a      	ldr	r3, [pc, #40]	@ (80017d4 <HAL_MPU_Enable+0x3c>)
 80017ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ae:	4a09      	ldr	r2, [pc, #36]	@ (80017d4 <HAL_MPU_Enable+0x3c>)
 80017b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017b4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80017b6:	f3bf 8f4f 	dsb	sy
}
 80017ba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80017bc:	f3bf 8f6f 	isb	sy
}
 80017c0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80017c2:	bf00      	nop
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	e000ed90 	.word	0xe000ed90
 80017d4:	e000ed00 	.word	0xe000ed00

080017d8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	785a      	ldrb	r2, [r3, #1]
 80017e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001854 <HAL_MPU_ConfigRegion+0x7c>)
 80017e6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80017e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001854 <HAL_MPU_ConfigRegion+0x7c>)
 80017ea:	691b      	ldr	r3, [r3, #16]
 80017ec:	4a19      	ldr	r2, [pc, #100]	@ (8001854 <HAL_MPU_ConfigRegion+0x7c>)
 80017ee:	f023 0301 	bic.w	r3, r3, #1
 80017f2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80017f4:	4a17      	ldr	r2, [pc, #92]	@ (8001854 <HAL_MPU_ConfigRegion+0x7c>)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	7b1b      	ldrb	r3, [r3, #12]
 8001800:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	7adb      	ldrb	r3, [r3, #11]
 8001806:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001808:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	7a9b      	ldrb	r3, [r3, #10]
 800180e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001810:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	7b5b      	ldrb	r3, [r3, #13]
 8001816:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001818:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	7b9b      	ldrb	r3, [r3, #14]
 800181e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001820:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	7bdb      	ldrb	r3, [r3, #15]
 8001826:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001828:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	7a5b      	ldrb	r3, [r3, #9]
 800182e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001830:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	7a1b      	ldrb	r3, [r3, #8]
 8001836:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001838:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	7812      	ldrb	r2, [r2, #0]
 800183e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001840:	4a04      	ldr	r2, [pc, #16]	@ (8001854 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001842:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001844:	6113      	str	r3, [r2, #16]
}
 8001846:	bf00      	nop
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	e000ed90 	.word	0xe000ed90

08001858 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001860:	f7ff fe36 	bl	80014d0 <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d101      	bne.n	8001870 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e2dc      	b.n	8001e2a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001876:	b2db      	uxtb	r3, r3
 8001878:	2b02      	cmp	r3, #2
 800187a:	d008      	beq.n	800188e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2280      	movs	r2, #128	@ 0x80
 8001880:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e2cd      	b.n	8001e2a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a76      	ldr	r2, [pc, #472]	@ (8001a6c <HAL_DMA_Abort+0x214>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d04a      	beq.n	800192e <HAL_DMA_Abort+0xd6>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a74      	ldr	r2, [pc, #464]	@ (8001a70 <HAL_DMA_Abort+0x218>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d045      	beq.n	800192e <HAL_DMA_Abort+0xd6>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a73      	ldr	r2, [pc, #460]	@ (8001a74 <HAL_DMA_Abort+0x21c>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d040      	beq.n	800192e <HAL_DMA_Abort+0xd6>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a71      	ldr	r2, [pc, #452]	@ (8001a78 <HAL_DMA_Abort+0x220>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d03b      	beq.n	800192e <HAL_DMA_Abort+0xd6>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a70      	ldr	r2, [pc, #448]	@ (8001a7c <HAL_DMA_Abort+0x224>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d036      	beq.n	800192e <HAL_DMA_Abort+0xd6>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a6e      	ldr	r2, [pc, #440]	@ (8001a80 <HAL_DMA_Abort+0x228>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d031      	beq.n	800192e <HAL_DMA_Abort+0xd6>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a6d      	ldr	r2, [pc, #436]	@ (8001a84 <HAL_DMA_Abort+0x22c>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d02c      	beq.n	800192e <HAL_DMA_Abort+0xd6>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a6b      	ldr	r2, [pc, #428]	@ (8001a88 <HAL_DMA_Abort+0x230>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d027      	beq.n	800192e <HAL_DMA_Abort+0xd6>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a6a      	ldr	r2, [pc, #424]	@ (8001a8c <HAL_DMA_Abort+0x234>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d022      	beq.n	800192e <HAL_DMA_Abort+0xd6>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a68      	ldr	r2, [pc, #416]	@ (8001a90 <HAL_DMA_Abort+0x238>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d01d      	beq.n	800192e <HAL_DMA_Abort+0xd6>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a67      	ldr	r2, [pc, #412]	@ (8001a94 <HAL_DMA_Abort+0x23c>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d018      	beq.n	800192e <HAL_DMA_Abort+0xd6>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a65      	ldr	r2, [pc, #404]	@ (8001a98 <HAL_DMA_Abort+0x240>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d013      	beq.n	800192e <HAL_DMA_Abort+0xd6>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a64      	ldr	r2, [pc, #400]	@ (8001a9c <HAL_DMA_Abort+0x244>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d00e      	beq.n	800192e <HAL_DMA_Abort+0xd6>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a62      	ldr	r2, [pc, #392]	@ (8001aa0 <HAL_DMA_Abort+0x248>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d009      	beq.n	800192e <HAL_DMA_Abort+0xd6>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a61      	ldr	r2, [pc, #388]	@ (8001aa4 <HAL_DMA_Abort+0x24c>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d004      	beq.n	800192e <HAL_DMA_Abort+0xd6>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a5f      	ldr	r2, [pc, #380]	@ (8001aa8 <HAL_DMA_Abort+0x250>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d101      	bne.n	8001932 <HAL_DMA_Abort+0xda>
 800192e:	2301      	movs	r3, #1
 8001930:	e000      	b.n	8001934 <HAL_DMA_Abort+0xdc>
 8001932:	2300      	movs	r3, #0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d013      	beq.n	8001960 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f022 021e 	bic.w	r2, r2, #30
 8001946:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	695a      	ldr	r2, [r3, #20]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001956:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	617b      	str	r3, [r7, #20]
 800195e:	e00a      	b.n	8001976 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f022 020e 	bic.w	r2, r2, #14
 800196e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a3c      	ldr	r2, [pc, #240]	@ (8001a6c <HAL_DMA_Abort+0x214>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d072      	beq.n	8001a66 <HAL_DMA_Abort+0x20e>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a3a      	ldr	r2, [pc, #232]	@ (8001a70 <HAL_DMA_Abort+0x218>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d06d      	beq.n	8001a66 <HAL_DMA_Abort+0x20e>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a39      	ldr	r2, [pc, #228]	@ (8001a74 <HAL_DMA_Abort+0x21c>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d068      	beq.n	8001a66 <HAL_DMA_Abort+0x20e>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a37      	ldr	r2, [pc, #220]	@ (8001a78 <HAL_DMA_Abort+0x220>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d063      	beq.n	8001a66 <HAL_DMA_Abort+0x20e>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a36      	ldr	r2, [pc, #216]	@ (8001a7c <HAL_DMA_Abort+0x224>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d05e      	beq.n	8001a66 <HAL_DMA_Abort+0x20e>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a34      	ldr	r2, [pc, #208]	@ (8001a80 <HAL_DMA_Abort+0x228>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d059      	beq.n	8001a66 <HAL_DMA_Abort+0x20e>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a33      	ldr	r2, [pc, #204]	@ (8001a84 <HAL_DMA_Abort+0x22c>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d054      	beq.n	8001a66 <HAL_DMA_Abort+0x20e>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a31      	ldr	r2, [pc, #196]	@ (8001a88 <HAL_DMA_Abort+0x230>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d04f      	beq.n	8001a66 <HAL_DMA_Abort+0x20e>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a30      	ldr	r2, [pc, #192]	@ (8001a8c <HAL_DMA_Abort+0x234>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d04a      	beq.n	8001a66 <HAL_DMA_Abort+0x20e>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a2e      	ldr	r2, [pc, #184]	@ (8001a90 <HAL_DMA_Abort+0x238>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d045      	beq.n	8001a66 <HAL_DMA_Abort+0x20e>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a2d      	ldr	r2, [pc, #180]	@ (8001a94 <HAL_DMA_Abort+0x23c>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d040      	beq.n	8001a66 <HAL_DMA_Abort+0x20e>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a2b      	ldr	r2, [pc, #172]	@ (8001a98 <HAL_DMA_Abort+0x240>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d03b      	beq.n	8001a66 <HAL_DMA_Abort+0x20e>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a2a      	ldr	r2, [pc, #168]	@ (8001a9c <HAL_DMA_Abort+0x244>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d036      	beq.n	8001a66 <HAL_DMA_Abort+0x20e>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a28      	ldr	r2, [pc, #160]	@ (8001aa0 <HAL_DMA_Abort+0x248>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d031      	beq.n	8001a66 <HAL_DMA_Abort+0x20e>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a27      	ldr	r2, [pc, #156]	@ (8001aa4 <HAL_DMA_Abort+0x24c>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d02c      	beq.n	8001a66 <HAL_DMA_Abort+0x20e>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a25      	ldr	r2, [pc, #148]	@ (8001aa8 <HAL_DMA_Abort+0x250>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d027      	beq.n	8001a66 <HAL_DMA_Abort+0x20e>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a24      	ldr	r2, [pc, #144]	@ (8001aac <HAL_DMA_Abort+0x254>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d022      	beq.n	8001a66 <HAL_DMA_Abort+0x20e>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a22      	ldr	r2, [pc, #136]	@ (8001ab0 <HAL_DMA_Abort+0x258>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d01d      	beq.n	8001a66 <HAL_DMA_Abort+0x20e>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a21      	ldr	r2, [pc, #132]	@ (8001ab4 <HAL_DMA_Abort+0x25c>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d018      	beq.n	8001a66 <HAL_DMA_Abort+0x20e>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a1f      	ldr	r2, [pc, #124]	@ (8001ab8 <HAL_DMA_Abort+0x260>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d013      	beq.n	8001a66 <HAL_DMA_Abort+0x20e>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a1e      	ldr	r2, [pc, #120]	@ (8001abc <HAL_DMA_Abort+0x264>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d00e      	beq.n	8001a66 <HAL_DMA_Abort+0x20e>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a1c      	ldr	r2, [pc, #112]	@ (8001ac0 <HAL_DMA_Abort+0x268>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d009      	beq.n	8001a66 <HAL_DMA_Abort+0x20e>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a1b      	ldr	r2, [pc, #108]	@ (8001ac4 <HAL_DMA_Abort+0x26c>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d004      	beq.n	8001a66 <HAL_DMA_Abort+0x20e>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a19      	ldr	r2, [pc, #100]	@ (8001ac8 <HAL_DMA_Abort+0x270>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d132      	bne.n	8001acc <HAL_DMA_Abort+0x274>
 8001a66:	2301      	movs	r3, #1
 8001a68:	e031      	b.n	8001ace <HAL_DMA_Abort+0x276>
 8001a6a:	bf00      	nop
 8001a6c:	40020010 	.word	0x40020010
 8001a70:	40020028 	.word	0x40020028
 8001a74:	40020040 	.word	0x40020040
 8001a78:	40020058 	.word	0x40020058
 8001a7c:	40020070 	.word	0x40020070
 8001a80:	40020088 	.word	0x40020088
 8001a84:	400200a0 	.word	0x400200a0
 8001a88:	400200b8 	.word	0x400200b8
 8001a8c:	40020410 	.word	0x40020410
 8001a90:	40020428 	.word	0x40020428
 8001a94:	40020440 	.word	0x40020440
 8001a98:	40020458 	.word	0x40020458
 8001a9c:	40020470 	.word	0x40020470
 8001aa0:	40020488 	.word	0x40020488
 8001aa4:	400204a0 	.word	0x400204a0
 8001aa8:	400204b8 	.word	0x400204b8
 8001aac:	58025408 	.word	0x58025408
 8001ab0:	5802541c 	.word	0x5802541c
 8001ab4:	58025430 	.word	0x58025430
 8001ab8:	58025444 	.word	0x58025444
 8001abc:	58025458 	.word	0x58025458
 8001ac0:	5802546c 	.word	0x5802546c
 8001ac4:	58025480 	.word	0x58025480
 8001ac8:	58025494 	.word	0x58025494
 8001acc:	2300      	movs	r3, #0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d007      	beq.n	8001ae2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001adc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ae0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a6d      	ldr	r2, [pc, #436]	@ (8001c9c <HAL_DMA_Abort+0x444>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d04a      	beq.n	8001b82 <HAL_DMA_Abort+0x32a>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a6b      	ldr	r2, [pc, #428]	@ (8001ca0 <HAL_DMA_Abort+0x448>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d045      	beq.n	8001b82 <HAL_DMA_Abort+0x32a>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a6a      	ldr	r2, [pc, #424]	@ (8001ca4 <HAL_DMA_Abort+0x44c>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d040      	beq.n	8001b82 <HAL_DMA_Abort+0x32a>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a68      	ldr	r2, [pc, #416]	@ (8001ca8 <HAL_DMA_Abort+0x450>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d03b      	beq.n	8001b82 <HAL_DMA_Abort+0x32a>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a67      	ldr	r2, [pc, #412]	@ (8001cac <HAL_DMA_Abort+0x454>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d036      	beq.n	8001b82 <HAL_DMA_Abort+0x32a>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a65      	ldr	r2, [pc, #404]	@ (8001cb0 <HAL_DMA_Abort+0x458>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d031      	beq.n	8001b82 <HAL_DMA_Abort+0x32a>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a64      	ldr	r2, [pc, #400]	@ (8001cb4 <HAL_DMA_Abort+0x45c>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d02c      	beq.n	8001b82 <HAL_DMA_Abort+0x32a>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a62      	ldr	r2, [pc, #392]	@ (8001cb8 <HAL_DMA_Abort+0x460>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d027      	beq.n	8001b82 <HAL_DMA_Abort+0x32a>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a61      	ldr	r2, [pc, #388]	@ (8001cbc <HAL_DMA_Abort+0x464>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d022      	beq.n	8001b82 <HAL_DMA_Abort+0x32a>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a5f      	ldr	r2, [pc, #380]	@ (8001cc0 <HAL_DMA_Abort+0x468>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d01d      	beq.n	8001b82 <HAL_DMA_Abort+0x32a>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a5e      	ldr	r2, [pc, #376]	@ (8001cc4 <HAL_DMA_Abort+0x46c>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d018      	beq.n	8001b82 <HAL_DMA_Abort+0x32a>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a5c      	ldr	r2, [pc, #368]	@ (8001cc8 <HAL_DMA_Abort+0x470>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d013      	beq.n	8001b82 <HAL_DMA_Abort+0x32a>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a5b      	ldr	r2, [pc, #364]	@ (8001ccc <HAL_DMA_Abort+0x474>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d00e      	beq.n	8001b82 <HAL_DMA_Abort+0x32a>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a59      	ldr	r2, [pc, #356]	@ (8001cd0 <HAL_DMA_Abort+0x478>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d009      	beq.n	8001b82 <HAL_DMA_Abort+0x32a>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a58      	ldr	r2, [pc, #352]	@ (8001cd4 <HAL_DMA_Abort+0x47c>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d004      	beq.n	8001b82 <HAL_DMA_Abort+0x32a>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a56      	ldr	r2, [pc, #344]	@ (8001cd8 <HAL_DMA_Abort+0x480>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d108      	bne.n	8001b94 <HAL_DMA_Abort+0x33c>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f022 0201 	bic.w	r2, r2, #1
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	e007      	b.n	8001ba4 <HAL_DMA_Abort+0x34c>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f022 0201 	bic.w	r2, r2, #1
 8001ba2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001ba4:	e013      	b.n	8001bce <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ba6:	f7ff fc93 	bl	80014d0 <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	2b05      	cmp	r3, #5
 8001bb2:	d90c      	bls.n	8001bce <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2220      	movs	r2, #32
 8001bb8:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2203      	movs	r2, #3
 8001bbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e12d      	b.n	8001e2a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d1e5      	bne.n	8001ba6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a2f      	ldr	r2, [pc, #188]	@ (8001c9c <HAL_DMA_Abort+0x444>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d04a      	beq.n	8001c7a <HAL_DMA_Abort+0x422>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a2d      	ldr	r2, [pc, #180]	@ (8001ca0 <HAL_DMA_Abort+0x448>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d045      	beq.n	8001c7a <HAL_DMA_Abort+0x422>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a2c      	ldr	r2, [pc, #176]	@ (8001ca4 <HAL_DMA_Abort+0x44c>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d040      	beq.n	8001c7a <HAL_DMA_Abort+0x422>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a2a      	ldr	r2, [pc, #168]	@ (8001ca8 <HAL_DMA_Abort+0x450>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d03b      	beq.n	8001c7a <HAL_DMA_Abort+0x422>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a29      	ldr	r2, [pc, #164]	@ (8001cac <HAL_DMA_Abort+0x454>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d036      	beq.n	8001c7a <HAL_DMA_Abort+0x422>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a27      	ldr	r2, [pc, #156]	@ (8001cb0 <HAL_DMA_Abort+0x458>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d031      	beq.n	8001c7a <HAL_DMA_Abort+0x422>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a26      	ldr	r2, [pc, #152]	@ (8001cb4 <HAL_DMA_Abort+0x45c>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d02c      	beq.n	8001c7a <HAL_DMA_Abort+0x422>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a24      	ldr	r2, [pc, #144]	@ (8001cb8 <HAL_DMA_Abort+0x460>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d027      	beq.n	8001c7a <HAL_DMA_Abort+0x422>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a23      	ldr	r2, [pc, #140]	@ (8001cbc <HAL_DMA_Abort+0x464>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d022      	beq.n	8001c7a <HAL_DMA_Abort+0x422>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a21      	ldr	r2, [pc, #132]	@ (8001cc0 <HAL_DMA_Abort+0x468>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d01d      	beq.n	8001c7a <HAL_DMA_Abort+0x422>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a20      	ldr	r2, [pc, #128]	@ (8001cc4 <HAL_DMA_Abort+0x46c>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d018      	beq.n	8001c7a <HAL_DMA_Abort+0x422>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a1e      	ldr	r2, [pc, #120]	@ (8001cc8 <HAL_DMA_Abort+0x470>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d013      	beq.n	8001c7a <HAL_DMA_Abort+0x422>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a1d      	ldr	r2, [pc, #116]	@ (8001ccc <HAL_DMA_Abort+0x474>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d00e      	beq.n	8001c7a <HAL_DMA_Abort+0x422>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a1b      	ldr	r2, [pc, #108]	@ (8001cd0 <HAL_DMA_Abort+0x478>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d009      	beq.n	8001c7a <HAL_DMA_Abort+0x422>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a1a      	ldr	r2, [pc, #104]	@ (8001cd4 <HAL_DMA_Abort+0x47c>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d004      	beq.n	8001c7a <HAL_DMA_Abort+0x422>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a18      	ldr	r2, [pc, #96]	@ (8001cd8 <HAL_DMA_Abort+0x480>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d101      	bne.n	8001c7e <HAL_DMA_Abort+0x426>
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e000      	b.n	8001c80 <HAL_DMA_Abort+0x428>
 8001c7e:	2300      	movs	r3, #0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d02b      	beq.n	8001cdc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c88:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c8e:	f003 031f 	and.w	r3, r3, #31
 8001c92:	223f      	movs	r2, #63	@ 0x3f
 8001c94:	409a      	lsls	r2, r3
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	609a      	str	r2, [r3, #8]
 8001c9a:	e02a      	b.n	8001cf2 <HAL_DMA_Abort+0x49a>
 8001c9c:	40020010 	.word	0x40020010
 8001ca0:	40020028 	.word	0x40020028
 8001ca4:	40020040 	.word	0x40020040
 8001ca8:	40020058 	.word	0x40020058
 8001cac:	40020070 	.word	0x40020070
 8001cb0:	40020088 	.word	0x40020088
 8001cb4:	400200a0 	.word	0x400200a0
 8001cb8:	400200b8 	.word	0x400200b8
 8001cbc:	40020410 	.word	0x40020410
 8001cc0:	40020428 	.word	0x40020428
 8001cc4:	40020440 	.word	0x40020440
 8001cc8:	40020458 	.word	0x40020458
 8001ccc:	40020470 	.word	0x40020470
 8001cd0:	40020488 	.word	0x40020488
 8001cd4:	400204a0 	.word	0x400204a0
 8001cd8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ce0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ce6:	f003 031f 	and.w	r3, r3, #31
 8001cea:	2201      	movs	r2, #1
 8001cec:	409a      	lsls	r2, r3
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a4f      	ldr	r2, [pc, #316]	@ (8001e34 <HAL_DMA_Abort+0x5dc>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d072      	beq.n	8001de2 <HAL_DMA_Abort+0x58a>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a4d      	ldr	r2, [pc, #308]	@ (8001e38 <HAL_DMA_Abort+0x5e0>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d06d      	beq.n	8001de2 <HAL_DMA_Abort+0x58a>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a4c      	ldr	r2, [pc, #304]	@ (8001e3c <HAL_DMA_Abort+0x5e4>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d068      	beq.n	8001de2 <HAL_DMA_Abort+0x58a>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a4a      	ldr	r2, [pc, #296]	@ (8001e40 <HAL_DMA_Abort+0x5e8>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d063      	beq.n	8001de2 <HAL_DMA_Abort+0x58a>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a49      	ldr	r2, [pc, #292]	@ (8001e44 <HAL_DMA_Abort+0x5ec>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d05e      	beq.n	8001de2 <HAL_DMA_Abort+0x58a>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a47      	ldr	r2, [pc, #284]	@ (8001e48 <HAL_DMA_Abort+0x5f0>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d059      	beq.n	8001de2 <HAL_DMA_Abort+0x58a>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a46      	ldr	r2, [pc, #280]	@ (8001e4c <HAL_DMA_Abort+0x5f4>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d054      	beq.n	8001de2 <HAL_DMA_Abort+0x58a>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a44      	ldr	r2, [pc, #272]	@ (8001e50 <HAL_DMA_Abort+0x5f8>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d04f      	beq.n	8001de2 <HAL_DMA_Abort+0x58a>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a43      	ldr	r2, [pc, #268]	@ (8001e54 <HAL_DMA_Abort+0x5fc>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d04a      	beq.n	8001de2 <HAL_DMA_Abort+0x58a>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a41      	ldr	r2, [pc, #260]	@ (8001e58 <HAL_DMA_Abort+0x600>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d045      	beq.n	8001de2 <HAL_DMA_Abort+0x58a>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a40      	ldr	r2, [pc, #256]	@ (8001e5c <HAL_DMA_Abort+0x604>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d040      	beq.n	8001de2 <HAL_DMA_Abort+0x58a>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a3e      	ldr	r2, [pc, #248]	@ (8001e60 <HAL_DMA_Abort+0x608>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d03b      	beq.n	8001de2 <HAL_DMA_Abort+0x58a>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a3d      	ldr	r2, [pc, #244]	@ (8001e64 <HAL_DMA_Abort+0x60c>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d036      	beq.n	8001de2 <HAL_DMA_Abort+0x58a>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a3b      	ldr	r2, [pc, #236]	@ (8001e68 <HAL_DMA_Abort+0x610>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d031      	beq.n	8001de2 <HAL_DMA_Abort+0x58a>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a3a      	ldr	r2, [pc, #232]	@ (8001e6c <HAL_DMA_Abort+0x614>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d02c      	beq.n	8001de2 <HAL_DMA_Abort+0x58a>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a38      	ldr	r2, [pc, #224]	@ (8001e70 <HAL_DMA_Abort+0x618>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d027      	beq.n	8001de2 <HAL_DMA_Abort+0x58a>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a37      	ldr	r2, [pc, #220]	@ (8001e74 <HAL_DMA_Abort+0x61c>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d022      	beq.n	8001de2 <HAL_DMA_Abort+0x58a>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a35      	ldr	r2, [pc, #212]	@ (8001e78 <HAL_DMA_Abort+0x620>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d01d      	beq.n	8001de2 <HAL_DMA_Abort+0x58a>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a34      	ldr	r2, [pc, #208]	@ (8001e7c <HAL_DMA_Abort+0x624>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d018      	beq.n	8001de2 <HAL_DMA_Abort+0x58a>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a32      	ldr	r2, [pc, #200]	@ (8001e80 <HAL_DMA_Abort+0x628>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d013      	beq.n	8001de2 <HAL_DMA_Abort+0x58a>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a31      	ldr	r2, [pc, #196]	@ (8001e84 <HAL_DMA_Abort+0x62c>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d00e      	beq.n	8001de2 <HAL_DMA_Abort+0x58a>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a2f      	ldr	r2, [pc, #188]	@ (8001e88 <HAL_DMA_Abort+0x630>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d009      	beq.n	8001de2 <HAL_DMA_Abort+0x58a>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a2e      	ldr	r2, [pc, #184]	@ (8001e8c <HAL_DMA_Abort+0x634>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d004      	beq.n	8001de2 <HAL_DMA_Abort+0x58a>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a2c      	ldr	r2, [pc, #176]	@ (8001e90 <HAL_DMA_Abort+0x638>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d101      	bne.n	8001de6 <HAL_DMA_Abort+0x58e>
 8001de2:	2301      	movs	r3, #1
 8001de4:	e000      	b.n	8001de8 <HAL_DMA_Abort+0x590>
 8001de6:	2300      	movs	r3, #0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d015      	beq.n	8001e18 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001df4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d00c      	beq.n	8001e18 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e08:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e0c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001e16:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3718      	adds	r7, #24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	40020010 	.word	0x40020010
 8001e38:	40020028 	.word	0x40020028
 8001e3c:	40020040 	.word	0x40020040
 8001e40:	40020058 	.word	0x40020058
 8001e44:	40020070 	.word	0x40020070
 8001e48:	40020088 	.word	0x40020088
 8001e4c:	400200a0 	.word	0x400200a0
 8001e50:	400200b8 	.word	0x400200b8
 8001e54:	40020410 	.word	0x40020410
 8001e58:	40020428 	.word	0x40020428
 8001e5c:	40020440 	.word	0x40020440
 8001e60:	40020458 	.word	0x40020458
 8001e64:	40020470 	.word	0x40020470
 8001e68:	40020488 	.word	0x40020488
 8001e6c:	400204a0 	.word	0x400204a0
 8001e70:	400204b8 	.word	0x400204b8
 8001e74:	58025408 	.word	0x58025408
 8001e78:	5802541c 	.word	0x5802541c
 8001e7c:	58025430 	.word	0x58025430
 8001e80:	58025444 	.word	0x58025444
 8001e84:	58025458 	.word	0x58025458
 8001e88:	5802546c 	.word	0x5802546c
 8001e8c:	58025480 	.word	0x58025480
 8001e90:	58025494 	.word	0x58025494

08001e94 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d101      	bne.n	8001ea6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e237      	b.n	8002316 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d004      	beq.n	8001ebc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2280      	movs	r2, #128	@ 0x80
 8001eb6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e22c      	b.n	8002316 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a5c      	ldr	r2, [pc, #368]	@ (8002034 <HAL_DMA_Abort_IT+0x1a0>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d04a      	beq.n	8001f5c <HAL_DMA_Abort_IT+0xc8>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a5b      	ldr	r2, [pc, #364]	@ (8002038 <HAL_DMA_Abort_IT+0x1a4>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d045      	beq.n	8001f5c <HAL_DMA_Abort_IT+0xc8>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a59      	ldr	r2, [pc, #356]	@ (800203c <HAL_DMA_Abort_IT+0x1a8>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d040      	beq.n	8001f5c <HAL_DMA_Abort_IT+0xc8>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a58      	ldr	r2, [pc, #352]	@ (8002040 <HAL_DMA_Abort_IT+0x1ac>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d03b      	beq.n	8001f5c <HAL_DMA_Abort_IT+0xc8>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a56      	ldr	r2, [pc, #344]	@ (8002044 <HAL_DMA_Abort_IT+0x1b0>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d036      	beq.n	8001f5c <HAL_DMA_Abort_IT+0xc8>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a55      	ldr	r2, [pc, #340]	@ (8002048 <HAL_DMA_Abort_IT+0x1b4>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d031      	beq.n	8001f5c <HAL_DMA_Abort_IT+0xc8>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a53      	ldr	r2, [pc, #332]	@ (800204c <HAL_DMA_Abort_IT+0x1b8>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d02c      	beq.n	8001f5c <HAL_DMA_Abort_IT+0xc8>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a52      	ldr	r2, [pc, #328]	@ (8002050 <HAL_DMA_Abort_IT+0x1bc>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d027      	beq.n	8001f5c <HAL_DMA_Abort_IT+0xc8>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a50      	ldr	r2, [pc, #320]	@ (8002054 <HAL_DMA_Abort_IT+0x1c0>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d022      	beq.n	8001f5c <HAL_DMA_Abort_IT+0xc8>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a4f      	ldr	r2, [pc, #316]	@ (8002058 <HAL_DMA_Abort_IT+0x1c4>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d01d      	beq.n	8001f5c <HAL_DMA_Abort_IT+0xc8>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a4d      	ldr	r2, [pc, #308]	@ (800205c <HAL_DMA_Abort_IT+0x1c8>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d018      	beq.n	8001f5c <HAL_DMA_Abort_IT+0xc8>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a4c      	ldr	r2, [pc, #304]	@ (8002060 <HAL_DMA_Abort_IT+0x1cc>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d013      	beq.n	8001f5c <HAL_DMA_Abort_IT+0xc8>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a4a      	ldr	r2, [pc, #296]	@ (8002064 <HAL_DMA_Abort_IT+0x1d0>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d00e      	beq.n	8001f5c <HAL_DMA_Abort_IT+0xc8>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a49      	ldr	r2, [pc, #292]	@ (8002068 <HAL_DMA_Abort_IT+0x1d4>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d009      	beq.n	8001f5c <HAL_DMA_Abort_IT+0xc8>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a47      	ldr	r2, [pc, #284]	@ (800206c <HAL_DMA_Abort_IT+0x1d8>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d004      	beq.n	8001f5c <HAL_DMA_Abort_IT+0xc8>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a46      	ldr	r2, [pc, #280]	@ (8002070 <HAL_DMA_Abort_IT+0x1dc>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d101      	bne.n	8001f60 <HAL_DMA_Abort_IT+0xcc>
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e000      	b.n	8001f62 <HAL_DMA_Abort_IT+0xce>
 8001f60:	2300      	movs	r3, #0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	f000 8086 	beq.w	8002074 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2204      	movs	r2, #4
 8001f6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a2f      	ldr	r2, [pc, #188]	@ (8002034 <HAL_DMA_Abort_IT+0x1a0>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d04a      	beq.n	8002010 <HAL_DMA_Abort_IT+0x17c>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a2e      	ldr	r2, [pc, #184]	@ (8002038 <HAL_DMA_Abort_IT+0x1a4>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d045      	beq.n	8002010 <HAL_DMA_Abort_IT+0x17c>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a2c      	ldr	r2, [pc, #176]	@ (800203c <HAL_DMA_Abort_IT+0x1a8>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d040      	beq.n	8002010 <HAL_DMA_Abort_IT+0x17c>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a2b      	ldr	r2, [pc, #172]	@ (8002040 <HAL_DMA_Abort_IT+0x1ac>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d03b      	beq.n	8002010 <HAL_DMA_Abort_IT+0x17c>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a29      	ldr	r2, [pc, #164]	@ (8002044 <HAL_DMA_Abort_IT+0x1b0>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d036      	beq.n	8002010 <HAL_DMA_Abort_IT+0x17c>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a28      	ldr	r2, [pc, #160]	@ (8002048 <HAL_DMA_Abort_IT+0x1b4>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d031      	beq.n	8002010 <HAL_DMA_Abort_IT+0x17c>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a26      	ldr	r2, [pc, #152]	@ (800204c <HAL_DMA_Abort_IT+0x1b8>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d02c      	beq.n	8002010 <HAL_DMA_Abort_IT+0x17c>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a25      	ldr	r2, [pc, #148]	@ (8002050 <HAL_DMA_Abort_IT+0x1bc>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d027      	beq.n	8002010 <HAL_DMA_Abort_IT+0x17c>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a23      	ldr	r2, [pc, #140]	@ (8002054 <HAL_DMA_Abort_IT+0x1c0>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d022      	beq.n	8002010 <HAL_DMA_Abort_IT+0x17c>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a22      	ldr	r2, [pc, #136]	@ (8002058 <HAL_DMA_Abort_IT+0x1c4>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d01d      	beq.n	8002010 <HAL_DMA_Abort_IT+0x17c>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a20      	ldr	r2, [pc, #128]	@ (800205c <HAL_DMA_Abort_IT+0x1c8>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d018      	beq.n	8002010 <HAL_DMA_Abort_IT+0x17c>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a1f      	ldr	r2, [pc, #124]	@ (8002060 <HAL_DMA_Abort_IT+0x1cc>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d013      	beq.n	8002010 <HAL_DMA_Abort_IT+0x17c>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a1d      	ldr	r2, [pc, #116]	@ (8002064 <HAL_DMA_Abort_IT+0x1d0>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d00e      	beq.n	8002010 <HAL_DMA_Abort_IT+0x17c>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a1c      	ldr	r2, [pc, #112]	@ (8002068 <HAL_DMA_Abort_IT+0x1d4>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d009      	beq.n	8002010 <HAL_DMA_Abort_IT+0x17c>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a1a      	ldr	r2, [pc, #104]	@ (800206c <HAL_DMA_Abort_IT+0x1d8>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d004      	beq.n	8002010 <HAL_DMA_Abort_IT+0x17c>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a19      	ldr	r2, [pc, #100]	@ (8002070 <HAL_DMA_Abort_IT+0x1dc>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d108      	bne.n	8002022 <HAL_DMA_Abort_IT+0x18e>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f022 0201 	bic.w	r2, r2, #1
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	e178      	b.n	8002314 <HAL_DMA_Abort_IT+0x480>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f022 0201 	bic.w	r2, r2, #1
 8002030:	601a      	str	r2, [r3, #0]
 8002032:	e16f      	b.n	8002314 <HAL_DMA_Abort_IT+0x480>
 8002034:	40020010 	.word	0x40020010
 8002038:	40020028 	.word	0x40020028
 800203c:	40020040 	.word	0x40020040
 8002040:	40020058 	.word	0x40020058
 8002044:	40020070 	.word	0x40020070
 8002048:	40020088 	.word	0x40020088
 800204c:	400200a0 	.word	0x400200a0
 8002050:	400200b8 	.word	0x400200b8
 8002054:	40020410 	.word	0x40020410
 8002058:	40020428 	.word	0x40020428
 800205c:	40020440 	.word	0x40020440
 8002060:	40020458 	.word	0x40020458
 8002064:	40020470 	.word	0x40020470
 8002068:	40020488 	.word	0x40020488
 800206c:	400204a0 	.word	0x400204a0
 8002070:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f022 020e 	bic.w	r2, r2, #14
 8002082:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a6c      	ldr	r2, [pc, #432]	@ (800223c <HAL_DMA_Abort_IT+0x3a8>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d04a      	beq.n	8002124 <HAL_DMA_Abort_IT+0x290>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a6b      	ldr	r2, [pc, #428]	@ (8002240 <HAL_DMA_Abort_IT+0x3ac>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d045      	beq.n	8002124 <HAL_DMA_Abort_IT+0x290>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a69      	ldr	r2, [pc, #420]	@ (8002244 <HAL_DMA_Abort_IT+0x3b0>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d040      	beq.n	8002124 <HAL_DMA_Abort_IT+0x290>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a68      	ldr	r2, [pc, #416]	@ (8002248 <HAL_DMA_Abort_IT+0x3b4>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d03b      	beq.n	8002124 <HAL_DMA_Abort_IT+0x290>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a66      	ldr	r2, [pc, #408]	@ (800224c <HAL_DMA_Abort_IT+0x3b8>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d036      	beq.n	8002124 <HAL_DMA_Abort_IT+0x290>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a65      	ldr	r2, [pc, #404]	@ (8002250 <HAL_DMA_Abort_IT+0x3bc>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d031      	beq.n	8002124 <HAL_DMA_Abort_IT+0x290>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a63      	ldr	r2, [pc, #396]	@ (8002254 <HAL_DMA_Abort_IT+0x3c0>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d02c      	beq.n	8002124 <HAL_DMA_Abort_IT+0x290>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a62      	ldr	r2, [pc, #392]	@ (8002258 <HAL_DMA_Abort_IT+0x3c4>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d027      	beq.n	8002124 <HAL_DMA_Abort_IT+0x290>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a60      	ldr	r2, [pc, #384]	@ (800225c <HAL_DMA_Abort_IT+0x3c8>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d022      	beq.n	8002124 <HAL_DMA_Abort_IT+0x290>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a5f      	ldr	r2, [pc, #380]	@ (8002260 <HAL_DMA_Abort_IT+0x3cc>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d01d      	beq.n	8002124 <HAL_DMA_Abort_IT+0x290>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a5d      	ldr	r2, [pc, #372]	@ (8002264 <HAL_DMA_Abort_IT+0x3d0>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d018      	beq.n	8002124 <HAL_DMA_Abort_IT+0x290>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a5c      	ldr	r2, [pc, #368]	@ (8002268 <HAL_DMA_Abort_IT+0x3d4>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d013      	beq.n	8002124 <HAL_DMA_Abort_IT+0x290>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a5a      	ldr	r2, [pc, #360]	@ (800226c <HAL_DMA_Abort_IT+0x3d8>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d00e      	beq.n	8002124 <HAL_DMA_Abort_IT+0x290>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a59      	ldr	r2, [pc, #356]	@ (8002270 <HAL_DMA_Abort_IT+0x3dc>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d009      	beq.n	8002124 <HAL_DMA_Abort_IT+0x290>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a57      	ldr	r2, [pc, #348]	@ (8002274 <HAL_DMA_Abort_IT+0x3e0>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d004      	beq.n	8002124 <HAL_DMA_Abort_IT+0x290>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a56      	ldr	r2, [pc, #344]	@ (8002278 <HAL_DMA_Abort_IT+0x3e4>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d108      	bne.n	8002136 <HAL_DMA_Abort_IT+0x2a2>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f022 0201 	bic.w	r2, r2, #1
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	e007      	b.n	8002146 <HAL_DMA_Abort_IT+0x2b2>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f022 0201 	bic.w	r2, r2, #1
 8002144:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a3c      	ldr	r2, [pc, #240]	@ (800223c <HAL_DMA_Abort_IT+0x3a8>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d072      	beq.n	8002236 <HAL_DMA_Abort_IT+0x3a2>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a3a      	ldr	r2, [pc, #232]	@ (8002240 <HAL_DMA_Abort_IT+0x3ac>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d06d      	beq.n	8002236 <HAL_DMA_Abort_IT+0x3a2>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a39      	ldr	r2, [pc, #228]	@ (8002244 <HAL_DMA_Abort_IT+0x3b0>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d068      	beq.n	8002236 <HAL_DMA_Abort_IT+0x3a2>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a37      	ldr	r2, [pc, #220]	@ (8002248 <HAL_DMA_Abort_IT+0x3b4>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d063      	beq.n	8002236 <HAL_DMA_Abort_IT+0x3a2>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a36      	ldr	r2, [pc, #216]	@ (800224c <HAL_DMA_Abort_IT+0x3b8>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d05e      	beq.n	8002236 <HAL_DMA_Abort_IT+0x3a2>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a34      	ldr	r2, [pc, #208]	@ (8002250 <HAL_DMA_Abort_IT+0x3bc>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d059      	beq.n	8002236 <HAL_DMA_Abort_IT+0x3a2>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a33      	ldr	r2, [pc, #204]	@ (8002254 <HAL_DMA_Abort_IT+0x3c0>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d054      	beq.n	8002236 <HAL_DMA_Abort_IT+0x3a2>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a31      	ldr	r2, [pc, #196]	@ (8002258 <HAL_DMA_Abort_IT+0x3c4>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d04f      	beq.n	8002236 <HAL_DMA_Abort_IT+0x3a2>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a30      	ldr	r2, [pc, #192]	@ (800225c <HAL_DMA_Abort_IT+0x3c8>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d04a      	beq.n	8002236 <HAL_DMA_Abort_IT+0x3a2>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a2e      	ldr	r2, [pc, #184]	@ (8002260 <HAL_DMA_Abort_IT+0x3cc>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d045      	beq.n	8002236 <HAL_DMA_Abort_IT+0x3a2>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a2d      	ldr	r2, [pc, #180]	@ (8002264 <HAL_DMA_Abort_IT+0x3d0>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d040      	beq.n	8002236 <HAL_DMA_Abort_IT+0x3a2>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a2b      	ldr	r2, [pc, #172]	@ (8002268 <HAL_DMA_Abort_IT+0x3d4>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d03b      	beq.n	8002236 <HAL_DMA_Abort_IT+0x3a2>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a2a      	ldr	r2, [pc, #168]	@ (800226c <HAL_DMA_Abort_IT+0x3d8>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d036      	beq.n	8002236 <HAL_DMA_Abort_IT+0x3a2>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a28      	ldr	r2, [pc, #160]	@ (8002270 <HAL_DMA_Abort_IT+0x3dc>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d031      	beq.n	8002236 <HAL_DMA_Abort_IT+0x3a2>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a27      	ldr	r2, [pc, #156]	@ (8002274 <HAL_DMA_Abort_IT+0x3e0>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d02c      	beq.n	8002236 <HAL_DMA_Abort_IT+0x3a2>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a25      	ldr	r2, [pc, #148]	@ (8002278 <HAL_DMA_Abort_IT+0x3e4>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d027      	beq.n	8002236 <HAL_DMA_Abort_IT+0x3a2>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a24      	ldr	r2, [pc, #144]	@ (800227c <HAL_DMA_Abort_IT+0x3e8>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d022      	beq.n	8002236 <HAL_DMA_Abort_IT+0x3a2>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a22      	ldr	r2, [pc, #136]	@ (8002280 <HAL_DMA_Abort_IT+0x3ec>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d01d      	beq.n	8002236 <HAL_DMA_Abort_IT+0x3a2>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a21      	ldr	r2, [pc, #132]	@ (8002284 <HAL_DMA_Abort_IT+0x3f0>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d018      	beq.n	8002236 <HAL_DMA_Abort_IT+0x3a2>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a1f      	ldr	r2, [pc, #124]	@ (8002288 <HAL_DMA_Abort_IT+0x3f4>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d013      	beq.n	8002236 <HAL_DMA_Abort_IT+0x3a2>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a1e      	ldr	r2, [pc, #120]	@ (800228c <HAL_DMA_Abort_IT+0x3f8>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d00e      	beq.n	8002236 <HAL_DMA_Abort_IT+0x3a2>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a1c      	ldr	r2, [pc, #112]	@ (8002290 <HAL_DMA_Abort_IT+0x3fc>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d009      	beq.n	8002236 <HAL_DMA_Abort_IT+0x3a2>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a1b      	ldr	r2, [pc, #108]	@ (8002294 <HAL_DMA_Abort_IT+0x400>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d004      	beq.n	8002236 <HAL_DMA_Abort_IT+0x3a2>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a19      	ldr	r2, [pc, #100]	@ (8002298 <HAL_DMA_Abort_IT+0x404>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d132      	bne.n	800229c <HAL_DMA_Abort_IT+0x408>
 8002236:	2301      	movs	r3, #1
 8002238:	e031      	b.n	800229e <HAL_DMA_Abort_IT+0x40a>
 800223a:	bf00      	nop
 800223c:	40020010 	.word	0x40020010
 8002240:	40020028 	.word	0x40020028
 8002244:	40020040 	.word	0x40020040
 8002248:	40020058 	.word	0x40020058
 800224c:	40020070 	.word	0x40020070
 8002250:	40020088 	.word	0x40020088
 8002254:	400200a0 	.word	0x400200a0
 8002258:	400200b8 	.word	0x400200b8
 800225c:	40020410 	.word	0x40020410
 8002260:	40020428 	.word	0x40020428
 8002264:	40020440 	.word	0x40020440
 8002268:	40020458 	.word	0x40020458
 800226c:	40020470 	.word	0x40020470
 8002270:	40020488 	.word	0x40020488
 8002274:	400204a0 	.word	0x400204a0
 8002278:	400204b8 	.word	0x400204b8
 800227c:	58025408 	.word	0x58025408
 8002280:	5802541c 	.word	0x5802541c
 8002284:	58025430 	.word	0x58025430
 8002288:	58025444 	.word	0x58025444
 800228c:	58025458 	.word	0x58025458
 8002290:	5802546c 	.word	0x5802546c
 8002294:	58025480 	.word	0x58025480
 8002298:	58025494 	.word	0x58025494
 800229c:	2300      	movs	r3, #0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d028      	beq.n	80022f4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80022b0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022b6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022bc:	f003 031f 	and.w	r3, r3, #31
 80022c0:	2201      	movs	r2, #1
 80022c2:	409a      	lsls	r2, r3
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80022d0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d00c      	beq.n	80022f4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80022e8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80022f2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002308:	2b00      	cmp	r3, #0
 800230a:	d003      	beq.n	8002314 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop

08002320 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8002320:	b480      	push	{r7}
 8002322:	b089      	sub	sp, #36	@ 0x24
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800232a:	2300      	movs	r3, #0
 800232c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800232e:	4b89      	ldr	r3, [pc, #548]	@ (8002554 <HAL_GPIO_Init+0x234>)
 8002330:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002332:	e194      	b.n	800265e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	2101      	movs	r1, #1
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	fa01 f303 	lsl.w	r3, r1, r3
 8002340:	4013      	ands	r3, r2
 8002342:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	2b00      	cmp	r3, #0
 8002348:	f000 8186 	beq.w	8002658 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f003 0303 	and.w	r3, r3, #3
 8002354:	2b01      	cmp	r3, #1
 8002356:	d005      	beq.n	8002364 <HAL_GPIO_Init+0x44>
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f003 0303 	and.w	r3, r3, #3
 8002360:	2b02      	cmp	r3, #2
 8002362:	d130      	bne.n	80023c6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	2203      	movs	r2, #3
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	43db      	mvns	r3, r3
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	4013      	ands	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	68da      	ldr	r2, [r3, #12]
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	4313      	orrs	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800239a:	2201      	movs	r2, #1
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	fa02 f303 	lsl.w	r3, r2, r3
 80023a2:	43db      	mvns	r3, r3
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	4013      	ands	r3, r2
 80023a8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	091b      	lsrs	r3, r3, #4
 80023b0:	f003 0201 	and.w	r2, r3, #1
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	4313      	orrs	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f003 0303 	and.w	r3, r3, #3
 80023ce:	2b03      	cmp	r3, #3
 80023d0:	d017      	beq.n	8002402 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	2203      	movs	r2, #3
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	43db      	mvns	r3, r3
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	4013      	ands	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	689a      	ldr	r2, [r3, #8]
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f003 0303 	and.w	r3, r3, #3
 800240a:	2b02      	cmp	r3, #2
 800240c:	d123      	bne.n	8002456 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	08da      	lsrs	r2, r3, #3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	3208      	adds	r2, #8
 8002416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800241a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	f003 0307 	and.w	r3, r3, #7
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	220f      	movs	r2, #15
 8002426:	fa02 f303 	lsl.w	r3, r2, r3
 800242a:	43db      	mvns	r3, r3
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	4013      	ands	r3, r2
 8002430:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	691a      	ldr	r2, [r3, #16]
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	f003 0307 	and.w	r3, r3, #7
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	4313      	orrs	r3, r2
 8002446:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	08da      	lsrs	r2, r3, #3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	3208      	adds	r2, #8
 8002450:	69b9      	ldr	r1, [r7, #24]
 8002452:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	2203      	movs	r2, #3
 8002462:	fa02 f303 	lsl.w	r3, r2, r3
 8002466:	43db      	mvns	r3, r3
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	4013      	ands	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f003 0203 	and.w	r2, r3, #3
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	4313      	orrs	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002492:	2b00      	cmp	r3, #0
 8002494:	f000 80e0 	beq.w	8002658 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002498:	4b2f      	ldr	r3, [pc, #188]	@ (8002558 <HAL_GPIO_Init+0x238>)
 800249a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800249e:	4a2e      	ldr	r2, [pc, #184]	@ (8002558 <HAL_GPIO_Init+0x238>)
 80024a0:	f043 0302 	orr.w	r3, r3, #2
 80024a4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80024a8:	4b2b      	ldr	r3, [pc, #172]	@ (8002558 <HAL_GPIO_Init+0x238>)
 80024aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	60fb      	str	r3, [r7, #12]
 80024b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024b6:	4a29      	ldr	r2, [pc, #164]	@ (800255c <HAL_GPIO_Init+0x23c>)
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	089b      	lsrs	r3, r3, #2
 80024bc:	3302      	adds	r3, #2
 80024be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	f003 0303 	and.w	r3, r3, #3
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	220f      	movs	r2, #15
 80024ce:	fa02 f303 	lsl.w	r3, r2, r3
 80024d2:	43db      	mvns	r3, r3
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	4013      	ands	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a20      	ldr	r2, [pc, #128]	@ (8002560 <HAL_GPIO_Init+0x240>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d052      	beq.n	8002588 <HAL_GPIO_Init+0x268>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a1f      	ldr	r2, [pc, #124]	@ (8002564 <HAL_GPIO_Init+0x244>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d031      	beq.n	800254e <HAL_GPIO_Init+0x22e>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a1e      	ldr	r2, [pc, #120]	@ (8002568 <HAL_GPIO_Init+0x248>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d02b      	beq.n	800254a <HAL_GPIO_Init+0x22a>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a1d      	ldr	r2, [pc, #116]	@ (800256c <HAL_GPIO_Init+0x24c>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d025      	beq.n	8002546 <HAL_GPIO_Init+0x226>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a1c      	ldr	r2, [pc, #112]	@ (8002570 <HAL_GPIO_Init+0x250>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d01f      	beq.n	8002542 <HAL_GPIO_Init+0x222>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a1b      	ldr	r2, [pc, #108]	@ (8002574 <HAL_GPIO_Init+0x254>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d019      	beq.n	800253e <HAL_GPIO_Init+0x21e>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a1a      	ldr	r2, [pc, #104]	@ (8002578 <HAL_GPIO_Init+0x258>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d013      	beq.n	800253a <HAL_GPIO_Init+0x21a>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a19      	ldr	r2, [pc, #100]	@ (800257c <HAL_GPIO_Init+0x25c>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d00d      	beq.n	8002536 <HAL_GPIO_Init+0x216>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a18      	ldr	r2, [pc, #96]	@ (8002580 <HAL_GPIO_Init+0x260>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d007      	beq.n	8002532 <HAL_GPIO_Init+0x212>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a17      	ldr	r2, [pc, #92]	@ (8002584 <HAL_GPIO_Init+0x264>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d101      	bne.n	800252e <HAL_GPIO_Init+0x20e>
 800252a:	2309      	movs	r3, #9
 800252c:	e02d      	b.n	800258a <HAL_GPIO_Init+0x26a>
 800252e:	230a      	movs	r3, #10
 8002530:	e02b      	b.n	800258a <HAL_GPIO_Init+0x26a>
 8002532:	2308      	movs	r3, #8
 8002534:	e029      	b.n	800258a <HAL_GPIO_Init+0x26a>
 8002536:	2307      	movs	r3, #7
 8002538:	e027      	b.n	800258a <HAL_GPIO_Init+0x26a>
 800253a:	2306      	movs	r3, #6
 800253c:	e025      	b.n	800258a <HAL_GPIO_Init+0x26a>
 800253e:	2305      	movs	r3, #5
 8002540:	e023      	b.n	800258a <HAL_GPIO_Init+0x26a>
 8002542:	2304      	movs	r3, #4
 8002544:	e021      	b.n	800258a <HAL_GPIO_Init+0x26a>
 8002546:	2303      	movs	r3, #3
 8002548:	e01f      	b.n	800258a <HAL_GPIO_Init+0x26a>
 800254a:	2302      	movs	r3, #2
 800254c:	e01d      	b.n	800258a <HAL_GPIO_Init+0x26a>
 800254e:	2301      	movs	r3, #1
 8002550:	e01b      	b.n	800258a <HAL_GPIO_Init+0x26a>
 8002552:	bf00      	nop
 8002554:	58000080 	.word	0x58000080
 8002558:	58024400 	.word	0x58024400
 800255c:	58000400 	.word	0x58000400
 8002560:	58020000 	.word	0x58020000
 8002564:	58020400 	.word	0x58020400
 8002568:	58020800 	.word	0x58020800
 800256c:	58020c00 	.word	0x58020c00
 8002570:	58021000 	.word	0x58021000
 8002574:	58021400 	.word	0x58021400
 8002578:	58021800 	.word	0x58021800
 800257c:	58021c00 	.word	0x58021c00
 8002580:	58022000 	.word	0x58022000
 8002584:	58022400 	.word	0x58022400
 8002588:	2300      	movs	r3, #0
 800258a:	69fa      	ldr	r2, [r7, #28]
 800258c:	f002 0203 	and.w	r2, r2, #3
 8002590:	0092      	lsls	r2, r2, #2
 8002592:	4093      	lsls	r3, r2
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	4313      	orrs	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800259a:	4938      	ldr	r1, [pc, #224]	@ (800267c <HAL_GPIO_Init+0x35c>)
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	089b      	lsrs	r3, r3, #2
 80025a0:	3302      	adds	r3, #2
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80025a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	43db      	mvns	r3, r3
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	4013      	ands	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d003      	beq.n	80025ce <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80025ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80025d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	43db      	mvns	r3, r3
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	4013      	ands	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d003      	beq.n	80025fc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80025fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	43db      	mvns	r3, r3
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	4013      	ands	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d003      	beq.n	8002628 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	4313      	orrs	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	43db      	mvns	r3, r3
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4013      	ands	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d003      	beq.n	8002652 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	4313      	orrs	r3, r2
 8002650:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	3301      	adds	r3, #1
 800265c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	fa22 f303 	lsr.w	r3, r2, r3
 8002668:	2b00      	cmp	r3, #0
 800266a:	f47f ae63 	bne.w	8002334 <HAL_GPIO_Init+0x14>
  }
}
 800266e:	bf00      	nop
 8002670:	bf00      	nop
 8002672:	3724      	adds	r7, #36	@ 0x24
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr
 800267c:	58000400 	.word	0x58000400

08002680 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002680:	b480      	push	{r7}
 8002682:	b085      	sub	sp, #20
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	460b      	mov	r3, r1
 800268a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	691a      	ldr	r2, [r3, #16]
 8002690:	887b      	ldrh	r3, [r7, #2]
 8002692:	4013      	ands	r3, r2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d002      	beq.n	800269e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002698:	2301      	movs	r3, #1
 800269a:	73fb      	strb	r3, [r7, #15]
 800269c:	e001      	b.n	80026a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800269e:	2300      	movs	r3, #0
 80026a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80026a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3714      	adds	r7, #20
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	460b      	mov	r3, r1
 80026ba:	807b      	strh	r3, [r7, #2]
 80026bc:	4613      	mov	r3, r2
 80026be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026c0:	787b      	ldrb	r3, [r7, #1]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d003      	beq.n	80026ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026c6:	887a      	ldrh	r2, [r7, #2]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80026cc:	e003      	b.n	80026d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80026ce:	887b      	ldrh	r3, [r7, #2]
 80026d0:	041a      	lsls	r2, r3, #16
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	619a      	str	r2, [r3, #24]
}
 80026d6:	bf00      	nop
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr

080026e2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80026e2:	b480      	push	{r7}
 80026e4:	b085      	sub	sp, #20
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
 80026ea:	460b      	mov	r3, r1
 80026ec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80026f4:	887a      	ldrh	r2, [r7, #2]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	4013      	ands	r3, r2
 80026fa:	041a      	lsls	r2, r3, #16
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	43d9      	mvns	r1, r3
 8002700:	887b      	ldrh	r3, [r7, #2]
 8002702:	400b      	ands	r3, r1
 8002704:	431a      	orrs	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	619a      	str	r2, [r3, #24]
}
 800270a:	bf00      	nop
 800270c:	3714      	adds	r7, #20
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr

08002716 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002716:	b580      	push	{r7, lr}
 8002718:	b082      	sub	sp, #8
 800271a:	af00      	add	r7, sp, #0
 800271c:	4603      	mov	r3, r0
 800271e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8002720:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002724:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002728:	88fb      	ldrh	r3, [r7, #6]
 800272a:	4013      	ands	r3, r2
 800272c:	2b00      	cmp	r3, #0
 800272e:	d008      	beq.n	8002742 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002730:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002734:	88fb      	ldrh	r3, [r7, #6]
 8002736:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800273a:	88fb      	ldrh	r3, [r7, #6]
 800273c:	4618      	mov	r0, r3
 800273e:	f000 f804 	bl	800274a <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8002742:	bf00      	nop
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800274a:	b480      	push	{r7}
 800274c:	b083      	sub	sp, #12
 800274e:	af00      	add	r7, sp, #0
 8002750:	4603      	mov	r3, r0
 8002752:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002768:	4b19      	ldr	r3, [pc, #100]	@ (80027d0 <HAL_PWREx_ConfigSupply+0x70>)
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	f003 0304 	and.w	r3, r3, #4
 8002770:	2b04      	cmp	r3, #4
 8002772:	d00a      	beq.n	800278a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002774:	4b16      	ldr	r3, [pc, #88]	@ (80027d0 <HAL_PWREx_ConfigSupply+0x70>)
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	f003 0307 	and.w	r3, r3, #7
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	429a      	cmp	r2, r3
 8002780:	d001      	beq.n	8002786 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e01f      	b.n	80027c6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002786:	2300      	movs	r3, #0
 8002788:	e01d      	b.n	80027c6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800278a:	4b11      	ldr	r3, [pc, #68]	@ (80027d0 <HAL_PWREx_ConfigSupply+0x70>)
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	f023 0207 	bic.w	r2, r3, #7
 8002792:	490f      	ldr	r1, [pc, #60]	@ (80027d0 <HAL_PWREx_ConfigSupply+0x70>)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4313      	orrs	r3, r2
 8002798:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800279a:	f7fe fe99 	bl	80014d0 <HAL_GetTick>
 800279e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80027a0:	e009      	b.n	80027b6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80027a2:	f7fe fe95 	bl	80014d0 <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80027b0:	d901      	bls.n	80027b6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e007      	b.n	80027c6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80027b6:	4b06      	ldr	r3, [pc, #24]	@ (80027d0 <HAL_PWREx_ConfigSupply+0x70>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027c2:	d1ee      	bne.n	80027a2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3710      	adds	r7, #16
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	58024800 	.word	0x58024800

080027d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b08c      	sub	sp, #48	@ 0x30
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d102      	bne.n	80027e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	f000 bc48 	b.w	8003078 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0301 	and.w	r3, r3, #1
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	f000 8088 	beq.w	8002906 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027f6:	4b99      	ldr	r3, [pc, #612]	@ (8002a5c <HAL_RCC_OscConfig+0x288>)
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80027fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002800:	4b96      	ldr	r3, [pc, #600]	@ (8002a5c <HAL_RCC_OscConfig+0x288>)
 8002802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002804:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002808:	2b10      	cmp	r3, #16
 800280a:	d007      	beq.n	800281c <HAL_RCC_OscConfig+0x48>
 800280c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800280e:	2b18      	cmp	r3, #24
 8002810:	d111      	bne.n	8002836 <HAL_RCC_OscConfig+0x62>
 8002812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002814:	f003 0303 	and.w	r3, r3, #3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d10c      	bne.n	8002836 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800281c:	4b8f      	ldr	r3, [pc, #572]	@ (8002a5c <HAL_RCC_OscConfig+0x288>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d06d      	beq.n	8002904 <HAL_RCC_OscConfig+0x130>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d169      	bne.n	8002904 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	f000 bc21 	b.w	8003078 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800283e:	d106      	bne.n	800284e <HAL_RCC_OscConfig+0x7a>
 8002840:	4b86      	ldr	r3, [pc, #536]	@ (8002a5c <HAL_RCC_OscConfig+0x288>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a85      	ldr	r2, [pc, #532]	@ (8002a5c <HAL_RCC_OscConfig+0x288>)
 8002846:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800284a:	6013      	str	r3, [r2, #0]
 800284c:	e02e      	b.n	80028ac <HAL_RCC_OscConfig+0xd8>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d10c      	bne.n	8002870 <HAL_RCC_OscConfig+0x9c>
 8002856:	4b81      	ldr	r3, [pc, #516]	@ (8002a5c <HAL_RCC_OscConfig+0x288>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a80      	ldr	r2, [pc, #512]	@ (8002a5c <HAL_RCC_OscConfig+0x288>)
 800285c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002860:	6013      	str	r3, [r2, #0]
 8002862:	4b7e      	ldr	r3, [pc, #504]	@ (8002a5c <HAL_RCC_OscConfig+0x288>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a7d      	ldr	r2, [pc, #500]	@ (8002a5c <HAL_RCC_OscConfig+0x288>)
 8002868:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800286c:	6013      	str	r3, [r2, #0]
 800286e:	e01d      	b.n	80028ac <HAL_RCC_OscConfig+0xd8>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002878:	d10c      	bne.n	8002894 <HAL_RCC_OscConfig+0xc0>
 800287a:	4b78      	ldr	r3, [pc, #480]	@ (8002a5c <HAL_RCC_OscConfig+0x288>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a77      	ldr	r2, [pc, #476]	@ (8002a5c <HAL_RCC_OscConfig+0x288>)
 8002880:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002884:	6013      	str	r3, [r2, #0]
 8002886:	4b75      	ldr	r3, [pc, #468]	@ (8002a5c <HAL_RCC_OscConfig+0x288>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a74      	ldr	r2, [pc, #464]	@ (8002a5c <HAL_RCC_OscConfig+0x288>)
 800288c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002890:	6013      	str	r3, [r2, #0]
 8002892:	e00b      	b.n	80028ac <HAL_RCC_OscConfig+0xd8>
 8002894:	4b71      	ldr	r3, [pc, #452]	@ (8002a5c <HAL_RCC_OscConfig+0x288>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a70      	ldr	r2, [pc, #448]	@ (8002a5c <HAL_RCC_OscConfig+0x288>)
 800289a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800289e:	6013      	str	r3, [r2, #0]
 80028a0:	4b6e      	ldr	r3, [pc, #440]	@ (8002a5c <HAL_RCC_OscConfig+0x288>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a6d      	ldr	r2, [pc, #436]	@ (8002a5c <HAL_RCC_OscConfig+0x288>)
 80028a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d013      	beq.n	80028dc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b4:	f7fe fe0c 	bl	80014d0 <HAL_GetTick>
 80028b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028ba:	e008      	b.n	80028ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028bc:	f7fe fe08 	bl	80014d0 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b64      	cmp	r3, #100	@ 0x64
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e3d4      	b.n	8003078 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028ce:	4b63      	ldr	r3, [pc, #396]	@ (8002a5c <HAL_RCC_OscConfig+0x288>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d0f0      	beq.n	80028bc <HAL_RCC_OscConfig+0xe8>
 80028da:	e014      	b.n	8002906 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028dc:	f7fe fdf8 	bl	80014d0 <HAL_GetTick>
 80028e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80028e2:	e008      	b.n	80028f6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028e4:	f7fe fdf4 	bl	80014d0 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b64      	cmp	r3, #100	@ 0x64
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e3c0      	b.n	8003078 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80028f6:	4b59      	ldr	r3, [pc, #356]	@ (8002a5c <HAL_RCC_OscConfig+0x288>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d1f0      	bne.n	80028e4 <HAL_RCC_OscConfig+0x110>
 8002902:	e000      	b.n	8002906 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002904:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b00      	cmp	r3, #0
 8002910:	f000 80ca 	beq.w	8002aa8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002914:	4b51      	ldr	r3, [pc, #324]	@ (8002a5c <HAL_RCC_OscConfig+0x288>)
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800291c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800291e:	4b4f      	ldr	r3, [pc, #316]	@ (8002a5c <HAL_RCC_OscConfig+0x288>)
 8002920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002922:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002924:	6a3b      	ldr	r3, [r7, #32]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d007      	beq.n	800293a <HAL_RCC_OscConfig+0x166>
 800292a:	6a3b      	ldr	r3, [r7, #32]
 800292c:	2b18      	cmp	r3, #24
 800292e:	d156      	bne.n	80029de <HAL_RCC_OscConfig+0x20a>
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	f003 0303 	and.w	r3, r3, #3
 8002936:	2b00      	cmp	r3, #0
 8002938:	d151      	bne.n	80029de <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800293a:	4b48      	ldr	r3, [pc, #288]	@ (8002a5c <HAL_RCC_OscConfig+0x288>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0304 	and.w	r3, r3, #4
 8002942:	2b00      	cmp	r3, #0
 8002944:	d005      	beq.n	8002952 <HAL_RCC_OscConfig+0x17e>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d101      	bne.n	8002952 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e392      	b.n	8003078 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002952:	4b42      	ldr	r3, [pc, #264]	@ (8002a5c <HAL_RCC_OscConfig+0x288>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f023 0219 	bic.w	r2, r3, #25
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	493f      	ldr	r1, [pc, #252]	@ (8002a5c <HAL_RCC_OscConfig+0x288>)
 8002960:	4313      	orrs	r3, r2
 8002962:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002964:	f7fe fdb4 	bl	80014d0 <HAL_GetTick>
 8002968:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800296a:	e008      	b.n	800297e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800296c:	f7fe fdb0 	bl	80014d0 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e37c      	b.n	8003078 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800297e:	4b37      	ldr	r3, [pc, #220]	@ (8002a5c <HAL_RCC_OscConfig+0x288>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0304 	and.w	r3, r3, #4
 8002986:	2b00      	cmp	r3, #0
 8002988:	d0f0      	beq.n	800296c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800298a:	f7fe fdd1 	bl	8001530 <HAL_GetREVID>
 800298e:	4603      	mov	r3, r0
 8002990:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002994:	4293      	cmp	r3, r2
 8002996:	d817      	bhi.n	80029c8 <HAL_RCC_OscConfig+0x1f4>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	691b      	ldr	r3, [r3, #16]
 800299c:	2b40      	cmp	r3, #64	@ 0x40
 800299e:	d108      	bne.n	80029b2 <HAL_RCC_OscConfig+0x1de>
 80029a0:	4b2e      	ldr	r3, [pc, #184]	@ (8002a5c <HAL_RCC_OscConfig+0x288>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80029a8:	4a2c      	ldr	r2, [pc, #176]	@ (8002a5c <HAL_RCC_OscConfig+0x288>)
 80029aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029ae:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029b0:	e07a      	b.n	8002aa8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029b2:	4b2a      	ldr	r3, [pc, #168]	@ (8002a5c <HAL_RCC_OscConfig+0x288>)
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	031b      	lsls	r3, r3, #12
 80029c0:	4926      	ldr	r1, [pc, #152]	@ (8002a5c <HAL_RCC_OscConfig+0x288>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029c6:	e06f      	b.n	8002aa8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029c8:	4b24      	ldr	r3, [pc, #144]	@ (8002a5c <HAL_RCC_OscConfig+0x288>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	061b      	lsls	r3, r3, #24
 80029d6:	4921      	ldr	r1, [pc, #132]	@ (8002a5c <HAL_RCC_OscConfig+0x288>)
 80029d8:	4313      	orrs	r3, r2
 80029da:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029dc:	e064      	b.n	8002aa8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d047      	beq.n	8002a76 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80029e6:	4b1d      	ldr	r3, [pc, #116]	@ (8002a5c <HAL_RCC_OscConfig+0x288>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f023 0219 	bic.w	r2, r3, #25
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	491a      	ldr	r1, [pc, #104]	@ (8002a5c <HAL_RCC_OscConfig+0x288>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f8:	f7fe fd6a 	bl	80014d0 <HAL_GetTick>
 80029fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029fe:	e008      	b.n	8002a12 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a00:	f7fe fd66 	bl	80014d0 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e332      	b.n	8003078 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a12:	4b12      	ldr	r3, [pc, #72]	@ (8002a5c <HAL_RCC_OscConfig+0x288>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0304 	and.w	r3, r3, #4
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d0f0      	beq.n	8002a00 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a1e:	f7fe fd87 	bl	8001530 <HAL_GetREVID>
 8002a22:	4603      	mov	r3, r0
 8002a24:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d819      	bhi.n	8002a60 <HAL_RCC_OscConfig+0x28c>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	2b40      	cmp	r3, #64	@ 0x40
 8002a32:	d108      	bne.n	8002a46 <HAL_RCC_OscConfig+0x272>
 8002a34:	4b09      	ldr	r3, [pc, #36]	@ (8002a5c <HAL_RCC_OscConfig+0x288>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002a3c:	4a07      	ldr	r2, [pc, #28]	@ (8002a5c <HAL_RCC_OscConfig+0x288>)
 8002a3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a42:	6053      	str	r3, [r2, #4]
 8002a44:	e030      	b.n	8002aa8 <HAL_RCC_OscConfig+0x2d4>
 8002a46:	4b05      	ldr	r3, [pc, #20]	@ (8002a5c <HAL_RCC_OscConfig+0x288>)
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	031b      	lsls	r3, r3, #12
 8002a54:	4901      	ldr	r1, [pc, #4]	@ (8002a5c <HAL_RCC_OscConfig+0x288>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	604b      	str	r3, [r1, #4]
 8002a5a:	e025      	b.n	8002aa8 <HAL_RCC_OscConfig+0x2d4>
 8002a5c:	58024400 	.word	0x58024400
 8002a60:	4b9a      	ldr	r3, [pc, #616]	@ (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	691b      	ldr	r3, [r3, #16]
 8002a6c:	061b      	lsls	r3, r3, #24
 8002a6e:	4997      	ldr	r1, [pc, #604]	@ (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	604b      	str	r3, [r1, #4]
 8002a74:	e018      	b.n	8002aa8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a76:	4b95      	ldr	r3, [pc, #596]	@ (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a94      	ldr	r2, [pc, #592]	@ (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002a7c:	f023 0301 	bic.w	r3, r3, #1
 8002a80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a82:	f7fe fd25 	bl	80014d0 <HAL_GetTick>
 8002a86:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a88:	e008      	b.n	8002a9c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a8a:	f7fe fd21 	bl	80014d0 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d901      	bls.n	8002a9c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e2ed      	b.n	8003078 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a9c:	4b8b      	ldr	r3, [pc, #556]	@ (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0304 	and.w	r3, r3, #4
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d1f0      	bne.n	8002a8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0310 	and.w	r3, r3, #16
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	f000 80a9 	beq.w	8002c08 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ab6:	4b85      	ldr	r3, [pc, #532]	@ (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002abe:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002ac0:	4b82      	ldr	r3, [pc, #520]	@ (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ac4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	2b08      	cmp	r3, #8
 8002aca:	d007      	beq.n	8002adc <HAL_RCC_OscConfig+0x308>
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	2b18      	cmp	r3, #24
 8002ad0:	d13a      	bne.n	8002b48 <HAL_RCC_OscConfig+0x374>
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	f003 0303 	and.w	r3, r3, #3
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d135      	bne.n	8002b48 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002adc:	4b7b      	ldr	r3, [pc, #492]	@ (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d005      	beq.n	8002af4 <HAL_RCC_OscConfig+0x320>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	69db      	ldr	r3, [r3, #28]
 8002aec:	2b80      	cmp	r3, #128	@ 0x80
 8002aee:	d001      	beq.n	8002af4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e2c1      	b.n	8003078 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002af4:	f7fe fd1c 	bl	8001530 <HAL_GetREVID>
 8002af8:	4603      	mov	r3, r0
 8002afa:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d817      	bhi.n	8002b32 <HAL_RCC_OscConfig+0x35e>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a1b      	ldr	r3, [r3, #32]
 8002b06:	2b20      	cmp	r3, #32
 8002b08:	d108      	bne.n	8002b1c <HAL_RCC_OscConfig+0x348>
 8002b0a:	4b70      	ldr	r3, [pc, #448]	@ (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002b12:	4a6e      	ldr	r2, [pc, #440]	@ (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002b14:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002b18:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b1a:	e075      	b.n	8002c08 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b1c:	4b6b      	ldr	r3, [pc, #428]	@ (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a1b      	ldr	r3, [r3, #32]
 8002b28:	069b      	lsls	r3, r3, #26
 8002b2a:	4968      	ldr	r1, [pc, #416]	@ (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b30:	e06a      	b.n	8002c08 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b32:	4b66      	ldr	r3, [pc, #408]	@ (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a1b      	ldr	r3, [r3, #32]
 8002b3e:	061b      	lsls	r3, r3, #24
 8002b40:	4962      	ldr	r1, [pc, #392]	@ (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b46:	e05f      	b.n	8002c08 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	69db      	ldr	r3, [r3, #28]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d042      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002b50:	4b5e      	ldr	r3, [pc, #376]	@ (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a5d      	ldr	r2, [pc, #372]	@ (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002b56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b5c:	f7fe fcb8 	bl	80014d0 <HAL_GetTick>
 8002b60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b62:	e008      	b.n	8002b76 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002b64:	f7fe fcb4 	bl	80014d0 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e280      	b.n	8003078 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b76:	4b55      	ldr	r3, [pc, #340]	@ (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d0f0      	beq.n	8002b64 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b82:	f7fe fcd5 	bl	8001530 <HAL_GetREVID>
 8002b86:	4603      	mov	r3, r0
 8002b88:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d817      	bhi.n	8002bc0 <HAL_RCC_OscConfig+0x3ec>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a1b      	ldr	r3, [r3, #32]
 8002b94:	2b20      	cmp	r3, #32
 8002b96:	d108      	bne.n	8002baa <HAL_RCC_OscConfig+0x3d6>
 8002b98:	4b4c      	ldr	r3, [pc, #304]	@ (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002ba0:	4a4a      	ldr	r2, [pc, #296]	@ (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002ba2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002ba6:	6053      	str	r3, [r2, #4]
 8002ba8:	e02e      	b.n	8002c08 <HAL_RCC_OscConfig+0x434>
 8002baa:	4b48      	ldr	r3, [pc, #288]	@ (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a1b      	ldr	r3, [r3, #32]
 8002bb6:	069b      	lsls	r3, r3, #26
 8002bb8:	4944      	ldr	r1, [pc, #272]	@ (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	604b      	str	r3, [r1, #4]
 8002bbe:	e023      	b.n	8002c08 <HAL_RCC_OscConfig+0x434>
 8002bc0:	4b42      	ldr	r3, [pc, #264]	@ (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a1b      	ldr	r3, [r3, #32]
 8002bcc:	061b      	lsls	r3, r3, #24
 8002bce:	493f      	ldr	r1, [pc, #252]	@ (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	60cb      	str	r3, [r1, #12]
 8002bd4:	e018      	b.n	8002c08 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002bd6:	4b3d      	ldr	r3, [pc, #244]	@ (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a3c      	ldr	r2, [pc, #240]	@ (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002bdc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002be0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be2:	f7fe fc75 	bl	80014d0 <HAL_GetTick>
 8002be6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002be8:	e008      	b.n	8002bfc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002bea:	f7fe fc71 	bl	80014d0 <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d901      	bls.n	8002bfc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e23d      	b.n	8003078 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002bfc:	4b33      	ldr	r3, [pc, #204]	@ (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d1f0      	bne.n	8002bea <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0308 	and.w	r3, r3, #8
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d036      	beq.n	8002c82 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	695b      	ldr	r3, [r3, #20]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d019      	beq.n	8002c50 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c1c:	4b2b      	ldr	r3, [pc, #172]	@ (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002c1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c20:	4a2a      	ldr	r2, [pc, #168]	@ (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002c22:	f043 0301 	orr.w	r3, r3, #1
 8002c26:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c28:	f7fe fc52 	bl	80014d0 <HAL_GetTick>
 8002c2c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c2e:	e008      	b.n	8002c42 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c30:	f7fe fc4e 	bl	80014d0 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d901      	bls.n	8002c42 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e21a      	b.n	8003078 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c42:	4b22      	ldr	r3, [pc, #136]	@ (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002c44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d0f0      	beq.n	8002c30 <HAL_RCC_OscConfig+0x45c>
 8002c4e:	e018      	b.n	8002c82 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c50:	4b1e      	ldr	r3, [pc, #120]	@ (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002c52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c54:	4a1d      	ldr	r2, [pc, #116]	@ (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002c56:	f023 0301 	bic.w	r3, r3, #1
 8002c5a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c5c:	f7fe fc38 	bl	80014d0 <HAL_GetTick>
 8002c60:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c62:	e008      	b.n	8002c76 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c64:	f7fe fc34 	bl	80014d0 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d901      	bls.n	8002c76 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e200      	b.n	8003078 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c76:	4b15      	ldr	r3, [pc, #84]	@ (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002c78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d1f0      	bne.n	8002c64 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0320 	and.w	r3, r3, #32
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d039      	beq.n	8002d02 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	699b      	ldr	r3, [r3, #24]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d01c      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c96:	4b0d      	ldr	r3, [pc, #52]	@ (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a0c      	ldr	r2, [pc, #48]	@ (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002c9c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002ca0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002ca2:	f7fe fc15 	bl	80014d0 <HAL_GetTick>
 8002ca6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002ca8:	e008      	b.n	8002cbc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002caa:	f7fe fc11 	bl	80014d0 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d901      	bls.n	8002cbc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e1dd      	b.n	8003078 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002cbc:	4b03      	ldr	r3, [pc, #12]	@ (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d0f0      	beq.n	8002caa <HAL_RCC_OscConfig+0x4d6>
 8002cc8:	e01b      	b.n	8002d02 <HAL_RCC_OscConfig+0x52e>
 8002cca:	bf00      	nop
 8002ccc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002cd0:	4b9b      	ldr	r3, [pc, #620]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a9a      	ldr	r2, [pc, #616]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002cd6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002cda:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002cdc:	f7fe fbf8 	bl	80014d0 <HAL_GetTick>
 8002ce0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002ce2:	e008      	b.n	8002cf6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ce4:	f7fe fbf4 	bl	80014d0 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e1c0      	b.n	8003078 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002cf6:	4b92      	ldr	r3, [pc, #584]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1f0      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0304 	and.w	r3, r3, #4
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f000 8081 	beq.w	8002e12 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002d10:	4b8c      	ldr	r3, [pc, #560]	@ (8002f44 <HAL_RCC_OscConfig+0x770>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a8b      	ldr	r2, [pc, #556]	@ (8002f44 <HAL_RCC_OscConfig+0x770>)
 8002d16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d1a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d1c:	f7fe fbd8 	bl	80014d0 <HAL_GetTick>
 8002d20:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d22:	e008      	b.n	8002d36 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d24:	f7fe fbd4 	bl	80014d0 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b64      	cmp	r3, #100	@ 0x64
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e1a0      	b.n	8003078 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d36:	4b83      	ldr	r3, [pc, #524]	@ (8002f44 <HAL_RCC_OscConfig+0x770>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d0f0      	beq.n	8002d24 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d106      	bne.n	8002d58 <HAL_RCC_OscConfig+0x584>
 8002d4a:	4b7d      	ldr	r3, [pc, #500]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002d4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d4e:	4a7c      	ldr	r2, [pc, #496]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002d50:	f043 0301 	orr.w	r3, r3, #1
 8002d54:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d56:	e02d      	b.n	8002db4 <HAL_RCC_OscConfig+0x5e0>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d10c      	bne.n	8002d7a <HAL_RCC_OscConfig+0x5a6>
 8002d60:	4b77      	ldr	r3, [pc, #476]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002d62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d64:	4a76      	ldr	r2, [pc, #472]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002d66:	f023 0301 	bic.w	r3, r3, #1
 8002d6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d6c:	4b74      	ldr	r3, [pc, #464]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002d6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d70:	4a73      	ldr	r2, [pc, #460]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002d72:	f023 0304 	bic.w	r3, r3, #4
 8002d76:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d78:	e01c      	b.n	8002db4 <HAL_RCC_OscConfig+0x5e0>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	2b05      	cmp	r3, #5
 8002d80:	d10c      	bne.n	8002d9c <HAL_RCC_OscConfig+0x5c8>
 8002d82:	4b6f      	ldr	r3, [pc, #444]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002d84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d86:	4a6e      	ldr	r2, [pc, #440]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002d88:	f043 0304 	orr.w	r3, r3, #4
 8002d8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d8e:	4b6c      	ldr	r3, [pc, #432]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002d90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d92:	4a6b      	ldr	r2, [pc, #428]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002d94:	f043 0301 	orr.w	r3, r3, #1
 8002d98:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d9a:	e00b      	b.n	8002db4 <HAL_RCC_OscConfig+0x5e0>
 8002d9c:	4b68      	ldr	r3, [pc, #416]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002d9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002da0:	4a67      	ldr	r2, [pc, #412]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002da2:	f023 0301 	bic.w	r3, r3, #1
 8002da6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002da8:	4b65      	ldr	r3, [pc, #404]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002daa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dac:	4a64      	ldr	r2, [pc, #400]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002dae:	f023 0304 	bic.w	r3, r3, #4
 8002db2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d015      	beq.n	8002de8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dbc:	f7fe fb88 	bl	80014d0 <HAL_GetTick>
 8002dc0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002dc2:	e00a      	b.n	8002dda <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dc4:	f7fe fb84 	bl	80014d0 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e14e      	b.n	8003078 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002dda:	4b59      	ldr	r3, [pc, #356]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002ddc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d0ee      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x5f0>
 8002de6:	e014      	b.n	8002e12 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de8:	f7fe fb72 	bl	80014d0 <HAL_GetTick>
 8002dec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002dee:	e00a      	b.n	8002e06 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002df0:	f7fe fb6e 	bl	80014d0 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e138      	b.n	8003078 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002e06:	4b4e      	ldr	r3, [pc, #312]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002e08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1ee      	bne.n	8002df0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	f000 812d 	beq.w	8003076 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002e1c:	4b48      	ldr	r3, [pc, #288]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002e1e:	691b      	ldr	r3, [r3, #16]
 8002e20:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e24:	2b18      	cmp	r3, #24
 8002e26:	f000 80bd 	beq.w	8002fa4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	f040 809e 	bne.w	8002f70 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e34:	4b42      	ldr	r3, [pc, #264]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a41      	ldr	r2, [pc, #260]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002e3a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e40:	f7fe fb46 	bl	80014d0 <HAL_GetTick>
 8002e44:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e46:	e008      	b.n	8002e5a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e48:	f7fe fb42 	bl	80014d0 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e10e      	b.n	8003078 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e5a:	4b39      	ldr	r3, [pc, #228]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1f0      	bne.n	8002e48 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e66:	4b36      	ldr	r3, [pc, #216]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002e68:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e6a:	4b37      	ldr	r3, [pc, #220]	@ (8002f48 <HAL_RCC_OscConfig+0x774>)
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002e76:	0112      	lsls	r2, r2, #4
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	4931      	ldr	r1, [pc, #196]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	628b      	str	r3, [r1, #40]	@ 0x28
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e84:	3b01      	subs	r3, #1
 8002e86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	025b      	lsls	r3, r3, #9
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	431a      	orrs	r2, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	041b      	lsls	r3, r3, #16
 8002e9e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002ea2:	431a      	orrs	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ea8:	3b01      	subs	r3, #1
 8002eaa:	061b      	lsls	r3, r3, #24
 8002eac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002eb0:	4923      	ldr	r1, [pc, #140]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002eb6:	4b22      	ldr	r3, [pc, #136]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eba:	4a21      	ldr	r2, [pc, #132]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002ebc:	f023 0301 	bic.w	r3, r3, #1
 8002ec0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002ec2:	4b1f      	ldr	r3, [pc, #124]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002ec4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ec6:	4b21      	ldr	r3, [pc, #132]	@ (8002f4c <HAL_RCC_OscConfig+0x778>)
 8002ec8:	4013      	ands	r3, r2
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002ece:	00d2      	lsls	r2, r2, #3
 8002ed0:	491b      	ldr	r1, [pc, #108]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002ed6:	4b1a      	ldr	r3, [pc, #104]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eda:	f023 020c 	bic.w	r2, r3, #12
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee2:	4917      	ldr	r1, [pc, #92]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002ee8:	4b15      	ldr	r3, [pc, #84]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eec:	f023 0202 	bic.w	r2, r3, #2
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ef4:	4912      	ldr	r1, [pc, #72]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002efa:	4b11      	ldr	r3, [pc, #68]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002efe:	4a10      	ldr	r2, [pc, #64]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002f00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f04:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f06:	4b0e      	ldr	r3, [pc, #56]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f0a:	4a0d      	ldr	r2, [pc, #52]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002f0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f10:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002f12:	4b0b      	ldr	r3, [pc, #44]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f16:	4a0a      	ldr	r2, [pc, #40]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002f18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002f1e:	4b08      	ldr	r3, [pc, #32]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f22:	4a07      	ldr	r2, [pc, #28]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002f24:	f043 0301 	orr.w	r3, r3, #1
 8002f28:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f2a:	4b05      	ldr	r3, [pc, #20]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a04      	ldr	r2, [pc, #16]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002f30:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f36:	f7fe facb 	bl	80014d0 <HAL_GetTick>
 8002f3a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f3c:	e011      	b.n	8002f62 <HAL_RCC_OscConfig+0x78e>
 8002f3e:	bf00      	nop
 8002f40:	58024400 	.word	0x58024400
 8002f44:	58024800 	.word	0x58024800
 8002f48:	fffffc0c 	.word	0xfffffc0c
 8002f4c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f50:	f7fe fabe 	bl	80014d0 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e08a      	b.n	8003078 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f62:	4b47      	ldr	r3, [pc, #284]	@ (8003080 <HAL_RCC_OscConfig+0x8ac>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d0f0      	beq.n	8002f50 <HAL_RCC_OscConfig+0x77c>
 8002f6e:	e082      	b.n	8003076 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f70:	4b43      	ldr	r3, [pc, #268]	@ (8003080 <HAL_RCC_OscConfig+0x8ac>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a42      	ldr	r2, [pc, #264]	@ (8003080 <HAL_RCC_OscConfig+0x8ac>)
 8002f76:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f7c:	f7fe faa8 	bl	80014d0 <HAL_GetTick>
 8002f80:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f82:	e008      	b.n	8002f96 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f84:	f7fe faa4 	bl	80014d0 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d901      	bls.n	8002f96 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e070      	b.n	8003078 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f96:	4b3a      	ldr	r3, [pc, #232]	@ (8003080 <HAL_RCC_OscConfig+0x8ac>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1f0      	bne.n	8002f84 <HAL_RCC_OscConfig+0x7b0>
 8002fa2:	e068      	b.n	8003076 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002fa4:	4b36      	ldr	r3, [pc, #216]	@ (8003080 <HAL_RCC_OscConfig+0x8ac>)
 8002fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fa8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002faa:	4b35      	ldr	r3, [pc, #212]	@ (8003080 <HAL_RCC_OscConfig+0x8ac>)
 8002fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fae:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d031      	beq.n	800301c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	f003 0203 	and.w	r2, r3, #3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d12a      	bne.n	800301c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	091b      	lsrs	r3, r3, #4
 8002fca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d122      	bne.n	800301c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fe0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d11a      	bne.n	800301c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	0a5b      	lsrs	r3, r3, #9
 8002fea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ff2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d111      	bne.n	800301c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	0c1b      	lsrs	r3, r3, #16
 8002ffc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003004:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003006:	429a      	cmp	r2, r3
 8003008:	d108      	bne.n	800301c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	0e1b      	lsrs	r3, r3, #24
 800300e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003016:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003018:	429a      	cmp	r2, r3
 800301a:	d001      	beq.n	8003020 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e02b      	b.n	8003078 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003020:	4b17      	ldr	r3, [pc, #92]	@ (8003080 <HAL_RCC_OscConfig+0x8ac>)
 8003022:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003024:	08db      	lsrs	r3, r3, #3
 8003026:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800302a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003030:	693a      	ldr	r2, [r7, #16]
 8003032:	429a      	cmp	r2, r3
 8003034:	d01f      	beq.n	8003076 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003036:	4b12      	ldr	r3, [pc, #72]	@ (8003080 <HAL_RCC_OscConfig+0x8ac>)
 8003038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800303a:	4a11      	ldr	r2, [pc, #68]	@ (8003080 <HAL_RCC_OscConfig+0x8ac>)
 800303c:	f023 0301 	bic.w	r3, r3, #1
 8003040:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003042:	f7fe fa45 	bl	80014d0 <HAL_GetTick>
 8003046:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003048:	bf00      	nop
 800304a:	f7fe fa41 	bl	80014d0 <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003052:	4293      	cmp	r3, r2
 8003054:	d0f9      	beq.n	800304a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003056:	4b0a      	ldr	r3, [pc, #40]	@ (8003080 <HAL_RCC_OscConfig+0x8ac>)
 8003058:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800305a:	4b0a      	ldr	r3, [pc, #40]	@ (8003084 <HAL_RCC_OscConfig+0x8b0>)
 800305c:	4013      	ands	r3, r2
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003062:	00d2      	lsls	r2, r2, #3
 8003064:	4906      	ldr	r1, [pc, #24]	@ (8003080 <HAL_RCC_OscConfig+0x8ac>)
 8003066:	4313      	orrs	r3, r2
 8003068:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800306a:	4b05      	ldr	r3, [pc, #20]	@ (8003080 <HAL_RCC_OscConfig+0x8ac>)
 800306c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800306e:	4a04      	ldr	r2, [pc, #16]	@ (8003080 <HAL_RCC_OscConfig+0x8ac>)
 8003070:	f043 0301 	orr.w	r3, r3, #1
 8003074:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	3730      	adds	r7, #48	@ 0x30
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	58024400 	.word	0x58024400
 8003084:	ffff0007 	.word	0xffff0007

08003088 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b086      	sub	sp, #24
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d101      	bne.n	800309c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e19c      	b.n	80033d6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800309c:	4b8a      	ldr	r3, [pc, #552]	@ (80032c8 <HAL_RCC_ClockConfig+0x240>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 030f 	and.w	r3, r3, #15
 80030a4:	683a      	ldr	r2, [r7, #0]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d910      	bls.n	80030cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030aa:	4b87      	ldr	r3, [pc, #540]	@ (80032c8 <HAL_RCC_ClockConfig+0x240>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f023 020f 	bic.w	r2, r3, #15
 80030b2:	4985      	ldr	r1, [pc, #532]	@ (80032c8 <HAL_RCC_ClockConfig+0x240>)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ba:	4b83      	ldr	r3, [pc, #524]	@ (80032c8 <HAL_RCC_ClockConfig+0x240>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 030f 	and.w	r3, r3, #15
 80030c2:	683a      	ldr	r2, [r7, #0]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d001      	beq.n	80030cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e184      	b.n	80033d6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0304 	and.w	r3, r3, #4
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d010      	beq.n	80030fa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	691a      	ldr	r2, [r3, #16]
 80030dc:	4b7b      	ldr	r3, [pc, #492]	@ (80032cc <HAL_RCC_ClockConfig+0x244>)
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d908      	bls.n	80030fa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80030e8:	4b78      	ldr	r3, [pc, #480]	@ (80032cc <HAL_RCC_ClockConfig+0x244>)
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	691b      	ldr	r3, [r3, #16]
 80030f4:	4975      	ldr	r1, [pc, #468]	@ (80032cc <HAL_RCC_ClockConfig+0x244>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0308 	and.w	r3, r3, #8
 8003102:	2b00      	cmp	r3, #0
 8003104:	d010      	beq.n	8003128 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	695a      	ldr	r2, [r3, #20]
 800310a:	4b70      	ldr	r3, [pc, #448]	@ (80032cc <HAL_RCC_ClockConfig+0x244>)
 800310c:	69db      	ldr	r3, [r3, #28]
 800310e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003112:	429a      	cmp	r2, r3
 8003114:	d908      	bls.n	8003128 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003116:	4b6d      	ldr	r3, [pc, #436]	@ (80032cc <HAL_RCC_ClockConfig+0x244>)
 8003118:	69db      	ldr	r3, [r3, #28]
 800311a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	496a      	ldr	r1, [pc, #424]	@ (80032cc <HAL_RCC_ClockConfig+0x244>)
 8003124:	4313      	orrs	r3, r2
 8003126:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0310 	and.w	r3, r3, #16
 8003130:	2b00      	cmp	r3, #0
 8003132:	d010      	beq.n	8003156 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	699a      	ldr	r2, [r3, #24]
 8003138:	4b64      	ldr	r3, [pc, #400]	@ (80032cc <HAL_RCC_ClockConfig+0x244>)
 800313a:	69db      	ldr	r3, [r3, #28]
 800313c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003140:	429a      	cmp	r2, r3
 8003142:	d908      	bls.n	8003156 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003144:	4b61      	ldr	r3, [pc, #388]	@ (80032cc <HAL_RCC_ClockConfig+0x244>)
 8003146:	69db      	ldr	r3, [r3, #28]
 8003148:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	495e      	ldr	r1, [pc, #376]	@ (80032cc <HAL_RCC_ClockConfig+0x244>)
 8003152:	4313      	orrs	r3, r2
 8003154:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0320 	and.w	r3, r3, #32
 800315e:	2b00      	cmp	r3, #0
 8003160:	d010      	beq.n	8003184 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	69da      	ldr	r2, [r3, #28]
 8003166:	4b59      	ldr	r3, [pc, #356]	@ (80032cc <HAL_RCC_ClockConfig+0x244>)
 8003168:	6a1b      	ldr	r3, [r3, #32]
 800316a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800316e:	429a      	cmp	r2, r3
 8003170:	d908      	bls.n	8003184 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003172:	4b56      	ldr	r3, [pc, #344]	@ (80032cc <HAL_RCC_ClockConfig+0x244>)
 8003174:	6a1b      	ldr	r3, [r3, #32]
 8003176:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	69db      	ldr	r3, [r3, #28]
 800317e:	4953      	ldr	r1, [pc, #332]	@ (80032cc <HAL_RCC_ClockConfig+0x244>)
 8003180:	4313      	orrs	r3, r2
 8003182:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0302 	and.w	r3, r3, #2
 800318c:	2b00      	cmp	r3, #0
 800318e:	d010      	beq.n	80031b2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	68da      	ldr	r2, [r3, #12]
 8003194:	4b4d      	ldr	r3, [pc, #308]	@ (80032cc <HAL_RCC_ClockConfig+0x244>)
 8003196:	699b      	ldr	r3, [r3, #24]
 8003198:	f003 030f 	and.w	r3, r3, #15
 800319c:	429a      	cmp	r2, r3
 800319e:	d908      	bls.n	80031b2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031a0:	4b4a      	ldr	r3, [pc, #296]	@ (80032cc <HAL_RCC_ClockConfig+0x244>)
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	f023 020f 	bic.w	r2, r3, #15
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	4947      	ldr	r1, [pc, #284]	@ (80032cc <HAL_RCC_ClockConfig+0x244>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d055      	beq.n	800326a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80031be:	4b43      	ldr	r3, [pc, #268]	@ (80032cc <HAL_RCC_ClockConfig+0x244>)
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	4940      	ldr	r1, [pc, #256]	@ (80032cc <HAL_RCC_ClockConfig+0x244>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d107      	bne.n	80031e8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80031d8:	4b3c      	ldr	r3, [pc, #240]	@ (80032cc <HAL_RCC_ClockConfig+0x244>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d121      	bne.n	8003228 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e0f6      	b.n	80033d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	2b03      	cmp	r3, #3
 80031ee:	d107      	bne.n	8003200 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80031f0:	4b36      	ldr	r3, [pc, #216]	@ (80032cc <HAL_RCC_ClockConfig+0x244>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d115      	bne.n	8003228 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e0ea      	b.n	80033d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d107      	bne.n	8003218 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003208:	4b30      	ldr	r3, [pc, #192]	@ (80032cc <HAL_RCC_ClockConfig+0x244>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003210:	2b00      	cmp	r3, #0
 8003212:	d109      	bne.n	8003228 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e0de      	b.n	80033d6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003218:	4b2c      	ldr	r3, [pc, #176]	@ (80032cc <HAL_RCC_ClockConfig+0x244>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0304 	and.w	r3, r3, #4
 8003220:	2b00      	cmp	r3, #0
 8003222:	d101      	bne.n	8003228 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e0d6      	b.n	80033d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003228:	4b28      	ldr	r3, [pc, #160]	@ (80032cc <HAL_RCC_ClockConfig+0x244>)
 800322a:	691b      	ldr	r3, [r3, #16]
 800322c:	f023 0207 	bic.w	r2, r3, #7
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	4925      	ldr	r1, [pc, #148]	@ (80032cc <HAL_RCC_ClockConfig+0x244>)
 8003236:	4313      	orrs	r3, r2
 8003238:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800323a:	f7fe f949 	bl	80014d0 <HAL_GetTick>
 800323e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003240:	e00a      	b.n	8003258 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003242:	f7fe f945 	bl	80014d0 <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003250:	4293      	cmp	r3, r2
 8003252:	d901      	bls.n	8003258 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e0be      	b.n	80033d6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003258:	4b1c      	ldr	r3, [pc, #112]	@ (80032cc <HAL_RCC_ClockConfig+0x244>)
 800325a:	691b      	ldr	r3, [r3, #16]
 800325c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	00db      	lsls	r3, r3, #3
 8003266:	429a      	cmp	r2, r3
 8003268:	d1eb      	bne.n	8003242 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d010      	beq.n	8003298 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	68da      	ldr	r2, [r3, #12]
 800327a:	4b14      	ldr	r3, [pc, #80]	@ (80032cc <HAL_RCC_ClockConfig+0x244>)
 800327c:	699b      	ldr	r3, [r3, #24]
 800327e:	f003 030f 	and.w	r3, r3, #15
 8003282:	429a      	cmp	r2, r3
 8003284:	d208      	bcs.n	8003298 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003286:	4b11      	ldr	r3, [pc, #68]	@ (80032cc <HAL_RCC_ClockConfig+0x244>)
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	f023 020f 	bic.w	r2, r3, #15
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	490e      	ldr	r1, [pc, #56]	@ (80032cc <HAL_RCC_ClockConfig+0x244>)
 8003294:	4313      	orrs	r3, r2
 8003296:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003298:	4b0b      	ldr	r3, [pc, #44]	@ (80032c8 <HAL_RCC_ClockConfig+0x240>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 030f 	and.w	r3, r3, #15
 80032a0:	683a      	ldr	r2, [r7, #0]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d214      	bcs.n	80032d0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032a6:	4b08      	ldr	r3, [pc, #32]	@ (80032c8 <HAL_RCC_ClockConfig+0x240>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f023 020f 	bic.w	r2, r3, #15
 80032ae:	4906      	ldr	r1, [pc, #24]	@ (80032c8 <HAL_RCC_ClockConfig+0x240>)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032b6:	4b04      	ldr	r3, [pc, #16]	@ (80032c8 <HAL_RCC_ClockConfig+0x240>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 030f 	and.w	r3, r3, #15
 80032be:	683a      	ldr	r2, [r7, #0]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d005      	beq.n	80032d0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e086      	b.n	80033d6 <HAL_RCC_ClockConfig+0x34e>
 80032c8:	52002000 	.word	0x52002000
 80032cc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0304 	and.w	r3, r3, #4
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d010      	beq.n	80032fe <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	691a      	ldr	r2, [r3, #16]
 80032e0:	4b3f      	ldr	r3, [pc, #252]	@ (80033e0 <HAL_RCC_ClockConfig+0x358>)
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d208      	bcs.n	80032fe <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80032ec:	4b3c      	ldr	r3, [pc, #240]	@ (80033e0 <HAL_RCC_ClockConfig+0x358>)
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	691b      	ldr	r3, [r3, #16]
 80032f8:	4939      	ldr	r1, [pc, #228]	@ (80033e0 <HAL_RCC_ClockConfig+0x358>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0308 	and.w	r3, r3, #8
 8003306:	2b00      	cmp	r3, #0
 8003308:	d010      	beq.n	800332c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	695a      	ldr	r2, [r3, #20]
 800330e:	4b34      	ldr	r3, [pc, #208]	@ (80033e0 <HAL_RCC_ClockConfig+0x358>)
 8003310:	69db      	ldr	r3, [r3, #28]
 8003312:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003316:	429a      	cmp	r2, r3
 8003318:	d208      	bcs.n	800332c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800331a:	4b31      	ldr	r3, [pc, #196]	@ (80033e0 <HAL_RCC_ClockConfig+0x358>)
 800331c:	69db      	ldr	r3, [r3, #28]
 800331e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	492e      	ldr	r1, [pc, #184]	@ (80033e0 <HAL_RCC_ClockConfig+0x358>)
 8003328:	4313      	orrs	r3, r2
 800332a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0310 	and.w	r3, r3, #16
 8003334:	2b00      	cmp	r3, #0
 8003336:	d010      	beq.n	800335a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	699a      	ldr	r2, [r3, #24]
 800333c:	4b28      	ldr	r3, [pc, #160]	@ (80033e0 <HAL_RCC_ClockConfig+0x358>)
 800333e:	69db      	ldr	r3, [r3, #28]
 8003340:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003344:	429a      	cmp	r2, r3
 8003346:	d208      	bcs.n	800335a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003348:	4b25      	ldr	r3, [pc, #148]	@ (80033e0 <HAL_RCC_ClockConfig+0x358>)
 800334a:	69db      	ldr	r3, [r3, #28]
 800334c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	4922      	ldr	r1, [pc, #136]	@ (80033e0 <HAL_RCC_ClockConfig+0x358>)
 8003356:	4313      	orrs	r3, r2
 8003358:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0320 	and.w	r3, r3, #32
 8003362:	2b00      	cmp	r3, #0
 8003364:	d010      	beq.n	8003388 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	69da      	ldr	r2, [r3, #28]
 800336a:	4b1d      	ldr	r3, [pc, #116]	@ (80033e0 <HAL_RCC_ClockConfig+0x358>)
 800336c:	6a1b      	ldr	r3, [r3, #32]
 800336e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003372:	429a      	cmp	r2, r3
 8003374:	d208      	bcs.n	8003388 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003376:	4b1a      	ldr	r3, [pc, #104]	@ (80033e0 <HAL_RCC_ClockConfig+0x358>)
 8003378:	6a1b      	ldr	r3, [r3, #32]
 800337a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	69db      	ldr	r3, [r3, #28]
 8003382:	4917      	ldr	r1, [pc, #92]	@ (80033e0 <HAL_RCC_ClockConfig+0x358>)
 8003384:	4313      	orrs	r3, r2
 8003386:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003388:	f000 f834 	bl	80033f4 <HAL_RCC_GetSysClockFreq>
 800338c:	4602      	mov	r2, r0
 800338e:	4b14      	ldr	r3, [pc, #80]	@ (80033e0 <HAL_RCC_ClockConfig+0x358>)
 8003390:	699b      	ldr	r3, [r3, #24]
 8003392:	0a1b      	lsrs	r3, r3, #8
 8003394:	f003 030f 	and.w	r3, r3, #15
 8003398:	4912      	ldr	r1, [pc, #72]	@ (80033e4 <HAL_RCC_ClockConfig+0x35c>)
 800339a:	5ccb      	ldrb	r3, [r1, r3]
 800339c:	f003 031f 	and.w	r3, r3, #31
 80033a0:	fa22 f303 	lsr.w	r3, r2, r3
 80033a4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80033a6:	4b0e      	ldr	r3, [pc, #56]	@ (80033e0 <HAL_RCC_ClockConfig+0x358>)
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	f003 030f 	and.w	r3, r3, #15
 80033ae:	4a0d      	ldr	r2, [pc, #52]	@ (80033e4 <HAL_RCC_ClockConfig+0x35c>)
 80033b0:	5cd3      	ldrb	r3, [r2, r3]
 80033b2:	f003 031f 	and.w	r3, r3, #31
 80033b6:	693a      	ldr	r2, [r7, #16]
 80033b8:	fa22 f303 	lsr.w	r3, r2, r3
 80033bc:	4a0a      	ldr	r2, [pc, #40]	@ (80033e8 <HAL_RCC_ClockConfig+0x360>)
 80033be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80033c0:	4a0a      	ldr	r2, [pc, #40]	@ (80033ec <HAL_RCC_ClockConfig+0x364>)
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80033c6:	4b0a      	ldr	r3, [pc, #40]	@ (80033f0 <HAL_RCC_ClockConfig+0x368>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7fe f836 	bl	800143c <HAL_InitTick>
 80033d0:	4603      	mov	r3, r0
 80033d2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80033d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3718      	adds	r7, #24
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	58024400 	.word	0x58024400
 80033e4:	08008b28 	.word	0x08008b28
 80033e8:	24000008 	.word	0x24000008
 80033ec:	24000004 	.word	0x24000004
 80033f0:	2400000c 	.word	0x2400000c

080033f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b089      	sub	sp, #36	@ 0x24
 80033f8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033fa:	4bb3      	ldr	r3, [pc, #716]	@ (80036c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003402:	2b18      	cmp	r3, #24
 8003404:	f200 8155 	bhi.w	80036b2 <HAL_RCC_GetSysClockFreq+0x2be>
 8003408:	a201      	add	r2, pc, #4	@ (adr r2, 8003410 <HAL_RCC_GetSysClockFreq+0x1c>)
 800340a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800340e:	bf00      	nop
 8003410:	08003475 	.word	0x08003475
 8003414:	080036b3 	.word	0x080036b3
 8003418:	080036b3 	.word	0x080036b3
 800341c:	080036b3 	.word	0x080036b3
 8003420:	080036b3 	.word	0x080036b3
 8003424:	080036b3 	.word	0x080036b3
 8003428:	080036b3 	.word	0x080036b3
 800342c:	080036b3 	.word	0x080036b3
 8003430:	0800349b 	.word	0x0800349b
 8003434:	080036b3 	.word	0x080036b3
 8003438:	080036b3 	.word	0x080036b3
 800343c:	080036b3 	.word	0x080036b3
 8003440:	080036b3 	.word	0x080036b3
 8003444:	080036b3 	.word	0x080036b3
 8003448:	080036b3 	.word	0x080036b3
 800344c:	080036b3 	.word	0x080036b3
 8003450:	080034a1 	.word	0x080034a1
 8003454:	080036b3 	.word	0x080036b3
 8003458:	080036b3 	.word	0x080036b3
 800345c:	080036b3 	.word	0x080036b3
 8003460:	080036b3 	.word	0x080036b3
 8003464:	080036b3 	.word	0x080036b3
 8003468:	080036b3 	.word	0x080036b3
 800346c:	080036b3 	.word	0x080036b3
 8003470:	080034a7 	.word	0x080034a7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003474:	4b94      	ldr	r3, [pc, #592]	@ (80036c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0320 	and.w	r3, r3, #32
 800347c:	2b00      	cmp	r3, #0
 800347e:	d009      	beq.n	8003494 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003480:	4b91      	ldr	r3, [pc, #580]	@ (80036c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	08db      	lsrs	r3, r3, #3
 8003486:	f003 0303 	and.w	r3, r3, #3
 800348a:	4a90      	ldr	r2, [pc, #576]	@ (80036cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800348c:	fa22 f303 	lsr.w	r3, r2, r3
 8003490:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003492:	e111      	b.n	80036b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003494:	4b8d      	ldr	r3, [pc, #564]	@ (80036cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003496:	61bb      	str	r3, [r7, #24]
      break;
 8003498:	e10e      	b.n	80036b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800349a:	4b8d      	ldr	r3, [pc, #564]	@ (80036d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800349c:	61bb      	str	r3, [r7, #24]
      break;
 800349e:	e10b      	b.n	80036b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80034a0:	4b8c      	ldr	r3, [pc, #560]	@ (80036d4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80034a2:	61bb      	str	r3, [r7, #24]
      break;
 80034a4:	e108      	b.n	80036b8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80034a6:	4b88      	ldr	r3, [pc, #544]	@ (80036c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034aa:	f003 0303 	and.w	r3, r3, #3
 80034ae:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80034b0:	4b85      	ldr	r3, [pc, #532]	@ (80036c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034b4:	091b      	lsrs	r3, r3, #4
 80034b6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80034ba:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80034bc:	4b82      	ldr	r3, [pc, #520]	@ (80036c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034c0:	f003 0301 	and.w	r3, r3, #1
 80034c4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80034c6:	4b80      	ldr	r3, [pc, #512]	@ (80036c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034ca:	08db      	lsrs	r3, r3, #3
 80034cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	fb02 f303 	mul.w	r3, r2, r3
 80034d6:	ee07 3a90 	vmov	s15, r3
 80034da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034de:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f000 80e1 	beq.w	80036ac <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	f000 8083 	beq.w	80035f8 <HAL_RCC_GetSysClockFreq+0x204>
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	f200 80a1 	bhi.w	800363c <HAL_RCC_GetSysClockFreq+0x248>
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d003      	beq.n	8003508 <HAL_RCC_GetSysClockFreq+0x114>
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	2b01      	cmp	r3, #1
 8003504:	d056      	beq.n	80035b4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003506:	e099      	b.n	800363c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003508:	4b6f      	ldr	r3, [pc, #444]	@ (80036c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0320 	and.w	r3, r3, #32
 8003510:	2b00      	cmp	r3, #0
 8003512:	d02d      	beq.n	8003570 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003514:	4b6c      	ldr	r3, [pc, #432]	@ (80036c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	08db      	lsrs	r3, r3, #3
 800351a:	f003 0303 	and.w	r3, r3, #3
 800351e:	4a6b      	ldr	r2, [pc, #428]	@ (80036cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003520:	fa22 f303 	lsr.w	r3, r2, r3
 8003524:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	ee07 3a90 	vmov	s15, r3
 800352c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	ee07 3a90 	vmov	s15, r3
 8003536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800353a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800353e:	4b62      	ldr	r3, [pc, #392]	@ (80036c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003542:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003546:	ee07 3a90 	vmov	s15, r3
 800354a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800354e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003552:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80036d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003556:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800355a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800355e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003562:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800356a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800356e:	e087      	b.n	8003680 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	ee07 3a90 	vmov	s15, r3
 8003576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800357a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80036dc <HAL_RCC_GetSysClockFreq+0x2e8>
 800357e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003582:	4b51      	ldr	r3, [pc, #324]	@ (80036c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003586:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800358a:	ee07 3a90 	vmov	s15, r3
 800358e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003592:	ed97 6a02 	vldr	s12, [r7, #8]
 8003596:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80036d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800359a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800359e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80035a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80035b2:	e065      	b.n	8003680 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	ee07 3a90 	vmov	s15, r3
 80035ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035be:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80036e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80035c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035c6:	4b40      	ldr	r3, [pc, #256]	@ (80036c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035ce:	ee07 3a90 	vmov	s15, r3
 80035d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80035da:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80036d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80035de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80035ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80035f6:	e043      	b.n	8003680 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	ee07 3a90 	vmov	s15, r3
 80035fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003602:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80036e4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003606:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800360a:	4b2f      	ldr	r3, [pc, #188]	@ (80036c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800360c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800360e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003612:	ee07 3a90 	vmov	s15, r3
 8003616:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800361a:	ed97 6a02 	vldr	s12, [r7, #8]
 800361e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80036d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003622:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003626:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800362a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800362e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003636:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800363a:	e021      	b.n	8003680 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	ee07 3a90 	vmov	s15, r3
 8003642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003646:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80036e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800364a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800364e:	4b1e      	ldr	r3, [pc, #120]	@ (80036c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003656:	ee07 3a90 	vmov	s15, r3
 800365a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800365e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003662:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80036d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003666:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800366a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800366e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003672:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800367a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800367e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003680:	4b11      	ldr	r3, [pc, #68]	@ (80036c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003684:	0a5b      	lsrs	r3, r3, #9
 8003686:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800368a:	3301      	adds	r3, #1
 800368c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	ee07 3a90 	vmov	s15, r3
 8003694:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003698:	edd7 6a07 	vldr	s13, [r7, #28]
 800369c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036a4:	ee17 3a90 	vmov	r3, s15
 80036a8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80036aa:	e005      	b.n	80036b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80036ac:	2300      	movs	r3, #0
 80036ae:	61bb      	str	r3, [r7, #24]
      break;
 80036b0:	e002      	b.n	80036b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80036b2:	4b07      	ldr	r3, [pc, #28]	@ (80036d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80036b4:	61bb      	str	r3, [r7, #24]
      break;
 80036b6:	bf00      	nop
  }

  return sysclockfreq;
 80036b8:	69bb      	ldr	r3, [r7, #24]
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3724      	adds	r7, #36	@ 0x24
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	58024400 	.word	0x58024400
 80036cc:	03d09000 	.word	0x03d09000
 80036d0:	003d0900 	.word	0x003d0900
 80036d4:	007a1200 	.word	0x007a1200
 80036d8:	46000000 	.word	0x46000000
 80036dc:	4c742400 	.word	0x4c742400
 80036e0:	4a742400 	.word	0x4a742400
 80036e4:	4af42400 	.word	0x4af42400

080036e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80036ee:	f7ff fe81 	bl	80033f4 <HAL_RCC_GetSysClockFreq>
 80036f2:	4602      	mov	r2, r0
 80036f4:	4b10      	ldr	r3, [pc, #64]	@ (8003738 <HAL_RCC_GetHCLKFreq+0x50>)
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	0a1b      	lsrs	r3, r3, #8
 80036fa:	f003 030f 	and.w	r3, r3, #15
 80036fe:	490f      	ldr	r1, [pc, #60]	@ (800373c <HAL_RCC_GetHCLKFreq+0x54>)
 8003700:	5ccb      	ldrb	r3, [r1, r3]
 8003702:	f003 031f 	and.w	r3, r3, #31
 8003706:	fa22 f303 	lsr.w	r3, r2, r3
 800370a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800370c:	4b0a      	ldr	r3, [pc, #40]	@ (8003738 <HAL_RCC_GetHCLKFreq+0x50>)
 800370e:	699b      	ldr	r3, [r3, #24]
 8003710:	f003 030f 	and.w	r3, r3, #15
 8003714:	4a09      	ldr	r2, [pc, #36]	@ (800373c <HAL_RCC_GetHCLKFreq+0x54>)
 8003716:	5cd3      	ldrb	r3, [r2, r3]
 8003718:	f003 031f 	and.w	r3, r3, #31
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	fa22 f303 	lsr.w	r3, r2, r3
 8003722:	4a07      	ldr	r2, [pc, #28]	@ (8003740 <HAL_RCC_GetHCLKFreq+0x58>)
 8003724:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003726:	4a07      	ldr	r2, [pc, #28]	@ (8003744 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800372c:	4b04      	ldr	r3, [pc, #16]	@ (8003740 <HAL_RCC_GetHCLKFreq+0x58>)
 800372e:	681b      	ldr	r3, [r3, #0]
}
 8003730:	4618      	mov	r0, r3
 8003732:	3708      	adds	r7, #8
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	58024400 	.word	0x58024400
 800373c:	08008b28 	.word	0x08008b28
 8003740:	24000008 	.word	0x24000008
 8003744:	24000004 	.word	0x24000004

08003748 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800374c:	f7ff ffcc 	bl	80036e8 <HAL_RCC_GetHCLKFreq>
 8003750:	4602      	mov	r2, r0
 8003752:	4b06      	ldr	r3, [pc, #24]	@ (800376c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003754:	69db      	ldr	r3, [r3, #28]
 8003756:	091b      	lsrs	r3, r3, #4
 8003758:	f003 0307 	and.w	r3, r3, #7
 800375c:	4904      	ldr	r1, [pc, #16]	@ (8003770 <HAL_RCC_GetPCLK1Freq+0x28>)
 800375e:	5ccb      	ldrb	r3, [r1, r3]
 8003760:	f003 031f 	and.w	r3, r3, #31
 8003764:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003768:	4618      	mov	r0, r3
 800376a:	bd80      	pop	{r7, pc}
 800376c:	58024400 	.word	0x58024400
 8003770:	08008b28 	.word	0x08008b28

08003774 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003778:	f7ff ffb6 	bl	80036e8 <HAL_RCC_GetHCLKFreq>
 800377c:	4602      	mov	r2, r0
 800377e:	4b06      	ldr	r3, [pc, #24]	@ (8003798 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003780:	69db      	ldr	r3, [r3, #28]
 8003782:	0a1b      	lsrs	r3, r3, #8
 8003784:	f003 0307 	and.w	r3, r3, #7
 8003788:	4904      	ldr	r1, [pc, #16]	@ (800379c <HAL_RCC_GetPCLK2Freq+0x28>)
 800378a:	5ccb      	ldrb	r3, [r1, r3]
 800378c:	f003 031f 	and.w	r3, r3, #31
 8003790:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003794:	4618      	mov	r0, r3
 8003796:	bd80      	pop	{r7, pc}
 8003798:	58024400 	.word	0x58024400
 800379c:	08008b28 	.word	0x08008b28

080037a0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037a4:	b0ca      	sub	sp, #296	@ 0x128
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80037ac:	2300      	movs	r3, #0
 80037ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80037b2:	2300      	movs	r3, #0
 80037b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80037b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80037c4:	2500      	movs	r5, #0
 80037c6:	ea54 0305 	orrs.w	r3, r4, r5
 80037ca:	d049      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80037cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037d2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80037d6:	d02f      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80037d8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80037dc:	d828      	bhi.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80037de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80037e2:	d01a      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80037e4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80037e8:	d822      	bhi.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d003      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80037ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80037f2:	d007      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80037f4:	e01c      	b.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037f6:	4bb8      	ldr	r3, [pc, #736]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037fa:	4ab7      	ldr	r2, [pc, #732]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003800:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003802:	e01a      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003804:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003808:	3308      	adds	r3, #8
 800380a:	2102      	movs	r1, #2
 800380c:	4618      	mov	r0, r3
 800380e:	f001 fc8f 	bl	8005130 <RCCEx_PLL2_Config>
 8003812:	4603      	mov	r3, r0
 8003814:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003818:	e00f      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800381a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800381e:	3328      	adds	r3, #40	@ 0x28
 8003820:	2102      	movs	r1, #2
 8003822:	4618      	mov	r0, r3
 8003824:	f001 fd36 	bl	8005294 <RCCEx_PLL3_Config>
 8003828:	4603      	mov	r3, r0
 800382a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800382e:	e004      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003836:	e000      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003838:	bf00      	nop
    }

    if (ret == HAL_OK)
 800383a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800383e:	2b00      	cmp	r3, #0
 8003840:	d10a      	bne.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003842:	4ba5      	ldr	r3, [pc, #660]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003844:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003846:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800384a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800384e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003850:	4aa1      	ldr	r2, [pc, #644]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003852:	430b      	orrs	r3, r1
 8003854:	6513      	str	r3, [r2, #80]	@ 0x50
 8003856:	e003      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003858:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800385c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003860:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003868:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800386c:	f04f 0900 	mov.w	r9, #0
 8003870:	ea58 0309 	orrs.w	r3, r8, r9
 8003874:	d047      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003876:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800387a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800387c:	2b04      	cmp	r3, #4
 800387e:	d82a      	bhi.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003880:	a201      	add	r2, pc, #4	@ (adr r2, 8003888 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003886:	bf00      	nop
 8003888:	0800389d 	.word	0x0800389d
 800388c:	080038ab 	.word	0x080038ab
 8003890:	080038c1 	.word	0x080038c1
 8003894:	080038df 	.word	0x080038df
 8003898:	080038df 	.word	0x080038df
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800389c:	4b8e      	ldr	r3, [pc, #568]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800389e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038a0:	4a8d      	ldr	r2, [pc, #564]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80038a8:	e01a      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038ae:	3308      	adds	r3, #8
 80038b0:	2100      	movs	r1, #0
 80038b2:	4618      	mov	r0, r3
 80038b4:	f001 fc3c 	bl	8005130 <RCCEx_PLL2_Config>
 80038b8:	4603      	mov	r3, r0
 80038ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80038be:	e00f      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80038c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038c4:	3328      	adds	r3, #40	@ 0x28
 80038c6:	2100      	movs	r1, #0
 80038c8:	4618      	mov	r0, r3
 80038ca:	f001 fce3 	bl	8005294 <RCCEx_PLL3_Config>
 80038ce:	4603      	mov	r3, r0
 80038d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80038d4:	e004      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038dc:	e000      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80038de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d10a      	bne.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038e8:	4b7b      	ldr	r3, [pc, #492]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038ec:	f023 0107 	bic.w	r1, r3, #7
 80038f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038f6:	4a78      	ldr	r2, [pc, #480]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038f8:	430b      	orrs	r3, r1
 80038fa:	6513      	str	r3, [r2, #80]	@ 0x50
 80038fc:	e003      	b.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003902:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003906:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800390a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800390e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003912:	f04f 0b00 	mov.w	fp, #0
 8003916:	ea5a 030b 	orrs.w	r3, sl, fp
 800391a:	d04c      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800391c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003920:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003922:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003926:	d030      	beq.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003928:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800392c:	d829      	bhi.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800392e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003930:	d02d      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003932:	2bc0      	cmp	r3, #192	@ 0xc0
 8003934:	d825      	bhi.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003936:	2b80      	cmp	r3, #128	@ 0x80
 8003938:	d018      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800393a:	2b80      	cmp	r3, #128	@ 0x80
 800393c:	d821      	bhi.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800393e:	2b00      	cmp	r3, #0
 8003940:	d002      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003942:	2b40      	cmp	r3, #64	@ 0x40
 8003944:	d007      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003946:	e01c      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003948:	4b63      	ldr	r3, [pc, #396]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800394a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800394c:	4a62      	ldr	r2, [pc, #392]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800394e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003952:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003954:	e01c      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003956:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800395a:	3308      	adds	r3, #8
 800395c:	2100      	movs	r1, #0
 800395e:	4618      	mov	r0, r3
 8003960:	f001 fbe6 	bl	8005130 <RCCEx_PLL2_Config>
 8003964:	4603      	mov	r3, r0
 8003966:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800396a:	e011      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800396c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003970:	3328      	adds	r3, #40	@ 0x28
 8003972:	2100      	movs	r1, #0
 8003974:	4618      	mov	r0, r3
 8003976:	f001 fc8d 	bl	8005294 <RCCEx_PLL3_Config>
 800397a:	4603      	mov	r3, r0
 800397c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003980:	e006      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003988:	e002      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800398a:	bf00      	nop
 800398c:	e000      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800398e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003990:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003994:	2b00      	cmp	r3, #0
 8003996:	d10a      	bne.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003998:	4b4f      	ldr	r3, [pc, #316]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800399a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800399c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80039a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039a6:	4a4c      	ldr	r2, [pc, #304]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039a8:	430b      	orrs	r3, r1
 80039aa:	6513      	str	r3, [r2, #80]	@ 0x50
 80039ac:	e003      	b.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80039b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039be:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80039c2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80039c6:	2300      	movs	r3, #0
 80039c8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80039cc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80039d0:	460b      	mov	r3, r1
 80039d2:	4313      	orrs	r3, r2
 80039d4:	d053      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80039d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039da:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80039de:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80039e2:	d035      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80039e4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80039e8:	d82e      	bhi.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80039ea:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80039ee:	d031      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80039f0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80039f4:	d828      	bhi.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80039f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039fa:	d01a      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80039fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a00:	d822      	bhi.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d003      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003a06:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a0a:	d007      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003a0c:	e01c      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a0e:	4b32      	ldr	r3, [pc, #200]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a12:	4a31      	ldr	r2, [pc, #196]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a18:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a1a:	e01c      	b.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a20:	3308      	adds	r3, #8
 8003a22:	2100      	movs	r1, #0
 8003a24:	4618      	mov	r0, r3
 8003a26:	f001 fb83 	bl	8005130 <RCCEx_PLL2_Config>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003a30:	e011      	b.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a36:	3328      	adds	r3, #40	@ 0x28
 8003a38:	2100      	movs	r1, #0
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f001 fc2a 	bl	8005294 <RCCEx_PLL3_Config>
 8003a40:	4603      	mov	r3, r0
 8003a42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a46:	e006      	b.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a4e:	e002      	b.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003a50:	bf00      	nop
 8003a52:	e000      	b.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003a54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d10b      	bne.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003a5e:	4b1e      	ldr	r3, [pc, #120]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a62:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a6a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003a6e:	4a1a      	ldr	r2, [pc, #104]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a70:	430b      	orrs	r3, r1
 8003a72:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a74:	e003      	b.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a86:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003a8a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003a8e:	2300      	movs	r3, #0
 8003a90:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003a94:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003a98:	460b      	mov	r3, r1
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	d056      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aa2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003aa6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003aaa:	d038      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003aac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003ab0:	d831      	bhi.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003ab2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003ab6:	d034      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003ab8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003abc:	d82b      	bhi.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003abe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003ac2:	d01d      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003ac4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003ac8:	d825      	bhi.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d006      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003ace:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ad2:	d00a      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003ad4:	e01f      	b.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003ad6:	bf00      	nop
 8003ad8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003adc:	4ba2      	ldr	r3, [pc, #648]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ae0:	4aa1      	ldr	r2, [pc, #644]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ae2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ae6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ae8:	e01c      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aee:	3308      	adds	r3, #8
 8003af0:	2100      	movs	r1, #0
 8003af2:	4618      	mov	r0, r3
 8003af4:	f001 fb1c 	bl	8005130 <RCCEx_PLL2_Config>
 8003af8:	4603      	mov	r3, r0
 8003afa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003afe:	e011      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b04:	3328      	adds	r3, #40	@ 0x28
 8003b06:	2100      	movs	r1, #0
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f001 fbc3 	bl	8005294 <RCCEx_PLL3_Config>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003b14:	e006      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b1c:	e002      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003b1e:	bf00      	nop
 8003b20:	e000      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003b22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d10b      	bne.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003b2c:	4b8e      	ldr	r3, [pc, #568]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b30:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b38:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003b3c:	4a8a      	ldr	r2, [pc, #552]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b3e:	430b      	orrs	r3, r1
 8003b40:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b42:	e003      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b48:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003b4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b54:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003b58:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003b62:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003b66:	460b      	mov	r3, r1
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	d03a      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b72:	2b30      	cmp	r3, #48	@ 0x30
 8003b74:	d01f      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003b76:	2b30      	cmp	r3, #48	@ 0x30
 8003b78:	d819      	bhi.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003b7a:	2b20      	cmp	r3, #32
 8003b7c:	d00c      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003b7e:	2b20      	cmp	r3, #32
 8003b80:	d815      	bhi.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d019      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003b86:	2b10      	cmp	r3, #16
 8003b88:	d111      	bne.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b8a:	4b77      	ldr	r3, [pc, #476]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b8e:	4a76      	ldr	r2, [pc, #472]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b94:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003b96:	e011      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b9c:	3308      	adds	r3, #8
 8003b9e:	2102      	movs	r1, #2
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f001 fac5 	bl	8005130 <RCCEx_PLL2_Config>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003bac:	e006      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003bb4:	e002      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003bb6:	bf00      	nop
 8003bb8:	e000      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003bba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d10a      	bne.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003bc4:	4b68      	ldr	r3, [pc, #416]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bc8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bd2:	4a65      	ldr	r2, [pc, #404]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bd4:	430b      	orrs	r3, r1
 8003bd6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003bd8:	e003      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bde:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bea:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003bee:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003bf8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	d051      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c08:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c0c:	d035      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003c0e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c12:	d82e      	bhi.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003c14:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003c18:	d031      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003c1a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003c1e:	d828      	bhi.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003c20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c24:	d01a      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003c26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c2a:	d822      	bhi.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d003      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003c30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c34:	d007      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003c36:	e01c      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c38:	4b4b      	ldr	r3, [pc, #300]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c3c:	4a4a      	ldr	r2, [pc, #296]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003c44:	e01c      	b.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c4a:	3308      	adds	r3, #8
 8003c4c:	2100      	movs	r1, #0
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f001 fa6e 	bl	8005130 <RCCEx_PLL2_Config>
 8003c54:	4603      	mov	r3, r0
 8003c56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003c5a:	e011      	b.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c60:	3328      	adds	r3, #40	@ 0x28
 8003c62:	2100      	movs	r1, #0
 8003c64:	4618      	mov	r0, r3
 8003c66:	f001 fb15 	bl	8005294 <RCCEx_PLL3_Config>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003c70:	e006      	b.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c78:	e002      	b.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003c7a:	bf00      	nop
 8003c7c:	e000      	b.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003c7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d10a      	bne.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003c88:	4b37      	ldr	r3, [pc, #220]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c8c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003c90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c96:	4a34      	ldr	r2, [pc, #208]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c98:	430b      	orrs	r3, r1
 8003c9a:	6513      	str	r3, [r2, #80]	@ 0x50
 8003c9c:	e003      	b.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ca2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cae:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003cb2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003cbc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	d056      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ccc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003cd0:	d033      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003cd2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003cd6:	d82c      	bhi.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003cd8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003cdc:	d02f      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003cde:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003ce2:	d826      	bhi.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003ce4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003ce8:	d02b      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003cea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003cee:	d820      	bhi.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003cf0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003cf4:	d012      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003cf6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003cfa:	d81a      	bhi.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d022      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003d00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d04:	d115      	bne.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d0a:	3308      	adds	r3, #8
 8003d0c:	2101      	movs	r1, #1
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f001 fa0e 	bl	8005130 <RCCEx_PLL2_Config>
 8003d14:	4603      	mov	r3, r0
 8003d16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003d1a:	e015      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d20:	3328      	adds	r3, #40	@ 0x28
 8003d22:	2101      	movs	r1, #1
 8003d24:	4618      	mov	r0, r3
 8003d26:	f001 fab5 	bl	8005294 <RCCEx_PLL3_Config>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003d30:	e00a      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d38:	e006      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003d3a:	bf00      	nop
 8003d3c:	e004      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003d3e:	bf00      	nop
 8003d40:	e002      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003d42:	bf00      	nop
 8003d44:	e000      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003d46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d10d      	bne.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003d50:	4b05      	ldr	r3, [pc, #20]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d54:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003d58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d5e:	4a02      	ldr	r2, [pc, #8]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d60:	430b      	orrs	r3, r1
 8003d62:	6513      	str	r3, [r2, #80]	@ 0x50
 8003d64:	e006      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003d66:	bf00      	nop
 8003d68:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d7c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003d80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003d84:	2300      	movs	r3, #0
 8003d86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003d8a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003d8e:	460b      	mov	r3, r1
 8003d90:	4313      	orrs	r3, r2
 8003d92:	d055      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d98:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003d9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003da0:	d033      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003da2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003da6:	d82c      	bhi.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003da8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dac:	d02f      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003dae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003db2:	d826      	bhi.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003db4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003db8:	d02b      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003dba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003dbe:	d820      	bhi.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003dc0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003dc4:	d012      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003dc6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003dca:	d81a      	bhi.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d022      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003dd0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003dd4:	d115      	bne.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dda:	3308      	adds	r3, #8
 8003ddc:	2101      	movs	r1, #1
 8003dde:	4618      	mov	r0, r3
 8003de0:	f001 f9a6 	bl	8005130 <RCCEx_PLL2_Config>
 8003de4:	4603      	mov	r3, r0
 8003de6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003dea:	e015      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003df0:	3328      	adds	r3, #40	@ 0x28
 8003df2:	2101      	movs	r1, #1
 8003df4:	4618      	mov	r0, r3
 8003df6:	f001 fa4d 	bl	8005294 <RCCEx_PLL3_Config>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003e00:	e00a      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e08:	e006      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003e0a:	bf00      	nop
 8003e0c:	e004      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003e0e:	bf00      	nop
 8003e10:	e002      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003e12:	bf00      	nop
 8003e14:	e000      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003e16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d10b      	bne.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003e20:	4ba3      	ldr	r3, [pc, #652]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e24:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e2c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003e30:	4a9f      	ldr	r2, [pc, #636]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e32:	430b      	orrs	r3, r1
 8003e34:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e36:	e003      	b.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e48:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003e4c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003e50:	2300      	movs	r3, #0
 8003e52:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003e56:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	d037      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e6a:	d00e      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003e6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e70:	d816      	bhi.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d018      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003e76:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e7a:	d111      	bne.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e7c:	4b8c      	ldr	r3, [pc, #560]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e80:	4a8b      	ldr	r2, [pc, #556]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003e88:	e00f      	b.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e8e:	3308      	adds	r3, #8
 8003e90:	2101      	movs	r1, #1
 8003e92:	4618      	mov	r0, r3
 8003e94:	f001 f94c 	bl	8005130 <RCCEx_PLL2_Config>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003e9e:	e004      	b.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ea6:	e000      	b.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003ea8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003eaa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d10a      	bne.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003eb2:	4b7f      	ldr	r3, [pc, #508]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003eb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003eb6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ebe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ec0:	4a7b      	ldr	r2, [pc, #492]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ec2:	430b      	orrs	r3, r1
 8003ec4:	6513      	str	r3, [r2, #80]	@ 0x50
 8003ec6:	e003      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ec8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ecc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003ed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003edc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003ee6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003eea:	460b      	mov	r3, r1
 8003eec:	4313      	orrs	r3, r2
 8003eee:	d039      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ef4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ef6:	2b03      	cmp	r3, #3
 8003ef8:	d81c      	bhi.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003efa:	a201      	add	r2, pc, #4	@ (adr r2, 8003f00 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f00:	08003f3d 	.word	0x08003f3d
 8003f04:	08003f11 	.word	0x08003f11
 8003f08:	08003f1f 	.word	0x08003f1f
 8003f0c:	08003f3d 	.word	0x08003f3d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f10:	4b67      	ldr	r3, [pc, #412]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f14:	4a66      	ldr	r2, [pc, #408]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003f1c:	e00f      	b.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f22:	3308      	adds	r3, #8
 8003f24:	2102      	movs	r1, #2
 8003f26:	4618      	mov	r0, r3
 8003f28:	f001 f902 	bl	8005130 <RCCEx_PLL2_Config>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003f32:	e004      	b.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f3a:	e000      	b.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003f3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d10a      	bne.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003f46:	4b5a      	ldr	r3, [pc, #360]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f4a:	f023 0103 	bic.w	r1, r3, #3
 8003f4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f54:	4a56      	ldr	r2, [pc, #344]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f56:	430b      	orrs	r3, r1
 8003f58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f5a:	e003      	b.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f6c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003f70:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f74:	2300      	movs	r3, #0
 8003f76:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003f7a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003f7e:	460b      	mov	r3, r1
 8003f80:	4313      	orrs	r3, r2
 8003f82:	f000 809f 	beq.w	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f86:	4b4b      	ldr	r3, [pc, #300]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a4a      	ldr	r2, [pc, #296]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003f8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f90:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f92:	f7fd fa9d 	bl	80014d0 <HAL_GetTick>
 8003f96:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f9a:	e00b      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f9c:	f7fd fa98 	bl	80014d0 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	2b64      	cmp	r3, #100	@ 0x64
 8003faa:	d903      	bls.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003fb2:	e005      	b.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fb4:	4b3f      	ldr	r3, [pc, #252]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d0ed      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003fc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d179      	bne.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003fc8:	4b39      	ldr	r3, [pc, #228]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fca:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003fcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fd0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003fd4:	4053      	eors	r3, r2
 8003fd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d015      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003fde:	4b34      	ldr	r3, [pc, #208]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fe0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fe2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fe6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003fea:	4b31      	ldr	r3, [pc, #196]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fee:	4a30      	ldr	r2, [pc, #192]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ff0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ff4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ff6:	4b2e      	ldr	r3, [pc, #184]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ff8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ffa:	4a2d      	ldr	r2, [pc, #180]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ffc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004000:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004002:	4a2b      	ldr	r2, [pc, #172]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004004:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004008:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800400a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800400e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004012:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004016:	d118      	bne.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004018:	f7fd fa5a 	bl	80014d0 <HAL_GetTick>
 800401c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004020:	e00d      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004022:	f7fd fa55 	bl	80014d0 <HAL_GetTick>
 8004026:	4602      	mov	r2, r0
 8004028:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800402c:	1ad2      	subs	r2, r2, r3
 800402e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004032:	429a      	cmp	r2, r3
 8004034:	d903      	bls.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800403c:	e005      	b.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800403e:	4b1c      	ldr	r3, [pc, #112]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004040:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	2b00      	cmp	r3, #0
 8004048:	d0eb      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800404a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800404e:	2b00      	cmp	r3, #0
 8004050:	d129      	bne.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004052:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004056:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800405a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800405e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004062:	d10e      	bne.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004064:	4b12      	ldr	r3, [pc, #72]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800406c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004070:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004074:	091a      	lsrs	r2, r3, #4
 8004076:	4b10      	ldr	r3, [pc, #64]	@ (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004078:	4013      	ands	r3, r2
 800407a:	4a0d      	ldr	r2, [pc, #52]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800407c:	430b      	orrs	r3, r1
 800407e:	6113      	str	r3, [r2, #16]
 8004080:	e005      	b.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004082:	4b0b      	ldr	r3, [pc, #44]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	4a0a      	ldr	r2, [pc, #40]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004088:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800408c:	6113      	str	r3, [r2, #16]
 800408e:	4b08      	ldr	r3, [pc, #32]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004090:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004092:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004096:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800409a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800409e:	4a04      	ldr	r2, [pc, #16]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040a0:	430b      	orrs	r3, r1
 80040a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80040a4:	e00e      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80040a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80040ae:	e009      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80040b0:	58024400 	.word	0x58024400
 80040b4:	58024800 	.word	0x58024800
 80040b8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80040c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040cc:	f002 0301 	and.w	r3, r2, #1
 80040d0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80040d4:	2300      	movs	r3, #0
 80040d6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80040da:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80040de:	460b      	mov	r3, r1
 80040e0:	4313      	orrs	r3, r2
 80040e2:	f000 8089 	beq.w	80041f8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80040e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040ec:	2b28      	cmp	r3, #40	@ 0x28
 80040ee:	d86b      	bhi.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80040f0:	a201      	add	r2, pc, #4	@ (adr r2, 80040f8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80040f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040f6:	bf00      	nop
 80040f8:	080041d1 	.word	0x080041d1
 80040fc:	080041c9 	.word	0x080041c9
 8004100:	080041c9 	.word	0x080041c9
 8004104:	080041c9 	.word	0x080041c9
 8004108:	080041c9 	.word	0x080041c9
 800410c:	080041c9 	.word	0x080041c9
 8004110:	080041c9 	.word	0x080041c9
 8004114:	080041c9 	.word	0x080041c9
 8004118:	0800419d 	.word	0x0800419d
 800411c:	080041c9 	.word	0x080041c9
 8004120:	080041c9 	.word	0x080041c9
 8004124:	080041c9 	.word	0x080041c9
 8004128:	080041c9 	.word	0x080041c9
 800412c:	080041c9 	.word	0x080041c9
 8004130:	080041c9 	.word	0x080041c9
 8004134:	080041c9 	.word	0x080041c9
 8004138:	080041b3 	.word	0x080041b3
 800413c:	080041c9 	.word	0x080041c9
 8004140:	080041c9 	.word	0x080041c9
 8004144:	080041c9 	.word	0x080041c9
 8004148:	080041c9 	.word	0x080041c9
 800414c:	080041c9 	.word	0x080041c9
 8004150:	080041c9 	.word	0x080041c9
 8004154:	080041c9 	.word	0x080041c9
 8004158:	080041d1 	.word	0x080041d1
 800415c:	080041c9 	.word	0x080041c9
 8004160:	080041c9 	.word	0x080041c9
 8004164:	080041c9 	.word	0x080041c9
 8004168:	080041c9 	.word	0x080041c9
 800416c:	080041c9 	.word	0x080041c9
 8004170:	080041c9 	.word	0x080041c9
 8004174:	080041c9 	.word	0x080041c9
 8004178:	080041d1 	.word	0x080041d1
 800417c:	080041c9 	.word	0x080041c9
 8004180:	080041c9 	.word	0x080041c9
 8004184:	080041c9 	.word	0x080041c9
 8004188:	080041c9 	.word	0x080041c9
 800418c:	080041c9 	.word	0x080041c9
 8004190:	080041c9 	.word	0x080041c9
 8004194:	080041c9 	.word	0x080041c9
 8004198:	080041d1 	.word	0x080041d1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800419c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041a0:	3308      	adds	r3, #8
 80041a2:	2101      	movs	r1, #1
 80041a4:	4618      	mov	r0, r3
 80041a6:	f000 ffc3 	bl	8005130 <RCCEx_PLL2_Config>
 80041aa:	4603      	mov	r3, r0
 80041ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80041b0:	e00f      	b.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80041b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041b6:	3328      	adds	r3, #40	@ 0x28
 80041b8:	2101      	movs	r1, #1
 80041ba:	4618      	mov	r0, r3
 80041bc:	f001 f86a 	bl	8005294 <RCCEx_PLL3_Config>
 80041c0:	4603      	mov	r3, r0
 80041c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80041c6:	e004      	b.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041ce:	e000      	b.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80041d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d10a      	bne.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80041da:	4bbf      	ldr	r3, [pc, #764]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041de:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80041e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80041e8:	4abb      	ldr	r2, [pc, #748]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041ea:	430b      	orrs	r3, r1
 80041ec:	6553      	str	r3, [r2, #84]	@ 0x54
 80041ee:	e003      	b.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80041f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004200:	f002 0302 	and.w	r3, r2, #2
 8004204:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004208:	2300      	movs	r3, #0
 800420a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800420e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004212:	460b      	mov	r3, r1
 8004214:	4313      	orrs	r3, r2
 8004216:	d041      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004218:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800421c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800421e:	2b05      	cmp	r3, #5
 8004220:	d824      	bhi.n	800426c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004222:	a201      	add	r2, pc, #4	@ (adr r2, 8004228 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004228:	08004275 	.word	0x08004275
 800422c:	08004241 	.word	0x08004241
 8004230:	08004257 	.word	0x08004257
 8004234:	08004275 	.word	0x08004275
 8004238:	08004275 	.word	0x08004275
 800423c:	08004275 	.word	0x08004275
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004240:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004244:	3308      	adds	r3, #8
 8004246:	2101      	movs	r1, #1
 8004248:	4618      	mov	r0, r3
 800424a:	f000 ff71 	bl	8005130 <RCCEx_PLL2_Config>
 800424e:	4603      	mov	r3, r0
 8004250:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004254:	e00f      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004256:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800425a:	3328      	adds	r3, #40	@ 0x28
 800425c:	2101      	movs	r1, #1
 800425e:	4618      	mov	r0, r3
 8004260:	f001 f818 	bl	8005294 <RCCEx_PLL3_Config>
 8004264:	4603      	mov	r3, r0
 8004266:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800426a:	e004      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004272:	e000      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004274:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004276:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800427a:	2b00      	cmp	r3, #0
 800427c:	d10a      	bne.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800427e:	4b96      	ldr	r3, [pc, #600]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004280:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004282:	f023 0107 	bic.w	r1, r3, #7
 8004286:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800428a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800428c:	4a92      	ldr	r2, [pc, #584]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800428e:	430b      	orrs	r3, r1
 8004290:	6553      	str	r3, [r2, #84]	@ 0x54
 8004292:	e003      	b.n	800429c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004294:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004298:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800429c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a4:	f002 0304 	and.w	r3, r2, #4
 80042a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80042ac:	2300      	movs	r3, #0
 80042ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80042b2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80042b6:	460b      	mov	r3, r1
 80042b8:	4313      	orrs	r3, r2
 80042ba:	d044      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80042bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042c4:	2b05      	cmp	r3, #5
 80042c6:	d825      	bhi.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80042c8:	a201      	add	r2, pc, #4	@ (adr r2, 80042d0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80042ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ce:	bf00      	nop
 80042d0:	0800431d 	.word	0x0800431d
 80042d4:	080042e9 	.word	0x080042e9
 80042d8:	080042ff 	.word	0x080042ff
 80042dc:	0800431d 	.word	0x0800431d
 80042e0:	0800431d 	.word	0x0800431d
 80042e4:	0800431d 	.word	0x0800431d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80042e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042ec:	3308      	adds	r3, #8
 80042ee:	2101      	movs	r1, #1
 80042f0:	4618      	mov	r0, r3
 80042f2:	f000 ff1d 	bl	8005130 <RCCEx_PLL2_Config>
 80042f6:	4603      	mov	r3, r0
 80042f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80042fc:	e00f      	b.n	800431e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80042fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004302:	3328      	adds	r3, #40	@ 0x28
 8004304:	2101      	movs	r1, #1
 8004306:	4618      	mov	r0, r3
 8004308:	f000 ffc4 	bl	8005294 <RCCEx_PLL3_Config>
 800430c:	4603      	mov	r3, r0
 800430e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004312:	e004      	b.n	800431e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800431a:	e000      	b.n	800431e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800431c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800431e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004322:	2b00      	cmp	r3, #0
 8004324:	d10b      	bne.n	800433e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004326:	4b6c      	ldr	r3, [pc, #432]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800432a:	f023 0107 	bic.w	r1, r3, #7
 800432e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004332:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004336:	4a68      	ldr	r2, [pc, #416]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004338:	430b      	orrs	r3, r1
 800433a:	6593      	str	r3, [r2, #88]	@ 0x58
 800433c:	e003      	b.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800433e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004342:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004346:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800434a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800434e:	f002 0320 	and.w	r3, r2, #32
 8004352:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004356:	2300      	movs	r3, #0
 8004358:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800435c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004360:	460b      	mov	r3, r1
 8004362:	4313      	orrs	r3, r2
 8004364:	d055      	beq.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004366:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800436a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800436e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004372:	d033      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004374:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004378:	d82c      	bhi.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800437a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800437e:	d02f      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004380:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004384:	d826      	bhi.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004386:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800438a:	d02b      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800438c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004390:	d820      	bhi.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004392:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004396:	d012      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004398:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800439c:	d81a      	bhi.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d022      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80043a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80043a6:	d115      	bne.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80043a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ac:	3308      	adds	r3, #8
 80043ae:	2100      	movs	r1, #0
 80043b0:	4618      	mov	r0, r3
 80043b2:	f000 febd 	bl	8005130 <RCCEx_PLL2_Config>
 80043b6:	4603      	mov	r3, r0
 80043b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80043bc:	e015      	b.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80043be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043c2:	3328      	adds	r3, #40	@ 0x28
 80043c4:	2102      	movs	r1, #2
 80043c6:	4618      	mov	r0, r3
 80043c8:	f000 ff64 	bl	8005294 <RCCEx_PLL3_Config>
 80043cc:	4603      	mov	r3, r0
 80043ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80043d2:	e00a      	b.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80043da:	e006      	b.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80043dc:	bf00      	nop
 80043de:	e004      	b.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80043e0:	bf00      	nop
 80043e2:	e002      	b.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80043e4:	bf00      	nop
 80043e6:	e000      	b.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80043e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d10b      	bne.n	800440a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043f2:	4b39      	ldr	r3, [pc, #228]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80043f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043f6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80043fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004402:	4a35      	ldr	r2, [pc, #212]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004404:	430b      	orrs	r3, r1
 8004406:	6553      	str	r3, [r2, #84]	@ 0x54
 8004408:	e003      	b.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800440a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800440e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004412:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800441a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800441e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004422:	2300      	movs	r3, #0
 8004424:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004428:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800442c:	460b      	mov	r3, r1
 800442e:	4313      	orrs	r3, r2
 8004430:	d058      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004432:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004436:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800443a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800443e:	d033      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004440:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004444:	d82c      	bhi.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004446:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800444a:	d02f      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800444c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004450:	d826      	bhi.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004452:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004456:	d02b      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004458:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800445c:	d820      	bhi.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800445e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004462:	d012      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004464:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004468:	d81a      	bhi.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800446a:	2b00      	cmp	r3, #0
 800446c:	d022      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800446e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004472:	d115      	bne.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004474:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004478:	3308      	adds	r3, #8
 800447a:	2100      	movs	r1, #0
 800447c:	4618      	mov	r0, r3
 800447e:	f000 fe57 	bl	8005130 <RCCEx_PLL2_Config>
 8004482:	4603      	mov	r3, r0
 8004484:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004488:	e015      	b.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800448a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800448e:	3328      	adds	r3, #40	@ 0x28
 8004490:	2102      	movs	r1, #2
 8004492:	4618      	mov	r0, r3
 8004494:	f000 fefe 	bl	8005294 <RCCEx_PLL3_Config>
 8004498:	4603      	mov	r3, r0
 800449a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800449e:	e00a      	b.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80044a6:	e006      	b.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80044a8:	bf00      	nop
 80044aa:	e004      	b.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80044ac:	bf00      	nop
 80044ae:	e002      	b.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80044b0:	bf00      	nop
 80044b2:	e000      	b.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80044b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d10e      	bne.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80044be:	4b06      	ldr	r3, [pc, #24]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80044c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044c2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80044c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80044ce:	4a02      	ldr	r2, [pc, #8]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80044d0:	430b      	orrs	r3, r1
 80044d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80044d4:	e006      	b.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80044d6:	bf00      	nop
 80044d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80044e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ec:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80044f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80044f4:	2300      	movs	r3, #0
 80044f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80044fa:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80044fe:	460b      	mov	r3, r1
 8004500:	4313      	orrs	r3, r2
 8004502:	d055      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004504:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004508:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800450c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004510:	d033      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004512:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004516:	d82c      	bhi.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004518:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800451c:	d02f      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800451e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004522:	d826      	bhi.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004524:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004528:	d02b      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800452a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800452e:	d820      	bhi.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004530:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004534:	d012      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004536:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800453a:	d81a      	bhi.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800453c:	2b00      	cmp	r3, #0
 800453e:	d022      	beq.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004540:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004544:	d115      	bne.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004546:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800454a:	3308      	adds	r3, #8
 800454c:	2100      	movs	r1, #0
 800454e:	4618      	mov	r0, r3
 8004550:	f000 fdee 	bl	8005130 <RCCEx_PLL2_Config>
 8004554:	4603      	mov	r3, r0
 8004556:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800455a:	e015      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800455c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004560:	3328      	adds	r3, #40	@ 0x28
 8004562:	2102      	movs	r1, #2
 8004564:	4618      	mov	r0, r3
 8004566:	f000 fe95 	bl	8005294 <RCCEx_PLL3_Config>
 800456a:	4603      	mov	r3, r0
 800456c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004570:	e00a      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004578:	e006      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800457a:	bf00      	nop
 800457c:	e004      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800457e:	bf00      	nop
 8004580:	e002      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004582:	bf00      	nop
 8004584:	e000      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004586:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004588:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800458c:	2b00      	cmp	r3, #0
 800458e:	d10b      	bne.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004590:	4ba1      	ldr	r3, [pc, #644]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004592:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004594:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004598:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800459c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80045a0:	4a9d      	ldr	r2, [pc, #628]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045a2:	430b      	orrs	r3, r1
 80045a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80045a6:	e003      	b.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80045b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b8:	f002 0308 	and.w	r3, r2, #8
 80045bc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80045c0:	2300      	movs	r3, #0
 80045c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80045c6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80045ca:	460b      	mov	r3, r1
 80045cc:	4313      	orrs	r3, r2
 80045ce:	d01e      	beq.n	800460e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80045d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045dc:	d10c      	bne.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80045de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045e2:	3328      	adds	r3, #40	@ 0x28
 80045e4:	2102      	movs	r1, #2
 80045e6:	4618      	mov	r0, r3
 80045e8:	f000 fe54 	bl	8005294 <RCCEx_PLL3_Config>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d002      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80045f8:	4b87      	ldr	r3, [pc, #540]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045fc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004600:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004604:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004608:	4a83      	ldr	r2, [pc, #524]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800460a:	430b      	orrs	r3, r1
 800460c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800460e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004616:	f002 0310 	and.w	r3, r2, #16
 800461a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800461e:	2300      	movs	r3, #0
 8004620:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004624:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004628:	460b      	mov	r3, r1
 800462a:	4313      	orrs	r3, r2
 800462c:	d01e      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800462e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004632:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004636:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800463a:	d10c      	bne.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800463c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004640:	3328      	adds	r3, #40	@ 0x28
 8004642:	2102      	movs	r1, #2
 8004644:	4618      	mov	r0, r3
 8004646:	f000 fe25 	bl	8005294 <RCCEx_PLL3_Config>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d002      	beq.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004656:	4b70      	ldr	r3, [pc, #448]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004658:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800465a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800465e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004662:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004666:	4a6c      	ldr	r2, [pc, #432]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004668:	430b      	orrs	r3, r1
 800466a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800466c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004674:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004678:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800467c:	2300      	movs	r3, #0
 800467e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004682:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004686:	460b      	mov	r3, r1
 8004688:	4313      	orrs	r3, r2
 800468a:	d03e      	beq.n	800470a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800468c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004690:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004694:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004698:	d022      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800469a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800469e:	d81b      	bhi.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d003      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80046a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046a8:	d00b      	beq.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80046aa:	e015      	b.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046b0:	3308      	adds	r3, #8
 80046b2:	2100      	movs	r1, #0
 80046b4:	4618      	mov	r0, r3
 80046b6:	f000 fd3b 	bl	8005130 <RCCEx_PLL2_Config>
 80046ba:	4603      	mov	r3, r0
 80046bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80046c0:	e00f      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80046c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046c6:	3328      	adds	r3, #40	@ 0x28
 80046c8:	2102      	movs	r1, #2
 80046ca:	4618      	mov	r0, r3
 80046cc:	f000 fde2 	bl	8005294 <RCCEx_PLL3_Config>
 80046d0:	4603      	mov	r3, r0
 80046d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80046d6:	e004      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80046de:	e000      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80046e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d10b      	bne.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80046ea:	4b4b      	ldr	r3, [pc, #300]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046ee:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80046f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80046fa:	4a47      	ldr	r2, [pc, #284]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046fc:	430b      	orrs	r3, r1
 80046fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8004700:	e003      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004702:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004706:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800470a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800470e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004712:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004716:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004718:	2300      	movs	r3, #0
 800471a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800471c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004720:	460b      	mov	r3, r1
 8004722:	4313      	orrs	r3, r2
 8004724:	d03b      	beq.n	800479e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004726:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800472a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800472e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004732:	d01f      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004734:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004738:	d818      	bhi.n	800476c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800473a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800473e:	d003      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004740:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004744:	d007      	beq.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004746:	e011      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004748:	4b33      	ldr	r3, [pc, #204]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800474a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800474c:	4a32      	ldr	r2, [pc, #200]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800474e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004752:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004754:	e00f      	b.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004756:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800475a:	3328      	adds	r3, #40	@ 0x28
 800475c:	2101      	movs	r1, #1
 800475e:	4618      	mov	r0, r3
 8004760:	f000 fd98 	bl	8005294 <RCCEx_PLL3_Config>
 8004764:	4603      	mov	r3, r0
 8004766:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800476a:	e004      	b.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004772:	e000      	b.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004774:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004776:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800477a:	2b00      	cmp	r3, #0
 800477c:	d10b      	bne.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800477e:	4b26      	ldr	r3, [pc, #152]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004780:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004782:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800478a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800478e:	4a22      	ldr	r2, [pc, #136]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004790:	430b      	orrs	r3, r1
 8004792:	6553      	str	r3, [r2, #84]	@ 0x54
 8004794:	e003      	b.n	800479e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004796:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800479a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800479e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80047aa:	673b      	str	r3, [r7, #112]	@ 0x70
 80047ac:	2300      	movs	r3, #0
 80047ae:	677b      	str	r3, [r7, #116]	@ 0x74
 80047b0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80047b4:	460b      	mov	r3, r1
 80047b6:	4313      	orrs	r3, r2
 80047b8:	d034      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80047ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d003      	beq.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80047c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047c8:	d007      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80047ca:	e011      	b.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047cc:	4b12      	ldr	r3, [pc, #72]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047d0:	4a11      	ldr	r2, [pc, #68]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80047d8:	e00e      	b.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80047da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047de:	3308      	adds	r3, #8
 80047e0:	2102      	movs	r1, #2
 80047e2:	4618      	mov	r0, r3
 80047e4:	f000 fca4 	bl	8005130 <RCCEx_PLL2_Config>
 80047e8:	4603      	mov	r3, r0
 80047ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80047ee:	e003      	b.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80047f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d10d      	bne.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004800:	4b05      	ldr	r3, [pc, #20]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004802:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004804:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004808:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800480c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800480e:	4a02      	ldr	r2, [pc, #8]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004810:	430b      	orrs	r3, r1
 8004812:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004814:	e006      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004816:	bf00      	nop
 8004818:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800481c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004820:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004824:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800482c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004830:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004832:	2300      	movs	r3, #0
 8004834:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004836:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800483a:	460b      	mov	r3, r1
 800483c:	4313      	orrs	r3, r2
 800483e:	d00c      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004840:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004844:	3328      	adds	r3, #40	@ 0x28
 8004846:	2102      	movs	r1, #2
 8004848:	4618      	mov	r0, r3
 800484a:	f000 fd23 	bl	8005294 <RCCEx_PLL3_Config>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	d002      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800485a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800485e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004862:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004866:	663b      	str	r3, [r7, #96]	@ 0x60
 8004868:	2300      	movs	r3, #0
 800486a:	667b      	str	r3, [r7, #100]	@ 0x64
 800486c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004870:	460b      	mov	r3, r1
 8004872:	4313      	orrs	r3, r2
 8004874:	d038      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004876:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800487a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800487e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004882:	d018      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004884:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004888:	d811      	bhi.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800488a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800488e:	d014      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004890:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004894:	d80b      	bhi.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004896:	2b00      	cmp	r3, #0
 8004898:	d011      	beq.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800489a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800489e:	d106      	bne.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048a0:	4bc3      	ldr	r3, [pc, #780]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048a4:	4ac2      	ldr	r2, [pc, #776]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80048ac:	e008      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80048b4:	e004      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80048b6:	bf00      	nop
 80048b8:	e002      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80048ba:	bf00      	nop
 80048bc:	e000      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80048be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d10b      	bne.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80048c8:	4bb9      	ldr	r3, [pc, #740]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048cc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80048d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048d8:	4ab5      	ldr	r2, [pc, #724]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048da:	430b      	orrs	r3, r1
 80048dc:	6553      	str	r3, [r2, #84]	@ 0x54
 80048de:	e003      	b.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80048e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80048f4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80048f6:	2300      	movs	r3, #0
 80048f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80048fa:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80048fe:	460b      	mov	r3, r1
 8004900:	4313      	orrs	r3, r2
 8004902:	d009      	beq.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004904:	4baa      	ldr	r3, [pc, #680]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004906:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004908:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800490c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004910:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004912:	4aa7      	ldr	r2, [pc, #668]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004914:	430b      	orrs	r3, r1
 8004916:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004918:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800491c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004920:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004924:	653b      	str	r3, [r7, #80]	@ 0x50
 8004926:	2300      	movs	r3, #0
 8004928:	657b      	str	r3, [r7, #84]	@ 0x54
 800492a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800492e:	460b      	mov	r3, r1
 8004930:	4313      	orrs	r3, r2
 8004932:	d00a      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004934:	4b9e      	ldr	r3, [pc, #632]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800493c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004940:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004944:	4a9a      	ldr	r2, [pc, #616]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004946:	430b      	orrs	r3, r1
 8004948:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800494a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800494e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004952:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004956:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004958:	2300      	movs	r3, #0
 800495a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800495c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004960:	460b      	mov	r3, r1
 8004962:	4313      	orrs	r3, r2
 8004964:	d009      	beq.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004966:	4b92      	ldr	r3, [pc, #584]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004968:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800496a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800496e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004972:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004974:	4a8e      	ldr	r2, [pc, #568]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004976:	430b      	orrs	r3, r1
 8004978:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800497a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800497e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004982:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004986:	643b      	str	r3, [r7, #64]	@ 0x40
 8004988:	2300      	movs	r3, #0
 800498a:	647b      	str	r3, [r7, #68]	@ 0x44
 800498c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004990:	460b      	mov	r3, r1
 8004992:	4313      	orrs	r3, r2
 8004994:	d00e      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004996:	4b86      	ldr	r3, [pc, #536]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	4a85      	ldr	r2, [pc, #532]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800499c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80049a0:	6113      	str	r3, [r2, #16]
 80049a2:	4b83      	ldr	r3, [pc, #524]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049a4:	6919      	ldr	r1, [r3, #16]
 80049a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049aa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80049ae:	4a80      	ldr	r2, [pc, #512]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049b0:	430b      	orrs	r3, r1
 80049b2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80049b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049bc:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80049c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80049c2:	2300      	movs	r3, #0
 80049c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049c6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80049ca:	460b      	mov	r3, r1
 80049cc:	4313      	orrs	r3, r2
 80049ce:	d009      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80049d0:	4b77      	ldr	r3, [pc, #476]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049d4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80049d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049de:	4a74      	ldr	r2, [pc, #464]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049e0:	430b      	orrs	r3, r1
 80049e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80049e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ec:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80049f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80049f2:	2300      	movs	r3, #0
 80049f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80049f6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80049fa:	460b      	mov	r3, r1
 80049fc:	4313      	orrs	r3, r2
 80049fe:	d00a      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004a00:	4b6b      	ldr	r3, [pc, #428]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a04:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a10:	4a67      	ldr	r2, [pc, #412]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a12:	430b      	orrs	r3, r1
 8004a14:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a1e:	2100      	movs	r1, #0
 8004a20:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004a22:	f003 0301 	and.w	r3, r3, #1
 8004a26:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a28:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	d011      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a36:	3308      	adds	r3, #8
 8004a38:	2100      	movs	r1, #0
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f000 fb78 	bl	8005130 <RCCEx_PLL2_Config>
 8004a40:	4603      	mov	r3, r0
 8004a42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004a46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d003      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004a56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a5e:	2100      	movs	r1, #0
 8004a60:	6239      	str	r1, [r7, #32]
 8004a62:	f003 0302 	and.w	r3, r3, #2
 8004a66:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a68:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	d011      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a76:	3308      	adds	r3, #8
 8004a78:	2101      	movs	r1, #1
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f000 fb58 	bl	8005130 <RCCEx_PLL2_Config>
 8004a80:	4603      	mov	r3, r0
 8004a82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004a86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d003      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a9e:	2100      	movs	r1, #0
 8004aa0:	61b9      	str	r1, [r7, #24]
 8004aa2:	f003 0304 	and.w	r3, r3, #4
 8004aa6:	61fb      	str	r3, [r7, #28]
 8004aa8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004aac:	460b      	mov	r3, r1
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	d011      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ab6:	3308      	adds	r3, #8
 8004ab8:	2102      	movs	r1, #2
 8004aba:	4618      	mov	r0, r3
 8004abc:	f000 fb38 	bl	8005130 <RCCEx_PLL2_Config>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004ac6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d003      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ace:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ad2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ade:	2100      	movs	r1, #0
 8004ae0:	6139      	str	r1, [r7, #16]
 8004ae2:	f003 0308 	and.w	r3, r3, #8
 8004ae6:	617b      	str	r3, [r7, #20]
 8004ae8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004aec:	460b      	mov	r3, r1
 8004aee:	4313      	orrs	r3, r2
 8004af0:	d011      	beq.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004af6:	3328      	adds	r3, #40	@ 0x28
 8004af8:	2100      	movs	r1, #0
 8004afa:	4618      	mov	r0, r3
 8004afc:	f000 fbca 	bl	8005294 <RCCEx_PLL3_Config>
 8004b00:	4603      	mov	r3, r0
 8004b02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004b06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d003      	beq.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b1e:	2100      	movs	r1, #0
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	f003 0310 	and.w	r3, r3, #16
 8004b26:	60fb      	str	r3, [r7, #12]
 8004b28:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	d011      	beq.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b36:	3328      	adds	r3, #40	@ 0x28
 8004b38:	2101      	movs	r1, #1
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f000 fbaa 	bl	8005294 <RCCEx_PLL3_Config>
 8004b40:	4603      	mov	r3, r0
 8004b42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004b46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d003      	beq.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b5e:	2100      	movs	r1, #0
 8004b60:	6039      	str	r1, [r7, #0]
 8004b62:	f003 0320 	and.w	r3, r3, #32
 8004b66:	607b      	str	r3, [r7, #4]
 8004b68:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	d011      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b76:	3328      	adds	r3, #40	@ 0x28
 8004b78:	2102      	movs	r1, #2
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f000 fb8a 	bl	8005294 <RCCEx_PLL3_Config>
 8004b80:	4603      	mov	r3, r0
 8004b82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004b86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d003      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004b96:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d101      	bne.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	e000      	b.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004baa:	46bd      	mov	sp, r7
 8004bac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bb0:	58024400 	.word	0x58024400

08004bb4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004bb8:	f7fe fd96 	bl	80036e8 <HAL_RCC_GetHCLKFreq>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	4b06      	ldr	r3, [pc, #24]	@ (8004bd8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004bc0:	6a1b      	ldr	r3, [r3, #32]
 8004bc2:	091b      	lsrs	r3, r3, #4
 8004bc4:	f003 0307 	and.w	r3, r3, #7
 8004bc8:	4904      	ldr	r1, [pc, #16]	@ (8004bdc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004bca:	5ccb      	ldrb	r3, [r1, r3]
 8004bcc:	f003 031f 	and.w	r3, r3, #31
 8004bd0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	58024400 	.word	0x58024400
 8004bdc:	08008b28 	.word	0x08008b28

08004be0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b089      	sub	sp, #36	@ 0x24
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004be8:	4ba1      	ldr	r3, [pc, #644]	@ (8004e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bec:	f003 0303 	and.w	r3, r3, #3
 8004bf0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004bf2:	4b9f      	ldr	r3, [pc, #636]	@ (8004e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bf6:	0b1b      	lsrs	r3, r3, #12
 8004bf8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004bfc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004bfe:	4b9c      	ldr	r3, [pc, #624]	@ (8004e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c02:	091b      	lsrs	r3, r3, #4
 8004c04:	f003 0301 	and.w	r3, r3, #1
 8004c08:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004c0a:	4b99      	ldr	r3, [pc, #612]	@ (8004e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c0e:	08db      	lsrs	r3, r3, #3
 8004c10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c14:	693a      	ldr	r2, [r7, #16]
 8004c16:	fb02 f303 	mul.w	r3, r2, r3
 8004c1a:	ee07 3a90 	vmov	s15, r3
 8004c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c22:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	f000 8111 	beq.w	8004e50 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	f000 8083 	beq.w	8004d3c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	f200 80a1 	bhi.w	8004d80 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d003      	beq.n	8004c4c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d056      	beq.n	8004cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004c4a:	e099      	b.n	8004d80 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c4c:	4b88      	ldr	r3, [pc, #544]	@ (8004e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0320 	and.w	r3, r3, #32
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d02d      	beq.n	8004cb4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004c58:	4b85      	ldr	r3, [pc, #532]	@ (8004e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	08db      	lsrs	r3, r3, #3
 8004c5e:	f003 0303 	and.w	r3, r3, #3
 8004c62:	4a84      	ldr	r2, [pc, #528]	@ (8004e74 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004c64:	fa22 f303 	lsr.w	r3, r2, r3
 8004c68:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	ee07 3a90 	vmov	s15, r3
 8004c70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	ee07 3a90 	vmov	s15, r3
 8004c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c82:	4b7b      	ldr	r3, [pc, #492]	@ (8004e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c8a:	ee07 3a90 	vmov	s15, r3
 8004c8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c92:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c96:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004e78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ca2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ca6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004cb2:	e087      	b.n	8004dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	ee07 3a90 	vmov	s15, r3
 8004cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cbe:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004e7c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004cc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cc6:	4b6a      	ldr	r3, [pc, #424]	@ (8004e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cce:	ee07 3a90 	vmov	s15, r3
 8004cd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cda:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004e78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004cde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ce2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ce6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cf2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004cf6:	e065      	b.n	8004dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	ee07 3a90 	vmov	s15, r3
 8004cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d02:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004e80 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004d06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d0a:	4b59      	ldr	r3, [pc, #356]	@ (8004e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d12:	ee07 3a90 	vmov	s15, r3
 8004d16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d1e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004e78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004d22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d3a:	e043      	b.n	8004dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	ee07 3a90 	vmov	s15, r3
 8004d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d46:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004e84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004d4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d4e:	4b48      	ldr	r3, [pc, #288]	@ (8004e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d56:	ee07 3a90 	vmov	s15, r3
 8004d5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d62:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004e78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004d66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d7e:	e021      	b.n	8004dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	ee07 3a90 	vmov	s15, r3
 8004d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d8a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004e80 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004d8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d92:	4b37      	ldr	r3, [pc, #220]	@ (8004e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d9a:	ee07 3a90 	vmov	s15, r3
 8004d9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004da2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004da6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004e78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004daa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004db2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004db6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004dc2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004dc4:	4b2a      	ldr	r3, [pc, #168]	@ (8004e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dc8:	0a5b      	lsrs	r3, r3, #9
 8004dca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004dce:	ee07 3a90 	vmov	s15, r3
 8004dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dd6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004dda:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004dde:	edd7 6a07 	vldr	s13, [r7, #28]
 8004de2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004de6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dea:	ee17 2a90 	vmov	r2, s15
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004df2:	4b1f      	ldr	r3, [pc, #124]	@ (8004e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004df4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004df6:	0c1b      	lsrs	r3, r3, #16
 8004df8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004dfc:	ee07 3a90 	vmov	s15, r3
 8004e00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e04:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e08:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e18:	ee17 2a90 	vmov	r2, s15
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004e20:	4b13      	ldr	r3, [pc, #76]	@ (8004e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e24:	0e1b      	lsrs	r3, r3, #24
 8004e26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e2a:	ee07 3a90 	vmov	s15, r3
 8004e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e32:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e46:	ee17 2a90 	vmov	r2, s15
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004e4e:	e008      	b.n	8004e62 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	609a      	str	r2, [r3, #8]
}
 8004e62:	bf00      	nop
 8004e64:	3724      	adds	r7, #36	@ 0x24
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr
 8004e6e:	bf00      	nop
 8004e70:	58024400 	.word	0x58024400
 8004e74:	03d09000 	.word	0x03d09000
 8004e78:	46000000 	.word	0x46000000
 8004e7c:	4c742400 	.word	0x4c742400
 8004e80:	4a742400 	.word	0x4a742400
 8004e84:	4af42400 	.word	0x4af42400

08004e88 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b089      	sub	sp, #36	@ 0x24
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004e90:	4ba1      	ldr	r3, [pc, #644]	@ (8005118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e94:	f003 0303 	and.w	r3, r3, #3
 8004e98:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004e9a:	4b9f      	ldr	r3, [pc, #636]	@ (8005118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e9e:	0d1b      	lsrs	r3, r3, #20
 8004ea0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ea4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004ea6:	4b9c      	ldr	r3, [pc, #624]	@ (8005118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eaa:	0a1b      	lsrs	r3, r3, #8
 8004eac:	f003 0301 	and.w	r3, r3, #1
 8004eb0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004eb2:	4b99      	ldr	r3, [pc, #612]	@ (8005118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eb6:	08db      	lsrs	r3, r3, #3
 8004eb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ebc:	693a      	ldr	r2, [r7, #16]
 8004ebe:	fb02 f303 	mul.w	r3, r2, r3
 8004ec2:	ee07 3a90 	vmov	s15, r3
 8004ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	f000 8111 	beq.w	80050f8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	f000 8083 	beq.w	8004fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	f200 80a1 	bhi.w	8005028 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d003      	beq.n	8004ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004eec:	69bb      	ldr	r3, [r7, #24]
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d056      	beq.n	8004fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004ef2:	e099      	b.n	8005028 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ef4:	4b88      	ldr	r3, [pc, #544]	@ (8005118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 0320 	and.w	r3, r3, #32
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d02d      	beq.n	8004f5c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004f00:	4b85      	ldr	r3, [pc, #532]	@ (8005118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	08db      	lsrs	r3, r3, #3
 8004f06:	f003 0303 	and.w	r3, r3, #3
 8004f0a:	4a84      	ldr	r2, [pc, #528]	@ (800511c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004f0c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f10:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	ee07 3a90 	vmov	s15, r3
 8004f18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	ee07 3a90 	vmov	s15, r3
 8004f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f2a:	4b7b      	ldr	r3, [pc, #492]	@ (8005118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f32:	ee07 3a90 	vmov	s15, r3
 8004f36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f3e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005120 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f56:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004f5a:	e087      	b.n	800506c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	ee07 3a90 	vmov	s15, r3
 8004f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f66:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005124 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004f6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f6e:	4b6a      	ldr	r3, [pc, #424]	@ (8005118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f76:	ee07 3a90 	vmov	s15, r3
 8004f7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f82:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005120 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f9e:	e065      	b.n	800506c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	ee07 3a90 	vmov	s15, r3
 8004fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004faa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005128 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004fae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fb2:	4b59      	ldr	r3, [pc, #356]	@ (8005118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fba:	ee07 3a90 	vmov	s15, r3
 8004fbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fc6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005120 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004fca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004fd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004fe2:	e043      	b.n	800506c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	ee07 3a90 	vmov	s15, r3
 8004fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fee:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800512c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004ff2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ff6:	4b48      	ldr	r3, [pc, #288]	@ (8005118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ffa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ffe:	ee07 3a90 	vmov	s15, r3
 8005002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005006:	ed97 6a03 	vldr	s12, [r7, #12]
 800500a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005120 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800500e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005012:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005016:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800501a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800501e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005022:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005026:	e021      	b.n	800506c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	ee07 3a90 	vmov	s15, r3
 800502e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005032:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005128 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005036:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800503a:	4b37      	ldr	r3, [pc, #220]	@ (8005118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800503c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800503e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005042:	ee07 3a90 	vmov	s15, r3
 8005046:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800504a:	ed97 6a03 	vldr	s12, [r7, #12]
 800504e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005120 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005052:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005056:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800505a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800505e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005066:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800506a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800506c:	4b2a      	ldr	r3, [pc, #168]	@ (8005118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800506e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005070:	0a5b      	lsrs	r3, r3, #9
 8005072:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005076:	ee07 3a90 	vmov	s15, r3
 800507a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800507e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005082:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005086:	edd7 6a07 	vldr	s13, [r7, #28]
 800508a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800508e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005092:	ee17 2a90 	vmov	r2, s15
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800509a:	4b1f      	ldr	r3, [pc, #124]	@ (8005118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800509c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800509e:	0c1b      	lsrs	r3, r3, #16
 80050a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050a4:	ee07 3a90 	vmov	s15, r3
 80050a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80050b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80050b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050c0:	ee17 2a90 	vmov	r2, s15
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80050c8:	4b13      	ldr	r3, [pc, #76]	@ (8005118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050cc:	0e1b      	lsrs	r3, r3, #24
 80050ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050d2:	ee07 3a90 	vmov	s15, r3
 80050d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80050de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80050e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050ee:	ee17 2a90 	vmov	r2, s15
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80050f6:	e008      	b.n	800510a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	609a      	str	r2, [r3, #8]
}
 800510a:	bf00      	nop
 800510c:	3724      	adds	r7, #36	@ 0x24
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr
 8005116:	bf00      	nop
 8005118:	58024400 	.word	0x58024400
 800511c:	03d09000 	.word	0x03d09000
 8005120:	46000000 	.word	0x46000000
 8005124:	4c742400 	.word	0x4c742400
 8005128:	4a742400 	.word	0x4a742400
 800512c:	4af42400 	.word	0x4af42400

08005130 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800513a:	2300      	movs	r3, #0
 800513c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800513e:	4b53      	ldr	r3, [pc, #332]	@ (800528c <RCCEx_PLL2_Config+0x15c>)
 8005140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005142:	f003 0303 	and.w	r3, r3, #3
 8005146:	2b03      	cmp	r3, #3
 8005148:	d101      	bne.n	800514e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e099      	b.n	8005282 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800514e:	4b4f      	ldr	r3, [pc, #316]	@ (800528c <RCCEx_PLL2_Config+0x15c>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a4e      	ldr	r2, [pc, #312]	@ (800528c <RCCEx_PLL2_Config+0x15c>)
 8005154:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005158:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800515a:	f7fc f9b9 	bl	80014d0 <HAL_GetTick>
 800515e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005160:	e008      	b.n	8005174 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005162:	f7fc f9b5 	bl	80014d0 <HAL_GetTick>
 8005166:	4602      	mov	r2, r0
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	2b02      	cmp	r3, #2
 800516e:	d901      	bls.n	8005174 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005170:	2303      	movs	r3, #3
 8005172:	e086      	b.n	8005282 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005174:	4b45      	ldr	r3, [pc, #276]	@ (800528c <RCCEx_PLL2_Config+0x15c>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800517c:	2b00      	cmp	r3, #0
 800517e:	d1f0      	bne.n	8005162 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005180:	4b42      	ldr	r3, [pc, #264]	@ (800528c <RCCEx_PLL2_Config+0x15c>)
 8005182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005184:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	031b      	lsls	r3, r3, #12
 800518e:	493f      	ldr	r1, [pc, #252]	@ (800528c <RCCEx_PLL2_Config+0x15c>)
 8005190:	4313      	orrs	r3, r2
 8005192:	628b      	str	r3, [r1, #40]	@ 0x28
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	3b01      	subs	r3, #1
 800519a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	3b01      	subs	r3, #1
 80051a4:	025b      	lsls	r3, r3, #9
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	431a      	orrs	r2, r3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	3b01      	subs	r3, #1
 80051b0:	041b      	lsls	r3, r3, #16
 80051b2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80051b6:	431a      	orrs	r2, r3
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	691b      	ldr	r3, [r3, #16]
 80051bc:	3b01      	subs	r3, #1
 80051be:	061b      	lsls	r3, r3, #24
 80051c0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80051c4:	4931      	ldr	r1, [pc, #196]	@ (800528c <RCCEx_PLL2_Config+0x15c>)
 80051c6:	4313      	orrs	r3, r2
 80051c8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80051ca:	4b30      	ldr	r3, [pc, #192]	@ (800528c <RCCEx_PLL2_Config+0x15c>)
 80051cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ce:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	695b      	ldr	r3, [r3, #20]
 80051d6:	492d      	ldr	r1, [pc, #180]	@ (800528c <RCCEx_PLL2_Config+0x15c>)
 80051d8:	4313      	orrs	r3, r2
 80051da:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80051dc:	4b2b      	ldr	r3, [pc, #172]	@ (800528c <RCCEx_PLL2_Config+0x15c>)
 80051de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051e0:	f023 0220 	bic.w	r2, r3, #32
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	699b      	ldr	r3, [r3, #24]
 80051e8:	4928      	ldr	r1, [pc, #160]	@ (800528c <RCCEx_PLL2_Config+0x15c>)
 80051ea:	4313      	orrs	r3, r2
 80051ec:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80051ee:	4b27      	ldr	r3, [pc, #156]	@ (800528c <RCCEx_PLL2_Config+0x15c>)
 80051f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051f2:	4a26      	ldr	r2, [pc, #152]	@ (800528c <RCCEx_PLL2_Config+0x15c>)
 80051f4:	f023 0310 	bic.w	r3, r3, #16
 80051f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80051fa:	4b24      	ldr	r3, [pc, #144]	@ (800528c <RCCEx_PLL2_Config+0x15c>)
 80051fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80051fe:	4b24      	ldr	r3, [pc, #144]	@ (8005290 <RCCEx_PLL2_Config+0x160>)
 8005200:	4013      	ands	r3, r2
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	69d2      	ldr	r2, [r2, #28]
 8005206:	00d2      	lsls	r2, r2, #3
 8005208:	4920      	ldr	r1, [pc, #128]	@ (800528c <RCCEx_PLL2_Config+0x15c>)
 800520a:	4313      	orrs	r3, r2
 800520c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800520e:	4b1f      	ldr	r3, [pc, #124]	@ (800528c <RCCEx_PLL2_Config+0x15c>)
 8005210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005212:	4a1e      	ldr	r2, [pc, #120]	@ (800528c <RCCEx_PLL2_Config+0x15c>)
 8005214:	f043 0310 	orr.w	r3, r3, #16
 8005218:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d106      	bne.n	800522e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005220:	4b1a      	ldr	r3, [pc, #104]	@ (800528c <RCCEx_PLL2_Config+0x15c>)
 8005222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005224:	4a19      	ldr	r2, [pc, #100]	@ (800528c <RCCEx_PLL2_Config+0x15c>)
 8005226:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800522a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800522c:	e00f      	b.n	800524e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	2b01      	cmp	r3, #1
 8005232:	d106      	bne.n	8005242 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005234:	4b15      	ldr	r3, [pc, #84]	@ (800528c <RCCEx_PLL2_Config+0x15c>)
 8005236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005238:	4a14      	ldr	r2, [pc, #80]	@ (800528c <RCCEx_PLL2_Config+0x15c>)
 800523a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800523e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005240:	e005      	b.n	800524e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005242:	4b12      	ldr	r3, [pc, #72]	@ (800528c <RCCEx_PLL2_Config+0x15c>)
 8005244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005246:	4a11      	ldr	r2, [pc, #68]	@ (800528c <RCCEx_PLL2_Config+0x15c>)
 8005248:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800524c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800524e:	4b0f      	ldr	r3, [pc, #60]	@ (800528c <RCCEx_PLL2_Config+0x15c>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a0e      	ldr	r2, [pc, #56]	@ (800528c <RCCEx_PLL2_Config+0x15c>)
 8005254:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005258:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800525a:	f7fc f939 	bl	80014d0 <HAL_GetTick>
 800525e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005260:	e008      	b.n	8005274 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005262:	f7fc f935 	bl	80014d0 <HAL_GetTick>
 8005266:	4602      	mov	r2, r0
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	1ad3      	subs	r3, r2, r3
 800526c:	2b02      	cmp	r3, #2
 800526e:	d901      	bls.n	8005274 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005270:	2303      	movs	r3, #3
 8005272:	e006      	b.n	8005282 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005274:	4b05      	ldr	r3, [pc, #20]	@ (800528c <RCCEx_PLL2_Config+0x15c>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d0f0      	beq.n	8005262 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005280:	7bfb      	ldrb	r3, [r7, #15]
}
 8005282:	4618      	mov	r0, r3
 8005284:	3710      	adds	r7, #16
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	58024400 	.word	0x58024400
 8005290:	ffff0007 	.word	0xffff0007

08005294 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800529e:	2300      	movs	r3, #0
 80052a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80052a2:	4b53      	ldr	r3, [pc, #332]	@ (80053f0 <RCCEx_PLL3_Config+0x15c>)
 80052a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052a6:	f003 0303 	and.w	r3, r3, #3
 80052aa:	2b03      	cmp	r3, #3
 80052ac:	d101      	bne.n	80052b2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e099      	b.n	80053e6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80052b2:	4b4f      	ldr	r3, [pc, #316]	@ (80053f0 <RCCEx_PLL3_Config+0x15c>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a4e      	ldr	r2, [pc, #312]	@ (80053f0 <RCCEx_PLL3_Config+0x15c>)
 80052b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052be:	f7fc f907 	bl	80014d0 <HAL_GetTick>
 80052c2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80052c4:	e008      	b.n	80052d8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80052c6:	f7fc f903 	bl	80014d0 <HAL_GetTick>
 80052ca:	4602      	mov	r2, r0
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	2b02      	cmp	r3, #2
 80052d2:	d901      	bls.n	80052d8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80052d4:	2303      	movs	r3, #3
 80052d6:	e086      	b.n	80053e6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80052d8:	4b45      	ldr	r3, [pc, #276]	@ (80053f0 <RCCEx_PLL3_Config+0x15c>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d1f0      	bne.n	80052c6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80052e4:	4b42      	ldr	r3, [pc, #264]	@ (80053f0 <RCCEx_PLL3_Config+0x15c>)
 80052e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052e8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	051b      	lsls	r3, r3, #20
 80052f2:	493f      	ldr	r1, [pc, #252]	@ (80053f0 <RCCEx_PLL3_Config+0x15c>)
 80052f4:	4313      	orrs	r3, r2
 80052f6:	628b      	str	r3, [r1, #40]	@ 0x28
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	3b01      	subs	r3, #1
 80052fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	3b01      	subs	r3, #1
 8005308:	025b      	lsls	r3, r3, #9
 800530a:	b29b      	uxth	r3, r3
 800530c:	431a      	orrs	r2, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	3b01      	subs	r3, #1
 8005314:	041b      	lsls	r3, r3, #16
 8005316:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800531a:	431a      	orrs	r2, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	691b      	ldr	r3, [r3, #16]
 8005320:	3b01      	subs	r3, #1
 8005322:	061b      	lsls	r3, r3, #24
 8005324:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005328:	4931      	ldr	r1, [pc, #196]	@ (80053f0 <RCCEx_PLL3_Config+0x15c>)
 800532a:	4313      	orrs	r3, r2
 800532c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800532e:	4b30      	ldr	r3, [pc, #192]	@ (80053f0 <RCCEx_PLL3_Config+0x15c>)
 8005330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005332:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	695b      	ldr	r3, [r3, #20]
 800533a:	492d      	ldr	r1, [pc, #180]	@ (80053f0 <RCCEx_PLL3_Config+0x15c>)
 800533c:	4313      	orrs	r3, r2
 800533e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005340:	4b2b      	ldr	r3, [pc, #172]	@ (80053f0 <RCCEx_PLL3_Config+0x15c>)
 8005342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005344:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	699b      	ldr	r3, [r3, #24]
 800534c:	4928      	ldr	r1, [pc, #160]	@ (80053f0 <RCCEx_PLL3_Config+0x15c>)
 800534e:	4313      	orrs	r3, r2
 8005350:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005352:	4b27      	ldr	r3, [pc, #156]	@ (80053f0 <RCCEx_PLL3_Config+0x15c>)
 8005354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005356:	4a26      	ldr	r2, [pc, #152]	@ (80053f0 <RCCEx_PLL3_Config+0x15c>)
 8005358:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800535c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800535e:	4b24      	ldr	r3, [pc, #144]	@ (80053f0 <RCCEx_PLL3_Config+0x15c>)
 8005360:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005362:	4b24      	ldr	r3, [pc, #144]	@ (80053f4 <RCCEx_PLL3_Config+0x160>)
 8005364:	4013      	ands	r3, r2
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	69d2      	ldr	r2, [r2, #28]
 800536a:	00d2      	lsls	r2, r2, #3
 800536c:	4920      	ldr	r1, [pc, #128]	@ (80053f0 <RCCEx_PLL3_Config+0x15c>)
 800536e:	4313      	orrs	r3, r2
 8005370:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005372:	4b1f      	ldr	r3, [pc, #124]	@ (80053f0 <RCCEx_PLL3_Config+0x15c>)
 8005374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005376:	4a1e      	ldr	r2, [pc, #120]	@ (80053f0 <RCCEx_PLL3_Config+0x15c>)
 8005378:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800537c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d106      	bne.n	8005392 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005384:	4b1a      	ldr	r3, [pc, #104]	@ (80053f0 <RCCEx_PLL3_Config+0x15c>)
 8005386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005388:	4a19      	ldr	r2, [pc, #100]	@ (80053f0 <RCCEx_PLL3_Config+0x15c>)
 800538a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800538e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005390:	e00f      	b.n	80053b2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	2b01      	cmp	r3, #1
 8005396:	d106      	bne.n	80053a6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005398:	4b15      	ldr	r3, [pc, #84]	@ (80053f0 <RCCEx_PLL3_Config+0x15c>)
 800539a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800539c:	4a14      	ldr	r2, [pc, #80]	@ (80053f0 <RCCEx_PLL3_Config+0x15c>)
 800539e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80053a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80053a4:	e005      	b.n	80053b2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80053a6:	4b12      	ldr	r3, [pc, #72]	@ (80053f0 <RCCEx_PLL3_Config+0x15c>)
 80053a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053aa:	4a11      	ldr	r2, [pc, #68]	@ (80053f0 <RCCEx_PLL3_Config+0x15c>)
 80053ac:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80053b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80053b2:	4b0f      	ldr	r3, [pc, #60]	@ (80053f0 <RCCEx_PLL3_Config+0x15c>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a0e      	ldr	r2, [pc, #56]	@ (80053f0 <RCCEx_PLL3_Config+0x15c>)
 80053b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053be:	f7fc f887 	bl	80014d0 <HAL_GetTick>
 80053c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80053c4:	e008      	b.n	80053d8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80053c6:	f7fc f883 	bl	80014d0 <HAL_GetTick>
 80053ca:	4602      	mov	r2, r0
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	1ad3      	subs	r3, r2, r3
 80053d0:	2b02      	cmp	r3, #2
 80053d2:	d901      	bls.n	80053d8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80053d4:	2303      	movs	r3, #3
 80053d6:	e006      	b.n	80053e6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80053d8:	4b05      	ldr	r3, [pc, #20]	@ (80053f0 <RCCEx_PLL3_Config+0x15c>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d0f0      	beq.n	80053c6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80053e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3710      	adds	r7, #16
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	bf00      	nop
 80053f0:	58024400 	.word	0x58024400
 80053f4:	ffff0007 	.word	0xffff0007

080053f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b082      	sub	sp, #8
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d101      	bne.n	800540a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e049      	b.n	800549e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005410:	b2db      	uxtb	r3, r3
 8005412:	2b00      	cmp	r3, #0
 8005414:	d106      	bne.n	8005424 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f7fb fdc2 	bl	8000fa8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2202      	movs	r2, #2
 8005428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	3304      	adds	r3, #4
 8005434:	4619      	mov	r1, r3
 8005436:	4610      	mov	r0, r2
 8005438:	f000 fb02 	bl	8005a40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3708      	adds	r7, #8
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
	...

080054a8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054b2:	2300      	movs	r3, #0
 80054b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d104      	bne.n	80054c6 <HAL_TIM_IC_Start_IT+0x1e>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	e023      	b.n	800550e <HAL_TIM_IC_Start_IT+0x66>
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	2b04      	cmp	r3, #4
 80054ca:	d104      	bne.n	80054d6 <HAL_TIM_IC_Start_IT+0x2e>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	e01b      	b.n	800550e <HAL_TIM_IC_Start_IT+0x66>
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	2b08      	cmp	r3, #8
 80054da:	d104      	bne.n	80054e6 <HAL_TIM_IC_Start_IT+0x3e>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	e013      	b.n	800550e <HAL_TIM_IC_Start_IT+0x66>
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	2b0c      	cmp	r3, #12
 80054ea:	d104      	bne.n	80054f6 <HAL_TIM_IC_Start_IT+0x4e>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	e00b      	b.n	800550e <HAL_TIM_IC_Start_IT+0x66>
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	2b10      	cmp	r3, #16
 80054fa:	d104      	bne.n	8005506 <HAL_TIM_IC_Start_IT+0x5e>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005502:	b2db      	uxtb	r3, r3
 8005504:	e003      	b.n	800550e <HAL_TIM_IC_Start_IT+0x66>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800550c:	b2db      	uxtb	r3, r3
 800550e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d104      	bne.n	8005520 <HAL_TIM_IC_Start_IT+0x78>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800551c:	b2db      	uxtb	r3, r3
 800551e:	e013      	b.n	8005548 <HAL_TIM_IC_Start_IT+0xa0>
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	2b04      	cmp	r3, #4
 8005524:	d104      	bne.n	8005530 <HAL_TIM_IC_Start_IT+0x88>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800552c:	b2db      	uxtb	r3, r3
 800552e:	e00b      	b.n	8005548 <HAL_TIM_IC_Start_IT+0xa0>
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	2b08      	cmp	r3, #8
 8005534:	d104      	bne.n	8005540 <HAL_TIM_IC_Start_IT+0x98>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800553c:	b2db      	uxtb	r3, r3
 800553e:	e003      	b.n	8005548 <HAL_TIM_IC_Start_IT+0xa0>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8005546:	b2db      	uxtb	r3, r3
 8005548:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800554a:	7bbb      	ldrb	r3, [r7, #14]
 800554c:	2b01      	cmp	r3, #1
 800554e:	d102      	bne.n	8005556 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005550:	7b7b      	ldrb	r3, [r7, #13]
 8005552:	2b01      	cmp	r3, #1
 8005554:	d001      	beq.n	800555a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e0e2      	b.n	8005720 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d104      	bne.n	800556a <HAL_TIM_IC_Start_IT+0xc2>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2202      	movs	r2, #2
 8005564:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005568:	e023      	b.n	80055b2 <HAL_TIM_IC_Start_IT+0x10a>
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	2b04      	cmp	r3, #4
 800556e:	d104      	bne.n	800557a <HAL_TIM_IC_Start_IT+0xd2>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2202      	movs	r2, #2
 8005574:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005578:	e01b      	b.n	80055b2 <HAL_TIM_IC_Start_IT+0x10a>
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	2b08      	cmp	r3, #8
 800557e:	d104      	bne.n	800558a <HAL_TIM_IC_Start_IT+0xe2>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2202      	movs	r2, #2
 8005584:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005588:	e013      	b.n	80055b2 <HAL_TIM_IC_Start_IT+0x10a>
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	2b0c      	cmp	r3, #12
 800558e:	d104      	bne.n	800559a <HAL_TIM_IC_Start_IT+0xf2>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2202      	movs	r2, #2
 8005594:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005598:	e00b      	b.n	80055b2 <HAL_TIM_IC_Start_IT+0x10a>
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	2b10      	cmp	r3, #16
 800559e:	d104      	bne.n	80055aa <HAL_TIM_IC_Start_IT+0x102>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2202      	movs	r2, #2
 80055a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055a8:	e003      	b.n	80055b2 <HAL_TIM_IC_Start_IT+0x10a>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2202      	movs	r2, #2
 80055ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d104      	bne.n	80055c2 <HAL_TIM_IC_Start_IT+0x11a>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2202      	movs	r2, #2
 80055bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80055c0:	e013      	b.n	80055ea <HAL_TIM_IC_Start_IT+0x142>
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	2b04      	cmp	r3, #4
 80055c6:	d104      	bne.n	80055d2 <HAL_TIM_IC_Start_IT+0x12a>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2202      	movs	r2, #2
 80055cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80055d0:	e00b      	b.n	80055ea <HAL_TIM_IC_Start_IT+0x142>
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	2b08      	cmp	r3, #8
 80055d6:	d104      	bne.n	80055e2 <HAL_TIM_IC_Start_IT+0x13a>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2202      	movs	r2, #2
 80055dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80055e0:	e003      	b.n	80055ea <HAL_TIM_IC_Start_IT+0x142>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2202      	movs	r2, #2
 80055e6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	2b0c      	cmp	r3, #12
 80055ee:	d841      	bhi.n	8005674 <HAL_TIM_IC_Start_IT+0x1cc>
 80055f0:	a201      	add	r2, pc, #4	@ (adr r2, 80055f8 <HAL_TIM_IC_Start_IT+0x150>)
 80055f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f6:	bf00      	nop
 80055f8:	0800562d 	.word	0x0800562d
 80055fc:	08005675 	.word	0x08005675
 8005600:	08005675 	.word	0x08005675
 8005604:	08005675 	.word	0x08005675
 8005608:	0800563f 	.word	0x0800563f
 800560c:	08005675 	.word	0x08005675
 8005610:	08005675 	.word	0x08005675
 8005614:	08005675 	.word	0x08005675
 8005618:	08005651 	.word	0x08005651
 800561c:	08005675 	.word	0x08005675
 8005620:	08005675 	.word	0x08005675
 8005624:	08005675 	.word	0x08005675
 8005628:	08005663 	.word	0x08005663
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	68da      	ldr	r2, [r3, #12]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f042 0202 	orr.w	r2, r2, #2
 800563a:	60da      	str	r2, [r3, #12]
      break;
 800563c:	e01d      	b.n	800567a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68da      	ldr	r2, [r3, #12]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f042 0204 	orr.w	r2, r2, #4
 800564c:	60da      	str	r2, [r3, #12]
      break;
 800564e:	e014      	b.n	800567a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68da      	ldr	r2, [r3, #12]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f042 0208 	orr.w	r2, r2, #8
 800565e:	60da      	str	r2, [r3, #12]
      break;
 8005660:	e00b      	b.n	800567a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	68da      	ldr	r2, [r3, #12]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f042 0210 	orr.w	r2, r2, #16
 8005670:	60da      	str	r2, [r3, #12]
      break;
 8005672:	e002      	b.n	800567a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	73fb      	strb	r3, [r7, #15]
      break;
 8005678:	bf00      	nop
  }

  if (status == HAL_OK)
 800567a:	7bfb      	ldrb	r3, [r7, #15]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d14e      	bne.n	800571e <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	2201      	movs	r2, #1
 8005686:	6839      	ldr	r1, [r7, #0]
 8005688:	4618      	mov	r0, r3
 800568a:	f000 fbe2 	bl	8005e52 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a25      	ldr	r2, [pc, #148]	@ (8005728 <HAL_TIM_IC_Start_IT+0x280>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d022      	beq.n	80056de <HAL_TIM_IC_Start_IT+0x236>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056a0:	d01d      	beq.n	80056de <HAL_TIM_IC_Start_IT+0x236>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a21      	ldr	r2, [pc, #132]	@ (800572c <HAL_TIM_IC_Start_IT+0x284>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d018      	beq.n	80056de <HAL_TIM_IC_Start_IT+0x236>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a1f      	ldr	r2, [pc, #124]	@ (8005730 <HAL_TIM_IC_Start_IT+0x288>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d013      	beq.n	80056de <HAL_TIM_IC_Start_IT+0x236>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a1e      	ldr	r2, [pc, #120]	@ (8005734 <HAL_TIM_IC_Start_IT+0x28c>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d00e      	beq.n	80056de <HAL_TIM_IC_Start_IT+0x236>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a1c      	ldr	r2, [pc, #112]	@ (8005738 <HAL_TIM_IC_Start_IT+0x290>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d009      	beq.n	80056de <HAL_TIM_IC_Start_IT+0x236>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a1b      	ldr	r2, [pc, #108]	@ (800573c <HAL_TIM_IC_Start_IT+0x294>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d004      	beq.n	80056de <HAL_TIM_IC_Start_IT+0x236>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a19      	ldr	r2, [pc, #100]	@ (8005740 <HAL_TIM_IC_Start_IT+0x298>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d115      	bne.n	800570a <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	689a      	ldr	r2, [r3, #8]
 80056e4:	4b17      	ldr	r3, [pc, #92]	@ (8005744 <HAL_TIM_IC_Start_IT+0x29c>)
 80056e6:	4013      	ands	r3, r2
 80056e8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	2b06      	cmp	r3, #6
 80056ee:	d015      	beq.n	800571c <HAL_TIM_IC_Start_IT+0x274>
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056f6:	d011      	beq.n	800571c <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f042 0201 	orr.w	r2, r2, #1
 8005706:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005708:	e008      	b.n	800571c <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f042 0201 	orr.w	r2, r2, #1
 8005718:	601a      	str	r2, [r3, #0]
 800571a:	e000      	b.n	800571e <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800571c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800571e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005720:	4618      	mov	r0, r3
 8005722:	3710      	adds	r7, #16
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}
 8005728:	40010000 	.word	0x40010000
 800572c:	40000400 	.word	0x40000400
 8005730:	40000800 	.word	0x40000800
 8005734:	40000c00 	.word	0x40000c00
 8005738:	40010400 	.word	0x40010400
 800573c:	40001800 	.word	0x40001800
 8005740:	40014000 	.word	0x40014000
 8005744:	00010007 	.word	0x00010007

08005748 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b084      	sub	sp, #16
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	f003 0302 	and.w	r3, r3, #2
 8005766:	2b00      	cmp	r3, #0
 8005768:	d020      	beq.n	80057ac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	f003 0302 	and.w	r3, r3, #2
 8005770:	2b00      	cmp	r3, #0
 8005772:	d01b      	beq.n	80057ac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f06f 0202 	mvn.w	r2, #2
 800577c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2201      	movs	r2, #1
 8005782:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	699b      	ldr	r3, [r3, #24]
 800578a:	f003 0303 	and.w	r3, r3, #3
 800578e:	2b00      	cmp	r3, #0
 8005790:	d003      	beq.n	800579a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f000 f935 	bl	8005a02 <HAL_TIM_IC_CaptureCallback>
 8005798:	e005      	b.n	80057a6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f000 f927 	bl	80059ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f000 f938 	bl	8005a16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	f003 0304 	and.w	r3, r3, #4
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d020      	beq.n	80057f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f003 0304 	and.w	r3, r3, #4
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d01b      	beq.n	80057f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f06f 0204 	mvn.w	r2, #4
 80057c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2202      	movs	r2, #2
 80057ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	699b      	ldr	r3, [r3, #24]
 80057d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d003      	beq.n	80057e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 f90f 	bl	8005a02 <HAL_TIM_IC_CaptureCallback>
 80057e4:	e005      	b.n	80057f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 f901 	bl	80059ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f000 f912 	bl	8005a16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	f003 0308 	and.w	r3, r3, #8
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d020      	beq.n	8005844 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f003 0308 	and.w	r3, r3, #8
 8005808:	2b00      	cmp	r3, #0
 800580a:	d01b      	beq.n	8005844 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f06f 0208 	mvn.w	r2, #8
 8005814:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2204      	movs	r2, #4
 800581a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	69db      	ldr	r3, [r3, #28]
 8005822:	f003 0303 	and.w	r3, r3, #3
 8005826:	2b00      	cmp	r3, #0
 8005828:	d003      	beq.n	8005832 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 f8e9 	bl	8005a02 <HAL_TIM_IC_CaptureCallback>
 8005830:	e005      	b.n	800583e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f000 f8db 	bl	80059ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f000 f8ec 	bl	8005a16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	f003 0310 	and.w	r3, r3, #16
 800584a:	2b00      	cmp	r3, #0
 800584c:	d020      	beq.n	8005890 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	f003 0310 	and.w	r3, r3, #16
 8005854:	2b00      	cmp	r3, #0
 8005856:	d01b      	beq.n	8005890 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f06f 0210 	mvn.w	r2, #16
 8005860:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2208      	movs	r2, #8
 8005866:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	69db      	ldr	r3, [r3, #28]
 800586e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005872:	2b00      	cmp	r3, #0
 8005874:	d003      	beq.n	800587e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 f8c3 	bl	8005a02 <HAL_TIM_IC_CaptureCallback>
 800587c:	e005      	b.n	800588a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f000 f8b5 	bl	80059ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f000 f8c6 	bl	8005a16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	f003 0301 	and.w	r3, r3, #1
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00c      	beq.n	80058b4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f003 0301 	and.w	r3, r3, #1
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d007      	beq.n	80058b4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f06f 0201 	mvn.w	r2, #1
 80058ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 f893 	bl	80059da <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d104      	bne.n	80058c8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d00c      	beq.n	80058e2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d007      	beq.n	80058e2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80058da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f000 fb75 	bl	8005fcc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d00c      	beq.n	8005906 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d007      	beq.n	8005906 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80058fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 fb6d 	bl	8005fe0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800590c:	2b00      	cmp	r3, #0
 800590e:	d00c      	beq.n	800592a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005916:	2b00      	cmp	r3, #0
 8005918:	d007      	beq.n	800592a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005922:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f000 f880 	bl	8005a2a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	f003 0320 	and.w	r3, r3, #32
 8005930:	2b00      	cmp	r3, #0
 8005932:	d00c      	beq.n	800594e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f003 0320 	and.w	r3, r3, #32
 800593a:	2b00      	cmp	r3, #0
 800593c:	d007      	beq.n	800594e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f06f 0220 	mvn.w	r2, #32
 8005946:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f000 fb35 	bl	8005fb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800594e:	bf00      	nop
 8005950:	3710      	adds	r7, #16
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}

08005956 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005956:	b580      	push	{r7, lr}
 8005958:	b082      	sub	sp, #8
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
 800595e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005966:	2b01      	cmp	r3, #1
 8005968:	d101      	bne.n	800596e <HAL_TIM_SlaveConfigSynchro+0x18>
 800596a:	2302      	movs	r3, #2
 800596c:	e031      	b.n	80059d2 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2201      	movs	r2, #1
 8005972:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2202      	movs	r2, #2
 800597a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800597e:	6839      	ldr	r1, [r7, #0]
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f000 f8fd 	bl	8005b80 <TIM_SlaveTimer_SetConfig>
 8005986:	4603      	mov	r3, r0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d009      	beq.n	80059a0 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	e018      	b.n	80059d2 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68da      	ldr	r2, [r3, #12]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80059ae:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	68da      	ldr	r2, [r3, #12]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80059be:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80059d0:	2300      	movs	r3, #0
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3708      	adds	r7, #8
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}

080059da <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059da:	b480      	push	{r7}
 80059dc:	b083      	sub	sp, #12
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80059e2:	bf00      	nop
 80059e4:	370c      	adds	r7, #12
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr

080059ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059ee:	b480      	push	{r7}
 80059f0:	b083      	sub	sp, #12
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059f6:	bf00      	nop
 80059f8:	370c      	adds	r7, #12
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr

08005a02 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a02:	b480      	push	{r7}
 8005a04:	b083      	sub	sp, #12
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a0a:	bf00      	nop
 8005a0c:	370c      	adds	r7, #12
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr

08005a16 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a16:	b480      	push	{r7}
 8005a18:	b083      	sub	sp, #12
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a1e:	bf00      	nop
 8005a20:	370c      	adds	r7, #12
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr

08005a2a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a2a:	b480      	push	{r7}
 8005a2c:	b083      	sub	sp, #12
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a32:	bf00      	nop
 8005a34:	370c      	adds	r7, #12
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr
	...

08005a40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b085      	sub	sp, #20
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4a43      	ldr	r2, [pc, #268]	@ (8005b60 <TIM_Base_SetConfig+0x120>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d013      	beq.n	8005a80 <TIM_Base_SetConfig+0x40>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a5e:	d00f      	beq.n	8005a80 <TIM_Base_SetConfig+0x40>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4a40      	ldr	r2, [pc, #256]	@ (8005b64 <TIM_Base_SetConfig+0x124>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d00b      	beq.n	8005a80 <TIM_Base_SetConfig+0x40>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4a3f      	ldr	r2, [pc, #252]	@ (8005b68 <TIM_Base_SetConfig+0x128>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d007      	beq.n	8005a80 <TIM_Base_SetConfig+0x40>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4a3e      	ldr	r2, [pc, #248]	@ (8005b6c <TIM_Base_SetConfig+0x12c>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d003      	beq.n	8005a80 <TIM_Base_SetConfig+0x40>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	4a3d      	ldr	r2, [pc, #244]	@ (8005b70 <TIM_Base_SetConfig+0x130>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d108      	bne.n	8005a92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	68fa      	ldr	r2, [r7, #12]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a32      	ldr	r2, [pc, #200]	@ (8005b60 <TIM_Base_SetConfig+0x120>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d01f      	beq.n	8005ada <TIM_Base_SetConfig+0x9a>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005aa0:	d01b      	beq.n	8005ada <TIM_Base_SetConfig+0x9a>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4a2f      	ldr	r2, [pc, #188]	@ (8005b64 <TIM_Base_SetConfig+0x124>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d017      	beq.n	8005ada <TIM_Base_SetConfig+0x9a>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4a2e      	ldr	r2, [pc, #184]	@ (8005b68 <TIM_Base_SetConfig+0x128>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d013      	beq.n	8005ada <TIM_Base_SetConfig+0x9a>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a2d      	ldr	r2, [pc, #180]	@ (8005b6c <TIM_Base_SetConfig+0x12c>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d00f      	beq.n	8005ada <TIM_Base_SetConfig+0x9a>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a2c      	ldr	r2, [pc, #176]	@ (8005b70 <TIM_Base_SetConfig+0x130>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d00b      	beq.n	8005ada <TIM_Base_SetConfig+0x9a>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a2b      	ldr	r2, [pc, #172]	@ (8005b74 <TIM_Base_SetConfig+0x134>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d007      	beq.n	8005ada <TIM_Base_SetConfig+0x9a>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4a2a      	ldr	r2, [pc, #168]	@ (8005b78 <TIM_Base_SetConfig+0x138>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d003      	beq.n	8005ada <TIM_Base_SetConfig+0x9a>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4a29      	ldr	r2, [pc, #164]	@ (8005b7c <TIM_Base_SetConfig+0x13c>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d108      	bne.n	8005aec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ae0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	68fa      	ldr	r2, [r7, #12]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	695b      	ldr	r3, [r3, #20]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	689a      	ldr	r2, [r3, #8]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4a14      	ldr	r2, [pc, #80]	@ (8005b60 <TIM_Base_SetConfig+0x120>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d00f      	beq.n	8005b32 <TIM_Base_SetConfig+0xf2>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4a16      	ldr	r2, [pc, #88]	@ (8005b70 <TIM_Base_SetConfig+0x130>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d00b      	beq.n	8005b32 <TIM_Base_SetConfig+0xf2>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a15      	ldr	r2, [pc, #84]	@ (8005b74 <TIM_Base_SetConfig+0x134>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d007      	beq.n	8005b32 <TIM_Base_SetConfig+0xf2>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a14      	ldr	r2, [pc, #80]	@ (8005b78 <TIM_Base_SetConfig+0x138>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d003      	beq.n	8005b32 <TIM_Base_SetConfig+0xf2>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a13      	ldr	r2, [pc, #76]	@ (8005b7c <TIM_Base_SetConfig+0x13c>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d103      	bne.n	8005b3a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	691a      	ldr	r2, [r3, #16]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f043 0204 	orr.w	r2, r3, #4
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2201      	movs	r2, #1
 8005b4a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	68fa      	ldr	r2, [r7, #12]
 8005b50:	601a      	str	r2, [r3, #0]
}
 8005b52:	bf00      	nop
 8005b54:	3714      	adds	r7, #20
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr
 8005b5e:	bf00      	nop
 8005b60:	40010000 	.word	0x40010000
 8005b64:	40000400 	.word	0x40000400
 8005b68:	40000800 	.word	0x40000800
 8005b6c:	40000c00 	.word	0x40000c00
 8005b70:	40010400 	.word	0x40010400
 8005b74:	40014000 	.word	0x40014000
 8005b78:	40014400 	.word	0x40014400
 8005b7c:	40014800 	.word	0x40014800

08005b80 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b086      	sub	sp, #24
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b96:	693a      	ldr	r2, [r7, #16]
 8005b98:	4b65      	ldr	r3, [pc, #404]	@ (8005d30 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	693a      	ldr	r2, [r7, #16]
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005ba8:	693a      	ldr	r2, [r7, #16]
 8005baa:	4b62      	ldr	r3, [pc, #392]	@ (8005d34 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8005bac:	4013      	ands	r3, r2
 8005bae:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	693a      	ldr	r2, [r7, #16]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	693a      	ldr	r2, [r7, #16]
 8005bc0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	4a5c      	ldr	r2, [pc, #368]	@ (8005d38 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	f000 80ab 	beq.w	8005d24 <TIM_SlaveTimer_SetConfig+0x1a4>
 8005bce:	4a5a      	ldr	r2, [pc, #360]	@ (8005d38 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	f200 80a4 	bhi.w	8005d1e <TIM_SlaveTimer_SetConfig+0x19e>
 8005bd6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005bda:	f000 80a3 	beq.w	8005d24 <TIM_SlaveTimer_SetConfig+0x1a4>
 8005bde:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005be2:	f200 809c 	bhi.w	8005d1e <TIM_SlaveTimer_SetConfig+0x19e>
 8005be6:	4a55      	ldr	r2, [pc, #340]	@ (8005d3c <TIM_SlaveTimer_SetConfig+0x1bc>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	f000 809b 	beq.w	8005d24 <TIM_SlaveTimer_SetConfig+0x1a4>
 8005bee:	4a53      	ldr	r2, [pc, #332]	@ (8005d3c <TIM_SlaveTimer_SetConfig+0x1bc>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	f200 8094 	bhi.w	8005d1e <TIM_SlaveTimer_SetConfig+0x19e>
 8005bf6:	4a52      	ldr	r2, [pc, #328]	@ (8005d40 <TIM_SlaveTimer_SetConfig+0x1c0>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	f000 8093 	beq.w	8005d24 <TIM_SlaveTimer_SetConfig+0x1a4>
 8005bfe:	4a50      	ldr	r2, [pc, #320]	@ (8005d40 <TIM_SlaveTimer_SetConfig+0x1c0>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	f200 808c 	bhi.w	8005d1e <TIM_SlaveTimer_SetConfig+0x19e>
 8005c06:	4a4f      	ldr	r2, [pc, #316]	@ (8005d44 <TIM_SlaveTimer_SetConfig+0x1c4>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	f000 808b 	beq.w	8005d24 <TIM_SlaveTimer_SetConfig+0x1a4>
 8005c0e:	4a4d      	ldr	r2, [pc, #308]	@ (8005d44 <TIM_SlaveTimer_SetConfig+0x1c4>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	f200 8084 	bhi.w	8005d1e <TIM_SlaveTimer_SetConfig+0x19e>
 8005c16:	4a4c      	ldr	r2, [pc, #304]	@ (8005d48 <TIM_SlaveTimer_SetConfig+0x1c8>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	f000 8083 	beq.w	8005d24 <TIM_SlaveTimer_SetConfig+0x1a4>
 8005c1e:	4a4a      	ldr	r2, [pc, #296]	@ (8005d48 <TIM_SlaveTimer_SetConfig+0x1c8>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d87c      	bhi.n	8005d1e <TIM_SlaveTimer_SetConfig+0x19e>
 8005c24:	4a49      	ldr	r2, [pc, #292]	@ (8005d4c <TIM_SlaveTimer_SetConfig+0x1cc>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d07c      	beq.n	8005d24 <TIM_SlaveTimer_SetConfig+0x1a4>
 8005c2a:	4a48      	ldr	r2, [pc, #288]	@ (8005d4c <TIM_SlaveTimer_SetConfig+0x1cc>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d876      	bhi.n	8005d1e <TIM_SlaveTimer_SetConfig+0x19e>
 8005c30:	4a47      	ldr	r2, [pc, #284]	@ (8005d50 <TIM_SlaveTimer_SetConfig+0x1d0>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d076      	beq.n	8005d24 <TIM_SlaveTimer_SetConfig+0x1a4>
 8005c36:	4a46      	ldr	r2, [pc, #280]	@ (8005d50 <TIM_SlaveTimer_SetConfig+0x1d0>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d870      	bhi.n	8005d1e <TIM_SlaveTimer_SetConfig+0x19e>
 8005c3c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005c40:	d070      	beq.n	8005d24 <TIM_SlaveTimer_SetConfig+0x1a4>
 8005c42:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005c46:	d86a      	bhi.n	8005d1e <TIM_SlaveTimer_SetConfig+0x19e>
 8005c48:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c4c:	d06a      	beq.n	8005d24 <TIM_SlaveTimer_SetConfig+0x1a4>
 8005c4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c52:	d864      	bhi.n	8005d1e <TIM_SlaveTimer_SetConfig+0x19e>
 8005c54:	2b70      	cmp	r3, #112	@ 0x70
 8005c56:	d01a      	beq.n	8005c8e <TIM_SlaveTimer_SetConfig+0x10e>
 8005c58:	2b70      	cmp	r3, #112	@ 0x70
 8005c5a:	d860      	bhi.n	8005d1e <TIM_SlaveTimer_SetConfig+0x19e>
 8005c5c:	2b60      	cmp	r3, #96	@ 0x60
 8005c5e:	d054      	beq.n	8005d0a <TIM_SlaveTimer_SetConfig+0x18a>
 8005c60:	2b60      	cmp	r3, #96	@ 0x60
 8005c62:	d85c      	bhi.n	8005d1e <TIM_SlaveTimer_SetConfig+0x19e>
 8005c64:	2b50      	cmp	r3, #80	@ 0x50
 8005c66:	d046      	beq.n	8005cf6 <TIM_SlaveTimer_SetConfig+0x176>
 8005c68:	2b50      	cmp	r3, #80	@ 0x50
 8005c6a:	d858      	bhi.n	8005d1e <TIM_SlaveTimer_SetConfig+0x19e>
 8005c6c:	2b40      	cmp	r3, #64	@ 0x40
 8005c6e:	d019      	beq.n	8005ca4 <TIM_SlaveTimer_SetConfig+0x124>
 8005c70:	2b40      	cmp	r3, #64	@ 0x40
 8005c72:	d854      	bhi.n	8005d1e <TIM_SlaveTimer_SetConfig+0x19e>
 8005c74:	2b30      	cmp	r3, #48	@ 0x30
 8005c76:	d055      	beq.n	8005d24 <TIM_SlaveTimer_SetConfig+0x1a4>
 8005c78:	2b30      	cmp	r3, #48	@ 0x30
 8005c7a:	d850      	bhi.n	8005d1e <TIM_SlaveTimer_SetConfig+0x19e>
 8005c7c:	2b20      	cmp	r3, #32
 8005c7e:	d051      	beq.n	8005d24 <TIM_SlaveTimer_SetConfig+0x1a4>
 8005c80:	2b20      	cmp	r3, #32
 8005c82:	d84c      	bhi.n	8005d1e <TIM_SlaveTimer_SetConfig+0x19e>
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d04d      	beq.n	8005d24 <TIM_SlaveTimer_SetConfig+0x1a4>
 8005c88:	2b10      	cmp	r3, #16
 8005c8a:	d04b      	beq.n	8005d24 <TIM_SlaveTimer_SetConfig+0x1a4>
 8005c8c:	e047      	b.n	8005d1e <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8005c9e:	f000 f8b8 	bl	8005e12 <TIM_ETR_SetConfig>
      break;
 8005ca2:	e040      	b.n	8005d26 <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	2b05      	cmp	r3, #5
 8005caa:	d101      	bne.n	8005cb0 <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	e03b      	b.n	8005d28 <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	6a1b      	ldr	r3, [r3, #32]
 8005cb6:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	6a1a      	ldr	r2, [r3, #32]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f022 0201 	bic.w	r2, r2, #1
 8005cc6:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	699b      	ldr	r3, [r3, #24]
 8005cce:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005cd6:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	691b      	ldr	r3, [r3, #16]
 8005cdc:	011b      	lsls	r3, r3, #4
 8005cde:	68ba      	ldr	r2, [r7, #8]
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	68ba      	ldr	r2, [r7, #8]
 8005cea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	68fa      	ldr	r2, [r7, #12]
 8005cf2:	621a      	str	r2, [r3, #32]
      break;
 8005cf4:	e017      	b.n	8005d26 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d02:	461a      	mov	r2, r3
 8005d04:	f000 f826 	bl	8005d54 <TIM_TI1_ConfigInputStage>
      break;
 8005d08:	e00d      	b.n	8005d26 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d16:	461a      	mov	r2, r3
 8005d18:	f000 f84b 	bl	8005db2 <TIM_TI2_ConfigInputStage>
      break;
 8005d1c:	e003      	b.n	8005d26 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	75fb      	strb	r3, [r7, #23]
      break;
 8005d22:	e000      	b.n	8005d26 <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 8005d24:	bf00      	nop
  }

  return status;
 8005d26:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3718      	adds	r7, #24
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	ffcfff8f 	.word	0xffcfff8f
 8005d34:	fffefff8 	.word	0xfffefff8
 8005d38:	00200010 	.word	0x00200010
 8005d3c:	00100070 	.word	0x00100070
 8005d40:	00100060 	.word	0x00100060
 8005d44:	00100050 	.word	0x00100050
 8005d48:	00100040 	.word	0x00100040
 8005d4c:	00100030 	.word	0x00100030
 8005d50:	00100020 	.word	0x00100020

08005d54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b087      	sub	sp, #28
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6a1b      	ldr	r3, [r3, #32]
 8005d64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	6a1b      	ldr	r3, [r3, #32]
 8005d6a:	f023 0201 	bic.w	r2, r3, #1
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	699b      	ldr	r3, [r3, #24]
 8005d76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	011b      	lsls	r3, r3, #4
 8005d84:	693a      	ldr	r2, [r7, #16]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	f023 030a 	bic.w	r3, r3, #10
 8005d90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d92:	697a      	ldr	r2, [r7, #20]
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	693a      	ldr	r2, [r7, #16]
 8005d9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	697a      	ldr	r2, [r7, #20]
 8005da4:	621a      	str	r2, [r3, #32]
}
 8005da6:	bf00      	nop
 8005da8:	371c      	adds	r7, #28
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr

08005db2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005db2:	b480      	push	{r7}
 8005db4:	b087      	sub	sp, #28
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	60f8      	str	r0, [r7, #12]
 8005dba:	60b9      	str	r1, [r7, #8]
 8005dbc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6a1b      	ldr	r3, [r3, #32]
 8005dc2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6a1b      	ldr	r3, [r3, #32]
 8005dc8:	f023 0210 	bic.w	r2, r3, #16
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	699b      	ldr	r3, [r3, #24]
 8005dd4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005ddc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	031b      	lsls	r3, r3, #12
 8005de2:	693a      	ldr	r2, [r7, #16]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005dee:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	011b      	lsls	r3, r3, #4
 8005df4:	697a      	ldr	r2, [r7, #20]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	693a      	ldr	r2, [r7, #16]
 8005dfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	697a      	ldr	r2, [r7, #20]
 8005e04:	621a      	str	r2, [r3, #32]
}
 8005e06:	bf00      	nop
 8005e08:	371c      	adds	r7, #28
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr

08005e12 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e12:	b480      	push	{r7}
 8005e14:	b087      	sub	sp, #28
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	60f8      	str	r0, [r7, #12]
 8005e1a:	60b9      	str	r1, [r7, #8]
 8005e1c:	607a      	str	r2, [r7, #4]
 8005e1e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005e2c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	021a      	lsls	r2, r3, #8
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	431a      	orrs	r2, r3
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	697a      	ldr	r2, [r7, #20]
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	697a      	ldr	r2, [r7, #20]
 8005e44:	609a      	str	r2, [r3, #8]
}
 8005e46:	bf00      	nop
 8005e48:	371c      	adds	r7, #28
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr

08005e52 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e52:	b480      	push	{r7}
 8005e54:	b087      	sub	sp, #28
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	60f8      	str	r0, [r7, #12]
 8005e5a:	60b9      	str	r1, [r7, #8]
 8005e5c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	f003 031f 	and.w	r3, r3, #31
 8005e64:	2201      	movs	r2, #1
 8005e66:	fa02 f303 	lsl.w	r3, r2, r3
 8005e6a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6a1a      	ldr	r2, [r3, #32]
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	43db      	mvns	r3, r3
 8005e74:	401a      	ands	r2, r3
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6a1a      	ldr	r2, [r3, #32]
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	f003 031f 	and.w	r3, r3, #31
 8005e84:	6879      	ldr	r1, [r7, #4]
 8005e86:	fa01 f303 	lsl.w	r3, r1, r3
 8005e8a:	431a      	orrs	r2, r3
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	621a      	str	r2, [r3, #32]
}
 8005e90:	bf00      	nop
 8005e92:	371c      	adds	r7, #28
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b085      	sub	sp, #20
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d101      	bne.n	8005eb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005eb0:	2302      	movs	r3, #2
 8005eb2:	e06d      	b.n	8005f90 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2202      	movs	r2, #2
 8005ec0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a30      	ldr	r2, [pc, #192]	@ (8005f9c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d004      	beq.n	8005ee8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a2f      	ldr	r2, [pc, #188]	@ (8005fa0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d108      	bne.n	8005efa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005eee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	68fa      	ldr	r2, [r7, #12]
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f00:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	68fa      	ldr	r2, [r7, #12]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68fa      	ldr	r2, [r7, #12]
 8005f12:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a20      	ldr	r2, [pc, #128]	@ (8005f9c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d022      	beq.n	8005f64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f26:	d01d      	beq.n	8005f64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a1d      	ldr	r2, [pc, #116]	@ (8005fa4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d018      	beq.n	8005f64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a1c      	ldr	r2, [pc, #112]	@ (8005fa8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d013      	beq.n	8005f64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a1a      	ldr	r2, [pc, #104]	@ (8005fac <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d00e      	beq.n	8005f64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a15      	ldr	r2, [pc, #84]	@ (8005fa0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d009      	beq.n	8005f64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a16      	ldr	r2, [pc, #88]	@ (8005fb0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d004      	beq.n	8005f64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a15      	ldr	r2, [pc, #84]	@ (8005fb4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d10c      	bne.n	8005f7e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f6a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	68ba      	ldr	r2, [r7, #8]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	68ba      	ldr	r2, [r7, #8]
 8005f7c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2201      	movs	r2, #1
 8005f82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005f8e:	2300      	movs	r3, #0
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3714      	adds	r7, #20
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr
 8005f9c:	40010000 	.word	0x40010000
 8005fa0:	40010400 	.word	0x40010400
 8005fa4:	40000400 	.word	0x40000400
 8005fa8:	40000800 	.word	0x40000800
 8005fac:	40000c00 	.word	0x40000c00
 8005fb0:	40001800 	.word	0x40001800
 8005fb4:	40014000 	.word	0x40014000

08005fb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005fc0:	bf00      	nop
 8005fc2:	370c      	adds	r7, #12
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005fd4:	bf00      	nop
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005fe8:	bf00      	nop
 8005fea:	370c      	adds	r7, #12
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr

08005ff4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b082      	sub	sp, #8
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d101      	bne.n	8006006 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	e042      	b.n	800608c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800600c:	2b00      	cmp	r3, #0
 800600e:	d106      	bne.n	800601e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f7fb f923 	bl	8001264 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2224      	movs	r2, #36	@ 0x24
 8006022:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f022 0201 	bic.w	r2, r2, #1
 8006034:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800603a:	2b00      	cmp	r3, #0
 800603c:	d002      	beq.n	8006044 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f001 fa14 	bl	800746c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f000 fca9 	bl	800699c <UART_SetConfig>
 800604a:	4603      	mov	r3, r0
 800604c:	2b01      	cmp	r3, #1
 800604e:	d101      	bne.n	8006054 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	e01b      	b.n	800608c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	685a      	ldr	r2, [r3, #4]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006062:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	689a      	ldr	r2, [r3, #8]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006072:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f042 0201 	orr.w	r2, r2, #1
 8006082:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f001 fa93 	bl	80075b0 <UART_CheckIdleState>
 800608a:	4603      	mov	r3, r0
}
 800608c:	4618      	mov	r0, r3
 800608e:	3708      	adds	r7, #8
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}

08006094 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b08a      	sub	sp, #40	@ 0x28
 8006098:	af02      	add	r7, sp, #8
 800609a:	60f8      	str	r0, [r7, #12]
 800609c:	60b9      	str	r1, [r7, #8]
 800609e:	603b      	str	r3, [r7, #0]
 80060a0:	4613      	mov	r3, r2
 80060a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060aa:	2b20      	cmp	r3, #32
 80060ac:	d17b      	bne.n	80061a6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d002      	beq.n	80060ba <HAL_UART_Transmit+0x26>
 80060b4:	88fb      	ldrh	r3, [r7, #6]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d101      	bne.n	80060be <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e074      	b.n	80061a8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2200      	movs	r2, #0
 80060c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2221      	movs	r2, #33	@ 0x21
 80060ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80060ce:	f7fb f9ff 	bl	80014d0 <HAL_GetTick>
 80060d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	88fa      	ldrh	r2, [r7, #6]
 80060d8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	88fa      	ldrh	r2, [r7, #6]
 80060e0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060ec:	d108      	bne.n	8006100 <HAL_UART_Transmit+0x6c>
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d104      	bne.n	8006100 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80060f6:	2300      	movs	r3, #0
 80060f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	61bb      	str	r3, [r7, #24]
 80060fe:	e003      	b.n	8006108 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006104:	2300      	movs	r3, #0
 8006106:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006108:	e030      	b.n	800616c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	9300      	str	r3, [sp, #0]
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	2200      	movs	r2, #0
 8006112:	2180      	movs	r1, #128	@ 0x80
 8006114:	68f8      	ldr	r0, [r7, #12]
 8006116:	f001 faf5 	bl	8007704 <UART_WaitOnFlagUntilTimeout>
 800611a:	4603      	mov	r3, r0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d005      	beq.n	800612c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2220      	movs	r2, #32
 8006124:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006128:	2303      	movs	r3, #3
 800612a:	e03d      	b.n	80061a8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d10b      	bne.n	800614a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	881b      	ldrh	r3, [r3, #0]
 8006136:	461a      	mov	r2, r3
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006140:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006142:	69bb      	ldr	r3, [r7, #24]
 8006144:	3302      	adds	r3, #2
 8006146:	61bb      	str	r3, [r7, #24]
 8006148:	e007      	b.n	800615a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800614a:	69fb      	ldr	r3, [r7, #28]
 800614c:	781a      	ldrb	r2, [r3, #0]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	3301      	adds	r3, #1
 8006158:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006160:	b29b      	uxth	r3, r3
 8006162:	3b01      	subs	r3, #1
 8006164:	b29a      	uxth	r2, r3
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006172:	b29b      	uxth	r3, r3
 8006174:	2b00      	cmp	r3, #0
 8006176:	d1c8      	bne.n	800610a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	9300      	str	r3, [sp, #0]
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	2200      	movs	r2, #0
 8006180:	2140      	movs	r1, #64	@ 0x40
 8006182:	68f8      	ldr	r0, [r7, #12]
 8006184:	f001 fabe 	bl	8007704 <UART_WaitOnFlagUntilTimeout>
 8006188:	4603      	mov	r3, r0
 800618a:	2b00      	cmp	r3, #0
 800618c:	d005      	beq.n	800619a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2220      	movs	r2, #32
 8006192:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006196:	2303      	movs	r3, #3
 8006198:	e006      	b.n	80061a8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2220      	movs	r2, #32
 800619e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80061a2:	2300      	movs	r3, #0
 80061a4:	e000      	b.n	80061a8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80061a6:	2302      	movs	r3, #2
  }
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3720      	adds	r7, #32
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b0ba      	sub	sp, #232	@ 0xe8
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	69db      	ldr	r3, [r3, #28]
 80061be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80061d6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80061da:	f640 030f 	movw	r3, #2063	@ 0x80f
 80061de:	4013      	ands	r3, r2
 80061e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80061e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d11b      	bne.n	8006224 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80061ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061f0:	f003 0320 	and.w	r3, r3, #32
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d015      	beq.n	8006224 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80061f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061fc:	f003 0320 	and.w	r3, r3, #32
 8006200:	2b00      	cmp	r3, #0
 8006202:	d105      	bne.n	8006210 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006204:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006208:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800620c:	2b00      	cmp	r3, #0
 800620e:	d009      	beq.n	8006224 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006214:	2b00      	cmp	r3, #0
 8006216:	f000 8393 	beq.w	8006940 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	4798      	blx	r3
      }
      return;
 8006222:	e38d      	b.n	8006940 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006224:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006228:	2b00      	cmp	r3, #0
 800622a:	f000 8123 	beq.w	8006474 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800622e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006232:	4b8d      	ldr	r3, [pc, #564]	@ (8006468 <HAL_UART_IRQHandler+0x2b8>)
 8006234:	4013      	ands	r3, r2
 8006236:	2b00      	cmp	r3, #0
 8006238:	d106      	bne.n	8006248 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800623a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800623e:	4b8b      	ldr	r3, [pc, #556]	@ (800646c <HAL_UART_IRQHandler+0x2bc>)
 8006240:	4013      	ands	r3, r2
 8006242:	2b00      	cmp	r3, #0
 8006244:	f000 8116 	beq.w	8006474 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800624c:	f003 0301 	and.w	r3, r3, #1
 8006250:	2b00      	cmp	r3, #0
 8006252:	d011      	beq.n	8006278 <HAL_UART_IRQHandler+0xc8>
 8006254:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006258:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800625c:	2b00      	cmp	r3, #0
 800625e:	d00b      	beq.n	8006278 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2201      	movs	r2, #1
 8006266:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800626e:	f043 0201 	orr.w	r2, r3, #1
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006278:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800627c:	f003 0302 	and.w	r3, r3, #2
 8006280:	2b00      	cmp	r3, #0
 8006282:	d011      	beq.n	80062a8 <HAL_UART_IRQHandler+0xf8>
 8006284:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006288:	f003 0301 	and.w	r3, r3, #1
 800628c:	2b00      	cmp	r3, #0
 800628e:	d00b      	beq.n	80062a8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	2202      	movs	r2, #2
 8006296:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800629e:	f043 0204 	orr.w	r2, r3, #4
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80062a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062ac:	f003 0304 	and.w	r3, r3, #4
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d011      	beq.n	80062d8 <HAL_UART_IRQHandler+0x128>
 80062b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80062b8:	f003 0301 	and.w	r3, r3, #1
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d00b      	beq.n	80062d8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	2204      	movs	r2, #4
 80062c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062ce:	f043 0202 	orr.w	r2, r3, #2
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80062d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062dc:	f003 0308 	and.w	r3, r3, #8
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d017      	beq.n	8006314 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80062e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062e8:	f003 0320 	and.w	r3, r3, #32
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d105      	bne.n	80062fc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80062f0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80062f4:	4b5c      	ldr	r3, [pc, #368]	@ (8006468 <HAL_UART_IRQHandler+0x2b8>)
 80062f6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d00b      	beq.n	8006314 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	2208      	movs	r2, #8
 8006302:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800630a:	f043 0208 	orr.w	r2, r3, #8
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006314:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006318:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800631c:	2b00      	cmp	r3, #0
 800631e:	d012      	beq.n	8006346 <HAL_UART_IRQHandler+0x196>
 8006320:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006324:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006328:	2b00      	cmp	r3, #0
 800632a:	d00c      	beq.n	8006346 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006334:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800633c:	f043 0220 	orr.w	r2, r3, #32
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800634c:	2b00      	cmp	r3, #0
 800634e:	f000 82f9 	beq.w	8006944 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006356:	f003 0320 	and.w	r3, r3, #32
 800635a:	2b00      	cmp	r3, #0
 800635c:	d013      	beq.n	8006386 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800635e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006362:	f003 0320 	and.w	r3, r3, #32
 8006366:	2b00      	cmp	r3, #0
 8006368:	d105      	bne.n	8006376 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800636a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800636e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006372:	2b00      	cmp	r3, #0
 8006374:	d007      	beq.n	8006386 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800637a:	2b00      	cmp	r3, #0
 800637c:	d003      	beq.n	8006386 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800638c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800639a:	2b40      	cmp	r3, #64	@ 0x40
 800639c:	d005      	beq.n	80063aa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800639e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80063a2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d054      	beq.n	8006454 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f001 fa18 	bl	80077e0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063ba:	2b40      	cmp	r3, #64	@ 0x40
 80063bc:	d146      	bne.n	800644c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	3308      	adds	r3, #8
 80063c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80063cc:	e853 3f00 	ldrex	r3, [r3]
 80063d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80063d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80063d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	3308      	adds	r3, #8
 80063e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80063ea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80063ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80063f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80063fa:	e841 2300 	strex	r3, r2, [r1]
 80063fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006402:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006406:	2b00      	cmp	r3, #0
 8006408:	d1d9      	bne.n	80063be <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006410:	2b00      	cmp	r3, #0
 8006412:	d017      	beq.n	8006444 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800641a:	4a15      	ldr	r2, [pc, #84]	@ (8006470 <HAL_UART_IRQHandler+0x2c0>)
 800641c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006424:	4618      	mov	r0, r3
 8006426:	f7fb fd35 	bl	8001e94 <HAL_DMA_Abort_IT>
 800642a:	4603      	mov	r3, r0
 800642c:	2b00      	cmp	r3, #0
 800642e:	d019      	beq.n	8006464 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006436:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800643e:	4610      	mov	r0, r2
 8006440:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006442:	e00f      	b.n	8006464 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f000 fa93 	bl	8006970 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800644a:	e00b      	b.n	8006464 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f000 fa8f 	bl	8006970 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006452:	e007      	b.n	8006464 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f000 fa8b 	bl	8006970 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2200      	movs	r2, #0
 800645e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006462:	e26f      	b.n	8006944 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006464:	bf00      	nop
    return;
 8006466:	e26d      	b.n	8006944 <HAL_UART_IRQHandler+0x794>
 8006468:	10000001 	.word	0x10000001
 800646c:	04000120 	.word	0x04000120
 8006470:	080078ad 	.word	0x080078ad

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006478:	2b01      	cmp	r3, #1
 800647a:	f040 8203 	bne.w	8006884 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800647e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006482:	f003 0310 	and.w	r3, r3, #16
 8006486:	2b00      	cmp	r3, #0
 8006488:	f000 81fc 	beq.w	8006884 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800648c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006490:	f003 0310 	and.w	r3, r3, #16
 8006494:	2b00      	cmp	r3, #0
 8006496:	f000 81f5 	beq.w	8006884 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	2210      	movs	r2, #16
 80064a0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064ac:	2b40      	cmp	r3, #64	@ 0x40
 80064ae:	f040 816d 	bne.w	800678c <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4aa4      	ldr	r2, [pc, #656]	@ (800674c <HAL_UART_IRQHandler+0x59c>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d068      	beq.n	8006592 <HAL_UART_IRQHandler+0x3e2>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4aa1      	ldr	r2, [pc, #644]	@ (8006750 <HAL_UART_IRQHandler+0x5a0>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d061      	beq.n	8006592 <HAL_UART_IRQHandler+0x3e2>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a9f      	ldr	r2, [pc, #636]	@ (8006754 <HAL_UART_IRQHandler+0x5a4>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d05a      	beq.n	8006592 <HAL_UART_IRQHandler+0x3e2>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a9c      	ldr	r2, [pc, #624]	@ (8006758 <HAL_UART_IRQHandler+0x5a8>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d053      	beq.n	8006592 <HAL_UART_IRQHandler+0x3e2>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a9a      	ldr	r2, [pc, #616]	@ (800675c <HAL_UART_IRQHandler+0x5ac>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d04c      	beq.n	8006592 <HAL_UART_IRQHandler+0x3e2>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a97      	ldr	r2, [pc, #604]	@ (8006760 <HAL_UART_IRQHandler+0x5b0>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d045      	beq.n	8006592 <HAL_UART_IRQHandler+0x3e2>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a95      	ldr	r2, [pc, #596]	@ (8006764 <HAL_UART_IRQHandler+0x5b4>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d03e      	beq.n	8006592 <HAL_UART_IRQHandler+0x3e2>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a92      	ldr	r2, [pc, #584]	@ (8006768 <HAL_UART_IRQHandler+0x5b8>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d037      	beq.n	8006592 <HAL_UART_IRQHandler+0x3e2>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a90      	ldr	r2, [pc, #576]	@ (800676c <HAL_UART_IRQHandler+0x5bc>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d030      	beq.n	8006592 <HAL_UART_IRQHandler+0x3e2>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a8d      	ldr	r2, [pc, #564]	@ (8006770 <HAL_UART_IRQHandler+0x5c0>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d029      	beq.n	8006592 <HAL_UART_IRQHandler+0x3e2>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a8b      	ldr	r2, [pc, #556]	@ (8006774 <HAL_UART_IRQHandler+0x5c4>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d022      	beq.n	8006592 <HAL_UART_IRQHandler+0x3e2>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a88      	ldr	r2, [pc, #544]	@ (8006778 <HAL_UART_IRQHandler+0x5c8>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d01b      	beq.n	8006592 <HAL_UART_IRQHandler+0x3e2>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a86      	ldr	r2, [pc, #536]	@ (800677c <HAL_UART_IRQHandler+0x5cc>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d014      	beq.n	8006592 <HAL_UART_IRQHandler+0x3e2>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a83      	ldr	r2, [pc, #524]	@ (8006780 <HAL_UART_IRQHandler+0x5d0>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d00d      	beq.n	8006592 <HAL_UART_IRQHandler+0x3e2>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a81      	ldr	r2, [pc, #516]	@ (8006784 <HAL_UART_IRQHandler+0x5d4>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d006      	beq.n	8006592 <HAL_UART_IRQHandler+0x3e2>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a7e      	ldr	r2, [pc, #504]	@ (8006788 <HAL_UART_IRQHandler+0x5d8>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d106      	bne.n	80065a0 <HAL_UART_IRQHandler+0x3f0>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	b29b      	uxth	r3, r3
 800659e:	e005      	b.n	80065ac <HAL_UART_IRQHandler+0x3fc>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80065b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	f000 80ad 	beq.w	8006714 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80065c0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80065c4:	429a      	cmp	r2, r3
 80065c6:	f080 80a5 	bcs.w	8006714 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80065d0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065da:	69db      	ldr	r3, [r3, #28]
 80065dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065e0:	f000 8087 	beq.w	80066f2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80065f0:	e853 3f00 	ldrex	r3, [r3]
 80065f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80065f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80065fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006600:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	461a      	mov	r2, r3
 800660a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800660e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006612:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006616:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800661a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800661e:	e841 2300 	strex	r3, r2, [r1]
 8006622:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006626:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800662a:	2b00      	cmp	r3, #0
 800662c:	d1da      	bne.n	80065e4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	3308      	adds	r3, #8
 8006634:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006636:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006638:	e853 3f00 	ldrex	r3, [r3]
 800663c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800663e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006640:	f023 0301 	bic.w	r3, r3, #1
 8006644:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	3308      	adds	r3, #8
 800664e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006652:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006656:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006658:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800665a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800665e:	e841 2300 	strex	r3, r2, [r1]
 8006662:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006664:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006666:	2b00      	cmp	r3, #0
 8006668:	d1e1      	bne.n	800662e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	3308      	adds	r3, #8
 8006670:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006672:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006674:	e853 3f00 	ldrex	r3, [r3]
 8006678:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800667a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800667c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006680:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	3308      	adds	r3, #8
 800668a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800668e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006690:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006692:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006694:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006696:	e841 2300 	strex	r3, r2, [r1]
 800669a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800669c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d1e3      	bne.n	800666a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2220      	movs	r2, #32
 80066a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066b8:	e853 3f00 	ldrex	r3, [r3]
 80066bc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80066be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80066c0:	f023 0310 	bic.w	r3, r3, #16
 80066c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	461a      	mov	r2, r3
 80066ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80066d2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80066d4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80066d8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80066da:	e841 2300 	strex	r3, r2, [r1]
 80066de:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80066e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d1e4      	bne.n	80066b0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066ec:	4618      	mov	r0, r3
 80066ee:	f7fb f8b3 	bl	8001858 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2202      	movs	r2, #2
 80066f6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006704:	b29b      	uxth	r3, r3
 8006706:	1ad3      	subs	r3, r2, r3
 8006708:	b29b      	uxth	r3, r3
 800670a:	4619      	mov	r1, r3
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f000 f939 	bl	8006984 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006712:	e119      	b.n	8006948 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800671a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800671e:	429a      	cmp	r2, r3
 8006720:	f040 8112 	bne.w	8006948 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800672a:	69db      	ldr	r3, [r3, #28]
 800672c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006730:	f040 810a 	bne.w	8006948 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2202      	movs	r2, #2
 8006738:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006740:	4619      	mov	r1, r3
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f000 f91e 	bl	8006984 <HAL_UARTEx_RxEventCallback>
      return;
 8006748:	e0fe      	b.n	8006948 <HAL_UART_IRQHandler+0x798>
 800674a:	bf00      	nop
 800674c:	40020010 	.word	0x40020010
 8006750:	40020028 	.word	0x40020028
 8006754:	40020040 	.word	0x40020040
 8006758:	40020058 	.word	0x40020058
 800675c:	40020070 	.word	0x40020070
 8006760:	40020088 	.word	0x40020088
 8006764:	400200a0 	.word	0x400200a0
 8006768:	400200b8 	.word	0x400200b8
 800676c:	40020410 	.word	0x40020410
 8006770:	40020428 	.word	0x40020428
 8006774:	40020440 	.word	0x40020440
 8006778:	40020458 	.word	0x40020458
 800677c:	40020470 	.word	0x40020470
 8006780:	40020488 	.word	0x40020488
 8006784:	400204a0 	.word	0x400204a0
 8006788:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006798:	b29b      	uxth	r3, r3
 800679a:	1ad3      	subs	r3, r2, r3
 800679c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	f000 80cf 	beq.w	800694c <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 80067ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	f000 80ca 	beq.w	800694c <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067c0:	e853 3f00 	ldrex	r3, [r3]
 80067c4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80067c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80067cc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	461a      	mov	r2, r3
 80067d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80067da:	647b      	str	r3, [r7, #68]	@ 0x44
 80067dc:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067de:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80067e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80067e2:	e841 2300 	strex	r3, r2, [r1]
 80067e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80067e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d1e4      	bne.n	80067b8 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	3308      	adds	r3, #8
 80067f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f8:	e853 3f00 	ldrex	r3, [r3]
 80067fc:	623b      	str	r3, [r7, #32]
   return(result);
 80067fe:	6a3a      	ldr	r2, [r7, #32]
 8006800:	4b55      	ldr	r3, [pc, #340]	@ (8006958 <HAL_UART_IRQHandler+0x7a8>)
 8006802:	4013      	ands	r3, r2
 8006804:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	3308      	adds	r3, #8
 800680e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006812:	633a      	str	r2, [r7, #48]	@ 0x30
 8006814:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006816:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006818:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800681a:	e841 2300 	strex	r3, r2, [r1]
 800681e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006822:	2b00      	cmp	r3, #0
 8006824:	d1e3      	bne.n	80067ee <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2220      	movs	r2, #32
 800682a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	e853 3f00 	ldrex	r3, [r3]
 8006846:	60fb      	str	r3, [r7, #12]
   return(result);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f023 0310 	bic.w	r3, r3, #16
 800684e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	461a      	mov	r2, r3
 8006858:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800685c:	61fb      	str	r3, [r7, #28]
 800685e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006860:	69b9      	ldr	r1, [r7, #24]
 8006862:	69fa      	ldr	r2, [r7, #28]
 8006864:	e841 2300 	strex	r3, r2, [r1]
 8006868:	617b      	str	r3, [r7, #20]
   return(result);
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d1e4      	bne.n	800683a <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2202      	movs	r2, #2
 8006874:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006876:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800687a:	4619      	mov	r1, r3
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f000 f881 	bl	8006984 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006882:	e063      	b.n	800694c <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006884:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006888:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800688c:	2b00      	cmp	r3, #0
 800688e:	d00e      	beq.n	80068ae <HAL_UART_IRQHandler+0x6fe>
 8006890:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006894:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006898:	2b00      	cmp	r3, #0
 800689a:	d008      	beq.n	80068ae <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80068a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f001 f83d 	bl	8007926 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80068ac:	e051      	b.n	8006952 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80068ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d014      	beq.n	80068e4 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80068ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d105      	bne.n	80068d2 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80068c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d008      	beq.n	80068e4 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d03a      	beq.n	8006950 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	4798      	blx	r3
    }
    return;
 80068e2:	e035      	b.n	8006950 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80068e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d009      	beq.n	8006904 <HAL_UART_IRQHandler+0x754>
 80068f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d003      	beq.n	8006904 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 ffe7 	bl	80078d0 <UART_EndTransmit_IT>
    return;
 8006902:	e026      	b.n	8006952 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006904:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006908:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800690c:	2b00      	cmp	r3, #0
 800690e:	d009      	beq.n	8006924 <HAL_UART_IRQHandler+0x774>
 8006910:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006914:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006918:	2b00      	cmp	r3, #0
 800691a:	d003      	beq.n	8006924 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f001 f816 	bl	800794e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006922:	e016      	b.n	8006952 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006924:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006928:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800692c:	2b00      	cmp	r3, #0
 800692e:	d010      	beq.n	8006952 <HAL_UART_IRQHandler+0x7a2>
 8006930:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006934:	2b00      	cmp	r3, #0
 8006936:	da0c      	bge.n	8006952 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f000 fffe 	bl	800793a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800693e:	e008      	b.n	8006952 <HAL_UART_IRQHandler+0x7a2>
      return;
 8006940:	bf00      	nop
 8006942:	e006      	b.n	8006952 <HAL_UART_IRQHandler+0x7a2>
    return;
 8006944:	bf00      	nop
 8006946:	e004      	b.n	8006952 <HAL_UART_IRQHandler+0x7a2>
      return;
 8006948:	bf00      	nop
 800694a:	e002      	b.n	8006952 <HAL_UART_IRQHandler+0x7a2>
      return;
 800694c:	bf00      	nop
 800694e:	e000      	b.n	8006952 <HAL_UART_IRQHandler+0x7a2>
    return;
 8006950:	bf00      	nop
  }
}
 8006952:	37e8      	adds	r7, #232	@ 0xe8
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}
 8006958:	effffffe 	.word	0xeffffffe

0800695c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800695c:	b480      	push	{r7}
 800695e:	b083      	sub	sp, #12
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006964:	bf00      	nop
 8006966:	370c      	adds	r7, #12
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr

08006970 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006978:	bf00      	nop
 800697a:	370c      	adds	r7, #12
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	460b      	mov	r3, r1
 800698e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006990:	bf00      	nop
 8006992:	370c      	adds	r7, #12
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr

0800699c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800699c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069a0:	b092      	sub	sp, #72	@ 0x48
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80069a6:	2300      	movs	r3, #0
 80069a8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	689a      	ldr	r2, [r3, #8]
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	691b      	ldr	r3, [r3, #16]
 80069b4:	431a      	orrs	r2, r3
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	695b      	ldr	r3, [r3, #20]
 80069ba:	431a      	orrs	r2, r3
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	69db      	ldr	r3, [r3, #28]
 80069c0:	4313      	orrs	r3, r2
 80069c2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	4bbe      	ldr	r3, [pc, #760]	@ (8006cc4 <UART_SetConfig+0x328>)
 80069cc:	4013      	ands	r3, r2
 80069ce:	697a      	ldr	r2, [r7, #20]
 80069d0:	6812      	ldr	r2, [r2, #0]
 80069d2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80069d4:	430b      	orrs	r3, r1
 80069d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	68da      	ldr	r2, [r3, #12]
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	430a      	orrs	r2, r1
 80069ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	699b      	ldr	r3, [r3, #24]
 80069f2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4ab3      	ldr	r2, [pc, #716]	@ (8006cc8 <UART_SetConfig+0x32c>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d004      	beq.n	8006a08 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	6a1b      	ldr	r3, [r3, #32]
 8006a02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a04:	4313      	orrs	r3, r2
 8006a06:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	689a      	ldr	r2, [r3, #8]
 8006a0e:	4baf      	ldr	r3, [pc, #700]	@ (8006ccc <UART_SetConfig+0x330>)
 8006a10:	4013      	ands	r3, r2
 8006a12:	697a      	ldr	r2, [r7, #20]
 8006a14:	6812      	ldr	r2, [r2, #0]
 8006a16:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006a18:	430b      	orrs	r3, r1
 8006a1a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a22:	f023 010f 	bic.w	r1, r3, #15
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	430a      	orrs	r2, r1
 8006a30:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4aa6      	ldr	r2, [pc, #664]	@ (8006cd0 <UART_SetConfig+0x334>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d177      	bne.n	8006b2c <UART_SetConfig+0x190>
 8006a3c:	4ba5      	ldr	r3, [pc, #660]	@ (8006cd4 <UART_SetConfig+0x338>)
 8006a3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a40:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006a44:	2b28      	cmp	r3, #40	@ 0x28
 8006a46:	d86d      	bhi.n	8006b24 <UART_SetConfig+0x188>
 8006a48:	a201      	add	r2, pc, #4	@ (adr r2, 8006a50 <UART_SetConfig+0xb4>)
 8006a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a4e:	bf00      	nop
 8006a50:	08006af5 	.word	0x08006af5
 8006a54:	08006b25 	.word	0x08006b25
 8006a58:	08006b25 	.word	0x08006b25
 8006a5c:	08006b25 	.word	0x08006b25
 8006a60:	08006b25 	.word	0x08006b25
 8006a64:	08006b25 	.word	0x08006b25
 8006a68:	08006b25 	.word	0x08006b25
 8006a6c:	08006b25 	.word	0x08006b25
 8006a70:	08006afd 	.word	0x08006afd
 8006a74:	08006b25 	.word	0x08006b25
 8006a78:	08006b25 	.word	0x08006b25
 8006a7c:	08006b25 	.word	0x08006b25
 8006a80:	08006b25 	.word	0x08006b25
 8006a84:	08006b25 	.word	0x08006b25
 8006a88:	08006b25 	.word	0x08006b25
 8006a8c:	08006b25 	.word	0x08006b25
 8006a90:	08006b05 	.word	0x08006b05
 8006a94:	08006b25 	.word	0x08006b25
 8006a98:	08006b25 	.word	0x08006b25
 8006a9c:	08006b25 	.word	0x08006b25
 8006aa0:	08006b25 	.word	0x08006b25
 8006aa4:	08006b25 	.word	0x08006b25
 8006aa8:	08006b25 	.word	0x08006b25
 8006aac:	08006b25 	.word	0x08006b25
 8006ab0:	08006b0d 	.word	0x08006b0d
 8006ab4:	08006b25 	.word	0x08006b25
 8006ab8:	08006b25 	.word	0x08006b25
 8006abc:	08006b25 	.word	0x08006b25
 8006ac0:	08006b25 	.word	0x08006b25
 8006ac4:	08006b25 	.word	0x08006b25
 8006ac8:	08006b25 	.word	0x08006b25
 8006acc:	08006b25 	.word	0x08006b25
 8006ad0:	08006b15 	.word	0x08006b15
 8006ad4:	08006b25 	.word	0x08006b25
 8006ad8:	08006b25 	.word	0x08006b25
 8006adc:	08006b25 	.word	0x08006b25
 8006ae0:	08006b25 	.word	0x08006b25
 8006ae4:	08006b25 	.word	0x08006b25
 8006ae8:	08006b25 	.word	0x08006b25
 8006aec:	08006b25 	.word	0x08006b25
 8006af0:	08006b1d 	.word	0x08006b1d
 8006af4:	2301      	movs	r3, #1
 8006af6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006afa:	e222      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006afc:	2304      	movs	r3, #4
 8006afe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b02:	e21e      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006b04:	2308      	movs	r3, #8
 8006b06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b0a:	e21a      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006b0c:	2310      	movs	r3, #16
 8006b0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b12:	e216      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006b14:	2320      	movs	r3, #32
 8006b16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b1a:	e212      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006b1c:	2340      	movs	r3, #64	@ 0x40
 8006b1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b22:	e20e      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006b24:	2380      	movs	r3, #128	@ 0x80
 8006b26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b2a:	e20a      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a69      	ldr	r2, [pc, #420]	@ (8006cd8 <UART_SetConfig+0x33c>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d130      	bne.n	8006b98 <UART_SetConfig+0x1fc>
 8006b36:	4b67      	ldr	r3, [pc, #412]	@ (8006cd4 <UART_SetConfig+0x338>)
 8006b38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b3a:	f003 0307 	and.w	r3, r3, #7
 8006b3e:	2b05      	cmp	r3, #5
 8006b40:	d826      	bhi.n	8006b90 <UART_SetConfig+0x1f4>
 8006b42:	a201      	add	r2, pc, #4	@ (adr r2, 8006b48 <UART_SetConfig+0x1ac>)
 8006b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b48:	08006b61 	.word	0x08006b61
 8006b4c:	08006b69 	.word	0x08006b69
 8006b50:	08006b71 	.word	0x08006b71
 8006b54:	08006b79 	.word	0x08006b79
 8006b58:	08006b81 	.word	0x08006b81
 8006b5c:	08006b89 	.word	0x08006b89
 8006b60:	2300      	movs	r3, #0
 8006b62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b66:	e1ec      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006b68:	2304      	movs	r3, #4
 8006b6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b6e:	e1e8      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006b70:	2308      	movs	r3, #8
 8006b72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b76:	e1e4      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006b78:	2310      	movs	r3, #16
 8006b7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b7e:	e1e0      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006b80:	2320      	movs	r3, #32
 8006b82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b86:	e1dc      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006b88:	2340      	movs	r3, #64	@ 0x40
 8006b8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b8e:	e1d8      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006b90:	2380      	movs	r3, #128	@ 0x80
 8006b92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b96:	e1d4      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a4f      	ldr	r2, [pc, #316]	@ (8006cdc <UART_SetConfig+0x340>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d130      	bne.n	8006c04 <UART_SetConfig+0x268>
 8006ba2:	4b4c      	ldr	r3, [pc, #304]	@ (8006cd4 <UART_SetConfig+0x338>)
 8006ba4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ba6:	f003 0307 	and.w	r3, r3, #7
 8006baa:	2b05      	cmp	r3, #5
 8006bac:	d826      	bhi.n	8006bfc <UART_SetConfig+0x260>
 8006bae:	a201      	add	r2, pc, #4	@ (adr r2, 8006bb4 <UART_SetConfig+0x218>)
 8006bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bb4:	08006bcd 	.word	0x08006bcd
 8006bb8:	08006bd5 	.word	0x08006bd5
 8006bbc:	08006bdd 	.word	0x08006bdd
 8006bc0:	08006be5 	.word	0x08006be5
 8006bc4:	08006bed 	.word	0x08006bed
 8006bc8:	08006bf5 	.word	0x08006bf5
 8006bcc:	2300      	movs	r3, #0
 8006bce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bd2:	e1b6      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006bd4:	2304      	movs	r3, #4
 8006bd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bda:	e1b2      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006bdc:	2308      	movs	r3, #8
 8006bde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006be2:	e1ae      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006be4:	2310      	movs	r3, #16
 8006be6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bea:	e1aa      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006bec:	2320      	movs	r3, #32
 8006bee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bf2:	e1a6      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006bf4:	2340      	movs	r3, #64	@ 0x40
 8006bf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bfa:	e1a2      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006bfc:	2380      	movs	r3, #128	@ 0x80
 8006bfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c02:	e19e      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a35      	ldr	r2, [pc, #212]	@ (8006ce0 <UART_SetConfig+0x344>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d130      	bne.n	8006c70 <UART_SetConfig+0x2d4>
 8006c0e:	4b31      	ldr	r3, [pc, #196]	@ (8006cd4 <UART_SetConfig+0x338>)
 8006c10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c12:	f003 0307 	and.w	r3, r3, #7
 8006c16:	2b05      	cmp	r3, #5
 8006c18:	d826      	bhi.n	8006c68 <UART_SetConfig+0x2cc>
 8006c1a:	a201      	add	r2, pc, #4	@ (adr r2, 8006c20 <UART_SetConfig+0x284>)
 8006c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c20:	08006c39 	.word	0x08006c39
 8006c24:	08006c41 	.word	0x08006c41
 8006c28:	08006c49 	.word	0x08006c49
 8006c2c:	08006c51 	.word	0x08006c51
 8006c30:	08006c59 	.word	0x08006c59
 8006c34:	08006c61 	.word	0x08006c61
 8006c38:	2300      	movs	r3, #0
 8006c3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c3e:	e180      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006c40:	2304      	movs	r3, #4
 8006c42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c46:	e17c      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006c48:	2308      	movs	r3, #8
 8006c4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c4e:	e178      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006c50:	2310      	movs	r3, #16
 8006c52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c56:	e174      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006c58:	2320      	movs	r3, #32
 8006c5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c5e:	e170      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006c60:	2340      	movs	r3, #64	@ 0x40
 8006c62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c66:	e16c      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006c68:	2380      	movs	r3, #128	@ 0x80
 8006c6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c6e:	e168      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a1b      	ldr	r2, [pc, #108]	@ (8006ce4 <UART_SetConfig+0x348>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d142      	bne.n	8006d00 <UART_SetConfig+0x364>
 8006c7a:	4b16      	ldr	r3, [pc, #88]	@ (8006cd4 <UART_SetConfig+0x338>)
 8006c7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c7e:	f003 0307 	and.w	r3, r3, #7
 8006c82:	2b05      	cmp	r3, #5
 8006c84:	d838      	bhi.n	8006cf8 <UART_SetConfig+0x35c>
 8006c86:	a201      	add	r2, pc, #4	@ (adr r2, 8006c8c <UART_SetConfig+0x2f0>)
 8006c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c8c:	08006ca5 	.word	0x08006ca5
 8006c90:	08006cad 	.word	0x08006cad
 8006c94:	08006cb5 	.word	0x08006cb5
 8006c98:	08006cbd 	.word	0x08006cbd
 8006c9c:	08006ce9 	.word	0x08006ce9
 8006ca0:	08006cf1 	.word	0x08006cf1
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006caa:	e14a      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006cac:	2304      	movs	r3, #4
 8006cae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cb2:	e146      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006cb4:	2308      	movs	r3, #8
 8006cb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cba:	e142      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006cbc:	2310      	movs	r3, #16
 8006cbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cc2:	e13e      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006cc4:	cfff69f3 	.word	0xcfff69f3
 8006cc8:	58000c00 	.word	0x58000c00
 8006ccc:	11fff4ff 	.word	0x11fff4ff
 8006cd0:	40011000 	.word	0x40011000
 8006cd4:	58024400 	.word	0x58024400
 8006cd8:	40004400 	.word	0x40004400
 8006cdc:	40004800 	.word	0x40004800
 8006ce0:	40004c00 	.word	0x40004c00
 8006ce4:	40005000 	.word	0x40005000
 8006ce8:	2320      	movs	r3, #32
 8006cea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cee:	e128      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006cf0:	2340      	movs	r3, #64	@ 0x40
 8006cf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cf6:	e124      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006cf8:	2380      	movs	r3, #128	@ 0x80
 8006cfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cfe:	e120      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4acb      	ldr	r2, [pc, #812]	@ (8007034 <UART_SetConfig+0x698>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d176      	bne.n	8006df8 <UART_SetConfig+0x45c>
 8006d0a:	4bcb      	ldr	r3, [pc, #812]	@ (8007038 <UART_SetConfig+0x69c>)
 8006d0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d0e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006d12:	2b28      	cmp	r3, #40	@ 0x28
 8006d14:	d86c      	bhi.n	8006df0 <UART_SetConfig+0x454>
 8006d16:	a201      	add	r2, pc, #4	@ (adr r2, 8006d1c <UART_SetConfig+0x380>)
 8006d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d1c:	08006dc1 	.word	0x08006dc1
 8006d20:	08006df1 	.word	0x08006df1
 8006d24:	08006df1 	.word	0x08006df1
 8006d28:	08006df1 	.word	0x08006df1
 8006d2c:	08006df1 	.word	0x08006df1
 8006d30:	08006df1 	.word	0x08006df1
 8006d34:	08006df1 	.word	0x08006df1
 8006d38:	08006df1 	.word	0x08006df1
 8006d3c:	08006dc9 	.word	0x08006dc9
 8006d40:	08006df1 	.word	0x08006df1
 8006d44:	08006df1 	.word	0x08006df1
 8006d48:	08006df1 	.word	0x08006df1
 8006d4c:	08006df1 	.word	0x08006df1
 8006d50:	08006df1 	.word	0x08006df1
 8006d54:	08006df1 	.word	0x08006df1
 8006d58:	08006df1 	.word	0x08006df1
 8006d5c:	08006dd1 	.word	0x08006dd1
 8006d60:	08006df1 	.word	0x08006df1
 8006d64:	08006df1 	.word	0x08006df1
 8006d68:	08006df1 	.word	0x08006df1
 8006d6c:	08006df1 	.word	0x08006df1
 8006d70:	08006df1 	.word	0x08006df1
 8006d74:	08006df1 	.word	0x08006df1
 8006d78:	08006df1 	.word	0x08006df1
 8006d7c:	08006dd9 	.word	0x08006dd9
 8006d80:	08006df1 	.word	0x08006df1
 8006d84:	08006df1 	.word	0x08006df1
 8006d88:	08006df1 	.word	0x08006df1
 8006d8c:	08006df1 	.word	0x08006df1
 8006d90:	08006df1 	.word	0x08006df1
 8006d94:	08006df1 	.word	0x08006df1
 8006d98:	08006df1 	.word	0x08006df1
 8006d9c:	08006de1 	.word	0x08006de1
 8006da0:	08006df1 	.word	0x08006df1
 8006da4:	08006df1 	.word	0x08006df1
 8006da8:	08006df1 	.word	0x08006df1
 8006dac:	08006df1 	.word	0x08006df1
 8006db0:	08006df1 	.word	0x08006df1
 8006db4:	08006df1 	.word	0x08006df1
 8006db8:	08006df1 	.word	0x08006df1
 8006dbc:	08006de9 	.word	0x08006de9
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dc6:	e0bc      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006dc8:	2304      	movs	r3, #4
 8006dca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dce:	e0b8      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006dd0:	2308      	movs	r3, #8
 8006dd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dd6:	e0b4      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006dd8:	2310      	movs	r3, #16
 8006dda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dde:	e0b0      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006de0:	2320      	movs	r3, #32
 8006de2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006de6:	e0ac      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006de8:	2340      	movs	r3, #64	@ 0x40
 8006dea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dee:	e0a8      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006df0:	2380      	movs	r3, #128	@ 0x80
 8006df2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006df6:	e0a4      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a8f      	ldr	r2, [pc, #572]	@ (800703c <UART_SetConfig+0x6a0>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d130      	bne.n	8006e64 <UART_SetConfig+0x4c8>
 8006e02:	4b8d      	ldr	r3, [pc, #564]	@ (8007038 <UART_SetConfig+0x69c>)
 8006e04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e06:	f003 0307 	and.w	r3, r3, #7
 8006e0a:	2b05      	cmp	r3, #5
 8006e0c:	d826      	bhi.n	8006e5c <UART_SetConfig+0x4c0>
 8006e0e:	a201      	add	r2, pc, #4	@ (adr r2, 8006e14 <UART_SetConfig+0x478>)
 8006e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e14:	08006e2d 	.word	0x08006e2d
 8006e18:	08006e35 	.word	0x08006e35
 8006e1c:	08006e3d 	.word	0x08006e3d
 8006e20:	08006e45 	.word	0x08006e45
 8006e24:	08006e4d 	.word	0x08006e4d
 8006e28:	08006e55 	.word	0x08006e55
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e32:	e086      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006e34:	2304      	movs	r3, #4
 8006e36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e3a:	e082      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006e3c:	2308      	movs	r3, #8
 8006e3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e42:	e07e      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006e44:	2310      	movs	r3, #16
 8006e46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e4a:	e07a      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006e4c:	2320      	movs	r3, #32
 8006e4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e52:	e076      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006e54:	2340      	movs	r3, #64	@ 0x40
 8006e56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e5a:	e072      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006e5c:	2380      	movs	r3, #128	@ 0x80
 8006e5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e62:	e06e      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a75      	ldr	r2, [pc, #468]	@ (8007040 <UART_SetConfig+0x6a4>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d130      	bne.n	8006ed0 <UART_SetConfig+0x534>
 8006e6e:	4b72      	ldr	r3, [pc, #456]	@ (8007038 <UART_SetConfig+0x69c>)
 8006e70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e72:	f003 0307 	and.w	r3, r3, #7
 8006e76:	2b05      	cmp	r3, #5
 8006e78:	d826      	bhi.n	8006ec8 <UART_SetConfig+0x52c>
 8006e7a:	a201      	add	r2, pc, #4	@ (adr r2, 8006e80 <UART_SetConfig+0x4e4>)
 8006e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e80:	08006e99 	.word	0x08006e99
 8006e84:	08006ea1 	.word	0x08006ea1
 8006e88:	08006ea9 	.word	0x08006ea9
 8006e8c:	08006eb1 	.word	0x08006eb1
 8006e90:	08006eb9 	.word	0x08006eb9
 8006e94:	08006ec1 	.word	0x08006ec1
 8006e98:	2300      	movs	r3, #0
 8006e9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e9e:	e050      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006ea0:	2304      	movs	r3, #4
 8006ea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ea6:	e04c      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006ea8:	2308      	movs	r3, #8
 8006eaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006eae:	e048      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006eb0:	2310      	movs	r3, #16
 8006eb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006eb6:	e044      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006eb8:	2320      	movs	r3, #32
 8006eba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ebe:	e040      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006ec0:	2340      	movs	r3, #64	@ 0x40
 8006ec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ec6:	e03c      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006ec8:	2380      	movs	r3, #128	@ 0x80
 8006eca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ece:	e038      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a5b      	ldr	r2, [pc, #364]	@ (8007044 <UART_SetConfig+0x6a8>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d130      	bne.n	8006f3c <UART_SetConfig+0x5a0>
 8006eda:	4b57      	ldr	r3, [pc, #348]	@ (8007038 <UART_SetConfig+0x69c>)
 8006edc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ede:	f003 0307 	and.w	r3, r3, #7
 8006ee2:	2b05      	cmp	r3, #5
 8006ee4:	d826      	bhi.n	8006f34 <UART_SetConfig+0x598>
 8006ee6:	a201      	add	r2, pc, #4	@ (adr r2, 8006eec <UART_SetConfig+0x550>)
 8006ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eec:	08006f05 	.word	0x08006f05
 8006ef0:	08006f0d 	.word	0x08006f0d
 8006ef4:	08006f15 	.word	0x08006f15
 8006ef8:	08006f1d 	.word	0x08006f1d
 8006efc:	08006f25 	.word	0x08006f25
 8006f00:	08006f2d 	.word	0x08006f2d
 8006f04:	2302      	movs	r3, #2
 8006f06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f0a:	e01a      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006f0c:	2304      	movs	r3, #4
 8006f0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f12:	e016      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006f14:	2308      	movs	r3, #8
 8006f16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f1a:	e012      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006f1c:	2310      	movs	r3, #16
 8006f1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f22:	e00e      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006f24:	2320      	movs	r3, #32
 8006f26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f2a:	e00a      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006f2c:	2340      	movs	r3, #64	@ 0x40
 8006f2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f32:	e006      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006f34:	2380      	movs	r3, #128	@ 0x80
 8006f36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f3a:	e002      	b.n	8006f42 <UART_SetConfig+0x5a6>
 8006f3c:	2380      	movs	r3, #128	@ 0x80
 8006f3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a3f      	ldr	r2, [pc, #252]	@ (8007044 <UART_SetConfig+0x6a8>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	f040 80f8 	bne.w	800713e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006f4e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006f52:	2b20      	cmp	r3, #32
 8006f54:	dc46      	bgt.n	8006fe4 <UART_SetConfig+0x648>
 8006f56:	2b02      	cmp	r3, #2
 8006f58:	f2c0 8082 	blt.w	8007060 <UART_SetConfig+0x6c4>
 8006f5c:	3b02      	subs	r3, #2
 8006f5e:	2b1e      	cmp	r3, #30
 8006f60:	d87e      	bhi.n	8007060 <UART_SetConfig+0x6c4>
 8006f62:	a201      	add	r2, pc, #4	@ (adr r2, 8006f68 <UART_SetConfig+0x5cc>)
 8006f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f68:	08006feb 	.word	0x08006feb
 8006f6c:	08007061 	.word	0x08007061
 8006f70:	08006ff3 	.word	0x08006ff3
 8006f74:	08007061 	.word	0x08007061
 8006f78:	08007061 	.word	0x08007061
 8006f7c:	08007061 	.word	0x08007061
 8006f80:	08007003 	.word	0x08007003
 8006f84:	08007061 	.word	0x08007061
 8006f88:	08007061 	.word	0x08007061
 8006f8c:	08007061 	.word	0x08007061
 8006f90:	08007061 	.word	0x08007061
 8006f94:	08007061 	.word	0x08007061
 8006f98:	08007061 	.word	0x08007061
 8006f9c:	08007061 	.word	0x08007061
 8006fa0:	08007013 	.word	0x08007013
 8006fa4:	08007061 	.word	0x08007061
 8006fa8:	08007061 	.word	0x08007061
 8006fac:	08007061 	.word	0x08007061
 8006fb0:	08007061 	.word	0x08007061
 8006fb4:	08007061 	.word	0x08007061
 8006fb8:	08007061 	.word	0x08007061
 8006fbc:	08007061 	.word	0x08007061
 8006fc0:	08007061 	.word	0x08007061
 8006fc4:	08007061 	.word	0x08007061
 8006fc8:	08007061 	.word	0x08007061
 8006fcc:	08007061 	.word	0x08007061
 8006fd0:	08007061 	.word	0x08007061
 8006fd4:	08007061 	.word	0x08007061
 8006fd8:	08007061 	.word	0x08007061
 8006fdc:	08007061 	.word	0x08007061
 8006fe0:	08007053 	.word	0x08007053
 8006fe4:	2b40      	cmp	r3, #64	@ 0x40
 8006fe6:	d037      	beq.n	8007058 <UART_SetConfig+0x6bc>
 8006fe8:	e03a      	b.n	8007060 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006fea:	f7fd fde3 	bl	8004bb4 <HAL_RCCEx_GetD3PCLK1Freq>
 8006fee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006ff0:	e03c      	b.n	800706c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ff2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f7fd fdf2 	bl	8004be0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006ffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ffe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007000:	e034      	b.n	800706c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007002:	f107 0318 	add.w	r3, r7, #24
 8007006:	4618      	mov	r0, r3
 8007008:	f7fd ff3e 	bl	8004e88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800700c:	69fb      	ldr	r3, [r7, #28]
 800700e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007010:	e02c      	b.n	800706c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007012:	4b09      	ldr	r3, [pc, #36]	@ (8007038 <UART_SetConfig+0x69c>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f003 0320 	and.w	r3, r3, #32
 800701a:	2b00      	cmp	r3, #0
 800701c:	d016      	beq.n	800704c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800701e:	4b06      	ldr	r3, [pc, #24]	@ (8007038 <UART_SetConfig+0x69c>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	08db      	lsrs	r3, r3, #3
 8007024:	f003 0303 	and.w	r3, r3, #3
 8007028:	4a07      	ldr	r2, [pc, #28]	@ (8007048 <UART_SetConfig+0x6ac>)
 800702a:	fa22 f303 	lsr.w	r3, r2, r3
 800702e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007030:	e01c      	b.n	800706c <UART_SetConfig+0x6d0>
 8007032:	bf00      	nop
 8007034:	40011400 	.word	0x40011400
 8007038:	58024400 	.word	0x58024400
 800703c:	40007800 	.word	0x40007800
 8007040:	40007c00 	.word	0x40007c00
 8007044:	58000c00 	.word	0x58000c00
 8007048:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800704c:	4b9d      	ldr	r3, [pc, #628]	@ (80072c4 <UART_SetConfig+0x928>)
 800704e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007050:	e00c      	b.n	800706c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007052:	4b9d      	ldr	r3, [pc, #628]	@ (80072c8 <UART_SetConfig+0x92c>)
 8007054:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007056:	e009      	b.n	800706c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007058:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800705c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800705e:	e005      	b.n	800706c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007060:	2300      	movs	r3, #0
 8007062:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007064:	2301      	movs	r3, #1
 8007066:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800706a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800706c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800706e:	2b00      	cmp	r3, #0
 8007070:	f000 81de 	beq.w	8007430 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007078:	4a94      	ldr	r2, [pc, #592]	@ (80072cc <UART_SetConfig+0x930>)
 800707a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800707e:	461a      	mov	r2, r3
 8007080:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007082:	fbb3 f3f2 	udiv	r3, r3, r2
 8007086:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	685a      	ldr	r2, [r3, #4]
 800708c:	4613      	mov	r3, r2
 800708e:	005b      	lsls	r3, r3, #1
 8007090:	4413      	add	r3, r2
 8007092:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007094:	429a      	cmp	r2, r3
 8007096:	d305      	bcc.n	80070a4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800709e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d903      	bls.n	80070ac <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80070a4:	2301      	movs	r3, #1
 80070a6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80070aa:	e1c1      	b.n	8007430 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070ae:	2200      	movs	r2, #0
 80070b0:	60bb      	str	r3, [r7, #8]
 80070b2:	60fa      	str	r2, [r7, #12]
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070b8:	4a84      	ldr	r2, [pc, #528]	@ (80072cc <UART_SetConfig+0x930>)
 80070ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070be:	b29b      	uxth	r3, r3
 80070c0:	2200      	movs	r2, #0
 80070c2:	603b      	str	r3, [r7, #0]
 80070c4:	607a      	str	r2, [r7, #4]
 80070c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80070ce:	f7f9 f957 	bl	8000380 <__aeabi_uldivmod>
 80070d2:	4602      	mov	r2, r0
 80070d4:	460b      	mov	r3, r1
 80070d6:	4610      	mov	r0, r2
 80070d8:	4619      	mov	r1, r3
 80070da:	f04f 0200 	mov.w	r2, #0
 80070de:	f04f 0300 	mov.w	r3, #0
 80070e2:	020b      	lsls	r3, r1, #8
 80070e4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80070e8:	0202      	lsls	r2, r0, #8
 80070ea:	6979      	ldr	r1, [r7, #20]
 80070ec:	6849      	ldr	r1, [r1, #4]
 80070ee:	0849      	lsrs	r1, r1, #1
 80070f0:	2000      	movs	r0, #0
 80070f2:	460c      	mov	r4, r1
 80070f4:	4605      	mov	r5, r0
 80070f6:	eb12 0804 	adds.w	r8, r2, r4
 80070fa:	eb43 0905 	adc.w	r9, r3, r5
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	469a      	mov	sl, r3
 8007106:	4693      	mov	fp, r2
 8007108:	4652      	mov	r2, sl
 800710a:	465b      	mov	r3, fp
 800710c:	4640      	mov	r0, r8
 800710e:	4649      	mov	r1, r9
 8007110:	f7f9 f936 	bl	8000380 <__aeabi_uldivmod>
 8007114:	4602      	mov	r2, r0
 8007116:	460b      	mov	r3, r1
 8007118:	4613      	mov	r3, r2
 800711a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800711c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800711e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007122:	d308      	bcc.n	8007136 <UART_SetConfig+0x79a>
 8007124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007126:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800712a:	d204      	bcs.n	8007136 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007132:	60da      	str	r2, [r3, #12]
 8007134:	e17c      	b.n	8007430 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800713c:	e178      	b.n	8007430 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	69db      	ldr	r3, [r3, #28]
 8007142:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007146:	f040 80c5 	bne.w	80072d4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800714a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800714e:	2b20      	cmp	r3, #32
 8007150:	dc48      	bgt.n	80071e4 <UART_SetConfig+0x848>
 8007152:	2b00      	cmp	r3, #0
 8007154:	db7b      	blt.n	800724e <UART_SetConfig+0x8b2>
 8007156:	2b20      	cmp	r3, #32
 8007158:	d879      	bhi.n	800724e <UART_SetConfig+0x8b2>
 800715a:	a201      	add	r2, pc, #4	@ (adr r2, 8007160 <UART_SetConfig+0x7c4>)
 800715c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007160:	080071eb 	.word	0x080071eb
 8007164:	080071f3 	.word	0x080071f3
 8007168:	0800724f 	.word	0x0800724f
 800716c:	0800724f 	.word	0x0800724f
 8007170:	080071fb 	.word	0x080071fb
 8007174:	0800724f 	.word	0x0800724f
 8007178:	0800724f 	.word	0x0800724f
 800717c:	0800724f 	.word	0x0800724f
 8007180:	0800720b 	.word	0x0800720b
 8007184:	0800724f 	.word	0x0800724f
 8007188:	0800724f 	.word	0x0800724f
 800718c:	0800724f 	.word	0x0800724f
 8007190:	0800724f 	.word	0x0800724f
 8007194:	0800724f 	.word	0x0800724f
 8007198:	0800724f 	.word	0x0800724f
 800719c:	0800724f 	.word	0x0800724f
 80071a0:	0800721b 	.word	0x0800721b
 80071a4:	0800724f 	.word	0x0800724f
 80071a8:	0800724f 	.word	0x0800724f
 80071ac:	0800724f 	.word	0x0800724f
 80071b0:	0800724f 	.word	0x0800724f
 80071b4:	0800724f 	.word	0x0800724f
 80071b8:	0800724f 	.word	0x0800724f
 80071bc:	0800724f 	.word	0x0800724f
 80071c0:	0800724f 	.word	0x0800724f
 80071c4:	0800724f 	.word	0x0800724f
 80071c8:	0800724f 	.word	0x0800724f
 80071cc:	0800724f 	.word	0x0800724f
 80071d0:	0800724f 	.word	0x0800724f
 80071d4:	0800724f 	.word	0x0800724f
 80071d8:	0800724f 	.word	0x0800724f
 80071dc:	0800724f 	.word	0x0800724f
 80071e0:	08007241 	.word	0x08007241
 80071e4:	2b40      	cmp	r3, #64	@ 0x40
 80071e6:	d02e      	beq.n	8007246 <UART_SetConfig+0x8aa>
 80071e8:	e031      	b.n	800724e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071ea:	f7fc faad 	bl	8003748 <HAL_RCC_GetPCLK1Freq>
 80071ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80071f0:	e033      	b.n	800725a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071f2:	f7fc fabf 	bl	8003774 <HAL_RCC_GetPCLK2Freq>
 80071f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80071f8:	e02f      	b.n	800725a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80071fe:	4618      	mov	r0, r3
 8007200:	f7fd fcee 	bl	8004be0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007206:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007208:	e027      	b.n	800725a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800720a:	f107 0318 	add.w	r3, r7, #24
 800720e:	4618      	mov	r0, r3
 8007210:	f7fd fe3a 	bl	8004e88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007214:	69fb      	ldr	r3, [r7, #28]
 8007216:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007218:	e01f      	b.n	800725a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800721a:	4b2d      	ldr	r3, [pc, #180]	@ (80072d0 <UART_SetConfig+0x934>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f003 0320 	and.w	r3, r3, #32
 8007222:	2b00      	cmp	r3, #0
 8007224:	d009      	beq.n	800723a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007226:	4b2a      	ldr	r3, [pc, #168]	@ (80072d0 <UART_SetConfig+0x934>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	08db      	lsrs	r3, r3, #3
 800722c:	f003 0303 	and.w	r3, r3, #3
 8007230:	4a24      	ldr	r2, [pc, #144]	@ (80072c4 <UART_SetConfig+0x928>)
 8007232:	fa22 f303 	lsr.w	r3, r2, r3
 8007236:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007238:	e00f      	b.n	800725a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800723a:	4b22      	ldr	r3, [pc, #136]	@ (80072c4 <UART_SetConfig+0x928>)
 800723c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800723e:	e00c      	b.n	800725a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007240:	4b21      	ldr	r3, [pc, #132]	@ (80072c8 <UART_SetConfig+0x92c>)
 8007242:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007244:	e009      	b.n	800725a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007246:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800724a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800724c:	e005      	b.n	800725a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800724e:	2300      	movs	r3, #0
 8007250:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007252:	2301      	movs	r3, #1
 8007254:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007258:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800725a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800725c:	2b00      	cmp	r3, #0
 800725e:	f000 80e7 	beq.w	8007430 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007266:	4a19      	ldr	r2, [pc, #100]	@ (80072cc <UART_SetConfig+0x930>)
 8007268:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800726c:	461a      	mov	r2, r3
 800726e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007270:	fbb3 f3f2 	udiv	r3, r3, r2
 8007274:	005a      	lsls	r2, r3, #1
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	085b      	lsrs	r3, r3, #1
 800727c:	441a      	add	r2, r3
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	fbb2 f3f3 	udiv	r3, r2, r3
 8007286:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800728a:	2b0f      	cmp	r3, #15
 800728c:	d916      	bls.n	80072bc <UART_SetConfig+0x920>
 800728e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007290:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007294:	d212      	bcs.n	80072bc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007298:	b29b      	uxth	r3, r3
 800729a:	f023 030f 	bic.w	r3, r3, #15
 800729e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80072a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072a2:	085b      	lsrs	r3, r3, #1
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	f003 0307 	and.w	r3, r3, #7
 80072aa:	b29a      	uxth	r2, r3
 80072ac:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80072ae:	4313      	orrs	r3, r2
 80072b0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80072b8:	60da      	str	r2, [r3, #12]
 80072ba:	e0b9      	b.n	8007430 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80072bc:	2301      	movs	r3, #1
 80072be:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80072c2:	e0b5      	b.n	8007430 <UART_SetConfig+0xa94>
 80072c4:	03d09000 	.word	0x03d09000
 80072c8:	003d0900 	.word	0x003d0900
 80072cc:	08008b38 	.word	0x08008b38
 80072d0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80072d4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80072d8:	2b20      	cmp	r3, #32
 80072da:	dc49      	bgt.n	8007370 <UART_SetConfig+0x9d4>
 80072dc:	2b00      	cmp	r3, #0
 80072de:	db7c      	blt.n	80073da <UART_SetConfig+0xa3e>
 80072e0:	2b20      	cmp	r3, #32
 80072e2:	d87a      	bhi.n	80073da <UART_SetConfig+0xa3e>
 80072e4:	a201      	add	r2, pc, #4	@ (adr r2, 80072ec <UART_SetConfig+0x950>)
 80072e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ea:	bf00      	nop
 80072ec:	08007377 	.word	0x08007377
 80072f0:	0800737f 	.word	0x0800737f
 80072f4:	080073db 	.word	0x080073db
 80072f8:	080073db 	.word	0x080073db
 80072fc:	08007387 	.word	0x08007387
 8007300:	080073db 	.word	0x080073db
 8007304:	080073db 	.word	0x080073db
 8007308:	080073db 	.word	0x080073db
 800730c:	08007397 	.word	0x08007397
 8007310:	080073db 	.word	0x080073db
 8007314:	080073db 	.word	0x080073db
 8007318:	080073db 	.word	0x080073db
 800731c:	080073db 	.word	0x080073db
 8007320:	080073db 	.word	0x080073db
 8007324:	080073db 	.word	0x080073db
 8007328:	080073db 	.word	0x080073db
 800732c:	080073a7 	.word	0x080073a7
 8007330:	080073db 	.word	0x080073db
 8007334:	080073db 	.word	0x080073db
 8007338:	080073db 	.word	0x080073db
 800733c:	080073db 	.word	0x080073db
 8007340:	080073db 	.word	0x080073db
 8007344:	080073db 	.word	0x080073db
 8007348:	080073db 	.word	0x080073db
 800734c:	080073db 	.word	0x080073db
 8007350:	080073db 	.word	0x080073db
 8007354:	080073db 	.word	0x080073db
 8007358:	080073db 	.word	0x080073db
 800735c:	080073db 	.word	0x080073db
 8007360:	080073db 	.word	0x080073db
 8007364:	080073db 	.word	0x080073db
 8007368:	080073db 	.word	0x080073db
 800736c:	080073cd 	.word	0x080073cd
 8007370:	2b40      	cmp	r3, #64	@ 0x40
 8007372:	d02e      	beq.n	80073d2 <UART_SetConfig+0xa36>
 8007374:	e031      	b.n	80073da <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007376:	f7fc f9e7 	bl	8003748 <HAL_RCC_GetPCLK1Freq>
 800737a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800737c:	e033      	b.n	80073e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800737e:	f7fc f9f9 	bl	8003774 <HAL_RCC_GetPCLK2Freq>
 8007382:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007384:	e02f      	b.n	80073e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007386:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800738a:	4618      	mov	r0, r3
 800738c:	f7fd fc28 	bl	8004be0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007392:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007394:	e027      	b.n	80073e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007396:	f107 0318 	add.w	r3, r7, #24
 800739a:	4618      	mov	r0, r3
 800739c:	f7fd fd74 	bl	8004e88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80073a0:	69fb      	ldr	r3, [r7, #28]
 80073a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073a4:	e01f      	b.n	80073e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073a6:	4b2d      	ldr	r3, [pc, #180]	@ (800745c <UART_SetConfig+0xac0>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f003 0320 	and.w	r3, r3, #32
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d009      	beq.n	80073c6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80073b2:	4b2a      	ldr	r3, [pc, #168]	@ (800745c <UART_SetConfig+0xac0>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	08db      	lsrs	r3, r3, #3
 80073b8:	f003 0303 	and.w	r3, r3, #3
 80073bc:	4a28      	ldr	r2, [pc, #160]	@ (8007460 <UART_SetConfig+0xac4>)
 80073be:	fa22 f303 	lsr.w	r3, r2, r3
 80073c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80073c4:	e00f      	b.n	80073e6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80073c6:	4b26      	ldr	r3, [pc, #152]	@ (8007460 <UART_SetConfig+0xac4>)
 80073c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073ca:	e00c      	b.n	80073e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80073cc:	4b25      	ldr	r3, [pc, #148]	@ (8007464 <UART_SetConfig+0xac8>)
 80073ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073d0:	e009      	b.n	80073e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80073d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073d8:	e005      	b.n	80073e6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80073da:	2300      	movs	r3, #0
 80073dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80073de:	2301      	movs	r3, #1
 80073e0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80073e4:	bf00      	nop
    }

    if (pclk != 0U)
 80073e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d021      	beq.n	8007430 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073f0:	4a1d      	ldr	r2, [pc, #116]	@ (8007468 <UART_SetConfig+0xacc>)
 80073f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073f6:	461a      	mov	r2, r3
 80073f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073fa:	fbb3 f2f2 	udiv	r2, r3, r2
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	085b      	lsrs	r3, r3, #1
 8007404:	441a      	add	r2, r3
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	fbb2 f3f3 	udiv	r3, r2, r3
 800740e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007412:	2b0f      	cmp	r3, #15
 8007414:	d909      	bls.n	800742a <UART_SetConfig+0xa8e>
 8007416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007418:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800741c:	d205      	bcs.n	800742a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800741e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007420:	b29a      	uxth	r2, r3
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	60da      	str	r2, [r3, #12]
 8007428:	e002      	b.n	8007430 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800742a:	2301      	movs	r3, #1
 800742c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	2201      	movs	r2, #1
 8007434:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	2201      	movs	r2, #1
 800743c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	2200      	movs	r2, #0
 8007444:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	2200      	movs	r2, #0
 800744a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800744c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8007450:	4618      	mov	r0, r3
 8007452:	3748      	adds	r7, #72	@ 0x48
 8007454:	46bd      	mov	sp, r7
 8007456:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800745a:	bf00      	nop
 800745c:	58024400 	.word	0x58024400
 8007460:	03d09000 	.word	0x03d09000
 8007464:	003d0900 	.word	0x003d0900
 8007468:	08008b38 	.word	0x08008b38

0800746c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800746c:	b480      	push	{r7}
 800746e:	b083      	sub	sp, #12
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007478:	f003 0308 	and.w	r3, r3, #8
 800747c:	2b00      	cmp	r3, #0
 800747e:	d00a      	beq.n	8007496 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	430a      	orrs	r2, r1
 8007494:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800749a:	f003 0301 	and.w	r3, r3, #1
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d00a      	beq.n	80074b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	430a      	orrs	r2, r1
 80074b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074bc:	f003 0302 	and.w	r3, r3, #2
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d00a      	beq.n	80074da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	430a      	orrs	r2, r1
 80074d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074de:	f003 0304 	and.w	r3, r3, #4
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d00a      	beq.n	80074fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	430a      	orrs	r2, r1
 80074fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007500:	f003 0310 	and.w	r3, r3, #16
 8007504:	2b00      	cmp	r3, #0
 8007506:	d00a      	beq.n	800751e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	430a      	orrs	r2, r1
 800751c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007522:	f003 0320 	and.w	r3, r3, #32
 8007526:	2b00      	cmp	r3, #0
 8007528:	d00a      	beq.n	8007540 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	689b      	ldr	r3, [r3, #8]
 8007530:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	430a      	orrs	r2, r1
 800753e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007544:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007548:	2b00      	cmp	r3, #0
 800754a:	d01a      	beq.n	8007582 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	430a      	orrs	r2, r1
 8007560:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007566:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800756a:	d10a      	bne.n	8007582 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	430a      	orrs	r2, r1
 8007580:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007586:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800758a:	2b00      	cmp	r3, #0
 800758c:	d00a      	beq.n	80075a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	430a      	orrs	r2, r1
 80075a2:	605a      	str	r2, [r3, #4]
  }
}
 80075a4:	bf00      	nop
 80075a6:	370c      	adds	r7, #12
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr

080075b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b098      	sub	sp, #96	@ 0x60
 80075b4:	af02      	add	r7, sp, #8
 80075b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2200      	movs	r2, #0
 80075bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80075c0:	f7f9 ff86 	bl	80014d0 <HAL_GetTick>
 80075c4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f003 0308 	and.w	r3, r3, #8
 80075d0:	2b08      	cmp	r3, #8
 80075d2:	d12f      	bne.n	8007634 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075d4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80075d8:	9300      	str	r3, [sp, #0]
 80075da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075dc:	2200      	movs	r2, #0
 80075de:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 f88e 	bl	8007704 <UART_WaitOnFlagUntilTimeout>
 80075e8:	4603      	mov	r3, r0
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d022      	beq.n	8007634 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075f6:	e853 3f00 	ldrex	r3, [r3]
 80075fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80075fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007602:	653b      	str	r3, [r7, #80]	@ 0x50
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	461a      	mov	r2, r3
 800760a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800760c:	647b      	str	r3, [r7, #68]	@ 0x44
 800760e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007610:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007612:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007614:	e841 2300 	strex	r3, r2, [r1]
 8007618:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800761a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800761c:	2b00      	cmp	r3, #0
 800761e:	d1e6      	bne.n	80075ee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2220      	movs	r2, #32
 8007624:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2200      	movs	r2, #0
 800762c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007630:	2303      	movs	r3, #3
 8007632:	e063      	b.n	80076fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f003 0304 	and.w	r3, r3, #4
 800763e:	2b04      	cmp	r3, #4
 8007640:	d149      	bne.n	80076d6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007642:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007646:	9300      	str	r3, [sp, #0]
 8007648:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800764a:	2200      	movs	r2, #0
 800764c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f000 f857 	bl	8007704 <UART_WaitOnFlagUntilTimeout>
 8007656:	4603      	mov	r3, r0
 8007658:	2b00      	cmp	r3, #0
 800765a:	d03c      	beq.n	80076d6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007664:	e853 3f00 	ldrex	r3, [r3]
 8007668:	623b      	str	r3, [r7, #32]
   return(result);
 800766a:	6a3b      	ldr	r3, [r7, #32]
 800766c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007670:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	461a      	mov	r2, r3
 8007678:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800767a:	633b      	str	r3, [r7, #48]	@ 0x30
 800767c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800767e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007680:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007682:	e841 2300 	strex	r3, r2, [r1]
 8007686:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800768a:	2b00      	cmp	r3, #0
 800768c:	d1e6      	bne.n	800765c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	3308      	adds	r3, #8
 8007694:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	e853 3f00 	ldrex	r3, [r3]
 800769c:	60fb      	str	r3, [r7, #12]
   return(result);
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	f023 0301 	bic.w	r3, r3, #1
 80076a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	3308      	adds	r3, #8
 80076ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80076ae:	61fa      	str	r2, [r7, #28]
 80076b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b2:	69b9      	ldr	r1, [r7, #24]
 80076b4:	69fa      	ldr	r2, [r7, #28]
 80076b6:	e841 2300 	strex	r3, r2, [r1]
 80076ba:	617b      	str	r3, [r7, #20]
   return(result);
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d1e5      	bne.n	800768e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2220      	movs	r2, #32
 80076c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2200      	movs	r2, #0
 80076ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076d2:	2303      	movs	r3, #3
 80076d4:	e012      	b.n	80076fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2220      	movs	r2, #32
 80076da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2220      	movs	r2, #32
 80076e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2200      	movs	r2, #0
 80076ea:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2200      	movs	r2, #0
 80076f0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2200      	movs	r2, #0
 80076f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80076fa:	2300      	movs	r3, #0
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3758      	adds	r7, #88	@ 0x58
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}

08007704 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b084      	sub	sp, #16
 8007708:	af00      	add	r7, sp, #0
 800770a:	60f8      	str	r0, [r7, #12]
 800770c:	60b9      	str	r1, [r7, #8]
 800770e:	603b      	str	r3, [r7, #0]
 8007710:	4613      	mov	r3, r2
 8007712:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007714:	e04f      	b.n	80077b6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007716:	69bb      	ldr	r3, [r7, #24]
 8007718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800771c:	d04b      	beq.n	80077b6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800771e:	f7f9 fed7 	bl	80014d0 <HAL_GetTick>
 8007722:	4602      	mov	r2, r0
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	1ad3      	subs	r3, r2, r3
 8007728:	69ba      	ldr	r2, [r7, #24]
 800772a:	429a      	cmp	r2, r3
 800772c:	d302      	bcc.n	8007734 <UART_WaitOnFlagUntilTimeout+0x30>
 800772e:	69bb      	ldr	r3, [r7, #24]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d101      	bne.n	8007738 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007734:	2303      	movs	r3, #3
 8007736:	e04e      	b.n	80077d6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f003 0304 	and.w	r3, r3, #4
 8007742:	2b00      	cmp	r3, #0
 8007744:	d037      	beq.n	80077b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	2b80      	cmp	r3, #128	@ 0x80
 800774a:	d034      	beq.n	80077b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	2b40      	cmp	r3, #64	@ 0x40
 8007750:	d031      	beq.n	80077b6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	69db      	ldr	r3, [r3, #28]
 8007758:	f003 0308 	and.w	r3, r3, #8
 800775c:	2b08      	cmp	r3, #8
 800775e:	d110      	bne.n	8007782 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	2208      	movs	r2, #8
 8007766:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007768:	68f8      	ldr	r0, [r7, #12]
 800776a:	f000 f839 	bl	80077e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2208      	movs	r2, #8
 8007772:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2200      	movs	r2, #0
 800777a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800777e:	2301      	movs	r3, #1
 8007780:	e029      	b.n	80077d6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	69db      	ldr	r3, [r3, #28]
 8007788:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800778c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007790:	d111      	bne.n	80077b6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800779a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800779c:	68f8      	ldr	r0, [r7, #12]
 800779e:	f000 f81f 	bl	80077e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2220      	movs	r2, #32
 80077a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2200      	movs	r2, #0
 80077ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80077b2:	2303      	movs	r3, #3
 80077b4:	e00f      	b.n	80077d6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	69da      	ldr	r2, [r3, #28]
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	4013      	ands	r3, r2
 80077c0:	68ba      	ldr	r2, [r7, #8]
 80077c2:	429a      	cmp	r2, r3
 80077c4:	bf0c      	ite	eq
 80077c6:	2301      	moveq	r3, #1
 80077c8:	2300      	movne	r3, #0
 80077ca:	b2db      	uxtb	r3, r3
 80077cc:	461a      	mov	r2, r3
 80077ce:	79fb      	ldrb	r3, [r7, #7]
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d0a0      	beq.n	8007716 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80077d4:	2300      	movs	r3, #0
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3710      	adds	r7, #16
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
	...

080077e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b095      	sub	sp, #84	@ 0x54
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077f0:	e853 3f00 	ldrex	r3, [r3]
 80077f4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80077f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80077fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	461a      	mov	r2, r3
 8007804:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007806:	643b      	str	r3, [r7, #64]	@ 0x40
 8007808:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800780a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800780c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800780e:	e841 2300 	strex	r3, r2, [r1]
 8007812:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007816:	2b00      	cmp	r3, #0
 8007818:	d1e6      	bne.n	80077e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	3308      	adds	r3, #8
 8007820:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007822:	6a3b      	ldr	r3, [r7, #32]
 8007824:	e853 3f00 	ldrex	r3, [r3]
 8007828:	61fb      	str	r3, [r7, #28]
   return(result);
 800782a:	69fa      	ldr	r2, [r7, #28]
 800782c:	4b1e      	ldr	r3, [pc, #120]	@ (80078a8 <UART_EndRxTransfer+0xc8>)
 800782e:	4013      	ands	r3, r2
 8007830:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	3308      	adds	r3, #8
 8007838:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800783a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800783c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800783e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007840:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007842:	e841 2300 	strex	r3, r2, [r1]
 8007846:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800784a:	2b00      	cmp	r3, #0
 800784c:	d1e5      	bne.n	800781a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007852:	2b01      	cmp	r3, #1
 8007854:	d118      	bne.n	8007888 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	e853 3f00 	ldrex	r3, [r3]
 8007862:	60bb      	str	r3, [r7, #8]
   return(result);
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	f023 0310 	bic.w	r3, r3, #16
 800786a:	647b      	str	r3, [r7, #68]	@ 0x44
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	461a      	mov	r2, r3
 8007872:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007874:	61bb      	str	r3, [r7, #24]
 8007876:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007878:	6979      	ldr	r1, [r7, #20]
 800787a:	69ba      	ldr	r2, [r7, #24]
 800787c:	e841 2300 	strex	r3, r2, [r1]
 8007880:	613b      	str	r3, [r7, #16]
   return(result);
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d1e6      	bne.n	8007856 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2220      	movs	r2, #32
 800788c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2200      	movs	r2, #0
 8007894:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2200      	movs	r2, #0
 800789a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800789c:	bf00      	nop
 800789e:	3754      	adds	r7, #84	@ 0x54
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr
 80078a8:	effffffe 	.word	0xeffffffe

080078ac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2200      	movs	r2, #0
 80078be:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80078c2:	68f8      	ldr	r0, [r7, #12]
 80078c4:	f7ff f854 	bl	8006970 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078c8:	bf00      	nop
 80078ca:	3710      	adds	r7, #16
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}

080078d0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b088      	sub	sp, #32
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	e853 3f00 	ldrex	r3, [r3]
 80078e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80078ec:	61fb      	str	r3, [r7, #28]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	461a      	mov	r2, r3
 80078f4:	69fb      	ldr	r3, [r7, #28]
 80078f6:	61bb      	str	r3, [r7, #24]
 80078f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078fa:	6979      	ldr	r1, [r7, #20]
 80078fc:	69ba      	ldr	r2, [r7, #24]
 80078fe:	e841 2300 	strex	r3, r2, [r1]
 8007902:	613b      	str	r3, [r7, #16]
   return(result);
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d1e6      	bne.n	80078d8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2220      	movs	r2, #32
 800790e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2200      	movs	r2, #0
 8007916:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f7ff f81f 	bl	800695c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800791e:	bf00      	nop
 8007920:	3720      	adds	r7, #32
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}

08007926 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007926:	b480      	push	{r7}
 8007928:	b083      	sub	sp, #12
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800792e:	bf00      	nop
 8007930:	370c      	adds	r7, #12
 8007932:	46bd      	mov	sp, r7
 8007934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007938:	4770      	bx	lr

0800793a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800793a:	b480      	push	{r7}
 800793c:	b083      	sub	sp, #12
 800793e:	af00      	add	r7, sp, #0
 8007940:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007942:	bf00      	nop
 8007944:	370c      	adds	r7, #12
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr

0800794e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800794e:	b480      	push	{r7}
 8007950:	b083      	sub	sp, #12
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007956:	bf00      	nop
 8007958:	370c      	adds	r7, #12
 800795a:	46bd      	mov	sp, r7
 800795c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007960:	4770      	bx	lr

08007962 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007962:	b480      	push	{r7}
 8007964:	b085      	sub	sp, #20
 8007966:	af00      	add	r7, sp, #0
 8007968:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007970:	2b01      	cmp	r3, #1
 8007972:	d101      	bne.n	8007978 <HAL_UARTEx_DisableFifoMode+0x16>
 8007974:	2302      	movs	r3, #2
 8007976:	e027      	b.n	80079c8 <HAL_UARTEx_DisableFifoMode+0x66>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2201      	movs	r2, #1
 800797c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2224      	movs	r2, #36	@ 0x24
 8007984:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f022 0201 	bic.w	r2, r2, #1
 800799e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80079a6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2200      	movs	r2, #0
 80079ac:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	68fa      	ldr	r2, [r7, #12]
 80079b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2220      	movs	r2, #32
 80079ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2200      	movs	r2, #0
 80079c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80079c6:	2300      	movs	r3, #0
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3714      	adds	r7, #20
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr

080079d4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b084      	sub	sp, #16
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d101      	bne.n	80079ec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80079e8:	2302      	movs	r3, #2
 80079ea:	e02d      	b.n	8007a48 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2201      	movs	r2, #1
 80079f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2224      	movs	r2, #36	@ 0x24
 80079f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	681a      	ldr	r2, [r3, #0]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f022 0201 	bic.w	r2, r2, #1
 8007a12:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	689b      	ldr	r3, [r3, #8]
 8007a1a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	683a      	ldr	r2, [r7, #0]
 8007a24:	430a      	orrs	r2, r1
 8007a26:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f000 f84f 	bl	8007acc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	68fa      	ldr	r2, [r7, #12]
 8007a34:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2220      	movs	r2, #32
 8007a3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2200      	movs	r2, #0
 8007a42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007a46:	2300      	movs	r3, #0
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3710      	adds	r7, #16
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}

08007a50 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b084      	sub	sp, #16
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d101      	bne.n	8007a68 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007a64:	2302      	movs	r3, #2
 8007a66:	e02d      	b.n	8007ac4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2224      	movs	r2, #36	@ 0x24
 8007a74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	681a      	ldr	r2, [r3, #0]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f022 0201 	bic.w	r2, r2, #1
 8007a8e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	689b      	ldr	r3, [r3, #8]
 8007a96:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	683a      	ldr	r2, [r7, #0]
 8007aa0:	430a      	orrs	r2, r1
 8007aa2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f000 f811 	bl	8007acc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	68fa      	ldr	r2, [r7, #12]
 8007ab0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2220      	movs	r2, #32
 8007ab6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2200      	movs	r2, #0
 8007abe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007ac2:	2300      	movs	r3, #0
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3710      	adds	r7, #16
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}

08007acc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b085      	sub	sp, #20
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d108      	bne.n	8007aee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2201      	movs	r2, #1
 8007ae0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007aec:	e031      	b.n	8007b52 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007aee:	2310      	movs	r3, #16
 8007af0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007af2:	2310      	movs	r3, #16
 8007af4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	689b      	ldr	r3, [r3, #8]
 8007afc:	0e5b      	lsrs	r3, r3, #25
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	f003 0307 	and.w	r3, r3, #7
 8007b04:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	689b      	ldr	r3, [r3, #8]
 8007b0c:	0f5b      	lsrs	r3, r3, #29
 8007b0e:	b2db      	uxtb	r3, r3
 8007b10:	f003 0307 	and.w	r3, r3, #7
 8007b14:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007b16:	7bbb      	ldrb	r3, [r7, #14]
 8007b18:	7b3a      	ldrb	r2, [r7, #12]
 8007b1a:	4911      	ldr	r1, [pc, #68]	@ (8007b60 <UARTEx_SetNbDataToProcess+0x94>)
 8007b1c:	5c8a      	ldrb	r2, [r1, r2]
 8007b1e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007b22:	7b3a      	ldrb	r2, [r7, #12]
 8007b24:	490f      	ldr	r1, [pc, #60]	@ (8007b64 <UARTEx_SetNbDataToProcess+0x98>)
 8007b26:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007b28:	fb93 f3f2 	sdiv	r3, r3, r2
 8007b2c:	b29a      	uxth	r2, r3
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007b34:	7bfb      	ldrb	r3, [r7, #15]
 8007b36:	7b7a      	ldrb	r2, [r7, #13]
 8007b38:	4909      	ldr	r1, [pc, #36]	@ (8007b60 <UARTEx_SetNbDataToProcess+0x94>)
 8007b3a:	5c8a      	ldrb	r2, [r1, r2]
 8007b3c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007b40:	7b7a      	ldrb	r2, [r7, #13]
 8007b42:	4908      	ldr	r1, [pc, #32]	@ (8007b64 <UARTEx_SetNbDataToProcess+0x98>)
 8007b44:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007b46:	fb93 f3f2 	sdiv	r3, r3, r2
 8007b4a:	b29a      	uxth	r2, r3
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007b52:	bf00      	nop
 8007b54:	3714      	adds	r7, #20
 8007b56:	46bd      	mov	sp, r7
 8007b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5c:	4770      	bx	lr
 8007b5e:	bf00      	nop
 8007b60:	08008b50 	.word	0x08008b50
 8007b64:	08008b58 	.word	0x08008b58

08007b68 <HAL_WWDG_IRQHandler>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
void HAL_WWDG_IRQHandler(WWDG_HandleTypeDef *hwwdg)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b082      	sub	sp, #8
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  /* Check if Early Wakeup Interrupt is enable */
  if (__HAL_WWDG_GET_IT_SOURCE(hwwdg, WWDG_IT_EWI) != RESET)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	685b      	ldr	r3, [r3, #4]
 8007b76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b7e:	d10e      	bne.n	8007b9e <HAL_WWDG_IRQHandler+0x36>
  {
    /* Check if WWDG Early Wakeup Interrupt occurred */
    if (__HAL_WWDG_GET_FLAG(hwwdg, WWDG_FLAG_EWIF) != RESET)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	689b      	ldr	r3, [r3, #8]
 8007b86:	f003 0301 	and.w	r3, r3, #1
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	d107      	bne.n	8007b9e <HAL_WWDG_IRQHandler+0x36>
    {
      /* Clear the WWDG Early Wakeup flag */
      __HAL_WWDG_CLEAR_FLAG(hwwdg, WWDG_FLAG_EWIF);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f06f 0201 	mvn.w	r2, #1
 8007b96:	609a      	str	r2, [r3, #8]
#if (USE_HAL_WWDG_REGISTER_CALLBACKS == 1)
      /* Early Wakeup registered callback */
      hwwdg->EwiCallback(hwwdg);
#else
      /* Early Wakeup callback */
      HAL_WWDG_EarlyWakeupCallback(hwwdg);
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f000 f804 	bl	8007ba6 <HAL_WWDG_EarlyWakeupCallback>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */
    }
  }
}
 8007b9e:	bf00      	nop
 8007ba0:	3708      	adds	r7, #8
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}

08007ba6 <HAL_WWDG_EarlyWakeupCallback>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
__weak void HAL_WWDG_EarlyWakeupCallback(WWDG_HandleTypeDef *hwwdg)
{
 8007ba6:	b480      	push	{r7}
 8007ba8:	b083      	sub	sp, #12
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	6078      	str	r0, [r7, #4]
  UNUSED(hwwdg);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_WWDG_EarlyWakeupCallback could be implemented in the user file
   */
}
 8007bae:	bf00      	nop
 8007bb0:	370c      	adds	r7, #12
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb8:	4770      	bx	lr
	...

08007bbc <std>:
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	b510      	push	{r4, lr}
 8007bc0:	4604      	mov	r4, r0
 8007bc2:	e9c0 3300 	strd	r3, r3, [r0]
 8007bc6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007bca:	6083      	str	r3, [r0, #8]
 8007bcc:	8181      	strh	r1, [r0, #12]
 8007bce:	6643      	str	r3, [r0, #100]	@ 0x64
 8007bd0:	81c2      	strh	r2, [r0, #14]
 8007bd2:	6183      	str	r3, [r0, #24]
 8007bd4:	4619      	mov	r1, r3
 8007bd6:	2208      	movs	r2, #8
 8007bd8:	305c      	adds	r0, #92	@ 0x5c
 8007bda:	f000 f9f9 	bl	8007fd0 <memset>
 8007bde:	4b0d      	ldr	r3, [pc, #52]	@ (8007c14 <std+0x58>)
 8007be0:	6263      	str	r3, [r4, #36]	@ 0x24
 8007be2:	4b0d      	ldr	r3, [pc, #52]	@ (8007c18 <std+0x5c>)
 8007be4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007be6:	4b0d      	ldr	r3, [pc, #52]	@ (8007c1c <std+0x60>)
 8007be8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007bea:	4b0d      	ldr	r3, [pc, #52]	@ (8007c20 <std+0x64>)
 8007bec:	6323      	str	r3, [r4, #48]	@ 0x30
 8007bee:	4b0d      	ldr	r3, [pc, #52]	@ (8007c24 <std+0x68>)
 8007bf0:	6224      	str	r4, [r4, #32]
 8007bf2:	429c      	cmp	r4, r3
 8007bf4:	d006      	beq.n	8007c04 <std+0x48>
 8007bf6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007bfa:	4294      	cmp	r4, r2
 8007bfc:	d002      	beq.n	8007c04 <std+0x48>
 8007bfe:	33d0      	adds	r3, #208	@ 0xd0
 8007c00:	429c      	cmp	r4, r3
 8007c02:	d105      	bne.n	8007c10 <std+0x54>
 8007c04:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007c08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c0c:	f000 ba58 	b.w	80080c0 <__retarget_lock_init_recursive>
 8007c10:	bd10      	pop	{r4, pc}
 8007c12:	bf00      	nop
 8007c14:	08007e21 	.word	0x08007e21
 8007c18:	08007e43 	.word	0x08007e43
 8007c1c:	08007e7b 	.word	0x08007e7b
 8007c20:	08007e9f 	.word	0x08007e9f
 8007c24:	24000270 	.word	0x24000270

08007c28 <stdio_exit_handler>:
 8007c28:	4a02      	ldr	r2, [pc, #8]	@ (8007c34 <stdio_exit_handler+0xc>)
 8007c2a:	4903      	ldr	r1, [pc, #12]	@ (8007c38 <stdio_exit_handler+0x10>)
 8007c2c:	4803      	ldr	r0, [pc, #12]	@ (8007c3c <stdio_exit_handler+0x14>)
 8007c2e:	f000 b869 	b.w	8007d04 <_fwalk_sglue>
 8007c32:	bf00      	nop
 8007c34:	24000014 	.word	0x24000014
 8007c38:	0800895d 	.word	0x0800895d
 8007c3c:	24000024 	.word	0x24000024

08007c40 <cleanup_stdio>:
 8007c40:	6841      	ldr	r1, [r0, #4]
 8007c42:	4b0c      	ldr	r3, [pc, #48]	@ (8007c74 <cleanup_stdio+0x34>)
 8007c44:	4299      	cmp	r1, r3
 8007c46:	b510      	push	{r4, lr}
 8007c48:	4604      	mov	r4, r0
 8007c4a:	d001      	beq.n	8007c50 <cleanup_stdio+0x10>
 8007c4c:	f000 fe86 	bl	800895c <_fflush_r>
 8007c50:	68a1      	ldr	r1, [r4, #8]
 8007c52:	4b09      	ldr	r3, [pc, #36]	@ (8007c78 <cleanup_stdio+0x38>)
 8007c54:	4299      	cmp	r1, r3
 8007c56:	d002      	beq.n	8007c5e <cleanup_stdio+0x1e>
 8007c58:	4620      	mov	r0, r4
 8007c5a:	f000 fe7f 	bl	800895c <_fflush_r>
 8007c5e:	68e1      	ldr	r1, [r4, #12]
 8007c60:	4b06      	ldr	r3, [pc, #24]	@ (8007c7c <cleanup_stdio+0x3c>)
 8007c62:	4299      	cmp	r1, r3
 8007c64:	d004      	beq.n	8007c70 <cleanup_stdio+0x30>
 8007c66:	4620      	mov	r0, r4
 8007c68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c6c:	f000 be76 	b.w	800895c <_fflush_r>
 8007c70:	bd10      	pop	{r4, pc}
 8007c72:	bf00      	nop
 8007c74:	24000270 	.word	0x24000270
 8007c78:	240002d8 	.word	0x240002d8
 8007c7c:	24000340 	.word	0x24000340

08007c80 <global_stdio_init.part.0>:
 8007c80:	b510      	push	{r4, lr}
 8007c82:	4b0b      	ldr	r3, [pc, #44]	@ (8007cb0 <global_stdio_init.part.0+0x30>)
 8007c84:	4c0b      	ldr	r4, [pc, #44]	@ (8007cb4 <global_stdio_init.part.0+0x34>)
 8007c86:	4a0c      	ldr	r2, [pc, #48]	@ (8007cb8 <global_stdio_init.part.0+0x38>)
 8007c88:	601a      	str	r2, [r3, #0]
 8007c8a:	4620      	mov	r0, r4
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	2104      	movs	r1, #4
 8007c90:	f7ff ff94 	bl	8007bbc <std>
 8007c94:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007c98:	2201      	movs	r2, #1
 8007c9a:	2109      	movs	r1, #9
 8007c9c:	f7ff ff8e 	bl	8007bbc <std>
 8007ca0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007ca4:	2202      	movs	r2, #2
 8007ca6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007caa:	2112      	movs	r1, #18
 8007cac:	f7ff bf86 	b.w	8007bbc <std>
 8007cb0:	240003a8 	.word	0x240003a8
 8007cb4:	24000270 	.word	0x24000270
 8007cb8:	08007c29 	.word	0x08007c29

08007cbc <__sfp_lock_acquire>:
 8007cbc:	4801      	ldr	r0, [pc, #4]	@ (8007cc4 <__sfp_lock_acquire+0x8>)
 8007cbe:	f000 ba00 	b.w	80080c2 <__retarget_lock_acquire_recursive>
 8007cc2:	bf00      	nop
 8007cc4:	240003b1 	.word	0x240003b1

08007cc8 <__sfp_lock_release>:
 8007cc8:	4801      	ldr	r0, [pc, #4]	@ (8007cd0 <__sfp_lock_release+0x8>)
 8007cca:	f000 b9fb 	b.w	80080c4 <__retarget_lock_release_recursive>
 8007cce:	bf00      	nop
 8007cd0:	240003b1 	.word	0x240003b1

08007cd4 <__sinit>:
 8007cd4:	b510      	push	{r4, lr}
 8007cd6:	4604      	mov	r4, r0
 8007cd8:	f7ff fff0 	bl	8007cbc <__sfp_lock_acquire>
 8007cdc:	6a23      	ldr	r3, [r4, #32]
 8007cde:	b11b      	cbz	r3, 8007ce8 <__sinit+0x14>
 8007ce0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ce4:	f7ff bff0 	b.w	8007cc8 <__sfp_lock_release>
 8007ce8:	4b04      	ldr	r3, [pc, #16]	@ (8007cfc <__sinit+0x28>)
 8007cea:	6223      	str	r3, [r4, #32]
 8007cec:	4b04      	ldr	r3, [pc, #16]	@ (8007d00 <__sinit+0x2c>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d1f5      	bne.n	8007ce0 <__sinit+0xc>
 8007cf4:	f7ff ffc4 	bl	8007c80 <global_stdio_init.part.0>
 8007cf8:	e7f2      	b.n	8007ce0 <__sinit+0xc>
 8007cfa:	bf00      	nop
 8007cfc:	08007c41 	.word	0x08007c41
 8007d00:	240003a8 	.word	0x240003a8

08007d04 <_fwalk_sglue>:
 8007d04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d08:	4607      	mov	r7, r0
 8007d0a:	4688      	mov	r8, r1
 8007d0c:	4614      	mov	r4, r2
 8007d0e:	2600      	movs	r6, #0
 8007d10:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d14:	f1b9 0901 	subs.w	r9, r9, #1
 8007d18:	d505      	bpl.n	8007d26 <_fwalk_sglue+0x22>
 8007d1a:	6824      	ldr	r4, [r4, #0]
 8007d1c:	2c00      	cmp	r4, #0
 8007d1e:	d1f7      	bne.n	8007d10 <_fwalk_sglue+0xc>
 8007d20:	4630      	mov	r0, r6
 8007d22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d26:	89ab      	ldrh	r3, [r5, #12]
 8007d28:	2b01      	cmp	r3, #1
 8007d2a:	d907      	bls.n	8007d3c <_fwalk_sglue+0x38>
 8007d2c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007d30:	3301      	adds	r3, #1
 8007d32:	d003      	beq.n	8007d3c <_fwalk_sglue+0x38>
 8007d34:	4629      	mov	r1, r5
 8007d36:	4638      	mov	r0, r7
 8007d38:	47c0      	blx	r8
 8007d3a:	4306      	orrs	r6, r0
 8007d3c:	3568      	adds	r5, #104	@ 0x68
 8007d3e:	e7e9      	b.n	8007d14 <_fwalk_sglue+0x10>

08007d40 <iprintf>:
 8007d40:	b40f      	push	{r0, r1, r2, r3}
 8007d42:	b507      	push	{r0, r1, r2, lr}
 8007d44:	4906      	ldr	r1, [pc, #24]	@ (8007d60 <iprintf+0x20>)
 8007d46:	ab04      	add	r3, sp, #16
 8007d48:	6808      	ldr	r0, [r1, #0]
 8007d4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d4e:	6881      	ldr	r1, [r0, #8]
 8007d50:	9301      	str	r3, [sp, #4]
 8007d52:	f000 fadb 	bl	800830c <_vfiprintf_r>
 8007d56:	b003      	add	sp, #12
 8007d58:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d5c:	b004      	add	sp, #16
 8007d5e:	4770      	bx	lr
 8007d60:	24000020 	.word	0x24000020

08007d64 <_puts_r>:
 8007d64:	6a03      	ldr	r3, [r0, #32]
 8007d66:	b570      	push	{r4, r5, r6, lr}
 8007d68:	6884      	ldr	r4, [r0, #8]
 8007d6a:	4605      	mov	r5, r0
 8007d6c:	460e      	mov	r6, r1
 8007d6e:	b90b      	cbnz	r3, 8007d74 <_puts_r+0x10>
 8007d70:	f7ff ffb0 	bl	8007cd4 <__sinit>
 8007d74:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007d76:	07db      	lsls	r3, r3, #31
 8007d78:	d405      	bmi.n	8007d86 <_puts_r+0x22>
 8007d7a:	89a3      	ldrh	r3, [r4, #12]
 8007d7c:	0598      	lsls	r0, r3, #22
 8007d7e:	d402      	bmi.n	8007d86 <_puts_r+0x22>
 8007d80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007d82:	f000 f99e 	bl	80080c2 <__retarget_lock_acquire_recursive>
 8007d86:	89a3      	ldrh	r3, [r4, #12]
 8007d88:	0719      	lsls	r1, r3, #28
 8007d8a:	d502      	bpl.n	8007d92 <_puts_r+0x2e>
 8007d8c:	6923      	ldr	r3, [r4, #16]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d135      	bne.n	8007dfe <_puts_r+0x9a>
 8007d92:	4621      	mov	r1, r4
 8007d94:	4628      	mov	r0, r5
 8007d96:	f000 f8c5 	bl	8007f24 <__swsetup_r>
 8007d9a:	b380      	cbz	r0, 8007dfe <_puts_r+0x9a>
 8007d9c:	f04f 35ff 	mov.w	r5, #4294967295
 8007da0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007da2:	07da      	lsls	r2, r3, #31
 8007da4:	d405      	bmi.n	8007db2 <_puts_r+0x4e>
 8007da6:	89a3      	ldrh	r3, [r4, #12]
 8007da8:	059b      	lsls	r3, r3, #22
 8007daa:	d402      	bmi.n	8007db2 <_puts_r+0x4e>
 8007dac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007dae:	f000 f989 	bl	80080c4 <__retarget_lock_release_recursive>
 8007db2:	4628      	mov	r0, r5
 8007db4:	bd70      	pop	{r4, r5, r6, pc}
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	da04      	bge.n	8007dc4 <_puts_r+0x60>
 8007dba:	69a2      	ldr	r2, [r4, #24]
 8007dbc:	429a      	cmp	r2, r3
 8007dbe:	dc17      	bgt.n	8007df0 <_puts_r+0x8c>
 8007dc0:	290a      	cmp	r1, #10
 8007dc2:	d015      	beq.n	8007df0 <_puts_r+0x8c>
 8007dc4:	6823      	ldr	r3, [r4, #0]
 8007dc6:	1c5a      	adds	r2, r3, #1
 8007dc8:	6022      	str	r2, [r4, #0]
 8007dca:	7019      	strb	r1, [r3, #0]
 8007dcc:	68a3      	ldr	r3, [r4, #8]
 8007dce:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007dd2:	3b01      	subs	r3, #1
 8007dd4:	60a3      	str	r3, [r4, #8]
 8007dd6:	2900      	cmp	r1, #0
 8007dd8:	d1ed      	bne.n	8007db6 <_puts_r+0x52>
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	da11      	bge.n	8007e02 <_puts_r+0x9e>
 8007dde:	4622      	mov	r2, r4
 8007de0:	210a      	movs	r1, #10
 8007de2:	4628      	mov	r0, r5
 8007de4:	f000 f85f 	bl	8007ea6 <__swbuf_r>
 8007de8:	3001      	adds	r0, #1
 8007dea:	d0d7      	beq.n	8007d9c <_puts_r+0x38>
 8007dec:	250a      	movs	r5, #10
 8007dee:	e7d7      	b.n	8007da0 <_puts_r+0x3c>
 8007df0:	4622      	mov	r2, r4
 8007df2:	4628      	mov	r0, r5
 8007df4:	f000 f857 	bl	8007ea6 <__swbuf_r>
 8007df8:	3001      	adds	r0, #1
 8007dfa:	d1e7      	bne.n	8007dcc <_puts_r+0x68>
 8007dfc:	e7ce      	b.n	8007d9c <_puts_r+0x38>
 8007dfe:	3e01      	subs	r6, #1
 8007e00:	e7e4      	b.n	8007dcc <_puts_r+0x68>
 8007e02:	6823      	ldr	r3, [r4, #0]
 8007e04:	1c5a      	adds	r2, r3, #1
 8007e06:	6022      	str	r2, [r4, #0]
 8007e08:	220a      	movs	r2, #10
 8007e0a:	701a      	strb	r2, [r3, #0]
 8007e0c:	e7ee      	b.n	8007dec <_puts_r+0x88>
	...

08007e10 <puts>:
 8007e10:	4b02      	ldr	r3, [pc, #8]	@ (8007e1c <puts+0xc>)
 8007e12:	4601      	mov	r1, r0
 8007e14:	6818      	ldr	r0, [r3, #0]
 8007e16:	f7ff bfa5 	b.w	8007d64 <_puts_r>
 8007e1a:	bf00      	nop
 8007e1c:	24000020 	.word	0x24000020

08007e20 <__sread>:
 8007e20:	b510      	push	{r4, lr}
 8007e22:	460c      	mov	r4, r1
 8007e24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e28:	f000 f8fc 	bl	8008024 <_read_r>
 8007e2c:	2800      	cmp	r0, #0
 8007e2e:	bfab      	itete	ge
 8007e30:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007e32:	89a3      	ldrhlt	r3, [r4, #12]
 8007e34:	181b      	addge	r3, r3, r0
 8007e36:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007e3a:	bfac      	ite	ge
 8007e3c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007e3e:	81a3      	strhlt	r3, [r4, #12]
 8007e40:	bd10      	pop	{r4, pc}

08007e42 <__swrite>:
 8007e42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e46:	461f      	mov	r7, r3
 8007e48:	898b      	ldrh	r3, [r1, #12]
 8007e4a:	05db      	lsls	r3, r3, #23
 8007e4c:	4605      	mov	r5, r0
 8007e4e:	460c      	mov	r4, r1
 8007e50:	4616      	mov	r6, r2
 8007e52:	d505      	bpl.n	8007e60 <__swrite+0x1e>
 8007e54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e58:	2302      	movs	r3, #2
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	f000 f8d0 	bl	8008000 <_lseek_r>
 8007e60:	89a3      	ldrh	r3, [r4, #12]
 8007e62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e66:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007e6a:	81a3      	strh	r3, [r4, #12]
 8007e6c:	4632      	mov	r2, r6
 8007e6e:	463b      	mov	r3, r7
 8007e70:	4628      	mov	r0, r5
 8007e72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e76:	f000 b8e7 	b.w	8008048 <_write_r>

08007e7a <__sseek>:
 8007e7a:	b510      	push	{r4, lr}
 8007e7c:	460c      	mov	r4, r1
 8007e7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e82:	f000 f8bd 	bl	8008000 <_lseek_r>
 8007e86:	1c43      	adds	r3, r0, #1
 8007e88:	89a3      	ldrh	r3, [r4, #12]
 8007e8a:	bf15      	itete	ne
 8007e8c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007e8e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007e92:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007e96:	81a3      	strheq	r3, [r4, #12]
 8007e98:	bf18      	it	ne
 8007e9a:	81a3      	strhne	r3, [r4, #12]
 8007e9c:	bd10      	pop	{r4, pc}

08007e9e <__sclose>:
 8007e9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ea2:	f000 b89d 	b.w	8007fe0 <_close_r>

08007ea6 <__swbuf_r>:
 8007ea6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ea8:	460e      	mov	r6, r1
 8007eaa:	4614      	mov	r4, r2
 8007eac:	4605      	mov	r5, r0
 8007eae:	b118      	cbz	r0, 8007eb8 <__swbuf_r+0x12>
 8007eb0:	6a03      	ldr	r3, [r0, #32]
 8007eb2:	b90b      	cbnz	r3, 8007eb8 <__swbuf_r+0x12>
 8007eb4:	f7ff ff0e 	bl	8007cd4 <__sinit>
 8007eb8:	69a3      	ldr	r3, [r4, #24]
 8007eba:	60a3      	str	r3, [r4, #8]
 8007ebc:	89a3      	ldrh	r3, [r4, #12]
 8007ebe:	071a      	lsls	r2, r3, #28
 8007ec0:	d501      	bpl.n	8007ec6 <__swbuf_r+0x20>
 8007ec2:	6923      	ldr	r3, [r4, #16]
 8007ec4:	b943      	cbnz	r3, 8007ed8 <__swbuf_r+0x32>
 8007ec6:	4621      	mov	r1, r4
 8007ec8:	4628      	mov	r0, r5
 8007eca:	f000 f82b 	bl	8007f24 <__swsetup_r>
 8007ece:	b118      	cbz	r0, 8007ed8 <__swbuf_r+0x32>
 8007ed0:	f04f 37ff 	mov.w	r7, #4294967295
 8007ed4:	4638      	mov	r0, r7
 8007ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ed8:	6823      	ldr	r3, [r4, #0]
 8007eda:	6922      	ldr	r2, [r4, #16]
 8007edc:	1a98      	subs	r0, r3, r2
 8007ede:	6963      	ldr	r3, [r4, #20]
 8007ee0:	b2f6      	uxtb	r6, r6
 8007ee2:	4283      	cmp	r3, r0
 8007ee4:	4637      	mov	r7, r6
 8007ee6:	dc05      	bgt.n	8007ef4 <__swbuf_r+0x4e>
 8007ee8:	4621      	mov	r1, r4
 8007eea:	4628      	mov	r0, r5
 8007eec:	f000 fd36 	bl	800895c <_fflush_r>
 8007ef0:	2800      	cmp	r0, #0
 8007ef2:	d1ed      	bne.n	8007ed0 <__swbuf_r+0x2a>
 8007ef4:	68a3      	ldr	r3, [r4, #8]
 8007ef6:	3b01      	subs	r3, #1
 8007ef8:	60a3      	str	r3, [r4, #8]
 8007efa:	6823      	ldr	r3, [r4, #0]
 8007efc:	1c5a      	adds	r2, r3, #1
 8007efe:	6022      	str	r2, [r4, #0]
 8007f00:	701e      	strb	r6, [r3, #0]
 8007f02:	6962      	ldr	r2, [r4, #20]
 8007f04:	1c43      	adds	r3, r0, #1
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d004      	beq.n	8007f14 <__swbuf_r+0x6e>
 8007f0a:	89a3      	ldrh	r3, [r4, #12]
 8007f0c:	07db      	lsls	r3, r3, #31
 8007f0e:	d5e1      	bpl.n	8007ed4 <__swbuf_r+0x2e>
 8007f10:	2e0a      	cmp	r6, #10
 8007f12:	d1df      	bne.n	8007ed4 <__swbuf_r+0x2e>
 8007f14:	4621      	mov	r1, r4
 8007f16:	4628      	mov	r0, r5
 8007f18:	f000 fd20 	bl	800895c <_fflush_r>
 8007f1c:	2800      	cmp	r0, #0
 8007f1e:	d0d9      	beq.n	8007ed4 <__swbuf_r+0x2e>
 8007f20:	e7d6      	b.n	8007ed0 <__swbuf_r+0x2a>
	...

08007f24 <__swsetup_r>:
 8007f24:	b538      	push	{r3, r4, r5, lr}
 8007f26:	4b29      	ldr	r3, [pc, #164]	@ (8007fcc <__swsetup_r+0xa8>)
 8007f28:	4605      	mov	r5, r0
 8007f2a:	6818      	ldr	r0, [r3, #0]
 8007f2c:	460c      	mov	r4, r1
 8007f2e:	b118      	cbz	r0, 8007f38 <__swsetup_r+0x14>
 8007f30:	6a03      	ldr	r3, [r0, #32]
 8007f32:	b90b      	cbnz	r3, 8007f38 <__swsetup_r+0x14>
 8007f34:	f7ff fece 	bl	8007cd4 <__sinit>
 8007f38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f3c:	0719      	lsls	r1, r3, #28
 8007f3e:	d422      	bmi.n	8007f86 <__swsetup_r+0x62>
 8007f40:	06da      	lsls	r2, r3, #27
 8007f42:	d407      	bmi.n	8007f54 <__swsetup_r+0x30>
 8007f44:	2209      	movs	r2, #9
 8007f46:	602a      	str	r2, [r5, #0]
 8007f48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f4c:	81a3      	strh	r3, [r4, #12]
 8007f4e:	f04f 30ff 	mov.w	r0, #4294967295
 8007f52:	e033      	b.n	8007fbc <__swsetup_r+0x98>
 8007f54:	0758      	lsls	r0, r3, #29
 8007f56:	d512      	bpl.n	8007f7e <__swsetup_r+0x5a>
 8007f58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007f5a:	b141      	cbz	r1, 8007f6e <__swsetup_r+0x4a>
 8007f5c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007f60:	4299      	cmp	r1, r3
 8007f62:	d002      	beq.n	8007f6a <__swsetup_r+0x46>
 8007f64:	4628      	mov	r0, r5
 8007f66:	f000 f8af 	bl	80080c8 <_free_r>
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	6363      	str	r3, [r4, #52]	@ 0x34
 8007f6e:	89a3      	ldrh	r3, [r4, #12]
 8007f70:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007f74:	81a3      	strh	r3, [r4, #12]
 8007f76:	2300      	movs	r3, #0
 8007f78:	6063      	str	r3, [r4, #4]
 8007f7a:	6923      	ldr	r3, [r4, #16]
 8007f7c:	6023      	str	r3, [r4, #0]
 8007f7e:	89a3      	ldrh	r3, [r4, #12]
 8007f80:	f043 0308 	orr.w	r3, r3, #8
 8007f84:	81a3      	strh	r3, [r4, #12]
 8007f86:	6923      	ldr	r3, [r4, #16]
 8007f88:	b94b      	cbnz	r3, 8007f9e <__swsetup_r+0x7a>
 8007f8a:	89a3      	ldrh	r3, [r4, #12]
 8007f8c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007f90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f94:	d003      	beq.n	8007f9e <__swsetup_r+0x7a>
 8007f96:	4621      	mov	r1, r4
 8007f98:	4628      	mov	r0, r5
 8007f9a:	f000 fd2d 	bl	80089f8 <__smakebuf_r>
 8007f9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fa2:	f013 0201 	ands.w	r2, r3, #1
 8007fa6:	d00a      	beq.n	8007fbe <__swsetup_r+0x9a>
 8007fa8:	2200      	movs	r2, #0
 8007faa:	60a2      	str	r2, [r4, #8]
 8007fac:	6962      	ldr	r2, [r4, #20]
 8007fae:	4252      	negs	r2, r2
 8007fb0:	61a2      	str	r2, [r4, #24]
 8007fb2:	6922      	ldr	r2, [r4, #16]
 8007fb4:	b942      	cbnz	r2, 8007fc8 <__swsetup_r+0xa4>
 8007fb6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007fba:	d1c5      	bne.n	8007f48 <__swsetup_r+0x24>
 8007fbc:	bd38      	pop	{r3, r4, r5, pc}
 8007fbe:	0799      	lsls	r1, r3, #30
 8007fc0:	bf58      	it	pl
 8007fc2:	6962      	ldrpl	r2, [r4, #20]
 8007fc4:	60a2      	str	r2, [r4, #8]
 8007fc6:	e7f4      	b.n	8007fb2 <__swsetup_r+0x8e>
 8007fc8:	2000      	movs	r0, #0
 8007fca:	e7f7      	b.n	8007fbc <__swsetup_r+0x98>
 8007fcc:	24000020 	.word	0x24000020

08007fd0 <memset>:
 8007fd0:	4402      	add	r2, r0
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d100      	bne.n	8007fda <memset+0xa>
 8007fd8:	4770      	bx	lr
 8007fda:	f803 1b01 	strb.w	r1, [r3], #1
 8007fde:	e7f9      	b.n	8007fd4 <memset+0x4>

08007fe0 <_close_r>:
 8007fe0:	b538      	push	{r3, r4, r5, lr}
 8007fe2:	4d06      	ldr	r5, [pc, #24]	@ (8007ffc <_close_r+0x1c>)
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	4604      	mov	r4, r0
 8007fe8:	4608      	mov	r0, r1
 8007fea:	602b      	str	r3, [r5, #0]
 8007fec:	f7f8 fe57 	bl	8000c9e <_close>
 8007ff0:	1c43      	adds	r3, r0, #1
 8007ff2:	d102      	bne.n	8007ffa <_close_r+0x1a>
 8007ff4:	682b      	ldr	r3, [r5, #0]
 8007ff6:	b103      	cbz	r3, 8007ffa <_close_r+0x1a>
 8007ff8:	6023      	str	r3, [r4, #0]
 8007ffa:	bd38      	pop	{r3, r4, r5, pc}
 8007ffc:	240003ac 	.word	0x240003ac

08008000 <_lseek_r>:
 8008000:	b538      	push	{r3, r4, r5, lr}
 8008002:	4d07      	ldr	r5, [pc, #28]	@ (8008020 <_lseek_r+0x20>)
 8008004:	4604      	mov	r4, r0
 8008006:	4608      	mov	r0, r1
 8008008:	4611      	mov	r1, r2
 800800a:	2200      	movs	r2, #0
 800800c:	602a      	str	r2, [r5, #0]
 800800e:	461a      	mov	r2, r3
 8008010:	f7f8 fe6c 	bl	8000cec <_lseek>
 8008014:	1c43      	adds	r3, r0, #1
 8008016:	d102      	bne.n	800801e <_lseek_r+0x1e>
 8008018:	682b      	ldr	r3, [r5, #0]
 800801a:	b103      	cbz	r3, 800801e <_lseek_r+0x1e>
 800801c:	6023      	str	r3, [r4, #0]
 800801e:	bd38      	pop	{r3, r4, r5, pc}
 8008020:	240003ac 	.word	0x240003ac

08008024 <_read_r>:
 8008024:	b538      	push	{r3, r4, r5, lr}
 8008026:	4d07      	ldr	r5, [pc, #28]	@ (8008044 <_read_r+0x20>)
 8008028:	4604      	mov	r4, r0
 800802a:	4608      	mov	r0, r1
 800802c:	4611      	mov	r1, r2
 800802e:	2200      	movs	r2, #0
 8008030:	602a      	str	r2, [r5, #0]
 8008032:	461a      	mov	r2, r3
 8008034:	f7f8 fdfa 	bl	8000c2c <_read>
 8008038:	1c43      	adds	r3, r0, #1
 800803a:	d102      	bne.n	8008042 <_read_r+0x1e>
 800803c:	682b      	ldr	r3, [r5, #0]
 800803e:	b103      	cbz	r3, 8008042 <_read_r+0x1e>
 8008040:	6023      	str	r3, [r4, #0]
 8008042:	bd38      	pop	{r3, r4, r5, pc}
 8008044:	240003ac 	.word	0x240003ac

08008048 <_write_r>:
 8008048:	b538      	push	{r3, r4, r5, lr}
 800804a:	4d07      	ldr	r5, [pc, #28]	@ (8008068 <_write_r+0x20>)
 800804c:	4604      	mov	r4, r0
 800804e:	4608      	mov	r0, r1
 8008050:	4611      	mov	r1, r2
 8008052:	2200      	movs	r2, #0
 8008054:	602a      	str	r2, [r5, #0]
 8008056:	461a      	mov	r2, r3
 8008058:	f7f8 fe05 	bl	8000c66 <_write>
 800805c:	1c43      	adds	r3, r0, #1
 800805e:	d102      	bne.n	8008066 <_write_r+0x1e>
 8008060:	682b      	ldr	r3, [r5, #0]
 8008062:	b103      	cbz	r3, 8008066 <_write_r+0x1e>
 8008064:	6023      	str	r3, [r4, #0]
 8008066:	bd38      	pop	{r3, r4, r5, pc}
 8008068:	240003ac 	.word	0x240003ac

0800806c <__errno>:
 800806c:	4b01      	ldr	r3, [pc, #4]	@ (8008074 <__errno+0x8>)
 800806e:	6818      	ldr	r0, [r3, #0]
 8008070:	4770      	bx	lr
 8008072:	bf00      	nop
 8008074:	24000020 	.word	0x24000020

08008078 <__libc_init_array>:
 8008078:	b570      	push	{r4, r5, r6, lr}
 800807a:	4d0d      	ldr	r5, [pc, #52]	@ (80080b0 <__libc_init_array+0x38>)
 800807c:	4c0d      	ldr	r4, [pc, #52]	@ (80080b4 <__libc_init_array+0x3c>)
 800807e:	1b64      	subs	r4, r4, r5
 8008080:	10a4      	asrs	r4, r4, #2
 8008082:	2600      	movs	r6, #0
 8008084:	42a6      	cmp	r6, r4
 8008086:	d109      	bne.n	800809c <__libc_init_array+0x24>
 8008088:	4d0b      	ldr	r5, [pc, #44]	@ (80080b8 <__libc_init_array+0x40>)
 800808a:	4c0c      	ldr	r4, [pc, #48]	@ (80080bc <__libc_init_array+0x44>)
 800808c:	f000 fd22 	bl	8008ad4 <_init>
 8008090:	1b64      	subs	r4, r4, r5
 8008092:	10a4      	asrs	r4, r4, #2
 8008094:	2600      	movs	r6, #0
 8008096:	42a6      	cmp	r6, r4
 8008098:	d105      	bne.n	80080a6 <__libc_init_array+0x2e>
 800809a:	bd70      	pop	{r4, r5, r6, pc}
 800809c:	f855 3b04 	ldr.w	r3, [r5], #4
 80080a0:	4798      	blx	r3
 80080a2:	3601      	adds	r6, #1
 80080a4:	e7ee      	b.n	8008084 <__libc_init_array+0xc>
 80080a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80080aa:	4798      	blx	r3
 80080ac:	3601      	adds	r6, #1
 80080ae:	e7f2      	b.n	8008096 <__libc_init_array+0x1e>
 80080b0:	08008b9c 	.word	0x08008b9c
 80080b4:	08008b9c 	.word	0x08008b9c
 80080b8:	08008b9c 	.word	0x08008b9c
 80080bc:	08008ba0 	.word	0x08008ba0

080080c0 <__retarget_lock_init_recursive>:
 80080c0:	4770      	bx	lr

080080c2 <__retarget_lock_acquire_recursive>:
 80080c2:	4770      	bx	lr

080080c4 <__retarget_lock_release_recursive>:
 80080c4:	4770      	bx	lr
	...

080080c8 <_free_r>:
 80080c8:	b538      	push	{r3, r4, r5, lr}
 80080ca:	4605      	mov	r5, r0
 80080cc:	2900      	cmp	r1, #0
 80080ce:	d041      	beq.n	8008154 <_free_r+0x8c>
 80080d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080d4:	1f0c      	subs	r4, r1, #4
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	bfb8      	it	lt
 80080da:	18e4      	addlt	r4, r4, r3
 80080dc:	f000 f8e0 	bl	80082a0 <__malloc_lock>
 80080e0:	4a1d      	ldr	r2, [pc, #116]	@ (8008158 <_free_r+0x90>)
 80080e2:	6813      	ldr	r3, [r2, #0]
 80080e4:	b933      	cbnz	r3, 80080f4 <_free_r+0x2c>
 80080e6:	6063      	str	r3, [r4, #4]
 80080e8:	6014      	str	r4, [r2, #0]
 80080ea:	4628      	mov	r0, r5
 80080ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80080f0:	f000 b8dc 	b.w	80082ac <__malloc_unlock>
 80080f4:	42a3      	cmp	r3, r4
 80080f6:	d908      	bls.n	800810a <_free_r+0x42>
 80080f8:	6820      	ldr	r0, [r4, #0]
 80080fa:	1821      	adds	r1, r4, r0
 80080fc:	428b      	cmp	r3, r1
 80080fe:	bf01      	itttt	eq
 8008100:	6819      	ldreq	r1, [r3, #0]
 8008102:	685b      	ldreq	r3, [r3, #4]
 8008104:	1809      	addeq	r1, r1, r0
 8008106:	6021      	streq	r1, [r4, #0]
 8008108:	e7ed      	b.n	80080e6 <_free_r+0x1e>
 800810a:	461a      	mov	r2, r3
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	b10b      	cbz	r3, 8008114 <_free_r+0x4c>
 8008110:	42a3      	cmp	r3, r4
 8008112:	d9fa      	bls.n	800810a <_free_r+0x42>
 8008114:	6811      	ldr	r1, [r2, #0]
 8008116:	1850      	adds	r0, r2, r1
 8008118:	42a0      	cmp	r0, r4
 800811a:	d10b      	bne.n	8008134 <_free_r+0x6c>
 800811c:	6820      	ldr	r0, [r4, #0]
 800811e:	4401      	add	r1, r0
 8008120:	1850      	adds	r0, r2, r1
 8008122:	4283      	cmp	r3, r0
 8008124:	6011      	str	r1, [r2, #0]
 8008126:	d1e0      	bne.n	80080ea <_free_r+0x22>
 8008128:	6818      	ldr	r0, [r3, #0]
 800812a:	685b      	ldr	r3, [r3, #4]
 800812c:	6053      	str	r3, [r2, #4]
 800812e:	4408      	add	r0, r1
 8008130:	6010      	str	r0, [r2, #0]
 8008132:	e7da      	b.n	80080ea <_free_r+0x22>
 8008134:	d902      	bls.n	800813c <_free_r+0x74>
 8008136:	230c      	movs	r3, #12
 8008138:	602b      	str	r3, [r5, #0]
 800813a:	e7d6      	b.n	80080ea <_free_r+0x22>
 800813c:	6820      	ldr	r0, [r4, #0]
 800813e:	1821      	adds	r1, r4, r0
 8008140:	428b      	cmp	r3, r1
 8008142:	bf04      	itt	eq
 8008144:	6819      	ldreq	r1, [r3, #0]
 8008146:	685b      	ldreq	r3, [r3, #4]
 8008148:	6063      	str	r3, [r4, #4]
 800814a:	bf04      	itt	eq
 800814c:	1809      	addeq	r1, r1, r0
 800814e:	6021      	streq	r1, [r4, #0]
 8008150:	6054      	str	r4, [r2, #4]
 8008152:	e7ca      	b.n	80080ea <_free_r+0x22>
 8008154:	bd38      	pop	{r3, r4, r5, pc}
 8008156:	bf00      	nop
 8008158:	240003b8 	.word	0x240003b8

0800815c <sbrk_aligned>:
 800815c:	b570      	push	{r4, r5, r6, lr}
 800815e:	4e0f      	ldr	r6, [pc, #60]	@ (800819c <sbrk_aligned+0x40>)
 8008160:	460c      	mov	r4, r1
 8008162:	6831      	ldr	r1, [r6, #0]
 8008164:	4605      	mov	r5, r0
 8008166:	b911      	cbnz	r1, 800816e <sbrk_aligned+0x12>
 8008168:	f000 fca4 	bl	8008ab4 <_sbrk_r>
 800816c:	6030      	str	r0, [r6, #0]
 800816e:	4621      	mov	r1, r4
 8008170:	4628      	mov	r0, r5
 8008172:	f000 fc9f 	bl	8008ab4 <_sbrk_r>
 8008176:	1c43      	adds	r3, r0, #1
 8008178:	d103      	bne.n	8008182 <sbrk_aligned+0x26>
 800817a:	f04f 34ff 	mov.w	r4, #4294967295
 800817e:	4620      	mov	r0, r4
 8008180:	bd70      	pop	{r4, r5, r6, pc}
 8008182:	1cc4      	adds	r4, r0, #3
 8008184:	f024 0403 	bic.w	r4, r4, #3
 8008188:	42a0      	cmp	r0, r4
 800818a:	d0f8      	beq.n	800817e <sbrk_aligned+0x22>
 800818c:	1a21      	subs	r1, r4, r0
 800818e:	4628      	mov	r0, r5
 8008190:	f000 fc90 	bl	8008ab4 <_sbrk_r>
 8008194:	3001      	adds	r0, #1
 8008196:	d1f2      	bne.n	800817e <sbrk_aligned+0x22>
 8008198:	e7ef      	b.n	800817a <sbrk_aligned+0x1e>
 800819a:	bf00      	nop
 800819c:	240003b4 	.word	0x240003b4

080081a0 <_malloc_r>:
 80081a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081a4:	1ccd      	adds	r5, r1, #3
 80081a6:	f025 0503 	bic.w	r5, r5, #3
 80081aa:	3508      	adds	r5, #8
 80081ac:	2d0c      	cmp	r5, #12
 80081ae:	bf38      	it	cc
 80081b0:	250c      	movcc	r5, #12
 80081b2:	2d00      	cmp	r5, #0
 80081b4:	4606      	mov	r6, r0
 80081b6:	db01      	blt.n	80081bc <_malloc_r+0x1c>
 80081b8:	42a9      	cmp	r1, r5
 80081ba:	d904      	bls.n	80081c6 <_malloc_r+0x26>
 80081bc:	230c      	movs	r3, #12
 80081be:	6033      	str	r3, [r6, #0]
 80081c0:	2000      	movs	r0, #0
 80081c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800829c <_malloc_r+0xfc>
 80081ca:	f000 f869 	bl	80082a0 <__malloc_lock>
 80081ce:	f8d8 3000 	ldr.w	r3, [r8]
 80081d2:	461c      	mov	r4, r3
 80081d4:	bb44      	cbnz	r4, 8008228 <_malloc_r+0x88>
 80081d6:	4629      	mov	r1, r5
 80081d8:	4630      	mov	r0, r6
 80081da:	f7ff ffbf 	bl	800815c <sbrk_aligned>
 80081de:	1c43      	adds	r3, r0, #1
 80081e0:	4604      	mov	r4, r0
 80081e2:	d158      	bne.n	8008296 <_malloc_r+0xf6>
 80081e4:	f8d8 4000 	ldr.w	r4, [r8]
 80081e8:	4627      	mov	r7, r4
 80081ea:	2f00      	cmp	r7, #0
 80081ec:	d143      	bne.n	8008276 <_malloc_r+0xd6>
 80081ee:	2c00      	cmp	r4, #0
 80081f0:	d04b      	beq.n	800828a <_malloc_r+0xea>
 80081f2:	6823      	ldr	r3, [r4, #0]
 80081f4:	4639      	mov	r1, r7
 80081f6:	4630      	mov	r0, r6
 80081f8:	eb04 0903 	add.w	r9, r4, r3
 80081fc:	f000 fc5a 	bl	8008ab4 <_sbrk_r>
 8008200:	4581      	cmp	r9, r0
 8008202:	d142      	bne.n	800828a <_malloc_r+0xea>
 8008204:	6821      	ldr	r1, [r4, #0]
 8008206:	1a6d      	subs	r5, r5, r1
 8008208:	4629      	mov	r1, r5
 800820a:	4630      	mov	r0, r6
 800820c:	f7ff ffa6 	bl	800815c <sbrk_aligned>
 8008210:	3001      	adds	r0, #1
 8008212:	d03a      	beq.n	800828a <_malloc_r+0xea>
 8008214:	6823      	ldr	r3, [r4, #0]
 8008216:	442b      	add	r3, r5
 8008218:	6023      	str	r3, [r4, #0]
 800821a:	f8d8 3000 	ldr.w	r3, [r8]
 800821e:	685a      	ldr	r2, [r3, #4]
 8008220:	bb62      	cbnz	r2, 800827c <_malloc_r+0xdc>
 8008222:	f8c8 7000 	str.w	r7, [r8]
 8008226:	e00f      	b.n	8008248 <_malloc_r+0xa8>
 8008228:	6822      	ldr	r2, [r4, #0]
 800822a:	1b52      	subs	r2, r2, r5
 800822c:	d420      	bmi.n	8008270 <_malloc_r+0xd0>
 800822e:	2a0b      	cmp	r2, #11
 8008230:	d917      	bls.n	8008262 <_malloc_r+0xc2>
 8008232:	1961      	adds	r1, r4, r5
 8008234:	42a3      	cmp	r3, r4
 8008236:	6025      	str	r5, [r4, #0]
 8008238:	bf18      	it	ne
 800823a:	6059      	strne	r1, [r3, #4]
 800823c:	6863      	ldr	r3, [r4, #4]
 800823e:	bf08      	it	eq
 8008240:	f8c8 1000 	streq.w	r1, [r8]
 8008244:	5162      	str	r2, [r4, r5]
 8008246:	604b      	str	r3, [r1, #4]
 8008248:	4630      	mov	r0, r6
 800824a:	f000 f82f 	bl	80082ac <__malloc_unlock>
 800824e:	f104 000b 	add.w	r0, r4, #11
 8008252:	1d23      	adds	r3, r4, #4
 8008254:	f020 0007 	bic.w	r0, r0, #7
 8008258:	1ac2      	subs	r2, r0, r3
 800825a:	bf1c      	itt	ne
 800825c:	1a1b      	subne	r3, r3, r0
 800825e:	50a3      	strne	r3, [r4, r2]
 8008260:	e7af      	b.n	80081c2 <_malloc_r+0x22>
 8008262:	6862      	ldr	r2, [r4, #4]
 8008264:	42a3      	cmp	r3, r4
 8008266:	bf0c      	ite	eq
 8008268:	f8c8 2000 	streq.w	r2, [r8]
 800826c:	605a      	strne	r2, [r3, #4]
 800826e:	e7eb      	b.n	8008248 <_malloc_r+0xa8>
 8008270:	4623      	mov	r3, r4
 8008272:	6864      	ldr	r4, [r4, #4]
 8008274:	e7ae      	b.n	80081d4 <_malloc_r+0x34>
 8008276:	463c      	mov	r4, r7
 8008278:	687f      	ldr	r7, [r7, #4]
 800827a:	e7b6      	b.n	80081ea <_malloc_r+0x4a>
 800827c:	461a      	mov	r2, r3
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	42a3      	cmp	r3, r4
 8008282:	d1fb      	bne.n	800827c <_malloc_r+0xdc>
 8008284:	2300      	movs	r3, #0
 8008286:	6053      	str	r3, [r2, #4]
 8008288:	e7de      	b.n	8008248 <_malloc_r+0xa8>
 800828a:	230c      	movs	r3, #12
 800828c:	6033      	str	r3, [r6, #0]
 800828e:	4630      	mov	r0, r6
 8008290:	f000 f80c 	bl	80082ac <__malloc_unlock>
 8008294:	e794      	b.n	80081c0 <_malloc_r+0x20>
 8008296:	6005      	str	r5, [r0, #0]
 8008298:	e7d6      	b.n	8008248 <_malloc_r+0xa8>
 800829a:	bf00      	nop
 800829c:	240003b8 	.word	0x240003b8

080082a0 <__malloc_lock>:
 80082a0:	4801      	ldr	r0, [pc, #4]	@ (80082a8 <__malloc_lock+0x8>)
 80082a2:	f7ff bf0e 	b.w	80080c2 <__retarget_lock_acquire_recursive>
 80082a6:	bf00      	nop
 80082a8:	240003b0 	.word	0x240003b0

080082ac <__malloc_unlock>:
 80082ac:	4801      	ldr	r0, [pc, #4]	@ (80082b4 <__malloc_unlock+0x8>)
 80082ae:	f7ff bf09 	b.w	80080c4 <__retarget_lock_release_recursive>
 80082b2:	bf00      	nop
 80082b4:	240003b0 	.word	0x240003b0

080082b8 <__sfputc_r>:
 80082b8:	6893      	ldr	r3, [r2, #8]
 80082ba:	3b01      	subs	r3, #1
 80082bc:	2b00      	cmp	r3, #0
 80082be:	b410      	push	{r4}
 80082c0:	6093      	str	r3, [r2, #8]
 80082c2:	da08      	bge.n	80082d6 <__sfputc_r+0x1e>
 80082c4:	6994      	ldr	r4, [r2, #24]
 80082c6:	42a3      	cmp	r3, r4
 80082c8:	db01      	blt.n	80082ce <__sfputc_r+0x16>
 80082ca:	290a      	cmp	r1, #10
 80082cc:	d103      	bne.n	80082d6 <__sfputc_r+0x1e>
 80082ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082d2:	f7ff bde8 	b.w	8007ea6 <__swbuf_r>
 80082d6:	6813      	ldr	r3, [r2, #0]
 80082d8:	1c58      	adds	r0, r3, #1
 80082da:	6010      	str	r0, [r2, #0]
 80082dc:	7019      	strb	r1, [r3, #0]
 80082de:	4608      	mov	r0, r1
 80082e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082e4:	4770      	bx	lr

080082e6 <__sfputs_r>:
 80082e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082e8:	4606      	mov	r6, r0
 80082ea:	460f      	mov	r7, r1
 80082ec:	4614      	mov	r4, r2
 80082ee:	18d5      	adds	r5, r2, r3
 80082f0:	42ac      	cmp	r4, r5
 80082f2:	d101      	bne.n	80082f8 <__sfputs_r+0x12>
 80082f4:	2000      	movs	r0, #0
 80082f6:	e007      	b.n	8008308 <__sfputs_r+0x22>
 80082f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082fc:	463a      	mov	r2, r7
 80082fe:	4630      	mov	r0, r6
 8008300:	f7ff ffda 	bl	80082b8 <__sfputc_r>
 8008304:	1c43      	adds	r3, r0, #1
 8008306:	d1f3      	bne.n	80082f0 <__sfputs_r+0xa>
 8008308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800830c <_vfiprintf_r>:
 800830c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008310:	460d      	mov	r5, r1
 8008312:	b09d      	sub	sp, #116	@ 0x74
 8008314:	4614      	mov	r4, r2
 8008316:	4698      	mov	r8, r3
 8008318:	4606      	mov	r6, r0
 800831a:	b118      	cbz	r0, 8008324 <_vfiprintf_r+0x18>
 800831c:	6a03      	ldr	r3, [r0, #32]
 800831e:	b90b      	cbnz	r3, 8008324 <_vfiprintf_r+0x18>
 8008320:	f7ff fcd8 	bl	8007cd4 <__sinit>
 8008324:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008326:	07d9      	lsls	r1, r3, #31
 8008328:	d405      	bmi.n	8008336 <_vfiprintf_r+0x2a>
 800832a:	89ab      	ldrh	r3, [r5, #12]
 800832c:	059a      	lsls	r2, r3, #22
 800832e:	d402      	bmi.n	8008336 <_vfiprintf_r+0x2a>
 8008330:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008332:	f7ff fec6 	bl	80080c2 <__retarget_lock_acquire_recursive>
 8008336:	89ab      	ldrh	r3, [r5, #12]
 8008338:	071b      	lsls	r3, r3, #28
 800833a:	d501      	bpl.n	8008340 <_vfiprintf_r+0x34>
 800833c:	692b      	ldr	r3, [r5, #16]
 800833e:	b99b      	cbnz	r3, 8008368 <_vfiprintf_r+0x5c>
 8008340:	4629      	mov	r1, r5
 8008342:	4630      	mov	r0, r6
 8008344:	f7ff fdee 	bl	8007f24 <__swsetup_r>
 8008348:	b170      	cbz	r0, 8008368 <_vfiprintf_r+0x5c>
 800834a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800834c:	07dc      	lsls	r4, r3, #31
 800834e:	d504      	bpl.n	800835a <_vfiprintf_r+0x4e>
 8008350:	f04f 30ff 	mov.w	r0, #4294967295
 8008354:	b01d      	add	sp, #116	@ 0x74
 8008356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800835a:	89ab      	ldrh	r3, [r5, #12]
 800835c:	0598      	lsls	r0, r3, #22
 800835e:	d4f7      	bmi.n	8008350 <_vfiprintf_r+0x44>
 8008360:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008362:	f7ff feaf 	bl	80080c4 <__retarget_lock_release_recursive>
 8008366:	e7f3      	b.n	8008350 <_vfiprintf_r+0x44>
 8008368:	2300      	movs	r3, #0
 800836a:	9309      	str	r3, [sp, #36]	@ 0x24
 800836c:	2320      	movs	r3, #32
 800836e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008372:	f8cd 800c 	str.w	r8, [sp, #12]
 8008376:	2330      	movs	r3, #48	@ 0x30
 8008378:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008528 <_vfiprintf_r+0x21c>
 800837c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008380:	f04f 0901 	mov.w	r9, #1
 8008384:	4623      	mov	r3, r4
 8008386:	469a      	mov	sl, r3
 8008388:	f813 2b01 	ldrb.w	r2, [r3], #1
 800838c:	b10a      	cbz	r2, 8008392 <_vfiprintf_r+0x86>
 800838e:	2a25      	cmp	r2, #37	@ 0x25
 8008390:	d1f9      	bne.n	8008386 <_vfiprintf_r+0x7a>
 8008392:	ebba 0b04 	subs.w	fp, sl, r4
 8008396:	d00b      	beq.n	80083b0 <_vfiprintf_r+0xa4>
 8008398:	465b      	mov	r3, fp
 800839a:	4622      	mov	r2, r4
 800839c:	4629      	mov	r1, r5
 800839e:	4630      	mov	r0, r6
 80083a0:	f7ff ffa1 	bl	80082e6 <__sfputs_r>
 80083a4:	3001      	adds	r0, #1
 80083a6:	f000 80a7 	beq.w	80084f8 <_vfiprintf_r+0x1ec>
 80083aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80083ac:	445a      	add	r2, fp
 80083ae:	9209      	str	r2, [sp, #36]	@ 0x24
 80083b0:	f89a 3000 	ldrb.w	r3, [sl]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	f000 809f 	beq.w	80084f8 <_vfiprintf_r+0x1ec>
 80083ba:	2300      	movs	r3, #0
 80083bc:	f04f 32ff 	mov.w	r2, #4294967295
 80083c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083c4:	f10a 0a01 	add.w	sl, sl, #1
 80083c8:	9304      	str	r3, [sp, #16]
 80083ca:	9307      	str	r3, [sp, #28]
 80083cc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80083d0:	931a      	str	r3, [sp, #104]	@ 0x68
 80083d2:	4654      	mov	r4, sl
 80083d4:	2205      	movs	r2, #5
 80083d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083da:	4853      	ldr	r0, [pc, #332]	@ (8008528 <_vfiprintf_r+0x21c>)
 80083dc:	f7f7 ff80 	bl	80002e0 <memchr>
 80083e0:	9a04      	ldr	r2, [sp, #16]
 80083e2:	b9d8      	cbnz	r0, 800841c <_vfiprintf_r+0x110>
 80083e4:	06d1      	lsls	r1, r2, #27
 80083e6:	bf44      	itt	mi
 80083e8:	2320      	movmi	r3, #32
 80083ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80083ee:	0713      	lsls	r3, r2, #28
 80083f0:	bf44      	itt	mi
 80083f2:	232b      	movmi	r3, #43	@ 0x2b
 80083f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80083f8:	f89a 3000 	ldrb.w	r3, [sl]
 80083fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80083fe:	d015      	beq.n	800842c <_vfiprintf_r+0x120>
 8008400:	9a07      	ldr	r2, [sp, #28]
 8008402:	4654      	mov	r4, sl
 8008404:	2000      	movs	r0, #0
 8008406:	f04f 0c0a 	mov.w	ip, #10
 800840a:	4621      	mov	r1, r4
 800840c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008410:	3b30      	subs	r3, #48	@ 0x30
 8008412:	2b09      	cmp	r3, #9
 8008414:	d94b      	bls.n	80084ae <_vfiprintf_r+0x1a2>
 8008416:	b1b0      	cbz	r0, 8008446 <_vfiprintf_r+0x13a>
 8008418:	9207      	str	r2, [sp, #28]
 800841a:	e014      	b.n	8008446 <_vfiprintf_r+0x13a>
 800841c:	eba0 0308 	sub.w	r3, r0, r8
 8008420:	fa09 f303 	lsl.w	r3, r9, r3
 8008424:	4313      	orrs	r3, r2
 8008426:	9304      	str	r3, [sp, #16]
 8008428:	46a2      	mov	sl, r4
 800842a:	e7d2      	b.n	80083d2 <_vfiprintf_r+0xc6>
 800842c:	9b03      	ldr	r3, [sp, #12]
 800842e:	1d19      	adds	r1, r3, #4
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	9103      	str	r1, [sp, #12]
 8008434:	2b00      	cmp	r3, #0
 8008436:	bfbb      	ittet	lt
 8008438:	425b      	neglt	r3, r3
 800843a:	f042 0202 	orrlt.w	r2, r2, #2
 800843e:	9307      	strge	r3, [sp, #28]
 8008440:	9307      	strlt	r3, [sp, #28]
 8008442:	bfb8      	it	lt
 8008444:	9204      	strlt	r2, [sp, #16]
 8008446:	7823      	ldrb	r3, [r4, #0]
 8008448:	2b2e      	cmp	r3, #46	@ 0x2e
 800844a:	d10a      	bne.n	8008462 <_vfiprintf_r+0x156>
 800844c:	7863      	ldrb	r3, [r4, #1]
 800844e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008450:	d132      	bne.n	80084b8 <_vfiprintf_r+0x1ac>
 8008452:	9b03      	ldr	r3, [sp, #12]
 8008454:	1d1a      	adds	r2, r3, #4
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	9203      	str	r2, [sp, #12]
 800845a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800845e:	3402      	adds	r4, #2
 8008460:	9305      	str	r3, [sp, #20]
 8008462:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008538 <_vfiprintf_r+0x22c>
 8008466:	7821      	ldrb	r1, [r4, #0]
 8008468:	2203      	movs	r2, #3
 800846a:	4650      	mov	r0, sl
 800846c:	f7f7 ff38 	bl	80002e0 <memchr>
 8008470:	b138      	cbz	r0, 8008482 <_vfiprintf_r+0x176>
 8008472:	9b04      	ldr	r3, [sp, #16]
 8008474:	eba0 000a 	sub.w	r0, r0, sl
 8008478:	2240      	movs	r2, #64	@ 0x40
 800847a:	4082      	lsls	r2, r0
 800847c:	4313      	orrs	r3, r2
 800847e:	3401      	adds	r4, #1
 8008480:	9304      	str	r3, [sp, #16]
 8008482:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008486:	4829      	ldr	r0, [pc, #164]	@ (800852c <_vfiprintf_r+0x220>)
 8008488:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800848c:	2206      	movs	r2, #6
 800848e:	f7f7 ff27 	bl	80002e0 <memchr>
 8008492:	2800      	cmp	r0, #0
 8008494:	d03f      	beq.n	8008516 <_vfiprintf_r+0x20a>
 8008496:	4b26      	ldr	r3, [pc, #152]	@ (8008530 <_vfiprintf_r+0x224>)
 8008498:	bb1b      	cbnz	r3, 80084e2 <_vfiprintf_r+0x1d6>
 800849a:	9b03      	ldr	r3, [sp, #12]
 800849c:	3307      	adds	r3, #7
 800849e:	f023 0307 	bic.w	r3, r3, #7
 80084a2:	3308      	adds	r3, #8
 80084a4:	9303      	str	r3, [sp, #12]
 80084a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084a8:	443b      	add	r3, r7
 80084aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80084ac:	e76a      	b.n	8008384 <_vfiprintf_r+0x78>
 80084ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80084b2:	460c      	mov	r4, r1
 80084b4:	2001      	movs	r0, #1
 80084b6:	e7a8      	b.n	800840a <_vfiprintf_r+0xfe>
 80084b8:	2300      	movs	r3, #0
 80084ba:	3401      	adds	r4, #1
 80084bc:	9305      	str	r3, [sp, #20]
 80084be:	4619      	mov	r1, r3
 80084c0:	f04f 0c0a 	mov.w	ip, #10
 80084c4:	4620      	mov	r0, r4
 80084c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084ca:	3a30      	subs	r2, #48	@ 0x30
 80084cc:	2a09      	cmp	r2, #9
 80084ce:	d903      	bls.n	80084d8 <_vfiprintf_r+0x1cc>
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d0c6      	beq.n	8008462 <_vfiprintf_r+0x156>
 80084d4:	9105      	str	r1, [sp, #20]
 80084d6:	e7c4      	b.n	8008462 <_vfiprintf_r+0x156>
 80084d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80084dc:	4604      	mov	r4, r0
 80084de:	2301      	movs	r3, #1
 80084e0:	e7f0      	b.n	80084c4 <_vfiprintf_r+0x1b8>
 80084e2:	ab03      	add	r3, sp, #12
 80084e4:	9300      	str	r3, [sp, #0]
 80084e6:	462a      	mov	r2, r5
 80084e8:	4b12      	ldr	r3, [pc, #72]	@ (8008534 <_vfiprintf_r+0x228>)
 80084ea:	a904      	add	r1, sp, #16
 80084ec:	4630      	mov	r0, r6
 80084ee:	f3af 8000 	nop.w
 80084f2:	4607      	mov	r7, r0
 80084f4:	1c78      	adds	r0, r7, #1
 80084f6:	d1d6      	bne.n	80084a6 <_vfiprintf_r+0x19a>
 80084f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80084fa:	07d9      	lsls	r1, r3, #31
 80084fc:	d405      	bmi.n	800850a <_vfiprintf_r+0x1fe>
 80084fe:	89ab      	ldrh	r3, [r5, #12]
 8008500:	059a      	lsls	r2, r3, #22
 8008502:	d402      	bmi.n	800850a <_vfiprintf_r+0x1fe>
 8008504:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008506:	f7ff fddd 	bl	80080c4 <__retarget_lock_release_recursive>
 800850a:	89ab      	ldrh	r3, [r5, #12]
 800850c:	065b      	lsls	r3, r3, #25
 800850e:	f53f af1f 	bmi.w	8008350 <_vfiprintf_r+0x44>
 8008512:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008514:	e71e      	b.n	8008354 <_vfiprintf_r+0x48>
 8008516:	ab03      	add	r3, sp, #12
 8008518:	9300      	str	r3, [sp, #0]
 800851a:	462a      	mov	r2, r5
 800851c:	4b05      	ldr	r3, [pc, #20]	@ (8008534 <_vfiprintf_r+0x228>)
 800851e:	a904      	add	r1, sp, #16
 8008520:	4630      	mov	r0, r6
 8008522:	f000 f879 	bl	8008618 <_printf_i>
 8008526:	e7e4      	b.n	80084f2 <_vfiprintf_r+0x1e6>
 8008528:	08008b60 	.word	0x08008b60
 800852c:	08008b6a 	.word	0x08008b6a
 8008530:	00000000 	.word	0x00000000
 8008534:	080082e7 	.word	0x080082e7
 8008538:	08008b66 	.word	0x08008b66

0800853c <_printf_common>:
 800853c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008540:	4616      	mov	r6, r2
 8008542:	4698      	mov	r8, r3
 8008544:	688a      	ldr	r2, [r1, #8]
 8008546:	690b      	ldr	r3, [r1, #16]
 8008548:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800854c:	4293      	cmp	r3, r2
 800854e:	bfb8      	it	lt
 8008550:	4613      	movlt	r3, r2
 8008552:	6033      	str	r3, [r6, #0]
 8008554:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008558:	4607      	mov	r7, r0
 800855a:	460c      	mov	r4, r1
 800855c:	b10a      	cbz	r2, 8008562 <_printf_common+0x26>
 800855e:	3301      	adds	r3, #1
 8008560:	6033      	str	r3, [r6, #0]
 8008562:	6823      	ldr	r3, [r4, #0]
 8008564:	0699      	lsls	r1, r3, #26
 8008566:	bf42      	ittt	mi
 8008568:	6833      	ldrmi	r3, [r6, #0]
 800856a:	3302      	addmi	r3, #2
 800856c:	6033      	strmi	r3, [r6, #0]
 800856e:	6825      	ldr	r5, [r4, #0]
 8008570:	f015 0506 	ands.w	r5, r5, #6
 8008574:	d106      	bne.n	8008584 <_printf_common+0x48>
 8008576:	f104 0a19 	add.w	sl, r4, #25
 800857a:	68e3      	ldr	r3, [r4, #12]
 800857c:	6832      	ldr	r2, [r6, #0]
 800857e:	1a9b      	subs	r3, r3, r2
 8008580:	42ab      	cmp	r3, r5
 8008582:	dc26      	bgt.n	80085d2 <_printf_common+0x96>
 8008584:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008588:	6822      	ldr	r2, [r4, #0]
 800858a:	3b00      	subs	r3, #0
 800858c:	bf18      	it	ne
 800858e:	2301      	movne	r3, #1
 8008590:	0692      	lsls	r2, r2, #26
 8008592:	d42b      	bmi.n	80085ec <_printf_common+0xb0>
 8008594:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008598:	4641      	mov	r1, r8
 800859a:	4638      	mov	r0, r7
 800859c:	47c8      	blx	r9
 800859e:	3001      	adds	r0, #1
 80085a0:	d01e      	beq.n	80085e0 <_printf_common+0xa4>
 80085a2:	6823      	ldr	r3, [r4, #0]
 80085a4:	6922      	ldr	r2, [r4, #16]
 80085a6:	f003 0306 	and.w	r3, r3, #6
 80085aa:	2b04      	cmp	r3, #4
 80085ac:	bf02      	ittt	eq
 80085ae:	68e5      	ldreq	r5, [r4, #12]
 80085b0:	6833      	ldreq	r3, [r6, #0]
 80085b2:	1aed      	subeq	r5, r5, r3
 80085b4:	68a3      	ldr	r3, [r4, #8]
 80085b6:	bf0c      	ite	eq
 80085b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80085bc:	2500      	movne	r5, #0
 80085be:	4293      	cmp	r3, r2
 80085c0:	bfc4      	itt	gt
 80085c2:	1a9b      	subgt	r3, r3, r2
 80085c4:	18ed      	addgt	r5, r5, r3
 80085c6:	2600      	movs	r6, #0
 80085c8:	341a      	adds	r4, #26
 80085ca:	42b5      	cmp	r5, r6
 80085cc:	d11a      	bne.n	8008604 <_printf_common+0xc8>
 80085ce:	2000      	movs	r0, #0
 80085d0:	e008      	b.n	80085e4 <_printf_common+0xa8>
 80085d2:	2301      	movs	r3, #1
 80085d4:	4652      	mov	r2, sl
 80085d6:	4641      	mov	r1, r8
 80085d8:	4638      	mov	r0, r7
 80085da:	47c8      	blx	r9
 80085dc:	3001      	adds	r0, #1
 80085de:	d103      	bne.n	80085e8 <_printf_common+0xac>
 80085e0:	f04f 30ff 	mov.w	r0, #4294967295
 80085e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085e8:	3501      	adds	r5, #1
 80085ea:	e7c6      	b.n	800857a <_printf_common+0x3e>
 80085ec:	18e1      	adds	r1, r4, r3
 80085ee:	1c5a      	adds	r2, r3, #1
 80085f0:	2030      	movs	r0, #48	@ 0x30
 80085f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80085f6:	4422      	add	r2, r4
 80085f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80085fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008600:	3302      	adds	r3, #2
 8008602:	e7c7      	b.n	8008594 <_printf_common+0x58>
 8008604:	2301      	movs	r3, #1
 8008606:	4622      	mov	r2, r4
 8008608:	4641      	mov	r1, r8
 800860a:	4638      	mov	r0, r7
 800860c:	47c8      	blx	r9
 800860e:	3001      	adds	r0, #1
 8008610:	d0e6      	beq.n	80085e0 <_printf_common+0xa4>
 8008612:	3601      	adds	r6, #1
 8008614:	e7d9      	b.n	80085ca <_printf_common+0x8e>
	...

08008618 <_printf_i>:
 8008618:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800861c:	7e0f      	ldrb	r7, [r1, #24]
 800861e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008620:	2f78      	cmp	r7, #120	@ 0x78
 8008622:	4691      	mov	r9, r2
 8008624:	4680      	mov	r8, r0
 8008626:	460c      	mov	r4, r1
 8008628:	469a      	mov	sl, r3
 800862a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800862e:	d807      	bhi.n	8008640 <_printf_i+0x28>
 8008630:	2f62      	cmp	r7, #98	@ 0x62
 8008632:	d80a      	bhi.n	800864a <_printf_i+0x32>
 8008634:	2f00      	cmp	r7, #0
 8008636:	f000 80d1 	beq.w	80087dc <_printf_i+0x1c4>
 800863a:	2f58      	cmp	r7, #88	@ 0x58
 800863c:	f000 80b8 	beq.w	80087b0 <_printf_i+0x198>
 8008640:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008644:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008648:	e03a      	b.n	80086c0 <_printf_i+0xa8>
 800864a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800864e:	2b15      	cmp	r3, #21
 8008650:	d8f6      	bhi.n	8008640 <_printf_i+0x28>
 8008652:	a101      	add	r1, pc, #4	@ (adr r1, 8008658 <_printf_i+0x40>)
 8008654:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008658:	080086b1 	.word	0x080086b1
 800865c:	080086c5 	.word	0x080086c5
 8008660:	08008641 	.word	0x08008641
 8008664:	08008641 	.word	0x08008641
 8008668:	08008641 	.word	0x08008641
 800866c:	08008641 	.word	0x08008641
 8008670:	080086c5 	.word	0x080086c5
 8008674:	08008641 	.word	0x08008641
 8008678:	08008641 	.word	0x08008641
 800867c:	08008641 	.word	0x08008641
 8008680:	08008641 	.word	0x08008641
 8008684:	080087c3 	.word	0x080087c3
 8008688:	080086ef 	.word	0x080086ef
 800868c:	0800877d 	.word	0x0800877d
 8008690:	08008641 	.word	0x08008641
 8008694:	08008641 	.word	0x08008641
 8008698:	080087e5 	.word	0x080087e5
 800869c:	08008641 	.word	0x08008641
 80086a0:	080086ef 	.word	0x080086ef
 80086a4:	08008641 	.word	0x08008641
 80086a8:	08008641 	.word	0x08008641
 80086ac:	08008785 	.word	0x08008785
 80086b0:	6833      	ldr	r3, [r6, #0]
 80086b2:	1d1a      	adds	r2, r3, #4
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	6032      	str	r2, [r6, #0]
 80086b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80086bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80086c0:	2301      	movs	r3, #1
 80086c2:	e09c      	b.n	80087fe <_printf_i+0x1e6>
 80086c4:	6833      	ldr	r3, [r6, #0]
 80086c6:	6820      	ldr	r0, [r4, #0]
 80086c8:	1d19      	adds	r1, r3, #4
 80086ca:	6031      	str	r1, [r6, #0]
 80086cc:	0606      	lsls	r6, r0, #24
 80086ce:	d501      	bpl.n	80086d4 <_printf_i+0xbc>
 80086d0:	681d      	ldr	r5, [r3, #0]
 80086d2:	e003      	b.n	80086dc <_printf_i+0xc4>
 80086d4:	0645      	lsls	r5, r0, #25
 80086d6:	d5fb      	bpl.n	80086d0 <_printf_i+0xb8>
 80086d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80086dc:	2d00      	cmp	r5, #0
 80086de:	da03      	bge.n	80086e8 <_printf_i+0xd0>
 80086e0:	232d      	movs	r3, #45	@ 0x2d
 80086e2:	426d      	negs	r5, r5
 80086e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80086e8:	4858      	ldr	r0, [pc, #352]	@ (800884c <_printf_i+0x234>)
 80086ea:	230a      	movs	r3, #10
 80086ec:	e011      	b.n	8008712 <_printf_i+0xfa>
 80086ee:	6821      	ldr	r1, [r4, #0]
 80086f0:	6833      	ldr	r3, [r6, #0]
 80086f2:	0608      	lsls	r0, r1, #24
 80086f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80086f8:	d402      	bmi.n	8008700 <_printf_i+0xe8>
 80086fa:	0649      	lsls	r1, r1, #25
 80086fc:	bf48      	it	mi
 80086fe:	b2ad      	uxthmi	r5, r5
 8008700:	2f6f      	cmp	r7, #111	@ 0x6f
 8008702:	4852      	ldr	r0, [pc, #328]	@ (800884c <_printf_i+0x234>)
 8008704:	6033      	str	r3, [r6, #0]
 8008706:	bf14      	ite	ne
 8008708:	230a      	movne	r3, #10
 800870a:	2308      	moveq	r3, #8
 800870c:	2100      	movs	r1, #0
 800870e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008712:	6866      	ldr	r6, [r4, #4]
 8008714:	60a6      	str	r6, [r4, #8]
 8008716:	2e00      	cmp	r6, #0
 8008718:	db05      	blt.n	8008726 <_printf_i+0x10e>
 800871a:	6821      	ldr	r1, [r4, #0]
 800871c:	432e      	orrs	r6, r5
 800871e:	f021 0104 	bic.w	r1, r1, #4
 8008722:	6021      	str	r1, [r4, #0]
 8008724:	d04b      	beq.n	80087be <_printf_i+0x1a6>
 8008726:	4616      	mov	r6, r2
 8008728:	fbb5 f1f3 	udiv	r1, r5, r3
 800872c:	fb03 5711 	mls	r7, r3, r1, r5
 8008730:	5dc7      	ldrb	r7, [r0, r7]
 8008732:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008736:	462f      	mov	r7, r5
 8008738:	42bb      	cmp	r3, r7
 800873a:	460d      	mov	r5, r1
 800873c:	d9f4      	bls.n	8008728 <_printf_i+0x110>
 800873e:	2b08      	cmp	r3, #8
 8008740:	d10b      	bne.n	800875a <_printf_i+0x142>
 8008742:	6823      	ldr	r3, [r4, #0]
 8008744:	07df      	lsls	r7, r3, #31
 8008746:	d508      	bpl.n	800875a <_printf_i+0x142>
 8008748:	6923      	ldr	r3, [r4, #16]
 800874a:	6861      	ldr	r1, [r4, #4]
 800874c:	4299      	cmp	r1, r3
 800874e:	bfde      	ittt	le
 8008750:	2330      	movle	r3, #48	@ 0x30
 8008752:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008756:	f106 36ff 	addle.w	r6, r6, #4294967295
 800875a:	1b92      	subs	r2, r2, r6
 800875c:	6122      	str	r2, [r4, #16]
 800875e:	f8cd a000 	str.w	sl, [sp]
 8008762:	464b      	mov	r3, r9
 8008764:	aa03      	add	r2, sp, #12
 8008766:	4621      	mov	r1, r4
 8008768:	4640      	mov	r0, r8
 800876a:	f7ff fee7 	bl	800853c <_printf_common>
 800876e:	3001      	adds	r0, #1
 8008770:	d14a      	bne.n	8008808 <_printf_i+0x1f0>
 8008772:	f04f 30ff 	mov.w	r0, #4294967295
 8008776:	b004      	add	sp, #16
 8008778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800877c:	6823      	ldr	r3, [r4, #0]
 800877e:	f043 0320 	orr.w	r3, r3, #32
 8008782:	6023      	str	r3, [r4, #0]
 8008784:	4832      	ldr	r0, [pc, #200]	@ (8008850 <_printf_i+0x238>)
 8008786:	2778      	movs	r7, #120	@ 0x78
 8008788:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800878c:	6823      	ldr	r3, [r4, #0]
 800878e:	6831      	ldr	r1, [r6, #0]
 8008790:	061f      	lsls	r7, r3, #24
 8008792:	f851 5b04 	ldr.w	r5, [r1], #4
 8008796:	d402      	bmi.n	800879e <_printf_i+0x186>
 8008798:	065f      	lsls	r7, r3, #25
 800879a:	bf48      	it	mi
 800879c:	b2ad      	uxthmi	r5, r5
 800879e:	6031      	str	r1, [r6, #0]
 80087a0:	07d9      	lsls	r1, r3, #31
 80087a2:	bf44      	itt	mi
 80087a4:	f043 0320 	orrmi.w	r3, r3, #32
 80087a8:	6023      	strmi	r3, [r4, #0]
 80087aa:	b11d      	cbz	r5, 80087b4 <_printf_i+0x19c>
 80087ac:	2310      	movs	r3, #16
 80087ae:	e7ad      	b.n	800870c <_printf_i+0xf4>
 80087b0:	4826      	ldr	r0, [pc, #152]	@ (800884c <_printf_i+0x234>)
 80087b2:	e7e9      	b.n	8008788 <_printf_i+0x170>
 80087b4:	6823      	ldr	r3, [r4, #0]
 80087b6:	f023 0320 	bic.w	r3, r3, #32
 80087ba:	6023      	str	r3, [r4, #0]
 80087bc:	e7f6      	b.n	80087ac <_printf_i+0x194>
 80087be:	4616      	mov	r6, r2
 80087c0:	e7bd      	b.n	800873e <_printf_i+0x126>
 80087c2:	6833      	ldr	r3, [r6, #0]
 80087c4:	6825      	ldr	r5, [r4, #0]
 80087c6:	6961      	ldr	r1, [r4, #20]
 80087c8:	1d18      	adds	r0, r3, #4
 80087ca:	6030      	str	r0, [r6, #0]
 80087cc:	062e      	lsls	r6, r5, #24
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	d501      	bpl.n	80087d6 <_printf_i+0x1be>
 80087d2:	6019      	str	r1, [r3, #0]
 80087d4:	e002      	b.n	80087dc <_printf_i+0x1c4>
 80087d6:	0668      	lsls	r0, r5, #25
 80087d8:	d5fb      	bpl.n	80087d2 <_printf_i+0x1ba>
 80087da:	8019      	strh	r1, [r3, #0]
 80087dc:	2300      	movs	r3, #0
 80087de:	6123      	str	r3, [r4, #16]
 80087e0:	4616      	mov	r6, r2
 80087e2:	e7bc      	b.n	800875e <_printf_i+0x146>
 80087e4:	6833      	ldr	r3, [r6, #0]
 80087e6:	1d1a      	adds	r2, r3, #4
 80087e8:	6032      	str	r2, [r6, #0]
 80087ea:	681e      	ldr	r6, [r3, #0]
 80087ec:	6862      	ldr	r2, [r4, #4]
 80087ee:	2100      	movs	r1, #0
 80087f0:	4630      	mov	r0, r6
 80087f2:	f7f7 fd75 	bl	80002e0 <memchr>
 80087f6:	b108      	cbz	r0, 80087fc <_printf_i+0x1e4>
 80087f8:	1b80      	subs	r0, r0, r6
 80087fa:	6060      	str	r0, [r4, #4]
 80087fc:	6863      	ldr	r3, [r4, #4]
 80087fe:	6123      	str	r3, [r4, #16]
 8008800:	2300      	movs	r3, #0
 8008802:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008806:	e7aa      	b.n	800875e <_printf_i+0x146>
 8008808:	6923      	ldr	r3, [r4, #16]
 800880a:	4632      	mov	r2, r6
 800880c:	4649      	mov	r1, r9
 800880e:	4640      	mov	r0, r8
 8008810:	47d0      	blx	sl
 8008812:	3001      	adds	r0, #1
 8008814:	d0ad      	beq.n	8008772 <_printf_i+0x15a>
 8008816:	6823      	ldr	r3, [r4, #0]
 8008818:	079b      	lsls	r3, r3, #30
 800881a:	d413      	bmi.n	8008844 <_printf_i+0x22c>
 800881c:	68e0      	ldr	r0, [r4, #12]
 800881e:	9b03      	ldr	r3, [sp, #12]
 8008820:	4298      	cmp	r0, r3
 8008822:	bfb8      	it	lt
 8008824:	4618      	movlt	r0, r3
 8008826:	e7a6      	b.n	8008776 <_printf_i+0x15e>
 8008828:	2301      	movs	r3, #1
 800882a:	4632      	mov	r2, r6
 800882c:	4649      	mov	r1, r9
 800882e:	4640      	mov	r0, r8
 8008830:	47d0      	blx	sl
 8008832:	3001      	adds	r0, #1
 8008834:	d09d      	beq.n	8008772 <_printf_i+0x15a>
 8008836:	3501      	adds	r5, #1
 8008838:	68e3      	ldr	r3, [r4, #12]
 800883a:	9903      	ldr	r1, [sp, #12]
 800883c:	1a5b      	subs	r3, r3, r1
 800883e:	42ab      	cmp	r3, r5
 8008840:	dcf2      	bgt.n	8008828 <_printf_i+0x210>
 8008842:	e7eb      	b.n	800881c <_printf_i+0x204>
 8008844:	2500      	movs	r5, #0
 8008846:	f104 0619 	add.w	r6, r4, #25
 800884a:	e7f5      	b.n	8008838 <_printf_i+0x220>
 800884c:	08008b71 	.word	0x08008b71
 8008850:	08008b82 	.word	0x08008b82

08008854 <__sflush_r>:
 8008854:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800885c:	0716      	lsls	r6, r2, #28
 800885e:	4605      	mov	r5, r0
 8008860:	460c      	mov	r4, r1
 8008862:	d454      	bmi.n	800890e <__sflush_r+0xba>
 8008864:	684b      	ldr	r3, [r1, #4]
 8008866:	2b00      	cmp	r3, #0
 8008868:	dc02      	bgt.n	8008870 <__sflush_r+0x1c>
 800886a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800886c:	2b00      	cmp	r3, #0
 800886e:	dd48      	ble.n	8008902 <__sflush_r+0xae>
 8008870:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008872:	2e00      	cmp	r6, #0
 8008874:	d045      	beq.n	8008902 <__sflush_r+0xae>
 8008876:	2300      	movs	r3, #0
 8008878:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800887c:	682f      	ldr	r7, [r5, #0]
 800887e:	6a21      	ldr	r1, [r4, #32]
 8008880:	602b      	str	r3, [r5, #0]
 8008882:	d030      	beq.n	80088e6 <__sflush_r+0x92>
 8008884:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008886:	89a3      	ldrh	r3, [r4, #12]
 8008888:	0759      	lsls	r1, r3, #29
 800888a:	d505      	bpl.n	8008898 <__sflush_r+0x44>
 800888c:	6863      	ldr	r3, [r4, #4]
 800888e:	1ad2      	subs	r2, r2, r3
 8008890:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008892:	b10b      	cbz	r3, 8008898 <__sflush_r+0x44>
 8008894:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008896:	1ad2      	subs	r2, r2, r3
 8008898:	2300      	movs	r3, #0
 800889a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800889c:	6a21      	ldr	r1, [r4, #32]
 800889e:	4628      	mov	r0, r5
 80088a0:	47b0      	blx	r6
 80088a2:	1c43      	adds	r3, r0, #1
 80088a4:	89a3      	ldrh	r3, [r4, #12]
 80088a6:	d106      	bne.n	80088b6 <__sflush_r+0x62>
 80088a8:	6829      	ldr	r1, [r5, #0]
 80088aa:	291d      	cmp	r1, #29
 80088ac:	d82b      	bhi.n	8008906 <__sflush_r+0xb2>
 80088ae:	4a2a      	ldr	r2, [pc, #168]	@ (8008958 <__sflush_r+0x104>)
 80088b0:	40ca      	lsrs	r2, r1
 80088b2:	07d6      	lsls	r6, r2, #31
 80088b4:	d527      	bpl.n	8008906 <__sflush_r+0xb2>
 80088b6:	2200      	movs	r2, #0
 80088b8:	6062      	str	r2, [r4, #4]
 80088ba:	04d9      	lsls	r1, r3, #19
 80088bc:	6922      	ldr	r2, [r4, #16]
 80088be:	6022      	str	r2, [r4, #0]
 80088c0:	d504      	bpl.n	80088cc <__sflush_r+0x78>
 80088c2:	1c42      	adds	r2, r0, #1
 80088c4:	d101      	bne.n	80088ca <__sflush_r+0x76>
 80088c6:	682b      	ldr	r3, [r5, #0]
 80088c8:	b903      	cbnz	r3, 80088cc <__sflush_r+0x78>
 80088ca:	6560      	str	r0, [r4, #84]	@ 0x54
 80088cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80088ce:	602f      	str	r7, [r5, #0]
 80088d0:	b1b9      	cbz	r1, 8008902 <__sflush_r+0xae>
 80088d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80088d6:	4299      	cmp	r1, r3
 80088d8:	d002      	beq.n	80088e0 <__sflush_r+0x8c>
 80088da:	4628      	mov	r0, r5
 80088dc:	f7ff fbf4 	bl	80080c8 <_free_r>
 80088e0:	2300      	movs	r3, #0
 80088e2:	6363      	str	r3, [r4, #52]	@ 0x34
 80088e4:	e00d      	b.n	8008902 <__sflush_r+0xae>
 80088e6:	2301      	movs	r3, #1
 80088e8:	4628      	mov	r0, r5
 80088ea:	47b0      	blx	r6
 80088ec:	4602      	mov	r2, r0
 80088ee:	1c50      	adds	r0, r2, #1
 80088f0:	d1c9      	bne.n	8008886 <__sflush_r+0x32>
 80088f2:	682b      	ldr	r3, [r5, #0]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d0c6      	beq.n	8008886 <__sflush_r+0x32>
 80088f8:	2b1d      	cmp	r3, #29
 80088fa:	d001      	beq.n	8008900 <__sflush_r+0xac>
 80088fc:	2b16      	cmp	r3, #22
 80088fe:	d11e      	bne.n	800893e <__sflush_r+0xea>
 8008900:	602f      	str	r7, [r5, #0]
 8008902:	2000      	movs	r0, #0
 8008904:	e022      	b.n	800894c <__sflush_r+0xf8>
 8008906:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800890a:	b21b      	sxth	r3, r3
 800890c:	e01b      	b.n	8008946 <__sflush_r+0xf2>
 800890e:	690f      	ldr	r7, [r1, #16]
 8008910:	2f00      	cmp	r7, #0
 8008912:	d0f6      	beq.n	8008902 <__sflush_r+0xae>
 8008914:	0793      	lsls	r3, r2, #30
 8008916:	680e      	ldr	r6, [r1, #0]
 8008918:	bf08      	it	eq
 800891a:	694b      	ldreq	r3, [r1, #20]
 800891c:	600f      	str	r7, [r1, #0]
 800891e:	bf18      	it	ne
 8008920:	2300      	movne	r3, #0
 8008922:	eba6 0807 	sub.w	r8, r6, r7
 8008926:	608b      	str	r3, [r1, #8]
 8008928:	f1b8 0f00 	cmp.w	r8, #0
 800892c:	dde9      	ble.n	8008902 <__sflush_r+0xae>
 800892e:	6a21      	ldr	r1, [r4, #32]
 8008930:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008932:	4643      	mov	r3, r8
 8008934:	463a      	mov	r2, r7
 8008936:	4628      	mov	r0, r5
 8008938:	47b0      	blx	r6
 800893a:	2800      	cmp	r0, #0
 800893c:	dc08      	bgt.n	8008950 <__sflush_r+0xfc>
 800893e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008942:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008946:	81a3      	strh	r3, [r4, #12]
 8008948:	f04f 30ff 	mov.w	r0, #4294967295
 800894c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008950:	4407      	add	r7, r0
 8008952:	eba8 0800 	sub.w	r8, r8, r0
 8008956:	e7e7      	b.n	8008928 <__sflush_r+0xd4>
 8008958:	20400001 	.word	0x20400001

0800895c <_fflush_r>:
 800895c:	b538      	push	{r3, r4, r5, lr}
 800895e:	690b      	ldr	r3, [r1, #16]
 8008960:	4605      	mov	r5, r0
 8008962:	460c      	mov	r4, r1
 8008964:	b913      	cbnz	r3, 800896c <_fflush_r+0x10>
 8008966:	2500      	movs	r5, #0
 8008968:	4628      	mov	r0, r5
 800896a:	bd38      	pop	{r3, r4, r5, pc}
 800896c:	b118      	cbz	r0, 8008976 <_fflush_r+0x1a>
 800896e:	6a03      	ldr	r3, [r0, #32]
 8008970:	b90b      	cbnz	r3, 8008976 <_fflush_r+0x1a>
 8008972:	f7ff f9af 	bl	8007cd4 <__sinit>
 8008976:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d0f3      	beq.n	8008966 <_fflush_r+0xa>
 800897e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008980:	07d0      	lsls	r0, r2, #31
 8008982:	d404      	bmi.n	800898e <_fflush_r+0x32>
 8008984:	0599      	lsls	r1, r3, #22
 8008986:	d402      	bmi.n	800898e <_fflush_r+0x32>
 8008988:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800898a:	f7ff fb9a 	bl	80080c2 <__retarget_lock_acquire_recursive>
 800898e:	4628      	mov	r0, r5
 8008990:	4621      	mov	r1, r4
 8008992:	f7ff ff5f 	bl	8008854 <__sflush_r>
 8008996:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008998:	07da      	lsls	r2, r3, #31
 800899a:	4605      	mov	r5, r0
 800899c:	d4e4      	bmi.n	8008968 <_fflush_r+0xc>
 800899e:	89a3      	ldrh	r3, [r4, #12]
 80089a0:	059b      	lsls	r3, r3, #22
 80089a2:	d4e1      	bmi.n	8008968 <_fflush_r+0xc>
 80089a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80089a6:	f7ff fb8d 	bl	80080c4 <__retarget_lock_release_recursive>
 80089aa:	e7dd      	b.n	8008968 <_fflush_r+0xc>

080089ac <__swhatbuf_r>:
 80089ac:	b570      	push	{r4, r5, r6, lr}
 80089ae:	460c      	mov	r4, r1
 80089b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089b4:	2900      	cmp	r1, #0
 80089b6:	b096      	sub	sp, #88	@ 0x58
 80089b8:	4615      	mov	r5, r2
 80089ba:	461e      	mov	r6, r3
 80089bc:	da0d      	bge.n	80089da <__swhatbuf_r+0x2e>
 80089be:	89a3      	ldrh	r3, [r4, #12]
 80089c0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80089c4:	f04f 0100 	mov.w	r1, #0
 80089c8:	bf14      	ite	ne
 80089ca:	2340      	movne	r3, #64	@ 0x40
 80089cc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80089d0:	2000      	movs	r0, #0
 80089d2:	6031      	str	r1, [r6, #0]
 80089d4:	602b      	str	r3, [r5, #0]
 80089d6:	b016      	add	sp, #88	@ 0x58
 80089d8:	bd70      	pop	{r4, r5, r6, pc}
 80089da:	466a      	mov	r2, sp
 80089dc:	f000 f848 	bl	8008a70 <_fstat_r>
 80089e0:	2800      	cmp	r0, #0
 80089e2:	dbec      	blt.n	80089be <__swhatbuf_r+0x12>
 80089e4:	9901      	ldr	r1, [sp, #4]
 80089e6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80089ea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80089ee:	4259      	negs	r1, r3
 80089f0:	4159      	adcs	r1, r3
 80089f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80089f6:	e7eb      	b.n	80089d0 <__swhatbuf_r+0x24>

080089f8 <__smakebuf_r>:
 80089f8:	898b      	ldrh	r3, [r1, #12]
 80089fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80089fc:	079d      	lsls	r5, r3, #30
 80089fe:	4606      	mov	r6, r0
 8008a00:	460c      	mov	r4, r1
 8008a02:	d507      	bpl.n	8008a14 <__smakebuf_r+0x1c>
 8008a04:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008a08:	6023      	str	r3, [r4, #0]
 8008a0a:	6123      	str	r3, [r4, #16]
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	6163      	str	r3, [r4, #20]
 8008a10:	b003      	add	sp, #12
 8008a12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a14:	ab01      	add	r3, sp, #4
 8008a16:	466a      	mov	r2, sp
 8008a18:	f7ff ffc8 	bl	80089ac <__swhatbuf_r>
 8008a1c:	9f00      	ldr	r7, [sp, #0]
 8008a1e:	4605      	mov	r5, r0
 8008a20:	4639      	mov	r1, r7
 8008a22:	4630      	mov	r0, r6
 8008a24:	f7ff fbbc 	bl	80081a0 <_malloc_r>
 8008a28:	b948      	cbnz	r0, 8008a3e <__smakebuf_r+0x46>
 8008a2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a2e:	059a      	lsls	r2, r3, #22
 8008a30:	d4ee      	bmi.n	8008a10 <__smakebuf_r+0x18>
 8008a32:	f023 0303 	bic.w	r3, r3, #3
 8008a36:	f043 0302 	orr.w	r3, r3, #2
 8008a3a:	81a3      	strh	r3, [r4, #12]
 8008a3c:	e7e2      	b.n	8008a04 <__smakebuf_r+0xc>
 8008a3e:	89a3      	ldrh	r3, [r4, #12]
 8008a40:	6020      	str	r0, [r4, #0]
 8008a42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a46:	81a3      	strh	r3, [r4, #12]
 8008a48:	9b01      	ldr	r3, [sp, #4]
 8008a4a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008a4e:	b15b      	cbz	r3, 8008a68 <__smakebuf_r+0x70>
 8008a50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a54:	4630      	mov	r0, r6
 8008a56:	f000 f81d 	bl	8008a94 <_isatty_r>
 8008a5a:	b128      	cbz	r0, 8008a68 <__smakebuf_r+0x70>
 8008a5c:	89a3      	ldrh	r3, [r4, #12]
 8008a5e:	f023 0303 	bic.w	r3, r3, #3
 8008a62:	f043 0301 	orr.w	r3, r3, #1
 8008a66:	81a3      	strh	r3, [r4, #12]
 8008a68:	89a3      	ldrh	r3, [r4, #12]
 8008a6a:	431d      	orrs	r5, r3
 8008a6c:	81a5      	strh	r5, [r4, #12]
 8008a6e:	e7cf      	b.n	8008a10 <__smakebuf_r+0x18>

08008a70 <_fstat_r>:
 8008a70:	b538      	push	{r3, r4, r5, lr}
 8008a72:	4d07      	ldr	r5, [pc, #28]	@ (8008a90 <_fstat_r+0x20>)
 8008a74:	2300      	movs	r3, #0
 8008a76:	4604      	mov	r4, r0
 8008a78:	4608      	mov	r0, r1
 8008a7a:	4611      	mov	r1, r2
 8008a7c:	602b      	str	r3, [r5, #0]
 8008a7e:	f7f8 f91a 	bl	8000cb6 <_fstat>
 8008a82:	1c43      	adds	r3, r0, #1
 8008a84:	d102      	bne.n	8008a8c <_fstat_r+0x1c>
 8008a86:	682b      	ldr	r3, [r5, #0]
 8008a88:	b103      	cbz	r3, 8008a8c <_fstat_r+0x1c>
 8008a8a:	6023      	str	r3, [r4, #0]
 8008a8c:	bd38      	pop	{r3, r4, r5, pc}
 8008a8e:	bf00      	nop
 8008a90:	240003ac 	.word	0x240003ac

08008a94 <_isatty_r>:
 8008a94:	b538      	push	{r3, r4, r5, lr}
 8008a96:	4d06      	ldr	r5, [pc, #24]	@ (8008ab0 <_isatty_r+0x1c>)
 8008a98:	2300      	movs	r3, #0
 8008a9a:	4604      	mov	r4, r0
 8008a9c:	4608      	mov	r0, r1
 8008a9e:	602b      	str	r3, [r5, #0]
 8008aa0:	f7f8 f919 	bl	8000cd6 <_isatty>
 8008aa4:	1c43      	adds	r3, r0, #1
 8008aa6:	d102      	bne.n	8008aae <_isatty_r+0x1a>
 8008aa8:	682b      	ldr	r3, [r5, #0]
 8008aaa:	b103      	cbz	r3, 8008aae <_isatty_r+0x1a>
 8008aac:	6023      	str	r3, [r4, #0]
 8008aae:	bd38      	pop	{r3, r4, r5, pc}
 8008ab0:	240003ac 	.word	0x240003ac

08008ab4 <_sbrk_r>:
 8008ab4:	b538      	push	{r3, r4, r5, lr}
 8008ab6:	4d06      	ldr	r5, [pc, #24]	@ (8008ad0 <_sbrk_r+0x1c>)
 8008ab8:	2300      	movs	r3, #0
 8008aba:	4604      	mov	r4, r0
 8008abc:	4608      	mov	r0, r1
 8008abe:	602b      	str	r3, [r5, #0]
 8008ac0:	f7f8 f922 	bl	8000d08 <_sbrk>
 8008ac4:	1c43      	adds	r3, r0, #1
 8008ac6:	d102      	bne.n	8008ace <_sbrk_r+0x1a>
 8008ac8:	682b      	ldr	r3, [r5, #0]
 8008aca:	b103      	cbz	r3, 8008ace <_sbrk_r+0x1a>
 8008acc:	6023      	str	r3, [r4, #0]
 8008ace:	bd38      	pop	{r3, r4, r5, pc}
 8008ad0:	240003ac 	.word	0x240003ac

08008ad4 <_init>:
 8008ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ad6:	bf00      	nop
 8008ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ada:	bc08      	pop	{r3}
 8008adc:	469e      	mov	lr, r3
 8008ade:	4770      	bx	lr

08008ae0 <_fini>:
 8008ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ae2:	bf00      	nop
 8008ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ae6:	bc08      	pop	{r3}
 8008ae8:	469e      	mov	lr, r3
 8008aea:	4770      	bx	lr
