
14.ATIM-Deadband.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074b8  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08007750  08007750  00008750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007798  08007798  00008798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080077a0  080077a0  000087a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080077a4  080077a4  000087a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  24000000  080077a8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002c0  2400006c  08007814  0000906c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400032c  08007814  0000932c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00015d01  00000000  00000000  0000909a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002bc9  00000000  00000000  0001ed9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000010c8  00000000  00000000  00021968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000d02  00000000  00000000  00022a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003966b  00000000  00000000  00023732  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00019ff5  00000000  00000000  0005cd9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00167d65  00000000  00000000  00076d92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001deaf7  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004c14  00000000  00000000  001deb3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005a  00000000  00000000  001e3750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2400006c 	.word	0x2400006c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08007738 	.word	0x08007738

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000070 	.word	0x24000070
 80002d4:	08007738 	.word	0x08007738

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b988 	b.w	8000600 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	468e      	mov	lr, r1
 8000310:	4604      	mov	r4, r0
 8000312:	4688      	mov	r8, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d962      	bls.n	80003e4 <__udivmoddi4+0xdc>
 800031e:	fab2 f682 	clz	r6, r2
 8000322:	b14e      	cbz	r6, 8000338 <__udivmoddi4+0x30>
 8000324:	f1c6 0320 	rsb	r3, r6, #32
 8000328:	fa01 f806 	lsl.w	r8, r1, r6
 800032c:	fa20 f303 	lsr.w	r3, r0, r3
 8000330:	40b7      	lsls	r7, r6
 8000332:	ea43 0808 	orr.w	r8, r3, r8
 8000336:	40b4      	lsls	r4, r6
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	fbb8 f1fe 	udiv	r1, r8, lr
 8000344:	0c23      	lsrs	r3, r4, #16
 8000346:	fb0e 8811 	mls	r8, lr, r1, r8
 800034a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034e:	fb01 f20c 	mul.w	r2, r1, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d909      	bls.n	800036a <__udivmoddi4+0x62>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f101 30ff 	add.w	r0, r1, #4294967295
 800035c:	f080 80ea 	bcs.w	8000534 <__udivmoddi4+0x22c>
 8000360:	429a      	cmp	r2, r3
 8000362:	f240 80e7 	bls.w	8000534 <__udivmoddi4+0x22c>
 8000366:	3902      	subs	r1, #2
 8000368:	443b      	add	r3, r7
 800036a:	1a9a      	subs	r2, r3, r2
 800036c:	b2a3      	uxth	r3, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800037a:	fb00 fc0c 	mul.w	ip, r0, ip
 800037e:	459c      	cmp	ip, r3
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x8e>
 8000382:	18fb      	adds	r3, r7, r3
 8000384:	f100 32ff 	add.w	r2, r0, #4294967295
 8000388:	f080 80d6 	bcs.w	8000538 <__udivmoddi4+0x230>
 800038c:	459c      	cmp	ip, r3
 800038e:	f240 80d3 	bls.w	8000538 <__udivmoddi4+0x230>
 8000392:	443b      	add	r3, r7
 8000394:	3802      	subs	r0, #2
 8000396:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039a:	eba3 030c 	sub.w	r3, r3, ip
 800039e:	2100      	movs	r1, #0
 80003a0:	b11d      	cbz	r5, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40f3      	lsrs	r3, r6
 80003a4:	2200      	movs	r2, #0
 80003a6:	e9c5 3200 	strd	r3, r2, [r5]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d905      	bls.n	80003be <__udivmoddi4+0xb6>
 80003b2:	b10d      	cbz	r5, 80003b8 <__udivmoddi4+0xb0>
 80003b4:	e9c5 0100 	strd	r0, r1, [r5]
 80003b8:	2100      	movs	r1, #0
 80003ba:	4608      	mov	r0, r1
 80003bc:	e7f5      	b.n	80003aa <__udivmoddi4+0xa2>
 80003be:	fab3 f183 	clz	r1, r3
 80003c2:	2900      	cmp	r1, #0
 80003c4:	d146      	bne.n	8000454 <__udivmoddi4+0x14c>
 80003c6:	4573      	cmp	r3, lr
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xc8>
 80003ca:	4282      	cmp	r2, r0
 80003cc:	f200 8105 	bhi.w	80005da <__udivmoddi4+0x2d2>
 80003d0:	1a84      	subs	r4, r0, r2
 80003d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	4690      	mov	r8, r2
 80003da:	2d00      	cmp	r5, #0
 80003dc:	d0e5      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003de:	e9c5 4800 	strd	r4, r8, [r5]
 80003e2:	e7e2      	b.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	2a00      	cmp	r2, #0
 80003e6:	f000 8090 	beq.w	800050a <__udivmoddi4+0x202>
 80003ea:	fab2 f682 	clz	r6, r2
 80003ee:	2e00      	cmp	r6, #0
 80003f0:	f040 80a4 	bne.w	800053c <__udivmoddi4+0x234>
 80003f4:	1a8a      	subs	r2, r1, r2
 80003f6:	0c03      	lsrs	r3, r0, #16
 80003f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fc:	b280      	uxth	r0, r0
 80003fe:	b2bc      	uxth	r4, r7
 8000400:	2101      	movs	r1, #1
 8000402:	fbb2 fcfe 	udiv	ip, r2, lr
 8000406:	fb0e 221c 	mls	r2, lr, ip, r2
 800040a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800040e:	fb04 f20c 	mul.w	r2, r4, ip
 8000412:	429a      	cmp	r2, r3
 8000414:	d907      	bls.n	8000426 <__udivmoddi4+0x11e>
 8000416:	18fb      	adds	r3, r7, r3
 8000418:	f10c 38ff 	add.w	r8, ip, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x11c>
 800041e:	429a      	cmp	r2, r3
 8000420:	f200 80e0 	bhi.w	80005e4 <__udivmoddi4+0x2dc>
 8000424:	46c4      	mov	ip, r8
 8000426:	1a9b      	subs	r3, r3, r2
 8000428:	fbb3 f2fe 	udiv	r2, r3, lr
 800042c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000430:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000434:	fb02 f404 	mul.w	r4, r2, r4
 8000438:	429c      	cmp	r4, r3
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x144>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x142>
 8000444:	429c      	cmp	r4, r3
 8000446:	f200 80ca 	bhi.w	80005de <__udivmoddi4+0x2d6>
 800044a:	4602      	mov	r2, r0
 800044c:	1b1b      	subs	r3, r3, r4
 800044e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000452:	e7a5      	b.n	80003a0 <__udivmoddi4+0x98>
 8000454:	f1c1 0620 	rsb	r6, r1, #32
 8000458:	408b      	lsls	r3, r1
 800045a:	fa22 f706 	lsr.w	r7, r2, r6
 800045e:	431f      	orrs	r7, r3
 8000460:	fa0e f401 	lsl.w	r4, lr, r1
 8000464:	fa20 f306 	lsr.w	r3, r0, r6
 8000468:	fa2e fe06 	lsr.w	lr, lr, r6
 800046c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000470:	4323      	orrs	r3, r4
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	fa1f fc87 	uxth.w	ip, r7
 800047a:	fbbe f0f9 	udiv	r0, lr, r9
 800047e:	0c1c      	lsrs	r4, r3, #16
 8000480:	fb09 ee10 	mls	lr, r9, r0, lr
 8000484:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000488:	fb00 fe0c 	mul.w	lr, r0, ip
 800048c:	45a6      	cmp	lr, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	d909      	bls.n	80004a8 <__udivmoddi4+0x1a0>
 8000494:	193c      	adds	r4, r7, r4
 8000496:	f100 3aff 	add.w	sl, r0, #4294967295
 800049a:	f080 809c 	bcs.w	80005d6 <__udivmoddi4+0x2ce>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f240 8099 	bls.w	80005d6 <__udivmoddi4+0x2ce>
 80004a4:	3802      	subs	r0, #2
 80004a6:	443c      	add	r4, r7
 80004a8:	eba4 040e 	sub.w	r4, r4, lr
 80004ac:	fa1f fe83 	uxth.w	lr, r3
 80004b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b4:	fb09 4413 	mls	r4, r9, r3, r4
 80004b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c0:	45a4      	cmp	ip, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x1ce>
 80004c4:	193c      	adds	r4, r7, r4
 80004c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80004ca:	f080 8082 	bcs.w	80005d2 <__udivmoddi4+0x2ca>
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d97f      	bls.n	80005d2 <__udivmoddi4+0x2ca>
 80004d2:	3b02      	subs	r3, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	fba0 ec02 	umull	lr, ip, r0, r2
 80004e2:	4564      	cmp	r4, ip
 80004e4:	4673      	mov	r3, lr
 80004e6:	46e1      	mov	r9, ip
 80004e8:	d362      	bcc.n	80005b0 <__udivmoddi4+0x2a8>
 80004ea:	d05f      	beq.n	80005ac <__udivmoddi4+0x2a4>
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x1fe>
 80004ee:	ebb8 0203 	subs.w	r2, r8, r3
 80004f2:	eb64 0409 	sbc.w	r4, r4, r9
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	431e      	orrs	r6, r3
 8000500:	40cc      	lsrs	r4, r1
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e74f      	b.n	80003aa <__udivmoddi4+0xa2>
 800050a:	fbb1 fcf2 	udiv	ip, r1, r2
 800050e:	0c01      	lsrs	r1, r0, #16
 8000510:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000514:	b280      	uxth	r0, r0
 8000516:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800051a:	463b      	mov	r3, r7
 800051c:	4638      	mov	r0, r7
 800051e:	463c      	mov	r4, r7
 8000520:	46b8      	mov	r8, r7
 8000522:	46be      	mov	lr, r7
 8000524:	2620      	movs	r6, #32
 8000526:	fbb1 f1f7 	udiv	r1, r1, r7
 800052a:	eba2 0208 	sub.w	r2, r2, r8
 800052e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000532:	e766      	b.n	8000402 <__udivmoddi4+0xfa>
 8000534:	4601      	mov	r1, r0
 8000536:	e718      	b.n	800036a <__udivmoddi4+0x62>
 8000538:	4610      	mov	r0, r2
 800053a:	e72c      	b.n	8000396 <__udivmoddi4+0x8e>
 800053c:	f1c6 0220 	rsb	r2, r6, #32
 8000540:	fa2e f302 	lsr.w	r3, lr, r2
 8000544:	40b7      	lsls	r7, r6
 8000546:	40b1      	lsls	r1, r6
 8000548:	fa20 f202 	lsr.w	r2, r0, r2
 800054c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000550:	430a      	orrs	r2, r1
 8000552:	fbb3 f8fe 	udiv	r8, r3, lr
 8000556:	b2bc      	uxth	r4, r7
 8000558:	fb0e 3318 	mls	r3, lr, r8, r3
 800055c:	0c11      	lsrs	r1, r2, #16
 800055e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000562:	fb08 f904 	mul.w	r9, r8, r4
 8000566:	40b0      	lsls	r0, r6
 8000568:	4589      	cmp	r9, r1
 800056a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800056e:	b280      	uxth	r0, r0
 8000570:	d93e      	bls.n	80005f0 <__udivmoddi4+0x2e8>
 8000572:	1879      	adds	r1, r7, r1
 8000574:	f108 3cff 	add.w	ip, r8, #4294967295
 8000578:	d201      	bcs.n	800057e <__udivmoddi4+0x276>
 800057a:	4589      	cmp	r9, r1
 800057c:	d81f      	bhi.n	80005be <__udivmoddi4+0x2b6>
 800057e:	eba1 0109 	sub.w	r1, r1, r9
 8000582:	fbb1 f9fe 	udiv	r9, r1, lr
 8000586:	fb09 f804 	mul.w	r8, r9, r4
 800058a:	fb0e 1119 	mls	r1, lr, r9, r1
 800058e:	b292      	uxth	r2, r2
 8000590:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000594:	4542      	cmp	r2, r8
 8000596:	d229      	bcs.n	80005ec <__udivmoddi4+0x2e4>
 8000598:	18ba      	adds	r2, r7, r2
 800059a:	f109 31ff 	add.w	r1, r9, #4294967295
 800059e:	d2c4      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a0:	4542      	cmp	r2, r8
 80005a2:	d2c2      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a4:	f1a9 0102 	sub.w	r1, r9, #2
 80005a8:	443a      	add	r2, r7
 80005aa:	e7be      	b.n	800052a <__udivmoddi4+0x222>
 80005ac:	45f0      	cmp	r8, lr
 80005ae:	d29d      	bcs.n	80004ec <__udivmoddi4+0x1e4>
 80005b0:	ebbe 0302 	subs.w	r3, lr, r2
 80005b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005b8:	3801      	subs	r0, #1
 80005ba:	46e1      	mov	r9, ip
 80005bc:	e796      	b.n	80004ec <__udivmoddi4+0x1e4>
 80005be:	eba7 0909 	sub.w	r9, r7, r9
 80005c2:	4449      	add	r1, r9
 80005c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80005c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80005cc:	fb09 f804 	mul.w	r8, r9, r4
 80005d0:	e7db      	b.n	800058a <__udivmoddi4+0x282>
 80005d2:	4673      	mov	r3, lr
 80005d4:	e77f      	b.n	80004d6 <__udivmoddi4+0x1ce>
 80005d6:	4650      	mov	r0, sl
 80005d8:	e766      	b.n	80004a8 <__udivmoddi4+0x1a0>
 80005da:	4608      	mov	r0, r1
 80005dc:	e6fd      	b.n	80003da <__udivmoddi4+0xd2>
 80005de:	443b      	add	r3, r7
 80005e0:	3a02      	subs	r2, #2
 80005e2:	e733      	b.n	800044c <__udivmoddi4+0x144>
 80005e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e8:	443b      	add	r3, r7
 80005ea:	e71c      	b.n	8000426 <__udivmoddi4+0x11e>
 80005ec:	4649      	mov	r1, r9
 80005ee:	e79c      	b.n	800052a <__udivmoddi4+0x222>
 80005f0:	eba1 0109 	sub.w	r1, r1, r9
 80005f4:	46c4      	mov	ip, r8
 80005f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80005fa:	fb09 f804 	mul.w	r8, r9, r4
 80005fe:	e7c4      	b.n	800058a <__udivmoddi4+0x282>

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <MX_BEEP_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_BEEP_GPIO_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b086      	sub	sp, #24
 8000608:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
 8000616:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000618:	4b12      	ldr	r3, [pc, #72]	@ (8000664 <MX_BEEP_GPIO_Init+0x60>)
 800061a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800061e:	4a11      	ldr	r2, [pc, #68]	@ (8000664 <MX_BEEP_GPIO_Init+0x60>)
 8000620:	f043 0310 	orr.w	r3, r3, #16
 8000624:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000628:	4b0e      	ldr	r3, [pc, #56]	@ (8000664 <MX_BEEP_GPIO_Init+0x60>)
 800062a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800062e:	f003 0310 	and.w	r3, r3, #16
 8000632:	603b      	str	r3, [r7, #0]
 8000634:	683b      	ldr	r3, [r7, #0]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BEEP_GPIO_Port, BEEP_Pin, GPIO_PIN_RESET);
 8000636:	2200      	movs	r2, #0
 8000638:	2110      	movs	r1, #16
 800063a:	480b      	ldr	r0, [pc, #44]	@ (8000668 <MX_BEEP_GPIO_Init+0x64>)
 800063c:	f001 f920 	bl	8001880 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BEEP_Pin */
  GPIO_InitStruct.Pin = BEEP_Pin;
 8000640:	2310      	movs	r3, #16
 8000642:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000644:	2301      	movs	r3, #1
 8000646:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000648:	2300      	movs	r3, #0
 800064a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064c:	2300      	movs	r3, #0
 800064e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000650:	1d3b      	adds	r3, r7, #4
 8000652:	4619      	mov	r1, r3
 8000654:	4804      	ldr	r0, [pc, #16]	@ (8000668 <MX_BEEP_GPIO_Init+0x64>)
 8000656:	f000 ff63 	bl	8001520 <HAL_GPIO_Init>
}
 800065a:	bf00      	nop
 800065c:	3718      	adds	r7, #24
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	58024400 	.word	0x58024400
 8000668:	58021000 	.word	0x58021000

0800066c <MX_KEY_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_KEY_GPIO_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b086      	sub	sp, #24
 8000670:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000672:	1d3b      	adds	r3, r7, #4
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000680:	4b14      	ldr	r3, [pc, #80]	@ (80006d4 <MX_KEY_GPIO_Init+0x68>)
 8000682:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000686:	4a13      	ldr	r2, [pc, #76]	@ (80006d4 <MX_KEY_GPIO_Init+0x68>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000690:	4b10      	ldr	r3, [pc, #64]	@ (80006d4 <MX_KEY_GPIO_Init+0x68>)
 8000692:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	603b      	str	r3, [r7, #0]
 800069c:	683b      	ldr	r3, [r7, #0]
  /*Configure GPIO pin : WK_UP_Pin */
  GPIO_InitStruct.Pin = WK_UP_Pin;
 800069e:	2301      	movs	r3, #1
 80006a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006a2:	2300      	movs	r3, #0
 80006a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006a6:	2302      	movs	r3, #2
 80006a8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(WK_UP_GPIO_Port, &GPIO_InitStruct);
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	4619      	mov	r1, r3
 80006ae:	480a      	ldr	r0, [pc, #40]	@ (80006d8 <MX_KEY_GPIO_Init+0x6c>)
 80006b0:	f000 ff36 	bl	8001520 <HAL_GPIO_Init>
  /*Configure GPIO pins : KEY0_Pin KEY1_Pin */
  GPIO_InitStruct.Pin = KEY0_Pin|KEY1_Pin;
 80006b4:	f248 0302 	movw	r3, #32770	@ 0x8002
 80006b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ba:	2300      	movs	r3, #0
 80006bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006be:	2301      	movs	r3, #1
 80006c0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	4619      	mov	r1, r3
 80006c6:	4804      	ldr	r0, [pc, #16]	@ (80006d8 <MX_KEY_GPIO_Init+0x6c>)
 80006c8:	f000 ff2a 	bl	8001520 <HAL_GPIO_Init>
}
 80006cc:	bf00      	nop
 80006ce:	3718      	adds	r7, #24
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	58024400 	.word	0x58024400
 80006d8:	58020000 	.word	0x58020000

080006dc <MX_LED_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_LED_GPIO_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b088      	sub	sp, #32
 80006e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e2:	f107 030c 	add.w	r3, r7, #12
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
 80006f0:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006f2:	4b24      	ldr	r3, [pc, #144]	@ (8000784 <MX_LED_GPIO_Init+0xa8>)
 80006f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006f8:	4a22      	ldr	r2, [pc, #136]	@ (8000784 <MX_LED_GPIO_Init+0xa8>)
 80006fa:	f043 0310 	orr.w	r3, r3, #16
 80006fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000702:	4b20      	ldr	r3, [pc, #128]	@ (8000784 <MX_LED_GPIO_Init+0xa8>)
 8000704:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000708:	f003 0310 	and.w	r3, r3, #16
 800070c:	60bb      	str	r3, [r7, #8]
 800070e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000710:	4b1c      	ldr	r3, [pc, #112]	@ (8000784 <MX_LED_GPIO_Init+0xa8>)
 8000712:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000716:	4a1b      	ldr	r2, [pc, #108]	@ (8000784 <MX_LED_GPIO_Init+0xa8>)
 8000718:	f043 0302 	orr.w	r3, r3, #2
 800071c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000720:	4b18      	ldr	r3, [pc, #96]	@ (8000784 <MX_LED_GPIO_Init+0xa8>)
 8000722:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000726:	f003 0302 	and.w	r3, r3, #2
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_Pin|LED2_Pin, GPIO_PIN_SET);
 800072e:	2201      	movs	r2, #1
 8000730:	2160      	movs	r1, #96	@ 0x60
 8000732:	4815      	ldr	r0, [pc, #84]	@ (8000788 <MX_LED_GPIO_Init+0xac>)
 8000734:	f001 f8a4 	bl	8001880 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 8000738:	2201      	movs	r2, #1
 800073a:	2110      	movs	r1, #16
 800073c:	4813      	ldr	r0, [pc, #76]	@ (800078c <MX_LED_GPIO_Init+0xb0>)
 800073e:	f001 f89f 	bl	8001880 <HAL_GPIO_WritePin>
  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000742:	2360      	movs	r3, #96	@ 0x60
 8000744:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000746:	2301      	movs	r3, #1
 8000748:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074e:	2300      	movs	r3, #0
 8000750:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000752:	f107 030c 	add.w	r3, r7, #12
 8000756:	4619      	mov	r1, r3
 8000758:	480b      	ldr	r0, [pc, #44]	@ (8000788 <MX_LED_GPIO_Init+0xac>)
 800075a:	f000 fee1 	bl	8001520 <HAL_GPIO_Init>
  /*Configure GPIO pin : LED0_Pin */
  GPIO_InitStruct.Pin = LED0_Pin;
 800075e:	2310      	movs	r3, #16
 8000760:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000762:	2301      	movs	r3, #1
 8000764:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076a:	2300      	movs	r3, #0
 800076c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 800076e:	f107 030c 	add.w	r3, r7, #12
 8000772:	4619      	mov	r1, r3
 8000774:	4805      	ldr	r0, [pc, #20]	@ (800078c <MX_LED_GPIO_Init+0xb0>)
 8000776:	f000 fed3 	bl	8001520 <HAL_GPIO_Init>
}
 800077a:	bf00      	nop
 800077c:	3720      	adds	r7, #32
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	58024400 	.word	0x58024400
 8000788:	58021000 	.word	0x58021000
 800078c:	58020400 	.word	0x58020400

08000790 <bsp_init>:
#include "bsp_init.h"

void bsp_init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
	MX_LED_GPIO_Init();
 8000794:	f7ff ffa2 	bl	80006dc <MX_LED_GPIO_Init>
	MX_BEEP_GPIO_Init();
 8000798:	f7ff ff34 	bl	8000604 <MX_BEEP_GPIO_Init>
	MX_KEY_GPIO_Init();
 800079c:	f7ff ff66 	bl	800066c <MX_KEY_GPIO_Init>
	// MX_EXTI_GPIO_Init();
	MX_USART1_UART_Init();
 80007a0:	f000 fb8c 	bl	8000ebc <MX_USART1_UART_Init>
	// MX_IWDG1_Init(); // 溢出时间约1s
	// MX_TIM6_Init(); // 溢出时间约500ms
}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80007ac:	f000 f896 	bl	80008dc <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b0:	f000 fc80 	bl	80010b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b4:	f000 f816 	bl	80007e4 <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  bsp_init();
 80007b8:	f7ff ffea 	bl	8000790 <bsp_init>
  printf("ATIM BKIN Test\r\n");
 80007bc:	4807      	ldr	r0, [pc, #28]	@ (80007dc <main+0x34>)
 80007be:	f006 fc27 	bl	8007010 <puts>
  MX_TIM1_Init();
 80007c2:	f000 fa33 	bl	8000c2c <MX_TIM1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_GPIO_TogglePin(LED_RED_Port, LED_RED_Pin);
 80007c6:	2140      	movs	r1, #64	@ 0x40
 80007c8:	4805      	ldr	r0, [pc, #20]	@ (80007e0 <main+0x38>)
 80007ca:	f001 f872 	bl	80018b2 <HAL_GPIO_TogglePin>
    HAL_Delay(1000);
 80007ce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007d2:	f000 fced 	bl	80011b0 <HAL_Delay>
	HAL_GPIO_TogglePin(LED_RED_Port, LED_RED_Pin);
 80007d6:	bf00      	nop
 80007d8:	e7f5      	b.n	80007c6 <main+0x1e>
 80007da:	bf00      	nop
 80007dc:	08007750 	.word	0x08007750
 80007e0:	58021000 	.word	0x58021000

080007e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b09c      	sub	sp, #112	@ 0x70
 80007e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007ee:	224c      	movs	r2, #76	@ 0x4c
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f006 fcec 	bl	80071d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f8:	1d3b      	adds	r3, r7, #4
 80007fa:	2220      	movs	r2, #32
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f006 fce6 	bl	80071d0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000804:	2002      	movs	r0, #2
 8000806:	f001 f86f 	bl	80018e8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800080a:	2300      	movs	r3, #0
 800080c:	603b      	str	r3, [r7, #0]
 800080e:	4b31      	ldr	r3, [pc, #196]	@ (80008d4 <SystemClock_Config+0xf0>)
 8000810:	699b      	ldr	r3, [r3, #24]
 8000812:	4a30      	ldr	r2, [pc, #192]	@ (80008d4 <SystemClock_Config+0xf0>)
 8000814:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000818:	6193      	str	r3, [r2, #24]
 800081a:	4b2e      	ldr	r3, [pc, #184]	@ (80008d4 <SystemClock_Config+0xf0>)
 800081c:	699b      	ldr	r3, [r3, #24]
 800081e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000822:	603b      	str	r3, [r7, #0]
 8000824:	4b2c      	ldr	r3, [pc, #176]	@ (80008d8 <SystemClock_Config+0xf4>)
 8000826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000828:	4a2b      	ldr	r2, [pc, #172]	@ (80008d8 <SystemClock_Config+0xf4>)
 800082a:	f043 0301 	orr.w	r3, r3, #1
 800082e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000830:	4b29      	ldr	r3, [pc, #164]	@ (80008d8 <SystemClock_Config+0xf4>)
 8000832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000834:	f003 0301 	and.w	r3, r3, #1
 8000838:	603b      	str	r3, [r7, #0]
 800083a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800083c:	bf00      	nop
 800083e:	4b25      	ldr	r3, [pc, #148]	@ (80008d4 <SystemClock_Config+0xf0>)
 8000840:	699b      	ldr	r3, [r3, #24]
 8000842:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000846:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800084a:	d1f8      	bne.n	800083e <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800084c:	2309      	movs	r3, #9
 800084e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000850:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000854:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000856:	2301      	movs	r3, #1
 8000858:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800085a:	2302      	movs	r3, #2
 800085c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800085e:	2302      	movs	r3, #2
 8000860:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000862:	2302      	movs	r3, #2
 8000864:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 8000866:	23f0      	movs	r3, #240	@ 0xf0
 8000868:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800086a:	2302      	movs	r3, #2
 800086c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800086e:	2302      	movs	r3, #2
 8000870:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000872:	2302      	movs	r3, #2
 8000874:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000876:	2308      	movs	r3, #8
 8000878:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800087a:	2300      	movs	r3, #0
 800087c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800087e:	2300      	movs	r3, #0
 8000880:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000882:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000886:	4618      	mov	r0, r3
 8000888:	f001 f868 	bl	800195c <HAL_RCC_OscConfig>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000892:	f000 f84f 	bl	8000934 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000896:	233f      	movs	r3, #63	@ 0x3f
 8000898:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800089a:	2303      	movs	r3, #3
 800089c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800089e:	2300      	movs	r3, #0
 80008a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80008a2:	2308      	movs	r3, #8
 80008a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008a6:	2340      	movs	r3, #64	@ 0x40
 80008a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008aa:	2340      	movs	r3, #64	@ 0x40
 80008ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008b2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008b4:	2340      	movs	r3, #64	@ 0x40
 80008b6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008b8:	1d3b      	adds	r3, r7, #4
 80008ba:	2104      	movs	r1, #4
 80008bc:	4618      	mov	r0, r3
 80008be:	f001 fca7 	bl	8002210 <HAL_RCC_ClockConfig>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80008c8:	f000 f834 	bl	8000934 <Error_Handler>
  }
}
 80008cc:	bf00      	nop
 80008ce:	3770      	adds	r7, #112	@ 0x70
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	58024800 	.word	0x58024800
 80008d8:	58000400 	.word	0x58000400

080008dc <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80008e2:	463b      	mov	r3, r7
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
 80008ec:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80008ee:	f000 fd9f 	bl	8001430 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80008f2:	2301      	movs	r3, #1
 80008f4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80008f6:	2300      	movs	r3, #0
 80008f8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80008fa:	2300      	movs	r3, #0
 80008fc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80008fe:	231f      	movs	r3, #31
 8000900:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000902:	2387      	movs	r3, #135	@ 0x87
 8000904:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000906:	2300      	movs	r3, #0
 8000908:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800090a:	2300      	movs	r3, #0
 800090c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800090e:	2301      	movs	r3, #1
 8000910:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000912:	2301      	movs	r3, #1
 8000914:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000916:	2300      	movs	r3, #0
 8000918:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800091a:	2300      	movs	r3, #0
 800091c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800091e:	463b      	mov	r3, r7
 8000920:	4618      	mov	r0, r3
 8000922:	f000 fdbd 	bl	80014a0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000926:	2004      	movs	r0, #4
 8000928:	f000 fd9a 	bl	8001460 <HAL_MPU_Enable>

}
 800092c:	bf00      	nop
 800092e:	3710      	adds	r7, #16
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}

08000934 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000938:	b672      	cpsid	i
}
 800093a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800093c:	bf00      	nop
 800093e:	e7fd      	b.n	800093c <Error_Handler+0x8>

08000940 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000946:	4b0a      	ldr	r3, [pc, #40]	@ (8000970 <HAL_MspInit+0x30>)
 8000948:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800094c:	4a08      	ldr	r2, [pc, #32]	@ (8000970 <HAL_MspInit+0x30>)
 800094e:	f043 0302 	orr.w	r3, r3, #2
 8000952:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000956:	4b06      	ldr	r3, [pc, #24]	@ (8000970 <HAL_MspInit+0x30>)
 8000958:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800095c:	f003 0302 	and.w	r3, r3, #2
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000964:	bf00      	nop
 8000966:	370c      	adds	r7, #12
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr
 8000970:	58024400 	.word	0x58024400

08000974 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b086      	sub	sp, #24
 8000978:	af00      	add	r7, sp, #0
 800097a:	60f8      	str	r0, [r7, #12]
 800097c:	60b9      	str	r1, [r7, #8]
 800097e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000980:	2300      	movs	r3, #0
 8000982:	617b      	str	r3, [r7, #20]
 8000984:	e00a      	b.n	800099c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000986:	f3af 8000 	nop.w
 800098a:	4601      	mov	r1, r0
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	1c5a      	adds	r2, r3, #1
 8000990:	60ba      	str	r2, [r7, #8]
 8000992:	b2ca      	uxtb	r2, r1
 8000994:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000996:	697b      	ldr	r3, [r7, #20]
 8000998:	3301      	adds	r3, #1
 800099a:	617b      	str	r3, [r7, #20]
 800099c:	697a      	ldr	r2, [r7, #20]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	429a      	cmp	r2, r3
 80009a2:	dbf0      	blt.n	8000986 <_read+0x12>
  }

  return len;
 80009a4:	687b      	ldr	r3, [r7, #4]
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3718      	adds	r7, #24
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}

080009ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009ae:	b580      	push	{r7, lr}
 80009b0:	b086      	sub	sp, #24
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	60f8      	str	r0, [r7, #12]
 80009b6:	60b9      	str	r1, [r7, #8]
 80009b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ba:	2300      	movs	r3, #0
 80009bc:	617b      	str	r3, [r7, #20]
 80009be:	e009      	b.n	80009d4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	1c5a      	adds	r2, r3, #1
 80009c4:	60ba      	str	r2, [r7, #8]
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	4618      	mov	r0, r3
 80009ca:	f000 fb35 	bl	8001038 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	3301      	adds	r3, #1
 80009d2:	617b      	str	r3, [r7, #20]
 80009d4:	697a      	ldr	r2, [r7, #20]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	429a      	cmp	r2, r3
 80009da:	dbf1      	blt.n	80009c0 <_write+0x12>
  }
  return len;
 80009dc:	687b      	ldr	r3, [r7, #4]
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3718      	adds	r7, #24
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}

080009e6 <_close>:

int _close(int file)
{
 80009e6:	b480      	push	{r7}
 80009e8:	b083      	sub	sp, #12
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr

080009fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009fe:	b480      	push	{r7}
 8000a00:	b083      	sub	sp, #12
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	6078      	str	r0, [r7, #4]
 8000a06:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a0e:	605a      	str	r2, [r3, #4]
  return 0;
 8000a10:	2300      	movs	r3, #0
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr

08000a1e <_isatty>:

int _isatty(int file)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	b083      	sub	sp, #12
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a26:	2301      	movs	r3, #1
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b085      	sub	sp, #20
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	60f8      	str	r0, [r7, #12]
 8000a3c:	60b9      	str	r1, [r7, #8]
 8000a3e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a40:	2300      	movs	r3, #0
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3714      	adds	r7, #20
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
	...

08000a50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b086      	sub	sp, #24
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a58:	4a14      	ldr	r2, [pc, #80]	@ (8000aac <_sbrk+0x5c>)
 8000a5a:	4b15      	ldr	r3, [pc, #84]	@ (8000ab0 <_sbrk+0x60>)
 8000a5c:	1ad3      	subs	r3, r2, r3
 8000a5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a64:	4b13      	ldr	r3, [pc, #76]	@ (8000ab4 <_sbrk+0x64>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d102      	bne.n	8000a72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a6c:	4b11      	ldr	r3, [pc, #68]	@ (8000ab4 <_sbrk+0x64>)
 8000a6e:	4a12      	ldr	r2, [pc, #72]	@ (8000ab8 <_sbrk+0x68>)
 8000a70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a72:	4b10      	ldr	r3, [pc, #64]	@ (8000ab4 <_sbrk+0x64>)
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	4413      	add	r3, r2
 8000a7a:	693a      	ldr	r2, [r7, #16]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	d207      	bcs.n	8000a90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a80:	f006 fbf4 	bl	800726c <__errno>
 8000a84:	4603      	mov	r3, r0
 8000a86:	220c      	movs	r2, #12
 8000a88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8e:	e009      	b.n	8000aa4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a90:	4b08      	ldr	r3, [pc, #32]	@ (8000ab4 <_sbrk+0x64>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a96:	4b07      	ldr	r3, [pc, #28]	@ (8000ab4 <_sbrk+0x64>)
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4413      	add	r3, r2
 8000a9e:	4a05      	ldr	r2, [pc, #20]	@ (8000ab4 <_sbrk+0x64>)
 8000aa0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aa2:	68fb      	ldr	r3, [r7, #12]
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3718      	adds	r7, #24
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	24080000 	.word	0x24080000
 8000ab0:	00000400 	.word	0x00000400
 8000ab4:	24000088 	.word	0x24000088
 8000ab8:	24000330 	.word	0x24000330

08000abc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ac0:	4b43      	ldr	r3, [pc, #268]	@ (8000bd0 <SystemInit+0x114>)
 8000ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ac6:	4a42      	ldr	r2, [pc, #264]	@ (8000bd0 <SystemInit+0x114>)
 8000ac8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000acc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ad0:	4b40      	ldr	r3, [pc, #256]	@ (8000bd4 <SystemInit+0x118>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f003 030f 	and.w	r3, r3, #15
 8000ad8:	2b06      	cmp	r3, #6
 8000ada:	d807      	bhi.n	8000aec <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000adc:	4b3d      	ldr	r3, [pc, #244]	@ (8000bd4 <SystemInit+0x118>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f023 030f 	bic.w	r3, r3, #15
 8000ae4:	4a3b      	ldr	r2, [pc, #236]	@ (8000bd4 <SystemInit+0x118>)
 8000ae6:	f043 0307 	orr.w	r3, r3, #7
 8000aea:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000aec:	4b3a      	ldr	r3, [pc, #232]	@ (8000bd8 <SystemInit+0x11c>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a39      	ldr	r2, [pc, #228]	@ (8000bd8 <SystemInit+0x11c>)
 8000af2:	f043 0301 	orr.w	r3, r3, #1
 8000af6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000af8:	4b37      	ldr	r3, [pc, #220]	@ (8000bd8 <SystemInit+0x11c>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000afe:	4b36      	ldr	r3, [pc, #216]	@ (8000bd8 <SystemInit+0x11c>)
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	4935      	ldr	r1, [pc, #212]	@ (8000bd8 <SystemInit+0x11c>)
 8000b04:	4b35      	ldr	r3, [pc, #212]	@ (8000bdc <SystemInit+0x120>)
 8000b06:	4013      	ands	r3, r2
 8000b08:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b0a:	4b32      	ldr	r3, [pc, #200]	@ (8000bd4 <SystemInit+0x118>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f003 0308 	and.w	r3, r3, #8
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d007      	beq.n	8000b26 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b16:	4b2f      	ldr	r3, [pc, #188]	@ (8000bd4 <SystemInit+0x118>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f023 030f 	bic.w	r3, r3, #15
 8000b1e:	4a2d      	ldr	r2, [pc, #180]	@ (8000bd4 <SystemInit+0x118>)
 8000b20:	f043 0307 	orr.w	r3, r3, #7
 8000b24:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000b26:	4b2c      	ldr	r3, [pc, #176]	@ (8000bd8 <SystemInit+0x11c>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000b2c:	4b2a      	ldr	r3, [pc, #168]	@ (8000bd8 <SystemInit+0x11c>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000b32:	4b29      	ldr	r3, [pc, #164]	@ (8000bd8 <SystemInit+0x11c>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000b38:	4b27      	ldr	r3, [pc, #156]	@ (8000bd8 <SystemInit+0x11c>)
 8000b3a:	4a29      	ldr	r2, [pc, #164]	@ (8000be0 <SystemInit+0x124>)
 8000b3c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000b3e:	4b26      	ldr	r3, [pc, #152]	@ (8000bd8 <SystemInit+0x11c>)
 8000b40:	4a28      	ldr	r2, [pc, #160]	@ (8000be4 <SystemInit+0x128>)
 8000b42:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b44:	4b24      	ldr	r3, [pc, #144]	@ (8000bd8 <SystemInit+0x11c>)
 8000b46:	4a28      	ldr	r2, [pc, #160]	@ (8000be8 <SystemInit+0x12c>)
 8000b48:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b4a:	4b23      	ldr	r3, [pc, #140]	@ (8000bd8 <SystemInit+0x11c>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b50:	4b21      	ldr	r3, [pc, #132]	@ (8000bd8 <SystemInit+0x11c>)
 8000b52:	4a25      	ldr	r2, [pc, #148]	@ (8000be8 <SystemInit+0x12c>)
 8000b54:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b56:	4b20      	ldr	r3, [pc, #128]	@ (8000bd8 <SystemInit+0x11c>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b5c:	4b1e      	ldr	r3, [pc, #120]	@ (8000bd8 <SystemInit+0x11c>)
 8000b5e:	4a22      	ldr	r2, [pc, #136]	@ (8000be8 <SystemInit+0x12c>)
 8000b60:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b62:	4b1d      	ldr	r3, [pc, #116]	@ (8000bd8 <SystemInit+0x11c>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b68:	4b1b      	ldr	r3, [pc, #108]	@ (8000bd8 <SystemInit+0x11c>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a1a      	ldr	r2, [pc, #104]	@ (8000bd8 <SystemInit+0x11c>)
 8000b6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b72:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b74:	4b18      	ldr	r3, [pc, #96]	@ (8000bd8 <SystemInit+0x11c>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000bec <SystemInit+0x130>)
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000bf0 <SystemInit+0x134>)
 8000b80:	4013      	ands	r3, r2
 8000b82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000b86:	d202      	bcs.n	8000b8e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b88:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf4 <SystemInit+0x138>)
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000b8e:	4b12      	ldr	r3, [pc, #72]	@ (8000bd8 <SystemInit+0x11c>)
 8000b90:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000b94:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d113      	bne.n	8000bc4 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000b9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd8 <SystemInit+0x11c>)
 8000b9e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000ba2:	4a0d      	ldr	r2, [pc, #52]	@ (8000bd8 <SystemInit+0x11c>)
 8000ba4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ba8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000bac:	4b12      	ldr	r3, [pc, #72]	@ (8000bf8 <SystemInit+0x13c>)
 8000bae:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000bb2:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000bb4:	4b08      	ldr	r3, [pc, #32]	@ (8000bd8 <SystemInit+0x11c>)
 8000bb6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000bba:	4a07      	ldr	r2, [pc, #28]	@ (8000bd8 <SystemInit+0x11c>)
 8000bbc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000bc0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000bc4:	bf00      	nop
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	e000ed00 	.word	0xe000ed00
 8000bd4:	52002000 	.word	0x52002000
 8000bd8:	58024400 	.word	0x58024400
 8000bdc:	eaf6ed7f 	.word	0xeaf6ed7f
 8000be0:	02020200 	.word	0x02020200
 8000be4:	01ff0000 	.word	0x01ff0000
 8000be8:	01010280 	.word	0x01010280
 8000bec:	5c001000 	.word	0x5c001000
 8000bf0:	ffff0000 	.word	0xffff0000
 8000bf4:	51008108 	.word	0x51008108
 8000bf8:	52004000 	.word	0x52004000

08000bfc <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000c00:	4b09      	ldr	r3, [pc, #36]	@ (8000c28 <ExitRun0Mode+0x2c>)
 8000c02:	68db      	ldr	r3, [r3, #12]
 8000c04:	4a08      	ldr	r2, [pc, #32]	@ (8000c28 <ExitRun0Mode+0x2c>)
 8000c06:	f043 0302 	orr.w	r3, r3, #2
 8000c0a:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000c0c:	bf00      	nop
 8000c0e:	4b06      	ldr	r3, [pc, #24]	@ (8000c28 <ExitRun0Mode+0x2c>)
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d0f9      	beq.n	8000c0e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000c1a:	bf00      	nop
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	58024800 	.word	0x58024800

08000c2c <MX_TIM1_Init>:
TIM_OC_InitTypeDef sConfigOC = {0};
TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM1_Init 0 */

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c30:	4b58      	ldr	r3, [pc, #352]	@ (8000d94 <MX_TIM1_Init+0x168>)
 8000c32:	4a59      	ldr	r2, [pc, #356]	@ (8000d98 <MX_TIM1_Init+0x16c>)
 8000c34:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 479;
 8000c36:	4b57      	ldr	r3, [pc, #348]	@ (8000d94 <MX_TIM1_Init+0x168>)
 8000c38:	f240 12df 	movw	r2, #479	@ 0x1df
 8000c3c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c3e:	4b55      	ldr	r3, [pc, #340]	@ (8000d94 <MX_TIM1_Init+0x168>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8000c44:	4b53      	ldr	r3, [pc, #332]	@ (8000d94 <MX_TIM1_Init+0x168>)
 8000c46:	2263      	movs	r2, #99	@ 0x63
 8000c48:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c4a:	4b52      	ldr	r3, [pc, #328]	@ (8000d94 <MX_TIM1_Init+0x168>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c50:	4b50      	ldr	r3, [pc, #320]	@ (8000d94 <MX_TIM1_Init+0x168>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c56:	4b4f      	ldr	r3, [pc, #316]	@ (8000d94 <MX_TIM1_Init+0x168>)
 8000c58:	2280      	movs	r2, #128	@ 0x80
 8000c5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c5c:	484d      	ldr	r0, [pc, #308]	@ (8000d94 <MX_TIM1_Init+0x168>)
 8000c5e:	f003 fc8f 	bl	8004580 <HAL_TIM_Base_Init>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_TIM1_Init+0x40>
  {
    Error_Handler();
 8000c68:	f7ff fe64 	bl	8000934 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c6c:	4b4b      	ldr	r3, [pc, #300]	@ (8000d9c <MX_TIM1_Init+0x170>)
 8000c6e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000c72:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c74:	4949      	ldr	r1, [pc, #292]	@ (8000d9c <MX_TIM1_Init+0x170>)
 8000c76:	4847      	ldr	r0, [pc, #284]	@ (8000d94 <MX_TIM1_Init+0x168>)
 8000c78:	f003 ff5c 	bl	8004b34 <HAL_TIM_ConfigClockSource>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000c82:	f7ff fe57 	bl	8000934 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c86:	4843      	ldr	r0, [pc, #268]	@ (8000d94 <MX_TIM1_Init+0x168>)
 8000c88:	f003 fcd1 	bl	800462e <HAL_TIM_PWM_Init>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8000c92:	f7ff fe4f 	bl	8000934 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c96:	4b42      	ldr	r3, [pc, #264]	@ (8000da0 <MX_TIM1_Init+0x174>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c9c:	4b40      	ldr	r3, [pc, #256]	@ (8000da0 <MX_TIM1_Init+0x174>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ca2:	4b3f      	ldr	r3, [pc, #252]	@ (8000da0 <MX_TIM1_Init+0x174>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ca8:	493d      	ldr	r1, [pc, #244]	@ (8000da0 <MX_TIM1_Init+0x174>)
 8000caa:	483a      	ldr	r0, [pc, #232]	@ (8000d94 <MX_TIM1_Init+0x168>)
 8000cac:	f004 fd36 	bl	800571c <HAL_TIMEx_MasterConfigSynchronization>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000cb6:	f7ff fe3d 	bl	8000934 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 8000cba:	4b3a      	ldr	r3, [pc, #232]	@ (8000da4 <MX_TIM1_Init+0x178>)
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	601a      	str	r2, [r3, #0]
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8000cc0:	4b38      	ldr	r3, [pc, #224]	@ (8000da4 <MX_TIM1_Init+0x178>)
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	605a      	str	r2, [r3, #4]
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8000cc6:	4b37      	ldr	r3, [pc, #220]	@ (8000da4 <MX_TIM1_Init+0x178>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8000ccc:	4a35      	ldr	r2, [pc, #212]	@ (8000da4 <MX_TIM1_Init+0x178>)
 8000cce:	2101      	movs	r1, #1
 8000cd0:	4830      	ldr	r0, [pc, #192]	@ (8000d94 <MX_TIM1_Init+0x168>)
 8000cd2:	f004 fe2f 	bl	8005934 <HAL_TIMEx_ConfigBreakInput>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8000cdc:	f7ff fe2a 	bl	8000934 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ce0:	4b31      	ldr	r3, [pc, #196]	@ (8000da8 <MX_TIM1_Init+0x17c>)
 8000ce2:	2260      	movs	r2, #96	@ 0x60
 8000ce4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 70;
 8000ce6:	4b30      	ldr	r3, [pc, #192]	@ (8000da8 <MX_TIM1_Init+0x17c>)
 8000ce8:	2246      	movs	r2, #70	@ 0x46
 8000cea:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000cec:	4b2e      	ldr	r3, [pc, #184]	@ (8000da8 <MX_TIM1_Init+0x17c>)
 8000cee:	2202      	movs	r2, #2
 8000cf0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8000cf2:	4b2d      	ldr	r3, [pc, #180]	@ (8000da8 <MX_TIM1_Init+0x17c>)
 8000cf4:	2208      	movs	r2, #8
 8000cf6:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cf8:	4b2b      	ldr	r3, [pc, #172]	@ (8000da8 <MX_TIM1_Init+0x17c>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8000cfe:	4b2a      	ldr	r3, [pc, #168]	@ (8000da8 <MX_TIM1_Init+0x17c>)
 8000d00:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d04:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8000d06:	4b28      	ldr	r3, [pc, #160]	@ (8000da8 <MX_TIM1_Init+0x17c>)
 8000d08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	4925      	ldr	r1, [pc, #148]	@ (8000da8 <MX_TIM1_Init+0x17c>)
 8000d12:	4820      	ldr	r0, [pc, #128]	@ (8000d94 <MX_TIM1_Init+0x168>)
 8000d14:	f003 fdfa 	bl	800490c <HAL_TIM_PWM_ConfigChannel>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000d1e:	f7ff fe09 	bl	8000934 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d22:	4b22      	ldr	r3, [pc, #136]	@ (8000dac <MX_TIM1_Init+0x180>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d28:	4b20      	ldr	r3, [pc, #128]	@ (8000dac <MX_TIM1_Init+0x180>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d2e:	4b1f      	ldr	r3, [pc, #124]	@ (8000dac <MX_TIM1_Init+0x180>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 48;
 8000d34:	4b1d      	ldr	r3, [pc, #116]	@ (8000dac <MX_TIM1_Init+0x180>)
 8000d36:	2230      	movs	r2, #48	@ 0x30
 8000d38:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8000d3a:	4b1c      	ldr	r3, [pc, #112]	@ (8000dac <MX_TIM1_Init+0x180>)
 8000d3c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000d40:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 8000d42:	4b1a      	ldr	r3, [pc, #104]	@ (8000dac <MX_TIM1_Init+0x180>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 4;
 8000d48:	4b18      	ldr	r3, [pc, #96]	@ (8000dac <MX_TIM1_Init+0x180>)
 8000d4a:	2204      	movs	r2, #4
 8000d4c:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000d4e:	4b17      	ldr	r3, [pc, #92]	@ (8000dac <MX_TIM1_Init+0x180>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000d54:	4b15      	ldr	r3, [pc, #84]	@ (8000dac <MX_TIM1_Init+0x180>)
 8000d56:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000d5a:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000d5c:	4b13      	ldr	r3, [pc, #76]	@ (8000dac <MX_TIM1_Init+0x180>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d62:	4b12      	ldr	r3, [pc, #72]	@ (8000dac <MX_TIM1_Init+0x180>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d68:	4910      	ldr	r1, [pc, #64]	@ (8000dac <MX_TIM1_Init+0x180>)
 8000d6a:	480a      	ldr	r0, [pc, #40]	@ (8000d94 <MX_TIM1_Init+0x168>)
 8000d6c:	f004 fd64 	bl	8005838 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 8000d76:	f7ff fddd 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000d7a:	4806      	ldr	r0, [pc, #24]	@ (8000d94 <MX_TIM1_Init+0x168>)
 8000d7c:	f000 f862 	bl	8000e44 <HAL_TIM_MspPostInit>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);   // Start PWM signal generation on TIM1 Channel 1
 8000d80:	2100      	movs	r1, #0
 8000d82:	4804      	ldr	r0, [pc, #16]	@ (8000d94 <MX_TIM1_Init+0x168>)
 8000d84:	f003 fcb4 	bl	80046f0 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);// Start PWM signal generation on TIM1 Channel 1N (complementary output)
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4802      	ldr	r0, [pc, #8]	@ (8000d94 <MX_TIM1_Init+0x168>)
 8000d8c:	f004 fc04 	bl	8005598 <HAL_TIMEx_PWMN_Start>
}
 8000d90:	bf00      	nop
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	2400008c 	.word	0x2400008c
 8000d98:	40010000 	.word	0x40010000
 8000d9c:	240000d8 	.word	0x240000d8
 8000da0:	240000e8 	.word	0x240000e8
 8000da4:	240000f4 	.word	0x240000f4
 8000da8:	24000100 	.word	0x24000100
 8000dac:	2400011c 	.word	0x2400011c

08000db0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b08a      	sub	sp, #40	@ 0x28
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db8:	f107 0314 	add.w	r3, r7, #20
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
 8000dc6:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a1a      	ldr	r2, [pc, #104]	@ (8000e38 <HAL_TIM_Base_MspInit+0x88>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d12e      	bne.n	8000e30 <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000dd2:	4b1a      	ldr	r3, [pc, #104]	@ (8000e3c <HAL_TIM_Base_MspInit+0x8c>)
 8000dd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000dd8:	4a18      	ldr	r2, [pc, #96]	@ (8000e3c <HAL_TIM_Base_MspInit+0x8c>)
 8000dda:	f043 0301 	orr.w	r3, r3, #1
 8000dde:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000de2:	4b16      	ldr	r3, [pc, #88]	@ (8000e3c <HAL_TIM_Base_MspInit+0x8c>)
 8000de4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000de8:	f003 0301 	and.w	r3, r3, #1
 8000dec:	613b      	str	r3, [r7, #16]
 8000dee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000df0:	4b12      	ldr	r3, [pc, #72]	@ (8000e3c <HAL_TIM_Base_MspInit+0x8c>)
 8000df2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000df6:	4a11      	ldr	r2, [pc, #68]	@ (8000e3c <HAL_TIM_Base_MspInit+0x8c>)
 8000df8:	f043 0310 	orr.w	r3, r3, #16
 8000dfc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e00:	4b0e      	ldr	r3, [pc, #56]	@ (8000e3c <HAL_TIM_Base_MspInit+0x8c>)
 8000e02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e06:	f003 0310 	and.w	r3, r3, #16
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE15     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = PWM_BKIN_Pin;
 8000e0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000e12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e14:	2302      	movs	r3, #2
 8000e16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e20:	2301      	movs	r3, #1
 8000e22:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_BKIN_GPIO_Port, &GPIO_InitStruct);
 8000e24:	f107 0314 	add.w	r3, r7, #20
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4805      	ldr	r0, [pc, #20]	@ (8000e40 <HAL_TIM_Base_MspInit+0x90>)
 8000e2c:	f000 fb78 	bl	8001520 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000e30:	bf00      	nop
 8000e32:	3728      	adds	r7, #40	@ 0x28
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	40010000 	.word	0x40010000
 8000e3c:	58024400 	.word	0x58024400
 8000e40:	58021000 	.word	0x58021000

08000e44 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b088      	sub	sp, #32
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4c:	f107 030c 	add.w	r3, r7, #12
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]
 8000e5a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a13      	ldr	r2, [pc, #76]	@ (8000eb0 <HAL_TIM_MspPostInit+0x6c>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d11f      	bne.n	8000ea6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e66:	4b13      	ldr	r3, [pc, #76]	@ (8000eb4 <HAL_TIM_MspPostInit+0x70>)
 8000e68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e6c:	4a11      	ldr	r2, [pc, #68]	@ (8000eb4 <HAL_TIM_MspPostInit+0x70>)
 8000e6e:	f043 0310 	orr.w	r3, r3, #16
 8000e72:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e76:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb4 <HAL_TIM_MspPostInit+0x70>)
 8000e78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e7c:	f003 0310 	and.w	r3, r3, #16
 8000e80:	60bb      	str	r3, [r7, #8]
 8000e82:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE8     ------> TIM1_CH1N
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWM_CH1N_Pin|PWM_CH1_Pin;
 8000e84:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e88:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e92:	2302      	movs	r3, #2
 8000e94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e96:	2301      	movs	r3, #1
 8000e98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e9a:	f107 030c 	add.w	r3, r7, #12
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4805      	ldr	r0, [pc, #20]	@ (8000eb8 <HAL_TIM_MspPostInit+0x74>)
 8000ea2:	f000 fb3d 	bl	8001520 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000ea6:	bf00      	nop
 8000ea8:	3720      	adds	r7, #32
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40010000 	.word	0x40010000
 8000eb4:	58024400 	.word	0x58024400
 8000eb8:	58021000 	.word	0x58021000

08000ebc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ec0:	4b22      	ldr	r3, [pc, #136]	@ (8000f4c <MX_USART1_UART_Init+0x90>)
 8000ec2:	4a23      	ldr	r2, [pc, #140]	@ (8000f50 <MX_USART1_UART_Init+0x94>)
 8000ec4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ec6:	4b21      	ldr	r3, [pc, #132]	@ (8000f4c <MX_USART1_UART_Init+0x90>)
 8000ec8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ecc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ece:	4b1f      	ldr	r3, [pc, #124]	@ (8000f4c <MX_USART1_UART_Init+0x90>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ed4:	4b1d      	ldr	r3, [pc, #116]	@ (8000f4c <MX_USART1_UART_Init+0x90>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000eda:	4b1c      	ldr	r3, [pc, #112]	@ (8000f4c <MX_USART1_UART_Init+0x90>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ee0:	4b1a      	ldr	r3, [pc, #104]	@ (8000f4c <MX_USART1_UART_Init+0x90>)
 8000ee2:	220c      	movs	r2, #12
 8000ee4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ee6:	4b19      	ldr	r3, [pc, #100]	@ (8000f4c <MX_USART1_UART_Init+0x90>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eec:	4b17      	ldr	r3, [pc, #92]	@ (8000f4c <MX_USART1_UART_Init+0x90>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ef2:	4b16      	ldr	r3, [pc, #88]	@ (8000f4c <MX_USART1_UART_Init+0x90>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ef8:	4b14      	ldr	r3, [pc, #80]	@ (8000f4c <MX_USART1_UART_Init+0x90>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000efe:	4b13      	ldr	r3, [pc, #76]	@ (8000f4c <MX_USART1_UART_Init+0x90>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f04:	4811      	ldr	r0, [pc, #68]	@ (8000f4c <MX_USART1_UART_Init+0x90>)
 8000f06:	f004 fe00 	bl	8005b0a <HAL_UART_Init>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000f10:	f7ff fd10 	bl	8000934 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f14:	2100      	movs	r1, #0
 8000f16:	480d      	ldr	r0, [pc, #52]	@ (8000f4c <MX_USART1_UART_Init+0x90>)
 8000f18:	f005 fe97 	bl	8006c4a <HAL_UARTEx_SetTxFifoThreshold>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000f22:	f7ff fd07 	bl	8000934 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f26:	2100      	movs	r1, #0
 8000f28:	4808      	ldr	r0, [pc, #32]	@ (8000f4c <MX_USART1_UART_Init+0x90>)
 8000f2a:	f005 fecc 	bl	8006cc6 <HAL_UARTEx_SetRxFifoThreshold>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000f34:	f7ff fcfe 	bl	8000934 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000f38:	4804      	ldr	r0, [pc, #16]	@ (8000f4c <MX_USART1_UART_Init+0x90>)
 8000f3a:	f005 fe4d 	bl	8006bd8 <HAL_UARTEx_DisableFifoMode>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000f44:	f7ff fcf6 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f48:	bf00      	nop
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	24000148 	.word	0x24000148
 8000f50:	40011000 	.word	0x40011000

08000f54 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b0ba      	sub	sp, #232	@ 0xe8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f6c:	f107 0310 	add.w	r3, r7, #16
 8000f70:	22c0      	movs	r2, #192	@ 0xc0
 8000f72:	2100      	movs	r1, #0
 8000f74:	4618      	mov	r0, r3
 8000f76:	f006 f92b 	bl	80071d0 <memset>
  if(uartHandle->Instance==USART1)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a2b      	ldr	r2, [pc, #172]	@ (800102c <HAL_UART_MspInit+0xd8>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d14e      	bne.n	8001022 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f84:	f04f 0201 	mov.w	r2, #1
 8000f88:	f04f 0300 	mov.w	r3, #0
 8000f8c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000f90:	2300      	movs	r3, #0
 8000f92:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f96:	f107 0310 	add.w	r3, r7, #16
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f001 fcc4 	bl	8002928 <HAL_RCCEx_PeriphCLKConfig>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000fa6:	f7ff fcc5 	bl	8000934 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000faa:	4b21      	ldr	r3, [pc, #132]	@ (8001030 <HAL_UART_MspInit+0xdc>)
 8000fac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000fb0:	4a1f      	ldr	r2, [pc, #124]	@ (8001030 <HAL_UART_MspInit+0xdc>)
 8000fb2:	f043 0310 	orr.w	r3, r3, #16
 8000fb6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000fba:	4b1d      	ldr	r3, [pc, #116]	@ (8001030 <HAL_UART_MspInit+0xdc>)
 8000fbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000fc0:	f003 0310 	and.w	r3, r3, #16
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc8:	4b19      	ldr	r3, [pc, #100]	@ (8001030 <HAL_UART_MspInit+0xdc>)
 8000fca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fce:	4a18      	ldr	r2, [pc, #96]	@ (8001030 <HAL_UART_MspInit+0xdc>)
 8000fd0:	f043 0301 	orr.w	r3, r3, #1
 8000fd4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fd8:	4b15      	ldr	r3, [pc, #84]	@ (8001030 <HAL_UART_MspInit+0xdc>)
 8000fda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	60bb      	str	r3, [r7, #8]
 8000fe4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000fe6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000fea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001000:	2307      	movs	r3, #7
 8001002:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001006:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800100a:	4619      	mov	r1, r3
 800100c:	4809      	ldr	r0, [pc, #36]	@ (8001034 <HAL_UART_MspInit+0xe0>)
 800100e:	f000 fa87 	bl	8001520 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001012:	2200      	movs	r2, #0
 8001014:	2100      	movs	r1, #0
 8001016:	2025      	movs	r0, #37	@ 0x25
 8001018:	f000 f9d5 	bl	80013c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800101c:	2025      	movs	r0, #37	@ 0x25
 800101e:	f000 f9ec 	bl	80013fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001022:	bf00      	nop
 8001024:	37e8      	adds	r7, #232	@ 0xe8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40011000 	.word	0x40011000
 8001030:	58024400 	.word	0x58024400
 8001034:	58020000 	.word	0x58020000

08001038 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

/* printf重定向 */
PUTCHAR_PROTOTYPE
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001040:	1d39      	adds	r1, r7, #4
 8001042:	f04f 33ff 	mov.w	r3, #4294967295
 8001046:	2201      	movs	r2, #1
 8001048:	4803      	ldr	r0, [pc, #12]	@ (8001058 <__io_putchar+0x20>)
 800104a:	f004 fdae 	bl	8005baa <HAL_UART_Transmit>
    return ch;
 800104e:	687b      	ldr	r3, [r7, #4]
}
 8001050:	4618      	mov	r0, r3
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	24000148 	.word	0x24000148

0800105c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800105c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001098 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001060:	f7ff fdcc 	bl	8000bfc <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001064:	f7ff fd2a 	bl	8000abc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001068:	480c      	ldr	r0, [pc, #48]	@ (800109c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800106a:	490d      	ldr	r1, [pc, #52]	@ (80010a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800106c:	4a0d      	ldr	r2, [pc, #52]	@ (80010a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800106e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001070:	e002      	b.n	8001078 <LoopCopyDataInit>

08001072 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001072:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001074:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001076:	3304      	adds	r3, #4

08001078 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001078:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800107a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800107c:	d3f9      	bcc.n	8001072 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800107e:	4a0a      	ldr	r2, [pc, #40]	@ (80010a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001080:	4c0a      	ldr	r4, [pc, #40]	@ (80010ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001082:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001084:	e001      	b.n	800108a <LoopFillZerobss>

08001086 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001086:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001088:	3204      	adds	r2, #4

0800108a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800108a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800108c:	d3fb      	bcc.n	8001086 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800108e:	f006 f8f3 	bl	8007278 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001092:	f7ff fb89 	bl	80007a8 <main>
  bx  lr
 8001096:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001098:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800109c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80010a0:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 80010a4:	080077a8 	.word	0x080077a8
  ldr r2, =_sbss
 80010a8:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 80010ac:	2400032c 	.word	0x2400032c

080010b0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010b0:	e7fe      	b.n	80010b0 <ADC3_IRQHandler>
	...

080010b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ba:	2003      	movs	r0, #3
 80010bc:	f000 f978 	bl	80013b0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80010c0:	f001 fa5c 	bl	800257c <HAL_RCC_GetSysClockFreq>
 80010c4:	4602      	mov	r2, r0
 80010c6:	4b15      	ldr	r3, [pc, #84]	@ (800111c <HAL_Init+0x68>)
 80010c8:	699b      	ldr	r3, [r3, #24]
 80010ca:	0a1b      	lsrs	r3, r3, #8
 80010cc:	f003 030f 	and.w	r3, r3, #15
 80010d0:	4913      	ldr	r1, [pc, #76]	@ (8001120 <HAL_Init+0x6c>)
 80010d2:	5ccb      	ldrb	r3, [r1, r3]
 80010d4:	f003 031f 	and.w	r3, r3, #31
 80010d8:	fa22 f303 	lsr.w	r3, r2, r3
 80010dc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80010de:	4b0f      	ldr	r3, [pc, #60]	@ (800111c <HAL_Init+0x68>)
 80010e0:	699b      	ldr	r3, [r3, #24]
 80010e2:	f003 030f 	and.w	r3, r3, #15
 80010e6:	4a0e      	ldr	r2, [pc, #56]	@ (8001120 <HAL_Init+0x6c>)
 80010e8:	5cd3      	ldrb	r3, [r2, r3]
 80010ea:	f003 031f 	and.w	r3, r3, #31
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	fa22 f303 	lsr.w	r3, r2, r3
 80010f4:	4a0b      	ldr	r2, [pc, #44]	@ (8001124 <HAL_Init+0x70>)
 80010f6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80010f8:	4a0b      	ldr	r2, [pc, #44]	@ (8001128 <HAL_Init+0x74>)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010fe:	200f      	movs	r0, #15
 8001100:	f000 f814 	bl	800112c <HAL_InitTick>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e002      	b.n	8001114 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800110e:	f7ff fc17 	bl	8000940 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001112:	2300      	movs	r3, #0
}
 8001114:	4618      	mov	r0, r3
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	58024400 	.word	0x58024400
 8001120:	08007760 	.word	0x08007760
 8001124:	24000004 	.word	0x24000004
 8001128:	24000000 	.word	0x24000000

0800112c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001134:	4b15      	ldr	r3, [pc, #84]	@ (800118c <HAL_InitTick+0x60>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d101      	bne.n	8001140 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800113c:	2301      	movs	r3, #1
 800113e:	e021      	b.n	8001184 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001140:	4b13      	ldr	r3, [pc, #76]	@ (8001190 <HAL_InitTick+0x64>)
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	4b11      	ldr	r3, [pc, #68]	@ (800118c <HAL_InitTick+0x60>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	4619      	mov	r1, r3
 800114a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800114e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001152:	fbb2 f3f3 	udiv	r3, r2, r3
 8001156:	4618      	mov	r0, r3
 8001158:	f000 f95d 	bl	8001416 <HAL_SYSTICK_Config>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e00e      	b.n	8001184 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2b0f      	cmp	r3, #15
 800116a:	d80a      	bhi.n	8001182 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800116c:	2200      	movs	r2, #0
 800116e:	6879      	ldr	r1, [r7, #4]
 8001170:	f04f 30ff 	mov.w	r0, #4294967295
 8001174:	f000 f927 	bl	80013c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001178:	4a06      	ldr	r2, [pc, #24]	@ (8001194 <HAL_InitTick+0x68>)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800117e:	2300      	movs	r3, #0
 8001180:	e000      	b.n	8001184 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
}
 8001184:	4618      	mov	r0, r3
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	2400000c 	.word	0x2400000c
 8001190:	24000000 	.word	0x24000000
 8001194:	24000008 	.word	0x24000008

08001198 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  return uwTick;
 800119c:	4b03      	ldr	r3, [pc, #12]	@ (80011ac <HAL_GetTick+0x14>)
 800119e:	681b      	ldr	r3, [r3, #0]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	240001dc 	.word	0x240001dc

080011b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011b8:	f7ff ffee 	bl	8001198 <HAL_GetTick>
 80011bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011c8:	d005      	beq.n	80011d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ca:	4b0a      	ldr	r3, [pc, #40]	@ (80011f4 <HAL_Delay+0x44>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	461a      	mov	r2, r3
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	4413      	add	r3, r2
 80011d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011d6:	bf00      	nop
 80011d8:	f7ff ffde 	bl	8001198 <HAL_GetTick>
 80011dc:	4602      	mov	r2, r0
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	68fa      	ldr	r2, [r7, #12]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d8f7      	bhi.n	80011d8 <HAL_Delay+0x28>
  {
  }
}
 80011e8:	bf00      	nop
 80011ea:	bf00      	nop
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	2400000c 	.word	0x2400000c

080011f8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80011fc:	4b03      	ldr	r3, [pc, #12]	@ (800120c <HAL_GetREVID+0x14>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	0c1b      	lsrs	r3, r3, #16
}
 8001202:	4618      	mov	r0, r3
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	5c001000 	.word	0x5c001000

08001210 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f003 0307 	and.w	r3, r3, #7
 800121e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001220:	4b0b      	ldr	r3, [pc, #44]	@ (8001250 <__NVIC_SetPriorityGrouping+0x40>)
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001226:	68ba      	ldr	r2, [r7, #8]
 8001228:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800122c:	4013      	ands	r3, r2
 800122e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001238:	4b06      	ldr	r3, [pc, #24]	@ (8001254 <__NVIC_SetPriorityGrouping+0x44>)
 800123a:	4313      	orrs	r3, r2
 800123c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800123e:	4a04      	ldr	r2, [pc, #16]	@ (8001250 <__NVIC_SetPriorityGrouping+0x40>)
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	60d3      	str	r3, [r2, #12]
}
 8001244:	bf00      	nop
 8001246:	3714      	adds	r7, #20
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr
 8001250:	e000ed00 	.word	0xe000ed00
 8001254:	05fa0000 	.word	0x05fa0000

08001258 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800125c:	4b04      	ldr	r3, [pc, #16]	@ (8001270 <__NVIC_GetPriorityGrouping+0x18>)
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	0a1b      	lsrs	r3, r3, #8
 8001262:	f003 0307 	and.w	r3, r3, #7
}
 8001266:	4618      	mov	r0, r3
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	e000ed00 	.word	0xe000ed00

08001274 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800127e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001282:	2b00      	cmp	r3, #0
 8001284:	db0b      	blt.n	800129e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001286:	88fb      	ldrh	r3, [r7, #6]
 8001288:	f003 021f 	and.w	r2, r3, #31
 800128c:	4907      	ldr	r1, [pc, #28]	@ (80012ac <__NVIC_EnableIRQ+0x38>)
 800128e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001292:	095b      	lsrs	r3, r3, #5
 8001294:	2001      	movs	r0, #1
 8001296:	fa00 f202 	lsl.w	r2, r0, r2
 800129a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800129e:	bf00      	nop
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	e000e100 	.word	0xe000e100

080012b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	6039      	str	r1, [r7, #0]
 80012ba:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80012bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	db0a      	blt.n	80012da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	b2da      	uxtb	r2, r3
 80012c8:	490c      	ldr	r1, [pc, #48]	@ (80012fc <__NVIC_SetPriority+0x4c>)
 80012ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012ce:	0112      	lsls	r2, r2, #4
 80012d0:	b2d2      	uxtb	r2, r2
 80012d2:	440b      	add	r3, r1
 80012d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012d8:	e00a      	b.n	80012f0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	4908      	ldr	r1, [pc, #32]	@ (8001300 <__NVIC_SetPriority+0x50>)
 80012e0:	88fb      	ldrh	r3, [r7, #6]
 80012e2:	f003 030f 	and.w	r3, r3, #15
 80012e6:	3b04      	subs	r3, #4
 80012e8:	0112      	lsls	r2, r2, #4
 80012ea:	b2d2      	uxtb	r2, r2
 80012ec:	440b      	add	r3, r1
 80012ee:	761a      	strb	r2, [r3, #24]
}
 80012f0:	bf00      	nop
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	e000e100 	.word	0xe000e100
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001304:	b480      	push	{r7}
 8001306:	b089      	sub	sp, #36	@ 0x24
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	f003 0307 	and.w	r3, r3, #7
 8001316:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	f1c3 0307 	rsb	r3, r3, #7
 800131e:	2b04      	cmp	r3, #4
 8001320:	bf28      	it	cs
 8001322:	2304      	movcs	r3, #4
 8001324:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	3304      	adds	r3, #4
 800132a:	2b06      	cmp	r3, #6
 800132c:	d902      	bls.n	8001334 <NVIC_EncodePriority+0x30>
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	3b03      	subs	r3, #3
 8001332:	e000      	b.n	8001336 <NVIC_EncodePriority+0x32>
 8001334:	2300      	movs	r3, #0
 8001336:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001338:	f04f 32ff 	mov.w	r2, #4294967295
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	43da      	mvns	r2, r3
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	401a      	ands	r2, r3
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800134c:	f04f 31ff 	mov.w	r1, #4294967295
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	fa01 f303 	lsl.w	r3, r1, r3
 8001356:	43d9      	mvns	r1, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800135c:	4313      	orrs	r3, r2
         );
}
 800135e:	4618      	mov	r0, r3
 8001360:	3724      	adds	r7, #36	@ 0x24
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
	...

0800136c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	3b01      	subs	r3, #1
 8001378:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800137c:	d301      	bcc.n	8001382 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800137e:	2301      	movs	r3, #1
 8001380:	e00f      	b.n	80013a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001382:	4a0a      	ldr	r2, [pc, #40]	@ (80013ac <SysTick_Config+0x40>)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	3b01      	subs	r3, #1
 8001388:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800138a:	210f      	movs	r1, #15
 800138c:	f04f 30ff 	mov.w	r0, #4294967295
 8001390:	f7ff ff8e 	bl	80012b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001394:	4b05      	ldr	r3, [pc, #20]	@ (80013ac <SysTick_Config+0x40>)
 8001396:	2200      	movs	r2, #0
 8001398:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800139a:	4b04      	ldr	r3, [pc, #16]	@ (80013ac <SysTick_Config+0x40>)
 800139c:	2207      	movs	r2, #7
 800139e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	e000e010 	.word	0xe000e010

080013b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f7ff ff29 	bl	8001210 <__NVIC_SetPriorityGrouping>
}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b086      	sub	sp, #24
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	4603      	mov	r3, r0
 80013ce:	60b9      	str	r1, [r7, #8]
 80013d0:	607a      	str	r2, [r7, #4]
 80013d2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013d4:	f7ff ff40 	bl	8001258 <__NVIC_GetPriorityGrouping>
 80013d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	68b9      	ldr	r1, [r7, #8]
 80013de:	6978      	ldr	r0, [r7, #20]
 80013e0:	f7ff ff90 	bl	8001304 <NVIC_EncodePriority>
 80013e4:	4602      	mov	r2, r0
 80013e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013ea:	4611      	mov	r1, r2
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff ff5f 	bl	80012b0 <__NVIC_SetPriority>
}
 80013f2:	bf00      	nop
 80013f4:	3718      	adds	r7, #24
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b082      	sub	sp, #8
 80013fe:	af00      	add	r7, sp, #0
 8001400:	4603      	mov	r3, r0
 8001402:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001404:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff ff33 	bl	8001274 <__NVIC_EnableIRQ>
}
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001416:	b580      	push	{r7, lr}
 8001418:	b082      	sub	sp, #8
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f7ff ffa4 	bl	800136c <SysTick_Config>
 8001424:	4603      	mov	r3, r0
}
 8001426:	4618      	mov	r0, r3
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
	...

08001430 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001434:	f3bf 8f5f 	dmb	sy
}
 8001438:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800143a:	4b07      	ldr	r3, [pc, #28]	@ (8001458 <HAL_MPU_Disable+0x28>)
 800143c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800143e:	4a06      	ldr	r2, [pc, #24]	@ (8001458 <HAL_MPU_Disable+0x28>)
 8001440:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001444:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001446:	4b05      	ldr	r3, [pc, #20]	@ (800145c <HAL_MPU_Disable+0x2c>)
 8001448:	2200      	movs	r2, #0
 800144a:	605a      	str	r2, [r3, #4]
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	e000ed00 	.word	0xe000ed00
 800145c:	e000ed90 	.word	0xe000ed90

08001460 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001468:	4a0b      	ldr	r2, [pc, #44]	@ (8001498 <HAL_MPU_Enable+0x38>)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	f043 0301 	orr.w	r3, r3, #1
 8001470:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001472:	4b0a      	ldr	r3, [pc, #40]	@ (800149c <HAL_MPU_Enable+0x3c>)
 8001474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001476:	4a09      	ldr	r2, [pc, #36]	@ (800149c <HAL_MPU_Enable+0x3c>)
 8001478:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800147c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800147e:	f3bf 8f4f 	dsb	sy
}
 8001482:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001484:	f3bf 8f6f 	isb	sy
}
 8001488:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	e000ed90 	.word	0xe000ed90
 800149c:	e000ed00 	.word	0xe000ed00

080014a0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	785a      	ldrb	r2, [r3, #1]
 80014ac:	4b1b      	ldr	r3, [pc, #108]	@ (800151c <HAL_MPU_ConfigRegion+0x7c>)
 80014ae:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80014b0:	4b1a      	ldr	r3, [pc, #104]	@ (800151c <HAL_MPU_ConfigRegion+0x7c>)
 80014b2:	691b      	ldr	r3, [r3, #16]
 80014b4:	4a19      	ldr	r2, [pc, #100]	@ (800151c <HAL_MPU_ConfigRegion+0x7c>)
 80014b6:	f023 0301 	bic.w	r3, r3, #1
 80014ba:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80014bc:	4a17      	ldr	r2, [pc, #92]	@ (800151c <HAL_MPU_ConfigRegion+0x7c>)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	7b1b      	ldrb	r3, [r3, #12]
 80014c8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	7adb      	ldrb	r3, [r3, #11]
 80014ce:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80014d0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	7a9b      	ldrb	r3, [r3, #10]
 80014d6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80014d8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	7b5b      	ldrb	r3, [r3, #13]
 80014de:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80014e0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	7b9b      	ldrb	r3, [r3, #14]
 80014e6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80014e8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	7bdb      	ldrb	r3, [r3, #15]
 80014ee:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80014f0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	7a5b      	ldrb	r3, [r3, #9]
 80014f6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80014f8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	7a1b      	ldrb	r3, [r3, #8]
 80014fe:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001500:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	7812      	ldrb	r2, [r2, #0]
 8001506:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001508:	4a04      	ldr	r2, [pc, #16]	@ (800151c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800150a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800150c:	6113      	str	r3, [r2, #16]
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	e000ed90 	.word	0xe000ed90

08001520 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001520:	b480      	push	{r7}
 8001522:	b089      	sub	sp, #36	@ 0x24
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800152a:	2300      	movs	r3, #0
 800152c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800152e:	4b89      	ldr	r3, [pc, #548]	@ (8001754 <HAL_GPIO_Init+0x234>)
 8001530:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001532:	e194      	b.n	800185e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	2101      	movs	r1, #1
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	fa01 f303 	lsl.w	r3, r1, r3
 8001540:	4013      	ands	r3, r2
 8001542:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	2b00      	cmp	r3, #0
 8001548:	f000 8186 	beq.w	8001858 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f003 0303 	and.w	r3, r3, #3
 8001554:	2b01      	cmp	r3, #1
 8001556:	d005      	beq.n	8001564 <HAL_GPIO_Init+0x44>
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f003 0303 	and.w	r3, r3, #3
 8001560:	2b02      	cmp	r3, #2
 8001562:	d130      	bne.n	80015c6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	2203      	movs	r2, #3
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	43db      	mvns	r3, r3
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	4013      	ands	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	68da      	ldr	r2, [r3, #12]
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	4313      	orrs	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800159a:	2201      	movs	r2, #1
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	fa02 f303 	lsl.w	r3, r2, r3
 80015a2:	43db      	mvns	r3, r3
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	4013      	ands	r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	091b      	lsrs	r3, r3, #4
 80015b0:	f003 0201 	and.w	r2, r3, #1
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	4313      	orrs	r3, r2
 80015be:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f003 0303 	and.w	r3, r3, #3
 80015ce:	2b03      	cmp	r3, #3
 80015d0:	d017      	beq.n	8001602 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	68db      	ldr	r3, [r3, #12]
 80015d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	2203      	movs	r2, #3
 80015de:	fa02 f303 	lsl.w	r3, r2, r3
 80015e2:	43db      	mvns	r3, r3
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	4013      	ands	r3, r2
 80015e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	689a      	ldr	r2, [r3, #8]
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f003 0303 	and.w	r3, r3, #3
 800160a:	2b02      	cmp	r3, #2
 800160c:	d123      	bne.n	8001656 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	08da      	lsrs	r2, r3, #3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	3208      	adds	r2, #8
 8001616:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800161a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	f003 0307 	and.w	r3, r3, #7
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	220f      	movs	r2, #15
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	43db      	mvns	r3, r3
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	4013      	ands	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	691a      	ldr	r2, [r3, #16]
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	f003 0307 	and.w	r3, r3, #7
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	fa02 f303 	lsl.w	r3, r2, r3
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	4313      	orrs	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	08da      	lsrs	r2, r3, #3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3208      	adds	r2, #8
 8001650:	69b9      	ldr	r1, [r7, #24]
 8001652:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	2203      	movs	r2, #3
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	43db      	mvns	r3, r3
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	4013      	ands	r3, r2
 800166c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f003 0203 	and.w	r2, r3, #3
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	4313      	orrs	r3, r2
 8001682:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001692:	2b00      	cmp	r3, #0
 8001694:	f000 80e0 	beq.w	8001858 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001698:	4b2f      	ldr	r3, [pc, #188]	@ (8001758 <HAL_GPIO_Init+0x238>)
 800169a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800169e:	4a2e      	ldr	r2, [pc, #184]	@ (8001758 <HAL_GPIO_Init+0x238>)
 80016a0:	f043 0302 	orr.w	r3, r3, #2
 80016a4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80016a8:	4b2b      	ldr	r3, [pc, #172]	@ (8001758 <HAL_GPIO_Init+0x238>)
 80016aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016b6:	4a29      	ldr	r2, [pc, #164]	@ (800175c <HAL_GPIO_Init+0x23c>)
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	089b      	lsrs	r3, r3, #2
 80016bc:	3302      	adds	r3, #2
 80016be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	f003 0303 	and.w	r3, r3, #3
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	220f      	movs	r2, #15
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	43db      	mvns	r3, r3
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	4013      	ands	r3, r2
 80016d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a20      	ldr	r2, [pc, #128]	@ (8001760 <HAL_GPIO_Init+0x240>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d052      	beq.n	8001788 <HAL_GPIO_Init+0x268>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a1f      	ldr	r2, [pc, #124]	@ (8001764 <HAL_GPIO_Init+0x244>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d031      	beq.n	800174e <HAL_GPIO_Init+0x22e>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a1e      	ldr	r2, [pc, #120]	@ (8001768 <HAL_GPIO_Init+0x248>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d02b      	beq.n	800174a <HAL_GPIO_Init+0x22a>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a1d      	ldr	r2, [pc, #116]	@ (800176c <HAL_GPIO_Init+0x24c>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d025      	beq.n	8001746 <HAL_GPIO_Init+0x226>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a1c      	ldr	r2, [pc, #112]	@ (8001770 <HAL_GPIO_Init+0x250>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d01f      	beq.n	8001742 <HAL_GPIO_Init+0x222>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a1b      	ldr	r2, [pc, #108]	@ (8001774 <HAL_GPIO_Init+0x254>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d019      	beq.n	800173e <HAL_GPIO_Init+0x21e>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4a1a      	ldr	r2, [pc, #104]	@ (8001778 <HAL_GPIO_Init+0x258>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d013      	beq.n	800173a <HAL_GPIO_Init+0x21a>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4a19      	ldr	r2, [pc, #100]	@ (800177c <HAL_GPIO_Init+0x25c>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d00d      	beq.n	8001736 <HAL_GPIO_Init+0x216>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4a18      	ldr	r2, [pc, #96]	@ (8001780 <HAL_GPIO_Init+0x260>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d007      	beq.n	8001732 <HAL_GPIO_Init+0x212>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4a17      	ldr	r2, [pc, #92]	@ (8001784 <HAL_GPIO_Init+0x264>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d101      	bne.n	800172e <HAL_GPIO_Init+0x20e>
 800172a:	2309      	movs	r3, #9
 800172c:	e02d      	b.n	800178a <HAL_GPIO_Init+0x26a>
 800172e:	230a      	movs	r3, #10
 8001730:	e02b      	b.n	800178a <HAL_GPIO_Init+0x26a>
 8001732:	2308      	movs	r3, #8
 8001734:	e029      	b.n	800178a <HAL_GPIO_Init+0x26a>
 8001736:	2307      	movs	r3, #7
 8001738:	e027      	b.n	800178a <HAL_GPIO_Init+0x26a>
 800173a:	2306      	movs	r3, #6
 800173c:	e025      	b.n	800178a <HAL_GPIO_Init+0x26a>
 800173e:	2305      	movs	r3, #5
 8001740:	e023      	b.n	800178a <HAL_GPIO_Init+0x26a>
 8001742:	2304      	movs	r3, #4
 8001744:	e021      	b.n	800178a <HAL_GPIO_Init+0x26a>
 8001746:	2303      	movs	r3, #3
 8001748:	e01f      	b.n	800178a <HAL_GPIO_Init+0x26a>
 800174a:	2302      	movs	r3, #2
 800174c:	e01d      	b.n	800178a <HAL_GPIO_Init+0x26a>
 800174e:	2301      	movs	r3, #1
 8001750:	e01b      	b.n	800178a <HAL_GPIO_Init+0x26a>
 8001752:	bf00      	nop
 8001754:	58000080 	.word	0x58000080
 8001758:	58024400 	.word	0x58024400
 800175c:	58000400 	.word	0x58000400
 8001760:	58020000 	.word	0x58020000
 8001764:	58020400 	.word	0x58020400
 8001768:	58020800 	.word	0x58020800
 800176c:	58020c00 	.word	0x58020c00
 8001770:	58021000 	.word	0x58021000
 8001774:	58021400 	.word	0x58021400
 8001778:	58021800 	.word	0x58021800
 800177c:	58021c00 	.word	0x58021c00
 8001780:	58022000 	.word	0x58022000
 8001784:	58022400 	.word	0x58022400
 8001788:	2300      	movs	r3, #0
 800178a:	69fa      	ldr	r2, [r7, #28]
 800178c:	f002 0203 	and.w	r2, r2, #3
 8001790:	0092      	lsls	r2, r2, #2
 8001792:	4093      	lsls	r3, r2
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	4313      	orrs	r3, r2
 8001798:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800179a:	4938      	ldr	r1, [pc, #224]	@ (800187c <HAL_GPIO_Init+0x35c>)
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	089b      	lsrs	r3, r3, #2
 80017a0:	3302      	adds	r3, #2
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	43db      	mvns	r3, r3
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	4013      	ands	r3, r2
 80017b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d003      	beq.n	80017ce <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80017ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80017d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	43db      	mvns	r3, r3
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	4013      	ands	r3, r2
 80017e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d003      	beq.n	80017fc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80017fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	43db      	mvns	r3, r3
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	4013      	ands	r3, r2
 8001812:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d003      	beq.n	8001828 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	4313      	orrs	r3, r2
 8001826:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	43db      	mvns	r3, r3
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	4013      	ands	r3, r2
 800183c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d003      	beq.n	8001852 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	4313      	orrs	r3, r2
 8001850:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	3301      	adds	r3, #1
 800185c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	fa22 f303 	lsr.w	r3, r2, r3
 8001868:	2b00      	cmp	r3, #0
 800186a:	f47f ae63 	bne.w	8001534 <HAL_GPIO_Init+0x14>
  }
}
 800186e:	bf00      	nop
 8001870:	bf00      	nop
 8001872:	3724      	adds	r7, #36	@ 0x24
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	58000400 	.word	0x58000400

08001880 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	460b      	mov	r3, r1
 800188a:	807b      	strh	r3, [r7, #2]
 800188c:	4613      	mov	r3, r2
 800188e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001890:	787b      	ldrb	r3, [r7, #1]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d003      	beq.n	800189e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001896:	887a      	ldrh	r2, [r7, #2]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800189c:	e003      	b.n	80018a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800189e:	887b      	ldrh	r3, [r7, #2]
 80018a0:	041a      	lsls	r2, r3, #16
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	619a      	str	r2, [r3, #24]
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018b2:	b480      	push	{r7}
 80018b4:	b085      	sub	sp, #20
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
 80018ba:	460b      	mov	r3, r1
 80018bc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	695b      	ldr	r3, [r3, #20]
 80018c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018c4:	887a      	ldrh	r2, [r7, #2]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	4013      	ands	r3, r2
 80018ca:	041a      	lsls	r2, r3, #16
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	43d9      	mvns	r1, r3
 80018d0:	887b      	ldrh	r3, [r7, #2]
 80018d2:	400b      	ands	r3, r1
 80018d4:	431a      	orrs	r2, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	619a      	str	r2, [r3, #24]
}
 80018da:	bf00      	nop
 80018dc:	3714      	adds	r7, #20
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
	...

080018e8 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80018f0:	4b19      	ldr	r3, [pc, #100]	@ (8001958 <HAL_PWREx_ConfigSupply+0x70>)
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	f003 0304 	and.w	r3, r3, #4
 80018f8:	2b04      	cmp	r3, #4
 80018fa:	d00a      	beq.n	8001912 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80018fc:	4b16      	ldr	r3, [pc, #88]	@ (8001958 <HAL_PWREx_ConfigSupply+0x70>)
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	f003 0307 	and.w	r3, r3, #7
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	429a      	cmp	r2, r3
 8001908:	d001      	beq.n	800190e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e01f      	b.n	800194e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800190e:	2300      	movs	r3, #0
 8001910:	e01d      	b.n	800194e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001912:	4b11      	ldr	r3, [pc, #68]	@ (8001958 <HAL_PWREx_ConfigSupply+0x70>)
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	f023 0207 	bic.w	r2, r3, #7
 800191a:	490f      	ldr	r1, [pc, #60]	@ (8001958 <HAL_PWREx_ConfigSupply+0x70>)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	4313      	orrs	r3, r2
 8001920:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001922:	f7ff fc39 	bl	8001198 <HAL_GetTick>
 8001926:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001928:	e009      	b.n	800193e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800192a:	f7ff fc35 	bl	8001198 <HAL_GetTick>
 800192e:	4602      	mov	r2, r0
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001938:	d901      	bls.n	800193e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e007      	b.n	800194e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800193e:	4b06      	ldr	r3, [pc, #24]	@ (8001958 <HAL_PWREx_ConfigSupply+0x70>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001946:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800194a:	d1ee      	bne.n	800192a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	58024800 	.word	0x58024800

0800195c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b08c      	sub	sp, #48	@ 0x30
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d102      	bne.n	8001970 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	f000 bc48 	b.w	8002200 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0301 	and.w	r3, r3, #1
 8001978:	2b00      	cmp	r3, #0
 800197a:	f000 8088 	beq.w	8001a8e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800197e:	4b99      	ldr	r3, [pc, #612]	@ (8001be4 <HAL_RCC_OscConfig+0x288>)
 8001980:	691b      	ldr	r3, [r3, #16]
 8001982:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001986:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001988:	4b96      	ldr	r3, [pc, #600]	@ (8001be4 <HAL_RCC_OscConfig+0x288>)
 800198a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800198c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800198e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001990:	2b10      	cmp	r3, #16
 8001992:	d007      	beq.n	80019a4 <HAL_RCC_OscConfig+0x48>
 8001994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001996:	2b18      	cmp	r3, #24
 8001998:	d111      	bne.n	80019be <HAL_RCC_OscConfig+0x62>
 800199a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800199c:	f003 0303 	and.w	r3, r3, #3
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d10c      	bne.n	80019be <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019a4:	4b8f      	ldr	r3, [pc, #572]	@ (8001be4 <HAL_RCC_OscConfig+0x288>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d06d      	beq.n	8001a8c <HAL_RCC_OscConfig+0x130>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d169      	bne.n	8001a8c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	f000 bc21 	b.w	8002200 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019c6:	d106      	bne.n	80019d6 <HAL_RCC_OscConfig+0x7a>
 80019c8:	4b86      	ldr	r3, [pc, #536]	@ (8001be4 <HAL_RCC_OscConfig+0x288>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a85      	ldr	r2, [pc, #532]	@ (8001be4 <HAL_RCC_OscConfig+0x288>)
 80019ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019d2:	6013      	str	r3, [r2, #0]
 80019d4:	e02e      	b.n	8001a34 <HAL_RCC_OscConfig+0xd8>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d10c      	bne.n	80019f8 <HAL_RCC_OscConfig+0x9c>
 80019de:	4b81      	ldr	r3, [pc, #516]	@ (8001be4 <HAL_RCC_OscConfig+0x288>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a80      	ldr	r2, [pc, #512]	@ (8001be4 <HAL_RCC_OscConfig+0x288>)
 80019e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019e8:	6013      	str	r3, [r2, #0]
 80019ea:	4b7e      	ldr	r3, [pc, #504]	@ (8001be4 <HAL_RCC_OscConfig+0x288>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a7d      	ldr	r2, [pc, #500]	@ (8001be4 <HAL_RCC_OscConfig+0x288>)
 80019f0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019f4:	6013      	str	r3, [r2, #0]
 80019f6:	e01d      	b.n	8001a34 <HAL_RCC_OscConfig+0xd8>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a00:	d10c      	bne.n	8001a1c <HAL_RCC_OscConfig+0xc0>
 8001a02:	4b78      	ldr	r3, [pc, #480]	@ (8001be4 <HAL_RCC_OscConfig+0x288>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a77      	ldr	r2, [pc, #476]	@ (8001be4 <HAL_RCC_OscConfig+0x288>)
 8001a08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a0c:	6013      	str	r3, [r2, #0]
 8001a0e:	4b75      	ldr	r3, [pc, #468]	@ (8001be4 <HAL_RCC_OscConfig+0x288>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a74      	ldr	r2, [pc, #464]	@ (8001be4 <HAL_RCC_OscConfig+0x288>)
 8001a14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a18:	6013      	str	r3, [r2, #0]
 8001a1a:	e00b      	b.n	8001a34 <HAL_RCC_OscConfig+0xd8>
 8001a1c:	4b71      	ldr	r3, [pc, #452]	@ (8001be4 <HAL_RCC_OscConfig+0x288>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a70      	ldr	r2, [pc, #448]	@ (8001be4 <HAL_RCC_OscConfig+0x288>)
 8001a22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a26:	6013      	str	r3, [r2, #0]
 8001a28:	4b6e      	ldr	r3, [pc, #440]	@ (8001be4 <HAL_RCC_OscConfig+0x288>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a6d      	ldr	r2, [pc, #436]	@ (8001be4 <HAL_RCC_OscConfig+0x288>)
 8001a2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d013      	beq.n	8001a64 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a3c:	f7ff fbac 	bl	8001198 <HAL_GetTick>
 8001a40:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a44:	f7ff fba8 	bl	8001198 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b64      	cmp	r3, #100	@ 0x64
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e3d4      	b.n	8002200 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a56:	4b63      	ldr	r3, [pc, #396]	@ (8001be4 <HAL_RCC_OscConfig+0x288>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d0f0      	beq.n	8001a44 <HAL_RCC_OscConfig+0xe8>
 8001a62:	e014      	b.n	8001a8e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a64:	f7ff fb98 	bl	8001198 <HAL_GetTick>
 8001a68:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001a6a:	e008      	b.n	8001a7e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a6c:	f7ff fb94 	bl	8001198 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b64      	cmp	r3, #100	@ 0x64
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e3c0      	b.n	8002200 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001a7e:	4b59      	ldr	r3, [pc, #356]	@ (8001be4 <HAL_RCC_OscConfig+0x288>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d1f0      	bne.n	8001a6c <HAL_RCC_OscConfig+0x110>
 8001a8a:	e000      	b.n	8001a8e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	f000 80ca 	beq.w	8001c30 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a9c:	4b51      	ldr	r3, [pc, #324]	@ (8001be4 <HAL_RCC_OscConfig+0x288>)
 8001a9e:	691b      	ldr	r3, [r3, #16]
 8001aa0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001aa4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001aa6:	4b4f      	ldr	r3, [pc, #316]	@ (8001be4 <HAL_RCC_OscConfig+0x288>)
 8001aa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aaa:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001aac:	6a3b      	ldr	r3, [r7, #32]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d007      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x166>
 8001ab2:	6a3b      	ldr	r3, [r7, #32]
 8001ab4:	2b18      	cmp	r3, #24
 8001ab6:	d156      	bne.n	8001b66 <HAL_RCC_OscConfig+0x20a>
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	f003 0303 	and.w	r3, r3, #3
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d151      	bne.n	8001b66 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ac2:	4b48      	ldr	r3, [pc, #288]	@ (8001be4 <HAL_RCC_OscConfig+0x288>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0304 	and.w	r3, r3, #4
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d005      	beq.n	8001ada <HAL_RCC_OscConfig+0x17e>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d101      	bne.n	8001ada <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e392      	b.n	8002200 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001ada:	4b42      	ldr	r3, [pc, #264]	@ (8001be4 <HAL_RCC_OscConfig+0x288>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f023 0219 	bic.w	r2, r3, #25
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	493f      	ldr	r1, [pc, #252]	@ (8001be4 <HAL_RCC_OscConfig+0x288>)
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aec:	f7ff fb54 	bl	8001198 <HAL_GetTick>
 8001af0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001af2:	e008      	b.n	8001b06 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001af4:	f7ff fb50 	bl	8001198 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e37c      	b.n	8002200 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b06:	4b37      	ldr	r3, [pc, #220]	@ (8001be4 <HAL_RCC_OscConfig+0x288>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0304 	and.w	r3, r3, #4
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d0f0      	beq.n	8001af4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b12:	f7ff fb71 	bl	80011f8 <HAL_GetREVID>
 8001b16:	4603      	mov	r3, r0
 8001b18:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d817      	bhi.n	8001b50 <HAL_RCC_OscConfig+0x1f4>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	691b      	ldr	r3, [r3, #16]
 8001b24:	2b40      	cmp	r3, #64	@ 0x40
 8001b26:	d108      	bne.n	8001b3a <HAL_RCC_OscConfig+0x1de>
 8001b28:	4b2e      	ldr	r3, [pc, #184]	@ (8001be4 <HAL_RCC_OscConfig+0x288>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001b30:	4a2c      	ldr	r2, [pc, #176]	@ (8001be4 <HAL_RCC_OscConfig+0x288>)
 8001b32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b36:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b38:	e07a      	b.n	8001c30 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b3a:	4b2a      	ldr	r3, [pc, #168]	@ (8001be4 <HAL_RCC_OscConfig+0x288>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	691b      	ldr	r3, [r3, #16]
 8001b46:	031b      	lsls	r3, r3, #12
 8001b48:	4926      	ldr	r1, [pc, #152]	@ (8001be4 <HAL_RCC_OscConfig+0x288>)
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b4e:	e06f      	b.n	8001c30 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b50:	4b24      	ldr	r3, [pc, #144]	@ (8001be4 <HAL_RCC_OscConfig+0x288>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	691b      	ldr	r3, [r3, #16]
 8001b5c:	061b      	lsls	r3, r3, #24
 8001b5e:	4921      	ldr	r1, [pc, #132]	@ (8001be4 <HAL_RCC_OscConfig+0x288>)
 8001b60:	4313      	orrs	r3, r2
 8001b62:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b64:	e064      	b.n	8001c30 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d047      	beq.n	8001bfe <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001b6e:	4b1d      	ldr	r3, [pc, #116]	@ (8001be4 <HAL_RCC_OscConfig+0x288>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f023 0219 	bic.w	r2, r3, #25
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	68db      	ldr	r3, [r3, #12]
 8001b7a:	491a      	ldr	r1, [pc, #104]	@ (8001be4 <HAL_RCC_OscConfig+0x288>)
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b80:	f7ff fb0a 	bl	8001198 <HAL_GetTick>
 8001b84:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b88:	f7ff fb06 	bl	8001198 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e332      	b.n	8002200 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b9a:	4b12      	ldr	r3, [pc, #72]	@ (8001be4 <HAL_RCC_OscConfig+0x288>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0304 	and.w	r3, r3, #4
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d0f0      	beq.n	8001b88 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ba6:	f7ff fb27 	bl	80011f8 <HAL_GetREVID>
 8001baa:	4603      	mov	r3, r0
 8001bac:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d819      	bhi.n	8001be8 <HAL_RCC_OscConfig+0x28c>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	691b      	ldr	r3, [r3, #16]
 8001bb8:	2b40      	cmp	r3, #64	@ 0x40
 8001bba:	d108      	bne.n	8001bce <HAL_RCC_OscConfig+0x272>
 8001bbc:	4b09      	ldr	r3, [pc, #36]	@ (8001be4 <HAL_RCC_OscConfig+0x288>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001bc4:	4a07      	ldr	r2, [pc, #28]	@ (8001be4 <HAL_RCC_OscConfig+0x288>)
 8001bc6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bca:	6053      	str	r3, [r2, #4]
 8001bcc:	e030      	b.n	8001c30 <HAL_RCC_OscConfig+0x2d4>
 8001bce:	4b05      	ldr	r3, [pc, #20]	@ (8001be4 <HAL_RCC_OscConfig+0x288>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	031b      	lsls	r3, r3, #12
 8001bdc:	4901      	ldr	r1, [pc, #4]	@ (8001be4 <HAL_RCC_OscConfig+0x288>)
 8001bde:	4313      	orrs	r3, r2
 8001be0:	604b      	str	r3, [r1, #4]
 8001be2:	e025      	b.n	8001c30 <HAL_RCC_OscConfig+0x2d4>
 8001be4:	58024400 	.word	0x58024400
 8001be8:	4b9a      	ldr	r3, [pc, #616]	@ (8001e54 <HAL_RCC_OscConfig+0x4f8>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	691b      	ldr	r3, [r3, #16]
 8001bf4:	061b      	lsls	r3, r3, #24
 8001bf6:	4997      	ldr	r1, [pc, #604]	@ (8001e54 <HAL_RCC_OscConfig+0x4f8>)
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	604b      	str	r3, [r1, #4]
 8001bfc:	e018      	b.n	8001c30 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bfe:	4b95      	ldr	r3, [pc, #596]	@ (8001e54 <HAL_RCC_OscConfig+0x4f8>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a94      	ldr	r2, [pc, #592]	@ (8001e54 <HAL_RCC_OscConfig+0x4f8>)
 8001c04:	f023 0301 	bic.w	r3, r3, #1
 8001c08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c0a:	f7ff fac5 	bl	8001198 <HAL_GetTick>
 8001c0e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001c10:	e008      	b.n	8001c24 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c12:	f7ff fac1 	bl	8001198 <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d901      	bls.n	8001c24 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e2ed      	b.n	8002200 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001c24:	4b8b      	ldr	r3, [pc, #556]	@ (8001e54 <HAL_RCC_OscConfig+0x4f8>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0304 	and.w	r3, r3, #4
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d1f0      	bne.n	8001c12 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0310 	and.w	r3, r3, #16
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	f000 80a9 	beq.w	8001d90 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c3e:	4b85      	ldr	r3, [pc, #532]	@ (8001e54 <HAL_RCC_OscConfig+0x4f8>)
 8001c40:	691b      	ldr	r3, [r3, #16]
 8001c42:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001c46:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001c48:	4b82      	ldr	r3, [pc, #520]	@ (8001e54 <HAL_RCC_OscConfig+0x4f8>)
 8001c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c4c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	2b08      	cmp	r3, #8
 8001c52:	d007      	beq.n	8001c64 <HAL_RCC_OscConfig+0x308>
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	2b18      	cmp	r3, #24
 8001c58:	d13a      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x374>
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	f003 0303 	and.w	r3, r3, #3
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d135      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c64:	4b7b      	ldr	r3, [pc, #492]	@ (8001e54 <HAL_RCC_OscConfig+0x4f8>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d005      	beq.n	8001c7c <HAL_RCC_OscConfig+0x320>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	69db      	ldr	r3, [r3, #28]
 8001c74:	2b80      	cmp	r3, #128	@ 0x80
 8001c76:	d001      	beq.n	8001c7c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e2c1      	b.n	8002200 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c7c:	f7ff fabc 	bl	80011f8 <HAL_GetREVID>
 8001c80:	4603      	mov	r3, r0
 8001c82:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d817      	bhi.n	8001cba <HAL_RCC_OscConfig+0x35e>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6a1b      	ldr	r3, [r3, #32]
 8001c8e:	2b20      	cmp	r3, #32
 8001c90:	d108      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x348>
 8001c92:	4b70      	ldr	r3, [pc, #448]	@ (8001e54 <HAL_RCC_OscConfig+0x4f8>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001c9a:	4a6e      	ldr	r2, [pc, #440]	@ (8001e54 <HAL_RCC_OscConfig+0x4f8>)
 8001c9c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001ca0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ca2:	e075      	b.n	8001d90 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ca4:	4b6b      	ldr	r3, [pc, #428]	@ (8001e54 <HAL_RCC_OscConfig+0x4f8>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a1b      	ldr	r3, [r3, #32]
 8001cb0:	069b      	lsls	r3, r3, #26
 8001cb2:	4968      	ldr	r1, [pc, #416]	@ (8001e54 <HAL_RCC_OscConfig+0x4f8>)
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001cb8:	e06a      	b.n	8001d90 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001cba:	4b66      	ldr	r3, [pc, #408]	@ (8001e54 <HAL_RCC_OscConfig+0x4f8>)
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6a1b      	ldr	r3, [r3, #32]
 8001cc6:	061b      	lsls	r3, r3, #24
 8001cc8:	4962      	ldr	r1, [pc, #392]	@ (8001e54 <HAL_RCC_OscConfig+0x4f8>)
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001cce:	e05f      	b.n	8001d90 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	69db      	ldr	r3, [r3, #28]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d042      	beq.n	8001d5e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001cd8:	4b5e      	ldr	r3, [pc, #376]	@ (8001e54 <HAL_RCC_OscConfig+0x4f8>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a5d      	ldr	r2, [pc, #372]	@ (8001e54 <HAL_RCC_OscConfig+0x4f8>)
 8001cde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ce2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce4:	f7ff fa58 	bl	8001198 <HAL_GetTick>
 8001ce8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001cec:	f7ff fa54 	bl	8001198 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e280      	b.n	8002200 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001cfe:	4b55      	ldr	r3, [pc, #340]	@ (8001e54 <HAL_RCC_OscConfig+0x4f8>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d0f0      	beq.n	8001cec <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d0a:	f7ff fa75 	bl	80011f8 <HAL_GetREVID>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d817      	bhi.n	8001d48 <HAL_RCC_OscConfig+0x3ec>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a1b      	ldr	r3, [r3, #32]
 8001d1c:	2b20      	cmp	r3, #32
 8001d1e:	d108      	bne.n	8001d32 <HAL_RCC_OscConfig+0x3d6>
 8001d20:	4b4c      	ldr	r3, [pc, #304]	@ (8001e54 <HAL_RCC_OscConfig+0x4f8>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001d28:	4a4a      	ldr	r2, [pc, #296]	@ (8001e54 <HAL_RCC_OscConfig+0x4f8>)
 8001d2a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001d2e:	6053      	str	r3, [r2, #4]
 8001d30:	e02e      	b.n	8001d90 <HAL_RCC_OscConfig+0x434>
 8001d32:	4b48      	ldr	r3, [pc, #288]	@ (8001e54 <HAL_RCC_OscConfig+0x4f8>)
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6a1b      	ldr	r3, [r3, #32]
 8001d3e:	069b      	lsls	r3, r3, #26
 8001d40:	4944      	ldr	r1, [pc, #272]	@ (8001e54 <HAL_RCC_OscConfig+0x4f8>)
 8001d42:	4313      	orrs	r3, r2
 8001d44:	604b      	str	r3, [r1, #4]
 8001d46:	e023      	b.n	8001d90 <HAL_RCC_OscConfig+0x434>
 8001d48:	4b42      	ldr	r3, [pc, #264]	@ (8001e54 <HAL_RCC_OscConfig+0x4f8>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a1b      	ldr	r3, [r3, #32]
 8001d54:	061b      	lsls	r3, r3, #24
 8001d56:	493f      	ldr	r1, [pc, #252]	@ (8001e54 <HAL_RCC_OscConfig+0x4f8>)
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	60cb      	str	r3, [r1, #12]
 8001d5c:	e018      	b.n	8001d90 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001d5e:	4b3d      	ldr	r3, [pc, #244]	@ (8001e54 <HAL_RCC_OscConfig+0x4f8>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a3c      	ldr	r2, [pc, #240]	@ (8001e54 <HAL_RCC_OscConfig+0x4f8>)
 8001d64:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001d68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d6a:	f7ff fa15 	bl	8001198 <HAL_GetTick>
 8001d6e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001d70:	e008      	b.n	8001d84 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001d72:	f7ff fa11 	bl	8001198 <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d901      	bls.n	8001d84 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e23d      	b.n	8002200 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001d84:	4b33      	ldr	r3, [pc, #204]	@ (8001e54 <HAL_RCC_OscConfig+0x4f8>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d1f0      	bne.n	8001d72 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0308 	and.w	r3, r3, #8
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d036      	beq.n	8001e0a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	695b      	ldr	r3, [r3, #20]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d019      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001da4:	4b2b      	ldr	r3, [pc, #172]	@ (8001e54 <HAL_RCC_OscConfig+0x4f8>)
 8001da6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001da8:	4a2a      	ldr	r2, [pc, #168]	@ (8001e54 <HAL_RCC_OscConfig+0x4f8>)
 8001daa:	f043 0301 	orr.w	r3, r3, #1
 8001dae:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001db0:	f7ff f9f2 	bl	8001198 <HAL_GetTick>
 8001db4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001db6:	e008      	b.n	8001dca <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001db8:	f7ff f9ee 	bl	8001198 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e21a      	b.n	8002200 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001dca:	4b22      	ldr	r3, [pc, #136]	@ (8001e54 <HAL_RCC_OscConfig+0x4f8>)
 8001dcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d0f0      	beq.n	8001db8 <HAL_RCC_OscConfig+0x45c>
 8001dd6:	e018      	b.n	8001e0a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dd8:	4b1e      	ldr	r3, [pc, #120]	@ (8001e54 <HAL_RCC_OscConfig+0x4f8>)
 8001dda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ddc:	4a1d      	ldr	r2, [pc, #116]	@ (8001e54 <HAL_RCC_OscConfig+0x4f8>)
 8001dde:	f023 0301 	bic.w	r3, r3, #1
 8001de2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001de4:	f7ff f9d8 	bl	8001198 <HAL_GetTick>
 8001de8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dec:	f7ff f9d4 	bl	8001198 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e200      	b.n	8002200 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001dfe:	4b15      	ldr	r3, [pc, #84]	@ (8001e54 <HAL_RCC_OscConfig+0x4f8>)
 8001e00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d1f0      	bne.n	8001dec <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0320 	and.w	r3, r3, #32
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d039      	beq.n	8001e8a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d01c      	beq.n	8001e58 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8001e54 <HAL_RCC_OscConfig+0x4f8>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a0c      	ldr	r2, [pc, #48]	@ (8001e54 <HAL_RCC_OscConfig+0x4f8>)
 8001e24:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001e28:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001e2a:	f7ff f9b5 	bl	8001198 <HAL_GetTick>
 8001e2e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001e30:	e008      	b.n	8001e44 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e32:	f7ff f9b1 	bl	8001198 <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d901      	bls.n	8001e44 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e1dd      	b.n	8002200 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001e44:	4b03      	ldr	r3, [pc, #12]	@ (8001e54 <HAL_RCC_OscConfig+0x4f8>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d0f0      	beq.n	8001e32 <HAL_RCC_OscConfig+0x4d6>
 8001e50:	e01b      	b.n	8001e8a <HAL_RCC_OscConfig+0x52e>
 8001e52:	bf00      	nop
 8001e54:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001e58:	4b9b      	ldr	r3, [pc, #620]	@ (80020c8 <HAL_RCC_OscConfig+0x76c>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a9a      	ldr	r2, [pc, #616]	@ (80020c8 <HAL_RCC_OscConfig+0x76c>)
 8001e5e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001e62:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001e64:	f7ff f998 	bl	8001198 <HAL_GetTick>
 8001e68:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e6c:	f7ff f994 	bl	8001198 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e1c0      	b.n	8002200 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001e7e:	4b92      	ldr	r3, [pc, #584]	@ (80020c8 <HAL_RCC_OscConfig+0x76c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d1f0      	bne.n	8001e6c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0304 	and.w	r3, r3, #4
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	f000 8081 	beq.w	8001f9a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001e98:	4b8c      	ldr	r3, [pc, #560]	@ (80020cc <HAL_RCC_OscConfig+0x770>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a8b      	ldr	r2, [pc, #556]	@ (80020cc <HAL_RCC_OscConfig+0x770>)
 8001e9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ea2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001ea4:	f7ff f978 	bl	8001198 <HAL_GetTick>
 8001ea8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001eaa:	e008      	b.n	8001ebe <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eac:	f7ff f974 	bl	8001198 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b64      	cmp	r3, #100	@ 0x64
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e1a0      	b.n	8002200 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ebe:	4b83      	ldr	r3, [pc, #524]	@ (80020cc <HAL_RCC_OscConfig+0x770>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d0f0      	beq.n	8001eac <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d106      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x584>
 8001ed2:	4b7d      	ldr	r3, [pc, #500]	@ (80020c8 <HAL_RCC_OscConfig+0x76c>)
 8001ed4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ed6:	4a7c      	ldr	r2, [pc, #496]	@ (80020c8 <HAL_RCC_OscConfig+0x76c>)
 8001ed8:	f043 0301 	orr.w	r3, r3, #1
 8001edc:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ede:	e02d      	b.n	8001f3c <HAL_RCC_OscConfig+0x5e0>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d10c      	bne.n	8001f02 <HAL_RCC_OscConfig+0x5a6>
 8001ee8:	4b77      	ldr	r3, [pc, #476]	@ (80020c8 <HAL_RCC_OscConfig+0x76c>)
 8001eea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eec:	4a76      	ldr	r2, [pc, #472]	@ (80020c8 <HAL_RCC_OscConfig+0x76c>)
 8001eee:	f023 0301 	bic.w	r3, r3, #1
 8001ef2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ef4:	4b74      	ldr	r3, [pc, #464]	@ (80020c8 <HAL_RCC_OscConfig+0x76c>)
 8001ef6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ef8:	4a73      	ldr	r2, [pc, #460]	@ (80020c8 <HAL_RCC_OscConfig+0x76c>)
 8001efa:	f023 0304 	bic.w	r3, r3, #4
 8001efe:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f00:	e01c      	b.n	8001f3c <HAL_RCC_OscConfig+0x5e0>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	2b05      	cmp	r3, #5
 8001f08:	d10c      	bne.n	8001f24 <HAL_RCC_OscConfig+0x5c8>
 8001f0a:	4b6f      	ldr	r3, [pc, #444]	@ (80020c8 <HAL_RCC_OscConfig+0x76c>)
 8001f0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f0e:	4a6e      	ldr	r2, [pc, #440]	@ (80020c8 <HAL_RCC_OscConfig+0x76c>)
 8001f10:	f043 0304 	orr.w	r3, r3, #4
 8001f14:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f16:	4b6c      	ldr	r3, [pc, #432]	@ (80020c8 <HAL_RCC_OscConfig+0x76c>)
 8001f18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f1a:	4a6b      	ldr	r2, [pc, #428]	@ (80020c8 <HAL_RCC_OscConfig+0x76c>)
 8001f1c:	f043 0301 	orr.w	r3, r3, #1
 8001f20:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f22:	e00b      	b.n	8001f3c <HAL_RCC_OscConfig+0x5e0>
 8001f24:	4b68      	ldr	r3, [pc, #416]	@ (80020c8 <HAL_RCC_OscConfig+0x76c>)
 8001f26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f28:	4a67      	ldr	r2, [pc, #412]	@ (80020c8 <HAL_RCC_OscConfig+0x76c>)
 8001f2a:	f023 0301 	bic.w	r3, r3, #1
 8001f2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f30:	4b65      	ldr	r3, [pc, #404]	@ (80020c8 <HAL_RCC_OscConfig+0x76c>)
 8001f32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f34:	4a64      	ldr	r2, [pc, #400]	@ (80020c8 <HAL_RCC_OscConfig+0x76c>)
 8001f36:	f023 0304 	bic.w	r3, r3, #4
 8001f3a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d015      	beq.n	8001f70 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f44:	f7ff f928 	bl	8001198 <HAL_GetTick>
 8001f48:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f4a:	e00a      	b.n	8001f62 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f4c:	f7ff f924 	bl	8001198 <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e14e      	b.n	8002200 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f62:	4b59      	ldr	r3, [pc, #356]	@ (80020c8 <HAL_RCC_OscConfig+0x76c>)
 8001f64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d0ee      	beq.n	8001f4c <HAL_RCC_OscConfig+0x5f0>
 8001f6e:	e014      	b.n	8001f9a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f70:	f7ff f912 	bl	8001198 <HAL_GetTick>
 8001f74:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001f76:	e00a      	b.n	8001f8e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f78:	f7ff f90e 	bl	8001198 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e138      	b.n	8002200 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001f8e:	4b4e      	ldr	r3, [pc, #312]	@ (80020c8 <HAL_RCC_OscConfig+0x76c>)
 8001f90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1ee      	bne.n	8001f78 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f000 812d 	beq.w	80021fe <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001fa4:	4b48      	ldr	r3, [pc, #288]	@ (80020c8 <HAL_RCC_OscConfig+0x76c>)
 8001fa6:	691b      	ldr	r3, [r3, #16]
 8001fa8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001fac:	2b18      	cmp	r3, #24
 8001fae:	f000 80bd 	beq.w	800212c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	f040 809e 	bne.w	80020f8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fbc:	4b42      	ldr	r3, [pc, #264]	@ (80020c8 <HAL_RCC_OscConfig+0x76c>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a41      	ldr	r2, [pc, #260]	@ (80020c8 <HAL_RCC_OscConfig+0x76c>)
 8001fc2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001fc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc8:	f7ff f8e6 	bl	8001198 <HAL_GetTick>
 8001fcc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001fce:	e008      	b.n	8001fe2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fd0:	f7ff f8e2 	bl	8001198 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e10e      	b.n	8002200 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001fe2:	4b39      	ldr	r3, [pc, #228]	@ (80020c8 <HAL_RCC_OscConfig+0x76c>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1f0      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fee:	4b36      	ldr	r3, [pc, #216]	@ (80020c8 <HAL_RCC_OscConfig+0x76c>)
 8001ff0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001ff2:	4b37      	ldr	r3, [pc, #220]	@ (80020d0 <HAL_RCC_OscConfig+0x774>)
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001ffe:	0112      	lsls	r2, r2, #4
 8002000:	430a      	orrs	r2, r1
 8002002:	4931      	ldr	r1, [pc, #196]	@ (80020c8 <HAL_RCC_OscConfig+0x76c>)
 8002004:	4313      	orrs	r3, r2
 8002006:	628b      	str	r3, [r1, #40]	@ 0x28
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800200c:	3b01      	subs	r3, #1
 800200e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002016:	3b01      	subs	r3, #1
 8002018:	025b      	lsls	r3, r3, #9
 800201a:	b29b      	uxth	r3, r3
 800201c:	431a      	orrs	r2, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002022:	3b01      	subs	r3, #1
 8002024:	041b      	lsls	r3, r3, #16
 8002026:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800202a:	431a      	orrs	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002030:	3b01      	subs	r3, #1
 8002032:	061b      	lsls	r3, r3, #24
 8002034:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002038:	4923      	ldr	r1, [pc, #140]	@ (80020c8 <HAL_RCC_OscConfig+0x76c>)
 800203a:	4313      	orrs	r3, r2
 800203c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800203e:	4b22      	ldr	r3, [pc, #136]	@ (80020c8 <HAL_RCC_OscConfig+0x76c>)
 8002040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002042:	4a21      	ldr	r2, [pc, #132]	@ (80020c8 <HAL_RCC_OscConfig+0x76c>)
 8002044:	f023 0301 	bic.w	r3, r3, #1
 8002048:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800204a:	4b1f      	ldr	r3, [pc, #124]	@ (80020c8 <HAL_RCC_OscConfig+0x76c>)
 800204c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800204e:	4b21      	ldr	r3, [pc, #132]	@ (80020d4 <HAL_RCC_OscConfig+0x778>)
 8002050:	4013      	ands	r3, r2
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002056:	00d2      	lsls	r2, r2, #3
 8002058:	491b      	ldr	r1, [pc, #108]	@ (80020c8 <HAL_RCC_OscConfig+0x76c>)
 800205a:	4313      	orrs	r3, r2
 800205c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800205e:	4b1a      	ldr	r3, [pc, #104]	@ (80020c8 <HAL_RCC_OscConfig+0x76c>)
 8002060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002062:	f023 020c 	bic.w	r2, r3, #12
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800206a:	4917      	ldr	r1, [pc, #92]	@ (80020c8 <HAL_RCC_OscConfig+0x76c>)
 800206c:	4313      	orrs	r3, r2
 800206e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002070:	4b15      	ldr	r3, [pc, #84]	@ (80020c8 <HAL_RCC_OscConfig+0x76c>)
 8002072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002074:	f023 0202 	bic.w	r2, r3, #2
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800207c:	4912      	ldr	r1, [pc, #72]	@ (80020c8 <HAL_RCC_OscConfig+0x76c>)
 800207e:	4313      	orrs	r3, r2
 8002080:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002082:	4b11      	ldr	r3, [pc, #68]	@ (80020c8 <HAL_RCC_OscConfig+0x76c>)
 8002084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002086:	4a10      	ldr	r2, [pc, #64]	@ (80020c8 <HAL_RCC_OscConfig+0x76c>)
 8002088:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800208c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800208e:	4b0e      	ldr	r3, [pc, #56]	@ (80020c8 <HAL_RCC_OscConfig+0x76c>)
 8002090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002092:	4a0d      	ldr	r2, [pc, #52]	@ (80020c8 <HAL_RCC_OscConfig+0x76c>)
 8002094:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002098:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800209a:	4b0b      	ldr	r3, [pc, #44]	@ (80020c8 <HAL_RCC_OscConfig+0x76c>)
 800209c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800209e:	4a0a      	ldr	r2, [pc, #40]	@ (80020c8 <HAL_RCC_OscConfig+0x76c>)
 80020a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80020a6:	4b08      	ldr	r3, [pc, #32]	@ (80020c8 <HAL_RCC_OscConfig+0x76c>)
 80020a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020aa:	4a07      	ldr	r2, [pc, #28]	@ (80020c8 <HAL_RCC_OscConfig+0x76c>)
 80020ac:	f043 0301 	orr.w	r3, r3, #1
 80020b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020b2:	4b05      	ldr	r3, [pc, #20]	@ (80020c8 <HAL_RCC_OscConfig+0x76c>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a04      	ldr	r2, [pc, #16]	@ (80020c8 <HAL_RCC_OscConfig+0x76c>)
 80020b8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020be:	f7ff f86b 	bl	8001198 <HAL_GetTick>
 80020c2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80020c4:	e011      	b.n	80020ea <HAL_RCC_OscConfig+0x78e>
 80020c6:	bf00      	nop
 80020c8:	58024400 	.word	0x58024400
 80020cc:	58024800 	.word	0x58024800
 80020d0:	fffffc0c 	.word	0xfffffc0c
 80020d4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020d8:	f7ff f85e 	bl	8001198 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e08a      	b.n	8002200 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80020ea:	4b47      	ldr	r3, [pc, #284]	@ (8002208 <HAL_RCC_OscConfig+0x8ac>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d0f0      	beq.n	80020d8 <HAL_RCC_OscConfig+0x77c>
 80020f6:	e082      	b.n	80021fe <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020f8:	4b43      	ldr	r3, [pc, #268]	@ (8002208 <HAL_RCC_OscConfig+0x8ac>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a42      	ldr	r2, [pc, #264]	@ (8002208 <HAL_RCC_OscConfig+0x8ac>)
 80020fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002102:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002104:	f7ff f848 	bl	8001198 <HAL_GetTick>
 8002108:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800210a:	e008      	b.n	800211e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800210c:	f7ff f844 	bl	8001198 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b02      	cmp	r3, #2
 8002118:	d901      	bls.n	800211e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e070      	b.n	8002200 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800211e:	4b3a      	ldr	r3, [pc, #232]	@ (8002208 <HAL_RCC_OscConfig+0x8ac>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1f0      	bne.n	800210c <HAL_RCC_OscConfig+0x7b0>
 800212a:	e068      	b.n	80021fe <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800212c:	4b36      	ldr	r3, [pc, #216]	@ (8002208 <HAL_RCC_OscConfig+0x8ac>)
 800212e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002130:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002132:	4b35      	ldr	r3, [pc, #212]	@ (8002208 <HAL_RCC_OscConfig+0x8ac>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002136:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800213c:	2b01      	cmp	r3, #1
 800213e:	d031      	beq.n	80021a4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	f003 0203 	and.w	r2, r3, #3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800214a:	429a      	cmp	r2, r3
 800214c:	d12a      	bne.n	80021a4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	091b      	lsrs	r3, r3, #4
 8002152:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800215a:	429a      	cmp	r2, r3
 800215c:	d122      	bne.n	80021a4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002168:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800216a:	429a      	cmp	r2, r3
 800216c:	d11a      	bne.n	80021a4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	0a5b      	lsrs	r3, r3, #9
 8002172:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800217a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800217c:	429a      	cmp	r2, r3
 800217e:	d111      	bne.n	80021a4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	0c1b      	lsrs	r3, r3, #16
 8002184:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800218c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800218e:	429a      	cmp	r2, r3
 8002190:	d108      	bne.n	80021a4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	0e1b      	lsrs	r3, r3, #24
 8002196:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800219e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d001      	beq.n	80021a8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e02b      	b.n	8002200 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80021a8:	4b17      	ldr	r3, [pc, #92]	@ (8002208 <HAL_RCC_OscConfig+0x8ac>)
 80021aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021ac:	08db      	lsrs	r3, r3, #3
 80021ae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80021b2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021b8:	693a      	ldr	r2, [r7, #16]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d01f      	beq.n	80021fe <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80021be:	4b12      	ldr	r3, [pc, #72]	@ (8002208 <HAL_RCC_OscConfig+0x8ac>)
 80021c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021c2:	4a11      	ldr	r2, [pc, #68]	@ (8002208 <HAL_RCC_OscConfig+0x8ac>)
 80021c4:	f023 0301 	bic.w	r3, r3, #1
 80021c8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80021ca:	f7fe ffe5 	bl	8001198 <HAL_GetTick>
 80021ce:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80021d0:	bf00      	nop
 80021d2:	f7fe ffe1 	bl	8001198 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021da:	4293      	cmp	r3, r2
 80021dc:	d0f9      	beq.n	80021d2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80021de:	4b0a      	ldr	r3, [pc, #40]	@ (8002208 <HAL_RCC_OscConfig+0x8ac>)
 80021e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021e2:	4b0a      	ldr	r3, [pc, #40]	@ (800220c <HAL_RCC_OscConfig+0x8b0>)
 80021e4:	4013      	ands	r3, r2
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80021ea:	00d2      	lsls	r2, r2, #3
 80021ec:	4906      	ldr	r1, [pc, #24]	@ (8002208 <HAL_RCC_OscConfig+0x8ac>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80021f2:	4b05      	ldr	r3, [pc, #20]	@ (8002208 <HAL_RCC_OscConfig+0x8ac>)
 80021f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021f6:	4a04      	ldr	r2, [pc, #16]	@ (8002208 <HAL_RCC_OscConfig+0x8ac>)
 80021f8:	f043 0301 	orr.w	r3, r3, #1
 80021fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
}
 8002200:	4618      	mov	r0, r3
 8002202:	3730      	adds	r7, #48	@ 0x30
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	58024400 	.word	0x58024400
 800220c:	ffff0007 	.word	0xffff0007

08002210 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d101      	bne.n	8002224 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e19c      	b.n	800255e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002224:	4b8a      	ldr	r3, [pc, #552]	@ (8002450 <HAL_RCC_ClockConfig+0x240>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 030f 	and.w	r3, r3, #15
 800222c:	683a      	ldr	r2, [r7, #0]
 800222e:	429a      	cmp	r2, r3
 8002230:	d910      	bls.n	8002254 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002232:	4b87      	ldr	r3, [pc, #540]	@ (8002450 <HAL_RCC_ClockConfig+0x240>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f023 020f 	bic.w	r2, r3, #15
 800223a:	4985      	ldr	r1, [pc, #532]	@ (8002450 <HAL_RCC_ClockConfig+0x240>)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	4313      	orrs	r3, r2
 8002240:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002242:	4b83      	ldr	r3, [pc, #524]	@ (8002450 <HAL_RCC_ClockConfig+0x240>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 030f 	and.w	r3, r3, #15
 800224a:	683a      	ldr	r2, [r7, #0]
 800224c:	429a      	cmp	r2, r3
 800224e:	d001      	beq.n	8002254 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e184      	b.n	800255e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0304 	and.w	r3, r3, #4
 800225c:	2b00      	cmp	r3, #0
 800225e:	d010      	beq.n	8002282 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	691a      	ldr	r2, [r3, #16]
 8002264:	4b7b      	ldr	r3, [pc, #492]	@ (8002454 <HAL_RCC_ClockConfig+0x244>)
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800226c:	429a      	cmp	r2, r3
 800226e:	d908      	bls.n	8002282 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002270:	4b78      	ldr	r3, [pc, #480]	@ (8002454 <HAL_RCC_ClockConfig+0x244>)
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	691b      	ldr	r3, [r3, #16]
 800227c:	4975      	ldr	r1, [pc, #468]	@ (8002454 <HAL_RCC_ClockConfig+0x244>)
 800227e:	4313      	orrs	r3, r2
 8002280:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0308 	and.w	r3, r3, #8
 800228a:	2b00      	cmp	r3, #0
 800228c:	d010      	beq.n	80022b0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	695a      	ldr	r2, [r3, #20]
 8002292:	4b70      	ldr	r3, [pc, #448]	@ (8002454 <HAL_RCC_ClockConfig+0x244>)
 8002294:	69db      	ldr	r3, [r3, #28]
 8002296:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800229a:	429a      	cmp	r2, r3
 800229c:	d908      	bls.n	80022b0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800229e:	4b6d      	ldr	r3, [pc, #436]	@ (8002454 <HAL_RCC_ClockConfig+0x244>)
 80022a0:	69db      	ldr	r3, [r3, #28]
 80022a2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	695b      	ldr	r3, [r3, #20]
 80022aa:	496a      	ldr	r1, [pc, #424]	@ (8002454 <HAL_RCC_ClockConfig+0x244>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0310 	and.w	r3, r3, #16
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d010      	beq.n	80022de <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	699a      	ldr	r2, [r3, #24]
 80022c0:	4b64      	ldr	r3, [pc, #400]	@ (8002454 <HAL_RCC_ClockConfig+0x244>)
 80022c2:	69db      	ldr	r3, [r3, #28]
 80022c4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d908      	bls.n	80022de <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80022cc:	4b61      	ldr	r3, [pc, #388]	@ (8002454 <HAL_RCC_ClockConfig+0x244>)
 80022ce:	69db      	ldr	r3, [r3, #28]
 80022d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	495e      	ldr	r1, [pc, #376]	@ (8002454 <HAL_RCC_ClockConfig+0x244>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0320 	and.w	r3, r3, #32
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d010      	beq.n	800230c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	69da      	ldr	r2, [r3, #28]
 80022ee:	4b59      	ldr	r3, [pc, #356]	@ (8002454 <HAL_RCC_ClockConfig+0x244>)
 80022f0:	6a1b      	ldr	r3, [r3, #32]
 80022f2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d908      	bls.n	800230c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80022fa:	4b56      	ldr	r3, [pc, #344]	@ (8002454 <HAL_RCC_ClockConfig+0x244>)
 80022fc:	6a1b      	ldr	r3, [r3, #32]
 80022fe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	69db      	ldr	r3, [r3, #28]
 8002306:	4953      	ldr	r1, [pc, #332]	@ (8002454 <HAL_RCC_ClockConfig+0x244>)
 8002308:	4313      	orrs	r3, r2
 800230a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d010      	beq.n	800233a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	68da      	ldr	r2, [r3, #12]
 800231c:	4b4d      	ldr	r3, [pc, #308]	@ (8002454 <HAL_RCC_ClockConfig+0x244>)
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	f003 030f 	and.w	r3, r3, #15
 8002324:	429a      	cmp	r2, r3
 8002326:	d908      	bls.n	800233a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002328:	4b4a      	ldr	r3, [pc, #296]	@ (8002454 <HAL_RCC_ClockConfig+0x244>)
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	f023 020f 	bic.w	r2, r3, #15
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	4947      	ldr	r1, [pc, #284]	@ (8002454 <HAL_RCC_ClockConfig+0x244>)
 8002336:	4313      	orrs	r3, r2
 8002338:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	2b00      	cmp	r3, #0
 8002344:	d055      	beq.n	80023f2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002346:	4b43      	ldr	r3, [pc, #268]	@ (8002454 <HAL_RCC_ClockConfig+0x244>)
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	4940      	ldr	r1, [pc, #256]	@ (8002454 <HAL_RCC_ClockConfig+0x244>)
 8002354:	4313      	orrs	r3, r2
 8002356:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	2b02      	cmp	r3, #2
 800235e:	d107      	bne.n	8002370 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002360:	4b3c      	ldr	r3, [pc, #240]	@ (8002454 <HAL_RCC_ClockConfig+0x244>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d121      	bne.n	80023b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e0f6      	b.n	800255e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	2b03      	cmp	r3, #3
 8002376:	d107      	bne.n	8002388 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002378:	4b36      	ldr	r3, [pc, #216]	@ (8002454 <HAL_RCC_ClockConfig+0x244>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d115      	bne.n	80023b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e0ea      	b.n	800255e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d107      	bne.n	80023a0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002390:	4b30      	ldr	r3, [pc, #192]	@ (8002454 <HAL_RCC_ClockConfig+0x244>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002398:	2b00      	cmp	r3, #0
 800239a:	d109      	bne.n	80023b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e0de      	b.n	800255e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023a0:	4b2c      	ldr	r3, [pc, #176]	@ (8002454 <HAL_RCC_ClockConfig+0x244>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0304 	and.w	r3, r3, #4
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d101      	bne.n	80023b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e0d6      	b.n	800255e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023b0:	4b28      	ldr	r3, [pc, #160]	@ (8002454 <HAL_RCC_ClockConfig+0x244>)
 80023b2:	691b      	ldr	r3, [r3, #16]
 80023b4:	f023 0207 	bic.w	r2, r3, #7
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	4925      	ldr	r1, [pc, #148]	@ (8002454 <HAL_RCC_ClockConfig+0x244>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023c2:	f7fe fee9 	bl	8001198 <HAL_GetTick>
 80023c6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023c8:	e00a      	b.n	80023e0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023ca:	f7fe fee5 	bl	8001198 <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023d8:	4293      	cmp	r3, r2
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e0be      	b.n	800255e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023e0:	4b1c      	ldr	r3, [pc, #112]	@ (8002454 <HAL_RCC_ClockConfig+0x244>)
 80023e2:	691b      	ldr	r3, [r3, #16]
 80023e4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	00db      	lsls	r3, r3, #3
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d1eb      	bne.n	80023ca <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d010      	beq.n	8002420 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	68da      	ldr	r2, [r3, #12]
 8002402:	4b14      	ldr	r3, [pc, #80]	@ (8002454 <HAL_RCC_ClockConfig+0x244>)
 8002404:	699b      	ldr	r3, [r3, #24]
 8002406:	f003 030f 	and.w	r3, r3, #15
 800240a:	429a      	cmp	r2, r3
 800240c:	d208      	bcs.n	8002420 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800240e:	4b11      	ldr	r3, [pc, #68]	@ (8002454 <HAL_RCC_ClockConfig+0x244>)
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	f023 020f 	bic.w	r2, r3, #15
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	490e      	ldr	r1, [pc, #56]	@ (8002454 <HAL_RCC_ClockConfig+0x244>)
 800241c:	4313      	orrs	r3, r2
 800241e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002420:	4b0b      	ldr	r3, [pc, #44]	@ (8002450 <HAL_RCC_ClockConfig+0x240>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 030f 	and.w	r3, r3, #15
 8002428:	683a      	ldr	r2, [r7, #0]
 800242a:	429a      	cmp	r2, r3
 800242c:	d214      	bcs.n	8002458 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800242e:	4b08      	ldr	r3, [pc, #32]	@ (8002450 <HAL_RCC_ClockConfig+0x240>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f023 020f 	bic.w	r2, r3, #15
 8002436:	4906      	ldr	r1, [pc, #24]	@ (8002450 <HAL_RCC_ClockConfig+0x240>)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	4313      	orrs	r3, r2
 800243c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800243e:	4b04      	ldr	r3, [pc, #16]	@ (8002450 <HAL_RCC_ClockConfig+0x240>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 030f 	and.w	r3, r3, #15
 8002446:	683a      	ldr	r2, [r7, #0]
 8002448:	429a      	cmp	r2, r3
 800244a:	d005      	beq.n	8002458 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e086      	b.n	800255e <HAL_RCC_ClockConfig+0x34e>
 8002450:	52002000 	.word	0x52002000
 8002454:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0304 	and.w	r3, r3, #4
 8002460:	2b00      	cmp	r3, #0
 8002462:	d010      	beq.n	8002486 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	691a      	ldr	r2, [r3, #16]
 8002468:	4b3f      	ldr	r3, [pc, #252]	@ (8002568 <HAL_RCC_ClockConfig+0x358>)
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002470:	429a      	cmp	r2, r3
 8002472:	d208      	bcs.n	8002486 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002474:	4b3c      	ldr	r3, [pc, #240]	@ (8002568 <HAL_RCC_ClockConfig+0x358>)
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	691b      	ldr	r3, [r3, #16]
 8002480:	4939      	ldr	r1, [pc, #228]	@ (8002568 <HAL_RCC_ClockConfig+0x358>)
 8002482:	4313      	orrs	r3, r2
 8002484:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0308 	and.w	r3, r3, #8
 800248e:	2b00      	cmp	r3, #0
 8002490:	d010      	beq.n	80024b4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	695a      	ldr	r2, [r3, #20]
 8002496:	4b34      	ldr	r3, [pc, #208]	@ (8002568 <HAL_RCC_ClockConfig+0x358>)
 8002498:	69db      	ldr	r3, [r3, #28]
 800249a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800249e:	429a      	cmp	r2, r3
 80024a0:	d208      	bcs.n	80024b4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80024a2:	4b31      	ldr	r3, [pc, #196]	@ (8002568 <HAL_RCC_ClockConfig+0x358>)
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	695b      	ldr	r3, [r3, #20]
 80024ae:	492e      	ldr	r1, [pc, #184]	@ (8002568 <HAL_RCC_ClockConfig+0x358>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0310 	and.w	r3, r3, #16
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d010      	beq.n	80024e2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	699a      	ldr	r2, [r3, #24]
 80024c4:	4b28      	ldr	r3, [pc, #160]	@ (8002568 <HAL_RCC_ClockConfig+0x358>)
 80024c6:	69db      	ldr	r3, [r3, #28]
 80024c8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d208      	bcs.n	80024e2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80024d0:	4b25      	ldr	r3, [pc, #148]	@ (8002568 <HAL_RCC_ClockConfig+0x358>)
 80024d2:	69db      	ldr	r3, [r3, #28]
 80024d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	4922      	ldr	r1, [pc, #136]	@ (8002568 <HAL_RCC_ClockConfig+0x358>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0320 	and.w	r3, r3, #32
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d010      	beq.n	8002510 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	69da      	ldr	r2, [r3, #28]
 80024f2:	4b1d      	ldr	r3, [pc, #116]	@ (8002568 <HAL_RCC_ClockConfig+0x358>)
 80024f4:	6a1b      	ldr	r3, [r3, #32]
 80024f6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d208      	bcs.n	8002510 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80024fe:	4b1a      	ldr	r3, [pc, #104]	@ (8002568 <HAL_RCC_ClockConfig+0x358>)
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	69db      	ldr	r3, [r3, #28]
 800250a:	4917      	ldr	r1, [pc, #92]	@ (8002568 <HAL_RCC_ClockConfig+0x358>)
 800250c:	4313      	orrs	r3, r2
 800250e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002510:	f000 f834 	bl	800257c <HAL_RCC_GetSysClockFreq>
 8002514:	4602      	mov	r2, r0
 8002516:	4b14      	ldr	r3, [pc, #80]	@ (8002568 <HAL_RCC_ClockConfig+0x358>)
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	0a1b      	lsrs	r3, r3, #8
 800251c:	f003 030f 	and.w	r3, r3, #15
 8002520:	4912      	ldr	r1, [pc, #72]	@ (800256c <HAL_RCC_ClockConfig+0x35c>)
 8002522:	5ccb      	ldrb	r3, [r1, r3]
 8002524:	f003 031f 	and.w	r3, r3, #31
 8002528:	fa22 f303 	lsr.w	r3, r2, r3
 800252c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800252e:	4b0e      	ldr	r3, [pc, #56]	@ (8002568 <HAL_RCC_ClockConfig+0x358>)
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	f003 030f 	and.w	r3, r3, #15
 8002536:	4a0d      	ldr	r2, [pc, #52]	@ (800256c <HAL_RCC_ClockConfig+0x35c>)
 8002538:	5cd3      	ldrb	r3, [r2, r3]
 800253a:	f003 031f 	and.w	r3, r3, #31
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	fa22 f303 	lsr.w	r3, r2, r3
 8002544:	4a0a      	ldr	r2, [pc, #40]	@ (8002570 <HAL_RCC_ClockConfig+0x360>)
 8002546:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002548:	4a0a      	ldr	r2, [pc, #40]	@ (8002574 <HAL_RCC_ClockConfig+0x364>)
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800254e:	4b0a      	ldr	r3, [pc, #40]	@ (8002578 <HAL_RCC_ClockConfig+0x368>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f7fe fdea 	bl	800112c <HAL_InitTick>
 8002558:	4603      	mov	r3, r0
 800255a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800255c:	7bfb      	ldrb	r3, [r7, #15]
}
 800255e:	4618      	mov	r0, r3
 8002560:	3718      	adds	r7, #24
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	58024400 	.word	0x58024400
 800256c:	08007760 	.word	0x08007760
 8002570:	24000004 	.word	0x24000004
 8002574:	24000000 	.word	0x24000000
 8002578:	24000008 	.word	0x24000008

0800257c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800257c:	b480      	push	{r7}
 800257e:	b089      	sub	sp, #36	@ 0x24
 8002580:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002582:	4bb3      	ldr	r3, [pc, #716]	@ (8002850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800258a:	2b18      	cmp	r3, #24
 800258c:	f200 8155 	bhi.w	800283a <HAL_RCC_GetSysClockFreq+0x2be>
 8002590:	a201      	add	r2, pc, #4	@ (adr r2, 8002598 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002596:	bf00      	nop
 8002598:	080025fd 	.word	0x080025fd
 800259c:	0800283b 	.word	0x0800283b
 80025a0:	0800283b 	.word	0x0800283b
 80025a4:	0800283b 	.word	0x0800283b
 80025a8:	0800283b 	.word	0x0800283b
 80025ac:	0800283b 	.word	0x0800283b
 80025b0:	0800283b 	.word	0x0800283b
 80025b4:	0800283b 	.word	0x0800283b
 80025b8:	08002623 	.word	0x08002623
 80025bc:	0800283b 	.word	0x0800283b
 80025c0:	0800283b 	.word	0x0800283b
 80025c4:	0800283b 	.word	0x0800283b
 80025c8:	0800283b 	.word	0x0800283b
 80025cc:	0800283b 	.word	0x0800283b
 80025d0:	0800283b 	.word	0x0800283b
 80025d4:	0800283b 	.word	0x0800283b
 80025d8:	08002629 	.word	0x08002629
 80025dc:	0800283b 	.word	0x0800283b
 80025e0:	0800283b 	.word	0x0800283b
 80025e4:	0800283b 	.word	0x0800283b
 80025e8:	0800283b 	.word	0x0800283b
 80025ec:	0800283b 	.word	0x0800283b
 80025f0:	0800283b 	.word	0x0800283b
 80025f4:	0800283b 	.word	0x0800283b
 80025f8:	0800262f 	.word	0x0800262f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80025fc:	4b94      	ldr	r3, [pc, #592]	@ (8002850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0320 	and.w	r3, r3, #32
 8002604:	2b00      	cmp	r3, #0
 8002606:	d009      	beq.n	800261c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002608:	4b91      	ldr	r3, [pc, #580]	@ (8002850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	08db      	lsrs	r3, r3, #3
 800260e:	f003 0303 	and.w	r3, r3, #3
 8002612:	4a90      	ldr	r2, [pc, #576]	@ (8002854 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002614:	fa22 f303 	lsr.w	r3, r2, r3
 8002618:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800261a:	e111      	b.n	8002840 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800261c:	4b8d      	ldr	r3, [pc, #564]	@ (8002854 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800261e:	61bb      	str	r3, [r7, #24]
      break;
 8002620:	e10e      	b.n	8002840 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002622:	4b8d      	ldr	r3, [pc, #564]	@ (8002858 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002624:	61bb      	str	r3, [r7, #24]
      break;
 8002626:	e10b      	b.n	8002840 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002628:	4b8c      	ldr	r3, [pc, #560]	@ (800285c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800262a:	61bb      	str	r3, [r7, #24]
      break;
 800262c:	e108      	b.n	8002840 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800262e:	4b88      	ldr	r3, [pc, #544]	@ (8002850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002632:	f003 0303 	and.w	r3, r3, #3
 8002636:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002638:	4b85      	ldr	r3, [pc, #532]	@ (8002850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800263a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800263c:	091b      	lsrs	r3, r3, #4
 800263e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002642:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002644:	4b82      	ldr	r3, [pc, #520]	@ (8002850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002648:	f003 0301 	and.w	r3, r3, #1
 800264c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800264e:	4b80      	ldr	r3, [pc, #512]	@ (8002850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002650:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002652:	08db      	lsrs	r3, r3, #3
 8002654:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002658:	68fa      	ldr	r2, [r7, #12]
 800265a:	fb02 f303 	mul.w	r3, r2, r3
 800265e:	ee07 3a90 	vmov	s15, r3
 8002662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002666:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	2b00      	cmp	r3, #0
 800266e:	f000 80e1 	beq.w	8002834 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	2b02      	cmp	r3, #2
 8002676:	f000 8083 	beq.w	8002780 <HAL_RCC_GetSysClockFreq+0x204>
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	2b02      	cmp	r3, #2
 800267e:	f200 80a1 	bhi.w	80027c4 <HAL_RCC_GetSysClockFreq+0x248>
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d003      	beq.n	8002690 <HAL_RCC_GetSysClockFreq+0x114>
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d056      	beq.n	800273c <HAL_RCC_GetSysClockFreq+0x1c0>
 800268e:	e099      	b.n	80027c4 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002690:	4b6f      	ldr	r3, [pc, #444]	@ (8002850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0320 	and.w	r3, r3, #32
 8002698:	2b00      	cmp	r3, #0
 800269a:	d02d      	beq.n	80026f8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800269c:	4b6c      	ldr	r3, [pc, #432]	@ (8002850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	08db      	lsrs	r3, r3, #3
 80026a2:	f003 0303 	and.w	r3, r3, #3
 80026a6:	4a6b      	ldr	r2, [pc, #428]	@ (8002854 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80026a8:	fa22 f303 	lsr.w	r3, r2, r3
 80026ac:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	ee07 3a90 	vmov	s15, r3
 80026b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	ee07 3a90 	vmov	s15, r3
 80026be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026c6:	4b62      	ldr	r3, [pc, #392]	@ (8002850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026ce:	ee07 3a90 	vmov	s15, r3
 80026d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80026da:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002860 <HAL_RCC_GetSysClockFreq+0x2e4>
 80026de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80026e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80026ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026f2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80026f6:	e087      	b.n	8002808 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	ee07 3a90 	vmov	s15, r3
 80026fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002702:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002864 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002706:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800270a:	4b51      	ldr	r3, [pc, #324]	@ (8002850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800270c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800270e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002712:	ee07 3a90 	vmov	s15, r3
 8002716:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800271a:	ed97 6a02 	vldr	s12, [r7, #8]
 800271e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002860 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002722:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002726:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800272a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800272e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002732:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002736:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800273a:	e065      	b.n	8002808 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	ee07 3a90 	vmov	s15, r3
 8002742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002746:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002868 <HAL_RCC_GetSysClockFreq+0x2ec>
 800274a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800274e:	4b40      	ldr	r3, [pc, #256]	@ (8002850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002756:	ee07 3a90 	vmov	s15, r3
 800275a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800275e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002762:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002860 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002766:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800276a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800276e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002772:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800277a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800277e:	e043      	b.n	8002808 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	ee07 3a90 	vmov	s15, r3
 8002786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800278a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800286c <HAL_RCC_GetSysClockFreq+0x2f0>
 800278e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002792:	4b2f      	ldr	r3, [pc, #188]	@ (8002850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002796:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800279a:	ee07 3a90 	vmov	s15, r3
 800279e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80027a6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002860 <HAL_RCC_GetSysClockFreq+0x2e4>
 80027aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80027b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80027c2:	e021      	b.n	8002808 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	ee07 3a90 	vmov	s15, r3
 80027ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027ce:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002868 <HAL_RCC_GetSysClockFreq+0x2ec>
 80027d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027d6:	4b1e      	ldr	r3, [pc, #120]	@ (8002850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027de:	ee07 3a90 	vmov	s15, r3
 80027e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80027ea:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002860 <HAL_RCC_GetSysClockFreq+0x2e4>
 80027ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80027fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002802:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002806:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002808:	4b11      	ldr	r3, [pc, #68]	@ (8002850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800280a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800280c:	0a5b      	lsrs	r3, r3, #9
 800280e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002812:	3301      	adds	r3, #1
 8002814:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	ee07 3a90 	vmov	s15, r3
 800281c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002820:	edd7 6a07 	vldr	s13, [r7, #28]
 8002824:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002828:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800282c:	ee17 3a90 	vmov	r3, s15
 8002830:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002832:	e005      	b.n	8002840 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002834:	2300      	movs	r3, #0
 8002836:	61bb      	str	r3, [r7, #24]
      break;
 8002838:	e002      	b.n	8002840 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800283a:	4b07      	ldr	r3, [pc, #28]	@ (8002858 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800283c:	61bb      	str	r3, [r7, #24]
      break;
 800283e:	bf00      	nop
  }

  return sysclockfreq;
 8002840:	69bb      	ldr	r3, [r7, #24]
}
 8002842:	4618      	mov	r0, r3
 8002844:	3724      	adds	r7, #36	@ 0x24
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	58024400 	.word	0x58024400
 8002854:	03d09000 	.word	0x03d09000
 8002858:	003d0900 	.word	0x003d0900
 800285c:	007a1200 	.word	0x007a1200
 8002860:	46000000 	.word	0x46000000
 8002864:	4c742400 	.word	0x4c742400
 8002868:	4a742400 	.word	0x4a742400
 800286c:	4af42400 	.word	0x4af42400

08002870 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002876:	f7ff fe81 	bl	800257c <HAL_RCC_GetSysClockFreq>
 800287a:	4602      	mov	r2, r0
 800287c:	4b10      	ldr	r3, [pc, #64]	@ (80028c0 <HAL_RCC_GetHCLKFreq+0x50>)
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	0a1b      	lsrs	r3, r3, #8
 8002882:	f003 030f 	and.w	r3, r3, #15
 8002886:	490f      	ldr	r1, [pc, #60]	@ (80028c4 <HAL_RCC_GetHCLKFreq+0x54>)
 8002888:	5ccb      	ldrb	r3, [r1, r3]
 800288a:	f003 031f 	and.w	r3, r3, #31
 800288e:	fa22 f303 	lsr.w	r3, r2, r3
 8002892:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002894:	4b0a      	ldr	r3, [pc, #40]	@ (80028c0 <HAL_RCC_GetHCLKFreq+0x50>)
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	f003 030f 	and.w	r3, r3, #15
 800289c:	4a09      	ldr	r2, [pc, #36]	@ (80028c4 <HAL_RCC_GetHCLKFreq+0x54>)
 800289e:	5cd3      	ldrb	r3, [r2, r3]
 80028a0:	f003 031f 	and.w	r3, r3, #31
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	fa22 f303 	lsr.w	r3, r2, r3
 80028aa:	4a07      	ldr	r2, [pc, #28]	@ (80028c8 <HAL_RCC_GetHCLKFreq+0x58>)
 80028ac:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80028ae:	4a07      	ldr	r2, [pc, #28]	@ (80028cc <HAL_RCC_GetHCLKFreq+0x5c>)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80028b4:	4b04      	ldr	r3, [pc, #16]	@ (80028c8 <HAL_RCC_GetHCLKFreq+0x58>)
 80028b6:	681b      	ldr	r3, [r3, #0]
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3708      	adds	r7, #8
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	58024400 	.word	0x58024400
 80028c4:	08007760 	.word	0x08007760
 80028c8:	24000004 	.word	0x24000004
 80028cc:	24000000 	.word	0x24000000

080028d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80028d4:	f7ff ffcc 	bl	8002870 <HAL_RCC_GetHCLKFreq>
 80028d8:	4602      	mov	r2, r0
 80028da:	4b06      	ldr	r3, [pc, #24]	@ (80028f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028dc:	69db      	ldr	r3, [r3, #28]
 80028de:	091b      	lsrs	r3, r3, #4
 80028e0:	f003 0307 	and.w	r3, r3, #7
 80028e4:	4904      	ldr	r1, [pc, #16]	@ (80028f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80028e6:	5ccb      	ldrb	r3, [r1, r3]
 80028e8:	f003 031f 	and.w	r3, r3, #31
 80028ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	58024400 	.word	0x58024400
 80028f8:	08007760 	.word	0x08007760

080028fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002900:	f7ff ffb6 	bl	8002870 <HAL_RCC_GetHCLKFreq>
 8002904:	4602      	mov	r2, r0
 8002906:	4b06      	ldr	r3, [pc, #24]	@ (8002920 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002908:	69db      	ldr	r3, [r3, #28]
 800290a:	0a1b      	lsrs	r3, r3, #8
 800290c:	f003 0307 	and.w	r3, r3, #7
 8002910:	4904      	ldr	r1, [pc, #16]	@ (8002924 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002912:	5ccb      	ldrb	r3, [r1, r3]
 8002914:	f003 031f 	and.w	r3, r3, #31
 8002918:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800291c:	4618      	mov	r0, r3
 800291e:	bd80      	pop	{r7, pc}
 8002920:	58024400 	.word	0x58024400
 8002924:	08007760 	.word	0x08007760

08002928 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002928:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800292c:	b0ca      	sub	sp, #296	@ 0x128
 800292e:	af00      	add	r7, sp, #0
 8002930:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002934:	2300      	movs	r3, #0
 8002936:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800293a:	2300      	movs	r3, #0
 800293c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002940:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002948:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800294c:	2500      	movs	r5, #0
 800294e:	ea54 0305 	orrs.w	r3, r4, r5
 8002952:	d049      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002954:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002958:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800295a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800295e:	d02f      	beq.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002960:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002964:	d828      	bhi.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002966:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800296a:	d01a      	beq.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800296c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002970:	d822      	bhi.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002972:	2b00      	cmp	r3, #0
 8002974:	d003      	beq.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002976:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800297a:	d007      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800297c:	e01c      	b.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800297e:	4bb8      	ldr	r3, [pc, #736]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002982:	4ab7      	ldr	r2, [pc, #732]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002984:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002988:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800298a:	e01a      	b.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800298c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002990:	3308      	adds	r3, #8
 8002992:	2102      	movs	r1, #2
 8002994:	4618      	mov	r0, r3
 8002996:	f001 fc8f 	bl	80042b8 <RCCEx_PLL2_Config>
 800299a:	4603      	mov	r3, r0
 800299c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80029a0:	e00f      	b.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80029a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029a6:	3328      	adds	r3, #40	@ 0x28
 80029a8:	2102      	movs	r1, #2
 80029aa:	4618      	mov	r0, r3
 80029ac:	f001 fd36 	bl	800441c <RCCEx_PLL3_Config>
 80029b0:	4603      	mov	r3, r0
 80029b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80029b6:	e004      	b.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80029be:	e000      	b.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80029c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d10a      	bne.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80029ca:	4ba5      	ldr	r3, [pc, #660]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029ce:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80029d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80029d8:	4aa1      	ldr	r2, [pc, #644]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029da:	430b      	orrs	r3, r1
 80029dc:	6513      	str	r3, [r2, #80]	@ 0x50
 80029de:	e003      	b.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80029e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80029e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029f0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80029f4:	f04f 0900 	mov.w	r9, #0
 80029f8:	ea58 0309 	orrs.w	r3, r8, r9
 80029fc:	d047      	beq.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80029fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a04:	2b04      	cmp	r3, #4
 8002a06:	d82a      	bhi.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002a08:	a201      	add	r2, pc, #4	@ (adr r2, 8002a10 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a0e:	bf00      	nop
 8002a10:	08002a25 	.word	0x08002a25
 8002a14:	08002a33 	.word	0x08002a33
 8002a18:	08002a49 	.word	0x08002a49
 8002a1c:	08002a67 	.word	0x08002a67
 8002a20:	08002a67 	.word	0x08002a67
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a24:	4b8e      	ldr	r3, [pc, #568]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a28:	4a8d      	ldr	r2, [pc, #564]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002a30:	e01a      	b.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a36:	3308      	adds	r3, #8
 8002a38:	2100      	movs	r1, #0
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f001 fc3c 	bl	80042b8 <RCCEx_PLL2_Config>
 8002a40:	4603      	mov	r3, r0
 8002a42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002a46:	e00f      	b.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a4c:	3328      	adds	r3, #40	@ 0x28
 8002a4e:	2100      	movs	r1, #0
 8002a50:	4618      	mov	r0, r3
 8002a52:	f001 fce3 	bl	800441c <RCCEx_PLL3_Config>
 8002a56:	4603      	mov	r3, r0
 8002a58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002a5c:	e004      	b.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002a64:	e000      	b.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002a66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d10a      	bne.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a70:	4b7b      	ldr	r3, [pc, #492]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a74:	f023 0107 	bic.w	r1, r3, #7
 8002a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a7e:	4a78      	ldr	r2, [pc, #480]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a80:	430b      	orrs	r3, r1
 8002a82:	6513      	str	r3, [r2, #80]	@ 0x50
 8002a84:	e003      	b.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a96:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8002a9a:	f04f 0b00 	mov.w	fp, #0
 8002a9e:	ea5a 030b 	orrs.w	r3, sl, fp
 8002aa2:	d04c      	beq.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002aa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aaa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002aae:	d030      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002ab0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ab4:	d829      	bhi.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002ab6:	2bc0      	cmp	r3, #192	@ 0xc0
 8002ab8:	d02d      	beq.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002aba:	2bc0      	cmp	r3, #192	@ 0xc0
 8002abc:	d825      	bhi.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002abe:	2b80      	cmp	r3, #128	@ 0x80
 8002ac0:	d018      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002ac2:	2b80      	cmp	r3, #128	@ 0x80
 8002ac4:	d821      	bhi.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d002      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002aca:	2b40      	cmp	r3, #64	@ 0x40
 8002acc:	d007      	beq.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002ace:	e01c      	b.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ad0:	4b63      	ldr	r3, [pc, #396]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad4:	4a62      	ldr	r2, [pc, #392]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ad6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ada:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002adc:	e01c      	b.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ae2:	3308      	adds	r3, #8
 8002ae4:	2100      	movs	r1, #0
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f001 fbe6 	bl	80042b8 <RCCEx_PLL2_Config>
 8002aec:	4603      	mov	r3, r0
 8002aee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002af2:	e011      	b.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002af4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002af8:	3328      	adds	r3, #40	@ 0x28
 8002afa:	2100      	movs	r1, #0
 8002afc:	4618      	mov	r0, r3
 8002afe:	f001 fc8d 	bl	800441c <RCCEx_PLL3_Config>
 8002b02:	4603      	mov	r3, r0
 8002b04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002b08:	e006      	b.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002b10:	e002      	b.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002b12:	bf00      	nop
 8002b14:	e000      	b.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002b16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d10a      	bne.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002b20:	4b4f      	ldr	r3, [pc, #316]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b24:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002b28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b2e:	4a4c      	ldr	r2, [pc, #304]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b30:	430b      	orrs	r3, r1
 8002b32:	6513      	str	r3, [r2, #80]	@ 0x50
 8002b34:	e003      	b.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b46:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8002b4a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002b4e:	2300      	movs	r3, #0
 8002b50:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002b54:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002b58:	460b      	mov	r3, r1
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	d053      	beq.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b62:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002b66:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002b6a:	d035      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002b6c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002b70:	d82e      	bhi.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002b72:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002b76:	d031      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002b78:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002b7c:	d828      	bhi.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002b7e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b82:	d01a      	beq.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002b84:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b88:	d822      	bhi.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d003      	beq.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002b8e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002b92:	d007      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002b94:	e01c      	b.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b96:	4b32      	ldr	r3, [pc, #200]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b9a:	4a31      	ldr	r2, [pc, #196]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ba0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ba2:	e01c      	b.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ba8:	3308      	adds	r3, #8
 8002baa:	2100      	movs	r1, #0
 8002bac:	4618      	mov	r0, r3
 8002bae:	f001 fb83 	bl	80042b8 <RCCEx_PLL2_Config>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002bb8:	e011      	b.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bbe:	3328      	adds	r3, #40	@ 0x28
 8002bc0:	2100      	movs	r1, #0
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f001 fc2a 	bl	800441c <RCCEx_PLL3_Config>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002bce:	e006      	b.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002bd6:	e002      	b.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002bd8:	bf00      	nop
 8002bda:	e000      	b.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002bdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d10b      	bne.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002be6:	4b1e      	ldr	r3, [pc, #120]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002be8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bea:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bf2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002bf6:	4a1a      	ldr	r2, [pc, #104]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002bf8:	430b      	orrs	r3, r1
 8002bfa:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bfc:	e003      	b.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c02:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c0e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002c12:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002c16:	2300      	movs	r3, #0
 8002c18:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002c1c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002c20:	460b      	mov	r3, r1
 8002c22:	4313      	orrs	r3, r2
 8002c24:	d056      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c2a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002c2e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002c32:	d038      	beq.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002c34:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002c38:	d831      	bhi.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002c3a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002c3e:	d034      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002c40:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002c44:	d82b      	bhi.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002c46:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002c4a:	d01d      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002c4c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002c50:	d825      	bhi.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d006      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002c56:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c5a:	d00a      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002c5c:	e01f      	b.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002c5e:	bf00      	nop
 8002c60:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c64:	4ba2      	ldr	r3, [pc, #648]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c68:	4aa1      	ldr	r2, [pc, #644]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002c70:	e01c      	b.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c76:	3308      	adds	r3, #8
 8002c78:	2100      	movs	r1, #0
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f001 fb1c 	bl	80042b8 <RCCEx_PLL2_Config>
 8002c80:	4603      	mov	r3, r0
 8002c82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002c86:	e011      	b.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002c88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c8c:	3328      	adds	r3, #40	@ 0x28
 8002c8e:	2100      	movs	r1, #0
 8002c90:	4618      	mov	r0, r3
 8002c92:	f001 fbc3 	bl	800441c <RCCEx_PLL3_Config>
 8002c96:	4603      	mov	r3, r0
 8002c98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002c9c:	e006      	b.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002ca4:	e002      	b.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002ca6:	bf00      	nop
 8002ca8:	e000      	b.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002caa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d10b      	bne.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002cb4:	4b8e      	ldr	r3, [pc, #568]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002cb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cb8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002cbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cc0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002cc4:	4a8a      	ldr	r2, [pc, #552]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002cc6:	430b      	orrs	r3, r1
 8002cc8:	6593      	str	r3, [r2, #88]	@ 0x58
 8002cca:	e003      	b.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ccc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002cd0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cdc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002ce0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002cea:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002cee:	460b      	mov	r3, r1
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	d03a      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cfa:	2b30      	cmp	r3, #48	@ 0x30
 8002cfc:	d01f      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002cfe:	2b30      	cmp	r3, #48	@ 0x30
 8002d00:	d819      	bhi.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002d02:	2b20      	cmp	r3, #32
 8002d04:	d00c      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002d06:	2b20      	cmp	r3, #32
 8002d08:	d815      	bhi.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d019      	beq.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002d0e:	2b10      	cmp	r3, #16
 8002d10:	d111      	bne.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d12:	4b77      	ldr	r3, [pc, #476]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d16:	4a76      	ldr	r2, [pc, #472]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002d1e:	e011      	b.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d24:	3308      	adds	r3, #8
 8002d26:	2102      	movs	r1, #2
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f001 fac5 	bl	80042b8 <RCCEx_PLL2_Config>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002d34:	e006      	b.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002d3c:	e002      	b.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002d3e:	bf00      	nop
 8002d40:	e000      	b.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002d42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d10a      	bne.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002d4c:	4b68      	ldr	r3, [pc, #416]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d50:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d5a:	4a65      	ldr	r2, [pc, #404]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d5c:	430b      	orrs	r3, r1
 8002d5e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d60:	e003      	b.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d72:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002d76:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002d80:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002d84:	460b      	mov	r3, r1
 8002d86:	4313      	orrs	r3, r2
 8002d88:	d051      	beq.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d90:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d94:	d035      	beq.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002d96:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d9a:	d82e      	bhi.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002d9c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002da0:	d031      	beq.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002da2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002da6:	d828      	bhi.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002da8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002dac:	d01a      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002dae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002db2:	d822      	bhi.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d003      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002db8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002dbc:	d007      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002dbe:	e01c      	b.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002dc0:	4b4b      	ldr	r3, [pc, #300]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dc4:	4a4a      	ldr	r2, [pc, #296]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002dc6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002dca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002dcc:	e01c      	b.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dd2:	3308      	adds	r3, #8
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f001 fa6e 	bl	80042b8 <RCCEx_PLL2_Config>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002de2:	e011      	b.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002de8:	3328      	adds	r3, #40	@ 0x28
 8002dea:	2100      	movs	r1, #0
 8002dec:	4618      	mov	r0, r3
 8002dee:	f001 fb15 	bl	800441c <RCCEx_PLL3_Config>
 8002df2:	4603      	mov	r3, r0
 8002df4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002df8:	e006      	b.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002e00:	e002      	b.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002e02:	bf00      	nop
 8002e04:	e000      	b.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002e06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d10a      	bne.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002e10:	4b37      	ldr	r3, [pc, #220]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e14:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e1e:	4a34      	ldr	r2, [pc, #208]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e20:	430b      	orrs	r3, r1
 8002e22:	6513      	str	r3, [r2, #80]	@ 0x50
 8002e24:	e003      	b.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e36:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002e3a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002e3e:	2300      	movs	r3, #0
 8002e40:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002e44:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002e48:	460b      	mov	r3, r1
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	d056      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e58:	d033      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002e5a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e5e:	d82c      	bhi.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002e60:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002e64:	d02f      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002e66:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002e6a:	d826      	bhi.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002e6c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002e70:	d02b      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002e72:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002e76:	d820      	bhi.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002e78:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002e7c:	d012      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002e7e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002e82:	d81a      	bhi.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d022      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002e88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e8c:	d115      	bne.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002e8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e92:	3308      	adds	r3, #8
 8002e94:	2101      	movs	r1, #1
 8002e96:	4618      	mov	r0, r3
 8002e98:	f001 fa0e 	bl	80042b8 <RCCEx_PLL2_Config>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002ea2:	e015      	b.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002ea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ea8:	3328      	adds	r3, #40	@ 0x28
 8002eaa:	2101      	movs	r1, #1
 8002eac:	4618      	mov	r0, r3
 8002eae:	f001 fab5 	bl	800441c <RCCEx_PLL3_Config>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002eb8:	e00a      	b.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002ec0:	e006      	b.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002ec2:	bf00      	nop
 8002ec4:	e004      	b.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002ec6:	bf00      	nop
 8002ec8:	e002      	b.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002eca:	bf00      	nop
 8002ecc:	e000      	b.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002ece:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ed0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d10d      	bne.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002ed8:	4b05      	ldr	r3, [pc, #20]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002eda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002edc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ee4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ee6:	4a02      	ldr	r2, [pc, #8]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ee8:	430b      	orrs	r3, r1
 8002eea:	6513      	str	r3, [r2, #80]	@ 0x50
 8002eec:	e006      	b.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002eee:	bf00      	nop
 8002ef0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ef4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ef8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002efc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f04:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002f08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002f12:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8002f16:	460b      	mov	r3, r1
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	d055      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002f1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f20:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002f24:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f28:	d033      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002f2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f2e:	d82c      	bhi.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002f30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f34:	d02f      	beq.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002f36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f3a:	d826      	bhi.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002f3c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002f40:	d02b      	beq.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002f42:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002f46:	d820      	bhi.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002f48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f4c:	d012      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002f4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f52:	d81a      	bhi.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d022      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002f58:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002f5c:	d115      	bne.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f62:	3308      	adds	r3, #8
 8002f64:	2101      	movs	r1, #1
 8002f66:	4618      	mov	r0, r3
 8002f68:	f001 f9a6 	bl	80042b8 <RCCEx_PLL2_Config>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002f72:	e015      	b.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f78:	3328      	adds	r3, #40	@ 0x28
 8002f7a:	2101      	movs	r1, #1
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f001 fa4d 	bl	800441c <RCCEx_PLL3_Config>
 8002f82:	4603      	mov	r3, r0
 8002f84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002f88:	e00a      	b.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002f90:	e006      	b.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002f92:	bf00      	nop
 8002f94:	e004      	b.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002f96:	bf00      	nop
 8002f98:	e002      	b.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002f9a:	bf00      	nop
 8002f9c:	e000      	b.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002f9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fa0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d10b      	bne.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002fa8:	4ba3      	ldr	r3, [pc, #652]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002faa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fac:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002fb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fb4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002fb8:	4a9f      	ldr	r2, [pc, #636]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fba:	430b      	orrs	r3, r1
 8002fbc:	6593      	str	r3, [r2, #88]	@ 0x58
 8002fbe:	e003      	b.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fc4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002fc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fd0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8002fd4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002fd8:	2300      	movs	r3, #0
 8002fda:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002fde:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002fe2:	460b      	mov	r3, r1
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	d037      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ff2:	d00e      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8002ff4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ff8:	d816      	bhi.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d018      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8002ffe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003002:	d111      	bne.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003004:	4b8c      	ldr	r3, [pc, #560]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003008:	4a8b      	ldr	r2, [pc, #556]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800300a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800300e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003010:	e00f      	b.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003012:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003016:	3308      	adds	r3, #8
 8003018:	2101      	movs	r1, #1
 800301a:	4618      	mov	r0, r3
 800301c:	f001 f94c 	bl	80042b8 <RCCEx_PLL2_Config>
 8003020:	4603      	mov	r3, r0
 8003022:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003026:	e004      	b.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800302e:	e000      	b.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003030:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003032:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003036:	2b00      	cmp	r3, #0
 8003038:	d10a      	bne.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800303a:	4b7f      	ldr	r3, [pc, #508]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800303c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800303e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003042:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003046:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003048:	4a7b      	ldr	r2, [pc, #492]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800304a:	430b      	orrs	r3, r1
 800304c:	6513      	str	r3, [r2, #80]	@ 0x50
 800304e:	e003      	b.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003050:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003054:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003058:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800305c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003060:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003064:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003068:	2300      	movs	r3, #0
 800306a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800306e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003072:	460b      	mov	r3, r1
 8003074:	4313      	orrs	r3, r2
 8003076:	d039      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003078:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800307c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800307e:	2b03      	cmp	r3, #3
 8003080:	d81c      	bhi.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003082:	a201      	add	r2, pc, #4	@ (adr r2, 8003088 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003088:	080030c5 	.word	0x080030c5
 800308c:	08003099 	.word	0x08003099
 8003090:	080030a7 	.word	0x080030a7
 8003094:	080030c5 	.word	0x080030c5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003098:	4b67      	ldr	r3, [pc, #412]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800309a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800309c:	4a66      	ldr	r2, [pc, #408]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800309e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80030a4:	e00f      	b.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80030a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030aa:	3308      	adds	r3, #8
 80030ac:	2102      	movs	r1, #2
 80030ae:	4618      	mov	r0, r3
 80030b0:	f001 f902 	bl	80042b8 <RCCEx_PLL2_Config>
 80030b4:	4603      	mov	r3, r0
 80030b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80030ba:	e004      	b.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80030c2:	e000      	b.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80030c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d10a      	bne.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80030ce:	4b5a      	ldr	r3, [pc, #360]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030d2:	f023 0103 	bic.w	r1, r3, #3
 80030d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030dc:	4a56      	ldr	r2, [pc, #344]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030de:	430b      	orrs	r3, r1
 80030e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80030e2:	e003      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80030ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80030f8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80030fc:	2300      	movs	r3, #0
 80030fe:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003102:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003106:	460b      	mov	r3, r1
 8003108:	4313      	orrs	r3, r2
 800310a:	f000 809f 	beq.w	800324c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800310e:	4b4b      	ldr	r3, [pc, #300]	@ (800323c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a4a      	ldr	r2, [pc, #296]	@ (800323c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003114:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003118:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800311a:	f7fe f83d 	bl	8001198 <HAL_GetTick>
 800311e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003122:	e00b      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003124:	f7fe f838 	bl	8001198 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	2b64      	cmp	r3, #100	@ 0x64
 8003132:	d903      	bls.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800313a:	e005      	b.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800313c:	4b3f      	ldr	r3, [pc, #252]	@ (800323c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003144:	2b00      	cmp	r3, #0
 8003146:	d0ed      	beq.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003148:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800314c:	2b00      	cmp	r3, #0
 800314e:	d179      	bne.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003150:	4b39      	ldr	r3, [pc, #228]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003152:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003154:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003158:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800315c:	4053      	eors	r3, r2
 800315e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003162:	2b00      	cmp	r3, #0
 8003164:	d015      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003166:	4b34      	ldr	r3, [pc, #208]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003168:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800316a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800316e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003172:	4b31      	ldr	r3, [pc, #196]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003174:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003176:	4a30      	ldr	r2, [pc, #192]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003178:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800317c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800317e:	4b2e      	ldr	r3, [pc, #184]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003180:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003182:	4a2d      	ldr	r2, [pc, #180]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003184:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003188:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800318a:	4a2b      	ldr	r2, [pc, #172]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800318c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003190:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003192:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003196:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800319a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800319e:	d118      	bne.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a0:	f7fd fffa 	bl	8001198 <HAL_GetTick>
 80031a4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031a8:	e00d      	b.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031aa:	f7fd fff5 	bl	8001198 <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80031b4:	1ad2      	subs	r2, r2, r3
 80031b6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d903      	bls.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80031c4:	e005      	b.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031c6:	4b1c      	ldr	r3, [pc, #112]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d0eb      	beq.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80031d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d129      	bne.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80031e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80031ea:	d10e      	bne.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80031ec:	4b12      	ldr	r3, [pc, #72]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031ee:	691b      	ldr	r3, [r3, #16]
 80031f0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80031f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80031fc:	091a      	lsrs	r2, r3, #4
 80031fe:	4b10      	ldr	r3, [pc, #64]	@ (8003240 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003200:	4013      	ands	r3, r2
 8003202:	4a0d      	ldr	r2, [pc, #52]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003204:	430b      	orrs	r3, r1
 8003206:	6113      	str	r3, [r2, #16]
 8003208:	e005      	b.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800320a:	4b0b      	ldr	r3, [pc, #44]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	4a0a      	ldr	r2, [pc, #40]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003210:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003214:	6113      	str	r3, [r2, #16]
 8003216:	4b08      	ldr	r3, [pc, #32]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003218:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800321a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800321e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003222:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003226:	4a04      	ldr	r2, [pc, #16]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003228:	430b      	orrs	r3, r1
 800322a:	6713      	str	r3, [r2, #112]	@ 0x70
 800322c:	e00e      	b.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800322e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003232:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003236:	e009      	b.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003238:	58024400 	.word	0x58024400
 800323c:	58024800 	.word	0x58024800
 8003240:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003244:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003248:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800324c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003254:	f002 0301 	and.w	r3, r2, #1
 8003258:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800325c:	2300      	movs	r3, #0
 800325e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003262:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003266:	460b      	mov	r3, r1
 8003268:	4313      	orrs	r3, r2
 800326a:	f000 8089 	beq.w	8003380 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800326e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003272:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003274:	2b28      	cmp	r3, #40	@ 0x28
 8003276:	d86b      	bhi.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003278:	a201      	add	r2, pc, #4	@ (adr r2, 8003280 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800327a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800327e:	bf00      	nop
 8003280:	08003359 	.word	0x08003359
 8003284:	08003351 	.word	0x08003351
 8003288:	08003351 	.word	0x08003351
 800328c:	08003351 	.word	0x08003351
 8003290:	08003351 	.word	0x08003351
 8003294:	08003351 	.word	0x08003351
 8003298:	08003351 	.word	0x08003351
 800329c:	08003351 	.word	0x08003351
 80032a0:	08003325 	.word	0x08003325
 80032a4:	08003351 	.word	0x08003351
 80032a8:	08003351 	.word	0x08003351
 80032ac:	08003351 	.word	0x08003351
 80032b0:	08003351 	.word	0x08003351
 80032b4:	08003351 	.word	0x08003351
 80032b8:	08003351 	.word	0x08003351
 80032bc:	08003351 	.word	0x08003351
 80032c0:	0800333b 	.word	0x0800333b
 80032c4:	08003351 	.word	0x08003351
 80032c8:	08003351 	.word	0x08003351
 80032cc:	08003351 	.word	0x08003351
 80032d0:	08003351 	.word	0x08003351
 80032d4:	08003351 	.word	0x08003351
 80032d8:	08003351 	.word	0x08003351
 80032dc:	08003351 	.word	0x08003351
 80032e0:	08003359 	.word	0x08003359
 80032e4:	08003351 	.word	0x08003351
 80032e8:	08003351 	.word	0x08003351
 80032ec:	08003351 	.word	0x08003351
 80032f0:	08003351 	.word	0x08003351
 80032f4:	08003351 	.word	0x08003351
 80032f8:	08003351 	.word	0x08003351
 80032fc:	08003351 	.word	0x08003351
 8003300:	08003359 	.word	0x08003359
 8003304:	08003351 	.word	0x08003351
 8003308:	08003351 	.word	0x08003351
 800330c:	08003351 	.word	0x08003351
 8003310:	08003351 	.word	0x08003351
 8003314:	08003351 	.word	0x08003351
 8003318:	08003351 	.word	0x08003351
 800331c:	08003351 	.word	0x08003351
 8003320:	08003359 	.word	0x08003359
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003324:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003328:	3308      	adds	r3, #8
 800332a:	2101      	movs	r1, #1
 800332c:	4618      	mov	r0, r3
 800332e:	f000 ffc3 	bl	80042b8 <RCCEx_PLL2_Config>
 8003332:	4603      	mov	r3, r0
 8003334:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003338:	e00f      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800333a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800333e:	3328      	adds	r3, #40	@ 0x28
 8003340:	2101      	movs	r1, #1
 8003342:	4618      	mov	r0, r3
 8003344:	f001 f86a 	bl	800441c <RCCEx_PLL3_Config>
 8003348:	4603      	mov	r3, r0
 800334a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800334e:	e004      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003356:	e000      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003358:	bf00      	nop
    }

    if (ret == HAL_OK)
 800335a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800335e:	2b00      	cmp	r3, #0
 8003360:	d10a      	bne.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003362:	4bbf      	ldr	r3, [pc, #764]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003364:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003366:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800336a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800336e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003370:	4abb      	ldr	r2, [pc, #748]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003372:	430b      	orrs	r3, r1
 8003374:	6553      	str	r3, [r2, #84]	@ 0x54
 8003376:	e003      	b.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003378:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800337c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003380:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003388:	f002 0302 	and.w	r3, r2, #2
 800338c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003390:	2300      	movs	r3, #0
 8003392:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003396:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800339a:	460b      	mov	r3, r1
 800339c:	4313      	orrs	r3, r2
 800339e:	d041      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80033a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80033a6:	2b05      	cmp	r3, #5
 80033a8:	d824      	bhi.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80033aa:	a201      	add	r2, pc, #4	@ (adr r2, 80033b0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80033ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033b0:	080033fd 	.word	0x080033fd
 80033b4:	080033c9 	.word	0x080033c9
 80033b8:	080033df 	.word	0x080033df
 80033bc:	080033fd 	.word	0x080033fd
 80033c0:	080033fd 	.word	0x080033fd
 80033c4:	080033fd 	.word	0x080033fd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80033c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033cc:	3308      	adds	r3, #8
 80033ce:	2101      	movs	r1, #1
 80033d0:	4618      	mov	r0, r3
 80033d2:	f000 ff71 	bl	80042b8 <RCCEx_PLL2_Config>
 80033d6:	4603      	mov	r3, r0
 80033d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80033dc:	e00f      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80033de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033e2:	3328      	adds	r3, #40	@ 0x28
 80033e4:	2101      	movs	r1, #1
 80033e6:	4618      	mov	r0, r3
 80033e8:	f001 f818 	bl	800441c <RCCEx_PLL3_Config>
 80033ec:	4603      	mov	r3, r0
 80033ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80033f2:	e004      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80033fa:	e000      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80033fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003402:	2b00      	cmp	r3, #0
 8003404:	d10a      	bne.n	800341c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003406:	4b96      	ldr	r3, [pc, #600]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003408:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800340a:	f023 0107 	bic.w	r1, r3, #7
 800340e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003412:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003414:	4a92      	ldr	r2, [pc, #584]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003416:	430b      	orrs	r3, r1
 8003418:	6553      	str	r3, [r2, #84]	@ 0x54
 800341a:	e003      	b.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800341c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003420:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003424:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800342c:	f002 0304 	and.w	r3, r2, #4
 8003430:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003434:	2300      	movs	r3, #0
 8003436:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800343a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800343e:	460b      	mov	r3, r1
 8003440:	4313      	orrs	r3, r2
 8003442:	d044      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003444:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003448:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800344c:	2b05      	cmp	r3, #5
 800344e:	d825      	bhi.n	800349c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003450:	a201      	add	r2, pc, #4	@ (adr r2, 8003458 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003456:	bf00      	nop
 8003458:	080034a5 	.word	0x080034a5
 800345c:	08003471 	.word	0x08003471
 8003460:	08003487 	.word	0x08003487
 8003464:	080034a5 	.word	0x080034a5
 8003468:	080034a5 	.word	0x080034a5
 800346c:	080034a5 	.word	0x080034a5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003470:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003474:	3308      	adds	r3, #8
 8003476:	2101      	movs	r1, #1
 8003478:	4618      	mov	r0, r3
 800347a:	f000 ff1d 	bl	80042b8 <RCCEx_PLL2_Config>
 800347e:	4603      	mov	r3, r0
 8003480:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003484:	e00f      	b.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003486:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800348a:	3328      	adds	r3, #40	@ 0x28
 800348c:	2101      	movs	r1, #1
 800348e:	4618      	mov	r0, r3
 8003490:	f000 ffc4 	bl	800441c <RCCEx_PLL3_Config>
 8003494:	4603      	mov	r3, r0
 8003496:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800349a:	e004      	b.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80034a2:	e000      	b.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80034a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d10b      	bne.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80034ae:	4b6c      	ldr	r3, [pc, #432]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80034b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034b2:	f023 0107 	bic.w	r1, r3, #7
 80034b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034be:	4a68      	ldr	r2, [pc, #416]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80034c0:	430b      	orrs	r3, r1
 80034c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80034c4:	e003      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80034ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d6:	f002 0320 	and.w	r3, r2, #32
 80034da:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80034de:	2300      	movs	r3, #0
 80034e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80034e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80034e8:	460b      	mov	r3, r1
 80034ea:	4313      	orrs	r3, r2
 80034ec:	d055      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80034ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80034fa:	d033      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80034fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003500:	d82c      	bhi.n	800355c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003502:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003506:	d02f      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003508:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800350c:	d826      	bhi.n	800355c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800350e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003512:	d02b      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003514:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003518:	d820      	bhi.n	800355c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800351a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800351e:	d012      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003520:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003524:	d81a      	bhi.n	800355c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003526:	2b00      	cmp	r3, #0
 8003528:	d022      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800352a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800352e:	d115      	bne.n	800355c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003530:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003534:	3308      	adds	r3, #8
 8003536:	2100      	movs	r1, #0
 8003538:	4618      	mov	r0, r3
 800353a:	f000 febd 	bl	80042b8 <RCCEx_PLL2_Config>
 800353e:	4603      	mov	r3, r0
 8003540:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003544:	e015      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003546:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800354a:	3328      	adds	r3, #40	@ 0x28
 800354c:	2102      	movs	r1, #2
 800354e:	4618      	mov	r0, r3
 8003550:	f000 ff64 	bl	800441c <RCCEx_PLL3_Config>
 8003554:	4603      	mov	r3, r0
 8003556:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800355a:	e00a      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003562:	e006      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003564:	bf00      	nop
 8003566:	e004      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003568:	bf00      	nop
 800356a:	e002      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800356c:	bf00      	nop
 800356e:	e000      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003570:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003572:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003576:	2b00      	cmp	r3, #0
 8003578:	d10b      	bne.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800357a:	4b39      	ldr	r3, [pc, #228]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800357c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800357e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003582:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003586:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800358a:	4a35      	ldr	r2, [pc, #212]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800358c:	430b      	orrs	r3, r1
 800358e:	6553      	str	r3, [r2, #84]	@ 0x54
 8003590:	e003      	b.n	800359a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003592:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003596:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800359a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800359e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80035a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80035aa:	2300      	movs	r3, #0
 80035ac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80035b0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80035b4:	460b      	mov	r3, r1
 80035b6:	4313      	orrs	r3, r2
 80035b8:	d058      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80035ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035be:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80035c2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80035c6:	d033      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80035c8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80035cc:	d82c      	bhi.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80035ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035d2:	d02f      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80035d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035d8:	d826      	bhi.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80035da:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80035de:	d02b      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80035e0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80035e4:	d820      	bhi.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80035e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035ea:	d012      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80035ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035f0:	d81a      	bhi.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d022      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80035f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035fa:	d115      	bne.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003600:	3308      	adds	r3, #8
 8003602:	2100      	movs	r1, #0
 8003604:	4618      	mov	r0, r3
 8003606:	f000 fe57 	bl	80042b8 <RCCEx_PLL2_Config>
 800360a:	4603      	mov	r3, r0
 800360c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003610:	e015      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003612:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003616:	3328      	adds	r3, #40	@ 0x28
 8003618:	2102      	movs	r1, #2
 800361a:	4618      	mov	r0, r3
 800361c:	f000 fefe 	bl	800441c <RCCEx_PLL3_Config>
 8003620:	4603      	mov	r3, r0
 8003622:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003626:	e00a      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800362e:	e006      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003630:	bf00      	nop
 8003632:	e004      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003634:	bf00      	nop
 8003636:	e002      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003638:	bf00      	nop
 800363a:	e000      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800363c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800363e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10e      	bne.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003646:	4b06      	ldr	r3, [pc, #24]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003648:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800364a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800364e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003652:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003656:	4a02      	ldr	r2, [pc, #8]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003658:	430b      	orrs	r3, r1
 800365a:	6593      	str	r3, [r2, #88]	@ 0x58
 800365c:	e006      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800365e:	bf00      	nop
 8003660:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003664:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003668:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800366c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003674:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003678:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800367c:	2300      	movs	r3, #0
 800367e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003682:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003686:	460b      	mov	r3, r1
 8003688:	4313      	orrs	r3, r2
 800368a:	d055      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800368c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003690:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003694:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003698:	d033      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800369a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800369e:	d82c      	bhi.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80036a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036a4:	d02f      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80036a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036aa:	d826      	bhi.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80036ac:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80036b0:	d02b      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80036b2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80036b6:	d820      	bhi.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80036b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80036bc:	d012      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80036be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80036c2:	d81a      	bhi.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d022      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80036c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036cc:	d115      	bne.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036d2:	3308      	adds	r3, #8
 80036d4:	2100      	movs	r1, #0
 80036d6:	4618      	mov	r0, r3
 80036d8:	f000 fdee 	bl	80042b8 <RCCEx_PLL2_Config>
 80036dc:	4603      	mov	r3, r0
 80036de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80036e2:	e015      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80036e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036e8:	3328      	adds	r3, #40	@ 0x28
 80036ea:	2102      	movs	r1, #2
 80036ec:	4618      	mov	r0, r3
 80036ee:	f000 fe95 	bl	800441c <RCCEx_PLL3_Config>
 80036f2:	4603      	mov	r3, r0
 80036f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80036f8:	e00a      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003700:	e006      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003702:	bf00      	nop
 8003704:	e004      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003706:	bf00      	nop
 8003708:	e002      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800370a:	bf00      	nop
 800370c:	e000      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800370e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003710:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003714:	2b00      	cmp	r3, #0
 8003716:	d10b      	bne.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003718:	4ba1      	ldr	r3, [pc, #644]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800371a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800371c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003720:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003724:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003728:	4a9d      	ldr	r2, [pc, #628]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800372a:	430b      	orrs	r3, r1
 800372c:	6593      	str	r3, [r2, #88]	@ 0x58
 800372e:	e003      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003730:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003734:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003738:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800373c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003740:	f002 0308 	and.w	r3, r2, #8
 8003744:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003748:	2300      	movs	r3, #0
 800374a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800374e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003752:	460b      	mov	r3, r1
 8003754:	4313      	orrs	r3, r2
 8003756:	d01e      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003758:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800375c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003760:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003764:	d10c      	bne.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003766:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800376a:	3328      	adds	r3, #40	@ 0x28
 800376c:	2102      	movs	r1, #2
 800376e:	4618      	mov	r0, r3
 8003770:	f000 fe54 	bl	800441c <RCCEx_PLL3_Config>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d002      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003780:	4b87      	ldr	r3, [pc, #540]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003782:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003784:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003788:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800378c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003790:	4a83      	ldr	r2, [pc, #524]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003792:	430b      	orrs	r3, r1
 8003794:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003796:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800379a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800379e:	f002 0310 	and.w	r3, r2, #16
 80037a2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80037a6:	2300      	movs	r3, #0
 80037a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80037ac:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80037b0:	460b      	mov	r3, r1
 80037b2:	4313      	orrs	r3, r2
 80037b4:	d01e      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80037b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80037be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037c2:	d10c      	bne.n	80037de <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80037c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037c8:	3328      	adds	r3, #40	@ 0x28
 80037ca:	2102      	movs	r1, #2
 80037cc:	4618      	mov	r0, r3
 80037ce:	f000 fe25 	bl	800441c <RCCEx_PLL3_Config>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d002      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80037de:	4b70      	ldr	r3, [pc, #448]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80037e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037e2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80037e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80037ee:	4a6c      	ldr	r2, [pc, #432]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80037f0:	430b      	orrs	r3, r1
 80037f2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037fc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003800:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003804:	2300      	movs	r3, #0
 8003806:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800380a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800380e:	460b      	mov	r3, r1
 8003810:	4313      	orrs	r3, r2
 8003812:	d03e      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003814:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003818:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800381c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003820:	d022      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003822:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003826:	d81b      	bhi.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003828:	2b00      	cmp	r3, #0
 800382a:	d003      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800382c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003830:	d00b      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003832:	e015      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003834:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003838:	3308      	adds	r3, #8
 800383a:	2100      	movs	r1, #0
 800383c:	4618      	mov	r0, r3
 800383e:	f000 fd3b 	bl	80042b8 <RCCEx_PLL2_Config>
 8003842:	4603      	mov	r3, r0
 8003844:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003848:	e00f      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800384a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800384e:	3328      	adds	r3, #40	@ 0x28
 8003850:	2102      	movs	r1, #2
 8003852:	4618      	mov	r0, r3
 8003854:	f000 fde2 	bl	800441c <RCCEx_PLL3_Config>
 8003858:	4603      	mov	r3, r0
 800385a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800385e:	e004      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003866:	e000      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003868:	bf00      	nop
    }

    if (ret == HAL_OK)
 800386a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800386e:	2b00      	cmp	r3, #0
 8003870:	d10b      	bne.n	800388a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003872:	4b4b      	ldr	r3, [pc, #300]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003874:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003876:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800387a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800387e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003882:	4a47      	ldr	r2, [pc, #284]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003884:	430b      	orrs	r3, r1
 8003886:	6593      	str	r3, [r2, #88]	@ 0x58
 8003888:	e003      	b.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800388a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800388e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800389a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800389e:	67bb      	str	r3, [r7, #120]	@ 0x78
 80038a0:	2300      	movs	r3, #0
 80038a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80038a4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80038a8:	460b      	mov	r3, r1
 80038aa:	4313      	orrs	r3, r2
 80038ac:	d03b      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80038ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038b6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80038ba:	d01f      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80038bc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80038c0:	d818      	bhi.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80038c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80038c6:	d003      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80038c8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80038cc:	d007      	beq.n	80038de <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80038ce:	e011      	b.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038d0:	4b33      	ldr	r3, [pc, #204]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80038d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038d4:	4a32      	ldr	r2, [pc, #200]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80038d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80038dc:	e00f      	b.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80038de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038e2:	3328      	adds	r3, #40	@ 0x28
 80038e4:	2101      	movs	r1, #1
 80038e6:	4618      	mov	r0, r3
 80038e8:	f000 fd98 	bl	800441c <RCCEx_PLL3_Config>
 80038ec:	4603      	mov	r3, r0
 80038ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80038f2:	e004      	b.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038fa:	e000      	b.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80038fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003902:	2b00      	cmp	r3, #0
 8003904:	d10b      	bne.n	800391e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003906:	4b26      	ldr	r3, [pc, #152]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003908:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800390a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800390e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003912:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003916:	4a22      	ldr	r2, [pc, #136]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003918:	430b      	orrs	r3, r1
 800391a:	6553      	str	r3, [r2, #84]	@ 0x54
 800391c:	e003      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800391e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003922:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003926:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800392a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800392e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003932:	673b      	str	r3, [r7, #112]	@ 0x70
 8003934:	2300      	movs	r3, #0
 8003936:	677b      	str	r3, [r7, #116]	@ 0x74
 8003938:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800393c:	460b      	mov	r3, r1
 800393e:	4313      	orrs	r3, r2
 8003940:	d034      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003942:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003946:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003948:	2b00      	cmp	r3, #0
 800394a:	d003      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800394c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003950:	d007      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8003952:	e011      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003954:	4b12      	ldr	r3, [pc, #72]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003958:	4a11      	ldr	r2, [pc, #68]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800395a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800395e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003960:	e00e      	b.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003962:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003966:	3308      	adds	r3, #8
 8003968:	2102      	movs	r1, #2
 800396a:	4618      	mov	r0, r3
 800396c:	f000 fca4 	bl	80042b8 <RCCEx_PLL2_Config>
 8003970:	4603      	mov	r3, r0
 8003972:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003976:	e003      	b.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800397e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003980:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003984:	2b00      	cmp	r3, #0
 8003986:	d10d      	bne.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003988:	4b05      	ldr	r3, [pc, #20]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800398a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800398c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003990:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003994:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003996:	4a02      	ldr	r2, [pc, #8]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003998:	430b      	orrs	r3, r1
 800399a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800399c:	e006      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800399e:	bf00      	nop
 80039a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80039ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80039b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80039ba:	2300      	movs	r3, #0
 80039bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80039be:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80039c2:	460b      	mov	r3, r1
 80039c4:	4313      	orrs	r3, r2
 80039c6:	d00c      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80039c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039cc:	3328      	adds	r3, #40	@ 0x28
 80039ce:	2102      	movs	r1, #2
 80039d0:	4618      	mov	r0, r3
 80039d2:	f000 fd23 	bl	800441c <RCCEx_PLL3_Config>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d002      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80039e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ea:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80039ee:	663b      	str	r3, [r7, #96]	@ 0x60
 80039f0:	2300      	movs	r3, #0
 80039f2:	667b      	str	r3, [r7, #100]	@ 0x64
 80039f4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80039f8:	460b      	mov	r3, r1
 80039fa:	4313      	orrs	r3, r2
 80039fc:	d038      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80039fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a06:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a0a:	d018      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003a0c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a10:	d811      	bhi.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003a12:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a16:	d014      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003a18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a1c:	d80b      	bhi.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d011      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8003a22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a26:	d106      	bne.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a28:	4bc3      	ldr	r3, [pc, #780]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a2c:	4ac2      	ldr	r2, [pc, #776]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003a34:	e008      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a3c:	e004      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003a3e:	bf00      	nop
 8003a40:	e002      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003a42:	bf00      	nop
 8003a44:	e000      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003a46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d10b      	bne.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a50:	4bb9      	ldr	r3, [pc, #740]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a54:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a60:	4ab5      	ldr	r2, [pc, #724]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a62:	430b      	orrs	r3, r1
 8003a64:	6553      	str	r3, [r2, #84]	@ 0x54
 8003a66:	e003      	b.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a6c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003a70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a78:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003a7c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003a7e:	2300      	movs	r3, #0
 8003a80:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a82:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003a86:	460b      	mov	r3, r1
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	d009      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003a8c:	4baa      	ldr	r3, [pc, #680]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a90:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a9a:	4aa7      	ldr	r2, [pc, #668]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a9c:	430b      	orrs	r3, r1
 8003a9e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003aac:	653b      	str	r3, [r7, #80]	@ 0x50
 8003aae:	2300      	movs	r3, #0
 8003ab0:	657b      	str	r3, [r7, #84]	@ 0x54
 8003ab2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	d00a      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003abc:	4b9e      	ldr	r3, [pc, #632]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ac8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003acc:	4a9a      	ldr	r2, [pc, #616]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ace:	430b      	orrs	r3, r1
 8003ad0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ada:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003ade:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ae4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003ae8:	460b      	mov	r3, r1
 8003aea:	4313      	orrs	r3, r2
 8003aec:	d009      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003aee:	4b92      	ldr	r3, [pc, #584]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003af0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003af2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003afa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003afc:	4a8e      	ldr	r2, [pc, #568]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003afe:	430b      	orrs	r3, r1
 8003b00:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b0a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003b0e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b10:	2300      	movs	r3, #0
 8003b12:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b14:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003b18:	460b      	mov	r3, r1
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	d00e      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003b1e:	4b86      	ldr	r3, [pc, #536]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	4a85      	ldr	r2, [pc, #532]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b24:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003b28:	6113      	str	r3, [r2, #16]
 8003b2a:	4b83      	ldr	r3, [pc, #524]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b2c:	6919      	ldr	r1, [r3, #16]
 8003b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b32:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003b36:	4a80      	ldr	r2, [pc, #512]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b38:	430b      	orrs	r3, r1
 8003b3a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b44:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003b48:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b4e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003b52:	460b      	mov	r3, r1
 8003b54:	4313      	orrs	r3, r2
 8003b56:	d009      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003b58:	4b77      	ldr	r3, [pc, #476]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b5c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b66:	4a74      	ldr	r2, [pc, #464]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b68:	430b      	orrs	r3, r1
 8003b6a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b74:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003b78:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b7e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003b82:	460b      	mov	r3, r1
 8003b84:	4313      	orrs	r3, r2
 8003b86:	d00a      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003b88:	4b6b      	ldr	r3, [pc, #428]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b8c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b98:	4a67      	ldr	r2, [pc, #412]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b9a:	430b      	orrs	r3, r1
 8003b9c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba6:	2100      	movs	r1, #0
 8003ba8:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003bb0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	d011      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bbe:	3308      	adds	r3, #8
 8003bc0:	2100      	movs	r1, #0
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f000 fb78 	bl	80042b8 <RCCEx_PLL2_Config>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003bce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d003      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bda:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be6:	2100      	movs	r1, #0
 8003be8:	6239      	str	r1, [r7, #32]
 8003bea:	f003 0302 	and.w	r3, r3, #2
 8003bee:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bf0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	d011      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bfe:	3308      	adds	r3, #8
 8003c00:	2101      	movs	r1, #1
 8003c02:	4618      	mov	r0, r3
 8003c04:	f000 fb58 	bl	80042b8 <RCCEx_PLL2_Config>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003c0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d003      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c26:	2100      	movs	r1, #0
 8003c28:	61b9      	str	r1, [r7, #24]
 8003c2a:	f003 0304 	and.w	r3, r3, #4
 8003c2e:	61fb      	str	r3, [r7, #28]
 8003c30:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003c34:	460b      	mov	r3, r1
 8003c36:	4313      	orrs	r3, r2
 8003c38:	d011      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c3e:	3308      	adds	r3, #8
 8003c40:	2102      	movs	r1, #2
 8003c42:	4618      	mov	r0, r3
 8003c44:	f000 fb38 	bl	80042b8 <RCCEx_PLL2_Config>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003c4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d003      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c66:	2100      	movs	r1, #0
 8003c68:	6139      	str	r1, [r7, #16]
 8003c6a:	f003 0308 	and.w	r3, r3, #8
 8003c6e:	617b      	str	r3, [r7, #20]
 8003c70:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003c74:	460b      	mov	r3, r1
 8003c76:	4313      	orrs	r3, r2
 8003c78:	d011      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c7e:	3328      	adds	r3, #40	@ 0x28
 8003c80:	2100      	movs	r1, #0
 8003c82:	4618      	mov	r0, r3
 8003c84:	f000 fbca 	bl	800441c <RCCEx_PLL3_Config>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8003c8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d003      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca6:	2100      	movs	r1, #0
 8003ca8:	60b9      	str	r1, [r7, #8]
 8003caa:	f003 0310 	and.w	r3, r3, #16
 8003cae:	60fb      	str	r3, [r7, #12]
 8003cb0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003cb4:	460b      	mov	r3, r1
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	d011      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cbe:	3328      	adds	r3, #40	@ 0x28
 8003cc0:	2101      	movs	r1, #1
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f000 fbaa 	bl	800441c <RCCEx_PLL3_Config>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003cce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d003      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cda:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce6:	2100      	movs	r1, #0
 8003ce8:	6039      	str	r1, [r7, #0]
 8003cea:	f003 0320 	and.w	r3, r3, #32
 8003cee:	607b      	str	r3, [r7, #4]
 8003cf0:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	d011      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cfe:	3328      	adds	r3, #40	@ 0x28
 8003d00:	2102      	movs	r1, #2
 8003d02:	4618      	mov	r0, r3
 8003d04:	f000 fb8a 	bl	800441c <RCCEx_PLL3_Config>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003d0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d003      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8003d1e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d101      	bne.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8003d26:	2300      	movs	r3, #0
 8003d28:	e000      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8003d32:	46bd      	mov	sp, r7
 8003d34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d38:	58024400 	.word	0x58024400

08003d3c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003d40:	f7fe fd96 	bl	8002870 <HAL_RCC_GetHCLKFreq>
 8003d44:	4602      	mov	r2, r0
 8003d46:	4b06      	ldr	r3, [pc, #24]	@ (8003d60 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003d48:	6a1b      	ldr	r3, [r3, #32]
 8003d4a:	091b      	lsrs	r3, r3, #4
 8003d4c:	f003 0307 	and.w	r3, r3, #7
 8003d50:	4904      	ldr	r1, [pc, #16]	@ (8003d64 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003d52:	5ccb      	ldrb	r3, [r1, r3]
 8003d54:	f003 031f 	and.w	r3, r3, #31
 8003d58:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	58024400 	.word	0x58024400
 8003d64:	08007760 	.word	0x08007760

08003d68 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b089      	sub	sp, #36	@ 0x24
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003d70:	4ba1      	ldr	r3, [pc, #644]	@ (8003ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d74:	f003 0303 	and.w	r3, r3, #3
 8003d78:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003d7a:	4b9f      	ldr	r3, [pc, #636]	@ (8003ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d7e:	0b1b      	lsrs	r3, r3, #12
 8003d80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d84:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003d86:	4b9c      	ldr	r3, [pc, #624]	@ (8003ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d8a:	091b      	lsrs	r3, r3, #4
 8003d8c:	f003 0301 	and.w	r3, r3, #1
 8003d90:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003d92:	4b99      	ldr	r3, [pc, #612]	@ (8003ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d96:	08db      	lsrs	r3, r3, #3
 8003d98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003d9c:	693a      	ldr	r2, [r7, #16]
 8003d9e:	fb02 f303 	mul.w	r3, r2, r3
 8003da2:	ee07 3a90 	vmov	s15, r3
 8003da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003daa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f000 8111 	beq.w	8003fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003db6:	69bb      	ldr	r3, [r7, #24]
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	f000 8083 	beq.w	8003ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	f200 80a1 	bhi.w	8003f08 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d003      	beq.n	8003dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d056      	beq.n	8003e80 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003dd2:	e099      	b.n	8003f08 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003dd4:	4b88      	ldr	r3, [pc, #544]	@ (8003ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0320 	and.w	r3, r3, #32
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d02d      	beq.n	8003e3c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003de0:	4b85      	ldr	r3, [pc, #532]	@ (8003ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	08db      	lsrs	r3, r3, #3
 8003de6:	f003 0303 	and.w	r3, r3, #3
 8003dea:	4a84      	ldr	r2, [pc, #528]	@ (8003ffc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003dec:	fa22 f303 	lsr.w	r3, r2, r3
 8003df0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	ee07 3a90 	vmov	s15, r3
 8003df8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	ee07 3a90 	vmov	s15, r3
 8003e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e0a:	4b7b      	ldr	r3, [pc, #492]	@ (8003ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e12:	ee07 3a90 	vmov	s15, r3
 8003e16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e1e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004000 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003e22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e36:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003e3a:	e087      	b.n	8003f4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	ee07 3a90 	vmov	s15, r3
 8003e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e46:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004004 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003e4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e4e:	4b6a      	ldr	r3, [pc, #424]	@ (8003ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e56:	ee07 3a90 	vmov	s15, r3
 8003e5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e62:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004000 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003e66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e7e:	e065      	b.n	8003f4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	ee07 3a90 	vmov	s15, r3
 8003e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e8a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004008 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003e8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e92:	4b59      	ldr	r3, [pc, #356]	@ (8003ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e9a:	ee07 3a90 	vmov	s15, r3
 8003e9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ea2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ea6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004000 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003eaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003eae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003eb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003eb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003eba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ebe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ec2:	e043      	b.n	8003f4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	ee07 3a90 	vmov	s15, r3
 8003eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ece:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800400c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003ed2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ed6:	4b48      	ldr	r3, [pc, #288]	@ (8003ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ed8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ede:	ee07 3a90 	vmov	s15, r3
 8003ee2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ee6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003eea:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004000 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003eee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ef2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ef6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003efa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003efe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f06:	e021      	b.n	8003f4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	ee07 3a90 	vmov	s15, r3
 8003f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f12:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004008 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003f16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f1a:	4b37      	ldr	r3, [pc, #220]	@ (8003ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f22:	ee07 3a90 	vmov	s15, r3
 8003f26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f2e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004000 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003f32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f4a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003f4c:	4b2a      	ldr	r3, [pc, #168]	@ (8003ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f50:	0a5b      	lsrs	r3, r3, #9
 8003f52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f56:	ee07 3a90 	vmov	s15, r3
 8003f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f5e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003f62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f66:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f72:	ee17 2a90 	vmov	r2, s15
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003f7a:	4b1f      	ldr	r3, [pc, #124]	@ (8003ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f7e:	0c1b      	lsrs	r3, r3, #16
 8003f80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f84:	ee07 3a90 	vmov	s15, r3
 8003f88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f8c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003f90:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f94:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fa0:	ee17 2a90 	vmov	r2, s15
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003fa8:	4b13      	ldr	r3, [pc, #76]	@ (8003ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003faa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fac:	0e1b      	lsrs	r3, r3, #24
 8003fae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003fb2:	ee07 3a90 	vmov	s15, r3
 8003fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003fbe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003fc2:	edd7 6a07 	vldr	s13, [r7, #28]
 8003fc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fce:	ee17 2a90 	vmov	r2, s15
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003fd6:	e008      	b.n	8003fea <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	609a      	str	r2, [r3, #8]
}
 8003fea:	bf00      	nop
 8003fec:	3724      	adds	r7, #36	@ 0x24
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	58024400 	.word	0x58024400
 8003ffc:	03d09000 	.word	0x03d09000
 8004000:	46000000 	.word	0x46000000
 8004004:	4c742400 	.word	0x4c742400
 8004008:	4a742400 	.word	0x4a742400
 800400c:	4af42400 	.word	0x4af42400

08004010 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004010:	b480      	push	{r7}
 8004012:	b089      	sub	sp, #36	@ 0x24
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004018:	4ba1      	ldr	r3, [pc, #644]	@ (80042a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800401a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800401c:	f003 0303 	and.w	r3, r3, #3
 8004020:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004022:	4b9f      	ldr	r3, [pc, #636]	@ (80042a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004026:	0d1b      	lsrs	r3, r3, #20
 8004028:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800402c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800402e:	4b9c      	ldr	r3, [pc, #624]	@ (80042a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004032:	0a1b      	lsrs	r3, r3, #8
 8004034:	f003 0301 	and.w	r3, r3, #1
 8004038:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800403a:	4b99      	ldr	r3, [pc, #612]	@ (80042a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800403c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800403e:	08db      	lsrs	r3, r3, #3
 8004040:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004044:	693a      	ldr	r2, [r7, #16]
 8004046:	fb02 f303 	mul.w	r3, r2, r3
 800404a:	ee07 3a90 	vmov	s15, r3
 800404e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004052:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	2b00      	cmp	r3, #0
 800405a:	f000 8111 	beq.w	8004280 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	2b02      	cmp	r3, #2
 8004062:	f000 8083 	beq.w	800416c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	2b02      	cmp	r3, #2
 800406a:	f200 80a1 	bhi.w	80041b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d003      	beq.n	800407c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	2b01      	cmp	r3, #1
 8004078:	d056      	beq.n	8004128 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800407a:	e099      	b.n	80041b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800407c:	4b88      	ldr	r3, [pc, #544]	@ (80042a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0320 	and.w	r3, r3, #32
 8004084:	2b00      	cmp	r3, #0
 8004086:	d02d      	beq.n	80040e4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004088:	4b85      	ldr	r3, [pc, #532]	@ (80042a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	08db      	lsrs	r3, r3, #3
 800408e:	f003 0303 	and.w	r3, r3, #3
 8004092:	4a84      	ldr	r2, [pc, #528]	@ (80042a4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004094:	fa22 f303 	lsr.w	r3, r2, r3
 8004098:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	ee07 3a90 	vmov	s15, r3
 80040a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	ee07 3a90 	vmov	s15, r3
 80040aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040b2:	4b7b      	ldr	r3, [pc, #492]	@ (80042a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040ba:	ee07 3a90 	vmov	s15, r3
 80040be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80040c6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80042a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80040ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80040d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040de:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80040e2:	e087      	b.n	80041f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	ee07 3a90 	vmov	s15, r3
 80040ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040ee:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80042ac <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80040f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040f6:	4b6a      	ldr	r3, [pc, #424]	@ (80042a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040fe:	ee07 3a90 	vmov	s15, r3
 8004102:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004106:	ed97 6a03 	vldr	s12, [r7, #12]
 800410a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80042a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800410e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004112:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004116:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800411a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800411e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004122:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004126:	e065      	b.n	80041f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	ee07 3a90 	vmov	s15, r3
 800412e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004132:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80042b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004136:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800413a:	4b59      	ldr	r3, [pc, #356]	@ (80042a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800413c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800413e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004142:	ee07 3a90 	vmov	s15, r3
 8004146:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800414a:	ed97 6a03 	vldr	s12, [r7, #12]
 800414e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80042a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004152:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004156:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800415a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800415e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004162:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004166:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800416a:	e043      	b.n	80041f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	ee07 3a90 	vmov	s15, r3
 8004172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004176:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80042b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800417a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800417e:	4b48      	ldr	r3, [pc, #288]	@ (80042a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004186:	ee07 3a90 	vmov	s15, r3
 800418a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800418e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004192:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80042a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004196:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800419a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800419e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80041a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80041ae:	e021      	b.n	80041f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	ee07 3a90 	vmov	s15, r3
 80041b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041ba:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80042b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80041be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041c2:	4b37      	ldr	r3, [pc, #220]	@ (80042a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041ca:	ee07 3a90 	vmov	s15, r3
 80041ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80041d6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80042a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80041da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80041e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80041f2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80041f4:	4b2a      	ldr	r3, [pc, #168]	@ (80042a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041f8:	0a5b      	lsrs	r3, r3, #9
 80041fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80041fe:	ee07 3a90 	vmov	s15, r3
 8004202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004206:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800420a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800420e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004212:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004216:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800421a:	ee17 2a90 	vmov	r2, s15
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004222:	4b1f      	ldr	r3, [pc, #124]	@ (80042a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004226:	0c1b      	lsrs	r3, r3, #16
 8004228:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800422c:	ee07 3a90 	vmov	s15, r3
 8004230:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004234:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004238:	ee37 7a87 	vadd.f32	s14, s15, s14
 800423c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004240:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004244:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004248:	ee17 2a90 	vmov	r2, s15
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004250:	4b13      	ldr	r3, [pc, #76]	@ (80042a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004254:	0e1b      	lsrs	r3, r3, #24
 8004256:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800425a:	ee07 3a90 	vmov	s15, r3
 800425e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004262:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004266:	ee37 7a87 	vadd.f32	s14, s15, s14
 800426a:	edd7 6a07 	vldr	s13, [r7, #28]
 800426e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004272:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004276:	ee17 2a90 	vmov	r2, s15
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800427e:	e008      	b.n	8004292 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	609a      	str	r2, [r3, #8]
}
 8004292:	bf00      	nop
 8004294:	3724      	adds	r7, #36	@ 0x24
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	58024400 	.word	0x58024400
 80042a4:	03d09000 	.word	0x03d09000
 80042a8:	46000000 	.word	0x46000000
 80042ac:	4c742400 	.word	0x4c742400
 80042b0:	4a742400 	.word	0x4a742400
 80042b4:	4af42400 	.word	0x4af42400

080042b8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042c2:	2300      	movs	r3, #0
 80042c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80042c6:	4b53      	ldr	r3, [pc, #332]	@ (8004414 <RCCEx_PLL2_Config+0x15c>)
 80042c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ca:	f003 0303 	and.w	r3, r3, #3
 80042ce:	2b03      	cmp	r3, #3
 80042d0:	d101      	bne.n	80042d6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e099      	b.n	800440a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80042d6:	4b4f      	ldr	r3, [pc, #316]	@ (8004414 <RCCEx_PLL2_Config+0x15c>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a4e      	ldr	r2, [pc, #312]	@ (8004414 <RCCEx_PLL2_Config+0x15c>)
 80042dc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80042e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042e2:	f7fc ff59 	bl	8001198 <HAL_GetTick>
 80042e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80042e8:	e008      	b.n	80042fc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80042ea:	f7fc ff55 	bl	8001198 <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d901      	bls.n	80042fc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e086      	b.n	800440a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80042fc:	4b45      	ldr	r3, [pc, #276]	@ (8004414 <RCCEx_PLL2_Config+0x15c>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d1f0      	bne.n	80042ea <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004308:	4b42      	ldr	r3, [pc, #264]	@ (8004414 <RCCEx_PLL2_Config+0x15c>)
 800430a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800430c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	031b      	lsls	r3, r3, #12
 8004316:	493f      	ldr	r1, [pc, #252]	@ (8004414 <RCCEx_PLL2_Config+0x15c>)
 8004318:	4313      	orrs	r3, r2
 800431a:	628b      	str	r3, [r1, #40]	@ 0x28
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	3b01      	subs	r3, #1
 8004322:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	3b01      	subs	r3, #1
 800432c:	025b      	lsls	r3, r3, #9
 800432e:	b29b      	uxth	r3, r3
 8004330:	431a      	orrs	r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	3b01      	subs	r3, #1
 8004338:	041b      	lsls	r3, r3, #16
 800433a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800433e:	431a      	orrs	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	691b      	ldr	r3, [r3, #16]
 8004344:	3b01      	subs	r3, #1
 8004346:	061b      	lsls	r3, r3, #24
 8004348:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800434c:	4931      	ldr	r1, [pc, #196]	@ (8004414 <RCCEx_PLL2_Config+0x15c>)
 800434e:	4313      	orrs	r3, r2
 8004350:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004352:	4b30      	ldr	r3, [pc, #192]	@ (8004414 <RCCEx_PLL2_Config+0x15c>)
 8004354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004356:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	492d      	ldr	r1, [pc, #180]	@ (8004414 <RCCEx_PLL2_Config+0x15c>)
 8004360:	4313      	orrs	r3, r2
 8004362:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004364:	4b2b      	ldr	r3, [pc, #172]	@ (8004414 <RCCEx_PLL2_Config+0x15c>)
 8004366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004368:	f023 0220 	bic.w	r2, r3, #32
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	699b      	ldr	r3, [r3, #24]
 8004370:	4928      	ldr	r1, [pc, #160]	@ (8004414 <RCCEx_PLL2_Config+0x15c>)
 8004372:	4313      	orrs	r3, r2
 8004374:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004376:	4b27      	ldr	r3, [pc, #156]	@ (8004414 <RCCEx_PLL2_Config+0x15c>)
 8004378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800437a:	4a26      	ldr	r2, [pc, #152]	@ (8004414 <RCCEx_PLL2_Config+0x15c>)
 800437c:	f023 0310 	bic.w	r3, r3, #16
 8004380:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004382:	4b24      	ldr	r3, [pc, #144]	@ (8004414 <RCCEx_PLL2_Config+0x15c>)
 8004384:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004386:	4b24      	ldr	r3, [pc, #144]	@ (8004418 <RCCEx_PLL2_Config+0x160>)
 8004388:	4013      	ands	r3, r2
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	69d2      	ldr	r2, [r2, #28]
 800438e:	00d2      	lsls	r2, r2, #3
 8004390:	4920      	ldr	r1, [pc, #128]	@ (8004414 <RCCEx_PLL2_Config+0x15c>)
 8004392:	4313      	orrs	r3, r2
 8004394:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004396:	4b1f      	ldr	r3, [pc, #124]	@ (8004414 <RCCEx_PLL2_Config+0x15c>)
 8004398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800439a:	4a1e      	ldr	r2, [pc, #120]	@ (8004414 <RCCEx_PLL2_Config+0x15c>)
 800439c:	f043 0310 	orr.w	r3, r3, #16
 80043a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d106      	bne.n	80043b6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80043a8:	4b1a      	ldr	r3, [pc, #104]	@ (8004414 <RCCEx_PLL2_Config+0x15c>)
 80043aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ac:	4a19      	ldr	r2, [pc, #100]	@ (8004414 <RCCEx_PLL2_Config+0x15c>)
 80043ae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80043b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80043b4:	e00f      	b.n	80043d6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d106      	bne.n	80043ca <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80043bc:	4b15      	ldr	r3, [pc, #84]	@ (8004414 <RCCEx_PLL2_Config+0x15c>)
 80043be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043c0:	4a14      	ldr	r2, [pc, #80]	@ (8004414 <RCCEx_PLL2_Config+0x15c>)
 80043c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80043c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80043c8:	e005      	b.n	80043d6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80043ca:	4b12      	ldr	r3, [pc, #72]	@ (8004414 <RCCEx_PLL2_Config+0x15c>)
 80043cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ce:	4a11      	ldr	r2, [pc, #68]	@ (8004414 <RCCEx_PLL2_Config+0x15c>)
 80043d0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80043d4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80043d6:	4b0f      	ldr	r3, [pc, #60]	@ (8004414 <RCCEx_PLL2_Config+0x15c>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a0e      	ldr	r2, [pc, #56]	@ (8004414 <RCCEx_PLL2_Config+0x15c>)
 80043dc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80043e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043e2:	f7fc fed9 	bl	8001198 <HAL_GetTick>
 80043e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80043e8:	e008      	b.n	80043fc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80043ea:	f7fc fed5 	bl	8001198 <HAL_GetTick>
 80043ee:	4602      	mov	r2, r0
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	d901      	bls.n	80043fc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e006      	b.n	800440a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80043fc:	4b05      	ldr	r3, [pc, #20]	@ (8004414 <RCCEx_PLL2_Config+0x15c>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d0f0      	beq.n	80043ea <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004408:	7bfb      	ldrb	r3, [r7, #15]
}
 800440a:	4618      	mov	r0, r3
 800440c:	3710      	adds	r7, #16
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	58024400 	.word	0x58024400
 8004418:	ffff0007 	.word	0xffff0007

0800441c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004426:	2300      	movs	r3, #0
 8004428:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800442a:	4b53      	ldr	r3, [pc, #332]	@ (8004578 <RCCEx_PLL3_Config+0x15c>)
 800442c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800442e:	f003 0303 	and.w	r3, r3, #3
 8004432:	2b03      	cmp	r3, #3
 8004434:	d101      	bne.n	800443a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e099      	b.n	800456e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800443a:	4b4f      	ldr	r3, [pc, #316]	@ (8004578 <RCCEx_PLL3_Config+0x15c>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a4e      	ldr	r2, [pc, #312]	@ (8004578 <RCCEx_PLL3_Config+0x15c>)
 8004440:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004444:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004446:	f7fc fea7 	bl	8001198 <HAL_GetTick>
 800444a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800444c:	e008      	b.n	8004460 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800444e:	f7fc fea3 	bl	8001198 <HAL_GetTick>
 8004452:	4602      	mov	r2, r0
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	2b02      	cmp	r3, #2
 800445a:	d901      	bls.n	8004460 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800445c:	2303      	movs	r3, #3
 800445e:	e086      	b.n	800456e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004460:	4b45      	ldr	r3, [pc, #276]	@ (8004578 <RCCEx_PLL3_Config+0x15c>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d1f0      	bne.n	800444e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800446c:	4b42      	ldr	r3, [pc, #264]	@ (8004578 <RCCEx_PLL3_Config+0x15c>)
 800446e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004470:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	051b      	lsls	r3, r3, #20
 800447a:	493f      	ldr	r1, [pc, #252]	@ (8004578 <RCCEx_PLL3_Config+0x15c>)
 800447c:	4313      	orrs	r3, r2
 800447e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	3b01      	subs	r3, #1
 8004486:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	3b01      	subs	r3, #1
 8004490:	025b      	lsls	r3, r3, #9
 8004492:	b29b      	uxth	r3, r3
 8004494:	431a      	orrs	r2, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	3b01      	subs	r3, #1
 800449c:	041b      	lsls	r3, r3, #16
 800449e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80044a2:	431a      	orrs	r2, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	3b01      	subs	r3, #1
 80044aa:	061b      	lsls	r3, r3, #24
 80044ac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80044b0:	4931      	ldr	r1, [pc, #196]	@ (8004578 <RCCEx_PLL3_Config+0x15c>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80044b6:	4b30      	ldr	r3, [pc, #192]	@ (8004578 <RCCEx_PLL3_Config+0x15c>)
 80044b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ba:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	695b      	ldr	r3, [r3, #20]
 80044c2:	492d      	ldr	r1, [pc, #180]	@ (8004578 <RCCEx_PLL3_Config+0x15c>)
 80044c4:	4313      	orrs	r3, r2
 80044c6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80044c8:	4b2b      	ldr	r3, [pc, #172]	@ (8004578 <RCCEx_PLL3_Config+0x15c>)
 80044ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044cc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	699b      	ldr	r3, [r3, #24]
 80044d4:	4928      	ldr	r1, [pc, #160]	@ (8004578 <RCCEx_PLL3_Config+0x15c>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80044da:	4b27      	ldr	r3, [pc, #156]	@ (8004578 <RCCEx_PLL3_Config+0x15c>)
 80044dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044de:	4a26      	ldr	r2, [pc, #152]	@ (8004578 <RCCEx_PLL3_Config+0x15c>)
 80044e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80044e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80044e6:	4b24      	ldr	r3, [pc, #144]	@ (8004578 <RCCEx_PLL3_Config+0x15c>)
 80044e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80044ea:	4b24      	ldr	r3, [pc, #144]	@ (800457c <RCCEx_PLL3_Config+0x160>)
 80044ec:	4013      	ands	r3, r2
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	69d2      	ldr	r2, [r2, #28]
 80044f2:	00d2      	lsls	r2, r2, #3
 80044f4:	4920      	ldr	r1, [pc, #128]	@ (8004578 <RCCEx_PLL3_Config+0x15c>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80044fa:	4b1f      	ldr	r3, [pc, #124]	@ (8004578 <RCCEx_PLL3_Config+0x15c>)
 80044fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044fe:	4a1e      	ldr	r2, [pc, #120]	@ (8004578 <RCCEx_PLL3_Config+0x15c>)
 8004500:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004504:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d106      	bne.n	800451a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800450c:	4b1a      	ldr	r3, [pc, #104]	@ (8004578 <RCCEx_PLL3_Config+0x15c>)
 800450e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004510:	4a19      	ldr	r2, [pc, #100]	@ (8004578 <RCCEx_PLL3_Config+0x15c>)
 8004512:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004516:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004518:	e00f      	b.n	800453a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	2b01      	cmp	r3, #1
 800451e:	d106      	bne.n	800452e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004520:	4b15      	ldr	r3, [pc, #84]	@ (8004578 <RCCEx_PLL3_Config+0x15c>)
 8004522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004524:	4a14      	ldr	r2, [pc, #80]	@ (8004578 <RCCEx_PLL3_Config+0x15c>)
 8004526:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800452a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800452c:	e005      	b.n	800453a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800452e:	4b12      	ldr	r3, [pc, #72]	@ (8004578 <RCCEx_PLL3_Config+0x15c>)
 8004530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004532:	4a11      	ldr	r2, [pc, #68]	@ (8004578 <RCCEx_PLL3_Config+0x15c>)
 8004534:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004538:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800453a:	4b0f      	ldr	r3, [pc, #60]	@ (8004578 <RCCEx_PLL3_Config+0x15c>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a0e      	ldr	r2, [pc, #56]	@ (8004578 <RCCEx_PLL3_Config+0x15c>)
 8004540:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004544:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004546:	f7fc fe27 	bl	8001198 <HAL_GetTick>
 800454a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800454c:	e008      	b.n	8004560 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800454e:	f7fc fe23 	bl	8001198 <HAL_GetTick>
 8004552:	4602      	mov	r2, r0
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	2b02      	cmp	r3, #2
 800455a:	d901      	bls.n	8004560 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800455c:	2303      	movs	r3, #3
 800455e:	e006      	b.n	800456e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004560:	4b05      	ldr	r3, [pc, #20]	@ (8004578 <RCCEx_PLL3_Config+0x15c>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004568:	2b00      	cmp	r3, #0
 800456a:	d0f0      	beq.n	800454e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800456c:	7bfb      	ldrb	r3, [r7, #15]
}
 800456e:	4618      	mov	r0, r3
 8004570:	3710      	adds	r7, #16
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	58024400 	.word	0x58024400
 800457c:	ffff0007 	.word	0xffff0007

08004580 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d101      	bne.n	8004592 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e049      	b.n	8004626 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b00      	cmp	r3, #0
 800459c:	d106      	bne.n	80045ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f7fc fc02 	bl	8000db0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2202      	movs	r2, #2
 80045b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	3304      	adds	r3, #4
 80045bc:	4619      	mov	r1, r3
 80045be:	4610      	mov	r0, r2
 80045c0:	f000 fbb0 	bl	8004d24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3708      	adds	r7, #8
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}

0800462e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800462e:	b580      	push	{r7, lr}
 8004630:	b082      	sub	sp, #8
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d101      	bne.n	8004640 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e049      	b.n	80046d4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004646:	b2db      	uxtb	r3, r3
 8004648:	2b00      	cmp	r3, #0
 800464a:	d106      	bne.n	800465a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f000 f841 	bl	80046dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2202      	movs	r2, #2
 800465e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	3304      	adds	r3, #4
 800466a:	4619      	mov	r1, r3
 800466c:	4610      	mov	r0, r2
 800466e:	f000 fb59 	bl	8004d24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2201      	movs	r2, #1
 8004676:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2201      	movs	r2, #1
 8004686:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2201      	movs	r2, #1
 800468e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2201      	movs	r2, #1
 8004696:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2201      	movs	r2, #1
 800469e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2201      	movs	r2, #1
 80046a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2201      	movs	r2, #1
 80046ae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2201      	movs	r2, #1
 80046b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2201      	movs	r2, #1
 80046be:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2201      	movs	r2, #1
 80046ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80046d2:	2300      	movs	r3, #0
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3708      	adds	r7, #8
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80046e4:	bf00      	nop
 80046e6:	370c      	adds	r7, #12
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d109      	bne.n	8004714 <HAL_TIM_PWM_Start+0x24>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004706:	b2db      	uxtb	r3, r3
 8004708:	2b01      	cmp	r3, #1
 800470a:	bf14      	ite	ne
 800470c:	2301      	movne	r3, #1
 800470e:	2300      	moveq	r3, #0
 8004710:	b2db      	uxtb	r3, r3
 8004712:	e03c      	b.n	800478e <HAL_TIM_PWM_Start+0x9e>
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	2b04      	cmp	r3, #4
 8004718:	d109      	bne.n	800472e <HAL_TIM_PWM_Start+0x3e>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004720:	b2db      	uxtb	r3, r3
 8004722:	2b01      	cmp	r3, #1
 8004724:	bf14      	ite	ne
 8004726:	2301      	movne	r3, #1
 8004728:	2300      	moveq	r3, #0
 800472a:	b2db      	uxtb	r3, r3
 800472c:	e02f      	b.n	800478e <HAL_TIM_PWM_Start+0x9e>
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	2b08      	cmp	r3, #8
 8004732:	d109      	bne.n	8004748 <HAL_TIM_PWM_Start+0x58>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800473a:	b2db      	uxtb	r3, r3
 800473c:	2b01      	cmp	r3, #1
 800473e:	bf14      	ite	ne
 8004740:	2301      	movne	r3, #1
 8004742:	2300      	moveq	r3, #0
 8004744:	b2db      	uxtb	r3, r3
 8004746:	e022      	b.n	800478e <HAL_TIM_PWM_Start+0x9e>
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	2b0c      	cmp	r3, #12
 800474c:	d109      	bne.n	8004762 <HAL_TIM_PWM_Start+0x72>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004754:	b2db      	uxtb	r3, r3
 8004756:	2b01      	cmp	r3, #1
 8004758:	bf14      	ite	ne
 800475a:	2301      	movne	r3, #1
 800475c:	2300      	moveq	r3, #0
 800475e:	b2db      	uxtb	r3, r3
 8004760:	e015      	b.n	800478e <HAL_TIM_PWM_Start+0x9e>
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	2b10      	cmp	r3, #16
 8004766:	d109      	bne.n	800477c <HAL_TIM_PWM_Start+0x8c>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800476e:	b2db      	uxtb	r3, r3
 8004770:	2b01      	cmp	r3, #1
 8004772:	bf14      	ite	ne
 8004774:	2301      	movne	r3, #1
 8004776:	2300      	moveq	r3, #0
 8004778:	b2db      	uxtb	r3, r3
 800477a:	e008      	b.n	800478e <HAL_TIM_PWM_Start+0x9e>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004782:	b2db      	uxtb	r3, r3
 8004784:	2b01      	cmp	r3, #1
 8004786:	bf14      	ite	ne
 8004788:	2301      	movne	r3, #1
 800478a:	2300      	moveq	r3, #0
 800478c:	b2db      	uxtb	r3, r3
 800478e:	2b00      	cmp	r3, #0
 8004790:	d001      	beq.n	8004796 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e0a1      	b.n	80048da <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d104      	bne.n	80047a6 <HAL_TIM_PWM_Start+0xb6>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2202      	movs	r2, #2
 80047a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80047a4:	e023      	b.n	80047ee <HAL_TIM_PWM_Start+0xfe>
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	2b04      	cmp	r3, #4
 80047aa:	d104      	bne.n	80047b6 <HAL_TIM_PWM_Start+0xc6>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2202      	movs	r2, #2
 80047b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80047b4:	e01b      	b.n	80047ee <HAL_TIM_PWM_Start+0xfe>
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	2b08      	cmp	r3, #8
 80047ba:	d104      	bne.n	80047c6 <HAL_TIM_PWM_Start+0xd6>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2202      	movs	r2, #2
 80047c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80047c4:	e013      	b.n	80047ee <HAL_TIM_PWM_Start+0xfe>
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	2b0c      	cmp	r3, #12
 80047ca:	d104      	bne.n	80047d6 <HAL_TIM_PWM_Start+0xe6>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2202      	movs	r2, #2
 80047d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80047d4:	e00b      	b.n	80047ee <HAL_TIM_PWM_Start+0xfe>
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	2b10      	cmp	r3, #16
 80047da:	d104      	bne.n	80047e6 <HAL_TIM_PWM_Start+0xf6>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2202      	movs	r2, #2
 80047e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80047e4:	e003      	b.n	80047ee <HAL_TIM_PWM_Start+0xfe>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2202      	movs	r2, #2
 80047ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2201      	movs	r2, #1
 80047f4:	6839      	ldr	r1, [r7, #0]
 80047f6:	4618      	mov	r0, r3
 80047f8:	f000 fea8 	bl	800554c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a38      	ldr	r2, [pc, #224]	@ (80048e4 <HAL_TIM_PWM_Start+0x1f4>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d013      	beq.n	800482e <HAL_TIM_PWM_Start+0x13e>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a37      	ldr	r2, [pc, #220]	@ (80048e8 <HAL_TIM_PWM_Start+0x1f8>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d00e      	beq.n	800482e <HAL_TIM_PWM_Start+0x13e>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a35      	ldr	r2, [pc, #212]	@ (80048ec <HAL_TIM_PWM_Start+0x1fc>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d009      	beq.n	800482e <HAL_TIM_PWM_Start+0x13e>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a34      	ldr	r2, [pc, #208]	@ (80048f0 <HAL_TIM_PWM_Start+0x200>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d004      	beq.n	800482e <HAL_TIM_PWM_Start+0x13e>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a32      	ldr	r2, [pc, #200]	@ (80048f4 <HAL_TIM_PWM_Start+0x204>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d101      	bne.n	8004832 <HAL_TIM_PWM_Start+0x142>
 800482e:	2301      	movs	r3, #1
 8004830:	e000      	b.n	8004834 <HAL_TIM_PWM_Start+0x144>
 8004832:	2300      	movs	r3, #0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d007      	beq.n	8004848 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004846:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a25      	ldr	r2, [pc, #148]	@ (80048e4 <HAL_TIM_PWM_Start+0x1f4>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d022      	beq.n	8004898 <HAL_TIM_PWM_Start+0x1a8>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800485a:	d01d      	beq.n	8004898 <HAL_TIM_PWM_Start+0x1a8>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a25      	ldr	r2, [pc, #148]	@ (80048f8 <HAL_TIM_PWM_Start+0x208>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d018      	beq.n	8004898 <HAL_TIM_PWM_Start+0x1a8>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a24      	ldr	r2, [pc, #144]	@ (80048fc <HAL_TIM_PWM_Start+0x20c>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d013      	beq.n	8004898 <HAL_TIM_PWM_Start+0x1a8>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a22      	ldr	r2, [pc, #136]	@ (8004900 <HAL_TIM_PWM_Start+0x210>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d00e      	beq.n	8004898 <HAL_TIM_PWM_Start+0x1a8>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a1a      	ldr	r2, [pc, #104]	@ (80048e8 <HAL_TIM_PWM_Start+0x1f8>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d009      	beq.n	8004898 <HAL_TIM_PWM_Start+0x1a8>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a1e      	ldr	r2, [pc, #120]	@ (8004904 <HAL_TIM_PWM_Start+0x214>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d004      	beq.n	8004898 <HAL_TIM_PWM_Start+0x1a8>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a16      	ldr	r2, [pc, #88]	@ (80048ec <HAL_TIM_PWM_Start+0x1fc>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d115      	bne.n	80048c4 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	689a      	ldr	r2, [r3, #8]
 800489e:	4b1a      	ldr	r3, [pc, #104]	@ (8004908 <HAL_TIM_PWM_Start+0x218>)
 80048a0:	4013      	ands	r3, r2
 80048a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2b06      	cmp	r3, #6
 80048a8:	d015      	beq.n	80048d6 <HAL_TIM_PWM_Start+0x1e6>
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048b0:	d011      	beq.n	80048d6 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f042 0201 	orr.w	r2, r2, #1
 80048c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048c2:	e008      	b.n	80048d6 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f042 0201 	orr.w	r2, r2, #1
 80048d2:	601a      	str	r2, [r3, #0]
 80048d4:	e000      	b.n	80048d8 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3710      	adds	r7, #16
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	40010000 	.word	0x40010000
 80048e8:	40010400 	.word	0x40010400
 80048ec:	40014000 	.word	0x40014000
 80048f0:	40014400 	.word	0x40014400
 80048f4:	40014800 	.word	0x40014800
 80048f8:	40000400 	.word	0x40000400
 80048fc:	40000800 	.word	0x40000800
 8004900:	40000c00 	.word	0x40000c00
 8004904:	40001800 	.word	0x40001800
 8004908:	00010007 	.word	0x00010007

0800490c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b086      	sub	sp, #24
 8004910:	af00      	add	r7, sp, #0
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004918:	2300      	movs	r3, #0
 800491a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004922:	2b01      	cmp	r3, #1
 8004924:	d101      	bne.n	800492a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004926:	2302      	movs	r3, #2
 8004928:	e0ff      	b.n	8004b2a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2201      	movs	r2, #1
 800492e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2b14      	cmp	r3, #20
 8004936:	f200 80f0 	bhi.w	8004b1a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800493a:	a201      	add	r2, pc, #4	@ (adr r2, 8004940 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800493c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004940:	08004995 	.word	0x08004995
 8004944:	08004b1b 	.word	0x08004b1b
 8004948:	08004b1b 	.word	0x08004b1b
 800494c:	08004b1b 	.word	0x08004b1b
 8004950:	080049d5 	.word	0x080049d5
 8004954:	08004b1b 	.word	0x08004b1b
 8004958:	08004b1b 	.word	0x08004b1b
 800495c:	08004b1b 	.word	0x08004b1b
 8004960:	08004a17 	.word	0x08004a17
 8004964:	08004b1b 	.word	0x08004b1b
 8004968:	08004b1b 	.word	0x08004b1b
 800496c:	08004b1b 	.word	0x08004b1b
 8004970:	08004a57 	.word	0x08004a57
 8004974:	08004b1b 	.word	0x08004b1b
 8004978:	08004b1b 	.word	0x08004b1b
 800497c:	08004b1b 	.word	0x08004b1b
 8004980:	08004a99 	.word	0x08004a99
 8004984:	08004b1b 	.word	0x08004b1b
 8004988:	08004b1b 	.word	0x08004b1b
 800498c:	08004b1b 	.word	0x08004b1b
 8004990:	08004ad9 	.word	0x08004ad9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	68b9      	ldr	r1, [r7, #8]
 800499a:	4618      	mov	r0, r3
 800499c:	f000 fa62 	bl	8004e64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	699a      	ldr	r2, [r3, #24]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f042 0208 	orr.w	r2, r2, #8
 80049ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	699a      	ldr	r2, [r3, #24]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f022 0204 	bic.w	r2, r2, #4
 80049be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	6999      	ldr	r1, [r3, #24]
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	691a      	ldr	r2, [r3, #16]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	430a      	orrs	r2, r1
 80049d0:	619a      	str	r2, [r3, #24]
      break;
 80049d2:	e0a5      	b.n	8004b20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	68b9      	ldr	r1, [r7, #8]
 80049da:	4618      	mov	r0, r3
 80049dc:	f000 fad2 	bl	8004f84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	699a      	ldr	r2, [r3, #24]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80049ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	699a      	ldr	r2, [r3, #24]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	6999      	ldr	r1, [r3, #24]
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	021a      	lsls	r2, r3, #8
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	430a      	orrs	r2, r1
 8004a12:	619a      	str	r2, [r3, #24]
      break;
 8004a14:	e084      	b.n	8004b20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68b9      	ldr	r1, [r7, #8]
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f000 fb3b 	bl	8005098 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	69da      	ldr	r2, [r3, #28]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f042 0208 	orr.w	r2, r2, #8
 8004a30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	69da      	ldr	r2, [r3, #28]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f022 0204 	bic.w	r2, r2, #4
 8004a40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	69d9      	ldr	r1, [r3, #28]
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	691a      	ldr	r2, [r3, #16]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	430a      	orrs	r2, r1
 8004a52:	61da      	str	r2, [r3, #28]
      break;
 8004a54:	e064      	b.n	8004b20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	68b9      	ldr	r1, [r7, #8]
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f000 fba3 	bl	80051a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	69da      	ldr	r2, [r3, #28]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	69da      	ldr	r2, [r3, #28]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	69d9      	ldr	r1, [r3, #28]
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	691b      	ldr	r3, [r3, #16]
 8004a8c:	021a      	lsls	r2, r3, #8
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	430a      	orrs	r2, r1
 8004a94:	61da      	str	r2, [r3, #28]
      break;
 8004a96:	e043      	b.n	8004b20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	68b9      	ldr	r1, [r7, #8]
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f000 fbec 	bl	800527c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f042 0208 	orr.w	r2, r2, #8
 8004ab2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f022 0204 	bic.w	r2, r2, #4
 8004ac2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	691a      	ldr	r2, [r3, #16]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	430a      	orrs	r2, r1
 8004ad4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004ad6:	e023      	b.n	8004b20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68b9      	ldr	r1, [r7, #8]
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f000 fc30 	bl	8005344 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004af2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b02:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	021a      	lsls	r2, r3, #8
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	430a      	orrs	r2, r1
 8004b16:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004b18:	e002      	b.n	8004b20 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	75fb      	strb	r3, [r7, #23]
      break;
 8004b1e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b28:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3718      	adds	r7, #24
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop

08004b34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d101      	bne.n	8004b50 <HAL_TIM_ConfigClockSource+0x1c>
 8004b4c:	2302      	movs	r3, #2
 8004b4e:	e0dc      	b.n	8004d0a <HAL_TIM_ConfigClockSource+0x1d6>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2202      	movs	r2, #2
 8004b5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b68:	68ba      	ldr	r2, [r7, #8]
 8004b6a:	4b6a      	ldr	r3, [pc, #424]	@ (8004d14 <HAL_TIM_ConfigClockSource+0x1e0>)
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68ba      	ldr	r2, [r7, #8]
 8004b7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a64      	ldr	r2, [pc, #400]	@ (8004d18 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	f000 80a9 	beq.w	8004cde <HAL_TIM_ConfigClockSource+0x1aa>
 8004b8c:	4a62      	ldr	r2, [pc, #392]	@ (8004d18 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	f200 80ae 	bhi.w	8004cf0 <HAL_TIM_ConfigClockSource+0x1bc>
 8004b94:	4a61      	ldr	r2, [pc, #388]	@ (8004d1c <HAL_TIM_ConfigClockSource+0x1e8>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	f000 80a1 	beq.w	8004cde <HAL_TIM_ConfigClockSource+0x1aa>
 8004b9c:	4a5f      	ldr	r2, [pc, #380]	@ (8004d1c <HAL_TIM_ConfigClockSource+0x1e8>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	f200 80a6 	bhi.w	8004cf0 <HAL_TIM_ConfigClockSource+0x1bc>
 8004ba4:	4a5e      	ldr	r2, [pc, #376]	@ (8004d20 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	f000 8099 	beq.w	8004cde <HAL_TIM_ConfigClockSource+0x1aa>
 8004bac:	4a5c      	ldr	r2, [pc, #368]	@ (8004d20 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	f200 809e 	bhi.w	8004cf0 <HAL_TIM_ConfigClockSource+0x1bc>
 8004bb4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004bb8:	f000 8091 	beq.w	8004cde <HAL_TIM_ConfigClockSource+0x1aa>
 8004bbc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004bc0:	f200 8096 	bhi.w	8004cf0 <HAL_TIM_ConfigClockSource+0x1bc>
 8004bc4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004bc8:	f000 8089 	beq.w	8004cde <HAL_TIM_ConfigClockSource+0x1aa>
 8004bcc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004bd0:	f200 808e 	bhi.w	8004cf0 <HAL_TIM_ConfigClockSource+0x1bc>
 8004bd4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bd8:	d03e      	beq.n	8004c58 <HAL_TIM_ConfigClockSource+0x124>
 8004bda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bde:	f200 8087 	bhi.w	8004cf0 <HAL_TIM_ConfigClockSource+0x1bc>
 8004be2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004be6:	f000 8086 	beq.w	8004cf6 <HAL_TIM_ConfigClockSource+0x1c2>
 8004bea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bee:	d87f      	bhi.n	8004cf0 <HAL_TIM_ConfigClockSource+0x1bc>
 8004bf0:	2b70      	cmp	r3, #112	@ 0x70
 8004bf2:	d01a      	beq.n	8004c2a <HAL_TIM_ConfigClockSource+0xf6>
 8004bf4:	2b70      	cmp	r3, #112	@ 0x70
 8004bf6:	d87b      	bhi.n	8004cf0 <HAL_TIM_ConfigClockSource+0x1bc>
 8004bf8:	2b60      	cmp	r3, #96	@ 0x60
 8004bfa:	d050      	beq.n	8004c9e <HAL_TIM_ConfigClockSource+0x16a>
 8004bfc:	2b60      	cmp	r3, #96	@ 0x60
 8004bfe:	d877      	bhi.n	8004cf0 <HAL_TIM_ConfigClockSource+0x1bc>
 8004c00:	2b50      	cmp	r3, #80	@ 0x50
 8004c02:	d03c      	beq.n	8004c7e <HAL_TIM_ConfigClockSource+0x14a>
 8004c04:	2b50      	cmp	r3, #80	@ 0x50
 8004c06:	d873      	bhi.n	8004cf0 <HAL_TIM_ConfigClockSource+0x1bc>
 8004c08:	2b40      	cmp	r3, #64	@ 0x40
 8004c0a:	d058      	beq.n	8004cbe <HAL_TIM_ConfigClockSource+0x18a>
 8004c0c:	2b40      	cmp	r3, #64	@ 0x40
 8004c0e:	d86f      	bhi.n	8004cf0 <HAL_TIM_ConfigClockSource+0x1bc>
 8004c10:	2b30      	cmp	r3, #48	@ 0x30
 8004c12:	d064      	beq.n	8004cde <HAL_TIM_ConfigClockSource+0x1aa>
 8004c14:	2b30      	cmp	r3, #48	@ 0x30
 8004c16:	d86b      	bhi.n	8004cf0 <HAL_TIM_ConfigClockSource+0x1bc>
 8004c18:	2b20      	cmp	r3, #32
 8004c1a:	d060      	beq.n	8004cde <HAL_TIM_ConfigClockSource+0x1aa>
 8004c1c:	2b20      	cmp	r3, #32
 8004c1e:	d867      	bhi.n	8004cf0 <HAL_TIM_ConfigClockSource+0x1bc>
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d05c      	beq.n	8004cde <HAL_TIM_ConfigClockSource+0x1aa>
 8004c24:	2b10      	cmp	r3, #16
 8004c26:	d05a      	beq.n	8004cde <HAL_TIM_ConfigClockSource+0x1aa>
 8004c28:	e062      	b.n	8004cf0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c3a:	f000 fc67 	bl	800550c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004c4c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	68ba      	ldr	r2, [r7, #8]
 8004c54:	609a      	str	r2, [r3, #8]
      break;
 8004c56:	e04f      	b.n	8004cf8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c68:	f000 fc50 	bl	800550c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	689a      	ldr	r2, [r3, #8]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c7a:	609a      	str	r2, [r3, #8]
      break;
 8004c7c:	e03c      	b.n	8004cf8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	f000 fbc0 	bl	8005410 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2150      	movs	r1, #80	@ 0x50
 8004c96:	4618      	mov	r0, r3
 8004c98:	f000 fc1a 	bl	80054d0 <TIM_ITRx_SetConfig>
      break;
 8004c9c:	e02c      	b.n	8004cf8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004caa:	461a      	mov	r2, r3
 8004cac:	f000 fbdf 	bl	800546e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	2160      	movs	r1, #96	@ 0x60
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f000 fc0a 	bl	80054d0 <TIM_ITRx_SetConfig>
      break;
 8004cbc:	e01c      	b.n	8004cf8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cca:	461a      	mov	r2, r3
 8004ccc:	f000 fba0 	bl	8005410 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2140      	movs	r1, #64	@ 0x40
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f000 fbfa 	bl	80054d0 <TIM_ITRx_SetConfig>
      break;
 8004cdc:	e00c      	b.n	8004cf8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	4610      	mov	r0, r2
 8004cea:	f000 fbf1 	bl	80054d0 <TIM_ITRx_SetConfig>
      break;
 8004cee:	e003      	b.n	8004cf8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	73fb      	strb	r3, [r7, #15]
      break;
 8004cf4:	e000      	b.n	8004cf8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8004cf6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3710      	adds	r7, #16
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	bf00      	nop
 8004d14:	ffceff88 	.word	0xffceff88
 8004d18:	00100040 	.word	0x00100040
 8004d1c:	00100030 	.word	0x00100030
 8004d20:	00100020 	.word	0x00100020

08004d24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b085      	sub	sp, #20
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4a43      	ldr	r2, [pc, #268]	@ (8004e44 <TIM_Base_SetConfig+0x120>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d013      	beq.n	8004d64 <TIM_Base_SetConfig+0x40>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d42:	d00f      	beq.n	8004d64 <TIM_Base_SetConfig+0x40>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a40      	ldr	r2, [pc, #256]	@ (8004e48 <TIM_Base_SetConfig+0x124>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d00b      	beq.n	8004d64 <TIM_Base_SetConfig+0x40>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4a3f      	ldr	r2, [pc, #252]	@ (8004e4c <TIM_Base_SetConfig+0x128>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d007      	beq.n	8004d64 <TIM_Base_SetConfig+0x40>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4a3e      	ldr	r2, [pc, #248]	@ (8004e50 <TIM_Base_SetConfig+0x12c>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d003      	beq.n	8004d64 <TIM_Base_SetConfig+0x40>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4a3d      	ldr	r2, [pc, #244]	@ (8004e54 <TIM_Base_SetConfig+0x130>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d108      	bne.n	8004d76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	68fa      	ldr	r2, [r7, #12]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a32      	ldr	r2, [pc, #200]	@ (8004e44 <TIM_Base_SetConfig+0x120>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d01f      	beq.n	8004dbe <TIM_Base_SetConfig+0x9a>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d84:	d01b      	beq.n	8004dbe <TIM_Base_SetConfig+0x9a>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a2f      	ldr	r2, [pc, #188]	@ (8004e48 <TIM_Base_SetConfig+0x124>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d017      	beq.n	8004dbe <TIM_Base_SetConfig+0x9a>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a2e      	ldr	r2, [pc, #184]	@ (8004e4c <TIM_Base_SetConfig+0x128>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d013      	beq.n	8004dbe <TIM_Base_SetConfig+0x9a>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a2d      	ldr	r2, [pc, #180]	@ (8004e50 <TIM_Base_SetConfig+0x12c>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d00f      	beq.n	8004dbe <TIM_Base_SetConfig+0x9a>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a2c      	ldr	r2, [pc, #176]	@ (8004e54 <TIM_Base_SetConfig+0x130>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d00b      	beq.n	8004dbe <TIM_Base_SetConfig+0x9a>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a2b      	ldr	r2, [pc, #172]	@ (8004e58 <TIM_Base_SetConfig+0x134>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d007      	beq.n	8004dbe <TIM_Base_SetConfig+0x9a>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a2a      	ldr	r2, [pc, #168]	@ (8004e5c <TIM_Base_SetConfig+0x138>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d003      	beq.n	8004dbe <TIM_Base_SetConfig+0x9a>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a29      	ldr	r2, [pc, #164]	@ (8004e60 <TIM_Base_SetConfig+0x13c>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d108      	bne.n	8004dd0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	68fa      	ldr	r2, [r7, #12]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	695b      	ldr	r3, [r3, #20]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	689a      	ldr	r2, [r3, #8]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a14      	ldr	r2, [pc, #80]	@ (8004e44 <TIM_Base_SetConfig+0x120>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d00f      	beq.n	8004e16 <TIM_Base_SetConfig+0xf2>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a16      	ldr	r2, [pc, #88]	@ (8004e54 <TIM_Base_SetConfig+0x130>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d00b      	beq.n	8004e16 <TIM_Base_SetConfig+0xf2>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a15      	ldr	r2, [pc, #84]	@ (8004e58 <TIM_Base_SetConfig+0x134>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d007      	beq.n	8004e16 <TIM_Base_SetConfig+0xf2>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a14      	ldr	r2, [pc, #80]	@ (8004e5c <TIM_Base_SetConfig+0x138>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d003      	beq.n	8004e16 <TIM_Base_SetConfig+0xf2>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a13      	ldr	r2, [pc, #76]	@ (8004e60 <TIM_Base_SetConfig+0x13c>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d103      	bne.n	8004e1e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	691a      	ldr	r2, [r3, #16]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f043 0204 	orr.w	r2, r3, #4
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	601a      	str	r2, [r3, #0]
}
 8004e36:	bf00      	nop
 8004e38:	3714      	adds	r7, #20
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr
 8004e42:	bf00      	nop
 8004e44:	40010000 	.word	0x40010000
 8004e48:	40000400 	.word	0x40000400
 8004e4c:	40000800 	.word	0x40000800
 8004e50:	40000c00 	.word	0x40000c00
 8004e54:	40010400 	.word	0x40010400
 8004e58:	40014000 	.word	0x40014000
 8004e5c:	40014400 	.word	0x40014400
 8004e60:	40014800 	.word	0x40014800

08004e64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b087      	sub	sp, #28
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a1b      	ldr	r3, [r3, #32]
 8004e72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6a1b      	ldr	r3, [r3, #32]
 8004e78:	f023 0201 	bic.w	r2, r3, #1
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	699b      	ldr	r3, [r3, #24]
 8004e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e8c:	68fa      	ldr	r2, [r7, #12]
 8004e8e:	4b37      	ldr	r3, [pc, #220]	@ (8004f6c <TIM_OC1_SetConfig+0x108>)
 8004e90:	4013      	ands	r3, r2
 8004e92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f023 0303 	bic.w	r3, r3, #3
 8004e9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	f023 0302 	bic.w	r3, r3, #2
 8004eac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	697a      	ldr	r2, [r7, #20]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4a2d      	ldr	r2, [pc, #180]	@ (8004f70 <TIM_OC1_SetConfig+0x10c>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d00f      	beq.n	8004ee0 <TIM_OC1_SetConfig+0x7c>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4a2c      	ldr	r2, [pc, #176]	@ (8004f74 <TIM_OC1_SetConfig+0x110>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d00b      	beq.n	8004ee0 <TIM_OC1_SetConfig+0x7c>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4a2b      	ldr	r2, [pc, #172]	@ (8004f78 <TIM_OC1_SetConfig+0x114>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d007      	beq.n	8004ee0 <TIM_OC1_SetConfig+0x7c>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	4a2a      	ldr	r2, [pc, #168]	@ (8004f7c <TIM_OC1_SetConfig+0x118>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d003      	beq.n	8004ee0 <TIM_OC1_SetConfig+0x7c>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a29      	ldr	r2, [pc, #164]	@ (8004f80 <TIM_OC1_SetConfig+0x11c>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d10c      	bne.n	8004efa <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	f023 0308 	bic.w	r3, r3, #8
 8004ee6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	697a      	ldr	r2, [r7, #20]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	f023 0304 	bic.w	r3, r3, #4
 8004ef8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a1c      	ldr	r2, [pc, #112]	@ (8004f70 <TIM_OC1_SetConfig+0x10c>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d00f      	beq.n	8004f22 <TIM_OC1_SetConfig+0xbe>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a1b      	ldr	r2, [pc, #108]	@ (8004f74 <TIM_OC1_SetConfig+0x110>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d00b      	beq.n	8004f22 <TIM_OC1_SetConfig+0xbe>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a1a      	ldr	r2, [pc, #104]	@ (8004f78 <TIM_OC1_SetConfig+0x114>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d007      	beq.n	8004f22 <TIM_OC1_SetConfig+0xbe>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a19      	ldr	r2, [pc, #100]	@ (8004f7c <TIM_OC1_SetConfig+0x118>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d003      	beq.n	8004f22 <TIM_OC1_SetConfig+0xbe>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a18      	ldr	r2, [pc, #96]	@ (8004f80 <TIM_OC1_SetConfig+0x11c>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d111      	bne.n	8004f46 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004f30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	695b      	ldr	r3, [r3, #20]
 8004f36:	693a      	ldr	r2, [r7, #16]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	699b      	ldr	r3, [r3, #24]
 8004f40:	693a      	ldr	r2, [r7, #16]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	693a      	ldr	r2, [r7, #16]
 8004f4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	68fa      	ldr	r2, [r7, #12]
 8004f50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	685a      	ldr	r2, [r3, #4]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	697a      	ldr	r2, [r7, #20]
 8004f5e:	621a      	str	r2, [r3, #32]
}
 8004f60:	bf00      	nop
 8004f62:	371c      	adds	r7, #28
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr
 8004f6c:	fffeff8f 	.word	0xfffeff8f
 8004f70:	40010000 	.word	0x40010000
 8004f74:	40010400 	.word	0x40010400
 8004f78:	40014000 	.word	0x40014000
 8004f7c:	40014400 	.word	0x40014400
 8004f80:	40014800 	.word	0x40014800

08004f84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b087      	sub	sp, #28
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a1b      	ldr	r3, [r3, #32]
 8004f92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a1b      	ldr	r3, [r3, #32]
 8004f98:	f023 0210 	bic.w	r2, r3, #16
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	699b      	ldr	r3, [r3, #24]
 8004faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	4b34      	ldr	r3, [pc, #208]	@ (8005080 <TIM_OC2_SetConfig+0xfc>)
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	021b      	lsls	r3, r3, #8
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	f023 0320 	bic.w	r3, r3, #32
 8004fce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	011b      	lsls	r3, r3, #4
 8004fd6:	697a      	ldr	r2, [r7, #20]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	4a29      	ldr	r2, [pc, #164]	@ (8005084 <TIM_OC2_SetConfig+0x100>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d003      	beq.n	8004fec <TIM_OC2_SetConfig+0x68>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a28      	ldr	r2, [pc, #160]	@ (8005088 <TIM_OC2_SetConfig+0x104>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d10d      	bne.n	8005008 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ff2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	011b      	lsls	r3, r3, #4
 8004ffa:	697a      	ldr	r2, [r7, #20]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005006:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4a1e      	ldr	r2, [pc, #120]	@ (8005084 <TIM_OC2_SetConfig+0x100>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d00f      	beq.n	8005030 <TIM_OC2_SetConfig+0xac>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	4a1d      	ldr	r2, [pc, #116]	@ (8005088 <TIM_OC2_SetConfig+0x104>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d00b      	beq.n	8005030 <TIM_OC2_SetConfig+0xac>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	4a1c      	ldr	r2, [pc, #112]	@ (800508c <TIM_OC2_SetConfig+0x108>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d007      	beq.n	8005030 <TIM_OC2_SetConfig+0xac>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	4a1b      	ldr	r2, [pc, #108]	@ (8005090 <TIM_OC2_SetConfig+0x10c>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d003      	beq.n	8005030 <TIM_OC2_SetConfig+0xac>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	4a1a      	ldr	r2, [pc, #104]	@ (8005094 <TIM_OC2_SetConfig+0x110>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d113      	bne.n	8005058 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005036:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800503e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	695b      	ldr	r3, [r3, #20]
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	693a      	ldr	r2, [r7, #16]
 8005048:	4313      	orrs	r3, r2
 800504a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	699b      	ldr	r3, [r3, #24]
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	693a      	ldr	r2, [r7, #16]
 8005054:	4313      	orrs	r3, r2
 8005056:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	693a      	ldr	r2, [r7, #16]
 800505c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	68fa      	ldr	r2, [r7, #12]
 8005062:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	685a      	ldr	r2, [r3, #4]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	621a      	str	r2, [r3, #32]
}
 8005072:	bf00      	nop
 8005074:	371c      	adds	r7, #28
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr
 800507e:	bf00      	nop
 8005080:	feff8fff 	.word	0xfeff8fff
 8005084:	40010000 	.word	0x40010000
 8005088:	40010400 	.word	0x40010400
 800508c:	40014000 	.word	0x40014000
 8005090:	40014400 	.word	0x40014400
 8005094:	40014800 	.word	0x40014800

08005098 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005098:	b480      	push	{r7}
 800509a:	b087      	sub	sp, #28
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a1b      	ldr	r3, [r3, #32]
 80050a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a1b      	ldr	r3, [r3, #32]
 80050ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	69db      	ldr	r3, [r3, #28]
 80050be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80050c0:	68fa      	ldr	r2, [r7, #12]
 80050c2:	4b33      	ldr	r3, [pc, #204]	@ (8005190 <TIM_OC3_SetConfig+0xf8>)
 80050c4:	4013      	ands	r3, r2
 80050c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f023 0303 	bic.w	r3, r3, #3
 80050ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80050e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	021b      	lsls	r3, r3, #8
 80050e8:	697a      	ldr	r2, [r7, #20]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a28      	ldr	r2, [pc, #160]	@ (8005194 <TIM_OC3_SetConfig+0xfc>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d003      	beq.n	80050fe <TIM_OC3_SetConfig+0x66>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a27      	ldr	r2, [pc, #156]	@ (8005198 <TIM_OC3_SetConfig+0x100>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d10d      	bne.n	800511a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005104:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	021b      	lsls	r3, r3, #8
 800510c:	697a      	ldr	r2, [r7, #20]
 800510e:	4313      	orrs	r3, r2
 8005110:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005118:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a1d      	ldr	r2, [pc, #116]	@ (8005194 <TIM_OC3_SetConfig+0xfc>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d00f      	beq.n	8005142 <TIM_OC3_SetConfig+0xaa>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a1c      	ldr	r2, [pc, #112]	@ (8005198 <TIM_OC3_SetConfig+0x100>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d00b      	beq.n	8005142 <TIM_OC3_SetConfig+0xaa>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a1b      	ldr	r2, [pc, #108]	@ (800519c <TIM_OC3_SetConfig+0x104>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d007      	beq.n	8005142 <TIM_OC3_SetConfig+0xaa>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a1a      	ldr	r2, [pc, #104]	@ (80051a0 <TIM_OC3_SetConfig+0x108>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d003      	beq.n	8005142 <TIM_OC3_SetConfig+0xaa>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a19      	ldr	r2, [pc, #100]	@ (80051a4 <TIM_OC3_SetConfig+0x10c>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d113      	bne.n	800516a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005148:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005150:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	695b      	ldr	r3, [r3, #20]
 8005156:	011b      	lsls	r3, r3, #4
 8005158:	693a      	ldr	r2, [r7, #16]
 800515a:	4313      	orrs	r3, r2
 800515c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	699b      	ldr	r3, [r3, #24]
 8005162:	011b      	lsls	r3, r3, #4
 8005164:	693a      	ldr	r2, [r7, #16]
 8005166:	4313      	orrs	r3, r2
 8005168:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	693a      	ldr	r2, [r7, #16]
 800516e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	68fa      	ldr	r2, [r7, #12]
 8005174:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	685a      	ldr	r2, [r3, #4]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	697a      	ldr	r2, [r7, #20]
 8005182:	621a      	str	r2, [r3, #32]
}
 8005184:	bf00      	nop
 8005186:	371c      	adds	r7, #28
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr
 8005190:	fffeff8f 	.word	0xfffeff8f
 8005194:	40010000 	.word	0x40010000
 8005198:	40010400 	.word	0x40010400
 800519c:	40014000 	.word	0x40014000
 80051a0:	40014400 	.word	0x40014400
 80051a4:	40014800 	.word	0x40014800

080051a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b087      	sub	sp, #28
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a1b      	ldr	r3, [r3, #32]
 80051b6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6a1b      	ldr	r3, [r3, #32]
 80051bc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	69db      	ldr	r3, [r3, #28]
 80051ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	4b24      	ldr	r3, [pc, #144]	@ (8005264 <TIM_OC4_SetConfig+0xbc>)
 80051d4:	4013      	ands	r3, r2
 80051d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	021b      	lsls	r3, r3, #8
 80051e6:	68fa      	ldr	r2, [r7, #12]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80051f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	031b      	lsls	r3, r3, #12
 80051fa:	693a      	ldr	r2, [r7, #16]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a19      	ldr	r2, [pc, #100]	@ (8005268 <TIM_OC4_SetConfig+0xc0>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d00f      	beq.n	8005228 <TIM_OC4_SetConfig+0x80>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4a18      	ldr	r2, [pc, #96]	@ (800526c <TIM_OC4_SetConfig+0xc4>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d00b      	beq.n	8005228 <TIM_OC4_SetConfig+0x80>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a17      	ldr	r2, [pc, #92]	@ (8005270 <TIM_OC4_SetConfig+0xc8>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d007      	beq.n	8005228 <TIM_OC4_SetConfig+0x80>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4a16      	ldr	r2, [pc, #88]	@ (8005274 <TIM_OC4_SetConfig+0xcc>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d003      	beq.n	8005228 <TIM_OC4_SetConfig+0x80>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a15      	ldr	r2, [pc, #84]	@ (8005278 <TIM_OC4_SetConfig+0xd0>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d109      	bne.n	800523c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800522e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	695b      	ldr	r3, [r3, #20]
 8005234:	019b      	lsls	r3, r3, #6
 8005236:	697a      	ldr	r2, [r7, #20]
 8005238:	4313      	orrs	r3, r2
 800523a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	697a      	ldr	r2, [r7, #20]
 8005240:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	68fa      	ldr	r2, [r7, #12]
 8005246:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	685a      	ldr	r2, [r3, #4]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	693a      	ldr	r2, [r7, #16]
 8005254:	621a      	str	r2, [r3, #32]
}
 8005256:	bf00      	nop
 8005258:	371c      	adds	r7, #28
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr
 8005262:	bf00      	nop
 8005264:	feff8fff 	.word	0xfeff8fff
 8005268:	40010000 	.word	0x40010000
 800526c:	40010400 	.word	0x40010400
 8005270:	40014000 	.word	0x40014000
 8005274:	40014400 	.word	0x40014400
 8005278:	40014800 	.word	0x40014800

0800527c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800527c:	b480      	push	{r7}
 800527e:	b087      	sub	sp, #28
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a1b      	ldr	r3, [r3, #32]
 800528a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6a1b      	ldr	r3, [r3, #32]
 8005290:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80052a4:	68fa      	ldr	r2, [r7, #12]
 80052a6:	4b21      	ldr	r3, [pc, #132]	@ (800532c <TIM_OC5_SetConfig+0xb0>)
 80052a8:	4013      	ands	r3, r2
 80052aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68fa      	ldr	r2, [r7, #12]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80052bc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	041b      	lsls	r3, r3, #16
 80052c4:	693a      	ldr	r2, [r7, #16]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a18      	ldr	r2, [pc, #96]	@ (8005330 <TIM_OC5_SetConfig+0xb4>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d00f      	beq.n	80052f2 <TIM_OC5_SetConfig+0x76>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a17      	ldr	r2, [pc, #92]	@ (8005334 <TIM_OC5_SetConfig+0xb8>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d00b      	beq.n	80052f2 <TIM_OC5_SetConfig+0x76>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a16      	ldr	r2, [pc, #88]	@ (8005338 <TIM_OC5_SetConfig+0xbc>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d007      	beq.n	80052f2 <TIM_OC5_SetConfig+0x76>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a15      	ldr	r2, [pc, #84]	@ (800533c <TIM_OC5_SetConfig+0xc0>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d003      	beq.n	80052f2 <TIM_OC5_SetConfig+0x76>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4a14      	ldr	r2, [pc, #80]	@ (8005340 <TIM_OC5_SetConfig+0xc4>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d109      	bne.n	8005306 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052f8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	695b      	ldr	r3, [r3, #20]
 80052fe:	021b      	lsls	r3, r3, #8
 8005300:	697a      	ldr	r2, [r7, #20]
 8005302:	4313      	orrs	r3, r2
 8005304:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	697a      	ldr	r2, [r7, #20]
 800530a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	685a      	ldr	r2, [r3, #4]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	693a      	ldr	r2, [r7, #16]
 800531e:	621a      	str	r2, [r3, #32]
}
 8005320:	bf00      	nop
 8005322:	371c      	adds	r7, #28
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr
 800532c:	fffeff8f 	.word	0xfffeff8f
 8005330:	40010000 	.word	0x40010000
 8005334:	40010400 	.word	0x40010400
 8005338:	40014000 	.word	0x40014000
 800533c:	40014400 	.word	0x40014400
 8005340:	40014800 	.word	0x40014800

08005344 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005344:	b480      	push	{r7}
 8005346:	b087      	sub	sp, #28
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a1b      	ldr	r3, [r3, #32]
 8005352:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6a1b      	ldr	r3, [r3, #32]
 8005358:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800536a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	4b22      	ldr	r3, [pc, #136]	@ (80053f8 <TIM_OC6_SetConfig+0xb4>)
 8005370:	4013      	ands	r3, r2
 8005372:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	021b      	lsls	r3, r3, #8
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	4313      	orrs	r3, r2
 800537e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005386:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	051b      	lsls	r3, r3, #20
 800538e:	693a      	ldr	r2, [r7, #16]
 8005390:	4313      	orrs	r3, r2
 8005392:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a19      	ldr	r2, [pc, #100]	@ (80053fc <TIM_OC6_SetConfig+0xb8>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d00f      	beq.n	80053bc <TIM_OC6_SetConfig+0x78>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a18      	ldr	r2, [pc, #96]	@ (8005400 <TIM_OC6_SetConfig+0xbc>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d00b      	beq.n	80053bc <TIM_OC6_SetConfig+0x78>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4a17      	ldr	r2, [pc, #92]	@ (8005404 <TIM_OC6_SetConfig+0xc0>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d007      	beq.n	80053bc <TIM_OC6_SetConfig+0x78>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4a16      	ldr	r2, [pc, #88]	@ (8005408 <TIM_OC6_SetConfig+0xc4>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d003      	beq.n	80053bc <TIM_OC6_SetConfig+0x78>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4a15      	ldr	r2, [pc, #84]	@ (800540c <TIM_OC6_SetConfig+0xc8>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d109      	bne.n	80053d0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80053c2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	695b      	ldr	r3, [r3, #20]
 80053c8:	029b      	lsls	r3, r3, #10
 80053ca:	697a      	ldr	r2, [r7, #20]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	697a      	ldr	r2, [r7, #20]
 80053d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	68fa      	ldr	r2, [r7, #12]
 80053da:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	685a      	ldr	r2, [r3, #4]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	693a      	ldr	r2, [r7, #16]
 80053e8:	621a      	str	r2, [r3, #32]
}
 80053ea:	bf00      	nop
 80053ec:	371c      	adds	r7, #28
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop
 80053f8:	feff8fff 	.word	0xfeff8fff
 80053fc:	40010000 	.word	0x40010000
 8005400:	40010400 	.word	0x40010400
 8005404:	40014000 	.word	0x40014000
 8005408:	40014400 	.word	0x40014400
 800540c:	40014800 	.word	0x40014800

08005410 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005410:	b480      	push	{r7}
 8005412:	b087      	sub	sp, #28
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6a1b      	ldr	r3, [r3, #32]
 8005420:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	6a1b      	ldr	r3, [r3, #32]
 8005426:	f023 0201 	bic.w	r2, r3, #1
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	699b      	ldr	r3, [r3, #24]
 8005432:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800543a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	011b      	lsls	r3, r3, #4
 8005440:	693a      	ldr	r2, [r7, #16]
 8005442:	4313      	orrs	r3, r2
 8005444:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	f023 030a 	bic.w	r3, r3, #10
 800544c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800544e:	697a      	ldr	r2, [r7, #20]
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	4313      	orrs	r3, r2
 8005454:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	693a      	ldr	r2, [r7, #16]
 800545a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	697a      	ldr	r2, [r7, #20]
 8005460:	621a      	str	r2, [r3, #32]
}
 8005462:	bf00      	nop
 8005464:	371c      	adds	r7, #28
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr

0800546e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800546e:	b480      	push	{r7}
 8005470:	b087      	sub	sp, #28
 8005472:	af00      	add	r7, sp, #0
 8005474:	60f8      	str	r0, [r7, #12]
 8005476:	60b9      	str	r1, [r7, #8]
 8005478:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6a1b      	ldr	r3, [r3, #32]
 800547e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6a1b      	ldr	r3, [r3, #32]
 8005484:	f023 0210 	bic.w	r2, r3, #16
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	699b      	ldr	r3, [r3, #24]
 8005490:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005498:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	031b      	lsls	r3, r3, #12
 800549e:	693a      	ldr	r2, [r7, #16]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80054aa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	011b      	lsls	r3, r3, #4
 80054b0:	697a      	ldr	r2, [r7, #20]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	693a      	ldr	r2, [r7, #16]
 80054ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	697a      	ldr	r2, [r7, #20]
 80054c0:	621a      	str	r2, [r3, #32]
}
 80054c2:	bf00      	nop
 80054c4:	371c      	adds	r7, #28
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr
	...

080054d0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b085      	sub	sp, #20
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054e0:	68fa      	ldr	r2, [r7, #12]
 80054e2:	4b09      	ldr	r3, [pc, #36]	@ (8005508 <TIM_ITRx_SetConfig+0x38>)
 80054e4:	4013      	ands	r3, r2
 80054e6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054e8:	683a      	ldr	r2, [r7, #0]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	f043 0307 	orr.w	r3, r3, #7
 80054f2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	68fa      	ldr	r2, [r7, #12]
 80054f8:	609a      	str	r2, [r3, #8]
}
 80054fa:	bf00      	nop
 80054fc:	3714      	adds	r7, #20
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr
 8005506:	bf00      	nop
 8005508:	ffcfff8f 	.word	0xffcfff8f

0800550c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800550c:	b480      	push	{r7}
 800550e:	b087      	sub	sp, #28
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	607a      	str	r2, [r7, #4]
 8005518:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005526:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	021a      	lsls	r2, r3, #8
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	431a      	orrs	r2, r3
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	4313      	orrs	r3, r2
 8005534:	697a      	ldr	r2, [r7, #20]
 8005536:	4313      	orrs	r3, r2
 8005538:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	697a      	ldr	r2, [r7, #20]
 800553e:	609a      	str	r2, [r3, #8]
}
 8005540:	bf00      	nop
 8005542:	371c      	adds	r7, #28
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800554c:	b480      	push	{r7}
 800554e:	b087      	sub	sp, #28
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	f003 031f 	and.w	r3, r3, #31
 800555e:	2201      	movs	r2, #1
 8005560:	fa02 f303 	lsl.w	r3, r2, r3
 8005564:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	6a1a      	ldr	r2, [r3, #32]
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	43db      	mvns	r3, r3
 800556e:	401a      	ands	r2, r3
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6a1a      	ldr	r2, [r3, #32]
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	f003 031f 	and.w	r3, r3, #31
 800557e:	6879      	ldr	r1, [r7, #4]
 8005580:	fa01 f303 	lsl.w	r3, r1, r3
 8005584:	431a      	orrs	r2, r3
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	621a      	str	r2, [r3, #32]
}
 800558a:	bf00      	nop
 800558c:	371c      	adds	r7, #28
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr
	...

08005598 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b084      	sub	sp, #16
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d109      	bne.n	80055bc <HAL_TIMEx_PWMN_Start+0x24>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	bf14      	ite	ne
 80055b4:	2301      	movne	r3, #1
 80055b6:	2300      	moveq	r3, #0
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	e022      	b.n	8005602 <HAL_TIMEx_PWMN_Start+0x6a>
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	2b04      	cmp	r3, #4
 80055c0:	d109      	bne.n	80055d6 <HAL_TIMEx_PWMN_Start+0x3e>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	bf14      	ite	ne
 80055ce:	2301      	movne	r3, #1
 80055d0:	2300      	moveq	r3, #0
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	e015      	b.n	8005602 <HAL_TIMEx_PWMN_Start+0x6a>
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	2b08      	cmp	r3, #8
 80055da:	d109      	bne.n	80055f0 <HAL_TIMEx_PWMN_Start+0x58>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	bf14      	ite	ne
 80055e8:	2301      	movne	r3, #1
 80055ea:	2300      	moveq	r3, #0
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	e008      	b.n	8005602 <HAL_TIMEx_PWMN_Start+0x6a>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	bf14      	ite	ne
 80055fc:	2301      	movne	r3, #1
 80055fe:	2300      	moveq	r3, #0
 8005600:	b2db      	uxtb	r3, r3
 8005602:	2b00      	cmp	r3, #0
 8005604:	d001      	beq.n	800560a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e073      	b.n	80056f2 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d104      	bne.n	800561a <HAL_TIMEx_PWMN_Start+0x82>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2202      	movs	r2, #2
 8005614:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005618:	e013      	b.n	8005642 <HAL_TIMEx_PWMN_Start+0xaa>
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	2b04      	cmp	r3, #4
 800561e:	d104      	bne.n	800562a <HAL_TIMEx_PWMN_Start+0x92>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2202      	movs	r2, #2
 8005624:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005628:	e00b      	b.n	8005642 <HAL_TIMEx_PWMN_Start+0xaa>
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	2b08      	cmp	r3, #8
 800562e:	d104      	bne.n	800563a <HAL_TIMEx_PWMN_Start+0xa2>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2202      	movs	r2, #2
 8005634:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005638:	e003      	b.n	8005642 <HAL_TIMEx_PWMN_Start+0xaa>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2202      	movs	r2, #2
 800563e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	2204      	movs	r2, #4
 8005648:	6839      	ldr	r1, [r7, #0]
 800564a:	4618      	mov	r0, r3
 800564c:	f000 fa38 	bl	8005ac0 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800565e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a25      	ldr	r2, [pc, #148]	@ (80056fc <HAL_TIMEx_PWMN_Start+0x164>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d022      	beq.n	80056b0 <HAL_TIMEx_PWMN_Start+0x118>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005672:	d01d      	beq.n	80056b0 <HAL_TIMEx_PWMN_Start+0x118>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a21      	ldr	r2, [pc, #132]	@ (8005700 <HAL_TIMEx_PWMN_Start+0x168>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d018      	beq.n	80056b0 <HAL_TIMEx_PWMN_Start+0x118>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a20      	ldr	r2, [pc, #128]	@ (8005704 <HAL_TIMEx_PWMN_Start+0x16c>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d013      	beq.n	80056b0 <HAL_TIMEx_PWMN_Start+0x118>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a1e      	ldr	r2, [pc, #120]	@ (8005708 <HAL_TIMEx_PWMN_Start+0x170>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d00e      	beq.n	80056b0 <HAL_TIMEx_PWMN_Start+0x118>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a1d      	ldr	r2, [pc, #116]	@ (800570c <HAL_TIMEx_PWMN_Start+0x174>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d009      	beq.n	80056b0 <HAL_TIMEx_PWMN_Start+0x118>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a1b      	ldr	r2, [pc, #108]	@ (8005710 <HAL_TIMEx_PWMN_Start+0x178>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d004      	beq.n	80056b0 <HAL_TIMEx_PWMN_Start+0x118>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a1a      	ldr	r2, [pc, #104]	@ (8005714 <HAL_TIMEx_PWMN_Start+0x17c>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d115      	bne.n	80056dc <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	689a      	ldr	r2, [r3, #8]
 80056b6:	4b18      	ldr	r3, [pc, #96]	@ (8005718 <HAL_TIMEx_PWMN_Start+0x180>)
 80056b8:	4013      	ands	r3, r2
 80056ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2b06      	cmp	r3, #6
 80056c0:	d015      	beq.n	80056ee <HAL_TIMEx_PWMN_Start+0x156>
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056c8:	d011      	beq.n	80056ee <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f042 0201 	orr.w	r2, r2, #1
 80056d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056da:	e008      	b.n	80056ee <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f042 0201 	orr.w	r2, r2, #1
 80056ea:	601a      	str	r2, [r3, #0]
 80056ec:	e000      	b.n	80056f0 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80056f0:	2300      	movs	r3, #0
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3710      	adds	r7, #16
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	40010000 	.word	0x40010000
 8005700:	40000400 	.word	0x40000400
 8005704:	40000800 	.word	0x40000800
 8005708:	40000c00 	.word	0x40000c00
 800570c:	40010400 	.word	0x40010400
 8005710:	40001800 	.word	0x40001800
 8005714:	40014000 	.word	0x40014000
 8005718:	00010007 	.word	0x00010007

0800571c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800571c:	b480      	push	{r7}
 800571e:	b085      	sub	sp, #20
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800572c:	2b01      	cmp	r3, #1
 800572e:	d101      	bne.n	8005734 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005730:	2302      	movs	r3, #2
 8005732:	e06d      	b.n	8005810 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2202      	movs	r2, #2
 8005740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a30      	ldr	r2, [pc, #192]	@ (800581c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d004      	beq.n	8005768 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a2f      	ldr	r2, [pc, #188]	@ (8005820 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d108      	bne.n	800577a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800576e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	4313      	orrs	r3, r2
 8005778:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005780:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68fa      	ldr	r2, [r7, #12]
 8005788:	4313      	orrs	r3, r2
 800578a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	68fa      	ldr	r2, [r7, #12]
 8005792:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a20      	ldr	r2, [pc, #128]	@ (800581c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d022      	beq.n	80057e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057a6:	d01d      	beq.n	80057e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a1d      	ldr	r2, [pc, #116]	@ (8005824 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d018      	beq.n	80057e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a1c      	ldr	r2, [pc, #112]	@ (8005828 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d013      	beq.n	80057e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a1a      	ldr	r2, [pc, #104]	@ (800582c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d00e      	beq.n	80057e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a15      	ldr	r2, [pc, #84]	@ (8005820 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d009      	beq.n	80057e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a16      	ldr	r2, [pc, #88]	@ (8005830 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d004      	beq.n	80057e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a15      	ldr	r2, [pc, #84]	@ (8005834 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d10c      	bne.n	80057fe <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	68ba      	ldr	r2, [r7, #8]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	68ba      	ldr	r2, [r7, #8]
 80057fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2201      	movs	r2, #1
 8005802:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800580e:	2300      	movs	r3, #0
}
 8005810:	4618      	mov	r0, r3
 8005812:	3714      	adds	r7, #20
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr
 800581c:	40010000 	.word	0x40010000
 8005820:	40010400 	.word	0x40010400
 8005824:	40000400 	.word	0x40000400
 8005828:	40000800 	.word	0x40000800
 800582c:	40000c00 	.word	0x40000c00
 8005830:	40001800 	.word	0x40001800
 8005834:	40014000 	.word	0x40014000

08005838 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005838:	b480      	push	{r7}
 800583a:	b085      	sub	sp, #20
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005842:	2300      	movs	r3, #0
 8005844:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800584c:	2b01      	cmp	r3, #1
 800584e:	d101      	bne.n	8005854 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005850:	2302      	movs	r3, #2
 8005852:	e065      	b.n	8005920 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	4313      	orrs	r3, r2
 8005868:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	4313      	orrs	r3, r2
 8005876:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	4313      	orrs	r3, r2
 8005884:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4313      	orrs	r3, r2
 8005892:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	4313      	orrs	r3, r2
 80058a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	695b      	ldr	r3, [r3, #20]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058ba:	4313      	orrs	r3, r2
 80058bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	699b      	ldr	r3, [r3, #24]
 80058c8:	041b      	lsls	r3, r3, #16
 80058ca:	4313      	orrs	r3, r2
 80058cc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a16      	ldr	r2, [pc, #88]	@ (800592c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d004      	beq.n	80058e2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a14      	ldr	r2, [pc, #80]	@ (8005930 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d115      	bne.n	800590e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ec:	051b      	lsls	r3, r3, #20
 80058ee:	4313      	orrs	r3, r2
 80058f0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	69db      	ldr	r3, [r3, #28]
 80058fc:	4313      	orrs	r3, r2
 80058fe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	6a1b      	ldr	r3, [r3, #32]
 800590a:	4313      	orrs	r3, r2
 800590c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800591e:	2300      	movs	r3, #0
}
 8005920:	4618      	mov	r0, r3
 8005922:	3714      	adds	r7, #20
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr
 800592c:	40010000 	.word	0x40010000
 8005930:	40010400 	.word	0x40010400

08005934 <HAL_TIMEx_ConfigBreakInput>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)
{
 8005934:	b480      	push	{r7}
 8005936:	b08b      	sub	sp, #44	@ 0x2c
 8005938:	af00      	add	r7, sp, #0
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005940:	2300      	movs	r3, #0
 8005942:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  {
    assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));
  }

  /* Check input state */
  __HAL_LOCK(htim);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800594c:	2b01      	cmp	r3, #1
 800594e:	d101      	bne.n	8005954 <HAL_TIMEx_ConfigBreakInput+0x20>
 8005950:	2302      	movs	r3, #2
 8005952:	e0af      	b.n	8005ab4 <HAL_TIMEx_ConfigBreakInput+0x180>
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (sBreakInputConfig->Source)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	3b01      	subs	r3, #1
 8005962:	2b07      	cmp	r3, #7
 8005964:	d83a      	bhi.n	80059dc <HAL_TIMEx_ConfigBreakInput+0xa8>
 8005966:	a201      	add	r2, pc, #4	@ (adr r2, 800596c <HAL_TIMEx_ConfigBreakInput+0x38>)
 8005968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800596c:	0800598d 	.word	0x0800598d
 8005970:	080059a1 	.word	0x080059a1
 8005974:	080059dd 	.word	0x080059dd
 8005978:	080059b5 	.word	0x080059b5
 800597c:	080059dd 	.word	0x080059dd
 8005980:	080059dd 	.word	0x080059dd
 8005984:	080059dd 	.word	0x080059dd
 8005988:	080059c9 	.word	0x080059c9
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 800598c:	2301      	movs	r3, #1
 800598e:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 8005990:	2300      	movs	r3, #0
 8005992:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 8005994:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005998:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 800599a:	2309      	movs	r3, #9
 800599c:	613b      	str	r3, [r7, #16]
      break;
 800599e:	e026      	b.n	80059ee <HAL_TIMEx_ConfigBreakInput+0xba>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 80059a0:	2302      	movs	r3, #2
 80059a2:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 80059a4:	2301      	movs	r3, #1
 80059a6:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 80059a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80059ac:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 80059ae:	230a      	movs	r3, #10
 80059b0:	613b      	str	r3, [r7, #16]
      break;
 80059b2:	e01c      	b.n	80059ee <HAL_TIMEx_ConfigBreakInput+0xba>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 80059b4:	2304      	movs	r3, #4
 80059b6:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 80059b8:	2302      	movs	r3, #2
 80059ba:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 80059bc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80059c0:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 80059c2:	230b      	movs	r3, #11
 80059c4:	613b      	str	r3, [r7, #16]
      break;
 80059c6:	e012      	b.n	80059ee <HAL_TIMEx_ConfigBreakInput+0xba>
    }
    case TIM_BREAKINPUTSOURCE_DFSDM1:
    {
      bkin_enable_mask = TIM1_AF1_BKDF1BK0E;
 80059c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80059cc:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_AF1_BKDF1BK0E_Pos;
 80059ce:	2308      	movs	r3, #8
 80059d0:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = 0U;
 80059d2:	2300      	movs	r3, #0
 80059d4:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 80059d6:	2300      	movs	r3, #0
 80059d8:	613b      	str	r3, [r7, #16]
      break;
 80059da:	e008      	b.n	80059ee <HAL_TIMEx_ConfigBreakInput+0xba>
    }

    default:
    {
      bkin_enable_mask = 0U;
 80059dc:	2300      	movs	r3, #0
 80059de:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = 0U;
 80059e0:	2300      	movs	r3, #0
 80059e2:	61bb      	str	r3, [r7, #24]
      bkin_enable_bitpos = 0U;
 80059e4:	2300      	movs	r3, #0
 80059e6:	617b      	str	r3, [r7, #20]
      bkin_polarity_bitpos = 0U;
 80059e8:	2300      	movs	r3, #0
 80059ea:	613b      	str	r3, [r7, #16]
      break;
 80059ec:	bf00      	nop
    }
  }

  switch (BreakInput)
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d003      	beq.n	80059fc <HAL_TIMEx_ConfigBreakInput+0xc8>
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	d029      	beq.n	8005a4e <HAL_TIMEx_ConfigBreakInput+0x11a>
 80059fa:	e051      	b.n	8005aa0 <HAL_TIMEx_ConfigBreakInput+0x16c>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_AF1 register value */
      tmporx = htim->Instance->AF1;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a02:	623b      	str	r3, [r7, #32]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	43db      	mvns	r3, r3
 8005a08:	6a3a      	ldr	r2, [r7, #32]
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	623b      	str	r3, [r7, #32]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	685a      	ldr	r2, [r3, #4]
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	409a      	lsls	r2, r3
 8005a16:	69fb      	ldr	r3, [r7, #28]
 8005a18:	4013      	ands	r3, r2
 8005a1a:	6a3a      	ldr	r2, [r7, #32]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	623b      	str	r3, [r7, #32]

      /* Set the break input polarity */
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	2b08      	cmp	r3, #8
 8005a26:	d00d      	beq.n	8005a44 <HAL_TIMEx_ConfigBreakInput+0x110>
      {
        tmporx &= ~bkin_polarity_mask;
 8005a28:	69bb      	ldr	r3, [r7, #24]
 8005a2a:	43db      	mvns	r3, r3
 8005a2c:	6a3a      	ldr	r2, [r7, #32]
 8005a2e:	4013      	ands	r3, r2
 8005a30:	623b      	str	r3, [r7, #32]
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	689a      	ldr	r2, [r3, #8]
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	409a      	lsls	r2, r3
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	4013      	ands	r3, r2
 8005a3e:	6a3a      	ldr	r2, [r7, #32]
 8005a40:	4313      	orrs	r3, r2
 8005a42:	623b      	str	r3, [r7, #32]
      }

      /* Set TIMx_AF1 */
      htim->Instance->AF1 = tmporx;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	6a3a      	ldr	r2, [r7, #32]
 8005a4a:	661a      	str	r2, [r3, #96]	@ 0x60
      break;
 8005a4c:	e02c      	b.n	8005aa8 <HAL_TIMEx_ConfigBreakInput+0x174>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a54:	623b      	str	r3, [r7, #32]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	43db      	mvns	r3, r3
 8005a5a:	6a3a      	ldr	r2, [r7, #32]
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	623b      	str	r3, [r7, #32]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	685a      	ldr	r2, [r3, #4]
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	409a      	lsls	r2, r3
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	4013      	ands	r3, r2
 8005a6c:	6a3a      	ldr	r2, [r7, #32]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	623b      	str	r3, [r7, #32]

      /* Set the break input polarity */
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2b08      	cmp	r3, #8
 8005a78:	d00d      	beq.n	8005a96 <HAL_TIMEx_ConfigBreakInput+0x162>
      {
        tmporx &= ~bkin_polarity_mask;
 8005a7a:	69bb      	ldr	r3, [r7, #24]
 8005a7c:	43db      	mvns	r3, r3
 8005a7e:	6a3a      	ldr	r2, [r7, #32]
 8005a80:	4013      	ands	r3, r2
 8005a82:	623b      	str	r3, [r7, #32]
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	689a      	ldr	r2, [r3, #8]
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	409a      	lsls	r2, r3
 8005a8c:	69bb      	ldr	r3, [r7, #24]
 8005a8e:	4013      	ands	r3, r2
 8005a90:	6a3a      	ldr	r2, [r7, #32]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	623b      	str	r3, [r7, #32]
      }

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	6a3a      	ldr	r2, [r7, #32]
 8005a9c:	665a      	str	r2, [r3, #100]	@ 0x64
      break;
 8005a9e:	e003      	b.n	8005aa8 <HAL_TIMEx_ConfigBreakInput+0x174>
    }
    default:
      status = HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8005aa6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005ab0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	372c      	adds	r7, #44	@ 0x2c
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr

08005ac0 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b087      	sub	sp, #28
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	60b9      	str	r1, [r7, #8]
 8005aca:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	f003 030f 	and.w	r3, r3, #15
 8005ad2:	2204      	movs	r2, #4
 8005ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	6a1a      	ldr	r2, [r3, #32]
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	43db      	mvns	r3, r3
 8005ae2:	401a      	ands	r2, r3
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6a1a      	ldr	r2, [r3, #32]
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	f003 030f 	and.w	r3, r3, #15
 8005af2:	6879      	ldr	r1, [r7, #4]
 8005af4:	fa01 f303 	lsl.w	r3, r1, r3
 8005af8:	431a      	orrs	r2, r3
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	621a      	str	r2, [r3, #32]
}
 8005afe:	bf00      	nop
 8005b00:	371c      	adds	r7, #28
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr

08005b0a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b0a:	b580      	push	{r7, lr}
 8005b0c:	b082      	sub	sp, #8
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d101      	bne.n	8005b1c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e042      	b.n	8005ba2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d106      	bne.n	8005b34 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f7fb fa10 	bl	8000f54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2224      	movs	r2, #36	@ 0x24
 8005b38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f022 0201 	bic.w	r2, r2, #1
 8005b4a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d002      	beq.n	8005b5a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f000 fe1f 	bl	8006798 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 f8b4 	bl	8005cc8 <UART_SetConfig>
 8005b60:	4603      	mov	r3, r0
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d101      	bne.n	8005b6a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	e01b      	b.n	8005ba2 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	685a      	ldr	r2, [r3, #4]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005b78:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	689a      	ldr	r2, [r3, #8]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005b88:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f042 0201 	orr.w	r2, r2, #1
 8005b98:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 fe9e 	bl	80068dc <UART_CheckIdleState>
 8005ba0:	4603      	mov	r3, r0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3708      	adds	r7, #8
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}

08005baa <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005baa:	b580      	push	{r7, lr}
 8005bac:	b08a      	sub	sp, #40	@ 0x28
 8005bae:	af02      	add	r7, sp, #8
 8005bb0:	60f8      	str	r0, [r7, #12]
 8005bb2:	60b9      	str	r1, [r7, #8]
 8005bb4:	603b      	str	r3, [r7, #0]
 8005bb6:	4613      	mov	r3, r2
 8005bb8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bc0:	2b20      	cmp	r3, #32
 8005bc2:	d17b      	bne.n	8005cbc <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d002      	beq.n	8005bd0 <HAL_UART_Transmit+0x26>
 8005bca:	88fb      	ldrh	r3, [r7, #6]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d101      	bne.n	8005bd4 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e074      	b.n	8005cbe <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2221      	movs	r2, #33	@ 0x21
 8005be0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005be4:	f7fb fad8 	bl	8001198 <HAL_GetTick>
 8005be8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	88fa      	ldrh	r2, [r7, #6]
 8005bee:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	88fa      	ldrh	r2, [r7, #6]
 8005bf6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c02:	d108      	bne.n	8005c16 <HAL_UART_Transmit+0x6c>
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	691b      	ldr	r3, [r3, #16]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d104      	bne.n	8005c16 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	61bb      	str	r3, [r7, #24]
 8005c14:	e003      	b.n	8005c1e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005c1e:	e030      	b.n	8005c82 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	9300      	str	r3, [sp, #0]
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	2200      	movs	r2, #0
 8005c28:	2180      	movs	r1, #128	@ 0x80
 8005c2a:	68f8      	ldr	r0, [r7, #12]
 8005c2c:	f000 ff00 	bl	8006a30 <UART_WaitOnFlagUntilTimeout>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d005      	beq.n	8005c42 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2220      	movs	r2, #32
 8005c3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	e03d      	b.n	8005cbe <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d10b      	bne.n	8005c60 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	881b      	ldrh	r3, [r3, #0]
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c56:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005c58:	69bb      	ldr	r3, [r7, #24]
 8005c5a:	3302      	adds	r3, #2
 8005c5c:	61bb      	str	r3, [r7, #24]
 8005c5e:	e007      	b.n	8005c70 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c60:	69fb      	ldr	r3, [r7, #28]
 8005c62:	781a      	ldrb	r2, [r3, #0]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	3b01      	subs	r3, #1
 8005c7a:	b29a      	uxth	r2, r3
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d1c8      	bne.n	8005c20 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	9300      	str	r3, [sp, #0]
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	2200      	movs	r2, #0
 8005c96:	2140      	movs	r1, #64	@ 0x40
 8005c98:	68f8      	ldr	r0, [r7, #12]
 8005c9a:	f000 fec9 	bl	8006a30 <UART_WaitOnFlagUntilTimeout>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d005      	beq.n	8005cb0 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2220      	movs	r2, #32
 8005ca8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005cac:	2303      	movs	r3, #3
 8005cae:	e006      	b.n	8005cbe <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2220      	movs	r2, #32
 8005cb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	e000      	b.n	8005cbe <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005cbc:	2302      	movs	r3, #2
  }
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3720      	adds	r7, #32
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
	...

08005cc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ccc:	b092      	sub	sp, #72	@ 0x48
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	689a      	ldr	r2, [r3, #8]
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	691b      	ldr	r3, [r3, #16]
 8005ce0:	431a      	orrs	r2, r3
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	695b      	ldr	r3, [r3, #20]
 8005ce6:	431a      	orrs	r2, r3
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	69db      	ldr	r3, [r3, #28]
 8005cec:	4313      	orrs	r3, r2
 8005cee:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	4bbe      	ldr	r3, [pc, #760]	@ (8005ff0 <UART_SetConfig+0x328>)
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	697a      	ldr	r2, [r7, #20]
 8005cfc:	6812      	ldr	r2, [r2, #0]
 8005cfe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005d00:	430b      	orrs	r3, r1
 8005d02:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	68da      	ldr	r2, [r3, #12]
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	430a      	orrs	r2, r1
 8005d18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	699b      	ldr	r3, [r3, #24]
 8005d1e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4ab3      	ldr	r2, [pc, #716]	@ (8005ff4 <UART_SetConfig+0x32c>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d004      	beq.n	8005d34 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	6a1b      	ldr	r3, [r3, #32]
 8005d2e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d30:	4313      	orrs	r3, r2
 8005d32:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	689a      	ldr	r2, [r3, #8]
 8005d3a:	4baf      	ldr	r3, [pc, #700]	@ (8005ff8 <UART_SetConfig+0x330>)
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	697a      	ldr	r2, [r7, #20]
 8005d40:	6812      	ldr	r2, [r2, #0]
 8005d42:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005d44:	430b      	orrs	r3, r1
 8005d46:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d4e:	f023 010f 	bic.w	r1, r3, #15
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	430a      	orrs	r2, r1
 8005d5c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4aa6      	ldr	r2, [pc, #664]	@ (8005ffc <UART_SetConfig+0x334>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d177      	bne.n	8005e58 <UART_SetConfig+0x190>
 8005d68:	4ba5      	ldr	r3, [pc, #660]	@ (8006000 <UART_SetConfig+0x338>)
 8005d6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d6c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d70:	2b28      	cmp	r3, #40	@ 0x28
 8005d72:	d86d      	bhi.n	8005e50 <UART_SetConfig+0x188>
 8005d74:	a201      	add	r2, pc, #4	@ (adr r2, 8005d7c <UART_SetConfig+0xb4>)
 8005d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d7a:	bf00      	nop
 8005d7c:	08005e21 	.word	0x08005e21
 8005d80:	08005e51 	.word	0x08005e51
 8005d84:	08005e51 	.word	0x08005e51
 8005d88:	08005e51 	.word	0x08005e51
 8005d8c:	08005e51 	.word	0x08005e51
 8005d90:	08005e51 	.word	0x08005e51
 8005d94:	08005e51 	.word	0x08005e51
 8005d98:	08005e51 	.word	0x08005e51
 8005d9c:	08005e29 	.word	0x08005e29
 8005da0:	08005e51 	.word	0x08005e51
 8005da4:	08005e51 	.word	0x08005e51
 8005da8:	08005e51 	.word	0x08005e51
 8005dac:	08005e51 	.word	0x08005e51
 8005db0:	08005e51 	.word	0x08005e51
 8005db4:	08005e51 	.word	0x08005e51
 8005db8:	08005e51 	.word	0x08005e51
 8005dbc:	08005e31 	.word	0x08005e31
 8005dc0:	08005e51 	.word	0x08005e51
 8005dc4:	08005e51 	.word	0x08005e51
 8005dc8:	08005e51 	.word	0x08005e51
 8005dcc:	08005e51 	.word	0x08005e51
 8005dd0:	08005e51 	.word	0x08005e51
 8005dd4:	08005e51 	.word	0x08005e51
 8005dd8:	08005e51 	.word	0x08005e51
 8005ddc:	08005e39 	.word	0x08005e39
 8005de0:	08005e51 	.word	0x08005e51
 8005de4:	08005e51 	.word	0x08005e51
 8005de8:	08005e51 	.word	0x08005e51
 8005dec:	08005e51 	.word	0x08005e51
 8005df0:	08005e51 	.word	0x08005e51
 8005df4:	08005e51 	.word	0x08005e51
 8005df8:	08005e51 	.word	0x08005e51
 8005dfc:	08005e41 	.word	0x08005e41
 8005e00:	08005e51 	.word	0x08005e51
 8005e04:	08005e51 	.word	0x08005e51
 8005e08:	08005e51 	.word	0x08005e51
 8005e0c:	08005e51 	.word	0x08005e51
 8005e10:	08005e51 	.word	0x08005e51
 8005e14:	08005e51 	.word	0x08005e51
 8005e18:	08005e51 	.word	0x08005e51
 8005e1c:	08005e49 	.word	0x08005e49
 8005e20:	2301      	movs	r3, #1
 8005e22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e26:	e222      	b.n	800626e <UART_SetConfig+0x5a6>
 8005e28:	2304      	movs	r3, #4
 8005e2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e2e:	e21e      	b.n	800626e <UART_SetConfig+0x5a6>
 8005e30:	2308      	movs	r3, #8
 8005e32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e36:	e21a      	b.n	800626e <UART_SetConfig+0x5a6>
 8005e38:	2310      	movs	r3, #16
 8005e3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e3e:	e216      	b.n	800626e <UART_SetConfig+0x5a6>
 8005e40:	2320      	movs	r3, #32
 8005e42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e46:	e212      	b.n	800626e <UART_SetConfig+0x5a6>
 8005e48:	2340      	movs	r3, #64	@ 0x40
 8005e4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e4e:	e20e      	b.n	800626e <UART_SetConfig+0x5a6>
 8005e50:	2380      	movs	r3, #128	@ 0x80
 8005e52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e56:	e20a      	b.n	800626e <UART_SetConfig+0x5a6>
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a69      	ldr	r2, [pc, #420]	@ (8006004 <UART_SetConfig+0x33c>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d130      	bne.n	8005ec4 <UART_SetConfig+0x1fc>
 8005e62:	4b67      	ldr	r3, [pc, #412]	@ (8006000 <UART_SetConfig+0x338>)
 8005e64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e66:	f003 0307 	and.w	r3, r3, #7
 8005e6a:	2b05      	cmp	r3, #5
 8005e6c:	d826      	bhi.n	8005ebc <UART_SetConfig+0x1f4>
 8005e6e:	a201      	add	r2, pc, #4	@ (adr r2, 8005e74 <UART_SetConfig+0x1ac>)
 8005e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e74:	08005e8d 	.word	0x08005e8d
 8005e78:	08005e95 	.word	0x08005e95
 8005e7c:	08005e9d 	.word	0x08005e9d
 8005e80:	08005ea5 	.word	0x08005ea5
 8005e84:	08005ead 	.word	0x08005ead
 8005e88:	08005eb5 	.word	0x08005eb5
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e92:	e1ec      	b.n	800626e <UART_SetConfig+0x5a6>
 8005e94:	2304      	movs	r3, #4
 8005e96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e9a:	e1e8      	b.n	800626e <UART_SetConfig+0x5a6>
 8005e9c:	2308      	movs	r3, #8
 8005e9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ea2:	e1e4      	b.n	800626e <UART_SetConfig+0x5a6>
 8005ea4:	2310      	movs	r3, #16
 8005ea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eaa:	e1e0      	b.n	800626e <UART_SetConfig+0x5a6>
 8005eac:	2320      	movs	r3, #32
 8005eae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eb2:	e1dc      	b.n	800626e <UART_SetConfig+0x5a6>
 8005eb4:	2340      	movs	r3, #64	@ 0x40
 8005eb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eba:	e1d8      	b.n	800626e <UART_SetConfig+0x5a6>
 8005ebc:	2380      	movs	r3, #128	@ 0x80
 8005ebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ec2:	e1d4      	b.n	800626e <UART_SetConfig+0x5a6>
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a4f      	ldr	r2, [pc, #316]	@ (8006008 <UART_SetConfig+0x340>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d130      	bne.n	8005f30 <UART_SetConfig+0x268>
 8005ece:	4b4c      	ldr	r3, [pc, #304]	@ (8006000 <UART_SetConfig+0x338>)
 8005ed0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ed2:	f003 0307 	and.w	r3, r3, #7
 8005ed6:	2b05      	cmp	r3, #5
 8005ed8:	d826      	bhi.n	8005f28 <UART_SetConfig+0x260>
 8005eda:	a201      	add	r2, pc, #4	@ (adr r2, 8005ee0 <UART_SetConfig+0x218>)
 8005edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ee0:	08005ef9 	.word	0x08005ef9
 8005ee4:	08005f01 	.word	0x08005f01
 8005ee8:	08005f09 	.word	0x08005f09
 8005eec:	08005f11 	.word	0x08005f11
 8005ef0:	08005f19 	.word	0x08005f19
 8005ef4:	08005f21 	.word	0x08005f21
 8005ef8:	2300      	movs	r3, #0
 8005efa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005efe:	e1b6      	b.n	800626e <UART_SetConfig+0x5a6>
 8005f00:	2304      	movs	r3, #4
 8005f02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f06:	e1b2      	b.n	800626e <UART_SetConfig+0x5a6>
 8005f08:	2308      	movs	r3, #8
 8005f0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f0e:	e1ae      	b.n	800626e <UART_SetConfig+0x5a6>
 8005f10:	2310      	movs	r3, #16
 8005f12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f16:	e1aa      	b.n	800626e <UART_SetConfig+0x5a6>
 8005f18:	2320      	movs	r3, #32
 8005f1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f1e:	e1a6      	b.n	800626e <UART_SetConfig+0x5a6>
 8005f20:	2340      	movs	r3, #64	@ 0x40
 8005f22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f26:	e1a2      	b.n	800626e <UART_SetConfig+0x5a6>
 8005f28:	2380      	movs	r3, #128	@ 0x80
 8005f2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f2e:	e19e      	b.n	800626e <UART_SetConfig+0x5a6>
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a35      	ldr	r2, [pc, #212]	@ (800600c <UART_SetConfig+0x344>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d130      	bne.n	8005f9c <UART_SetConfig+0x2d4>
 8005f3a:	4b31      	ldr	r3, [pc, #196]	@ (8006000 <UART_SetConfig+0x338>)
 8005f3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f3e:	f003 0307 	and.w	r3, r3, #7
 8005f42:	2b05      	cmp	r3, #5
 8005f44:	d826      	bhi.n	8005f94 <UART_SetConfig+0x2cc>
 8005f46:	a201      	add	r2, pc, #4	@ (adr r2, 8005f4c <UART_SetConfig+0x284>)
 8005f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f4c:	08005f65 	.word	0x08005f65
 8005f50:	08005f6d 	.word	0x08005f6d
 8005f54:	08005f75 	.word	0x08005f75
 8005f58:	08005f7d 	.word	0x08005f7d
 8005f5c:	08005f85 	.word	0x08005f85
 8005f60:	08005f8d 	.word	0x08005f8d
 8005f64:	2300      	movs	r3, #0
 8005f66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f6a:	e180      	b.n	800626e <UART_SetConfig+0x5a6>
 8005f6c:	2304      	movs	r3, #4
 8005f6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f72:	e17c      	b.n	800626e <UART_SetConfig+0x5a6>
 8005f74:	2308      	movs	r3, #8
 8005f76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f7a:	e178      	b.n	800626e <UART_SetConfig+0x5a6>
 8005f7c:	2310      	movs	r3, #16
 8005f7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f82:	e174      	b.n	800626e <UART_SetConfig+0x5a6>
 8005f84:	2320      	movs	r3, #32
 8005f86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f8a:	e170      	b.n	800626e <UART_SetConfig+0x5a6>
 8005f8c:	2340      	movs	r3, #64	@ 0x40
 8005f8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f92:	e16c      	b.n	800626e <UART_SetConfig+0x5a6>
 8005f94:	2380      	movs	r3, #128	@ 0x80
 8005f96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f9a:	e168      	b.n	800626e <UART_SetConfig+0x5a6>
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a1b      	ldr	r2, [pc, #108]	@ (8006010 <UART_SetConfig+0x348>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d142      	bne.n	800602c <UART_SetConfig+0x364>
 8005fa6:	4b16      	ldr	r3, [pc, #88]	@ (8006000 <UART_SetConfig+0x338>)
 8005fa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005faa:	f003 0307 	and.w	r3, r3, #7
 8005fae:	2b05      	cmp	r3, #5
 8005fb0:	d838      	bhi.n	8006024 <UART_SetConfig+0x35c>
 8005fb2:	a201      	add	r2, pc, #4	@ (adr r2, 8005fb8 <UART_SetConfig+0x2f0>)
 8005fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fb8:	08005fd1 	.word	0x08005fd1
 8005fbc:	08005fd9 	.word	0x08005fd9
 8005fc0:	08005fe1 	.word	0x08005fe1
 8005fc4:	08005fe9 	.word	0x08005fe9
 8005fc8:	08006015 	.word	0x08006015
 8005fcc:	0800601d 	.word	0x0800601d
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fd6:	e14a      	b.n	800626e <UART_SetConfig+0x5a6>
 8005fd8:	2304      	movs	r3, #4
 8005fda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fde:	e146      	b.n	800626e <UART_SetConfig+0x5a6>
 8005fe0:	2308      	movs	r3, #8
 8005fe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fe6:	e142      	b.n	800626e <UART_SetConfig+0x5a6>
 8005fe8:	2310      	movs	r3, #16
 8005fea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fee:	e13e      	b.n	800626e <UART_SetConfig+0x5a6>
 8005ff0:	cfff69f3 	.word	0xcfff69f3
 8005ff4:	58000c00 	.word	0x58000c00
 8005ff8:	11fff4ff 	.word	0x11fff4ff
 8005ffc:	40011000 	.word	0x40011000
 8006000:	58024400 	.word	0x58024400
 8006004:	40004400 	.word	0x40004400
 8006008:	40004800 	.word	0x40004800
 800600c:	40004c00 	.word	0x40004c00
 8006010:	40005000 	.word	0x40005000
 8006014:	2320      	movs	r3, #32
 8006016:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800601a:	e128      	b.n	800626e <UART_SetConfig+0x5a6>
 800601c:	2340      	movs	r3, #64	@ 0x40
 800601e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006022:	e124      	b.n	800626e <UART_SetConfig+0x5a6>
 8006024:	2380      	movs	r3, #128	@ 0x80
 8006026:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800602a:	e120      	b.n	800626e <UART_SetConfig+0x5a6>
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4acb      	ldr	r2, [pc, #812]	@ (8006360 <UART_SetConfig+0x698>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d176      	bne.n	8006124 <UART_SetConfig+0x45c>
 8006036:	4bcb      	ldr	r3, [pc, #812]	@ (8006364 <UART_SetConfig+0x69c>)
 8006038:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800603a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800603e:	2b28      	cmp	r3, #40	@ 0x28
 8006040:	d86c      	bhi.n	800611c <UART_SetConfig+0x454>
 8006042:	a201      	add	r2, pc, #4	@ (adr r2, 8006048 <UART_SetConfig+0x380>)
 8006044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006048:	080060ed 	.word	0x080060ed
 800604c:	0800611d 	.word	0x0800611d
 8006050:	0800611d 	.word	0x0800611d
 8006054:	0800611d 	.word	0x0800611d
 8006058:	0800611d 	.word	0x0800611d
 800605c:	0800611d 	.word	0x0800611d
 8006060:	0800611d 	.word	0x0800611d
 8006064:	0800611d 	.word	0x0800611d
 8006068:	080060f5 	.word	0x080060f5
 800606c:	0800611d 	.word	0x0800611d
 8006070:	0800611d 	.word	0x0800611d
 8006074:	0800611d 	.word	0x0800611d
 8006078:	0800611d 	.word	0x0800611d
 800607c:	0800611d 	.word	0x0800611d
 8006080:	0800611d 	.word	0x0800611d
 8006084:	0800611d 	.word	0x0800611d
 8006088:	080060fd 	.word	0x080060fd
 800608c:	0800611d 	.word	0x0800611d
 8006090:	0800611d 	.word	0x0800611d
 8006094:	0800611d 	.word	0x0800611d
 8006098:	0800611d 	.word	0x0800611d
 800609c:	0800611d 	.word	0x0800611d
 80060a0:	0800611d 	.word	0x0800611d
 80060a4:	0800611d 	.word	0x0800611d
 80060a8:	08006105 	.word	0x08006105
 80060ac:	0800611d 	.word	0x0800611d
 80060b0:	0800611d 	.word	0x0800611d
 80060b4:	0800611d 	.word	0x0800611d
 80060b8:	0800611d 	.word	0x0800611d
 80060bc:	0800611d 	.word	0x0800611d
 80060c0:	0800611d 	.word	0x0800611d
 80060c4:	0800611d 	.word	0x0800611d
 80060c8:	0800610d 	.word	0x0800610d
 80060cc:	0800611d 	.word	0x0800611d
 80060d0:	0800611d 	.word	0x0800611d
 80060d4:	0800611d 	.word	0x0800611d
 80060d8:	0800611d 	.word	0x0800611d
 80060dc:	0800611d 	.word	0x0800611d
 80060e0:	0800611d 	.word	0x0800611d
 80060e4:	0800611d 	.word	0x0800611d
 80060e8:	08006115 	.word	0x08006115
 80060ec:	2301      	movs	r3, #1
 80060ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060f2:	e0bc      	b.n	800626e <UART_SetConfig+0x5a6>
 80060f4:	2304      	movs	r3, #4
 80060f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060fa:	e0b8      	b.n	800626e <UART_SetConfig+0x5a6>
 80060fc:	2308      	movs	r3, #8
 80060fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006102:	e0b4      	b.n	800626e <UART_SetConfig+0x5a6>
 8006104:	2310      	movs	r3, #16
 8006106:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800610a:	e0b0      	b.n	800626e <UART_SetConfig+0x5a6>
 800610c:	2320      	movs	r3, #32
 800610e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006112:	e0ac      	b.n	800626e <UART_SetConfig+0x5a6>
 8006114:	2340      	movs	r3, #64	@ 0x40
 8006116:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800611a:	e0a8      	b.n	800626e <UART_SetConfig+0x5a6>
 800611c:	2380      	movs	r3, #128	@ 0x80
 800611e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006122:	e0a4      	b.n	800626e <UART_SetConfig+0x5a6>
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a8f      	ldr	r2, [pc, #572]	@ (8006368 <UART_SetConfig+0x6a0>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d130      	bne.n	8006190 <UART_SetConfig+0x4c8>
 800612e:	4b8d      	ldr	r3, [pc, #564]	@ (8006364 <UART_SetConfig+0x69c>)
 8006130:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006132:	f003 0307 	and.w	r3, r3, #7
 8006136:	2b05      	cmp	r3, #5
 8006138:	d826      	bhi.n	8006188 <UART_SetConfig+0x4c0>
 800613a:	a201      	add	r2, pc, #4	@ (adr r2, 8006140 <UART_SetConfig+0x478>)
 800613c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006140:	08006159 	.word	0x08006159
 8006144:	08006161 	.word	0x08006161
 8006148:	08006169 	.word	0x08006169
 800614c:	08006171 	.word	0x08006171
 8006150:	08006179 	.word	0x08006179
 8006154:	08006181 	.word	0x08006181
 8006158:	2300      	movs	r3, #0
 800615a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800615e:	e086      	b.n	800626e <UART_SetConfig+0x5a6>
 8006160:	2304      	movs	r3, #4
 8006162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006166:	e082      	b.n	800626e <UART_SetConfig+0x5a6>
 8006168:	2308      	movs	r3, #8
 800616a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800616e:	e07e      	b.n	800626e <UART_SetConfig+0x5a6>
 8006170:	2310      	movs	r3, #16
 8006172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006176:	e07a      	b.n	800626e <UART_SetConfig+0x5a6>
 8006178:	2320      	movs	r3, #32
 800617a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800617e:	e076      	b.n	800626e <UART_SetConfig+0x5a6>
 8006180:	2340      	movs	r3, #64	@ 0x40
 8006182:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006186:	e072      	b.n	800626e <UART_SetConfig+0x5a6>
 8006188:	2380      	movs	r3, #128	@ 0x80
 800618a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800618e:	e06e      	b.n	800626e <UART_SetConfig+0x5a6>
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a75      	ldr	r2, [pc, #468]	@ (800636c <UART_SetConfig+0x6a4>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d130      	bne.n	80061fc <UART_SetConfig+0x534>
 800619a:	4b72      	ldr	r3, [pc, #456]	@ (8006364 <UART_SetConfig+0x69c>)
 800619c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800619e:	f003 0307 	and.w	r3, r3, #7
 80061a2:	2b05      	cmp	r3, #5
 80061a4:	d826      	bhi.n	80061f4 <UART_SetConfig+0x52c>
 80061a6:	a201      	add	r2, pc, #4	@ (adr r2, 80061ac <UART_SetConfig+0x4e4>)
 80061a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ac:	080061c5 	.word	0x080061c5
 80061b0:	080061cd 	.word	0x080061cd
 80061b4:	080061d5 	.word	0x080061d5
 80061b8:	080061dd 	.word	0x080061dd
 80061bc:	080061e5 	.word	0x080061e5
 80061c0:	080061ed 	.word	0x080061ed
 80061c4:	2300      	movs	r3, #0
 80061c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061ca:	e050      	b.n	800626e <UART_SetConfig+0x5a6>
 80061cc:	2304      	movs	r3, #4
 80061ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061d2:	e04c      	b.n	800626e <UART_SetConfig+0x5a6>
 80061d4:	2308      	movs	r3, #8
 80061d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061da:	e048      	b.n	800626e <UART_SetConfig+0x5a6>
 80061dc:	2310      	movs	r3, #16
 80061de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061e2:	e044      	b.n	800626e <UART_SetConfig+0x5a6>
 80061e4:	2320      	movs	r3, #32
 80061e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061ea:	e040      	b.n	800626e <UART_SetConfig+0x5a6>
 80061ec:	2340      	movs	r3, #64	@ 0x40
 80061ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061f2:	e03c      	b.n	800626e <UART_SetConfig+0x5a6>
 80061f4:	2380      	movs	r3, #128	@ 0x80
 80061f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061fa:	e038      	b.n	800626e <UART_SetConfig+0x5a6>
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a5b      	ldr	r2, [pc, #364]	@ (8006370 <UART_SetConfig+0x6a8>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d130      	bne.n	8006268 <UART_SetConfig+0x5a0>
 8006206:	4b57      	ldr	r3, [pc, #348]	@ (8006364 <UART_SetConfig+0x69c>)
 8006208:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800620a:	f003 0307 	and.w	r3, r3, #7
 800620e:	2b05      	cmp	r3, #5
 8006210:	d826      	bhi.n	8006260 <UART_SetConfig+0x598>
 8006212:	a201      	add	r2, pc, #4	@ (adr r2, 8006218 <UART_SetConfig+0x550>)
 8006214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006218:	08006231 	.word	0x08006231
 800621c:	08006239 	.word	0x08006239
 8006220:	08006241 	.word	0x08006241
 8006224:	08006249 	.word	0x08006249
 8006228:	08006251 	.word	0x08006251
 800622c:	08006259 	.word	0x08006259
 8006230:	2302      	movs	r3, #2
 8006232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006236:	e01a      	b.n	800626e <UART_SetConfig+0x5a6>
 8006238:	2304      	movs	r3, #4
 800623a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800623e:	e016      	b.n	800626e <UART_SetConfig+0x5a6>
 8006240:	2308      	movs	r3, #8
 8006242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006246:	e012      	b.n	800626e <UART_SetConfig+0x5a6>
 8006248:	2310      	movs	r3, #16
 800624a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800624e:	e00e      	b.n	800626e <UART_SetConfig+0x5a6>
 8006250:	2320      	movs	r3, #32
 8006252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006256:	e00a      	b.n	800626e <UART_SetConfig+0x5a6>
 8006258:	2340      	movs	r3, #64	@ 0x40
 800625a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800625e:	e006      	b.n	800626e <UART_SetConfig+0x5a6>
 8006260:	2380      	movs	r3, #128	@ 0x80
 8006262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006266:	e002      	b.n	800626e <UART_SetConfig+0x5a6>
 8006268:	2380      	movs	r3, #128	@ 0x80
 800626a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a3f      	ldr	r2, [pc, #252]	@ (8006370 <UART_SetConfig+0x6a8>)
 8006274:	4293      	cmp	r3, r2
 8006276:	f040 80f8 	bne.w	800646a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800627a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800627e:	2b20      	cmp	r3, #32
 8006280:	dc46      	bgt.n	8006310 <UART_SetConfig+0x648>
 8006282:	2b02      	cmp	r3, #2
 8006284:	f2c0 8082 	blt.w	800638c <UART_SetConfig+0x6c4>
 8006288:	3b02      	subs	r3, #2
 800628a:	2b1e      	cmp	r3, #30
 800628c:	d87e      	bhi.n	800638c <UART_SetConfig+0x6c4>
 800628e:	a201      	add	r2, pc, #4	@ (adr r2, 8006294 <UART_SetConfig+0x5cc>)
 8006290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006294:	08006317 	.word	0x08006317
 8006298:	0800638d 	.word	0x0800638d
 800629c:	0800631f 	.word	0x0800631f
 80062a0:	0800638d 	.word	0x0800638d
 80062a4:	0800638d 	.word	0x0800638d
 80062a8:	0800638d 	.word	0x0800638d
 80062ac:	0800632f 	.word	0x0800632f
 80062b0:	0800638d 	.word	0x0800638d
 80062b4:	0800638d 	.word	0x0800638d
 80062b8:	0800638d 	.word	0x0800638d
 80062bc:	0800638d 	.word	0x0800638d
 80062c0:	0800638d 	.word	0x0800638d
 80062c4:	0800638d 	.word	0x0800638d
 80062c8:	0800638d 	.word	0x0800638d
 80062cc:	0800633f 	.word	0x0800633f
 80062d0:	0800638d 	.word	0x0800638d
 80062d4:	0800638d 	.word	0x0800638d
 80062d8:	0800638d 	.word	0x0800638d
 80062dc:	0800638d 	.word	0x0800638d
 80062e0:	0800638d 	.word	0x0800638d
 80062e4:	0800638d 	.word	0x0800638d
 80062e8:	0800638d 	.word	0x0800638d
 80062ec:	0800638d 	.word	0x0800638d
 80062f0:	0800638d 	.word	0x0800638d
 80062f4:	0800638d 	.word	0x0800638d
 80062f8:	0800638d 	.word	0x0800638d
 80062fc:	0800638d 	.word	0x0800638d
 8006300:	0800638d 	.word	0x0800638d
 8006304:	0800638d 	.word	0x0800638d
 8006308:	0800638d 	.word	0x0800638d
 800630c:	0800637f 	.word	0x0800637f
 8006310:	2b40      	cmp	r3, #64	@ 0x40
 8006312:	d037      	beq.n	8006384 <UART_SetConfig+0x6bc>
 8006314:	e03a      	b.n	800638c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006316:	f7fd fd11 	bl	8003d3c <HAL_RCCEx_GetD3PCLK1Freq>
 800631a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800631c:	e03c      	b.n	8006398 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800631e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006322:	4618      	mov	r0, r3
 8006324:	f7fd fd20 	bl	8003d68 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800632a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800632c:	e034      	b.n	8006398 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800632e:	f107 0318 	add.w	r3, r7, #24
 8006332:	4618      	mov	r0, r3
 8006334:	f7fd fe6c 	bl	8004010 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006338:	69fb      	ldr	r3, [r7, #28]
 800633a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800633c:	e02c      	b.n	8006398 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800633e:	4b09      	ldr	r3, [pc, #36]	@ (8006364 <UART_SetConfig+0x69c>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f003 0320 	and.w	r3, r3, #32
 8006346:	2b00      	cmp	r3, #0
 8006348:	d016      	beq.n	8006378 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800634a:	4b06      	ldr	r3, [pc, #24]	@ (8006364 <UART_SetConfig+0x69c>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	08db      	lsrs	r3, r3, #3
 8006350:	f003 0303 	and.w	r3, r3, #3
 8006354:	4a07      	ldr	r2, [pc, #28]	@ (8006374 <UART_SetConfig+0x6ac>)
 8006356:	fa22 f303 	lsr.w	r3, r2, r3
 800635a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800635c:	e01c      	b.n	8006398 <UART_SetConfig+0x6d0>
 800635e:	bf00      	nop
 8006360:	40011400 	.word	0x40011400
 8006364:	58024400 	.word	0x58024400
 8006368:	40007800 	.word	0x40007800
 800636c:	40007c00 	.word	0x40007c00
 8006370:	58000c00 	.word	0x58000c00
 8006374:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006378:	4b9d      	ldr	r3, [pc, #628]	@ (80065f0 <UART_SetConfig+0x928>)
 800637a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800637c:	e00c      	b.n	8006398 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800637e:	4b9d      	ldr	r3, [pc, #628]	@ (80065f4 <UART_SetConfig+0x92c>)
 8006380:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006382:	e009      	b.n	8006398 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006384:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006388:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800638a:	e005      	b.n	8006398 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800638c:	2300      	movs	r3, #0
 800638e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006396:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006398:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800639a:	2b00      	cmp	r3, #0
 800639c:	f000 81de 	beq.w	800675c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063a4:	4a94      	ldr	r2, [pc, #592]	@ (80065f8 <UART_SetConfig+0x930>)
 80063a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063aa:	461a      	mov	r2, r3
 80063ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80063b2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	685a      	ldr	r2, [r3, #4]
 80063b8:	4613      	mov	r3, r2
 80063ba:	005b      	lsls	r3, r3, #1
 80063bc:	4413      	add	r3, r2
 80063be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d305      	bcc.n	80063d0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80063ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d903      	bls.n	80063d8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80063d6:	e1c1      	b.n	800675c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063da:	2200      	movs	r2, #0
 80063dc:	60bb      	str	r3, [r7, #8]
 80063de:	60fa      	str	r2, [r7, #12]
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063e4:	4a84      	ldr	r2, [pc, #528]	@ (80065f8 <UART_SetConfig+0x930>)
 80063e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	2200      	movs	r2, #0
 80063ee:	603b      	str	r3, [r7, #0]
 80063f0:	607a      	str	r2, [r7, #4]
 80063f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80063fa:	f7f9 ff6d 	bl	80002d8 <__aeabi_uldivmod>
 80063fe:	4602      	mov	r2, r0
 8006400:	460b      	mov	r3, r1
 8006402:	4610      	mov	r0, r2
 8006404:	4619      	mov	r1, r3
 8006406:	f04f 0200 	mov.w	r2, #0
 800640a:	f04f 0300 	mov.w	r3, #0
 800640e:	020b      	lsls	r3, r1, #8
 8006410:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006414:	0202      	lsls	r2, r0, #8
 8006416:	6979      	ldr	r1, [r7, #20]
 8006418:	6849      	ldr	r1, [r1, #4]
 800641a:	0849      	lsrs	r1, r1, #1
 800641c:	2000      	movs	r0, #0
 800641e:	460c      	mov	r4, r1
 8006420:	4605      	mov	r5, r0
 8006422:	eb12 0804 	adds.w	r8, r2, r4
 8006426:	eb43 0905 	adc.w	r9, r3, r5
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	2200      	movs	r2, #0
 8006430:	469a      	mov	sl, r3
 8006432:	4693      	mov	fp, r2
 8006434:	4652      	mov	r2, sl
 8006436:	465b      	mov	r3, fp
 8006438:	4640      	mov	r0, r8
 800643a:	4649      	mov	r1, r9
 800643c:	f7f9 ff4c 	bl	80002d8 <__aeabi_uldivmod>
 8006440:	4602      	mov	r2, r0
 8006442:	460b      	mov	r3, r1
 8006444:	4613      	mov	r3, r2
 8006446:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800644a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800644e:	d308      	bcc.n	8006462 <UART_SetConfig+0x79a>
 8006450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006452:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006456:	d204      	bcs.n	8006462 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800645e:	60da      	str	r2, [r3, #12]
 8006460:	e17c      	b.n	800675c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006468:	e178      	b.n	800675c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	69db      	ldr	r3, [r3, #28]
 800646e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006472:	f040 80c5 	bne.w	8006600 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006476:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800647a:	2b20      	cmp	r3, #32
 800647c:	dc48      	bgt.n	8006510 <UART_SetConfig+0x848>
 800647e:	2b00      	cmp	r3, #0
 8006480:	db7b      	blt.n	800657a <UART_SetConfig+0x8b2>
 8006482:	2b20      	cmp	r3, #32
 8006484:	d879      	bhi.n	800657a <UART_SetConfig+0x8b2>
 8006486:	a201      	add	r2, pc, #4	@ (adr r2, 800648c <UART_SetConfig+0x7c4>)
 8006488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800648c:	08006517 	.word	0x08006517
 8006490:	0800651f 	.word	0x0800651f
 8006494:	0800657b 	.word	0x0800657b
 8006498:	0800657b 	.word	0x0800657b
 800649c:	08006527 	.word	0x08006527
 80064a0:	0800657b 	.word	0x0800657b
 80064a4:	0800657b 	.word	0x0800657b
 80064a8:	0800657b 	.word	0x0800657b
 80064ac:	08006537 	.word	0x08006537
 80064b0:	0800657b 	.word	0x0800657b
 80064b4:	0800657b 	.word	0x0800657b
 80064b8:	0800657b 	.word	0x0800657b
 80064bc:	0800657b 	.word	0x0800657b
 80064c0:	0800657b 	.word	0x0800657b
 80064c4:	0800657b 	.word	0x0800657b
 80064c8:	0800657b 	.word	0x0800657b
 80064cc:	08006547 	.word	0x08006547
 80064d0:	0800657b 	.word	0x0800657b
 80064d4:	0800657b 	.word	0x0800657b
 80064d8:	0800657b 	.word	0x0800657b
 80064dc:	0800657b 	.word	0x0800657b
 80064e0:	0800657b 	.word	0x0800657b
 80064e4:	0800657b 	.word	0x0800657b
 80064e8:	0800657b 	.word	0x0800657b
 80064ec:	0800657b 	.word	0x0800657b
 80064f0:	0800657b 	.word	0x0800657b
 80064f4:	0800657b 	.word	0x0800657b
 80064f8:	0800657b 	.word	0x0800657b
 80064fc:	0800657b 	.word	0x0800657b
 8006500:	0800657b 	.word	0x0800657b
 8006504:	0800657b 	.word	0x0800657b
 8006508:	0800657b 	.word	0x0800657b
 800650c:	0800656d 	.word	0x0800656d
 8006510:	2b40      	cmp	r3, #64	@ 0x40
 8006512:	d02e      	beq.n	8006572 <UART_SetConfig+0x8aa>
 8006514:	e031      	b.n	800657a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006516:	f7fc f9db 	bl	80028d0 <HAL_RCC_GetPCLK1Freq>
 800651a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800651c:	e033      	b.n	8006586 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800651e:	f7fc f9ed 	bl	80028fc <HAL_RCC_GetPCLK2Freq>
 8006522:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006524:	e02f      	b.n	8006586 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006526:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800652a:	4618      	mov	r0, r3
 800652c:	f7fd fc1c 	bl	8003d68 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006532:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006534:	e027      	b.n	8006586 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006536:	f107 0318 	add.w	r3, r7, #24
 800653a:	4618      	mov	r0, r3
 800653c:	f7fd fd68 	bl	8004010 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006540:	69fb      	ldr	r3, [r7, #28]
 8006542:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006544:	e01f      	b.n	8006586 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006546:	4b2d      	ldr	r3, [pc, #180]	@ (80065fc <UART_SetConfig+0x934>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f003 0320 	and.w	r3, r3, #32
 800654e:	2b00      	cmp	r3, #0
 8006550:	d009      	beq.n	8006566 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006552:	4b2a      	ldr	r3, [pc, #168]	@ (80065fc <UART_SetConfig+0x934>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	08db      	lsrs	r3, r3, #3
 8006558:	f003 0303 	and.w	r3, r3, #3
 800655c:	4a24      	ldr	r2, [pc, #144]	@ (80065f0 <UART_SetConfig+0x928>)
 800655e:	fa22 f303 	lsr.w	r3, r2, r3
 8006562:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006564:	e00f      	b.n	8006586 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006566:	4b22      	ldr	r3, [pc, #136]	@ (80065f0 <UART_SetConfig+0x928>)
 8006568:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800656a:	e00c      	b.n	8006586 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800656c:	4b21      	ldr	r3, [pc, #132]	@ (80065f4 <UART_SetConfig+0x92c>)
 800656e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006570:	e009      	b.n	8006586 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006572:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006576:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006578:	e005      	b.n	8006586 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800657a:	2300      	movs	r3, #0
 800657c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800657e:	2301      	movs	r3, #1
 8006580:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006584:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006586:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006588:	2b00      	cmp	r3, #0
 800658a:	f000 80e7 	beq.w	800675c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006592:	4a19      	ldr	r2, [pc, #100]	@ (80065f8 <UART_SetConfig+0x930>)
 8006594:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006598:	461a      	mov	r2, r3
 800659a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800659c:	fbb3 f3f2 	udiv	r3, r3, r2
 80065a0:	005a      	lsls	r2, r3, #1
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	085b      	lsrs	r3, r3, #1
 80065a8:	441a      	add	r2, r3
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80065b2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065b6:	2b0f      	cmp	r3, #15
 80065b8:	d916      	bls.n	80065e8 <UART_SetConfig+0x920>
 80065ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065c0:	d212      	bcs.n	80065e8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80065c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	f023 030f 	bic.w	r3, r3, #15
 80065ca:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80065cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065ce:	085b      	lsrs	r3, r3, #1
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	f003 0307 	and.w	r3, r3, #7
 80065d6:	b29a      	uxth	r2, r3
 80065d8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80065da:	4313      	orrs	r3, r2
 80065dc:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80065e4:	60da      	str	r2, [r3, #12]
 80065e6:	e0b9      	b.n	800675c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80065ee:	e0b5      	b.n	800675c <UART_SetConfig+0xa94>
 80065f0:	03d09000 	.word	0x03d09000
 80065f4:	003d0900 	.word	0x003d0900
 80065f8:	08007770 	.word	0x08007770
 80065fc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006600:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006604:	2b20      	cmp	r3, #32
 8006606:	dc49      	bgt.n	800669c <UART_SetConfig+0x9d4>
 8006608:	2b00      	cmp	r3, #0
 800660a:	db7c      	blt.n	8006706 <UART_SetConfig+0xa3e>
 800660c:	2b20      	cmp	r3, #32
 800660e:	d87a      	bhi.n	8006706 <UART_SetConfig+0xa3e>
 8006610:	a201      	add	r2, pc, #4	@ (adr r2, 8006618 <UART_SetConfig+0x950>)
 8006612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006616:	bf00      	nop
 8006618:	080066a3 	.word	0x080066a3
 800661c:	080066ab 	.word	0x080066ab
 8006620:	08006707 	.word	0x08006707
 8006624:	08006707 	.word	0x08006707
 8006628:	080066b3 	.word	0x080066b3
 800662c:	08006707 	.word	0x08006707
 8006630:	08006707 	.word	0x08006707
 8006634:	08006707 	.word	0x08006707
 8006638:	080066c3 	.word	0x080066c3
 800663c:	08006707 	.word	0x08006707
 8006640:	08006707 	.word	0x08006707
 8006644:	08006707 	.word	0x08006707
 8006648:	08006707 	.word	0x08006707
 800664c:	08006707 	.word	0x08006707
 8006650:	08006707 	.word	0x08006707
 8006654:	08006707 	.word	0x08006707
 8006658:	080066d3 	.word	0x080066d3
 800665c:	08006707 	.word	0x08006707
 8006660:	08006707 	.word	0x08006707
 8006664:	08006707 	.word	0x08006707
 8006668:	08006707 	.word	0x08006707
 800666c:	08006707 	.word	0x08006707
 8006670:	08006707 	.word	0x08006707
 8006674:	08006707 	.word	0x08006707
 8006678:	08006707 	.word	0x08006707
 800667c:	08006707 	.word	0x08006707
 8006680:	08006707 	.word	0x08006707
 8006684:	08006707 	.word	0x08006707
 8006688:	08006707 	.word	0x08006707
 800668c:	08006707 	.word	0x08006707
 8006690:	08006707 	.word	0x08006707
 8006694:	08006707 	.word	0x08006707
 8006698:	080066f9 	.word	0x080066f9
 800669c:	2b40      	cmp	r3, #64	@ 0x40
 800669e:	d02e      	beq.n	80066fe <UART_SetConfig+0xa36>
 80066a0:	e031      	b.n	8006706 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066a2:	f7fc f915 	bl	80028d0 <HAL_RCC_GetPCLK1Freq>
 80066a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80066a8:	e033      	b.n	8006712 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066aa:	f7fc f927 	bl	80028fc <HAL_RCC_GetPCLK2Freq>
 80066ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80066b0:	e02f      	b.n	8006712 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80066b6:	4618      	mov	r0, r3
 80066b8:	f7fd fb56 	bl	8003d68 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80066bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066c0:	e027      	b.n	8006712 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80066c2:	f107 0318 	add.w	r3, r7, #24
 80066c6:	4618      	mov	r0, r3
 80066c8:	f7fd fca2 	bl	8004010 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80066cc:	69fb      	ldr	r3, [r7, #28]
 80066ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066d0:	e01f      	b.n	8006712 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80066d2:	4b2d      	ldr	r3, [pc, #180]	@ (8006788 <UART_SetConfig+0xac0>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f003 0320 	and.w	r3, r3, #32
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d009      	beq.n	80066f2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80066de:	4b2a      	ldr	r3, [pc, #168]	@ (8006788 <UART_SetConfig+0xac0>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	08db      	lsrs	r3, r3, #3
 80066e4:	f003 0303 	and.w	r3, r3, #3
 80066e8:	4a28      	ldr	r2, [pc, #160]	@ (800678c <UART_SetConfig+0xac4>)
 80066ea:	fa22 f303 	lsr.w	r3, r2, r3
 80066ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80066f0:	e00f      	b.n	8006712 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80066f2:	4b26      	ldr	r3, [pc, #152]	@ (800678c <UART_SetConfig+0xac4>)
 80066f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066f6:	e00c      	b.n	8006712 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80066f8:	4b25      	ldr	r3, [pc, #148]	@ (8006790 <UART_SetConfig+0xac8>)
 80066fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066fc:	e009      	b.n	8006712 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006702:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006704:	e005      	b.n	8006712 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006706:	2300      	movs	r3, #0
 8006708:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006710:	bf00      	nop
    }

    if (pclk != 0U)
 8006712:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006714:	2b00      	cmp	r3, #0
 8006716:	d021      	beq.n	800675c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800671c:	4a1d      	ldr	r2, [pc, #116]	@ (8006794 <UART_SetConfig+0xacc>)
 800671e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006722:	461a      	mov	r2, r3
 8006724:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006726:	fbb3 f2f2 	udiv	r2, r3, r2
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	085b      	lsrs	r3, r3, #1
 8006730:	441a      	add	r2, r3
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	fbb2 f3f3 	udiv	r3, r2, r3
 800673a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800673c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800673e:	2b0f      	cmp	r3, #15
 8006740:	d909      	bls.n	8006756 <UART_SetConfig+0xa8e>
 8006742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006744:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006748:	d205      	bcs.n	8006756 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800674a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800674c:	b29a      	uxth	r2, r3
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	60da      	str	r2, [r3, #12]
 8006754:	e002      	b.n	800675c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	2201      	movs	r2, #1
 8006760:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	2201      	movs	r2, #1
 8006768:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	2200      	movs	r2, #0
 8006770:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	2200      	movs	r2, #0
 8006776:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006778:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800677c:	4618      	mov	r0, r3
 800677e:	3748      	adds	r7, #72	@ 0x48
 8006780:	46bd      	mov	sp, r7
 8006782:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006786:	bf00      	nop
 8006788:	58024400 	.word	0x58024400
 800678c:	03d09000 	.word	0x03d09000
 8006790:	003d0900 	.word	0x003d0900
 8006794:	08007770 	.word	0x08007770

08006798 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006798:	b480      	push	{r7}
 800679a:	b083      	sub	sp, #12
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067a4:	f003 0308 	and.w	r3, r3, #8
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d00a      	beq.n	80067c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	430a      	orrs	r2, r1
 80067c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067c6:	f003 0301 	and.w	r3, r3, #1
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d00a      	beq.n	80067e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	430a      	orrs	r2, r1
 80067e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067e8:	f003 0302 	and.w	r3, r3, #2
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d00a      	beq.n	8006806 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	430a      	orrs	r2, r1
 8006804:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800680a:	f003 0304 	and.w	r3, r3, #4
 800680e:	2b00      	cmp	r3, #0
 8006810:	d00a      	beq.n	8006828 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	430a      	orrs	r2, r1
 8006826:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800682c:	f003 0310 	and.w	r3, r3, #16
 8006830:	2b00      	cmp	r3, #0
 8006832:	d00a      	beq.n	800684a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	430a      	orrs	r2, r1
 8006848:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800684e:	f003 0320 	and.w	r3, r3, #32
 8006852:	2b00      	cmp	r3, #0
 8006854:	d00a      	beq.n	800686c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	430a      	orrs	r2, r1
 800686a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006870:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006874:	2b00      	cmp	r3, #0
 8006876:	d01a      	beq.n	80068ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	430a      	orrs	r2, r1
 800688c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006892:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006896:	d10a      	bne.n	80068ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	430a      	orrs	r2, r1
 80068ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d00a      	beq.n	80068d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	430a      	orrs	r2, r1
 80068ce:	605a      	str	r2, [r3, #4]
  }
}
 80068d0:	bf00      	nop
 80068d2:	370c      	adds	r7, #12
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr

080068dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b098      	sub	sp, #96	@ 0x60
 80068e0:	af02      	add	r7, sp, #8
 80068e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80068ec:	f7fa fc54 	bl	8001198 <HAL_GetTick>
 80068f0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f003 0308 	and.w	r3, r3, #8
 80068fc:	2b08      	cmp	r3, #8
 80068fe:	d12f      	bne.n	8006960 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006900:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006904:	9300      	str	r3, [sp, #0]
 8006906:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006908:	2200      	movs	r2, #0
 800690a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 f88e 	bl	8006a30 <UART_WaitOnFlagUntilTimeout>
 8006914:	4603      	mov	r3, r0
 8006916:	2b00      	cmp	r3, #0
 8006918:	d022      	beq.n	8006960 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006922:	e853 3f00 	ldrex	r3, [r3]
 8006926:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006928:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800692a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800692e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	461a      	mov	r2, r3
 8006936:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006938:	647b      	str	r3, [r7, #68]	@ 0x44
 800693a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800693c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800693e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006940:	e841 2300 	strex	r3, r2, [r1]
 8006944:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006946:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006948:	2b00      	cmp	r3, #0
 800694a:	d1e6      	bne.n	800691a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2220      	movs	r2, #32
 8006950:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800695c:	2303      	movs	r3, #3
 800695e:	e063      	b.n	8006a28 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f003 0304 	and.w	r3, r3, #4
 800696a:	2b04      	cmp	r3, #4
 800696c:	d149      	bne.n	8006a02 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800696e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006972:	9300      	str	r3, [sp, #0]
 8006974:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006976:	2200      	movs	r2, #0
 8006978:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f000 f857 	bl	8006a30 <UART_WaitOnFlagUntilTimeout>
 8006982:	4603      	mov	r3, r0
 8006984:	2b00      	cmp	r3, #0
 8006986:	d03c      	beq.n	8006a02 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800698e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006990:	e853 3f00 	ldrex	r3, [r3]
 8006994:	623b      	str	r3, [r7, #32]
   return(result);
 8006996:	6a3b      	ldr	r3, [r7, #32]
 8006998:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800699c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	461a      	mov	r2, r3
 80069a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80069a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80069ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069ae:	e841 2300 	strex	r3, r2, [r1]
 80069b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80069b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d1e6      	bne.n	8006988 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	3308      	adds	r3, #8
 80069c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	e853 3f00 	ldrex	r3, [r3]
 80069c8:	60fb      	str	r3, [r7, #12]
   return(result);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	f023 0301 	bic.w	r3, r3, #1
 80069d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	3308      	adds	r3, #8
 80069d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80069da:	61fa      	str	r2, [r7, #28]
 80069dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069de:	69b9      	ldr	r1, [r7, #24]
 80069e0:	69fa      	ldr	r2, [r7, #28]
 80069e2:	e841 2300 	strex	r3, r2, [r1]
 80069e6:	617b      	str	r3, [r7, #20]
   return(result);
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d1e5      	bne.n	80069ba <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2220      	movs	r2, #32
 80069f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2200      	movs	r2, #0
 80069fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069fe:	2303      	movs	r3, #3
 8006a00:	e012      	b.n	8006a28 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2220      	movs	r2, #32
 8006a06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2220      	movs	r2, #32
 8006a0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2200      	movs	r2, #0
 8006a16:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2200      	movs	r2, #0
 8006a22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006a26:	2300      	movs	r3, #0
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3758      	adds	r7, #88	@ 0x58
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	60f8      	str	r0, [r7, #12]
 8006a38:	60b9      	str	r1, [r7, #8]
 8006a3a:	603b      	str	r3, [r7, #0]
 8006a3c:	4613      	mov	r3, r2
 8006a3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a40:	e04f      	b.n	8006ae2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a42:	69bb      	ldr	r3, [r7, #24]
 8006a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a48:	d04b      	beq.n	8006ae2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a4a:	f7fa fba5 	bl	8001198 <HAL_GetTick>
 8006a4e:	4602      	mov	r2, r0
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	1ad3      	subs	r3, r2, r3
 8006a54:	69ba      	ldr	r2, [r7, #24]
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d302      	bcc.n	8006a60 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a5a:	69bb      	ldr	r3, [r7, #24]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d101      	bne.n	8006a64 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006a60:	2303      	movs	r3, #3
 8006a62:	e04e      	b.n	8006b02 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f003 0304 	and.w	r3, r3, #4
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d037      	beq.n	8006ae2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	2b80      	cmp	r3, #128	@ 0x80
 8006a76:	d034      	beq.n	8006ae2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	2b40      	cmp	r3, #64	@ 0x40
 8006a7c:	d031      	beq.n	8006ae2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	69db      	ldr	r3, [r3, #28]
 8006a84:	f003 0308 	and.w	r3, r3, #8
 8006a88:	2b08      	cmp	r3, #8
 8006a8a:	d110      	bne.n	8006aae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	2208      	movs	r2, #8
 8006a92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a94:	68f8      	ldr	r0, [r7, #12]
 8006a96:	f000 f839 	bl	8006b0c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2208      	movs	r2, #8
 8006a9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	e029      	b.n	8006b02 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	69db      	ldr	r3, [r3, #28]
 8006ab4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ab8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006abc:	d111      	bne.n	8006ae2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006ac6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ac8:	68f8      	ldr	r0, [r7, #12]
 8006aca:	f000 f81f 	bl	8006b0c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2220      	movs	r2, #32
 8006ad2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006ade:	2303      	movs	r3, #3
 8006ae0:	e00f      	b.n	8006b02 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	69da      	ldr	r2, [r3, #28]
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	4013      	ands	r3, r2
 8006aec:	68ba      	ldr	r2, [r7, #8]
 8006aee:	429a      	cmp	r2, r3
 8006af0:	bf0c      	ite	eq
 8006af2:	2301      	moveq	r3, #1
 8006af4:	2300      	movne	r3, #0
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	461a      	mov	r2, r3
 8006afa:	79fb      	ldrb	r3, [r7, #7]
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d0a0      	beq.n	8006a42 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b00:	2300      	movs	r3, #0
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3710      	adds	r7, #16
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
	...

08006b0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b095      	sub	sp, #84	@ 0x54
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b1c:	e853 3f00 	ldrex	r3, [r3]
 8006b20:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	461a      	mov	r2, r3
 8006b30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b32:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b34:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b36:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006b38:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006b3a:	e841 2300 	strex	r3, r2, [r1]
 8006b3e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006b40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d1e6      	bne.n	8006b14 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	3308      	adds	r3, #8
 8006b4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b4e:	6a3b      	ldr	r3, [r7, #32]
 8006b50:	e853 3f00 	ldrex	r3, [r3]
 8006b54:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b56:	69fa      	ldr	r2, [r7, #28]
 8006b58:	4b1e      	ldr	r3, [pc, #120]	@ (8006bd4 <UART_EndRxTransfer+0xc8>)
 8006b5a:	4013      	ands	r3, r2
 8006b5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	3308      	adds	r3, #8
 8006b64:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006b68:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b6a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b6e:	e841 2300 	strex	r3, r2, [r1]
 8006b72:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d1e5      	bne.n	8006b46 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d118      	bne.n	8006bb4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	e853 3f00 	ldrex	r3, [r3]
 8006b8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	f023 0310 	bic.w	r3, r3, #16
 8006b96:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	461a      	mov	r2, r3
 8006b9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ba0:	61bb      	str	r3, [r7, #24]
 8006ba2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba4:	6979      	ldr	r1, [r7, #20]
 8006ba6:	69ba      	ldr	r2, [r7, #24]
 8006ba8:	e841 2300 	strex	r3, r2, [r1]
 8006bac:	613b      	str	r3, [r7, #16]
   return(result);
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d1e6      	bne.n	8006b82 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2220      	movs	r2, #32
 8006bb8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006bc8:	bf00      	nop
 8006bca:	3754      	adds	r7, #84	@ 0x54
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr
 8006bd4:	effffffe 	.word	0xeffffffe

08006bd8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b085      	sub	sp, #20
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d101      	bne.n	8006bee <HAL_UARTEx_DisableFifoMode+0x16>
 8006bea:	2302      	movs	r3, #2
 8006bec:	e027      	b.n	8006c3e <HAL_UARTEx_DisableFifoMode+0x66>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2224      	movs	r2, #36	@ 0x24
 8006bfa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f022 0201 	bic.w	r2, r2, #1
 8006c14:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006c1c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2200      	movs	r2, #0
 8006c22:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	68fa      	ldr	r2, [r7, #12]
 8006c2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2220      	movs	r2, #32
 8006c30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2200      	movs	r2, #0
 8006c38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006c3c:	2300      	movs	r3, #0
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3714      	adds	r7, #20
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr

08006c4a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c4a:	b580      	push	{r7, lr}
 8006c4c:	b084      	sub	sp, #16
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	6078      	str	r0, [r7, #4]
 8006c52:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d101      	bne.n	8006c62 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006c5e:	2302      	movs	r3, #2
 8006c60:	e02d      	b.n	8006cbe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2201      	movs	r2, #1
 8006c66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2224      	movs	r2, #36	@ 0x24
 8006c6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	681a      	ldr	r2, [r3, #0]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f022 0201 	bic.w	r2, r2, #1
 8006c88:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	683a      	ldr	r2, [r7, #0]
 8006c9a:	430a      	orrs	r2, r1
 8006c9c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 f850 	bl	8006d44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	68fa      	ldr	r2, [r7, #12]
 8006caa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2220      	movs	r2, #32
 8006cb0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006cbc:	2300      	movs	r3, #0
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3710      	adds	r7, #16
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}

08006cc6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006cc6:	b580      	push	{r7, lr}
 8006cc8:	b084      	sub	sp, #16
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	6078      	str	r0, [r7, #4]
 8006cce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	d101      	bne.n	8006cde <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006cda:	2302      	movs	r3, #2
 8006cdc:	e02d      	b.n	8006d3a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2224      	movs	r2, #36	@ 0x24
 8006cea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f022 0201 	bic.w	r2, r2, #1
 8006d04:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	689b      	ldr	r3, [r3, #8]
 8006d0c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	683a      	ldr	r2, [r7, #0]
 8006d16:	430a      	orrs	r2, r1
 8006d18:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 f812 	bl	8006d44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	68fa      	ldr	r2, [r7, #12]
 8006d26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2220      	movs	r2, #32
 8006d2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006d38:	2300      	movs	r3, #0
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3710      	adds	r7, #16
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}
	...

08006d44 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b085      	sub	sp, #20
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d108      	bne.n	8006d66 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2201      	movs	r2, #1
 8006d58:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006d64:	e031      	b.n	8006dca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006d66:	2310      	movs	r3, #16
 8006d68:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006d6a:	2310      	movs	r3, #16
 8006d6c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	0e5b      	lsrs	r3, r3, #25
 8006d76:	b2db      	uxtb	r3, r3
 8006d78:	f003 0307 	and.w	r3, r3, #7
 8006d7c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	0f5b      	lsrs	r3, r3, #29
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	f003 0307 	and.w	r3, r3, #7
 8006d8c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d8e:	7bbb      	ldrb	r3, [r7, #14]
 8006d90:	7b3a      	ldrb	r2, [r7, #12]
 8006d92:	4911      	ldr	r1, [pc, #68]	@ (8006dd8 <UARTEx_SetNbDataToProcess+0x94>)
 8006d94:	5c8a      	ldrb	r2, [r1, r2]
 8006d96:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006d9a:	7b3a      	ldrb	r2, [r7, #12]
 8006d9c:	490f      	ldr	r1, [pc, #60]	@ (8006ddc <UARTEx_SetNbDataToProcess+0x98>)
 8006d9e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006da0:	fb93 f3f2 	sdiv	r3, r3, r2
 8006da4:	b29a      	uxth	r2, r3
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006dac:	7bfb      	ldrb	r3, [r7, #15]
 8006dae:	7b7a      	ldrb	r2, [r7, #13]
 8006db0:	4909      	ldr	r1, [pc, #36]	@ (8006dd8 <UARTEx_SetNbDataToProcess+0x94>)
 8006db2:	5c8a      	ldrb	r2, [r1, r2]
 8006db4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006db8:	7b7a      	ldrb	r2, [r7, #13]
 8006dba:	4908      	ldr	r1, [pc, #32]	@ (8006ddc <UARTEx_SetNbDataToProcess+0x98>)
 8006dbc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006dbe:	fb93 f3f2 	sdiv	r3, r3, r2
 8006dc2:	b29a      	uxth	r2, r3
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006dca:	bf00      	nop
 8006dcc:	3714      	adds	r7, #20
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr
 8006dd6:	bf00      	nop
 8006dd8:	08007788 	.word	0x08007788
 8006ddc:	08007790 	.word	0x08007790

08006de0 <std>:
 8006de0:	2300      	movs	r3, #0
 8006de2:	b510      	push	{r4, lr}
 8006de4:	4604      	mov	r4, r0
 8006de6:	e9c0 3300 	strd	r3, r3, [r0]
 8006dea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006dee:	6083      	str	r3, [r0, #8]
 8006df0:	8181      	strh	r1, [r0, #12]
 8006df2:	6643      	str	r3, [r0, #100]	@ 0x64
 8006df4:	81c2      	strh	r2, [r0, #14]
 8006df6:	6183      	str	r3, [r0, #24]
 8006df8:	4619      	mov	r1, r3
 8006dfa:	2208      	movs	r2, #8
 8006dfc:	305c      	adds	r0, #92	@ 0x5c
 8006dfe:	f000 f9e7 	bl	80071d0 <memset>
 8006e02:	4b0d      	ldr	r3, [pc, #52]	@ (8006e38 <std+0x58>)
 8006e04:	6263      	str	r3, [r4, #36]	@ 0x24
 8006e06:	4b0d      	ldr	r3, [pc, #52]	@ (8006e3c <std+0x5c>)
 8006e08:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006e0a:	4b0d      	ldr	r3, [pc, #52]	@ (8006e40 <std+0x60>)
 8006e0c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8006e44 <std+0x64>)
 8006e10:	6323      	str	r3, [r4, #48]	@ 0x30
 8006e12:	4b0d      	ldr	r3, [pc, #52]	@ (8006e48 <std+0x68>)
 8006e14:	6224      	str	r4, [r4, #32]
 8006e16:	429c      	cmp	r4, r3
 8006e18:	d006      	beq.n	8006e28 <std+0x48>
 8006e1a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006e1e:	4294      	cmp	r4, r2
 8006e20:	d002      	beq.n	8006e28 <std+0x48>
 8006e22:	33d0      	adds	r3, #208	@ 0xd0
 8006e24:	429c      	cmp	r4, r3
 8006e26:	d105      	bne.n	8006e34 <std+0x54>
 8006e28:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006e2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e30:	f000 ba46 	b.w	80072c0 <__retarget_lock_init_recursive>
 8006e34:	bd10      	pop	{r4, pc}
 8006e36:	bf00      	nop
 8006e38:	08007021 	.word	0x08007021
 8006e3c:	08007043 	.word	0x08007043
 8006e40:	0800707b 	.word	0x0800707b
 8006e44:	0800709f 	.word	0x0800709f
 8006e48:	240001e0 	.word	0x240001e0

08006e4c <stdio_exit_handler>:
 8006e4c:	4a02      	ldr	r2, [pc, #8]	@ (8006e58 <stdio_exit_handler+0xc>)
 8006e4e:	4903      	ldr	r1, [pc, #12]	@ (8006e5c <stdio_exit_handler+0x10>)
 8006e50:	4803      	ldr	r0, [pc, #12]	@ (8006e60 <stdio_exit_handler+0x14>)
 8006e52:	f000 b869 	b.w	8006f28 <_fwalk_sglue>
 8006e56:	bf00      	nop
 8006e58:	24000010 	.word	0x24000010
 8006e5c:	080075c1 	.word	0x080075c1
 8006e60:	24000020 	.word	0x24000020

08006e64 <cleanup_stdio>:
 8006e64:	6841      	ldr	r1, [r0, #4]
 8006e66:	4b0c      	ldr	r3, [pc, #48]	@ (8006e98 <cleanup_stdio+0x34>)
 8006e68:	4299      	cmp	r1, r3
 8006e6a:	b510      	push	{r4, lr}
 8006e6c:	4604      	mov	r4, r0
 8006e6e:	d001      	beq.n	8006e74 <cleanup_stdio+0x10>
 8006e70:	f000 fba6 	bl	80075c0 <_fflush_r>
 8006e74:	68a1      	ldr	r1, [r4, #8]
 8006e76:	4b09      	ldr	r3, [pc, #36]	@ (8006e9c <cleanup_stdio+0x38>)
 8006e78:	4299      	cmp	r1, r3
 8006e7a:	d002      	beq.n	8006e82 <cleanup_stdio+0x1e>
 8006e7c:	4620      	mov	r0, r4
 8006e7e:	f000 fb9f 	bl	80075c0 <_fflush_r>
 8006e82:	68e1      	ldr	r1, [r4, #12]
 8006e84:	4b06      	ldr	r3, [pc, #24]	@ (8006ea0 <cleanup_stdio+0x3c>)
 8006e86:	4299      	cmp	r1, r3
 8006e88:	d004      	beq.n	8006e94 <cleanup_stdio+0x30>
 8006e8a:	4620      	mov	r0, r4
 8006e8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e90:	f000 bb96 	b.w	80075c0 <_fflush_r>
 8006e94:	bd10      	pop	{r4, pc}
 8006e96:	bf00      	nop
 8006e98:	240001e0 	.word	0x240001e0
 8006e9c:	24000248 	.word	0x24000248
 8006ea0:	240002b0 	.word	0x240002b0

08006ea4 <global_stdio_init.part.0>:
 8006ea4:	b510      	push	{r4, lr}
 8006ea6:	4b0b      	ldr	r3, [pc, #44]	@ (8006ed4 <global_stdio_init.part.0+0x30>)
 8006ea8:	4c0b      	ldr	r4, [pc, #44]	@ (8006ed8 <global_stdio_init.part.0+0x34>)
 8006eaa:	4a0c      	ldr	r2, [pc, #48]	@ (8006edc <global_stdio_init.part.0+0x38>)
 8006eac:	601a      	str	r2, [r3, #0]
 8006eae:	4620      	mov	r0, r4
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	2104      	movs	r1, #4
 8006eb4:	f7ff ff94 	bl	8006de0 <std>
 8006eb8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006ebc:	2201      	movs	r2, #1
 8006ebe:	2109      	movs	r1, #9
 8006ec0:	f7ff ff8e 	bl	8006de0 <std>
 8006ec4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006ec8:	2202      	movs	r2, #2
 8006eca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ece:	2112      	movs	r1, #18
 8006ed0:	f7ff bf86 	b.w	8006de0 <std>
 8006ed4:	24000318 	.word	0x24000318
 8006ed8:	240001e0 	.word	0x240001e0
 8006edc:	08006e4d 	.word	0x08006e4d

08006ee0 <__sfp_lock_acquire>:
 8006ee0:	4801      	ldr	r0, [pc, #4]	@ (8006ee8 <__sfp_lock_acquire+0x8>)
 8006ee2:	f000 b9ee 	b.w	80072c2 <__retarget_lock_acquire_recursive>
 8006ee6:	bf00      	nop
 8006ee8:	24000321 	.word	0x24000321

08006eec <__sfp_lock_release>:
 8006eec:	4801      	ldr	r0, [pc, #4]	@ (8006ef4 <__sfp_lock_release+0x8>)
 8006eee:	f000 b9e9 	b.w	80072c4 <__retarget_lock_release_recursive>
 8006ef2:	bf00      	nop
 8006ef4:	24000321 	.word	0x24000321

08006ef8 <__sinit>:
 8006ef8:	b510      	push	{r4, lr}
 8006efa:	4604      	mov	r4, r0
 8006efc:	f7ff fff0 	bl	8006ee0 <__sfp_lock_acquire>
 8006f00:	6a23      	ldr	r3, [r4, #32]
 8006f02:	b11b      	cbz	r3, 8006f0c <__sinit+0x14>
 8006f04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f08:	f7ff bff0 	b.w	8006eec <__sfp_lock_release>
 8006f0c:	4b04      	ldr	r3, [pc, #16]	@ (8006f20 <__sinit+0x28>)
 8006f0e:	6223      	str	r3, [r4, #32]
 8006f10:	4b04      	ldr	r3, [pc, #16]	@ (8006f24 <__sinit+0x2c>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d1f5      	bne.n	8006f04 <__sinit+0xc>
 8006f18:	f7ff ffc4 	bl	8006ea4 <global_stdio_init.part.0>
 8006f1c:	e7f2      	b.n	8006f04 <__sinit+0xc>
 8006f1e:	bf00      	nop
 8006f20:	08006e65 	.word	0x08006e65
 8006f24:	24000318 	.word	0x24000318

08006f28 <_fwalk_sglue>:
 8006f28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f2c:	4607      	mov	r7, r0
 8006f2e:	4688      	mov	r8, r1
 8006f30:	4614      	mov	r4, r2
 8006f32:	2600      	movs	r6, #0
 8006f34:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006f38:	f1b9 0901 	subs.w	r9, r9, #1
 8006f3c:	d505      	bpl.n	8006f4a <_fwalk_sglue+0x22>
 8006f3e:	6824      	ldr	r4, [r4, #0]
 8006f40:	2c00      	cmp	r4, #0
 8006f42:	d1f7      	bne.n	8006f34 <_fwalk_sglue+0xc>
 8006f44:	4630      	mov	r0, r6
 8006f46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f4a:	89ab      	ldrh	r3, [r5, #12]
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d907      	bls.n	8006f60 <_fwalk_sglue+0x38>
 8006f50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f54:	3301      	adds	r3, #1
 8006f56:	d003      	beq.n	8006f60 <_fwalk_sglue+0x38>
 8006f58:	4629      	mov	r1, r5
 8006f5a:	4638      	mov	r0, r7
 8006f5c:	47c0      	blx	r8
 8006f5e:	4306      	orrs	r6, r0
 8006f60:	3568      	adds	r5, #104	@ 0x68
 8006f62:	e7e9      	b.n	8006f38 <_fwalk_sglue+0x10>

08006f64 <_puts_r>:
 8006f64:	6a03      	ldr	r3, [r0, #32]
 8006f66:	b570      	push	{r4, r5, r6, lr}
 8006f68:	6884      	ldr	r4, [r0, #8]
 8006f6a:	4605      	mov	r5, r0
 8006f6c:	460e      	mov	r6, r1
 8006f6e:	b90b      	cbnz	r3, 8006f74 <_puts_r+0x10>
 8006f70:	f7ff ffc2 	bl	8006ef8 <__sinit>
 8006f74:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006f76:	07db      	lsls	r3, r3, #31
 8006f78:	d405      	bmi.n	8006f86 <_puts_r+0x22>
 8006f7a:	89a3      	ldrh	r3, [r4, #12]
 8006f7c:	0598      	lsls	r0, r3, #22
 8006f7e:	d402      	bmi.n	8006f86 <_puts_r+0x22>
 8006f80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f82:	f000 f99e 	bl	80072c2 <__retarget_lock_acquire_recursive>
 8006f86:	89a3      	ldrh	r3, [r4, #12]
 8006f88:	0719      	lsls	r1, r3, #28
 8006f8a:	d502      	bpl.n	8006f92 <_puts_r+0x2e>
 8006f8c:	6923      	ldr	r3, [r4, #16]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d135      	bne.n	8006ffe <_puts_r+0x9a>
 8006f92:	4621      	mov	r1, r4
 8006f94:	4628      	mov	r0, r5
 8006f96:	f000 f8c5 	bl	8007124 <__swsetup_r>
 8006f9a:	b380      	cbz	r0, 8006ffe <_puts_r+0x9a>
 8006f9c:	f04f 35ff 	mov.w	r5, #4294967295
 8006fa0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006fa2:	07da      	lsls	r2, r3, #31
 8006fa4:	d405      	bmi.n	8006fb2 <_puts_r+0x4e>
 8006fa6:	89a3      	ldrh	r3, [r4, #12]
 8006fa8:	059b      	lsls	r3, r3, #22
 8006faa:	d402      	bmi.n	8006fb2 <_puts_r+0x4e>
 8006fac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006fae:	f000 f989 	bl	80072c4 <__retarget_lock_release_recursive>
 8006fb2:	4628      	mov	r0, r5
 8006fb4:	bd70      	pop	{r4, r5, r6, pc}
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	da04      	bge.n	8006fc4 <_puts_r+0x60>
 8006fba:	69a2      	ldr	r2, [r4, #24]
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	dc17      	bgt.n	8006ff0 <_puts_r+0x8c>
 8006fc0:	290a      	cmp	r1, #10
 8006fc2:	d015      	beq.n	8006ff0 <_puts_r+0x8c>
 8006fc4:	6823      	ldr	r3, [r4, #0]
 8006fc6:	1c5a      	adds	r2, r3, #1
 8006fc8:	6022      	str	r2, [r4, #0]
 8006fca:	7019      	strb	r1, [r3, #0]
 8006fcc:	68a3      	ldr	r3, [r4, #8]
 8006fce:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006fd2:	3b01      	subs	r3, #1
 8006fd4:	60a3      	str	r3, [r4, #8]
 8006fd6:	2900      	cmp	r1, #0
 8006fd8:	d1ed      	bne.n	8006fb6 <_puts_r+0x52>
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	da11      	bge.n	8007002 <_puts_r+0x9e>
 8006fde:	4622      	mov	r2, r4
 8006fe0:	210a      	movs	r1, #10
 8006fe2:	4628      	mov	r0, r5
 8006fe4:	f000 f85f 	bl	80070a6 <__swbuf_r>
 8006fe8:	3001      	adds	r0, #1
 8006fea:	d0d7      	beq.n	8006f9c <_puts_r+0x38>
 8006fec:	250a      	movs	r5, #10
 8006fee:	e7d7      	b.n	8006fa0 <_puts_r+0x3c>
 8006ff0:	4622      	mov	r2, r4
 8006ff2:	4628      	mov	r0, r5
 8006ff4:	f000 f857 	bl	80070a6 <__swbuf_r>
 8006ff8:	3001      	adds	r0, #1
 8006ffa:	d1e7      	bne.n	8006fcc <_puts_r+0x68>
 8006ffc:	e7ce      	b.n	8006f9c <_puts_r+0x38>
 8006ffe:	3e01      	subs	r6, #1
 8007000:	e7e4      	b.n	8006fcc <_puts_r+0x68>
 8007002:	6823      	ldr	r3, [r4, #0]
 8007004:	1c5a      	adds	r2, r3, #1
 8007006:	6022      	str	r2, [r4, #0]
 8007008:	220a      	movs	r2, #10
 800700a:	701a      	strb	r2, [r3, #0]
 800700c:	e7ee      	b.n	8006fec <_puts_r+0x88>
	...

08007010 <puts>:
 8007010:	4b02      	ldr	r3, [pc, #8]	@ (800701c <puts+0xc>)
 8007012:	4601      	mov	r1, r0
 8007014:	6818      	ldr	r0, [r3, #0]
 8007016:	f7ff bfa5 	b.w	8006f64 <_puts_r>
 800701a:	bf00      	nop
 800701c:	2400001c 	.word	0x2400001c

08007020 <__sread>:
 8007020:	b510      	push	{r4, lr}
 8007022:	460c      	mov	r4, r1
 8007024:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007028:	f000 f8fc 	bl	8007224 <_read_r>
 800702c:	2800      	cmp	r0, #0
 800702e:	bfab      	itete	ge
 8007030:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007032:	89a3      	ldrhlt	r3, [r4, #12]
 8007034:	181b      	addge	r3, r3, r0
 8007036:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800703a:	bfac      	ite	ge
 800703c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800703e:	81a3      	strhlt	r3, [r4, #12]
 8007040:	bd10      	pop	{r4, pc}

08007042 <__swrite>:
 8007042:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007046:	461f      	mov	r7, r3
 8007048:	898b      	ldrh	r3, [r1, #12]
 800704a:	05db      	lsls	r3, r3, #23
 800704c:	4605      	mov	r5, r0
 800704e:	460c      	mov	r4, r1
 8007050:	4616      	mov	r6, r2
 8007052:	d505      	bpl.n	8007060 <__swrite+0x1e>
 8007054:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007058:	2302      	movs	r3, #2
 800705a:	2200      	movs	r2, #0
 800705c:	f000 f8d0 	bl	8007200 <_lseek_r>
 8007060:	89a3      	ldrh	r3, [r4, #12]
 8007062:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007066:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800706a:	81a3      	strh	r3, [r4, #12]
 800706c:	4632      	mov	r2, r6
 800706e:	463b      	mov	r3, r7
 8007070:	4628      	mov	r0, r5
 8007072:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007076:	f000 b8e7 	b.w	8007248 <_write_r>

0800707a <__sseek>:
 800707a:	b510      	push	{r4, lr}
 800707c:	460c      	mov	r4, r1
 800707e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007082:	f000 f8bd 	bl	8007200 <_lseek_r>
 8007086:	1c43      	adds	r3, r0, #1
 8007088:	89a3      	ldrh	r3, [r4, #12]
 800708a:	bf15      	itete	ne
 800708c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800708e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007092:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007096:	81a3      	strheq	r3, [r4, #12]
 8007098:	bf18      	it	ne
 800709a:	81a3      	strhne	r3, [r4, #12]
 800709c:	bd10      	pop	{r4, pc}

0800709e <__sclose>:
 800709e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070a2:	f000 b89d 	b.w	80071e0 <_close_r>

080070a6 <__swbuf_r>:
 80070a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070a8:	460e      	mov	r6, r1
 80070aa:	4614      	mov	r4, r2
 80070ac:	4605      	mov	r5, r0
 80070ae:	b118      	cbz	r0, 80070b8 <__swbuf_r+0x12>
 80070b0:	6a03      	ldr	r3, [r0, #32]
 80070b2:	b90b      	cbnz	r3, 80070b8 <__swbuf_r+0x12>
 80070b4:	f7ff ff20 	bl	8006ef8 <__sinit>
 80070b8:	69a3      	ldr	r3, [r4, #24]
 80070ba:	60a3      	str	r3, [r4, #8]
 80070bc:	89a3      	ldrh	r3, [r4, #12]
 80070be:	071a      	lsls	r2, r3, #28
 80070c0:	d501      	bpl.n	80070c6 <__swbuf_r+0x20>
 80070c2:	6923      	ldr	r3, [r4, #16]
 80070c4:	b943      	cbnz	r3, 80070d8 <__swbuf_r+0x32>
 80070c6:	4621      	mov	r1, r4
 80070c8:	4628      	mov	r0, r5
 80070ca:	f000 f82b 	bl	8007124 <__swsetup_r>
 80070ce:	b118      	cbz	r0, 80070d8 <__swbuf_r+0x32>
 80070d0:	f04f 37ff 	mov.w	r7, #4294967295
 80070d4:	4638      	mov	r0, r7
 80070d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070d8:	6823      	ldr	r3, [r4, #0]
 80070da:	6922      	ldr	r2, [r4, #16]
 80070dc:	1a98      	subs	r0, r3, r2
 80070de:	6963      	ldr	r3, [r4, #20]
 80070e0:	b2f6      	uxtb	r6, r6
 80070e2:	4283      	cmp	r3, r0
 80070e4:	4637      	mov	r7, r6
 80070e6:	dc05      	bgt.n	80070f4 <__swbuf_r+0x4e>
 80070e8:	4621      	mov	r1, r4
 80070ea:	4628      	mov	r0, r5
 80070ec:	f000 fa68 	bl	80075c0 <_fflush_r>
 80070f0:	2800      	cmp	r0, #0
 80070f2:	d1ed      	bne.n	80070d0 <__swbuf_r+0x2a>
 80070f4:	68a3      	ldr	r3, [r4, #8]
 80070f6:	3b01      	subs	r3, #1
 80070f8:	60a3      	str	r3, [r4, #8]
 80070fa:	6823      	ldr	r3, [r4, #0]
 80070fc:	1c5a      	adds	r2, r3, #1
 80070fe:	6022      	str	r2, [r4, #0]
 8007100:	701e      	strb	r6, [r3, #0]
 8007102:	6962      	ldr	r2, [r4, #20]
 8007104:	1c43      	adds	r3, r0, #1
 8007106:	429a      	cmp	r2, r3
 8007108:	d004      	beq.n	8007114 <__swbuf_r+0x6e>
 800710a:	89a3      	ldrh	r3, [r4, #12]
 800710c:	07db      	lsls	r3, r3, #31
 800710e:	d5e1      	bpl.n	80070d4 <__swbuf_r+0x2e>
 8007110:	2e0a      	cmp	r6, #10
 8007112:	d1df      	bne.n	80070d4 <__swbuf_r+0x2e>
 8007114:	4621      	mov	r1, r4
 8007116:	4628      	mov	r0, r5
 8007118:	f000 fa52 	bl	80075c0 <_fflush_r>
 800711c:	2800      	cmp	r0, #0
 800711e:	d0d9      	beq.n	80070d4 <__swbuf_r+0x2e>
 8007120:	e7d6      	b.n	80070d0 <__swbuf_r+0x2a>
	...

08007124 <__swsetup_r>:
 8007124:	b538      	push	{r3, r4, r5, lr}
 8007126:	4b29      	ldr	r3, [pc, #164]	@ (80071cc <__swsetup_r+0xa8>)
 8007128:	4605      	mov	r5, r0
 800712a:	6818      	ldr	r0, [r3, #0]
 800712c:	460c      	mov	r4, r1
 800712e:	b118      	cbz	r0, 8007138 <__swsetup_r+0x14>
 8007130:	6a03      	ldr	r3, [r0, #32]
 8007132:	b90b      	cbnz	r3, 8007138 <__swsetup_r+0x14>
 8007134:	f7ff fee0 	bl	8006ef8 <__sinit>
 8007138:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800713c:	0719      	lsls	r1, r3, #28
 800713e:	d422      	bmi.n	8007186 <__swsetup_r+0x62>
 8007140:	06da      	lsls	r2, r3, #27
 8007142:	d407      	bmi.n	8007154 <__swsetup_r+0x30>
 8007144:	2209      	movs	r2, #9
 8007146:	602a      	str	r2, [r5, #0]
 8007148:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800714c:	81a3      	strh	r3, [r4, #12]
 800714e:	f04f 30ff 	mov.w	r0, #4294967295
 8007152:	e033      	b.n	80071bc <__swsetup_r+0x98>
 8007154:	0758      	lsls	r0, r3, #29
 8007156:	d512      	bpl.n	800717e <__swsetup_r+0x5a>
 8007158:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800715a:	b141      	cbz	r1, 800716e <__swsetup_r+0x4a>
 800715c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007160:	4299      	cmp	r1, r3
 8007162:	d002      	beq.n	800716a <__swsetup_r+0x46>
 8007164:	4628      	mov	r0, r5
 8007166:	f000 f8af 	bl	80072c8 <_free_r>
 800716a:	2300      	movs	r3, #0
 800716c:	6363      	str	r3, [r4, #52]	@ 0x34
 800716e:	89a3      	ldrh	r3, [r4, #12]
 8007170:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007174:	81a3      	strh	r3, [r4, #12]
 8007176:	2300      	movs	r3, #0
 8007178:	6063      	str	r3, [r4, #4]
 800717a:	6923      	ldr	r3, [r4, #16]
 800717c:	6023      	str	r3, [r4, #0]
 800717e:	89a3      	ldrh	r3, [r4, #12]
 8007180:	f043 0308 	orr.w	r3, r3, #8
 8007184:	81a3      	strh	r3, [r4, #12]
 8007186:	6923      	ldr	r3, [r4, #16]
 8007188:	b94b      	cbnz	r3, 800719e <__swsetup_r+0x7a>
 800718a:	89a3      	ldrh	r3, [r4, #12]
 800718c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007190:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007194:	d003      	beq.n	800719e <__swsetup_r+0x7a>
 8007196:	4621      	mov	r1, r4
 8007198:	4628      	mov	r0, r5
 800719a:	f000 fa5f 	bl	800765c <__smakebuf_r>
 800719e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071a2:	f013 0201 	ands.w	r2, r3, #1
 80071a6:	d00a      	beq.n	80071be <__swsetup_r+0x9a>
 80071a8:	2200      	movs	r2, #0
 80071aa:	60a2      	str	r2, [r4, #8]
 80071ac:	6962      	ldr	r2, [r4, #20]
 80071ae:	4252      	negs	r2, r2
 80071b0:	61a2      	str	r2, [r4, #24]
 80071b2:	6922      	ldr	r2, [r4, #16]
 80071b4:	b942      	cbnz	r2, 80071c8 <__swsetup_r+0xa4>
 80071b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80071ba:	d1c5      	bne.n	8007148 <__swsetup_r+0x24>
 80071bc:	bd38      	pop	{r3, r4, r5, pc}
 80071be:	0799      	lsls	r1, r3, #30
 80071c0:	bf58      	it	pl
 80071c2:	6962      	ldrpl	r2, [r4, #20]
 80071c4:	60a2      	str	r2, [r4, #8]
 80071c6:	e7f4      	b.n	80071b2 <__swsetup_r+0x8e>
 80071c8:	2000      	movs	r0, #0
 80071ca:	e7f7      	b.n	80071bc <__swsetup_r+0x98>
 80071cc:	2400001c 	.word	0x2400001c

080071d0 <memset>:
 80071d0:	4402      	add	r2, r0
 80071d2:	4603      	mov	r3, r0
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d100      	bne.n	80071da <memset+0xa>
 80071d8:	4770      	bx	lr
 80071da:	f803 1b01 	strb.w	r1, [r3], #1
 80071de:	e7f9      	b.n	80071d4 <memset+0x4>

080071e0 <_close_r>:
 80071e0:	b538      	push	{r3, r4, r5, lr}
 80071e2:	4d06      	ldr	r5, [pc, #24]	@ (80071fc <_close_r+0x1c>)
 80071e4:	2300      	movs	r3, #0
 80071e6:	4604      	mov	r4, r0
 80071e8:	4608      	mov	r0, r1
 80071ea:	602b      	str	r3, [r5, #0]
 80071ec:	f7f9 fbfb 	bl	80009e6 <_close>
 80071f0:	1c43      	adds	r3, r0, #1
 80071f2:	d102      	bne.n	80071fa <_close_r+0x1a>
 80071f4:	682b      	ldr	r3, [r5, #0]
 80071f6:	b103      	cbz	r3, 80071fa <_close_r+0x1a>
 80071f8:	6023      	str	r3, [r4, #0]
 80071fa:	bd38      	pop	{r3, r4, r5, pc}
 80071fc:	2400031c 	.word	0x2400031c

08007200 <_lseek_r>:
 8007200:	b538      	push	{r3, r4, r5, lr}
 8007202:	4d07      	ldr	r5, [pc, #28]	@ (8007220 <_lseek_r+0x20>)
 8007204:	4604      	mov	r4, r0
 8007206:	4608      	mov	r0, r1
 8007208:	4611      	mov	r1, r2
 800720a:	2200      	movs	r2, #0
 800720c:	602a      	str	r2, [r5, #0]
 800720e:	461a      	mov	r2, r3
 8007210:	f7f9 fc10 	bl	8000a34 <_lseek>
 8007214:	1c43      	adds	r3, r0, #1
 8007216:	d102      	bne.n	800721e <_lseek_r+0x1e>
 8007218:	682b      	ldr	r3, [r5, #0]
 800721a:	b103      	cbz	r3, 800721e <_lseek_r+0x1e>
 800721c:	6023      	str	r3, [r4, #0]
 800721e:	bd38      	pop	{r3, r4, r5, pc}
 8007220:	2400031c 	.word	0x2400031c

08007224 <_read_r>:
 8007224:	b538      	push	{r3, r4, r5, lr}
 8007226:	4d07      	ldr	r5, [pc, #28]	@ (8007244 <_read_r+0x20>)
 8007228:	4604      	mov	r4, r0
 800722a:	4608      	mov	r0, r1
 800722c:	4611      	mov	r1, r2
 800722e:	2200      	movs	r2, #0
 8007230:	602a      	str	r2, [r5, #0]
 8007232:	461a      	mov	r2, r3
 8007234:	f7f9 fb9e 	bl	8000974 <_read>
 8007238:	1c43      	adds	r3, r0, #1
 800723a:	d102      	bne.n	8007242 <_read_r+0x1e>
 800723c:	682b      	ldr	r3, [r5, #0]
 800723e:	b103      	cbz	r3, 8007242 <_read_r+0x1e>
 8007240:	6023      	str	r3, [r4, #0]
 8007242:	bd38      	pop	{r3, r4, r5, pc}
 8007244:	2400031c 	.word	0x2400031c

08007248 <_write_r>:
 8007248:	b538      	push	{r3, r4, r5, lr}
 800724a:	4d07      	ldr	r5, [pc, #28]	@ (8007268 <_write_r+0x20>)
 800724c:	4604      	mov	r4, r0
 800724e:	4608      	mov	r0, r1
 8007250:	4611      	mov	r1, r2
 8007252:	2200      	movs	r2, #0
 8007254:	602a      	str	r2, [r5, #0]
 8007256:	461a      	mov	r2, r3
 8007258:	f7f9 fba9 	bl	80009ae <_write>
 800725c:	1c43      	adds	r3, r0, #1
 800725e:	d102      	bne.n	8007266 <_write_r+0x1e>
 8007260:	682b      	ldr	r3, [r5, #0]
 8007262:	b103      	cbz	r3, 8007266 <_write_r+0x1e>
 8007264:	6023      	str	r3, [r4, #0]
 8007266:	bd38      	pop	{r3, r4, r5, pc}
 8007268:	2400031c 	.word	0x2400031c

0800726c <__errno>:
 800726c:	4b01      	ldr	r3, [pc, #4]	@ (8007274 <__errno+0x8>)
 800726e:	6818      	ldr	r0, [r3, #0]
 8007270:	4770      	bx	lr
 8007272:	bf00      	nop
 8007274:	2400001c 	.word	0x2400001c

08007278 <__libc_init_array>:
 8007278:	b570      	push	{r4, r5, r6, lr}
 800727a:	4d0d      	ldr	r5, [pc, #52]	@ (80072b0 <__libc_init_array+0x38>)
 800727c:	4c0d      	ldr	r4, [pc, #52]	@ (80072b4 <__libc_init_array+0x3c>)
 800727e:	1b64      	subs	r4, r4, r5
 8007280:	10a4      	asrs	r4, r4, #2
 8007282:	2600      	movs	r6, #0
 8007284:	42a6      	cmp	r6, r4
 8007286:	d109      	bne.n	800729c <__libc_init_array+0x24>
 8007288:	4d0b      	ldr	r5, [pc, #44]	@ (80072b8 <__libc_init_array+0x40>)
 800728a:	4c0c      	ldr	r4, [pc, #48]	@ (80072bc <__libc_init_array+0x44>)
 800728c:	f000 fa54 	bl	8007738 <_init>
 8007290:	1b64      	subs	r4, r4, r5
 8007292:	10a4      	asrs	r4, r4, #2
 8007294:	2600      	movs	r6, #0
 8007296:	42a6      	cmp	r6, r4
 8007298:	d105      	bne.n	80072a6 <__libc_init_array+0x2e>
 800729a:	bd70      	pop	{r4, r5, r6, pc}
 800729c:	f855 3b04 	ldr.w	r3, [r5], #4
 80072a0:	4798      	blx	r3
 80072a2:	3601      	adds	r6, #1
 80072a4:	e7ee      	b.n	8007284 <__libc_init_array+0xc>
 80072a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80072aa:	4798      	blx	r3
 80072ac:	3601      	adds	r6, #1
 80072ae:	e7f2      	b.n	8007296 <__libc_init_array+0x1e>
 80072b0:	080077a0 	.word	0x080077a0
 80072b4:	080077a0 	.word	0x080077a0
 80072b8:	080077a0 	.word	0x080077a0
 80072bc:	080077a4 	.word	0x080077a4

080072c0 <__retarget_lock_init_recursive>:
 80072c0:	4770      	bx	lr

080072c2 <__retarget_lock_acquire_recursive>:
 80072c2:	4770      	bx	lr

080072c4 <__retarget_lock_release_recursive>:
 80072c4:	4770      	bx	lr
	...

080072c8 <_free_r>:
 80072c8:	b538      	push	{r3, r4, r5, lr}
 80072ca:	4605      	mov	r5, r0
 80072cc:	2900      	cmp	r1, #0
 80072ce:	d041      	beq.n	8007354 <_free_r+0x8c>
 80072d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072d4:	1f0c      	subs	r4, r1, #4
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	bfb8      	it	lt
 80072da:	18e4      	addlt	r4, r4, r3
 80072dc:	f000 f8e0 	bl	80074a0 <__malloc_lock>
 80072e0:	4a1d      	ldr	r2, [pc, #116]	@ (8007358 <_free_r+0x90>)
 80072e2:	6813      	ldr	r3, [r2, #0]
 80072e4:	b933      	cbnz	r3, 80072f4 <_free_r+0x2c>
 80072e6:	6063      	str	r3, [r4, #4]
 80072e8:	6014      	str	r4, [r2, #0]
 80072ea:	4628      	mov	r0, r5
 80072ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072f0:	f000 b8dc 	b.w	80074ac <__malloc_unlock>
 80072f4:	42a3      	cmp	r3, r4
 80072f6:	d908      	bls.n	800730a <_free_r+0x42>
 80072f8:	6820      	ldr	r0, [r4, #0]
 80072fa:	1821      	adds	r1, r4, r0
 80072fc:	428b      	cmp	r3, r1
 80072fe:	bf01      	itttt	eq
 8007300:	6819      	ldreq	r1, [r3, #0]
 8007302:	685b      	ldreq	r3, [r3, #4]
 8007304:	1809      	addeq	r1, r1, r0
 8007306:	6021      	streq	r1, [r4, #0]
 8007308:	e7ed      	b.n	80072e6 <_free_r+0x1e>
 800730a:	461a      	mov	r2, r3
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	b10b      	cbz	r3, 8007314 <_free_r+0x4c>
 8007310:	42a3      	cmp	r3, r4
 8007312:	d9fa      	bls.n	800730a <_free_r+0x42>
 8007314:	6811      	ldr	r1, [r2, #0]
 8007316:	1850      	adds	r0, r2, r1
 8007318:	42a0      	cmp	r0, r4
 800731a:	d10b      	bne.n	8007334 <_free_r+0x6c>
 800731c:	6820      	ldr	r0, [r4, #0]
 800731e:	4401      	add	r1, r0
 8007320:	1850      	adds	r0, r2, r1
 8007322:	4283      	cmp	r3, r0
 8007324:	6011      	str	r1, [r2, #0]
 8007326:	d1e0      	bne.n	80072ea <_free_r+0x22>
 8007328:	6818      	ldr	r0, [r3, #0]
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	6053      	str	r3, [r2, #4]
 800732e:	4408      	add	r0, r1
 8007330:	6010      	str	r0, [r2, #0]
 8007332:	e7da      	b.n	80072ea <_free_r+0x22>
 8007334:	d902      	bls.n	800733c <_free_r+0x74>
 8007336:	230c      	movs	r3, #12
 8007338:	602b      	str	r3, [r5, #0]
 800733a:	e7d6      	b.n	80072ea <_free_r+0x22>
 800733c:	6820      	ldr	r0, [r4, #0]
 800733e:	1821      	adds	r1, r4, r0
 8007340:	428b      	cmp	r3, r1
 8007342:	bf04      	itt	eq
 8007344:	6819      	ldreq	r1, [r3, #0]
 8007346:	685b      	ldreq	r3, [r3, #4]
 8007348:	6063      	str	r3, [r4, #4]
 800734a:	bf04      	itt	eq
 800734c:	1809      	addeq	r1, r1, r0
 800734e:	6021      	streq	r1, [r4, #0]
 8007350:	6054      	str	r4, [r2, #4]
 8007352:	e7ca      	b.n	80072ea <_free_r+0x22>
 8007354:	bd38      	pop	{r3, r4, r5, pc}
 8007356:	bf00      	nop
 8007358:	24000328 	.word	0x24000328

0800735c <sbrk_aligned>:
 800735c:	b570      	push	{r4, r5, r6, lr}
 800735e:	4e0f      	ldr	r6, [pc, #60]	@ (800739c <sbrk_aligned+0x40>)
 8007360:	460c      	mov	r4, r1
 8007362:	6831      	ldr	r1, [r6, #0]
 8007364:	4605      	mov	r5, r0
 8007366:	b911      	cbnz	r1, 800736e <sbrk_aligned+0x12>
 8007368:	f000 f9d6 	bl	8007718 <_sbrk_r>
 800736c:	6030      	str	r0, [r6, #0]
 800736e:	4621      	mov	r1, r4
 8007370:	4628      	mov	r0, r5
 8007372:	f000 f9d1 	bl	8007718 <_sbrk_r>
 8007376:	1c43      	adds	r3, r0, #1
 8007378:	d103      	bne.n	8007382 <sbrk_aligned+0x26>
 800737a:	f04f 34ff 	mov.w	r4, #4294967295
 800737e:	4620      	mov	r0, r4
 8007380:	bd70      	pop	{r4, r5, r6, pc}
 8007382:	1cc4      	adds	r4, r0, #3
 8007384:	f024 0403 	bic.w	r4, r4, #3
 8007388:	42a0      	cmp	r0, r4
 800738a:	d0f8      	beq.n	800737e <sbrk_aligned+0x22>
 800738c:	1a21      	subs	r1, r4, r0
 800738e:	4628      	mov	r0, r5
 8007390:	f000 f9c2 	bl	8007718 <_sbrk_r>
 8007394:	3001      	adds	r0, #1
 8007396:	d1f2      	bne.n	800737e <sbrk_aligned+0x22>
 8007398:	e7ef      	b.n	800737a <sbrk_aligned+0x1e>
 800739a:	bf00      	nop
 800739c:	24000324 	.word	0x24000324

080073a0 <_malloc_r>:
 80073a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073a4:	1ccd      	adds	r5, r1, #3
 80073a6:	f025 0503 	bic.w	r5, r5, #3
 80073aa:	3508      	adds	r5, #8
 80073ac:	2d0c      	cmp	r5, #12
 80073ae:	bf38      	it	cc
 80073b0:	250c      	movcc	r5, #12
 80073b2:	2d00      	cmp	r5, #0
 80073b4:	4606      	mov	r6, r0
 80073b6:	db01      	blt.n	80073bc <_malloc_r+0x1c>
 80073b8:	42a9      	cmp	r1, r5
 80073ba:	d904      	bls.n	80073c6 <_malloc_r+0x26>
 80073bc:	230c      	movs	r3, #12
 80073be:	6033      	str	r3, [r6, #0]
 80073c0:	2000      	movs	r0, #0
 80073c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800749c <_malloc_r+0xfc>
 80073ca:	f000 f869 	bl	80074a0 <__malloc_lock>
 80073ce:	f8d8 3000 	ldr.w	r3, [r8]
 80073d2:	461c      	mov	r4, r3
 80073d4:	bb44      	cbnz	r4, 8007428 <_malloc_r+0x88>
 80073d6:	4629      	mov	r1, r5
 80073d8:	4630      	mov	r0, r6
 80073da:	f7ff ffbf 	bl	800735c <sbrk_aligned>
 80073de:	1c43      	adds	r3, r0, #1
 80073e0:	4604      	mov	r4, r0
 80073e2:	d158      	bne.n	8007496 <_malloc_r+0xf6>
 80073e4:	f8d8 4000 	ldr.w	r4, [r8]
 80073e8:	4627      	mov	r7, r4
 80073ea:	2f00      	cmp	r7, #0
 80073ec:	d143      	bne.n	8007476 <_malloc_r+0xd6>
 80073ee:	2c00      	cmp	r4, #0
 80073f0:	d04b      	beq.n	800748a <_malloc_r+0xea>
 80073f2:	6823      	ldr	r3, [r4, #0]
 80073f4:	4639      	mov	r1, r7
 80073f6:	4630      	mov	r0, r6
 80073f8:	eb04 0903 	add.w	r9, r4, r3
 80073fc:	f000 f98c 	bl	8007718 <_sbrk_r>
 8007400:	4581      	cmp	r9, r0
 8007402:	d142      	bne.n	800748a <_malloc_r+0xea>
 8007404:	6821      	ldr	r1, [r4, #0]
 8007406:	1a6d      	subs	r5, r5, r1
 8007408:	4629      	mov	r1, r5
 800740a:	4630      	mov	r0, r6
 800740c:	f7ff ffa6 	bl	800735c <sbrk_aligned>
 8007410:	3001      	adds	r0, #1
 8007412:	d03a      	beq.n	800748a <_malloc_r+0xea>
 8007414:	6823      	ldr	r3, [r4, #0]
 8007416:	442b      	add	r3, r5
 8007418:	6023      	str	r3, [r4, #0]
 800741a:	f8d8 3000 	ldr.w	r3, [r8]
 800741e:	685a      	ldr	r2, [r3, #4]
 8007420:	bb62      	cbnz	r2, 800747c <_malloc_r+0xdc>
 8007422:	f8c8 7000 	str.w	r7, [r8]
 8007426:	e00f      	b.n	8007448 <_malloc_r+0xa8>
 8007428:	6822      	ldr	r2, [r4, #0]
 800742a:	1b52      	subs	r2, r2, r5
 800742c:	d420      	bmi.n	8007470 <_malloc_r+0xd0>
 800742e:	2a0b      	cmp	r2, #11
 8007430:	d917      	bls.n	8007462 <_malloc_r+0xc2>
 8007432:	1961      	adds	r1, r4, r5
 8007434:	42a3      	cmp	r3, r4
 8007436:	6025      	str	r5, [r4, #0]
 8007438:	bf18      	it	ne
 800743a:	6059      	strne	r1, [r3, #4]
 800743c:	6863      	ldr	r3, [r4, #4]
 800743e:	bf08      	it	eq
 8007440:	f8c8 1000 	streq.w	r1, [r8]
 8007444:	5162      	str	r2, [r4, r5]
 8007446:	604b      	str	r3, [r1, #4]
 8007448:	4630      	mov	r0, r6
 800744a:	f000 f82f 	bl	80074ac <__malloc_unlock>
 800744e:	f104 000b 	add.w	r0, r4, #11
 8007452:	1d23      	adds	r3, r4, #4
 8007454:	f020 0007 	bic.w	r0, r0, #7
 8007458:	1ac2      	subs	r2, r0, r3
 800745a:	bf1c      	itt	ne
 800745c:	1a1b      	subne	r3, r3, r0
 800745e:	50a3      	strne	r3, [r4, r2]
 8007460:	e7af      	b.n	80073c2 <_malloc_r+0x22>
 8007462:	6862      	ldr	r2, [r4, #4]
 8007464:	42a3      	cmp	r3, r4
 8007466:	bf0c      	ite	eq
 8007468:	f8c8 2000 	streq.w	r2, [r8]
 800746c:	605a      	strne	r2, [r3, #4]
 800746e:	e7eb      	b.n	8007448 <_malloc_r+0xa8>
 8007470:	4623      	mov	r3, r4
 8007472:	6864      	ldr	r4, [r4, #4]
 8007474:	e7ae      	b.n	80073d4 <_malloc_r+0x34>
 8007476:	463c      	mov	r4, r7
 8007478:	687f      	ldr	r7, [r7, #4]
 800747a:	e7b6      	b.n	80073ea <_malloc_r+0x4a>
 800747c:	461a      	mov	r2, r3
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	42a3      	cmp	r3, r4
 8007482:	d1fb      	bne.n	800747c <_malloc_r+0xdc>
 8007484:	2300      	movs	r3, #0
 8007486:	6053      	str	r3, [r2, #4]
 8007488:	e7de      	b.n	8007448 <_malloc_r+0xa8>
 800748a:	230c      	movs	r3, #12
 800748c:	6033      	str	r3, [r6, #0]
 800748e:	4630      	mov	r0, r6
 8007490:	f000 f80c 	bl	80074ac <__malloc_unlock>
 8007494:	e794      	b.n	80073c0 <_malloc_r+0x20>
 8007496:	6005      	str	r5, [r0, #0]
 8007498:	e7d6      	b.n	8007448 <_malloc_r+0xa8>
 800749a:	bf00      	nop
 800749c:	24000328 	.word	0x24000328

080074a0 <__malloc_lock>:
 80074a0:	4801      	ldr	r0, [pc, #4]	@ (80074a8 <__malloc_lock+0x8>)
 80074a2:	f7ff bf0e 	b.w	80072c2 <__retarget_lock_acquire_recursive>
 80074a6:	bf00      	nop
 80074a8:	24000320 	.word	0x24000320

080074ac <__malloc_unlock>:
 80074ac:	4801      	ldr	r0, [pc, #4]	@ (80074b4 <__malloc_unlock+0x8>)
 80074ae:	f7ff bf09 	b.w	80072c4 <__retarget_lock_release_recursive>
 80074b2:	bf00      	nop
 80074b4:	24000320 	.word	0x24000320

080074b8 <__sflush_r>:
 80074b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80074bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074c0:	0716      	lsls	r6, r2, #28
 80074c2:	4605      	mov	r5, r0
 80074c4:	460c      	mov	r4, r1
 80074c6:	d454      	bmi.n	8007572 <__sflush_r+0xba>
 80074c8:	684b      	ldr	r3, [r1, #4]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	dc02      	bgt.n	80074d4 <__sflush_r+0x1c>
 80074ce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	dd48      	ble.n	8007566 <__sflush_r+0xae>
 80074d4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80074d6:	2e00      	cmp	r6, #0
 80074d8:	d045      	beq.n	8007566 <__sflush_r+0xae>
 80074da:	2300      	movs	r3, #0
 80074dc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80074e0:	682f      	ldr	r7, [r5, #0]
 80074e2:	6a21      	ldr	r1, [r4, #32]
 80074e4:	602b      	str	r3, [r5, #0]
 80074e6:	d030      	beq.n	800754a <__sflush_r+0x92>
 80074e8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80074ea:	89a3      	ldrh	r3, [r4, #12]
 80074ec:	0759      	lsls	r1, r3, #29
 80074ee:	d505      	bpl.n	80074fc <__sflush_r+0x44>
 80074f0:	6863      	ldr	r3, [r4, #4]
 80074f2:	1ad2      	subs	r2, r2, r3
 80074f4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80074f6:	b10b      	cbz	r3, 80074fc <__sflush_r+0x44>
 80074f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80074fa:	1ad2      	subs	r2, r2, r3
 80074fc:	2300      	movs	r3, #0
 80074fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007500:	6a21      	ldr	r1, [r4, #32]
 8007502:	4628      	mov	r0, r5
 8007504:	47b0      	blx	r6
 8007506:	1c43      	adds	r3, r0, #1
 8007508:	89a3      	ldrh	r3, [r4, #12]
 800750a:	d106      	bne.n	800751a <__sflush_r+0x62>
 800750c:	6829      	ldr	r1, [r5, #0]
 800750e:	291d      	cmp	r1, #29
 8007510:	d82b      	bhi.n	800756a <__sflush_r+0xb2>
 8007512:	4a2a      	ldr	r2, [pc, #168]	@ (80075bc <__sflush_r+0x104>)
 8007514:	40ca      	lsrs	r2, r1
 8007516:	07d6      	lsls	r6, r2, #31
 8007518:	d527      	bpl.n	800756a <__sflush_r+0xb2>
 800751a:	2200      	movs	r2, #0
 800751c:	6062      	str	r2, [r4, #4]
 800751e:	04d9      	lsls	r1, r3, #19
 8007520:	6922      	ldr	r2, [r4, #16]
 8007522:	6022      	str	r2, [r4, #0]
 8007524:	d504      	bpl.n	8007530 <__sflush_r+0x78>
 8007526:	1c42      	adds	r2, r0, #1
 8007528:	d101      	bne.n	800752e <__sflush_r+0x76>
 800752a:	682b      	ldr	r3, [r5, #0]
 800752c:	b903      	cbnz	r3, 8007530 <__sflush_r+0x78>
 800752e:	6560      	str	r0, [r4, #84]	@ 0x54
 8007530:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007532:	602f      	str	r7, [r5, #0]
 8007534:	b1b9      	cbz	r1, 8007566 <__sflush_r+0xae>
 8007536:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800753a:	4299      	cmp	r1, r3
 800753c:	d002      	beq.n	8007544 <__sflush_r+0x8c>
 800753e:	4628      	mov	r0, r5
 8007540:	f7ff fec2 	bl	80072c8 <_free_r>
 8007544:	2300      	movs	r3, #0
 8007546:	6363      	str	r3, [r4, #52]	@ 0x34
 8007548:	e00d      	b.n	8007566 <__sflush_r+0xae>
 800754a:	2301      	movs	r3, #1
 800754c:	4628      	mov	r0, r5
 800754e:	47b0      	blx	r6
 8007550:	4602      	mov	r2, r0
 8007552:	1c50      	adds	r0, r2, #1
 8007554:	d1c9      	bne.n	80074ea <__sflush_r+0x32>
 8007556:	682b      	ldr	r3, [r5, #0]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d0c6      	beq.n	80074ea <__sflush_r+0x32>
 800755c:	2b1d      	cmp	r3, #29
 800755e:	d001      	beq.n	8007564 <__sflush_r+0xac>
 8007560:	2b16      	cmp	r3, #22
 8007562:	d11e      	bne.n	80075a2 <__sflush_r+0xea>
 8007564:	602f      	str	r7, [r5, #0]
 8007566:	2000      	movs	r0, #0
 8007568:	e022      	b.n	80075b0 <__sflush_r+0xf8>
 800756a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800756e:	b21b      	sxth	r3, r3
 8007570:	e01b      	b.n	80075aa <__sflush_r+0xf2>
 8007572:	690f      	ldr	r7, [r1, #16]
 8007574:	2f00      	cmp	r7, #0
 8007576:	d0f6      	beq.n	8007566 <__sflush_r+0xae>
 8007578:	0793      	lsls	r3, r2, #30
 800757a:	680e      	ldr	r6, [r1, #0]
 800757c:	bf08      	it	eq
 800757e:	694b      	ldreq	r3, [r1, #20]
 8007580:	600f      	str	r7, [r1, #0]
 8007582:	bf18      	it	ne
 8007584:	2300      	movne	r3, #0
 8007586:	eba6 0807 	sub.w	r8, r6, r7
 800758a:	608b      	str	r3, [r1, #8]
 800758c:	f1b8 0f00 	cmp.w	r8, #0
 8007590:	dde9      	ble.n	8007566 <__sflush_r+0xae>
 8007592:	6a21      	ldr	r1, [r4, #32]
 8007594:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007596:	4643      	mov	r3, r8
 8007598:	463a      	mov	r2, r7
 800759a:	4628      	mov	r0, r5
 800759c:	47b0      	blx	r6
 800759e:	2800      	cmp	r0, #0
 80075a0:	dc08      	bgt.n	80075b4 <__sflush_r+0xfc>
 80075a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80075aa:	81a3      	strh	r3, [r4, #12]
 80075ac:	f04f 30ff 	mov.w	r0, #4294967295
 80075b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075b4:	4407      	add	r7, r0
 80075b6:	eba8 0800 	sub.w	r8, r8, r0
 80075ba:	e7e7      	b.n	800758c <__sflush_r+0xd4>
 80075bc:	20400001 	.word	0x20400001

080075c0 <_fflush_r>:
 80075c0:	b538      	push	{r3, r4, r5, lr}
 80075c2:	690b      	ldr	r3, [r1, #16]
 80075c4:	4605      	mov	r5, r0
 80075c6:	460c      	mov	r4, r1
 80075c8:	b913      	cbnz	r3, 80075d0 <_fflush_r+0x10>
 80075ca:	2500      	movs	r5, #0
 80075cc:	4628      	mov	r0, r5
 80075ce:	bd38      	pop	{r3, r4, r5, pc}
 80075d0:	b118      	cbz	r0, 80075da <_fflush_r+0x1a>
 80075d2:	6a03      	ldr	r3, [r0, #32]
 80075d4:	b90b      	cbnz	r3, 80075da <_fflush_r+0x1a>
 80075d6:	f7ff fc8f 	bl	8006ef8 <__sinit>
 80075da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d0f3      	beq.n	80075ca <_fflush_r+0xa>
 80075e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80075e4:	07d0      	lsls	r0, r2, #31
 80075e6:	d404      	bmi.n	80075f2 <_fflush_r+0x32>
 80075e8:	0599      	lsls	r1, r3, #22
 80075ea:	d402      	bmi.n	80075f2 <_fflush_r+0x32>
 80075ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80075ee:	f7ff fe68 	bl	80072c2 <__retarget_lock_acquire_recursive>
 80075f2:	4628      	mov	r0, r5
 80075f4:	4621      	mov	r1, r4
 80075f6:	f7ff ff5f 	bl	80074b8 <__sflush_r>
 80075fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80075fc:	07da      	lsls	r2, r3, #31
 80075fe:	4605      	mov	r5, r0
 8007600:	d4e4      	bmi.n	80075cc <_fflush_r+0xc>
 8007602:	89a3      	ldrh	r3, [r4, #12]
 8007604:	059b      	lsls	r3, r3, #22
 8007606:	d4e1      	bmi.n	80075cc <_fflush_r+0xc>
 8007608:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800760a:	f7ff fe5b 	bl	80072c4 <__retarget_lock_release_recursive>
 800760e:	e7dd      	b.n	80075cc <_fflush_r+0xc>

08007610 <__swhatbuf_r>:
 8007610:	b570      	push	{r4, r5, r6, lr}
 8007612:	460c      	mov	r4, r1
 8007614:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007618:	2900      	cmp	r1, #0
 800761a:	b096      	sub	sp, #88	@ 0x58
 800761c:	4615      	mov	r5, r2
 800761e:	461e      	mov	r6, r3
 8007620:	da0d      	bge.n	800763e <__swhatbuf_r+0x2e>
 8007622:	89a3      	ldrh	r3, [r4, #12]
 8007624:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007628:	f04f 0100 	mov.w	r1, #0
 800762c:	bf14      	ite	ne
 800762e:	2340      	movne	r3, #64	@ 0x40
 8007630:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007634:	2000      	movs	r0, #0
 8007636:	6031      	str	r1, [r6, #0]
 8007638:	602b      	str	r3, [r5, #0]
 800763a:	b016      	add	sp, #88	@ 0x58
 800763c:	bd70      	pop	{r4, r5, r6, pc}
 800763e:	466a      	mov	r2, sp
 8007640:	f000 f848 	bl	80076d4 <_fstat_r>
 8007644:	2800      	cmp	r0, #0
 8007646:	dbec      	blt.n	8007622 <__swhatbuf_r+0x12>
 8007648:	9901      	ldr	r1, [sp, #4]
 800764a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800764e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007652:	4259      	negs	r1, r3
 8007654:	4159      	adcs	r1, r3
 8007656:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800765a:	e7eb      	b.n	8007634 <__swhatbuf_r+0x24>

0800765c <__smakebuf_r>:
 800765c:	898b      	ldrh	r3, [r1, #12]
 800765e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007660:	079d      	lsls	r5, r3, #30
 8007662:	4606      	mov	r6, r0
 8007664:	460c      	mov	r4, r1
 8007666:	d507      	bpl.n	8007678 <__smakebuf_r+0x1c>
 8007668:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800766c:	6023      	str	r3, [r4, #0]
 800766e:	6123      	str	r3, [r4, #16]
 8007670:	2301      	movs	r3, #1
 8007672:	6163      	str	r3, [r4, #20]
 8007674:	b003      	add	sp, #12
 8007676:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007678:	ab01      	add	r3, sp, #4
 800767a:	466a      	mov	r2, sp
 800767c:	f7ff ffc8 	bl	8007610 <__swhatbuf_r>
 8007680:	9f00      	ldr	r7, [sp, #0]
 8007682:	4605      	mov	r5, r0
 8007684:	4639      	mov	r1, r7
 8007686:	4630      	mov	r0, r6
 8007688:	f7ff fe8a 	bl	80073a0 <_malloc_r>
 800768c:	b948      	cbnz	r0, 80076a2 <__smakebuf_r+0x46>
 800768e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007692:	059a      	lsls	r2, r3, #22
 8007694:	d4ee      	bmi.n	8007674 <__smakebuf_r+0x18>
 8007696:	f023 0303 	bic.w	r3, r3, #3
 800769a:	f043 0302 	orr.w	r3, r3, #2
 800769e:	81a3      	strh	r3, [r4, #12]
 80076a0:	e7e2      	b.n	8007668 <__smakebuf_r+0xc>
 80076a2:	89a3      	ldrh	r3, [r4, #12]
 80076a4:	6020      	str	r0, [r4, #0]
 80076a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076aa:	81a3      	strh	r3, [r4, #12]
 80076ac:	9b01      	ldr	r3, [sp, #4]
 80076ae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80076b2:	b15b      	cbz	r3, 80076cc <__smakebuf_r+0x70>
 80076b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076b8:	4630      	mov	r0, r6
 80076ba:	f000 f81d 	bl	80076f8 <_isatty_r>
 80076be:	b128      	cbz	r0, 80076cc <__smakebuf_r+0x70>
 80076c0:	89a3      	ldrh	r3, [r4, #12]
 80076c2:	f023 0303 	bic.w	r3, r3, #3
 80076c6:	f043 0301 	orr.w	r3, r3, #1
 80076ca:	81a3      	strh	r3, [r4, #12]
 80076cc:	89a3      	ldrh	r3, [r4, #12]
 80076ce:	431d      	orrs	r5, r3
 80076d0:	81a5      	strh	r5, [r4, #12]
 80076d2:	e7cf      	b.n	8007674 <__smakebuf_r+0x18>

080076d4 <_fstat_r>:
 80076d4:	b538      	push	{r3, r4, r5, lr}
 80076d6:	4d07      	ldr	r5, [pc, #28]	@ (80076f4 <_fstat_r+0x20>)
 80076d8:	2300      	movs	r3, #0
 80076da:	4604      	mov	r4, r0
 80076dc:	4608      	mov	r0, r1
 80076de:	4611      	mov	r1, r2
 80076e0:	602b      	str	r3, [r5, #0]
 80076e2:	f7f9 f98c 	bl	80009fe <_fstat>
 80076e6:	1c43      	adds	r3, r0, #1
 80076e8:	d102      	bne.n	80076f0 <_fstat_r+0x1c>
 80076ea:	682b      	ldr	r3, [r5, #0]
 80076ec:	b103      	cbz	r3, 80076f0 <_fstat_r+0x1c>
 80076ee:	6023      	str	r3, [r4, #0]
 80076f0:	bd38      	pop	{r3, r4, r5, pc}
 80076f2:	bf00      	nop
 80076f4:	2400031c 	.word	0x2400031c

080076f8 <_isatty_r>:
 80076f8:	b538      	push	{r3, r4, r5, lr}
 80076fa:	4d06      	ldr	r5, [pc, #24]	@ (8007714 <_isatty_r+0x1c>)
 80076fc:	2300      	movs	r3, #0
 80076fe:	4604      	mov	r4, r0
 8007700:	4608      	mov	r0, r1
 8007702:	602b      	str	r3, [r5, #0]
 8007704:	f7f9 f98b 	bl	8000a1e <_isatty>
 8007708:	1c43      	adds	r3, r0, #1
 800770a:	d102      	bne.n	8007712 <_isatty_r+0x1a>
 800770c:	682b      	ldr	r3, [r5, #0]
 800770e:	b103      	cbz	r3, 8007712 <_isatty_r+0x1a>
 8007710:	6023      	str	r3, [r4, #0]
 8007712:	bd38      	pop	{r3, r4, r5, pc}
 8007714:	2400031c 	.word	0x2400031c

08007718 <_sbrk_r>:
 8007718:	b538      	push	{r3, r4, r5, lr}
 800771a:	4d06      	ldr	r5, [pc, #24]	@ (8007734 <_sbrk_r+0x1c>)
 800771c:	2300      	movs	r3, #0
 800771e:	4604      	mov	r4, r0
 8007720:	4608      	mov	r0, r1
 8007722:	602b      	str	r3, [r5, #0]
 8007724:	f7f9 f994 	bl	8000a50 <_sbrk>
 8007728:	1c43      	adds	r3, r0, #1
 800772a:	d102      	bne.n	8007732 <_sbrk_r+0x1a>
 800772c:	682b      	ldr	r3, [r5, #0]
 800772e:	b103      	cbz	r3, 8007732 <_sbrk_r+0x1a>
 8007730:	6023      	str	r3, [r4, #0]
 8007732:	bd38      	pop	{r3, r4, r5, pc}
 8007734:	2400031c 	.word	0x2400031c

08007738 <_init>:
 8007738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800773a:	bf00      	nop
 800773c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800773e:	bc08      	pop	{r3}
 8007740:	469e      	mov	lr, r3
 8007742:	4770      	bx	lr

08007744 <_fini>:
 8007744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007746:	bf00      	nop
 8007748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800774a:	bc08      	pop	{r3}
 800774c:	469e      	mov	lr, r3
 800774e:	4770      	bx	lr
